diff --git a/.buildscript/deploy_snapshot.sh b/.buildscript/deploy_snapshot.sh
index 819e105d..8d8f6cb8 100755
--- a/.buildscript/deploy_snapshot.sh
+++ b/.buildscript/deploy_snapshot.sh
@@ -21,6 +21,6 @@ elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then
   echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'."
 else
   echo "Deploying snapshot..."
-  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true
+  ./gradlew uploadArchives
   echo "Snapshot deployed!"
 fi
diff --git a/.buildscript/settings.xml b/.buildscript/settings.xml
deleted file mode 100644
index 91f444b2..00000000
--- a/.buildscript/settings.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<settings>
-  <servers>
-    <server>
-      <id>sonatype-nexus-snapshots</id>
-      <username>${env.CI_DEPLOY_USERNAME}</username>
-      <password>${env.CI_DEPLOY_PASSWORD}</password>
-    </server>
-  </servers>
-</settings>
diff --git a/.gitignore b/.gitignore
index 133735f7..92007a21 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,10 +9,6 @@ build
 out
 lib
 
-target
-pom.xml.*
-release.properties
-
 .idea
 *.iml
 classes
@@ -20,3 +16,10 @@ classes
 obj
 
 .DS_Store
+
+# Gradle
+.gradle
+jniLibs
+build
+local.properties
+reports
diff --git a/.travis.yml b/.travis.yml
index da0572a8..009df7de 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,22 +2,30 @@ language: android
 
 android:
   components:
-    - build-tools-20.0.0
-    - android-16
-  licenses:
-    - android-sdk-license-5be876d5
+    - tools
+    - platform-tools
+    - build-tools-24.0.2
+    - android-24
+    - extra-android-m2repository
+    - sys-img-armeabi-v7a-android-18
 
 jdk:
-  - oraclejdk7
   - oraclejdk8
 
+before_script:
+  # Create and start an emulator for instrumentation tests.
+  - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a
+  - emulator -avd test -no-audio -no-window &
+  - android-wait-for-emulator
+  - adb shell input keyevent 82
+
 after_success:
   - .buildscript/deploy_snapshot.sh
 
 env:
   global:
-    - secure: "WGiRUh1V4AWwBsCvMjjxYih+HiyOjlMS9Tz5UqxPVl7h6FccKDQmAaWVB46iwteZsgDQZBJNO+9gDrsUYuOQNW4XLSIEYdPoQAvRbBi+ExhaC/m3imsumw+SJd95MYePE2Z4UD5D4AUQi+QT/LnaVYps1n+IrGat8cSzC9Nhz6A="
-    - secure: "PQFQlep/9TwKicd4PkAS2sB7WqeRyVP8ZQF5sPnyFCHpLrqYQmKOYXaNnxqAlBoJ+UOGYxfKxFcDp7jE/jSaTTDx+zPoG/eVt6X0wq65Qq2t/Mw2b9dPzHF/MYLDRag4D/g4YF59xg6gdP5jFojr7D58ZePmp+EOcBDOFduf+Nk="
+    - secure: "ESbreW4FNMPQhV1zbFb9iBvhFWFbVHecaig3Si3+4nrJCMn9x4nqB18ZcU+Aviw67WQNcuSH4I0Hl08uknl+kzE/xKEfPLmu28bptXRCSued49aL11i2aQmRj5nqP2yxkinhtRGOQxzIo56NmFt7sIcEXODM3D5a6q7s9tlvPfw="
+    - secure: "JWEeqx0CWBqAkjcREHUg3Ei8wxqp59HZag8EidSLwmekgPJQwipwuEeXMZyPCGJCP+4ijUirtS/hRApi37BW0LYdt+XR7dI1TSZ0HFLTLqSPfWfsUcjmGpmoqVUv8FLVhC+KA42YeEhqkEaCUW92gJeAyK8swxDqGHAPT/sfKRA="
 
 branches:
   except:
@@ -31,3 +39,5 @@ sudo: false
 cache:
   directories:
     - $HOME/.m2
+    - $HOME/.gradle
+
diff --git a/CHANGELOG.md b/CHANGELOG.md
index b83b766f..fbeef39d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,106 @@
 Change Log
 ==========
 
+Version 8.4.0 *(2016-08-26)*
+----------------------------
+
+ * New: `@BindFloat` annotation for dimensions whose format is of type 'float'. See the annotation for more
+   information.
+ * Generated constructors are now annotated with `@UiThread` and non-final, base classes `unbind()` methods
+   are annotated with `@CallSuper`.
+
+
+Version 8.3.0 *(2016-08-23)*
+----------------------------
+
+ * New: Support for Jack compiler in application projects.
+ * Fix: Generate ~20% less code and ~40% less methods.
+ * Fix: Allow `@BindView` to reference types which are generated by other annotation processors.
+ * Experimental: The generated view binding class can now be used directly. This allows ProGuard shrinking,
+   optimization, and obfuscation to work without any rules being needed. For a class `Test`, the binding
+   class will be named `Test_ViewBinding`. Calling its constructor will bind the instance passed in, and
+   the create object is also the implementation of `Unbinder` that can be used to unbind the views.
+   Note: The API of this generated code is subject to backwards-incompatible changes until v9.0.
+
+
+Version 8.2.1 *(2016-07-11)*
+----------------------------
+
+ * Fix: Do not emit `android.R` imports in generated code.
+ * Fix: Ensure the processor does not crash when scanning for `R` classes. This can occur when used in a
+   Kotlin project.
+
+
+Version 8.2.0 *(2016-07-10)*
+----------------------------
+
+ * New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for
+   details.
+ * New: Generated code now emits `R` references instead of raw integer IDs.
+ * Fix: `@OnPageChange` listener binding now uses the 'add'/'remove' methods on `ViewPager` instead of 'set'.
+
+
+Version 8.1.0 *(2016-06-14)*
+----------------------------
+
+ * New: Change the structure of generated view binders to optimize for performance and generated code. This
+   should result in faster binding (not that it's slow) and a reduction of methods.
+ * Fix: Call the correct method on `TextView` to unbind `@OnTextChanged` uses.
+ * Fix: Properly handle package names which contain uppercase letters.
+
+
+Version 8.0.1 *(2016-04-27)*
+----------------------------
+
+ * Fix: ProGuard rules now prevent obfuscation of only types which reference ButterKnife annotations.
+ * Eliminate some of the generated machinery when referenced from `final` types.
+
+
+Version 8.0.0 *(2016-04-25)*
+----------------------------
+
+ *  `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively).
+ *  Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces
+    the `unbind` API and adds support for being able to clear listeners.
+ *  New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields.
+ *  New: `@BindBitmap` binds `Bitmap` instances from resources to fields.
+ *  `@BindDrawable` now supports a `tint` field which accepts a theme attribute.
+ *  The runtime and compiler are now split into two artifacts.
+
+    ```groovy
+    compile 'com.jakewharton:butterknife:8.0.0'
+    apt 'com.jakewharton:butterknife-compiler:8.0.0'
+    ```
+ *  New: `apply` overloads which accept a single view and arrays of views.
+ *  ProGuard rules now ship inside of the library and are included automatically.
+ *  `@Optional` annotation is back to mark methods as being optional.
+
+
+Version 7.0.1 *(2015-06-30)*
+----------------------------
+
+ * Fix: Correct `ClassCastException` which occurred when `@Nullable` array bindings had missing views.
+
+
+Version 7.0.0 *(2015-06-27)*
+----------------------------
+
+ * `@Bind` replaces `@InjectView` and `@InjectViews`.
+ * `ButterKnife.bind` and `ButterKnife.unbind` replaces `ButterKnife.inject` and `ButterKnife.reset`, respectively.
+ * `@Optional` has been removed. Use `@Nullable` from the 'support-annotations' library, or any other annotation
+   named "Nullable".
+ * New: Resource binding annotations!
+   * `@BindBool` binds an `R.bool` ID to a `boolean` field.
+   * `@BindColor` binds an `R.color` ID to an `int` or `ColorStateList` field.
+   * `@BindDimen` binds an `R.dimen` ID to an `int` (for pixel size) or `float` (for exact value) field.
+   * `@BindDrawable` binds an `R.drawable` ID to a `Drawable` field.
+   * `@BindInt` binds an `R.int` ID to an `int` field.
+   * `@BindString` binds an `R.string` ID to a `String` field.
+ * Fix: Missing views will be filtered out from list and array bindings.
+ * Note: If you are using Proguard, the generated class name has changed from being suffixed with `$$ViewInjector`
+   to `$$ViewBinder`.
+
+
 Version 6.1.0 *(2015-01-29)*
 ----------------------------
 
diff --git a/README.md b/README.md
index a27fe2dd..a83adde5 100644
--- a/README.md
+++ b/README.md
@@ -6,15 +6,18 @@ Butter Knife
 Field and method binding for Android views which uses annotation processing to generate boilerplate
 code for you.
 
- * Eliminate `findViewById` calls by using `@FindView` on fields.
- * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,
+ * Eliminate `findViewById` calls by using `@BindView` on fields.
+ * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
+ * Eliminate resource lookups by using resource annotations on fields.
 
 ```java
 class ExampleActivity extends Activity {
-  @FindView(R.id.user) EditText username;
-  @FindView(R.id.pass) EditText password;
+  @BindView(R.id.user) EditText username;
+  @BindView(R.id.pass) EditText password;
+
+  @BindString(R.string.login_error) String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -38,22 +41,78 @@ __Remember: A butter knife is like [a dagger][1] only infinitely less sharp.__
 Download
 --------
 
-Download [the latest JAR][2] or grab via Maven:
-```xml
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife</artifactId>
-  <version>6.1.0</version>
-</dependency>
+Configure your project-level `build.gradle` to include the 'android-apt' plugin:
+
+```groovy
+buildscript {
+  repositories {
+    mavenCentral()
+   }
+  dependencies {
+    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+  }
+}
 ```
-or Gradle:
+
+Then, apply the 'android-apt' plugin in your module-level `build.gradle` and add the Butter Knife
+dependencies:
+
 ```groovy
-compile 'com.jakewharton:butterknife:6.1.0'
+apply plugin: 'android-apt'
+
+android {
+  ...
+}
+
+dependencies {
+  compile 'com.jakewharton:butterknife:8.4.0'
+  apt 'com.jakewharton:butterknife-compiler:8.4.0'
+}
 ```
 
+Note: If you are using the new Jack compiler with version 2.2.0 or newer you do not need the
+'android-apt' plugin and can instead replace `apt` with `annotationProcessor` when declaring the
+compiler dependency.
+
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
 
 
+
+Library projects
+--------------------
+
+To use Butter Knife in a library, add the plugin to your `buildscript`:
+
+```groovy
+buildscript {
+  repositories {
+    mavenCentral()
+   }
+  dependencies {
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0'
+  }
+}
+```
+
+and then apply it in your module:
+
+```groovy
+apply plugin: 'com.android.library'
+apply plugin: 'com.jakewharton.butterknife'
+```
+
+Now make sure you use `R2` instead of `R` inside all Butter Knife annotations.
+
+```java
+class ExampleActivity extends Activity {
+  @BindView(R2.id.user) EditText username;
+  @BindView(R2.id.pass) EditText password;
+...
+}
+```
+
+
+
 License
 -------
 
diff --git a/RELEASING.md b/RELEASING.md
new file mode 100644
index 00000000..87290eb0
--- /dev/null
+++ b/RELEASING.md
@@ -0,0 +1,16 @@
+Releasing
+========
+
+ 1. Change the version in `gradle.properties` to a non-SNAPSHOT verson.
+ 2. Update the `CHANGELOG.md` for the impending release.
+ 3. Update the `README.md` with the new version.
+ 4. `git commit -am "Prepare for release X.Y.Z."` (where X.Y.Z is the new version)
+ 5. `./gradlew clean uploadArchives`.
+ 6. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+ 7. `git tag -a X.Y.X -m "Version X.Y.Z"` (where X.Y.Z is the new version)
+ 8. Update the `gradle.properties` to the next SNAPSHOT version.
+ 9. `git commit -am "Prepare next development version."`
+ 10. `git push && git push --tags`
+ 11. Update the two sample modules to point to the newly released version.
+
+If step 5 or 6 fails, drop the Sonatype repo, fix the problem, commit, and start again at step 5.
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 00000000..5bfb85a5
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,87 @@
+subprojects { project ->
+  group = GROUP
+  version = VERSION_NAME
+
+  repositories {
+    mavenCentral()
+  }
+
+  if (!project.name.equals('butterknife-gradle-plugin')) {
+    apply plugin: 'checkstyle'
+
+    task checkstyle(type: Checkstyle) {
+      configFile rootProject.file('checkstyle.xml')
+      source 'src/main/java'
+      ignoreFailures false
+      showViolations true
+      include '**/*.java'
+
+      classpath = files()
+    }
+
+    afterEvaluate {
+      if (project.tasks.findByName('check')) {
+        check.dependsOn('checkstyle')
+      }
+    }
+  }
+
+  buildscript {
+    repositories {
+      mavenCentral()
+      maven {
+        url "https://plugins.gradle.org/m2/"
+      }
+    }
+    dependencies {
+      classpath 'com.android.tools.build:gradle:2.1.3'
+      classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2'
+    }
+  }
+}
+
+ext {
+  minSdkVersion = 9
+  targetSdkVersion = 24
+  compileSdkVersion = 24
+  buildToolsVersion = '24.0.2'
+  sourceCompatibilityVersion = JavaVersion.VERSION_1_7
+  targetCompatibilityVersion = JavaVersion.VERSION_1_7
+}
+
+def androidToolsVersion = '25.1.2'
+def supportLibraryVersion = '24.2.1'
+def butterknifeLatestReleaseVersion = '8.4.0'
+
+ext.deps = [
+    // Android
+    android: 'com.google.android:android:4.1.1.4',
+    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",
+    supportAnnotations: "com.android.support:support-annotations:$supportLibraryVersion",
+    supportTestRunner: 'com.android.support.test:runner:0.5',
+    androidGradle: 'com.android.tools.build:gradle:2.1.3',
+    lint: "com.android.tools.lint:lint:$androidToolsVersion",
+    lintApi: "com.android.tools.lint:lint-api:$androidToolsVersion",
+    lintChecks: "com.android.tools.lint:lint-checks:$androidToolsVersion",
+    lintTests: "com.android.tools.lint:lint-tests:$androidToolsVersion",
+
+    // Square
+    javapoet: 'com.squareup:javapoet:1.7.0',
+
+    // Third Party
+    javaparser: 'com.github.javaparser:javaparser-core:2.4.0',
+
+    // Test dependencies
+    junit: 'junit:junit:4.12',
+    truth: 'com.google.truth:truth:0.28',
+    robolectric: 'org.robolectric:robolectric:3.1.2',
+    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',
+    compiletesting: 'com.google.testing.compile:compile-testing:0.9',
+    autoservice: 'com.google.auto.service:auto-service:1.0-rc2',
+    autocommon: 'com.google.auto:auto-common:0.6',
+
+
+    butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",
+    butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion"
+]
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
new file mode 100644
index 00000000..611cb1bc
--- /dev/null
+++ b/butterknife-annotations/build.gradle
@@ -0,0 +1,25 @@
+apply plugin: 'java'
+apply plugin: 'checkstyle'
+
+def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
+def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
+for (File file : sdkHandler.sdkLoader.repositories) {
+  repositories.maven {
+    url = file.toURI()
+  }
+}
+
+sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
+targetCompatibility = rootProject.ext.targetCompatibilityVersion
+
+checkstyle {
+  configFile rootProject.file('checkstyle.xml')
+  showViolations true
+}
+
+dependencies {
+  compileOnly deps.android
+  compile deps.supportAnnotations
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-annotations/gradle.properties b/butterknife-annotations/gradle.properties
new file mode 100644
index 00000000..11d49ada
--- /dev/null
+++ b/butterknife-annotations/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Butterknife Annotations
+POM_ARTIFACT_ID=butterknife-annotations
+POM_PACKAGING=jar
diff --git a/butterknife-annotations/src/main/java/butterknife/BindArray.java b/butterknife-annotations/src/main/java/butterknife/BindArray.java
new file mode 100644
index 00000000..b2f7be27
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java
@@ -0,0 +1,38 @@
+package butterknife;
+
+import android.support.annotation.ArrayRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified array resource ID. The type of array will be inferred from the
+ * annotated element.
+ *
+ * String array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.countries) String[] countries;
+ * </code></pre>
+ *
+ * Int array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.phones) int[] phones;
+ * </code></pre>
+ *
+ * Text array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.options) CharSequence[] options;
+ * </code></pre>
+ *
+ * {@link android.content.res.TypedArray}:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.icons) TypedArray icons;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindArray {
+  /** Array resource ID to which the field will be bound. */
+  @ArrayRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
new file mode 100644
index 00000000..e12be465
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import android.graphics.Bitmap;
+import android.support.annotation.DrawableRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to a {@link Bitmap} from the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindBitmap(R.drawable.logo) Bitmap logo;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindBitmap {
+  /** Drawable resource ID from which the {@link Bitmap} will be created. */
+  @DrawableRes int value();
+}
diff --git a/butterknife/src/main/java/butterknife/ResourceBool.java b/butterknife-annotations/src/main/java/butterknife/BindBool.java
similarity index 72%
rename from butterknife/src/main/java/butterknife/ResourceBool.java
rename to butterknife-annotations/src/main/java/butterknife/BindBool.java
index 35c09686..89112ac8 100644
--- a/butterknife/src/main/java/butterknife/ResourceBool.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.BoolRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -9,11 +10,11 @@
 /**
  * Bind a field to the specified boolean resource ID.
  * <pre><code>
- * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceBool {
+public @interface BindBool {
   /** Boolean resource ID to which the field will be bound. */
-  int value();
+  @BoolRes int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceColor.java b/butterknife-annotations/src/main/java/butterknife/BindColor.java
similarity index 65%
rename from butterknife/src/main/java/butterknife/ResourceColor.java
rename to butterknife-annotations/src/main/java/butterknife/BindColor.java
index 06844660..002616e3 100644
--- a/butterknife/src/main/java/butterknife/ResourceColor.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.ColorRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -10,12 +11,12 @@
  * Bind a field to the specified color resource ID. Type can be {@code int} or
  * {@link android.content.res.ColorStateList}.
  * <pre><code>
- * {@literal @}ResourceColor(R.color.background_green) int green;
- * {@literal @}ResourceColor(R.color.background_green_selector) ColorStateList greenSelector;
+ * {@literal @}BindColor(R.color.background_green) int green;
+ * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceColor {
+public @interface BindColor {
   /** Color resource ID to which the field will be bound. */
-  int value();
+  @ColorRes int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceDimen.java b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
similarity index 68%
rename from butterknife/src/main/java/butterknife/ResourceDimen.java
rename to butterknife-annotations/src/main/java/butterknife/BindDimen.java
index 9f1f67a0..172871f8 100644
--- a/butterknife/src/main/java/butterknife/ResourceDimen.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.DimenRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -10,12 +11,12 @@
  * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
  * {@code float} for exact amount.
  * <pre><code>
- * {@literal @}ResourceDimen(R.dimen.horizontal_gap) int gapPx;
- * {@literal @}ResourceDimen(R.dimen.horizontal_gap) float gap;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) int gapPx;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceDimen {
+public @interface BindDimen {
   /** Dimension resource ID to which the field will be bound. */
-  int value();
+  @DimenRes int value();
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
new file mode 100644
index 00000000..a30d20dd
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import android.support.annotation.AttrRes;
+import android.support.annotation.DrawableRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindDrawable(R.drawable.placeholder)
+ * Drawable placeholder;
+ * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent)
+ * Drawable tintedPlaceholder;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindDrawable {
+  /** Drawable resource ID to which the field will be bound. */
+  @DrawableRes int value();
+
+  /** Color attribute resource ID that is used to tint the drawable. */
+  @AttrRes int tint() default 0;
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFloat.java b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
new file mode 100644
index 00000000..49a1a482
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
@@ -0,0 +1,24 @@
+package butterknife;
+
+import android.support.annotation.DimenRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified dimension resource ID whose type is explicitly defined as float.
+ * <p>
+ * This is different than simply reading a normal dimension as a float value which
+ * {@link BindDimen @BindDimen} supports. The resource must be defined as a float like
+ * {@code <item name="whatever" format="float" type="dimen">1.1</item>}.
+ * <pre><code>
+ * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindFloat {
+  /** Float resource ID to which the field will be bound. */
+  @DimenRes int value();
+}
diff --git a/butterknife/src/main/java/butterknife/ResourceInt.java b/butterknife-annotations/src/main/java/butterknife/BindInt.java
similarity index 72%
rename from butterknife/src/main/java/butterknife/ResourceInt.java
rename to butterknife-annotations/src/main/java/butterknife/BindInt.java
index b7a25adb..7c683548 100644
--- a/butterknife/src/main/java/butterknife/ResourceInt.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IntegerRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -9,11 +10,11 @@
 /**
  * Bind a field to the specified integer resource ID.
  * <pre><code>
- * {@literal @}ResourceInt(R.int.columns) int columns;
+ * {@literal @}BindInt(R.int.columns) int columns;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceInt {
+public @interface BindInt {
   /** Integer resource ID to which the field will be bound. */
-  int value();
+  @IntegerRes int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceString.java b/butterknife-annotations/src/main/java/butterknife/BindString.java
similarity index 69%
rename from butterknife/src/main/java/butterknife/ResourceString.java
rename to butterknife-annotations/src/main/java/butterknife/BindString.java
index c16ffe88..ff82aa99 100644
--- a/butterknife/src/main/java/butterknife/ResourceString.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindString.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.StringRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -9,11 +10,11 @@
 /**
  * Bind a field to the specified string resource ID.
  * <pre><code>
- * {@literal @}ResourceString(R.string.username_error) String usernameErrorText;
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceString {
+public @interface BindString {
   /** String resource ID to which the field will be bound. */
-  int value();
+  @StringRes int value();
 }
diff --git a/butterknife/src/main/java/butterknife/FindView.java b/butterknife-annotations/src/main/java/butterknife/BindView.java
similarity index 75%
rename from butterknife/src/main/java/butterknife/FindView.java
rename to butterknife-annotations/src/main/java/butterknife/BindView.java
index 7a84a73b..4770bf69 100644
--- a/butterknife/src/main/java/butterknife/FindView.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindView.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -10,11 +11,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}FindView(R.id.title) TextView title;
+ * {@literal @}BindView(R.id.title) TextView title;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface FindView {
+public @interface BindView {
   /** View ID to which the field will be bound. */
-  int value();
+  @IdRes int value();
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindViews.java b/butterknife-annotations/src/main/java/butterknife/BindViews.java
new file mode 100644
index 00000000..07a0499c
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java
@@ -0,0 +1,22 @@
+package butterknife;
+
+import android.support.annotation.IdRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the view for the specified ID. The view will automatically be cast to the field
+ * type.
+ * <pre><code>
+ * {@literal @}BindViews({ R.id.title, R.id.subtitle })
+ * List&lt;TextView&gt; titles;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindViews {
+  /** View IDs to which the field will be bound. */
+  @IdRes int[] value();
+}
diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
similarity index 94%
rename from butterknife/src/main/java/butterknife/OnCheckedChanged.java
rename to butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
index 198a5c8d..b590a037 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -40,5 +41,5 @@
 )
 public @interface OnCheckedChanged {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
similarity index 92%
rename from butterknife/src/main/java/butterknife/OnClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnClick.java
index 6f9aaef2..3671a751 100644
--- a/butterknife/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -36,5 +37,5 @@
 )
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
similarity index 94%
rename from butterknife/src/main/java/butterknife/OnEditorAction.java
rename to butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
index 922e588d..6c02f264 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -44,5 +45,5 @@
 )
 public @interface OnEditorAction {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnFocusChange.java b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
similarity index 93%
rename from butterknife/src/main/java/butterknife/OnFocusChange.java
rename to butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
index 075b5206..88c55425 100644
--- a/butterknife/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -39,5 +40,5 @@
 )
 public @interface OnFocusChange {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
similarity index 94%
rename from butterknife/src/main/java/butterknife/OnItemClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 36d4536b..1c20ff30 100644
--- a/butterknife/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -41,5 +42,5 @@
 )
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
similarity index 94%
rename from butterknife/src/main/java/butterknife/OnItemLongClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index f6ef8e6d..afc49b72 100644
--- a/butterknife/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -45,5 +46,5 @@
 )
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemSelected.java b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
similarity index 96%
rename from butterknife/src/main/java/butterknife/OnItemSelected.java
rename to butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
index 942fa724..500a8db1 100644
--- a/butterknife/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -42,7 +43,7 @@
 )
 public @interface OnItemSelected {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.ITEM_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
similarity index 93%
rename from butterknife/src/main/java/butterknife/OnLongClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 2ebc6c41..9cc1c9f3 100644
--- a/butterknife/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -40,5 +41,5 @@
 )
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
similarity index 92%
rename from butterknife/src/main/java/butterknife/OnPageChange.java
rename to butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index 8c7e2a1e..3c792e6d 100644
--- a/butterknife/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -30,13 +31,14 @@
 @Retention(CLASS)
 @ListenerClass(
     targetType = "android.support.v4.view.ViewPager",
-    setter = "setOnPageChangeListener",
+    setter = "addOnPageChangeListener",
+    remover = "removeOnPageChangeListener",
     type = "android.support.v4.view.ViewPager.OnPageChangeListener",
     callbacks = OnPageChange.Callback.class
 )
 public @interface OnPageChange {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.PAGE_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnTextChanged.java b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
similarity index 94%
rename from butterknife/src/main/java/butterknife/OnTextChanged.java
rename to butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
index 7302bd6c..89adb820 100644
--- a/butterknife/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.text.TextWatcher;
 import android.view.View;
 import butterknife.internal.ListenerClass;
@@ -35,12 +36,13 @@
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "addTextChangedListener",
+    remover = "removeTextChangedListener",
     type = "android.text.TextWatcher",
     callbacks = OnTextChanged.Callback.class
 )
 public @interface OnTextChanged {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.TEXT_CHANGED;
diff --git a/butterknife/src/main/java/butterknife/OnTouch.java b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
similarity index 93%
rename from butterknife/src/main/java/butterknife/OnTouch.java
rename to butterknife-annotations/src/main/java/butterknife/OnTouch.java
index 144240c5..dc4b69e7 100644
--- a/butterknife/src/main/java/butterknife/OnTouch.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -42,5 +43,5 @@
 )
 public @interface OnTouch {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/Optional.java b/butterknife-annotations/src/main/java/butterknife/Optional.java
new file mode 100644
index 00000000..c525a26a
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/Optional.java
@@ -0,0 +1,17 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Denote that the view specified by the injection is not required to be present.
+ * <pre><code>
+ * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(METHOD)
+public @interface Optional {
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerClass.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
similarity index 74%
rename from butterknife/src/main/java/butterknife/internal/ListenerClass.java
rename to butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
index 1c992c2f..e6d3ed5f 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
@@ -10,15 +10,18 @@
 public @interface ListenerClass {
   String targetType();
 
-  /** Name of the setter method on the {@link #targetType() target type} for the listener. */
+  /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */
   String setter();
 
+  /**
+   * Name of the method on the {@linkplain #targetType() target type} to remove the listener. If
+   * empty {@link #setter()} will be used by default.
+   */
+  String remover() default "";
+
   /** Fully-qualified class name of the listener type. */
   String type();
 
-  /** The number of generic arguments for the type. This used used for casting the view. */
-  int genericArguments() default 0;
-
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
 
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java
similarity index 91%
rename from butterknife/src/main/java/butterknife/internal/ListenerMethod.java
rename to butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java
index 31ab24f0..ca62d675 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java
@@ -14,7 +14,7 @@
   /** List of method parameters. If the type is not a primitive it must be fully-qualified. */
   String[] parameters() default { };
 
-  /** Primative or fully-qualified return type of the listener method. May also be {@code void}. */
+  /** Primitive or fully-qualified return type of the listener method. May also be {@code void}. */
   String returnType() default "void";
 
   /** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
new file mode 100644
index 00000000..e917f86b
--- /dev/null
+++ b/butterknife-compiler/build.gradle
@@ -0,0 +1,33 @@
+apply plugin: 'java'
+apply plugin: 'checkstyle'
+
+sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
+targetCompatibility = rootProject.ext.targetCompatibilityVersion
+
+def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
+def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
+for (File file : sdkHandler.sdkLoader.repositories) {
+  repositories.maven {
+    url = file.toURI()
+  }
+}
+
+dependencies {
+  compile project(':butterknife-annotations')
+  compile deps.autoservice
+  compile deps.autocommon
+  compile deps.javapoet
+  compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+
+  testCompile deps.junit
+  testCompile deps.truth
+}
+
+checkstyle {
+  configFile rootProject.file('checkstyle.xml')
+  showViolations true
+  //Remove this when tests are less verbose, i.e. using JavaPoet
+  sourceSets = [sourceSets.main]
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-compiler/gradle.properties b/butterknife-compiler/gradle.properties
new file mode 100644
index 00000000..ae693e1b
--- /dev/null
+++ b/butterknife-compiler/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Butterknife Compiler
+POM_ARTIFACT_ID=butterknife-compiler
+POM_PACKAGING=jar
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
new file mode 100644
index 00000000..88682d36
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -0,0 +1,660 @@
+package butterknife.compiler;
+
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import com.google.common.collect.ImmutableList;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.WildcardTypeName;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+
+import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
+import static com.google.auto.common.MoreElements.getPackage;
+import static java.util.Collections.singletonList;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PUBLIC;
+
+/** A set of all the bindings requested by a single type. */
+final class BindingSet {
+  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");
+  private static final ClassName VIEW = ClassName.get("android.view", "View");
+  private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
+  private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
+  private static final ClassName UI_THREAD =
+      ClassName.get("android.support.annotation", "UiThread");
+  private static final ClassName CALL_SUPER =
+      ClassName.get("android.support.annotation", "CallSuper");
+  private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
+  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
+  static final ClassName CONTEXT_COMPAT =
+      ClassName.get("android.support.v4.content", "ContextCompat");
+
+  private final TypeName targetTypeName;
+  private final ClassName bindingClassName;
+  private final boolean isFinal;
+  private final List<ViewBindings> viewBindings;
+  private final List<FieldCollectionViewBinding> collectionBindings;
+  private final List<ResourceBinding> resourceBindings;
+  private final BindingSet parentBinding;
+
+  private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
+      Collection<ViewBindings> viewBindings,
+      Collection<FieldCollectionViewBinding> collectionBindings,
+      Collection<ResourceBinding> resourceBindings, BindingSet parentBinding) {
+    this.isFinal = isFinal;
+    this.targetTypeName = targetTypeName;
+    this.bindingClassName = bindingClassName;
+    this.viewBindings = ImmutableList.copyOf(viewBindings);
+    this.collectionBindings = ImmutableList.copyOf(collectionBindings);
+    this.resourceBindings = ImmutableList.copyOf(resourceBindings);
+    this.parentBinding = parentBinding;
+  }
+
+  JavaFile brewJava(int sdk) {
+    return JavaFile.builder(bindingClassName.packageName(), createType(sdk))
+        .addFileComment("Generated code from Butter Knife. Do not modify!")
+        .build();
+  }
+
+  private TypeSpec createType(int sdk) {
+    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())
+        .addModifiers(PUBLIC);
+    if (isFinal) {
+      result.addModifiers(FINAL);
+    }
+
+    if (parentBinding != null) {
+      result.superclass(parentBinding.bindingClassName);
+    } else {
+      result.addSuperinterface(UNBINDER);
+    }
+
+    if (hasTargetField()) {
+      result.addField(targetTypeName, "target", PRIVATE);
+    }
+
+    if (!constructorNeedsView()) {
+      // Add a delegating constructor with a target type + view signature for reflective use.
+      result.addMethod(createBindingViewDelegateConstructor(targetTypeName));
+    }
+    result.addMethod(createBindingConstructor(targetTypeName, sdk));
+
+    if (hasViewBindings() || parentBinding == null) {
+      result.addMethod(createBindingUnbindMethod(result, targetTypeName));
+    }
+
+    return result.build();
+  }
+
+  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {
+    return MethodSpec.constructorBuilder()
+        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    "
+                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",
+            bindingClassName, targetType, CONTEXT)
+        .addAnnotation(Deprecated.class)
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetType, "target")
+        .addParameter(VIEW, "source")
+        .addStatement(("this(target, source.getContext())"))
+        .build();
+  }
+
+  private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {
+    MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC);
+
+    if (hasMethodBindings()) {
+      constructor.addParameter(targetType, "target", FINAL);
+    } else {
+      constructor.addParameter(targetType, "target");
+    }
+
+    if (constructorNeedsView()) {
+      constructor.addParameter(VIEW, "source");
+    } else {
+      constructor.addParameter(CONTEXT, "context");
+    }
+
+    if (hasUnqualifiedResourceBindings()) {
+      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime.
+      constructor.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
+          .addMember("value", "$S", "ResourceType")
+          .build());
+    }
+
+    if (parentBinding != null) {
+      if (parentBinding.constructorNeedsView()) {
+        constructor.addStatement("super(target, source)");
+      } else if (constructorNeedsView()) {
+        constructor.addStatement("super(target, source.getContext())");
+      } else {
+        constructor.addStatement("super(target, context)");
+      }
+      constructor.addCode("\n");
+    }
+    if (hasTargetField()) {
+      constructor.addStatement("this.target = target");
+      constructor.addCode("\n");
+    }
+
+    if (hasViewBindings()) {
+      if (hasViewLocal()) {
+        // Local variable in which all views will be temporarily stored.
+        constructor.addStatement("$T view", VIEW);
+      }
+      for (ViewBindings bindings : viewBindings) {
+        addViewBindings(constructor, bindings);
+      }
+      for (FieldCollectionViewBinding binding : collectionBindings) {
+        constructor.addStatement("$L", binding.render());
+      }
+
+      if (!resourceBindings.isEmpty()) {
+        constructor.addCode("\n");
+      }
+    }
+
+    if (!resourceBindings.isEmpty()) {
+      if (constructorNeedsView()) {
+        constructor.addStatement("$T context = source.getContext()", CONTEXT);
+      }
+      if (hasResourceBindingsNeedingResource(sdk)) {
+        constructor.addStatement("$T res = context.getResources()", RESOURCES);
+      }
+      for (ResourceBinding binding : resourceBindings) {
+        constructor.addStatement("$L", binding.render(sdk));
+      }
+    }
+
+    return constructor.build();
+  }
+
+  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
+      TypeName targetType) {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC);
+    if (!isFinal && parentBinding == null) {
+      result.addAnnotation(CALL_SUPER);
+    }
+
+    if (hasTargetField()) {
+      if (hasFieldBindings()) {
+        result.addStatement("$T target = this.target", targetType);
+      }
+      result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
+          "Bindings already cleared.");
+      result.addStatement("$N = null", hasFieldBindings() ? "this.target" : "target");
+      result.addCode("\n");
+      for (ViewBindings bindings : viewBindings) {
+        if (bindings.getFieldBinding() != null) {
+          result.addStatement("target.$L = null", bindings.getFieldBinding().getName());
+        }
+      }
+      for (FieldCollectionViewBinding binding : collectionBindings) {
+        result.addStatement("target.$L = null", binding.name);
+      }
+    }
+
+    if (hasMethodBindings()) {
+      result.addCode("\n");
+      for (ViewBindings bindings : viewBindings) {
+        addFieldAndUnbindStatement(bindingClass, result, bindings);
+      }
+    }
+
+    if (parentBinding != null) {
+      result.addCode("\n");
+      result.addStatement("super.unbind()");
+    }
+    return result.build();
+  }
+
+  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
+      ViewBindings bindings) {
+    // Only add fields to the binding if there are method bindings.
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    String fieldName = bindings.isBoundToRoot() ? "viewSource" : "view" + bindings.getId().value;
+    result.addField(VIEW, fieldName, PRIVATE);
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      unbindMethod.beginControlFlow("if ($N != null)", fieldName);
+    }
+
+    for (ListenerClass listenerClass : classMethodBindings.keySet()) {
+      // We need to keep a reference to the listener
+      // in case we need to unbind it via a remove method.
+      boolean requiresRemoval = !"".equals(listenerClass.remover());
+      String listenerField = "null";
+      if (requiresRemoval) {
+        TypeName listenerClassName = bestGuess(listenerClass.type());
+        listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
+        result.addField(listenerClassName, listenerField, PRIVATE);
+      }
+
+      if (!VIEW_TYPE.equals(listenerClass.targetType())) {
+        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),
+            fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);
+      } else {
+        unbindMethod.addStatement("$N.$N($N)", fieldName,
+            removerOrSetter(listenerClass, requiresRemoval), listenerField);
+      }
+
+      if (requiresRemoval) {
+        unbindMethod.addStatement("$N = null", listenerField);
+      }
+    }
+
+    unbindMethod.addStatement("$N = null", fieldName);
+
+    if (needsNullChecked) {
+      unbindMethod.endControlFlow();
+    }
+  }
+
+  private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemoval) {
+    return requiresRemoval
+        ? listenerClass.remover()
+        : listenerClass.setter();
+  }
+
+  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    if (bindings.isSingleFieldBinding()) {
+      // Optimize the common case where there's a single binding directly to a field.
+      FieldViewBinding fieldBinding = bindings.getFieldBinding();
+      CodeBlock.Builder builder = CodeBlock.builder()
+          .add("target.$L = ", fieldBinding.getName());
+
+      boolean requiresCast = requiresCast(fieldBinding.getType());
+      if (!requiresCast && !fieldBinding.isRequired()) {
+        builder.add("source.findViewById($L)", bindings.getId().code);
+      } else {
+        builder.add("$T.find", UTILS);
+        builder.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");
+        if (requiresCast) {
+          builder.add("AsType");
+        }
+        builder.add("(source, $L", bindings.getId().code);
+        if (fieldBinding.isRequired() || requiresCast) {
+          builder.add(", $S", asHumanDescription(singletonList(fieldBinding)));
+        }
+        if (requiresCast) {
+          builder.add(", $T.class", fieldBinding.getRawType());
+        }
+        builder.add(")");
+      }
+      result.addStatement("$L", builder.build());
+      return;
+    }
+
+    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
+    if (requiredViewBindings.isEmpty()) {
+      result.addStatement("view = source.findViewById($L)", bindings.getId().code);
+    } else if (!bindings.isBoundToRoot()) {
+      result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,
+          bindings.getId().code, asHumanDescription(requiredViewBindings));
+    }
+
+    addFieldBindings(result, bindings);
+    addMethodBindings(result, bindings);
+  }
+
+  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    FieldViewBinding fieldBinding = bindings.getFieldBinding();
+    if (fieldBinding != null) {
+      if (requiresCast(fieldBinding.getType())) {
+        result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",
+            fieldBinding.getName(), UTILS, bindings.getId().code,
+            asHumanDescription(singletonList(fieldBinding)), fieldBinding.getRawType());
+      } else {
+        result.addStatement("target.$L = view", fieldBinding.getName());
+      }
+    }
+  }
+
+  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      result.beginControlFlow("if (view != null)");
+    }
+
+    // Add the view reference to the binding.
+    String fieldName = "viewSource";
+    String bindName = "source";
+    if (!bindings.isBoundToRoot()) {
+      fieldName = "view" + bindings.getId().value;
+      bindName = "view";
+    }
+    result.addStatement("$L = $N", fieldName, bindName);
+
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
+        : classMethodBindings.entrySet()) {
+      ListenerClass listener = e.getKey();
+      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
+
+      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
+          .superclass(ClassName.bestGuess(listener.type()));
+
+      for (ListenerMethod method : getListenerMethods(listener)) {
+        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
+            .addAnnotation(Override.class)
+            .addModifiers(PUBLIC)
+            .returns(bestGuess(method.returnType()));
+        String[] parameterTypes = method.parameters();
+        for (int i = 0, count = parameterTypes.length; i < count; i++) {
+          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
+        }
+
+        boolean hasReturnType = !"void".equals(method.returnType());
+        CodeBlock.Builder builder = CodeBlock.builder();
+        if (hasReturnType) {
+          builder.add("return ");
+        }
+
+        if (methodBindings.containsKey(method)) {
+          for (MethodViewBinding binding : methodBindings.get(method)) {
+            builder.add("target.$L(", binding.getName());
+            List<Parameter> parameters = binding.getParameters();
+            String[] listenerParameters = method.parameters();
+            for (int i = 0, count = parameters.size(); i < count; i++) {
+              if (i > 0) {
+                builder.add(", ");
+              }
+
+              Parameter parameter = parameters.get(i);
+              int listenerPosition = parameter.getListenerPosition();
+
+              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
+                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
+                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);
+              } else {
+                builder.add("p$L", listenerPosition);
+              }
+            }
+            builder.add(");\n");
+          }
+        } else if (hasReturnType) {
+          builder.add("$L;\n", method.defaultReturn());
+        }
+        callbackMethod.addCode(builder.build());
+        callback.addMethod(callbackMethod.build());
+      }
+
+      boolean requiresRemoval = listener.remover().length() != 0;
+      String listenerField = null;
+      if (requiresRemoval) {
+        TypeName listenerClassName = bestGuess(listener.type());
+        listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
+        result.addStatement("$L = $L", listenerField, callback.build());
+      }
+
+      if (!VIEW_TYPE.equals(listener.targetType())) {
+        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,
+            listener.setter(), requiresRemoval ? listenerField : callback.build());
+      } else {
+        result.addStatement("$N.$L($L)", bindName, listener.setter(),
+            requiresRemoval ? listenerField : callback.build());
+      }
+    }
+
+    if (needsNullChecked) {
+      result.endControlFlow();
+    }
+  }
+
+  private static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
+    if (listener.method().length == 1) {
+      return Arrays.asList(listener.method());
+    }
+
+    try {
+      List<ListenerMethod> methods = new ArrayList<>();
+      Class<? extends Enum<?>> callbacks = listener.callbacks();
+      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
+        Field callbackField = callbacks.getField(callbackMethod.name());
+        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
+        if (method == null) {
+          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
+              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
+              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
+        }
+        methods.add(method);
+      }
+      return methods;
+    } catch (NoSuchFieldException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  static String asHumanDescription(Collection<? extends ViewBinding> bindings) {
+    Iterator<? extends ViewBinding> iterator = bindings.iterator();
+    switch (bindings.size()) {
+      case 1:
+        return iterator.next().getDescription();
+      case 2:
+        return iterator.next().getDescription() + " and " + iterator.next().getDescription();
+      default:
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0, count = bindings.size(); i < count; i++) {
+          if (i != 0) {
+            builder.append(", ");
+          }
+          if (i == count - 1) {
+            builder.append("and ");
+          }
+          builder.append(iterator.next().getDescription());
+        }
+        return builder.toString();
+    }
+  }
+
+  private static TypeName bestGuess(String type) {
+    switch (type) {
+      case "void": return TypeName.VOID;
+      case "boolean": return TypeName.BOOLEAN;
+      case "byte": return TypeName.BYTE;
+      case "char": return TypeName.CHAR;
+      case "double": return TypeName.DOUBLE;
+      case "float": return TypeName.FLOAT;
+      case "int": return TypeName.INT;
+      case "long": return TypeName.LONG;
+      case "short": return TypeName.SHORT;
+      default:
+        int left = type.indexOf('<');
+        if (left != -1) {
+          ClassName typeClassName = ClassName.bestGuess(type.substring(0, left));
+          List<TypeName> typeArguments = new ArrayList<>();
+          do {
+            typeArguments.add(WildcardTypeName.subtypeOf(Object.class));
+            left = type.indexOf('<', left + 1);
+          } while (left != -1);
+          return ParameterizedTypeName.get(typeClassName,
+              typeArguments.toArray(new TypeName[typeArguments.size()]));
+        }
+        return ClassName.bestGuess(type);
+    }
+  }
+
+  /** True when this type's bindings require a view hierarchy. */
+  private boolean hasViewBindings() {
+    return !viewBindings.isEmpty() || !collectionBindings.isEmpty();
+  }
+
+  /** True when this type's bindings use raw integer values instead of {@code R} references. */
+  private boolean hasUnqualifiedResourceBindings() {
+    for (ResourceBinding binding : resourceBindings) {
+      if (!binding.id().qualifed) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /** True when this type's bindings use Resource directly instead of Context. */
+  private boolean hasResourceBindingsNeedingResource(int sdk) {
+    for (ResourceBinding binding : resourceBindings) {
+      if (binding.requiresResources(sdk)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean hasMethodBindings() {
+    for (ViewBindings bindings : viewBindings) {
+      if (!bindings.getMethodBindings().isEmpty()) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean hasFieldBindings() {
+    for (ViewBindings bindings : viewBindings) {
+      if (bindings.getFieldBinding() != null) {
+        return true;
+      }
+    }
+    return !collectionBindings.isEmpty();
+  }
+
+  private boolean hasTargetField() {
+    return hasFieldBindings() || hasMethodBindings();
+  }
+
+  private boolean hasViewLocal() {
+    for (ViewBindings bindings : viewBindings) {
+      if (bindings.requiresLocal()) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /** True if this binding requires a view. Otherwise only a context is needed. */
+  private boolean constructorNeedsView() {
+    return hasViewBindings() //
+        || parentBinding != null && parentBinding.constructorNeedsView();
+  }
+
+  static boolean requiresCast(TypeName type) {
+    return !VIEW_TYPE.equals(type.toString());
+  }
+
+  @Override public String toString() {
+    return bindingClassName.toString();
+  }
+
+  static Builder newBuilder(TypeElement enclosingElement) {
+    TypeName targetType = TypeName.get(enclosingElement.asType());
+    if (targetType instanceof ParameterizedTypeName) {
+      targetType = ((ParameterizedTypeName) targetType).rawType;
+    }
+
+    String packageName = getPackage(enclosingElement).getQualifiedName().toString();
+    String className = enclosingElement.getQualifiedName().toString().substring(
+        packageName.length() + 1).replace('.', '$');
+    ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
+
+    boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
+    return new Builder(targetType, bindingClassName, isFinal);
+  }
+
+  static final class Builder {
+    private final TypeName targetTypeName;
+    private final ClassName bindingClassName;
+    private final boolean isFinal;
+
+    private BindingSet parentBinding;
+
+    private final Map<Id, ViewBindings> viewIdMap = new LinkedHashMap<>();
+    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();
+    private final List<ResourceBinding> resourceBindings = new ArrayList<>();
+
+    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {
+      this.targetTypeName = targetTypeName;
+      this.bindingClassName = bindingClassName;
+      this.isFinal = isFinal;
+    }
+
+    void addField(Id id, FieldViewBinding binding) {
+      getOrCreateViewBindings(id).setFieldBinding(binding);
+    }
+
+    void addFieldCollection(FieldCollectionViewBinding binding) {
+      collectionBindings.add(binding);
+    }
+
+    boolean addMethod(
+        Id id,
+        ListenerClass listener,
+        ListenerMethod method,
+        MethodViewBinding binding) {
+      ViewBindings viewBindings = getOrCreateViewBindings(id);
+      if (viewBindings.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
+        return false;
+      }
+      viewBindings.addMethodBinding(listener, method, binding);
+      return true;
+    }
+
+    void addResource(ResourceBinding binding) {
+      resourceBindings.add(binding);
+    }
+
+    void setParent(BindingSet parent) {
+      this.parentBinding = parent;
+    }
+
+    ViewBindings getViewBinding(Id id) {
+      return viewIdMap.get(id);
+    }
+
+    private ViewBindings getOrCreateViewBindings(Id id) {
+      ViewBindings viewId = viewIdMap.get(id);
+      if (viewId == null) {
+        viewId = new ViewBindings(id);
+        viewIdMap.put(id, viewId);
+      }
+      return viewId;
+    }
+
+    BindingSet build() {
+      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewIdMap.values(),
+          collectionBindings, resourceBindings, parentBinding);
+    }
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
new file mode 100644
index 00000000..83934cdb
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -0,0 +1,1345 @@
+package butterknife.compiler;
+
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindFloat;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import com.google.auto.common.SuperficialValidation;
+import com.google.auto.service.AutoService;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeName;
+import com.sun.source.tree.ClassTree;
+import com.sun.source.util.Trees;
+import com.sun.tools.javac.code.Symbol;
+import com.sun.tools.javac.tree.JCTree;
+import com.sun.tools.javac.tree.TreeScanner;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Collections;
+import java.util.Deque;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Filer;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.Processor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.ArrayType;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.MirroredTypeException;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVariable;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import javax.tools.Diagnostic.Kind;
+
+import static javax.lang.model.element.ElementKind.CLASS;
+import static javax.lang.model.element.ElementKind.INTERFACE;
+import static javax.lang.model.element.ElementKind.METHOD;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.STATIC;
+
+@AutoService(Processor.class)
+public final class ButterKnifeProcessor extends AbstractProcessor {
+  // TODO remove when http://b.android.com/187527 is released.
+  private static final String OPTION_SDK_INT = "butterknife.minSdk";
+  static final Id NO_ID = new Id(-1);
+  static final String VIEW_TYPE = "android.view.View";
+  private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
+  private static final String BITMAP_TYPE = "android.graphics.Bitmap";
+  private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
+  private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
+  private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
+  private static final String STRING_TYPE = "java.lang.String";
+  private static final String LIST_TYPE = List.class.getCanonicalName();
+  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
+      OnCheckedChanged.class, //
+      OnClick.class, //
+      OnEditorAction.class, //
+      OnFocusChange.class, //
+      OnItemClick.class, //
+      OnItemLongClick.class, //
+      OnItemSelected.class, //
+      OnLongClick.class, //
+      OnPageChange.class, //
+      OnTextChanged.class, //
+      OnTouch.class //
+  );
+
+  private static final List<String> SUPPORTED_TYPES = Arrays.asList(
+      "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
+  );
+
+  private Elements elementUtils;
+  private Types typeUtils;
+  private Filer filer;
+  private Trees trees;
+  private int sdk = 1;
+
+  private final Map<Integer, Id> symbols = new LinkedHashMap<>();
+
+  @Override public synchronized void init(ProcessingEnvironment env) {
+    super.init(env);
+
+    String sdk = env.getOptions().get(OPTION_SDK_INT);
+    if (sdk != null) {
+      try {
+        this.sdk = Integer.parseInt(sdk);
+      } catch (NumberFormatException e) {
+        env.getMessager()
+            .printMessage(Kind.WARNING, "Unable to parse supplied minSdk option '"
+                + sdk
+                + "'. Falling back to API 1 support.");
+      }
+    }
+
+    elementUtils = env.getElementUtils();
+    typeUtils = env.getTypeUtils();
+    filer = env.getFiler();
+    try {
+      trees = Trees.instance(processingEnv);
+    } catch (IllegalArgumentException ignored) {
+    }
+  }
+
+  @Override public Set<String> getSupportedOptions() {
+    return Collections.singleton(OPTION_SDK_INT);
+  }
+
+  @Override public Set<String> getSupportedAnnotationTypes() {
+    Set<String> types = new LinkedHashSet<>();
+    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
+      types.add(annotation.getCanonicalName());
+    }
+    return types;
+  }
+
+  private Set<Class<? extends Annotation>> getSupportedAnnotations() {
+    Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();
+
+    annotations.add(BindArray.class);
+    annotations.add(BindBitmap.class);
+    annotations.add(BindBool.class);
+    annotations.add(BindColor.class);
+    annotations.add(BindDimen.class);
+    annotations.add(BindDrawable.class);
+    annotations.add(BindFloat.class);
+    annotations.add(BindInt.class);
+    annotations.add(BindString.class);
+    annotations.add(BindView.class);
+    annotations.add(BindViews.class);
+    annotations.addAll(LISTENERS);
+
+    return annotations;
+  }
+
+  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
+    Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(env);
+
+    for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {
+      TypeElement typeElement = entry.getKey();
+      BindingSet binding = entry.getValue();
+
+      JavaFile javaFile = binding.brewJava(sdk);
+      try {
+        javaFile.writeTo(filer);
+      } catch (IOException e) {
+        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());
+      }
+    }
+
+    return true;
+  }
+
+  private Map<TypeElement, BindingSet> findAndParseTargets(RoundEnvironment env) {
+    Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();
+    Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
+
+    scanForRClasses(env);
+
+    // Process each @BindArray element.
+    for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceArray(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindArray.class, e);
+      }
+    }
+
+    // Process each @BindBitmap element.
+    for (Element element : env.getElementsAnnotatedWith(BindBitmap.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceBitmap(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindBitmap.class, e);
+      }
+    }
+
+    // Process each @BindBool element.
+    for (Element element : env.getElementsAnnotatedWith(BindBool.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceBool(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindBool.class, e);
+      }
+    }
+
+    // Process each @BindColor element.
+    for (Element element : env.getElementsAnnotatedWith(BindColor.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceColor(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindColor.class, e);
+      }
+    }
+
+    // Process each @BindDimen element.
+    for (Element element : env.getElementsAnnotatedWith(BindDimen.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceDimen(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDimen.class, e);
+      }
+    }
+
+    // Process each @BindDrawable element.
+    for (Element element : env.getElementsAnnotatedWith(BindDrawable.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceDrawable(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDrawable.class, e);
+      }
+    }
+
+    // Process each @BindFloat element.
+    for (Element element : env.getElementsAnnotatedWith(BindFloat.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceFloat(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindFloat.class, e);
+      }
+    }
+
+    // Process each @BindInt element.
+    for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceInt(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindInt.class, e);
+      }
+    }
+
+    // Process each @BindString element.
+    for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceString(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindString.class, e);
+      }
+    }
+
+    // Process each @BindView element.
+    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {
+      // we don't SuperficialValidation.validateElement(element)
+      // so that an unresolved View type can be generated by later processing rounds
+      try {
+        parseBindView(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindView.class, e);
+      }
+    }
+
+    // Process each @BindViews element.
+    for (Element element : env.getElementsAnnotatedWith(BindViews.class)) {
+      // we don't SuperficialValidation.validateElement(element)
+      // so that an unresolved View type can be generated by later processing rounds
+      try {
+        parseBindViews(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindViews.class, e);
+      }
+    }
+
+    // Process each annotation that corresponds to a listener.
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      findAndParseListener(env, listener, builderMap, erasedTargetNames);
+    }
+
+    // Associate superclass binders with their subclass binders. This is a queue-based tree walk
+    // which starts at the roots (superclasses) and walks to the leafs (subclasses).
+    Deque<Map.Entry<TypeElement, BindingSet.Builder>> entries =
+        new ArrayDeque<>(builderMap.entrySet());
+    Map<TypeElement, BindingSet> bindingMap = new LinkedHashMap<>();
+    while (!entries.isEmpty()) {
+      Map.Entry<TypeElement, BindingSet.Builder> entry = entries.removeFirst();
+
+      TypeElement type = entry.getKey();
+      BindingSet.Builder builder = entry.getValue();
+
+      TypeElement parentType = findParentType(type, erasedTargetNames);
+      if (parentType == null) {
+        bindingMap.put(type, builder.build());
+      } else {
+        BindingSet parentBinding = bindingMap.get(parentType);
+        if (parentBinding != null) {
+          builder.setParent(parentBinding);
+          bindingMap.put(type, builder.build());
+        } else {
+          // Has a superclass binding but we haven't built it yet. Re-enqueue for later.
+          entries.addLast(entry);
+        }
+      }
+    }
+
+    return bindingMap;
+  }
+
+  private void logParsingError(Element element, Class<? extends Annotation> annotation,
+      Exception e) {
+    StringWriter stackTrace = new StringWriter();
+    e.printStackTrace(new PrintWriter(stackTrace));
+    error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
+  }
+
+  private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass,
+      String targetThing, Element element) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify method modifiers.
+    Set<Modifier> modifiers = element.getModifiers();
+    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
+      error(element, "@%s %s must not be private or static. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify containing type.
+    if (enclosingElement.getKind() != CLASS) {
+      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify containing class visibility is not private.
+    if (enclosingElement.getModifiers().contains(PRIVATE)) {
+      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    return hasError;
+  }
+
+  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,
+      Element element) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+    String qualifiedName = enclosingElement.getQualifiedName().toString();
+
+    if (qualifiedName.startsWith("android.")) {
+      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
+          annotationClass.getSimpleName(), qualifiedName);
+      return true;
+    }
+    if (qualifiedName.startsWith("java.")) {
+      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
+          annotationClass.getSimpleName(), qualifiedName);
+      return true;
+    }
+
+    return false;
+  }
+
+  private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
+      Set<TypeElement> erasedTargetNames) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Start by verifying common generated code restrictions.
+    boolean hasError = isInaccessibleViaGeneratedCode(BindView.class, "fields", element)
+        || isBindingInWrongPackage(BindView.class, element);
+
+    // Verify that the target type extends from View.
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.TYPEVAR) {
+      TypeVariable typeVariable = (TypeVariable) elementType;
+      elementType = typeVariable.getUpperBound();
+    }
+    if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
+      if (elementType.getKind() == TypeKind.ERROR) {
+        note(element, "@%s field with unresolved type (%s) "
+                + "must elsewhere be generated as a View or interface. (%s.%s)",
+            BindView.class.getSimpleName(), elementType, enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+      } else {
+        error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
+            BindView.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+        hasError = true;
+      }
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    int id = element.getAnnotation(BindView.class).value();
+
+    BindingSet.Builder builder = builderMap.get(enclosingElement);
+    if (builder != null) {
+      ViewBindings viewBindings = builder.getViewBinding(getId(id));
+      if (viewBindings != null && viewBindings.getFieldBinding() != null) {
+        FieldViewBinding existingBinding = viewBindings.getFieldBinding();
+        error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+            BindView.class.getSimpleName(), id, existingBinding.getName(),
+            enclosingElement.getQualifiedName(), element.getSimpleName());
+        return;
+      }
+    } else {
+      builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    }
+
+    String name = element.getSimpleName().toString();
+    TypeName type = TypeName.get(elementType);
+    boolean required = isFieldRequired(element);
+
+    builder.addField(getId(id), new FieldViewBinding(name, type, required));
+
+    // Add the type-erased version to the valid binding targets set.
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
+      Set<TypeElement> erasedTargetNames) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Start by verifying common generated code restrictions.
+    boolean hasError = isInaccessibleViaGeneratedCode(BindViews.class, "fields", element)
+        || isBindingInWrongPackage(BindViews.class, element);
+
+    // Verify that the type is a List or an array.
+    TypeMirror elementType = element.asType();
+    String erasedType = doubleErasure(elementType);
+    TypeMirror viewType = null;
+    FieldCollectionViewBinding.Kind kind = null;
+    if (elementType.getKind() == TypeKind.ARRAY) {
+      ArrayType arrayType = (ArrayType) elementType;
+      viewType = arrayType.getComponentType();
+      kind = FieldCollectionViewBinding.Kind.ARRAY;
+    } else if (LIST_TYPE.equals(erasedType)) {
+      DeclaredType declaredType = (DeclaredType) elementType;
+      List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+      if (typeArguments.size() != 1) {
+        error(element, "@%s List must have a generic component. (%s.%s)",
+            BindViews.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+        hasError = true;
+      } else {
+        viewType = typeArguments.get(0);
+      }
+      kind = FieldCollectionViewBinding.Kind.LIST;
+    } else {
+      error(element, "@%s must be a List or array. (%s.%s)", BindViews.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+    if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
+      TypeVariable typeVariable = (TypeVariable) viewType;
+      viewType = typeVariable.getUpperBound();
+    }
+
+    // Verify that the target type extends from View.
+    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
+      if (viewType.getKind() == TypeKind.ERROR) {
+        note(element, "@%s List or array with unresolved type (%s) "
+                + "must elsewhere be generated as a View or interface. (%s.%s)",
+            BindViews.class.getSimpleName(), viewType, enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+      } else {
+        error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
+            BindViews.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+        hasError = true;
+      }
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int[] ids = element.getAnnotation(BindViews.class).value();
+    if (ids.length == 0) {
+      error(element, "@%s must specify at least one ID. (%s.%s)", BindViews.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    Integer duplicateId = findDuplicate(ids);
+    if (duplicateId != null) {
+      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)",
+          BindViews.class.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    assert viewType != null; // Always false as hasError would have been true.
+    TypeName type = TypeName.get(viewType);
+    boolean required = isFieldRequired(element);
+
+    List<Id> idVars = new ArrayList<>();
+    for (int id : ids) {
+      idVars.add(getId(id));
+    }
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceBool(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is bool.
+    if (element.asType().getKind() != TypeKind.BOOLEAN) {
+      error(element, "@%s field type must be 'boolean'. (%s.%s)",
+          BindBool.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBool.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBool.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBool.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceColor(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isColorStateList = false;
+    TypeMirror elementType = element.asType();
+    if (COLOR_STATE_LIST_TYPE.equals(elementType.toString())) {
+      isColorStateList = true;
+    } else if (elementType.getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int' or 'ColorStateList'. (%s.%s)",
+          BindColor.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindColor.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindColor.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindColor.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name,
+        isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST
+            : FieldResourceBinding.Type.COLOR));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceDimen(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isInt = false;
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.INT) {
+      isInt = true;
+    } else if (elementType.getKind() != TypeKind.FLOAT) {
+      error(element, "@%s field type must be 'int' or 'float'. (%s.%s)",
+          BindDimen.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDimen.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDimen.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDimen.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name,
+        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceBitmap(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Bitmap.
+    if (!BITMAP_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Bitmap'. (%s.%s)",
+          BindBitmap.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBitmap.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBitmap.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBitmap.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceDrawable(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Drawable.
+    if (!DRAWABLE_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Drawable'. (%s.%s)",
+          BindDrawable.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDrawable.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDrawable.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDrawable.class).value();
+    int tint = element.getAnnotation(BindDrawable.class).tint();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldDrawableBinding(getId(id), name, getId(tint)));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceFloat(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is float.
+    if (element.asType().getKind() != TypeKind.FLOAT) {
+      error(element, "@%s field type must be 'float'. (%s.%s)",
+          BindFloat.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindFloat.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindFloat.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindFloat.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceInt(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int.
+    if (element.asType().getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int'. (%s.%s)", BindInt.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindInt.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindInt.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindInt.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceString(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is String.
+    if (!STRING_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'String'. (%s.%s)",
+          BindString.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindString.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindString.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindString.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceArray(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is supported.
+    FieldResourceBinding.Type type = getArrayResourceMethodName(element);
+    if (type == null) {
+      error(element,
+          "@%s field type must be one of: String[], int[], CharSequence[], %s. (%s.%s)",
+          BindArray.class.getSimpleName(), TYPED_ARRAY_TYPE, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindArray.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindArray.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindArray.class).value();
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, type));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  /**
+   * Returns a method name from the {@link android.content.res.Resources} class for array resource
+   * binding, null if the element type is not supported.
+   */
+  private static FieldResourceBinding.Type getArrayResourceMethodName(Element element) {
+    TypeMirror typeMirror = element.asType();
+    if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
+      return FieldResourceBinding.Type.TYPED_ARRAY;
+    }
+    if (TypeKind.ARRAY.equals(typeMirror.getKind())) {
+      ArrayType arrayType = (ArrayType) typeMirror;
+      String componentType = arrayType.getComponentType().toString();
+      if (STRING_TYPE.equals(componentType)) {
+        return FieldResourceBinding.Type.STRING_ARRAY;
+      } else if ("int".equals(componentType)) {
+        return FieldResourceBinding.Type.INT_ARRAY;
+      } else if ("java.lang.CharSequence".equals(componentType)) {
+        return FieldResourceBinding.Type.TEXT_ARRAY;
+      }
+    }
+    return null;
+  }
+
+  /** Returns the first duplicate element inside an array, null if there are no duplicates. */
+  private static Integer findDuplicate(int[] array) {
+    Set<Integer> seenElements = new LinkedHashSet<>();
+
+    for (int element : array) {
+      if (!seenElements.add(element)) {
+        return element;
+      }
+    }
+
+    return null;
+  }
+
+  /** Uses both {@link Types#erasure} and string manipulation to strip any generic types. */
+  private String doubleErasure(TypeMirror elementType) {
+    String name = typeUtils.erasure(elementType).toString();
+    int typeParamStart = name.indexOf('<');
+    if (typeParamStart != -1) {
+      name = name.substring(0, typeParamStart);
+    }
+    return name;
+  }
+
+  private void findAndParseListener(RoundEnvironment env,
+      Class<? extends Annotation> annotationClass,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseListenerAnnotation(annotationClass, element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        StringWriter stackTrace = new StringWriter();
+        e.printStackTrace(new PrintWriter(stackTrace));
+
+        error(element, "Unable to generate view binder for @%s.\n\n%s",
+            annotationClass.getSimpleName(), stackTrace.toString());
+      }
+    }
+  }
+
+  private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames)
+      throws Exception {
+    // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
+    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
+      throw new IllegalStateException(
+          String.format("@%s annotation must be on a method.", annotationClass.getSimpleName()));
+    }
+
+    ExecutableElement executableElement = (ExecutableElement) element;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Assemble information on the method.
+    Annotation annotation = element.getAnnotation(annotationClass);
+    Method annotationValue = annotationClass.getDeclaredMethod("value");
+    if (annotationValue.getReturnType() != int[].class) {
+      throw new IllegalStateException(
+          String.format("@%s annotation value() type not int[].", annotationClass));
+    }
+
+    int[] ids = (int[]) annotationValue.invoke(annotation);
+    String name = executableElement.getSimpleName().toString();
+    boolean required = isListenerRequired(executableElement);
+
+    // Verify that the method and its containing class are accessible via generated code.
+    boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
+    hasError |= isBindingInWrongPackage(annotationClass, element);
+
+    Integer duplicateId = findDuplicate(ids);
+    if (duplicateId != null) {
+      error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
+          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    ListenerClass listener = annotationClass.getAnnotation(ListenerClass.class);
+    if (listener == null) {
+      throw new IllegalStateException(
+          String.format("No @%s defined on @%s.", ListenerClass.class.getSimpleName(),
+              annotationClass.getSimpleName()));
+    }
+
+    for (int id : ids) {
+      if (id == NO_ID.value) {
+        if (ids.length == 1) {
+          if (!required) {
+            error(element, "ID-free binding must not be annotated with @Optional. (%s.%s)",
+                enclosingElement.getQualifiedName(), element.getSimpleName());
+            hasError = true;
+          }
+        } else {
+          error(element, "@%s annotation contains invalid ID %d. (%s.%s)",
+              annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
+              element.getSimpleName());
+          hasError = true;
+        }
+      }
+    }
+
+    ListenerMethod method;
+    ListenerMethod[] methods = listener.method();
+    if (methods.length > 1) {
+      throw new IllegalStateException(String.format("Multiple listener methods specified on @%s.",
+          annotationClass.getSimpleName()));
+    } else if (methods.length == 1) {
+      if (listener.callbacks() != ListenerClass.NONE.class) {
+        throw new IllegalStateException(
+            String.format("Both method() and callback() defined on @%s.",
+                annotationClass.getSimpleName()));
+      }
+      method = methods[0];
+    } else {
+      Method annotationCallback = annotationClass.getDeclaredMethod("callback");
+      Enum<?> callback = (Enum<?>) annotationCallback.invoke(annotation);
+      Field callbackField = callback.getDeclaringClass().getField(callback.name());
+      method = callbackField.getAnnotation(ListenerMethod.class);
+      if (method == null) {
+        throw new IllegalStateException(
+            String.format("No @%s defined on @%s's %s.%s.", ListenerMethod.class.getSimpleName(),
+                annotationClass.getSimpleName(), callback.getDeclaringClass().getSimpleName(),
+                callback.name()));
+      }
+    }
+
+    // Verify that the method has equal to or less than the number of parameters as the listener.
+    List<? extends VariableElement> methodParameters = executableElement.getParameters();
+    if (methodParameters.size() > method.parameters().length) {
+      error(element, "@%s methods can have at most %s parameter(s). (%s.%s)",
+          annotationClass.getSimpleName(), method.parameters().length,
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify method return type matches the listener.
+    TypeMirror returnType = executableElement.getReturnType();
+    if (returnType instanceof TypeVariable) {
+      TypeVariable typeVariable = (TypeVariable) returnType;
+      returnType = typeVariable.getUpperBound();
+    }
+    if (!returnType.toString().equals(method.returnType())) {
+      error(element, "@%s methods must have a '%s' return type. (%s.%s)",
+          annotationClass.getSimpleName(), method.returnType(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    Parameter[] parameters = Parameter.NONE;
+    if (!methodParameters.isEmpty()) {
+      parameters = new Parameter[methodParameters.size()];
+      BitSet methodParameterUsed = new BitSet(methodParameters.size());
+      String[] parameterTypes = method.parameters();
+      for (int i = 0; i < methodParameters.size(); i++) {
+        VariableElement methodParameter = methodParameters.get(i);
+        TypeMirror methodParameterType = methodParameter.asType();
+        if (methodParameterType instanceof TypeVariable) {
+          TypeVariable typeVariable = (TypeVariable) methodParameterType;
+          methodParameterType = typeVariable.getUpperBound();
+        }
+
+        for (int j = 0; j < parameterTypes.length; j++) {
+          if (methodParameterUsed.get(j)) {
+            continue;
+          }
+          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
+              || isInterface(methodParameterType)) {
+            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));
+            methodParameterUsed.set(j);
+            break;
+          }
+        }
+        if (parameters[i] == null) {
+          StringBuilder builder = new StringBuilder();
+          builder.append("Unable to match @")
+              .append(annotationClass.getSimpleName())
+              .append(" method arguments. (")
+              .append(enclosingElement.getQualifiedName())
+              .append('.')
+              .append(element.getSimpleName())
+              .append(')');
+          for (int j = 0; j < parameters.length; j++) {
+            Parameter parameter = parameters[j];
+            builder.append("\n\n  Parameter #")
+                .append(j + 1)
+                .append(": ")
+                .append(methodParameters.get(j).asType().toString())
+                .append("\n    ");
+            if (parameter == null) {
+              builder.append("did not match any listener parameters");
+            } else {
+              builder.append("matched listener parameter #")
+                  .append(parameter.getListenerPosition() + 1)
+                  .append(": ")
+                  .append(parameter.getType());
+            }
+          }
+          builder.append("\n\nMethods may have up to ")
+              .append(method.parameters().length)
+              .append(" parameter(s):\n");
+          for (String parameterType : method.parameters()) {
+            builder.append("\n  ").append(parameterType);
+          }
+          builder.append(
+              "\n\nThese may be listed in any order but will be searched for from top to bottom.");
+          error(executableElement, builder.toString());
+          return;
+        }
+      }
+    }
+
+    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    for (int id : ids) {
+      if (!builder.addMethod(getId(id), listener, method, binding)) {
+        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
+            id, enclosingElement.getQualifiedName(), element.getSimpleName());
+        return;
+      }
+    }
+
+    // Add the type-erased version to the valid binding targets set.
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private boolean isInterface(TypeMirror typeMirror) {
+    return typeMirror instanceof DeclaredType
+        && ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
+  }
+
+  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
+    if (otherType.equals(typeMirror.toString())) {
+      return true;
+    }
+    if (typeMirror.getKind() != TypeKind.DECLARED) {
+      return false;
+    }
+    DeclaredType declaredType = (DeclaredType) typeMirror;
+    List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+    if (typeArguments.size() > 0) {
+      StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
+      typeString.append('<');
+      for (int i = 0; i < typeArguments.size(); i++) {
+        if (i > 0) {
+          typeString.append(',');
+        }
+        typeString.append('?');
+      }
+      typeString.append('>');
+      if (typeString.toString().equals(otherType)) {
+        return true;
+      }
+    }
+    Element element = declaredType.asElement();
+    if (!(element instanceof TypeElement)) {
+      return false;
+    }
+    TypeElement typeElement = (TypeElement) element;
+    TypeMirror superType = typeElement.getSuperclass();
+    if (isSubtypeOfType(superType, otherType)) {
+      return true;
+    }
+    for (TypeMirror interfaceType : typeElement.getInterfaces()) {
+      if (isSubtypeOfType(interfaceType, otherType)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private BindingSet.Builder getOrCreateBindingBuilder(
+      Map<TypeElement, BindingSet.Builder> builderMap, TypeElement enclosingElement) {
+    BindingSet.Builder builder = builderMap.get(enclosingElement);
+    if (builder == null) {
+      builder = BindingSet.newBuilder(enclosingElement);
+      builderMap.put(enclosingElement, builder);
+    }
+    return builder;
+  }
+
+  /** Finds the parent binder type in the supplied set, if any. */
+  private TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
+    TypeMirror type;
+    while (true) {
+      type = typeElement.getSuperclass();
+      if (type.getKind() == TypeKind.NONE) {
+        return null;
+      }
+      typeElement = (TypeElement) ((DeclaredType) type).asElement();
+      if (parents.contains(typeElement)) {
+        return typeElement;
+      }
+    }
+  }
+
+  @Override public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.latestSupported();
+  }
+
+  private void error(Element element, String message, Object... args) {
+    printMessage(Kind.ERROR, element, message, args);
+  }
+
+  private void note(Element element, String message, Object... args) {
+    printMessage(Kind.NOTE, element, message, args);
+  }
+
+  private void printMessage(Kind kind, Element element, String message, Object[] args) {
+    if (args.length > 0) {
+      message = String.format(message, args);
+    }
+
+    processingEnv.getMessager().printMessage(kind, message, element);
+  }
+
+  private static boolean hasAnnotationWithName(Element element, String simpleName) {
+    for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
+      String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
+      if (simpleName.equals(annotationName)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private static boolean isFieldRequired(Element element) {
+    return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
+  }
+
+  private static boolean isListenerRequired(ExecutableElement element) {
+    return element.getAnnotation(Optional.class) == null;
+  }
+
+  private static AnnotationMirror getMirror(Element element,
+      Class<? extends Annotation> annotation) {
+    for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
+      if (annotationMirror.getAnnotationType().toString().equals(annotation.getCanonicalName())) {
+        return annotationMirror;
+      }
+    }
+    return null;
+  }
+
+  private Id getId(int id) {
+    if (symbols.get(id) == null) {
+      symbols.put(id, new Id(id));
+    }
+    return symbols.get(id);
+  }
+
+  private void scanForRClasses(RoundEnvironment env) {
+    if (trees == null) return;
+
+    RClassScanner scanner = new RClassScanner();
+
+    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
+      for (Element element : env.getElementsAnnotatedWith(annotation)) {
+        JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
+        if (tree != null) { // tree can be null if the references are compiled types and not source
+          tree.accept(scanner);
+        }
+      }
+    }
+
+    for (String rClass : scanner.getRClasses()) {
+      parseRClass(rClass);
+    }
+  }
+
+  private void parseRClass(String rClass) {
+    Element element;
+
+    try {
+      element = elementUtils.getTypeElement(rClass);
+    } catch (MirroredTypeException mte) {
+      element = typeUtils.asElement(mte.getTypeMirror());
+    }
+
+    JCTree tree = (JCTree) trees.getTree(element);
+    if (tree != null) { // tree can be null if the references are compiled types and not source
+      IdScanner idScanner =
+          new IdScanner(symbols, elementUtils.getPackageOf(element).getQualifiedName().toString());
+      tree.accept(idScanner);
+    } else {
+      parseCompiledR((TypeElement) element);
+    }
+  }
+
+  private void parseCompiledR(TypeElement rClass) {
+    for (Element element : rClass.getEnclosedElements()) {
+      String innerClassName = element.getSimpleName().toString();
+      if (SUPPORTED_TYPES.contains(innerClassName)) {
+        for (Element enclosedElement : element.getEnclosedElements()) {
+          if (enclosedElement instanceof VariableElement) {
+            VariableElement variableElement = (VariableElement) enclosedElement;
+            Object value = variableElement.getConstantValue();
+
+            if (value instanceof Integer) {
+              int id = (Integer) value;
+              ClassName rClassName =
+                  ClassName.get(elementUtils.getPackageOf(variableElement).toString(), "R",
+                      innerClassName);
+              String resourceName = variableElement.getSimpleName().toString();
+              symbols.put(id, new Id(id, rClassName, resourceName));
+            }
+          }
+        }
+      }
+    }
+  }
+
+  private static class RClassScanner extends TreeScanner {
+    private final Set<String> rClasses = new LinkedHashSet<>();
+
+    @Override public void visitSelect(JCTree.JCFieldAccess jcFieldAccess) {
+      Symbol symbol = jcFieldAccess.sym;
+      if (symbol != null
+          && symbol.getEnclosingElement() != null
+          && symbol.getEnclosingElement().getEnclosingElement() != null
+          && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {
+        rClasses.add(symbol.getEnclosingElement().getEnclosingElement().enclClass().className());
+      }
+    }
+
+    Set<String> getRClasses() {
+      return rClasses;
+    }
+  }
+
+  private static class IdScanner extends TreeScanner {
+    private final Map<Integer, Id> ids;
+    private final String packageName;
+
+    IdScanner(Map<Integer, Id> ids, String packageName) {
+      this.ids = ids;
+      this.packageName = packageName;
+    }
+
+    @Override public void visitClassDef(JCTree.JCClassDecl jcClassDecl) {
+      for (JCTree tree : jcClassDecl.defs) {
+        if (tree instanceof ClassTree) {
+          ClassTree classTree = (ClassTree) tree;
+          String className = classTree.getSimpleName().toString();
+          if (SUPPORTED_TYPES.contains(className)) {
+            ClassName rClassName = ClassName.get(packageName, "R", className);
+            VarScanner scanner = new VarScanner(ids, rClassName);
+            ((JCTree) classTree).accept(scanner);
+          }
+        }
+      }
+    }
+  }
+
+  private static class VarScanner extends TreeScanner {
+    private final Map<Integer, Id> ids;
+    private final ClassName className;
+
+    private VarScanner(Map<Integer, Id> ids, ClassName className) {
+      this.ids = ids;
+      this.className = className;
+    }
+
+    @Override public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
+      if ("int".equals(jcVariableDecl.getType().toString())) {
+        int id = Integer.valueOf(jcVariableDecl.getInitializer().toString());
+        String resourceName = jcVariableDecl.getName().toString();
+        ids.put(id, new Id(id, className, resourceName));
+      }
+    }
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
new file mode 100644
index 00000000..f96bb6b8
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -0,0 +1,69 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import java.util.List;
+
+import static butterknife.compiler.BindingSet.UTILS;
+import static butterknife.compiler.BindingSet.requiresCast;
+
+final class FieldCollectionViewBinding {
+  enum Kind {
+    ARRAY("arrayOf"),
+    LIST("listOf");
+
+    final String factoryName;
+
+    Kind(String factoryName) {
+      this.factoryName = factoryName;
+    }
+  }
+
+  final String name;
+  private final TypeName type;
+  private final Kind kind;
+  private final boolean required;
+  private final List<Id> ids;
+
+  FieldCollectionViewBinding(String name, TypeName type, Kind kind, List<Id> ids,
+      boolean required) {
+    this.name = name;
+    this.type = type;
+    this.kind = kind;
+    this.ids = ids;
+    this.required = required;
+  }
+
+  CodeBlock render() {
+    CodeBlock.Builder builder = CodeBlock.builder()
+        .add("target.$L = $T.$L(", name, UTILS, kind.factoryName);
+    for (int i = 0; i < ids.size(); i++) {
+      if (i > 0) {
+        builder.add(", ");
+      }
+      builder.add("\n");
+
+      boolean requiresCast = requiresCast(type);
+      if (!requiresCast && !required) {
+        builder.add("source.findViewById($L)", ids.get(i).code);
+      } else {
+        builder.add("$T.find", UTILS);
+        builder.add(required ? "RequiredView" : "OptionalView");
+        if (requiresCast) {
+          builder.add("AsType");
+        }
+        builder.add("(source, $L, \"field '$L'\"", ids.get(i).code, name);
+        if (requiresCast) {
+          TypeName rawType = type;
+          if (rawType instanceof ParameterizedTypeName) {
+            rawType = ((ParameterizedTypeName) rawType).rawType;
+          }
+          builder.add(", $T.class", rawType);
+        }
+        builder.add(")");
+      }
+    }
+    return builder.add(")").build();
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
new file mode 100644
index 00000000..238a0947
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -0,0 +1,37 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+
+import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
+import static butterknife.compiler.BindingSet.UTILS;
+
+final class FieldDrawableBinding implements ResourceBinding {
+  private final Id id;
+  private final String name;
+  private final Id tintAttributeId;
+
+  FieldDrawableBinding(Id id, String name, Id tintAttributeId) {
+    this.id = id;
+    this.name = name;
+    this.tintAttributeId = tintAttributeId;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return false;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    if (tintAttributeId.value != 0) {
+      return CodeBlock.of("target.$L = $T.getTintedDrawable(context, $L, $L)", name, UTILS, id.code,
+          tintAttributeId.code);
+    }
+    if (sdk >= 21) {
+      return CodeBlock.of("target.$L = context.getDrawable($L)", name, id.code);
+    }
+    return CodeBlock.of("target.$L = $T.getDrawable(context, $L)", name, CONTEXT_COMPAT, id.code);
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
new file mode 100644
index 00000000..d9510525
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -0,0 +1,105 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static java.util.Collections.singletonList;
+import static java.util.Collections.unmodifiableList;
+
+final class FieldResourceBinding implements ResourceBinding {
+  enum Type {
+    BITMAP(new ResourceMethod(BindingSet.BITMAP_FACTORY, "decodeResource", true, 1)),
+    BOOL("getBoolean"),
+    COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
+        new ResourceMethod(null, "getColor", false, 23)),
+    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColorStateList", false, 1),
+        new ResourceMethod(null, "getColorStateList", false, 23)),
+    DIMEN_AS_INT("getDimensionPixelSize"),
+    DIMEN_AS_FLOAT("getDimension"),
+    FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
+    INT("getInteger"),
+    INT_ARRAY("getIntArray"),
+    STRING("getString"),
+    STRING_ARRAY("getStringArray"),
+    TEXT_ARRAY("getTextArray"),
+    TYPED_ARRAY("obtainTypedArray");
+
+    private final List<ResourceMethod> methods;
+
+    Type(ResourceMethod... methods) {
+      List<ResourceMethod> methodList = new ArrayList<>(methods.length);
+      Collections.addAll(methodList, methods);
+      Collections.sort(methodList);
+      Collections.reverse(methodList);
+      this.methods = unmodifiableList(methodList);
+    }
+
+    Type(String methodName) {
+      methods = singletonList(new ResourceMethod(null, methodName, true, 1));
+    }
+
+    ResourceMethod methodForSdk(int sdk) {
+      for (ResourceMethod method : methods) {
+        if (method.sdk <= sdk) {
+          return method;
+        }
+      }
+      throw new AssertionError();
+    }
+  }
+
+  static final class ResourceMethod implements Comparable<ResourceMethod> {
+    final ClassName typeName;
+    final String name;
+    final boolean requiresResources;
+    final int sdk;
+
+    ResourceMethod(ClassName typeName, String name, boolean requiresResources, int sdk) {
+      this.typeName = typeName;
+      this.name = name;
+      this.requiresResources = requiresResources;
+      this.sdk = sdk;
+    }
+
+    @Override public int compareTo(ResourceMethod other) {
+      return Integer.compare(sdk, other.sdk);
+    }
+  }
+
+  private final Id id;
+  private final String name;
+  private final Type type;
+
+  FieldResourceBinding(Id id, String name, Type type) {
+    this.id = id;
+    this.name = name;
+    this.type = type;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return type.methodForSdk(sdk).requiresResources;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    ResourceMethod method = type.methodForSdk(sdk);
+    if (method.typeName == null) {
+      if (method.requiresResources) {
+        return CodeBlock.of("target.$L = res.$L($L)", name, method.name, id.code);
+      }
+      return CodeBlock.of("target.$L = context.$L($L)", name, method.name, id.code);
+    }
+    if (method.requiresResources) {
+      return CodeBlock.of("target.$L = $T.$L(res, $L)", name, method.typeName, method.name,
+          id.code);
+    }
+    return CodeBlock.of("target.$L = $T.$L(context, $L)", name, method.typeName, method.name,
+        id.code);
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
new file mode 100644
index 00000000..8adeb1f1
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
@@ -0,0 +1,40 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+
+final class FieldViewBinding implements ViewBinding {
+  private final String name;
+  private final TypeName type;
+  private final boolean required;
+
+  FieldViewBinding(String name, TypeName type, boolean required) {
+    this.name = name;
+    this.type = type;
+    this.required = required;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public TypeName getType() {
+    return type;
+  }
+
+  public ClassName getRawType() {
+    if (type instanceof ParameterizedTypeName) {
+      return ((ParameterizedTypeName) type).rawType;
+    }
+    return (ClassName) type;
+  }
+
+  @Override public String getDescription() {
+    return "field '" + name + "'";
+  }
+
+  public boolean isRequired() {
+    return required;
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
new file mode 100644
index 00000000..8ce6c887
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
@@ -0,0 +1,41 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+
+/**
+ * Represents an ID of an Android resource.
+ */
+final class Id {
+  private static final ClassName ANDROID_R = ClassName.get("android", "R");
+
+  final int value;
+  final CodeBlock code;
+  final boolean qualifed;
+
+  Id(int value) {
+    this.value = value;
+    this.code = CodeBlock.of("$L", value);
+    this.qualifed = false;
+  }
+
+  Id(int value, ClassName className, String resourceName) {
+    this.value = value;
+    this.code = className.topLevelClassName().equals(ANDROID_R)
+      ? CodeBlock.of("$L.$N", className, resourceName)
+      : CodeBlock.of("$T.$N", className, resourceName);
+    this.qualifed = true;
+  }
+
+  @Override public boolean equals(Object o) {
+    return o instanceof Id && value == ((Id) o).value;
+  }
+
+  @Override public int hashCode() {
+    return value;
+  }
+
+  @Override public String toString() {
+    throw new UnsupportedOperationException("Please use value or code explicitly");
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
similarity index 92%
rename from butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index c6aaa2ba..33beb621 100644
--- a/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -1,4 +1,4 @@
-package butterknife.internal;
+package butterknife.compiler;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -11,7 +11,7 @@
 
   MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
-    this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
+    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
   }
 
diff --git a/butterknife/src/main/java/butterknife/internal/Parameter.java b/butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java
similarity index 64%
rename from butterknife/src/main/java/butterknife/internal/Parameter.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java
index 6949688b..308a8593 100644
--- a/butterknife/src/main/java/butterknife/internal/Parameter.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java
@@ -1,13 +1,15 @@
-package butterknife.internal;
+package butterknife.compiler;
+
+import com.squareup.javapoet.TypeName;
 
 /** Represents a parameter type and its position in the listener method. */
 final class Parameter {
   static final Parameter[] NONE = new Parameter[0];
 
   private final int listenerPosition;
-  private final String type;
+  private final TypeName type;
 
-  Parameter(int listenerPosition, String type) {
+  Parameter(int listenerPosition, TypeName type) {
     this.listenerPosition = listenerPosition;
     this.type = type;
   }
@@ -16,11 +18,11 @@ int getListenerPosition() {
     return listenerPosition;
   }
 
-  String getType() {
+  TypeName getType() {
     return type;
   }
 
   public boolean requiresCast(String toType) {
-    return !type.equals(toType);
+    return !type.toString().equals(toType);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java
new file mode 100644
index 00000000..42b63acb
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java
@@ -0,0 +1,12 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+
+interface ResourceBinding {
+  Id id();
+
+  /** True if the code for this binding requires a 'res' variable for {@code Resources} access. */
+  boolean requiresResources(int sdk);
+
+  CodeBlock render(int sdk);
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
similarity index 85%
rename from butterknife/src/main/java/butterknife/internal/ViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
index 133e31b1..6159caae 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
@@ -1,4 +1,4 @@
-package butterknife.internal;
+package butterknife.compiler;
 
 /** A field or method view binding. */
 interface ViewBinding {
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
similarity index 54%
rename from butterknife/src/main/java/butterknife/internal/ViewBindings.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
index fc4a3a74..36372420 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBindings.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
@@ -1,7 +1,8 @@
-package butterknife.internal;
+package butterknife.compiler;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -9,22 +10,21 @@
 import java.util.Set;
 
 final class ViewBindings {
-  private final int id;
-  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<FieldViewBinding>();
-  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
-      methodBindings = new LinkedHashMap<ListenerClass,
-      Map<ListenerMethod, Set<MethodViewBinding>>>();
+  private final Id id;
+  private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings =
+      new LinkedHashMap<>();
+  private FieldViewBinding fieldBinding;
 
-  ViewBindings(int id) {
+  ViewBindings(Id id) {
     this.id = id;
   }
 
-  public int getId() {
+  public Id getId() {
     return id;
   }
 
-  public Collection<FieldViewBinding> getFieldBindings() {
-    return fieldBindings;
+  public FieldViewBinding getFieldBinding() {
+    return fieldBinding;
   }
 
   public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
@@ -41,28 +41,29 @@ public void addMethodBinding(ListenerClass listener, ListenerMethod method,
     Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
     Set<MethodViewBinding> set = null;
     if (methods == null) {
-      methods = new LinkedHashMap<ListenerMethod, Set<MethodViewBinding>>();
+      methods = new LinkedHashMap<>();
       methodBindings.put(listener, methods);
     } else {
       set = methods.get(method);
     }
     if (set == null) {
-      set = new LinkedHashSet<MethodViewBinding>();
+      set = new LinkedHashSet<>();
       methods.put(method, set);
     }
     set.add(binding);
   }
 
-  public void addFieldBinding(FieldViewBinding fieldBinding) {
-    fieldBindings.add(fieldBinding);
+  public void setFieldBinding(FieldViewBinding fieldBinding) {
+    if (this.fieldBinding != null) {
+      throw new AssertionError();
+    }
+    this.fieldBinding = fieldBinding;
   }
 
   public List<ViewBinding> getRequiredBindings() {
-    List<ViewBinding> requiredViewBindings = new ArrayList<ViewBinding>();
-    for (FieldViewBinding fieldBinding : fieldBindings) {
-      if (fieldBinding.isRequired()) {
-        requiredViewBindings.add(fieldBinding);
-      }
+    List<ViewBinding> requiredViewBindings = new ArrayList<>();
+    if (fieldBinding != null && fieldBinding.isRequired()) {
+      requiredViewBindings.add(fieldBinding);
     }
     for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
       for (Set<MethodViewBinding> set : methodBinding.values()) {
@@ -75,4 +76,22 @@ public void addFieldBinding(FieldViewBinding fieldBinding) {
     }
     return requiredViewBindings;
   }
+
+  public boolean isSingleFieldBinding() {
+    return methodBindings.isEmpty() && fieldBinding != null;
+  }
+
+  public boolean requiresLocal() {
+    if (isBoundToRoot()) {
+      return false;
+    }
+    if (isSingleFieldBinding()) {
+      return false;
+    }
+    return true;
+  }
+
+  public boolean isBoundToRoot() {
+    return ButterKnifeProcessor.NO_ID.equals(id);
+  }
 }
diff --git a/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
new file mode 100644
index 00000000..d5143217
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
@@ -0,0 +1,37 @@
+package butterknife.compiler;
+
+import org.junit.Test;
+
+import static butterknife.compiler.BindingSet.asHumanDescription;
+import static com.google.common.truth.Truth.assertThat;
+import static java.util.Arrays.asList;
+import static java.util.Collections.singletonList;
+
+public class BindingSetTest {
+  @Test public void humanDescriptionJoinWorks() {
+    ViewBinding one = new TestViewBinding("one");
+    ViewBinding two = new TestViewBinding("two");
+    ViewBinding three = new TestViewBinding("three");
+
+    String result1 = asHumanDescription(singletonList(one));
+    assertThat(result1).isEqualTo("one");
+
+    String result2 = asHumanDescription(asList(one, two));
+    assertThat(result2).isEqualTo("one and two");
+
+    String result3 = asHumanDescription(asList(one, two, three));
+    assertThat(result3).isEqualTo("one, two, and three");
+  }
+
+  private static class TestViewBinding implements ViewBinding {
+    private final String description;
+
+    private TestViewBinding(String description) {
+      this.description = description;
+    }
+
+    @Override public String getDescription() {
+      return description;
+    }
+  }
+}
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
new file mode 100644
index 00000000..fa37f062
--- /dev/null
+++ b/butterknife-gradle-plugin/build.gradle
@@ -0,0 +1,27 @@
+apply plugin: 'groovy'
+
+def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
+def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
+for (File file : sdkHandler.sdkLoader.repositories) {
+  repositories.maven {
+    url = file.toURI()
+  }
+}
+
+sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
+targetCompatibility = rootProject.ext.targetCompatibilityVersion
+
+dependencies {
+  compile gradleApi()
+
+  compile deps.androidGradle
+  compile deps.javaparser
+  compile deps.javapoet
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.supportAnnotations
+  testCompile deps.compiletesting
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-gradle-plugin/gradle.properties b/butterknife-gradle-plugin/gradle.properties
new file mode 100644
index 00000000..8edce620
--- /dev/null
+++ b/butterknife-gradle-plugin/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Butterknife Gradle Plugin
+POM_ARTIFACT_ID=butterknife-gradle-plugin
+POM_PACKAGING=jar
diff --git a/butterknife-gradle-plugin/src/main/groovy/butterknife/plugin/ButterKnifePlugin.groovy b/butterknife-gradle-plugin/src/main/groovy/butterknife/plugin/ButterKnifePlugin.groovy
new file mode 100644
index 00000000..e03b367e
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/groovy/butterknife/plugin/ButterKnifePlugin.groovy
@@ -0,0 +1,40 @@
+package butterknife.plugin
+
+import com.android.build.gradle.AppPlugin
+import com.android.build.gradle.LibraryPlugin
+import com.android.build.gradle.TestPlugin
+import com.android.build.gradle.api.BaseVariant
+import com.android.build.gradle.api.BaseVariantOutput
+import groovy.json.StringEscapeUtils
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+
+public class ButterKnifePlugin implements Plugin<Project> {
+
+  @Override
+  void apply(Project project) {
+    if (!(project.plugins.hasPlugin(LibraryPlugin) || project.plugins.hasPlugin(AppPlugin))) {
+      throw new IllegalStateException('Butterknife plugin can only be applied to android projects')
+    }
+
+    def variants
+    if (project.plugins.hasPlugin(LibraryPlugin)) {
+      variants = project.android.libraryVariants
+    } else {
+      variants = project.android.applicationVariants
+    }
+
+    project.afterEvaluate {
+      variants.all { BaseVariant variant ->
+        variant.outputs.each { BaseVariantOutput output ->
+          output.processResources.doLast {
+            File rDir = new File(sourceOutputDir, packageForR.replaceAll('\\.',
+                    StringEscapeUtils.escapeJava(File.separator)))
+            File R = new File(rDir, 'R.java')
+            FinalRClassBuilder.brewJava(R, sourceOutputDir, packageForR, 'R2')
+          }
+        }
+      }
+    }
+  }
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
new file mode 100644
index 00000000..931490d3
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -0,0 +1,96 @@
+package butterknife.plugin;
+
+import com.github.javaparser.JavaParser;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.ast.Node;
+import com.github.javaparser.ast.body.BodyDeclaration;
+import com.github.javaparser.ast.body.FieldDeclaration;
+import com.github.javaparser.ast.body.TypeDeclaration;
+import com.github.javaparser.ast.body.VariableDeclarator;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeSpec;
+import java.io.File;
+import java.util.Arrays;
+import java.util.List;
+
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.STATIC;
+
+/**
+ * Generates a class that contains all supported field names in an R file as final values.
+ * Also enables adding support annotations to indicate the type of resource for every field.
+ */
+public final class FinalRClassBuilder {
+  private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
+  private static final String[] SUPPORTED_TYPES = {
+      "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
+  };
+
+  private FinalRClassBuilder() { }
+
+  public static void brewJava(File rFile, File outputDir, String packageName, String className)
+      throws Exception {
+    CompilationUnit compilationUnit = JavaParser.parse(rFile);
+    TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
+
+    TypeSpec.Builder result =
+        TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
+
+    for (Node node : resourceClass.getChildrenNodes()) {
+      if (node instanceof TypeDeclaration) {
+        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (TypeDeclaration) node);
+      }
+    }
+
+    JavaFile finalR = JavaFile.builder(packageName, result.build())
+        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
+        .build();
+
+    finalR.writeTo(outputDir);
+  }
+
+  private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
+      TypeDeclaration node) {
+    if (!supportedTypes.contains(node.getName())) {
+      return;
+    }
+
+    String type = node.getName();
+    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
+
+    for (BodyDeclaration field : node.getMembers()) {
+      if (field instanceof FieldDeclaration) {
+        addResourceField(resourceType, ((FieldDeclaration) field).getVariables().get(0),
+            getSupportAnnotationClass(type));
+      }
+    }
+
+    result.addType(resourceType.build());
+  }
+
+  private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
+      ClassName annotation) {
+    String fieldName = variable.getId().getName();
+    String fieldValue = variable.getInit().toString();
+    FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
+        .addModifiers(PUBLIC, STATIC, FINAL)
+        .initializer(fieldValue);
+
+    if (annotation != null) {
+      fieldSpecBuilder.addAnnotation(annotation);
+    }
+
+    resourceType.addField(fieldSpecBuilder.build());
+  }
+
+  private static ClassName getSupportAnnotationClass(String type) {
+    return ClassName.get(SUPPORT_ANNOTATION_PACKAGE, capitalize(type) + "Res");
+  }
+
+  private static String capitalize(String word) {
+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);
+  }
+}
diff --git a/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties
new file mode 100644
index 00000000..b5f8ecf3
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties
@@ -0,0 +1 @@
+implementation-class=butterknife.plugin.ButterKnifePlugin
diff --git a/butterknife-gradle-plugin/src/test/groovy/butterknife/plugin/FinalRClassBuilderTest.groovy b/butterknife-gradle-plugin/src/test/groovy/butterknife/plugin/FinalRClassBuilderTest.groovy
new file mode 100644
index 00000000..e954721f
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/groovy/butterknife/plugin/FinalRClassBuilderTest.groovy
@@ -0,0 +1,51 @@
+package butterknife.plugin
+
+import com.google.testing.compile.JavaFileObjects
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.Parameterized
+import org.junit.runners.Parameterized.Parameters
+
+import javax.tools.JavaFileObject
+
+import static com.google.common.truth.Truth.assertAbout
+import static com.google.common.truth.Truth.assertThat
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource
+
+@RunWith(Parameterized)
+class FinalRClassBuilderTest {
+
+  @Parameters
+  static Collection<Object[]> data() {
+    def cases = [
+        ['R', 'R2'],
+        ['RFinal', 'R2']
+    ]
+    return cases.collect { it as Object[] }
+  }
+
+  private String RFile
+  private String R2File
+
+  FinalRClassBuilderTest(String RFile, String R2File) {
+    this.RFile = RFile
+    this.R2File = R2File
+  }
+
+  @Test
+  public void brewJava() throws Exception {
+    String packageName = 'com.butterknife.example'
+
+    File R = File.createTempFile('test', 'R')
+    R.text = getClass().getResource("/fixtures/${RFile}.java").text
+
+    File R2D2 = File.createTempDir()
+    FinalRClassBuilder.brewJava(R, R2D2, packageName, 'R2')
+
+    File R2 = new File(R2D2, "com/butterknife/example/R2.java")
+    assertThat(R2.text.trim()).isEqualTo(getClass().getResource("/fixtures/${R2File}.java").text.trim())
+
+    JavaFileObject expected = JavaFileObjects.forSourceString("com.butterknife.example.R2", R2.text)
+    assertAbout(javaSource()).that(expected).compilesWithoutError()
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
new file mode 100644
index 00000000..21591802
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
@@ -0,0 +1,43 @@
+package com.example.butterknife;
+
+public final class R {
+  public static final class anim {
+    public static int res = 0x7f040000;
+  }
+
+  public static final class array {
+    public static int res = 0x7f040001;
+  }
+
+  public static final class attr {
+    public static int res = 0x7f040002;
+  }
+
+  public static final class bool {
+    public static int res = 0x7f040003;
+  }
+
+  public static final class color {
+    public static int res = 0x7f040004;
+  }
+
+  public static final class dimen {
+    public static int res = 0x7f040005;
+  }
+
+  public static final class drawable {
+    public static int res = 0x7f040006;
+  }
+
+  public static final class id {
+    public static int res = 0x7f040007;
+  }
+
+  public static final class integer {
+    public static int res = 0x7f040008;
+  }
+
+  public static final class string {
+    public static int res = 0x7f040009;
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
new file mode 100644
index 00000000..d4490bb5
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -0,0 +1,59 @@
+// Generated code from Butter Knife gradle plugin. Do not modify!
+package com.butterknife.example;
+
+import android.support.annotation.ArrayRes;
+import android.support.annotation.AttrRes;
+import android.support.annotation.BoolRes;
+import android.support.annotation.ColorRes;
+import android.support.annotation.DimenRes;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.IdRes;
+import android.support.annotation.IntegerRes;
+import android.support.annotation.StringRes;
+
+public final class R2 {
+  public static final class array {
+    @ArrayRes
+    public static final int res = 0x7f040001;
+  }
+
+  public static final class attr {
+    @AttrRes
+    public static final int res = 0x7f040002;
+  }
+
+  public static final class bool {
+    @BoolRes
+    public static final int res = 0x7f040003;
+  }
+
+  public static final class color {
+    @ColorRes
+    public static final int res = 0x7f040004;
+  }
+
+  public static final class dimen {
+    @DimenRes
+    public static final int res = 0x7f040005;
+  }
+
+  public static final class drawable {
+    @DrawableRes
+    public static final int res = 0x7f040006;
+  }
+
+  public static final class id {
+    @IdRes
+    public static final int res = 0x7f040007;
+  }
+
+  public static final class integer {
+    @IntegerRes
+    public static final int res = 0x7f040008;
+  }
+
+  public static final class string {
+    @StringRes
+    public static final int res = 0x7f040009;
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
new file mode 100644
index 00000000..fd2c3dd3
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
@@ -0,0 +1,39 @@
+package com.example.butterknife;
+
+public final class R {
+  public static final class array {
+    public static final int res = 0x7f040001;
+  }
+
+  public static final class attr {
+    public static final int res = 0x7f040002;
+  }
+
+  public static final class bool {
+    public static final int res = 0x7f040003;
+  }
+
+  public static final class color {
+    public static final int res = 0x7f040004;
+  }
+
+  public static final class dimen {
+    public static final int res = 0x7f040005;
+  }
+
+  public static final class drawable {
+    public static final int res = 0x7f040006;
+  }
+
+  public static final class id {
+    public static final int res = 0x7f040007;
+  }
+
+  public static final class integer {
+    public static final int res = 0x7f040008;
+  }
+
+  public static final class string {
+    public static final int res = 0x7f040009;
+  }
+}
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
new file mode 100644
index 00000000..047eaacf
--- /dev/null
+++ b/butterknife-integration-test/build.gradle
@@ -0,0 +1,46 @@
+apply plugin: 'com.android.application'
+apply plugin: 'com.neenbedankt.android-apt'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  compileOptions {
+    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
+    targetCompatibility = rootProject.ext.targetCompatibilityVersion
+  }
+
+  defaultConfig {
+    applicationId 'com.example.butterknife'
+    minSdkVersion rootProject.ext.minSdkVersion
+    targetSdkVersion rootProject.ext.targetSdkVersion
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  lintOptions {
+    textReport true
+    textOutput "stdout"
+    checkAllWarnings true
+    warningsAsErrors true
+    showAll true
+    explainIssues true
+  }
+
+  buildTypes {
+    release {
+      minifyEnabled true
+      proguardFile getDefaultProguardFile('proguard-android.txt')
+    }
+  }
+}
+
+dependencies {
+  compile project(':butterknife')
+  apt project(':butterknife-compiler')
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.robolectric
+  testCompile deps.openglApi
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
new file mode 100644
index 00000000..c9c69e79
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
@@ -0,0 +1,15 @@
+package com.example.butterknife;
+
+import android.test.ActivityInstrumentationTestCase2;
+import com.example.butterknife.library.SimpleActivity;
+
+public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {
+  public SimpleActivityTest() {
+    super(SimpleActivity.class);
+  }
+
+  public void testActivityStarts() {
+    getActivity(); // Trigger activity creation.
+    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup.
+  }
+}
diff --git a/butterknife-integration-test/src/main/AndroidManifest.xml b/butterknife-integration-test/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..f3d3b89a
--- /dev/null
+++ b/butterknife-integration-test/src/main/AndroidManifest.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.example.butterknife">
+
+  <application
+      android:allowBackup="false"
+      android:fullBackupContent="false"
+      android:label="@string/app_name"
+      android:name=".SimpleApp"
+      tools:ignore="MissingApplicationIcon,UnusedAttribute,GoogleAppIndexingWarning">
+
+    <activity
+        android:label="@string/app_name"
+        android:name=".library.SimpleActivity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+
+        <category android:name="android.intent.category.LAUNCHER"/>
+        <category android:name="android.intent.category.DEFAULT"/>
+      </intent-filter>
+    </activity>
+  </application>
+</manifest>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java b/butterknife-integration-test/src/main/java/com/example/butterknife/SimpleApp.java
similarity index 100%
rename from butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java
rename to butterknife-integration-test/src/main/java/com/example/butterknife/SimpleApp.java
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
new file mode 100644
index 00000000..7097639f
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -0,0 +1,78 @@
+package com.example.butterknife.library;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.animation.AlphaAnimation;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+import butterknife.OnItemClick;
+import butterknife.OnLongClick;
+import com.example.butterknife.R;
+
+import java.util.List;
+
+import static android.widget.Toast.LENGTH_SHORT;
+
+public class SimpleActivity extends Activity {
+  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
+    @Override public void apply(@NonNull View view, int index) {
+      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
+      alphaAnimation.setFillBefore(true);
+      alphaAnimation.setDuration(500);
+      alphaAnimation.setStartOffset(index * 100);
+      view.startAnimation(alphaAnimation);
+    }
+  };
+
+  @BindView(R.id.title) TextView title;
+  @BindView(R.id.subtitle) TextView subtitle;
+  @BindView(R.id.hello) Button hello;
+  @BindView(R.id.list_of_things) ListView listOfThings;
+  @BindView(R.id.footer) TextView footer;
+  @BindString(R.string.app_name) String butterKnife;
+  @BindString(R.string.field_method) String fieldMethod;
+  @BindString(R.string.by_jake_wharton) String byJakeWharton;
+  @BindString(R.string.say_hello) String sayHello;
+
+  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }) List<View> headerViews;
+
+  private SimpleAdapter adapter;
+
+  @OnClick(R.id.hello) void sayHello() {
+    Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
+    ButterKnife.apply(headerViews, ALPHA_FADE);
+  }
+
+  @OnLongClick(R.id.hello) boolean sayGetOffMe() {
+    Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
+    return true;
+  }
+
+  @OnItemClick(R.id.list_of_things) void onItemClick(int position) {
+    Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
+  }
+
+  @Override protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.simple_activity);
+    ButterKnife.bind(this);
+
+    // Contrived code to use the bound fields.
+    title.setText(butterKnife);
+    subtitle.setText(fieldMethod);
+    footer.setText(byJakeWharton);
+    hello.setText(sayHello);
+
+    adapter = new SimpleAdapter(this);
+    listOfThings.setAdapter(adapter);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleAdapter.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleAdapter.java
new file mode 100644
index 00000000..5e68d5d1
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleAdapter.java
@@ -0,0 +1,64 @@
+package com.example.butterknife.library;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import com.example.butterknife.R;
+
+import java.util.Locale;
+
+public class SimpleAdapter extends BaseAdapter {
+  private static final String[] CONTENTS = "The quick brown fox jumps over the lazy dog".split(" ");
+
+  private final LayoutInflater inflater;
+
+  public SimpleAdapter(Context context) {
+    inflater = LayoutInflater.from(context);
+  }
+
+  @Override public int getCount() {
+    return CONTENTS.length;
+  }
+
+  @Override public String getItem(int position) {
+    return CONTENTS[position];
+  }
+
+  @Override public long getItemId(int position) {
+    return position;
+  }
+
+  @Override public View getView(int position, View view, ViewGroup parent) {
+    ViewHolder holder;
+    if (view != null) {
+      holder = (ViewHolder) view.getTag();
+    } else {
+      view = inflater.inflate(R.layout.simple_list_item, parent, false);
+      holder = new ViewHolder(view);
+      view.setTag(holder);
+    }
+
+    String word = getItem(position);
+    holder.word.setText(String.format(Locale.getDefault(), "Word: %s", word));
+    holder.length.setText(String.format(Locale.getDefault(), "Length: %d", word.length()));
+    holder.position.setText(String.format(Locale.getDefault(), "Position: %d", position));
+    // Note: don't actually do string concatenation like this in an adapter's getView.
+
+    return view;
+  }
+
+  static final class ViewHolder {
+    @BindView(R.id.word) TextView word;
+    @BindView(R.id.length) TextView length;
+    @BindView(R.id.position) TextView position;
+
+    ViewHolder(View view) {
+      ButterKnife.bind(this, view);
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
new file mode 100644
index 00000000..5f4db917
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
@@ -0,0 +1,15 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class A {
+
+  @BindColor(android.R.color.black) @ColorInt int blackColor;
+
+  public A(View view) {
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
new file mode 100644
index 00000000..59b87e06
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class B extends A {
+
+  @BindColor(android.R.color.white) @ColorInt int whiteColor;
+
+  public B(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
new file mode 100644
index 00000000..ee69cb08
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
@@ -0,0 +1,18 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class C extends B {
+
+  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;
+  @BindView(android.R.id.button1) View button1;
+
+  public C(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
new file mode 100644
index 00000000..1ea1ff88
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class D extends C {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+
+  public D(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
new file mode 100644
index 00000000..5411da11
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class E extends C {
+
+  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;
+
+  public E(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
new file mode 100644
index 00000000..838a2dcf
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public final class F extends D {
+
+  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;
+
+  public F(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
new file mode 100644
index 00000000..497b9f4c
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
@@ -0,0 +1,23 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+
+public class G extends E {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+  @BindView(android.R.id.button2) View button2;
+
+  public G(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+
+  @OnClick(android.R.id.content) public void onClick() {
+
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
new file mode 100644
index 00000000..354bc4b8
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
@@ -0,0 +1,18 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class H extends G {
+
+  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;
+  @BindView(android.R.id.button3) View button3;
+
+  public H(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/res/layout/simple_activity.xml b/butterknife-integration-test/src/main/res/layout/simple_activity.xml
new file mode 100644
index 00000000..d95547a8
--- /dev/null
+++ b/butterknife-integration-test/src/main/res/layout/simple_activity.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:tools="http://schemas.android.com/tools"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical"
+              android:padding="8dp"
+              tools:ignore="SelectableText">
+    <TextView
+            android:id="@+id/title"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="50sp"/>
+    <TextView
+            android:id="@+id/subtitle"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="20sp"/>
+    <Button
+            android:id="@+id/hello"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:layout_margin="10dp"/>
+    <ListView
+            android:id="@+id/list_of_things"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:layout_margin="10dp"/>
+    <TextView
+            android:id="@+id/footer"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="17sp"
+            android:textStyle="italic"/>
+</LinearLayout>
diff --git a/butterknife-integration-test/src/main/res/layout/simple_list_item.xml b/butterknife-integration-test/src/main/res/layout/simple_list_item.xml
new file mode 100644
index 00000000..8d57d86a
--- /dev/null
+++ b/butterknife-integration-test/src/main/res/layout/simple_list_item.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:tools="http://schemas.android.com/tools"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical"
+              tools:ignore="SelectableText">
+    <TextView
+            android:id="@+id/word"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+    <TextView
+            android:id="@+id/length"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+    <TextView
+            android:id="@+id/position"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+</LinearLayout>
diff --git a/butterknife-integration-test/src/main/res/values/strings.xml b/butterknife-integration-test/src/main/res/values/strings.xml
new file mode 100644
index 00000000..11580e25
--- /dev/null
+++ b/butterknife-integration-test/src/main/res/values/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+  <string name="app_name">Butter Knife</string>
+  <string name="field_method">Field and method binding for Android views.</string>
+  <string name="by_jake_wharton">by Jake Wharton</string>
+  <string name="say_hello">Say Hello</string>
+</resources>
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
new file mode 100644
index 00000000..c5be63ce
--- /dev/null
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -0,0 +1,39 @@
+package com.example.butterknife.library;
+
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import com.example.butterknife.R;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricGradleTestRunner;
+
+import static com.google.common.truth.Truth.assertThat;
+
+@RunWith(RobolectricGradleTestRunner.class)
+public class SimpleActivityTest {
+  @Test public void verifyContentViewBinding() {
+    SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class).create().get();
+
+    Unbinder unbinder = ButterKnife.bind(activity);
+    verifySimpleActivityBound(activity);
+    unbinder.unbind();
+    verifySimpleActivityUnbound(activity);
+  }
+
+  protected static void verifySimpleActivityBound(SimpleActivity activity) {
+    assertThat(activity.title.getId()).isEqualTo(R.id.title);
+    assertThat(activity.subtitle.getId()).isEqualTo(R.id.subtitle);
+    assertThat(activity.hello.getId()).isEqualTo(R.id.hello);
+    assertThat(activity.listOfThings.getId()).isEqualTo(R.id.list_of_things);
+    assertThat(activity.footer.getId()).isEqualTo(R.id.footer);
+  }
+
+  protected static void verifySimpleActivityUnbound(SimpleActivity activity) {
+    assertThat(activity.title).isNull();
+    assertThat(activity.subtitle).isNull();
+    assertThat(activity.hello).isNull();
+    assertThat(activity.listOfThings).isNull();
+    assertThat(activity.footer).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
new file mode 100644
index 00000000..59dad6ce
--- /dev/null
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
@@ -0,0 +1,27 @@
+package com.example.butterknife.library;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import com.example.butterknife.R;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+import static com.example.butterknife.library.SimpleAdapter.ViewHolder;
+import static com.google.common.truth.Truth.assertThat;
+
+@RunWith(RobolectricGradleTestRunner.class)
+public class SimpleAdapterTest {
+  @Test public void verifyViewHolderViews() {
+    Context context = RuntimeEnvironment.application;
+
+    View root = LayoutInflater.from(context).inflate(R.layout.simple_list_item, null);
+    ViewHolder holder = new ViewHolder(root);
+
+    assertThat(holder.word.getId()).isEqualTo(R.id.word);
+    assertThat(holder.length.getId()).isEqualTo(R.id.length);
+    assertThat(holder.position.getId()).isEqualTo(R.id.position);
+  }
+}
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
new file mode 100644
index 00000000..9cc6536c
--- /dev/null
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
@@ -0,0 +1,52 @@
+package com.example.butterknife.unbinder;
+
+import android.view.View;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+import static com.google.common.truth.Truth.assertThat;
+
+@RunWith(RobolectricGradleTestRunner.class)
+public final class UnbinderTest {
+
+  @Test
+  public void verifyContentViewBinding() {
+    FrameLayout frameLayout = new FrameLayout(RuntimeEnvironment.application);
+    Button button1 = new Button(RuntimeEnvironment.application);
+    button1.setId(android.R.id.button1);
+    frameLayout.addView(button1);
+    Button button2 = new Button(RuntimeEnvironment.application);
+    button2.setId(android.R.id.button2);
+    frameLayout.addView(button2);
+    Button button3 = new Button(RuntimeEnvironment.application);
+    button3.setId(android.R.id.button3);
+    frameLayout.addView(button3);
+    View content = new View(RuntimeEnvironment.application);
+    content.setId(android.R.id.content);
+    frameLayout.addView(content);
+    H h = new H(frameLayout);
+
+    Unbinder unbinder = ButterKnife.bind(h, frameLayout);
+    verifyHBound(h);
+    unbinder.unbind();
+    verifyHUnbound(h);
+  }
+
+  private void verifyHBound(H h) {
+    assertThat(h.button1).isNotNull();
+    assertThat(h.button2).isNotNull();
+    assertThat(h.button3).isNotNull();
+  }
+
+  private void verifyHUnbound(H h) {
+    assertThat(h.button1).isNull();
+    assertThat(h.button2).isNull();
+    assertThat(h.button3).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/test/resources/robolectric.properties b/butterknife-integration-test/src/test/resources/robolectric.properties
new file mode 100644
index 00000000..135477ad
--- /dev/null
+++ b/butterknife-integration-test/src/test/resources/robolectric.properties
@@ -0,0 +1,2 @@
+constants=com.example.butterknife.BuildConfig
+sdk=23
diff --git a/butterknife-lint/build.gradle b/butterknife-lint/build.gradle
new file mode 100644
index 00000000..2cf93dc3
--- /dev/null
+++ b/butterknife-lint/build.gradle
@@ -0,0 +1,29 @@
+apply plugin: 'java'
+apply plugin: 'checkstyle'
+
+sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
+targetCompatibility = rootProject.ext.targetCompatibilityVersion
+
+dependencies {
+  compile deps.lintApi
+  compile deps.lintChecks
+
+  testCompile deps.junit
+  testCompile deps.lint
+  testCompile deps.lintTests
+  testCompile(deps.truth) {
+    exclude group: 'com.google.guava', module: 'guava'
+  }
+}
+
+jar {
+  manifest {
+    attributes 'Lint-Registry': 'butterknife.lint.LintRegistry'
+  }
+}
+
+checkstyle {
+  configFile rootProject.file('checkstyle.xml')
+  showViolations true
+  sourceSets = [sourceSets.main]
+}
diff --git a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
new file mode 100644
index 00000000..50c16595
--- /dev/null
+++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
@@ -0,0 +1,84 @@
+package butterknife.lint;
+
+import com.android.annotations.NonNull;
+import com.android.tools.lint.detector.api.Category;
+import com.android.tools.lint.detector.api.Context;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Issue;
+import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.Scope;
+import com.android.tools.lint.detector.api.Severity;
+import com.google.common.collect.ImmutableSet;
+import java.io.File;
+import java.util.Set;
+import lombok.ast.Annotation;
+import lombok.ast.AstVisitor;
+import lombok.ast.ClassDeclaration;
+import lombok.ast.ForwardingAstVisitor;
+import lombok.ast.Identifier;
+import lombok.ast.Node;
+import lombok.ast.Select;
+import lombok.ast.VariableReference;
+
+/**
+ * Custom lint rule to make sure that generated R2 is not referenced outside annotations.
+ */
+public class InvalidR2UsageDetector extends Detector implements Detector.JavaScanner {
+
+  private static final String LINT_ERROR_BODY = "R2 should only be used inside annotations";
+  private static final String LINT_ERROR_TITLE = "Invalid usage of R2";
+  private static final String ISSUE_ID = "InvalidR2Usage";
+  private static final Set<String> SUPPORTED_TYPES =
+      ImmutableSet.of("array", "attr", "bool", "color", "dimen", "drawable", "id", "integer",
+          "string");
+
+  static final Issue ISSUE =
+      Issue.create(ISSUE_ID, LINT_ERROR_TITLE, LINT_ERROR_BODY, Category.CORRECTNESS, 6,
+          Severity.ERROR, new Implementation(InvalidR2UsageDetector.class, Scope.JAVA_FILE_SCOPE));
+
+  private static final String R2 = "R2";
+
+  @Override public boolean appliesTo(@NonNull Context context, @NonNull File file) {
+    // skip generated files
+    String name = file.getName();
+    return !name.contains("_ViewBinder") && !name.contains("_ViewBinding");
+  }
+
+  @Override public AstVisitor createJavaVisitor(@NonNull JavaContext javaContext) {
+    final JavaContext context = javaContext;
+    return new ForwardingAstVisitor() {
+
+      @Override public boolean visitClassDeclaration(ClassDeclaration node) {
+        // skip R2
+        return R2.equals(node.astName().astValue());
+      }
+
+      @Override public boolean visitAnnotation(Annotation node) {
+        // skip annotations
+        return true;
+      }
+
+      @Override public boolean visitSelect(Select node) {
+        return detectR2(context, node, node.astIdentifier());
+      }
+
+      @Override public boolean visitVariableReference(VariableReference node) {
+        return detectR2(context, node, node.astIdentifier());
+      }
+    };
+  }
+
+  private static boolean detectR2(JavaContext context, Node node, Identifier identifier) {
+    boolean isR2 = node.getParent() != null
+        && (identifier.toString().equals(R2) || identifier.toString().contains(".R2."))
+        && node.getParent() instanceof Select
+        && SUPPORTED_TYPES.contains(((Select) node.getParent()).astIdentifier().toString());
+
+    if (isR2 && !context.isSuppressedWithComment(node, ISSUE)) {
+      context.report(ISSUE, node, context.getLocation(identifier), LINT_ERROR_BODY);
+    }
+
+    return isR2;
+  }
+}
diff --git a/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java
new file mode 100644
index 00000000..440fbe5d
--- /dev/null
+++ b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java
@@ -0,0 +1,16 @@
+package butterknife.lint;
+
+import com.android.tools.lint.client.api.IssueRegistry;
+import com.android.tools.lint.detector.api.Issue;
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+
+/**
+ * Contains references to all custom lint checks for butterknife.
+ */
+public class LintRegistry extends IssueRegistry {
+
+  @Override public List<Issue> getIssues() {
+    return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
+  }
+}
diff --git a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
new file mode 100644
index 00000000..df4d55b8
--- /dev/null
+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
@@ -0,0 +1,49 @@
+package butterknife.lint;
+
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Issue;
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+
+public class InvalidR2UsageDetectorTest extends LintDetectorTestBase {
+
+  private static final String PATH_TEST_RESOURCES = "/src/test/java/sample/r2/";
+  private static final String NO_WARNINGS = "No warnings.";
+  private static final String R2 = "R2.java";
+  private static final String BIND_TEST = "BindTest.java";
+
+  @Override protected Detector getDetector() {
+    return new InvalidR2UsageDetector();
+  }
+
+  @Override protected List<Issue> getIssues() {
+    return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
+  }
+
+  @Override protected String getTestResourcesPath() {
+    return PATH_TEST_RESOURCES;
+  }
+
+  public void testNoR2Usage() throws Exception {
+    String file = "NoR2Usage.java";
+    assertSame(NO_WARNINGS, lintFiles(file));
+  }
+
+  public void testR2UsageInAnnotations() throws Exception {
+    String file = "R2UsageInAnnotations.java";
+    assertSame(NO_WARNINGS, lintFiles(file, BIND_TEST, R2));
+  }
+
+  public void testR2UsageOutsideAnnotations() throws Exception {
+    String file = "R2UsageOutsideAnnotations.java";
+    String lintOutput = lintFiles(file, R2);
+    assertNotSame(NO_WARNINGS, lintOutput);
+    assertTrue(lintOutput.contains("2 errors, 0 warnings"));
+  }
+
+  public void testR2UsageWithSuppression() throws Exception {
+    String file = "R2UsageWithSuppression.java";
+    String lintOutput = lintFiles(file, R2);
+    assertSame(NO_WARNINGS, lintOutput);
+  }
+}
diff --git a/butterknife-lint/src/test/java/butterknife/lint/LintDetectorTestBase.java b/butterknife-lint/src/test/java/butterknife/lint/LintDetectorTestBase.java
new file mode 100644
index 00000000..78d4269b
--- /dev/null
+++ b/butterknife-lint/src/test/java/butterknife/lint/LintDetectorTestBase.java
@@ -0,0 +1,47 @@
+package butterknife.lint;
+
+import com.android.annotations.Nullable;
+import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
+import com.android.utils.SdkUtils;
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.security.CodeSource;
+
+public abstract class LintDetectorTestBase extends LintDetectorTest {
+
+  protected abstract String getTestResourcesPath();
+
+  @Override protected InputStream getTestResource(String relativePath, boolean expectExists) {
+    String path = (getTestResourcesPath() + relativePath).replace('/', File.separatorChar);
+    File file = new File(getTestDataRootDir(), path);
+    if (file.exists()) {
+      try {
+        return new BufferedInputStream(new FileInputStream(file));
+      } catch (FileNotFoundException e) {
+        if (expectExists) {
+          fail("Could not find file " + relativePath);
+        }
+      }
+    }
+    return null;
+  }
+
+  @Nullable private File getTestDataRootDir() {
+    CodeSource source = getClass().getProtectionDomain().getCodeSource();
+    if (source != null) {
+      URL location = source.getLocation();
+      try {
+        File classesDir = SdkUtils.urlToFile(location);
+        return classesDir.getParentFile().getAbsoluteFile().getParentFile().getParentFile();
+      } catch (MalformedURLException e) {
+        fail(e.getLocalizedMessage());
+      }
+    }
+    return null;
+  }
+}
diff --git a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
new file mode 100644
index 00000000..d5a7f17d
--- /dev/null
+++ b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
@@ -0,0 +1,12 @@
+package butterknife.lint;
+
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public class LintRegistryTest {
+
+  @Test public void issues() throws Exception {
+    assertThat(new LintRegistry().getIssues()).contains(InvalidR2UsageDetector.ISSUE);
+  }
+}
diff --git a/butterknife-lint/src/test/java/sample/r2/BindTest.java b/butterknife-lint/src/test/java/sample/r2/BindTest.java
new file mode 100644
index 00000000..b31753ca
--- /dev/null
+++ b/butterknife-lint/src/test/java/sample/r2/BindTest.java
@@ -0,0 +1,11 @@
+package sample.r2;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.SOURCE) @Target({ ElementType.FIELD, ElementType.METHOD })
+public @interface BindTest {
+  int value();
+}
diff --git a/butterknife-lint/src/test/java/sample/r2/NoR2Usage.java b/butterknife-lint/src/test/java/sample/r2/NoR2Usage.java
new file mode 100644
index 00000000..f14f8b80
--- /dev/null
+++ b/butterknife-lint/src/test/java/sample/r2/NoR2Usage.java
@@ -0,0 +1,3 @@
+package sample.r2;
+
+public class NoR2Usage { }
diff --git a/butterknife-lint/src/test/java/sample/r2/R2.java b/butterknife-lint/src/test/java/sample/r2/R2.java
new file mode 100644
index 00000000..bfa84bbb
--- /dev/null
+++ b/butterknife-lint/src/test/java/sample/r2/R2.java
@@ -0,0 +1,40 @@
+// Generated code from Butter Knife gradle plugin. Do not modify!
+package sample.r2;
+
+public final class R2 {
+  public static final class array {
+    public static final int res = 0x7f040001;
+  }
+
+  public static final class attr {
+    public static final int res = 0x7f040002;
+  }
+
+  public static final class bool {
+    public static final int res = 0x7f040003;
+  }
+
+  public static final class color {
+    public static final int res = 0x7f040004;
+  }
+
+  public static final class dimen {
+    public static final int res = 0x7f040005;
+  }
+
+  public static final class drawable {
+    public static final int res = 0x7f040006;
+  }
+
+  public static final class id {
+    public static final int res = 0x7f040007;
+  }
+
+  public static final class integer {
+    public static final int res = 0x7f040008;
+  }
+
+  public static final class string {
+    public static final int res = 0x7f040009;
+  }
+}
diff --git a/butterknife-lint/src/test/java/sample/r2/R2UsageInAnnotations.java b/butterknife-lint/src/test/java/sample/r2/R2UsageInAnnotations.java
new file mode 100644
index 00000000..9f63a671
--- /dev/null
+++ b/butterknife-lint/src/test/java/sample/r2/R2UsageInAnnotations.java
@@ -0,0 +1,8 @@
+package sample.r2;
+
+public class R2UsageInAnnotations {
+
+  @BindTest(sample.r2.R2.string.res) String test;
+
+  @BindTest(R2.id.res) public void foo() { }
+}
diff --git a/butterknife-lint/src/test/java/sample/r2/R2UsageOutsideAnnotations.java b/butterknife-lint/src/test/java/sample/r2/R2UsageOutsideAnnotations.java
new file mode 100644
index 00000000..32564b17
--- /dev/null
+++ b/butterknife-lint/src/test/java/sample/r2/R2UsageOutsideAnnotations.java
@@ -0,0 +1,12 @@
+package sample.r2;
+
+public class R2UsageOutsideAnnotations {
+
+  int array = sample.r2.R2.array.res;
+
+  public void foo(int color) {}
+
+  public void bar() {
+    foo(R2.color.res);
+  }
+}
diff --git a/butterknife-lint/src/test/java/sample/r2/R2UsageWithSuppression.java b/butterknife-lint/src/test/java/sample/r2/R2UsageWithSuppression.java
new file mode 100644
index 00000000..a808835c
--- /dev/null
+++ b/butterknife-lint/src/test/java/sample/r2/R2UsageWithSuppression.java
@@ -0,0 +1,14 @@
+package sample.r2;
+
+public class R2UsageWithSuppression {
+
+  @SuppressWarnings("InvalidR2Usage")
+  int bool = sample.r2.R2.bool.res;
+
+  public void foo(int attr) {}
+
+  @SuppressWarnings("InvalidR2Usage")
+  public void bar() {
+    foo(R2.attr.res);
+  }
+}
diff --git a/butterknife-sample/pom.xml b/butterknife-sample/pom.xml
deleted file mode 100644
index 8fcf2319..00000000
--- a/butterknife-sample/pom.xml
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton</groupId>
-    <artifactId>butterknife-parent</artifactId>
-    <version>7.0.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>butterknife-sample</artifactId>
-  <name>Butter Knife Sample</name>
-  <packaging>apk</packaging>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.jakewharton</groupId>
-      <artifactId>butterknife</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.easytesting</groupId>
-      <artifactId>fest-assert-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>fest-android</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.robolectric</groupId>
-      <artifactId>robolectric</artifactId>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>com.simpligility.maven.plugins</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <extensions>true</extensions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
deleted file mode 100644
index 676bc290..00000000
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.example.butterknife;
-
-import butterknife.ButterKnife;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.ANDROID.assertThat;
-
-@RunWith(RobolectricTestRunner.class) //
-@Config(manifest = "src/main/AndroidManifest.xml")
-public class SimpleActivityTest {
-  @Test public void verifyContentViewInjection() {
-    SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class) //
-        .create() //
-        .get();
-
-    assertThat(activity.title).hasId(R.id.title);
-    assertThat(activity.subtitle).hasId(R.id.subtitle);
-    assertThat(activity.hello).hasId(R.id.hello);
-    assertThat(activity.listOfThings).hasId(R.id.list_of_things);
-    assertThat(activity.footer).hasId(R.id.footer);
-
-    ButterKnife.unbind(activity);
-    assertThat(activity.title).isNull();
-    assertThat(activity.subtitle).isNull();
-    assertThat(activity.hello).isNull();
-    assertThat(activity.listOfThings).isNull();
-    assertThat(activity.footer).isNull();
-  }
-}
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
deleted file mode 100644
index 092bb797..00000000
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.example.butterknife;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import butterknife.ButterKnife;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.example.butterknife.SimpleAdapter.ViewHolder;
-import static org.fest.assertions.api.ANDROID.assertThat;
-
-@RunWith(RobolectricTestRunner.class) //
-@Config(manifest = "src/main/AndroidManifest.xml")
-public class SimpleAdapterTest {
-  @Test public void verifyViewHolderViews() {
-    Context context = Robolectric.application;
-
-    View root = LayoutInflater.from(context).inflate(R.layout.simple_list_item, null);
-    ViewHolder holder = new ViewHolder(root);
-
-    assertThat(holder.word).hasId(R.id.word);
-    assertThat(holder.length).hasId(R.id.length);
-    assertThat(holder.position).hasId(R.id.position);
-
-    ButterKnife.unbind(holder);
-    assertThat(holder.word).isNull();
-    assertThat(holder.length).isNull();
-    assertThat(holder.position).isNull();
-  }
-}
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
new file mode 100644
index 00000000..6f2bb055
--- /dev/null
+++ b/butterknife/build.gradle
@@ -0,0 +1,41 @@
+apply plugin: 'com.android.library'
+apply plugin: 'com.kageiit.lintrules'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  defaultConfig {
+    minSdkVersion rootProject.ext.minSdkVersion
+
+    consumerProguardFiles 'proguard-rules.txt'
+
+    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+  }
+}
+
+dependencies {
+  compile project(':butterknife-annotations')
+  compile deps.supportAnnotations
+  compile deps.supportCompat
+
+  lintRules project(':butterknife-lint')
+
+  androidTestCompile deps.junit
+  androidTestCompile deps.truth
+  androidTestCompile deps.supportTestRunner
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.compiletesting
+  testCompile files(org.gradle.internal.jvm.Jvm.current().getRuntimeJar())
+  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testCompile project(':butterknife-compiler')
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife/gradle.properties b/butterknife/gradle.properties
new file mode 100644
index 00000000..fc97e9b8
--- /dev/null
+++ b/butterknife/gradle.properties
@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=butterknife
+POM_NAME=Butterknife
+POM_PACKAGING=aar
diff --git a/butterknife/pom.xml b/butterknife/pom.xml
deleted file mode 100644
index 58f206b0..00000000
--- a/butterknife/pom.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton</groupId>
-    <artifactId>butterknife-parent</artifactId>
-    <version>7.0.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>butterknife</artifactId>
-  <name>Butter Knife</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.easytesting</groupId>
-      <artifactId>fest-assert-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>fest-android</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.robolectric</groupId>
-      <artifactId>robolectric</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.testing.compile</groupId>
-      <artifactId>compile-testing</artifactId>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <compilerArgument>-proc:none</compilerArgument>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <configuration>
-          <excludePackageNames>butterknife.internal:butterknife.internal.*</excludePackageNames>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/butterknife/proguard-rules.txt b/butterknife/proguard-rules.txt
new file mode 100644
index 00000000..371caa00
--- /dev/null
+++ b/butterknife/proguard-rules.txt
@@ -0,0 +1,8 @@
+# Retain generated class which implement Unbinder.
+-keep public class * implements butterknife.Unbinder { public <init>(...); }
+
+# Prevent obfuscation of types which use ButterKnife annotations since the simple name
+# is used to reflectively look up the generated ViewBinding.
+-keep class butterknife.*
+-keepclasseswithmembernames class * { @butterknife.* <methods>; }
+-keepclasseswithmembernames class * { @butterknife.* <fields>; }
diff --git a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
new file mode 100644
index 00000000..9bde9ff5
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -0,0 +1,247 @@
+package butterknife;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.filters.SdkSuppress;
+import android.util.Property;
+import android.view.View;
+import java.util.List;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
+import static com.google.common.truth.Truth.assertThat;
+import static java.util.Arrays.asList;
+
+@TargetApi(ICE_CREAM_SANDWICH)
+@SdkSuppress(minSdkVersion = ICE_CREAM_SANDWICH)
+public class ButterKnifeTest {
+  private static final Property<View, Boolean> PROPERTY_ENABLED =
+      new Property<View, Boolean>(Boolean.class, "enabled") {
+        @Override public Boolean get(View view) {
+          return view.isEnabled();
+        }
+
+        @Override public void set(View view, Boolean enabled) {
+          view.setEnabled(enabled);
+        }
+      };
+  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
+      new ButterKnife.Setter<View, Boolean>() {
+        @Override public void set(@NonNull View view, Boolean value, int index) {
+          view.setEnabled(value);
+        }
+      };
+  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
+    @Override public void apply(@NonNull View view, int index) {
+      view.setEnabled(false);
+    }
+  };
+  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {
+    @Override public void apply(@NonNull View view, int index) {
+      view.setAlpha(0f);
+    }
+  };
+
+  private final Context context = InstrumentationRegistry.getContext();
+
+  @Before @After // Clear out cache of binders before and after each test.
+  public void resetViewsCache() {
+    ButterKnife.BINDINGS.clear();
+  }
+
+  @Test public void propertyAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ButterKnife.apply(view, PROPERTY_ENABLED, false);
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void propertyAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ButterKnife.apply(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void propertyAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ButterKnife.apply(view, ACTION_DISABLE);
+
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void actionsAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+    assertThat(view.getAlpha()).isEqualTo(1f);
+
+    ButterKnife.apply(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+    assertThat(view.isEnabled()).isFalse();
+    assertThat(view.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void actionAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ButterKnife.apply(views, ACTION_DISABLE);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, ACTION_DISABLE);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionsAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
+
+    List<View> views = asList(view1, view2, view3);
+    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void actionsAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void setterAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ButterKnife.apply(view, SETTER_ENABLED, false);
+
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void setterAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ButterKnife.apply(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void setterAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void zeroBindingsBindDoesNotThrowException() {
+    class Example {
+    }
+
+    Example example = new Example();
+    assertThat(ButterKnife.bind(example, (View) null)).isSameAs(Unbinder.EMPTY);
+  }
+
+  @Test public void bindingKnownPackagesIsNoOp() {
+    View view = new View(context);
+    ButterKnife.bind(view);
+    assertThat(ButterKnife.BINDINGS).isEmpty();
+    ButterKnife.bind(new Object(), view);
+    assertThat(ButterKnife.BINDINGS).isEmpty();
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
new file mode 100644
index 00000000..af44c804
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -0,0 +1,69 @@
+package butterknife.internal;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import org.junit.Test;
+
+import static butterknife.internal.Utils.arrayOf;
+import static butterknife.internal.Utils.listOf;
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class UtilsTest {
+  @Test public void listOfFiltersNull() {
+    assertThat(listOf(null, null, null)).isEmpty();
+    assertThat(listOf("One", null, null)).containsExactly("One");
+    assertThat(listOf(null, "One", null)).containsExactly("One");
+    assertThat(listOf(null, null, "One")).containsExactly("One");
+    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
+  }
+
+  @Test public void arrayOfFiltersNull() {
+    assertThat(arrayOf(null, null, null)).isEmpty();
+    assertThat(arrayOf("One", null, null)).asList().containsExactly("One");
+    assertThat(arrayOf(null, "One", null)).asList().containsExactly("One");
+    assertThat(arrayOf(null, null, "One")).asList().containsExactly("One");
+    assertThat(arrayOf("One", "Two", null)).asList().containsExactly("One", "Two");
+    assertThat(arrayOf("One", null, "Two")).asList().containsExactly("One", "Two");
+    assertThat(arrayOf(null, "One", "Two")).asList().containsExactly("One", "Two");
+  }
+
+  @Test public void finderThrowsNiceError() {
+    Context context = InstrumentationRegistry.getContext();
+    View view = new View(context);
+    try {
+      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view 'button1' with ID "
+          + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+
+  @Test public void finderThrowsLessNiceErrorInEditMode() {
+    Context context = InstrumentationRegistry.getContext();
+    View view = new EditModeView(context);
+    try {
+      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
+          + "with ID " + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+
+  static final class EditModeView extends View {
+    EditModeView(Context context) {
+      super(context);
+    }
+
+    @Override public boolean isInEditMode() {
+      return true;
+    }
+  }
+}
diff --git a/butterknife/src/main/AndroidManifest.xml b/butterknife/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..b5e34f17
--- /dev/null
+++ b/butterknife/src/main/AndroidManifest.xml
@@ -0,0 +1,2 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="butterknife"/>
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index d976929c..aa2db57c 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -3,19 +3,23 @@
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.Dialog;
-import android.content.Context;
 import android.os.Build;
+import android.support.annotation.CheckResult;
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RequiresApi;
+import android.support.annotation.UiThread;
+import android.support.annotation.VisibleForTesting;
 import android.util.Log;
 import android.util.Property;
 import android.view.View;
-import butterknife.internal.ButterKnifeProcessor;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;
-import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;
-
 /**
  * Field and method binding for Android views. Use this class to simplify finding views and
  * attaching listeners by binding them with annotations.
@@ -23,8 +27,8 @@
  * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}FindView(R.id.title) EditText titleView;
- *   {@literal @}FindView(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}BindView(R.id.title) EditText titleView;
+ *   {@literal @}BindView(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
@@ -41,7 +45,7 @@
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}BindView({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -65,16 +69,17 @@
  * </code></pre>
  * <p>
  * Be default, views are required to be present in the layout for both field and method bindings.
- * If a view is optional add a {@code @Nullable} annotation such as the one in the
- * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library.
+ * If a view is optional add a {@code @Nullable} annotation for fields (such as the one in the
+ * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library)
+ * or the {@code @Optional} annotation for methods.
  * <pre><code>
- * {@literal @}Nullable @FindView(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @BindView(R.id.title) TextView subtitleView;
  * </code></pre>
  * Resources can also be bound to fields to simplify programmatically working with views:
  * <pre><code>
- * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;
- * {@literal @}ResourceInt(R.int.columns) int columns;
- * {@literal @}ResourceColor(R.color.error_red) int errorRed;
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindInt(R.integer.columns) int columns;
+ * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
  */
 public final class ButterKnife {
@@ -82,154 +87,25 @@ private ButterKnife() {
     throw new AssertionError("No instances.");
   }
 
-  /** DO NOT USE: Exposed for generated code. */
-  @SuppressWarnings("UnusedDeclaration") // Used by generated code.
-  public enum Finder {
-    VIEW {
-      @Override protected View findView(Object source, int id) {
-        return ((View) source).findViewById(id);
-      }
-
-      @Override public Context getContext(Object source) {
-        return ((View) source).getContext();
-      }
-    },
-    ACTIVITY {
-      @Override protected View findView(Object source, int id) {
-        return ((Activity) source).findViewById(id);
-      }
-
-      @Override public Context getContext(Object source) {
-        return (Activity) source;
-      }
-    },
-    DIALOG {
-      @Override protected View findView(Object source, int id) {
-        return ((Dialog) source).findViewById(id);
-      }
-
-      @Override public Context getContext(Object source) {
-        return ((Dialog) source).getContext();
-      }
-    };
-
-    private static <T> T[] filterNull(T[] views) {
-      int newSize = views.length;
-      for (T view : views) {
-        if (view == null) {
-          newSize -= 1;
-        }
-      }
-      if (newSize == views.length) {
-        return views;
-      }
-      //noinspection unchecked
-      T[] newViews = (T[]) new Object[newSize];
-      int nextIndex = 0;
-      for (T view : views) {
-        if (view != null) {
-          newViews[nextIndex++] = view;
-        }
-      }
-      return newViews;
-    }
-
-    public static <T> T[] arrayOf(T... views) {
-      return filterNull(views);
-    }
-
-    public static <T> List<T> listOf(T... views) {
-      return new ImmutableList<T>(filterNull(views));
-    }
-
-    public <T> T findRequiredView(Object source, int id, String who) {
-      T view = findOptionalView(source, id, who);
-      if (view == null) {
-        String name = getContext(source).getResources().getResourceEntryName(id);
-        throw new IllegalStateException("Required view '"
-            + name
-            + "' with ID "
-            + id
-            + " for "
-            + who
-            + " was not found. If this view is optional add '@Nullable' annotation.");
-      }
-      return view;
-    }
-
-    public <T> T findOptionalView(Object source, int id, String who) {
-      View view = findView(source, id);
-      return castView(view, id, who);
-    }
-
-    @SuppressWarnings("unchecked") // That's the point.
-    public <T> T castView(View view, int id, String who) {
-      try {
-        return (T) view;
-      } catch (ClassCastException e) {
-        if (who == null) {
-          throw new AssertionError();
-        }
-        String name = view.getResources().getResourceEntryName(id);
-        throw new IllegalStateException("View '"
-            + name
-            + "' with ID "
-            + id
-            + " for "
-            + who
-            + " was of the wrong type. See cause for more info.", e);
-      }
-    }
-
-    @SuppressWarnings("unchecked") // That's the point.
-    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
-      try {
-        return (T) value;
-      } catch (ClassCastException e) {
-        throw new IllegalStateException("Parameter #"
-            + (fromPosition + 1)
-            + " of method '"
-            + from
-            + "' was of the wrong type for parameter #"
-            + (toPosition + 1)
-            + " of method '"
-            + to
-            + "'. See cause for more info.", e);
-      }
-    }
-
-    protected abstract View findView(Object source, int id);
-
-    public abstract Context getContext(Object source);
-  }
-
-  /** DO NOT USE: Exposed for generated code. */
-  public interface ViewBinder<T> {
-    void bind(Finder finder, T target, Object source);
-    void unbind(T target);
-  }
-
   /** An action that can be applied to a list of views. */
   public interface Action<T extends View> {
     /** Apply the action on the {@code view} which is at {@code index} in the list. */
-    void apply(T view, int index);
+    @UiThread
+    void apply(@NonNull T view, int index);
   }
 
   /** A setter that can apply a value to a list of views. */
   public interface Setter<T extends View, V> {
     /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
-    void set(T view, V value, int index);
+    @UiThread
+    void set(@NonNull T view, V value, int index);
   }
 
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
-  static final Map<Class<?>, ViewBinder<Object>> INJECTORS =
-      new LinkedHashMap<Class<?>, ViewBinder<Object>>();
-  static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
-    @Override public void bind(Finder finder, Object target, Object source) { }
-    @Override public void unbind(Object target) { }
-  };
+  @VisibleForTesting
+  static final Map<Class<?>, Constructor<? extends Unbinder>> BINDINGS = new LinkedHashMap<>();
 
   /** Control whether debug logging is enabled. */
   public static void setDebug(boolean debug) {
@@ -237,168 +113,267 @@ public static void setDebug(boolean debug) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link Activity}. The current content
+   * BindView annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
    *
    * @param target Target activity for view binding.
    */
-  public static void bind(Activity target) {
-    bind(target, target, Finder.ACTIVITY);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Activity target) {
+    View sourceView = target.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link View}. The view and its children
+   * BindView annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
    *
    * @param target Target view for view binding.
    */
-  public static void bind(View target) {
-    bind(target, target, Finder.VIEW);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull View target) {
+    return createBinding(target, target);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link Dialog}. The current content
+   * BindView annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
    *
    * @param target Target dialog for view binding.
    */
-  public static void bind(Dialog target) {
-    bind(target, target, Finder.DIALOG);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Dialog target) {
+    View sourceView = target.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
    *
    * @param target Target class for view binding.
    * @param source Activity on which IDs will be looked up.
    */
-  public static void bind(Object target, Activity source) {
-    bind(target, source, Finder.ACTIVITY);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
+    View sourceView = source.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
    *
    * @param target Target class for view binding.
    * @param source View root on which IDs will be looked up.
    */
-  public static void bind(Object target, View source) {
-    bind(target, source, Finder.VIEW);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
+    return createBinding(target, source);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
    *
    * @param target Target class for view binding.
    * @param source Dialog on which IDs will be looked up.
    */
-  public static void bind(Object target, Dialog source) {
-    bind(target, source, Finder.DIALOG);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
+    View sourceView = source.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
-  /**
-   * Reset fields annotated with {@link FindView @FindView} and {@link FindViews @FindViews}
-   * to {@code null}.
-   * <p>
-   * This should only be used in the {@code onDestroyView} method of a fragment.
-   *
-   * @param target Target class for field unbind.
-   */
-  public static void unbind(Object target) {
+  private static Unbinder createBinding(@NonNull Object target, @NonNull View source) {
     Class<?> targetClass = target.getClass();
-    try {
-      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
-      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
-      if (viewBinder != null) {
-        viewBinder.unbind(target);
-      }
-    } catch (Exception e) {
-      throw new RuntimeException("Unable to unbind views for " + targetClass.getName(), e);
+    if (debug) Log.d(TAG, "Looking up binding for " + targetClass.getName());
+    Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);
+
+    if (constructor == null) {
+      return Unbinder.EMPTY;
     }
-  }
 
-  static void bind(Object target, Object source, Finder finder) {
-    Class<?> targetClass = target.getClass();
+    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.
     try {
-      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
-      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
-      if (viewBinder != null) {
-        viewBinder.bind(finder, target, source);
+      return constructor.newInstance(target, source);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException("Unable to invoke " + constructor, e);
+    } catch (InstantiationException e) {
+      throw new RuntimeException("Unable to invoke " + constructor, e);
+    } catch (InvocationTargetException e) {
+      Throwable cause = e.getCause();
+      if (cause instanceof RuntimeException) {
+        throw (RuntimeException) cause;
+      }
+      if (cause instanceof Error) {
+        throw (Error) cause;
       }
-    } catch (Exception e) {
-      throw new RuntimeException("Unable to bind views for " + targetClass.getName(), e);
+      throw new RuntimeException("Unable to create binding instance.", cause);
     }
   }
 
-  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
-      throws IllegalAccessException, InstantiationException {
-    ViewBinder<Object> viewBinder = INJECTORS.get(cls);
-    if (viewBinder != null) {
-      if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
-      return viewBinder;
+  @Nullable @CheckResult @UiThread
+  private static Constructor<? extends Unbinder> findBindingConstructorForClass(Class<?> cls) {
+    Constructor<? extends Unbinder> bindingCtor = BINDINGS.get(cls);
+    if (bindingCtor != null) {
+      if (debug) Log.d(TAG, "HIT: Cached in binding map.");
+      return bindingCtor;
     }
     String clsName = cls.getName();
-    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
+    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
-      return NOP_VIEW_BINDER;
+      return null;
     }
     try {
-      Class<?> viewBindingClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);
+      Class<?> bindingClass = Class.forName(clsName + "_ViewBinding");
       //noinspection unchecked
-      viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
-      if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
+      bindingCtor = (Constructor<? extends Unbinder>) bindingClass.getConstructor(cls, View.class);
+      if (debug) Log.d(TAG, "HIT: Loaded binding class and constructor.");
     } catch (ClassNotFoundException e) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
-      viewBinder = findViewBinderForClass(cls.getSuperclass());
+      bindingCtor = findBindingConstructorForClass(cls.getSuperclass());
+    } catch (NoSuchMethodException e) {
+      throw new RuntimeException("Unable to find binding constructor for " + clsName, e);
+    }
+    BINDINGS.put(cls, bindingCtor);
+    return bindingCtor;
+  }
+
+  /** Apply the specified {@code actions} across the {@code list} of views. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(list.get(i), i);
+      }
+    }
+  }
+
+  /** Apply the specified {@code actions} across the {@code array} of views. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(array[i], i);
+      }
     }
-    INJECTORS.put(cls, viewBinder);
-    return viewBinder;
   }
 
   /** Apply the specified {@code action} across the {@code list} of views. */
-  public static <T extends View> void apply(List<T> list, Action<? super T> action) {
+  @UiThread
+  public static <T extends View> void apply(@NonNull List<T> list,
+      @NonNull Action<? super T> action) {
     for (int i = 0, count = list.size(); i < count; i++) {
       action.apply(list.get(i), i);
     }
   }
 
+  /** Apply the specified {@code action} across the {@code array} of views. */
+  @UiThread
+  public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      action.apply(array[i], i);
+    }
+  }
+
+  /** Apply {@code actions} to {@code view}. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void apply(@NonNull T view,
+      @NonNull Action<? super T>... actions) {
+    for (Action<? super T> action : actions) {
+      action.apply(view, 0);
+    }
+  }
+
+  /** Apply {@code action} to {@code view}. */
+  @UiThread
+  public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
+    action.apply(view, 0);
+  }
+
   /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
-  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {
+  @UiThread
+  public static <T extends View, V> void apply(@NonNull List<T> list,
+      @NonNull Setter<? super T, V> setter, V value) {
     for (int i = 0, count = list.size(); i < count; i++) {
       setter.set(list.get(i), value, i);
     }
   }
 
+  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
+  @UiThread
+  public static <T extends View, V> void apply(@NonNull T[] array,
+      @NonNull Setter<? super T, V> setter, V value) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value, i);
+    }
+  }
+
+  /** Set {@code value} on {@code view} using {@code setter}. */
+  @UiThread
+  public static <T extends View, V> void apply(@NonNull T view,
+      @NonNull Setter<? super T, V> setter, V value) {
+    setter.set(view, value, 0);
+  }
+
   /**
    * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
    */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  public static <T extends View, V> void apply(List<T> list, Property<? super T, V> setter,
-      V value) {
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
+  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @UiThread
+  public static <T extends View, V> void apply(@NonNull List<T> list,
+      @NonNull Property<? super T, V> setter, V value) {
     //noinspection ForLoopReplaceableByForEach
     for (int i = 0, count = list.size(); i < count; i++) {
       setter.set(list.get(i), value);
     }
   }
 
+  /**
+   * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
+   */
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
+  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @UiThread
+  public static <T extends View, V> void apply(@NonNull T[] array,
+      @NonNull Property<? super T, V> setter, V value) {
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value);
+    }
+  }
+
+  /** Apply {@code value} to {@code view} using {@code property}. */
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
+  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @UiThread
+  public static <T extends View, V> void apply(@NonNull T view,
+      @NonNull Property<? super T, V> setter, V value) {
+    setter.set(view, value);
+  }
+
   /** Simpler version of {@link View#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  public static <T extends View> T findById(View view, int id) {
+  @CheckResult
+  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
     return (T) view.findViewById(id);
   }
 
   /** Simpler version of {@link Activity#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  public static <T extends View> T findById(Activity activity, int id) {
+  @CheckResult
+  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
     return (T) activity.findViewById(id);
   }
 
   /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  public static <T extends View> T findById(Dialog dialog, int id) {
+  @CheckResult
+  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
     return (T) dialog.findViewById(id);
   }
 }
diff --git a/butterknife/src/main/java/butterknife/FindViews.java b/butterknife/src/main/java/butterknife/FindViews.java
deleted file mode 100644
index 9db7ea36..00000000
--- a/butterknife/src/main/java/butterknife/FindViews.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-import java.util.List;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind a field to the view for each ID specified in a {@link List} or array. Each view will
- * automatically be cast to the list or array type.
- * <pre><code>
- * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
- * List&lt;TextView&gt; nameViews;
- *
- * {@literal @}FindViews({R.id.address_line_1, R.id.address_line_2})
- * EditText[] addressViews;
- * </code></pre>
- */
-@Retention(CLASS) @Target(FIELD)
-public @interface FindViews {
-  /** View IDs to which the field will be bound. */
-  int[] value();
-}
diff --git a/butterknife/src/main/java/butterknife/ResourceDrawable.java b/butterknife/src/main/java/butterknife/ResourceDrawable.java
deleted file mode 100644
index 588dffe8..00000000
--- a/butterknife/src/main/java/butterknife/ResourceDrawable.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind a field to the specified drawable resource ID.
- * <pre><code>
- * {@literal @}ResourceDrawable(R.drawable.placeholder) Drawable placeholder;
- * </code></pre>
- */
-@Retention(CLASS) @Target(FIELD)
-public @interface ResourceDrawable {
-  /** Drawable resource ID to which the field will be bound. */
-  int value();
-}
diff --git a/butterknife/src/main/java/butterknife/Unbinder.java b/butterknife/src/main/java/butterknife/Unbinder.java
new file mode 100644
index 00000000..ce27c3e9
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/Unbinder.java
@@ -0,0 +1,12 @@
+package butterknife;
+
+import android.support.annotation.UiThread;
+
+/** An unbinder contract that will unbind views when called. */
+public interface Unbinder {
+  @UiThread void unbind();
+
+  Unbinder EMPTY = new Unbinder() {
+    @Override public void unbind() { }
+  };
+}
diff --git a/butterknife/src/main/java/butterknife/internal/BindingClass.java b/butterknife/src/main/java/butterknife/internal/BindingClass.java
deleted file mode 100644
index 7f45cebc..00000000
--- a/butterknife/src/main/java/butterknife/internal/BindingClass.java
+++ /dev/null
@@ -1,442 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
-
-final class BindingClass {
-  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<Integer, ViewBindings>();
-  private final Map<FieldCollectionViewBinding, int[]> collectionBindings =
-      new LinkedHashMap<FieldCollectionViewBinding, int[]>();
-  private final List<FieldResourceBinding> resourceBindings = new ArrayList<FieldResourceBinding>();
-  private final String classPackage;
-  private final String className;
-  private final String targetClass;
-  private String parentViewBinder;
-
-  BindingClass(String classPackage, String className, String targetClass) {
-    this.classPackage = classPackage;
-    this.className = className;
-    this.targetClass = targetClass;
-  }
-
-  void addField(int id, FieldViewBinding binding) {
-    getOrCreateViewBindings(id).addFieldBinding(binding);
-  }
-
-  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
-    collectionBindings.put(binding, ids);
-  }
-
-  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
-      MethodViewBinding binding) {
-    ViewBindings viewBindings = getOrCreateViewBindings(id);
-    if (viewBindings.hasMethodBinding(listener, method)
-        && !"void".equals(method.returnType())) {
-      return false;
-    }
-    viewBindings.addMethodBinding(listener, method, binding);
-    return true;
-  }
-
-  void addResource(FieldResourceBinding binding) {
-    resourceBindings.add(binding);
-  }
-
-  void setParentViewBinder(String parentViewBinder) {
-    this.parentViewBinder = parentViewBinder;
-  }
-
-  ViewBindings getViewInjection(int id) {
-    return viewIdMap.get(id);
-  }
-
-  private ViewBindings getOrCreateViewBindings(int id) {
-    ViewBindings viewId = viewIdMap.get(id);
-    if (viewId == null) {
-      viewId = new ViewBindings(id);
-      viewIdMap.put(id, viewId);
-    }
-    return viewId;
-  }
-
-  String getFqcn() {
-    return classPackage + "." + className;
-  }
-
-  String brewJava() {
-    StringBuilder builder = new StringBuilder();
-    builder.append("// Generated code from Butter Knife. Do not modify!\n");
-    builder.append("package ").append(classPackage).append(";\n\n");
-
-    if (!resourceBindings.isEmpty()) {
-      builder.append("import android.content.res.Resources;\n");
-    }
-    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
-      builder.append("import android.view.View;\n");
-    }
-    builder.append("import butterknife.ButterKnife.Finder;\n");
-    if (parentViewBinder == null) {
-      builder.append("import butterknife.ButterKnife.ViewBinder;\n");
-    }
-    builder.append('\n');
-
-    builder.append("public class ").append(className);
-    builder.append("<T extends ").append(targetClass).append(">");
-
-    if (parentViewBinder != null) {
-      builder.append(" extends ").append(parentViewBinder).append("<T>");
-    } else {
-      builder.append(" implements ViewBinder<T>");
-    }
-    builder.append(" {\n");
-
-    emitBindMethod(builder);
-    builder.append('\n');
-    emitUnbindMethod(builder);
-
-    builder.append("}\n");
-    return builder.toString();
-  }
-
-  private void emitBindMethod(StringBuilder builder) {
-    builder.append("  @Override ")
-        .append("public void bind(final Finder finder, final T target, Object source) {\n");
-
-    // Emit a call to the superclass binder, if any.
-    if (parentViewBinder != null) {
-      builder.append("    super.bind(finder, target, source);\n\n");
-    }
-
-    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
-      // Local variable in which all views will be temporarily stored.
-      builder.append("    View view;\n");
-
-      // Loop over each view bindings and emit it.
-      for (ViewBindings bindings : viewIdMap.values()) {
-        emitViewBindings(builder, bindings);
-      }
-
-      // Loop over each collection binding and emit it.
-      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
-        emitCollectionBinding(builder, entry.getKey(), entry.getValue());
-      }
-    }
-
-    if (!resourceBindings.isEmpty()) {
-      builder.append("    Resources res = finder.getContext(source).getResources();\n");
-
-      for (FieldResourceBinding binding : resourceBindings) {
-        builder.append("    target.")
-            .append(binding.getName())
-            .append(" = res.")
-            .append(binding.getMethod())
-            .append('(')
-            .append(binding.getId())
-            .append(");\n");
-      }
-    }
-
-    builder.append("  }\n");
-  }
-
-  private void emitCollectionBinding(StringBuilder builder, FieldCollectionViewBinding binding,
-      int[] ids) {
-    builder.append("    target.").append(binding.getName()).append(" = ");
-
-    switch (binding.getKind()) {
-      case ARRAY:
-        builder.append("Finder.arrayOf(");
-        break;
-      case LIST:
-        builder.append("Finder.listOf(");
-        break;
-      default:
-        throw new IllegalStateException("Unknown kind: " + binding.getKind());
-    }
-
-    for (int i = 0; i < ids.length; i++) {
-      if (i > 0) {
-        builder.append(',');
-      }
-      builder.append("\n        finder.<")
-          .append(binding.getType())
-          .append(">")
-          .append(binding.isRequired() ? "findRequiredView" : "findOptionalView")
-          .append("(source, ")
-          .append(ids[i])
-          .append(", \"");
-      emitHumanDescription(builder, Collections.singleton(binding));
-      builder.append("\")");
-    }
-
-    builder.append("\n    );\n");
-  }
-
-  private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
-    builder.append("    view = ");
-
-    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
-    if (requiredViewBindings.isEmpty()) {
-      builder.append("finder.findOptionalView(source, ")
-          .append(bindings.getId())
-          .append(", null);\n");
-    } else {
-      if (bindings.getId() == View.NO_ID) {
-        builder.append("target;\n");
-      } else {
-        builder.append("finder.findRequiredView(source, ")
-            .append(bindings.getId())
-            .append(", \"");
-        emitHumanDescription(builder, requiredViewBindings);
-        builder.append("\");\n");
-      }
-    }
-
-    emitFieldBindings(builder, bindings);
-    emitMethodBindings(builder, bindings);
-  }
-
-  private void emitFieldBindings(StringBuilder builder, ViewBindings bindings) {
-    Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
-    if (fieldBindings.isEmpty()) {
-      return;
-    }
-
-    for (FieldViewBinding fieldBinding : fieldBindings) {
-      builder.append("    target.")
-          .append(fieldBinding.getName())
-          .append(" = ");
-      if (fieldBinding.requiresCast()) {
-        builder.append("finder.castView(view")
-            .append(", ")
-            .append(bindings.getId())
-            .append(", \"");
-        emitHumanDescription(builder, fieldBindings);
-        builder.append("\");\n");
-      } else {
-        builder.append("view;\n");
-      }
-    }
-  }
-
-  private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
-    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
-        bindings.getMethodBindings();
-    if (classMethodBindings.isEmpty()) {
-      return;
-    }
-
-    String extraIndent = "";
-
-    // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
-    if (needsNullChecked) {
-      builder.append("    if (view != null) {\n");
-      extraIndent = "  ";
-    }
-
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
-        : classMethodBindings.entrySet()) {
-      ListenerClass listener = e.getKey();
-      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
-
-      // Emit: ((OWNER_TYPE) view).SETTER_NAME(
-      boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
-      builder.append(extraIndent)
-          .append("    ");
-      if (needsCast) {
-        builder.append("((").append(listener.targetType());
-        if (listener.genericArguments() > 0) {
-          builder.append('<');
-          for (int i = 0; i < listener.genericArguments(); i++) {
-            if (i > 0) {
-              builder.append(", ");
-            }
-            builder.append('?');
-          }
-          builder.append('>');
-        }
-        builder.append(") ");
-      }
-      builder.append("view");
-      if (needsCast) {
-        builder.append(')');
-      }
-      builder.append('.')
-          .append(listener.setter())
-          .append("(\n");
-
-      // Emit: new TYPE() {
-      builder.append(extraIndent)
-          .append("      new ")
-          .append(listener.type())
-          .append("() {\n");
-
-      for (ListenerMethod method : getListenerMethods(listener)) {
-        // Emit: @Override public RETURN_TYPE METHOD_NAME(
-        builder.append(extraIndent)
-            .append("        @Override public ")
-            .append(method.returnType())
-            .append(' ')
-            .append(method.name())
-            .append("(\n");
-
-        // Emit listener method arguments, each on their own line.
-        String[] parameterTypes = method.parameters();
-        for (int i = 0, count = parameterTypes.length; i < count; i++) {
-          builder.append(extraIndent)
-              .append("          ")
-              .append(parameterTypes[i])
-              .append(" p")
-              .append(i);
-          if (i < count - 1) {
-            builder.append(',');
-          }
-          builder.append('\n');
-        }
-
-        // Emit end of parameters, start of body.
-        builder.append(extraIndent).append("        ) {\n");
-
-        // Set up the return statement, if needed.
-        builder.append(extraIndent).append("          ");
-        boolean hasReturnType = !"void".equals(method.returnType());
-        if (hasReturnType) {
-          builder.append("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          Set<MethodViewBinding> set = methodBindings.get(method);
-          Iterator<MethodViewBinding> iterator = set.iterator();
-
-          while (iterator.hasNext()) {
-            MethodViewBinding binding = iterator.next();
-            builder.append("target.").append(binding.getName()).append('(');
-            List<Parameter> parameters = binding.getParameters();
-            String[] listenerParameters = method.parameters();
-            for (int i = 0, count = parameters.size(); i < count; i++) {
-              Parameter parameter = parameters.get(i);
-              int listenerPosition = parameter.getListenerPosition();
-
-              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.append("finder.<")
-                    .append(parameter.getType())
-                    .append(">castParam(p")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(method.name())
-                    .append("\", ")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(binding.getName())
-                    .append("\", ")
-                    .append(i)
-                    .append(")");
-              } else {
-                builder.append('p').append(listenerPosition);
-              }
-
-              if (i < count - 1) {
-                builder.append(", ");
-              }
-            }
-            builder.append(");");
-            if (iterator.hasNext()) {
-              builder.append("\n").append("          ");
-            }
-          }
-        } else if (hasReturnType) {
-          builder.append(method.defaultReturn()).append(';');
-        }
-        builder.append('\n');
-
-        // Emit end of listener method.
-        builder.append(extraIndent).append("        }\n");
-      }
-
-      // Emit end of listener class body and close the setter method call.
-      builder.append(extraIndent).append("      });\n");
-    }
-
-    if (needsNullChecked) {
-      builder.append("    }\n");
-    }
-  }
-
-  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
-    if (listener.method().length == 1) {
-      return Arrays.asList(listener.method());
-    }
-
-    try {
-      List<ListenerMethod> methods = new ArrayList<ListenerMethod>();
-      Class<? extends Enum<?>> callbacks = listener.callbacks();
-      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
-        Field callbackField = callbacks.getField(callbackMethod.name());
-        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
-        if (method == null) {
-          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
-              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
-              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
-        }
-        methods.add(method);
-      }
-      return methods;
-    } catch (NoSuchFieldException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  private void emitUnbindMethod(StringBuilder builder) {
-    builder.append("  @Override public void unbind(T target) {\n");
-    if (parentViewBinder != null) {
-      builder.append("    super.unbind(target);\n\n");
-    }
-    for (ViewBindings bindings : viewIdMap.values()) {
-      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
-        builder.append("    target.").append(fieldBinding.getName()).append(" = null;\n");
-      }
-    }
-    for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
-      builder.append("    target.").append(fieldCollectionBinding.getName()).append(" = null;\n");
-    }
-    builder.append("  }\n");
-  }
-
-  static void emitHumanDescription(StringBuilder builder,
-      Collection<? extends ViewBinding> bindings) {
-    Iterator<? extends ViewBinding> iterator = bindings.iterator();
-    switch (bindings.size()) {
-      case 1:
-        builder.append(iterator.next().getDescription());
-        break;
-      case 2:
-        builder.append(iterator.next().getDescription())
-            .append(" and ")
-            .append(iterator.next().getDescription());
-        break;
-      default:
-        for (int i = 0, count = bindings.size(); i < count; i++) {
-          if (i != 0) {
-            builder.append(", ");
-          }
-          if (i == count - 1) {
-            builder.append("and ");
-          }
-          builder.append(iterator.next().getDescription());
-        }
-        break;
-    }
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
deleted file mode 100644
index c8b696ff..00000000
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ /dev/null
@@ -1,982 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-import butterknife.FindView;
-import butterknife.FindViews;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import butterknife.ResourceBool;
-import butterknife.ResourceColor;
-import butterknife.ResourceDimen;
-import butterknife.ResourceDrawable;
-import butterknife.ResourceInt;
-import butterknife.ResourceString;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.BitSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import javax.annotation.processing.AbstractProcessor;
-import javax.annotation.processing.Filer;
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.annotation.processing.RoundEnvironment;
-import javax.lang.model.SourceVersion;
-import javax.lang.model.element.AnnotationMirror;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.Modifier;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.ArrayType;
-import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.TypeKind;
-import javax.lang.model.type.TypeMirror;
-import javax.lang.model.type.TypeVariable;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
-import javax.tools.JavaFileObject;
-
-import static javax.lang.model.element.ElementKind.CLASS;
-import static javax.lang.model.element.ElementKind.INTERFACE;
-import static javax.lang.model.element.ElementKind.METHOD;
-import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.STATIC;
-import static javax.tools.Diagnostic.Kind.ERROR;
-
-public final class ButterKnifeProcessor extends AbstractProcessor {
-  public static final String SUFFIX = "$$ViewBinder";
-  public static final String ANDROID_PREFIX = "android.";
-  public static final String JAVA_PREFIX = "java.";
-  static final String VIEW_TYPE = "android.view.View";
-  private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
-  private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
-  private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
-  private static final String LIST_TYPE = List.class.getCanonicalName();
-  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
-      OnCheckedChanged.class, //
-      OnClick.class, //
-      OnEditorAction.class, //
-      OnFocusChange.class, //
-      OnItemClick.class, //
-      OnItemLongClick.class, //
-      OnItemSelected.class, //
-      OnLongClick.class, //
-      OnPageChange.class, //
-      OnTextChanged.class, //
-      OnTouch.class //
-  );
-
-  private Elements elementUtils;
-  private Types typeUtils;
-  private Filer filer;
-
-  @Override public synchronized void init(ProcessingEnvironment env) {
-    super.init(env);
-
-    elementUtils = env.getElementUtils();
-    typeUtils = env.getTypeUtils();
-    filer = env.getFiler();
-  }
-
-  @Override public Set<String> getSupportedAnnotationTypes() {
-    Set<String> types = new LinkedHashSet<String>();
-
-    types.add(FindView.class.getCanonicalName());
-    types.add(FindViews.class.getCanonicalName());
-
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      types.add(listener.getCanonicalName());
-    }
-
-    types.add(ResourceBool.class.getCanonicalName());
-    types.add(ResourceColor.class.getCanonicalName());
-    types.add(ResourceDimen.class.getCanonicalName());
-    types.add(ResourceDrawable.class.getCanonicalName());
-    types.add(ResourceInt.class.getCanonicalName());
-    types.add(ResourceString.class.getCanonicalName());
-
-    return types;
-  }
-
-  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
-    Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);
-
-    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
-      TypeElement typeElement = entry.getKey();
-      BindingClass bindingClass = entry.getValue();
-
-      try {
-        JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);
-        Writer writer = jfo.openWriter();
-        writer.write(bindingClass.brewJava());
-        writer.flush();
-        writer.close();
-      } catch (IOException e) {
-        error(typeElement, "Unable to write view binder for type %s: %s", typeElement,
-            e.getMessage());
-      }
-    }
-
-    return true;
-  }
-
-  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {
-    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<TypeElement, BindingClass>();
-    Set<String> erasedTargetNames = new LinkedHashSet<String>();
-
-    // Process each @FindView element.
-    for (Element element : env.getElementsAnnotatedWith(FindView.class)) {
-      try {
-        parseFindView(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, FindView.class, e);
-      }
-    }
-
-    // Process each @FindViews element.
-    for (Element element : env.getElementsAnnotatedWith(FindViews.class)) {
-      try {
-        parseFindViews(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, FindViews.class, e);
-      }
-    }
-
-    // Process each annotation that corresponds to a listener.
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
-    }
-
-    // Process each @ResourceBool element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceBool.class)) {
-      try {
-        parseResourceBool(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, ResourceBool.class, e);
-      }
-    }
-
-    // Process each @ResourceColor element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceColor.class)) {
-      try {
-        parseResourceColor(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, ResourceColor.class, e);
-      }
-    }
-
-    // Process each @ResourceDimen element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceDimen.class)) {
-      try {
-        parseResourceDimen(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, ResourceDimen.class, e);
-      }
-    }
-
-    // Process each @ResourceDrawable element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceDrawable.class)) {
-      try {
-        parseResourceDrawable(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, ResourceDrawable.class, e);
-      }
-    }
-
-    // Process each @ResourceInt element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceInt.class)) {
-      try {
-        parseResourceInt(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, ResourceInt.class, e);
-      }
-    }
-
-    // Process each @ResourceString element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceString.class)) {
-      try {
-        parseResourceString(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, ResourceString.class, e);
-      }
-    }
-
-    // Try to find a parent binder for each.
-    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
-      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
-      if (parentClassFqcn != null) {
-        entry.getValue().setParentViewBinder(parentClassFqcn + SUFFIX);
-      }
-    }
-
-    return targetClassMap;
-  }
-
-  private void logParsingError(Element element, Class<? extends Annotation> annotation,
-      Exception e) {
-    StringWriter stackTrace = new StringWriter();
-    e.printStackTrace(new PrintWriter(stackTrace));
-    error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
-  }
-
-  private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass,
-      String targetThing, Element element) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify method modifiers.
-    Set<Modifier> modifiers = element.getModifiers();
-    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
-      error(element, "@%s %s must not be private or static. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify containing type.
-    if (enclosingElement.getKind() != CLASS) {
-      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify containing class visibility is not private.
-    if (enclosingElement.getModifiers().contains(PRIVATE)) {
-      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    return hasError;
-  }
-
-  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,
-      Element element) {
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-    String qualifiedName = enclosingElement.getQualifiedName().toString();
-
-    if (qualifiedName.startsWith(ANDROID_PREFIX)) {
-      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
-          annotationClass.getSimpleName(), qualifiedName);
-      return true;
-    }
-    if (qualifiedName.startsWith(JAVA_PREFIX)) {
-      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
-          annotationClass.getSimpleName(), qualifiedName);
-      return true;
-    }
-
-    return false;
-  }
-
-  private void parseFindView(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type extends from View.
-    TypeMirror elementType = element.asType();
-    if (elementType.getKind() == TypeKind.TYPEVAR) {
-      TypeVariable typeVariable = (TypeVariable) elementType;
-      elementType = typeVariable.getUpperBound();
-    }
-    if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
-      error(element, "@FindView fields must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(FindView.class, "fields", element);
-    hasError |= isBindingInWrongPackage(FindView.class, element);
-
-    // Check for the other field annotation.
-    if (element.getAnnotation(FindViews.class) != null) {
-      error(element, "Only one of @FindView and @FindViews is allowed. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    int id = element.getAnnotation(FindView.class).value();
-
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
-    if (bindingClass != null) {
-      ViewBindings viewBindings = bindingClass.getViewInjection(id);
-      if (viewBindings != null) {
-        Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
-        if (iterator.hasNext()) {
-          FieldViewBinding existingBinding = iterator.next();
-          error(element,
-              "Attempt to use @FindView for an already bound ID %d on '%s'. (%s.%s)", id,
-              existingBinding.getName(), enclosingElement.getQualifiedName(),
-              element.getSimpleName());
-          return;
-        }
-      }
-    } else {
-      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    }
-
-    String name = element.getSimpleName().toString();
-    String type = elementType.toString();
-    boolean required = isRequiredInjection(element);
-
-    FieldViewBinding binding = new FieldViewBinding(name, type, required);
-    bindingClass.addField(id, binding);
-
-    // Add the type-erased version to the valid binding targets set.
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseFindViews(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the type is a List or an array.
-    TypeMirror elementType = element.asType();
-    String erasedType = doubleErasure(elementType);
-    TypeMirror viewType = null;
-    FieldCollectionViewBinding.Kind kind = null;
-    if (elementType.getKind() == TypeKind.ARRAY) {
-      ArrayType arrayType = (ArrayType) elementType;
-      viewType = arrayType.getComponentType();
-      kind = FieldCollectionViewBinding.Kind.ARRAY;
-    } else if (LIST_TYPE.equals(erasedType)) {
-      DeclaredType declaredType = (DeclaredType) elementType;
-      List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
-      if (typeArguments.size() != 1) {
-        error(element, "@FindViews List must have a generic component. (%s.%s)",
-            enclosingElement.getQualifiedName(), element.getSimpleName());
-        hasError = true;
-      } else {
-        viewType = typeArguments.get(0);
-      }
-      kind = FieldCollectionViewBinding.Kind.LIST;
-    } else {
-      error(element, "@FindViews must be a List or array. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-    if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
-      TypeVariable typeVariable = (TypeVariable) viewType;
-      viewType = typeVariable.getUpperBound();
-    }
-
-    // Verify that the target type extends from View.
-    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
-      error(element, "@FindViews type must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(FindViews.class, "fields", element);
-    hasError |= isBindingInWrongPackage(FindViews.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(FindViews.class).value();
-    if (ids.length == 0) {
-      error(element, "@FindViews must specify at least one ID. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      return;
-    }
-
-    Integer duplicateId = findDuplicate(ids);
-    if (duplicateId != null) {
-      error(element, "@FindViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-    }
-
-    assert viewType != null; // Always false as hasError would have been true.
-    String type = viewType.toString();
-    boolean required = isRequiredInjection(element);
-
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
-    bindingClass.addFieldCollection(ids, binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseResourceBool(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type is bool.
-    if (element.asType().getKind() != TypeKind.BOOLEAN) {
-      error(element, "@%s field type must be 'boolean'. (%s.%s)",
-          ResourceBool.class.getSimpleName(), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceBool.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceBool.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceBool.class).value();
-
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean");
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseResourceColor(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type is int or ColorStateList.
-    boolean isColorStateList = false;
-    TypeMirror elementType = element.asType();
-    if (COLOR_STATE_LIST_TYPE.equals(elementType.toString())) {
-      isColorStateList = true;
-    } else if (elementType.getKind() != TypeKind.INT) {
-      error(element, "@%s field type must be 'int' or 'ColorStateList'. (%s.%s)",
-          ResourceColor.class.getSimpleName(), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceColor.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceColor.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceColor.class).value();
-
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name,
-        isColorStateList ? "getColorStateList" : "getColor");
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseResourceDimen(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type is int or ColorStateList.
-    boolean isInt = false;
-    TypeMirror elementType = element.asType();
-    if (elementType.getKind() == TypeKind.INT) {
-      isInt = true;
-    } else if (elementType.getKind() != TypeKind.FLOAT) {
-      error(element, "@%s field type must be 'int' or 'float'. (%s.%s)",
-          ResourceDimen.class.getSimpleName(), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceDimen.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceDimen.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceDimen.class).value();
-
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name,
-        isInt ? "getDimensionPixelSize" : "getDimension");
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseResourceDrawable(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type is Drawable.
-    if (!DRAWABLE_TYPE.equals(element.asType().toString())) {
-      error(element, "@%s field type must be 'Drawable'. (%s.%s)",
-          ResourceDrawable.class.getSimpleName(), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceDrawable.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceDrawable.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceDrawable.class).value();
-
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable");
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseResourceInt(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type is int.
-    if (element.asType().getKind() != TypeKind.INT) {
-      error(element, "@%s field type must be 'int'. (%s.%s)", ResourceInt.class.getSimpleName(),
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceInt.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceInt.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceInt.class).value();
-
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger");
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseResourceString(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type is String.
-    if (!"java.lang.String".equals(element.asType().toString())) {
-      error(element, "@%s field type must be 'String'. (%s.%s)",
-          ResourceString.class.getSimpleName(), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceString.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceString.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceString.class).value();
-
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString");
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  /** Returns the first duplicate element inside an array, null if there are no duplicates. */
-  private static Integer findDuplicate(int[] array) {
-    Set<Integer> seenElements = new LinkedHashSet<Integer>();
-
-    for (int element : array) {
-      if (!seenElements.add(element)) {
-        return element;
-      }
-    }
-
-    return null;
-  }
-
-  /** Uses both {@link Types#erasure} and string manipulation to strip any generic types. */
-  private String doubleErasure(TypeMirror elementType) {
-    String name = typeUtils.erasure(elementType).toString();
-    int typeParamStart = name.indexOf('<');
-    if (typeParamStart != -1) {
-      name = name.substring(0, typeParamStart);
-    }
-    return name;
-  }
-
-  private void findAndParseListener(RoundEnvironment env,
-      Class<? extends Annotation> annotationClass, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
-      try {
-        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
-
-        error(element, "Unable to generate view binder for @%s.\n\n%s",
-            annotationClass.getSimpleName(), stackTrace.toString());
-      }
-    }
-  }
-
-  private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
-      Map<TypeElement, BindingClass> targetClassMap, Set<String> erasedTargetNames)
-      throws Exception {
-    // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
-    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
-      throw new IllegalStateException(
-          String.format("@%s annotation must be on a method.", annotationClass.getSimpleName()));
-    }
-
-    ExecutableElement executableElement = (ExecutableElement) element;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Assemble information on the method.
-    Annotation annotation = element.getAnnotation(annotationClass);
-    Method annotationValue = annotationClass.getDeclaredMethod("value");
-    if (annotationValue.getReturnType() != int[].class) {
-      throw new IllegalStateException(
-          String.format("@%s annotation value() type not int[].", annotationClass));
-    }
-
-    int[] ids = (int[]) annotationValue.invoke(annotation);
-    String name = executableElement.getSimpleName().toString();
-    boolean required = isRequiredInjection(element);
-
-    // Verify that the method and its containing class are accessible via generated code.
-    boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
-    hasError |= isBindingInWrongPackage(annotationClass, element);
-
-    Integer duplicateId = findDuplicate(ids);
-    if (duplicateId != null) {
-      error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
-          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    ListenerClass listener = annotationClass.getAnnotation(ListenerClass.class);
-    if (listener == null) {
-      throw new IllegalStateException(
-          String.format("No @%s defined on @%s.", ListenerClass.class.getSimpleName(),
-              annotationClass.getSimpleName()));
-    }
-
-    for (int id : ids) {
-      if (id == View.NO_ID) {
-        if (ids.length == 1) {
-          if (!required) {
-            error(element, "ID free binding must not be annotated with @Nullable. (%s.%s)",
-                enclosingElement.getQualifiedName(), element.getSimpleName());
-            hasError = true;
-          }
-
-          // Verify target type is valid for a binding without an id.
-          String targetType = listener.targetType();
-          if (!isSubtypeOfType(enclosingElement.asType(), targetType)
-              && !isInterface(enclosingElement.asType())) {
-            error(element, "@%s annotation without an ID may only be used with an object of type "
-                    + "\"%s\" or an interface. (%s.%s)",
-                    annotationClass.getSimpleName(), targetType,
-                enclosingElement.getQualifiedName(), element.getSimpleName());
-            hasError = true;
-          }
-        } else {
-          error(element, "@%s annotation contains invalid ID %d. (%s.%s)",
-              annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
-              element.getSimpleName());
-          hasError = true;
-        }
-      }
-    }
-
-    ListenerMethod method;
-    ListenerMethod[] methods = listener.method();
-    if (methods.length > 1) {
-      throw new IllegalStateException(String.format("Multiple listener methods specified on @%s.",
-          annotationClass.getSimpleName()));
-    } else if (methods.length == 1) {
-      if (listener.callbacks() != ListenerClass.NONE.class) {
-        throw new IllegalStateException(
-            String.format("Both method() and callback() defined on @%s.",
-                annotationClass.getSimpleName()));
-      }
-      method = methods[0];
-    } else {
-      Method annotationCallback = annotationClass.getDeclaredMethod("callback");
-      Enum<?> callback = (Enum<?>) annotationCallback.invoke(annotation);
-      Field callbackField = callback.getDeclaringClass().getField(callback.name());
-      method = callbackField.getAnnotation(ListenerMethod.class);
-      if (method == null) {
-        throw new IllegalStateException(
-            String.format("No @%s defined on @%s's %s.%s.", ListenerMethod.class.getSimpleName(),
-                annotationClass.getSimpleName(), callback.getDeclaringClass().getSimpleName(),
-                callback.name()));
-      }
-    }
-
-    // Verify that the method has equal to or less than the number of parameters as the listener.
-    List<? extends VariableElement> methodParameters = executableElement.getParameters();
-    if (methodParameters.size() > method.parameters().length) {
-      error(element, "@%s methods can have at most %s parameter(s). (%s.%s)",
-          annotationClass.getSimpleName(), method.parameters().length,
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify method return type matches the listener.
-    TypeMirror returnType = executableElement.getReturnType();
-    if (returnType instanceof TypeVariable) {
-      TypeVariable typeVariable = (TypeVariable) returnType;
-      returnType = typeVariable.getUpperBound();
-    }
-    if (!returnType.toString().equals(method.returnType())) {
-      error(element, "@%s methods must have a '%s' return type. (%s.%s)",
-          annotationClass.getSimpleName(), method.returnType(),
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    if (hasError) {
-      return;
-    }
-
-    Parameter[] parameters = Parameter.NONE;
-    if (!methodParameters.isEmpty()) {
-      parameters = new Parameter[methodParameters.size()];
-      BitSet methodParameterUsed = new BitSet(methodParameters.size());
-      String[] parameterTypes = method.parameters();
-      for (int i = 0; i < methodParameters.size(); i++) {
-        VariableElement methodParameter = methodParameters.get(i);
-        TypeMirror methodParameterType = methodParameter.asType();
-        if (methodParameterType instanceof TypeVariable) {
-          TypeVariable typeVariable = (TypeVariable) methodParameterType;
-          methodParameterType = typeVariable.getUpperBound();
-        }
-
-        for (int j = 0; j < parameterTypes.length; j++) {
-          if (methodParameterUsed.get(j)) {
-            continue;
-          }
-          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
-              || isInterface(methodParameterType)) {
-            parameters[i] = new Parameter(j, methodParameterType.toString());
-            methodParameterUsed.set(j);
-            break;
-          }
-        }
-        if (parameters[i] == null) {
-          StringBuilder builder = new StringBuilder();
-          builder.append("Unable to match @")
-              .append(annotationClass.getSimpleName())
-              .append(" method arguments. (")
-              .append(enclosingElement.getQualifiedName())
-              .append('.')
-              .append(element.getSimpleName())
-              .append(')');
-          for (int j = 0; j < parameters.length; j++) {
-            Parameter parameter = parameters[j];
-            builder.append("\n\n  Parameter #")
-                .append(j + 1)
-                .append(": ")
-                .append(methodParameters.get(j).asType().toString())
-                .append("\n    ");
-            if (parameter == null) {
-              builder.append("did not match any listener parameters");
-            } else {
-              builder.append("matched listener parameter #")
-                  .append(parameter.getListenerPosition() + 1)
-                  .append(": ")
-                  .append(parameter.getType());
-            }
-          }
-          builder.append("\n\nMethods may have up to ")
-              .append(method.parameters().length)
-              .append(" parameter(s):\n");
-          for (String parameterType : method.parameters()) {
-            builder.append("\n  ").append(parameterType);
-          }
-          builder.append(
-              "\n\nThese may be listed in any order but will be searched for from top to bottom.");
-          error(executableElement, builder.toString());
-          return;
-        }
-      }
-    }
-
-    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    for (int id : ids) {
-      if (!bindingClass.addMethod(id, listener, method, binding)) {
-        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
-            id, enclosingElement.getQualifiedName(), element.getSimpleName());
-        return;
-      }
-    }
-
-    // Add the type-erased version to the valid binding targets set.
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private boolean isInterface(TypeMirror typeMirror) {
-    if (!(typeMirror instanceof DeclaredType)) {
-      return false;
-    }
-    return ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
-  }
-
-  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
-    if (otherType.equals(typeMirror.toString())) {
-      return true;
-    }
-    if (!(typeMirror instanceof DeclaredType)) {
-      return false;
-    }
-    DeclaredType declaredType = (DeclaredType) typeMirror;
-    List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
-    if (typeArguments.size() > 0) {
-      StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
-      typeString.append('<');
-      for (int i = 0; i < typeArguments.size(); i++) {
-        if (i > 0) {
-          typeString.append(',');
-        }
-        typeString.append('?');
-      }
-      typeString.append('>');
-      if (typeString.toString().equals(otherType)) {
-        return true;
-      }
-    }
-    Element element = declaredType.asElement();
-    if (!(element instanceof TypeElement)) {
-      return false;
-    }
-    TypeElement typeElement = (TypeElement) element;
-    TypeMirror superType = typeElement.getSuperclass();
-    if (isSubtypeOfType(superType, otherType)) {
-      return true;
-    }
-    for (TypeMirror interfaceType : typeElement.getInterfaces()) {
-      if (isSubtypeOfType(interfaceType, otherType)) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
-      TypeElement enclosingElement) {
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
-    if (bindingClass == null) {
-      String targetType = enclosingElement.getQualifiedName().toString();
-      String classPackage = getPackageName(enclosingElement);
-      String className = getClassName(enclosingElement, classPackage) + SUFFIX;
-
-      bindingClass = new BindingClass(classPackage, className, targetType);
-      targetClassMap.put(enclosingElement, bindingClass);
-    }
-    return bindingClass;
-  }
-
-  private static String getClassName(TypeElement type, String packageName) {
-    int packageLen = packageName.length() + 1;
-    return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
-  }
-
-  /** Finds the parent binder type in the supplied set, if any. */
-  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
-    TypeMirror type;
-    while (true) {
-      type = typeElement.getSuperclass();
-      if (type.getKind() == TypeKind.NONE) {
-        return null;
-      }
-      typeElement = (TypeElement) ((DeclaredType) type).asElement();
-      if (parents.contains(typeElement.toString())) {
-        String packageName = getPackageName(typeElement);
-        return packageName + "." + getClassName(typeElement, packageName);
-      }
-    }
-  }
-
-  @Override public SourceVersion getSupportedSourceVersion() {
-    return SourceVersion.latestSupported();
-  }
-
-  private void error(Element element, String message, Object... args) {
-    if (args.length > 0) {
-      message = String.format(message, args);
-    }
-    processingEnv.getMessager().printMessage(ERROR, message, element);
-  }
-
-  private String getPackageName(TypeElement type) {
-    return elementUtils.getPackageOf(type).getQualifiedName().toString();
-  }
-
-  private static boolean hasAnnotationWithName(Element element, String simpleName) {
-    for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
-      String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
-      if (simpleName.equals(annotationName)) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  private static boolean isRequiredInjection(Element element) {
-    return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index c9c73a84..f936ff6f 100644
--- a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -7,7 +7,7 @@
  * same frame. A click on one button disables all buttons for that frame.
  */
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
-  private static boolean enabled = true;
+  static boolean enabled = true;
 
   private static final Runnable ENABLE_AGAIN = new Runnable() {
     @Override public void run() {
diff --git a/butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java b/butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
deleted file mode 100644
index 534b4904..00000000
--- a/butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package butterknife.internal;
-
-final class FieldCollectionViewBinding implements ViewBinding {
-  enum Kind {
-    ARRAY,
-    LIST
-  }
-
-  private final String name;
-  private final String type;
-  private final Kind kind;
-  private final boolean required;
-
-  FieldCollectionViewBinding(String name, String type, Kind kind, boolean required) {
-    this.name = name;
-    this.type = type;
-    this.kind = kind;
-    this.required = required;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public String getType() {
-    return type;
-  }
-
-  public Kind getKind() {
-    return kind;
-  }
-
-  public boolean isRequired() {
-    return required;
-  }
-
-  @Override public String getDescription() {
-    return "field '" + name + "'";
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java b/butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java
deleted file mode 100644
index f4f0cd04..00000000
--- a/butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package butterknife.internal;
-
-final class FieldResourceBinding {
-  private final int id;
-  private final String name;
-  private final String method;
-
-  FieldResourceBinding(int id, String name, String method) {
-    this.id = id;
-    this.name = name;
-    this.method = method;
-  }
-
-  public int getId() {
-    return id;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public String getMethod() {
-    return method;
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/FieldViewBinding.java b/butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
deleted file mode 100644
index d7f123f1..00000000
--- a/butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package butterknife.internal;
-
-import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
-
-final class FieldViewBinding implements ViewBinding {
-  private final String name;
-  private final String type;
-  private final boolean required;
-
-  FieldViewBinding(String name, String type, boolean required) {
-    this.name = name;
-    this.type = type;
-    this.required = required;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public String getType() {
-    return type;
-  }
-
-  @Override public String getDescription() {
-    return "field '" + name + "'";
-  }
-
-  public boolean isRequired() {
-    return required;
-  }
-
-  public boolean requiresCast() {
-    return !VIEW_TYPE.equals(type);
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/ImmutableList.java b/butterknife/src/main/java/butterknife/internal/ImmutableList.java
similarity index 95%
rename from butterknife/src/main/java/butterknife/ImmutableList.java
rename to butterknife/src/main/java/butterknife/internal/ImmutableList.java
index 3c3d07fa..35129842 100644
--- a/butterknife/src/main/java/butterknife/ImmutableList.java
+++ b/butterknife/src/main/java/butterknife/internal/ImmutableList.java
@@ -1,4 +1,4 @@
-package butterknife;
+package butterknife.internal;
 
 import java.util.AbstractList;
 import java.util.RandomAccess;
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
new file mode 100644
index 00000000..52b2fc23
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -0,0 +1,150 @@
+package butterknife.internal;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.AttrRes;
+import android.support.annotation.DimenRes;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.IdRes;
+import android.support.annotation.UiThread;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.graphics.drawable.DrawableCompat;
+import android.util.TypedValue;
+import android.view.View;
+import java.lang.reflect.Array;
+import java.util.List;
+
+@SuppressWarnings("WeakerAccess") // Used by generated code.
+public final class Utils {
+  private static final TypedValue VALUE = new TypedValue();
+
+  @UiThread // Implicit synchronization for use of shared resource VALUE.
+  public static Drawable getTintedDrawable(Context context,
+      @DrawableRes int id, @AttrRes int tintAttrId) {
+    boolean attributeFound = context.getTheme().resolveAttribute(tintAttrId, VALUE, true);
+    if (!attributeFound) {
+      throw new Resources.NotFoundException("Required tint color attribute with name "
+          + context.getResources().getResourceEntryName(tintAttrId)
+          + " and attribute ID "
+          + tintAttrId
+          + " was not found.");
+    }
+
+    Drawable drawable = ContextCompat.getDrawable(context, id);
+    drawable = DrawableCompat.wrap(drawable.mutate());
+    int color = ContextCompat.getColor(context, VALUE.resourceId);
+    DrawableCompat.setTint(drawable, color);
+    return drawable;
+  }
+
+  @UiThread // Implicit synchronization for use of shared resource VALUE.
+  public static float getFloat(Context context, @DimenRes int id) {
+    TypedValue value = VALUE;
+    context.getResources().getValue(id, value, true);
+    if (value.type == TypedValue.TYPE_FLOAT) {
+      return value.getFloat();
+    }
+    throw new Resources.NotFoundException("Resource ID #0x" + Integer.toHexString(id)
+        + " type #0x" + Integer.toHexString(value.type) + " is not valid");
+  }
+
+  @SafeVarargs
+  public static <T> T[] arrayOf(T... views) {
+    return filterNull(views);
+  }
+
+  @SafeVarargs
+  public static <T> List<T> listOf(T... views) {
+    return new ImmutableList<>(filterNull(views));
+  }
+
+  private static <T> T[] filterNull(T[] views) {
+    int end = 0;
+    int length = views.length;
+    for (int i = 0; i < length; i++) {
+      T view = views[i];
+      if (view != null) {
+        views[end++] = view;
+      }
+    }
+    if (end == length) {
+      return views;
+    }
+    //noinspection unchecked
+    T[] newViews = (T[]) Array.newInstance(views.getClass().getComponentType(), end);
+    System.arraycopy(views, 0, newViews, 0, end);
+    return newViews;
+  }
+
+  public static <T> T findOptionalViewAsType(View source, @IdRes int id, String who,
+      Class<T> cls) {
+    View view = source.findViewById(id);
+    return castView(view, id, who, cls);
+  }
+
+  public static View findRequiredView(View source, @IdRes int id, String who) {
+    View view = source.findViewById(id);
+    if (view != null) {
+      return view;
+    }
+    String name = getResourceEntryName(source, id);
+    throw new IllegalStateException("Required view '"
+        + name
+        + "' with ID "
+        + id
+        + " for "
+        + who
+        + " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
+        + " (methods) annotation.");
+  }
+
+  public static <T> T findRequiredViewAsType(View source, @IdRes int id, String who,
+      Class<T> cls) {
+    View view = findRequiredView(source, id, who);
+    return castView(view, id, who, cls);
+  }
+
+  public static <T> T castView(View view, @IdRes int id, String who, Class<T> cls) {
+    try {
+      return cls.cast(view);
+    } catch (ClassCastException e) {
+      String name = getResourceEntryName(view, id);
+      throw new IllegalStateException("View '"
+          + name
+          + "' with ID "
+          + id
+          + " for "
+          + who
+          + " was of the wrong type. See cause for more info.", e);
+    }
+  }
+
+  @SuppressWarnings("unchecked") // That's the point.
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
+    try {
+      return (T) value;
+    } catch (ClassCastException e) {
+      throw new IllegalStateException("Parameter #"
+          + (fromPos + 1)
+          + " of method '"
+          + from
+          + "' was of the wrong type for parameter #"
+          + (toPos + 1)
+          + " of method '"
+          + to
+          + "'. See cause for more info.", e);
+    }
+  }
+
+  private static String getResourceEntryName(View view, @IdRes int id) {
+    if (view.isInEditMode()) {
+      return "<unavailable while editing>";
+    }
+    return view.getContext().getResources().getResourceEntryName(id);
+  }
+
+  private Utils() {
+    throw new AssertionError("No instances.");
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index 2fd10d5c..bb2a5807 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -4,9 +4,9 @@
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.FindView @FindView} on fields.</li>
- * <li>Group multiple views in a {@linkplain java.util.List list} using
- * {@link butterknife.FindViews @FindViews}. Operate on all of them at once with
+ * {@link butterknife.BindView @BindView} on fields.</li>
+ * <li>Group multiple views in a {@linkplain java.util.List list} or array.
+ * Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
  * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
  * butterknife.ButterKnife.Setter, Object) setters}, or
@@ -14,6 +14,7 @@
  * properties}.</li>
  * <li>Eliminate anonymous inner-classes for listeners by annotating methods with
  * {@link butterknife.OnClick @OnClick} and others.</li>
+ * <li>Eliminate resource lookups by using resource annotations on fields.</li>
  * </ul>
  */
 package butterknife;
diff --git a/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor
deleted file mode 100644
index dda8ba87..00000000
--- a/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor
+++ /dev/null
@@ -1 +0,0 @@
-butterknife.internal.ButterKnifeProcessor
diff --git a/butterknife/src/test/java/android/support/v4/view/ViewPager.java b/butterknife/src/test/java/android/support/v4/view/ViewPager.java
new file mode 100644
index 00000000..f5be6a29
--- /dev/null
+++ b/butterknife/src/test/java/android/support/v4/view/ViewPager.java
@@ -0,0 +1,16 @@
+package android.support.v4.view;
+
+/** STUB! Required for test sources to compile. */
+public interface ViewPager {
+  void addOnPageChangeListener(OnPageChangeListener listener);
+
+  void removeOnPageChangeListener(OnPageChangeListener listener);
+
+  interface OnPageChangeListener {
+    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);
+
+    void onPageSelected(int position);
+
+    void onPageScrollStateChanged(int state);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindArrayTest.java b/butterknife/src/test/java/butterknife/BindArrayTest.java
new file mode 100644
index 00000000..ade8a399
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindArrayTest.java
@@ -0,0 +1,244 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindArrayTest {
+  @Test public void stringArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) String[] one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getStringArray(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void intArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) int[] one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getIntArray(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void textArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) CharSequence[] one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getTextArray(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typedArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "import android.content.res.TypedArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) TypedArray one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.obtainTypedArray(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeSupported() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindArray field type must be one of: String[], int[], CharSequence[], "
+                + "android.content.res.TypedArray. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindBitmapTest.java b/butterknife/src/test/java/butterknife/BindBitmapTest.java
new file mode 100644
index 00000000..820b6dd0
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindBitmapTest.java
@@ -0,0 +1,83 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBitmapTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.graphics.Bitmap;\n"
+        + "import butterknife.BindBitmap;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindBitmap(1) Bitmap one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.graphics.BitmapFactory;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = BitmapFactory.decodeResource(res, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeBitmap() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindBitmap;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindBitmap(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindBoolTest.java b/butterknife/src/test/java/butterknife/BindBoolTest.java
new file mode 100644
index 00000000..92148b15
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindBoolTest.java
@@ -0,0 +1,81 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBoolTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import butterknife.BindBool;"
+        + "public class Test extends Activity {"
+        + "  @BindBool(1) boolean one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getBoolean(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeBoolean() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindBool;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindBool(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindColorTest.java b/butterknife/src/test/java/butterknife/BindColorTest.java
new file mode 100644
index 00000000..37a42471
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindColorTest.java
@@ -0,0 +1,236 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindColorTest {
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ContextCompat.getColor(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleIntSdk23() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getColor(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=23")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.content.res.ColorStateList;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) ColorStateList one;\n"
+        +"}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ContextCompat.getColorStateList(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleColorStateListSdk23() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.content.res.ColorStateList;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) ColorStateList one;\n"
+        +"}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getColorStateList(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=23")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindDimenTest.java b/butterknife/src/test/java/butterknife/BindDimenTest.java
new file mode 100644
index 00000000..94f7db26
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindDimenTest.java
@@ -0,0 +1,134 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDimenTest {
+  @Test public void simpleFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindDimen;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDimen(1) float one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getDimension(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindDimen;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDimen(1) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getDimensionPixelSize(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeIntOrFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindDimen;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDimen(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindDrawableTest.java b/butterknife/src/test/java/butterknife/BindDrawableTest.java
new file mode 100644
index 00000000..ddce3db4
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindDrawableTest.java
@@ -0,0 +1,186 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDrawableTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.graphics.drawable.Drawable;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDrawable(1) Drawable one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ContextCompat.getDrawable(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleSdk21() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.graphics.drawable.Drawable;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDrawable(1) Drawable one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getDrawable(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=21")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void withTint() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.graphics.drawable.Drawable;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDrawable(value = 1, tint = 2) Drawable one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = Utils.getTintedDrawable(context, 1, 2);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeDrawable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDrawable(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindFloatTest.java b/butterknife/src/test/java/butterknife/BindFloatTest.java
new file mode 100644
index 00000000..871ae519
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindFloatTest.java
@@ -0,0 +1,80 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindFloatTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import butterknife.BindFloat;"
+        + "public class Test extends Activity {"
+        + "  @BindFloat(1) float one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = Utils.getFloat(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindFloat;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindFloat(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindFloat field type must be 'float'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindIntTest.java b/butterknife/src/test/java/butterknife/BindIntTest.java
new file mode 100644
index 00000000..6749e747
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindIntTest.java
@@ -0,0 +1,81 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindIntTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindInt;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindInt(1) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getInteger(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindInt;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindInt(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindStringTest.java b/butterknife/src/test/java/butterknife/BindStringTest.java
new file mode 100644
index 00000000..44675a24
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindStringTest.java
@@ -0,0 +1,81 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindStringTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindString;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindString(1) String one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getString(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeString() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindString;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindString(1) boolean one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
new file mode 100644
index 00000000..e2e4ef95
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -0,0 +1,950 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import javax.tools.StandardLocation;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class BindViewTest {
+  @Test public void bindingView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingGeneratedView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindView;\n"
+        + "@PerformGeneration\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) GeneratedView thing;\n"
+        + "}"
+    );
+
+    // w/o the GeneratingProcessor it can't find `class GeneratedView`
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("cannot find symbol");
+
+    // now the GeneratingProcessor should let it compile
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor(), new TestGeneratingProcessor("GeneratedView",
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "public class GeneratedView extends View {",
+            "  public GeneratedView(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"
+        ))
+        .compilesWithoutError()
+        .withNoteContaining("@BindView field with unresolved type (GeneratedView)").and()
+        .withNoteContaining("must elsewhere be generated as a View or interface").and()
+        .and()
+        .generatesFileNamed(StandardLocation.CLASS_OUTPUT, "test", "Test_ViewBinding.class");
+  }
+
+  @Test public void bindingViewFinalClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public final class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingViewFinalClassWithBaseClass() {
+    JavaFileObject baseSource = JavaFileObjects.forSourceString("test.Base", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Base extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+    JavaFileObject testSource = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public final class Test extends Base {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingBaseSource = JavaFileObjects.forSourceString("test/Base_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Base_ViewBinding implements Unbinder {\n"
+        + "  private Base target;\n"
+        + "  @UiThread\n"
+        + "  public Base_ViewBinding(Base target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Base target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingTestSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding extends Base_ViewBinding {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
+        + "    target.thing = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(baseSource, testSource))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingBaseSource, bindingTestSource);
+  }
+
+  @Test public void bindingViewInnerClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Outer {\n"
+        + "  public static class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Outer$Test_ViewBinding implements Unbinder {\n"
+        + "  private Outer.Test target;\n"
+        + "  @UiThread\n"
+        + "  public Outer$Test_ViewBinding(Outer.Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Outer.Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingViewUppercasePackageName() {
+    JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", ""
+        + "package com.Example;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package com.Example;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    interface TestInterface {}\n"
+        + "    @BindView(1) TestInterface thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void genericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.widget.EditText;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindView;\n"
+        + "class Test<T extends TextView> extends Activity {\n"
+        + "    @BindView(1) T thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void oneFindPerId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) View thing1;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
+        + "    target.thing1 = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing1 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void oneFindPerIdWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.widget.Button;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) Button thing1;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
+        + "    target.thing1 = Utils.castView(view, 1, \"field 'thing1'\", Button.class);\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing1 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) public View thing1;\n"
+        + "  @BindView(2) View thing2;\n"
+        + "  @BindView(3) protected View thing3;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings();
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @interface Nullable {}\n"
+        + "  @Nullable @BindView(1) View view;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.view = source.findViewById(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void superclass() {
+    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) View view;\n"
+        + "}"
+    );
+
+    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class TestOne extends Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
+        + "package test;\n"
+        + "public class TestTwo extends Test {\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
+        + "  @UiThread\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source1, source2, source3))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(binding1Source, binding2Source);
+  }
+
+  @Test public void genericSuperclass() {
+    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test<T> extends Activity {\n"
+        + "  @BindView(1) View view;\n"
+        + "}"
+    );
+
+    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class TestOne extends Test<String> {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
+        + "package test;\n"
+        + "public class TestTwo extends Test<Object> {\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
+        + "  @UiThread\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
+        + "    target.thing = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source1, source2, source3))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(binding1Source, binding2Source);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package java.test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package android.test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInPrivateClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  private static class Inner {\n"
+        + "    @BindView(1) View thing;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView fields may not be contained in private classes. (test.Test.Inner.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) String thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView fields must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public interface Test {\n"
+        + "    @BindView(1) View thing = null;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView fields may only be contained in classes. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfPrivate() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) private View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) static View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void duplicateBindingFails() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) View thing1;\n"
+        + "    @BindView(1) View thing2;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Attempt to use @BindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
+        .in(source).onLine(7);
+  }
+
+  @Test public void failsOptionalRootViewBinding() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test extends View {\n"
+        + "  @Optional @OnClick void doStuff() {}\n"
+        + "  public Test(Context context) {\n"
+        + "    super(context);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "ID-free binding must not be annotated with @Optional. (test.Test.doStuff)")
+        .in(source)
+        .onLine(7);
+  }
+
+}
diff --git a/butterknife/src/test/java/butterknife/BindViewsTest.java b/butterknife/src/test/java/butterknife/BindViewsTest.java
new file mode 100644
index 00000000..d8b78979
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindViewsTest.java
@@ -0,0 +1,535 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import javax.tools.StandardLocation;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+
+public class BindViewsTest {
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindViews(1) public List<View> thing1;\n"
+        + "  @BindViews(2) List<View> thing2;\n"
+        + "  @BindViews(3) protected List<View> thing3;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings();
+  }
+
+  @Test public void bindingArray() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindViews({1, 2, 3}) View[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test<T extends View> extends Activity {\n"
+        + "    @BindViews({1, 2, 3}) T[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindViews({1, 2, 3}) TextView[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", TextView.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", TextView.class));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindViews({1, 2, 3}) List<View> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+
+  @Test public void bindingGeneratedView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "@PerformGeneration\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindViews({1, 2}) List<GeneratedView> things;\n"
+        + "}"
+    );
+
+    // w/o the GeneratingProcessor it can't find `class GeneratedView`
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("cannot find symbol");
+
+    // now the GeneratingProcessor should let it compile
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor(), new TestGeneratingProcessor("GeneratedView",
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "public class GeneratedView extends View {",
+            "  public GeneratedView(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"
+        ))
+        .compilesWithoutError()
+        .withNoteContaining("@BindViews List or array with unresolved type (GeneratedView)").and()
+        .withNoteContaining("must elsewhere be generated as a View or interface").and()
+        .and()
+        .generatesFileNamed(StandardLocation.CLASS_OUTPUT, "test", "Test_ViewBinding.class");
+  }
+
+  @Test public void bindingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "    interface TestInterface {}\n"
+        + "    @BindViews({1, 2, 3}) List<TestInterface> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", Test.TestInterface.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", Test.TestInterface.class));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingListWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test<T extends View> extends Activity {\n"
+        + "    @BindViews({1, 2, 3}) List<T> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void nullableList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test extends Activity {\n"
+        + "    @interface Nullable {}\n"
+        + "    @Nullable @BindViews({1, 2, 3}) List<View> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        source.findViewById(1), \n"
+        + "        source.findViewById(2), \n"
+        + "        source.findViewById(3));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources( bindingSource);
+  }
+
+  @Test public void failsIfNoIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "  @BindViews({}) List<View> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews must specify at least one ID. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfNoGenericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "  @BindViews(1) List thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews List must have a generic component. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.Deque;\n"
+        + "public class Test {\n"
+        + "  @BindViews(1) Deque<View> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews must be a List or array. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfGenericNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindViews(1) List<String> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfArrayNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindViews(1) String[] thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfContainsDuplicateIds() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindViews({1, 1}) List<View> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews annotation contains duplicate ID 1. (test.Test.thing)")
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
deleted file mode 100644
index 528b7c45..00000000
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ /dev/null
@@ -1,155 +0,0 @@
-package butterknife;
-
-import android.app.Activity;
-import android.util.Property;
-import android.view.View;
-import java.util.Arrays;
-import java.util.List;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import static butterknife.ButterKnife.Finder.arrayOf;
-import static butterknife.ButterKnife.Finder.listOf;
-import static org.fest.assertions.api.ANDROID.assertThat;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.entry;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
-public class ButterKnifeTest {
-  private static final Property<View, Boolean> PROPERTY_ENABLED =
-      new Property<View, Boolean>(Boolean.class, "enabled") {
-        @Override public Boolean get(View view) {
-          return view.isEnabled();
-        }
-
-        @Override public void set(View view, Boolean enabled) {
-          view.setEnabled(enabled);
-        }
-      };
-  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
-      new ButterKnife.Setter<View, Boolean>() {
-        @Override public void set(View view, Boolean value, int index) {
-          view.setEnabled(value);
-        }
-      };
-  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
-    @Override public void apply(View view, int index) {
-      view.setEnabled(false);
-    }
-  };
-
-  @Before @After // Clear out cache of injectors and resetters before and after each test.
-  public void resetViewsCache() {
-    ButterKnife.INJECTORS.clear();
-  }
-
-  @Test public void listOfFiltersNull() {
-    assertThat(listOf(null, null, null)).isEmpty();
-    assertThat(listOf("One", null, null)).containsExactly("One");
-    assertThat(listOf(null, "One", null)).containsExactly("One");
-    assertThat(listOf(null, null, "One")).containsExactly("One");
-    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
-
-  @Test public void arrayOfFiltersNull() {
-    assertThat(arrayOf(null, null, null)).isEmpty();
-    assertThat(arrayOf("One", null, null)).containsExactly("One");
-    assertThat(arrayOf(null, "One", null)).containsExactly("One");
-    assertThat(arrayOf(null, null, "One")).containsExactly("One");
-    assertThat(arrayOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(arrayOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
-
-  @Test public void propertyAppliedToEveryView() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
-
-    List<View> views = Arrays.asList(view1, view2, view3);
-    ButterKnife.apply(views, PROPERTY_ENABLED, false);
-
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
-  }
-
-  @Test public void actionAppliedToEveryView() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
-
-    List<View> views = Arrays.asList(view1, view2, view3);
-    ButterKnife.apply(views, ACTION_DISABLE);
-
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
-  }
-
-  @Test public void setterAppliedToEveryView() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
-
-    List<View> views = Arrays.asList(view1, view2, view3);
-    ButterKnife.apply(views, SETTER_ENABLED, false);
-
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
-  }
-
-  @Test public void zeroInjectionsInjectDoesNotThrowException() {
-    class Example {
-    }
-
-    Example example = new Example();
-    ButterKnife.bind(example, null, null);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
-  }
-
-  @Test public void zeroInjectionsResetDoesNotThrowException() {
-    class Example {
-    }
-
-    Example example = new Example();
-    ButterKnife.unbind(example);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
-  }
-
-  @Test public void injectingKnownPackagesIsNoOp() {
-    ButterKnife.bind(new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
-    ButterKnife.bind(new Object(), new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
-  }
-
-  @Test public void finderThrowsNiceError() {
-    View view = new View(Robolectric.application);
-    try {
-      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view 'button1' with ID "
-          + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
-    }
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
new file mode 100644
index 00000000..b1ac9f2f
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
@@ -0,0 +1,66 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnCheckedChangedTest {
+  @Test public void checkedChanged() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnCheckedChanged;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnCheckedChanged(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.CompoundButton;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onCheckedChanged(CompoundButton p0, boolean p1) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((CompoundButton) view1).setOnCheckedChangeListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
new file mode 100644
index 00000000..71e21a60
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -0,0 +1,756 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnClickTest {
+  @Test public void onClickBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickBindingFinalType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public final class Test extends Activity {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickMultipleBindings() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1) void doStuff1() {}\n"
+        + "  @OnClick(1) void doStuff2() {}\n"
+        + "  @OnClick({1, 2}) void doStuff3(View v) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff1();\n"
+        + "        target.doStuff2();\n"
+        + "        target.doStuff3(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'doStuff3'\");\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff3(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void findOnlyCalledOnce() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void methodVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1) public void thing1() {}\n"
+        + "  @OnClick(2) void thing2() {}\n"
+        + "  @OnClick(3) protected void thing3() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings();
+  }
+
+  @Test public void methodCastsArgument() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  interface TestInterface {}\n"
+        + "  @OnClick(0) void click0() {}\n"
+        + "  @OnClick(1) void click1(View view) {}\n"
+        + "  @OnClick(2) void click2(TextView view) {}\n"
+        + "  @OnClick(3) void click3(Button button) {}\n"
+        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view0;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  private View view4;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 0, \"method 'click0'\");\n"
+        + "    view0 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click0();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'click1'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click1(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'click2'\");\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
+        + "    view4 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view0.setOnClickListener(null);\n"
+        + "    view0 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "    view4.setOnClickListener(null);\n"
+        + "    view4 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void methodWithMultipleIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick({1, 2, 3}) void click() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'click'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'click'\");\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 3, \"method 'click'\");\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test extends Activity {\n"
+        + "  @Optional @OnClick(1) void doStuff() {}\n"
+        + "}");
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = source.findViewById(1);\n"
+        + "    if (view != null) {\n"
+        + "      view1 = view;\n"
+        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "        @Override\n"
+        + "        public void doClick(View p0) {\n"
+        + "          target.doStuff();\n"
+        + "        }\n"
+        + "      });\n"
+        + "    }\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    if (view1 != null) {\n"
+        + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void optionalAndRequiredSkipsNullCheck() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @Optional @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package java.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package android.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfHasReturnType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1)\n"
+        + "  public String doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfPrivateMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1)\n"
+        + "  private void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1)\n"
+        + "  public static void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfParameterNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(String thing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(""
+            + "Unable to match @OnClick method arguments. (test.Test.doStuff)\n"
+            + "  \n"
+            + "    Parameter #1: java.lang.String\n"
+            + "      did not match any listener parameters\n"
+            + "  \n"
+            + "  Methods may have up to 1 parameter(s):\n"
+            + "  \n"
+            + "    android.view.View\n"
+            + "  \n"
+            + "  These may be listed in any order but will be searched for from top to bottom.")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfMoreThanOneParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(View thing, View otherThing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
+        .in(source).onLine(7);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public interface Test {\n"
+        + "  @OnClick(1)\n"
+        + "  void doStuff();\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
+        .in(source).onLine(3);
+  }
+
+  @Test public void failsIfHasDuplicateIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick({1, 2, 3, 1})\n"
+        + "  void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
new file mode 100644
index 00000000..74d681a0
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
@@ -0,0 +1,67 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnEditorActionTest {
+  @Test public void editorAction() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnEditorAction;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnEditorAction(1) boolean doStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.KeyEvent;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((TextView) view1).setOnEditorActionListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
new file mode 100644
index 00000000..b503b8ea
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
@@ -0,0 +1,65 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnFocusChangeTest {
+  @Test public void focusChange() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnFocusChange;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnFocusChange(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onFocusChange(View p0, boolean p1) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnFocusChangeListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife/src/test/java/butterknife/OnItemClickTest.java
new file mode 100644
index 00000000..0da6d879
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java
@@ -0,0 +1,421 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
+public class OnItemClickTest {
+  @Test public void onItemClickBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import butterknife.OnItemClick;"
+        + "public class Test extends Activity {"
+        + "  @OnItemClick(1) void doStuff() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onItemClickBindingWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    AdapterView<?> parent,\n"
+        + "    View view,\n"
+        + "    int position,\n"
+        + "    long id\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff(p0, p1, p2, p3);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onItemClickBindingWithParameterSubset() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    ListView parent,\n"
+        + "    int position\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test<T extends ListView> extends Activity {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    T parent,\n"
+        + "    int position\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
+        + "        , p2);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickRootViewBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test extends ListView {\n"
+        + "  @OnItemClick void doStuff() {}\n"
+        + "  public Test(Context context) {\n"
+        + "    super(context);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View viewSource;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    viewSource = source;\n"
+        + "    ((AdapterView<?>) source).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) viewSource).setOnItemClickListener(null);\n"
+        + "    viewSource = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickRootViewAnyTypeBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemClick void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View viewSource;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    viewSource = source;\n"
+        + "    ((AdapterView<?>) source).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) viewSource).setOnItemClickListener(null);\n"
+        + "    viewSource = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsWithInvalidId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnItemClick({1, -1}) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsWithInvalidParameterConfiguration() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    AdapterView<?> parent,\n"
+        + "    View view,\n"
+        + "    View whatIsThis\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(""
+            + "Unable to match @OnItemClick method arguments. (test.Test.doStuff)\n"
+            + "  \n"
+            + "    Parameter #1: android.widget.AdapterView<?>\n"
+            + "      matched listener parameter #1: android.widget.AdapterView<?>\n"
+            + "  \n"
+            + "    Parameter #2: android.view.View\n"
+            + "      matched listener parameter #2: android.view.View\n"
+            + "  \n"
+            + "    Parameter #3: android.view.View\n"
+            + "      did not match any listener parameters\n"
+            + "  \n"
+            + "  Methods may have up to 4 parameter(s):\n"
+            + "  \n"
+            + "    android.widget.AdapterView<?>\n"
+            + "    android.view.View\n"
+            + "    int\n"
+            + "    long\n"
+            + "  \n"
+            + "  These may be listed in any order but will be searched for from top to bottom.")
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
new file mode 100644
index 00000000..3584b0f7
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
@@ -0,0 +1,66 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnItemLongClickTest {
+  @Test public void itemLongClick() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnItemLongClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnItemLongClick(1) boolean doStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
new file mode 100644
index 00000000..1a6fd281
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
@@ -0,0 +1,284 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
+public class OnItemSelectedTest {
+  @Test public void defaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnItemSelected;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnItemSelected(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void nonDefaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import butterknife.OnItemSelected;"
+        + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
+        + "public class Test extends Activity {"
+        + "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)"
+        + "  void doStuff() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void allMethods() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import butterknife.OnItemSelected;"
+        + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
+        + "public class Test extends Activity {"
+        + "  @OnItemSelected(1)"
+        + "  void onItemSelected() {}"
+        + "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)"
+        + "  void onNothingSelected() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.onItemSelected();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.onNothingSelected();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void multipleBindingPermutation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import butterknife.OnItemSelected;"
+        + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
+        + "public class Test extends Activity {"
+        + "  @OnItemSelected({ 1, 2 })"
+        + "  void onItemSelected() {}"
+        + "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)"
+        + "  void onNothingSelected() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.onItemSelected();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.onNothingSelected();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'onItemSelected'\");\n"
+        + "    view2 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.onItemSelected();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 3, \"method 'onNothingSelected'\");\n"
+        + "    view3 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.onNothingSelected();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "    ((AdapterView<?>) view2).setOnItemSelectedListener(null);\n"
+        + "    view2 = null;\n"
+        + "    ((AdapterView<?>) view3).setOnItemSelectedListener(null);\n"
+        + "    view3 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnLongClickTest.java b/butterknife/src/test/java/butterknife/OnLongClickTest.java
new file mode 100644
index 00000000..fc324b46
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnLongClickTest.java
@@ -0,0 +1,88 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
+public class OnLongClickTest {
+  @Test public void onLongClickBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnLongClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnLongClick(1) boolean doStuff() {\n"
+        + "    return true;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onLongClick(View p0) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsIfMissingReturnType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnLongClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnLongClick(1)\n"
+        + "  public void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
new file mode 100644
index 00000000..0b0cd55f
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
@@ -0,0 +1,75 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnPageChangeTest {
+  @Test public void pageChange() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnPageChange;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnPageChange(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.view.ViewPager;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private ViewPager.OnPageChangeListener view1OnPageChangeListener;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view1OnPageChangeListener = new ViewPager.OnPageChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onPageSelected(int p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrolled(int p0, float p1, int p2) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrollStateChanged(int p0) {\n"
+        + "      }\n"
+        + "    };\n"
+        + "    ((ViewPager) view).addOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((ViewPager) view1).removeOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "    view1OnPageChangeListener = null;\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
new file mode 100644
index 00000000..ac027c6e
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
@@ -0,0 +1,78 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnTextChangedTest {
+  @Test public void textChanged() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnTextChanged;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnTextChanged(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.text.Editable;\n"
+        + "import android.text.TextWatcher;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.CharSequence;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private TextWatcher view1TextWatcher;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view1TextWatcher = new TextWatcher() {\n"
+        + "      @Override\n"
+        + "      public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void afterTextChanged(Editable p0) {\n"
+        + "      }\n"
+        + "    };\n"
+        + "    ((TextView) view).addTextChangedListener(view1TextWatcher);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((TextView) view1).removeTextChangedListener(view1TextWatcher);\n"
+        + "    view1TextWatcher = null;\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnTouchTest.java b/butterknife/src/test/java/butterknife/OnTouchTest.java
new file mode 100644
index 00000000..3e32bc81
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnTouchTest.java
@@ -0,0 +1,85 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnTouchTest {
+  @Test public void touch() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnTouch(1) boolean doStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.MotionEvent;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnTouchListener(new View.OnTouchListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onTouch(View p0, MotionEvent p1) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnTouchListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnTouch(1) boolean doStuff1() {}\n"
+        + "  @OnTouch(1) boolean doStuff2() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
+        .in(source).onLine(6);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/RClassTest.java b/butterknife/src/test/java/butterknife/RClassTest.java
new file mode 100644
index 00000000..8179e875
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/RClassTest.java
@@ -0,0 +1,231 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class RClassTest {
+
+  private static final JavaFileObject NON_FINAL_R = JavaFileObjects.forSourceString("test.R", ""
+      + "package test;\n"
+      + "public final class R {\n"
+      + "  public static final class array {\n"
+      + "    public static int res = 0x7f040001;\n"
+      + "  }\n"
+      + "  public static final class bool {\n"
+      + "    public static int res = 0x7f040002;\n"
+      + "  }\n"
+      + "  public static final class color {\n"
+      + "    public static int res = 0x7f040003;\n"
+      + "  }\n"
+      + "  public static final class integer {\n"
+      + "    public static int res = 0x7f040004;\n"
+      + "  }\n"
+      + "  public static final class styleable {\n"
+      + "    public static int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+      + "  }\n"
+      + "}"
+  );
+
+  private static final JavaFileObject FINAL_R = JavaFileObjects.forSourceString("test.R", ""
+      + "package test;\n"
+      + "public final class R {\n"
+      + "  public static final class array {\n"
+      + "    public static final int res = 0x7f040001;\n"
+      + "  }\n"
+      + "  public static final class bool {\n"
+      + "    public static final int res = 0x7f040002;\n"
+      + "  }\n"
+      + "  public static final class color {\n"
+      + "    public static final int res = 0x7f040003;\n"
+      + "  }\n"
+      + "  public static final class integer {\n"
+      + "    public static final int res = 0x7f040004;\n"
+      + "  }\n"
+      + "  public static final class string {\n"
+      + "    public static final int res = 0x7f040005;\n"
+      + "  }\n"
+      + "  public static final class styleable {\n"
+      + "    public static final int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+      + "  }\n"
+      + "}"
+  );
+
+  private static final JavaFileObject R2 = JavaFileObjects.forSourceString("test.R2", ""
+      + "package test;\n"
+      + "public final class R2 {\n"
+      + "  public static final class array {\n"
+      + "    public static final int res = 0x7f040001;\n"
+      + "  }\n"
+      + "  public static final class bool {\n"
+      + "    public static final int res = 0x7f040002;\n"
+      + "  }\n"
+      + "  public static final class color {\n"
+      + "    public static final int res = 0x7f040003;\n"
+      + "  }\n"
+      + "  public static final class integer {\n"
+      + "    public static final int res = 0x7f040004;\n"
+      + "  }\n"
+      + "  public static final class string {\n"
+      + "    public static final int res = 0x7f040005;\n"
+      + "  }\n"
+      + "}"
+  );
+
+  @Test public void library() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindInt;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindInt(R2.integer.res) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getInteger(R.integer.res);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source, NON_FINAL_R, R2))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void app() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindBool;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindBool(R.bool.res) boolean bool;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.bool = res.getBoolean(R.bool.res);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source, FINAL_R))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void compiledRClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(android.R.color.black) int black;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.black = ContextCompat.getColor(context, android.R.color.black);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source, NON_FINAL_R))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java b/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
new file mode 100644
index 00000000..372f15dd
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
@@ -0,0 +1,67 @@
+package butterknife;
+
+import com.google.common.base.Joiner;
+import com.google.common.collect.ImmutableSet;
+import com.google.testing.compile.JavaFileObjects;
+
+import java.io.IOException;
+import java.io.Writer;
+import java.util.Set;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.element.TypeElement;
+import javax.tools.JavaFileObject;
+
+/**
+ * A test {@link javax.annotation.processing.Processor} that produces one file.
+ *
+ * To use it, include {@link #ANNOTATION} in your source set and
+ * mark something with @PerformGeneration so the processor has something to latch onto
+ */
+public class TestGeneratingProcessor extends AbstractProcessor {
+
+  public static final JavaFileObject ANNOTATION = JavaFileObjects.forSourceString("test.PerformGeneration", ""
+          + "package test;\n"
+          + "import java.lang.annotation.*;\n"
+          + "@Target(ElementType.TYPE)\n"
+          + "public @interface PerformGeneration {\n"
+          + "}");
+
+  private final String generatedClassName;
+  private final String generatedSource;
+  private boolean processed;
+
+  TestGeneratingProcessor(String generatedClassName, String... source) {
+    this.generatedClassName = generatedClassName;
+    this.generatedSource = Joiner.on("\n").join(source);
+  }
+
+  @Override
+  public Set<String> getSupportedAnnotationTypes() {
+    return ImmutableSet.of("test.PerformGeneration");
+  }
+
+  @Override
+  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+    if (!processed) {
+      processed = true;
+      Writer writer = null;
+      try {
+        writer = processingEnv.getFiler().createSourceFile(generatedClassName).openWriter();
+        writer.append(generatedSource);
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      } finally {
+        if (writer != null) {
+          try {
+            writer.close();
+          } catch (IOException e) {
+            throw new RuntimeException(e);
+          }
+        }
+      }
+    }
+    return false;
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/UnbinderTest.java b/butterknife/src/test/java/butterknife/UnbinderTest.java
new file mode 100644
index 00000000..e5c09b26
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/UnbinderTest.java
@@ -0,0 +1,547 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class UnbinderTest {
+  @Test public void multipleBindings() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.OnLongClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @BindView(2) View view2;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "  @OnLongClick(1) boolean doMoreStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onLongClick(View p0) {\n"
+        + "        return target.doMoreStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    target.view2 = Utils.findRequiredView(source, 2, \"field 'view2'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    target.view2 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1.setOnLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void unbindingThroughAbstractChild() {
+    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @OnClick(1) void doStuff1() { }\n"
+        + "}"
+    );
+
+    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
+        + "package test;\n"
+        + "public abstract class TestOne extends Test {\n"
+        + "}"
+    );
+
+    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "class TestTwo extends TestOne {\n"
+        + "  @OnClick(1) void doStuff2() { }\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff1();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestTwo_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestTwo_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestTwo target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public TestTwo_ViewBinding(final TestTwo target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff2();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source1, source2, source3))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(binding1Source, binding2Source);
+  }
+
+  @Test public void fullIntegration() {
+    JavaFileObject sourceA = JavaFileObjects.forSourceString("test.A", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class A {\n"
+        + "  @BindColor(android.R.color.black) @ColorInt int blackColor;\n"
+        + "  public A(View view) {\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceB = JavaFileObjects.forSourceString("test.B", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class B extends A {\n"
+        + "  @BindColor(android.R.color.white) @ColorInt int whiteColor;\n"
+        + "  public B(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceC = JavaFileObjects.forSourceString("test.C", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class C extends B {\n"
+        + "  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;\n"
+        + "  @BindView(android.R.id.button1) View button1;\n"
+        + "  public C(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceD = JavaFileObjects.forSourceString("test.D", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class D extends C {\n"
+        + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
+        + "  public D(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceE = JavaFileObjects.forSourceString("test.E", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class E extends C {\n"
+        + "  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;\n"
+        + "  public E(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceF = JavaFileObjects.forSourceString("test.F", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class F extends D {\n"
+        + "  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;\n"
+        + "  public F(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceG = JavaFileObjects.forSourceString("test.G", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class G extends E {\n"
+        + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
+        + "  @BindView(android.R.id.button2) View button2;\n"
+        + "  public G(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "  @OnClick(android.R.id.content) public void onClick() {\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceH = JavaFileObjects.forSourceString("test.H", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class H extends G {\n"
+        + "  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;\n"
+        + "  @BindView(android.R.id.button3) View button3;\n"
+        + "  public H(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject bindingASource = JavaFileObjects.forSourceString("test/A_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class A_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(A, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(A target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public A_ViewBinding(A target, Context context) {\n"
+        + "    target.blackColor = ContextCompat.getColor(context, android.R.color.black);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingBSource = JavaFileObjects.forSourceString("test/B_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import java.lang.Deprecated;\n"
+        + "public class B_ViewBinding extends A_ViewBinding {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(B, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(B target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public B_ViewBinding(B target, Context context) {\n"
+        + "    super(target, context);\n"
+        + "    target.whiteColor = ContextCompat.getColor(context, android.R.color.white);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingCSource = JavaFileObjects.forSourceString("test/C_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class C_ViewBinding extends B_ViewBinding {\n"
+        + "  private C target;\n"
+        + "  @UiThread\n"
+        + "  public C_ViewBinding(C target, View source) {\n"
+        + "    super(target, source.getContext());\n"
+        + "    this.target = target;\n"
+        + "    target.button1 = Utils.findRequiredView(source, android.R.id.button1, \"field 'button1'\");\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.transparentColor = ContextCompat.getColor(context, android.R.color.transparent);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    C target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.button1 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingDSource = JavaFileObjects.forSourceString("test/D_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "public class D_ViewBinding extends C_ViewBinding {\n"
+        + "  @UiThread\n"
+        + "  public D_ViewBinding(D target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.darker_gray);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingESource = JavaFileObjects.forSourceString("test/E_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "public class E_ViewBinding extends C_ViewBinding {\n"
+        + "  @UiThread\n"
+        + "  public E_ViewBinding(E target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.backgroundDarkColor = ContextCompat.getColor(context, android.R.color.background_dark);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingFSource = JavaFileObjects.forSourceString("test/F_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "public class F_ViewBinding extends D_ViewBinding {\n"
+        + "  @UiThread\n"
+        + "  public F_ViewBinding(F target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.backgroundLightColor = ContextCompat.getColor(context, android.R.color.background_light);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingGSource = JavaFileObjects.forSourceString("test/G_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class G_ViewBinding extends E_ViewBinding {\n"
+        + "  private G target;\n"
+        + "  private View view16908290;\n"
+        + "  @UiThread\n"
+        + "  public G_ViewBinding(final G target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    target.button2 = Utils.findRequiredView(source, android.R.id.button2, \"field 'button2'\");\n"
+        + "    view = Utils.findRequiredView(source, android.R.id.content, \"method 'onClick'\");\n"
+        + "    view16908290 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.onClick();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.darker_gray);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    G target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
+        + "    target.button2 = null;\n"
+        + "    view16908290.setOnClickListener(null);\n"
+        + "    view16908290 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingHSource = JavaFileObjects.forSourceString("test/H_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class H_ViewBinding extends G_ViewBinding {\n"
+        + "  private H target;\n"
+        + "  @UiThread\n"
+        + "  public H_ViewBinding(H target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.button3 = Utils.findRequiredView(source, android.R.id.button3, \"field 'button3'\");\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.primary_text_dark);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    H target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.button3 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources())
+        .that(asList(
+            sourceA,
+            sourceB,
+            sourceC,
+            sourceD,
+            sourceE,
+            sourceF,
+            sourceG,
+            sourceH))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(
+            bindingASource,
+            bindingBSource,
+            bindingCSource,
+            bindingDSource,
+            bindingESource,
+            bindingFSource,
+            bindingGSource,
+            bindingHSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
deleted file mode 100644
index cc3c4613..00000000
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ /dev/null
@@ -1,400 +0,0 @@
-package butterknife.internal;
-
-import android.text.Editable;
-import android.view.KeyEvent;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.CompoundButton;
-import android.widget.TextView;
-import butterknife.FindView;
-import butterknife.FindViews;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import com.google.common.io.Files;
-import com.google.testing.compile.JavaFileObjects;
-import java.io.File;
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.List;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-@SuppressWarnings("UnusedDeclaration")
-public class AllTheThingsTest {
-  @Test public void allTheThings() throws IOException {
-    File file = new File("src/test/java/butterknife/internal/AllTheThingsTest.java");
-    String content = Files.toString(file, StandardCharsets.UTF_8);
-
-    ASSERT.about(javaSource())
-        .that(JavaFileObjects.forSourceString("butterknife.internal.AllTheThingsTest", content))
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  @interface Nullable {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @FindView(10) View findView;
-  @Nullable @FindView(20) View optinalFindView;
-
-  @FindView(30) TextView findTextView;
-  @Nullable @FindView(40) TextView optinalFIndTextView;
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @FindViews(50) List<View> findViewsListOne;
-  @FindViews({ 60, 70 }) List<View> findViewsListMultiple;
-
-  @FindViews(80) List<TextView> findTextViewsListOne;
-  @FindViews({ 90, 100 }) List<TextView> findTextViewsListMultiple;
-
-  @FindViews(110) View[] findViewsArrayOne;
-  @FindViews({ 120, 130 }) View[] findViewsArrayMultiple;
-
-  @FindViews(140) TextView[] findTextViewsArrayOne;
-  @FindViews({ 150, 160 }) TextView[] findTextViewsArrayMultiple;
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnCheckedChanged(170)
-  void checkedChanged() {}
-  @OnCheckedChanged(180)
-  void checkedChanged(CompoundButton one) {}
-  @OnCheckedChanged(190)
-  void checkedChanged(boolean two) {}
-  @OnCheckedChanged(200)
-  void checkedChanged(CompoundButton one, boolean two) {}
-
-  @OnCheckedChanged({ 210, 220 })
-  void checkedChangedMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnClick(240)
-  void click() {}
-  @OnClick(250)
-  void click(View one) {}
-
-  @OnClick({ 260, 270 })
-  void clickMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnEditorAction(290)
-  boolean editorAction() { return false; }
-  @OnEditorAction(300)
-  boolean editorAction(TextView one) { return false; }
-  @OnEditorAction(310)
-  boolean editorAction(int one) { return false; }
-  @OnEditorAction(320)
-  boolean editorAction(KeyEvent one) { return false; }
-  @OnEditorAction(330)
-  boolean editorAction(TextView one, int two) { return false; }
-  @OnEditorAction(340)
-  boolean editorAction(TextView one, KeyEvent two) { return false; }
-  @OnEditorAction(350)
-  boolean editorAction(int one, KeyEvent two) { return false; }
-  @OnEditorAction(360)
-  boolean editorAction(TextView one, int two, KeyEvent three) { return false; }
-
-  @OnEditorAction({ 370, 380 })
-  boolean editorActionMultiple() { return false; }
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnFocusChange(400)
-  void focusChange() {}
-  @OnFocusChange(410)
-  void focusChange(View one) {}
-  @OnFocusChange(420)
-  void focusChange(boolean one) {}
-  @OnFocusChange(430)
-  void focusChange(View one, boolean two) {}
-
-  @OnFocusChange({ 440, 450 })
-  void focusChangeMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnItemClick(470)
-  void itemClick() {}
-  @OnItemClick(480)
-  void itemClick(AdapterView<?> one) {}
-  @OnItemClick(490)
-  void itemClick(View one) {}
-  @OnItemClick(500)
-  void itemClick(int one) {}
-  @OnItemClick(510)
-  void itemClick(long one) {}
-  @OnItemClick(520)
-  void itemClick(AdapterView<?> one, View two) {}
-  @OnItemClick(530)
-  void itemClick(AdapterView<?> one, int two) {}
-  @OnItemClick(540)
-  void itemClick(AdapterView<?> one, long two) {}
-  @OnItemClick(550)
-  void itemClick(View one, long two) {}
-  @OnItemClick(560)
-  void itemClick(int one, long two) {}
-  @OnItemClick(570)
-  void itemClick(AdapterView<?> one, View two, int three) {}
-  @OnItemClick(580)
-  void itemClick(AdapterView<?> one, View two, long three) {}
-  @OnItemClick(590)
-  void itemClick(AdapterView<?> one, int two, long three) {}
-  @OnItemClick(600)
-  void itemClick(View one, int two, long three) {}
-  @OnItemClick(610)
-  void itemClick(AdapterView<?> one, View two, int three, long four) {}
-
-  @OnItemClick({ 620, 630 })
-  void itemClickMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnItemLongClick(650)
-  boolean itemLongClick() { return false; }
-  @OnItemLongClick(660)
-  boolean itemLongClick(AdapterView<?> one) { return false; }
-  @OnItemLongClick(670)
-  boolean itemLongClick(View one) { return false; }
-  @OnItemLongClick(680)
-  boolean itemLongClick(int one) { return false; }
-  @OnItemLongClick(690)
-  boolean itemLongClick(long one) { return false; }
-  @OnItemLongClick(700)
-  boolean itemLongClick(AdapterView<?> one, View two) { return false; }
-  @OnItemLongClick(710)
-  boolean itemLongClick(AdapterView<?> one, int two) { return false; }
-  @OnItemLongClick(720)
-  boolean itemLongClick(AdapterView<?> one, long two) { return false; }
-  @OnItemLongClick(730)
-  boolean itemLongClick(View one, long two) { return false; }
-  @OnItemLongClick(740)
-  boolean itemLongClick(int one, long two) { return false; }
-  @OnItemLongClick(750)
-  boolean itemLongClick(AdapterView<?> one, View two, int three) { return false; }
-  @OnItemLongClick(760)
-  boolean itemLongClick(AdapterView<?> one, View two, long three) { return false; }
-  @OnItemLongClick(770)
-  boolean itemLongClick(AdapterView<?> one, int two, long three) { return false; }
-  @OnItemLongClick(780)
-  boolean itemLongClick(View one, int two, long three) { return false; }
-  @OnItemLongClick(790)
-  boolean itemLongClick(AdapterView<?> one, View two, int three, long four) { return false; }
-
-  @OnItemLongClick({ 800, 810 })
-  boolean itemLongClickMultiple() { return false; }
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnItemSelected(830)
-  void itemSelected() {}
-  @OnItemSelected(840)
-  void itemSelected(AdapterView<?> one) {}
-  @OnItemSelected(850)
-  void itemSelected(View one) {}
-  @OnItemSelected(860)
-  void itemSelected(int one) {}
-  @OnItemSelected(870)
-  void itemSelected(long one) {}
-  @OnItemSelected(880)
-  void itemSelected(AdapterView<?> one, View two) {}
-  @OnItemSelected(890)
-  void itemSelected(AdapterView<?> one, int two) {}
-  @OnItemSelected(900)
-  void itemSelected(AdapterView<?> one, long two) {}
-  @OnItemSelected(910)
-  void itemSelected(View one, long two) {}
-  @OnItemSelected(920)
-  void itemSelected(int one, long two) {}
-  @OnItemSelected(930)
-  void itemSelected(AdapterView<?> one, View two, int three) {}
-  @OnItemSelected(940)
-  void itemSelected(AdapterView<?> one, View two, long three) {}
-  @OnItemSelected(950)
-  void itemSelected(AdapterView<?> one, int two, long three) {}
-  @OnItemSelected(960)
-  void itemSelected(View one, int two, long three) {}
-  @OnItemSelected(970)
-  void itemSelected(AdapterView<?> one, View two, int three, long four) {}
-
-  @OnItemSelected({ 980, 990 })
-  void itemSelectedMultiple() {}
-  @OnItemSelected(value = { 1000, 1010 }, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelectedMultiple() {}
-
-  @OnItemSelected(value = 1020, callback = OnItemSelected.Callback.ITEM_SELECTED)
-  void itemSelectedQualifiedDefault() {}
-
-  @OnItemSelected(value = 1030, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelected() {}
-  @OnItemSelected(value = 1040, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelected(AdapterView<?> one) {}
-
-  @OnItemSelected(1050)
-  void itemSelectedBothMethods() {}
-  @OnItemSelected(value = 1050, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelectedBothMethods() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnLongClick(1060)
-  boolean longClick() { return false; }
-  @OnLongClick(1070)
-  boolean longClick(View one) { return false; }
-
-  @OnLongClick({ 1080, 1090 })
-  boolean longClickMultiple() { return false; }
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnPageChange(1110)
-  void pageChange() {}
-  @OnPageChange(1120)
-  void pageChange(int one) {}
-
-  @OnPageChange({ 1130, 1140 })
-  void pageChangeMultiple() {}
-
-  @OnPageChange(value = 1150, callback = OnPageChange.Callback.PAGE_SELECTED)
-  void pageChangeQualifiedDefault() {}
-
-  @OnPageChange(value = 1160, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled() {}
-  @OnPageChange(value = 1170, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(int one) {}
-  @OnPageChange(value = 1180, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(float two) {}
-  // A single-argument method matching the third parameter can't happen.
-  //@OnPageChange(value = 1190, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  //void pageScrolled(int three) {}
-  @OnPageChange(value = 1200, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(int one, float two) {}
-  @OnPageChange(value = 1210, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(float one, int two) {}
-  @OnPageChange(value = 1220, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(int one, float two, int three) {}
-
-  @OnPageChange(value = { 1230, 1240 }, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledMultiple() {}
-
-  @OnPageChange(value = 1250, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChanged() {}
-  @OnPageChange(value = 1260, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChanged(int one) {}
-
-  @OnPageChange(value = { 1270, 1280 }, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedMultiple() {}
-
-  @OnPageChange(1290)
-  void pageChangeFirstTwoMethods() {}
-  @OnPageChange(value = 1290, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledFirstTwoMethods() {}
-
-  @OnPageChange(value = 1300, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledSecondTwoMethods() {}
-  @OnPageChange(value = 1300, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedSecondTwoMethods() {}
-
-  @OnPageChange(1310)
-  void pageChangeOuterTwoMethods() {}
-  @OnPageChange(value = 1310, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedOuterTwoMethods() {}
-
-  @OnPageChange(1320)
-  void pageChangeAllMethods() {}
-  @OnPageChange(value = 1320, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledAllMethods() {}
-  @OnPageChange(value = 1320, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedAllMethods() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnTextChanged(1330)
-  void textChanged() {}
-  @OnTextChanged(1340)
-  void textChanged(CharSequence one) {}
-  @OnTextChanged(1350)
-  void textChanged(int one) {}
-  @OnTextChanged(1360)
-  void textChanged(CharSequence one, int two) {}
-  @OnTextChanged(1370)
-  void textChanged(int one, int two) {}
-  @OnTextChanged(1380)
-  void textChanged(CharSequence one, int two, int three) {}
-  @OnTextChanged(1390)
-  void textChanged(int one, int two, int three) {}
-  @OnTextChanged(1400)
-  void textChanged(CharSequence one, int two, int three, int four) {}
-
-  @OnTextChanged({ 1410, 1420 })
-  void textChangedMultiple() {}
-
-  @OnTextChanged(value = 1430, callback = OnTextChanged.Callback.TEXT_CHANGED)
-  void textChangedQualifiedDefault() {}
-
-  @OnTextChanged(value = 1440, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged() {}
-  @OnTextChanged(value = 1450, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one) {}
-  @OnTextChanged(value = 1460, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(int one) {}
-  @OnTextChanged(value = 1470, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one, int two) {}
-  @OnTextChanged(value = 1480, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(int one, int two) {}
-  @OnTextChanged(value = 1490, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one, int two, int three) {}
-  @OnTextChanged(value = 1500, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(int one, int two, int three) {}
-  @OnTextChanged(value = 1510, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one, int two, int three, int four) {}
-
-  @OnTextChanged(value = { 1520, 1530 }, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedMultiple() {}
-
-  @OnTextChanged(value = 1540, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChanged() {}
-  @OnTextChanged(value = 1550, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChanged(Editable one) {}
-
-  @OnTextChanged(value = { 1560, 1570}, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedMultiple() {}
-
-  @OnTextChanged(1580)
-  void textChangedFirstTwoMethods() {}
-  @OnTextChanged(value = 1580, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedFirstTwoMethods() {}
-
-  @OnTextChanged(value = 1590, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedSecondTwoMethods() {}
-  @OnTextChanged(value = 1590, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedSecondTwoMethods() {}
-
-  @OnTextChanged(1600)
-  void textChangedOuterTwoMethods() {}
-  @OnTextChanged(value = 1600, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedOuterTwoMethods() {}
-
-  @OnTextChanged(1610)
-  void textChangedAllMethods() {}
-  @OnTextChanged(value = 1610, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedAllMethods() {}
-  @OnTextChanged(value = 1610, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedAllMethods() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-}
diff --git a/butterknife/src/test/java/butterknife/internal/FindViewTest.java b/butterknife/src/test/java/butterknife/internal/FindViewTest.java
deleted file mode 100644
index 89597c9a..00000000
--- a/butterknife/src/test/java/butterknife/internal/FindViewTest.java
+++ /dev/null
@@ -1,562 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class FindViewTest {
-  @Test public void injectingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) View thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingInterface() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    interface TestInterface {}",
-        "    @FindView(1) TestInterface thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void genericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.EditText;",
-        "import android.widget.TextView;",
-        "import butterknife.FindView;",
-        "class Test<T extends TextView> extends Activity {",
-        "    @FindView(1) T thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void oneFindPerId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @FindView(1) View thing1;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
-            "    target.thing1 = view;",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing1 = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) public View thing1;",
-        "  @FindView(2) View thing2;",
-        "  @FindView(3) protected View thing3;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @interface Nullable {}",
-        "  @Nullable @FindView(1) View view;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void superclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) View view;",
-        "}",
-        "class TestOne extends Test {",
-        "  @FindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    super.unbind(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void genericSuperclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test<T> extends Activity {",
-        "  @FindView(1) View view;",
-        "}",
-        "class TestOne extends Test<String> {",
-        "  @FindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test<Object> {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    super.unbind(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  @FindView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  @FindView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @FindView(1) View thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) String thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public interface Test {",
-        "    @FindView(1) View thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) private View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) static View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfBothAnnotations() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindView(1) @FindViews(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Only one of @FindView and @FindViews is allowed. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfAlreadyInjected() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) View thing1;",
-        "    @FindView(1) View thing2;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Attempt to use @FindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsRootViewInjectionWithBadTarget() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnItemClick;",
-            "public class Test extends View {",
-            "  @OnItemClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining((
-            "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(6);
-  }
-
-  @Test public void failsOptionalRootViewInjection() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnClick;",
-            "public class Test extends View {",
-            "  @interface Nullable {}",
-            "  @Nullable @OnClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            ("ID free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/FindViewsTest.java b/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
deleted file mode 100644
index 364f2222..00000000
--- a/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
+++ /dev/null
@@ -1,510 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class FindViewsTest {
-  @Test public void injectingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) View[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test<T extends View> extends Activity {",
-        "    @FindViews({1, 2, 3}) T[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithCast() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.TextView;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) TextView[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListOfInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "    interface TestInterface {}",
-        "    @FindViews({1, 2, 3}) List<TestInterface> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test<T extends View> extends Activity {",
-        "    @FindViews({1, 2, 3}) List<T> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @interface Nullable {}",
-        "    @Nullable @FindViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfNoIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @FindViews({}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews must specify at least one ID. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfNoGenericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @FindViews(1) List thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews List must have a generic component. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfUnsupportedCollection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.Deque;",
-        "public class Test {",
-        "  @FindViews(1) Deque<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews must be a List or array. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfGenericNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "  @FindViews(1) List<String> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfArrayNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;", "import android.app.Activity;", "import butterknife.FindViews;",
-        "public class Test extends Activity {", "  @FindViews(1) String[] thing;", "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test {",
-        "  @FindViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test {",
-        "  @FindViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @FindViews(1) List<View> thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public interface Test {",
-        "    @FindViews(1) List<View> thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews(1) private List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews(1) static List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfContainsDuplicateIds() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 1}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews annotation contains duplicate ID 1. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
deleted file mode 100644
index cecb8eec..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnCheckedChangedTest {
-  @Test public void checkedChanged() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnCheckedChanged;",
-        "public class Test extends Activity {",
-        "  @OnCheckedChanged(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",
-            "      @Override public void onCheckedChanged(android.widget.CompoundButton p0, boolean p1) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnClickTest.java b/butterknife/src/test/java/butterknife/internal/OnClickTest.java
deleted file mode 100644
index 07998420..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnClickTest.java
+++ /dev/null
@@ -1,538 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnClickTest {
-  @Test public void onClickInjection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickMultipleInjections() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1) void doStuff1() {}",
-        "  @OnClick(1) void doStuff2() {}",
-        "  @OnClick({1, 2}) void doStuff3(View v) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff1();",
-            "          target.doStuff2();",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 2, \"method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void findOnlyCalledOnce() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @FindView(1) View view;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
-            "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void methodVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1) public void thing1() {}",
-        "  @OnClick(2) void thing2() {}",
-        "  @OnClick(3) protected void thing3() {}",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  @Test public void methodCastsArgument() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.Button;",
-        "import android.widget.TextView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  interface TestInterface {}",
-        "  @OnClick(0) void click0() {}",
-        "  @OnClick(1) void click1(View view) {}",
-        "  @OnClick(2) void click2(TextView view) {}",
-        "  @OnClick(3) void click3(Button button) {}",
-        "  @OnClick(4) void click4(TestInterface thing) {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click0();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 1, \"method 'click1'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click1(p0);",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 2, \"method 'click2'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click2(finder.<android.widget.TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 3, \"method 'click3'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click3(finder.<android.widget.Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 4, \"method 'click4'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click4(finder.<test.Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void methodWithMultipleIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick({1, 2, 3}) void click() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 2, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 3, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void optional() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @interface Nullable {}",
-        "  @Nullable @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    if (view != null) {",
-            "      view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(android.view.View p0) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "    }",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void optionalAndRequiredSkipsNullCheck() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @interface Nullable {}",
-        "  @FindView(1) View view;",
-        "  @Nullable @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import butterknife.OnClick;",
-        "public class Test {",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import butterknife.OnClick;",
-        "public class Test {",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfHasReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public String doStuff() {",
-        "  }",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfPrivateMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  private void doStuff() {",
-        "  }",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public static void doStuff() {",
-        "  }",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfParameterNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public void doStuff(String thing) {",
-        "  }",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(Joiner.on('\n').join(
-            "Unable to match @OnClick method arguments. (test.Test.doStuff)",
-            "  ",
-            "    Parameter #1: java.lang.String",
-            "      did not match any listener parameters",
-            "  ",
-            "  Methods may have up to 1 parameter(s):",
-            "  ",
-            "    android.view.View",
-            "  ",
-            "  These may be listed in any order but will be searched for from top to bottom."))
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfMoreThanOneParameter() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public void doStuff(View thing, View otherThing) {",
-        "  }",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.OnClick;",
-        "public interface Test {",
-        "  @OnClick(1)",
-        "  void doStuff();",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
-        .in(source).onLine(3);
-  }
-
-  @Test public void failsIfHasDuplicateIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick({1, 2, 3, 1})",
-        "  void doStuff() {",
-        "  }",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
deleted file mode 100644
index d484cd46..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnEditorActionTest {
-  @Test public void editorAction() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnEditorAction;",
-        "public class Test extends Activity {",
-        "  @OnEditorAction(1) boolean doStuff() { return false; }",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",
-            "      @Override public boolean onEditorAction(android.widget.TextView p0, int p1, android.view.KeyEvent p2) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
deleted file mode 100644
index ee06ee16..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnFocusChangeTest {
-  @Test public void focusChange() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnFocusChange;",
-        "public class Test extends Activity {",
-        "  @OnFocusChange(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",
-            "      @Override public void onFocusChange(android.view.View p0, boolean p1) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
deleted file mode 100644
index b47c649f..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
+++ /dev/null
@@ -1,292 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
-public class OnItemClickTest {
-  @Test public void onClickInjection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickInjectionWithParameters() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    AdapterView<?> parent,",
-        "    View view,",
-        "    int position,",
-        "    long id",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(p0, p1, p2, p3);",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickInjectionWithParameterSubset() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    ListView parent,",
-        "    int position",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickInjectionWithParameterSubsetAndGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test<T extends ListView> extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    T parent,",
-        "    int position",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickRootViewInjection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.content.Context;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends ListView {",
-        "  @OnItemClick void doStuff() {}",
-        "  public Test(Context context) {",
-        "    super(context);",
-        "  }",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = target;",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "          android.widget.AdapterView<?> p0,",
-            "          android.view.View p1,",
-            "          int p2,",
-            "          long p3",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsWithInvalidId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.content.Context;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick({1, -1}) void doStuff() {}",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsWithInvalidParameterConfiguration() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    AdapterView<?> parent,",
-        "    View view,",
-        "    View whatIsThis",
-        "  ) {}",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(Joiner.on('\n').join(
-            "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
-            "  ",
-            "    Parameter #1: android.widget.AdapterView<?>",
-            "      matched listener parameter #1: android.widget.AdapterView<?>",
-            "  ",
-            "    Parameter #2: android.view.View",
-            "      matched listener parameter #2: android.view.View",
-            "  ",
-            "    Parameter #3: android.view.View",
-            "      did not match any listener parameters",
-            "  ",
-            "  Methods may have up to 4 parameter(s):",
-            "  ",
-            "    android.widget.AdapterView<?>",
-            "    android.view.View",
-            "    int",
-            "    long",
-            "  ",
-            "  These may be listed in any order but will be searched for from top to bottom."))
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
deleted file mode 100644
index 64233688..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnItemLongClickTest {
-  @Test public void itemLongClick() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemLongClick;",
-        "public class Test extends Activity {",
-        "  @OnItemLongClick(1) boolean doStuff() { return false; }",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",
-            "      @Override public boolean onItemLongClick(android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
deleted file mode 100644
index debd2062..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ /dev/null
@@ -1,220 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
-public class OnItemSelectedTest {
-  @Test public void defaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nonDefaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void allMethods() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1)",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void multipleBindingPermutation() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected({ 1, 2 })",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
deleted file mode 100644
index 636fb05a..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
-public class OnLongClickTest {
-  @Test public void onLongClickInjection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnLongClick;",
-        "public class Test extends Activity {",
-        "  @OnLongClick(1) boolean doStuff() {",
-        "    return true;",
-        "  }",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnLongClickListener(",
-            "      new android.view.View.OnLongClickListener() {",
-            "        @Override public boolean onLongClick(android.view.View p0) {",
-            "          return target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfMissingReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnLongClick;",
-        "public class Test extends Activity {",
-        "  @OnLongClick(1)",
-        "  public void doStuff() {",
-        "  }",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
deleted file mode 100644
index bc80f221..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnPageChangeTest {
-  @Test public void pageChange() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnPageChange;",
-        "public class Test extends Activity {",
-        "  @OnPageChange(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",
-            "      @Override public void onPageSelected(int p0) {",
-            "        target.doStuff();",
-            "      }",
-            "      @Override public void onPageScrolled(int p0, float p1, int p2) {",
-            "      }",
-            "      @Override public void onPageScrollStateChanged(int p0) {",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
deleted file mode 100644
index 99367d12..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnTextChangedTest {
-  @Test public void textChanged() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnTextChanged;",
-        "public class Test extends Activity {",
-        "  @OnTextChanged(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",
-            "      @Override public void onTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
-            "        target.doStuff();",
-            "      }",
-            "      @Override public void beforeTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
-            "      }",
-            "      @Override public void afterTextChanged(android.text.Editable p0) {",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
deleted file mode 100644
index 9fef2868..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnTouchTest {
-  @Test public void touch() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnTouch;",
-        "public class Test extends Activity {",
-        "  @OnTouch(1) boolean doStuff() { return false; }",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",
-            "      @Override public boolean onTouch(android.view.View p0, android.view.MotionEvent p1) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnTouch;",
-        "public class Test extends Activity {",
-        "  @OnTouch(1) boolean doStuff1() {}",
-        "  @OnTouch(1) boolean doStuff2() {}",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
-        .in(source).onLine(6);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java b/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
deleted file mode 100644
index 92f7ca42..00000000
--- a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package butterknife.internal;
-
-import java.util.Arrays;
-import javax.annotation.processing.Processor;
-
-final class ProcessorTestUtilities {
-  static Iterable<? extends Processor> butterknifeProcessors() {
-    return Arrays.asList(
-        new ButterKnifeProcessor()
-    );
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceBoolTest.java b/butterknife/src/test/java/butterknife/internal/ResourceBoolTest.java
deleted file mode 100644
index 86fa6326..00000000
--- a/butterknife/src/test/java/butterknife/internal/ResourceBoolTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class ResourceBoolTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceBool;",
-        "public class Test extends Activity {",
-        "  @ResourceBool(1) boolean one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getBoolean(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeBoolean() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceBool;",
-        "public class Test extends Activity {",
-        "  @ResourceBool(1) String one;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@ResourceBool field type must be 'boolean'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceColorTest.java b/butterknife/src/test/java/butterknife/internal/ResourceColorTest.java
deleted file mode 100644
index 0ec0bd21..00000000
--- a/butterknife/src/test/java/butterknife/internal/ResourceColorTest.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class ResourceColorTest {
-  @Test public void simpleInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceColor;",
-        "public class Test extends Activity {",
-        "  @ResourceColor(1) int one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getColor(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void simpleColorStateList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.content.res.ColorStateList;",
-        "import butterknife.ResourceColor;",
-        "public class Test extends Activity {",
-        "  @ResourceColor(1) ColorStateList one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getColorStateList(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeIntOrColorStateList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceColor;",
-        "public class Test extends Activity {",
-        "  @ResourceColor(1) String one;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@ResourceColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceDimenTest.java b/butterknife/src/test/java/butterknife/internal/ResourceDimenTest.java
deleted file mode 100644
index fca8cf15..00000000
--- a/butterknife/src/test/java/butterknife/internal/ResourceDimenTest.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class ResourceDimenTest {
-  @Test public void simpleFloat() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceDimen;",
-        "public class Test extends Activity {",
-        "  @ResourceDimen(1) float one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getDimension(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void simpleInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceDimen;",
-        "public class Test extends Activity {",
-        "  @ResourceDimen(1) int one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getDimensionPixelSize(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeIntOrFloat() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceDimen;",
-        "public class Test extends Activity {",
-        "  @ResourceDimen(1) String one;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@ResourceDimen field type must be 'int' or 'float'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceDrawableTest.java b/butterknife/src/test/java/butterknife/internal/ResourceDrawableTest.java
deleted file mode 100644
index 353f1d08..00000000
--- a/butterknife/src/test/java/butterknife/internal/ResourceDrawableTest.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class ResourceDrawableTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.graphics.drawable.Drawable;",
-        "import butterknife.ResourceDrawable;",
-        "public class Test extends Activity {",
-        "  @ResourceDrawable(1) Drawable one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getDrawable(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeDrawable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceDrawable;",
-        "public class Test extends Activity {",
-        "  @ResourceDrawable(1) String one;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@ResourceDrawable field type must be 'Drawable'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceIntTest.java b/butterknife/src/test/java/butterknife/internal/ResourceIntTest.java
deleted file mode 100644
index 1df98577..00000000
--- a/butterknife/src/test/java/butterknife/internal/ResourceIntTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class ResourceIntTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceInt;",
-        "public class Test extends Activity {",
-        "  @ResourceInt(1) int one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getInteger(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceInt;",
-        "public class Test extends Activity {",
-        "  @ResourceInt(1) String one;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@ResourceInt field type must be 'int'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceStringTest.java b/butterknife/src/test/java/butterknife/internal/ResourceStringTest.java
deleted file mode 100644
index 66c1c28b..00000000
--- a/butterknife/src/test/java/butterknife/internal/ResourceStringTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class ResourceStringTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceString;",
-        "public class Test extends Activity {",
-        "  @ResourceString(1) String one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getString(1);",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeString() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.ResourceString;",
-        "public class Test extends Activity {",
-        "  @ResourceString(1) boolean one;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@ResourceString field type must be 'String'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java b/butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java
deleted file mode 100644
index 9383d8ec..00000000
--- a/butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package butterknife.internal;
-
-import org.junit.Test;
-
-import static butterknife.internal.BindingClass.emitHumanDescription;
-import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class ViewBindingClassTest {
-  @Test public void humanDescriptionJoinWorks() {
-    ViewBinding one = new TestViewBinding("one");
-    ViewBinding two = new TestViewBinding("two");
-    ViewBinding three = new TestViewBinding("three");
-
-    StringBuilder builder1 = new StringBuilder();
-    emitHumanDescription(builder1, asList(one));
-    assertThat(builder1.toString()).isEqualTo("one");
-
-    StringBuilder builder2 = new StringBuilder();
-    emitHumanDescription(builder2, asList(one, two));
-    assertThat(builder2.toString()).isEqualTo("one and two");
-
-    StringBuilder builder3 = new StringBuilder();
-    emitHumanDescription(builder3, asList(one, two, three));
-    assertThat(builder3.toString()).isEqualTo("one, two, and three");
-  }
-
-  private static class TestViewBinding implements ViewBinding {
-    private final String description;
-
-    private TestViewBinding(String description) {
-      this.description = description;
-    }
-
-    @Override public String getDescription() {
-      return description;
-    }
-  }
-}
diff --git a/checkstyle.xml b/checkstyle.xml
index 73070a8a..67d211ce 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -27,7 +27,7 @@
   </module>
 
   <module name="TreeWalker">
-    <property name="cacheFile" value="${checkstyle.cache.file}"/>
+    <!--<property name="cacheFile" value="${checkstyle.cache.file}"/>-->
 
     <!-- Checks for Javadoc comments.                     -->
     <!-- See http://checkstyle.sf.net/config_javadoc.html -->
@@ -96,7 +96,7 @@
     <!-- Checks for blocks. You know, those {}'s         -->
     <!-- See http://checkstyle.sf.net/config_blocks.html -->
     <module name="AvoidNestedBlocks"/>
-    <module name="EmptyBlock"/>
+    <!--<module name="EmptyBlock"/>-->
     <module name="LeftCurly"/>
     <module name="NeedBraces">
         <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE"/>
@@ -108,7 +108,7 @@
     <!-- See http://checkstyle.sf.net/config_coding.html -->
     <!--<module name="AvoidInlineConditionals"/>-->
     <module name="CovariantEquals"/>
-    <module name="DoubleCheckedLocking"/>
+    <!--<module name="DoubleCheckedLocking"/>-->
     <module name="EmptyStatement"/>
     <module name="EqualsAvoidNull"/>
     <module name="EqualsHashCode"/>
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 00000000..e5b152e9
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,16 @@
+GROUP=com.jakewharton
+VERSION_NAME=8.4.1-SNAPSHOT
+
+POM_DESCRIPTION=Field and method binding for Android views.
+
+POM_URL=https://github.com/JakeWharton/butterknife/
+POM_SCM_URL=https://github.com/JakeWharton/butterknife/
+POM_SCM_CONNECTION=scm:git:git://github.com/JakeWharton/butterknife.git
+POM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/JakeWharton/butterknife.git
+
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+
+POM_DEVELOPER_ID=jakewharton
+POM_DEVELOPER_NAME=Jake Wharton
diff --git a/gradle/gradle-mvn-push.gradle b/gradle/gradle-mvn-push.gradle
new file mode 100644
index 00000000..ea3f6bbb
--- /dev/null
+++ b/gradle/gradle-mvn-push.gradle
@@ -0,0 +1,218 @@
+/*
+ * Copyright 2013 Chris Banes
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+version = VERSION_NAME
+group = GROUP
+
+def isReleaseBuild() {
+  return VERSION_NAME.contains("SNAPSHOT") == false
+}
+
+def getReleaseRepositoryUrl() {
+  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+      : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+}
+
+def getSnapshotRepositoryUrl() {
+  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+      : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
+}
+
+def getRepositoryPassword() {
+  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
+}
+
+afterEvaluate { project ->
+  uploadArchives {
+    repositories {
+      mavenDeployer {
+        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        repository(url: getReleaseRepositoryUrl()) {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+        snapshotRepository(url: getSnapshotRepositoryUrl()) {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+  }
+
+  signing {
+    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+    sign configurations.archives
+  }
+
+  if (project.getPlugins().hasPlugin('com.android.application') ||
+      project.getPlugins().hasPlugin('com.android.library')) {
+    task install(type: Upload, dependsOn: assemble) {
+      repositories.mavenInstaller {
+        configuration = configurations.archives
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+
+    task androidJavadocs(type: Javadoc) {
+      source = android.sourceSets.main.java.source
+      classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    }
+
+    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+      classifier = 'javadoc'
+      from androidJavadocs.destinationDir
+    }
+
+    task androidSourcesJar(type: Jar) {
+      classifier = 'sources'
+      from android.sourceSets.main.java.source
+    }
+  } else {
+    install {
+      repositories.mavenInstaller {
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+
+    task sourcesJar(type: Jar, dependsOn:classes) {
+      classifier = 'sources'
+      from sourceSets.main.allSource
+    }
+
+    task javadocJar(type: Jar, dependsOn:javadoc) {
+      classifier = 'javadoc'
+      from javadoc.destinationDir
+    }
+  }
+
+  if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+      tasks.withType(Javadoc) {
+        options.addStringOption('Xdoclint:none', '-quiet')
+      }
+    }
+  }
+
+  artifacts {
+    if (project.getPlugins().hasPlugin('com.android.application') ||
+        project.getPlugins().hasPlugin('com.android.library')) {
+      archives androidSourcesJar
+      archives androidJavadocsJar
+    } else {
+      archives sourcesJar
+      archives javadocJar
+    }
+  }
+}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..3baa851b
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..f3fdc34d
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Fri Sep 02 22:21:42 PDT 2016
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 00000000..27309d92
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 00000000..f6d5974e
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index 7d4e9d12..00000000
--- a/pom.xml
+++ /dev/null
@@ -1,160 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife-parent</artifactId>
-  <version>7.0.0-SNAPSHOT</version>
-  <packaging>pom</packaging>
-
-  <name>Butter Knife (Parent)</name>
-  <description>Field and method binding for Android views.</description>
-  <url>http://github.com/JakeWharton/butterknife/</url>
-  <inceptionYear>2013</inceptionYear>
-
-  <modules>
-    <module>butterknife</module>
-    <module>butterknife-sample</module>
-  </modules>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-
-    <java.version>1.6</java.version>
-    <fest.version>2.0M10</fest.version>
-    <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
-    <junit.version>4.10</junit.version>
-    <robolectric.version>2.2</robolectric.version>
-    <fest.android.version>1.0.7</fest.android.version>
-    <compile-test.version>0.6</compile-test.version>
-  </properties>
-
-  <scm>
-    <url>http://github.com/JakeWharton/butterknife/</url>
-    <connection>scm:git:git://github.com/JakeWharton/butterknife.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/JakeWharton/butterknife.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>http://github.com/JakeWharton/butterknife/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>com.google.android</groupId>
-        <artifactId>android</artifactId>
-        <version>${android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>junit</groupId>
-        <artifactId>junit</artifactId>
-        <version>${junit.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.easytesting</groupId>
-        <artifactId>fest-assert-core</artifactId>
-        <version>${fest.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup</groupId>
-        <artifactId>fest-android</artifactId>
-        <version>${fest.android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.robolectric</groupId>
-        <artifactId>robolectric</artifactId>
-        <version>${robolectric.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.testing.compile</groupId>
-        <artifactId>compile-testing</artifactId>
-        <version>${compile-test.version}</version>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.0</version>
-        <configuration>
-          <source>${java.version}</source>
-          <target>${java.version}</target>
-          <showWarnings>true</showWarnings>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>2.9.1</version>
-        <configuration>
-          <failsOnError>true</failsOnError>
-          <configLocation>checkstyle.xml</configLocation>
-          <consoleOutput>true</consoleOutput>
-        </configuration>
-        <executions>
-          <execution>
-            <phase>verify</phase>
-            <goals>
-              <goal>checkstyle</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.4</version>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-    </plugins>
-
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <groupId>com.simpligility.maven.plugins</groupId>
-          <artifactId>android-maven-plugin</artifactId>
-          <version>4.1.0</version>
-          <configuration>
-            <sdk>
-              <platform>${android.platform}</platform>
-            </sdk>
-          </configuration>
-        </plugin>
-
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-javadoc-plugin</artifactId>
-          <version>2.9</version>
-          <configuration>
-            <additionalparam>-Xdoclint:none</additionalparam>
-          </configuration>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-  </build>
-</project>
diff --git a/sample/app/build.gradle b/sample/app/build.gradle
new file mode 100644
index 00000000..40ccd2d6
--- /dev/null
+++ b/sample/app/build.gradle
@@ -0,0 +1,53 @@
+apply plugin: 'com.android.application'
+apply plugin: 'com.neenbedankt.android-apt'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  compileOptions {
+    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
+    targetCompatibility = rootProject.ext.targetCompatibilityVersion
+  }
+
+  defaultConfig {
+    applicationId 'com.example.butterknife'
+    minSdkVersion rootProject.ext.minSdkVersion
+    targetSdkVersion rootProject.ext.targetSdkVersion
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+  }
+
+  buildTypes {
+    debug {
+      minifyEnabled true
+    }
+  }
+}
+
+dependencies {
+  compile deps.butterknife
+  apt deps.butterknifeCompiler
+
+  compile project(':sample:library')
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.robolectric
+}
+
+afterEvaluate {
+  tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->
+    task.doFirst {
+      logging.level = LogLevel.INFO
+    }
+    task.doLast {
+      logging.level = LogLevel.LIFECYCLE
+    }
+  }
+}
diff --git a/butterknife-sample/src/main/AndroidManifest.xml b/sample/app/src/main/AndroidManifest.xml
similarity index 67%
rename from butterknife-sample/src/main/AndroidManifest.xml
rename to sample/app/src/main/AndroidManifest.xml
index ebc0c10a..d8dc9f98 100644
--- a/butterknife-sample/src/main/AndroidManifest.xml
+++ b/sample/app/src/main/AndroidManifest.xml
@@ -1,21 +1,21 @@
 <?xml version="1.0" encoding="utf-8"?>
-
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    android:versionCode="1"
-    android:versionName="1.0"
+    xmlns:tools="http://schemas.android.com/tools"
     package="com.example.butterknife">
 
-  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>
-
   <application
+      android:allowBackup="false"
+      android:fullBackupContent="false"
       android:label="@string/app_name"
-      android:name=".SimpleApp">
+      android:name=".SimpleApp"
+      tools:ignore="MissingApplicationIcon,UnusedAttribute">
 
     <activity
         android:label="@string/app_name"
-        android:name=".SimpleActivity">
+        android:name=".library.SimpleActivity">
       <intent-filter>
         <action android:name="android.intent.action.MAIN"/>
+
         <category android:name="android.intent.category.LAUNCHER"/>
         <category android:name="android.intent.category.DEFAULT"/>
       </intent-filter>
diff --git a/sample/app/src/main/java/com/example/butterknife/SimpleApp.java b/sample/app/src/main/java/com/example/butterknife/SimpleApp.java
new file mode 100644
index 00000000..d3fa2787
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/SimpleApp.java
@@ -0,0 +1,11 @@
+package com.example.butterknife;
+
+import android.app.Application;
+import butterknife.ButterKnife;
+
+public class SimpleApp extends Application {
+  @Override public void onCreate() {
+    super.onCreate();
+    ButterKnife.setDebug(BuildConfig.DEBUG);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/A.java b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
new file mode 100644
index 00000000..79feb9e8
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class A {
+
+  @BindColor(android.R.color.black) @ColorInt int blackColor;
+
+  public A(View view) {
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/B.java b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
new file mode 100644
index 00000000..2b78fe9b
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class B extends A {
+
+  @BindColor(android.R.color.white) @ColorInt int whiteColor;
+
+  public B(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/C.java b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
new file mode 100644
index 00000000..3772e400
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
@@ -0,0 +1,19 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindView;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class C extends B {
+
+  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;
+  @BindView(android.R.id.button1) View button1;
+
+  public C(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/D.java b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
new file mode 100644
index 00000000..5ab8b2c6
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class D extends C {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+
+  public D(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/E.java b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
new file mode 100644
index 00000000..bd5e28aa
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class E extends C {
+
+  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;
+
+  public E(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/F.java b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
new file mode 100644
index 00000000..5b1a2faa
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public final class F extends D {
+
+  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;
+
+  public F(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/G.java b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
new file mode 100644
index 00000000..419ef4b5
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
@@ -0,0 +1,24 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindView;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+
+public class G extends E {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+  @BindView(android.R.id.button2) View button2;
+
+  public G(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+
+  @OnClick(android.R.id.content) public void onClick() {
+
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/H.java b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
new file mode 100644
index 00000000..e9cd4136
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
@@ -0,0 +1,19 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindView;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class H extends G {
+
+  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;
+  @BindView(android.R.id.button3) View button3;
+
+  public H(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/library/build.gradle b/sample/library/build.gradle
new file mode 100644
index 00000000..df52a0e3
--- /dev/null
+++ b/sample/library/build.gradle
@@ -0,0 +1,27 @@
+buildscript {
+  dependencies {
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.2.0'
+  }
+}
+
+apply plugin: 'com.android.library'
+apply plugin: 'com.neenbedankt.android-apt'
+apply plugin: 'com.jakewharton.butterknife'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  defaultConfig {
+    minSdkVersion rootProject.ext.minSdkVersion
+  }
+}
+
+dependencies {
+  compile deps.butterknife
+  apt deps.butterknifeCompiler
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.robolectric
+}
diff --git a/sample/library/src/main/AndroidManifest.xml b/sample/library/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..d788df0f
--- /dev/null
+++ b/sample/library/src/main/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest package="com.example.butterknife.library"/>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
similarity index 70%
rename from butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
rename to sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 12391036..765bdf23 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -1,16 +1,17 @@
-package com.example.butterknife;
+package com.example.butterknife.library;
 
 import android.app.Activity;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
+import butterknife.BindView;
+import butterknife.BindViews;
 import butterknife.ButterKnife;
-import butterknife.FindView;
-import butterknife.FindViews;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
@@ -20,7 +21,7 @@
 
 public class SimpleActivity extends Activity {
   private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
-    @Override public void apply(View view, int index) {
+    @Override public void apply(@NonNull View view, int index) {
       AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
       alphaAnimation.setFillBefore(true);
       alphaAnimation.setDuration(500);
@@ -29,28 +30,27 @@
     }
   };
 
-  @FindView(R.id.title) TextView title;
-  @FindView(R.id.subtitle) TextView subtitle;
-  @FindView(R.id.hello) Button hello;
-  @FindView(R.id.list_of_things) ListView listOfThings;
-  @FindView(R.id.footer) TextView footer;
+  @BindView(R2.id.title) TextView title;
+  @BindView(R2.id.subtitle) TextView subtitle;
+  @BindView(R2.id.hello) Button hello;
+  @BindView(R2.id.list_of_things) ListView listOfThings;
+  @BindView(R2.id.footer) TextView footer;
 
-  @FindViews({ R.id.title, R.id.subtitle, R.id.hello })
-  List<View> headerViews;
+  @BindViews({ R2.id.title, R2.id.subtitle, R2.id.hello }) List<View> headerViews;
 
   private SimpleAdapter adapter;
 
-  @OnClick(R.id.hello) void sayHello() {
+  @OnClick(R2.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
-  @OnLongClick(R.id.hello) boolean sayGetOffMe() {
+  @OnLongClick(R2.id.hello) boolean sayGetOffMe() {
     Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
     return true;
   }
 
-  @OnItemClick(R.id.list_of_things) void onItemClick(int position) {
+  @OnItemClick(R2.id.list_of_things) void onItemClick(int position) {
     Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
   }
 
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
similarity index 79%
rename from butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
rename to sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
index 71131356..921096d6 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
@@ -1,4 +1,4 @@
-package com.example.butterknife;
+package com.example.butterknife.library;
 
 import android.content.Context;
 import android.view.LayoutInflater;
@@ -6,12 +6,11 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
+import butterknife.BindView;
 import butterknife.ButterKnife;
-import butterknife.FindView;
 
 public class SimpleAdapter extends BaseAdapter {
-  private static final String[] CONTENTS =
-      "The quick brown fox jumps over the lazy dog".split(" ");
+  private static final String[] CONTENTS = "The quick brown fox jumps over the lazy dog".split(" ");
 
   private final LayoutInflater inflater;
 
@@ -50,10 +49,10 @@ public SimpleAdapter(Context context) {
     return view;
   }
 
-  static class ViewHolder {
-    @FindView(R.id.word) TextView word;
-    @FindView(R.id.length) TextView length;
-    @FindView(R.id.position) TextView position;
+  static final class ViewHolder {
+    @BindView(R2.id.word) TextView word;
+    @BindView(R2.id.length) TextView length;
+    @BindView(R2.id.position) TextView position;
 
     ViewHolder(View view) {
       ButterKnife.bind(this, view);
diff --git a/butterknife-sample/src/main/res/layout/simple_activity.xml b/sample/library/src/main/res/layout/simple_activity.xml
similarity index 100%
rename from butterknife-sample/src/main/res/layout/simple_activity.xml
rename to sample/library/src/main/res/layout/simple_activity.xml
diff --git a/butterknife-sample/src/main/res/layout/simple_list_item.xml b/sample/library/src/main/res/layout/simple_list_item.xml
similarity index 100%
rename from butterknife-sample/src/main/res/layout/simple_list_item.xml
rename to sample/library/src/main/res/layout/simple_list_item.xml
diff --git a/butterknife-sample/src/main/res/values/strings.xml b/sample/library/src/main/res/values/strings.xml
similarity index 100%
rename from butterknife-sample/src/main/res/values/strings.xml
rename to sample/library/src/main/res/values/strings.xml
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 00000000..cc28c278
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,11 @@
+include ':butterknife'
+include ':butterknife-annotations'
+include ':butterknife-compiler'
+include ':butterknife-gradle-plugin'
+include ':butterknife-lint'
+include ':butterknife-integration-test'
+
+include ':sample:app'
+include ':sample:library'
+
+rootProject.name = 'butterknife-parent'
diff --git a/website/ide-eclipse.html b/website/ide-eclipse.html
index ba92be5f..e1cf729d 100644
--- a/website/ide-eclipse.html
+++ b/website/ide-eclipse.html
@@ -27,7 +27,7 @@ <h2>Field and method binding for Android views</h2>
             <h3 id="introduction">Eclipse Configuration</h3>
             <ol>
               <li>
-                <p>Right click on your project in the <em>Package Explorer</em>. Head to <em>Java Compiler &rarr; Annotation Processing</em> and check <em>"Enable project specific settings"</em>.<p>
+                <p>Right click on your project in the <em>Package Explorer</em>, go to <em>Properties</em>, head to <em>Java Compiler &rarr; Annotation Processing</em> and check <em>"Enable project specific settings"</em>.<p>
                 <p>Ensure the other annotation processing settings are the same as shown below:</p>
                 <p><img src="static/ide-eclipse1.png"/></p>
               </li>
diff --git a/website/index.html b/website/index.html
index 962c1797..f420d078 100644
--- a/website/index.html
+++ b/website/index.html
@@ -24,11 +24,11 @@ <h2>Field and method binding for Android views</h2>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@FindView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@BindView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @FindView(R.id.title) TextView title;
-  @FindView(R.id.subtitle) TextView subtitle;
-  @FindView(R.id.footer) TextView footer;
+  @BindView(R.id.title) TextView title;
+  @BindView(R.id.subtitle) TextView subtitle;
+  @BindView(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -45,11 +45,21 @@ <h3 id="introduction">Introduction</h3>
   activity.title = (android.widget.TextView) activity.findViewById(2130968577);
 }</pre>
 
+            <h4 id="resource">Resource Binding</h4>
+            <p>Bind pre-defined resources with <code>@BindBool</code>, <code>@BindColor</code>, <code>@BindDimen</code>, <code>@BindDrawable</code>, <code>@BindInt</code>, <code>@BindString</code>, which binds an <code>R.bool</code> ID (or your specified type) to its corresponding field.</p>
+            <pre class="prettyprint">class ExampleActivity extends Activity {
+  @BindString(R.string.title) String title;
+  @BindDrawable(R.drawable.graphic) Drawable graphic;
+  @BindColor(R.color.red) int red; // int or ColorStateList field
+  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field
+  // ...
+}</pre>
+
             <h4 id="non-activity">Non-Activity Binding</h4>
             <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @FindView(R.id.button1) Button button1;
-  @FindView(R.id.button2) Button button2;
+  @BindView(R.id.button1) Button button1;
+  @BindView(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
@@ -77,8 +87,8 @@ <h4 id="non-activity">Non-Activity Binding</h4>
   }
 
   static class ViewHolder {
-    @FindView(R.id.title) TextView name;
-    @FindView(R.id.job_title) TextView jobTitle;
+    @BindView(R.id.title) TextView name;
+    @BindView(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
       ButterKnife.bind(this, view);
@@ -97,24 +107,24 @@ <h4 id="non-activity">Non-Activity Binding</h4>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@FindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@BindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
 ButterKnife.apply(nameViews, ENABLED, false);</pre>
             <p><code>Action</code> and <code>Setter</code> interfaces allow specifying simple behavior.</p>
-            <pre class="prettyprint">static final Action&lt;View> DISABLE = new Action&lt;>() {
+            <pre class="prettyprint">static final ButterKnife.Action&lt;View> DISABLE = new ButterKnife.Action&lt;View>() {
   @Override public void apply(View view, int index) {
     view.setEnabled(false);
   }
-}
-static final Setter&lt;View, Boolean> ENABLED = new Setter&lt;>() {
+};
+static final ButterKnife.Setter&lt;View, Boolean> ENABLED = new ButterKnife.Setter&lt;View, Boolean>() {
   @Override public void set(View view, Boolean value, int index) {
     view.setEnabled(value);
   }
-}</pre>
+};</pre>
             <p>An Android <a href="https://developer.android.com/reference/android/util/Property.html"><code>Property</code></a> can also be used with the <code>apply</code> method.</p>
-            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0);</pre>
+            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</pre>
 
             <h4 id="listener-binding">Listener Binding</h4>
             <p>Listeners can also automatically be configured onto methods.</p>
@@ -151,31 +161,32 @@ <h4 id="listener-binding">Listener Binding</h4>
 </pre>
 
             <h4 id="reset">Binding Reset</h4>
-            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has an <code>unbind</code> method to do this automatically.</p>
+            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife returns an <code>Unbinder</code> instance when you call <code>bind</code> to do this for you. Call its <code>unbind</code> method in the appropriate lifecycle callback.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @FindView(R.id.button1) Button button1;
-  @FindView(R.id.button2) Button button2;
+  @BindView(R.id.button1) Button button1;
+  @BindView(R.id.button2) Button button2;
+  private Unbinder unbinder;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.bind(this, view);
+    unbinder = ButterKnife.bind(this, view);
     // TODO Use fields...
     return view;
   }
 
   @Override public void onDestroyView() {
     super.onDestroyView();
-    ButterKnife.unbind(this);
+    unbinder.unbind();
   }
 }</pre>
 
             <h4 id="optional">Optional Bindings</h4>
-            <p>By default, both <code>@FindView</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
-            <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to the field or method.</p>
-            <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
-            <pre class="prettyprint">@Nullable @FindView(R.id.might_not_be_there) TextView mightNotBeThere;
+            <p>By default, both <code>@Bind</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
+            <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to fields or the <code>@Optional</code> annotation to methods.</p>
+            <p>Note: Any annotation named <code>@Nullable</code> can be used for fields. It is encouraged to use the <code>@Nullable</code> annotation from <a href="http://tools.android.com/tech-docs/support-annotations">Android's "support-annotations" library</a>.</p>
+            <pre class="prettyprint">@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;
 
-@Nullable @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
+@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
 }</pre>
 
@@ -200,51 +211,9 @@ <h4 id="bonus">Bonus</h4>
             <p>Add a static import for <code>ButterKnife.findById</code> and enjoy even more fun.</p>
 
             <h3 id="download">Download</h3>
-            <p class="downloads">
-              <a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton&a=butterknife&v=LATEST" class="btn btn-large btn-inverse" id="download-btn">Butter Knife JAR <span class="runner-version"></span></a>
-            </p>
-            <p>The source code to the library and sample application as well as this website is <a href="http://github.com/JakeWharton/butterknife">available on GitHub</a>. The Javadoc is also <a href="javadoc/index.html">available to browse</a>.</p>
-
-            <h4>Maven</h4>
-            <p>If you are using Maven for compilation you can declare the library as a dependency.</p>
-            <pre class="prettyprint">&lt;dependency>
-  &lt;groupId>com.jakewharton&lt;/groupId>
-  &lt;artifactId>butterknife&lt;/artifactId>
-  &lt;version><span class="version"><em>(insert latest version)</em></span>&lt;/version>
-&lt;/dependency></pre>
-
             <h4>Gradle</h4>
-            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>
-            <p>Be sure to supress this lint warning in your <code>build.gradle</code>.</p>
-            <pre class="prettyprint">lintOptions {
-  disable 'InvalidPackage'
-}</pre>
-            <p>Some configurations may also require additional exclusions.</p>
-            <pre class="prettyprint">packagingOptions {
-  exclude 'META-INF/services/javax.annotation.processing.Processor'
-}</pre>
-
-            <h4 id="ide">IDE Configuration</h4>
-            <p>Some IDEs require additional configuration in order to enable annotation processing.</p>
-            <ul>
-              <li><em>IntelliJ IDEA</em> &mdash; If your project uses an external configuration (like a Maven <code>pom.xml</code>) then annotation processing should just work. If not, try <a href="ide-idea.html">manual configuration</a>.</li>
-              <li><em>Eclipse</em> &mdash; Set up <a href="ide-eclipse.html">manual configuration</a>.</li>
-            </ul>
-
-            <h4 id="proguard">ProGuard</h4>
-            <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept.
-                To prevent ProGuard renaming classes that use @FindView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
-            <pre>-keep class butterknife.** { *; }
--dontwarn butterknife.internal.**
--keep class **$$ViewBinder { *; }
-
--keepclasseswithmembernames class * {
-    @butterknife.* &lt;fields&gt;;
-}
-
--keepclasseswithmembernames class * {
-    @butterknife.* &lt;methods&gt;;
-}</pre>
+            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'
+apt 'com.jakewharton:butterknife-compiler:<span class="version"><em>(insert latest version)</em></span>'</pre>
 
             <h3 id="license">License</h3>
             <pre class="license">Copyright 2013 Jake Wharton
@@ -273,7 +242,6 @@ <h3 id="license">License</h3>
       prettyPrint();
       $.fn.artifactVersion('com.jakewharton', 'butterknife', function(version, url) {
         $('.version').text(version);
-        $('#download-btn').text('Butter Knife v' + version + ' JAR').attr('href', url);
       });
     </script>
   </body>
