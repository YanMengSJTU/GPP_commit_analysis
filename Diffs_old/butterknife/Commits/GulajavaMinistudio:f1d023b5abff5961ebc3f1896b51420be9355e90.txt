diff --git a/.travis.yml b/.travis.yml
index 4e7fb53e..31ff57fe 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7,6 +7,7 @@ before_install:
   # Install SDK license so Android Gradle plugin can install deps.
   - mkdir "$ANDROID_HOME/licenses" || true
   - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
+  - echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$ANDROID_HOME/licenses/android-sdk-license"
   # Install the rest of tools (e.g., avdmanager)
   - sdkmanager tools
   # Install the system image
diff --git a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
index 2975cc02..ebaa57c6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnEditorActionListener#onEditorAction(android.widget.TextView, int, android.view.KeyEvent)
  * onEditorAction} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnEditorActionListener
  */
@@ -40,7 +42,7 @@
             "android.view.KeyEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnEditorAction {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index 2902aa9e..0f1ca8b9 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnItemLongClickListener#onItemLongClick(android.widget.AdapterView, android.view.View,
  * int, long) onItemLongClick} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnItemLongClickListener
  */
@@ -41,7 +43,7 @@
             "long"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnItemLongClick {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 7cc22d39..55d7fed6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -22,6 +22,8 @@
  * </code></pre>
  * Any number of parameters from {@link OnLongClickListener#onLongClick(android.view.View)} may be
  * used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnLongClickListener
  */
@@ -37,7 +39,7 @@
             "android.view.View"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnLongClick {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
index 1ba3a383..b823b443 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
@@ -9,7 +9,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to a {@link TextWatcher TextWatcher} on the view for each ID specified.
@@ -32,7 +32,7 @@
  * @see TextWatcher
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "addTextChangedListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTouch.java b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
index 9a6e8cbc..669e0f6d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTouch.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
@@ -22,6 +22,8 @@
  * Any number of parameters from
  * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used
  * on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnTouchListener
  */
@@ -38,7 +40,7 @@
             "android.view.MotionEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnTouch {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index df881418..e5a891d0 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -460,14 +460,15 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
           callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
         }
 
-        boolean hasReturnType = !"void".equals(method.returnType());
+        boolean hasReturnValue = false;
         CodeBlock.Builder builder = CodeBlock.builder();
-        if (hasReturnType) {
-          builder.add("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          for (MethodViewBinding methodBinding : methodBindings.get(method)) {
+        Set<MethodViewBinding> methodViewBindings = methodBindings.get(method);
+        if (methodViewBindings != null) {
+          for (MethodViewBinding methodBinding : methodViewBindings) {
+            if (methodBinding.hasReturnValue()) {
+              hasReturnValue = true;
+              builder.add("return "); // TODO what about multiple methods?
+            }
             builder.add("target.$L(", methodBinding.getName());
             List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -493,9 +494,12 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
             }
             builder.add(");\n");
           }
-        } else if (hasReturnType) {
-          builder.add("$L;\n", method.defaultReturn());
         }
+
+        if (!"void".equals(method.returnType()) && !hasReturnValue) {
+          builder.add("return $L;\n", method.defaultReturn());
+        }
+
         callbackMethod.addCode(builder.build());
         callback.addMethod(callbackMethod.build());
       }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index ed877cac..3f30e35d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1110,7 +1110,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       TypeVariable typeVariable = (TypeVariable) returnType;
       returnType = typeVariable.getUpperBound();
     }
-    if (!returnType.toString().equals(method.returnType())) {
+    String returnTypeString = returnType.toString();
+    boolean hasReturnValue = !"void".equals(returnTypeString);
+    if (!returnTypeString.equals(method.returnType()) && hasReturnValue) {
       error(element, "@%s methods must have a '%s' return type. (%s.%s)",
           annotationClass.getSimpleName(), method.returnType(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
@@ -1186,7 +1188,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       }
     }
 
-    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
+    MethodViewBinding binding =
+        new MethodViewBinding(name, Arrays.asList(parameters), required, hasReturnValue);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);
 
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index e4d1c4b7..179d7e53 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -8,11 +8,14 @@
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
+  private final boolean hasReturnValue;
 
-  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required,
+      boolean hasReturnValue) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
+    this.hasReturnValue = hasReturnValue;
   }
 
   public String getName() {
@@ -30,4 +33,8 @@ public String getName() {
   public boolean isRequired() {
     return required;
   }
+
+  public boolean hasReturnValue() {
+    return hasReturnValue;
+  }
 }
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index 53b0955f..a86726d7 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -15,7 +15,7 @@ android {
     versionCode 1
     versionName '1.0.0'
 
-    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
   }
 
   lintOptions {
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
index c517c0aa..25688519 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
@@ -14,6 +14,7 @@
 import com.example.butterknife.BuildConfig;
 import org.junit.Test;
 
+import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assume.assumeFalse;
@@ -243,28 +244,4 @@
     view4.performClick();
     assertSame(view4, target.last);
   }
-
-  private static View treeWithIds(int... ids) {
-    Context context = InstrumentationRegistry.getContext();
-    FrameLayout group = new FrameLayout(context);
-
-    class SuperGrossView extends View {
-      SuperGrossView(Context context) {
-        super(context);
-      }
-
-      @Override public boolean post(Runnable action) {
-        // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
-        action.run();
-        return true;
-      }
-    }
-
-    for (int id : ids) {
-      View view = new SuperGrossView(context);
-      view.setId(id);
-      group.addView(view);
-    }
-    return group;
-  }
 }
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
new file mode 100644
index 00000000..05ac6c4b
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
@@ -0,0 +1,250 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import androidx.test.InstrumentationRegistry;
+import butterknife.ButterKnife;
+import butterknife.OnLongClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnLongClickTest {
+  static final class Simple {
+    boolean returnValue = true;
+    int clicks = 0;
+
+    @OnLongClick(1) boolean click() {
+      clicks++;
+      return returnValue;
+    }
+  }
+
+  @Test public void simple() {
+    View tree = treeWithIds(1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    assertTrue(view1.performLongClick());
+    assertEquals(1, target.clicks);
+
+    target.returnValue = false;
+    assertFalse(view1.performLongClick());
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class ReturnVoid {
+    int clicks = 0;
+
+    @OnLongClick(1) void click() {
+      clicks++;
+    }
+  }
+
+  @Test public void returnVoid() {
+    View tree = treeWithIds(1);
+    View view1 = tree.findViewById(1);
+
+    ReturnVoid target = new ReturnVoid();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    assertTrue(view1.performLongClick());
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnLongClick(1) public boolean publicClick() {
+      clicks++;
+      return true;
+    }
+
+    @OnLongClick(2) boolean packageClick() {
+      clicks++;
+      return true;
+    }
+
+    @OnLongClick(3) protected boolean protectedClick() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @Test public void visibilities() {
+    View tree = treeWithIds(1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+
+    view3.performLongClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnLongClick({1, 2}) boolean click() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @Test public void multipleIds() {
+    View tree = treeWithIds(1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnLongClick(1) public boolean click() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @Test public void optionalIdPresent() {
+    View tree = treeWithIds(1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @Test public void optionalIdAbsent() {
+    View tree = treeWithIds(2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performLongClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnLongClick(1) boolean clickView(View view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(2) boolean clickTextView(TextView view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(3) boolean clickButton(Button view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(4) boolean clickMyInterface(MyInterface view) {
+      last = (View) view;
+      return true;
+    }
+  }
+
+  @Test public void argumentCast() {
+    class MyView extends Button implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    View view4 = new MyView(InstrumentationRegistry.getContext());
+    view4.setId(4);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+    tree.addView(view4);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performLongClick();
+    assertSame(view1, target.last);
+
+    view2.performLongClick();
+    assertSame(view2, target.last);
+
+    view3.performLongClick();
+    assertSame(view3, target.last);
+
+    view4.performLongClick();
+    assertSame(view4, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTestUtils.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTestUtils.java
new file mode 100644
index 00000000..47b203a0
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTestUtils.java
@@ -0,0 +1,35 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+
+final class ViewTestUtils {
+  static View treeWithIds(int... ids) {
+    Context context = InstrumentationRegistry.getContext();
+    FrameLayout group = new FrameLayout(context);
+
+    class SuperGrossView extends View {
+      SuperGrossView(Context context) {
+        super(context);
+      }
+
+      @Override public boolean post(Runnable action) {
+        // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
+        action.run();
+        return true;
+      }
+    }
+
+    for (int id : ids) {
+      View view = new SuperGrossView(context);
+      view.setId(id);
+      group.addView(view);
+    }
+    return group;
+  }
+
+  private ViewTestUtils() {
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/proguard.pro b/butterknife-integration-test/src/androidTest/proguard.pro
index f85ddc9e..4807b6d1 100644
--- a/butterknife-integration-test/src/androidTest/proguard.pro
+++ b/butterknife-integration-test/src/androidTest/proguard.pro
@@ -1,4 +1,5 @@
 -dontoptimize
 -dontobfuscate
 -dontshrink
+-dontnote **
 -dontwarn **
diff --git a/butterknife-integration-test/src/main/proguard.pro b/butterknife-integration-test/src/main/proguard.pro
index c3054308..526a581a 100644
--- a/butterknife-integration-test/src/main/proguard.pro
+++ b/butterknife-integration-test/src/main/proguard.pro
@@ -1,5 +1,7 @@
 -dontoptimize
 -dontobfuscate
+-dontnote **
+-dontwarn **
 
 # STUFF USED BY TESTS:
 
diff --git a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
index cded1015..fbb733db 100644
--- a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
@@ -10,6 +10,8 @@
 import android.graphics.BitmapFactory;
 import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
+import android.text.Editable;
+import android.text.TextWatcher;
 import android.util.Log;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
@@ -25,7 +27,6 @@
 import androidx.core.content.res.ResourcesCompat;
 import butterknife.internal.Constants;
 import butterknife.internal.Utils;
-import java.lang.annotation.Annotation;
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;
@@ -212,6 +213,9 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         unbinder = parseOnLongClick(target, method, source);
         if (unbinder != null) unbinders.add(unbinder);
 
+        unbinder = parseOnTextChanged(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
         unbinder = parseOnTouch(target, method, source);
         if (unbinder != null) unbinders.add(unbinder);
       }
@@ -236,15 +240,9 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     validateMember(field);
 
     int id = bindView.value();
-    boolean isRequired = isRequired(field);
     Class<?> viewClass = field.getType();
     String who = "field '" + field.getName() + "'";
-    Object view;
-    if (isRequired) {
-      view = Utils.findRequiredViewAsType(source, id, who, viewClass);
-    } else {
-      view = Utils.findOptionalViewAsType(source, id, who, viewClass);
-    }
+    Object view = Utils.findOptionalViewAsType(source, id, who, viewClass);
     trySet(field, target, view);
 
     return new FieldUnbinder(target, field);
@@ -276,16 +274,10 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     }
 
     int[] ids = bindViews.value();
-    boolean isRequired = isRequired(field);
     List<Object> views = new ArrayList<>(ids.length);
     String who = "field '" + field.getName() + "'";
     for (int id : ids) {
-      Object view;
-      if (isRequired) {
-        view = Utils.findRequiredViewAsType(source, id, who, viewClass);
-      } else {
-        view = Utils.findOptionalViewAsType(source, id, who, viewClass);
-      }
+      Object view = Utils.findOptionalViewAsType(source, id, who, viewClass);
       if (view != null) {
         views.add(view);
       }
@@ -629,7 +621,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
       //noinspection SimplifiableConditionalExpression
       return propagateReturn
           ? (boolean) value
-          : false;
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_EDITOR_ACTION);
@@ -698,7 +690,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
       //noinspection SimplifiableConditionalExpression
       return propagateReturn
           ? (boolean) value
-          : false;
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_ITEM_LONG_CLICK);
@@ -723,12 +715,63 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
       //noinspection SimplifiableConditionalExpression
       return propagateReturn
           ? (boolean) returnValue
-          : false;
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_LONG_CLICK);
   }
 
+  private static @Nullable Unbinder parseOnTextChanged(Object target, Method method, View source) {
+    OnTextChanged onTextChanged = method.getAnnotation(OnTextChanged.class);
+    if (onTextChanged == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+
+    List<TextView> views =
+        findViews(source, onTextChanged.value(), isRequired(method), method.getName(), View.class);
+
+    TextWatcher textWatcher;
+    switch (onTextChanged.callback()) {
+      case TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
+            tryInvoke(method, target, argumentTransformer.transform(s, start, before, count));
+          }
+        };
+        break;
+      }
+      case BEFORE_TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, BEFORE_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            tryInvoke(method, target, argumentTransformer.transform(s, start, count, after));
+          }
+        };
+        break;
+      }
+      case AFTER_TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, AFTER_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void afterTextChanged(Editable s) {
+            tryInvoke(method, target, argumentTransformer.transform(s));
+          }
+        };
+        break;
+      }
+      default:
+        throw new AssertionError();
+    }
+
+    ViewCollections.set(views, ADD_TEXT_WATCHER, textWatcher);
+    return new ListenerUnbinder<>(views, REMOVE_TEXT_WATCHER, textWatcher);
+  }
+
   private static @Nullable Unbinder parseOnTouch(final Object target, final Method method,
       View source) {
     OnTouch onTouch = method.getAnnotation(OnTouch.class);
@@ -748,7 +791,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
       //noinspection SimplifiableConditionalExpression
       return propagateReturn
           ? (boolean) returnValue
-          : false;
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_TOUCH);
@@ -809,15 +852,6 @@ private static boolean validateReturnType(Method method, Class<?> expected) {
     return true;
   }
 
-  private static boolean isRequired(Field field) {
-    for (Annotation annotation : field.getAnnotations()) {
-      if (annotation.annotationType().getSimpleName().equals("Nullable")) {
-        return false;
-      }
-    }
-    return true;
-  }
-
   private static boolean isRequired(Method method) {
     return method.getAnnotation(Optional.class) == null;
   }
@@ -962,6 +996,10 @@ private static Object tryInvoke(Method method, Object target, Object... argument
       (view, value, index) -> view.setOnLongClickListener(value);
   private static final Setter<View, View.OnTouchListener> ON_TOUCH =
       (view, value, index) -> view.setOnTouchListener(value);
+  private static final Setter<TextView, TextWatcher> ADD_TEXT_WATCHER =
+      (view, value, index) -> view.addTextChangedListener(value);
+  private static final Setter<TextView, TextWatcher> REMOVE_TEXT_WATCHER =
+      (view, value, index) -> view.removeTextChangedListener(value);
 
   private static final Class<?>[] ON_CHECKED_CHANGED_TYPES =
       { CompoundButton.class, boolean.class };
@@ -973,6 +1011,10 @@ private static Object tryInvoke(Method method, Object target, Object... argument
       { AdapterView.class, View.class, int.class, long.class };
   private static final Class<?>[] ON_ITEM_LONG_CLICK_TYPES = ON_ITEM_CLICK_TYPES;
   private static final Class<?>[] ON_LONG_CLICK_TYPES = ON_CLICK_TYPES;
+  private static final Class<?>[] ON_TEXT_CHANGED_TYPES =
+      { CharSequence.class, int.class, int.class, int.class };
+  private static final Class<?>[] BEFORE_TEXT_CHANGED_TYPES = ON_TEXT_CHANGED_TYPES;
+  private static final Class<?>[] AFTER_TEXT_CHANGED_TYPES = { Editable.class };
   private static final Class<?>[] ON_TOUCH_TYPES = { View.class, MotionEvent.class };
 
   private interface ArgumentTransformer {
diff --git a/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java b/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java
new file mode 100644
index 00000000..3b578dee
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java
@@ -0,0 +1,15 @@
+package butterknife;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+
+class EmptyTextWatcher implements TextWatcher {
+  @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+  }
+
+  @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
+  }
+
+  @Override public void afterTextChanged(Editable s) {
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
index 2ae07c21..063f294d 100644
--- a/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
+++ b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
@@ -3,16 +3,24 @@
 import android.view.View;
 import java.util.List;
 
-final class ListenerUnbinder<T extends View> implements Unbinder {
-  private final List<T> targets;
-  private final Setter<T, ?> setter;
+final class ListenerUnbinder<V extends View, L> implements Unbinder {
+  private final List<V> targets;
+  private final Setter<V, L> setter;
+  private final L listener;
 
-  ListenerUnbinder(List<T> targets, Setter<T, ?> setter) {
+  ListenerUnbinder(List<V> targets, Setter<V, L> setter) {
     this.targets = targets;
     this.setter = setter;
+    this.listener = null;
+  }
+
+  ListenerUnbinder(List<V> targets, Setter<V, L> setter, L listener) {
+    this.targets = targets;
+    this.setter = setter;
+    this.listener = listener;
   }
 
   @Override public void unbind() {
-    ViewCollections.set(targets, setter, null);
+    ViewCollections.set(targets, setter, listener);
   }
 }
diff --git a/butterknife-runtime/build.gradle b/butterknife-runtime/build.gradle
index d978bcee..02944b05 100644
--- a/butterknife-runtime/build.gradle
+++ b/butterknife-runtime/build.gradle
@@ -6,7 +6,7 @@ android {
   defaultConfig {
     minSdkVersion versions.minSdk
 
-    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
 
     javaCompileOptions {
       annotationProcessorOptions {
diff --git a/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java b/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
index 0b66e14b..7541a00c 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
@@ -63,4 +63,60 @@
         .and()
         .generatesSources(bindingSource);
   }
+
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnEditorAction;\n"
+        + "public class Test {\n"
+        + "  @OnEditorAction(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.KeyEvent;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((TextView) view1).setOnEditorActionListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
 }
diff --git a/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
index 2830fd80..20dc76eb 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
@@ -62,4 +62,59 @@
         .and()
         .generatesSources(bindingSource);
   }
+
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemLongClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemLongClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
 }
diff --git a/butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java
deleted file mode 100644
index 73c7874a..00000000
--- a/butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
-public class OnLongClickTest {
-  @Test public void onLongClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnLongClick;\n"
-        + "public class Test {\n"
-        + "  @OnLongClick(1) boolean doStuff() {\n"
-        + "    return true;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
-        + "      @Override\n"
-        + "      public boolean onLongClick(View p0) {\n"
-        + "        return target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnLongClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void failsIfMissingReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnLongClick;\n"
-        + "public class Test {\n"
-        + "  @OnLongClick(1)\n"
-        + "  public void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
index fba1909a..06e3701c 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
@@ -65,7 +65,64 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test {\n"
+        + "  @OnTouch(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.annotation.SuppressLint;\n"
+        + "import android.view.MotionEvent;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  @SuppressLint(\"ClickableViewAccessibility\")\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnTouchListener(new View.OnTouchListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onTouch(View p0, MotionEvent p1) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnTouchListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsMultipleListenersWithReturnValue() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
         + "import butterknife.OnTouch;\n"
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 68a41beb..4b045262 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -8,7 +8,7 @@ android {
 
     consumerProguardFiles 'proguard-rules.txt'
 
-    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
   }
 
   compileOptions {
diff --git a/checkstyle.xml b/checkstyle.xml
index cd3c43b2..bf3140b8 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -97,7 +97,9 @@
 
     <!-- Checks for blocks. You know, those {}'s         -->
     <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name="AvoidNestedBlocks"/>
+    <module name="AvoidNestedBlocks">
+        <property name="allowInSwitchCase" value="true"/>
+    </module>
     <!--<module name="EmptyBlock"/>-->
     <module name="LeftCurly"/>
     <module name="NeedBraces">
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 28861d27..94336fca 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 115e6ac0..290541c7 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/website/index.html b/website/index.html
index 6905ec97..17f8ee29 100644
--- a/website/index.html
+++ b/website/index.html
@@ -6,7 +6,7 @@
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <meta name="description" content="Field and method binding for Android views.">
-    <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
+    <link href="https://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
     <link href="static/prettify.css" rel="stylesheet">
@@ -227,7 +227,7 @@ <h3 id="license">License</h3>
         </div>
       </div>
     </div>
-    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
+    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
     <script src="static/jquery-maven-artifact.min.js"></script>
     <script src="static/prettify.js"></script>
     <script>
