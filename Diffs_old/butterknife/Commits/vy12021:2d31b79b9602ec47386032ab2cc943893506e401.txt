diff --git a/.travis.yml b/.travis.yml
index 03da3562..9b1079e5 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,23 +2,33 @@ language: android
 
 android:
   components:
+    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out.
     - tools
     - platform-tools
-    - build-tools-25.0.2
-    - android-25
-    - extra-android-m2repository
-    - sys-img-armeabi-v7a-android-18
 
 jdk:
   - oraclejdk8
 
+before_install:
+  # Install SDK license so Android Gradle plugin can install deps.
+  - mkdir "$ANDROID_HOME/licenses" || true
+  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
+  # Install the rest of tools (e.g., avdmanager)
+  - sdkmanager tools
+  # Install the system image
+  - sdkmanager "system-images;android-18;default;armeabi-v7a"
+  # Create and start emulator for the script. Meant to race the install task.
+  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a"
+  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &
+
+install: ./gradlew clean assemble assembleAndroidTest --stacktrace
+
 before_script:
-  # Create and start an emulator for instrumentation tests.
-  - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a
-  - emulator -avd test -no-audio -no-window &
   - android-wait-for-emulator
   - adb shell input keyevent 82
 
+script: ./gradlew check connectedCheck --stacktrace
+
 after_success:
   - .buildscript/deploy_snapshot.sh
 
@@ -38,6 +48,5 @@ sudo: false
 
 cache:
   directories:
-    - $HOME/.m2
     - $HOME/.gradle
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index b176a235..a61b410e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,35 @@
 Change Log
 ==========
 
+Version 8.8.1 *(2017-08-09)*
+----------------------------
+
+ * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`.
+
+
+Version 8.8.0 *(2017-08-04)*
+----------------------------
+
+ * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When
+   specified as `false`, checks for required views being non-null are elided and casts are no longer guarded
+   with user-friendly error messages. This reduces the amount of generated code for release builds at the
+   expense of less friendly exceptions when something breaks.
+ * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same
+   functionality.
+ * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context` (not a `Resources`) to
+   `ResourceCompat`.
+
+
+Version 8.7.0 *(2017-07-07)*
+----------------------------
+
+ * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries
+   26.0.0-beta1 or newer.
+ * New: `@BindAnim` annotation binds `Animation` instances.
+ * New: Generate `R2` constants for animation, layout, menu, plurals, styles, and styleables.
+ * Fix: Properly catch and re-throw type cast exceptions when method binding arguments do not match.
+
+
 Version 8.6.0 *(2017-05-16)*
 ----------------------------
 
diff --git a/README.md b/README.md
index b0234c8c..5411dbda 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  compile 'com.jakewharton:butterknife:8.6.0'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
+  compile 'com.jakewharton:butterknife:8.8.1'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
 }
 ```
 
@@ -63,7 +63,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.6.0'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
   }
 }
 ```
diff --git a/RELEASING.md b/RELEASING.md
index 87290eb0..9f872c7b 100644
--- a/RELEASING.md
+++ b/RELEASING.md
@@ -1,7 +1,7 @@
 Releasing
 ========
 
- 1. Change the version in `gradle.properties` to a non-SNAPSHOT verson.
+ 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.
  2. Update the `CHANGELOG.md` for the impending release.
  3. Update the `README.md` with the new version.
  4. `git commit -am "Prepare for release X.Y.Z."` (where X.Y.Z is the new version)
diff --git a/build.gradle b/build.gradle
index 36312ce7..4d95a3b5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,15 +1,17 @@
+apply plugin: 'com.github.ben-manes.versions'
+
 buildscript {
   ext.versions = [
-      'minSdk': 9,
-      'compileSdk': 25,
-      'buildTools': '25.0.2',
+      'minSdk': 14,
+      'compileSdk': 26,
+      'buildTools': '26.0.1',
 
-      'supportLibrary': '25.1.0',
-      'androidPlugin': '2.3.0',
-      'androidTools': '25.2.0',
-      'kotlin': '1.1.2-3',
+      'supportLibrary': '26.0.1',
+      'androidPlugin': '3.0.0-beta2',
+      'androidTools': '26.0.0-beta2',
+      'kotlin': '1.1.3-2',
 
-      'release': '8.4.0',
+      'release': '8.8.1',
   ]
 
   ext.deps = [
@@ -21,7 +23,7 @@ buildscript {
           'compat': "com.android.support:support-compat:${versions.supportLibrary}",
           'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
           'test': [
-              'runner': 'com.android.support.test:runner:0.5',
+              'runner': 'com.android.support.test:runner:1.0.0',
           ],
       ],
       'lint': [
@@ -30,16 +32,15 @@ buildscript {
           'checks': "com.android.tools.lint:lint-checks:${versions.androidTools}",
           'tests': "com.android.tools.lint:lint-tests:${versions.androidTools}",
       ],
-      javapoet: 'com.squareup:javapoet:1.8.0',
-      javaparser: 'com.github.javaparser:javaparser-core:2.4.0',
+      javapoet: 'com.squareup:javapoet:1.9.0',
+      javaparser: 'com.github.javaparser:javaparser-core:3.3.0',
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.28',
-      robolectric: 'org.robolectric:robolectric:3.1.2',
-      openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',
-      compiletesting: 'com.google.testing.compile:compile-testing:0.9',
+      truth: 'com.google.truth:truth:0.34',
+      robolectric: 'org.robolectric:robolectric:3.4.2',
+      compiletesting: 'com.google.testing.compile:compile-testing:0.11',
       'auto': [
-          'service': 'com.google.auto.service:auto-service:1.0-rc2',
-          'common': 'com.google.auto:auto-common:0.6',
+          'service': 'com.google.auto.service:auto-service:1.0-rc3',
+          'common': 'com.google.auto:auto-common:0.8',
       ],
       'release': [
           'runtime': "com.jakewharton:butterknife:${versions.release}",
@@ -49,6 +50,21 @@ buildscript {
           'stdLibJre8': "org.jetbrains.kotlin:kotlin-stdlib-jre8:${versions.kotlin}",
       ]
   ]
+
+  repositories {
+    mavenCentral()
+    google()
+    maven {
+      url "https://plugins.gradle.org/m2/"
+    }
+  }
+
+  dependencies {
+    classpath deps.android.gradlePlugin
+    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
+    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
+  }
 }
 
 subprojects { project ->
@@ -57,6 +73,7 @@ subprojects { project ->
 
   repositories {
     mavenCentral()
+    google()
     maven {
       url "https://plugins.gradle.org/m2/"
     }
@@ -81,18 +98,4 @@ subprojects { project ->
       }
     }
   }
-
-  buildscript {
-    repositories {
-      mavenCentral()
-      maven {
-        url "https://plugins.gradle.org/m2/"
-      }
-    }
-    dependencies {
-      classpath deps.android.gradlePlugin
-      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
-      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2'
-    }
-  }
 }
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index 05268ad8..f96179a7 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -1,14 +1,6 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
-def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
-for (File file : sdkHandler.sdkLoader.repositories) {
-  repositories.maven {
-    url = file.toURI()
-  }
-}
-
 sourceCompatibility = JavaVersion.VERSION_1_7
 targetCompatibility = JavaVersion.VERSION_1_7
 
@@ -19,7 +11,7 @@ checkstyle {
 
 dependencies {
   compileOnly deps.android.runtime
-  compile deps.support.annotations
+  api deps.support.annotations
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-annotations/src/main/java/butterknife/BindAnim.java b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
new file mode 100644
index 00000000..62c30778
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import android.support.annotation.AnimRes;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified animation resource ID.
+ * <pre><code>
+ * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindAnim {
+  /** Animation resource ID to which the field will be bound. */
+  @AnimRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFont.java b/butterknife-annotations/src/main/java/butterknife/BindFont.java
new file mode 100644
index 00000000..5e6e7666
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java
@@ -0,0 +1,35 @@
+package butterknife;
+
+import android.graphics.Typeface;
+import android.support.annotation.IntDef;
+import android.support.annotation.RestrictTo;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified font resource ID.
+ * <pre><code>
+ * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindFont {
+  /** Font resource ID to which the field will be bound. */
+  /* TODO support lib 26.0.0: @FontRes */ int value();
+
+  @TypefaceStyle int style() default Typeface.NORMAL;
+
+  @IntDef({
+      Typeface.NORMAL,
+      Typeface.BOLD,
+      Typeface.ITALIC,
+      Typeface.BOLD_ITALIC
+  })
+  @RestrictTo(LIBRARY)
+  @interface TypefaceStyle {
+  }
+}
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index f6693f89..46d32b84 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -1,26 +1,18 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
 sourceCompatibility = JavaVersion.VERSION_1_7
 targetCompatibility = JavaVersion.VERSION_1_7
 
-def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
-def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
-for (File file : sdkHandler.sdkLoader.repositories) {
-  repositories.maven {
-    url = file.toURI()
-  }
-}
-
 dependencies {
-  compile project(':butterknife-annotations')
-  compile deps.auto.common
-  compile deps.javapoet
+  implementation project(':butterknife-annotations')
+  implementation deps.auto.common
+  api deps.javapoet
   compileOnly deps.auto.service
   compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
 
-  testCompile deps.junit
-  testCompile deps.truth
+  testImplementation deps.junit
+  testImplementation deps.truth
 }
 
 checkstyle {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 9f262dc2..20463d73 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -57,6 +57,8 @@
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
   private static final ClassName VIEW_CONTROLLER = ClassName.get("butterknife", "ViewController");
+  static final ClassName ANIMATION_UTILS =
+          ClassName.get("android.view.animation", "AnimationUtils");
 
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
@@ -85,13 +87,13 @@ private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean
     this.parentBinding = parentBinding;
   }
 
-  JavaFile brewJava(int sdk) {
-    return JavaFile.builder(bindingClassName.packageName(), createType(sdk))
+  JavaFile brewJava(int sdk, boolean debuggable) {
+    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable))
         .addFileComment("Generated code from Butter Knife. Do not modify!")
         .build();
   }
 
-  private TypeSpec createType(int sdk) {
+  private TypeSpec createType(int sdk, boolean debuggable) {
     TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())
         .addModifiers(PUBLIC);
     if (isFinal) {
@@ -119,7 +121,7 @@ private TypeSpec createType(int sdk) {
       // Add a delegating constructor with a target type + view signature for reflective use.
       result.addMethod(createBindingViewDelegateConstructor());
     }
-    result.addMethod(createBindingConstructor(sdk));
+    result.addMethod(createBindingConstructor(sdk, debuggable));
 
     if (hasViewBindings() || parentBinding == null) {
       result.addMethod(createBindingUnbindMethod(result));
@@ -181,7 +183,7 @@ private MethodSpec createBindingConstructorForDialog() {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructor(int sdk) {
+  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {
     MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
         .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC);
@@ -232,10 +234,10 @@ private MethodSpec createBindingConstructor(int sdk) {
         constructor.addStatement("$T view", VIEW);
       }
       for (ViewBinding binding : viewBindings) {
-        addViewBinding(constructor, binding);
+        addViewBinding(constructor, binding, debuggable);
       }
       for (FieldCollectionViewBinding binding : collectionBindings) {
-        constructor.addStatement("$L", binding.render());
+        constructor.addStatement("$L", binding.render(debuggable));
       }
 
       if (!resourceBindings.isEmpty()) {
@@ -353,7 +355,7 @@ private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemo
         : listenerClass.setter();
   }
 
-  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {
+  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
     if (binding.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
       FieldViewBinding fieldBinding = binding.getFieldBinding();
@@ -361,7 +363,10 @@ private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {
           .add("target.$L = ", fieldBinding.getName());
 
       boolean requiresCast = requiresCast(fieldBinding.getType());
-      if (!requiresCast && !fieldBinding.isRequired()) {
+      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {
+        if (requiresCast) {
+          builder.add("($T) ", fieldBinding.getType());
+        }
         builder.add("source.findViewById($L)", binding.getId().code);
       } else {
         builder.add("$T.find", UTILS);
@@ -383,31 +388,37 @@ private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {
     }
 
     List<MemberViewBinding> requiredBindings = binding.getRequiredBindings();
-    if (requiredBindings.isEmpty()) {
+    if (!debuggable || requiredBindings.isEmpty()) {
       result.addStatement("view = source.findViewById($L)", binding.getId().code);
     } else if (!binding.isBoundToRoot()) {
       result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,
           binding.getId().code, asHumanDescription(requiredBindings));
     }
 
-    addFieldBinding(result, binding);
-    addMethodBindings(result, binding);
+    addFieldBinding(result, binding, debuggable);
+    addMethodBindings(result, binding, debuggable);
   }
 
-  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding) {
+  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
     FieldViewBinding fieldBinding = binding.getFieldBinding();
     if (fieldBinding != null) {
       if (requiresCast(fieldBinding.getType())) {
-        result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",
-            fieldBinding.getName(), UTILS, binding.getId().code,
-            asHumanDescription(singletonList(fieldBinding)), fieldBinding.getRawType());
+        if (debuggable) {
+          result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",
+              fieldBinding.getName(), UTILS, binding.getId().code,
+              asHumanDescription(singletonList(fieldBinding)), fieldBinding.getRawType());
+        } else {
+          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),
+              fieldBinding.getType());
+        }
       } else {
         result.addStatement("target.$L = view", fieldBinding.getName());
       }
     }
   }
 
-  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
+  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
+      boolean debuggable) {
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         binding.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
@@ -496,8 +507,13 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
+                if (debuggable) {
+                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,
+                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,
+                      parameter.getType());
+                } else {
+                  builder.add("($T) p$L", parameter.getType(), listenerPosition);
+                }
               } else {
                 builder.add("p$L", listenerPosition);
               }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 9ebae3f3..47beef65 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,7 +1,36 @@
 package butterknife.compiler;
 
+import butterknife.BindAnim;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindFloat;
+import butterknife.BindFont;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.compiler.FieldTypefaceBinding.TypefaceStyles;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
+import com.google.common.collect.ImmutableSet;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeName;
@@ -21,7 +50,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
-import java.util.Collections;
 import java.util.Deque;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -90,14 +118,17 @@
 public final class ButterKnifeProcessor extends AbstractProcessor {
   // TODO remove when http://b.android.com/187527 is released.
   private static final String OPTION_SDK_INT = "butterknife.minSdk";
+  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";
   static final Id NO_ID = new Id(-1);
   static final String VIEW_TYPE = "android.view.View";
   static final String ACTIVITY_TYPE = "android.app.Activity";
   static final String DIALOG_TYPE = "android.app.Dialog";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
   private static final String BITMAP_TYPE = "android.graphics.Bitmap";
+  private static final String ANIMATION_TYPE = "android.view.animation.Animation";
   private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
   private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
+  private static final String TYPEFACE_TYPE = "android.graphics.Typeface";
   private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
   private static final String STRING_TYPE = "java.lang.String";
   private static final String LIST_TYPE = List.class.getCanonicalName();
@@ -123,7 +154,9 @@
   private Types typeUtils;
   private Filer filer;
   private Trees trees;
+
   private int sdk = 1;
+  private boolean debuggable = true;
 
   private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();
 
@@ -142,6 +175,8 @@
       }
     }
 
+    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));
+
     elementUtils = env.getElementUtils();
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
@@ -152,7 +187,7 @@
   }
 
   @Override public Set<String> getSupportedOptions() {
-    return Collections.singleton(OPTION_SDK_INT);
+    return ImmutableSet.of(OPTION_SDK_INT, OPTION_DEBUGGABLE);
   }
 
   @Override public Set<String> getSupportedAnnotationTypes() {
@@ -166,6 +201,7 @@
   private Set<Class<? extends Annotation>> getSupportedAnnotations() {
     Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();
 
+    annotations.add(BindAnim.class);
     annotations.add(BindArray.class);
     annotations.add(BindBitmap.class);
     annotations.add(BindBool.class);
@@ -173,6 +209,7 @@
     annotations.add(BindDimen.class);
     annotations.add(BindDrawable.class);
     annotations.add(BindFloat.class);
+    annotations.add(BindFont.class);
     annotations.add(BindInt.class);
     annotations.add(BindString.class);
     annotations.add(BindView.class);
@@ -190,7 +227,7 @@
       TypeElement typeElement = entry.getKey();
       BindingSet binding = entry.getValue();
 
-      JavaFile javaFile = binding.brewJava(sdk);
+      JavaFile javaFile = binding.brewJava(sdk, debuggable);
       try {
         javaFile.writeTo(filer);
       } catch (IOException e) {
@@ -207,6 +244,16 @@
 
     scanForRClasses(env);
 
+    // Process each @BindAnim element.
+    for (Element element : env.getElementsAnnotatedWith(BindAnim.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceAnimation(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindAnim.class, e);
+      }
+    }
+
     // Process each @BindArray element.
     for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
@@ -277,6 +324,16 @@
       }
     }
 
+    // Process each @BindFont element.
+    for (Element element : env.getElementsAnnotatedWith(BindFont.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceFont(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindFont.class, e);
+      }
+    }
+
     // Process each @BindInt element.
     for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
@@ -637,6 +694,37 @@ private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder
     erasedTargetNames.add(enclosingElement);
   }
 
+  private void parseResourceAnimation(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Animation.
+    if (!ANIMATION_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Animation'. (%s.%s)",
+          BindAnim.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindAnim.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindAnim.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindAnim.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldAnimationBinding(getId(qualifiedId), name));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
   private void parseResourceBool(Element element,
       Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
@@ -839,6 +927,46 @@ private void parseResourceFloat(Element element,
     erasedTargetNames.add(enclosingElement);
   }
 
+  private void parseResourceFont(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is a Typeface.
+    if (!TYPEFACE_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Typeface'. (%s.%s)",
+          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindFont.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindFont.class, element);
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    BindFont bindFont = element.getAnnotation(BindFont.class);
+
+    int styleValue = bindFont.style();
+    TypefaceStyles style = TypefaceStyles.fromValue(styleValue);
+    if (style == null) {
+      error(element, "@%s style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (%s.%s)",
+          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(), name);
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    QualifiedId qualifiedId = elementToQualifiedId(element, bindFont.value());
+    builder.addResource(new FieldTypefaceBinding(getId(qualifiedId), name, style));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
   private void parseResourceInt(Element element,
       Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java
new file mode 100644
index 00000000..739261af
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java
@@ -0,0 +1,28 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+
+import static butterknife.compiler.BindingSet.ANIMATION_UTILS;
+
+final class FieldAnimationBinding implements ResourceBinding {
+  private final Id id;
+  private final String name;
+
+  FieldAnimationBinding(Id id, String name) {
+    this.id = id;
+    this.name = name;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return false;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    return CodeBlock.of("target.$L = $T.loadAnimation(context, $L)", name, ANIMATION_UTILS,
+            id.code);
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
index f96bb6b8..8da58ac3 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -35,7 +35,7 @@
     this.required = required;
   }
 
-  CodeBlock render() {
+  CodeBlock render(boolean debuggable) {
     CodeBlock.Builder builder = CodeBlock.builder()
         .add("target.$L = $T.$L(", name, UTILS, kind.factoryName);
     for (int i = 0; i < ids.size(); i++) {
@@ -44,16 +44,22 @@ CodeBlock render() {
       }
       builder.add("\n");
 
+      Id id = ids.get(i);
       boolean requiresCast = requiresCast(type);
-      if (!requiresCast && !required) {
-        builder.add("source.findViewById($L)", ids.get(i).code);
+      if (!debuggable) {
+        if (requiresCast) {
+          builder.add("($T) ", type);
+        }
+        builder.add("source.findViewById($L)", id.code);
+      } else if (!requiresCast && !required) {
+        builder.add("source.findViewById($L)", id.code);
       } else {
         builder.add("$T.find", UTILS);
         builder.add(required ? "RequiredView" : "OptionalView");
         if (requiresCast) {
           builder.add("AsType");
         }
-        builder.add("(source, $L, \"field '$L'\"", ids.get(i).code, name);
+        builder.add("(source, $L, \"field '$L'\"", id.code, name);
         if (requiresCast) {
           TypeName rawType = type;
           if (rawType instanceof ParameterizedTypeName) {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
new file mode 100644
index 00000000..5707f2bd
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -0,0 +1,62 @@
+package butterknife.compiler;
+
+import android.support.annotation.Nullable;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+
+final class FieldTypefaceBinding implements ResourceBinding {
+  private static final ClassName RESOURCES_COMPAT =
+      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
+  private static final ClassName TYPEFACE = ClassName.get("android.graphics", "Typeface");
+
+  /** Keep in sync with {@link android.graphics.Typeface} constants. */
+  enum TypefaceStyles {
+    NORMAL(0),
+    BOLD(1),
+    ITALIC(2),
+    BOLD_ITALIC(3);
+
+    final int value;
+
+    TypefaceStyles(int value) {
+      this.value = value;
+    }
+
+    @Nullable static TypefaceStyles fromValue(int value) {
+      for (TypefaceStyles style : values()) {
+        if (style.value == value) {
+          return style;
+        }
+      }
+      return null;
+    }
+  }
+
+  private final Id id;
+  private final String name;
+  private final TypefaceStyles style;
+
+  FieldTypefaceBinding(Id id, String name, TypefaceStyles style) {
+    this.id = id;
+    this.name = name;
+    this.style = style;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return sdk >= 26;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    CodeBlock typeface = sdk >= 26
+        ? CodeBlock.of("res.getFont($L)", id.code)
+        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);
+    if (style != TypefaceStyles.NORMAL) {
+      typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
+    }
+    return CodeBlock.of("target.$L = $L", name, typeface);
+  }
+}
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
index b7a66072..74b81994 100644
--- a/butterknife-gradle-plugin/build.gradle
+++ b/butterknife-gradle-plugin/build.gradle
@@ -1,29 +1,21 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'kotlin'
 
-def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
-def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
-for (File file : sdkHandler.sdkLoader.repositories) {
-  repositories.maven {
-    url = file.toURI()
-  }
-}
-
 sourceCompatibility = JavaVersion.VERSION_1_8
 targetCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
   compileOnly gradleApi()
 
-  compile deps.android.gradlePlugin
-  compile deps.javaparser
-  compile deps.javapoet
-  compile deps.kotlin.stdLibJre8
+  implementation deps.android.gradlePlugin
+  implementation deps.javaparser
+  implementation deps.javapoet
+  implementation deps.kotlin.stdLibJre8
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.support.annotations
-  testCompile deps.compiletesting
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.support.annotations
+  testImplementation deps.compiletesting
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index da715e18..0f320906 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -2,6 +2,8 @@ package butterknife.plugin
 
 import com.android.build.gradle.AppExtension
 import com.android.build.gradle.AppPlugin
+import com.android.build.gradle.FeatureExtension
+import com.android.build.gradle.FeaturePlugin
 import com.android.build.gradle.LibraryExtension
 import com.android.build.gradle.LibraryPlugin
 import com.android.build.gradle.api.BaseVariant
@@ -10,29 +12,61 @@ import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.plugins.ExtensionContainer
 import java.io.File
+import java.util.concurrent.atomic.AtomicBoolean
 import kotlin.reflect.KClass
 
 class ButterKnifePlugin : Plugin<Project> {
   override fun apply(project: Project) {
     project.plugins.all {
       when (it) {
-        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants)
-        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants)
+        is FeaturePlugin -> {
+          project.extensions[FeatureExtension::class].run {
+            configureR2Generation(project, featureVariants)
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is LibraryPlugin -> {
+          project.extensions[LibraryExtension::class].run {
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is AppPlugin -> {
+          project.extensions[AppExtension::class].run {
+            configureR2Generation(project, applicationVariants)
+          }
+        }
       }
     }
   }
 
-  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {
+  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
-      variant.outputs.forEach { output ->
+      val outputDir = project.buildDir.resolve(
+          "generated/source/r2/${variant.dirName}")
+
+      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
+      task.outputs.dir(outputDir)
+      variant.registerJavaGeneratingTask(task, outputDir)
+
+      val once = AtomicBoolean()
+      variant.outputs.all { output ->
         val processResources = output.processResources
-        // TODO proper task registered as source-generating?
-        processResources.doLast {
-          val pathToR = processResources.packageForR.replace('.', File.separatorChar)
+        task.dependsOn(processResources)
+
+        // Though there might be multiple outputs, their R files are all the same. Thus, we only
+        // need to configure the task once with the R.java input and action.
+        if (once.compareAndSet(false, true)) {
+          val rPackage = processResources.packageForR
+          val pathToR = rPackage.replace('.', File.separatorChar)
           val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
 
-          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,
-              processResources.packageForR, "R2")
+          task.apply {
+            inputs.file(rFile)
+
+            doLast {
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
+            }
+          }
         }
       }
     }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
index 931490d3..672da6dc 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -4,9 +4,12 @@
 import com.github.javaparser.ast.CompilationUnit;
 import com.github.javaparser.ast.Node;
 import com.github.javaparser.ast.body.BodyDeclaration;
+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
 import com.github.javaparser.ast.body.FieldDeclaration;
 import com.github.javaparser.ast.body.TypeDeclaration;
 import com.github.javaparser.ast.body.VariableDeclarator;
+import com.github.javaparser.ast.type.PrimitiveType;
+import com.github.javaparser.ast.type.Type;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.JavaFile;
@@ -26,7 +29,8 @@
 public final class FinalRClassBuilder {
   private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
   private static final String[] SUPPORTED_TYPES = {
-      "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
+      "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
+      "string", "style", "styleable"
   };
 
   private FinalRClassBuilder() { }
@@ -39,9 +43,9 @@ public static void brewJava(File rFile, File outputDir, String packageName, Stri
     TypeSpec.Builder result =
         TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
 
-    for (Node node : resourceClass.getChildrenNodes()) {
-      if (node instanceof TypeDeclaration) {
-        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (TypeDeclaration) node);
+    for (Node node : resourceClass.getChildNodes()) {
+      if (node instanceof ClassOrInterfaceDeclaration) {
+        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);
       }
     }
 
@@ -53,28 +57,39 @@ public static void brewJava(File rFile, File outputDir, String packageName, Stri
   }
 
   private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
-      TypeDeclaration node) {
-    if (!supportedTypes.contains(node.getName())) {
+      ClassOrInterfaceDeclaration node) {
+    if (!supportedTypes.contains(node.getNameAsString())) {
       return;
     }
 
-    String type = node.getName();
+    String type = node.getNameAsString();
     TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
 
     for (BodyDeclaration field : node.getMembers()) {
       if (field instanceof FieldDeclaration) {
-        addResourceField(resourceType, ((FieldDeclaration) field).getVariables().get(0),
-            getSupportAnnotationClass(type));
+        FieldDeclaration declaration = (FieldDeclaration) field;
+        // Check that the field is an Int because styleable also contains Int arrays which can't be
+        // used in annotations.
+        if (isInt(declaration)) {
+          addResourceField(resourceType, declaration.getVariables().get(0),
+                  getSupportAnnotationClass(type));
+        }
       }
     }
 
     result.addType(resourceType.build());
   }
 
+  private static boolean isInt(FieldDeclaration field) {
+    Type type = field.getCommonType();
+    return type instanceof PrimitiveType
+        && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
+  }
+
   private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
       ClassName annotation) {
-    String fieldName = variable.getId().getName();
-    String fieldValue = variable.getInit().toString();
+    String fieldName = variable.getNameAsString();
+    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);
     FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
         .addModifiers(PUBLIC, STATIC, FINAL)
         .initializer(fieldValue);
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
index 21591802..f02e0d09 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
@@ -1,43 +1,68 @@
 package com.example.butterknife;
 
 public final class R {
-  public static final class anim {
+  public static final class unsupported {
     public static int res = 0x7f040000;
   }
 
-  public static final class array {
+  public static final class anim {
     public static int res = 0x7f040001;
   }
 
-  public static final class attr {
+  public static final class array {
     public static int res = 0x7f040002;
   }
 
-  public static final class bool {
+  public static final class attr {
     public static int res = 0x7f040003;
   }
 
-  public static final class color {
+  public static final class bool {
     public static int res = 0x7f040004;
   }
 
-  public static final class dimen {
+  public static final class color {
     public static int res = 0x7f040005;
   }
 
-  public static final class drawable {
+  public static final class dimen {
     public static int res = 0x7f040006;
   }
 
-  public static final class id {
+  public static final class drawable {
     public static int res = 0x7f040007;
   }
 
-  public static final class integer {
+  public static final class id {
     public static int res = 0x7f040008;
   }
 
-  public static final class string {
+  public static final class integer {
     public static int res = 0x7f040009;
   }
+
+  public static final class layout {
+    public static int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    public static int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    public static int res = 0x7f040012;
+  }
+
+  public static final class string {
+    public static int res = 0x7f040013;
+  }
+
+  public static final class style {
+    public static int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    public static int[] resArray = { 0x7f040003 };
+    public static int res = 0x7f040015;
+  }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
index d4490bb5..4b44bab4 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -1,6 +1,7 @@
 // Generated code from Butter Knife gradle plugin. Do not modify!
 package com.butterknife.example;
 
+import android.support.annotation.AnimRes;
 import android.support.annotation.ArrayRes;
 import android.support.annotation.AttrRes;
 import android.support.annotation.BoolRes;
@@ -9,51 +10,86 @@
 import android.support.annotation.DrawableRes;
 import android.support.annotation.IdRes;
 import android.support.annotation.IntegerRes;
+import android.support.annotation.LayoutRes;
+import android.support.annotation.MenuRes;
+import android.support.annotation.PluralsRes;
 import android.support.annotation.StringRes;
+import android.support.annotation.StyleRes;
+import android.support.annotation.StyleableRes;
 
 public final class R2 {
+  public static final class anim {
+    @AnimRes
+    public static final int res = 0x7f040001;
+  }
+
   public static final class array {
     @ArrayRes
-    public static final int res = 0x7f040001;
+    public static final int res = 0x7f040002;
   }
 
   public static final class attr {
     @AttrRes
-    public static final int res = 0x7f040002;
+    public static final int res = 0x7f040003;
   }
 
   public static final class bool {
     @BoolRes
-    public static final int res = 0x7f040003;
+    public static final int res = 0x7f040004;
   }
 
   public static final class color {
     @ColorRes
-    public static final int res = 0x7f040004;
+    public static final int res = 0x7f040005;
   }
 
   public static final class dimen {
     @DimenRes
-    public static final int res = 0x7f040005;
+    public static final int res = 0x7f040006;
   }
 
   public static final class drawable {
     @DrawableRes
-    public static final int res = 0x7f040006;
+    public static final int res = 0x7f040007;
   }
 
   public static final class id {
     @IdRes
-    public static final int res = 0x7f040007;
+    public static final int res = 0x7f040008;
   }
 
   public static final class integer {
     @IntegerRes
-    public static final int res = 0x7f040008;
+    public static final int res = 0x7f040009;
+  }
+
+  public static final class layout {
+    @LayoutRes
+    public static final int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    @MenuRes
+    public static final int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    @PluralsRes
+    public static final int res = 0x7f040012;
   }
 
   public static final class string {
     @StringRes
-    public static final int res = 0x7f040009;
+    public static final int res = 0x7f040013;
+  }
+
+  public static final class style {
+    @StyleRes
+    public static final int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    @StyleableRes
+    public static final int res = 0x7f040015;
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
index fd2c3dd3..c1391905 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
@@ -1,39 +1,63 @@
 package com.example.butterknife;
 
 public final class R {
-  public static final class array {
+  public static final class anim {
     public static final int res = 0x7f040001;
   }
 
-  public static final class attr {
+  public static final class array {
     public static final int res = 0x7f040002;
   }
 
-  public static final class bool {
+  public static final class attr {
     public static final int res = 0x7f040003;
   }
 
-  public static final class color {
+  public static final class bool {
     public static final int res = 0x7f040004;
   }
 
-  public static final class dimen {
+  public static final class color {
     public static final int res = 0x7f040005;
   }
 
-  public static final class drawable {
+  public static final class dimen {
     public static final int res = 0x7f040006;
   }
 
-  public static final class id {
+  public static final class drawable {
     public static final int res = 0x7f040007;
   }
 
-  public static final class integer {
+  public static final class id {
     public static final int res = 0x7f040008;
   }
 
-  public static final class string {
+  public static final class integer {
     public static final int res = 0x7f040009;
   }
+
+  public static final class layout {
+    public static final int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    public static final int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    public static final int res = 0x7f040012;
+  }
+
+  public static final class string {
+    public static final int res = 0x7f040013;
+  }
+
+  public static final class style {
+    public static final int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    public static final int res = 0x7f040015;
+  }
 }
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index 74ebc2ef..245a4f57 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -24,6 +24,8 @@ android {
     warningsAsErrors true
     showAll true
     explainIssues true
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
   }
 
   buildTypes {
@@ -32,14 +34,19 @@ android {
       proguardFile getDefaultProguardFile('proguard-android.txt')
     }
   }
+
+  testOptions {
+    unitTests {
+      includeAndroidResources = true
+    }
+  }
 }
 
 dependencies {
-  compile project(':butterknife')
+  implementation project(':butterknife')
   annotationProcessor project(':butterknife-compiler')
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.robolectric
-  testCompile deps.openglApi
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.robolectric
 }
diff --git a/butterknife-lint/build.gradle b/butterknife-lint/build.gradle
index 183534bb..8a4b91ff 100644
--- a/butterknife-lint/build.gradle
+++ b/butterknife-lint/build.gradle
@@ -1,17 +1,17 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
 sourceCompatibility = JavaVersion.VERSION_1_8
 targetCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
-  compile deps.lint.api
-  compile deps.lint.checks
+  implementation deps.lint.api
+  implementation deps.lint.checks
 
-  testCompile deps.junit
-  testCompile deps.lint.core
-  testCompile deps.lint.tests
-  testCompile(deps.truth) {
+  testImplementation deps.junit
+  testImplementation deps.lint.core
+  testImplementation deps.lint.tests
+  testImplementation(deps.truth) {
     exclude group: 'com.google.guava', module: 'guava'
   }
 }
diff --git a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
index e495c6bf..08cdfda5 100644
--- a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
+++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
@@ -1,5 +1,6 @@
 package butterknife.lint;
 
+import com.android.tools.lint.client.api.UElementHandler;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
@@ -9,22 +10,22 @@
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.google.common.collect.ImmutableSet;
-import com.intellij.psi.JavaElementVisitor;
-import com.intellij.psi.JavaRecursiveElementVisitor;
-import com.intellij.psi.PsiAnnotation;
-import com.intellij.psi.PsiClass;
-import com.intellij.psi.PsiElement;
-import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiReferenceExpression;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import org.jetbrains.uast.UAnnotation;
+import org.jetbrains.uast.UClass;
+import org.jetbrains.uast.UElement;
+import org.jetbrains.uast.UExpression;
+import org.jetbrains.uast.UFile;
+import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.USimpleNameReferenceExpression;
+import org.jetbrains.uast.visitor.AbstractUastVisitor;
 
 /**
  * Custom lint rule to make sure that generated R2 is not referenced outside annotations.
  */
-public class InvalidR2UsageDetector extends Detector implements Detector.JavaPsiScanner {
+public class InvalidR2UsageDetector extends Detector implements Detector.UastScanner {
   private static final String LINT_ERROR_BODY = "R2 should only be used inside annotations";
   private static final String LINT_ERROR_TITLE = "Invalid usage of R2";
   private static final String ISSUE_ID = "InvalidR2Usage";
@@ -38,39 +39,48 @@
 
   private static final String R2 = "R2";
 
-  @Override public List<Class<? extends PsiElement>> getApplicablePsiTypes() {
-    return Collections.<Class<? extends PsiElement>>singletonList(PsiClass.class);
+  @Override public List<Class<? extends UElement>> getApplicableUastTypes() {
+    return Collections.singletonList(UClass.class);
   }
 
-  @Override public JavaElementVisitor createPsiVisitor(final JavaContext context) {
-    return new JavaElementVisitor() {
-      @Override public void visitClass(PsiClass node) {
+  @Override public UElementHandler createUastHandler(final JavaContext context) {
+    return new UElementHandler() {
+      @Override public void visitClass(UClass node) {
         node.accept(new R2UsageVisitor(context));
       }
     };
   }
 
-  private static class R2UsageVisitor extends JavaRecursiveElementVisitor {
+  private static class R2UsageVisitor extends AbstractUastVisitor {
     private final JavaContext context;
 
     R2UsageVisitor(JavaContext context) {
       this.context = context;
     }
 
-    @Override public void visitAnnotation(PsiAnnotation annotation) {
+    @Override public boolean visitAnnotation(UAnnotation annotation) {
       // skip annotations
+      return true;
+    }
+
+    @Override public boolean visitQualifiedReferenceExpression(UQualifiedReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitQualifiedReferenceExpression(node);
     }
 
-    @Override public void visitReferenceExpression(PsiReferenceExpression expression) {
-      detectR2(context, expression);
-      super.visitReferenceExpression(expression);
+    @Override
+    public boolean visitSimpleNameReferenceExpression(USimpleNameReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitSimpleNameReferenceExpression(node);
     }
 
-    private static void detectR2(JavaContext context, PsiElement node) {
-      PsiClass[] classes = context.getJavaFile().getClasses();
-      if (classes.length > 0 && classes[0].getName() != null) {
-        String qualifiedName = classes[0].getName();
-        if (qualifiedName.contains("_ViewBinder") || qualifiedName.contains("_ViewBinding")
+    private static void detectR2(JavaContext context, UElement node) {
+      UFile sourceFile = context.getUastFile();
+      List<UClass> classes = sourceFile.getClasses();
+      if (!classes.isEmpty() && classes.get(0).getName() != null) {
+        String qualifiedName = classes.get(0).getName();
+        if (qualifiedName.contains("_ViewBinder")
+            || qualifiedName.contains("_ViewBinding")
             || qualifiedName.equals(R2)) {
           // skip generated files and R2
           return;
@@ -82,15 +92,16 @@ private static void detectR2(JavaContext context, PsiElement node) {
       }
     }
 
-    private static boolean isR2Expression(PsiElement node) {
-      if (node.getParent() == null) {
+    private static boolean isR2Expression(UElement node) {
+      UElement parentNode = node.getUastParent();
+      if (parentNode == null) {
         return false;
       }
-      String text = node.getText();
-      PsiElement parent = LintUtils.skipParentheses(node.getParent());
+      String text = node.asSourceString();
+      UElement parent = LintUtils.skipParentheses(parentNode);
       return (text.equals(R2) || text.contains(".R2"))
-          && parent instanceof PsiExpression
-          && endsWithAny(parent.getText(), SUPPORTED_TYPES);
+          && parent instanceof UExpression
+          && endsWithAny(parent.asSourceString(), SUPPORTED_TYPES);
     }
 
     private static boolean endsWithAny(String text, Set<String> possibleValues) {
diff --git a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
index 946eada9..d655f943 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
@@ -1,48 +1,137 @@
 package butterknife.lint;
 
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Issue;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
-
-public class InvalidR2UsageDetectorTest extends LintDetectorTestBase {
-  private static final String PATH_TEST_RESOURCES = "/src/test/java/sample/r2/";
-  private static final String NO_WARNINGS = "No warnings.";
-  private static final String R2 = "R2.java";
-  private static final String BIND_TEST = "BindTest.java";
-
-  @Override protected Detector getDetector() {
-    return new InvalidR2UsageDetector();
-  }
+import com.android.tools.lint.checks.infrastructure.TestFile;
+import org.junit.Test;
 
-  @Override protected List<Issue> getIssues() {
-    return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
-  }
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
 
-  @Override protected String getTestResourcesPath() {
-    return PATH_TEST_RESOURCES;
-  }
+public final class InvalidR2UsageDetectorTest {
+  private static final TestFile BIND_TEST = java(""
+      + "package sample.r2;\n"
+      + "\n"
+      + "import java.lang.annotation.ElementType;\n"
+      + "import java.lang.annotation.Retention;\n"
+      + "import java.lang.annotation.RetentionPolicy;\n"
+      + "import java.lang.annotation.Target;\n"
+      + "\n"
+      + "@Retention(RetentionPolicy.SOURCE) @Target({ ElementType.FIELD, ElementType.METHOD })\n"
+      + "public @interface BindTest {\n"
+      + "  int value();\n"
+      + "}\n");
+
+  private static final TestFile R2 = java(""
+      + "package sample.r2;\n"
+      + "\n"
+      + "public final class R2 {\n"
+      + "  public static final class array {\n"
+      + "    public static final int res = 0x7f040001;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class attr {\n"
+      + "    public static final int res = 0x7f040002;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class bool {\n"
+      + "    public static final int res = 0x7f040003;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class color {\n"
+      + "    public static final int res = 0x7f040004;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class dimen {\n"
+      + "    public static final int res = 0x7f040005;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class drawable {\n"
+      + "    public static final int res = 0x7f040006;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class id {\n"
+      + "    public static final int res = 0x7f040007;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class integer {\n"
+      + "    public static final int res = 0x7f040008;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class string {\n"
+      + "    public static final int res = 0x7f040009;\n"
+      + "  }\n"
+      + "}");
 
-  public void testNoR2Usage() throws Exception {
-    String file = "NoR2Usage.java";
-    assertSame(NO_WARNINGS, lintFiles(file));
+  @Test public void noR2Usage() {
+    lint() //
+        .files(R2, //
+            java("" //
+                + "package sample;\n" //
+                + "class NoR2Usage {}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testR2UsageInAnnotations() throws Exception {
-    String file = "R2UsageInAnnotations.java";
-    assertSame(NO_WARNINGS, lintFiles(file, BIND_TEST, R2));
+  @Test public void usesR2InAnnotations() {
+    lint() //
+        .files(R2, BIND_TEST, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageInAnnotations {\n"
+                + "\n"
+                + "  @BindTest(sample.r2.R2.string.res) String test;\n"
+                + "\n"
+                + "  @BindTest(R2.id.res) public void foo() {}\n"
+                + "}\n") //
+        ) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testR2UsageOutsideAnnotations() throws Exception {
-    String file = "R2UsageOutsideAnnotations.java";
-    String lintOutput = lintFiles(file, R2);
-    assertNotSame(NO_WARNINGS, lintOutput);
-    assertTrue(lintOutput.contains("2 errors, 0 warnings"));
+  @Test public void usesR2OutsideAnnotations() {
+    lint() //
+        .files(R2, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageOutsideAnnotations {\n"
+                + "\n"
+                + "  int array = sample.r2.R2.array.res;\n"
+                + "\n"
+                + "  public void foo(int color) {}\n"
+                + "\n"
+                + "  public void bar() {\n"
+                + "    foo(R2.color.res);\n"
+                + "  }\n"
+                + "}\n" //
+            )) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectErrorCount(2) //
+        .expectWarningCount(0);
   }
 
-  public void testR2UsageWithSuppression() throws Exception {
-    String file = "R2UsageWithSuppression.java";
-    String lintOutput = lintFiles(file, R2);
-    assertSame(NO_WARNINGS, lintOutput);
+  @Test public void usesR2WithSuppression() {
+    lint() //
+        .files(R2, java(""
+            + "package sample.r2;\n"
+            + "\n"
+            + "public class R2UsageWithSuppression {\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  int bool = sample.r2.R2.bool.res;\n"
+            + "\n"
+            + "  public void foo(int attr) {}\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  public void bar() {\n"
+            + "    foo(R2.attr.res);\n"
+            + "  }\n"
+            + "}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 }
diff --git a/butterknife-lint/src/test/java/butterknife/lint/LintDetectorTestBase.java b/butterknife-lint/src/test/java/butterknife/lint/LintDetectorTestBase.java
deleted file mode 100644
index 78d4269b..00000000
--- a/butterknife-lint/src/test/java/butterknife/lint/LintDetectorTestBase.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package butterknife.lint;
-
-import com.android.annotations.Nullable;
-import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
-import com.android.utils.SdkUtils;
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.InputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.security.CodeSource;
-
-public abstract class LintDetectorTestBase extends LintDetectorTest {
-
-  protected abstract String getTestResourcesPath();
-
-  @Override protected InputStream getTestResource(String relativePath, boolean expectExists) {
-    String path = (getTestResourcesPath() + relativePath).replace('/', File.separatorChar);
-    File file = new File(getTestDataRootDir(), path);
-    if (file.exists()) {
-      try {
-        return new BufferedInputStream(new FileInputStream(file));
-      } catch (FileNotFoundException e) {
-        if (expectExists) {
-          fail("Could not find file " + relativePath);
-        }
-      }
-    }
-    return null;
-  }
-
-  @Nullable private File getTestDataRootDir() {
-    CodeSource source = getClass().getProtectionDomain().getCodeSource();
-    if (source != null) {
-      URL location = source.getLocation();
-      try {
-        File classesDir = SdkUtils.urlToFile(location);
-        return classesDir.getParentFile().getAbsoluteFile().getParentFile().getParentFile();
-      } catch (MalformedURLException e) {
-        fail(e.getLocalizedMessage());
-      }
-    }
-    return null;
-  }
-}
diff --git a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
index d5a7f17d..53c7480f 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
@@ -4,9 +4,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class LintRegistryTest {
-
-  @Test public void issues() throws Exception {
+public final class LintRegistryTest {
+  @Test public void issues() {
     assertThat(new LintRegistry().getIssues()).contains(InvalidR2UsageDetector.ISSUE);
   }
 }
diff --git a/butterknife-lint/src/test/java/sample/r2/BindTest.java b/butterknife-lint/src/test/java/sample/r2/BindTest.java
deleted file mode 100644
index b31753ca..00000000
--- a/butterknife-lint/src/test/java/sample/r2/BindTest.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package sample.r2;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-@Retention(RetentionPolicy.SOURCE) @Target({ ElementType.FIELD, ElementType.METHOD })
-public @interface BindTest {
-  int value();
-}
diff --git a/butterknife-lint/src/test/java/sample/r2/NoR2Usage.java b/butterknife-lint/src/test/java/sample/r2/NoR2Usage.java
deleted file mode 100644
index f14f8b80..00000000
--- a/butterknife-lint/src/test/java/sample/r2/NoR2Usage.java
+++ /dev/null
@@ -1,3 +0,0 @@
-package sample.r2;
-
-public class NoR2Usage { }
diff --git a/butterknife-lint/src/test/java/sample/r2/R2.java b/butterknife-lint/src/test/java/sample/r2/R2.java
deleted file mode 100644
index bfa84bbb..00000000
--- a/butterknife-lint/src/test/java/sample/r2/R2.java
+++ /dev/null
@@ -1,40 +0,0 @@
-// Generated code from Butter Knife gradle plugin. Do not modify!
-package sample.r2;
-
-public final class R2 {
-  public static final class array {
-    public static final int res = 0x7f040001;
-  }
-
-  public static final class attr {
-    public static final int res = 0x7f040002;
-  }
-
-  public static final class bool {
-    public static final int res = 0x7f040003;
-  }
-
-  public static final class color {
-    public static final int res = 0x7f040004;
-  }
-
-  public static final class dimen {
-    public static final int res = 0x7f040005;
-  }
-
-  public static final class drawable {
-    public static final int res = 0x7f040006;
-  }
-
-  public static final class id {
-    public static final int res = 0x7f040007;
-  }
-
-  public static final class integer {
-    public static final int res = 0x7f040008;
-  }
-
-  public static final class string {
-    public static final int res = 0x7f040009;
-  }
-}
diff --git a/butterknife-lint/src/test/java/sample/r2/R2UsageInAnnotations.java b/butterknife-lint/src/test/java/sample/r2/R2UsageInAnnotations.java
deleted file mode 100644
index 9f63a671..00000000
--- a/butterknife-lint/src/test/java/sample/r2/R2UsageInAnnotations.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package sample.r2;
-
-public class R2UsageInAnnotations {
-
-  @BindTest(sample.r2.R2.string.res) String test;
-
-  @BindTest(R2.id.res) public void foo() { }
-}
diff --git a/butterknife-lint/src/test/java/sample/r2/R2UsageOutsideAnnotations.java b/butterknife-lint/src/test/java/sample/r2/R2UsageOutsideAnnotations.java
deleted file mode 100644
index 32564b17..00000000
--- a/butterknife-lint/src/test/java/sample/r2/R2UsageOutsideAnnotations.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package sample.r2;
-
-public class R2UsageOutsideAnnotations {
-
-  int array = sample.r2.R2.array.res;
-
-  public void foo(int color) {}
-
-  public void bar() {
-    foo(R2.color.res);
-  }
-}
diff --git a/butterknife-lint/src/test/java/sample/r2/R2UsageWithSuppression.java b/butterknife-lint/src/test/java/sample/r2/R2UsageWithSuppression.java
deleted file mode 100644
index a808835c..00000000
--- a/butterknife-lint/src/test/java/sample/r2/R2UsageWithSuppression.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package sample.r2;
-
-public class R2UsageWithSuppression {
-
-  @SuppressWarnings("InvalidR2Usage")
-  int bool = sample.r2.R2.bool.res;
-
-  public void foo(int attr) {}
-
-  @SuppressWarnings("InvalidR2Usage")
-  public void bar() {
-    foo(R2.attr.res);
-  }
-}
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 6fd33b21..750bfbac 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -11,31 +11,39 @@ android {
     consumerProguardFiles 'proguard-rules.txt'
 
     testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+
+    javaCompileOptions {
+      annotationProcessorOptions {
+        includeCompileClasspath = true
+      }
+    }
   }
 
   lintOptions {
     textReport true
     textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
   }
 }
 
 dependencies {
-  compile project(':butterknife-annotations')
-  compile deps.support.annotations
-  compile deps.support.compat
+  api project(':butterknife-annotations')
+  implementation deps.support.annotations
+  api deps.support.compat
 
   lintRules project(':butterknife-lint')
 
-  androidTestCompile deps.junit
-  androidTestCompile deps.truth
-  androidTestCompile deps.support.test.runner
+  androidTestImplementation deps.junit
+  androidTestImplementation deps.truth
+  androidTestImplementation deps.support.test.runner
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.compiletesting
-  testCompile files(getRuntimeJar())
-  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
-  testCompile project(':butterknife-compiler')
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.compiletesting
+  testImplementation files(getRuntimeJar())
+  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testImplementation project(':butterknife-compiler')
 }
 
 def getRuntimeJar() {
diff --git a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
index af44c804..a46b74a4 100644
--- a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
+++ b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -57,6 +57,16 @@
     }
   }
 
+  @Test public void testCastParam() {
+    try {
+      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
+      fail();
+    } catch (IllegalStateException ise) {
+      assertThat(ise.getMessage()).isEqualTo(
+          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");
+    }
+  }
+
   static final class EditModeView extends View {
     EditModeView(Context context) {
       super(context);
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 0d3489e5..689b04f0 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -5,7 +5,6 @@
 import android.app.Dialog;
 import android.os.Build;
 import android.support.annotation.CheckResult;
-import android.support.annotation.IdRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.RequiresApi;
@@ -379,25 +378,4 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
       @NonNull Property<? super T, V> setter, V value) {
     setter.set(view, value);
   }
-
-  /** Simpler version of {@link View#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
-    return (T) view.findViewById(id);
-  }
-
-  /** Simpler version of {@link Activity#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
-    return (T) activity.findViewById(id);
-  }
-
-  /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
-    return (T) dialog.findViewById(id);
-  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index 52b2fc23..e9101f74 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -120,10 +120,10 @@ public static View findRequiredView(View source, @IdRes int id, String who) {
     }
   }
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
+      Class<T> cls) {
     try {
-      return (T) value;
+      return cls.cast(value);
     } catch (ClassCastException e) {
       throw new IllegalStateException("Parameter #"
           + (fromPos + 1)
diff --git a/butterknife/src/test/java/butterknife/BindAnimTest.java b/butterknife/src/test/java/butterknife/BindAnimTest.java
new file mode 100644
index 00000000..3cbff425
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindAnimTest.java
@@ -0,0 +1,82 @@
+package butterknife;
+
+import com.google.testing.compile.JavaFileObjects;
+
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import butterknife.compiler.ButterKnifeProcessor;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindAnimTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.animation.Animation;\n"
+        + "import butterknife.BindAnim;\n"
+        + "public class Test {\n"
+        + "  @BindAnim(1) Animation one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.view.animation.AnimationUtils;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = AnimationUtils.loadAnimation(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeAnimation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindAnim;\n"
+        + "public class Test {\n"
+        + "  @BindAnim(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindAnim field type must be 'Animation'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife/src/test/java/butterknife/BindFontTest.java
new file mode 100644
index 00000000..290853aa
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindFontTest.java
@@ -0,0 +1,258 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindFontTest {
+  @Test public void simpleTypeface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.res.ResourcesCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ResourcesCompat.getFont(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleIntSdk26() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getFont(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=26")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void style() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.res.ResourcesCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void styleSdk26() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = Typeface.create(res.getFont(1), Typeface.BOLD);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=26")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeTypeface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindFont field type must be 'Typeface'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void styleMustBeValid() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = 5) Typeface one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
index f6b7dd4a..6b7dda0d 100644
--- a/butterknife/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -62,6 +62,95 @@
         .generatesSources(bindingSource);
   }
 
+  @Test public void bindingViewNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = source.findViewById(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingViewSubclassNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) TextView thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = (TextView) source.findViewById(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
   @Test public void bindingGeneratedView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindViewsTest.java b/butterknife/src/test/java/butterknife/BindViewsTest.java
index f218b69b..f84b145e 100644
--- a/butterknife/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewsTest.java
@@ -179,6 +179,103 @@
         .generatesSources(bindingSource);
   }
 
+  @Test public void bindingArrayNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2, 3}) View[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        source.findViewById(1), \n"
+        + "        source.findViewById(2), \n"
+        + "        source.findViewById(3));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayWithCastNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2, 3}) TextView[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        (TextView) source.findViewById(1), \n"
+        + "        (TextView) source.findViewById(2), \n"
+        + "        (TextView) source.findViewById(3));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
   @Test public void bindingList() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 31b499e5..37f845d0 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -339,7 +339,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
+        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
@@ -347,7 +347,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
+        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
@@ -355,7 +355,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
+        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -386,6 +386,113 @@
         .generatesSources(bindingSource);
   }
 
+  @Test public void methodCastsArgumentNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  interface TestInterface {}\n"
+        + "  @OnClick(0) void click0() {}\n"
+        + "  @OnClick(1) void click1(View view) {}\n"
+        + "  @OnClick(2) void click2(TextView view) {}\n"
+        + "  @OnClick(3) void click3(Button button) {}\n"
+        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view0;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  private View view4;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = source.findViewById(0);\n"
+        + "    view0 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click0();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(1);\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click1(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(2);\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click2((TextView) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(3);\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click3((Button) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(4);\n"
+        + "    view4 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click4((Test.TestInterface) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view0.setOnClickListener(null);\n"
+        + "    view0 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "    view4.setOnClickListener(null);\n"
+        + "    view4 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
   @Test public void methodWithMultipleIds() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife/src/test/java/butterknife/OnItemClickTest.java
index 31ba53d2..03f334c4 100644
--- a/butterknife/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java
@@ -162,7 +162,7 @@
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -222,7 +222,7 @@
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
         + "        , p2);\n"
         + "      }\n"
         + "    });\n"
diff --git a/gradle.properties b/gradle.properties
index 118b2b43..5c084432 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.6.1.3-snapshot
+VERSION_NAME=9.0.0-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 4552f749..7a3265ee 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 453595d6..d92a3fe6 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-milestone-1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradlew b/gradlew
index 4453ccea..cccdd3d5 100755
--- a/gradlew
+++ b/gradlew
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
diff --git a/sample/app/build.gradle b/sample/app/build.gradle
index a6d84fcf..7570238c 100644
--- a/sample/app/build.gradle
+++ b/sample/app/build.gradle
@@ -30,13 +30,13 @@ android {
 }
 
 dependencies {
-  compile deps.release.runtime
+  implementation deps.release.runtime
   annotationProcessor deps.release.compiler
 
-  compile project(':sample:library')
+  implementation project(':sample:library')
 
-  testCompile deps.junit
-  testCompile deps.truth
+  testImplementation deps.junit
+  testImplementation deps.truth
 }
 
 afterEvaluate {
diff --git a/sample/app/src/main/AndroidManifest.xml b/sample/app/src/main/AndroidManifest.xml
index d8dc9f98..4549e5e3 100644
--- a/sample/app/src/main/AndroidManifest.xml
+++ b/sample/app/src/main/AndroidManifest.xml
@@ -5,10 +5,9 @@
 
   <application
       android:allowBackup="false"
-      android:fullBackupContent="false"
       android:label="@string/app_name"
       android:name=".SimpleApp"
-      tools:ignore="MissingApplicationIcon,UnusedAttribute">
+      tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">
 
     <activity
         android:label="@string/app_name"
diff --git a/sample/library/build.gradle b/sample/library/build.gradle
index 089222b7..27111f3e 100644
--- a/sample/library/build.gradle
+++ b/sample/library/build.gradle
@@ -1,4 +1,10 @@
 buildscript {
+  repositories {
+    mavenCentral()
+    jcenter()
+    google()
+  }
+
   dependencies {
     classpath "com.jakewharton:butterknife-gradle-plugin:${versions.release}"
   }
@@ -17,9 +23,9 @@ android {
 }
 
 dependencies {
-  compile deps.release.runtime
+  implementation deps.release.runtime
   annotationProcessor deps.release.compiler
 
-  testCompile deps.junit
-  testCompile deps.truth
+  testImplementation deps.junit
+  testImplementation deps.truth
 }
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index eea80479..c72dfa73 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -1,5 +1,6 @@
 package com.example.butterknife.library;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
@@ -54,6 +55,7 @@
     Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
   }
 
+  @SuppressLint("SetTextI18n") //
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
index 921096d6..567f560b 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
@@ -1,5 +1,6 @@
 package com.example.butterknife.library;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -30,6 +31,7 @@ public SimpleAdapter(Context context) {
     return position;
   }
 
+  @SuppressLint("SetTextI18n") //
   @Override public View getView(int position, View view, ViewGroup parent) {
     ViewHolder holder;
     if (view != null) {
diff --git a/settings.gradle b/settings.gradle
index cc28c278..cd8829a5 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -5,7 +5,7 @@ include ':butterknife-gradle-plugin'
 include ':butterknife-lint'
 include ':butterknife-integration-test'
 
-include ':sample:app'
-include ':sample:library'
+//include ':sample:app'
+//include ':sample:library'
 
 rootProject.name = 'butterknife-parent'
