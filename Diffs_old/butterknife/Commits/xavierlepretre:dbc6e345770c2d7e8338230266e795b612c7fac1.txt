diff --git a/butterknife/pom.xml b/butterknife/pom.xml
index e09c57cb..67f5eb2c 100644
--- a/butterknife/pom.xml
+++ b/butterknife/pom.xml
@@ -44,6 +44,15 @@
       <artifactId>android</artifactId>
       <scope>provided</scope>
     </dependency>
+
+    <dependency>
+      <groupId>se.emilsjolander</groupId>
+      <artifactId>stickylistheaders</artifactId>
+      <version>2.5.2</version>
+      <type>aar</type>
+      <optional>true</optional>
+    </dependency>
+
   </dependencies>
 
   <build>
diff --git a/butterknife/src/main/java/butterknife/OnItemClickSticky.java b/butterknife/src/main/java/butterknife/OnItemClickSticky.java
new file mode 100644
index 00000000..0fb19998
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/OnItemClickSticky.java
@@ -0,0 +1,46 @@
+package butterknife;
+
+import android.view.View;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a method to an {@link android.widget.AdapterView.OnItemClickListener OnItemClickListener} on the
+ * se.emilsjolander.stickylistheaders.StickyListHeadersListView view for each ID specified.
+ * <pre><code>
+ * {@literal @}OnItemClickSticky(R.id.example_list) void onItemClick(int position) {
+ *   Toast.makeText(this, "Clicked position " + position + "!", LENGTH_SHORT).show();
+ * }
+ * </code></pre>
+ * Any number of parameters from {@link android.widget.AdapterView.OnItemClickListener#onItemClick(android.widget.AdapterView,
+ * android.view.View, int, long) onItemClick} may be used on the method.
+ *
+ * @see android.widget.AdapterView.OnItemClickListener
+ * @see butterknife.Optional
+ */
+@Target(METHOD)
+@Retention(CLASS)
+@ListenerClass(
+    targetType = "se.emilsjolander.stickylistheaders.StickyListHeadersListView",
+    setter = "setOnItemClickListener",
+    type = "android.widget.AdapterView.OnItemClickListener",
+    method = @ListenerMethod(
+        name = "onItemClick",
+        parameters = {
+            "android.widget.AdapterView<?>",
+            "android.view.View",
+            "int",
+            "long"
+        }
+    )
+)
+public @interface OnItemClickSticky
+{
+  /** View IDs to which the method will be bound. */
+  int[] value() default { View.NO_ID };
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index 888e0f11..ac87eaca 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -8,6 +8,7 @@
 import butterknife.OnEditorAction;
 import butterknife.OnFocusChange;
 import butterknife.OnItemClick;
+import butterknife.OnItemClickSticky;
 import butterknife.OnItemLongClick;
 import butterknife.OnItemSelected;
 import butterknife.OnLongClick;
@@ -67,6 +68,7 @@
       OnEditorAction.class, //
       OnFocusChange.class, //
       OnItemClick.class, //
+      OnItemClickSticky.class, //
       OnItemLongClick.class, //
       OnItemSelected.class, //
       OnLongClick.class, //
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickStickyTest.java b/butterknife/src/test/java/butterknife/internal/OnItemClickStickyTest.java
new file mode 100644
index 00000000..4f712b6d
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/OnItemClickStickyTest.java
@@ -0,0 +1,287 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link butterknife.internal.OnClickTest} with tests that exercise callbacks with parameters. */
+public class OnItemClickStickyTest
+{
+  @Test public void onClickInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemClickSticky;",
+        "public class Test extends Activity {",
+        "  @OnItemClickSticky(1) void doStuff() {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((se.emilsjolander.stickylistheaders.StickyListHeadersListView) view).setOnItemClickListener(",
+            "      new android.widget.AdapterView.OnItemClickListener() {",
+            "        @Override public void onItemClick(",
+            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "          target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickInjectionWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.AdapterView;",
+        "import butterknife.OnItemClickSticky;",
+        "public class Test extends Activity {",
+        "  @OnItemClickSticky(1) void doStuff(",
+        "    AdapterView<?> parent,",
+        "    View view,",
+        "    int position,",
+        "    long id",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((se.emilsjolander.stickylistheaders.StickyListHeadersListView) view).setOnItemClickListener(",
+            "      new android.widget.AdapterView.OnItemClickListener() {",
+            "        @Override public void onItemClick(",
+            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "          target.doStuff(p0, p1, p2, p3);",
+            "        }",
+            "      });",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickInjectionWithParameterSubset() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ListView;",
+        "import butterknife.OnItemClickSticky;",
+        "public class Test extends Activity {",
+        "  @OnItemClickSticky(1) void doStuff(",
+        "    ListView parent,",
+        "    int position",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((se.emilsjolander.stickylistheaders.StickyListHeadersListView) view).setOnItemClickListener(",
+            "      new android.widget.AdapterView.OnItemClickListener() {",
+            "        @Override public void onItemClick(",
+            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "          target.doStuff((android.widget.ListView) p0, p2);",
+            "        }",
+            "      });",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickInjectionWithParameterSubsetAndGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ListView;",
+        "import butterknife.OnItemClickSticky;",
+        "public class Test<T extends ListView> extends Activity {",
+        "  @OnItemClickSticky(1) void doStuff(",
+        "    T parent,",
+        "    int position",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((se.emilsjolander.stickylistheaders.StickyListHeadersListView) view).setOnItemClickListener(",
+            "      new android.widget.AdapterView.OnItemClickListener() {",
+            "        @Override public void onItemClick(",
+            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "          target.doStuff((android.widget.ListView) p0, p2);",
+            "        }",
+            "      });",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickRootViewInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.widget.ListView;",
+        "import butterknife.OnItemClickSticky;",
+        "public class Test extends se.emilsjolander.stickylistheaders.StickyListHeadersListView {",
+        "  @OnItemClickSticky void doStuff() {}",
+        "  public Test(Context context) {",
+        "    super(context);",
+        "  }",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = target;",
+            "    ((se.emilsjolander.stickylistheaders.StickyListHeadersListView) view).setOnItemClickListener(",
+            "      new android.widget.AdapterView.OnItemClickListener() {",
+            "        @Override public void onItemClick(",
+            "          android.widget.AdapterView<?> p0,",
+            "          android.view.View p1,",
+            "          int p2,",
+            "          long p3",
+            "        ) {",
+            "          target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsWithInvalidId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemClickSticky;",
+        "public class Test extends Activity {",
+        "  @OnItemClickSticky({1, -1}) void doStuff() {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining("@OnItemClickSticky annotation contains invalid ID -1. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsWithInvalidParameterConfiguration() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.AdapterView;",
+        "import butterknife.OnItemClickSticky;",
+        "public class Test extends Activity {",
+        "  @OnItemClickSticky(1) void doStuff(",
+        "    AdapterView<?> parent,",
+        "    View view,",
+        "    View whatIsThis",
+        "  ) {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining(Joiner.on('\n').join(
+            "Unable to match @OnItemClickSticky method arguments. (test.Test.doStuff)",
+            "  ",
+            "    Parameter #1: android.widget.AdapterView<?>",
+            "      matched listener parameter #1: android.widget.AdapterView<?>",
+            "  ",
+            "    Parameter #2: android.view.View",
+            "      matched listener parameter #2: android.view.View",
+            "  ",
+            "    Parameter #3: android.view.View",
+            "      did not match any listener parameters",
+            "  ",
+            "  Methods may have up to 4 parameter(s):",
+            "  ",
+            "    android.widget.AdapterView<?>",
+            "    android.view.View",
+            "    int",
+            "    long",
+            "  ",
+            "  These may be listed in any order but will be searched for from top to bottom."))
+        .in(source).onLine(7);
+  }
+}
