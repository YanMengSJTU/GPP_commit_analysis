diff --git a/README.md b/README.md
index 641155af..a3afecd4 100644
--- a/README.md
+++ b/README.md
@@ -1,24 +1,11 @@
-Butter Knife
-============
+Introduction
 
-![Logo](website/static/logo.png)
+Annotate fields with @InjectView and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.
 
-View "injection" library for Android which uses annotation processing to generate boilerplate code
-for you.
-
- * Eliminate `findViewById` calls by using `@InjectView` on fields.
- * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,
-   setters, or properties.
- * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
-
-```java
 class ExampleActivity extends Activity {
-  @InjectView(R.id.user) EditText username;
-  @InjectView(R.id.pass) EditText password;
-
-  @OnClick(R.id.submit) void submit() {
-    // TODO call server...
-  }
+  @InjectView(R.id.title) TextView title;
+  @InjectView(R.id.subtitle) TextView subtitle;
+  @InjectView(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -27,50 +14,197 @@ class ExampleActivity extends Activity {
     // TODO Use "injected" views...
   }
 }
-```
 
-For documentation and additional information see [the website][3].
+Instead of slow reflection, code is generated to perform the view look-ups. Calling inject delegates to this generated code that you can see and debug.
+
+The generated code for the above example is roughly equivalent to the following:
+
+public void inject(ExampleActivity activity) {
+  activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);
+  activity.footer = (android.widget.TextView) activity.findViewById(2130968579);
+  activity.title = (android.widget.TextView) activity.findViewById(2130968577);
+}
+
+Non-Activity Injection
+
+You can also perform injection on arbitrary objects by supplying your own view root.
+
+public class FancyFragment extends Fragment {
+  @InjectView(R.id.button1) Button button1;
+  @InjectView(R.id.button2) Button button2;
+
+  @Override View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+    View view = inflater.inflate(R.layout.fancy_fragment, container, false);
+    ButterKnife.inject(this, view);
+    // TODO Use "injected" views...
+    return view;
+  }
+}
+
+Another use is simplifying the view holder pattern inside of a list adapter.
 
-__Remember: A butter knife is like [a dagger][1] only infinitely less sharp.__
+public class MyAdapter extends BaseAdapter {
+  @Override public View getView(int position, View view, ViewGroup parent) {
+    ViewHolder holder;
+    if (view != null) {
+      holder = (ViewHolder) view.getTag();
+    } else {
+      view = inflater.inflate(R.layout.whatever, parent, false);
+      holder = new ViewHolder(view);
+      view.setTag(holder);
+    }
 
+    holder.name.setText("John Doe");
+    // etc...
 
+    return view;
+  }
 
-Download
---------
+  static class ViewHolder {
+    @InjectView(R.id.title) TextView name;
+    @InjectView(R.id.job_title) TextView jobTitle;
 
-Download [the latest JAR][2] or grab via Maven:
-```xml
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife</artifactId>
-  <version>6.0.0</version>
-</dependency>
-```
-or Gradle:
-```groovy
-compile 'com.jakewharton:butterknife:6.0.0'
-```
+    public ViewHolder(View view) {
+      ButterKnife.inject(this, view);
+    }
+  }
+}
 
+You can see this implementation in action in the provided sample.
 
-License
--------
+Calls to ButterKnife.inject can be made anywhere you would otherwise put findViewById calls.
 
-    Copyright 2013 Jake Wharton
+Other provided injection APIs:
 
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
+    Inject arbitrary objects using an activity as the view root. If you use a pattern like MVC you can inject the controller using its activity with ButterKnife.inject(this, activity).
+    Inject a view's children into fields using ButterKnife.inject(this). If you use <merge> tags in a layout and inflate in a custom view constructor you can call this immediately after. Alternatively, custom view types inflated from XML can use it in the onFinishInflate() callback.
+
+View Lists
+
+You can group multiple views into a List or array.
+
+@InjectViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+List<EditText> nameViews;
+
+The apply method allows you to act on all the views in a list at once.
+
+ButterKnife.apply(nameViews, DISABLE);
+ButterKnife.apply(nameViews, ENABLED, false);
+
+Action and Setter interfaces allow specifying simple behavior.
+
+static final Action<View> DISABLE = new Action<>() {
+  @Override public void apply(View view, int index) {
+    view.setEnabled(false);
+  }
+}
+static final Setter<View, Boolean> ENABLED = new Setter<>() {
+  @Override public void set(View view, Boolean value, int index) {
+    view.setEnabled(value);
+  }
+}
+
+An Android Property can also be used with the apply method.
+
+ButterKnife.apply(nameViews, View.ALPHA, 0);
+
+Listener Injection
+
+Listeners can also automatically be configured onto methods.
+
+@OnClick(R.id.submit)
+public void submit(View view) {
+  // TODO submit data to server...
+}
 
-       http://www.apache.org/licenses/LICENSE-2.0
+All arguments to the listener method are optional.
+
+@OnClick(R.id.submit)
+public void submit() {
+  // TODO submit data to server...
+}
+
+Define a specific type and it will automatically be cast.
+
+@OnClick(R.id.submit)
+public void sayHi(Button button) {
+  button.setText("Hello!");
+}
+
+Specify multiple IDs in a single binding for common event handling.
+
+@OnClick({ R.id.door1, R.id.door2, R.id.door3 })
+public void pickDoor(DoorView door) {
+  if (door.hasPrizeBehind()) {
+    Toast.makeText(this, "You win!", LENGTH_SHORT).show();
+  } else {
+    Toast.makeText(this, "Try again", LENGTH_SHORT).show();
+  }
+}
+
+Custom views can bind to their own listeners by not specifying an ID.
+
+public class FancyButton extends Button {
+  @OnClick
+  public void onClick() {
+    // TODO do something!
+  }
+}
+
+Injection Reset
+
+Fragments have a different view lifecycle than activities. When injecting a fragment in onCreateView, set the views to null in onDestroyView. Butter Knife has a reset method to do this automatically.
+
+public class FancyFragment extends Fragment {
+  @InjectView(R.id.button1) Button button1;
+  @InjectView(R.id.button2) Button button2;
+
+  @Override View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+    View view = inflater.inflate(R.layout.fancy_fragment, container, false);
+    ButterKnife.inject(this, view);
+    // TODO Use "injected" views...
+    return view;
+  }
+
+  @Override void onDestroyView() {
+    super.onDestroyView();
+    ButterKnife.reset(this);
+  }
+}
+
+Optional Injections
+
+By default, both @InjectView and listener injections are required. An exception will be thrown if the target view cannot be found.
+
+To suppress this behavior and create an optional injection, add the @Optional annotation to the field or method.
+
+@Optional @InjectView(R.id.might_not_be_there) TextView mightNotBeThere;
+
+@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
+  // TODO ...
+}
+
+Multi-Method Listeners
+
+Method annotations whose corresponding listener has multiple callbacks can be used to bind to any one of them. Each annotation has a default callback that it binds to. Specify an alternate using the callback parameter.
+
+@OnItemSelected(R.id.list_view)
+void onItemSelected(int position) {
+  // TODO ...
+}
+
+@OnItemSelected(value = R.id.maybe_missing, callback = NOTHING_SELECTED)
+void onNothingSelected() {
+  // TODO ...
+}
 
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
+Bonus
 
+Also included are findById methods which simplify code that still has to find views on a View, Activity, or Dialog. It uses generics to infer the return type and automatically performs the cast.
 
+View view = LayoutInflater.from(context).inflate(R.layout.thing, null);
+TextView firstName = ButterKnife.findById(view, R.id.first_name);
+TextView lastName = ButterKnife.findById(view, R.id.last_name);
+ImageView photo = ButterKnife.findById(view, R.id.photo);
 
- [1]: http://square.github.com/dagger/
- [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton&a=butterknife&v=LATEST
- [3]: http://jakewharton.github.com/butterknife/
+Add a static import for ButterKnife.findById and enjoy even more fun.
\ No newline at end of file
