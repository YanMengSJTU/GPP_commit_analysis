diff --git a/CHANGELOG.md b/CHANGELOG.md
index a61b410e..839fe608 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,38 @@
 Change Log
 ==========
 
+Version 9.0.0-rc1 *(2018-10-10)*
+--------------------------------
+
+ * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate
+   AndroidX code.
+
+ * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs
+   required for the generated code but does not contain the code to reflectively look up the generated
+   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can
+   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules
+   remain in the old `butterknife` artifact.
+ 
+ * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation
+   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged
+   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more
+   information. Currently about 90% of functionality is covered. File bugs for anything that does not work.
+
+   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to
+   having this be a default. As of AGP 3.2 there is no reason not to do this.
+
+ * New: Lint checks have been ported to UAST and now work on Kotlin code.
+
+ * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`.
+ * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities.
+ * Fix: Use the application ID instead of the resource package for generating `R2`.
+ * Deprecated methods from 8.x have been removed.
+
+Note: The next release candidate will switch all artifacts to require Java 8 bytecode which will force
+your applications to enable Java 8 bytecode. As of AGP 3.2 there is no cost to this, and there is no
+reason to have it set any lower.
+
+
 Version 8.8.1 *(2017-08-09)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 26d21abc..41d25f66 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  implementation 'com.jakewharton:butterknife:8.8.1'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  implementation 'com.jakewharton:butterknife:9.0.0-rc1'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc1'
 }
 ```
 
@@ -65,7 +65,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc1'
   }
 }
 ```
diff --git a/build.gradle b/build.gradle
index 4f514777..c64dd5a2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,7 +7,7 @@ buildscript {
 
       'supportLibrary': '28.0.0',
       'androidTools': '26.2.0',
-      'kotlin': '1.2.70',
+      'kotlin': '1.2.71',
 
       'release': '8.8.1',
   ]
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index f96179a7..47d8f373 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 checkstyle {
   configFile rootProject.file('checkstyle.xml')
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index 5775e644..077bc65d 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
   implementation project(':butterknife-annotations')
diff --git a/butterknife-gradle-plugin/src/test/build.gradle b/butterknife-gradle-plugin/src/test/build.gradle
index 1ce175dd..670488ac 100644
--- a/butterknife-gradle-plugin/src/test/build.gradle
+++ b/butterknife-gradle-plugin/src/test/build.gradle
@@ -8,11 +8,11 @@ repositories {
 }
 
 android {
-    compileSdkVersion 27
+    compileSdkVersion 28
 
     compileOptions {
-        sourceCompatibility = JavaVersion.VERSION_1_7
-        targetCompatibility = JavaVersion.VERSION_1_7
+        sourceCompatibility = JavaVersion.VERSION_1_8
+        targetCompatibility = JavaVersion.VERSION_1_8
     }
 
     defaultConfig {
@@ -62,6 +62,5 @@ android {
 }
 
 dependencies {
-    implementation "com.android.support:support-annotations:27.0.2"
-    implementation "com.android.support:support-v4:27.0.2"
+    implementation "com.android.support:support-v4:28.0.0"
 }
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index 4358fda8..dbe2ab9d 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -4,8 +4,8 @@ android {
   compileSdkVersion versions.compileSdk
 
   compileOptions {
-    sourceCompatibility = JavaVersion.VERSION_1_7
-    targetCompatibility = JavaVersion.VERSION_1_7
+    sourceCompatibility = JavaVersion.VERSION_1_8
+    targetCompatibility = JavaVersion.VERSION_1_8
   }
 
   defaultConfig {
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 72006b0b..f72eb3e4 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -2,7 +2,6 @@
 
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
@@ -24,14 +23,12 @@
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SimpleActivity extends Activity {
-  private static final Action<View> ALPHA_FADE = new Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
-      alphaAnimation.setFillBefore(true);
-      alphaAnimation.setDuration(500);
-      alphaAnimation.setStartOffset(index * 100);
-      view.startAnimation(alphaAnimation);
-    }
+  private static final Action<View> ALPHA_FADE = (view, index) -> {
+    AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
+    alphaAnimation.setFillBefore(true);
+    alphaAnimation.setDuration(500);
+    alphaAnimation.setStartOffset(index * 100);
+    view.startAnimation(alphaAnimation);
   };
 
   @BindView(R.id.title) TextView title;
diff --git a/butterknife-reflect/build.gradle b/butterknife-reflect/build.gradle
index 917c9d45..ccf464e6 100644
--- a/butterknife-reflect/build.gradle
+++ b/butterknife-reflect/build.gradle
@@ -9,6 +9,11 @@ android {
     consumerProguardFiles 'proguard-rules.txt'
   }
 
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
   lintOptions {
     textReport true
     textOutput 'stdout'
diff --git a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
index ead2d35e..c35f9aad 100644
--- a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
@@ -582,11 +582,9 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onCheckedChanged.value(), isRequired(method), method.getName(),
             CompoundButton.class);
 
-    ViewCollections.set(views, ON_CHECKED_CHANGE, new CompoundButton.OnCheckedChangeListener() {
-      @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        tryInvoke(method, target, argumentTransformer.transform(buttonView, isChecked));
-      }
-    });
+    ViewCollections.set(views, ON_CHECKED_CHANGE,
+        (buttonView, isChecked) -> tryInvoke(method, target,
+            argumentTransformer.transform(buttonView, isChecked)));
 
     return new ListenerUnbinder<>(views, ON_CHECKED_CHANGE);
   }
@@ -605,11 +603,8 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     List<View> views =
         findViews(source, onClick.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_CLICK, new View.OnClickListener() {
-      @Override public void onClick(View v) {
-        tryInvoke(method, target, argumentTransformer.transform(v));
-      }
-    });
+    ViewCollections.set(views, ON_CLICK,
+        v -> tryInvoke(method, target, argumentTransformer.transform(v)));
 
     return new ListenerUnbinder<>(views, ON_CLICK);
   }
@@ -629,14 +624,12 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onEditorAction.value(), isRequired(method), method.getName(),
             TextView.class);
 
-    ViewCollections.set(views, ON_EDITOR_ACTION, new TextView.OnEditorActionListener() {
-      @Override public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
-        Object value = tryInvoke(method, target, argumentTransformer.transform(v, actionId, event));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) value
-            : false;
-      }
+    ViewCollections.set(views, ON_EDITOR_ACTION, (v, actionId, event) -> {
+      Object value = tryInvoke(method, target, argumentTransformer.transform(v, actionId, event));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : false;
     });
 
     return new ListenerUnbinder<>(views, ON_EDITOR_ACTION);
@@ -656,11 +649,8 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     List<View> views =
         findViews(source, onFocusChange.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_FOCUS_CHANGE, new View.OnFocusChangeListener() {
-      @Override public void onFocusChange(View v, boolean hasFocus) {
-        tryInvoke(method, target, argumentTransformer.transform(v, hasFocus));
-      }
-    });
+    ViewCollections.set(views, ON_FOCUS_CHANGE,
+        (v, hasFocus) -> tryInvoke(method, target, argumentTransformer.transform(v, hasFocus)));
 
     return new ListenerUnbinder<>(views, ON_FOCUS_CHANGE);
   }
@@ -680,11 +670,9 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onItemClick.value(), isRequired(method), method.getName(),
             AdapterView.class);
 
-    ViewCollections.set(views, ON_ITEM_CLICK, new AdapterView.OnItemClickListener() {
-      @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-        tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
-      }
-    });
+    ViewCollections.set(views, ON_ITEM_CLICK,
+        (parent, view, position, id) -> tryInvoke(method, target,
+            argumentTransformer.transform(parent, view, position, id)));
 
     return new ListenerUnbinder<>(views, ON_ITEM_CLICK);
   }
@@ -704,16 +692,13 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onItemLongClick.value(), isRequired(method), method.getName(),
             AdapterView.class);
 
-    ViewCollections.set(views, ON_ITEM_LONG_CLICK, new AdapterView.OnItemLongClickListener() {
-      @Override
-      public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
-        Object value =
-            tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) value
-            : false;
-      }
+    ViewCollections.set(views, ON_ITEM_LONG_CLICK, (parent, view, position, id) -> {
+      Object value =
+          tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : false;
     });
 
     return new ListenerUnbinder<>(views, ON_ITEM_LONG_CLICK);
@@ -733,14 +718,12 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position, l
     List<View> views =
         findViews(source, onLongClick.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_LONG_CLICK, new View.OnLongClickListener() {
-      @Override public boolean onLongClick(View v) {
-        Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) returnValue
-            : false;
-      }
+    ViewCollections.set(views, ON_LONG_CLICK, v -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : false;
     });
 
     return new ListenerUnbinder<>(views, ON_LONG_CLICK);
@@ -760,14 +743,12 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position, l
     List<View> views =
         findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_TOUCH, new View.OnTouchListener() {
-      @Override public boolean onTouch(View v, MotionEvent event) {
-        Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) returnValue
-            : false;
-      }
+    ViewCollections.set(views, ON_TOUCH, (v, event) -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : false;
     });
 
     return new ListenerUnbinder<>(views, ON_TOUCH);
@@ -966,61 +947,21 @@ private static Object tryInvoke(Method method, Object target, Object... argument
   }
 
   private static final Setter<CompoundButton, CompoundButton.OnCheckedChangeListener>
-      ON_CHECKED_CHANGE = new Setter<CompoundButton, CompoundButton.OnCheckedChangeListener>() {
-    @Override public void set(@NonNull CompoundButton view,
-        @Nullable CompoundButton.OnCheckedChangeListener value, int index) {
-      view.setOnCheckedChangeListener(value);
-    }
-  };
+      ON_CHECKED_CHANGE = (view, value, index) -> view.setOnCheckedChangeListener(value);
   private static final Setter<View, View.OnClickListener> ON_CLICK =
-      new Setter<View, View.OnClickListener>() {
-        @Override
-        public void set(@NonNull View view, @Nullable View.OnClickListener value, int index) {
-          view.setOnClickListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnClickListener(value);
   private static final Setter<TextView, TextView.OnEditorActionListener> ON_EDITOR_ACTION =
-      new Setter<TextView, TextView.OnEditorActionListener>() {
-        @Override
-        public void set(@NonNull TextView view, @Nullable TextView.OnEditorActionListener value,
-            int index) {
-          view.setOnEditorActionListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnEditorActionListener(value);
   private static final Setter<View, View.OnFocusChangeListener> ON_FOCUS_CHANGE =
-      new Setter<View, View.OnFocusChangeListener>() {
-        @Override
-        public void set(@NonNull View view, @Nullable View.OnFocusChangeListener value, int index) {
-          view.setOnFocusChangeListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnFocusChangeListener(value);
   private static final Setter<AdapterView<?>, AdapterView.OnItemClickListener> ON_ITEM_CLICK =
-      new Setter<AdapterView<?>, AdapterView.OnItemClickListener>() {
-        @Override public void set(@NonNull AdapterView<?> view,
-            @Nullable AdapterView.OnItemClickListener value, int index) {
-          view.setOnItemClickListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnItemClickListener(value);
   private static final Setter<AdapterView<?>, AdapterView.OnItemLongClickListener>
-      ON_ITEM_LONG_CLICK = new Setter<AdapterView<?>, AdapterView.OnItemLongClickListener>() {
-    @Override public void set(@NonNull AdapterView<?> view,
-        @Nullable AdapterView.OnItemLongClickListener value, int index) {
-      view.setOnItemLongClickListener(value);
-    }
-  };
+      ON_ITEM_LONG_CLICK = (view, value, index) -> view.setOnItemLongClickListener(value);
   private static final Setter<View, View.OnLongClickListener> ON_LONG_CLICK =
-      new Setter<View, View.OnLongClickListener>() {
-        @Override
-        public void set(@NonNull View view, @Nullable View.OnLongClickListener value, int index) {
-          view.setOnLongClickListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnLongClickListener(value);
   private static final Setter<View, View.OnTouchListener> ON_TOUCH =
-      new Setter<View, View.OnTouchListener>() {
-        @Override public void set(@NonNull View view, View.OnTouchListener value, int index) {
-          view.setOnTouchListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnTouchListener(value);
 
   private static final Class<?>[] ON_CHECKED_CHANGED_TYPES =
       { CompoundButton.class, boolean.class };
diff --git a/butterknife-runtime/build.gradle b/butterknife-runtime/build.gradle
index 397f2a8d..6aa0345b 100644
--- a/butterknife-runtime/build.gradle
+++ b/butterknife-runtime/build.gradle
@@ -15,6 +15,11 @@ android {
     }
   }
 
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
   lintOptions {
     textReport true
     textOutput 'stdout'
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
index 4605051a..d0a4e890 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
@@ -24,21 +24,9 @@
         }
       };
   private static final Setter<View, Boolean> SETTER_ENABLED =
-      new Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, @Nullable Boolean value, int index) {
-          view.setEnabled(value);
-        }
-      };
-  private static final Action<View> ACTION_DISABLE = new Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setEnabled(false);
-    }
-  };
-  private static final Action<View> ACTION_ZERO_ALPHA = new Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setAlpha(0f);
-    }
-  };
+      (view, value, index) -> view.setEnabled(value);
+  private static final Action<View> ACTION_DISABLE = (view, index) -> view.setEnabled(false);
+  private static final Action<View> ACTION_ZERO_ALPHA = (view, index) -> view.setAlpha(0f);
 
   private final Context context = InstrumentationRegistry.getContext();
 
diff --git a/butterknife-runtime/src/main/java/butterknife/Unbinder.java b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
index ce27c3e9..663fc869 100644
--- a/butterknife-runtime/src/main/java/butterknife/Unbinder.java
+++ b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
@@ -6,7 +6,5 @@
 public interface Unbinder {
   @UiThread void unbind();
 
-  Unbinder EMPTY = new Unbinder() {
-    @Override public void unbind() { }
-  };
+  Unbinder EMPTY = () -> { };
 }
diff --git a/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index f936ff6f..b1de399e 100644
--- a/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -9,11 +9,7 @@
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
   static boolean enabled = true;
 
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
+  private static final Runnable ENABLE_AGAIN = () -> enabled = true;
 
   @Override public final void onClick(View v) {
     if (enabled) {
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index d6bece80..76c74263 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -11,6 +11,11 @@ android {
     testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
   }
 
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
   lintOptions {
     textReport true
     textOutput 'stdout'
diff --git a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
index c5631b00..2c496e9a 100644
--- a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -26,21 +26,11 @@
         }
       };
   private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
-      new ButterKnife.Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, @Nullable Boolean value, int index) {
-          view.setEnabled(value);
-        }
-      };
-  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setEnabled(false);
-    }
-  };
-  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setAlpha(0f);
-    }
-  };
+      (view, value, index) -> view.setEnabled(value);
+  private static final ButterKnife.Action<View> ACTION_DISABLE =
+      (view, index) -> view.setEnabled(false);
+  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA =
+      (view, index) -> view.setAlpha(0f);
 
   private final Context context = InstrumentationRegistry.getContext();
 
