diff --git a/.travis.yml b/.travis.yml
index c7b955ba..bdec6648 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -12,7 +12,7 @@ jdk:
 before_install:
   # Install SDK license so Android Gradle plugin can install deps.
   - mkdir "$ANDROID_HOME/licenses" || true
-  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
+  - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
   # Install the rest of tools (e.g., avdmanager)
   - sdkmanager tools
   # Install the system image
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 623a32c0..304dee70 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -35,6 +35,7 @@ dependencies {
   androidTestImplementation deps.junit
   androidTestImplementation deps.truth
   androidTestImplementation deps.support.test.runner
+  androidTestAnnotationProcessor project(':butterknife-compiler')
 
   testImplementation deps.junit
   testImplementation deps.truth
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
new file mode 100644
index 00000000..19992317
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
@@ -0,0 +1,59 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindArray;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindArrayTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class StringArrayTarget {
+    @BindArray(R.array.string_one_two_three) String[] actual;
+  }
+
+  @Test public void asStringArray() {
+    StringArrayTarget target = new StringArrayTarget();
+    String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);
+
+    Unbinder unbinder = new BindArrayTest$StringArrayTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class IntArrayTarget {
+    @BindArray(R.array.int_one_two_three) int[] actual;
+  }
+
+  @Test public void asIntArray() {
+    IntArrayTarget target = new IntArrayTarget();
+    int[] expected = context.getResources().getIntArray(R.array.int_one_two_three);
+
+    Unbinder unbinder = new BindArrayTest$IntArrayTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class CharSequenceArrayTarget {
+    @BindArray(R.array.int_one_two_three) CharSequence[] actual;
+  }
+
+  @Test public void asCharSequenceArray() {
+    CharSequenceArrayTarget target = new CharSequenceArrayTarget();
+    CharSequence[] expected = context.getResources().getTextArray(R.array.int_one_two_three);
+
+    Unbinder unbinder = new BindArrayTest$CharSequenceArrayTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
new file mode 100644
index 00000000..b3517fc8
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
@@ -0,0 +1,33 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertTrue;
+
+public final class BindBitmapTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindBitmap(R.drawable.pixel) Bitmap actual;
+  }
+
+  @Test public void asBitmap() {
+    Target target = new Target();
+    Bitmap expected = BitmapFactory.decodeResource(context.getResources(), R.drawable.pixel);
+
+    Unbinder unbinder = new BindBitmapTest$Target_ViewBinding(target, context);
+    assertTrue(target.actual.sameAs(expected));
+
+    unbinder.unbind();
+    assertTrue(target.actual.sameAs(expected));
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
new file mode 100644
index 00000000..9156f8dc
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
@@ -0,0 +1,29 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindBool;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindBoolTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindBool(R.bool.just_true) boolean actual;
+  }
+
+  @Test public void asBoolean() {
+    Target target = new Target();
+    boolean expected = context.getResources().getBoolean(R.bool.just_true);
+
+    Unbinder unbinder = new BindBoolTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
new file mode 100644
index 00000000..12c8d020
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
@@ -0,0 +1,45 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindColor;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindColorTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class IntTarget {
+    @BindColor(R.color.red) int actual;
+  }
+
+  @Test public void asInt() {
+    IntTarget target = new IntTarget();
+    int expected = context.getResources().getColor(R.color.red);
+
+    Unbinder unbinder = new BindColorTest$IntTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class ColorStateListTarget {
+    @BindColor(R.color.colors) ColorStateList actual;
+  }
+
+  @Test public void asColorStateList() {
+    ColorStateListTarget target = new ColorStateListTarget();
+    ColorStateList expected = context.getResources().getColorStateList(R.color.colors);
+
+    Unbinder unbinder = new BindColorTest$ColorStateListTarget_ViewBinding(target, context);
+    assertThat(target.actual.toString()).isEqualTo(expected.toString());
+
+    unbinder.unbind();
+    assertThat(target.actual.toString()).isEqualTo(expected.toString());
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
new file mode 100644
index 00000000..4c76d548
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
@@ -0,0 +1,44 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindDimen;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindDimenTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class IntTarget {
+    @BindDimen(R.dimen.twelve_point_two_dp) int actual;
+  }
+
+  @Test public void asInt() {
+    IntTarget target = new IntTarget();
+    int expected = context.getResources().getDimensionPixelSize(R.dimen.twelve_point_two_dp);
+
+    Unbinder unbinder = new BindDimenTest$IntTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class FloatTarget {
+    @BindDimen(R.dimen.twelve_point_two_dp) float actual;
+  }
+
+  @Test public void asFloat() {
+    FloatTarget target = new FloatTarget();
+    float expected = context.getResources().getDimension(R.dimen.twelve_point_two_dp);
+
+    Unbinder unbinder = new BindDimenTest$FloatTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
new file mode 100644
index 00000000..88d23687
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
@@ -0,0 +1,34 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.drawable.Drawable;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindBitmap;
+import butterknife.BindDrawable;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertTrue;
+
+public final class BindDrawableTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindDrawable(R.drawable.circle) Drawable actual;
+  }
+
+  @Test public void asDrawable() {
+    Target target = new Target();
+    Drawable expected = context.getResources().getDrawable(R.drawable.circle);
+
+    Unbinder unbinder = new BindDrawableTest$Target_ViewBinding(target, context);
+    assertThat(target.actual.getConstantState()).isEqualTo(expected.getConstantState());
+
+    unbinder.unbind();
+    assertThat(target.actual.getConstantState()).isEqualTo(expected.getConstantState());
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
new file mode 100644
index 00000000..5ec97658
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
@@ -0,0 +1,33 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.util.TypedValue;
+import butterknife.BindFloat;
+import butterknife.BindInt;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindFloatTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindFloat(R.dimen.twelve_point_two) float actual;
+  }
+
+  @Test public void asFloat() {
+    Target target = new Target();
+    TypedValue value = new TypedValue();
+    context.getResources().getValue(R.dimen.twelve_point_two, value, true);
+    float expected = value.getFloat();
+
+    Unbinder unbinder = new BindFloatTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
new file mode 100644
index 00000000..8f091966
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
@@ -0,0 +1,29 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindInt;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindIntTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindInt(R.integer.twelve) int actual;
+  }
+
+  @Test public void asInt() {
+    Target target = new Target();
+    int expected = context.getResources().getInteger(R.integer.twelve);
+
+    Unbinder unbinder = new BindIntTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
new file mode 100644
index 00000000..c72e0549
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
@@ -0,0 +1,29 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindString;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindStringTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindString(R.string.hey) String actual;
+  }
+
+  @Test public void simpleInt() {
+    Target target = new Target();
+    String expected = context.getString(R.string.hey);
+
+    Unbinder unbinder = new BindStringTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/res/color/colors.xml b/butterknife/src/androidTest/res/color/colors.xml
new file mode 100644
index 00000000..2af4b135
--- /dev/null
+++ b/butterknife/src/androidTest/res/color/colors.xml
@@ -0,0 +1,11 @@
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+      android:color="#ffff0000"
+      android:state_pressed="true"
+      />
+  <item
+      android:color="#ff0000ff"
+      android:state_focused="true"
+      />
+  <item android:color="#ff000000"/>
+</selector>
diff --git a/butterknife/src/androidTest/res/drawable/circle.xml b/butterknife/src/androidTest/res/drawable/circle.xml
new file mode 100644
index 00000000..54496c5b
--- /dev/null
+++ b/butterknife/src/androidTest/res/drawable/circle.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval"
+    >
+  <size
+      android:height="10px"
+      android:width="10px"
+      />
+  <solid
+      android:color="#fff"
+      />
+</shape>
diff --git a/butterknife/src/androidTest/res/drawable/pixel.png b/butterknife/src/androidTest/res/drawable/pixel.png
new file mode 100644
index 00000000..9644db32
Binary files /dev/null and b/butterknife/src/androidTest/res/drawable/pixel.png differ
diff --git a/butterknife/src/androidTest/res/values/values.xml b/butterknife/src/androidTest/res/values/values.xml
new file mode 100644
index 00000000..f53d702e
--- /dev/null
+++ b/butterknife/src/androidTest/res/values/values.xml
@@ -0,0 +1,18 @@
+<resources>
+  <bool name="just_true">true</bool>
+  <color name="red">#ffff0000</color>
+  <integer name="twelve">12</integer>
+  <dimen name="twelve_point_two_dp">12.2dp</dimen>
+  <item name="twelve_point_two" format="float" type="dimen">12.2</item>
+  <string name="hey">Hey</string>
+  <string-array name="string_one_two_three">
+    <item>One</item>
+    <item>Two</item>
+    <item>Three</item>
+  </string-array>
+  <integer-array name="int_one_two_three">
+    <item>1</item>
+    <item>2</item>
+    <item>3</item>
+  </integer-array>
+</resources>
diff --git a/butterknife/src/test/java/butterknife/BindArrayTest.java b/butterknife/src/test/java/butterknife/BindArrayTest.java
index 7a1c69d2..fb228829 100644
--- a/butterknife/src/test/java/butterknife/BindArrayTest.java
+++ b/butterknife/src/test/java/butterknife/BindArrayTest.java
@@ -8,164 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindArrayTest {
-  @Test public void stringArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindArray;\n"
-        + "public class Test {\n"
-        + "  @BindArray(1) String[] one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getStringArray(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void intArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindArray;\n"
-        + "public class Test {\n"
-        + "  @BindArray(1) int[] one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getIntArray(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void textArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindArray;\n"
-        + "public class Test {\n"
-        + "  @BindArray(1) CharSequence[] one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getTextArray(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindArrayTest {
   @Test public void typedArray() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindBitmapTest.java b/butterknife/src/test/java/butterknife/BindBitmapTest.java
index 84d371f0..4a1e42a6 100644
--- a/butterknife/src/test/java/butterknife/BindBitmapTest.java
+++ b/butterknife/src/test/java/butterknife/BindBitmapTest.java
@@ -8,61 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindBitmapTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.Bitmap;\n"
-        + "import butterknife.BindBitmap;\n"
-        + "public class Test {\n"
-        + "  @BindBitmap(1) Bitmap one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.graphics.BitmapFactory;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = BitmapFactory.decodeResource(res, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindBitmapTest {
   @Test public void typeMustBeBitmap() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindBoolTest.java b/butterknife/src/test/java/butterknife/BindBoolTest.java
index fc44a763..e32031cb 100644
--- a/butterknife/src/test/java/butterknife/BindBoolTest.java
+++ b/butterknife/src/test/java/butterknife/BindBoolTest.java
@@ -8,59 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindBoolTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;"
-        + "import butterknife.BindBool;"
-        + "public class Test {"
-        + "  @BindBool(1) boolean one;"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getBoolean(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindBoolTest {
   @Test public void typeMustBeBoolean() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindColorTest.java b/butterknife/src/test/java/butterknife/BindColorTest.java
index e07b05de..558e06ec 100644
--- a/butterknife/src/test/java/butterknife/BindColorTest.java
+++ b/butterknife/src/test/java/butterknife/BindColorTest.java
@@ -8,58 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindColorTest {
-  @Test public void simpleInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindColor;\n"
-        + "public class Test {\n"
-        + "  @BindColor(1) int one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ContextCompat.getColor(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindColorTest {
   @Test public void simpleIntSdk23() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -110,58 +59,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void simpleColorStateList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.content.res.ColorStateList;\n"
-        + "import butterknife.BindColor;\n"
-        + "public class Test {\n"
-        + "  @BindColor(1) ColorStateList one;\n"
-        +"}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ContextCompat.getColorStateList(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void simpleColorStateListSdk23() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindDimenTest.java b/butterknife/src/test/java/butterknife/BindDimenTest.java
index c8adfc81..0b0d235a 100644
--- a/butterknife/src/test/java/butterknife/BindDimenTest.java
+++ b/butterknife/src/test/java/butterknife/BindDimenTest.java
@@ -8,111 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindDimenTest {
-  @Test public void simpleFloat() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindDimen;\n"
-        + "public class Test {\n"
-        + "  @BindDimen(1) float one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getDimension(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void simpleInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindDimen;\n"
-        + "public class Test {\n"
-        + "  @BindDimen(1) int one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getDimensionPixelSize(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindDimenTest {
   @Test public void typeMustBeIntOrFloat() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindDrawableTest.java b/butterknife/src/test/java/butterknife/BindDrawableTest.java
index 14044bf4..742fa1c5 100644
--- a/butterknife/src/test/java/butterknife/BindDrawableTest.java
+++ b/butterknife/src/test/java/butterknife/BindDrawableTest.java
@@ -8,59 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindDrawableTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.drawable.Drawable;\n"
-        + "import butterknife.BindDrawable;\n"
-        + "public class Test {\n"
-        + "  @BindDrawable(1) Drawable one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ContextCompat.getDrawable(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindDrawableTest {
   @Test public void simpleSdk21() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindFloatTest.java b/butterknife/src/test/java/butterknife/BindFloatTest.java
index cbbd489b..56980458 100644
--- a/butterknife/src/test/java/butterknife/BindFloatTest.java
+++ b/butterknife/src/test/java/butterknife/BindFloatTest.java
@@ -8,58 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindFloatTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;"
-        + "import butterknife.BindFloat;"
-        + "public class Test {"
-        + "  @BindFloat(1) float one;"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = Utils.getFloat(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindFloatTest {
   @Test public void typeMustBeFloat() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindIntTest.java b/butterknife/src/test/java/butterknife/BindIntTest.java
index bcb6652d..0b7ef2ca 100644
--- a/butterknife/src/test/java/butterknife/BindIntTest.java
+++ b/butterknife/src/test/java/butterknife/BindIntTest.java
@@ -8,59 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindIntTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindInt;\n"
-        + "public class Test {\n"
-        + "  @BindInt(1) int one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getInteger(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindIntTest {
   @Test public void typeMustBeInt() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindStringTest.java b/butterknife/src/test/java/butterknife/BindStringTest.java
index 13482c40..27d68879 100644
--- a/butterknife/src/test/java/butterknife/BindStringTest.java
+++ b/butterknife/src/test/java/butterknife/BindStringTest.java
@@ -8,59 +8,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindStringTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindString;\n"
-        + "public class Test {\n"
-        + "  @BindString(1) String one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = res.getString(1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
+public final class BindStringTest {
   @Test public void typeMustBeString() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
