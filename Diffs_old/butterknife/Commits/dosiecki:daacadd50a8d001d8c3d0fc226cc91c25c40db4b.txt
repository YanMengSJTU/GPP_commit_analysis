diff --git a/butterknife/src/main/java/butterknife/OnGroupClick.java b/butterknife/src/main/java/butterknife/OnGroupClick.java
new file mode 100644
index 00000000..4481d6ec
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/OnGroupClick.java
@@ -0,0 +1,45 @@
+package butterknife;
+
+import android.view.View;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static android.widget.ExpandableListView.OnGroupClickListener;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a method to an {@link OnGroupClickListener OnGroupClickListener} on the view for each ID
+ * specified.
+ * <pre><code>
+ * {@literal @}OnGroupClick(R.id.example_list) void onGroupClick(int position) {
+ *   Toast.makeText(this, "Clicked group position " + position + "!", Toast.LENGTH_SHORT).show();
+ * }
+ * </code></pre>
+ * Any number of parameters from {@link OnGroupClickListener#onGroupClick(android.widget.ExpandableListView,
+ * android.view.View, int, long) onGroupClick} may be used on the method.
+ */
+@Target(METHOD)
+@Retention(CLASS)
+@ListenerClass(
+    targetType = "android.widget.ExpandableListView",
+    setter = "setOnGroupClickListener",
+    type = "android.widget.ExpandableListView.OnGroupClickListener",
+    method = @ListenerMethod(
+        name = "onGroupClick",
+        parameters = {
+            "android.widget.ExpandableListView",
+            "android.view.View",
+            "int",
+            "long"
+        },
+        returnType = "boolean",
+        defaultReturn = "false"
+    )
+)
+public @interface OnGroupClick {
+  /** View IDs to which the method will be bound. */
+  int[] value() default { View.NO_ID };
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index c8b696ff..31fa5996 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -7,6 +7,7 @@
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
 import butterknife.OnFocusChange;
+import butterknife.OnGroupClick;
 import butterknife.OnItemClick;
 import butterknife.OnItemLongClick;
 import butterknife.OnItemSelected;
@@ -76,6 +77,7 @@
       OnClick.class, //
       OnEditorAction.class, //
       OnFocusChange.class, //
+      OnGroupClick.class, //
       OnItemClick.class, //
       OnItemLongClick.class, //
       OnItemSelected.class, //
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
index cc3c4613..6ffb1985 100644
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
@@ -5,6 +5,7 @@
 import android.view.View;
 import android.widget.AdapterView;
 import android.widget.CompoundButton;
+import android.widget.ExpandableListView;
 import android.widget.TextView;
 import butterknife.FindView;
 import butterknife.FindViews;
@@ -12,6 +13,7 @@
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
 import butterknife.OnFocusChange;
+import butterknife.OnGroupClick;
 import butterknife.OnItemClick;
 import butterknife.OnItemLongClick;
 import butterknife.OnItemSelected;
@@ -397,4 +399,38 @@ void beforeTextChangedAllMethods() {}
   void afterTextChangedAllMethods() {}
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
+
+  @OnGroupClick(1620)
+  boolean groupClick() {return false;}
+  @OnGroupClick(1630)
+  boolean groupClick(ExpandableListView one) {return false;}
+  @OnGroupClick(1640)
+  boolean groupClick(View one) {return false;}
+  @OnGroupClick(1650)
+  boolean groupClick(int one) {return false;}
+  @OnGroupClick(1660)
+  boolean groupClick(long one) {return false;}
+  @OnGroupClick(1670)
+  boolean groupClick(ExpandableListView one, View two) {return false;}
+  @OnGroupClick(1680)
+  boolean groupClick(ExpandableListView one, int two) {return false;}
+  @OnGroupClick(1690)
+  boolean groupClick(ExpandableListView one, long two) {return false;}
+  @OnGroupClick(1700)
+  boolean groupClick(View one, long two) {return false;}
+  @OnGroupClick(1710)
+  boolean groupClick(int one, long two) {return false;}
+  @OnGroupClick(1720)
+  boolean groupClick(ExpandableListView one, View two, int three) {return false;}
+  @OnGroupClick(1730)
+  boolean groupClick(ExpandableListView one, View two, long three) {return false;}
+  @OnGroupClick(1740)
+  boolean groupClick(ExpandableListView one, int two, long three) {return false;}
+  @OnGroupClick(1750)
+  boolean groupClick(View one, int two, long three) {return false;}
+  @OnGroupClick(1760)
+  boolean groupClick(ExpandableListView one, View two, int three, long four) {return false;}
+
+  @OnGroupClick({ 1770, 1780 })
+  boolean groupClickMultiple() {return false;}
 }
diff --git a/butterknife/src/test/java/butterknife/internal/OnGroupClickTest.java b/butterknife/src/test/java/butterknife/internal/OnGroupClickTest.java
new file mode 100644
index 00000000..1cc8eb3f
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/OnGroupClickTest.java
@@ -0,0 +1,248 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
+public class OnGroupClickTest {
+  @Test public void onClickInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnGroupClick;",
+        "public class Test extends Activity {",
+        "  @OnGroupClick(1) boolean doStuff() {return false;}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((android.widget.ExpandableListView) view).setOnGroupClickListener(",
+            "      new android.widget.ExpandableListView.OnGroupClickListener() {",
+            "        @Override public boolean onGroupClick(",
+            "            android.widget.ExpandableListView p0, android.view.View p1, int p2, long p3) {",
+            "          return target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickInjectionWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupClick;",
+        "public class Test extends Activity {",
+        "  @OnGroupClick(1) boolean doStuff(",
+        "    ExpandableListView parent,",
+        "    View view,",
+        "    int position,",
+        "    long id",
+        "  ) {return false;}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((android.widget.ExpandableListView) view).setOnGroupClickListener(",
+            "      new android.widget.ExpandableListView.OnGroupClickListener() {",
+            "        @Override public boolean onGroupClick(",
+            "            android.widget.ExpandableListView p0, android.view.View p1, int p2, long p3) {",
+            "          return target.doStuff(p0, p1, p2, p3);",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickInjectionWithParameterSubset() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupClick;",
+        "public class Test extends Activity {",
+        "  @OnGroupClick(1) boolean doStuff(",
+        "    ExpandableListView parent,",
+        "    int position",
+        "  ) {return false;}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((android.widget.ExpandableListView) view).setOnGroupClickListener(",
+            "      new android.widget.ExpandableListView.OnGroupClickListener() {",
+            "        @Override public boolean onGroupClick(",
+            "            android.widget.ExpandableListView p0, android.view.View p1, int p2, long p3) {",
+            "          return target.doStuff(p0, p2);",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickRootViewInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupClick;",
+        "public class Test extends ExpandableListView {",
+        "  @OnGroupClick boolean doStuff() {return false;}",
+        "  public Test(Context context) {",
+        "    super(context);",
+        "  }",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = target;",
+            "    ((android.widget.ExpandableListView) view).setOnGroupClickListener(",
+            "      new android.widget.ExpandableListView.OnGroupClickListener() {",
+            "        @Override public boolean onGroupClick(",
+            "          android.widget.ExpandableListView p0,",
+            "          android.view.View p1,",
+            "          int p2,",
+            "          long p3",
+            "        ) {",
+            "          return target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsWithInvalidId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.app.Activity;",
+        "import butterknife.OnGroupClick;",
+        "public class Test extends Activity {",
+        "  @OnGroupClick({1, -1}) boolean doStuff() {return false;}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining("@OnGroupClick annotation contains invalid ID -1. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsWithInvalidParameterConfiguration() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupClick;",
+        "public class Test extends Activity {",
+        "  @OnGroupClick(1) boolean doStuff(",
+        "    ExpandableListView parent,",
+        "    View view,",
+        "    View whatIsThis",
+        "  ) {return false;}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining(Joiner.on('\n').join(
+            "Unable to match @OnGroupClick method arguments. (test.Test.doStuff)",
+            "  ",
+            "    Parameter #1: android.widget.ExpandableListView",
+            "      matched listener parameter #1: android.widget.ExpandableListView",
+            "  ",
+            "    Parameter #2: android.view.View",
+            "      matched listener parameter #2: android.view.View",
+            "  ",
+            "    Parameter #3: android.view.View",
+            "      did not match any listener parameters",
+            "  ",
+            "  Methods may have up to 4 parameter(s):",
+            "  ",
+            "    android.widget.ExpandableListView",
+            "    android.view.View",
+            "    int",
+            "    long",
+            "  ",
+            "  These may be listed in any order but will be searched for from top to bottom."))
+        .in(source).onLine(7);
+  }
+}
