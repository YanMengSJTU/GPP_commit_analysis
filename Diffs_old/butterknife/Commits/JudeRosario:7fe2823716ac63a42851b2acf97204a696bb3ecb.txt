diff --git a/README.md b/README.md
index 5f824767..a27fe2dd 100644
--- a/README.md
+++ b/README.md
@@ -3,18 +3,18 @@ Butter Knife
 
 ![Logo](website/static/logo.png)
 
-View "injection" library for Android which uses annotation processing to generate boilerplate code
-for you.
+Field and method binding for Android views which uses annotation processing to generate boilerplate
+code for you.
 
- * Eliminate `findViewById` calls by using `@InjectView` on fields.
- * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,
+ * Eliminate `findViewById` calls by using `@FindView` on fields.
+ * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
 
 ```java
 class ExampleActivity extends Activity {
-  @InjectView(R.id.user) EditText username;
-  @InjectView(R.id.pass) EditText password;
+  @FindView(R.id.user) EditText username;
+  @FindView(R.id.pass) EditText password;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -23,8 +23,8 @@ class ExampleActivity extends Activity {
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this);
+    // TODO Use fields...
   }
 }
 ```
diff --git a/butterknife-sample/pom.xml b/butterknife-sample/pom.xml
index 02877291..8fcf2319 100644
--- a/butterknife-sample/pom.xml
+++ b/butterknife-sample/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>6.1.1-SNAPSHOT</version>
+    <version>7.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife-sample</artifactId>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
index 89fe3c13..12391036 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
@@ -9,8 +9,8 @@
 import android.widget.TextView;
 import android.widget.Toast;
 import butterknife.ButterKnife;
-import butterknife.InjectView;
-import butterknife.InjectViews;
+import butterknife.FindView;
+import butterknife.FindViews;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
@@ -29,13 +29,13 @@
     }
   };
 
-  @InjectView(R.id.title) TextView title;
-  @InjectView(R.id.subtitle) TextView subtitle;
-  @InjectView(R.id.hello) Button hello;
-  @InjectView(R.id.list_of_things) ListView listOfThings;
-  @InjectView(R.id.footer) TextView footer;
+  @FindView(R.id.title) TextView title;
+  @FindView(R.id.subtitle) TextView subtitle;
+  @FindView(R.id.hello) Button hello;
+  @FindView(R.id.list_of_things) ListView listOfThings;
+  @FindView(R.id.footer) TextView footer;
 
-  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello })
+  @FindViews({ R.id.title, R.id.subtitle, R.id.hello })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
@@ -57,11 +57,11 @@
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
+    ButterKnife.bind(this);
 
-    // Contrived code to use the "injected" views.
+    // Contrived code to use the bound fields.
     title.setText("Butter Knife");
-    subtitle.setText("View \"injection\" for Android.");
+    subtitle.setText("Field and method binding for Android views.");
     footer.setText("by Jake Wharton");
     hello.setText("Say Hello");
 
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
index f5a00178..71131356 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
@@ -7,7 +7,7 @@
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 import butterknife.ButterKnife;
-import butterknife.InjectView;
+import butterknife.FindView;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -51,12 +51,12 @@ public SimpleAdapter(Context context) {
   }
 
   static class ViewHolder {
-    @InjectView(R.id.word) TextView word;
-    @InjectView(R.id.length) TextView length;
-    @InjectView(R.id.position) TextView position;
+    @FindView(R.id.word) TextView word;
+    @FindView(R.id.length) TextView length;
+    @FindView(R.id.position) TextView position;
 
     ViewHolder(View view) {
-      ButterKnife.inject(this, view);
+      ButterKnife.bind(this, view);
     }
   }
 }
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
index b71ae5bf..676bc290 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
@@ -23,7 +23,7 @@
     assertThat(activity.listOfThings).hasId(R.id.list_of_things);
     assertThat(activity.footer).hasId(R.id.footer);
 
-    ButterKnife.reset(activity);
+    ButterKnife.unbind(activity);
     assertThat(activity.title).isNull();
     assertThat(activity.subtitle).isNull();
     assertThat(activity.hello).isNull();
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
index b19803be..092bb797 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
@@ -26,7 +26,7 @@
     assertThat(holder.length).hasId(R.id.length);
     assertThat(holder.position).hasId(R.id.position);
 
-    ButterKnife.reset(holder);
+    ButterKnife.unbind(holder);
     assertThat(holder.word).isNull();
     assertThat(holder.length).isNull();
     assertThat(holder.position).isNull();
diff --git a/butterknife/pom.xml b/butterknife/pom.xml
index 248ee6c2..58f206b0 100644
--- a/butterknife/pom.xml
+++ b/butterknife/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>6.1.1-SNAPSHOT</version>
+    <version>7.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife</artifactId>
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 2b2822e3..43e6a6fb 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -17,31 +17,31 @@
 import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;
 
 /**
- * View "injection" utilities. Use this class to simplify finding views and attaching listeners by
- * injecting them.
+ * Field and method binding for Android views. Use this class to simplify finding views and
+ * attaching listeners by binding them with annotations.
  * <p>
  * Injecting views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}InjectView(R.id.title) EditText titleView;
- *   {@literal @}InjectView(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}FindView(R.id.title) EditText titleView;
+ *   {@literal @}FindView(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
  *     setContentView(R.layout.example_activity);
- *     ButterKnife.inject(this);
+ *     ButterKnife.bind(this);
  *   }
  * }
  * </code></pre>
- * Injection can be performed directly on an {@linkplain #inject(Activity) activity}, a
- * {@linkplain #inject(View) view}, or a {@linkplain #inject(Dialog) dialog}. Alternate objects to
- * inject can be specified along with an {@linkplain #inject(Object, Activity) activity},
- * {@linkplain #inject(Object, View) view}, or
- * {@linkplain #inject(Object, android.app.Dialog) dialog}.
+ * Injection can be performed directly on an {@linkplain #bind(Activity) activity}, a
+ * {@linkplain #bind(View) view}, or a {@linkplain #bind(Dialog) dialog}. Alternate objects to
+ * bind can be specified along with an {@linkplain #bind(Object, Activity) activity},
+ * {@linkplain #bind(Object, View) view}, or
+ * {@linkplain #bind(Object, android.app.Dialog) dialog}.
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -51,7 +51,7 @@
  * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>
  * </ul>
  * <p>
- * To inject listeners to your views you can annotate your methods:
+ * To bind listeners to your views you can annotate your methods:
  * <pre><code>
  * {@literal @}OnClick(R.id.submit) void onSubmit() {
  *   // React to button click.
@@ -64,14 +64,15 @@
  * }
  * </code></pre>
  * <p>
- * Be default, views are required to be present in the layout for both field and method injections.
- * If a view is optional add the {@link Optional @Optional} annotation.
+ * Be default, views are required to be present in the layout for both field and method bindings.
+ * If a view is optional add a {@code @Nullable} annotation such as the one in the
+ * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library.
  * <pre><code>
- * {@literal @}Optional @InjectView(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @FindView(R.id.title) TextView subtitleView;
  * </code></pre>
  *
- * @see InjectView
- * @see InjectViews
+ * @see FindView
+ * @see FindViews
  * @see OnCheckedChanged
  * @see OnClick
  * @see OnEditorAction
@@ -120,12 +121,33 @@ private ButterKnife() {
       }
     };
 
+    private static <T> T[] filterNull(T[] views) {
+      int newSize = views.length;
+      for (T view : views) {
+        if (view == null) {
+          newSize -= 1;
+        }
+      }
+      if (newSize == views.length) {
+        return views;
+      }
+      //noinspection unchecked
+      T[] newViews = (T[]) new Object[newSize];
+      int nextIndex = 0;
+      for (T view : views) {
+        if (view != null) {
+          newViews[nextIndex++] = view;
+        }
+      }
+      return newViews;
+    }
+
     public static <T> T[] arrayOf(T... views) {
-      return views;
+      return filterNull(views);
     }
 
     public static <T> List<T> listOf(T... views) {
-      return new ImmutableList<T>(views);
+      return new ImmutableList<T>(filterNull(views));
     }
 
     public <T> T findRequiredView(Object source, int id, String who) {
@@ -138,7 +160,7 @@ private ButterKnife() {
             + id
             + " for "
             + who
-            + " was not found. If this view is optional add '@Optional' annotation.");
+            + " was not found. If this view is optional add '@Nullable' annotation.");
       }
       return view;
     }
@@ -190,9 +212,9 @@ private ButterKnife() {
   }
 
   /** DO NOT USE: Exposed for generated code. */
-  public interface Injector<T> {
-    void inject(Finder finder, T target, Object source);
-    void reset(T target);
+  public interface ViewBinder<T> {
+    void bind(Finder finder, T target, Object source);
+    void unbind(T target);
   }
 
   /** An action that can be applied to a list of views. */
@@ -210,11 +232,11 @@ private ButterKnife() {
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
-  static final Map<Class<?>, Injector<Object>> INJECTORS =
-      new LinkedHashMap<Class<?>, Injector<Object>>();
-  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {
-    @Override public void inject(Finder finder, Object target, Object source) { }
-    @Override public void reset(Object target) { }
+  static final Map<Class<?>, ViewBinder<Object>> INJECTORS =
+      new LinkedHashMap<Class<?>, ViewBinder<Object>>();
+  static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
+    @Override public void bind(Finder finder, Object target, Object source) { }
+    @Override public void unbind(Object target) { }
   };
 
   /** Control whether debug logging is enabled. */
@@ -226,126 +248,122 @@ public static void setDebug(boolean debug) {
    * Inject annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
    *
-   * @param target Target activity for field injection.
+   * @param target Target activity for view binding.
    */
-  public static void inject(Activity target) {
-    inject(target, target, Finder.ACTIVITY);
+  public static void bind(Activity target) {
+    bind(target, target, Finder.ACTIVITY);
   }
 
   /**
    * Inject annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
    *
-   * @param target Target view for field injection.
+   * @param target Target view for view binding.
    */
-  public static void inject(View target) {
-    inject(target, target, Finder.VIEW);
+  public static void bind(View target) {
+    bind(target, target, Finder.VIEW);
   }
 
   /**
    * Inject annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
    *
-   * @param target Target dialog for field injection.
+   * @param target Target dialog for view binding.
    */
-  public static void inject(Dialog target) {
-    inject(target, target, Finder.DIALOG);
+  public static void bind(Dialog target) {
+    bind(target, target, Finder.DIALOG);
   }
 
   /**
    * Inject annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source Activity on which IDs will be looked up.
    */
-  public static void inject(Object target, Activity source) {
-    inject(target, source, Finder.ACTIVITY);
+  public static void bind(Object target, Activity source) {
+    bind(target, source, Finder.ACTIVITY);
   }
 
   /**
    * Inject annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source View root on which IDs will be looked up.
    */
-  public static void inject(Object target, View source) {
-    inject(target, source, Finder.VIEW);
+  public static void bind(Object target, View source) {
+    bind(target, source, Finder.VIEW);
   }
 
   /**
    * Inject annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source Dialog on which IDs will be looked up.
    */
-  public static void inject(Object target, Dialog source) {
-    inject(target, source, Finder.DIALOG);
+  public static void bind(Object target, Dialog source) {
+    bind(target, source, Finder.DIALOG);
   }
 
   /**
-   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}
+   * Reset fields annotated with {@link FindView @FindView} and {@link FindViews @FindViews}
    * to {@code null}.
    * <p>
    * This should only be used in the {@code onDestroyView} method of a fragment.
    *
-   * @param target Target class for field reset.
+   * @param target Target class for field unbind.
    */
-  public static void reset(Object target) {
+  public static void unbind(Object target) {
     Class<?> targetClass = target.getClass();
     try {
-      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());
-      Injector<Object> injector = findInjectorForClass(targetClass);
-      if (injector != null) {
-        injector.reset(target);
+      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
+      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
+      if (viewBinder != null) {
+        viewBinder.unbind(target);
       }
-    } catch (RuntimeException e) {
-      throw e;
     } catch (Exception e) {
-      throw new RuntimeException("Unable to reset views for " + target, e);
+      throw new RuntimeException("Unable to unbind views for " + targetClass.getName(), e);
     }
   }
 
-  static void inject(Object target, Object source, Finder finder) {
+  static void bind(Object target, Object source, Finder finder) {
     Class<?> targetClass = target.getClass();
     try {
-      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());
-      Injector<Object> injector = findInjectorForClass(targetClass);
-      if (injector != null) {
-        injector.inject(finder, target, source);
+      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
+      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
+      if (viewBinder != null) {
+        viewBinder.bind(finder, target, source);
       }
-    } catch (RuntimeException e) {
-      throw e;
     } catch (Exception e) {
-      throw new RuntimeException("Unable to inject views for " + target, e);
+      throw new RuntimeException("Unable to bind views for " + targetClass.getName(), e);
     }
   }
 
-  private static Injector<Object> findInjectorForClass(Class<?> cls)
+  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
       throws IllegalAccessException, InstantiationException {
-    Injector<Object> injector = INJECTORS.get(cls);
-    if (injector != null) {
-      if (debug) Log.d(TAG, "HIT: Cached in injector map.");
-      return injector;
+    ViewBinder<Object> viewBinder = INJECTORS.get(cls);
+    if (viewBinder != null) {
+      if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
+      return viewBinder;
     }
     String clsName = cls.getName();
     if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
-      return NOP_INJECTOR;
+      return NOP_VIEW_BINDER;
     }
     try {
-      Class<?> injectorClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);
+      Class<?> viewBindingClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);
       //noinspection unchecked
-      injector = (Injector<Object>) injectorClass.newInstance();
-      if (debug) Log.d(TAG, "HIT: Class loaded injection class.");
+      viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
+      if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
     } catch (ClassNotFoundException e) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
-      injector = findInjectorForClass(cls.getSuperclass());
+      viewBinder = findViewBinderForClass(cls.getSuperclass());
     }
-    INJECTORS.put(cls, injector);
-    return injector;
+    INJECTORS.put(cls, viewBinder);
+    return viewBinder;
   }
 
   /** Apply the specified {@code action} across the {@code list} of views. */
diff --git a/butterknife/src/main/java/butterknife/InjectView.java b/butterknife/src/main/java/butterknife/FindView.java
similarity index 81%
rename from butterknife/src/main/java/butterknife/InjectView.java
rename to butterknife/src/main/java/butterknife/FindView.java
index 3d401071..7a84a73b 100644
--- a/butterknife/src/main/java/butterknife/InjectView.java
+++ b/butterknife/src/main/java/butterknife/FindView.java
@@ -10,13 +10,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}InjectView(R.id.title) TextView title;
+ * {@literal @}FindView(R.id.title) TextView title;
  * </code></pre>
- *
- * @see Optional
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface InjectView {
+public @interface FindView {
   /** View ID to which the field will be bound. */
   int value();
 }
diff --git a/butterknife/src/main/java/butterknife/InjectViews.java b/butterknife/src/main/java/butterknife/FindViews.java
similarity index 76%
rename from butterknife/src/main/java/butterknife/InjectViews.java
rename to butterknife/src/main/java/butterknife/FindViews.java
index 0a5145f6..9db7ea36 100644
--- a/butterknife/src/main/java/butterknife/InjectViews.java
+++ b/butterknife/src/main/java/butterknife/FindViews.java
@@ -11,15 +11,15 @@
  * Bind a field to the view for each ID specified in a {@link List} or array. Each view will
  * automatically be cast to the list or array type.
  * <pre><code>
- * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List&lt;TextView&gt; nameViews;
  *
- * {@literal @}InjectViews({R.id.address_line_1, R.id.address_line_2})
+ * {@literal @}FindViews({R.id.address_line_1, R.id.address_line_2})
  * EditText[] addressViews;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface InjectViews {
+public @interface FindViews {
   /** View IDs to which the field will be bound. */
   int[] value();
 }
diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
index ebf15c7f..e9ed8ec5 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
@@ -23,7 +23,6 @@
  * onCheckedChanged} may be used on the method.
  *
  * @see OnCheckedChangeListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnClick.java b/butterknife/src/main/java/butterknife/OnClick.java
index 7ca0b0b7..76f69fe0 100644
--- a/butterknife/src/main/java/butterknife/OnClick.java
+++ b/butterknife/src/main/java/butterknife/OnClick.java
@@ -22,7 +22,6 @@
  * method.
  *
  * @see OnClickListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife/src/main/java/butterknife/OnEditorAction.java
index fa008a96..4d672321 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife/src/main/java/butterknife/OnEditorAction.java
@@ -24,7 +24,6 @@
  * onEditorAction} may be used on the method.
  *
  * @see OnEditorActionListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnFocusChange.java b/butterknife/src/main/java/butterknife/OnFocusChange.java
index 81064094..15c6b6fb 100644
--- a/butterknife/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife/src/main/java/butterknife/OnFocusChange.java
@@ -22,7 +22,6 @@
  * boolean) onFocusChange} may be used on the method.
  *
  * @see OnFocusChangeListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnItemClick.java b/butterknife/src/main/java/butterknife/OnItemClick.java
index acd309b3..2c29edc6 100644
--- a/butterknife/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemClick.java
@@ -22,7 +22,6 @@
  * android.view.View, int, long) onItemClick} may be used on the method.
  *
  * @see OnItemClickListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnItemLongClick.java b/butterknife/src/main/java/butterknife/OnItemLongClick.java
index 45e2a636..9cc29fa5 100644
--- a/butterknife/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java
@@ -24,7 +24,6 @@
  * int, long) onItemLongClick} may be used on the method.
  *
  * @see OnItemLongClickListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnItemSelected.java b/butterknife/src/main/java/butterknife/OnItemSelected.java
index f668f850..9857cb72 100644
--- a/butterknife/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife/src/main/java/butterknife/OnItemSelected.java
@@ -31,7 +31,6 @@
  * </code></pre>
  *
  * @see OnItemSelectedListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnLongClick.java b/butterknife/src/main/java/butterknife/OnLongClick.java
index db880763..995ccb6f 100644
--- a/butterknife/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnLongClick.java
@@ -23,7 +23,6 @@
  * used on the method.
  *
  * @see OnLongClickListener
- * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
 @ListenerClass(
diff --git a/butterknife/src/main/java/butterknife/OnPageChange.java b/butterknife/src/main/java/butterknife/OnPageChange.java
index 0f9f780c..f0ec3864 100644
--- a/butterknife/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife/src/main/java/butterknife/OnPageChange.java
@@ -25,8 +25,6 @@
  *   Toast.makeText(this, "State changed: " + state + "!", LENGTH_SHORT).show();
  * }
  * </code></pre>
- *
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnTextChanged.java b/butterknife/src/main/java/butterknife/OnTextChanged.java
index 7368d7c0..0228748b 100644
--- a/butterknife/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife/src/main/java/butterknife/OnTextChanged.java
@@ -29,7 +29,6 @@
  * </code></pre>
  *
  * @see TextWatcher
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/OnTouch.java b/butterknife/src/main/java/butterknife/OnTouch.java
index 04a9c5c3..cf6be01b 100644
--- a/butterknife/src/main/java/butterknife/OnTouch.java
+++ b/butterknife/src/main/java/butterknife/OnTouch.java
@@ -13,8 +13,9 @@
 /**
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnTouch(R.id.example) void onTouch() {
+ * {@literal @}OnTouch(R.id.example) boolean onTouch() {
  *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();
+ *   return false;
  * }
  * </code></pre>
  * Any number of parameters from
@@ -22,7 +23,6 @@
  * on the method.
  *
  * @see OnTouchListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
diff --git a/butterknife/src/main/java/butterknife/Optional.java b/butterknife/src/main/java/butterknife/Optional.java
deleted file mode 100644
index 8299e22a..00000000
--- a/butterknife/src/main/java/butterknife/Optional.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Denote that the view specified by the injection is not required to be present.
- * <pre><code>
- * {@literal @}Optional @InjectView(R.id.title) TextView subtitleView;
- * </code></pre>
- */
-@Retention(CLASS) @Target({ FIELD, METHOD })
-public @interface Optional {
-}
diff --git a/butterknife/src/main/java/butterknife/internal/Binding.java b/butterknife/src/main/java/butterknife/internal/Binding.java
index 1ab24e66..2804ad2e 100644
--- a/butterknife/src/main/java/butterknife/internal/Binding.java
+++ b/butterknife/src/main/java/butterknife/internal/Binding.java
@@ -1,6 +1,6 @@
 package butterknife.internal;
 
-/** A field or method view injection binding. */
+/** A field or method view binding. */
 interface Binding {
   /** A description of the binding in human readable form (e.g., "field 'foo'"). */
   String getDescription();
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/BindingClass.java
similarity index 70%
rename from butterknife/src/main/java/butterknife/internal/ViewInjector.java
rename to butterknife/src/main/java/butterknife/internal/BindingClass.java
index cce9545b..89651dde 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java
@@ -14,52 +14,51 @@
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
-final class ViewInjector {
-  private final Map<Integer, ViewInjection> viewIdMap = new LinkedHashMap<Integer, ViewInjection>();
-  private final Map<CollectionBinding, int[]> collectionBindings =
-      new LinkedHashMap<CollectionBinding, int[]>();
+final class BindingClass {
+  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<Integer, ViewBindings>();
+  private final Map<FieldCollectionBinding, int[]> collectionBindings =
+      new LinkedHashMap<FieldCollectionBinding, int[]>();
   private final String classPackage;
   private final String className;
   private final String targetClass;
-  private String parentInjector;
+  private String parentViewBinder;
 
-  ViewInjector(String classPackage, String className, String targetClass) {
+  BindingClass(String classPackage, String className, String targetClass) {
     this.classPackage = classPackage;
     this.className = className;
     this.targetClass = targetClass;
   }
 
-  void addView(int id, ViewBinding binding) {
-    getOrCreateViewInjection(id).addViewBinding(binding);
+  void addField(int id, FieldBinding binding) {
+    getOrCreateViewBindings(id).addFieldBinding(binding);
   }
 
-  boolean addListener(int id, ListenerClass listener, ListenerMethod method,
-      ListenerBinding binding) {
-    ViewInjection viewInjection = getOrCreateViewInjection(id);
-    if (viewInjection.hasListenerBinding(listener, method)
+  void addFieldCollection(int[] ids, FieldCollectionBinding binding) {
+    collectionBindings.put(binding, ids);
+  }
+
+  boolean addMethod(int id, ListenerClass listener, ListenerMethod method, MethodBinding binding) {
+    ViewBindings viewBindings = getOrCreateViewBindings(id);
+    if (viewBindings.hasMethodBinding(listener, method)
         && !"void".equals(method.returnType())) {
       return false;
     }
-    viewInjection.addListenerBinding(listener, method, binding);
+    viewBindings.addMethodBinding(listener, method, binding);
     return true;
   }
 
-  void addCollection(int[] ids, CollectionBinding binding) {
-    collectionBindings.put(binding, ids);
-  }
-
-  void setParentInjector(String parentInjector) {
-    this.parentInjector = parentInjector;
+  void setParentViewBinder(String parentViewBinder) {
+    this.parentViewBinder = parentViewBinder;
   }
 
-  ViewInjection getViewInjection(int id) {
+  ViewBindings getViewInjection(int id) {
     return viewIdMap.get(id);
   }
 
-  private ViewInjection getOrCreateViewInjection(int id) {
-    ViewInjection viewId = viewIdMap.get(id);
+  private ViewBindings getOrCreateViewBindings(int id) {
+    ViewBindings viewId = viewIdMap.get(id);
     if (viewId == null) {
-      viewId = new ViewInjection(id);
+      viewId = new ViewBindings(id);
       viewIdMap.put(id, viewId);
     }
     return viewId;
@@ -76,55 +75,56 @@ String brewJava() {
 
     builder.append("import android.view.View;\n");
     builder.append("import butterknife.ButterKnife.Finder;\n");
-    if (parentInjector == null) {
-      builder.append("import butterknife.ButterKnife.Injector;\n");
+    if (parentViewBinder == null) {
+      builder.append("import butterknife.ButterKnife.ViewBinder;\n");
     }
     builder.append('\n');
 
     builder.append("public class ").append(className);
     builder.append("<T extends ").append(targetClass).append(">");
 
-    if (parentInjector != null) {
-      builder.append(" extends ").append(parentInjector).append("<T>");
+    if (parentViewBinder != null) {
+      builder.append(" extends ").append(parentViewBinder).append("<T>");
     } else {
-      builder.append(" implements Injector<T>");
+      builder.append(" implements ViewBinder<T>");
     }
     builder.append(" {\n");
 
-    emitInject(builder);
+    emitBindMethod(builder);
     builder.append('\n');
-    emitReset(builder);
+    emitUnbindMethod(builder);
 
     builder.append("}\n");
     return builder.toString();
   }
 
-  private void emitInject(StringBuilder builder) {
+  private void emitBindMethod(StringBuilder builder) {
     builder.append("  @Override ")
-        .append("public void inject(final Finder finder, final T target, Object source) {\n");
+        .append("public void bind(final Finder finder, final T target, Object source) {\n");
 
-    // Emit a call to the superclass injector, if any.
-    if (parentInjector != null) {
-      builder.append("    super.inject(finder, target, source);\n\n");
+    // Emit a call to the superclass binder, if any.
+    if (parentViewBinder != null) {
+      builder.append("    super.bind(finder, target, source);\n\n");
     }
 
     // Local variable in which all views will be temporarily stored.
     builder.append("    View view;\n");
 
-    // Loop over each view injection and emit it.
-    for (ViewInjection injection : viewIdMap.values()) {
-      emitViewInjection(builder, injection);
+    // Loop over each view bindings and emit it.
+    for (ViewBindings bindings : viewIdMap.values()) {
+      emitViewBindings(builder, bindings);
     }
 
     // Loop over each collection binding and emit it.
-    for (Map.Entry<CollectionBinding, int[]> entry : collectionBindings.entrySet()) {
+    for (Map.Entry<FieldCollectionBinding, int[]> entry : collectionBindings.entrySet()) {
       emitCollectionBinding(builder, entry.getKey(), entry.getValue());
     }
 
     builder.append("  }\n");
   }
 
-  private void emitCollectionBinding(StringBuilder builder, CollectionBinding binding, int[] ids) {
+  private void emitCollectionBinding(StringBuilder builder, FieldCollectionBinding binding,
+      int[] ids) {
     builder.append("    target.").append(binding.getName()).append(" = ");
 
     switch (binding.getKind()) {
@@ -156,46 +156,46 @@ private void emitCollectionBinding(StringBuilder builder, CollectionBinding bind
     builder.append("\n    );\n");
   }
 
-  private void emitViewInjection(StringBuilder builder, ViewInjection injection) {
+  private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
     builder.append("    view = ");
 
-    List<Binding> requiredBindings = injection.getRequiredBindings();
+    List<Binding> requiredBindings = bindings.getRequiredBindings();
     if (requiredBindings.isEmpty()) {
       builder.append("finder.findOptionalView(source, ")
-          .append(injection.getId())
+          .append(bindings.getId())
           .append(", null);\n");
     } else {
-      if (injection.getId() == View.NO_ID) {
+      if (bindings.getId() == View.NO_ID) {
         builder.append("target;\n");
       } else {
         builder.append("finder.findRequiredView(source, ")
-            .append(injection.getId())
+            .append(bindings.getId())
             .append(", \"");
         emitHumanDescription(builder, requiredBindings);
         builder.append("\");\n");
       }
     }
 
-    emitViewBindings(builder, injection);
-    emitListenerBindings(builder, injection);
+    emitFieldBindings(builder, bindings);
+    emitMethodBindings(builder, bindings);
   }
 
-  private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
-    Collection<ViewBinding> viewBindings = injection.getViewBindings();
-    if (viewBindings.isEmpty()) {
+  private void emitFieldBindings(StringBuilder builder, ViewBindings bindings) {
+    Collection<FieldBinding> fieldBindings = bindings.getFieldBindings();
+    if (fieldBindings.isEmpty()) {
       return;
     }
 
-    for (ViewBinding viewBinding : viewBindings) {
+    for (FieldBinding fieldBinding : fieldBindings) {
       builder.append("    target.")
-          .append(viewBinding.getName())
+          .append(fieldBinding.getName())
           .append(" = ");
-      if (viewBinding.requiresCast()) {
+      if (fieldBinding.requiresCast()) {
         builder.append("finder.castView(view")
             .append(", ")
-            .append(injection.getId())
+            .append(bindings.getId())
             .append(", \"");
-        emitHumanDescription(builder, viewBindings);
+        emitHumanDescription(builder, fieldBindings);
         builder.append("\");\n");
       } else {
         builder.append("view;\n");
@@ -203,26 +203,26 @@ private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
     }
   }
 
-  private void emitListenerBindings(StringBuilder builder, ViewInjection injection) {
-    Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> bindings =
-        injection.getListenerBindings();
-    if (bindings.isEmpty()) {
+  private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
       return;
     }
 
     String extraIndent = "";
 
     // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = injection.getRequiredBindings().isEmpty();
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
     if (needsNullChecked) {
       builder.append("    if (view != null) {\n");
       extraIndent = "  ";
     }
 
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> e
-        : bindings.entrySet()) {
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>> e
+        : classMethodBindings.entrySet()) {
       ListenerClass listener = e.getKey();
-      Map<ListenerMethod, Set<ListenerBinding>> methodBindings = e.getValue();
+      Map<ListenerMethod, Set<MethodBinding>> methodBindings = e.getValue();
 
       // Emit: ((OWNER_TYPE) view).SETTER_NAME(
       boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
@@ -290,11 +290,11 @@ private void emitListenerBindings(StringBuilder builder, ViewInjection injection
         }
 
         if (methodBindings.containsKey(method)) {
-          Set<ListenerBinding> set = methodBindings.get(method);
-          Iterator<ListenerBinding> iterator = set.iterator();
+          Set<MethodBinding> set = methodBindings.get(method);
+          Iterator<MethodBinding> iterator = set.iterator();
 
           while (iterator.hasNext()) {
-            ListenerBinding binding = iterator.next();
+            MethodBinding binding = iterator.next();
             builder.append("target.").append(binding.getName()).append('(');
             List<Parameter> parameters = binding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -371,18 +371,18 @@ private void emitListenerBindings(StringBuilder builder, ViewInjection injection
     }
   }
 
-  private void emitReset(StringBuilder builder) {
-    builder.append("  @Override public void reset(T target) {\n");
-    if (parentInjector != null) {
-      builder.append("    super.reset(target);\n\n");
+  private void emitUnbindMethod(StringBuilder builder) {
+    builder.append("  @Override public void unbind(T target) {\n");
+    if (parentViewBinder != null) {
+      builder.append("    super.unbind(target);\n\n");
     }
-    for (ViewInjection injection : viewIdMap.values()) {
-      for (ViewBinding viewBinding : injection.getViewBindings()) {
-        builder.append("    target.").append(viewBinding.getName()).append(" = null;\n");
+    for (ViewBindings bindings : viewIdMap.values()) {
+      for (FieldBinding fieldBinding : bindings.getFieldBindings()) {
+        builder.append("    target.").append(fieldBinding.getName()).append(" = null;\n");
       }
     }
-    for (CollectionBinding collectionBinding : collectionBindings.keySet()) {
-      builder.append("    target.").append(collectionBinding.getName()).append(" = null;\n");
+    for (FieldCollectionBinding fieldCollectionBinding : collectionBindings.keySet()) {
+      builder.append("    target.").append(fieldCollectionBinding.getName()).append(" = null;\n");
     }
     builder.append("  }\n");
   }
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index 2fe8878e..e654b35b 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -1,8 +1,8 @@
 package butterknife.internal;
 
 import android.view.View;
-import butterknife.InjectView;
-import butterknife.InjectViews;
+import butterknife.FindView;
+import butterknife.FindViews;
 import butterknife.OnCheckedChanged;
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
@@ -14,7 +14,6 @@
 import butterknife.OnPageChange;
 import butterknife.OnTextChanged;
 import butterknife.OnTouch;
-import butterknife.Optional;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -35,6 +34,7 @@
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 import javax.lang.model.SourceVersion;
+import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
@@ -57,10 +57,11 @@
 import static javax.tools.Diagnostic.Kind.ERROR;
 
 public final class ButterKnifeProcessor extends AbstractProcessor {
-  public static final String SUFFIX = "$$ViewInjector";
+  public static final String SUFFIX = "$$ViewBinder";
   public static final String ANDROID_PREFIX = "android.";
   public static final String JAVA_PREFIX = "java.";
   static final String VIEW_TYPE = "android.view.View";
+  private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
   private static final String LIST_TYPE = List.class.getCanonicalName();
   private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
       OnCheckedChanged.class, //
@@ -90,8 +91,8 @@
 
   @Override public Set<String> getSupportedAnnotationTypes() {
     Set<String> supportTypes = new LinkedHashSet<String>();
-    supportTypes.add(InjectView.class.getCanonicalName());
-    supportTypes.add(InjectViews.class.getCanonicalName());
+    supportTypes.add(FindView.class.getCanonicalName());
+    supportTypes.add(FindViews.class.getCanonicalName());
     for (Class<? extends Annotation> listener : LISTENERS) {
       supportTypes.add(listener.getCanonicalName());
     }
@@ -100,51 +101,52 @@
   }
 
   @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
-    Map<TypeElement, ViewInjector> targetClassMap = findAndParseTargets(env);
+    Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);
 
-    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {
+    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
       TypeElement typeElement = entry.getKey();
-      ViewInjector viewInjector = entry.getValue();
+      BindingClass bindingClass = entry.getValue();
 
       try {
-        JavaFileObject jfo = filer.createSourceFile(viewInjector.getFqcn(), typeElement);
+        JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);
         Writer writer = jfo.openWriter();
-        writer.write(viewInjector.brewJava());
+        writer.write(bindingClass.brewJava());
         writer.flush();
         writer.close();
       } catch (IOException e) {
-        error(typeElement, "Unable to write injector for type %s: %s", typeElement, e.getMessage());
+        error(typeElement, "Unable to write view binder for type %s: %s", typeElement,
+            e.getMessage());
       }
     }
 
     return true;
   }
 
-  private Map<TypeElement, ViewInjector> findAndParseTargets(RoundEnvironment env) {
-    Map<TypeElement, ViewInjector> targetClassMap = new LinkedHashMap<TypeElement, ViewInjector>();
+  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {
+    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<TypeElement, BindingClass>();
     Set<String> erasedTargetNames = new LinkedHashSet<String>();
 
-    // Process each @InjectView element.
-    for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {
+    // Process each @FindView element.
+    for (Element element : env.getElementsAnnotatedWith(FindView.class)) {
       try {
-        parseInjectView(element, targetClassMap, erasedTargetNames);
+        parseFindView(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
         StringWriter stackTrace = new StringWriter();
         e.printStackTrace(new PrintWriter(stackTrace));
 
-        error(element, "Unable to generate view injector for @InjectView.\n\n%s", stackTrace);
+        error(element, "Unable to generate view binder for @FindView.\n\n%s", stackTrace);
       }
     }
 
-    // Process each @InjectViews element.
-    for (Element element : env.getElementsAnnotatedWith(InjectViews.class)) {
+    // Process each @FindViews element.
+    for (Element element : env.getElementsAnnotatedWith(FindViews.class)) {
       try {
-        parseInjectViews(element, targetClassMap, erasedTargetNames);
+        parseFindViews(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
         StringWriter stackTrace = new StringWriter();
         e.printStackTrace(new PrintWriter(stackTrace));
 
-        error(element, "Unable to generate view injector for @InjectViews.\n\n%s", stackTrace);
+        error(element, "Unable to generate view binder for @FindViews.\n\n%s", stackTrace);
       }
     }
 
@@ -153,11 +155,11 @@
       findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
     }
 
-    // Try to find a parent injector for each injector.
-    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {
+    // Try to find a parent binder for each.
+    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
       String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
       if (parentClassFqcn != null) {
-        entry.getValue().setParentInjector(parentClassFqcn + SUFFIX);
+        entry.getValue().setParentViewBinder(parentClassFqcn + SUFFIX);
       }
     }
 
@@ -216,7 +218,7 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
-  private void parseInjectView(Element element, Map<TypeElement, ViewInjector> targetClassMap,
+  private void parseFindView(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -228,18 +230,18 @@ private void parseInjectView(Element element, Map<TypeElement, ViewInjector> tar
       elementType = typeVariable.getUpperBound();
     }
     if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
-      error(element, "@InjectView fields must extend from View or be an interface. (%s.%s)",
+      error(element, "@FindView fields must extend from View or be an interface. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(InjectView.class, "fields", element);
-    hasError |= isBindingInWrongPackage(InjectView.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(FindView.class, "fields", element);
+    hasError |= isBindingInWrongPackage(FindView.class, element);
 
     // Check for the other field annotation.
-    if (element.getAnnotation(InjectViews.class) != null) {
-      error(element, "Only one of @InjectView and @InjectViews is allowed. (%s.%s)",
+    if (element.getAnnotation(FindViews.class) != null) {
+      error(element, "Only one of @FindView and @FindViews is allowed. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
@@ -248,38 +250,39 @@ private void parseInjectView(Element element, Map<TypeElement, ViewInjector> tar
       return;
     }
 
-    // Assemble information on the injection point.
-    int id = element.getAnnotation(InjectView.class).value();
+    // Assemble information on the field.
+    int id = element.getAnnotation(FindView.class).value();
 
-    ViewInjector injector = targetClassMap.get(enclosingElement);
-    if (injector != null) {
-      ViewInjection viewInjection = injector.getViewInjection(id);
-      if (viewInjection != null) {
-        Iterator<ViewBinding> iterator = viewInjection.getViewBindings().iterator();
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    if (bindingClass != null) {
+      ViewBindings viewBindings = bindingClass.getViewInjection(id);
+      if (viewBindings != null) {
+        Iterator<FieldBinding> iterator = viewBindings.getFieldBindings().iterator();
         if (iterator.hasNext()) {
-          ViewBinding existingBinding = iterator.next();
+          FieldBinding existingBinding = iterator.next();
           error(element,
-              "Attempt to use @InjectView for an already injected ID %d on '%s'. (%s.%s)", id,
+              "Attempt to use @FindView for an already bound ID %d on '%s'. (%s.%s)", id,
               existingBinding.getName(), enclosingElement.getQualifiedName(),
               element.getSimpleName());
           return;
         }
       }
+    } else {
+      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     }
 
     String name = element.getSimpleName().toString();
     String type = elementType.toString();
-    boolean required = element.getAnnotation(Optional.class) == null;
+    boolean required = isRequiredInjection(element);
 
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    ViewBinding binding = new ViewBinding(name, type, required);
-    viewInjector.addView(id, binding);
+    FieldBinding binding = new FieldBinding(name, type, required);
+    bindingClass.addField(id, binding);
 
-    // Add the type-erased version to the valid injection targets set.
+    // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement.toString());
   }
 
-  private void parseInjectViews(Element element, Map<TypeElement, ViewInjector> targetClassMap,
+  private void parseFindViews(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -288,24 +291,24 @@ private void parseInjectViews(Element element, Map<TypeElement, ViewInjector> ta
     TypeMirror elementType = element.asType();
     String erasedType = doubleErasure(elementType);
     TypeMirror viewType = null;
-    CollectionBinding.Kind kind = null;
+    FieldCollectionBinding.Kind kind = null;
     if (elementType.getKind() == TypeKind.ARRAY) {
       ArrayType arrayType = (ArrayType) elementType;
       viewType = arrayType.getComponentType();
-      kind = CollectionBinding.Kind.ARRAY;
+      kind = FieldCollectionBinding.Kind.ARRAY;
     } else if (LIST_TYPE.equals(erasedType)) {
       DeclaredType declaredType = (DeclaredType) elementType;
       List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
       if (typeArguments.size() != 1) {
-        error(element, "@InjectViews List must have a generic component. (%s.%s)",
+        error(element, "@FindViews List must have a generic component. (%s.%s)",
             enclosingElement.getQualifiedName(), element.getSimpleName());
         hasError = true;
       } else {
         viewType = typeArguments.get(0);
       }
-      kind = CollectionBinding.Kind.LIST;
+      kind = FieldCollectionBinding.Kind.LIST;
     } else {
-      error(element, "@InjectViews must be a List or array. (%s.%s)",
+      error(element, "@FindViews must be a List or array. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
@@ -316,41 +319,41 @@ private void parseInjectViews(Element element, Map<TypeElement, ViewInjector> ta
 
     // Verify that the target type extends from View.
     if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
-      error(element, "@InjectViews type must extend from View or be an interface. (%s.%s)",
+      error(element, "@FindViews type must extend from View or be an interface. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(InjectViews.class, "fields", element);
-    hasError |= isBindingInWrongPackage(InjectViews.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(FindViews.class, "fields", element);
+    hasError |= isBindingInWrongPackage(FindViews.class, element);
 
     if (hasError) {
       return;
     }
 
-    // Assemble information on the injection point.
+    // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(InjectViews.class).value();
+    int[] ids = element.getAnnotation(FindViews.class).value();
     if (ids.length == 0) {
-      error(element, "@InjectViews must specify at least one ID. (%s.%s)",
+      error(element, "@FindViews must specify at least one ID. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       return;
     }
 
     Integer duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
-      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,
+      error(element, "@FindViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,
           enclosingElement.getQualifiedName(), element.getSimpleName());
     }
 
     assert viewType != null; // Always false as hasError would have been true.
     String type = viewType.toString();
-    boolean required = element.getAnnotation(Optional.class) == null;
+    boolean required = isRequiredInjection(element);
 
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    CollectionBinding binding = new CollectionBinding(name, type, kind, required);
-    viewInjector.addCollection(ids, binding);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldCollectionBinding binding = new FieldCollectionBinding(name, type, kind, required);
+    bindingClass.addFieldCollection(ids, binding);
 
     erasedTargetNames.add(enclosingElement.toString());
   }
@@ -379,7 +382,7 @@ private String doubleErasure(TypeMirror elementType) {
   }
 
   private void findAndParseListener(RoundEnvironment env,
-      Class<? extends Annotation> annotationClass, Map<TypeElement, ViewInjector> targetClassMap,
+      Class<? extends Annotation> annotationClass, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
       try {
@@ -388,14 +391,14 @@ private void findAndParseListener(RoundEnvironment env,
         StringWriter stackTrace = new StringWriter();
         e.printStackTrace(new PrintWriter(stackTrace));
 
-        error(element, "Unable to generate view injector for @%s.\n\n%s",
+        error(element, "Unable to generate view binder for @%s.\n\n%s",
             annotationClass.getSimpleName(), stackTrace.toString());
       }
     }
   }
 
   private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
-      Map<TypeElement, ViewInjector> targetClassMap, Set<String> erasedTargetNames)
+      Map<TypeElement, BindingClass> targetClassMap, Set<String> erasedTargetNames)
       throws Exception {
     // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
     if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
@@ -406,7 +409,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     ExecutableElement executableElement = (ExecutableElement) element;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
-    // Assemble information on the injection point.
+    // Assemble information on the method.
     Annotation annotation = element.getAnnotation(annotationClass);
     Method annotationValue = annotationClass.getDeclaredMethod("value");
     if (annotationValue.getReturnType() != int[].class) {
@@ -416,7 +419,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
 
     int[] ids = (int[]) annotationValue.invoke(annotation);
     String name = executableElement.getSimpleName().toString();
-    boolean required = element.getAnnotation(Optional.class) == null;
+    boolean required = isRequiredInjection(element);
 
     // Verify that the method and its containing class are accessible via generated code.
     boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
@@ -441,7 +444,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       if (id == View.NO_ID) {
         if (ids.length == 1) {
           if (!required) {
-            error(element, "ID free injection must not be annotated with @Optional. (%s.%s)",
+            error(element, "ID free binding must not be annotated with @Nullable. (%s.%s)",
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
@@ -579,17 +582,17 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       }
     }
 
-    ListenerBinding binding = new ListenerBinding(name, Arrays.asList(parameters), required);
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    MethodBinding binding = new MethodBinding(name, Arrays.asList(parameters), required);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     for (int id : ids) {
-      if (!viewInjector.addListener(id, listener, method, binding)) {
+      if (!bindingClass.addMethod(id, listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
       }
     }
 
-    // Add the type-erased version to the valid injection targets set.
+    // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement.toString());
   }
 
@@ -640,18 +643,18 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     return false;
   }
 
-  private ViewInjector getOrCreateTargetClass(Map<TypeElement, ViewInjector> targetClassMap,
+  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
       TypeElement enclosingElement) {
-    ViewInjector viewInjector = targetClassMap.get(enclosingElement);
-    if (viewInjector == null) {
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    if (bindingClass == null) {
       String targetType = enclosingElement.getQualifiedName().toString();
       String classPackage = getPackageName(enclosingElement);
       String className = getClassName(enclosingElement, classPackage) + SUFFIX;
 
-      viewInjector = new ViewInjector(classPackage, className, targetType);
-      targetClassMap.put(enclosingElement, viewInjector);
+      bindingClass = new BindingClass(classPackage, className, targetType);
+      targetClassMap.put(enclosingElement, bindingClass);
     }
-    return viewInjector;
+    return bindingClass;
   }
 
   private static String getClassName(TypeElement type, String packageName) {
@@ -659,7 +662,7 @@ private static String getClassName(TypeElement type, String packageName) {
     return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
   }
 
-  /** Finds the parent injector type in the supplied set, if any. */
+  /** Finds the parent binder type in the supplied set, if any. */
   private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
     TypeMirror type;
     while (true) {
@@ -689,4 +692,18 @@ private void error(Element element, String message, Object... args) {
   private String getPackageName(TypeElement type) {
     return elementUtils.getPackageOf(type).getQualifiedName().toString();
   }
+
+  private static boolean hasAnnotationWithName(Element element, String simpleName) {
+    for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
+      String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
+      if (simpleName.equals(annotationName)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private static boolean isRequiredInjection(Element element) {
+    return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinding.java b/butterknife/src/main/java/butterknife/internal/FieldBinding.java
similarity index 84%
rename from butterknife/src/main/java/butterknife/internal/ViewBinding.java
rename to butterknife/src/main/java/butterknife/internal/FieldBinding.java
index 96ac3553..170cdbf8 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/FieldBinding.java
@@ -2,12 +2,12 @@
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
-final class ViewBinding implements Binding {
+final class FieldBinding implements Binding {
   private final String name;
   private final String type;
   private final boolean required;
 
-  ViewBinding(String name, String type, boolean required) {
+  FieldBinding(String name, String type, boolean required) {
     this.name = name;
     this.type = type;
     this.required = required;
diff --git a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java b/butterknife/src/main/java/butterknife/internal/FieldCollectionBinding.java
similarity index 80%
rename from butterknife/src/main/java/butterknife/internal/CollectionBinding.java
rename to butterknife/src/main/java/butterknife/internal/FieldCollectionBinding.java
index 4ae18327..350983be 100644
--- a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/FieldCollectionBinding.java
@@ -1,6 +1,6 @@
 package butterknife.internal;
 
-final class CollectionBinding implements Binding {
+final class FieldCollectionBinding implements Binding {
   enum Kind {
     ARRAY,
     LIST
@@ -11,7 +11,7 @@
   private final Kind kind;
   private final boolean required;
 
-  CollectionBinding(String name, String type, Kind kind, boolean required) {
+  FieldCollectionBinding(String name, String type, Kind kind, boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerBinding.java b/butterknife/src/main/java/butterknife/internal/MethodBinding.java
similarity index 83%
rename from butterknife/src/main/java/butterknife/internal/ListenerBinding.java
rename to butterknife/src/main/java/butterknife/internal/MethodBinding.java
index d4c53996..a530f405 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/MethodBinding.java
@@ -4,12 +4,12 @@
 import java.util.Collections;
 import java.util.List;
 
-final class ListenerBinding implements Binding {
+final class MethodBinding implements Binding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
 
-  ListenerBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
     this.required = required;
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBindings.java b/butterknife/src/main/java/butterknife/internal/ViewBindings.java
new file mode 100644
index 00000000..ee2ed133
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/ViewBindings.java
@@ -0,0 +1,78 @@
+package butterknife.internal;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+final class ViewBindings {
+  private final int id;
+  private final Set<FieldBinding> fieldBindings = new LinkedHashSet<FieldBinding>();
+  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>>
+      methodBindings = new LinkedHashMap<ListenerClass,
+      Map<ListenerMethod, Set<MethodBinding>>>();
+
+  ViewBindings(int id) {
+    this.id = id;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public Collection<FieldBinding> getFieldBindings() {
+    return fieldBindings;
+  }
+
+  public Map<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>> getMethodBindings() {
+    return methodBindings;
+  }
+
+  public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
+    Map<ListenerMethod, Set<MethodBinding>> methods = methodBindings.get(listener);
+    return methods != null && methods.containsKey(method);
+  }
+
+  public void addMethodBinding(ListenerClass listener, ListenerMethod method,
+      MethodBinding binding) {
+    Map<ListenerMethod, Set<MethodBinding>> methods = methodBindings.get(listener);
+    Set<MethodBinding> set = null;
+    if (methods == null) {
+      methods = new LinkedHashMap<ListenerMethod, Set<MethodBinding>>();
+      methodBindings.put(listener, methods);
+    } else {
+      set = methods.get(method);
+    }
+    if (set == null) {
+      set = new LinkedHashSet<MethodBinding>();
+      methods.put(method, set);
+    }
+    set.add(binding);
+  }
+
+  public void addFieldBinding(FieldBinding fieldBinding) {
+    fieldBindings.add(fieldBinding);
+  }
+
+  public List<Binding> getRequiredBindings() {
+    List<Binding> requiredBindings = new ArrayList<Binding>();
+    for (FieldBinding fieldBinding : fieldBindings) {
+      if (fieldBinding.isRequired()) {
+        requiredBindings.add(fieldBinding);
+      }
+    }
+    for (Map<ListenerMethod, Set<MethodBinding>> methodBinding : methodBindings.values()) {
+      for (Set<MethodBinding> set : methodBinding.values()) {
+        for (MethodBinding binding : set) {
+          if (binding.isRequired()) {
+            requiredBindings.add(binding);
+          }
+        }
+      }
+    }
+    return requiredBindings;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjection.java b/butterknife/src/main/java/butterknife/internal/ViewInjection.java
deleted file mode 100644
index 4f31ca20..00000000
--- a/butterknife/src/main/java/butterknife/internal/ViewInjection.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package butterknife.internal;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-final class ViewInjection {
-  private final int id;
-  private final Set<ViewBinding> viewBindings = new LinkedHashSet<ViewBinding>();
-  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>>
-      listenerBindings = new LinkedHashMap<ListenerClass,
-      Map<ListenerMethod, Set<ListenerBinding>>>();
-
-  ViewInjection(int id) {
-    this.id = id;
-  }
-
-  public int getId() {
-    return id;
-  }
-
-  public Collection<ViewBinding> getViewBindings() {
-    return viewBindings;
-  }
-
-  public Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> getListenerBindings() {
-    return listenerBindings;
-  }
-
-  public boolean hasListenerBinding(ListenerClass listener, ListenerMethod method) {
-    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);
-    return methods != null && methods.containsKey(method);
-  }
-
-  public void addListenerBinding(ListenerClass listener, ListenerMethod method,
-      ListenerBinding binding) {
-    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);
-    Set<ListenerBinding> set = null;
-    if (methods == null) {
-      methods = new LinkedHashMap<ListenerMethod, Set<ListenerBinding>>();
-      listenerBindings.put(listener, methods);
-    } else {
-      set = methods.get(method);
-    }
-    if (set == null) {
-      set = new LinkedHashSet<ListenerBinding>();
-      methods.put(method, set);
-    }
-    set.add(binding);
-  }
-
-  public void addViewBinding(ViewBinding viewBinding) {
-    viewBindings.add(viewBinding);
-  }
-
-  public List<Binding> getRequiredBindings() {
-    List<Binding> requiredBindings = new ArrayList<Binding>();
-    for (ViewBinding viewBinding : viewBindings) {
-      if (viewBinding.isRequired()) {
-        requiredBindings.add(viewBinding);
-      }
-    }
-    for (Map<ListenerMethod, Set<ListenerBinding>> methodBinding : listenerBindings.values()) {
-      for (Set<ListenerBinding> set : methodBinding.values()) {
-        for (ListenerBinding binding : set) {
-          if (binding.isRequired()) {
-            requiredBindings.add(binding);
-          }
-        }
-      }
-    }
-    return requiredBindings;
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index 2770d490..2fd10d5c 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -1,12 +1,12 @@
 /**
- * View "injection" library for Android which uses annotation processing to generate boilerplate
- * code for you.
+ * Field and method binding for Android views which uses annotation processing to generate
+ * boilerplate code for you.
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.InjectView @InjectView} on fields.</li>
+ * {@link butterknife.FindView @FindView} on fields.</li>
  * <li>Group multiple views in a {@linkplain java.util.List list} using
- * {@link butterknife.InjectViews @InjectViews}. Operate on all of them at once with
+ * {@link butterknife.FindViews @FindViews}. Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
  * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
  * butterknife.ButterKnife.Setter, Object) setters}, or
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index 9fcc50c9..528b7c45 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -13,6 +13,8 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
+import static butterknife.ButterKnife.Finder.arrayOf;
+import static butterknife.ButterKnife.Finder.listOf;
 import static org.fest.assertions.api.ANDROID.assertThat;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.entry;
@@ -47,6 +49,26 @@ public void resetViewsCache() {
     ButterKnife.INJECTORS.clear();
   }
 
+  @Test public void listOfFiltersNull() {
+    assertThat(listOf(null, null, null)).isEmpty();
+    assertThat(listOf("One", null, null)).containsExactly("One");
+    assertThat(listOf(null, "One", null)).containsExactly("One");
+    assertThat(listOf(null, null, "One")).containsExactly("One");
+    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
+  }
+
+  @Test public void arrayOfFiltersNull() {
+    assertThat(arrayOf(null, null, null)).isEmpty();
+    assertThat(arrayOf("One", null, null)).containsExactly("One");
+    assertThat(arrayOf(null, "One", null)).containsExactly("One");
+    assertThat(arrayOf(null, null, "One")).containsExactly("One");
+    assertThat(arrayOf("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(arrayOf("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");
+  }
+
   @Test public void propertyAppliedToEveryView() {
     View view1 = new View(Robolectric.application);
     View view2 = new View(Robolectric.application);
@@ -100,8 +122,8 @@ public void resetViewsCache() {
     }
 
     Example example = new Example();
-    ButterKnife.inject(example, null, null);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_INJECTOR));
+    ButterKnife.bind(example, null, null);
+    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
   @Test public void zeroInjectionsResetDoesNotThrowException() {
@@ -109,14 +131,14 @@ public void resetViewsCache() {
     }
 
     Example example = new Example();
-    ButterKnife.reset(example);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_INJECTOR));
+    ButterKnife.unbind(example);
+    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
   @Test public void injectingKnownPackagesIsNoOp() {
-    ButterKnife.inject(new Activity());
+    ButterKnife.bind(new Activity());
     assertThat(ButterKnife.INJECTORS).isEmpty();
-    ButterKnife.inject(new Object(), new Activity());
+    ButterKnife.bind(new Object(), new Activity());
     assertThat(ButterKnife.INJECTORS).isEmpty();
   }
 
@@ -127,7 +149,7 @@ public void resetViewsCache() {
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view 'button1' with ID "
           + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Optional' annotation.");
+          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
     }
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
index b167f0e8..cc3c4613 100644
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
@@ -6,8 +6,8 @@
 import android.widget.AdapterView;
 import android.widget.CompoundButton;
 import android.widget.TextView;
-import butterknife.InjectView;
-import butterknife.InjectViews;
+import butterknife.FindView;
+import butterknife.FindViews;
 import butterknife.OnCheckedChanged;
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
@@ -18,7 +18,6 @@
 import butterknife.OnLongClick;
 import butterknife.OnPageChange;
 import butterknife.OnTextChanged;
-import butterknife.Optional;
 import com.google.common.io.Files;
 import com.google.testing.compile.JavaFileObjects;
 import java.io.File;
@@ -43,27 +42,29 @@
         .compilesWithoutError();
   }
 
+  @interface Nullable {}
+
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @InjectView(10) View injectView;
-  @Optional @InjectView(20) View optinalInjectView;
+  @FindView(10) View findView;
+  @Nullable @FindView(20) View optinalFindView;
 
-  @InjectView(30) TextView injectTextView;
-  @Optional @InjectView(40) TextView optinalInjectTextView;
+  @FindView(30) TextView findTextView;
+  @Nullable @FindView(40) TextView optinalFIndTextView;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @InjectViews(50) List<View> injectViewsListOne;
-  @InjectViews({ 60, 70 }) List<View> injectViewsListMultiple;
+  @FindViews(50) List<View> findViewsListOne;
+  @FindViews({ 60, 70 }) List<View> findViewsListMultiple;
 
-  @InjectViews(80) List<TextView> injectTextViewsListOne;
-  @InjectViews({ 90, 100 }) List<TextView> injectTextViewsListMultiple;
+  @FindViews(80) List<TextView> findTextViewsListOne;
+  @FindViews({ 90, 100 }) List<TextView> findTextViewsListMultiple;
 
-  @InjectViews(110) View[] injectViewsArrayOne;
-  @InjectViews({ 120, 130 }) View[] injectViewsArrayMultiple;
+  @FindViews(110) View[] findViewsArrayOne;
+  @FindViews({ 120, 130 }) View[] findViewsArrayMultiple;
 
-  @InjectViews(140) TextView[] injectTextViewsArrayOne;
-  @InjectViews({ 150, 160 }) TextView[] injectTextViewsArrayMultiple;
+  @FindViews(140) TextView[] findTextViewsArrayOne;
+  @FindViews({ 150, 160 }) TextView[] findTextViewsArrayMultiple;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
diff --git a/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java b/butterknife/src/test/java/butterknife/internal/BindingClassTest.java
similarity index 92%
rename from butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java
rename to butterknife/src/test/java/butterknife/internal/BindingClassTest.java
index 46ca7932..1f218adb 100644
--- a/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java
+++ b/butterknife/src/test/java/butterknife/internal/BindingClassTest.java
@@ -2,11 +2,11 @@
 
 import org.junit.Test;
 
-import static butterknife.internal.ViewInjector.emitHumanDescription;
+import static butterknife.internal.BindingClass.emitHumanDescription;
 import static java.util.Arrays.asList;
 import static org.fest.assertions.api.Assertions.assertThat;
 
-public class ViewInjectorTest {
+public class BindingClassTest {
   @Test public void humanDescriptionJoinWorks() {
     Binding one = new TestBinding("one");
     Binding two = new TestBinding("two");
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/FindViewTest.java
similarity index 71%
rename from butterknife/src/test/java/butterknife/internal/InjectViewTest.java
rename to butterknife/src/test/java/butterknife/internal/FindViewTest.java
index 7d95dfc7..89597c9a 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ b/butterknife/src/test/java/butterknife/internal/FindViewTest.java
@@ -9,31 +9,31 @@
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class InjectViewTest {
+public class FindViewTest {
   @Test public void injectingView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "    @InjectView(1) View thing;",
+        "    @FindView(1) View thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -51,26 +51,26 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
         "    interface TestInterface {}",
-        "    @InjectView(1) TestInterface thing;",
+        "    @FindView(1) TestInterface thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -89,25 +89,25 @@
         "import android.app.Activity;",
         "import android.widget.EditText;",
         "import android.widget.TextView;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "class Test<T extends TextView> extends Activity {",
-        "    @InjectView(1) T thing;",
+        "    @FindView(1) T thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -125,22 +125,22 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View thing1;",
+        "  @FindView(1) View thing1;",
         "  @OnClick(1) void doStuff() {}",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
             "    target.thing1 = view;",
@@ -153,7 +153,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing1 = null;",
             "  }",
             "}"
@@ -171,11 +171,11 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "  @InjectView(1) public View thing1;",
-        "  @InjectView(2) View thing2;",
-        "  @InjectView(3) protected View thing3;",
+        "  @FindView(1) public View thing1;",
+        "  @FindView(2) View thing2;",
+        "  @FindView(3) protected View thing3;",
         "}"
     ));
 
@@ -184,31 +184,31 @@
         .compilesWithoutError();
   }
 
-  @Test public void optional() {
+  @Test public void nullable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.Optional;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "  @Optional @InjectView(1) View view;",
+        "  @interface Nullable {}",
+        "  @Nullable @FindView(1) View view;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    target.view = view;",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.view = null;",
             "  }",
             "}"
@@ -226,51 +226,50 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.Optional;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
+        "  @FindView(1) View view;",
         "}",
         "class TestOne extends Test {",
-        "  @InjectView(1) View thing;",
+        "  @FindView(1) View thing;",
         "}",
         "class TestTwo extends Test {",
         "}"
     ));
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.view = null;",
             "  }",
             "}"
         ));
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector<T extends test.TestOne> ",
-            "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    super.inject(finder, target, source);",
+            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
+            "    extends test.Test$$ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
             "  }",
-            "  @Override public void reset(T target) {",
-            "    super.reset(target);",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
             "    target.thing = null;",
             "  }",
             "}"
@@ -288,51 +287,50 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.Optional;",
+        "import butterknife.FindView;",
         "public class Test<T> extends Activity {",
-        "  @InjectView(1) View view;",
+        "  @FindView(1) View view;",
         "}",
         "class TestOne extends Test<String> {",
-        "  @InjectView(1) View thing;",
+        "  @FindView(1) View thing;",
         "}",
         "class TestTwo extends Test<Object> {",
         "}"
     ));
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.view = null;",
             "  }",
             "}"
         ));
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector<T extends test.TestOne> ",
-            "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    super.inject(finder, target, source);",
+            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
+            "    extends test.Test$$ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
             "  }",
-            "  @Override public void reset(T target) {",
-            "    super.reset(target);",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
             "    target.thing = null;",
             "  }",
             "}"
@@ -349,9 +347,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test {",
-        "  @InjectView(1) View thing;",
+        "  @FindView(1) View thing;",
         "}"
     ));
 
@@ -359,7 +357,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectView-annotated class incorrectly in Java framework package. (java.test.Test)")
+            "@FindView-annotated class incorrectly in Java framework package. (java.test.Test)")
         .in(source).onLine(5);
   }
 
@@ -367,9 +365,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package android.test;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test {",
-        "  @InjectView(1) View thing;",
+        "  @FindView(1) View thing;",
         "}"
     ));
 
@@ -377,7 +375,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectView-annotated class incorrectly in Android framework package. (android.test.Test)")
+            "@FindView-annotated class incorrectly in Android framework package. (android.test.Test)")
         .in(source).onLine(5);
   }
 
@@ -385,10 +383,10 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test {",
         "  private static class Inner {",
-        "    @InjectView(1) View thing;",
+        "    @FindView(1) View thing;",
         "  }",
         "}"
     ));
@@ -397,7 +395,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectView fields may not be contained in private classes. (test.Test.Inner.thing)")
+            "@FindView fields may not be contained in private classes. (test.Test.Inner.thing)")
         .in(source).onLine(5);
   }
 
@@ -405,16 +403,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "  @InjectView(1) String thing;",
+        "  @FindView(1) String thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectView fields must extend from View or be an interface. (test.Test.thing)")
+        .withErrorContaining("@FindView fields must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -422,9 +420,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public interface Test {",
-        "    @InjectView(1) View thing = null;",
+        "    @FindView(1) View thing = null;",
         "}"
     ));
 
@@ -432,7 +430,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectView fields may only be contained in classes. (test.Test.thing)")
+            "@FindView fields may only be contained in classes. (test.Test.thing)")
         .in(source).onLine(4);
   }
 
@@ -441,16 +439,16 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "    @InjectView(1) private View thing;",
+        "    @FindView(1) private View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectView fields must not be private or static. (test.Test.thing)")
+        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
@@ -459,16 +457,16 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "    @InjectView(1) static View thing;",
+        "    @FindView(1) static View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectView fields must not be private or static. (test.Test.thing)")
+        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
@@ -477,10 +475,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindView;",
+        "import butterknife.FindViews;",
         "public class Test extends Activity {",
-        "    @InjectView(1) @InjectViews(1) View thing;",
+        "    @FindView(1) @FindViews(1) View thing;",
         "}"
     ));
 
@@ -488,7 +486,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "Only one of @InjectView and @InjectViews is allowed. (test.Test.thing)")
+            "Only one of @FindView and @FindViews is allowed. (test.Test.thing)")
         .in(source).onLine(7);
   }
 
@@ -497,10 +495,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "public class Test extends Activity {",
-        "    @InjectView(1) View thing1;",
-        "    @InjectView(1) View thing2;",
+        "    @FindView(1) View thing1;",
+        "    @FindView(1) View thing2;",
         "}"
     ));
 
@@ -508,7 +506,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "Attempt to use @InjectView for an already injected ID 1 on 'thing1'. (test.Test.thing2)")
+            "Attempt to use @FindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
         .in(source).onLine(7);
   }
 
@@ -543,10 +541,10 @@
             "package test;",
             "import android.content.Context;",
             "import android.view.View;",
-            "import butterknife.Optional;",
             "import butterknife.OnClick;",
             "public class Test extends View {",
-            "  @Optional @OnClick void doStuff() {}",
+            "  @interface Nullable {}",
+            "  @Nullable @OnClick void doStuff() {}",
             "  public Test(Context context) {",
             "    super(context);",
             "  }",
@@ -557,7 +555,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            ("ID free injection must not be annotated with @Optional. (test.Test.doStuff)"))
+            ("ID free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
         .in(source)
         .onLine(7);
   }
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java b/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
similarity index 72%
rename from butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
rename to butterknife/src/test/java/butterknife/internal/FindViewsTest.java
index ca6148bf..364f2222 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
@@ -10,26 +10,26 @@
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class InjectViewsTest {
+public class FindViewsTest {
   @Test public void injectingArray() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) View[] thing;",
+        "    @FindViews({1, 2, 3}) View[] thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.arrayOf(",
             "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
@@ -37,7 +37,7 @@
             "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -55,20 +55,20 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "public class Test<T extends View> extends Activity {",
-        "    @InjectViews({1, 2, 3}) T[] thing;",
+        "    @FindViews({1, 2, 3}) T[] thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.arrayOf(",
             "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
@@ -76,7 +76,7 @@
             "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -94,20 +94,20 @@
         "package test;",
         "import android.app.Activity;",
         "import android.widget.TextView;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) TextView[] thing;",
+        "    @FindViews({1, 2, 3}) TextView[] thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.arrayOf(",
             "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
@@ -115,7 +115,7 @@
             "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -133,21 +133,21 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) List<View> thing;",
+        "    @FindViews({1, 2, 3}) List<View> thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
             "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
@@ -155,7 +155,7 @@
             "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -172,22 +172,22 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test {",
         "    interface TestInterface {}",
-        "    @InjectViews({1, 2, 3}) List<TestInterface> thing;",
+        "    @FindViews({1, 2, 3}) List<TestInterface> thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
             "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
@@ -195,7 +195,7 @@
             "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -213,21 +213,21 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test<T extends View> extends Activity {",
-        "    @InjectViews({1, 2, 3}) List<T> thing;",
+        "    @FindViews({1, 2, 3}) List<T> thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
             "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
@@ -235,7 +235,7 @@
             "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -248,27 +248,27 @@
         .generatesSources(expectedSource);
   }
 
-  @Test public void optional() {
+  @Test public void nullable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import butterknife.Optional;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test extends Activity {",
-        "    @Optional @InjectViews({1, 2, 3}) List<View> thing;",
+        "    @interface Nullable {}",
+        "    @Nullable @FindViews({1, 2, 3}) List<View> thing;",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
             "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
@@ -276,7 +276,7 @@
             "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -293,27 +293,27 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test {",
-        "  @InjectViews({}) List<View> thing;",
+        "  @FindViews({}) List<View> thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews must specify at least one ID. (test.Test.thing)")
+        .withErrorContaining("@FindViews must specify at least one ID. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
   @Test public void failsIfNoGenericType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test {",
-        "  @InjectViews(1) List thing;",
+        "  @FindViews(1) List thing;",
         "}"
     ));
 
@@ -321,7 +321,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectViews List must have a generic component. (test.Test.thing)")
+            "@FindViews List must have a generic component. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -329,10 +329,10 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.Deque;",
         "public class Test {",
-        "  @InjectViews(1) Deque<View> thing;",
+        "  @FindViews(1) Deque<View> thing;",
         "}"
     ));
 
@@ -340,7 +340,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectViews must be a List or array. (test.Test.thing)")
+            "@FindViews must be a List or array. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
@@ -348,29 +348,29 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test extends Activity {",
-        "  @InjectViews(1) List<String> thing;",
+        "  @FindViews(1) List<String> thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
+        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
   @Test public void failsIfArrayNotView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;", "import android.app.Activity;", "import butterknife.InjectViews;",
-        "public class Test extends Activity {", "  @InjectViews(1) String[] thing;", "}"));
+        "package test;", "import android.app.Activity;", "import butterknife.FindViews;",
+        "public class Test extends Activity {", "  @FindViews(1) String[] thing;", "}"));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
+        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -378,9 +378,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "public class Test {",
-        "  @InjectViews(1) View[] thing;",
+        "  @FindViews(1) View[] thing;",
         "}"
     ));
 
@@ -388,7 +388,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectViews-annotated class incorrectly in Java framework package. (java.test.Test)")
+            "@FindViews-annotated class incorrectly in Java framework package. (java.test.Test)")
         .in(source).onLine(5);
   }
 
@@ -396,9 +396,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package android.test;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "public class Test {",
-        "  @InjectViews(1) View[] thing;",
+        "  @FindViews(1) View[] thing;",
         "}"
     ));
 
@@ -406,7 +406,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectViews-annotated class incorrectly in Android framework package. (android.test.Test)")
+            "@FindViews-annotated class incorrectly in Android framework package. (android.test.Test)")
         .in(source).onLine(5);
   }
 
@@ -414,11 +414,11 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test {",
         "  private static class Inner {",
-        "    @InjectViews(1) List<View> thing;",
+        "    @FindViews(1) List<View> thing;",
         "  }",
         "}"
     ));
@@ -427,7 +427,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectViews fields may not be contained in private classes. (test.Test.Inner.thing)")
+            "@FindViews fields may not be contained in private classes. (test.Test.Inner.thing)")
         .in(source).onLine(6);
   }
 
@@ -435,10 +435,10 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public interface Test {",
-        "    @InjectViews(1) List<View> thing = null;",
+        "    @FindViews(1) List<View> thing = null;",
         "}"
     ));
 
@@ -446,7 +446,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectViews fields may only be contained in classes. (test.Test.thing)")
+            "@FindViews fields may only be contained in classes. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -455,17 +455,17 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test extends Activity {",
-        "    @InjectViews(1) private List<View> thing;",
+        "    @FindViews(1) private List<View> thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews fields must not be private or static. (test.Test.thing)")
+        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(7);
   }
 
@@ -474,17 +474,17 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test extends Activity {",
-        "    @InjectViews(1) static List<View> thing;",
+        "    @FindViews(1) static List<View> thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews fields must not be private or static. (test.Test.thing)")
+        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(7);
   }
 
@@ -493,10 +493,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectViews;",
+        "import butterknife.FindViews;",
         "import java.util.List;",
         "public class Test extends Activity {",
-        "    @InjectViews({1, 1}) List<View> thing;",
+        "    @FindViews({1, 1}) List<View> thing;",
         "}"
     ));
 
@@ -504,7 +504,7 @@
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "@InjectViews annotation contains duplicate ID 1. (test.Test.thing)")
+            "@FindViews annotation contains duplicate ID 1. (test.Test.thing)")
         .in(source).onLine(7);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
index b907367e..cecb8eec 100644
--- a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
@@ -21,14 +21,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",
@@ -37,7 +37,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnClickTest.java b/butterknife/src/test/java/butterknife/internal/OnClickTest.java
index 078bd63b..07998420 100644
--- a/butterknife/src/test/java/butterknife/internal/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnClickTest.java
@@ -20,14 +20,14 @@
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
@@ -36,7 +36,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -60,14 +60,14 @@
         "  @OnClick({1, 2}) void doStuff3(View v) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
             "    view.setOnClickListener(",
@@ -90,7 +90,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "}"));
 
     ASSERT.about(javaSource()).that(source)
@@ -105,21 +105,21 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
+        "  @FindView(1) View view;",
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
             "    target.view = view;",
@@ -129,7 +129,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.view = null;",
             "  }",
             "}"
@@ -178,14 +178,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
@@ -218,7 +218,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -241,14 +241,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
@@ -269,7 +269,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -286,19 +286,19 @@
         "package test;",
         "import android.app.Activity;",
         "import butterknife.OnClick;",
-        "import butterknife.Optional;",
         "public class Test extends Activity {",
-        "  @Optional @OnClick(1) void doStuff() {}",
+        "  @interface Nullable {}",
+        "  @Nullable @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    if (view != null) {",
@@ -309,7 +309,7 @@
             "      });",
             "    }",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -326,22 +326,22 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.FindView;",
         "import butterknife.OnClick;",
-        "import butterknife.Optional;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
-        "  @Optional @OnClick(1) void doStuff() {}",
+        "  @interface Nullable {}",
+        "  @FindView(1) View view;",
+        "  @Nullable @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -351,7 +351,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "    target.view = null;",
             "  }",
             "}"
diff --git a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
index 481547b3..d484cd46 100644
--- a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
@@ -21,14 +21,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",
@@ -37,7 +37,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
index 6df254da..ee06ee16 100644
--- a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
@@ -21,14 +21,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",
@@ -37,7 +37,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
index fc49b924..b47c649f 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
@@ -21,14 +21,14 @@
         "  @OnItemClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
@@ -39,7 +39,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -67,14 +67,14 @@
         "  ) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
@@ -85,7 +85,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -111,14 +111,14 @@
         "  ) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
@@ -129,7 +129,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -155,14 +155,14 @@
         "  ) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
@@ -173,7 +173,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -198,14 +198,14 @@
         "  }",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = target;",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
@@ -220,7 +220,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
index dad24264..64233688 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
@@ -21,14 +21,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",
@@ -37,7 +37,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
index b6cc753e..debd2062 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
@@ -22,14 +22,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
@@ -43,7 +43,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -67,14 +67,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
@@ -88,7 +88,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -114,14 +114,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
@@ -136,7 +136,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
@@ -162,14 +162,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
@@ -206,7 +206,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
index bbf8b884..636fb05a 100644
--- a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
@@ -23,14 +23,14 @@
         "  }",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnLongClickListener(",
@@ -40,7 +40,7 @@
             "        }",
             "      });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
index 4c58db45..bc80f221 100644
--- a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
@@ -21,14 +21,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",
@@ -41,7 +41,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
index 6f6687cd..99367d12 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
@@ -21,14 +21,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",
@@ -41,7 +41,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
index 1ac2fba0..9fef2868 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
@@ -21,14 +21,14 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",
@@ -37,7 +37,7 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
diff --git a/pom.xml b/pom.xml
index 686e9c96..7d4e9d12 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,11 +11,11 @@
 
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife-parent</artifactId>
-  <version>6.1.1-SNAPSHOT</version>
+  <version>7.0.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Butter Knife (Parent)</name>
-  <description>View "injection" for Android.</description>
+  <description>Field and method binding for Android views.</description>
   <url>http://github.com/JakeWharton/butterknife/</url>
   <inceptionYear>2013</inceptionYear>
 
diff --git a/website/ide-eclipse.html b/website/ide-eclipse.html
index ea13e0c4..ba92be5f 100644
--- a/website/ide-eclipse.html
+++ b/website/ide-eclipse.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,7 +18,7 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
@@ -36,7 +36,7 @@ <h3 id="introduction">Eclipse Configuration</h3>
                 <p><img src="static/ide-eclipse2.png"/></p>
               </li>
               <li>Click <em>"Ok"</em> to save the new settings. Eclipse will ask you to rebuild your project to which you should click <em>"Yes"</em></li>
-              <li>Make sure that the <code>.apt_generated/</code> folder is in your project root. It should contain files like <code>YOURACTIVITY$$ViewInjector.java</code>. If these files are not present trigger a clean build by selected <em>Project &rarr; Clean</em>. This folder and files should not be checked into revision control.
+              <li>Make sure that the <code>.apt_generated/</code> folder is in your project root. It should contain files like <code>YOURACTIVITY$$ViewBinder.java</code>. If these files are not present trigger a clean build by selected <em>Project &rarr; Clean</em>. This folder and files should not be checked into revision control.
               <li>Lastly, under <em>"Java Compiler"</em>, make sure that the <em>Compiler compliance level</em> is set to Java version 1.6 at minimum.</li>
             </ol>
 
diff --git a/website/ide-idea.html b/website/ide-idea.html
index aa57ae48..a656ac15 100644
--- a/website/ide-idea.html
+++ b/website/ide-idea.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,7 +18,7 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
diff --git a/website/index.html b/website/index.html
index 417e85ee..962c1797 100644
--- a/website/index.html
+++ b/website/index.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,43 +18,43 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
           <p><a href="javadoc/">Javadoc</a> &middot; <a href="http://stackoverflow.com/questions/ask?tags=butterknife">StackOverflow</a></p>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@InjectView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@FindView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @InjectView(R.id.title) TextView title;
-  @InjectView(R.id.subtitle) TextView subtitle;
-  @InjectView(R.id.footer) TextView footer;
+  @FindView(R.id.title) TextView title;
+  @FindView(R.id.subtitle) TextView subtitle;
+  @FindView(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this);
+    // TODO Use fields...
   }
 }</pre>
-            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>inject</code> delegates to this generated code that you can see and debug.</p>
+            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>bind</code> delegates to this generated code that you can see and debug.</p>
             <p>The generated code for the above example is roughly equivalent to the following:</p>
-            <pre class="prettyprint">public void inject(ExampleActivity activity) {
+            <pre class="prettyprint">public void bind(ExampleActivity activity) {
   activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);
   activity.footer = (android.widget.TextView) activity.findViewById(2130968579);
   activity.title = (android.widget.TextView) activity.findViewById(2130968577);
 }</pre>
 
-            <h4 id="non-activity">Non-Activity Injection</h4>
-            <p>You can also perform injection on arbitrary objects by supplying your own view root.</p>
+            <h4 id="non-activity">Non-Activity Binding</h4>
+            <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @FindView(R.id.button1) Button button1;
+  @FindView(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 }</pre>
@@ -77,27 +77,27 @@ <h4 id="non-activity">Non-Activity Injection</h4>
   }
 
   static class ViewHolder {
-    @InjectView(R.id.title) TextView name;
-    @InjectView(R.id.job_title) TextView jobTitle;
+    @FindView(R.id.title) TextView name;
+    @FindView(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
-      ButterKnife.inject(this, view);
+      ButterKnife.bind(this, view);
     }
   }
 }</pre>
             <p>You can see this implementation in action in the provided sample.</p>
-            <p>Calls to <code>ButterKnife.inject</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
-            <p>Other provided injection APIs:</p>
+            <p>Calls to <code>ButterKnife.bind</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
+            <p>Other provided binding APIs:</p>
             <ul>
-              <li>Inject arbitrary objects using an activity as the view root. If you use a pattern like MVC you can inject the controller using its activity with <code>ButterKnife.inject(this, activity)</code>.</li>
-              <li>Inject a view's children into fields using <code>ButterKnife.inject(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
+              <li>Bind arbitrary objects using an activity as the view root. If you use a pattern like MVC you can bind the controller using its activity with <code>ButterKnife.bind(this, activity)</code>.</li>
+              <li>Bind a view's children into fields using <code>ButterKnife.bind(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
    call this immediately after. Alternatively, custom view types inflated from
    XML can use it in the <code>onFinishInflate()</code> callback.</li>
             </ul>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@InjectViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@FindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
@@ -116,7 +116,7 @@ <h4 id="view-lists">View Lists</h4>
             <p>An Android <a href="https://developer.android.com/reference/android/util/Property.html"><code>Property</code></a> can also be used with the <code>apply</code> method.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0);</pre>
 
-            <h4 id="click-injection">Listener Injection</h4>
+            <h4 id="listener-binding">Listener Binding</h4>
             <p>Listeners can also automatically be configured onto methods.</p>
             <pre class="prettyprint">@OnClick(R.id.submit)
 public void submit(View view) {
@@ -150,31 +150,32 @@ <h4 id="click-injection">Listener Injection</h4>
 }
 </pre>
 
-            <h4 id="reset">Injection Reset</h4>
-            <p>Fragments have a different view lifecycle than activities. When injecting a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has a <code>reset</code> method to do this automatically.</p>
+            <h4 id="reset">Binding Reset</h4>
+            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has an <code>unbind</code> method to do this automatically.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @FindView(R.id.button1) Button button1;
+  @FindView(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 
   @Override public void onDestroyView() {
     super.onDestroyView();
-    ButterKnife.reset(this);
+    ButterKnife.unbind(this);
   }
 }</pre>
 
-            <h4 id="optional">Optional Injections</h4>
-            <p>By default, both <code>@InjectView</code> and listener injections are required. An exception will be thrown if the target view cannot be found.</p>
-            <p>To suppress this behavior and create an optional injection, add the <code>@Optional</code> annotation to the field or method.</p>
-            <pre class="prettyprint">@Optional @InjectView(R.id.might_not_be_there) TextView mightNotBeThere;
+            <h4 id="optional">Optional Bindings</h4>
+            <p>By default, both <code>@FindView</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
+            <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to the field or method.</p>
+            <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
+            <pre class="prettyprint">@Nullable @FindView(R.id.might_not_be_there) TextView mightNotBeThere;
 
-@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
+@Nullable @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
 }</pre>
 
@@ -232,10 +233,10 @@ <h4 id="ide">IDE Configuration</h4>
 
             <h4 id="proguard">ProGuard</h4>
             <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept.
-                To prevent ProGuard renaming classes that use @InjectView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
+                To prevent ProGuard renaming classes that use @FindView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
             <pre>-keep class butterknife.** { *; }
 -dontwarn butterknife.internal.**
--keep class **$$ViewInjector { *; }
+-keep class **$$ViewBinder { *; }
 
 -keepclasseswithmembernames class * {
     @butterknife.* &lt;fields&gt;;
