diff --git a/.travis.yml b/.travis.yml
index 4e7fb53e..31ff57fe 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7,6 +7,7 @@ before_install:
   # Install SDK license so Android Gradle plugin can install deps.
   - mkdir "$ANDROID_HOME/licenses" || true
   - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
+  - echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$ANDROID_HOME/licenses/android-sdk-license"
   # Install the rest of tools (e.g., avdmanager)
   - sdkmanager tools
   # Install the system image
diff --git a/CHANGELOG.md b/CHANGELOG.md
index a61b410e..5a78f11c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,109 @@
 Change Log
 ==========
 
+Version 10.1.0 *(2019-02-13)*
+-----------------------------
+
+ * New: Listeners which require return values (e.g., long click) can now be bound to methods returning `void`.
+   The default value of `true` will be returned in this case.
+ * New: Add support for `@OnTextChanged` and `@OnPageChange` to reflection backend.
+ * Remove enforcement of required views in the reflection backend. Most `@Nullable` annotations do not have
+   runtime retention so they can't be checked at runtime with reflection. Instead of forcing everyone to find
+   a new annotation, this enforcement is now dropped. While this might lead to nulls in otherwise required
+   view bindings, they'll either be unused or quickly cause a `NullPointerException`.
+
+
+Version 10.0.0 *(2019-01-03)*
+-----------------------------
+
+ * Equivalent to 9.0.0 but only supports AndroidX-enabled builds.
+ * Removed APIs deprecated in 9.0.0.
+
+
+Version 9.0.0 *(2019-01-03)*
+----------------------------
+
+ * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate
+   AndroidX code.
+
+ * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs
+   required for the generated code but does not contain the code to reflectively look up the generated
+   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can
+   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules
+   remain in the old `butterknife` artifact.
+ 
+ * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation
+   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged
+   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more
+   information. Currently about 90% of functionality is covered. File bugs for anything that does not work.
+
+   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to
+   having this be a default. As of AGP 3.2 there is no reason not to do this.
+
+ * New: Lint checks have been ported to UAST and now work on Kotlin code.
+ 
+ * Helpers such as `apply` have been deprecated on `ButterKnife` and are now available on the `ViewCollections` class.
+
+ * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This
+   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older).
+ * Use Java 8 bytecode for all artifacts as announced in RC1 release notes.
+ * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`.
+ * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities.
+ * Fix: Correct generated resource annotation names when running Turkish locale.
+ * Fix: Use the application ID instead of the resource package for generating `R2`.
+ * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy
+   multiple times.
+ * Deprecated methods from 8.x have been removed.
+
+
+Version 9.0.0-rc3 *(2018-12-20)*
+--------------------------------
+
+ * Fix: Correct generated resource annotation names when running Turkish locale.
+ * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy
+   multiple times.
+
+
+Version 9.0.0-rc2 *(2018-11-19)*
+--------------------------------
+
+ * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This
+   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older).
+ * Use Java 8 bytecode for all artifacts as announced in RC1 release notes.
+
+
+Version 9.0.0-rc1 *(2018-10-10)*
+--------------------------------
+
+ * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate
+   AndroidX code.
+
+ * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs
+   required for the generated code but does not contain the code to reflectively look up the generated
+   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can
+   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules
+   remain in the old `butterknife` artifact.
+ 
+ * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation
+   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged
+   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more
+   information. Currently about 90% of functionality is covered. File bugs for anything that does not work.
+
+   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to
+   having this be a default. As of AGP 3.2 there is no reason not to do this.
+
+ * New: Lint checks have been ported to UAST and now work on Kotlin code.
+
+ * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`.
+ * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities.
+ * Fix: Use the application ID instead of the resource package for generating `R2`.
+ * Deprecated methods from 8.x have been removed.
+
+Note: The next release candidate will switch all artifacts to require Java 8 bytecode which will force
+your applications to enable Java 8 bytecode. As of AGP 3.2 there is no cost to this, and there is no
+reason to have it set any lower.
+
+
 Version 8.8.1 *(2017-08-09)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 26d21abc..519926cc 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  implementation 'com.jakewharton:butterknife:8.8.1'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  implementation 'com.jakewharton:butterknife:10.1.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
 }
 ```
 
@@ -63,9 +63,10 @@ To use Butter Knife in a library, add the plugin to your `buildscript`:
 buildscript {
   repositories {
     mavenCentral()
+    google()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:10.1.0'
   }
 }
 ```
diff --git a/build.gradle b/build.gradle
index 5ccd352f..c411ba8e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,9 +5,8 @@ buildscript {
       'minSdk': 14,
       'compileSdk': 28,
 
-      'supportLibrary': '28.0.0',
-      'androidTools': '26.2.0-rc03',
-      'kotlin': '1.2.70',
+      'androidTools': '26.2.0',
+      'kotlin': '1.2.71',
 
       'release': '8.8.1',
   ]
@@ -17,16 +16,14 @@ buildscript {
           'runtime': 'com.google.android:android:4.1.1.4',
           'gradlePlugin': "com.android.tools.build:gradle:3.1.4",
       ],
-      'support': [
-          'compat': "com.android.support:support-compat:${versions.supportLibrary}",
-          'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
-          'test': [
-              'runner': 'com.android.support.test:runner:1.0.1',
-              'rules': 'com.android.support.test:rules:1.0.1',
-          ],
-      ],
       'androidx': [
+          'core': "androidx.core:core:1.0.0",
+          'viewpager': "androidx.viewpager:viewpager:1.0.0",
           'annotations': "androidx.annotation:annotation:1.0.0",
+          'test': [
+              'runner': 'androidx.test:runner:1.1.0',
+              'rules': 'androidx.test:rules:1.1.0',
+          ],
       ],
       'lint': [
           'core': "com.android.tools.lint:lint:${versions.androidTools}",
@@ -35,7 +32,6 @@ buildscript {
           'tests': "com.android.tools.lint:lint-tests:${versions.androidTools}",
       ],
       javapoet: 'com.squareup:javapoet:1.10.0',
-      javaparser: 'com.github.javaparser:javaparser-core:3.5.14',
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.42',
       compiletesting: 'com.google.testing.compile:compile-testing:0.15',
@@ -55,13 +51,13 @@ buildscript {
 
   repositories {
     mavenCentral()
-    jcenter()
     google()
+    jcenter()
     gradlePluginPortal()
   }
 
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.2.0-rc03'
+    classpath 'com.android.tools.build:gradle:3.2.0'
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16'
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index f96179a7..03d03882 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 checkstyle {
   configFile rootProject.file('checkstyle.xml')
@@ -11,7 +11,7 @@ checkstyle {
 
 dependencies {
   compileOnly deps.android.runtime
-  api deps.support.annotations
+  api deps.androidx.annotations
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-annotations/src/main/java/butterknife/BindAnim.java b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
index 7e12157b..95d7e073 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindAnim.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.AnimRes;
+import androidx.annotation.AnimRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindArray.java b/butterknife-annotations/src/main/java/butterknife/BindArray.java
index 6f016b4d..b590b69d 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindArray.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.ArrayRes;
+import androidx.annotation.ArrayRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
index 0b3576e8..795b230e 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
@@ -1,7 +1,7 @@
 package butterknife;
 
 import android.graphics.Bitmap;
-import android.support.annotation.DrawableRes;
+import androidx.annotation.DrawableRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBool.java b/butterknife-annotations/src/main/java/butterknife/BindBool.java
index 5c0abd39..eb6347dd 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBool.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.BoolRes;
+import androidx.annotation.BoolRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindColor.java b/butterknife-annotations/src/main/java/butterknife/BindColor.java
index af289c33..2691cf5a 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindColor.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.ColorRes;
+import androidx.annotation.ColorRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDimen.java b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
index 62115a1e..49fa9185 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindDimen.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.DimenRes;
+import androidx.annotation.DimenRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
index 8156dca9..76fa9a03 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.AttrRes;
-import android.support.annotation.DrawableRes;
+import androidx.annotation.AttrRes;
+import androidx.annotation.DrawableRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFloat.java b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
index bb15a288..400e844f 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindFloat.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.DimenRes;
+import androidx.annotation.DimenRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFont.java b/butterknife-annotations/src/main/java/butterknife/BindFont.java
index d2360c2b..ff3420ac 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindFont.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java
@@ -1,13 +1,13 @@
 package butterknife;
 
 import android.graphics.Typeface;
-import android.support.annotation.FontRes;
-import android.support.annotation.IntDef;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.FontRes;
+import androidx.annotation.IntDef;
+import androidx.annotation.RestrictTo;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindInt.java b/butterknife-annotations/src/main/java/butterknife/BindInt.java
index 137950a5..15593081 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindInt.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.IntegerRes;
+import androidx.annotation.IntegerRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindString.java b/butterknife-annotations/src/main/java/butterknife/BindString.java
index 5dfebd59..a31b5509 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindString.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindString.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.StringRes;
+import androidx.annotation.StringRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindView.java b/butterknife-annotations/src/main/java/butterknife/BindView.java
index 85da51c3..13c56dab 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindView.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindView.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
+import androidx.annotation.IdRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindViews.java b/butterknife-annotations/src/main/java/butterknife/BindViews.java
index 8b174f1f..890b5693 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindViews.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java
@@ -1,6 +1,6 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
+import androidx.annotation.IdRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
index 22681659..4d9b280d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index a3324ab4..ffebeb06 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
index 1e9cdca2..ebaa57c6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnEditorActionListener#onEditorAction(android.widget.TextView, int, android.view.KeyEvent)
  * onEditorAction} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnEditorActionListener
  */
@@ -40,7 +42,7 @@
             "android.view.KeyEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnEditorAction {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
index 8bcc772d..a388812f 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 6a411cdd..4362f79e 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index 543cda23..0f1ca8b9 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnItemLongClickListener#onItemLongClick(android.widget.AdapterView, android.view.View,
  * int, long) onItemLongClick} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnItemLongClickListener
  */
@@ -41,7 +43,7 @@
             "long"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnItemLongClick {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
index 500a8db1..22a8664d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 0b53b6d9..55d7fed6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -22,6 +22,8 @@
  * </code></pre>
  * Any number of parameters from {@link OnLongClickListener#onLongClick(android.view.View)} may be
  * used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnLongClickListener
  */
@@ -37,7 +39,7 @@
             "android.view.View"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnLongClick {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index b1501b5c..8cf18b57 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -1,14 +1,14 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@code OnPageChangeListener} on the view for each ID specified.
@@ -28,14 +28,12 @@
  * </code></pre>
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
-    targetType = "android.support.v4.view.ViewPager",
-    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",
+    targetType = "androidx.viewpager.widget.ViewPager",
     setter = "addOnPageChangeListener",
     remover = "removeOnPageChangeListener",
-    type = "android.support.v4.view.ViewPager.OnPageChangeListener",
-    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",
+    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",
     callbacks = OnPageChange.Callback.class
 )
 public @interface OnPageChange {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
index 6b81c43b..b823b443 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
@@ -1,15 +1,15 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.text.TextWatcher;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to a {@link TextWatcher TextWatcher} on the view for each ID specified.
@@ -32,7 +32,7 @@
  * @see TextWatcher
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "addTextChangedListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTouch.java b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
index 4b54a0d3..669e0f6d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTouch.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -22,6 +22,8 @@
  * Any number of parameters from
  * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used
  * on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnTouchListener
  */
@@ -38,7 +40,7 @@
             "android.view.MotionEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnTouch {
diff --git a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
index 52d89e52..e6d3ed5f 100644
--- a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
@@ -10,8 +10,6 @@
 public @interface ListenerClass {
   String targetType();
 
-  String targetTypeAndroidX() default "";
-
   /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */
   String setter();
 
@@ -24,8 +22,6 @@
   /** Fully-qualified class name of the listener type. */
   String type();
 
-  String typeAndroidX() default "";
-
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
 
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index 5775e644..077bc65d 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
   implementation project(':butterknife-annotations')
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 194b8605..e5a891d0 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -45,20 +45,14 @@
   private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
   private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
   private static final ClassName UI_THREAD =
-      ClassName.get("android.support.annotation", "UiThread");
-  private static final ClassName UI_THREAD_ANDROIDX =
       ClassName.get("androidx.annotation", "UiThread");
   private static final ClassName CALL_SUPER =
-      ClassName.get("android.support.annotation", "CallSuper");
-  private static final ClassName CALL_SUPER_ANDROIDX =
       ClassName.get("androidx.annotation", "CallSuper");
   private static final ClassName SUPPRESS_LINT =
       ClassName.get("android.annotation", "SuppressLint");
   private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
-      ClassName.get("android.support.v4.content", "ContextCompat");
-  static final ClassName CONTEXT_COMPAT_ANDROIDX =
       ClassName.get("androidx.core.content", "ContextCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
@@ -90,14 +84,14 @@ private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean
     this.parentBinding = parentBinding;
   }
 
-  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {
-    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);
+  JavaFile brewJava(int sdk, boolean debuggable) {
+    TypeSpec bindingConfiguration = createType(sdk, debuggable);
     return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration)
         .addFileComment("Generated code from Butter Knife. Do not modify!")
         .build();
   }
 
-  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {
+  private TypeSpec createType(int sdk, boolean debuggable) {
     TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())
         .addModifiers(PUBLIC);
     if (isFinal) {
@@ -115,32 +109,32 @@ private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {
     }
 
     if (isView) {
-      result.addMethod(createBindingConstructorForView(useAndroidX));
+      result.addMethod(createBindingConstructorForView());
     } else if (isActivity) {
-      result.addMethod(createBindingConstructorForActivity(useAndroidX));
+      result.addMethod(createBindingConstructorForActivity());
     } else if (isDialog) {
-      result.addMethod(createBindingConstructorForDialog(useAndroidX));
+      result.addMethod(createBindingConstructorForDialog());
     }
     if (!constructorNeedsView()) {
       // Add a delegating constructor with a target type + view signature for reflective use.
-      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));
+      result.addMethod(createBindingViewDelegateConstructor());
     }
-    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));
+    result.addMethod(createBindingConstructor(sdk, debuggable));
 
     if (hasViewBindings() || parentBinding == null) {
-      result.addMethod(createBindingUnbindMethod(result, useAndroidX));
+      result.addMethod(createBindingUnbindMethod(result));
     }
 
     return result.build();
   }
 
-  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {
+  private MethodSpec createBindingViewDelegateConstructor() {
     return MethodSpec.constructorBuilder()
         .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    "
                 + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",
             bindingClassName, targetTypeName, CONTEXT)
         .addAnnotation(Deprecated.class)
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target")
         .addParameter(VIEW, "source")
@@ -148,9 +142,9 @@ private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {
         .build();
   }
 
-  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForView() {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -161,9 +155,9 @@ private MethodSpec createBindingConstructorForView(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForActivity() {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -174,9 +168,9 @@ private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForDialog() {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -187,9 +181,9 @@ private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {
+  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {
     MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC);
 
     if (hasMethodBindings()) {
@@ -238,7 +232,7 @@ private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean
         constructor.addStatement("$T view", VIEW);
       }
       for (ViewBinding binding : viewBindings) {
-        addViewBinding(constructor, binding, debuggable, useAndroidX);
+        addViewBinding(constructor, binding, debuggable);
       }
       for (FieldCollectionViewBinding binding : collectionBindings) {
         constructor.addStatement("$L", binding.render(debuggable));
@@ -264,12 +258,12 @@ private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean
     return constructor.build();
   }
 
-  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {
+  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass) {
     MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC);
     if (!isFinal && parentBinding == null) {
-      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);
+      result.addAnnotation(CALL_SUPER);
     }
 
     if (hasTargetField()) {
@@ -293,7 +287,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, bool
     if (hasMethodBindings()) {
       result.addCode("\n");
       for (ViewBinding binding : viewBindings) {
-        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);
+        addFieldAndUnbindStatement(bindingClass, result, binding);
       }
     }
 
@@ -305,7 +299,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, bool
   }
 
   private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
-      ViewBinding bindings, boolean useAndroidX) {
+      ViewBinding bindings) {
     // Only add fields to the binding if there are method bindings.
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         bindings.getMethodBindings();
@@ -331,12 +325,12 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
       boolean requiresRemoval = !"".equals(listenerClass.remover());
       String listenerField = "null";
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));
+        TypeName listenerClassName = bestGuess(listenerClass.type());
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addField(listenerClassName, listenerField, PRIVATE);
       }
 
-      String targetType = getTargetType(listenerClass, useAndroidX);
+      String targetType = listenerClass.targetType();
       if (!VIEW_TYPE.equals(targetType)) {
         unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),
             fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);
@@ -357,32 +351,13 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
     }
   }
 
-  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {
-    String type = listenerClass.type();
-    String typeAndroidX = listenerClass.typeAndroidX();
-    if (useAndroidX && !typeAndroidX.isEmpty()) {
-      type = typeAndroidX;
-    }
-    return type;
-  }
-
-  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {
-    String targetType = listenerClass.targetType();
-    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();
-    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {
-      targetType = targetTypeAndroidX;
-    }
-    return targetType;
-  }
-
   private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemoval) {
     return requiresRemoval
         ? listenerClass.remover()
         : listenerClass.setter();
   }
 
-  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
-      boolean useAndroidX) {
+  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
     if (binding.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
       FieldViewBinding fieldBinding = requireNonNull(binding.getFieldBinding());
@@ -423,7 +398,7 @@ private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, bool
     }
 
     addFieldBinding(result, binding, debuggable);
-    addMethodBindings(result, binding, debuggable, useAndroidX);
+    addMethodBindings(result, binding, debuggable);
   }
 
   private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
@@ -444,8 +419,8 @@ private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boo
     }
   }
 
-  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
-      boolean useAndroidX) {
+  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
+      boolean debuggable) {
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         binding.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
@@ -473,7 +448,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, b
       Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
 
       TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
-          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));
+          .superclass(ClassName.bestGuess(listener.type()));
 
       for (ListenerMethod method : getListenerMethods(listener)) {
         MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
@@ -485,14 +460,15 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, b
           callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
         }
 
-        boolean hasReturnType = !"void".equals(method.returnType());
+        boolean hasReturnValue = false;
         CodeBlock.Builder builder = CodeBlock.builder();
-        if (hasReturnType) {
-          builder.add("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          for (MethodViewBinding methodBinding : methodBindings.get(method)) {
+        Set<MethodViewBinding> methodViewBindings = methodBindings.get(method);
+        if (methodViewBindings != null) {
+          for (MethodViewBinding methodBinding : methodViewBindings) {
+            if (methodBinding.hasReturnValue()) {
+              hasReturnValue = true;
+              builder.add("return "); // TODO what about multiple methods?
+            }
             builder.add("target.$L(", methodBinding.getName());
             List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -518,9 +494,12 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, b
             }
             builder.add(");\n");
           }
-        } else if (hasReturnType) {
-          builder.add("$L;\n", method.defaultReturn());
         }
+
+        if (!"void".equals(method.returnType()) && !hasReturnValue) {
+          builder.add("return $L;\n", method.defaultReturn());
+        }
+
         callbackMethod.addCode(builder.build());
         callback.addMethod(callbackMethod.build());
       }
@@ -528,12 +507,12 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, b
       boolean requiresRemoval = listener.remover().length() != 0;
       String listenerField = null;
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));
+        TypeName listenerClassName = bestGuess(listener.type());
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addStatement("$L = $L", listenerField, callback.build());
       }
 
-      String targetType = getTargetType(listener, useAndroidX);
+      String targetType = listener.targetType();
       if (!VIEW_TYPE.equals(targetType)) {
         result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,
             listener.setter(), requiresRemoval ? listenerField : callback.build());
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 7e4c2330..3f30e35d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -72,7 +72,6 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
 
@@ -123,7 +122,6 @@
 
   private int sdk = 1;
   private boolean debuggable = true;
-  private boolean useAndroidX = false;
 
   private final RScanner rScanner = new RScanner();
 
@@ -143,7 +141,6 @@
     }
 
     debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));
-    useAndroidX = hasAndroidX(env.getElementUtils());
 
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
@@ -193,7 +190,7 @@
       TypeElement typeElement = entry.getKey();
       BindingSet binding = entry.getValue();
 
-      JavaFile javaFile = binding.brewJava(sdk, debuggable, useAndroidX);
+      JavaFile javaFile = binding.brewJava(sdk, debuggable);
       try {
         javaFile.writeTo(filer);
       } catch (IOException e) {
@@ -671,12 +668,8 @@ private void parseResourceColor(Element element,
     Id resourceId = elementToId(element, BindColor.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
 
-    FieldResourceBinding.Type colorStateList = useAndroidX
-        ? FieldResourceBinding.Type.COLOR_STATE_LIST_ANDROIDX
-        : FieldResourceBinding.Type.COLOR_STATE_LIST;
-    FieldResourceBinding.Type color = useAndroidX
-        ? FieldResourceBinding.Type.COLOR_ANDROIDX
-        : FieldResourceBinding.Type.COLOR;
+    FieldResourceBinding.Type colorStateList = FieldResourceBinding.Type.COLOR_STATE_LIST;
+    FieldResourceBinding.Type color = FieldResourceBinding.Type.COLOR;
     builder.addResource(new FieldResourceBinding(
         resourceId,
         name,
@@ -781,8 +774,7 @@ private void parseResourceDrawable(Element element,
     Map<Integer, Id> resourceIds = elementToIds(element, BindDrawable.class, new int[] {id, tint});
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint),
-        useAndroidX));
+    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint)));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -854,7 +846,7 @@ private void parseResourceFont(Element element,
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     Id resourceId = elementToId(element, BindFont.class, bindFont.value());
-    builder.addResource(new FieldTypefaceBinding(resourceId, name, style, useAndroidX));
+    builder.addResource(new FieldTypefaceBinding(resourceId, name, style));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -1118,7 +1110,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       TypeVariable typeVariable = (TypeVariable) returnType;
       returnType = typeVariable.getUpperBound();
     }
-    if (!returnType.toString().equals(method.returnType())) {
+    String returnTypeString = returnType.toString();
+    boolean hasReturnValue = !"void".equals(returnTypeString);
+    if (!returnTypeString.equals(method.returnType()) && hasReturnValue) {
       error(element, "@%s methods must have a '%s' return type. (%s.%s)",
           annotationClass.getSimpleName(), method.returnType(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
@@ -1194,7 +1188,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       }
     }
 
-    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
+    MethodViewBinding binding =
+        new MethodViewBinding(name, Arrays.asList(parameters), required, hasReturnValue);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);
 
@@ -1361,19 +1356,6 @@ private static boolean isListenerRequired(ExecutableElement element) {
     return null;
   }
 
-  /**
-   * Perform two lookups to see if the androidx annotation and core libraries are on the application
-   * classpath. If both aren't present butterknife will leverage support annotations and
-   * compat libraries instead.
-   */
-  private static boolean hasAndroidX(Elements elementUtils) {
-    boolean annotationsPresent
-        = elementUtils.getTypeElement("androidx.annotation.NonNull") != null;
-    boolean corePresent
-        = elementUtils.getTypeElement("androidx.core.content.ContextCompat") != null;
-    return annotationsPresent && corePresent;
-  }
-
   private static class RScanner extends TreeScanner {
     Map<Integer, Id> resourceIds = new LinkedHashMap<>();
 
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
index 2bdac846..b888a3f0 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -3,7 +3,6 @@
 import com.squareup.javapoet.CodeBlock;
 
 import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
-import static butterknife.compiler.BindingSet.CONTEXT_COMPAT_ANDROIDX;
 import static butterknife.compiler.BindingSet.UTILS;
 import static butterknife.internal.Constants.NO_RES_ID;
 
@@ -11,13 +10,11 @@
   private final Id id;
   private final String name;
   private final Id tintAttributeId;
-  private final boolean androidX;
 
-  FieldDrawableBinding(Id id, String name, Id tintAttributeId, boolean useAndroidX) {
+  FieldDrawableBinding(Id id, String name, Id tintAttributeId) {
     this.id = id;
     this.name = name;
     this.tintAttributeId = tintAttributeId;
-    this.androidX = useAndroidX;
   }
 
   @Override public Id id() {
@@ -36,7 +33,6 @@
     if (sdk >= 21) {
       return CodeBlock.of("target.$L = context.getDrawable($L)", name, id.code);
     }
-    return CodeBlock.of("target.$L = $T.getDrawable(context, $L)", name,
-        androidX ? CONTEXT_COMPAT_ANDROIDX : CONTEXT_COMPAT, id.code);
+    return CodeBlock.of("target.$L = $T.getDrawable(context, $L)", name, CONTEXT_COMPAT, id.code);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index 868e3bc3..4bf9e7be 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -1,6 +1,6 @@
 package butterknife.compiler;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import com.google.common.collect.ImmutableList;
 import com.google.errorprone.annotations.Immutable;
 import com.squareup.javapoet.ClassName;
@@ -15,11 +15,7 @@
     BOOL("getBoolean"),
     COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
         new ResourceMethod(null, "getColor", false, 23)),
-    COLOR_ANDROIDX(new ResourceMethod(BindingSet.CONTEXT_COMPAT_ANDROIDX, "getColor", false, 1),
-        new ResourceMethod(null, "getColor", false, 23)),
-    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColorStateList", false, 1),
-        new ResourceMethod(null, "getColorStateList", false, 23)),
-    COLOR_STATE_LIST_ANDROIDX(new ResourceMethod(BindingSet.CONTEXT_COMPAT_ANDROIDX,
+    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT,
         "getColorStateList", false, 1),
         new ResourceMethod(null, "getColorStateList", false, 23)),
     DIMEN_AS_INT("getDimensionPixelSize"),
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
index 7ee422a4..21d79116 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -1,13 +1,11 @@
 package butterknife.compiler;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 
 final class FieldTypefaceBinding implements ResourceBinding {
   private static final ClassName RESOURCES_COMPAT =
-      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
-  private static final ClassName RESOURCES_COMPAT_ANDROIDX =
       ClassName.get("androidx.core.content.res", "ResourcesCompat");
   private static final ClassName TYPEFACE = ClassName.get("android.graphics", "Typeface");
 
@@ -37,13 +35,11 @@
   private final Id id;
   private final String name;
   private final TypefaceStyles style;
-  private final boolean useAndroidX;
 
-  FieldTypefaceBinding(Id id, String name, TypefaceStyles style, boolean useAndroidX) {
+  FieldTypefaceBinding(Id id, String name, TypefaceStyles style) {
     this.id = id;
     this.name = name;
     this.style = style;
-    this.useAndroidX = useAndroidX;
   }
 
   @Override public Id id() {
@@ -57,8 +53,7 @@
   @Override public CodeBlock render(int sdk) {
     CodeBlock typeface = sdk >= 26
         ? CodeBlock.of("res.getFont($L)", id.code)
-        : CodeBlock.of("$T.getFont(context, $L)",
-            useAndroidX ? RESOURCES_COMPAT_ANDROIDX : RESOURCES_COMPAT, id.code);
+        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);
     if (style != TypefaceStyles.NORMAL) {
       typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
index 597582a2..84fd6a1d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
@@ -1,6 +1,6 @@
 package butterknife.compiler;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.sun.tools.javac.code.Symbol;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index e4d1c4b7..179d7e53 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -8,11 +8,14 @@
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
+  private final boolean hasReturnValue;
 
-  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required,
+      boolean hasReturnValue) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
+    this.hasReturnValue = hasReturnValue;
   }
 
   public String getName() {
@@ -30,4 +33,8 @@ public String getName() {
   public boolean isRequired() {
     return required;
   }
+
+  public boolean hasReturnValue() {
+    return hasReturnValue;
+  }
 }
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
index aaff4907..9b027ef6 100644
--- a/butterknife-gradle-plugin/build.gradle
+++ b/butterknife-gradle-plugin/build.gradle
@@ -8,13 +8,11 @@ dependencies {
   compileOnly gradleApi()
 
   implementation deps.android.gradlePlugin
-  implementation deps.javaparser
   implementation deps.javapoet
   implementation deps.kotlin.stdLibJdk8
 
   testImplementation deps.junit
   testImplementation deps.truth
-  testImplementation deps.support.annotations
   testImplementation deps.androidx.annotations
   testImplementation deps.compiletesting
 }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index 4e5b618a..d72b63a9 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -7,12 +7,13 @@ import com.android.build.gradle.FeaturePlugin
 import com.android.build.gradle.LibraryExtension
 import com.android.build.gradle.LibraryPlugin
 import com.android.build.gradle.api.BaseVariant
+import com.android.build.gradle.internal.res.GenerateLibraryRFileTask
+import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask
 import groovy.util.XmlSlurper
 import org.gradle.api.DomainObjectSet
 import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.plugins.ExtensionContainer
-import java.io.File
 import java.util.concurrent.atomic.AtomicBoolean
 import kotlin.reflect.KClass
 
@@ -54,33 +55,33 @@ class ButterKnifePlugin : Plugin<Project> {
 
   private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
-      val useAndroidX = (project.findProperty("android.useAndroidX") as String?)?.toBoolean() ?: false
       val outputDir = project.buildDir.resolve(
           "generated/source/r2/${variant.dirName}")
 
-      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
-      task.inputs.property("useAndroidX", useAndroidX)
-      task.outputs.dir(outputDir)
-      variant.registerJavaGeneratingTask(task, outputDir)
-
       val rPackage = getPackageName(variant)
       val once = AtomicBoolean()
       variant.outputs.all { output ->
         val processResources = output.processResources
-        task.dependsOn(processResources)
 
         // Though there might be multiple outputs, their R files are all the same. Thus, we only
         // need to configure the task once with the R.java input and action.
         if (once.compareAndSet(false, true)) {
-          val pathToR = rPackage.replace('.', File.separatorChar)
-          val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
-
-          task.apply {
-            inputs.file(rFile)
-
-            doLast {
-              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", useAndroidX)
-            }
+          // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005)
+          val rFile =
+              project.files(
+                  when (processResources) {
+                    is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile
+                    is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile
+                    else -> throw RuntimeException(
+                        "Minimum supported Android Gradle Plugin is 3.1.0")
+                  })
+                  .builtBy(processResources)
+          project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {
+            it.outputDir = outputDir
+            it.rFile = rFile
+            it.packageName = rPackage
+            it.className = "R2"
+            variant.registerJavaGeneratingTask(it, outputDir)
           }
         }
       }
@@ -88,6 +89,6 @@ class ButterKnifePlugin : Plugin<Project> {
   }
 
   private operator fun <T : Any> ExtensionContainer.get(type: KClass<T>): T {
-    return getByType(type.java)!!
+    return getByType(type.java)
   }
 }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
deleted file mode 100644
index 64856586..00000000
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ /dev/null
@@ -1,116 +0,0 @@
-package butterknife.plugin;
-
-import com.github.javaparser.JavaParser;
-import com.github.javaparser.ast.CompilationUnit;
-import com.github.javaparser.ast.Node;
-import com.github.javaparser.ast.body.BodyDeclaration;
-import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
-import com.github.javaparser.ast.body.FieldDeclaration;
-import com.github.javaparser.ast.body.TypeDeclaration;
-import com.github.javaparser.ast.body.VariableDeclarator;
-import com.github.javaparser.ast.type.PrimitiveType;
-import com.github.javaparser.ast.type.Type;
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.FieldSpec;
-import com.squareup.javapoet.JavaFile;
-import com.squareup.javapoet.TypeSpec;
-import java.io.File;
-import java.util.Arrays;
-import java.util.List;
-
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PUBLIC;
-import static javax.lang.model.element.Modifier.STATIC;
-
-/**
- * Generates a class that contains all supported field names in an R file as final values.
- * Also enables adding support annotations to indicate the type of resource for every field.
- */
-public final class FinalRClassBuilder {
-  private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
-  private static final String ANDROIDX_ANNOTATION_PACKAGE = "androidx.annotation";
-  private static final String[] SUPPORTED_TYPES = {
-      "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
-      "string", "style", "styleable"
-  };
-
-  private FinalRClassBuilder() { }
-
-  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useAndroidX)
-      throws Exception {
-    CompilationUnit compilationUnit = JavaParser.parse(rFile);
-    TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
-
-    TypeSpec.Builder result =
-        TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
-
-    for (Node node : resourceClass.getChildNodes()) {
-      if (node instanceof ClassOrInterfaceDeclaration) {
-        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useAndroidX);
-      }
-    }
-
-    JavaFile finalR = JavaFile.builder(packageName, result.build())
-        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
-        .build();
-
-    finalR.writeTo(outputDir);
-  }
-
-  private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
-      ClassOrInterfaceDeclaration node, boolean useAndroidX) {
-    if (!supportedTypes.contains(node.getNameAsString())) {
-      return;
-    }
-
-    String type = node.getNameAsString();
-    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
-
-    for (BodyDeclaration field : node.getMembers()) {
-      if (field instanceof FieldDeclaration) {
-        FieldDeclaration declaration = (FieldDeclaration) field;
-        // Check that the field is an Int because styleable also contains Int arrays which can't be
-        // used in annotations.
-        if (isInt(declaration)) {
-          addResourceField(resourceType, declaration.getVariables().get(0),
-                  getSupportAnnotationClass(type, useAndroidX));
-        }
-      }
-    }
-
-    result.addType(resourceType.build());
-  }
-
-  private static boolean isInt(FieldDeclaration field) {
-    Type type = field.getCommonType();
-    return type instanceof PrimitiveType
-        && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
-  }
-
-  private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
-      ClassName annotation) {
-    String fieldName = variable.getNameAsString();
-    String fieldValue = variable.getInitializer()
-        .map(Node::toString)
-        .orElseThrow(
-            () -> new IllegalStateException("Field " + fieldName + " missing initializer"));
-    FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
-        .addModifiers(PUBLIC, STATIC, FINAL)
-        .initializer(fieldValue);
-
-    if (annotation != null) {
-      fieldSpecBuilder.addAnnotation(annotation);
-    }
-
-    resourceType.addField(fieldSpecBuilder.build());
-  }
-
-  private static ClassName getSupportAnnotationClass(String type, boolean useAndroidX) {
-    String supportPackage = useAndroidX ? ANDROIDX_ANNOTATION_PACKAGE : SUPPORT_ANNOTATION_PACKAGE;
-    return ClassName.get(supportPackage, capitalize(type) + "Res");
-  }
-
-  private static String capitalize(String word) {
-    return Character.toUpperCase(word.charAt(0)) + word.substring(1);
-  }
-}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt
new file mode 100644
index 00000000..463a7531
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt
@@ -0,0 +1,64 @@
+package butterknife.plugin
+
+import com.squareup.javapoet.ClassName
+import com.squareup.javapoet.FieldSpec
+import com.squareup.javapoet.JavaFile
+import com.squareup.javapoet.TypeSpec
+import java.util.Locale
+import javax.lang.model.element.Modifier.FINAL
+import javax.lang.model.element.Modifier.PUBLIC
+import javax.lang.model.element.Modifier.STATIC
+
+
+private const val ANNOTATION_PACKAGE = "androidx.annotation"
+internal val SUPPORTED_TYPES = setOf("anim", "array", "attr", "bool", "color", "dimen",
+    "drawable", "id", "integer", "layout", "menu", "plurals", "string", "style", "styleable")
+
+/**
+ * Generates a class that contains all supported field names in an R file as final values.
+ * Also enables adding support annotations to indicate the type of resource for every field.
+ */
+class FinalRClassBuilder(
+  private val packageName: String,
+  private val className: String
+) {
+
+  private var resourceTypes = mutableMapOf<String, TypeSpec.Builder>()
+
+  fun build(): JavaFile {
+    val result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC, FINAL)
+    for (type in SUPPORTED_TYPES) {
+      resourceTypes.get(type)?.let {
+        result.addType(it.build())
+      }
+    }
+    return JavaFile.builder(packageName, result.build())
+        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
+        .build()
+  }
+
+  fun addResourceField(type: String, fieldName: String, fieldValue: String) {
+    if (type !in SUPPORTED_TYPES) {
+      return
+    }
+    val fieldSpecBuilder = FieldSpec.builder(Int::class.javaPrimitiveType, fieldName)
+        .addModifiers(PUBLIC, STATIC, FINAL)
+        .initializer(fieldValue)
+
+    fieldSpecBuilder.addAnnotation(getSupportAnnotationClass(type))
+
+    val resourceType =
+        resourceTypes.getOrPut(type) {
+          TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL)
+        }
+    resourceType.addField(fieldSpecBuilder.build())
+  }
+
+  private fun getSupportAnnotationClass(type: String): ClassName {
+    return ClassName.get(ANNOTATION_PACKAGE, type.capitalize(Locale.US) + "Res")
+  }
+
+  // TODO https://youtrack.jetbrains.com/issue/KT-28933
+  private fun String.capitalize(locale: Locale) = substring(0, 1).toUpperCase(locale) + substring(1)
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt
new file mode 100644
index 00000000..96e723d0
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt
@@ -0,0 +1,41 @@
+package butterknife.plugin
+
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.FileCollection
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.InputFiles
+import org.gradle.api.tasks.OutputDirectory
+import org.gradle.api.tasks.TaskAction
+import java.io.File
+
+open class R2Generator : DefaultTask() {
+  @get:OutputDirectory
+  var outputDir: File? = null
+
+  @get:InputFiles
+  var rFile: FileCollection? = null
+
+  @get:Input
+  var packageName: String? = null
+
+  @get:Input
+  var className: String? = null
+
+  @Suppress("unused") // Invoked by Gradle.
+  @TaskAction
+  fun brewJava() {
+    brewJava(rFile!!.singleFile, outputDir!!, packageName!!, className!!)
+  }
+}
+
+fun brewJava(
+  rFile: File,
+  outputDir: File,
+  packageName: String,
+  className: String
+) {
+  FinalRClassBuilder(packageName, className)
+      .also { ResourceSymbolListReader(it).readSymbolTable(rFile) }
+      .build()
+      .writeTo(outputDir)
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt
new file mode 100644
index 00000000..1bcf57fb
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt
@@ -0,0 +1,28 @@
+package butterknife.plugin
+
+import java.io.File
+
+class ResourceSymbolListReader(private val builder: FinalRClassBuilder) {
+
+  fun readSymbolTable(symbolTable: File) {
+    symbolTable.forEachLine { processLine(it) }
+  }
+
+  private fun processLine(line: String) {
+    val values = line.split(' ')
+    if (values.size < 4) {
+      return
+    }
+    val javaType = values[0]
+    if (javaType != "int") {
+      return
+    }
+    val symbolType = values[1]
+    if (symbolType !in SUPPORTED_TYPES) {
+      return
+    }
+    val name = values[2]
+    val value = values[3]
+    builder.addResourceField(symbolType, name, value)
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/build.gradle b/butterknife-gradle-plugin/src/test/build.gradle
index 1ce175dd..92f5a7c9 100644
--- a/butterknife-gradle-plugin/src/test/build.gradle
+++ b/butterknife-gradle-plugin/src/test/build.gradle
@@ -8,11 +8,11 @@ repositories {
 }
 
 android {
-    compileSdkVersion 27
+    compileSdkVersion 28
 
     compileOptions {
-        sourceCompatibility = JavaVersion.VERSION_1_7
-        targetCompatibility = JavaVersion.VERSION_1_7
+        sourceCompatibility = JavaVersion.VERSION_1_8
+        targetCompatibility = JavaVersion.VERSION_1_8
     }
 
     defaultConfig {
@@ -62,6 +62,5 @@ android {
 }
 
 dependencies {
-    implementation "com.android.support:support-annotations:27.0.2"
-    implementation "com.android.support:support-v4:27.0.2"
+    implementation "androidx.core:core:1.0.0"
 }
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
index 92ce2fd8..fa358db9 100644
--- a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
@@ -10,6 +10,9 @@ class BuildFilesRule(private val root: File) : TestRule {
     override fun apply(base: Statement, description: Description): Statement {
         return object : Statement() {
             override fun evaluate() {
+                val settingsFile = File(root, "settings.gradle")
+                val hasSettingsFile = settingsFile.exists()
+                if (!hasSettingsFile) settingsFile.writeText("")
                 val buildFile = File(root, "build.gradle")
                 val hasBuildFile = buildFile.exists()
                 if (hasBuildFile) {
@@ -29,6 +32,7 @@ class BuildFilesRule(private val root: File) : TestRule {
                 try {
                     base.evaluate()
                 } finally {
+                    if (!hasSettingsFile) settingsFile.delete()
                     if (!hasBuildFile) buildFile.delete()
                     if (!hasManifestFile) manifestFile.delete()
                 }
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
index ffedd5f8..656cdddb 100644
--- a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
@@ -7,42 +7,25 @@ import org.junit.Assert.assertEquals
 import org.junit.Rule
 import org.junit.Test
 import org.junit.rules.TemporaryFolder
-import org.junit.runner.RunWith
-import org.junit.runners.Parameterized
-import org.junit.runners.Parameterized.Parameters
 
-@RunWith(Parameterized::class)
-class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useAndroidX: Boolean) {
+class FinalRClassBuilderTest {
   @Rule @JvmField val tempFolder = TemporaryFolder()
 
   @Test fun brewJava() {
     val packageName = "com.butterknife.example"
-
-    val rFile = tempFolder.newFile("R.java").also {
-      it.writeText(javaClass.getResource("/fixtures/$rFile.java").readText())
+    val rFile = tempFolder.newFile("R.txt").also {
+      it.writeText(javaClass.getResource("/fixtures/R.txt").readText())
     }
 
     val outputDir = tempFolder.newFolder()
-    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2", useAndroidX)
+    brewJava(rFile, outputDir, packageName, "R2")
 
     val actual = outputDir.resolve("com/butterknife/example/R2.java").readText()
-    var expected = javaClass.getResource("/fixtures/$r2File.java").readText()
-    if (useAndroidX) {
-      expected = expected.replace("import android.support.", "import androidx.")
-    }
+    val expected = javaClass.getResource("/fixtures/R2.java").readText()
 
     assertEquals(expected.trim(), actual.trim())
 
     val actualJava = JavaFileObjects.forSourceString("$packageName.R2", actual)
     assertAbout(javaSource()).that(actualJava).compilesWithoutError()
   }
-
-  companion object {
-    @JvmStatic @Parameters fun data() = listOf(
-        arrayOf<Any>("R", "R2", false),
-        arrayOf<Any>("RFinal", "R2", false),
-        arrayOf<Any>("R", "R2", true),
-        arrayOf<Any>("RFinal", "R2", true)
-    )
-  }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
deleted file mode 100644
index f02e0d09..00000000
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.example.butterknife;
-
-public final class R {
-  public static final class unsupported {
-    public static int res = 0x7f040000;
-  }
-
-  public static final class anim {
-    public static int res = 0x7f040001;
-  }
-
-  public static final class array {
-    public static int res = 0x7f040002;
-  }
-
-  public static final class attr {
-    public static int res = 0x7f040003;
-  }
-
-  public static final class bool {
-    public static int res = 0x7f040004;
-  }
-
-  public static final class color {
-    public static int res = 0x7f040005;
-  }
-
-  public static final class dimen {
-    public static int res = 0x7f040006;
-  }
-
-  public static final class drawable {
-    public static int res = 0x7f040007;
-  }
-
-  public static final class id {
-    public static int res = 0x7f040008;
-  }
-
-  public static final class integer {
-    public static int res = 0x7f040009;
-  }
-
-  public static final class layout {
-    public static int res = 0x7f040010;
-  }
-
-  public static final class menu {
-    public static int res = 0x7f040011;
-  }
-
-  public static final class plurals {
-    public static int res = 0x7f040012;
-  }
-
-  public static final class string {
-    public static int res = 0x7f040013;
-  }
-
-  public static final class style {
-    public static int res = 0x7f040014;
-  }
-
-  public static final class styleable {
-    public static int[] resArray = { 0x7f040003 };
-    public static int res = 0x7f040015;
-  }
-}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt b/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt
new file mode 100644
index 00000000..1117f0d8
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt
@@ -0,0 +1,18 @@
+int unsupported res 0x7f040000
+int anim res 0x7f040001
+int array res 0x7f040002
+int attr res 0x7f040003
+int bool res 0x7f040004
+int color res 0x7f040005
+int dimen res 0x7f040006
+int drawable res 0x7f040007
+int id res 0x7f040008
+int integer res 0x7f040009
+int layout res 0x7f040010
+int menu res 0x7f040011
+int plurals res 0x7f040012
+int string res 0x7f040013
+int style res 0x7f040014
+int[] styleable resArray { 0x7f040003 , 0x7f040015 }
+int styleable resArray_child 0
+int styleable resArray_child2 1
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
index 4b44bab4..095214bb 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -1,21 +1,21 @@
 // Generated code from Butter Knife gradle plugin. Do not modify!
 package com.butterknife.example;
 
-import android.support.annotation.AnimRes;
-import android.support.annotation.ArrayRes;
-import android.support.annotation.AttrRes;
-import android.support.annotation.BoolRes;
-import android.support.annotation.ColorRes;
-import android.support.annotation.DimenRes;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.IdRes;
-import android.support.annotation.IntegerRes;
-import android.support.annotation.LayoutRes;
-import android.support.annotation.MenuRes;
-import android.support.annotation.PluralsRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-import android.support.annotation.StyleableRes;
+import androidx.annotation.AnimRes;
+import androidx.annotation.ArrayRes;
+import androidx.annotation.AttrRes;
+import androidx.annotation.BoolRes;
+import androidx.annotation.ColorRes;
+import androidx.annotation.DimenRes;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.IdRes;
+import androidx.annotation.IntegerRes;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.MenuRes;
+import androidx.annotation.PluralsRes;
+import androidx.annotation.StringRes;
+import androidx.annotation.StyleRes;
+import androidx.annotation.StyleableRes;
 
 public final class R2 {
   public static final class anim {
@@ -90,6 +90,9 @@
 
   public static final class styleable {
     @StyleableRes
-    public static final int res = 0x7f040015;
+    public static final int resArray_child = 0;
+
+    @StyleableRes
+    public static final int resArray_child2 = 1;
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
deleted file mode 100644
index c1391905..00000000
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package com.example.butterknife;
-
-public final class R {
-  public static final class anim {
-    public static final int res = 0x7f040001;
-  }
-
-  public static final class array {
-    public static final int res = 0x7f040002;
-  }
-
-  public static final class attr {
-    public static final int res = 0x7f040003;
-  }
-
-  public static final class bool {
-    public static final int res = 0x7f040004;
-  }
-
-  public static final class color {
-    public static final int res = 0x7f040005;
-  }
-
-  public static final class dimen {
-    public static final int res = 0x7f040006;
-  }
-
-  public static final class drawable {
-    public static final int res = 0x7f040007;
-  }
-
-  public static final class id {
-    public static final int res = 0x7f040008;
-  }
-
-  public static final class integer {
-    public static final int res = 0x7f040009;
-  }
-
-  public static final class layout {
-    public static final int res = 0x7f040010;
-  }
-
-  public static final class menu {
-    public static final int res = 0x7f040011;
-  }
-
-  public static final class plurals {
-    public static final int res = 0x7f040012;
-  }
-
-  public static final class string {
-    public static final int res = 0x7f040013;
-  }
-
-  public static final class style {
-    public static final int res = 0x7f040014;
-  }
-
-  public static final class styleable {
-    public static final int res = 0x7f040015;
-  }
-}
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index 4358fda8..e604af1f 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -4,8 +4,8 @@ android {
   compileSdkVersion versions.compileSdk
 
   compileOptions {
-    sourceCompatibility = JavaVersion.VERSION_1_7
-    targetCompatibility = JavaVersion.VERSION_1_7
+    sourceCompatibility = JavaVersion.VERSION_1_8
+    targetCompatibility = JavaVersion.VERSION_1_8
   }
 
   defaultConfig {
@@ -15,7 +15,7 @@ android {
     versionCode 1
     versionName '1.0.0'
 
-    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
   }
 
   lintOptions {
@@ -43,11 +43,9 @@ android {
 
     reflect {
       dimension 'runtime'
-      applicationIdSuffix '.reflect'
     }
     codegen {
       dimension 'runtime'
-      applicationIdSuffix '.codegen'
     }
   }
 
@@ -67,6 +65,6 @@ dependencies {
 
   androidTestImplementation deps.junit
   androidTestImplementation deps.truth
-  androidTestImplementation deps.support.test.runner
-  androidTestImplementation deps.support.test.rules
+  androidTestImplementation deps.androidx.test.runner
+  androidTestImplementation deps.androidx.test.rules
 }
diff --git a/butterknife-integration-test/src/androidTest/font_licenses.txt b/butterknife-integration-test/src/androidTest/font_licenses.txt
new file mode 100644
index 00000000..0b83a9a7
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/font_licenses.txt
@@ -0,0 +1,93 @@
+Copyright 2006 The Inconsolata Project Authors
+
+This Font Software is licensed under the SIL Open Font License, Version 1.1.
+This license is copied below, and is also available with a FAQ at:
+http://scripts.sil.org/OFL
+
+
+-----------------------------------------------------------
+SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
+-----------------------------------------------------------
+
+PREAMBLE
+The goals of the Open Font License (OFL) are to stimulate worldwide
+development of collaborative font projects, to support the font creation
+efforts of academic and linguistic communities, and to provide a free and
+open framework in which fonts may be shared and improved in partnership
+with others.
+
+The OFL allows the licensed fonts to be used, studied, modified and
+redistributed freely as long as they are not sold by themselves. The
+fonts, including any derivative works, can be bundled, embedded, 
+redistributed and/or sold with any software provided that any reserved
+names are not used by derivative works. The fonts and derivatives,
+however, cannot be released under any other type of license. The
+requirement for fonts to remain under this license does not apply
+to any document created using the fonts or their derivatives.
+
+DEFINITIONS
+"Font Software" refers to the set of files released by the Copyright
+Holder(s) under this license and clearly marked as such. This may
+include source files, build scripts and documentation.
+
+"Reserved Font Name" refers to any names specified as such after the
+copyright statement(s).
+
+"Original Version" refers to the collection of Font Software components as
+distributed by the Copyright Holder(s).
+
+"Modified Version" refers to any derivative made by adding to, deleting,
+or substituting -- in part or in whole -- any of the components of the
+Original Version, by changing formats or by porting the Font Software to a
+new environment.
+
+"Author" refers to any designer, engineer, programmer, technical
+writer or other person who contributed to the Font Software.
+
+PERMISSION & CONDITIONS
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of the Font Software, to use, study, copy, merge, embed, modify,
+redistribute, and sell modified and unmodified copies of the Font
+Software, subject to the following conditions:
+
+1) Neither the Font Software nor any of its individual components,
+in Original or Modified Versions, may be sold by itself.
+
+2) Original or Modified Versions of the Font Software may be bundled,
+redistributed and/or sold with any software, provided that each copy
+contains the above copyright notice and this license. These can be
+included either as stand-alone text files, human-readable headers or
+in the appropriate machine-readable metadata fields within text or
+binary files as long as those fields can be easily viewed by the user.
+
+3) No Modified Version of the Font Software may use the Reserved Font
+Name(s) unless explicit written permission is granted by the corresponding
+Copyright Holder. This restriction only applies to the primary font name as
+presented to the users.
+
+4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
+Software shall not be used to promote, endorse or advertise any
+Modified Version, except to acknowledge the contribution(s) of the
+Copyright Holder(s) and the Author(s) or with their explicit written
+permission.
+
+5) The Font Software, modified or unmodified, in part or in whole,
+must be distributed entirely under this license, and must not be
+distributed under any other license. The requirement for fonts to
+remain under this license does not apply to any document created
+using the Font Software.
+
+TERMINATION
+This license becomes null and void if any of the above conditions are
+not met.
+
+DISCLAIMER
+THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
+COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
+DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
+OTHER DEALINGS IN THE FONT SOFTWARE.
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java
new file mode 100644
index 00000000..fdfc9c2f
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java
@@ -0,0 +1,28 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import android.view.animation.Animation;
+import butterknife.BindAnim;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+
+public final class BindAnimTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindAnim(android.R.anim.fade_in) Animation actual;
+  }
+
+  @Test public void anim() {
+    Target target = new Target();
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertNotNull(target.actual); // Check more?
+
+    unbinder.unbind();
+    assertNotNull(target.actual);
+  }
+}
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindArrayTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
similarity index 79%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindArrayTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
index 1efa8bb6..792b403f 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindArrayTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindArray;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindArrayTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class StringArrayTarget {
     @BindArray(R.array.string_one_two_three) String[] actual;
@@ -20,7 +23,7 @@
     StringArrayTarget target = new StringArrayTarget();
     String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);
 
-    Unbinder unbinder = new BindArrayTest$StringArrayTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -35,7 +38,7 @@
     IntArrayTarget target = new IntArrayTarget();
     int[] expected = context.getResources().getIntArray(R.array.int_one_two_three);
 
-    Unbinder unbinder = new BindArrayTest$IntArrayTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -50,7 +53,7 @@
     CharSequenceArrayTarget target = new CharSequenceArrayTarget();
     CharSequence[] expected = context.getResources().getTextArray(R.array.int_one_two_three);
 
-    Unbinder unbinder = new BindArrayTest$CharSequenceArrayTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBitmapTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
similarity index 70%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindBitmapTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
index b15fe241..c918af45 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBitmapTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
@@ -1,18 +1,21 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindBitmap;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static org.junit.Assert.assertTrue;
 
 public final class BindBitmapTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindBitmap(R.drawable.pixel) Bitmap actual;
@@ -22,7 +25,7 @@
     Target target = new Target();
     Bitmap expected = BitmapFactory.decodeResource(context.getResources(), R.drawable.pixel);
 
-    Unbinder unbinder = new BindBitmapTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertTrue(target.actual.sameAs(expected));
 
     unbinder.unbind();
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBoolTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
similarity index 68%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindBoolTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
index 627d4e98..6a2be219 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBoolTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindBool;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindBoolTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindBool(R.bool.just_true) boolean actual;
@@ -20,7 +23,7 @@
     Target target = new Target();
     boolean expected = context.getResources().getBoolean(R.bool.just_true);
 
-    Unbinder unbinder = new BindBoolTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindColorTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
similarity index 76%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindColorTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
index bc4ac69d..99eaa0d7 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindColorTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
@@ -1,17 +1,20 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
 import android.content.res.ColorStateList;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindColor;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindColorTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class IntTarget {
     @BindColor(R.color.red) int actual;
@@ -21,7 +24,7 @@
     IntTarget target = new IntTarget();
     int expected = context.getResources().getColor(R.color.red);
 
-    Unbinder unbinder = new BindColorTest$IntTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -36,7 +39,7 @@
     ColorStateListTarget target = new ColorStateListTarget();
     ColorStateList expected = context.getResources().getColorStateList(R.color.colors);
 
-    Unbinder unbinder = new BindColorTest$ColorStateListTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual.toString()).isEqualTo(expected.toString());
 
     unbinder.unbind();
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDimenTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
similarity index 75%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindDimenTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
index 78001649..538e643c 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDimenTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindDimen;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindDimenTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class IntTarget {
     @BindDimen(R.dimen.twelve_point_two_dp) int actual;
@@ -20,7 +23,7 @@
     IntTarget target = new IntTarget();
     int expected = context.getResources().getDimensionPixelSize(R.dimen.twelve_point_two_dp);
 
-    Unbinder unbinder = new BindDimenTest$IntTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -35,7 +38,7 @@
     FloatTarget target = new FloatTarget();
     float expected = context.getResources().getDimension(R.dimen.twelve_point_two_dp);
 
-    Unbinder unbinder = new BindDimenTest$FloatTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDrawableTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
similarity index 72%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindDrawableTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
index b9f7c063..37f47c50 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDrawableTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
@@ -1,17 +1,20 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindDrawable;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindDrawableTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindDrawable(R.drawable.circle) Drawable actual;
@@ -21,7 +24,7 @@
     Target target = new Target();
     Drawable expected = context.getResources().getDrawable(R.drawable.circle);
 
-    Unbinder unbinder = new BindDrawableTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual.getConstantState()).isEqualTo(expected.getConstantState());
 
     unbinder.unbind();
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindFloatTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
similarity index 72%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindFloatTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
index a835f842..5e2e1e8a 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindFloatTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
@@ -1,17 +1,20 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
 import android.util.TypedValue;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindFloat;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindFloatTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindFloat(R.dimen.twelve_point_two) float actual;
@@ -23,7 +26,7 @@
     context.getResources().getValue(R.dimen.twelve_point_two, value, true);
     float expected = value.getFloat();
 
-    Unbinder unbinder = new BindFloatTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java
new file mode 100644
index 00000000..b2cb1c57
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java
@@ -0,0 +1,53 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.view.View;
+import androidx.core.content.res.ResourcesCompat;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.filters.SdkSuppress;
+import butterknife.BindFont;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import com.example.butterknife.test.R;
+import org.junit.Test;
+
+import static android.graphics.Typeface.BOLD;
+import static com.google.common.truth.Truth.assertThat;
+
+@SdkSuppress(minSdkVersion = 24) // AndroidX problems on earlier versions
+public final class BindFontTest {
+  private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
+
+  static class TargetTypeface {
+    @BindFont(R.font.inconsolata_regular) Typeface actual;
+  }
+
+  @Test public void typeface() {
+    TargetTypeface target = new TargetTypeface();
+    Typeface expected = ResourcesCompat.getFont(context, R.font.inconsolata_regular);
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isSameAs(expected);
+  }
+
+  static class TargetStyle {
+    @BindFont(value = R.font.inconsolata_regular, style = BOLD) Typeface actual;
+  }
+
+  @Test public void style() {
+    TargetStyle target = new TargetStyle();
+    Typeface expected =
+        Typeface.create(ResourcesCompat.getFont(context, R.font.inconsolata_regular), BOLD);
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isSameAs(expected);
+  }
+}
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindIntTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
similarity index 67%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindIntTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
index 9f6e150e..4900d396 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindIntTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindInt;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindIntTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindInt(R.integer.twelve) int actual;
@@ -20,7 +23,7 @@
     Target target = new Target();
     int expected = context.getResources().getInteger(R.integer.twelve);
 
-    Unbinder unbinder = new BindIntTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindStringTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
similarity index 67%
rename from butterknife-runtime/src/androidTest/java/butterknife/functional/BindStringTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
index 4a0981a3..6a8ce976 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/functional/BindStringTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindString;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.runtime.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindStringTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindString(R.string.hey) String actual;
@@ -20,7 +23,7 @@
     Target target = new Target();
     String expected = context.getString(R.string.hey);
 
-    Unbinder unbinder = new BindStringTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java
new file mode 100644
index 00000000..7f7fd62f
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java
@@ -0,0 +1,27 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindViewTest {
+  static class TargetView {
+    @BindView(1) View actual;
+  }
+
+  @Test public void view() {
+    View tree = ViewTree.create(1);
+    View expected = tree.findViewById(1);
+
+    TargetView target = new TargetView();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java
new file mode 100644
index 00000000..61370435
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java
@@ -0,0 +1,47 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindViewsTest {
+  static class TargetViewArray {
+    @BindViews({1, 2, 3}) View[] actual;
+  }
+
+  @Test public void array() {
+    View tree = ViewTree.create(1, 2, 3);
+    View expected1 = tree.findViewById(1);
+    View expected2 = tree.findViewById(2);
+    View expected3 = tree.findViewById(3);
+
+    TargetViewArray target = new TargetViewArray();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).asList().containsExactly(expected1, expected2, expected3).inOrder();
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+  static class TargetViewList {
+    @BindViews({1, 2, 3}) List<View> actual;
+  }
+
+  @Test public void list() {
+    View tree = ViewTree.create(1, 2, 3);
+    View expected1 = tree.findViewById(1);
+    View expected2 = tree.findViewById(2);
+    View expected3 = tree.findViewById(3);
+
+    TargetViewList target = new TargetViewList();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).containsExactly(expected1, expected2, expected3).inOrder();
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java
new file mode 100644
index 00000000..d2ecc713
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java
@@ -0,0 +1,238 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CompoundButton;
+import android.widget.FrameLayout;
+import android.widget.ToggleButton;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnCheckedChanged;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnCheckedChangedTest {
+  static final class Simple {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class MultipleBindings {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) void click1() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(1) void clicks2() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleBindings() {
+    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    MultipleBindings target = new MultipleBindings();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) public void publicClick() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(2) void packageClick() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(3) protected void protectedClick() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(ToggleButton.class, 1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    view3.performClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnCheckedChanged({1, 2}) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(ToggleButton.class, 1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    view2.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnCheckedChanged(1) public void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(ToggleButton.class, 2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnCheckedChanged(1) void clickTextView(CompoundButton view) {
+      last = view;
+    }
+
+    @OnCheckedChanged(2) void clickButton(ToggleButton view) {
+      last = view;
+    }
+
+    @OnCheckedChanged(3) void clickMyInterface(MyInterface view) {
+      last = (View) view;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends ToggleButton implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performClick();
+    assertSame(view1, target.last);
+
+    view2.performClick();
+    assertSame(view2, target.last);
+
+    view3.performClick();
+    assertSame(view3, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
index 8099272e..9893f1a4 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
@@ -1,12 +1,13 @@
 package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.FrameLayout;
 import android.widget.TextView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 import butterknife.Optional;
@@ -28,8 +29,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void simple() {
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     Simple target = new Simple();
@@ -56,10 +58,11 @@
     }
   }
 
+  @UiThreadTest
   @Test public void multipleBindings() {
     assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
 
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     MultipleBindings target = new MultipleBindings();
@@ -90,8 +93,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void visibilities() {
-    View tree = treeWithIds(1, 2, 3);
+    View tree = ViewTree.create(1, 2, 3);
     View view1 = tree.findViewById(1);
     View view2 = tree.findViewById(2);
     View view3 = tree.findViewById(3);
@@ -118,8 +122,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void multipleIds() {
-    View tree = treeWithIds(1, 2);
+    View tree = ViewTree.create(1, 2);
     View view1 = tree.findViewById(1);
     View view2 = tree.findViewById(2);
 
@@ -147,8 +152,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void optionalIdPresent() {
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     OptionalId target = new OptionalId();
@@ -163,8 +169,9 @@
     assertEquals(1, target.clicks);
   }
 
+  @UiThreadTest
   @Test public void optionalIdAbsent() {
-    View tree = treeWithIds(2);
+    View tree = ViewTree.create(2);
     View view2 = tree.findViewById(2);
 
     OptionalId target = new OptionalId();
@@ -201,6 +208,7 @@
     }
   }
 
+  @UiThreadTest
   @Test public void argumentCast() {
     class MyView extends Button implements ArgumentCast.MyInterface {
       MyView(Context context) {
@@ -243,28 +251,4 @@
     view4.performClick();
     assertSame(view4, target.last);
   }
-
-  private static View treeWithIds(int... ids) {
-    Context context = InstrumentationRegistry.getContext();
-    FrameLayout group = new FrameLayout(context);
-
-    class SuperGrossView extends View {
-      SuperGrossView(Context context) {
-        super(context);
-      }
-
-      @Override public boolean post(Runnable action) {
-        // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
-        action.run();
-        return true;
-      }
-    }
-
-    for (int id : ids) {
-      View view = new SuperGrossView(context);
-      view.setId(id);
-      group.addView(view);
-    }
-    return group;
-  }
 }
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
new file mode 100644
index 00000000..019f5b9e
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
@@ -0,0 +1,257 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnLongClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnLongClickTest {
+  static final class Simple {
+    boolean returnValue = true;
+    int clicks = 0;
+
+    @OnLongClick(1) boolean click() {
+      clicks++;
+      return returnValue;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    assertTrue(view1.performLongClick());
+    assertEquals(1, target.clicks);
+
+    target.returnValue = false;
+    assertFalse(view1.performLongClick());
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class ReturnVoid {
+    int clicks = 0;
+
+    @OnLongClick(1) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void returnVoid() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    ReturnVoid target = new ReturnVoid();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    assertTrue(view1.performLongClick());
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnLongClick(1) public boolean publicClick() {
+      clicks++;
+      return true;
+    }
+
+    @OnLongClick(2) boolean packageClick() {
+      clicks++;
+      return true;
+    }
+
+    @OnLongClick(3) protected boolean protectedClick() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+
+    view3.performLongClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnLongClick({1, 2}) boolean click() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnLongClick(1) public boolean click() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performLongClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnLongClick(1) boolean clickView(View view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(2) boolean clickTextView(TextView view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(3) boolean clickButton(Button view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(4) boolean clickMyInterface(MyInterface view) {
+      last = (View) view;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends Button implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    View view4 = new MyView(InstrumentationRegistry.getContext());
+    view4.setId(4);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+    tree.addView(view4);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performLongClick();
+    assertSame(view1, target.last);
+
+    view2.performLongClick();
+    assertSame(view2, target.last);
+
+    view3.performLongClick();
+    assertSame(view3, target.last);
+
+    view4.performLongClick();
+    assertSame(view4, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java
new file mode 100644
index 00000000..cae85884
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java
@@ -0,0 +1,52 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import java.lang.reflect.InvocationTargetException;
+
+final class ViewTree {
+  static View create(int... ids) {
+    return create(View.class, ids);
+  }
+
+  static View create(Class<? extends View> cls, int... ids) {
+    Context context = InstrumentationRegistry.getContext();
+    ViewGroup group = new FrameLayout(context);
+    for (int id : ids) {
+      View view;
+      if (cls == View.class) {
+        view = new NoPostView(context);
+      } else {
+        try {
+          view = cls.getConstructor(Context.class).newInstance(context);
+        } catch (IllegalAccessException | InstantiationException | NoSuchMethodException e) {
+          throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
+          Throwable cause = e.getCause();
+          if (cause instanceof RuntimeException) throw (RuntimeException) cause;
+          if (cause instanceof Error) throw (Error) cause;
+          throw new RuntimeException(cause);
+        }
+      }
+
+      view.setId(id);
+      group.addView(view);
+    }
+    return group;
+  }
+
+  private static final class NoPostView extends View {
+    NoPostView(Context context) {
+      super(context);
+    }
+
+    @Override public boolean post(Runnable action) {
+      // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
+      action.run();
+      return true;
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
index 3e2d8fab..d7da3011 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.library;
 
-import android.support.test.rule.ActivityTestRule;
+import androidx.test.rule.ActivityTestRule;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
 import com.example.butterknife.R;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
index a086835c..382a22df 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
@@ -1,8 +1,8 @@
 package com.example.butterknife.library;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
 import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import com.example.butterknife.R;
 import org.junit.Test;
 
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
index 626bd17a..81eb766d 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
@@ -1,10 +1,10 @@
 package com.example.butterknife.unbinder;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
 import android.view.View;
 import android.widget.Button;
 import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
 import org.junit.Test;
diff --git a/butterknife-integration-test/src/androidTest/proguard.pro b/butterknife-integration-test/src/androidTest/proguard.pro
index f85ddc9e..4807b6d1 100644
--- a/butterknife-integration-test/src/androidTest/proguard.pro
+++ b/butterknife-integration-test/src/androidTest/proguard.pro
@@ -1,4 +1,5 @@
 -dontoptimize
 -dontobfuscate
 -dontshrink
+-dontnote **
 -dontwarn **
diff --git a/butterknife-runtime/src/androidTest/res/color/colors.xml b/butterknife-integration-test/src/androidTest/res/color/colors.xml
similarity index 100%
rename from butterknife-runtime/src/androidTest/res/color/colors.xml
rename to butterknife-integration-test/src/androidTest/res/color/colors.xml
diff --git a/butterknife-runtime/src/androidTest/res/drawable/circle.xml b/butterknife-integration-test/src/androidTest/res/drawable/circle.xml
similarity index 100%
rename from butterknife-runtime/src/androidTest/res/drawable/circle.xml
rename to butterknife-integration-test/src/androidTest/res/drawable/circle.xml
diff --git a/butterknife-runtime/src/androidTest/res/drawable/pixel.png b/butterknife-integration-test/src/androidTest/res/drawable/pixel.png
similarity index 100%
rename from butterknife-runtime/src/androidTest/res/drawable/pixel.png
rename to butterknife-integration-test/src/androidTest/res/drawable/pixel.png
diff --git a/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf b/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf
new file mode 100644
index 00000000..fc981ce7
Binary files /dev/null and b/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf differ
diff --git a/butterknife-runtime/src/androidTest/res/values/values.xml b/butterknife-integration-test/src/androidTest/res/values/values.xml
similarity index 100%
rename from butterknife-runtime/src/androidTest/res/values/values.xml
rename to butterknife-integration-test/src/androidTest/res/values/values.xml
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java
new file mode 100644
index 00000000..79bd2521
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindAnim;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindAnimFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindAnim(1) String actual;
+  }
+
+  @Test public void typeMustBeAnimation() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindAnim field type must be 'Animation'. "
+              + "(com.example.butterknife.functional.BindAnimFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java
new file mode 100644
index 00000000..5740af10
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java
@@ -0,0 +1,31 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindArray;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindArrayFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindArray(1) String actual;
+  }
+
+  @Test public void typeMustBeSupported() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindArray field type must be one of: "
+              + "String[], int[], CharSequence[], android.content.res.TypedArray. "
+              + "(com.example.butterknife.functional.BindArrayFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java
new file mode 100644
index 00000000..c46c3295
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindBitmap;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindBitmapFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindBitmap(1) String actual;
+  }
+
+  @Test public void typeMustBeBitmap() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindBitmap field type must be 'Bitmap'. "
+              + "(com.example.butterknife.functional.BindBitmapFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java
new file mode 100644
index 00000000..d0b23508
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindBool;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindBoolFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindBool(1) String actual;
+  }
+
+  @Test public void typeMustBeBool() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindBool field type must be 'boolean'. "
+              + "(com.example.butterknife.functional.BindBoolFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java
new file mode 100644
index 00000000..eb666f49
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindColorFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindColor(1) String actual;
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindColor field type must be 'int' or 'ColorStateList'. "
+              + "(com.example.butterknife.functional.BindColorFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java
new file mode 100644
index 00000000..8bbddfbf
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindDimen;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindDimenFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindDimen(1) String actual;
+  }
+
+  @Test public void typeMustBeIntOrFloat() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindDimen field type must be 'int' or 'float'. "
+              + "(com.example.butterknife.functional.BindDimenFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java
new file mode 100644
index 00000000..74cc0b4e
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindDrawable;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindDrawableFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindDrawable(1) String actual;
+  }
+
+  @Test public void typeMustBeDrawable() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindDrawable field type must be 'Drawable'. "
+              + "(com.example.butterknife.functional.BindDrawableFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java
new file mode 100644
index 00000000..c188d977
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindFloat;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindFloatFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindFloat(1) String actual;
+  }
+
+  @Test public void typeMustBeFloat() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFloat field type must be 'float'. "
+              + "(com.example.butterknife.functional.BindFloatFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java
new file mode 100644
index 00000000..fcbca3fb
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java
@@ -0,0 +1,51 @@
+package com.example.butterknife.functional;
+
+import android.graphics.Typeface;
+import android.view.View;
+import androidx.test.filters.SdkSuppress;
+import butterknife.BindFont;
+import butterknife.ButterKnife;
+import com.example.butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindFontFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class TargetType {
+    @BindFont(1) String actual;
+  }
+
+  @Test public void typeMustBeTypeface() {
+    TargetType target = new TargetType();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFont field type must be 'Typeface'. "
+              + "(com.example.butterknife.functional.BindFontFailureTest$TargetType.actual)");
+    }
+  }
+
+  static class TargetStyle {
+    @BindFont(value = R.font.inconsolata_regular, style = 5) Typeface actual;
+  }
+
+  @SdkSuppress(minSdkVersion = 24) // AndroidX problems on earlier versions
+  @Test public void styleMustBeValid() {
+    TargetStyle target = new TargetStyle();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. "
+              + "(com.example.butterknife.functional.BindFontFailureTest$TargetStyle.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java
new file mode 100644
index 00000000..cdd970ce
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindInt;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindIntFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindInt(1) String actual;
+  }
+
+  @Test public void typeMustBeInt() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindInt field type must be 'int'. "
+              + "(com.example.butterknife.functional.BindIntFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java
new file mode 100644
index 00000000..f68d78bf
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindString;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindStringFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindString(1) boolean actual;
+  }
+
+  @Test public void typeMustBeString() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindString field type must be 'String'. "
+              + "(com.example.butterknife.functional.BindStringFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java
new file mode 100644
index 00000000..912b68bc
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindViewFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class NotView {
+    @BindView(1) String actual;
+  }
+
+  @Test public void failsIfNotView() {
+    NotView target = new NotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindView fields must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewFailureTest$NotView.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java
new file mode 100644
index 00000000..78983566
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java
@@ -0,0 +1,100 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import java.util.Deque;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindViewsFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class NoIds {
+    @BindViews({}) View[] actual;
+  }
+
+  @Test public void failsIfNoIds() {
+    NoIds target = new NoIds();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews must specify at least one ID. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$NoIds.actual)");
+    }
+  }
+
+  static class NoGenericType {
+    @BindViews(1) List actual;
+  }
+
+  @Test public void failsIfNoGenericType() {
+    NoGenericType target = new NoGenericType();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List must have a generic component. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$NoGenericType.actual)");
+    }
+  }
+
+  static class BadCollection {
+    @BindViews(1) Deque<View> actual;
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    BadCollection target = new BadCollection();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews must be a List or array. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$BadCollection.actual)");
+    }
+  }
+
+  static class ListNotView {
+    @BindViews(1) List<String> actual;
+  }
+
+  @Test public void failsIfGenericNotView() {
+    ListNotView target = new ListNotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List or array type must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$ListNotView.actual)");
+    }
+  }
+
+  static class ArrayNotView {
+    @BindViews(1) List<String> actual;
+  }
+
+  @Test public void failsIfArrayNotView() {
+    ArrayNotView target = new ArrayNotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List or array type must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$ArrayNotView.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 72006b0b..f72eb3e4 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -2,7 +2,6 @@
 
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
@@ -24,14 +23,12 @@
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SimpleActivity extends Activity {
-  private static final Action<View> ALPHA_FADE = new Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
-      alphaAnimation.setFillBefore(true);
-      alphaAnimation.setDuration(500);
-      alphaAnimation.setStartOffset(index * 100);
-      view.startAnimation(alphaAnimation);
-    }
+  private static final Action<View> ALPHA_FADE = (view, index) -> {
+    AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
+    alphaAnimation.setFillBefore(true);
+    alphaAnimation.setDuration(500);
+    alphaAnimation.setStartOffset(index * 100);
+    view.startAnimation(alphaAnimation);
   };
 
   @BindView(R.id.title) TextView title;
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
index 5f4db917..f1344c69 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
index 59b87e06..d6115123 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
index ee69cb08..f5568184 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.BindView;
 import butterknife.ButterKnife;
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
index 1ea1ff88..3e760279 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
index 5411da11..4f54510c 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
index 838a2dcf..bedf258e 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
index 497b9f4c..e643bf65 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.BindView;
 import butterknife.ButterKnife;
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
index 7c713ab6..c4dab646 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.BindView;
 import butterknife.ButterKnife;
diff --git a/butterknife-integration-test/src/main/proguard.pro b/butterknife-integration-test/src/main/proguard.pro
index c3054308..87c34705 100644
--- a/butterknife-integration-test/src/main/proguard.pro
+++ b/butterknife-integration-test/src/main/proguard.pro
@@ -1,5 +1,7 @@
 -dontoptimize
 -dontobfuscate
+-dontnote **
+-dontwarn **
 
 # STUFF USED BY TESTS:
 
@@ -14,3 +16,7 @@
 -keep class com.example.butterknife.unbinder.H {
   <init>(...);
 }
+
+-keep class androidx.core.** {
+  <methods>;
+}
diff --git a/butterknife-reflect/build.gradle b/butterknife-reflect/build.gradle
index 917c9d45..d4d5d941 100644
--- a/butterknife-reflect/build.gradle
+++ b/butterknife-reflect/build.gradle
@@ -9,6 +9,11 @@ android {
     consumerProguardFiles 'proguard-rules.txt'
   }
 
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
   lintOptions {
     textReport true
     textOutput 'stdout'
@@ -24,6 +29,7 @@ android {
 
 dependencies {
   api project(':butterknife-runtime')
+  api deps.androidx.viewpager
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
index ead2d35e..fcf3fff5 100644
--- a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
@@ -10,22 +10,25 @@
 import android.graphics.BitmapFactory;
 import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.UiThread;
-import android.support.v4.content.ContextCompat;
-import android.support.v4.content.res.ResourcesCompat;
+import android.text.Editable;
+import android.text.TextWatcher;
 import android.util.Log;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
 import android.widget.AdapterView;
 import android.widget.CompoundButton;
 import android.widget.TextView;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import androidx.core.content.ContextCompat;
+import androidx.core.content.res.ResourcesCompat;
+import androidx.viewpager.widget.ViewPager;
 import butterknife.internal.Constants;
 import butterknife.internal.Utils;
-import java.lang.annotation.Annotation;
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;
@@ -212,6 +215,12 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         unbinder = parseOnLongClick(target, method, source);
         if (unbinder != null) unbinders.add(unbinder);
 
+        unbinder = parseOnPageChange(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnTextChanged(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
         unbinder = parseOnTouch(target, method, source);
         if (unbinder != null) unbinders.add(unbinder);
       }
@@ -236,15 +245,18 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     validateMember(field);
 
     int id = bindView.value();
-    boolean isRequired = isRequired(field);
     Class<?> viewClass = field.getType();
-    String who = "field '" + field.getName() + "'";
-    Object view;
-    if (isRequired) {
-      view = Utils.findRequiredViewAsType(source, id, who, viewClass);
-    } else {
-      view = Utils.findOptionalViewAsType(source, id, who, viewClass);
+    if (!View.class.isAssignableFrom(viewClass) && !viewClass.isInterface()) {
+      throw new IllegalStateException(
+          "@BindView fields must extend from View or be an interface. ("
+              + field.getDeclaringClass().getName()
+              + '.'
+              + field.getName()
+              + ')');
     }
+
+    String who = "field '" + field.getName() + "'";
+    Object view = Utils.findOptionalViewAsType(source, id, who, viewClass);
     trySet(field, target, view);
 
     return new FieldUnbinder(target, field);
@@ -269,23 +281,41 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         // TODO real rawType impl!!!!
         viewClass = (Class<?>) viewType;
       } else {
-        throw new IllegalStateException(); // TODO
+        throw new IllegalStateException("@BindViews List must have a generic component. ("
+            + field.getDeclaringClass().getName()
+            + '.'
+            + field.getName()
+            + ')');
       }
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindViews must be a List or array. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    if (!View.class.isAssignableFrom(viewClass) && !viewClass.isInterface()) {
+      throw new IllegalStateException(
+          "@BindViews List or array type must extend from View or be an interface. ("
+              + field.getDeclaringClass().getName()
+              + '.'
+              + field.getName()
+              + ')');
     }
 
     int[] ids = bindViews.value();
-    boolean isRequired = isRequired(field);
+    if (ids.length == 0) {
+      throw new IllegalStateException("@BindViews must specify at least one ID. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+
     List<Object> views = new ArrayList<>(ids.length);
     String who = "field '" + field.getName() + "'";
     for (int id : ids) {
-      Object view;
-      if (isRequired) {
-        view = Utils.findRequiredViewAsType(source, id, who, viewClass);
-      } else {
-        view = Utils.findOptionalViewAsType(source, id, who, viewClass);
-      }
+      Object view = Utils.findOptionalViewAsType(source, id, who, viewClass);
       if (view != null) {
         views.add(view);
       }
@@ -311,14 +341,18 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     validateMember(field);
 
     int id = bindAnim.value();
-    Resources resources = source.getContext().getResources();
+    Context context = source.getContext();
 
     Object value;
     Class<?> fieldType = field.getType();
     if (fieldType == Animation.class) {
-      value = resources.getAnimation(id);
+      value = AnimationUtils.loadAnimation(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindAnim field type must be 'Animation'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -348,10 +382,20 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
       } else if (componentType == CharSequence.class) {
         value = resources.getTextArray(id);
       } else {
-        throw new IllegalStateException(); // TODO
+        throw new IllegalStateException("@BindArray field type must be one of: "
+            + "String[], int[], CharSequence[], android.content.res.TypedArray. ("
+            + field.getDeclaringClass().getName()
+            + '.'
+            + field.getName()
+            + ')');
       }
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindArray field type must be one of: "
+          + "String[], int[], CharSequence[], android.content.res.TypedArray. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -373,7 +417,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == Bitmap.class) {
       value = BitmapFactory.decodeResource(resources, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindBitmap field type must be 'Bitmap'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -395,7 +443,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == boolean.class) {
       value = resources.getBoolean(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindBool field type must be 'boolean'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -419,7 +471,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     } else if (fieldType == ColorStateList.class) {
       value = ContextCompat.getColorStateList(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindColor field type must be 'int' or 'ColorStateList'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -443,7 +499,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     } else if (fieldType == float.class) {
       value = resources.getDimension(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindDimen field type must be 'int' or 'float'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -468,7 +528,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
           ? Utils.getTintedDrawable(context, id, tint)
           : ContextCompat.getDrawable(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindDrawable field type must be 'Drawable'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -490,7 +554,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == float.class) {
       value = Utils.getFloat(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindFloat field type must be 'float'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -512,11 +580,29 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     Object value;
     if (fieldType == Typeface.class) {
       Typeface font = ResourcesCompat.getFont(context, id);
-      value = style != Typeface.NORMAL
-          ? Typeface.create(font, style)
-          : font;
+      switch (style) {
+        case Typeface.NORMAL:
+          value = font;
+          break;
+        case Typeface.BOLD:
+        case Typeface.ITALIC:
+        case Typeface.BOLD_ITALIC:
+          value = Typeface.create(font, style);
+          break;
+        default:
+          throw new IllegalStateException(
+              "@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. ("
+                  + field.getDeclaringClass().getName()
+                  + '.'
+                  + field.getName()
+                  + ')');
+      }
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindFont field type must be 'Typeface'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -538,7 +624,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == int.class) {
       value = resources.getInteger(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindInt field type must be 'int'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -560,7 +650,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == String.class) {
       value = context.getString(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindString field type must be 'String'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -582,11 +676,9 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onCheckedChanged.value(), isRequired(method), method.getName(),
             CompoundButton.class);
 
-    ViewCollections.set(views, ON_CHECKED_CHANGE, new CompoundButton.OnCheckedChangeListener() {
-      @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        tryInvoke(method, target, argumentTransformer.transform(buttonView, isChecked));
-      }
-    });
+    ViewCollections.set(views, ON_CHECKED_CHANGE,
+        (buttonView, isChecked) -> tryInvoke(method, target,
+            argumentTransformer.transform(buttonView, isChecked)));
 
     return new ListenerUnbinder<>(views, ON_CHECKED_CHANGE);
   }
@@ -605,11 +697,8 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     List<View> views =
         findViews(source, onClick.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_CLICK, new View.OnClickListener() {
-      @Override public void onClick(View v) {
-        tryInvoke(method, target, argumentTransformer.transform(v));
-      }
-    });
+    ViewCollections.set(views, ON_CLICK,
+        v -> tryInvoke(method, target, argumentTransformer.transform(v)));
 
     return new ListenerUnbinder<>(views, ON_CLICK);
   }
@@ -629,14 +718,12 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onEditorAction.value(), isRequired(method), method.getName(),
             TextView.class);
 
-    ViewCollections.set(views, ON_EDITOR_ACTION, new TextView.OnEditorActionListener() {
-      @Override public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
-        Object value = tryInvoke(method, target, argumentTransformer.transform(v, actionId, event));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) value
-            : false;
-      }
+    ViewCollections.set(views, ON_EDITOR_ACTION, (v, actionId, event) -> {
+      Object value = tryInvoke(method, target, argumentTransformer.transform(v, actionId, event));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_EDITOR_ACTION);
@@ -656,11 +743,8 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     List<View> views =
         findViews(source, onFocusChange.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_FOCUS_CHANGE, new View.OnFocusChangeListener() {
-      @Override public void onFocusChange(View v, boolean hasFocus) {
-        tryInvoke(method, target, argumentTransformer.transform(v, hasFocus));
-      }
-    });
+    ViewCollections.set(views, ON_FOCUS_CHANGE,
+        (v, hasFocus) -> tryInvoke(method, target, argumentTransformer.transform(v, hasFocus)));
 
     return new ListenerUnbinder<>(views, ON_FOCUS_CHANGE);
   }
@@ -680,11 +764,9 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onItemClick.value(), isRequired(method), method.getName(),
             AdapterView.class);
 
-    ViewCollections.set(views, ON_ITEM_CLICK, new AdapterView.OnItemClickListener() {
-      @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-        tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
-      }
-    });
+    ViewCollections.set(views, ON_ITEM_CLICK,
+        (parent, view, position, id) -> tryInvoke(method, target,
+            argumentTransformer.transform(parent, view, position, id)));
 
     return new ListenerUnbinder<>(views, ON_ITEM_CLICK);
   }
@@ -704,16 +786,13 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onItemLongClick.value(), isRequired(method), method.getName(),
             AdapterView.class);
 
-    ViewCollections.set(views, ON_ITEM_LONG_CLICK, new AdapterView.OnItemLongClickListener() {
-      @Override
-      public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
-        Object value =
-            tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) value
-            : false;
-      }
+    ViewCollections.set(views, ON_ITEM_LONG_CLICK, (parent, view, position, id) -> {
+      Object value =
+          tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_ITEM_LONG_CLICK);
@@ -733,19 +812,123 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position, l
     List<View> views =
         findViews(source, onLongClick.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_LONG_CLICK, new View.OnLongClickListener() {
-      @Override public boolean onLongClick(View v) {
-        Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) returnValue
-            : false;
-      }
+    ViewCollections.set(views, ON_LONG_CLICK, v -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_LONG_CLICK);
   }
 
+  private static @Nullable Unbinder parseOnPageChange(final Object target, final Method method,
+      View source) {
+    OnPageChange onPageChange = method.getAnnotation(OnPageChange.class);
+    if (onPageChange == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+
+    List<ViewPager> views =
+        findViews(source, onPageChange.value(), isRequired(method), method.getName(),
+            ViewPager.class);
+
+    ViewPager.OnPageChangeListener listener;
+    switch (onPageChange.callback()) {
+      case PAGE_SCROLLED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_PAGE_SCROLLED_TYPES);
+        listener = new ViewPager.SimpleOnPageChangeListener() {
+          @Override public void onPageScrolled(int position, float positionOffset,
+              int positionOffsetPixels) {
+            tryInvoke(method, target,
+                argumentTransformer.transform(position, positionOffset, positionOffsetPixels));
+          }
+        };
+        break;
+      }
+      case PAGE_SELECTED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_PAGE_SELECTED_TYPES);
+        listener = new ViewPager.SimpleOnPageChangeListener() {
+          @Override public void onPageSelected(int position) {
+            tryInvoke(method, target, argumentTransformer.transform(position));
+          }
+        };
+        break;
+      }
+      case PAGE_SCROLL_STATE_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_PAGE_SCROLL_STATE_CHANGED_TYPES);
+        listener = new ViewPager.SimpleOnPageChangeListener() {
+          @Override public void onPageScrollStateChanged(int state) {
+            tryInvoke(method, target, argumentTransformer.transform(state));
+          }
+        };
+        break;
+      }
+      default:
+        throw new AssertionError();
+    }
+
+    ViewCollections.set(views, ADD_ON_PAGE_CHANGE, listener);
+    return new ListenerUnbinder<>(views, REMOVE_ON_PAGE_CHANGE, listener);
+  }
+
+  private static @Nullable Unbinder parseOnTextChanged(Object target, Method method, View source) {
+    OnTextChanged onTextChanged = method.getAnnotation(OnTextChanged.class);
+    if (onTextChanged == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+
+    List<TextView> views =
+        findViews(source, onTextChanged.value(), isRequired(method), method.getName(), View.class);
+
+    TextWatcher textWatcher;
+    switch (onTextChanged.callback()) {
+      case TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
+            tryInvoke(method, target, argumentTransformer.transform(s, start, before, count));
+          }
+        };
+        break;
+      }
+      case BEFORE_TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, BEFORE_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            tryInvoke(method, target, argumentTransformer.transform(s, start, count, after));
+          }
+        };
+        break;
+      }
+      case AFTER_TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, AFTER_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void afterTextChanged(Editable s) {
+            tryInvoke(method, target, argumentTransformer.transform(s));
+          }
+        };
+        break;
+      }
+      default:
+        throw new AssertionError();
+    }
+
+    ViewCollections.set(views, ADD_TEXT_WATCHER, textWatcher);
+    return new ListenerUnbinder<>(views, REMOVE_TEXT_WATCHER, textWatcher);
+  }
+
   private static @Nullable Unbinder parseOnTouch(final Object target, final Method method,
       View source) {
     OnTouch onTouch = method.getAnnotation(OnTouch.class);
@@ -760,14 +943,12 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position, l
     List<View> views =
         findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);
 
-    ViewCollections.set(views, ON_TOUCH, new View.OnTouchListener() {
-      @Override public boolean onTouch(View v, MotionEvent event) {
-        Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
-        //noinspection SimplifiableConditionalExpression
-        return propagateReturn
-            ? (boolean) returnValue
-            : false;
-      }
+    ViewCollections.set(views, ON_TOUCH, (v, event) -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : true;
     });
 
     return new ListenerUnbinder<>(views, ON_TOUCH);
@@ -828,15 +1009,6 @@ private static boolean validateReturnType(Method method, Class<?> expected) {
     return true;
   }
 
-  private static boolean isRequired(Field field) {
-    for (Annotation annotation : field.getAnnotations()) {
-      if (annotation.annotationType().getSimpleName().equals("Nullable")) {
-        return false;
-      }
-    }
-    return true;
-  }
-
   private static boolean isRequired(Method method) {
     return method.getAnnotation(Optional.class) == null;
   }
@@ -966,61 +1138,29 @@ private static Object tryInvoke(Method method, Object target, Object... argument
   }
 
   private static final Setter<CompoundButton, CompoundButton.OnCheckedChangeListener>
-      ON_CHECKED_CHANGE = new Setter<CompoundButton, CompoundButton.OnCheckedChangeListener>() {
-    @Override public void set(@NonNull CompoundButton view,
-        @Nullable CompoundButton.OnCheckedChangeListener value, int index) {
-      view.setOnCheckedChangeListener(value);
-    }
-  };
+      ON_CHECKED_CHANGE = (view, value, index) -> view.setOnCheckedChangeListener(value);
   private static final Setter<View, View.OnClickListener> ON_CLICK =
-      new Setter<View, View.OnClickListener>() {
-        @Override
-        public void set(@NonNull View view, @Nullable View.OnClickListener value, int index) {
-          view.setOnClickListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnClickListener(value);
   private static final Setter<TextView, TextView.OnEditorActionListener> ON_EDITOR_ACTION =
-      new Setter<TextView, TextView.OnEditorActionListener>() {
-        @Override
-        public void set(@NonNull TextView view, @Nullable TextView.OnEditorActionListener value,
-            int index) {
-          view.setOnEditorActionListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnEditorActionListener(value);
   private static final Setter<View, View.OnFocusChangeListener> ON_FOCUS_CHANGE =
-      new Setter<View, View.OnFocusChangeListener>() {
-        @Override
-        public void set(@NonNull View view, @Nullable View.OnFocusChangeListener value, int index) {
-          view.setOnFocusChangeListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnFocusChangeListener(value);
   private static final Setter<AdapterView<?>, AdapterView.OnItemClickListener> ON_ITEM_CLICK =
-      new Setter<AdapterView<?>, AdapterView.OnItemClickListener>() {
-        @Override public void set(@NonNull AdapterView<?> view,
-            @Nullable AdapterView.OnItemClickListener value, int index) {
-          view.setOnItemClickListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnItemClickListener(value);
   private static final Setter<AdapterView<?>, AdapterView.OnItemLongClickListener>
-      ON_ITEM_LONG_CLICK = new Setter<AdapterView<?>, AdapterView.OnItemLongClickListener>() {
-    @Override public void set(@NonNull AdapterView<?> view,
-        @Nullable AdapterView.OnItemLongClickListener value, int index) {
-      view.setOnItemLongClickListener(value);
-    }
-  };
+      ON_ITEM_LONG_CLICK = (view, value, index) -> view.setOnItemLongClickListener(value);
   private static final Setter<View, View.OnLongClickListener> ON_LONG_CLICK =
-      new Setter<View, View.OnLongClickListener>() {
-        @Override
-        public void set(@NonNull View view, @Nullable View.OnLongClickListener value, int index) {
-          view.setOnLongClickListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnLongClickListener(value);
   private static final Setter<View, View.OnTouchListener> ON_TOUCH =
-      new Setter<View, View.OnTouchListener>() {
-        @Override public void set(@NonNull View view, View.OnTouchListener value, int index) {
-          view.setOnTouchListener(value);
-        }
-      };
+      (view, value, index) -> view.setOnTouchListener(value);
+  private static final Setter<ViewPager, ViewPager.OnPageChangeListener> ADD_ON_PAGE_CHANGE =
+      (view, value, index) -> view.addOnPageChangeListener(value);
+  private static final Setter<ViewPager, ViewPager.OnPageChangeListener> REMOVE_ON_PAGE_CHANGE =
+      (view, value, index) -> view.removeOnPageChangeListener(value);
+  private static final Setter<TextView, TextWatcher> ADD_TEXT_WATCHER =
+      (view, value, index) -> view.addTextChangedListener(value);
+  private static final Setter<TextView, TextWatcher> REMOVE_TEXT_WATCHER =
+      (view, value, index) -> view.removeTextChangedListener(value);
 
   private static final Class<?>[] ON_CHECKED_CHANGED_TYPES =
       { CompoundButton.class, boolean.class };
@@ -1032,6 +1172,13 @@ public void set(@NonNull View view, @Nullable View.OnLongClickListener value, in
       { AdapterView.class, View.class, int.class, long.class };
   private static final Class<?>[] ON_ITEM_LONG_CLICK_TYPES = ON_ITEM_CLICK_TYPES;
   private static final Class<?>[] ON_LONG_CLICK_TYPES = ON_CLICK_TYPES;
+  private static final Class<?>[] ON_PAGE_SCROLLED_TYPES = { int.class, float.class, int.class };
+  private static final Class<?>[] ON_PAGE_SELECTED_TYPES = { int.class };
+  private static final Class<?>[] ON_PAGE_SCROLL_STATE_CHANGED_TYPES = { int.class };
+  private static final Class<?>[] ON_TEXT_CHANGED_TYPES =
+      { CharSequence.class, int.class, int.class, int.class };
+  private static final Class<?>[] BEFORE_TEXT_CHANGED_TYPES = ON_TEXT_CHANGED_TYPES;
+  private static final Class<?>[] AFTER_TEXT_CHANGED_TYPES = { Editable.class };
   private static final Class<?>[] ON_TOUCH_TYPES = { View.class, MotionEvent.class };
 
   private interface ArgumentTransformer {
diff --git a/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java b/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java
index 87923fc8..5e5adb47 100644
--- a/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java
+++ b/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import java.util.List;
 
 final class CompositeUnbinder implements Unbinder {
diff --git a/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java b/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java
new file mode 100644
index 00000000..3b578dee
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java
@@ -0,0 +1,15 @@
+package butterknife;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+
+class EmptyTextWatcher implements TextWatcher {
+  @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+  }
+
+  @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
+  }
+
+  @Override public void afterTextChanged(Editable s) {
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
index 2ae07c21..063f294d 100644
--- a/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
+++ b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
@@ -3,16 +3,24 @@
 import android.view.View;
 import java.util.List;
 
-final class ListenerUnbinder<T extends View> implements Unbinder {
-  private final List<T> targets;
-  private final Setter<T, ?> setter;
+final class ListenerUnbinder<V extends View, L> implements Unbinder {
+  private final List<V> targets;
+  private final Setter<V, L> setter;
+  private final L listener;
 
-  ListenerUnbinder(List<T> targets, Setter<T, ?> setter) {
+  ListenerUnbinder(List<V> targets, Setter<V, L> setter) {
     this.targets = targets;
     this.setter = setter;
+    this.listener = null;
+  }
+
+  ListenerUnbinder(List<V> targets, Setter<V, L> setter, L listener) {
+    this.targets = targets;
+    this.setter = setter;
+    this.listener = listener;
   }
 
   @Override public void unbind() {
-    ViewCollections.set(targets, setter, null);
+    ViewCollections.set(targets, setter, listener);
   }
 }
diff --git a/butterknife-runtime/build.gradle b/butterknife-runtime/build.gradle
index 397f2a8d..02944b05 100644
--- a/butterknife-runtime/build.gradle
+++ b/butterknife-runtime/build.gradle
@@ -6,7 +6,7 @@ android {
   defaultConfig {
     minSdkVersion versions.minSdk
 
-    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
 
     javaCompileOptions {
       annotationProcessorOptions {
@@ -15,6 +15,11 @@ android {
     }
   }
 
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
   lintOptions {
     textReport true
     textOutput 'stdout'
@@ -30,13 +35,13 @@ android {
 
 dependencies {
   api project(':butterknife-annotations')
-  api deps.support.compat
+  api deps.androidx.core
 
   lintChecks project(':butterknife-lint')
 
   androidTestImplementation deps.junit
   androidTestImplementation deps.truth
-  androidTestImplementation deps.support.test.runner
+  androidTestImplementation deps.androidx.test.runner
   androidTestAnnotationProcessor project(':butterknife-compiler')
 
   testImplementation deps.junit
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
index 4605051a..4694c3f9 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
@@ -1,11 +1,9 @@
 package butterknife;
 
 import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.test.InstrumentationRegistry;
 import android.util.Property;
 import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import java.util.List;
 import org.junit.Test;
 
@@ -24,21 +22,9 @@
         }
       };
   private static final Setter<View, Boolean> SETTER_ENABLED =
-      new Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, @Nullable Boolean value, int index) {
-          view.setEnabled(value);
-        }
-      };
-  private static final Action<View> ACTION_DISABLE = new Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setEnabled(false);
-    }
-  };
-  private static final Action<View> ACTION_ZERO_ALPHA = new Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setAlpha(0f);
-    }
-  };
+      (view, value, index) -> view.setEnabled(value);
+  private static final Action<View> ACTION_DISABLE = (view, index) -> view.setEnabled(false);
+  private static final Action<View> ACTION_ZERO_ALPHA = (view, index) -> view.setAlpha(0f);
 
   private final Context context = InstrumentationRegistry.getContext();
 
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
index f3227a2f..2470e710 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -1,8 +1,8 @@
 package butterknife.internal;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
 import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife-runtime/src/main/java/butterknife/Action.java b/butterknife-runtime/src/main/java/butterknife/Action.java
index b7a27918..596f3572 100644
--- a/butterknife-runtime/src/main/java/butterknife/Action.java
+++ b/butterknife-runtime/src/main/java/butterknife/Action.java
@@ -1,8 +1,8 @@
 package butterknife;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.UiThread;
 import android.view.View;
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
 
 /** An action that can be applied to a list of views. */
 public interface Action<T extends View> {
diff --git a/butterknife-runtime/src/main/java/butterknife/Setter.java b/butterknife-runtime/src/main/java/butterknife/Setter.java
index ccbae905..abecb72f 100644
--- a/butterknife-runtime/src/main/java/butterknife/Setter.java
+++ b/butterknife-runtime/src/main/java/butterknife/Setter.java
@@ -1,9 +1,9 @@
 package butterknife;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.UiThread;
 import android.view.View;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
 
 /** A setter that can apply a value to a list of views. */
 public interface Setter<T extends View, V> {
diff --git a/butterknife-runtime/src/main/java/butterknife/Unbinder.java b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
index ce27c3e9..0b477534 100644
--- a/butterknife-runtime/src/main/java/butterknife/Unbinder.java
+++ b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
@@ -1,12 +1,10 @@
 package butterknife;
 
-import android.support.annotation.UiThread;
+import androidx.annotation.UiThread;
 
 /** An unbinder contract that will unbind views when called. */
 public interface Unbinder {
   @UiThread void unbind();
 
-  Unbinder EMPTY = new Unbinder() {
-    @Override public void unbind() { }
-  };
+  Unbinder EMPTY = () -> { };
 }
diff --git a/butterknife-runtime/src/main/java/butterknife/ViewCollections.java b/butterknife-runtime/src/main/java/butterknife/ViewCollections.java
index 7b10fdae..9a4c1cf8 100644
--- a/butterknife-runtime/src/main/java/butterknife/ViewCollections.java
+++ b/butterknife-runtime/src/main/java/butterknife/ViewCollections.java
@@ -1,10 +1,10 @@
 package butterknife;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.UiThread;
 import android.util.Property;
 import android.view.View;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
 import java.util.List;
 
 /** Convenience methods for working with view collections. */
diff --git a/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index f936ff6f..b1de399e 100644
--- a/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -9,11 +9,7 @@
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
   static boolean enabled = true;
 
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
+  private static final Runnable ENABLE_AGAIN = () -> enabled = true;
 
   @Override public final void onClick(View v) {
     if (enabled) {
diff --git a/butterknife-runtime/src/main/java/butterknife/internal/Utils.java b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java
index 7f9339cd..fd53ce5e 100644
--- a/butterknife-runtime/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java
@@ -3,15 +3,15 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
-import android.support.annotation.AttrRes;
-import android.support.annotation.DimenRes;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.IdRes;
-import android.support.annotation.UiThread;
-import android.support.v4.content.ContextCompat;
-import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.TypedValue;
 import android.view.View;
+import androidx.annotation.AttrRes;
+import androidx.annotation.DimenRes;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.IdRes;
+import androidx.annotation.UiThread;
+import androidx.core.content.ContextCompat;
+import androidx.core.graphics.drawable.DrawableCompat;
 import java.lang.reflect.Array;
 import java.util.List;
 
diff --git a/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java b/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
index 3cbff425..34e4a776 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
@@ -12,58 +12,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindAnimTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.animation.Animation;\n"
-        + "import butterknife.BindAnim;\n"
-        + "public class Test {\n"
-        + "  @BindAnim(1) Animation one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.view.animation.AnimationUtils;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = AnimationUtils.loadAnimation(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void typeMustBeAnimation() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindArrayTest.java b/butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
index fb228829..36eec904 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
@@ -24,9 +24,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindColorTest.java b/butterknife-runtime/src/test/java/butterknife/BindColorTest.java
index 558e06ec..d6f83f3e 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindColorTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindColorTest.java
@@ -22,9 +22,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -73,9 +73,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java b/butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
index 742fa1c5..ebed6890 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
@@ -23,9 +23,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -74,9 +74,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindFontTest.java b/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
index 290853aa..6374c5a6 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
@@ -3,65 +3,12 @@
 import butterknife.compiler.ButterKnifeProcessor;
 import com.google.testing.compile.JavaFileObjects;
 import javax.tools.JavaFileObject;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindFontTest {
-  @Test public void simpleTypeface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import butterknife.BindFont;\n"
-        + "public class Test {\n"
-        + "  @BindFont(1) Typeface one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.res.ResourcesCompat;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ResourcesCompat.getFont(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void simpleIntSdk26() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -77,9 +24,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -115,59 +62,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void style() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import butterknife.BindFont;\n"
-        + "public class Test {\n"
-        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.res.ResourcesCompat;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void styleSdk26() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -184,9 +78,9 @@
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import android.graphics.Typeface;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindViewTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
index c252098e..76bae63c 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
@@ -7,59 +7,13 @@
 import javax.tools.StandardLocation;
 import org.junit.Test;
 
-import static butterknife.TestStubs.ANDROIDX_CONTEXT_COMPAT;
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static java.util.Arrays.asList;
 
 public class BindViewTest {
-  @Test public void bindingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "public class Test {\n"
-        + "    @BindView(1) View thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void bindingViewAndroidX() {
+  @Test public void bindingViewNonDebuggable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
         + "import android.view.View;\n"
@@ -75,52 +29,6 @@
         + "import androidx.annotation.CallSuper;\n"
         + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSources())
-        .that(asList(source, ANDROIDX_CONTEXT_COMPAT))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void bindingViewNonDebuggable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "public class Test {\n"
-        + "    @BindView(1) View thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding implements Unbinder {\n"
@@ -161,10 +69,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -241,8 +149,8 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -292,9 +200,9 @@
 
     JavaFileObject bindingBaseSource = JavaFileObjects.forSourceString("test/Base_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -319,8 +227,8 @@
 
     JavaFileObject bindingTestSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -351,53 +259,6 @@
         .generatesSources(bindingBaseSource, bindingTestSource);
   }
 
-  @Test public void bindingViewInnerClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "public class Outer {\n"
-        + "  public static class Test {\n"
-        + "    @BindView(1) View thing;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Outer$Test_ViewBinding implements Unbinder {\n"
-        + "  private Outer.Test target;\n"
-        + "  @UiThread\n"
-        + "  public Outer$Test_ViewBinding(Outer.Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Outer.Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingViewUppercasePackageName() {
     JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", ""
         + "package com.Example;\n"
@@ -410,9 +271,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package com.Example;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -456,9 +317,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -502,10 +363,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -552,9 +413,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -612,10 +473,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.Button;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -690,9 +551,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -749,9 +610,9 @@
 
     JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -776,8 +637,8 @@
 
     JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -835,9 +696,9 @@
 
     JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -862,8 +723,8 @@
 
     JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
index 437d1aee..db927bef 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
@@ -13,73 +13,6 @@
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
 public class BindViewsTest {
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "import java.util.List;\n"
-        + "public class Test {\n"
-        + "  @BindViews(1) public List<View> thing1;\n"
-        + "  @BindViews(2) List<View> thing2;\n"
-        + "  @BindViews(3) protected List<View> thing3;\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings();
-  }
-
-  @Test public void bindingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "public class Test {\n"
-        + "    @BindViews({1, 2, 3}) View[] thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayFilteringNull(\n"
-        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingArrayWithGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -92,9 +25,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -142,10 +75,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -191,9 +124,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -239,10 +172,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -276,56 +209,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void bindingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "import java.util.List;\n"
-        + "public class Test {\n"
-        + "    @BindViews({1, 2, 3}) List<View> thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.listFilteringNull(\n"
-        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-
   @Test public void bindingGeneratedView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -375,9 +258,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -424,9 +307,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -476,9 +359,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -631,9 +514,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -679,9 +562,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
index 0499d3c2..24c1a525 100644
--- a/butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
@@ -25,9 +25,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -81,9 +81,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
index dc9a76b0..7f7c636b 100644
--- a/butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
@@ -28,9 +28,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -87,9 +87,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
index 1e08dc32..c25d7d8c 100644
--- a/butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
@@ -28,9 +28,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -86,9 +86,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java
deleted file mode 100644
index b0b5fbd3..00000000
--- a/butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnCheckedChangedTest {
-  @Test public void checkedChanged() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnCheckedChanged;\n"
-        + "public class Test {\n"
-        + "  @OnCheckedChanged(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.CompoundButton;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n"
-        + "      @Override\n"
-        + "      public void onCheckedChanged(CompoundButton p0, boolean p1) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    ((CompoundButton) view1).setOnCheckedChangeListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-}
diff --git a/butterknife-runtime/src/test/java/butterknife/OnClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnClickTest.java
index 324f727e..d2df0551 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnClickTest.java
@@ -23,9 +23,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -88,11 +88,11 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.Button;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -191,9 +191,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java b/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
index f57edfcd..7541a00c 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
@@ -20,11 +20,11 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.KeyEvent;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -63,4 +63,60 @@
         .and()
         .generatesSources(bindingSource);
   }
+
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnEditorAction;\n"
+        + "public class Test {\n"
+        + "  @OnEditorAction(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.KeyEvent;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((TextView) view1).setOnEditorActionListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
 }
diff --git a/butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
index d8216f1c..32bec043 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
@@ -20,9 +20,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
index 03f334c4..31435325 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
@@ -21,10 +21,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -82,10 +82,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -141,11 +141,11 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
         + "import android.widget.ListView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -201,11 +201,11 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
         + "import android.widget.ListView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -264,10 +264,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -319,10 +319,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
index 4f809dfc..20dc76eb 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
@@ -20,10 +20,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -62,4 +62,59 @@
         .and()
         .generatesSources(bindingSource);
   }
+
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemLongClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemLongClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
 }
diff --git a/butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
index 05c5f249..11449b13 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
@@ -21,10 +21,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -80,10 +80,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -141,10 +141,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -203,10 +203,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java
deleted file mode 100644
index 0926b2f3..00000000
--- a/butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
-public class OnLongClickTest {
-  @Test public void onLongClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnLongClick;\n"
-        + "public class Test {\n"
-        + "  @OnLongClick(1) boolean doStuff() {\n"
-        + "    return true;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
-        + "      @Override\n"
-        + "      public boolean onLongClick(View p0) {\n"
-        + "        return target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnLongClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void failsIfMissingReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnLongClick;\n"
-        + "public class Test {\n"
-        + "  @OnLongClick(1)\n"
-        + "  public void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java b/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
index 2326802e..cfd5ff8f 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
@@ -5,9 +5,7 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.TestStubs.ANDROIDX_CONTEXT_COMPAT;
 import static butterknife.TestStubs.ANDROIDX_VIEW_PAGER;
-import static butterknife.TestStubs.SUPPORT_VIEW_PAGER;
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static java.util.Arrays.asList;
@@ -22,70 +20,6 @@
         + "}"
     );
 
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.view.ViewPager;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  private ViewPager.OnPageChangeListener view1OnPageChangeListener;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view1OnPageChangeListener = new ViewPager.OnPageChangeListener() {\n"
-        + "      @Override\n"
-        + "      public void onPageSelected(int p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "      @Override\n"
-        + "      public void onPageScrolled(int p0, float p1, int p2) {\n"
-        + "      }\n"
-        + "      @Override\n"
-        + "      public void onPageScrollStateChanged(int p0) {\n"
-        + "      }\n"
-        + "    };\n"
-        + "    ((ViewPager) view).addOnPageChangeListener(view1OnPageChangeListener);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    ((ViewPager) view1).removeOnPageChangeListener(view1OnPageChangeListener);\n"
-        + "    view1OnPageChangeListener = null;\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSources())
-        .that(asList(source, SUPPORT_VIEW_PAGER))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void pageChangeAndroidX() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnPageChange;\n"
-        + "public class Test {\n"
-        + "  @OnPageChange(1) void doStuff() {}\n"
-        + "}"
-    );
-
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
@@ -133,7 +67,7 @@
     );
 
     assertAbout(javaSources())
-        .that(asList(source, ANDROIDX_VIEW_PAGER, ANDROIDX_CONTEXT_COMPAT))
+        .that(asList(source, ANDROIDX_VIEW_PAGER))
         .withCompilerOptions("-Xlint:-processing")
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutWarnings()
diff --git a/butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java b/butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
index e1b75a68..dcc98467 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
@@ -20,12 +20,12 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.text.Editable;\n"
         + "import android.text.TextWatcher;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.CharSequence;\n"
@@ -86,12 +86,12 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
             + "package test;\n"
-            + "import android.support.annotation.CallSuper;\n"
-            + "import android.support.annotation.UiThread;\n"
             + "import android.text.Editable;\n"
             + "import android.text.TextWatcher;\n"
             + "import android.view.View;\n"
             + "import android.widget.TextView;\n"
+            + "import androidx.annotation.CallSuper;\n"
+            + "import androidx.annotation.UiThread;\n"
             + "import butterknife.Unbinder;\n"
             + "import butterknife.internal.Utils;\n"
             + "import java.lang.CharSequence;\n"
@@ -152,12 +152,12 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
             + "package test;\n"
-            + "import android.support.annotation.CallSuper;\n"
-            + "import android.support.annotation.UiThread;\n"
             + "import android.text.Editable;\n"
             + "import android.text.TextWatcher;\n"
             + "import android.view.View;\n"
             + "import android.widget.TextView;\n"
+            + "import androidx.annotation.CallSuper;\n"
+            + "import androidx.annotation.UiThread;\n"
             + "import butterknife.Unbinder;\n"
             + "import butterknife.internal.Utils;\n"
             + "import java.lang.CharSequence;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
index fe9b9eb7..06e3701c 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
@@ -21,10 +21,10 @@
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.annotation.SuppressLint;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.MotionEvent;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -65,7 +65,64 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test {\n"
+        + "  @OnTouch(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.annotation.SuppressLint;\n"
+        + "import android.view.MotionEvent;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  @SuppressLint(\"ClickableViewAccessibility\")\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnTouchListener(new View.OnTouchListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onTouch(View p0, MotionEvent p1) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnTouchListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsMultipleListenersWithReturnValue() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
         + "import butterknife.OnTouch;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/RClassTest.java b/butterknife-runtime/src/test/java/butterknife/RClassTest.java
index d03bede0..65acf98e 100644
--- a/butterknife-runtime/src/test/java/butterknife/RClassTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/RClassTest.java
@@ -91,9 +91,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -243,9 +243,9 @@
     JavaFileObject bindingSourceBar = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test.bar;\n\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -277,9 +277,9 @@
     JavaFileObject bindingSourceFoo = JavaFileObjects.forSourceString("test/FooTest_ViewBinding", ""
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test.foo;\n\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -338,9 +338,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -387,10 +387,10 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/TestStubs.java b/butterknife-runtime/src/test/java/butterknife/TestStubs.java
index 8ff58539..df562958 100644
--- a/butterknife-runtime/src/test/java/butterknife/TestStubs.java
+++ b/butterknife-runtime/src/test/java/butterknife/TestStubs.java
@@ -4,10 +4,6 @@
 import javax.tools.JavaFileObject;
 
 final class TestStubs {
-  /**
-   * The presence of this type (and {@code androidx.annotation.NonNull}, which should be on the
-   * classpath already) trigger AndroidX emission.
-   */
   static final JavaFileObject ANDROIDX_CONTEXT_COMPAT =
       JavaFileObjects.forSourceString("androidx.core.content.ContextCompat", ""
           + "package androidx.core.content;\n"
@@ -26,18 +22,4 @@
           + "    void onPageScrollStateChanged(int state);\n"
           + "  }\n"
           + "}\n");
-
-  static final JavaFileObject SUPPORT_VIEW_PAGER =
-      JavaFileObjects.forSourceString("androidx.viewpager.widget.ViewPager", ""
-          + "package android.support.v4.view;\n"
-          + "\n"
-          + "public interface ViewPager {\n"
-          + "  void addOnPageChangeListener(OnPageChangeListener listener);\n"
-          + "  void removeOnPageChangeListener(OnPageChangeListener listener);\n"
-          + "  interface OnPageChangeListener {\n"
-          + "    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);\n"
-          + "    void onPageSelected(int position);\n"
-          + "    void onPageScrollStateChanged(int state);\n"
-          + "  }\n"
-          + "}\n");
 }
diff --git a/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
index e2f06023..f9eb717a 100644
--- a/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
@@ -28,9 +28,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -108,9 +108,9 @@
 
     JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -145,8 +145,8 @@
 
     JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestTwo_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -190,8 +190,8 @@
   @Test public void fullIntegration() {
     JavaFileObject sourceA = JavaFileObjects.forSourceString("test.A", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
         + "public class A {\n"
         + "  @BindColor(android.R.color.black) @ColorInt int blackColor;\n"
@@ -201,8 +201,8 @@
 
     JavaFileObject sourceB = JavaFileObjects.forSourceString("test.B", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
         + "public class B extends A {\n"
         + "  @BindColor(android.R.color.white) @ColorInt int whiteColor;\n"
@@ -213,8 +213,8 @@
 
     JavaFileObject sourceC = JavaFileObjects.forSourceString("test.C", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
         + "public class C extends B {\n"
@@ -227,8 +227,8 @@
 
     JavaFileObject sourceD = JavaFileObjects.forSourceString("test.D", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
         + "public class D extends C {\n"
         + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
@@ -239,8 +239,8 @@
 
     JavaFileObject sourceE = JavaFileObjects.forSourceString("test.E", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
         + "public class E extends C {\n"
         + "  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;\n"
@@ -251,8 +251,8 @@
 
     JavaFileObject sourceF = JavaFileObjects.forSourceString("test.F", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
         + "public class F extends D {\n"
         + "  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;\n"
@@ -263,8 +263,8 @@
 
     JavaFileObject sourceG = JavaFileObjects.forSourceString("test.G", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
         + "import butterknife.OnClick;\n"
@@ -280,8 +280,8 @@
 
     JavaFileObject sourceH = JavaFileObjects.forSourceString("test.H", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
         + "public class H extends G {\n"
@@ -296,10 +296,10 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -328,9 +328,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import java.lang.Deprecated;\n"
         + "public class B_ViewBinding extends A_ViewBinding {\n"
         + "  /**\n"
@@ -354,9 +354,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -384,9 +384,9 @@
     JavaFileObject bindingDSource = JavaFileObjects.forSourceString("test/D_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "public class D_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
         + "  public D_ViewBinding(D target, View source) {\n"
@@ -400,9 +400,9 @@
     JavaFileObject bindingESource = JavaFileObjects.forSourceString("test/E_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "public class E_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
         + "  public E_ViewBinding(E target, View source) {\n"
@@ -416,9 +416,9 @@
     JavaFileObject bindingFSource = JavaFileObjects.forSourceString("test/F_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "public class F_ViewBinding extends D_ViewBinding {\n"
         + "  @UiThread\n"
         + "  public F_ViewBinding(F target, View source) {\n"
@@ -432,9 +432,9 @@
     JavaFileObject bindingGSource = JavaFileObjects.forSourceString("test/G_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -475,9 +475,9 @@
     JavaFileObject bindingHSource = JavaFileObjects.forSourceString("test/H_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index d6bece80..4b045262 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -8,7 +8,12 @@ android {
 
     consumerProguardFiles 'proguard-rules.txt'
 
-    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
+  }
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
   }
 
   lintOptions {
@@ -29,7 +34,7 @@ dependencies {
 
   androidTestImplementation deps.junit
   androidTestImplementation deps.truth
-  androidTestImplementation deps.support.test.runner
+  androidTestImplementation deps.androidx.test.runner
   androidTestAnnotationProcessor project(':butterknife-compiler')
 }
 
diff --git a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
index c5631b00..06634f61 100644
--- a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -1,47 +1,15 @@
 package butterknife;
 
 import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.test.InstrumentationRegistry;
-import android.util.Property;
 import android.view.View;
-import java.util.List;
+import androidx.test.InstrumentationRegistry;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
-import static java.util.Arrays.asList;
 
 public class ButterKnifeTest {
-  private static final Property<View, Boolean> PROPERTY_ENABLED =
-      new Property<View, Boolean>(Boolean.class, "enabled") {
-        @Override public Boolean get(View view) {
-          return view.isEnabled();
-        }
-
-        @Override public void set(View view, Boolean enabled) {
-          view.setEnabled(enabled);
-        }
-      };
-  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
-      new ButterKnife.Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, @Nullable Boolean value, int index) {
-          view.setEnabled(value);
-        }
-      };
-  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setEnabled(false);
-    }
-  };
-  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setAlpha(0f);
-    }
-  };
-
   private final Context context = InstrumentationRegistry.getContext();
 
   @Before @After // Clear out cache of binders before and after each test.
@@ -49,189 +17,15 @@ public void resetViewsCache() {
     ButterKnife.BINDINGS.clear();
   }
 
-  @Test public void propertyAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-
-    ButterKnife.apply(view, PROPERTY_ENABLED, false);
-    assertThat(view.isEnabled()).isFalse();
-  }
-
-  @Test public void propertyAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, PROPERTY_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void propertyAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, PROPERTY_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void actionAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-
-    ButterKnife.apply(view, ACTION_DISABLE);
-
-    assertThat(view.isEnabled()).isFalse();
-  }
-
-  @Test public void actionsAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-    assertThat(view.getAlpha()).isEqualTo(1f);
-
-    ButterKnife.apply(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);
-    assertThat(view.isEnabled()).isFalse();
-    assertThat(view.getAlpha()).isEqualTo(0f);
-  }
-
-  @Test public void actionAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, ACTION_DISABLE);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void actionAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, ACTION_DISABLE);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void actionsAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-    assertThat(view1.getAlpha()).isEqualTo(1f);
-    assertThat(view2.getAlpha()).isEqualTo(1f);
-    assertThat(view3.getAlpha()).isEqualTo(1f);
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-    assertThat(view1.getAlpha()).isEqualTo(0f);
-    assertThat(view2.getAlpha()).isEqualTo(0f);
-    assertThat(view3.getAlpha()).isEqualTo(0f);
-  }
-
-  @Test public void actionsAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-    assertThat(view1.getAlpha()).isEqualTo(1f);
-    assertThat(view2.getAlpha()).isEqualTo(1f);
-    assertThat(view3.getAlpha()).isEqualTo(1f);
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-    assertThat(view1.getAlpha()).isEqualTo(0f);
-    assertThat(view2.getAlpha()).isEqualTo(0f);
-    assertThat(view3.getAlpha()).isEqualTo(0f);
-  }
-
-  @Test public void setterAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-
-    ButterKnife.apply(view, SETTER_ENABLED, false);
-
-    assertThat(view.isEnabled()).isFalse();
-  }
-
-  @Test public void setterAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, SETTER_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void setterAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, SETTER_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void zeroBindingsBindDoesNotThrowException() {
+  @Test public void zeroBindingsBindDoesNotThrowExceptionAndCaches() {
     class Example {
     }
 
     Example example = new Example();
     View view = new View(context);
+    assertThat(ButterKnife.BINDINGS).isEmpty();
     assertThat(ButterKnife.bind(example, view)).isSameAs(Unbinder.EMPTY);
+    assertThat(ButterKnife.BINDINGS).containsEntry(Example.class, null);
   }
 
   @Test public void bindingKnownPackagesIsNoOp() {
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 655e5eb2..84606c9a 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -2,14 +2,13 @@
 
 import android.app.Activity;
 import android.app.Dialog;
-import android.support.annotation.CheckResult;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.UiThread;
-import android.support.annotation.VisibleForTesting;
 import android.util.Log;
-import android.util.Property;
 import android.view.View;
+import androidx.annotation.CheckResult;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import androidx.annotation.VisibleForTesting;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedHashMap;
@@ -188,7 +187,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
   @Nullable @CheckResult @UiThread
   private static Constructor<? extends Unbinder> findBindingConstructorForClass(Class<?> cls) {
     Constructor<? extends Unbinder> bindingCtor = BINDINGS.get(cls);
-    if (bindingCtor != null) {
+    if (bindingCtor != null || BINDINGS.containsKey(cls)) {
       if (debug) Log.d(TAG, "HIT: Cached in binding map.");
       return bindingCtor;
     }
@@ -212,108 +211,4 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     BINDINGS.put(cls, bindingCtor);
     return bindingCtor;
   }
-
-  /** @deprecated Use {@link ViewCollections#run(List, butterknife.Action[])} */
-  @UiThread
-  @Deprecated
-  @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,
-      @NonNull Action<? super T>... actions) {
-    ViewCollections.run(list, actions);
-  }
-
-  /** @deprecated Use {@link ViewCollections#run(View[], butterknife.Action[])} */
-  @UiThread
-  @Deprecated
-  @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,
-      @NonNull Action<? super T>... actions) {
-    ViewCollections.run(array, actions);
-  }
-
-  /** @deprecated Use {@link ViewCollections#run(List, butterknife.Action)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View> void apply(@NonNull List<T> list,
-      @NonNull Action<? super T> action) {
-    ViewCollections.run(list, action);
-  }
-
-  /** @deprecated Use {@link ViewCollections#run(View[], butterknife.Action)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
-    ViewCollections.run(array, action);
-  }
-
-  /** @deprecated Use {@link ViewCollections#run(View, butterknife.Action[])} */
-  @UiThread
-  @Deprecated
-  @SafeVarargs public static <T extends View> void apply(@NonNull T view,
-      @NonNull Action<? super T>... actions) {
-    ViewCollections.run(view, actions);
-  }
-
-  /** @deprecated {@link ViewCollections#run(View, butterknife.Action)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
-    ViewCollections.run(view, action);
-  }
-
-  /** @deprecated Use {@link ViewCollections#set(List, butterknife.Setter, Object)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View, V> void apply(@NonNull List<T> list,
-      @NonNull Setter<? super T, V> setter, V value) {
-    ViewCollections.set(list, setter, value);
-  }
-
-  /** @deprecated Use {@link ViewCollections#set(View[], butterknife.Setter, Object)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View, V> void apply(@NonNull T[] array,
-      @NonNull Setter<? super T, V> setter, V value) {
-    ViewCollections.set(array, setter, value);
-  }
-
-  /** @deprecated Use {@link ViewCollections#set(View, butterknife.Setter, Object)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View, V> void apply(@NonNull T view,
-      @NonNull Setter<? super T, V> setter, V value) {
-    ViewCollections.set(view, setter, value);
-  }
-
-  /** @deprecated Use {@link ViewCollections#set(List, Property, Object)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View, V> void apply(@NonNull List<T> list,
-      @NonNull Property<? super T, V> setter, V value) {
-    ViewCollections.set(list, setter, value);
-  }
-
-  /** @deprecated Use {@link ViewCollections#set(View[], Property, Object)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View, V> void apply(@NonNull T[] array,
-      @NonNull Property<? super T, V> setter, V value) {
-    ViewCollections.set(array, setter, value);
-  }
-
-  /** @deprecated Use {@link ViewCollections#set(View, Property, Object)} */
-  @UiThread
-  @Deprecated
-  public static <T extends View, V> void apply(@NonNull T view,
-      @NonNull Property<? super T, V> setter, V value) {
-    ViewCollections.set(view, setter, value);
-  }
-
-  /** @deprecated Use {@link butterknife.Action} */
-  @Deprecated
-  public interface Action<T extends View> extends butterknife.Action<T> {
-  }
-
-  /** @deprecated Use {@link butterknife.Setter} */
-  @Deprecated
-  public interface Setter<T extends View, V> extends butterknife.Setter<T, V> {
-  }
 }
diff --git a/checkstyle.xml b/checkstyle.xml
index cd3c43b2..bf3140b8 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -97,7 +97,9 @@
 
     <!-- Checks for blocks. You know, those {}'s         -->
     <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name="AvoidNestedBlocks"/>
+    <module name="AvoidNestedBlocks">
+        <property name="allowInSwitchCase" value="true"/>
+    </module>
     <!--<module name="EmptyBlock"/>-->
     <module name="LeftCurly"/>
     <module name="NeedBraces">
diff --git a/gradle.properties b/gradle.properties
index a7b1e077..f23da41e 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=9.0.0-SNAPSHOT
+VERSION_NAME=10.1.1-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 28861d27..94336fca 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 115e6ac0..290541c7 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/A.java b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
index 79feb9e8..d0d7615f 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/B.java b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
index 2b78fe9b..3a7b73db 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/C.java b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
index 3772e400..dcd7e13a 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindView;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/D.java b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
index 5ab8b2c6..35a91039 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/E.java b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
index bd5e28aa..8b76b3c5 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/F.java b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
index 5b1a2faa..351f8ddd 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/G.java b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
index 419ef4b5..f2a08ef6 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindView;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/H.java b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
index e9cd4136..f8656842 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindView;
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 5f40f5af..1d96194a 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -3,7 +3,7 @@
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
diff --git a/website/index.html b/website/index.html
index 6905ec97..17f8ee29 100644
--- a/website/index.html
+++ b/website/index.html
@@ -6,7 +6,7 @@
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <meta name="description" content="Field and method binding for Android views.">
-    <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
+    <link href="https://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
     <link href="static/prettify.css" rel="stylesheet">
@@ -227,7 +227,7 @@ <h3 id="license">License</h3>
         </div>
       </div>
     </div>
-    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
+    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
     <script src="static/jquery-maven-artifact.min.js"></script>
     <script src="static/prettify.js"></script>
     <script>
