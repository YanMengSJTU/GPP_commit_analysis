diff --git a/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java b/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
index 08928985..b90647ad 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
@@ -25,15 +25,15 @@
 
 import javax.lang.model.element.TypeElement;
 
-import static butterfork.internal.ButterKnifeProcessor.VIEW_TYPE;
+import static butterfork.internal.ButterForkProcessor.VIEW_TYPE;
 import static java.util.Collections.singletonList;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
 final class BindingClass {
-  private static final ClassName FINDER = ClassName.get("butterfork", "ButterKnife", "Finder");
+  private static final ClassName FINDER = ClassName.get("butterfork", "ButterFork", "Finder");
   private static final ClassName VIEW_BINDER =
-      ClassName.get("butterfork", "ButterKnife", "ViewBinder");
+      ClassName.get("butterfork", "ButterFork", "ViewBinder");
 
   private final Map<String, ViewBindings> viewIdMap = new LinkedHashMap<>();
   private final Map<FieldCollectionViewBinding, String[]> collectionBindings = new LinkedHashMap<>();
@@ -112,7 +112,7 @@ JavaFile brewJava() {
     result.addMethod(createUnbindMethod());
 
     return JavaFile.builder(classPackage, result.build())
-        .addFileComment("Generated code from Butter Knife. Do not modify!")
+        .addFileComment("Generated code from Butter Fork. Do not modify!")
         .build();
   }
 
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/ButterKnifeProcessor.java b/butterfork-compiler/src/main/java/butterfork/internal/ButterForkProcessor.java
similarity index 99%
rename from butterfork-compiler/src/main/java/butterfork/internal/ButterKnifeProcessor.java
rename to butterfork-compiler/src/main/java/butterfork/internal/ButterForkProcessor.java
index 5065e546..7fceb323 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/ButterKnifeProcessor.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/ButterForkProcessor.java
@@ -69,7 +69,7 @@
 import static javax.tools.Diagnostic.Kind.ERROR;
 
 @AutoService(Processor.class)
-public final class ButterKnifeProcessor extends AbstractProcessor {
+public final class ButterForkProcessor extends AbstractProcessor {
   static final String VIEW_TYPE = "android.view.View";
   private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/FieldViewBinding.java b/butterfork-compiler/src/main/java/butterfork/internal/FieldViewBinding.java
index 02b41d01..71f0e5e3 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/FieldViewBinding.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/FieldViewBinding.java
@@ -2,7 +2,7 @@
 
 import com.squareup.javapoet.TypeName;
 
-import static butterfork.internal.ButterKnifeProcessor.VIEW_TYPE;
+import static butterfork.internal.ButterForkProcessor.VIEW_TYPE;
 
 final class FieldViewBinding implements ViewBinding {
   private final String name;
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java
index 4ea42e4f..bb08ef32 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindArray;",
+        "import butterfork.BindArray;",
         "public class Test extends Activity {",
         "  @BindArray(1) String[] one;",
         "}"
@@ -25,11 +25,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getStringArray(1);",
             "  }",
@@ -39,7 +39,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -49,7 +49,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindArray;",
+        "import butterfork.BindArray;",
         "public class Test extends Activity {",
         "  @BindArray(1) int[] one;",
         "}"
@@ -59,11 +59,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getIntArray(1);",
             "  }",
@@ -73,7 +73,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -83,7 +83,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindArray;",
+        "import butterfork.BindArray;",
         "public class Test extends Activity {",
         "  @BindArray(1) CharSequence[] one;",
         "}"
@@ -93,11 +93,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getTextArray(1);",
             "  }",
@@ -107,7 +107,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -117,7 +117,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindArray;",
+        "import butterfork.BindArray;",
         "import android.content.res.TypedArray;",
         "public class Test extends Activity {",
         "  @BindArray(1) TypedArray one;",
@@ -128,11 +128,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.obtainTypedArray(1);",
             "  }",
@@ -142,7 +142,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -152,14 +152,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindArray;",
+        "import butterfork.BindArray;",
         "public class Test extends Activity {",
         "  @BindArray(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@BindArray field type must be one of: String[], int[], CharSequence[], "
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java
index cf2ee3e8..47d5e61b 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java
@@ -16,7 +16,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.graphics.Bitmap;",
-        "import butterknife.BindBitmap;",
+        "import butterfork.BindBitmap;",
         "public class Test extends Activity {",
         "  @BindBitmap(1) Bitmap one;",
         "}"
@@ -27,11 +27,11 @@
             "package test;",
             "import android.content.res.Resources;",
             "import android.graphics.BitmapFactory;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = BitmapFactory.decodeResource(res, 1);",
             "  }",
@@ -41,7 +41,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -51,14 +51,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindBitmap;",
+        "import butterfork.BindBitmap;",
         "public class Test extends Activity {",
         "  @BindBitmap(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
         .in(source).onLine(5);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java
index 4377f04a..a84e7200 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindBool;",
+        "import butterfork.BindBool;",
         "public class Test extends Activity {",
         "  @BindBool(1) boolean one;",
         "}"
@@ -25,11 +25,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getBoolean(1);",
             "  }",
@@ -39,7 +39,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -49,14 +49,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindBool;",
+        "import butterfork.BindBool;",
         "public class Test extends Activity {",
         "  @BindBool(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
         .in(source).onLine(5);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java
index 7e3e2102..3ab6b9b2 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindColor;",
+        "import butterfork.BindColor;",
         "public class Test extends Activity {",
         "  @BindColor(1) int one;",
         "}"
@@ -25,11 +25,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getColor(1);",
             "  }",
@@ -39,7 +39,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -50,7 +50,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.content.res.ColorStateList;",
-        "import butterknife.BindColor;",
+        "import butterfork.BindColor;",
         "public class Test extends Activity {",
         "  @BindColor(1) ColorStateList one;",
         "}"
@@ -60,11 +60,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getColorStateList(1);",
             "  }",
@@ -74,7 +74,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -84,14 +84,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindColor;",
+        "import butterfork.BindColor;",
         "public class Test extends Activity {",
         "  @BindColor(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
         .in(source).onLine(5);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java
index 038c706d..1e63d797 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindDimen;",
+        "import butterfork.BindDimen;",
         "public class Test extends Activity {",
         "  @BindDimen(1) float one;",
         "}"
@@ -25,11 +25,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDimension(1);",
             "  }",
@@ -39,7 +39,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -49,7 +49,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindDimen;",
+        "import butterfork.BindDimen;",
         "public class Test extends Activity {",
         "  @BindDimen(1) int one;",
         "}"
@@ -59,11 +59,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDimensionPixelSize(1);",
             "  }",
@@ -73,7 +73,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -83,14 +83,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindDimen;",
+        "import butterfork.BindDimen;",
         "public class Test extends Activity {",
         "  @BindDimen(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
         .in(source).onLine(5);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java
index 61b38f12..e6b92999 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java
@@ -16,7 +16,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.graphics.drawable.Drawable;",
-        "import butterknife.BindDrawable;",
+        "import butterfork.BindDrawable;",
         "public class Test extends Activity {",
         "  @BindDrawable(1) Drawable one;",
         "}"
@@ -26,11 +26,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDrawable(1);",
             "  }",
@@ -40,7 +40,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -50,14 +50,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindDrawable;",
+        "import butterfork.BindDrawable;",
         "public class Test extends Activity {",
         "  @BindDrawable(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
         .in(source).onLine(5);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java
index 14775be2..48437dfc 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindInt;",
+        "import butterfork.BindInt;",
         "public class Test extends Activity {",
         "  @BindInt(1) int one;",
         "}"
@@ -25,11 +25,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getInteger(1);",
             "  }",
@@ -39,7 +39,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -49,14 +49,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindInt;",
+        "import butterfork.BindInt;",
         "public class Test extends Activity {",
         "  @BindInt(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
         .in(source).onLine(5);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java
index 209c9ddb..d6c01b0a 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindString;",
+        "import butterfork.BindString;",
         "public class Test extends Activity {",
         "  @BindString(1) String one;",
         "}"
@@ -25,11 +25,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getString(1);",
             "  }",
@@ -39,7 +39,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -49,14 +49,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.BindString;",
+        "import butterfork.BindString;",
         "public class Test extends Activity {",
         "  @BindString(1) boolean one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
         .in(source).onLine(5);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java
index 33a2b185..daeb3ecf 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java
@@ -16,7 +16,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    @Bind(1) View thing;",
         "}"
@@ -26,11 +26,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
@@ -42,7 +42,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -52,14 +52,14 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    @Bind({1, 2}) View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind for a view must only specify one ID. Found: [1, 2]. (test.Test.thing)")
         .in(source).onLine(6);
@@ -70,7 +70,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    interface TestInterface {}",
         "    @Bind(1) TestInterface thing;",
@@ -81,11 +81,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
@@ -97,7 +97,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -109,7 +109,7 @@
         "import android.app.Activity;",
         "import android.widget.EditText;",
         "import android.widget.TextView;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "class Test<T extends TextView> extends Activity {",
         "    @Bind(1) T thing;",
         "}"
@@ -119,11 +119,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
@@ -135,7 +135,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -146,8 +146,8 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
-        "import butterknife.OnClick;",
+        "import butterfork.Bind;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @Bind(1) View thing1;",
         "  @OnClick(1) void doStuff() {}",
@@ -158,12 +158,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
             "    target.thing1 = view;",
@@ -180,7 +180,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -191,7 +191,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "  @Bind(1) public View thing1;",
         "  @Bind(2) View thing2;",
@@ -200,7 +200,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError();
   }
 
@@ -209,7 +209,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
         "  @Nullable @Bind(1) View view;",
@@ -220,11 +220,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    target.view = view;",
@@ -236,7 +236,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -247,7 +247,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "  @Bind(1) View view;",
         "}",
@@ -262,11 +262,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -281,12 +281,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
             "public class TestOne$$ViewBinder<T extends TestOne> ",
             "    extends Test$$ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    super.bind(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -300,7 +300,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource1, expectedSource2);
@@ -311,7 +311,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test<T> extends Activity {",
         "  @Bind(1) View view;",
         "}",
@@ -326,11 +326,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -345,12 +345,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
             "public class TestOne$$ViewBinder<T extends TestOne> ",
             "    extends Test$$ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    super.bind(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -364,7 +364,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource1, expectedSource2);
@@ -374,14 +374,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test {",
         "  @Bind(1) View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@Bind-annotated class incorrectly in Java framework package. (java.test.Test)")
@@ -392,14 +392,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package android.test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test {",
         "  @Bind(1) View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@Bind-annotated class incorrectly in Android framework package. (android.test.Test)")
@@ -410,7 +410,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test {",
         "  private static class Inner {",
         "    @Bind(1) View thing;",
@@ -419,7 +419,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@Bind fields may not be contained in private classes. (test.Test.Inner.thing)")
@@ -430,14 +430,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "  @Bind(1) String thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
@@ -447,14 +447,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public interface Test {",
         "    @Bind(1) View thing = null;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@Bind fields may only be contained in classes. (test.Test.thing)")
@@ -466,14 +466,14 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    @Bind(1) private View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(6);
@@ -484,14 +484,14 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    @Bind(1) static View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(6);
@@ -502,7 +502,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    @Bind(1) View thing1;",
         "    @Bind(1) View thing2;",
@@ -510,7 +510,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "Attempt to use @Bind for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
@@ -523,7 +523,7 @@
             "package test;",
             "import android.content.Context;",
             "import android.view.View;",
-            "import butterknife.OnItemClick;",
+            "import butterfork.OnItemClick;",
             "public class Test extends View {",
             "  @OnItemClick void doStuff() {}",
             "  public Test(Context context) {",
@@ -533,7 +533,7 @@
 
     ASSERT.about(javaSource())
         .that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining((
             "@OnItemClick annotation without an ID may only be used with an object of type "
@@ -548,7 +548,7 @@
             "package test;",
             "import android.content.Context;",
             "import android.view.View;",
-            "import butterknife.OnClick;",
+            "import butterfork.OnClick;",
             "public class Test extends View {",
             "  @interface Nullable {}",
             "  @Nullable @OnClick void doStuff() {}",
@@ -559,7 +559,7 @@
 
     ASSERT.about(javaSource())
         .that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             ("ID-free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
@@ -572,7 +572,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    @Bind({1, 2, 3}) View[] thing;",
         "}"
@@ -582,13 +582,13 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "    target.thing = ButterFork.Finder.arrayOf(",
             "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
@@ -601,7 +601,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -612,7 +612,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test<T extends View> extends Activity {",
         "    @Bind({1, 2, 3}) T[] thing;",
         "}"
@@ -622,13 +622,13 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "    target.thing = ButterFork.Finder.arrayOf(",
             "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
@@ -641,7 +641,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -652,7 +652,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.widget.TextView;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "    @Bind({1, 2, 3}) TextView[] thing;",
         "}"
@@ -663,13 +663,13 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.TextView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "    target.thing = ButterFork.Finder.arrayOf(",
             "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"),",
             "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"),",
             "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\")",
@@ -682,7 +682,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -693,7 +693,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test extends Activity {",
         "    @Bind({1, 2, 3}) List<View> thing;",
@@ -704,13 +704,13 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = ButterKnife.Finder.listOf(",
+            "    target.thing = ButterFork.Finder.listOf(",
             "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
@@ -723,7 +723,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -733,7 +733,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test {",
         "    interface TestInterface {}",
@@ -745,13 +745,13 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = ButterKnife.Finder.listOf(",
+            "    target.thing = ButterFork.Finder.listOf(",
             "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
             "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
             "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
@@ -764,7 +764,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -775,7 +775,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test<T extends View> extends Activity {",
         "    @Bind({1, 2, 3}) List<T> thing;",
@@ -786,13 +786,13 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = ButterKnife.Finder.listOf(",
+            "    target.thing = ButterFork.Finder.listOf(",
             "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
             "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
@@ -805,7 +805,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -816,7 +816,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test extends Activity {",
         "    @interface Nullable {}",
@@ -828,13 +828,13 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = ButterKnife.Finder.listOf(",
+            "    target.thing = ButterFork.Finder.listOf(",
             "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"),",
             "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"),",
             "        finder.<View>findOptionalView(source, 3, \"field 'thing'\")",
@@ -847,7 +847,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -857,7 +857,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test {",
         "  @Bind({}) List<View> thing;",
@@ -865,7 +865,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
         .in(source).onLine(6);
@@ -874,7 +874,7 @@
   @Test public void failsIfNoGenericType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test {",
         "  @Bind(1) List thing;",
@@ -882,7 +882,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
         .in(source).onLine(5);
@@ -892,7 +892,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.Deque;",
         "public class Test {",
         "  @Bind(1) Deque<View> thing;",
@@ -900,7 +900,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
         .in(source).onLine(6);
@@ -910,7 +910,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test extends Activity {",
         "  @Bind(1) List<String> thing;",
@@ -918,7 +918,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(6);
@@ -928,13 +928,13 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "public class Test extends Activity {",
         "  @Bind(1) String[] thing;",
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
@@ -945,7 +945,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterfork.Bind;",
         "import java.util.List;",
         "public class Test extends Activity {",
         "    @Bind({1, 1}) List<View> thing;",
@@ -953,7 +953,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind annotation contains duplicate ID 1. (test.Test.thing)")
         .in(source).onLine(7);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java
index 928e80c5..cf4ccaa3 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnCheckedChanged;",
+        "import butterfork.OnCheckedChanged;",
         "public class Test extends Activity {",
         "  @OnCheckedChanged(1) void doStuff() {}",
         "}"
@@ -26,11 +26,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.CompoundButton;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {",
@@ -45,7 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java
index d3a832bb..519c338f 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1) void doStuff() {}",
         "}"));
@@ -24,12 +24,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnClickListener(new DebouncingOnClickListener() {",
@@ -44,7 +44,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -55,7 +55,7 @@
         "package test;",
         "import android.view.View;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1) void doStuff1() {}",
         "  @OnClick(1) void doStuff2() {}",
@@ -66,12 +66,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
             "    view.setOnClickListener(new DebouncingOnClickListener() {",
@@ -92,7 +92,7 @@
             "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -103,8 +103,8 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
-        "import butterknife.OnClick;",
+        "import butterfork.Bind;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @Bind(1) View view;",
         "  @OnClick(1) void doStuff() {}",
@@ -114,12 +114,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
             "    target.view = view;",
@@ -136,7 +136,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -147,7 +147,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1) public void thing1() {}",
         "  @OnClick(2) void thing2() {}",
@@ -156,7 +156,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError();
   }
 
@@ -167,7 +167,7 @@
         "import android.view.View;",
         "import android.widget.Button;",
         "import android.widget.TextView;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  interface TestInterface {}",
         "  @OnClick(0) void click0() {}",
@@ -184,12 +184,12 @@
             "import android.view.View;",
             "import android.widget.Button;",
             "import android.widget.TextView;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
             "    view.setOnClickListener(new DebouncingOnClickListener() {",
@@ -228,7 +228,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -239,7 +239,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick({1, 2, 3}) void click() {}",
         "}"
@@ -249,12 +249,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
             "    view.setOnClickListener(new DebouncingOnClickListener() {",
@@ -281,7 +281,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -291,7 +291,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
         "  @Nullable @OnClick(1) void doStuff() {}",
@@ -301,12 +301,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    if (view != null) {",
@@ -323,7 +323,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -334,8 +334,8 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
-        "import butterknife.OnClick;",
+        "import butterfork.Bind;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
         "  @Bind(1) View view;",
@@ -346,12 +346,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterfork.ButterFork;",
+            "import butterfork.internal.DebouncingOnClickListener;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -368,7 +368,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -377,14 +377,14 @@
   @Test public void failsInJavaPackage() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test {",
         "  @OnClick(1) void doStuff() {}",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
@@ -394,14 +394,14 @@
   @Test public void failsInAndroidPackage() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package android.test;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test {",
         "  @OnClick(1) void doStuff() {}",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
@@ -412,7 +412,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1)",
         "  public String doStuff() {",
@@ -420,7 +420,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -430,7 +430,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1)",
         "  private void doStuff() {",
@@ -438,7 +438,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -448,7 +448,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1)",
         "  public static void doStuff() {",
@@ -456,7 +456,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -466,7 +466,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1)",
         "  public void doStuff(String thing) {",
@@ -474,7 +474,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnClick method arguments. (test.Test.doStuff)",
@@ -495,7 +495,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick(1)",
         "  public void doStuff(View thing, View otherThing) {",
@@ -503,7 +503,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
@@ -513,14 +513,14 @@
   @Test public void failsIfInInterface() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public interface Test {",
         "  @OnClick(1)",
         "  void doStuff();",
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
@@ -531,7 +531,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnClick;",
+        "import butterfork.OnClick;",
         "public class Test extends Activity {",
         "  @OnClick({1, 2, 3, 1})",
         "  void doStuff() {",
@@ -539,7 +539,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java
index 1ec6b3c6..c6b36a15 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnEditorAction;",
+        "import butterfork.OnEditorAction;",
         "public class Test extends Activity {",
         "  @OnEditorAction(1) boolean doStuff() { return false; }",
         "}"
@@ -27,11 +27,11 @@
             "import android.view.KeyEvent;",
             "import android.view.View;",
             "import android.widget.TextView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {",
@@ -46,7 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java
index de0833a7..a4055a72 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnFocusChange;",
+        "import butterfork.OnFocusChange;",
         "public class Test extends Activity {",
         "  @OnFocusChange(1) void doStuff() {}",
         "}"
@@ -25,11 +25,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {",
@@ -44,7 +44,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java
index 841e660a..863478a8 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java
@@ -16,7 +16,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnItemClick;",
+        "import butterfork.OnItemClick;",
         "public class Test extends Activity {",
         "  @OnItemClick(1) void doStuff() {}",
         "}"));
@@ -26,11 +26,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
@@ -45,7 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -57,7 +57,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
+        "import butterfork.OnItemClick;",
         "public class Test extends Activity {",
         "  @OnItemClick(1) void doStuff(",
         "    AdapterView<?> parent,",
@@ -72,11 +72,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
@@ -91,7 +91,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -103,7 +103,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
+        "import butterfork.OnItemClick;",
         "public class Test extends Activity {",
         "  @OnItemClick(1) void doStuff(",
         "    ListView parent,",
@@ -117,11 +117,11 @@
             "import android.view.View;",
             "import android.widget.AdapterView;",
             "import android.widget.ListView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
@@ -136,7 +136,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -148,7 +148,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
+        "import butterfork.OnItemClick;",
         "public class Test<T extends ListView> extends Activity {",
         "  @OnItemClick(1) void doStuff(",
         "    T parent,",
@@ -162,11 +162,11 @@
             "import android.view.View;",
             "import android.widget.AdapterView;",
             "import android.widget.ListView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
@@ -181,7 +181,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -192,7 +192,7 @@
         "package test;",
         "import android.content.Context;",
         "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
+        "import butterfork.OnItemClick;",
         "public class Test extends ListView {",
         "  @OnItemClick void doStuff() {}",
         "  public Test(Context context) {",
@@ -205,11 +205,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = target;",
             "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
@@ -224,7 +224,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -235,13 +235,13 @@
         "package test;",
         "import android.content.Context;",
         "import android.app.Activity;",
-        "import butterknife.OnItemClick;",
+        "import butterfork.OnItemClick;",
         "public class Test extends Activity {",
         "  @OnItemClick({1, -1}) void doStuff() {}",
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -253,7 +253,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
+        "import butterfork.OnItemClick;",
         "public class Test extends Activity {",
         "  @OnItemClick(1) void doStuff(",
         "    AdapterView<?> parent,",
@@ -263,7 +263,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java
index 7d4b2eb6..6ac3b5c7 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnItemLongClick;",
+        "import butterfork.OnItemLongClick;",
         "public class Test extends Activity {",
         "  @OnItemLongClick(1) boolean doStuff() { return false; }",
         "}"
@@ -26,11 +26,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {",
@@ -45,7 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java
index da0ef7ba..d774806f 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java
@@ -16,7 +16,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
+        "import butterfork.OnItemSelected;",
         "public class Test extends Activity {",
         "  @OnItemSelected(1) void doStuff() {}",
         "}"
@@ -27,11 +27,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
@@ -48,7 +48,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -58,7 +58,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
+        "import butterfork.OnItemSelected;",
         "import static butterfork.OnItemSelected.Callback.NOTHING_SELECTED;",
         "public class Test extends Activity {",
         "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
@@ -71,11 +71,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
@@ -92,7 +92,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -102,7 +102,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
+        "import butterfork.OnItemSelected;",
         "import static butterfork.OnItemSelected.Callback.NOTHING_SELECTED;",
         "public class Test extends Activity {",
         "  @OnItemSelected(1)",
@@ -117,11 +117,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
             "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
@@ -139,7 +139,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -149,7 +149,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
+        "import butterfork.OnItemSelected;",
         "import static butterfork.OnItemSelected.Callback.NOTHING_SELECTED;",
         "public class Test extends Activity {",
         "  @OnItemSelected({ 1, 2 })",
@@ -164,11 +164,11 @@
             "package test;",
             "import android.view.View;",
             "import android.widget.AdapterView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
             "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
@@ -202,7 +202,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java
index 4459d0d6..97d2f898 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java
@@ -16,7 +16,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnLongClick;",
+        "import butterfork.OnLongClick;",
         "public class Test extends Activity {",
         "  @OnLongClick(1) boolean doStuff() {",
         "    return true;",
@@ -27,11 +27,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnLongClickListener(new View.OnLongClickListener() {",
@@ -46,7 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -56,7 +56,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnLongClick;",
+        "import butterfork.OnLongClick;",
         "public class Test extends Activity {",
         "  @OnLongClick(1)",
         "  public void doStuff() {",
@@ -64,7 +64,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java
index cac3ba42..afdc0968 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnPageChange;",
+        "import butterfork.OnPageChange;",
         "public class Test extends Activity {",
         "  @OnPageChange(1) void doStuff() {}",
         "}"
@@ -26,11 +26,11 @@
             "package test;",
             "import android.support.v4.view.ViewPager;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((ViewPager) view).setOnPageChangeListener(new ViewPager.OnPageChangeListener() {",
@@ -49,7 +49,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java
index 498e29fb..5a963ed8 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnTextChanged;",
+        "import butterfork.OnTextChanged;",
         "public class Test extends Activity {",
         "  @OnTextChanged(1) void doStuff() {}",
         "}"
@@ -28,12 +28,12 @@
             "import android.text.TextWatcher;",
             "import android.view.View;",
             "import android.widget.TextView;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.CharSequence;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((TextView) view).addTextChangedListener(new TextWatcher() {",
@@ -52,7 +52,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java
index c1cfeb3f..13c451fe 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java
@@ -15,7 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnTouch;",
+        "import butterfork.OnTouch;",
         "public class Test extends Activity {",
         "  @OnTouch(1) boolean doStuff() { return false; }",
         "}"
@@ -26,11 +26,11 @@
             "package test;",
             "import android.view.MotionEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife;",
+            "import butterfork.ButterFork;",
             "import java.lang.Object;",
             "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
-            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "public class Test$$ViewBinder<T extends Test> implements ButterFork.ViewBinder<T> {",
+            "  @Override public void bind(final ButterFork.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnTouchListener(new View.OnTouchListener() {",
@@ -45,7 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -55,14 +55,14 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.OnTouch;",
+        "import butterfork.OnTouch;",
         "public class Test extends Activity {",
         "  @OnTouch(1) boolean doStuff1() {}",
         "  @OnTouch(1) boolean doStuff2() {}",
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
+        .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java b/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
index 09945f11..070b1839 100644
--- a/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
+++ b/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
@@ -11,7 +11,7 @@
 import java.util.List;
 
 import butterfork.Bind;
-import butterfork.ButterKnife;
+import butterfork.ButterFork;
 import butterfork.OnClick;
 import butterfork.OnItemClick;
 import butterfork.OnLongClick;
@@ -19,7 +19,7 @@
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SimpleActivity extends BaseActivity {
-  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
+  private static final ButterFork.Action<View> ALPHA_FADE = new ButterFork.Action<View>() {
     @Override public void apply(View view, int index) {
       AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
       alphaAnimation.setFillBefore(true);
@@ -42,7 +42,7 @@
 
   @OnClick("hello") void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
-    ButterKnife.apply(headerViews, ALPHA_FADE);
+    ButterFork.apply(headerViews, ALPHA_FADE);
   }
 
   @OnLongClick("hello") boolean sayGetOffMe() {
@@ -57,10 +57,10 @@
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.bind(this);
+    ButterFork.bind(this);
 
     // Contrived code to use the bound fields.
-    title.setText("Butter Knife");
+    title.setText("Butter Fork");
     subtitle.setText("Field and method binding for Android views.");
     footer.setText("by Jake Wharton");
     hello.setText("Say Hello");
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java b/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
index 20deb69f..039960ec 100644
--- a/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
+++ b/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
@@ -9,7 +9,7 @@
 
 import butterfork.Bind;
 import butterfork.BindResources;
-import butterfork.ButterKnife;
+import butterfork.ButterFork;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -59,7 +59,7 @@ public SimpleAdapter(Context context) {
     @Bind("position") TextView position;
 
     ViewHolder(View view) {
-      ButterKnife.bind(this, view);
+      ButterFork.bind(this, view);
     }
   }
 }
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/SimpleApp.java b/butterfork-sample/src/main/java/com/example/butterfork/SimpleApp.java
index d1924e9e..32d281b0 100644
--- a/butterfork-sample/src/main/java/com/example/butterfork/SimpleApp.java
+++ b/butterfork-sample/src/main/java/com/example/butterfork/SimpleApp.java
@@ -2,11 +2,11 @@
 
 import android.app.Application;
 
-import butterfork.ButterKnife;
+import butterfork.ButterFork;
 
 public class SimpleApp extends Application {
   @Override public void onCreate() {
     super.onCreate();
-    ButterKnife.setDebug(BuildConfig.DEBUG);
+    ButterFork.setDebug(BuildConfig.DEBUG);
   }
 }
diff --git a/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java b/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java
index 42720113..7892fdfb 100644
--- a/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java
+++ b/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java
@@ -6,7 +6,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import butterfork.ButterKnife;
+import butterfork.ButterFork;
 
 import static org.assertj.android.api.Assertions.assertThat;
 
@@ -24,7 +24,7 @@
     assertThat(activity.listOfThings).hasId(R.id.list_of_things);
     assertThat(activity.footer).hasId(R.id.footer);
 
-    ButterKnife.unbind(activity);
+    ButterFork.unbind(activity);
     assertThat(activity.title).isNull();
     assertThat(activity.subtitle).isNull();
     assertThat(activity.hello).isNull();
diff --git a/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java b/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java
index 1372c579..230d78e7 100644
--- a/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java
+++ b/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java
@@ -10,7 +10,7 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
-import butterfork.ButterKnife;
+import butterfork.ButterFork;
 
 import static com.example.butterfork.SimpleAdapter.ViewHolder;
 import static org.assertj.android.api.Assertions.assertThat;
@@ -28,7 +28,7 @@
     assertThat(holder.length).hasId(R.id.length);
     assertThat(holder.position).hasId(R.id.position);
 
-    ButterKnife.unbind(holder);
+    ButterFork.unbind(holder);
     assertThat(holder.word).isNull();
     assertThat(holder.length).isNull();
     assertThat(holder.position).isNull();
diff --git a/butterfork/src/main/java/butterfork/ButterKnife.java b/butterfork/src/main/java/butterfork/ButterFork.java
similarity index 98%
rename from butterfork/src/main/java/butterfork/ButterKnife.java
rename to butterfork/src/main/java/butterfork/ButterFork.java
index 91f9d067..f9fc74fe 100644
--- a/butterfork/src/main/java/butterfork/ButterKnife.java
+++ b/butterfork/src/main/java/butterfork/ButterFork.java
@@ -27,7 +27,7 @@
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
  *     setContentView(R.layout.example_activity);
- *     ButterKnife.bind(this);
+ *     ButterFork.bind(this);
  *   }
  * }
  * </code></pre>
@@ -75,8 +75,8 @@
  * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
  */
-public final class ButterKnife {
-  private ButterKnife() {
+public final class ButterFork {
+  private ButterFork() {
     throw new AssertionError("No instances.");
   }
 
@@ -222,7 +222,7 @@ protected String getResourceEntryName(Object source, int id) {
     void set(T view, V value, int index);
   }
 
-  private static final String TAG = "ButterKnife";
+  private static final String TAG = "ButterFork";
   private static boolean debug = false;
 
   static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();
@@ -233,7 +233,7 @@ protected String getResourceEntryName(Object source, int id) {
 
   /** Control whether debug logging is enabled. */
   public static void setDebug(boolean debug) {
-    ButterKnife.debug = debug;
+    ButterFork.debug = debug;
   }
 
   /**
diff --git a/butterfork/src/test/java/butterfork/ButterKnifeTest.java b/butterfork/src/test/java/butterfork/ButterForkTest.java
similarity index 81%
rename from butterfork/src/test/java/butterfork/ButterKnifeTest.java
rename to butterfork/src/test/java/butterfork/ButterForkTest.java
index b0068f56..35d7a144 100644
--- a/butterfork/src/test/java/butterfork/ButterKnifeTest.java
+++ b/butterfork/src/test/java/butterfork/ButterForkTest.java
@@ -18,15 +18,15 @@
 
 import butterfork.shadow.EditModeShadowView;
 
-import static butterfork.ButterKnife.Finder.arrayOf;
-import static butterfork.ButterKnife.Finder.listOf;
+import static butterfork.ButterFork.Finder.arrayOf;
+import static butterfork.ButterFork.Finder.listOf;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.entry;
 import static org.assertj.core.api.Assertions.fail;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
-public class ButterKnifeTest {
+public class ButterForkTest {
   private static final Property<View, Boolean> PROPERTY_ENABLED =
       new Property<View, Boolean>(Boolean.class, "enabled") {
         @Override public Boolean get(View view) {
@@ -37,13 +37,13 @@
           view.setEnabled(enabled);
         }
       };
-  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
-      new ButterKnife.Setter<View, Boolean>() {
+  private static final ButterFork.Setter<View, Boolean> SETTER_ENABLED =
+      new ButterFork.Setter<View, Boolean>() {
         @Override public void set(View view, Boolean value, int index) {
           view.setEnabled(value);
         }
       };
-  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
+  private static final ButterFork.Action<View> ACTION_DISABLE = new ButterFork.Action<View>() {
     @Override public void apply(View view, int index) {
       view.setEnabled(false);
     }
@@ -51,7 +51,7 @@
 
   @Before @After // Clear out cache of binders before and after each test.
   public void resetViewsCache() {
-    ButterKnife.BINDERS.clear();
+    ButterFork.BINDERS.clear();
   }
 
   @Test public void listOfFiltersNull() {
@@ -83,7 +83,7 @@ public void resetViewsCache() {
     assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
-    ButterKnife.apply(views, PROPERTY_ENABLED, false);
+    ButterFork.apply(views, PROPERTY_ENABLED, false);
 
     assertThat(view1.isEnabled()).isFalse();
     assertThat(view2.isEnabled()).isFalse();
@@ -99,7 +99,7 @@ public void resetViewsCache() {
     assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
-    ButterKnife.apply(views, ACTION_DISABLE);
+    ButterFork.apply(views, ACTION_DISABLE);
 
     assertThat(view1.isEnabled()).isFalse();
     assertThat(view2.isEnabled()).isFalse();
@@ -115,7 +115,7 @@ public void resetViewsCache() {
     assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
-    ButterKnife.apply(views, SETTER_ENABLED, false);
+    ButterFork.apply(views, SETTER_ENABLED, false);
 
     assertThat(view1.isEnabled()).isFalse();
     assertThat(view2.isEnabled()).isFalse();
@@ -127,8 +127,8 @@ public void resetViewsCache() {
     }
 
     Example example = new Example();
-    ButterKnife.bind(example, null, null);
-    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
+    ButterFork.bind(example, null, null);
+    assertThat(ButterFork.BINDERS).contains(entry(Example.class, ButterFork.NOP_VIEW_BINDER));
   }
 
   @Test public void zeroBindingsUnbindDoesNotThrowException() {
@@ -136,21 +136,21 @@ public void resetViewsCache() {
     }
 
     Example example = new Example();
-    ButterKnife.unbind(example);
-    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
+    ButterFork.unbind(example);
+    assertThat(ButterFork.BINDERS).contains(entry(Example.class, ButterFork.NOP_VIEW_BINDER));
   }
 
   @Test public void bindingKnownPackagesIsNoOp() {
-    ButterKnife.bind(Robolectric.buildActivity(Activity.class).create().get());
-    assertThat(ButterKnife.BINDERS).isEmpty();
-    ButterKnife.bind(new Object(), Robolectric.buildActivity(Activity.class).create().get());
-    assertThat(ButterKnife.BINDERS).isEmpty();
+    ButterFork.bind(Robolectric.buildActivity(Activity.class).create().get());
+    assertThat(ButterFork.BINDERS).isEmpty();
+    ButterFork.bind(new Object(), Robolectric.buildActivity(Activity.class).create().get());
+    assertThat(ButterFork.BINDERS).isEmpty();
   }
 
   @Test public void finderThrowsNiceError() {
     View view = new View(RuntimeEnvironment.application);
     try {
-      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      ButterFork.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
       fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view 'button1' with ID "
@@ -163,7 +163,7 @@ public void resetViewsCache() {
   @Test public void finderThrowsLessNiceErrorInEditMode() {
     View view = new View(RuntimeEnvironment.application);
     try {
-      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      ButterFork.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
       fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view '<unavailable while editing>' "
