diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 03439099..0acb114d 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -9,11 +9,12 @@
 import android.util.Property;
 import android.view.View;
 
-import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
+import butterknife.internal.ArraysCompat;
+
 /**
  * Field and method binding for Android views. Use this class to simplify finding views and
  * attaching listeners by binding them with annotations.
@@ -128,7 +129,7 @@ private ButterKnife() {
           views[end++] = view;
         }
       }
-      return Arrays.copyOfRange(views, 0, end);
+      return ArraysCompat.copyOfRange(views, 0, end);
     }
 
     @SafeVarargs
diff --git a/butterknife/src/main/java/butterknife/internal/ArraysCompat.java b/butterknife/src/main/java/butterknife/internal/ArraysCompat.java
new file mode 100644
index 00000000..aecd8392
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/ArraysCompat.java
@@ -0,0 +1,31 @@
+package butterknife.internal;
+
+import java.lang.reflect.Array;
+
+/**
+ * Exposes/reimplements select {@linkplain java.util.Arrays Arrays} methods not supported on API
+ * versions below 9.
+ */
+public class ArraysCompat {
+  static public <T> T[] copyOfRange(T[] original, int from, int to) {
+    return copyOfRange(original, from, to, (Class<T[]>) original.getClass());
+  }
+
+  @SuppressWarnings("unchecked")
+  public static <T, U> T[] copyOfRange(U[] original, int from, int to,
+                                       Class<? extends T[]> newType) {
+    int newLength = to - from;
+    if (newLength < 0)
+      throw new IllegalArgumentException(from + " > " + to);
+    T[] copy = ((Object) newType == (Object) Object[].class)
+        ? (T[]) new Object[newLength]
+        : (T[]) Array.newInstance(newType.getComponentType(), newLength);
+    System.arraycopy(original, from, copy, 0,
+        Math.min(original.length - from, newLength));
+    return copy;
+  }
+
+  private ArraysCompat() {
+    // no instances
+  }
+}
\ No newline at end of file
