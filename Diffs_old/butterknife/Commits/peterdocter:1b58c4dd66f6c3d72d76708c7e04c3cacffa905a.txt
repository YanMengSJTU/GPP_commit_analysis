diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 880d0c36..35c99066 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -145,6 +145,21 @@ public View findRequiredView(Object source, int id, String who) {
       return view;
     }
 
+    public <T> T cast(View view, int id, Class<T> expectedType) {
+      if (!expectedType.isInstance(view)) {
+        String name = view.getContext().getResources().getResourceEntryName(id);
+        throw new ClassCastException("View '"
+            + name
+            + "' with ID "
+            + id
+            + " was of type "
+            + view.getClass().getName()
+            + " but was expexted to have type "
+            + expectedType.getName());
+      }
+      return (T) view;
+    }
+
     public abstract View findOptionalView(Object source, int id);
 
     protected abstract Context getContext(Object source);
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
index d52f3602..3c8d1b3c 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
@@ -129,7 +129,9 @@ private void emitCollectionBinding(StringBuilder builder, CollectionBinding bind
         builder.append(',');
       }
       builder.append("\n        ");
-      emitCastIfNeeded(builder, binding.getType());
+      if (!binding.getType().equals(VIEW_TYPE)) {
+        builder.append("finder.cast(");
+      }
       if (binding.isRequired()) {
         builder.append("finder.findRequiredView(source, ")
             .append(ids[i])
@@ -141,6 +143,11 @@ private void emitCollectionBinding(StringBuilder builder, CollectionBinding bind
             .append(ids[i])
             .append(")");
       }
+      if (!binding.getType().equals(VIEW_TYPE)) {
+        builder.append(", " + ids[i]);
+        builder.append(", " + binding.getType() + ".class");
+        builder.append(")");
+      }
     }
 
     builder.append("\n    );");
@@ -180,8 +187,15 @@ private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
       builder.append("    target.")
           .append(viewBinding.getName())
           .append(" = ");
-      emitCastIfNeeded(builder, viewBinding.getType());
-      builder.append("view;\n");
+          
+      if (viewBinding.getType().equals(VIEW_TYPE)) {
+        builder.append("view;\n");
+      } else {
+        builder.append("finder.cast(view");
+        builder.append(", " + injection.getId());
+        builder.append(", " + viewBinding.getType() + ".class");
+        builder.append(");\n");
+      }
     }
   }
 
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
index 08ce0df7..e8256320 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
@@ -66,7 +66,7 @@
             "  public static void inject(Finder finder, final test.Test target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = (test.Test.TestInterface) view;",
+            "    target.thing = finder.cast(view, 1, test.Test.TestInterface.class);",
             "  }",
             "  public static void reset(test.Test target) {",
             "    target.thing = null;",
@@ -102,7 +102,7 @@
             "  public static void inject(Finder finder, final test.Test target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = (android.widget.TextView) view;",
+            "    target.thing = finder.cast(view, 1, android.widget.TextView.class);",
             "  }",
             "  public static void reset(test.Test target) {",
             "    target.thing = null;",
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
index cf61049c..1407fd6b 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
@@ -106,9 +106,9 @@
             "  public static void inject(Finder finder, final test.Test target, Object source) {",
             "    View view;",
             "    target.thing = Finder.arrayOf(",
-            "        (android.widget.TextView) finder.findRequiredView(source, 1, \"thing\"),",
-            "        (android.widget.TextView) finder.findRequiredView(source, 2, \"thing\"),",
-            "        (android.widget.TextView) finder.findRequiredView(source, 3, \"thing\")",
+            "        finder.cast(finder.findRequiredView(source, 1, \"thing\"), 1, android.widget.TextView.class),",
+            "        finder.cast(finder.findRequiredView(source, 2, \"thing\"), 2, android.widget.TextView.class),",
+            "        finder.cast(finder.findRequiredView(source, 3, \"thing\"), 3, android.widget.TextView.class)",
             "    );",
             "  }",
             "  public static void reset(test.Test target) {",
@@ -184,9 +184,9 @@
             "  public static void inject(Finder finder, final test.Test target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
-            "        (test.Test.TestInterface) finder.findRequiredView(source, 1, \"thing\"),",
-            "        (test.Test.TestInterface) finder.findRequiredView(source, 2, \"thing\"),",
-            "        (test.Test.TestInterface) finder.findRequiredView(source, 3, \"thing\")",
+            "        finder.cast(finder.findRequiredView(source, 1, \"thing\"), 1, test.Test.TestInterface.class),",
+            "        finder.cast(finder.findRequiredView(source, 2, \"thing\"), 2, test.Test.TestInterface.class),",
+            "        finder.cast(finder.findRequiredView(source, 3, \"thing\"), 3, test.Test.TestInterface.class)",
             "    );",
             "  }",
             "  public static void reset(test.Test target) {",
