diff --git a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
index e1231484..2931c601 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
@@ -3,7 +3,6 @@
 import android.content.res.Resources;
 import android.graphics.BitmapFactory;
 import android.view.View;
-import butterknife.ButterKnife;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.JavaFile;
@@ -17,7 +16,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -25,10 +23,15 @@
 import java.util.Set;
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+import static java.util.Collections.singletonList;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
 final class BindingClass {
+  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");
+  private static final ClassName VIEW_BINDER =
+      ClassName.get("butterknife", "ButterKnife", "ViewBinder");
+
   private final Map<String, ViewBindings> viewIdMap = new LinkedHashMap<>();
   private final Map<FieldCollectionViewBinding, String[]> collectionBindings = new LinkedHashMap<>();
   private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
@@ -97,9 +100,7 @@ JavaFile brewJava() {
       result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),
           TypeVariableName.get("T")));
     } else {
-      result.addSuperinterface(
-          ParameterizedTypeName.get(ClassName.get(ButterKnife.ViewBinder.class),
-              TypeVariableName.get("T")));
+      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));
     }
 
     result.addMethod(createBindMethod());
@@ -114,7 +115,7 @@ private MethodSpec createBindMethod() {
     MethodSpec.Builder result = MethodSpec.methodBuilder("bind")
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC)
-        .addParameter(ButterKnife.Finder.class, "finder", FINAL)
+        .addParameter(FINDER, "finder", FINAL)
         .addParameter(TypeVariableName.get("T"), "target", FINAL)
         .addParameter(Object.class, "source");
 
@@ -179,12 +180,12 @@ private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionVie
         builder.add(", ");
       }
       String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
-      builder.add("\nfinder.<$T>$L(source, $L, $S)", ClassName.bestGuess(binding.getType()),
-          findMethod, ids[i], asHumanDescription(Collections.singleton(binding)));
+      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],
+          asHumanDescription(singletonList(binding)));
     }
 
-    result.addStatement("target.$L = $T.$L($L)", binding.getName(), ButterKnife.Finder.class,
-        ofName, builder.build());
+    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,
+        builder.build());
   }
 
   private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
@@ -267,9 +268,8 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings)
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n",
-                    bestGuess(parameter.getType()), listenerPosition, method.name(),
-                    listenerPosition, binding.getName(), i);
+                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),
+                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);
               } else {
                 builder.add("p$L", listenerPosition);
               }
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeAbstractProcessor.java b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeAbstractProcessor.java
index d4bd49cf..4d2be2d6 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeAbstractProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeAbstractProcessor.java
@@ -44,7 +44,7 @@
 
 abstract class ButterKnifeAbstractProcessor extends AbstractProcessor {
 
-    public static final String NO_RESOURCE = InternalKeys.NO_RESOURCE;
+    public static final String NO_RESOURCE = "";
     public static final String MANIFEST_FILE = "androidManifestFile";
     public static final String RESOURCE_PACKAGE_NAME = "resourcePackageName";
 
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index 51c22110..a4b99dbc 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -21,6 +21,7 @@
 import butterknife.OnPageChange;
 import butterknife.OnTextChanged;
 import butterknife.OnTouch;
+import com.squareup.javapoet.TypeName;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -54,9 +55,6 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
-import static butterknife.internal.InternalKeys.ANDROID_PREFIX;
-import static butterknife.internal.InternalKeys.BINDING_CLASS_SUFFIX;
-import static butterknife.internal.InternalKeys.JAVA_PREFIX;
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -66,6 +64,7 @@
 
 public final class ButterKnifeProcessor extends ButterKnifeAbstractProcessor {
   static final String VIEW_TYPE = "android.view.View";
+  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
   private static final String BITMAP_TYPE = "android.graphics.Bitmap";
   private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
@@ -284,12 +283,12 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
     String qualifiedName = enclosingElement.getQualifiedName().toString();
 
-    if (qualifiedName.startsWith(ANDROID_PREFIX)) {
+    if (qualifiedName.startsWith("android.")) {
       error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
           annotationClass.getSimpleName(), qualifiedName);
       return true;
     }
-    if (qualifiedName.startsWith(JAVA_PREFIX)) {
+    if (qualifiedName.startsWith("java.")) {
       error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
           annotationClass.getSimpleName(), qualifiedName);
       return true;
@@ -369,7 +368,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
     }
 
     String name = element.getSimpleName().toString();
-    String type = elementType.toString();
+    TypeName type = TypeName.get(elementType);
     boolean required = isRequiredBinding(element);
 
     FieldViewBinding binding = new FieldViewBinding(name, type, required);
@@ -440,7 +439,7 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
     }
 
     assert viewType != null; // Always false as hasError would have been true.
-    String type = viewType.toString();
+    TypeName type = TypeName.get(viewType);
     boolean required = isRequiredBinding(element);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
@@ -920,7 +919,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
           }
           if (isSubtypeOfType(methodParameterType, parameterTypes[j])
               || isInterface(methodParameterType)) {
-            parameters[i] = new Parameter(j, methodParameterType.toString());
+            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));
             methodParameterUsed.set(j);
             break;
           }
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
index 534b4904..c6bfd6e5 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
@@ -1,5 +1,7 @@
 package butterknife.internal;
 
+import com.squareup.javapoet.TypeName;
+
 final class FieldCollectionViewBinding implements ViewBinding {
   enum Kind {
     ARRAY,
@@ -7,11 +9,11 @@
   }
 
   private final String name;
-  private final String type;
+  private final TypeName type;
   private final Kind kind;
   private final boolean required;
 
-  FieldCollectionViewBinding(String name, String type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
@@ -22,7 +24,7 @@ public String getName() {
     return name;
   }
 
-  public String getType() {
+  public TypeName getType() {
     return type;
   }
 
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
index d7f123f1..0814e005 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
@@ -1,13 +1,15 @@
 package butterknife.internal;
 
+import com.squareup.javapoet.TypeName;
+
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
 final class FieldViewBinding implements ViewBinding {
   private final String name;
-  private final String type;
+  private final TypeName type;
   private final boolean required;
 
-  FieldViewBinding(String name, String type, boolean required) {
+  FieldViewBinding(String name, TypeName type, boolean required) {
     this.name = name;
     this.type = type;
     this.required = required;
@@ -17,7 +19,7 @@ public String getName() {
     return name;
   }
 
-  public String getType() {
+  public TypeName getType() {
     return type;
   }
 
@@ -30,6 +32,6 @@ public boolean isRequired() {
   }
 
   public boolean requiresCast() {
-    return !VIEW_TYPE.equals(type);
+    return !VIEW_TYPE.equals(type.toString());
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/Parameter.java b/butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
index 6949688b..2bcd7309 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
@@ -1,13 +1,15 @@
 package butterknife.internal;
 
+import com.squareup.javapoet.TypeName;
+
 /** Represents a parameter type and its position in the listener method. */
 final class Parameter {
   static final Parameter[] NONE = new Parameter[0];
 
   private final int listenerPosition;
-  private final String type;
+  private final TypeName type;
 
-  Parameter(int listenerPosition, String type) {
+  Parameter(int listenerPosition, TypeName type) {
     this.listenerPosition = listenerPosition;
     this.type = type;
   }
@@ -16,11 +18,11 @@ int getListenerPosition() {
     return listenerPosition;
   }
 
-  String getType() {
+  TypeName getType() {
     return type;
   }
 
   public boolean requiresCast(String toType) {
-    return !type.equals(toType);
+    return !type.toString().equals(toType);
   }
 }
diff --git a/butterknife/src/main/java/butterknife/Bind.java b/butterknife/src/main/java/butterknife/Bind.java
index 31ec154b..771a3105 100644
--- a/butterknife/src/main/java/butterknife/Bind.java
+++ b/butterknife/src/main/java/butterknife/Bind.java
@@ -18,7 +18,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface Bind {
   /** View ID to which the field will be bound. */
-  int[] value() default { butterknife.internal.InternalKeys.NO_ID };
+  int[] value() default { ButterKnife.NO_ID };
   /** View ID to which the field will be bound, expressed as a {@link String}. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/BindArray.java b/butterknife/src/main/java/butterknife/BindArray.java
index c42d9dd1..8047ddf1 100644
--- a/butterknife/src/main/java/butterknife/BindArray.java
+++ b/butterknife/src/main/java/butterknife/BindArray.java
@@ -37,7 +37,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindArray {
   /** Array resource ID to which the field will be bound. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** Array resource ID to which the field will be bound, expressed as a {@link String}. */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindBitmap.java b/butterknife/src/main/java/butterknife/BindBitmap.java
index 2363d429..2990b932 100644
--- a/butterknife/src/main/java/butterknife/BindBitmap.java
+++ b/butterknife/src/main/java/butterknife/BindBitmap.java
@@ -18,9 +18,9 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindBitmap {
   /** Drawable resource ID from which the {@link Bitmap} will be created. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** Drawable resource ID from which the {@link Bitmap} will be created,
    * expressed as a {@link String}.
    */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindBool.java b/butterknife/src/main/java/butterknife/BindBool.java
index e0d131ff..95e86eb6 100644
--- a/butterknife/src/main/java/butterknife/BindBool.java
+++ b/butterknife/src/main/java/butterknife/BindBool.java
@@ -17,7 +17,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindBool {
   /** Boolean resource ID to which the field will be bound. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** Boolean resource ID to which the field will be bound, expressed as a {@link String}. */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindColor.java b/butterknife/src/main/java/butterknife/BindColor.java
index b6f86c3c..44c8fe84 100644
--- a/butterknife/src/main/java/butterknife/BindColor.java
+++ b/butterknife/src/main/java/butterknife/BindColor.java
@@ -23,7 +23,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindColor {
   /** Color resource ID to which the field will be bound. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** Color resource ID to which the field will be bound, expressed as a {@link String}. */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindDimen.java b/butterknife/src/main/java/butterknife/BindDimen.java
index 7ca2d86a..440f2f5a 100644
--- a/butterknife/src/main/java/butterknife/BindDimen.java
+++ b/butterknife/src/main/java/butterknife/BindDimen.java
@@ -21,7 +21,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindDimen {
   /** Dimension resource ID to which the field will be bound. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** Dimension resource ID to which the field will be bound, expressed as a {@link String}. */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindDrawable.java b/butterknife/src/main/java/butterknife/BindDrawable.java
index 688460c4..d0989f45 100644
--- a/butterknife/src/main/java/butterknife/BindDrawable.java
+++ b/butterknife/src/main/java/butterknife/BindDrawable.java
@@ -18,7 +18,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindDrawable {
   /** Drawable resource ID to which the field will be bound. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** Drawable resource ID to which the field will be bound, expressed as a {@link String}. */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindInt.java b/butterknife/src/main/java/butterknife/BindInt.java
index d76c45e2..841f717d 100644
--- a/butterknife/src/main/java/butterknife/BindInt.java
+++ b/butterknife/src/main/java/butterknife/BindInt.java
@@ -17,7 +17,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindInt {
   /** Integer resource ID to which the field will be bound. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** Integer resource ID to which the field will be bound, expressed as a {@link String}. */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindString.java b/butterknife/src/main/java/butterknife/BindString.java
index 37629407..761ee67f 100644
--- a/butterknife/src/main/java/butterknife/BindString.java
+++ b/butterknife/src/main/java/butterknife/BindString.java
@@ -18,7 +18,7 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindString {
   /** String resource ID to which the field will be bound. */
-  int value() default butterknife.internal.InternalKeys.NO_ID;
+  int value() default ButterKnife.NO_ID;
   /** String resource ID to which the field will be bound, expressed as a {@link String}. */
-  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
+  String res() default ButterKnife.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 8101a35d..26457707 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -14,10 +14,6 @@
 import java.util.List;
 import java.util.Map;
 
-import static butterknife.internal.InternalKeys.ANDROID_PREFIX;
-import static butterknife.internal.InternalKeys.BINDING_CLASS_SUFFIX;
-import static butterknife.internal.InternalKeys.JAVA_PREFIX;
-
 /**
  * Field and method binding for Android views. Use this class to simplify finding views and
  * attaching listeners by binding them with annotations.
@@ -84,6 +80,9 @@ private ButterKnife() {
     throw new AssertionError("No instances.");
   }
 
+  public static final int NO_ID = android.view.View.NO_ID;
+  public static final String NO_RESOURCE = "";
+
   /** DO NOT USE: Exposed for generated code. */
   @SuppressWarnings("UnusedDeclaration") // Used by generated code.
   public enum Finder {
@@ -344,12 +343,12 @@ static void bind(Object target, Object source, Finder finder) {
       return viewBinder;
     }
     String clsName = cls.getName();
-    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
+    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
       return NOP_VIEW_BINDER;
     }
     try {
-      Class<?> viewBindingClass = Class.forName(clsName + BINDING_CLASS_SUFFIX);
+      Class<?> viewBindingClass = Class.forName(clsName + "$$ViewBinder");
       //noinspection unchecked
       viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
       if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
index 7f2064ff..773f2372 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
@@ -43,5 +43,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnClick.java b/butterknife/src/main/java/butterknife/OnClick.java
index 8021977e..0bb1ce8c 100644
--- a/butterknife/src/main/java/butterknife/OnClick.java
+++ b/butterknife/src/main/java/butterknife/OnClick.java
@@ -39,5 +39,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife/src/main/java/butterknife/OnEditorAction.java
index 58af8b00..399f41fa 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife/src/main/java/butterknife/OnEditorAction.java
@@ -47,5 +47,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnFocusChange.java b/butterknife/src/main/java/butterknife/OnFocusChange.java
index 6bb63ef1..7d7db7ed 100644
--- a/butterknife/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife/src/main/java/butterknife/OnFocusChange.java
@@ -42,5 +42,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemClick.java b/butterknife/src/main/java/butterknife/OnItemClick.java
index 2d0315cc..eaa57930 100644
--- a/butterknife/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemClick.java
@@ -44,5 +44,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemLongClick.java b/butterknife/src/main/java/butterknife/OnItemLongClick.java
index 71714627..f2ffe766 100644
--- a/butterknife/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java
@@ -48,5 +48,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemSelected.java b/butterknife/src/main/java/butterknife/OnItemSelected.java
index 0f2d002b..6224da0b 100644
--- a/butterknife/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife/src/main/java/butterknife/OnItemSelected.java
@@ -45,7 +45,7 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.ITEM_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnLongClick.java b/butterknife/src/main/java/butterknife/OnLongClick.java
index 61bf461e..b936526e 100644
--- a/butterknife/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnLongClick.java
@@ -43,5 +43,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnPageChange.java b/butterknife/src/main/java/butterknife/OnPageChange.java
index 4ab1528e..e3650e59 100644
--- a/butterknife/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife/src/main/java/butterknife/OnPageChange.java
@@ -39,7 +39,7 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.PAGE_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnTextChanged.java b/butterknife/src/main/java/butterknife/OnTextChanged.java
index bd7d1a81..9bf6eb51 100644
--- a/butterknife/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife/src/main/java/butterknife/OnTextChanged.java
@@ -43,7 +43,7 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.TEXT_CHANGED;
diff --git a/butterknife/src/main/java/butterknife/OnTouch.java b/butterknife/src/main/java/butterknife/OnTouch.java
index ca259550..96183f69 100644
--- a/butterknife/src/main/java/butterknife/OnTouch.java
+++ b/butterknife/src/main/java/butterknife/OnTouch.java
@@ -45,5 +45,5 @@
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
   /** View IDs to which the method will be bound, expressed as {@link String}s. */
-  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
+  String[] res() default { ButterKnife.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/internal/InternalKeys.java b/butterknife/src/main/java/butterknife/internal/InternalKeys.java
deleted file mode 100644
index 9b4bc6b0..00000000
--- a/butterknife/src/main/java/butterknife/internal/InternalKeys.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package butterknife.internal;
-
-/**
- * Contains shared constants between the annotation processor and {@link butterknife.ButterKnife}
- */
-public final class InternalKeys {
-  public static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";
-  public static final String ANDROID_PREFIX = "android.";
-  public static final String JAVA_PREFIX = "java.";
-
-  public static final int NO_ID = android.view.View.NO_ID;
-  public static final String NO_RESOURCE = "";
-
-  private InternalKeys() {
-    throw new AssertionError("No instances.");
-  }
-}
