diff --git a/butterknife-reflect/README.md b/butterknife-reflect/README.md
index a4f06e8d..c4751cfd 100644
--- a/butterknife-reflect/README.md
+++ b/butterknife-reflect/README.md
@@ -3,9 +3,10 @@ ButterKnife Reflect
 
 The `butterknife-reflect` artifact is an API-compatible replacement for `butterknife` which uses
 100% reflection to fulfill field and method bindings for use during development.
-
+butterknife-reflect 是与  butterknife api兼容的神器。它百分之百的使用反射实现绑定变量和方法
 
 Er, what? Why would I want this?
+我为甚这么做呢
 --------------------------------
 
 The normal `butterknife` artifact requires the use of `butterknife-compiler` as an annotation
@@ -17,17 +18,24 @@ Java/Kotlin mixed projects using KAPT. And if `butterknife-compiler` is your onl
 processor for a module, using `butterknife-reflect` means that **zero** annotation processors run
 during development.
 
+之前 butterknife 需要使用 butterknife-compiler 配合来作为注解处理器，在编译时验证绑定的和生成运行时代码的。
+这是CI和发行版构建所需要的特性，但是它会减慢迭代开发。
+使用 butterknife-reflect 只用ide构建，在编译和运行之间就少了一个注解处理的过程，尤其在 Kotlin 或者 Kotlin和java混编使用kapt中，
+如果 你只用了一个 butterknife-compiler的话  换成 butterknife-reflect ，意味着你的项目开发0注解处理器了。
 
 Can I use this in production?
+我能在生产环境使用他吗？
 -----------------------------
 
 No.
+不能
 
 Well technically you _can_, but don't. It's slow, inefficient, and lacks the level of validation
 that normal Butter Knife usage provides.
-
+虽然技术上是可以的，但是不要。它速度慢、效率低，而且缺乏常规ButterKnife使用所提供的验证级别。
 
 Usage
+使用方法
 -----
 
 Kotlin modules:
@@ -59,3 +67,6 @@ _(Replacing `<version>` with whatever version you are using.)_
 If you have a dedicated variant for development you can skip the `if` check and simply add
 `butterknife-reflect` to that variant and `butterknife`+`butterknife-compiler` for the regular
 variants.
+
+如果你已经声明了 开发过程和生产过程的不同变体，你可以跳过if 检查，开发过程用 `butterknife-reflect` ，生产环境用
+`butterknife`+`butterknife-compiler`
\ No newline at end of file
diff --git a/butterknife-runtime/src/main/java/butterknife/Action.java b/butterknife-runtime/src/main/java/butterknife/Action.java
index b7a27918..9344df72 100644
--- a/butterknife-runtime/src/main/java/butterknife/Action.java
+++ b/butterknife-runtime/src/main/java/butterknife/Action.java
@@ -4,8 +4,12 @@
 import android.support.annotation.UiThread;
 import android.view.View;
 
-/** An action that can be applied to a list of views. */
+/** An action that can be applied to a list of views.
+ *  应用到一个view的序列中的统一操作
+ * */
 public interface Action<T extends View> {
-  /** Apply the action on the {@code view} which is at {@code index} in the list. */
+  /** Apply the action on the {@code view} which is at {@code index} in the list.
+   *  将索引为index的view进行 相关操作
+   * */
   @UiThread void apply(@NonNull T view, int index);
 }
diff --git a/butterknife-runtime/src/main/java/butterknife/Setter.java b/butterknife-runtime/src/main/java/butterknife/Setter.java
index ccbae905..faeb6f89 100644
--- a/butterknife-runtime/src/main/java/butterknife/Setter.java
+++ b/butterknife-runtime/src/main/java/butterknife/Setter.java
@@ -5,7 +5,9 @@
 import android.support.annotation.UiThread;
 import android.view.View;
 
-/** A setter that can apply a value to a list of views. */
+/** A setter that can apply a value to a list of views.
+ *  setter 为view序列自动设置 泛型代表的监听器等 有点像闭包
+ * */
 public interface Setter<T extends View, V> {
   /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
   @UiThread void set(@NonNull T view, @Nullable V value, int index);
diff --git a/butterknife-runtime/src/main/java/butterknife/Unbinder.java b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
index 663fc869..5bcbf821 100644
--- a/butterknife-runtime/src/main/java/butterknife/Unbinder.java
+++ b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
@@ -2,7 +2,9 @@
 
 import android.support.annotation.UiThread;
 
-/** An unbinder contract that will unbind views when called. */
+/** An unbinder contract that will unbind views when called.
+ *  当前对象 解绑所有绑定的view
+ * */
 public interface Unbinder {
   @UiThread void unbind();
 
diff --git a/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index b1de399e..7bd11ff3 100644
--- a/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -5,6 +5,7 @@
 /**
  * A {@linkplain View.OnClickListener click listener} that debounces multiple clicks posted in the
  * same frame. A click on one button disables all buttons for that frame.
+ * 当点击一个view的时候 enable 变为false 屏蔽其他所有 click 非常机智的写法 国内很多都是通过计时比较 System.currentTimeMillis()
  */
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
   static boolean enabled = true;
diff --git a/butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java b/butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java
index 35129842..26049ac1 100644
--- a/butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java
@@ -6,6 +6,7 @@
 /**
  * An immutable list of views which is lighter than {@code
  * Collections.unmodifiableList(new ArrayList<>(Arrays.asList(foo, bar)))}.
+ * 不可变视图列表
  */
 final class ImmutableList<T> extends AbstractList<T> implements RandomAccess {
   private final T[] views;
