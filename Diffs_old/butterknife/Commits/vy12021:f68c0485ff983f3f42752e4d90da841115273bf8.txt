diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 0d44dee9..78a59194 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -31,6 +31,7 @@
 import butterknife.internal.ListenerMethod;
 
 import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.BINDER_TYPE;
 import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
 import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;
@@ -57,7 +58,7 @@
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
-  private static final ClassName VIEW_CONTROLLER = ClassName.get("butterknife", "ViewController");
+  private static final ClassName VIEW_BINDER = ClassName.get("butterknife", "ViewBinder");
   private static final ClassName CLICK_SESSION = ClassName.get("butterknife.internal", "ClickSession");
   private static final ClassName METHOD_EXECUTOR = ClassName.get("butterknife.internal", "MethodExecutor");
   private static final ClassName CONDITION = ClassName.get("butterknife.internal", "Condition");
@@ -67,6 +68,7 @@
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
   private final boolean isFinal;
+  private final boolean isBinder;
   private final boolean isView;
   private final boolean isActivity;
   private final boolean isDialog;
@@ -76,12 +78,14 @@
   private final BindingSet parentBinding;
 
   private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
-      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,
-      ImmutableList<FieldCollectionViewBinding> collectionBindings,
-      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
+                     boolean isBinder, boolean isView, boolean isActivity, boolean isDialog,
+                     ImmutableList<ViewBinding> viewBindings,
+                     ImmutableList<FieldCollectionViewBinding> collectionBindings,
+                     ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
     this.isFinal = isFinal;
     this.targetTypeName = targetTypeName;
     this.bindingClassName = bindingClassName;
+    this.isBinder = isBinder;
     this.isView = isView;
     this.isActivity = isActivity;
     this.isDialog = isDialog;
@@ -480,16 +484,17 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
             /*MethodExecutor executor = new MethodExecutor() {
               @Override
               protected Object execute() {
-                target.postAction(View, Class, Method, key);
                 if (hasReturn) {
-                  return target.Method(View...);
+                  Object result = target.Method(View...);
+                  return result;
                 } else {
                   target.Method(View...);
                   return null;
                 }
               }
             };*/
-            TypeSpec.Builder executorType = TypeSpec.anonymousClassBuilder("")
+            TypeSpec.Builder executorType = TypeSpec.anonymousClassBuilder(
+                    "$S", methodBinding.getName())
                     .superclass(METHOD_EXECUTOR);
             MethodSpec.Builder methodExecute = MethodSpec.methodBuilder("execute")
                     .addAnnotation(Override.class)
@@ -522,13 +527,13 @@ protected Object execute() {
               }
             }
             methodBlock.add(");\n");
-            // TODO generate postAction()
+            // TODO generate postAction() method, will remove in the future.
             if (null != key && !"".equals(key)) {
-              methodBlock.beginControlFlow("if (!$T.class.isInstance(target))",
-                      VIEW_CONTROLLER)
-                      .addStatement("throw new RuntimeException("
-                              + "\"Target must be implements from $T\")", VIEW_CONTROLLER)
-                      .endControlFlow();
+              if (!isBinder) {
+                throw new RuntimeException(
+                        String.format("Target must be implements from %s)",
+                                VIEW_BINDER.reflectionName()));
+              }
               methodBlock.addStatement("target.postAction(p0, $S, $S, $S)",
                       targetTypeName, methodBinding.getName(), key);
             }
@@ -542,8 +547,8 @@ protected Object execute() {
             builder.addStatement("$T executor = $L", METHOD_EXECUTOR, executorType.build());
 
             // final ClickSession session = new ClickSession(target, p0, conditions, executor);
-            builder.addStatement("final $T session = new $T(target, p0, conditions, executor)",
-                    CLICK_SESSION, CLICK_SESSION);
+            builder.addStatement("final $T session = new $T(target, p0, $S, conditions, executor)",
+                    CLICK_SESSION, CLICK_SESSION, key);
 
             // TODO generate conditions
             /*for (int i = 0; i < requireds.length; i++) {
@@ -582,12 +587,24 @@ protected boolean require() {
               }
             }
 
-            // TODO do real action
+            // TODO Notify the click session before execute.
+            if (isBinder) {
+              builder.addStatement("target.onPreClick(session)");
+            }
+            // TODO Do real action
             // session.execute(true);
-            builder.addStatement("session.execute(true)");
-
+            builder.addStatement("boolean result = session.execute(true)");
+            if (isBinder) {
+              builder.beginControlFlow("if (result)");
+              builder.addStatement("target.onPostClick(session)");
+              builder.endControlFlow();
+            }
             if (hasReturnType && !returned) {
-              builder.addStatement("return ($L) session.getInvokeReturned()", method.returnType());
+              builder.beginControlFlow("if (result)");
+              builder.addStatement("return ($L) session.executor.getReturnedValue()",
+                      method.returnType());
+              builder.endControlFlow();
+              builder.addStatement("return $L", method.defaultReturn());
               returned = true;
             }
           }
@@ -776,6 +793,7 @@ static boolean requiresCast(TypeName type) {
   static Builder newBuilder(TypeElement enclosingElement) {
     TypeMirror typeMirror = enclosingElement.asType();
 
+    boolean isController = isSubtypeOfType(typeMirror, BINDER_TYPE);
     boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);
     boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);
     boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);
@@ -791,13 +809,14 @@ static Builder newBuilder(TypeElement enclosingElement) {
     ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
 
     boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
-    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);
+    return new Builder(targetType, bindingClassName, isFinal, isController, isView, isActivity, isDialog);
   }
 
   static final class Builder {
     private final TypeName targetTypeName;
     private final ClassName bindingClassName;
     private final boolean isFinal;
+    private final boolean isBinder;
     private final boolean isView;
     private final boolean isActivity;
     private final boolean isDialog;
@@ -810,10 +829,11 @@ static Builder newBuilder(TypeElement enclosingElement) {
     private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();
 
     private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
-        boolean isView, boolean isActivity, boolean isDialog) {
+                    boolean isBinder, boolean isView, boolean isActivity, boolean isDialog) {
       this.targetTypeName = targetTypeName;
       this.bindingClassName = bindingClassName;
       this.isFinal = isFinal;
+      this.isBinder = isBinder;
       this.isView = isView;
       this.isActivity = isActivity;
       this.isDialog = isDialog;
@@ -874,7 +894,8 @@ BindingSet build() {
       for (ViewBinding.Builder builder : viewIdMap.values()) {
         viewBindings.add(builder.build());
       }
-      return new BindingSet(targetTypeName, bindingClassName, isFinal, isView, isActivity, isDialog,
+      return new BindingSet(targetTypeName, bindingClassName, isFinal,
+              isBinder, isView, isActivity, isDialog,
           viewBindings.build(), collectionBindings.build(), resourceBindings.build(),
           parentBinding);
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index ae8c971f..4e0af7b2 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -95,6 +95,7 @@
   private static final String OPTION_SDK_INT = "butterknife.minSdk";
   private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";
   static final Id NO_ID = new Id(-1);
+  static final String BINDER_TYPE = "butterknife.ViewBinder";
   static final String VIEW_TYPE = "android.view.View";
   static final String ACTIVITY_TYPE = "android.app.Activity";
   static final String DIALOG_TYPE = "android.app.Dialog";
@@ -1140,10 +1141,10 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     // TODO getRequired
-    String[] conditions = null;
+    String[] requireds = null;
     Method annotationRequired = annotationClass.getDeclaredMethod("required");
     if (annotationRequired.getReturnType() == String[].class) {
-      conditions = (String[]) annotationRequired.invoke(annotation);
+      requireds = (String[]) annotationRequired.invoke(annotation);
     }
 
     // TODO isHandle
@@ -1301,7 +1302,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     MethodViewBinding binding = new MethodViewBinding(name,
-            Arrays.asList(parameters), conditions, handle, key, required);
+            Arrays.asList(parameters), requireds, handle, key, required);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
       QualifiedId qualifiedId = elementToQualifiedId(element, id);
@@ -1406,7 +1407,6 @@ private void printMessage(Kind kind, Element element, String message, Object[] a
     if (args.length > 0) {
       message = String.format(message, args);
     }
-
     processingEnv.getMessager().printMessage(kind, message, element);
   }
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
index 265293a9..c5ae697e 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
@@ -3,7 +3,7 @@
 import butterknife.internal.ClickSession;
 
 /**
- * Conditions for ViewController
+ * Conditions for ViewBinder
  *
  *
  * Created by LeoTesla on 2017/7/15.
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 82979d3f..43787a77 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -23,12 +23,12 @@
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
-import butterknife.ViewController;
+import butterknife.ViewBinder;
 import butterknife.internal.ClickSession;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
-public class SimpleActivity extends Activity implements ViewController, Condition {
+public class SimpleActivity extends Activity implements ViewBinder, Condition {
 
   private final static String TAG = SimpleActivity.class.getSimpleName();
 
@@ -62,7 +62,7 @@
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
-  @OnLongClick(R.id.hello) boolean sayGetOffMe() {
+  @OnLongClick(value = R.id.hello, required = {"condition"}, handle = true, key = "hello Long") boolean sayGetOffMe() {
     Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
     return true;
   }
@@ -74,7 +74,7 @@
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.bindController(this);
+    ButterKnife.bind((ViewBinder) this);
 
     // Contrived code to use the bound fields.
     title.setText(butterKnife);
@@ -91,6 +91,16 @@ public void postAction(View view, String clazz, String method, String key) {
     Log.e(TAG, clazz + "." + method + ": " + key);
   }
 
+  @Override
+  public void onPreClick(@NonNull ClickSession session) {
+    Log.e(TAG, "onPreClick--->" + session.executor.toString());
+  }
+
+  @Override
+  public void onPostClick(@NonNull ClickSession session) {
+    Log.e(TAG, "onPostClick--->" + session.executor.toString());
+  }
+
   @NonNull
   @Override
   public View getView() {
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 689b04f0..b87b4494 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -119,7 +119,7 @@ public static void setDebug(boolean debug) {
    * @param target Target activity for view binding.
    */
   @NonNull @UiThread
-  public static Unbinder bindController(@NonNull ViewController target) {
+  public static Unbinder bind(@NonNull ViewBinder target) {
     return createBinding(target, target.getView());
   }
 
@@ -130,7 +130,7 @@ public static Unbinder bindController(@NonNull ViewController target) {
    * @param target Target activity for view binding.
    */
   @NonNull @UiThread
-  public static Unbinder bindController(@NonNull ViewController target, View view) {
+  public static Unbinder bind(@NonNull ViewBinder target, View view) {
     View sourceView = null != view ? view : target.getView();
     return createBinding(target, sourceView);
   }
diff --git a/butterknife/src/main/java/butterknife/ViewBinder.java b/butterknife/src/main/java/butterknife/ViewBinder.java
new file mode 100644
index 00000000..10b5eca5
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/ViewBinder.java
@@ -0,0 +1,47 @@
+package butterknife;
+
+import android.support.annotation.NonNull;
+import android.view.View;
+
+import butterknife.internal.ClickSession;
+
+/**
+ * The target interface to view Binding.
+ *
+ * @version 1.0
+ *
+ * Created by TeslaLiu on 2017/7/15.
+ */
+public interface ViewBinder {
+
+    /**
+     * before session executed
+     * @param session   The session about this click event
+     */
+    void onPreClick(@NonNull ClickSession session);
+
+    /**
+     * after session executed
+     * @param session   The session about this click event
+     */
+    void onPostClick(@NonNull ClickSession session);
+
+    /**
+     * return the view to bind
+     */
+    @NonNull
+    View getView();
+
+    /**
+     * post Action
+     * @param view      View
+     * @param clazz     target class
+     * @param method    click method
+     * @param key       value of the annotation field key
+     * @deprecated instead of {@link #onPreClick(ClickSession)}
+     * and {@link #onPostClick(ClickSession)}
+     */
+    @Deprecated
+    void postAction(View view, String clazz, String method, String key);
+
+}
diff --git a/butterknife/src/main/java/butterknife/ViewController.java b/butterknife/src/main/java/butterknife/ViewController.java
deleted file mode 100644
index 6a6a31fc..00000000
--- a/butterknife/src/main/java/butterknife/ViewController.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package butterknife;
-
-import android.support.annotation.NonNull;
-import android.view.View;
-
-/**
- * the target interface on bind Onclick
- *
- * @version 1.0
- *
- * Created by TeslaLiu on 2017/7/15.
- */
-public interface ViewController {
-
-    /**
-     * post Action
-     * @param view      View
-     * @param clazz     target class
-     * @param method    click method
-     * @param key       key of annotation param
-     */
-    void postAction(View view, String clazz, String method, String key);
-
-    /**
-     * return the view to bind
-     */
-    @NonNull
-    View getView();
-
-}
diff --git a/butterknife/src/main/java/butterknife/internal/ClickSession.java b/butterknife/src/main/java/butterknife/internal/ClickSession.java
index 94d7b0b5..61aa656c 100644
--- a/butterknife/src/main/java/butterknife/internal/ClickSession.java
+++ b/butterknife/src/main/java/butterknife/internal/ClickSession.java
@@ -4,19 +4,45 @@
 import android.view.View;
 
 import butterknife.OnClick;
-import butterknife.ViewController;
+import butterknife.OnItemClick;
+import butterknife.ViewBinder;
 
+/**
+ * The Wrapper class of binding context for one click event.
+ */
 public class ClickSession {
 
+  /**
+   * The target for view binding
+   * @see ViewBinder
+   */
   public final Object target;
+  /**
+   * The view bind
+   */
   public final View view;
+  /**
+   * @see OnClick#key()
+   * @see OnItemClick#key()
+   * ...
+   */
+  public final String key;
+  /**
+   * @see OnClick#required()
+   * @see OnItemClick#required()
+   * ...
+   */
   private final Condition[] conditions;
-  private final MethodExecutor executor;
+  /**
+   * A delegate for method binding invoke.
+   */
+  public final MethodExecutor executor;
 
-  public ClickSession(Object target, View view,
+  public ClickSession(Object target, View view, @Nullable String key,
                       @Nullable Condition[] conditions, MethodExecutor executor) {
     this.target = target;
     this.view = view;
+    this.key = key;
     this.conditions = conditions;
     this.executor = executor;
   }
@@ -37,8 +63,4 @@ public final boolean execute(boolean checkRequired) {
     return true;
   }
 
-  public final Object getInvokeReturned() {
-    return executor.getReturned();
-  }
-
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Condition.java b/butterknife/src/main/java/butterknife/internal/Condition.java
index d0ad2a08..5bf2e006 100644
--- a/butterknife/src/main/java/butterknife/internal/Condition.java
+++ b/butterknife/src/main/java/butterknife/internal/Condition.java
@@ -3,7 +3,7 @@
 import butterknife.OnClick;
 
 /**
- * The class wrapper for {@link OnClick#required()}
+ * The class wrapper for {@link OnClick#required()}...
  */
 public abstract class Condition {
 
diff --git a/butterknife/src/main/java/butterknife/internal/MethodExecutor.java b/butterknife/src/main/java/butterknife/internal/MethodExecutor.java
index bd4a5875..1672e43d 100644
--- a/butterknife/src/main/java/butterknife/internal/MethodExecutor.java
+++ b/butterknife/src/main/java/butterknife/internal/MethodExecutor.java
@@ -7,8 +7,13 @@
  */
 public abstract class MethodExecutor {
 
+  private String methodName;
   private boolean invoked;
-  private Object returned;
+  private Object returnedValue;
+
+  public MethodExecutor(String methodName) {
+    this.methodName = methodName;
+  }
 
   @Nullable
   protected abstract Object execute();
@@ -16,16 +21,27 @@
   final void invoke() {
     if (!invoked) {
       invoked = true;
-      returned = execute();
+      returnedValue = execute();
     }
   }
 
-  public final Object getReturned() {
-    return returned;
+  public final String getMethodName() {
+    return methodName;
+  }
+
+  public final Object getReturnedValue() {
+    return returnedValue;
   }
 
   public final boolean isInvoked() {
     return invoked;
   }
 
+  @Override
+  public String toString() {
+    return "MethodExecutor{" +
+            "methodName='" + methodName + '\'' +
+            ", invoked=" + invoked +
+            '}';
+  }
 }
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 315099c6..28f8de50 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -19,12 +19,14 @@
         + "import butterknife.OnClick;\n"
         + "import butterknife.internal.ClickSession;\n"
         + "import butterknife.internal.Condition;\n"
-        + "import butterknife.ViewController;\n"
-        + "public class Test implements ViewController {\n"
+        + "import butterknife.ViewBinder;\n"
+        + "public class Test implements ViewBinder {\n"
         + "  @OnClick(value = {1}, required = {\"condition\"}, handle = true, key = \"Key\") void doStuff() {}\n"
 
             + "public boolean condition(ClickSession session) {return true;}\n"
             + "public boolean condition() {return true;}\n"
+            + "public void onPreClick(ClickSession session) {}\n"
+            + "public void onPostClick(ClickSession session) {}\n"
             + "@Override public void postAction(View view, String clazz, String method, String key) {}\n"
             + "@Override public View getView() {return null;}\n"
 
@@ -37,7 +39,7 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.ViewController;\n"
+        //+ "import butterknife.ViewBinder;\n"
         + "import butterknife.internal.ClickSession;\n"
         + "import butterknife.internal.Condition;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
@@ -59,18 +61,15 @@
         + "      @Override\n"
         + "      public void doClick(final View p0) {\n"
         + "        Condition[] conditions = new Condition[1];\n"
-        + "        MethodExecutor executor = new MethodExecutor() {\n"
+        + "        MethodExecutor executor = new MethodExecutor(\"doStuff\") {\n"
         + "          @Override\n"
         + "          public Object execute() {\n"
         + "            target.doStuff();\n"
-        + "            if (!ViewController.class.isInstance(target)) {\n"
-        + "              throw new RuntimeException(\"Target must be implements from ViewController\");\n"
-        + "            }\n"
         + "            target.postAction(p0, \"test.Test\", \"doStuff\", \"Key\");\n"
         + "            return null;\n"
         + "          }\n"
         + "        };\n"
-        + "        final ClickSession session = new ClickSession(target, p0, conditions, executor);\n"
+        + "        final ClickSession session = new ClickSession(target, p0, \"Key\", conditions, executor);\n"
         + "        conditions[0] = new Condition(\"condition\") {\n"
         + "          @Override\n"
         + "          protected boolean require() {\n"
@@ -78,7 +77,11 @@
         + "            return target.condition(session);\n"
         + "          }\n"
         + "        };\n"
-        + "        session.execute(true);\n"
+        + "        target.onPreClick(session);\n"
+        + "        boolean result = session.execute(true);\n"
+        + "        if (result) {\n"
+        + "          target.onPostClick(session);\n"
+        + "        }\n"
         //+ "        return;\n"
         + "      }\n"
         + "    });\n"
diff --git a/butterknife/src/test/java/butterknife/OnLongClickTest.java b/butterknife/src/test/java/butterknife/OnLongClickTest.java
index f4dd484e..c605c9cb 100644
--- a/butterknife/src/test/java/butterknife/OnLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnLongClickTest.java
@@ -15,8 +15,8 @@
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.OnLongClick;\n"
-        + "import butterknife.ViewController;\n"
-        + "public class Test implements ViewController {\n"
+        + "import butterknife.ViewBinder;\n"
+        + "public class Test implements ViewBinder {\n"
         + "  @OnLongClick(value = {1}, required = {\"condition\"}, key = \"Key\") boolean doStuff() {\n"
         + "    return true;\n"
         + "  }\n"
@@ -34,7 +34,7 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.ViewController;\n"
+        + "import butterknife.ViewBinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -50,8 +50,8 @@
         + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
         + "      @Override\n"
         + "      public boolean onLongClick(View p0) {\n"
-        + "        if (!ViewController.class.isInstance(target)) {\n"
-        + "          throw new RuntimeException(\"Target must be implements from ViewController\");\n"
+        + "        if (!ViewBinder.class.isInstance(target)) {\n"
+        + "          throw new RuntimeException(\"Target must be implements from ViewBinder\");\n"
         + "        }\n"
         + "        if (!target.condition()) {\n"
         + "          return false;\n"
diff --git a/gradle.properties b/gradle.properties
index 8c41c4b8..92dff5ad 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.8.1.6-SNAPSHOT
+VERSION_NAME=8.8.1.9-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
