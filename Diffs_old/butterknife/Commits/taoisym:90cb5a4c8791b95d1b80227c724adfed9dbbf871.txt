diff --git a/butterknife-annotations/src/main/java/butterknife/BindBean.java b/butterknife-annotations/src/main/java/butterknife/BindBean.java
index 6ad01b34..5924ebc0 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBean.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBean.java
@@ -4,8 +4,6 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
@@ -14,8 +12,9 @@
  * {@literal @}BindString(R.string.username_error) String usernameErrorText;
  * </code></pre>
  */
-@Retention(CLASS) @Target(TYPE)
+@Retention(CLASS) @Target({FIELD})
+@BindFunc("setText")
 public @interface BindBean {
-  /** String resource ID to which the field will be bound. */
-   Class<?> value();
+    int id();
+    String value();
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBeanText.java b/butterknife-annotations/src/main/java/butterknife/BindBeanClass.java
similarity index 59%
rename from butterknife-annotations/src/main/java/butterknife/BindBeanText.java
rename to butterknife-annotations/src/main/java/butterknife/BindBeanClass.java
index d6750982..c12760d6 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBeanText.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBeanClass.java
@@ -4,6 +4,8 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
@@ -12,9 +14,8 @@
  * {@literal @}BindString(R.string.username_error) String usernameErrorText;
  * </code></pre>
  */
-@Retention(CLASS) @Target({FIELD})
-@BindFunc("setText")
-public @interface BindBeanText {
-    int id();
-    String value();
+@Retention(CLASS) @Target(TYPE)
+public @interface BindBeanClass {
+  /** String resource ID to which the field will be bound. */
+   Class<?> value();
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index cbceaaf0..3c99b9f9 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -1,6 +1,6 @@
 package butterknife.compiler;
 
-import butterknife.BindBean;
+import butterknife.BindBeanClass;
 import butterknife.OnTouch;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -13,11 +13,8 @@
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
-import com.squareup.javapoet.TypeVariableName;
 import com.squareup.javapoet.WildcardTypeName;
 import java.lang.reflect.Field;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -57,6 +54,7 @@
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
+  private static final TypeName BINDER = ClassName.get("butterknife","Binder");
 
 
   private final TypeName beanTypeName;
@@ -112,12 +110,12 @@ private TypeSpec createType(int sdk) {
       result.superclass(parentBinding.bindingClassName);
     } else {
       ParameterizedTypeName UNBINDER = ParameterizedTypeName.get(ClassName.get("butterknife", "Unbinder"), beanTypeName);
-      //ClassName.get("butterknife", "Unbinder");
       result.addSuperinterface(UNBINDER);
     }
 
     if (hasTargetField()) {
       result.addField(targetTypeName, "target", PRIVATE);
+      result.addField(BINDER, "binder", PRIVATE);
     }
 
     if (isView) {
@@ -155,7 +153,8 @@ private MethodSpec createBindingViewDelegateConstructor() {
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target")
         .addParameter(VIEW, "source")
-        .addStatement(("this(target, source.getContext())"))
+        .addParameter(BINDER, "binder")
+        .addStatement(("this(target, source.getContext(),binder)"))
         .build();
   }
 
@@ -163,11 +162,12 @@ private MethodSpec createBindingConstructorForView() {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
         .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
-        .addParameter(targetTypeName, "target");
+        .addParameter(targetTypeName, "target")
+        .addParameter(BINDER, "binder");
     if (constructorNeedsView()) {
-      builder.addStatement("this(target, target)");
+      builder.addStatement("this(target, target,binder)");
     } else {
-      builder.addStatement("this(target, target.getContext())");
+      builder.addStatement("this(target, target.getContext(),binder)");
     }
     return builder.build();
   }
@@ -176,11 +176,12 @@ private MethodSpec createBindingConstructorForActivity() {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
         .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
-        .addParameter(targetTypeName, "target");
+        .addParameter(targetTypeName, "target")
+        .addParameter(BINDER, "binder");
     if (constructorNeedsView()) {
-      builder.addStatement("this(target, target.getWindow().getDecorView())");
+      builder.addStatement("this(target, target.getWindow().getDecorView(),binder)");
     } else {
-      builder.addStatement("this(target, target)");
+      builder.addStatement("this(target, target,binder)");
     }
     return builder.build();
   }
@@ -189,11 +190,12 @@ private MethodSpec createBindingConstructorForDialog() {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
         .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
-        .addParameter(targetTypeName, "target");
+        .addParameter(targetTypeName, "target")
+        .addParameter(BINDER, "binder");
     if (constructorNeedsView()) {
-      builder.addStatement("this(target, target.getWindow().getDecorView())");
+      builder.addStatement("this(target, target.getWindow().getDecorView(),binder)");
     } else {
-      builder.addStatement("this(target, target.getContext())");
+      builder.addStatement("this(target, target.getContext(),binder)");
     }
     return builder.build();
   }
@@ -227,7 +229,7 @@ private MethodSpec createBindingConstructor(int sdk) {
     } else {
       constructor.addParameter(CONTEXT, "context");
     }
-
+    constructor.addParameter(BINDER, "binder");
     if (hasUnqualifiedResourceBindings()) {
       // Aapt can change IDs out from underneath us, just suppress since all will work at runtime.
       constructor.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
@@ -243,16 +245,18 @@ private MethodSpec createBindingConstructor(int sdk) {
 
     if (parentBinding != null) {
       if (parentBinding.constructorNeedsView()) {
-        constructor.addStatement("super(target, source)");
+        constructor.addStatement("super(target, source,binder)");
       } else if (constructorNeedsView()) {
-        constructor.addStatement("super(target, source.getContext())");
+        constructor.addStatement("super(target, source.getContext(),binder)");
       } else {
-        constructor.addStatement("super(target, context)");
+        constructor.addStatement("super(target, context,binder)");
       }
       constructor.addCode("\n");
     }
     if (hasTargetField()) {
       constructor.addStatement("this.target = target");
+      constructor.addStatement("if(binder ==null)binder=new Binder.Default()");
+      constructor.addStatement("this.binder = binder");
       constructor.addCode("\n");
     }
 
@@ -705,7 +709,7 @@ static Builder newBuilder(TypeElement enclosingElement) {
     ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
     TypeMirror beanTypeMirror=null;
 
-    BindBean bean = enclosingElement.getAnnotation(BindBean.class);
+    BindBeanClass bean = enclosingElement.getAnnotation(BindBeanClass.class);
     TypeName type=null;
     if(bean!=null) {
         System.out.println("check bean");
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 4ee94490..91e46ad2 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,10 +1,10 @@
 package butterknife.compiler;
 
 import butterknife.BindArray;
-import butterknife.BindBean;
+import butterknife.BindBeanClass;
 import butterknife.BindBeanFunc;
 import butterknife.BindBeanImage;
-import butterknife.BindBeanText;
+import butterknife.BindBean;
 import butterknife.BindBitmap;
 import butterknife.BindBool;
 import butterknife.BindColor;
@@ -295,10 +295,10 @@ public synchronized void init(ProcessingEnvironment env) {
         annotations.add(BindViews.class);
         annotations.addAll(LISTENERS);
 
-        annotations.add(BindBeanText.class);
+        annotations.add(BindBean.class);
         annotations.add(BindBeanImage.class);
         annotations.add(BindBeanFunc.class);
-        annotations.add(BindBean.class);
+        annotations.add(BindBeanClass.class);
 
         return annotations;
     }
@@ -446,12 +446,12 @@ public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env
 
 
         // Process each @BindBeanText element.
-        for (Element element : env.getElementsAnnotatedWith(BindBeanText.class)) {
+        for (Element element : env.getElementsAnnotatedWith(BindBean.class)) {
             if (!SuperficialValidation.validateElement(element)) continue;
             try {
                 parseBindText(element, builderMap, erasedTargetNames);
             } catch (Exception e) {
-                logParsingError(element, BindBeanText.class, e);
+                logParsingError(element, BindBean.class, e);
             }
         }
         // Process each @BindBeanText element.
@@ -627,7 +627,7 @@ private void parseBindText(Element element, Map<TypeElement, BindingSet.Builder>
         TypeName type = TypeName.get(element.asType());
         String name = element.getSimpleName().toString();
         boolean required = isFieldRequired(element);
-        BindBeanText bean = element.getAnnotation(BindBeanText.class);
+        BindBean bean = element.getAnnotation(BindBean.class);
         BindFunc     func=bean.annotationType().getAnnotation(BindFunc.class);
 
         QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
index 9d1b2efa..330f6318 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
@@ -72,6 +72,6 @@
 
   @Override public CodeBlock render(int sdk) {
     //BeanMethod method = type.methodForSdk(sdk);
-    return CodeBlock.of("target.$L.$L(bean.$L)", name, func.value(),filed);
+    return CodeBlock.of("this.binder.apply(target.$L,bean.$L)", name,filed);
   }
 }
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 9246398c..fde23d0d 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -7,15 +7,14 @@
 import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
-import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import butterknife.BindBean;
+import butterknife.BindBeanClass;
 import butterknife.BindBeanImage;
-import butterknife.BindBeanText;
+import butterknife.BindBean;
 import butterknife.BindString;
 import butterknife.BindView;
 import butterknife.BindViews;
@@ -30,7 +29,7 @@
 import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
-@BindBean(SimpleActivity.Bean.class)
+@BindBeanClass(SimpleActivity.Bean.class)
 public class SimpleActivity extends Activity {
 
 
@@ -46,27 +45,28 @@
 
   @BindView(R.id.title) TextView title;
   @BindView(R.id.subtitle) TextView subtitle;
-  @BindView(R.id.hello) Button hello;
+
   @BindView(R.id.list_of_things) ListView listOfThings;
   @BindString(R.string.app_name) String butterKnife;
   @BindString(R.string.field_method) String fieldMethod;
   @BindString(R.string.by_jake_wharton) String byJakeWharton;
 
-  @BindBean(Bean.class)
+  @BindBeanClass(Bean.class)
   public static class TestBean extends Fragment{
     @BindBeanImage(id=R.id.footer,value = "id()")
-    ImageView ggg;
+    ImageView image;
     void x(){
 
     }
   }
   public static class Bean{
     public String id="";
-    public Uri id(){return Uri.parse("Fuck u");};
+    public Uri id(){return Uri.parse("http://a.png");};
   }
-  @BindBeanText(id=R.id.footer,value = "id")
+  @BindBean(id=R.id.footer,value = "id")
   TextView ggg;
-
+  @BindBean(id=R.id.hello,value = "id()")
+  TextView hello;
   @BindViews({ R.id.title, R.id.subtitle, R.id.hello }) List<View> headerViews;
 
   private SimpleAdapter adapter;
@@ -89,9 +89,9 @@ void x(){
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
     Unbinder binder = ButterKnife.bind(this);
-    binder.unbind();
-    Bean bean=null;
+    Bean bean=new Bean();
     binder.apply(bean);
+    binder.unbind();
     // Contrived code to use the bound fields.
     title.setText(butterKnife);
     subtitle.setText(fieldMethod);
diff --git a/butterknife/src/main/java/butterknife/Binder.java b/butterknife/src/main/java/butterknife/Binder.java
new file mode 100644
index 00000000..dbb2e31e
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/Binder.java
@@ -0,0 +1,15 @@
+package butterknife;
+
+import android.support.annotation.UiThread;
+
+/** An unbinder contract that will unbind views when called. */
+public interface Binder {
+    @UiThread
+    <V,D>void apply(V bean,D data);
+    class Default implements Binder{
+      @Override
+      public <V, D> void apply(V bean, D data) {
+        
+      }
+    }
+}
