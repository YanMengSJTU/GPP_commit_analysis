diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 1677649b..1def38f4 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -85,6 +85,48 @@
  * {@literal @}BindInt(R.integer.columns) int columns;
  * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
+ *
+ * butterknife 用来绑定 view 和事件。butterknife 可以使用注解来简化findviewbyid等和一些设置listener的操作。
+ *
+ * <p>
+ * Finding views from your activity is as easy as:
+ * <pre><code>
+ * public class ExampleActivity extends Activity {
+ *   {@literal @}BindView(R.id.title) EditText titleView;
+ *   {@literal @}BindView(R.id.subtitle) EditText subtitleView;
+ *
+ *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
+ *     super.onCreate(savedInstanceState);
+ *     setContentView(R.layout.example_activity);
+ *     ButterKnife.bind(this);
+ *   }
+ * }
+ * </code></pre>
+ * 绑定可以直接在活动、视图或对话框上执行
+ * 将多个view组合成一个列表或数组。
+ *
+ * <p>
+ * Group multiple views together into a {@link List} or array.
+ * <pre><code>
+ * {@literal @}BindView({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * List<EditText> nameViews;
+ * </code></pre>
+ * <p>
+ *  要将监听器绑定到视图，可以对方法进行注释:
+ *
+ * <pre><code>
+ * {@literal @}OnClick(R.id.submit) void onSubmit() {
+ *   // React to button click.
+ * }
+ * </code></pre>
+ * 监听器中可以传入任意数量的参数
+ * <pre><code>
+ * {@literal @}OnItemClick(R.id.tweet_list) void onTweetClicked(int position) {
+ *   // React to tweet click.
+ * }
+ * </code></pre>
+ *
+ *
  */
 public final class ButterKnife {
   private ButterKnife() {
@@ -97,7 +139,9 @@ private ButterKnife() {
   @VisibleForTesting
   static final Map<Class<?>, Constructor<? extends Unbinder>> BINDINGS = new LinkedHashMap<>();
 
-  /** Control whether debug logging is enabled. */
+  /** Control whether debug logging is enabled.
+   * 控制debug模式log打印的开关
+   * */
   public static void setDebug(boolean debug) {
     ButterKnife.debug = debug;
   }
@@ -105,8 +149,9 @@ public static void setDebug(boolean debug) {
   /**
    * BindView annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
-   *
+   * 当前activity的contentview 作为视图的根，绑定activity中被注解的成员变量和方法。
    * @param target Target activity for view binding.
+   * @param target view绑定的目标activity
    */
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Activity target) {
@@ -117,7 +162,7 @@ public static Unbinder bind(@NonNull Activity target) {
   /**
    * BindView annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
-   *
+   * 当前view 作为视图的根，绑定view中被注解的成员变量和方法。
    * @param target Target view for view binding.
    */
   @NonNull @UiThread
@@ -128,7 +173,7 @@ public static Unbinder bind(@NonNull View target) {
   /**
    * BindView annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
-   *
+   * dialog 对象并 作为视图的根，绑定Dialog中被注解的成员变量和方法。
    * @param target Target dialog for view binding.
    */
   @NonNull @UiThread
@@ -140,7 +185,7 @@ public static Unbinder bind(@NonNull Dialog target) {
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
-   *
+   * 当前activity的contentview 作为视图的根，绑定target中被注解的成员变量和方法。
    * @param target Target class for view binding.
    * @param source Activity on which IDs will be looked up.
    */
@@ -174,6 +219,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
   public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     Class<?> targetClass = target.getClass();
     if (debug) Log.d(TAG, "Looking up binding for " + targetClass.getName());
+    //此构造器 是 动态生成的xxx_ViewBinding.class 的
     Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);
 
     if (constructor == null) {
@@ -182,6 +228,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
 
     //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.
     try {
+      //返回可解绑的对象 在newinstance 创建实例过程中实现绑定
       return constructor.newInstance(target, source);
     } catch (IllegalAccessException e) {
       throw new RuntimeException("Unable to invoke " + constructor, e);
@@ -207,22 +254,31 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
       return bindingCtor;
     }
     String clsName = cls.getName();
+    //anroid java 官方包排除 ，（由于下面  findBindingConstructorForClass(cls.getSuperclass());
+    // ，可能进到系统类中）不具备绑定条件在此截断递归调用
     if (clsName.startsWith("android.") || clsName.startsWith("java.")
         || clsName.startsWith("androidx.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
       return null;
     }
+    /**
+     * 下面是核心代码
+     */
     try {
+      //通过反射获取 xxx_ViewBinding 类对象 此类是通过编译时生成的class文件
       Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");
-      //noinspection unchecked
+
+      //noinspection unchecked 获取构造器
       bindingCtor = (Constructor<? extends Unbinder>) bindingClass.getConstructor(cls, View.class);
       if (debug) Log.d(TAG, "HIT: Loaded binding class and constructor.");
     } catch (ClassNotFoundException e) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
+      //没发现这个类有可能是在父类中封装好了 所以编译的类名就是 父类名_ViewBinding
       bindingCtor = findBindingConstructorForClass(cls.getSuperclass());
     } catch (NoSuchMethodException e) {
       throw new RuntimeException("Unable to find binding constructor for " + clsName, e);
     }
+    //put到map中 key是 类  value 是构造器 Constructor
     BINDINGS.put(cls, bindingCtor);
     return bindingCtor;
   }
diff --git a/settings.gradle b/settings.gradle
index 9ecaae16..39a6d21b 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -7,7 +7,7 @@ include ':butterknife-lint'
 include ':butterknife-reflect'
 include ':butterknife-runtime'
 
-//include ':sample:app'
-//include ':sample:library'
+include ':sample:app'
+include ':sample:library'
 
 rootProject.name = 'butterknife-parent'
