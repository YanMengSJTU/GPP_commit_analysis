diff --git a/build.gradle b/build.gradle
index 2a4120d4..130300db 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,47 +1,47 @@
-subprojects { project ->
-  group = GROUP
-  version = VERSION_NAME
-
-  repositories {
-    mavenCentral()
-    maven {
-      url "https://plugins.gradle.org/m2/"
-    }
-  }
-
-  if (!project.name.equals('butterknife-gradle-plugin')) {
-    apply plugin: 'checkstyle'
-
-    task checkstyle(type: Checkstyle) {
-      configFile rootProject.file('checkstyle.xml')
-      source 'src/main/java'
-      ignoreFailures false
-      showViolations true
-      include '**/*.java'
-
-      classpath = files()
-    }
-
-    afterEvaluate {
-      if (project.tasks.findByName('check')) {
-        check.dependsOn('checkstyle')
-      }
-    }
-  }
-
-  buildscript {
-    repositories {
-      mavenCentral()
-      maven {
-        url "https://plugins.gradle.org/m2/"
-      }
-    }
-    dependencies {
-      classpath 'com.android.tools.build:gradle:2.2.2'
-      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2'
-    }
-  }
-}
+//subprojects { project ->
+//  group = GROUP
+//  version = VERSION_NAME
+//
+//  repositories {
+//    mavenCentral()
+//    maven {
+//      url "https://plugins.gradle.org/m2/"
+//    }
+//  }
+//
+//  if (!project.name.equals('butterknife-gradle-plugin')) {
+//    apply plugin: 'checkstyle'
+//
+//    task checkstyle(type: Checkstyle) {
+//      configFile rootProject.file('checkstyle.xml')
+//      source 'src/main/java'
+//      ignoreFailures false
+//      showViolations true
+//      include '**/*.java'
+//
+//      classpath = files()
+//    }
+//
+//    afterEvaluate {
+//      if (project.tasks.findByName('check')) {
+//        check.dependsOn('checkstyle')
+//      }
+//    }
+//  }
+//
+//  buildscript {
+//    repositories {
+//      mavenCentral()
+//      maven {
+//        url "https://plugins.gradle.org/m2/"
+//      }
+//    }
+//    dependencies {
+//      classpath 'com.android.tools.build:gradle:2.2.2'
+//      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2'
+//    }
+//  }
+//}
 
 ext {
   minSdkVersion = 9
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index 611cb1bc..fe981ea8 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -21,5 +21,3 @@ dependencies {
   compileOnly deps.android
   compile deps.supportAnnotations
 }
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index e917f86b..15148780 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -13,7 +13,7 @@ for (File file : sdkHandler.sdkLoader.repositories) {
 }
 
 dependencies {
-  compile project(':butterknife-annotations')
+  compile project(':butterknife:butterknife-annotations')
   compile deps.autoservice
   compile deps.autocommon
   compile deps.javapoet
@@ -29,5 +29,3 @@ checkstyle {
   //Remove this when tests are less verbose, i.e. using JavaPoet
   sourceSets = [sourceSets.main]
 }
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index f9b5226a..6c9473b1 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -1,7 +1,5 @@
 package butterknife.compiler;
 
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import com.google.common.collect.ImmutableList;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
@@ -12,6 +10,7 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.WildcardTypeName;
+
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -21,9 +20,13 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
 import static com.google.auto.common.MoreElements.getPackage;
 import static java.util.Collections.singletonList;
@@ -35,6 +38,7 @@
 final class BindingSet {
   static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");
   private static final ClassName VIEW = ClassName.get("android.view", "View");
+  private static final ClassName VIEWSOURCE = ClassName.get("butterknife", "ViewSource");
   private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
   private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
   private static final ClassName UI_THREAD =
@@ -129,7 +133,7 @@ private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {
     }
 
     if (constructorNeedsView()) {
-      constructor.addParameter(VIEW, "source");
+      constructor.addParameter(VIEWSOURCE, "source");
     } else {
       constructor.addParameter(CONTEXT, "context");
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 2f468d8c..e3ea9e0f 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,30 +1,5 @@
 package butterknife.compiler;
 
-import butterknife.BindArray;
-import butterknife.BindBitmap;
-import butterknife.BindBool;
-import butterknife.BindColor;
-import butterknife.BindDimen;
-import butterknife.BindDrawable;
-import butterknife.BindFloat;
-import butterknife.BindInt;
-import butterknife.BindString;
-import butterknife.BindView;
-import butterknife.BindViews;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import butterknife.Optional;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
 import com.squareup.javapoet.ClassName;
@@ -35,6 +10,7 @@
 import com.sun.tools.javac.code.Symbol;
 import com.sun.tools.javac.tree.JCTree;
 import com.sun.tools.javac.tree.TreeScanner;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -52,11 +28,13 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.Processor;
 import javax.annotation.processing.RoundEnvironment;
+import javax.annotation.processing.SupportedSourceVersion;
 import javax.lang.model.SourceVersion;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
@@ -74,12 +52,38 @@
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
 
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindFloat;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
-
+@SupportedSourceVersion(SourceVersion.RELEASE_8)
 @AutoService(Processor.class)
 public final class ButterKnifeProcessor extends AbstractProcessor {
   // TODO remove when http://b.android.com/187527 is released.
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
index fa37f062..8ae6b9f8 100644
--- a/butterknife-gradle-plugin/build.gradle
+++ b/butterknife-gradle-plugin/build.gradle
@@ -23,5 +23,3 @@ dependencies {
   testCompile deps.supportAnnotations
   testCompile deps.compiletesting
 }
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index 79584af3..3a23a38e 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -35,8 +35,8 @@ android {
 }
 
 dependencies {
-  compile project(':butterknife')
-  annotationProcessor project(':butterknife-compiler')
+  compile project(':butterknife:butterknife')
+  annotationProcessor project(':butterknife:butterknife-compiler')
 
   testCompile deps.junit
   testCompile deps.truth
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 06fc3869..77cb7155 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -1,5 +1,5 @@
 apply plugin: 'com.android.library'
-apply plugin: 'com.kageiit.lintrules'
+//apply plugin: 'com.kageiit.lintrules'
 
 android {
   compileSdkVersion rootProject.ext.compileSdkVersion
@@ -20,11 +20,11 @@ android {
 }
 
 dependencies {
-  compile project(':butterknife-annotations')
+  compile project(':butterknife:butterknife-annotations')
   compile deps.supportAnnotations
   compile deps.supportCompat
 
-  lintRules project(':butterknife-lint')
+//  lintRules project(':butterknife:butterknife-lint')
 
   androidTestCompile deps.junit
   androidTestCompile deps.truth
@@ -35,7 +35,7 @@ dependencies {
   testCompile deps.compiletesting
   testCompile files(getRuntimeJar())
   testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
-  testCompile project(':butterknife-compiler')
+  testCompile project(':butterknife:butterknife-compiler')
 }
 
 def getRuntimeJar() {
@@ -51,5 +51,3 @@ def getRuntimeJar() {
     throw new RuntimeException(e);
   }
 }
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
index af44c804..2fe37a93 100644
--- a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
+++ b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -35,7 +35,7 @@
     Context context = InstrumentationRegistry.getContext();
     View view = new View(context);
     try {
-      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      Utils.findRequiredView(new Utils.ViewWrapper(view), android.R.id.button1, "yo mama");
       fail();
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view 'button1' with ID "
@@ -48,7 +48,7 @@
     Context context = InstrumentationRegistry.getContext();
     View view = new EditModeView(context);
     try {
-      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      Utils.findRequiredView(new Utils.ViewWrapper(view), android.R.id.button1, "yo mama");
       fail();
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view '<unavailable while editing>' "
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index aa2db57c..48fe0519 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -20,6 +20,8 @@
 import java.util.List;
 import java.util.Map;
 
+import butterknife.internal.Utils;
+
 /**
  * Field and method binding for Android views. Use this class to simplify finding views and
  * attaching listeners by binding them with annotations.
@@ -121,7 +123,7 @@ public static void setDebug(boolean debug) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Activity target) {
     View sourceView = target.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return createBinding(target, new Utils.ViewWrapper(sourceView));
   }
 
   /**
@@ -132,7 +134,7 @@ public static Unbinder bind(@NonNull Activity target) {
    */
   @NonNull @UiThread
   public static Unbinder bind(@NonNull View target) {
-    return createBinding(target, target);
+    return createBinding(target, new Utils.ViewWrapper(target));
   }
 
   /**
@@ -144,7 +146,7 @@ public static Unbinder bind(@NonNull View target) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Dialog target) {
     View sourceView = target.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return createBinding(target, new Utils.ViewWrapper(sourceView));
   }
 
   /**
@@ -157,7 +159,7 @@ public static Unbinder bind(@NonNull Dialog target) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
     View sourceView = source.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return createBinding(target, new Utils.ViewWrapper(sourceView));
   }
 
   /**
@@ -169,7 +171,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
    */
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Object target, @NonNull View source) {
-    return createBinding(target, source);
+    return createBinding(target, new Utils.ViewWrapper(source));
   }
 
   /**
@@ -182,10 +184,22 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
     View sourceView = source.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return createBinding(target, new Utils.ViewWrapper(sourceView));
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
+   * {@link ViewSource} as the view root.
+   *
+   * @param target Target class for view binding.
+   * @param source View source.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull ViewSource source) {
+    return createBinding(target, source);
   }
 
-  private static Unbinder createBinding(@NonNull Object target, @NonNull View source) {
+  private static Unbinder createBinding(@NonNull Object target, @NonNull ViewSource source) {
     Class<?> targetClass = target.getClass();
     if (debug) Log.d(TAG, "Looking up binding for " + targetClass.getName());
     Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);
@@ -228,7 +242,7 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
     try {
       Class<?> bindingClass = Class.forName(clsName + "_ViewBinding");
       //noinspection unchecked
-      bindingCtor = (Constructor<? extends Unbinder>) bindingClass.getConstructor(cls, View.class);
+      bindingCtor = (Constructor<? extends Unbinder>) bindingClass.getConstructor(cls, ViewSource.class);
       if (debug) Log.d(TAG, "HIT: Loaded binding class and constructor.");
     } catch (ClassNotFoundException e) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
diff --git a/butterknife/src/main/java/butterknife/ViewSource.java b/butterknife/src/main/java/butterknife/ViewSource.java
new file mode 100644
index 00000000..74bd385d
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/ViewSource.java
@@ -0,0 +1,16 @@
+package butterknife;
+
+import android.content.Context;
+import android.view.View;
+
+/**
+ * @author Ornithopter on 2017/1/7.
+ */
+
+public interface ViewSource {
+    View findViewById(int id);
+
+    boolean isInEditMode();
+
+    Context getContext();
+}
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index 52b2fc23..dfd3d101 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -12,9 +12,12 @@
 import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.TypedValue;
 import android.view.View;
+
 import java.lang.reflect.Array;
 import java.util.List;
 
+import butterknife.ViewSource;
+
 @SuppressWarnings("WeakerAccess") // Used by generated code.
 public final class Utils {
   private static final TypedValue VALUE = new TypedValue();
@@ -77,13 +80,13 @@ public static float getFloat(Context context, @DimenRes int id) {
     return newViews;
   }
 
-  public static <T> T findOptionalViewAsType(View source, @IdRes int id, String who,
-      Class<T> cls) {
+  public static <T> T findOptionalViewAsType(ViewSource source, @IdRes int id, String who,
+                                             Class<T> cls) {
     View view = source.findViewById(id);
     return castView(view, id, who, cls);
   }
 
-  public static View findRequiredView(View source, @IdRes int id, String who) {
+  public static View findRequiredView(ViewSource source, @IdRes int id, String who) {
     View view = source.findViewById(id);
     if (view != null) {
       return view;
@@ -99,7 +102,7 @@ public static View findRequiredView(View source, @IdRes int id, String who) {
         + " (methods) annotation.");
   }
 
-  public static <T> T findRequiredViewAsType(View source, @IdRes int id, String who,
+  public static <T> T findRequiredViewAsType(ViewSource source, @IdRes int id, String who,
       Class<T> cls) {
     View view = findRequiredView(source, id, who);
     return castView(view, id, who, cls);
@@ -109,7 +112,7 @@ public static View findRequiredView(View source, @IdRes int id, String who) {
     try {
       return cls.cast(view);
     } catch (ClassCastException e) {
-      String name = getResourceEntryName(view, id);
+      String name = getResourceEntryName(new ViewWrapper(view), id);
       throw new IllegalStateException("View '"
           + name
           + "' with ID "
@@ -137,13 +140,36 @@ public static View findRequiredView(View source, @IdRes int id, String who) {
     }
   }
 
-  private static String getResourceEntryName(View view, @IdRes int id) {
+  private static String getResourceEntryName(ViewSource view, @IdRes int id) {
     if (view.isInEditMode()) {
       return "<unavailable while editing>";
     }
     return view.getContext().getResources().getResourceEntryName(id);
   }
 
+  public static class ViewWrapper implements ViewSource {
+    private final View view;
+
+    public ViewWrapper(View view) {
+      this.view = view;
+    }
+
+    @Override
+    public View findViewById(int id) {
+      return view.findViewById(id);
+    }
+
+    @Override
+    public boolean isInEditMode() {
+      return view.isInEditMode();
+    }
+
+    @Override
+    public Context getContext() {
+      return view.getContext();
+    }
+  }
+
   private Utils() {
     throw new AssertionError("No instances.");
   }
