diff --git a/butterknife-annotations/src/main/java/butterknife/Bind.java b/butterknife-annotations/src/main/java/butterknife/Bind.java
index 682cf201..ced6b472 100644
--- a/butterknife-annotations/src/main/java/butterknife/Bind.java
+++ b/butterknife-annotations/src/main/java/butterknife/Bind.java
@@ -12,10 +12,9 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}BindView(R.id.title) TextView title;
+ * {@literal @}Bind(R.id.title) TextView title;
  * </code></pre>
  */
-@Deprecated
 @Retention(CLASS) @Target(FIELD)
 public @interface Bind {
   /** View ID to which the field will be bound. */
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index b8f2d2af..ac2cce60 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -38,6 +38,6 @@
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
-  String[] required() default {""};
-  String[] key() default {""};
+  String[] required() default {};
+  String key() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index d69fd20b..50072e1e 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -43,6 +43,6 @@
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
-  String[] required() default {""};
-  String[] key() default {""};
+  String[] required() default {};
+  String key() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index 672a2123..eb40822c 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -47,6 +47,6 @@
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
-  String[] required() default {""};
-  String[] key() default {""};
+  String[] required() default {};
+  String key() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 0af43f54..e5e19a4c 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -42,6 +42,6 @@
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
-  String[] required() default {""};
-  String[] key() default {""};
+  String[] required() default {};
+  String key() default "";
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 02d69fba..d09f067d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -1,8 +1,5 @@
 package butterknife.compiler;
 
-import butterknife.OnTouch;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import com.google.common.collect.ImmutableList;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
@@ -13,6 +10,7 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.WildcardTypeName;
+
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -22,10 +20,16 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.regex.Pattern;
+
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
+import butterknife.OnTouch;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;
 import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
@@ -52,6 +56,7 @@
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
+  private static final ClassName VIEW_CONTROLLER = ClassName.get("butterknife", "ViewController");
 
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
@@ -444,12 +449,36 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
 
         boolean hasReturnType = !"void".equals(method.returnType());
         CodeBlock.Builder builder = CodeBlock.builder();
-        if (hasReturnType) {
-          builder.add("return ");
-        }
 
         if (methodBindings.containsKey(method)) {
           for (MethodViewBinding methodBinding : methodBindings.get(method)) {
+            String[] conditions = methodBinding.getConditions();
+            String key = methodBinding.getKey();
+            if ((null != conditions && conditions.length > 0) || (null != key && !"".equals(key))) {
+              builder.beginControlFlow("if (!$T.class.isInstance(target))",
+                      VIEW_CONTROLLER)
+                      .addStatement("throw new RuntimeException("
+                              + "\"Target must be implements from $T\")", VIEW_CONTROLLER)
+                      .endControlFlow();
+              if (null != conditions && conditions.length > 0) {
+                for (String condition : conditions) {
+                  if (checkJavaSymbol(condition)) {
+                    builder.beginControlFlow("if (!target.condition())");
+                    if (hasReturnType) {
+                      builder.addStatement("return $L", method.defaultReturn());
+                    } else {
+                      builder.addStatement("return");
+                    }
+                    builder.endControlFlow();
+                  } else {
+                  /*throw new RuntimeException("Condition\" "
+                          + condition + "\" must be a valid java symbol");*/
+                  }
+                }
+              }
+              builder.addStatement("target.postAction(p0, $S, $S, $S)",
+                      targetTypeName, methodBinding.getName(), key);
+            }
             builder.add("target.$L(", methodBinding.getName());
             List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -470,8 +499,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
             }
             builder.add(");\n");
           }
-        } else if (hasReturnType) {
-          builder.add("$L;\n", method.defaultReturn());
+        }
+        if (hasReturnType) {
+          builder.addStatement("return $L", method.defaultReturn());
         }
         callbackMethod.addCode(builder.build());
         callback.addMethod(callbackMethod.build());
@@ -758,4 +788,15 @@ BindingSet build() {
           parentBinding);
     }
   }
+
+  private static boolean checkJavaSymbol(String... symbols) {
+    Pattern pattern = Pattern.compile("^[A-Za-z_$]+[A-Za-z_$\\d]+$");
+    for (String symbol : symbols) {
+      if (!pattern.matcher(symbol).find()) {
+        return false;
+      }
+    }
+    return true;
+  }
+
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index a8e62b0b..9ebae3f3 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1012,6 +1012,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
 
     // Assemble information on the method.
     Annotation annotation = element.getAnnotation(annotationClass);
+
+    // TODO getId
     Method annotationValue = annotationClass.getDeclaredMethod("value");
     if (annotationValue.getReturnType() != int[].class) {
       throw new IllegalStateException(
@@ -1034,6 +1036,20 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       hasError = true;
     }
 
+    // TODO getRequired
+    String[] conditions = null;
+    Method annotationRequired = annotationClass.getDeclaredMethod("required");
+    if (annotationRequired.getReturnType() == String[].class) {
+      conditions = (String[]) annotationRequired.invoke(annotation);
+    }
+
+    // TODO getKey
+    String key = null;
+    Method annotationKey = annotationClass.getDeclaredMethod("key");
+    if (annotationKey.getReturnType() == String.class) {
+      key = (String) annotationKey.invoke(annotation);
+    }
+
     ListenerClass listener = annotationClass.getAnnotation(ListenerClass.class);
     if (listener == null) {
       throw new IllegalStateException(
@@ -1174,7 +1190,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       }
     }
 
-    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
+    MethodViewBinding binding = new MethodViewBinding(name,
+            Arrays.asList(parameters), conditions, key, required);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
       QualifiedId qualifiedId = elementToQualifiedId(element, id);
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index e4d1c4b7..58f6c00d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -8,11 +8,24 @@
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
+  private final String[] conditions;
+  private final String key;
 
   MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
+    this.conditions = null;
+    this.key = null;
+  }
+
+  MethodViewBinding(String name, List<Parameter> parameters,
+                    String[] conditions, String key, boolean required) {
+    this.name = name;
+    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
+    this.required = required;
+    this.conditions = conditions;
+    this.key = key;
   }
 
   public String getName() {
@@ -23,6 +36,14 @@ public String getName() {
     return parameters;
   }
 
+  public String[] getConditions() {
+    return conditions;
+  }
+
+  public String getKey() {
+    return key;
+  }
+
   @Override public String getDescription() {
     return "method '" + name + "'";
   }
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
new file mode 100644
index 00000000..fa2eed7d
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
@@ -0,0 +1,14 @@
+package com.example.butterknife.library;
+
+/**
+ * Conditions for ViewController
+ *
+ *
+ * Created by LeoTesla on 2017/7/15.
+ */
+
+public interface Condition {
+
+    boolean condition();
+
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 7097639f..c2518cd6 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -9,6 +9,8 @@
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
+
+import butterknife.Bind;
 import butterknife.BindString;
 import butterknife.BindView;
 import butterknife.BindViews;
@@ -16,13 +18,15 @@
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
+import butterknife.ViewController;
+
 import com.example.butterknife.R;
 
 import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
-public class SimpleActivity extends Activity {
+public class SimpleActivity extends Activity implements ViewController, Condition {
   private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
     @Override public void apply(@NonNull View view, int index) {
       AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
@@ -33,7 +37,7 @@
     }
   };
 
-  @BindView(R.id.title) TextView title;
+  @Bind(R.id.title) TextView title;
   @BindView(R.id.subtitle) TextView subtitle;
   @BindView(R.id.hello) Button hello;
   @BindView(R.id.list_of_things) ListView listOfThings;
@@ -47,8 +51,8 @@
 
   private SimpleAdapter adapter;
 
-  @OnClick(R.id.hello) void sayHello() {
-    Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
+  @OnClick(value = {R.id.hello}, required = {"condition"}, key = "hello") void sayHello() {
+    // Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
@@ -64,7 +68,7 @@
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.bind(this);
+    ButterKnife.bindController(this);
 
     // Contrived code to use the bound fields.
     title.setText(butterKnife);
@@ -75,4 +79,22 @@
     adapter = new SimpleAdapter(this);
     listOfThings.setAdapter(adapter);
   }
+
+  @Override
+  public void postAction(View view, String clazz, String method, String key) {
+    Toast.makeText(this, clazz + "." + method + ": " + key, LENGTH_SHORT).show();
+  }
+
+  @NonNull
+  @Override
+  public View getView() {
+    return getWindow().getDecorView();
+  }
+
+  @Override
+  public boolean condition() {
+    Toast.makeText(this, "Click to test condition", LENGTH_SHORT).show();
+    return true;
+  }
+
 }
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 98c692a6..ac5bc1de 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -14,6 +14,7 @@
 import android.util.Log;
 import android.util.Property;
 import android.view.View;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedHashMap;
@@ -112,6 +113,17 @@ public static void setDebug(boolean debug) {
     ButterKnife.debug = debug;
   }
 
+  /**
+   * BindView annotated fields and methods in the specified {@link Activity}. The current content
+   * view is used as the view root.
+   *
+   * @param target Target activity for view binding.
+   */
+  @NonNull @UiThread
+  public static Unbinder bindController(@NonNull ViewController target) {
+    return createBinding(target, target.getView());
+  }
+
   /**
    * BindView annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
diff --git a/butterknife/src/main/java/butterknife/ViewController.java b/butterknife/src/main/java/butterknife/ViewController.java
new file mode 100644
index 00000000..6a6a31fc
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/ViewController.java
@@ -0,0 +1,30 @@
+package butterknife;
+
+import android.support.annotation.NonNull;
+import android.view.View;
+
+/**
+ * the target interface on bind Onclick
+ *
+ * @version 1.0
+ *
+ * Created by TeslaLiu on 2017/7/15.
+ */
+public interface ViewController {
+
+    /**
+     * post Action
+     * @param view      View
+     * @param clazz     target class
+     * @param method    click method
+     * @param key       key of annotation param
+     */
+    void postAction(View view, String clazz, String method, String key);
+
+    /**
+     * return the view to bind
+     */
+    @NonNull
+    View getView();
+
+}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 3cf004a6..31b499e5 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -12,9 +12,16 @@
   @Test public void onClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
+        + "import butterknife.ViewController;\n"
+        + "public class Test implements ViewController {\n"
+        + "  @OnClick(value = {1}, required = {\"condition\"}, key = \"Key\") void doStuff() {}\n"
+
+            + "public boolean condition() {return true;}\n"
+            + "@Override public void postAction(View view, String clazz, String method, String key) {}\n"
+            + "@Override public View getView() {return null;}\n"
+
         + "}"
     );
 
@@ -24,6 +31,7 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
+        + "import butterknife.ViewController;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -40,6 +48,13 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
+        + "        if (!ViewController.class.isInstance(target)) {\n"
+        + "          throw new RuntimeException(\"Target must be implements from ViewController\");\n"
+        + "        }\n"
+        + "        if (!target.condition()) {\n"
+        + "          return;\n"
+        + "        }\n"
+        + "        target.postAction(p0, \"test.Test\", \"doStuff\", \"Key\");\n"
         + "        target.doStuff();\n"
         + "      }\n"
         + "    });\n"
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index a141f8c7..eea80479 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -31,7 +31,7 @@
   };
 
   @BindView(R2.id.title) TextView title;
-  @Bind(R2.id.subtitle) TextView subtitle;
+  // @Bind(R2.id.subtitle) TextView subtitle;
   @BindView(R2.id.hello) Button hello;
   @BindView(R2.id.list_of_things) ListView listOfThings;
   @BindView(R2.id.footer) TextView footer;
@@ -61,7 +61,7 @@
 
     // Contrived code to use the bound fields.
     title.setText("Butter Knife");
-    subtitle.setText("Field and method binding for Android views.");
+    // subtitle.setText("Field and method binding for Android views.");
     footer.setText("by Jake Wharton");
     hello.setText("Say Hello");
 
