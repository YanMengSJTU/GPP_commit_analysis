diff --git a/butterfork-compiler/build.gradle b/butterfork-compiler/build.gradle
index 2d5e7ae4..6e086c0d 100644
--- a/butterfork-compiler/build.gradle
+++ b/butterfork-compiler/build.gradle
@@ -11,5 +11,6 @@ dependencies {
 
     testCompile group: 'com.google.testing.compile', name: 'compile-testing', version: '0.6'
     testCompile group: 'junit', name: 'junit', version: '4.12'
+    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
     testCompile files(Jvm.current().getToolsJar())
 }
\ No newline at end of file
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java b/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
index 9fdabbf8..08928985 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
@@ -2,7 +2,6 @@
 
 import android.content.res.Resources;
 import android.graphics.BitmapFactory;
-import android.view.View;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -24,6 +23,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import javax.lang.model.element.TypeElement;
+
 import static butterfork.internal.ButterKnifeProcessor.VIEW_TYPE;
 import static java.util.Collections.singletonList;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -34,34 +35,36 @@
   private static final ClassName VIEW_BINDER =
       ClassName.get("butterfork", "ButterKnife", "ViewBinder");
 
-  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();
-  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();
+  private final Map<String, ViewBindings> viewIdMap = new LinkedHashMap<>();
+  private final Map<FieldCollectionViewBinding, String[]> collectionBindings = new LinkedHashMap<>();
   private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
   private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
   private final String classPackage;
   private final String className;
   private final String targetClass;
+  private final ClassName resClass;
   private String parentViewBinder;
 
-  BindingClass(String classPackage, String className, String targetClass) {
+  BindingClass(String classPackage, String className, String targetClass, TypeElement resType) {
     this.classPackage = classPackage;
     this.className = className;
     this.targetClass = targetClass;
+    this.resClass = ClassName.get(resType);
   }
 
   void addBitmap(FieldBitmapBinding binding) {
     bitmapBindings.add(binding);
   }
 
-  void addField(int id, FieldViewBinding binding) {
+  void addField(String id, FieldViewBinding binding) {
     getOrCreateViewBindings(id).addFieldBinding(binding);
   }
 
-  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
+  void addFieldCollection(String[] ids, FieldCollectionViewBinding binding) {
     collectionBindings.put(binding, ids);
   }
 
-  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
+  boolean addMethod(String id, ListenerClass listener, ListenerMethod method,
       MethodViewBinding binding) {
     ViewBindings viewBindings = getOrCreateViewBindings(id);
     if (viewBindings.hasMethodBinding(listener, method)
@@ -80,11 +83,11 @@ void setParentViewBinder(String parentViewBinder) {
     this.parentViewBinder = parentViewBinder;
   }
 
-  ViewBindings getViewBinding(int id) {
+  ViewBindings getViewBinding(String id) {
     return viewIdMap.get(id);
   }
 
-  private ViewBindings getOrCreateViewBindings(int id) {
+  private ViewBindings getOrCreateViewBindings(String id) {
     ViewBindings viewId = viewIdMap.get(id);
     if (viewId == null) {
       viewId = new ViewBindings(id);
@@ -128,7 +131,7 @@ private MethodSpec createBindMethod() {
 
     if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
       // Local variable in which all views will be temporarily stored.
-      result.addStatement("$T view", View.class);
+      result.addStatement("$T view", ClassName.get("android.view", "View"));
 
       // Loop over each view bindings and emit it.
       for (ViewBindings bindings : viewIdMap.values()) {
@@ -136,7 +139,7 @@ private MethodSpec createBindMethod() {
       }
 
       // Loop over each collection binding and emit it.
-      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
+      for (Map.Entry<FieldCollectionViewBinding, String[]> entry : collectionBindings.entrySet()) {
         emitCollectionBinding(result, entry.getKey(), entry.getValue());
       }
     }
@@ -146,15 +149,15 @@ private MethodSpec createBindMethod() {
 
       if (!bitmapBindings.isEmpty()) {
         for (FieldBitmapBinding binding : bitmapBindings) {
-          result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),
-              BitmapFactory.class, binding.getId());
+          result.addStatement("target.$L = $T.decodeResource(res, $T.drawable.$L)",
+              binding.getName(), BitmapFactory.class, resClass, binding.getId());
         }
       }
 
       if (!resourceBindings.isEmpty()) {
         for (FieldResourceBinding binding : resourceBindings) {
-          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
-              binding.getId());
+          result.addStatement("target.$L = res.$L($T.$L.$L)", binding.getName(),
+              binding.getMethod(), resClass, binding.getType(), binding.getId());
         }
       }
     }
@@ -163,7 +166,7 @@ private MethodSpec createBindMethod() {
   }
 
   private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,
-      int[] ids) {
+      String[] ids) {
     String ofName;
     switch (binding.getKind()) {
       case ARRAY:
@@ -182,8 +185,8 @@ private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionVie
         builder.add(", ");
       }
       String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
-      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],
-          asHumanDescription(singletonList(binding)));
+      builder.add("\nfinder.<$T>$L(source, $T.id.$L, $S)", binding.getType(), findMethod,
+          resClass, ids[i], asHumanDescription(singletonList(binding)));
     }
 
     result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,
@@ -193,13 +196,14 @@ private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionVie
   private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
     List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
     if (requiredViewBindings.isEmpty()) {
-      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());
+      result.addStatement("view = finder.findOptionalView(source, $T.id.$L, null)",
+          resClass, bindings.getId());
     } else {
-      if (bindings.getId() == View.NO_ID) {
-        result.addStatement("view = target", bindings.getId());
+      if (bindings.getId().isEmpty()) {
+        result.addStatement("view = target");
       } else {
-        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),
-            asHumanDescription(requiredViewBindings));
+        result.addStatement("view = finder.findRequiredView(source, $T.id.$L, $S)",
+            resClass, bindings.getId(), asHumanDescription(requiredViewBindings));
       }
     }
 
@@ -211,8 +215,8 @@ private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings)
     Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
     for (FieldViewBinding fieldBinding : fieldBindings) {
       if (fieldBinding.requiresCast()) {
-        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
-            bindings.getId(), asHumanDescription(fieldBindings));
+        result.addStatement("target.$L = finder.castView(view, $T.id.$L, $S)", fieldBinding.getName(),
+            resClass, bindings.getId(), asHumanDescription(fieldBindings));
       } else {
         result.addStatement("target.$L = view", fieldBinding.getName());
       }
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/ButterKnifeProcessor.java b/butterfork-compiler/src/main/java/butterfork/internal/ButterKnifeProcessor.java
index 3364f55a..5065e546 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/ButterKnifeProcessor.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/ButterKnifeProcessor.java
@@ -1,7 +1,5 @@
 package butterfork.internal;
 
-import android.view.View;
-
 import com.google.auto.service.AutoService;
 import com.squareup.javapoet.TypeName;
 
@@ -34,6 +32,7 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.MirroredTypeException;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
@@ -48,6 +47,7 @@
 import butterfork.BindDimen;
 import butterfork.BindDrawable;
 import butterfork.BindInt;
+import butterfork.BindResources;
 import butterfork.BindString;
 import butterfork.OnCheckedChanged;
 import butterfork.OnClick;
@@ -108,6 +108,7 @@
   @Override public Set<String> getSupportedAnnotationTypes() {
     Set<String> types = new LinkedHashSet<>();
 
+    types.add(BindResources.class.getCanonicalName());
     types.add(Bind.class.getCanonicalName());
 
     for (Class<? extends Annotation> listener : LISTENERS) {
@@ -148,6 +149,15 @@
     Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
     Set<String> erasedTargetNames = new LinkedHashSet<>();
 
+    // Process each @BindResources element. Must be done first.
+    for (Element element : env.getElementsAnnotatedWith(BindResources.class)) {
+      try {
+        parseBindResources(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindResources.class, e);
+      }
+    }
+
     // Process each @Bind element.
     for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
       try {
@@ -304,6 +314,28 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
+  private void parseBindResources(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+
+    if (element.getKind() != CLASS) {
+      error(element, "Only classes can be annotated with @%s",
+          BindResources.class.getSimpleName());
+      return;
+    }
+
+    TypeElement resClass = null;
+
+    try {
+      element.getAnnotation(BindResources.class).value();
+    } catch (MirroredTypeException exception) {
+      resClass = (TypeElement) typeUtils.asElement(exception.getTypeMirror());
+    }
+
+    createTargetClass(targetClassMap, (TypeElement) element, resClass);
+
+    erasedTargetNames.add(element.toString());
+  }
+
   private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     // Verify common generated code restrictions.
@@ -344,7 +376,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
     }
 
     // Assemble information on the field.
-    int[] ids = element.getAnnotation(Bind.class).value();
+    String[] ids = element.getAnnotation(Bind.class).value();
     if (ids.length != 1) {
       error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
           Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
@@ -356,7 +388,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
       return;
     }
 
-    int id = ids[0];
+    String id = ids[0];
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
       ViewBindings viewBindings = bindingClass.getViewBinding(id);
@@ -364,14 +396,14 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
         Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
         if (iterator.hasNext()) {
           FieldViewBinding existingBinding = iterator.next();
-          error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+          error(element, "Attempt to use @%s for an already bound ID %s on '%s'. (%s.%s)",
               Bind.class.getSimpleName(), id, existingBinding.getName(),
               enclosingElement.getQualifiedName(), element.getSimpleName());
           return;
         }
       }
     } else {
-      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+      bindingClass = targetClassMap.get(enclosingElement);
     }
 
     String name = element.getSimpleName().toString();
@@ -432,16 +464,16 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(Bind.class).value();
+    String[] ids = element.getAnnotation(Bind.class).value();
     if (ids.length == 0) {
       error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
       return;
     }
 
-    Integer duplicateId = findDuplicate(ids);
+    String duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
-      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
+      error(element, "@%s annotation contains duplicate ID %s. (%s.%s)", Bind.class.getSimpleName(),
           duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
     }
 
@@ -449,7 +481,7 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
     TypeName type = TypeName.get(viewType);
     boolean required = isRequiredBinding(element);
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
     FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
     bindingClass.addFieldCollection(ids, binding);
 
@@ -479,10 +511,10 @@ private void parseResourceBool(Element element, Map<TypeElement, BindingClass> t
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindBool.class).value();
+    String id = element.getAnnotation(BindBool.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean");
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean", "bool");
     bindingClass.addResource(binding);
 
     erasedTargetNames.add(enclosingElement.toString());
@@ -515,11 +547,11 @@ private void parseResourceColor(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindColor.class).value();
+    String id = element.getAnnotation(BindColor.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
-        isColorStateList ? "getColorStateList" : "getColor");
+        isColorStateList ? "getColorStateList" : "getColor", "color");
     bindingClass.addResource(binding);
 
     erasedTargetNames.add(enclosingElement.toString());
@@ -552,11 +584,11 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindDimen.class).value();
+    String id = element.getAnnotation(BindDimen.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
-        isInt ? "getDimensionPixelSize" : "getDimension");
+        isInt ? "getDimensionPixelSize" : "getDimension", "dimen");
     bindingClass.addResource(binding);
 
     erasedTargetNames.add(enclosingElement.toString());
@@ -585,9 +617,9 @@ private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindBitmap.class).value();
+    String id = element.getAnnotation(BindBitmap.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
     FieldBitmapBinding binding = new FieldBitmapBinding(id, name);
     bindingClass.addBitmap(binding);
 
@@ -617,10 +649,10 @@ private void parseResourceDrawable(Element element, Map<TypeElement, BindingClas
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindDrawable.class).value();
+    String id = element.getAnnotation(BindDrawable.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable");
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable", "drawable");
     bindingClass.addResource(binding);
 
     erasedTargetNames.add(enclosingElement.toString());
@@ -648,10 +680,10 @@ private void parseResourceInt(Element element, Map<TypeElement, BindingClass> ta
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindInt.class).value();
+    String id = element.getAnnotation(BindInt.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger");
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger", "int");
     bindingClass.addResource(binding);
 
     erasedTargetNames.add(enclosingElement.toString());
@@ -680,10 +712,10 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindString.class).value();
+    String id = element.getAnnotation(BindString.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString");
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString", "string");
     bindingClass.addResource(binding);
 
     erasedTargetNames.add(enclosingElement.toString());
@@ -714,10 +746,10 @@ private void parseResourceArray(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindArray.class).value();
+    String id = element.getAnnotation(BindArray.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName);
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName, "array");
     bindingClass.addResource(binding);
 
     erasedTargetNames.add(enclosingElement.toString());
@@ -747,10 +779,10 @@ private static String getArrayResourceMethodName(Element element) {
   }
 
   /** Returns the first duplicate element inside an array, null if there are no duplicates. */
-  private static Integer findDuplicate(int[] array) {
-    Set<Integer> seenElements = new LinkedHashSet<>();
+  private static String findDuplicate(String[] array) {
+    Set<String> seenElements = new LinkedHashSet<>();
 
-    for (int element : array) {
+    for (String element : array) {
       if (!seenElements.add(element)) {
         return element;
       }
@@ -800,12 +832,12 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     // Assemble information on the method.
     Annotation annotation = element.getAnnotation(annotationClass);
     Method annotationValue = annotationClass.getDeclaredMethod("value");
-    if (annotationValue.getReturnType() != int[].class) {
+    if (annotationValue.getReturnType() != String[].class) {
       throw new IllegalStateException(
-          String.format("@%s annotation value() type not int[].", annotationClass));
+          String.format("@%s annotation value() type not String[].", annotationClass));
     }
 
-    int[] ids = (int[]) annotationValue.invoke(annotation);
+    String[] ids = (String[]) annotationValue.invoke(annotation);
     String name = executableElement.getSimpleName().toString();
     boolean required = isRequiredBinding(element);
 
@@ -813,9 +845,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
     hasError |= isBindingInWrongPackage(annotationClass, element);
 
-    Integer duplicateId = findDuplicate(ids);
+    String duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
-      error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
+      error(element, "@%s annotation for method contains duplicate ID %s. (%s.%s)",
           annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
           element.getSimpleName());
       hasError = true;
@@ -828,8 +860,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
               annotationClass.getSimpleName()));
     }
 
-    for (int id : ids) {
-      if (id == View.NO_ID) {
+    for (String id : ids) {
+      if (id.isEmpty()) {
         if (ids.length == 1) {
           if (!required) {
             error(element, "ID-free binding must not be annotated with @Nullable. (%s.%s)",
@@ -848,7 +880,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
             hasError = true;
           }
         } else {
-          error(element, "@%s annotation contains invalid ID %d. (%s.%s)",
+          error(element, "@%s annotation contains invalid ID %s. (%s.%s)",
               annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
               element.getSimpleName());
           hasError = true;
@@ -971,10 +1003,10 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    for (int id : ids) {
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    for (String id : ids) {
       if (!bindingClass.addMethod(id, listener, method, binding)) {
-        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
+        error(element, "Multiple listener methods with return value specified for ID %s. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
       }
@@ -1029,15 +1061,15 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     return false;
   }
 
-  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
-      TypeElement enclosingElement) {
+  private BindingClass createTargetClass(Map<TypeElement, BindingClass> targetClassMap,
+      TypeElement enclosingElement, TypeElement resClass) {
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass == null) {
       String targetType = enclosingElement.getQualifiedName().toString();
       String classPackage = getPackageName(enclosingElement);
       String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
 
-      bindingClass = new BindingClass(classPackage, className, targetType);
+      bindingClass = new BindingClass(classPackage, className, targetType, resClass);
       targetClassMap.put(enclosingElement, bindingClass);
     }
     return bindingClass;
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/FieldBitmapBinding.java b/butterfork-compiler/src/main/java/butterfork/internal/FieldBitmapBinding.java
index 5f3908a3..52859f94 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/FieldBitmapBinding.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/FieldBitmapBinding.java
@@ -1,15 +1,15 @@
 package butterfork.internal;
 
 final class FieldBitmapBinding {
-  private final int id;
+  private final String id;
   private final String name;
 
-  FieldBitmapBinding(int id, String name) {
+  FieldBitmapBinding(String id, String name) {
     this.id = id;
     this.name = name;
   }
 
-  public int getId() {
+  public String getId() {
     return id;
   }
 
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/FieldResourceBinding.java b/butterfork-compiler/src/main/java/butterfork/internal/FieldResourceBinding.java
index f932584e..a4b2f9c0 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/FieldResourceBinding.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/FieldResourceBinding.java
@@ -1,17 +1,19 @@
 package butterfork.internal;
 
 final class FieldResourceBinding {
-  private final int id;
+  private final String id;
   private final String name;
   private final String method;
+  private final String type;
 
-  FieldResourceBinding(int id, String name, String method) {
+  FieldResourceBinding(String id, String name, String method, String type) {
     this.id = id;
     this.name = name;
     this.method = method;
+    this.type = type;
   }
 
-  public int getId() {
+  public String getId() {
     return id;
   }
 
@@ -22,4 +24,8 @@ public String getName() {
   public String getMethod() {
     return method;
   }
+
+  public String getType() {
+    return type;
+  }
 }
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/ViewBindings.java b/butterfork-compiler/src/main/java/butterfork/internal/ViewBindings.java
index bdfd2f3e..c4f7386b 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/ViewBindings.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/ViewBindings.java
@@ -9,16 +9,16 @@
 import java.util.Set;
 
 final class ViewBindings {
-  private final int id;
+  private final String id;
   private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();
   private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
       methodBindings = new LinkedHashMap<>();
 
-  ViewBindings(int id) {
+  ViewBindings(String id) {
     this.id = id;
   }
 
-  public int getId() {
+  public String getId() {
     return id;
   }
 
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/ViewBindingClassTest.java b/butterfork-compiler/src/test/java/butterfork/internal/ViewBindingClassTest.java
index d7f26280..338608ab 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/ViewBindingClassTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/ViewBindingClassTest.java
@@ -4,7 +4,7 @@
 
 import static butterfork.internal.BindingClass.asHumanDescription;
 import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ViewBindingClassTest {
   @Test public void humanDescriptionJoinWorks() {
diff --git a/butterfork-sample/build.gradle b/butterfork-sample/build.gradle
index 55c9203b..d265fc60 100644
--- a/butterfork-sample/build.gradle
+++ b/butterfork-sample/build.gradle
@@ -30,7 +30,6 @@ dependencies {
     apt project(':butterfork-compiler')
 
     testCompile group: 'junit', name: 'junit', version: '4.12'
-    testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
-    testCompile group: 'com.squareup', name: 'fest-android', version: '1.0.7'
+    testCompile group: 'com.squareup.assertj', name: 'assertj-android', version: '1.1.0'
     testCompile group: 'org.robolectric', name: 'robolectric', version: '3.0'
 }
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/BaseActivity.java b/butterfork-sample/src/main/java/com/example/butterfork/BaseActivity.java
new file mode 100644
index 00000000..d88b4e1d
--- /dev/null
+++ b/butterfork-sample/src/main/java/com/example/butterfork/BaseActivity.java
@@ -0,0 +1,9 @@
+package com.example.butterfork;
+
+import android.app.Activity;
+
+import butterfork.BindResources;
+
+@BindResources(R.class)
+public class BaseActivity extends Activity {
+}
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java b/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
index de83e644..09945f11 100644
--- a/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
+++ b/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
@@ -1,6 +1,5 @@
 package com.example.butterfork;
 
-import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
@@ -19,7 +18,7 @@
 
 import static android.widget.Toast.LENGTH_SHORT;
 
-public class SimpleActivity extends Activity {
+public class SimpleActivity extends BaseActivity {
   private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
     @Override public void apply(View view, int index) {
       AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
@@ -30,28 +29,28 @@
     }
   };
 
-  @Bind(R.id.title) TextView title;
-  @Bind(R.id.subtitle) TextView subtitle;
-  @Bind(R.id.hello) Button hello;
-  @Bind(R.id.list_of_things) ListView listOfThings;
-  @Bind(R.id.footer) TextView footer;
+  @Bind("title") TextView title;
+  @Bind("subtitle") TextView subtitle;
+  @Bind("hello") Button hello;
+  @Bind("list_of_things") ListView listOfThings;
+  @Bind("footer") TextView footer;
 
-  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
+  @Bind({ "title", "subtitle", "hello" })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
 
-  @OnClick(R.id.hello) void sayHello() {
+  @OnClick("hello") void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
-  @OnLongClick(R.id.hello) boolean sayGetOffMe() {
+  @OnLongClick("hello") boolean sayGetOffMe() {
     Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
     return true;
   }
 
-  @OnItemClick(R.id.list_of_things) void onItemClick(int position) {
+  @OnItemClick("list_of_things") void onItemClick(int position) {
     Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
   }
 
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java b/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
index 3430278c..20deb69f 100644
--- a/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
+++ b/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
@@ -7,8 +7,9 @@
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 
-import butterfork.ButterKnife;
 import butterfork.Bind;
+import butterfork.BindResources;
+import butterfork.ButterKnife;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -51,10 +52,11 @@ public SimpleAdapter(Context context) {
     return view;
   }
 
+  @BindResources(R.class)
   static class ViewHolder {
-    @Bind(R.id.word) TextView word;
-    @Bind(R.id.length) TextView length;
-    @Bind(R.id.position) TextView position;
+    @Bind("word") TextView word;
+    @Bind("length") TextView length;
+    @Bind("position") TextView position;
 
     ViewHolder(View view) {
       ButterKnife.bind(this, view);
diff --git a/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java b/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java
index 18aead19..42720113 100644
--- a/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java
+++ b/butterfork-sample/src/test/java/com/example/butterfork/SimpleActivityTest.java
@@ -8,7 +8,7 @@
 
 import butterfork.ButterKnife;
 
-import static org.fest.assertions.api.ANDROID.assertThat;
+import static org.assertj.android.api.Assertions.assertThat;
 
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = "src/main/AndroidManifest.xml")
diff --git a/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java b/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java
index ff9d98f0..1372c579 100644
--- a/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java
+++ b/butterfork-sample/src/test/java/com/example/butterfork/SimpleAdapterTest.java
@@ -13,7 +13,7 @@
 import butterfork.ButterKnife;
 
 import static com.example.butterfork.SimpleAdapter.ViewHolder;
-import static org.fest.assertions.api.ANDROID.assertThat;
+import static org.assertj.android.api.Assertions.assertThat;
 
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = "src/main/AndroidManifest.xml")
diff --git a/butterfork/build.gradle b/butterfork/build.gradle
index d5ad36a2..a10f09d5 100644
--- a/butterfork/build.gradle
+++ b/butterfork/build.gradle
@@ -5,7 +5,6 @@ dependencies {
     compile group: 'com.google.android', name: 'android', version: '4.1.1.4'
 
     testCompile group: 'junit', name: 'junit', version: '4.12'
-    testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
-    testCompile group: 'com.squareup', name: 'fest-android', version: '1.0.7'
+    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
     testCompile group: 'org.robolectric', name: 'robolectric', version: '3.0'
 }
diff --git a/butterfork/src/main/java/butterfork/Bind.java b/butterfork/src/main/java/butterfork/Bind.java
index 450fa9e8..93014907 100644
--- a/butterfork/src/main/java/butterfork/Bind.java
+++ b/butterfork/src/main/java/butterfork/Bind.java
@@ -16,5 +16,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface Bind {
   /** View ID to which the field will be bound. */
-  int[] value();
+  String[] value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindArray.java b/butterfork/src/main/java/butterfork/BindArray.java
index 453869cf..f662ae0e 100644
--- a/butterfork/src/main/java/butterfork/BindArray.java
+++ b/butterfork/src/main/java/butterfork/BindArray.java
@@ -33,5 +33,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindArray {
   /** Array resource ID to which the field will be bound. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindBitmap.java b/butterfork/src/main/java/butterfork/BindBitmap.java
index b81675e9..9e779900 100644
--- a/butterfork/src/main/java/butterfork/BindBitmap.java
+++ b/butterfork/src/main/java/butterfork/BindBitmap.java
@@ -17,5 +17,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindBitmap {
   /** Drawable resource ID from which the {@link Bitmap} will be created. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindBool.java b/butterfork/src/main/java/butterfork/BindBool.java
index 558e04ff..d7fd32f8 100644
--- a/butterfork/src/main/java/butterfork/BindBool.java
+++ b/butterfork/src/main/java/butterfork/BindBool.java
@@ -15,5 +15,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindBool {
   /** Boolean resource ID to which the field will be bound. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindColor.java b/butterfork/src/main/java/butterfork/BindColor.java
index b01c6d15..7a7006d0 100644
--- a/butterfork/src/main/java/butterfork/BindColor.java
+++ b/butterfork/src/main/java/butterfork/BindColor.java
@@ -17,5 +17,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindColor {
   /** Color resource ID to which the field will be bound. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindDimen.java b/butterfork/src/main/java/butterfork/BindDimen.java
index 896fa205..6c221cdf 100644
--- a/butterfork/src/main/java/butterfork/BindDimen.java
+++ b/butterfork/src/main/java/butterfork/BindDimen.java
@@ -17,5 +17,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindDimen {
   /** Dimension resource ID to which the field will be bound. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindDrawable.java b/butterfork/src/main/java/butterfork/BindDrawable.java
index 9373d242..ab37afa6 100644
--- a/butterfork/src/main/java/butterfork/BindDrawable.java
+++ b/butterfork/src/main/java/butterfork/BindDrawable.java
@@ -15,5 +15,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindDrawable {
   /** Drawable resource ID to which the field will be bound. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindInt.java b/butterfork/src/main/java/butterfork/BindInt.java
index 520da9b1..84379ed4 100644
--- a/butterfork/src/main/java/butterfork/BindInt.java
+++ b/butterfork/src/main/java/butterfork/BindInt.java
@@ -15,5 +15,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindInt {
   /** Integer resource ID to which the field will be bound. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/BindResources.java b/butterfork/src/main/java/butterfork/BindResources.java
new file mode 100644
index 00000000..d951c68b
--- /dev/null
+++ b/butterfork/src/main/java/butterfork/BindResources.java
@@ -0,0 +1,17 @@
+package butterfork;
+
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind an R class where Ids will be searched in.
+ */
+@Retention(CLASS) @Target(TYPE) @Inherited
+public @interface BindResources {
+  /** R class. */
+  Class value();
+}
diff --git a/butterfork/src/main/java/butterfork/BindString.java b/butterfork/src/main/java/butterfork/BindString.java
index 1be7e77b..858b2e51 100644
--- a/butterfork/src/main/java/butterfork/BindString.java
+++ b/butterfork/src/main/java/butterfork/BindString.java
@@ -15,5 +15,5 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface BindString {
   /** String resource ID to which the field will be bound. */
-  int value();
+  String value();
 }
diff --git a/butterfork/src/main/java/butterfork/OnCheckedChanged.java b/butterfork/src/main/java/butterfork/OnCheckedChanged.java
index 8d3dca24..b466830d 100644
--- a/butterfork/src/main/java/butterfork/OnCheckedChanged.java
+++ b/butterfork/src/main/java/butterfork/OnCheckedChanged.java
@@ -1,7 +1,5 @@
 package butterfork;
 
-import android.view.View;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -42,5 +40,5 @@
 )
 public @interface OnCheckedChanged {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/main/java/butterfork/OnClick.java b/butterfork/src/main/java/butterfork/OnClick.java
index d91c24c1..4ef4bc5d 100644
--- a/butterfork/src/main/java/butterfork/OnClick.java
+++ b/butterfork/src/main/java/butterfork/OnClick.java
@@ -30,7 +30,7 @@
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnClickListener",
-    type = "butterknife.internal.DebouncingOnClickListener",
+    type = "butterfork.internal.DebouncingOnClickListener",
     method = @ListenerMethod(
         name = "doClick",
         parameters = "android.view.View"
@@ -38,5 +38,5 @@
 )
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/main/java/butterfork/OnEditorAction.java b/butterfork/src/main/java/butterfork/OnEditorAction.java
index ecd65a67..8afcfe73 100644
--- a/butterfork/src/main/java/butterfork/OnEditorAction.java
+++ b/butterfork/src/main/java/butterfork/OnEditorAction.java
@@ -1,7 +1,5 @@
 package butterfork;
 
-import android.view.View;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -46,5 +44,5 @@
 )
 public @interface OnEditorAction {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/main/java/butterfork/OnFocusChange.java b/butterfork/src/main/java/butterfork/OnFocusChange.java
index 2a4169d7..04bc53ed 100644
--- a/butterfork/src/main/java/butterfork/OnFocusChange.java
+++ b/butterfork/src/main/java/butterfork/OnFocusChange.java
@@ -41,5 +41,5 @@
 )
 public @interface OnFocusChange {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/main/java/butterfork/OnItemClick.java b/butterfork/src/main/java/butterfork/OnItemClick.java
index 8b2c03af..302d1d40 100644
--- a/butterfork/src/main/java/butterfork/OnItemClick.java
+++ b/butterfork/src/main/java/butterfork/OnItemClick.java
@@ -43,5 +43,5 @@
 )
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/main/java/butterfork/OnItemLongClick.java b/butterfork/src/main/java/butterfork/OnItemLongClick.java
index 057596f3..9132c424 100644
--- a/butterfork/src/main/java/butterfork/OnItemLongClick.java
+++ b/butterfork/src/main/java/butterfork/OnItemLongClick.java
@@ -47,5 +47,5 @@
 )
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/main/java/butterfork/OnItemSelected.java b/butterfork/src/main/java/butterfork/OnItemSelected.java
index 7a297297..8d4412d4 100644
--- a/butterfork/src/main/java/butterfork/OnItemSelected.java
+++ b/butterfork/src/main/java/butterfork/OnItemSelected.java
@@ -44,7 +44,7 @@
 )
 public @interface OnItemSelected {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.ITEM_SELECTED;
diff --git a/butterfork/src/main/java/butterfork/OnLongClick.java b/butterfork/src/main/java/butterfork/OnLongClick.java
index a56f54da..b2816c44 100644
--- a/butterfork/src/main/java/butterfork/OnLongClick.java
+++ b/butterfork/src/main/java/butterfork/OnLongClick.java
@@ -42,5 +42,5 @@
 )
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/main/java/butterfork/OnPageChange.java b/butterfork/src/main/java/butterfork/OnPageChange.java
index 74d5c3f9..5e965308 100644
--- a/butterfork/src/main/java/butterfork/OnPageChange.java
+++ b/butterfork/src/main/java/butterfork/OnPageChange.java
@@ -1,7 +1,5 @@
 package butterfork;
 
-import android.view.View;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -38,7 +36,7 @@
 )
 public @interface OnPageChange {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.PAGE_SELECTED;
diff --git a/butterfork/src/main/java/butterfork/OnTextChanged.java b/butterfork/src/main/java/butterfork/OnTextChanged.java
index fa310500..b3caf62d 100644
--- a/butterfork/src/main/java/butterfork/OnTextChanged.java
+++ b/butterfork/src/main/java/butterfork/OnTextChanged.java
@@ -42,7 +42,7 @@
 )
 public @interface OnTextChanged {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.TEXT_CHANGED;
diff --git a/butterfork/src/main/java/butterfork/OnTouch.java b/butterfork/src/main/java/butterfork/OnTouch.java
index 4a80c03d..ea018f0e 100644
--- a/butterfork/src/main/java/butterfork/OnTouch.java
+++ b/butterfork/src/main/java/butterfork/OnTouch.java
@@ -44,5 +44,5 @@
 )
 public @interface OnTouch {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  String[] value() default { "" };
 }
diff --git a/butterfork/src/test/java/butterfork/ButterKnifeTest.java b/butterfork/src/test/java/butterfork/ButterKnifeTest.java
index 6d845fcb..b0068f56 100644
--- a/butterfork/src/test/java/butterfork/ButterKnifeTest.java
+++ b/butterfork/src/test/java/butterfork/ButterKnifeTest.java
@@ -8,6 +8,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
@@ -19,10 +20,9 @@
 
 import static butterfork.ButterKnife.Finder.arrayOf;
 import static butterfork.ButterKnife.Finder.listOf;
-import static org.fest.assertions.api.ANDROID.assertThat;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.entry;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.entry;
+import static org.assertj.core.api.Assertions.fail;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
@@ -78,48 +78,48 @@ public void resetViewsCache() {
     View view1 = new View(RuntimeEnvironment.application);
     View view2 = new View(RuntimeEnvironment.application);
     View view3 = new View(RuntimeEnvironment.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
     ButterKnife.apply(views, PROPERTY_ENABLED, false);
 
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
   }
 
   @Test public void actionAppliedToEveryView() {
     View view1 = new View(RuntimeEnvironment.application);
     View view2 = new View(RuntimeEnvironment.application);
     View view3 = new View(RuntimeEnvironment.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
     ButterKnife.apply(views, ACTION_DISABLE);
 
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
   }
 
   @Test public void setterAppliedToEveryView() {
     View view1 = new View(RuntimeEnvironment.application);
     View view2 = new View(RuntimeEnvironment.application);
     View view3 = new View(RuntimeEnvironment.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
     ButterKnife.apply(views, SETTER_ENABLED, false);
 
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
   }
 
   @Test public void zeroBindingsBindDoesNotThrowException() {
@@ -141,9 +141,9 @@ public void resetViewsCache() {
   }
 
   @Test public void bindingKnownPackagesIsNoOp() {
-    ButterKnife.bind(new Activity());
+    ButterKnife.bind(Robolectric.buildActivity(Activity.class).create().get());
     assertThat(ButterKnife.BINDERS).isEmpty();
-    ButterKnife.bind(new Object(), new Activity());
+    ButterKnife.bind(new Object(), Robolectric.buildActivity(Activity.class).create().get());
     assertThat(ButterKnife.BINDERS).isEmpty();
   }
 
