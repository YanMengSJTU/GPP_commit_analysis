diff --git a/CHANGELOG.md b/CHANGELOG.md
index b176a235..40f287c0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,16 @@
 Change Log
 ==========
 
+Version 8.7.0 *(2017-07-07)*
+----------------------------
+
+ * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries
+   26.0.0-beta1 or newer.
+ * New: `@BindAnim` annotation binds `Animation` instances.
+ * New: Generate `R2` constants for animation, layout, menu, plurals, styles, and styleables.
+ * Fix: Properly catch and re-throw type cast exceptions when method binding arguments do not match.
+
+
 Version 8.6.0 *(2017-05-16)*
 ----------------------------
 
diff --git a/README.md b/README.md
index b0234c8c..f2d97a35 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  compile 'com.jakewharton:butterknife:8.6.0'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
+  compile 'com.jakewharton:butterknife:8.7.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
 }
 ```
 
@@ -63,7 +63,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.6.0'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.7.0'
   }
 }
 ```
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFont.java b/butterknife-annotations/src/main/java/butterknife/BindFont.java
index 4a0db046..5e6e7666 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindFont.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java
@@ -1,8 +1,12 @@
 package butterknife;
 
+import android.graphics.Typeface;
+import android.support.annotation.IntDef;
+import android.support.annotation.RestrictTo;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import static android.support.annotation.RestrictTo.Scope.LIBRARY;
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
@@ -16,4 +20,16 @@
 public @interface BindFont {
   /** Font resource ID to which the field will be bound. */
   /* TODO support lib 26.0.0: @FontRes */ int value();
+
+  @TypefaceStyle int style() default Typeface.NORMAL;
+
+  @IntDef({
+      Typeface.NORMAL,
+      Typeface.BOLD,
+      Typeface.ITALIC,
+      Typeface.BOLD_ITALIC
+  })
+  @RestrictTo(LIBRARY)
+  @interface TypefaceStyle {
+  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 55d49d34..e7ea9a97 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -52,8 +52,6 @@
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
-  static final ClassName RESOURCES_COMPAT =
-      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 1613e602..f3735684 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -25,6 +25,7 @@
 import butterknife.OnTextChanged;
 import butterknife.OnTouch;
 import butterknife.Optional;
+import butterknife.compiler.FieldTypefaceBinding.TypefaceStyles;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
@@ -837,17 +838,25 @@ private void parseResourceFont(Element element,
     hasError |= isInaccessibleViaGeneratedCode(BindFont.class, "fields", element);
     hasError |= isBindingInWrongPackage(BindFont.class, element);
 
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    BindFont bindFont = element.getAnnotation(BindFont.class);
+
+    int styleValue = bindFont.style();
+    TypefaceStyles style = TypefaceStyles.fromValue(styleValue);
+    if (style == null) {
+      error(element, "@%s style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (%s.%s)",
+          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(), name);
+      hasError = true;
+    }
+
     if (hasError) {
       return;
     }
 
-    // Assemble information on the field.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindFont.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FONT));
+    QualifiedId qualifiedId = elementToQualifiedId(element, bindFont.value());
+    builder.addResource(new FieldTypefaceBinding(getId(qualifiedId), name, style));
 
     erasedTargetNames.add(enclosingElement);
   }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index 59590a1a..d9510525 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -20,8 +20,6 @@
     DIMEN_AS_INT("getDimensionPixelSize"),
     DIMEN_AS_FLOAT("getDimension"),
     FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
-    FONT(new ResourceMethod(BindingSet.RESOURCES_COMPAT, "getFont", false, 1),
-        new ResourceMethod(null, "getFont", true, 26)),
     INT("getInteger"),
     INT_ARRAY("getIntArray"),
     STRING("getString"),
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
new file mode 100644
index 00000000..771a5b56
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -0,0 +1,62 @@
+package butterknife.compiler;
+
+import android.support.annotation.Nullable;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+
+final class FieldTypefaceBinding implements ResourceBinding {
+  private static final ClassName RESOURCES_COMPAT =
+      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
+  private static final ClassName TYPEFACE = ClassName.get("android.graphics", "Typeface");
+
+  /** Keep in sync with {@link android.graphics.Typeface} constants. */
+  enum TypefaceStyles {
+    NORMAL(0),
+    BOLD(1),
+    ITALIC(2),
+    BOLD_ITALIC(3);
+
+    final int value;
+
+    TypefaceStyles(int value) {
+      this.value = value;
+    }
+
+    @Nullable static TypefaceStyles fromValue(int value) {
+      for (TypefaceStyles style : values()) {
+        if (style.value == value) {
+          return style;
+        }
+      }
+      return null;
+    }
+  }
+
+  private final Id id;
+  private final String name;
+  private final TypefaceStyles style;
+
+  FieldTypefaceBinding(Id id, String name, TypefaceStyles style) {
+    this.id = id;
+    this.name = name;
+    this.style = style;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return true;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    CodeBlock typeface = sdk >= 26
+        ? CodeBlock.of("res.getFont($L)", id.code)
+        : CodeBlock.of("$T.getFont(res, $L)", RESOURCES_COMPAT, id.code);
+    if (style != TypefaceStyles.NORMAL) {
+      typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
+    }
+    return CodeBlock.of("target.$L = $L", name, typeface);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife/src/test/java/butterknife/BindFontTest.java
index eb870f68..6d7106b1 100644
--- a/butterknife/src/test/java/butterknife/BindFontTest.java
+++ b/butterknife/src/test/java/butterknife/BindFontTest.java
@@ -116,6 +116,114 @@
         .generatesSources(bindingSource);
   }
 
+  @Ignore("Won't compile until we depend on support library 26.0.0")
+  @Test public void style() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.res.ResourcesCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ResourcesCompat.getFont(context, Typeface.BOLD);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void styleSdk26() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = Typeface.create(res.getFont(1), Typeface.BOLD);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=26")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
   @Test public void typeMustBeTypeface() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -131,4 +239,22 @@
         .withErrorContaining("@BindFont field type must be 'Typeface'. (test.Test.one)")
         .in(source).onLine(4);
   }
+
+  @Test public void styleMustBeValid() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = 5) Typeface one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (test.Test.one)")
+        .in(source).onLine(5);
+  }
 }
diff --git a/gradle.properties b/gradle.properties
index f1f2febc..e9cc60b7 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.6.1-SNAPSHOT
+VERSION_NAME=8.7.1-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
