diff --git a/build.gradle b/build.gradle
index af052595..a14015d6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,7 +3,9 @@ subprojects { project ->
   version = VERSION_NAME
 
   repositories {
-    mavenCentral()
+    maven {
+      url "https://plugins.gradle.org/m2/"
+    }
   }
 
   if (!project.name.equals('butterknife-gradle-plugin')) {
@@ -28,21 +30,19 @@ subprojects { project ->
 
   buildscript {
     repositories {
-      mavenCentral()
       maven {
         url "https://plugins.gradle.org/m2/"
       }
     }
     dependencies {
-      classpath 'com.android.tools.build:gradle:2.1.3'
-      classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+      classpath 'com.android.tools.build:gradle:2.2.0'
       classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2'
     }
   }
 }
 
 ext {
-  minSdkVersion = 8
+  minSdkVersion = 9
   targetSdkVersion = 24
   compileSdkVersion = 24
   buildToolsVersion = '24.0.2'
@@ -51,13 +51,16 @@ ext {
 }
 
 def androidToolsVersion = '25.1.2'
+def supportLibraryVersion = '24.2.1'
+def butterknifeLatestReleaseVersion = '8.4.0'
 
 ext.deps = [
     // Android
-    android: 'com.google.android:android:2.1.2',
-    supportv4: 'com.android.support:support-v4:24.1.0',
-    supportAnnotations: 'com.android.support:support-annotations:24.1.0',
-    androidGradle: 'com.android.tools.build:gradle:2.1.2',
+    android: 'com.google.android:android:4.1.1.4',
+    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",
+    supportAnnotations: "com.android.support:support-annotations:$supportLibraryVersion",
+    supportTestRunner: 'com.android.support.test:runner:0.5',
+    androidGradle: 'com.android.tools.build:gradle:2.2.0',
     lint: "com.android.tools.lint:lint:$androidToolsVersion",
     lintApi: "com.android.tools.lint:lint-api:$androidToolsVersion",
     lintChecks: "com.android.tools.lint:lint-checks:$androidToolsVersion",
@@ -76,5 +79,8 @@ ext.deps = [
     openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',
     compiletesting: 'com.google.testing.compile:compile-testing:0.9',
     autoservice: 'com.google.auto.service:auto-service:1.0-rc2',
-    autocommon: 'com.google.auto:auto-common:0.6'
+    autocommon: 'com.google.auto:auto-common:0.6',
+
+    butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",
+    butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion"
 ]
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index 1a2addc5..e917f86b 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -19,11 +19,8 @@ dependencies {
   compile deps.javapoet
   compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
 
-  testCompile deps.android
   testCompile deps.junit
   testCompile deps.truth
-  testCompile deps.compiletesting
-  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
 }
 
 checkstyle {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
similarity index 64%
rename from butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index fb0241ef..88682d36 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -2,6 +2,7 @@
 
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
+import com.google.common.collect.ImmutableList;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -10,7 +11,6 @@
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
-import com.squareup.javapoet.TypeVariableName;
 import com.squareup.javapoet.WildcardTypeName;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -21,129 +21,83 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
 
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
+import static com.google.auto.common.MoreElements.getPackage;
 import static java.util.Collections.singletonList;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
-final class BindingClass {
-  private static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");
+/** A set of all the bindings requested by a single type. */
+final class BindingSet {
+  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");
   private static final ClassName VIEW = ClassName.get("android.view", "View");
   private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
   private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
-  private static final ClassName THEME = RESOURCES.nestedClass("Theme");
   private static final ClassName UI_THREAD =
       ClassName.get("android.support.annotation", "UiThread");
   private static final ClassName CALL_SUPER =
       ClassName.get("android.support.annotation", "CallSuper");
   private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
-  private static final ClassName BITMAP_FACTORY =
-      ClassName.get("android.graphics", "BitmapFactory");
-
-  private final Map<Id, ViewBindings> viewIdMap = new LinkedHashMap<>();
-  private final Map<FieldCollectionViewBinding, List<Id>> collectionBindings =
-      new LinkedHashMap<>();
-  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
-  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();
-  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
-  private final boolean isFinal;
+  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
+  static final ClassName CONTEXT_COMPAT =
+      ClassName.get("android.support.v4.content", "ContextCompat");
+
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
-  private BindingClass parentBinding;
-
-  BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {
+  private final boolean isFinal;
+  private final List<ViewBindings> viewBindings;
+  private final List<FieldCollectionViewBinding> collectionBindings;
+  private final List<ResourceBinding> resourceBindings;
+  private final BindingSet parentBinding;
+
+  private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
+      Collection<ViewBindings> viewBindings,
+      Collection<FieldCollectionViewBinding> collectionBindings,
+      Collection<ResourceBinding> resourceBindings, BindingSet parentBinding) {
     this.isFinal = isFinal;
     this.targetTypeName = targetTypeName;
     this.bindingClassName = bindingClassName;
+    this.viewBindings = ImmutableList.copyOf(viewBindings);
+    this.collectionBindings = ImmutableList.copyOf(collectionBindings);
+    this.resourceBindings = ImmutableList.copyOf(resourceBindings);
+    this.parentBinding = parentBinding;
   }
 
-  void addBitmap(FieldBitmapBinding binding) {
-    bitmapBindings.add(binding);
-  }
-
-  void addDrawable(FieldDrawableBinding binding) {
-    drawableBindings.add(binding);
-  }
-
-  void addField(Id id, FieldViewBinding binding) {
-    getOrCreateViewBindings(id).setFieldBinding(binding);
-  }
-
-  void addFieldCollection(List<Id> ids, FieldCollectionViewBinding binding) {
-    collectionBindings.put(binding, ids);
-  }
-
-  boolean addMethod(
-      Id id,
-      ListenerClass listener,
-      ListenerMethod method,
-      MethodViewBinding binding) {
-    ViewBindings viewBindings = getOrCreateViewBindings(id);
-    if (viewBindings.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
-      return false;
-    }
-    viewBindings.addMethodBinding(listener, method, binding);
-    return true;
-  }
-
-  void addResource(FieldResourceBinding binding) {
-    resourceBindings.add(binding);
-  }
-
-  void setParent(BindingClass parent) {
-    this.parentBinding = parent;
-  }
-
-  ViewBindings getViewBinding(Id id) {
-    return viewIdMap.get(id);
-  }
-
-  private ViewBindings getOrCreateViewBindings(Id id) {
-    ViewBindings viewId = viewIdMap.get(id);
-    if (viewId == null) {
-      viewId = new ViewBindings(id);
-      viewIdMap.put(id, viewId);
-    }
-    return viewId;
-  }
-
-  JavaFile brewJava() {
-    return JavaFile.builder(bindingClassName.packageName(), createBindingClass())
+  JavaFile brewJava(int sdk) {
+    return JavaFile.builder(bindingClassName.packageName(), createType(sdk))
         .addFileComment("Generated code from Butter Knife. Do not modify!")
         .build();
   }
 
-  private TypeSpec createBindingClass() {
+  private TypeSpec createType(int sdk) {
     TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())
         .addModifiers(PUBLIC);
-
-    TypeName targetType;
     if (isFinal) {
       result.addModifiers(FINAL);
-      targetType = targetTypeName;
-    } else {
-      targetType = TypeVariableName.get("T");
-      result.addTypeVariable(TypeVariableName.get("T", targetTypeName));
     }
 
-    if (hasParentBinding()) {
-      result.superclass(ParameterizedTypeName.get(getParentBinding(), targetType));
+    if (parentBinding != null) {
+      result.superclass(parentBinding.bindingClassName);
     } else {
       result.addSuperinterface(UNBINDER);
-      result.addField(targetType, "target", isFinal ? PRIVATE : PROTECTED);
     }
 
-    if (!bindNeedsView()) {
+    if (hasTargetField()) {
+      result.addField(targetTypeName, "target", PRIVATE);
+    }
+
+    if (!constructorNeedsView()) {
       // Add a delegating constructor with a target type + view signature for reflective use.
-      result.addMethod(createBindingViewDelegateConstructor(targetType));
+      result.addMethod(createBindingViewDelegateConstructor(targetTypeName));
     }
-    result.addMethod(createBindingConstructor(targetType));
+    result.addMethod(createBindingConstructor(targetTypeName, sdk));
 
-    if (hasViewBindings() || !hasParentBinding()) {
-      result.addMethod(createBindingUnbindMethod(result, targetType));
+    if (hasViewBindings() || parentBinding == null) {
+      result.addMethod(createBindingUnbindMethod(result, targetTypeName));
     }
 
     return result.build();
@@ -163,7 +117,7 @@ private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {
         .build();
   }
 
-  private MethodSpec createBindingConstructor(TypeName targetType) {
+  private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {
     MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
         .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC);
@@ -174,23 +128,12 @@ private MethodSpec createBindingConstructor(TypeName targetType) {
       constructor.addParameter(targetType, "target");
     }
 
-    if (bindNeedsView()) {
+    if (constructorNeedsView()) {
       constructor.addParameter(VIEW, "source");
     } else {
       constructor.addParameter(CONTEXT, "context");
     }
 
-    if (!hasParentBinding()) {
-      constructor.addStatement("this.target = target");
-    } else if (parentBinding.bindNeedsView()) {
-      constructor.addStatement("super(target, source)");
-    } else if (bindNeedsView()) {
-      constructor.addStatement("super(target, source.getContext())");
-    } else {
-      constructor.addStatement("super(target, context)");
-    }
-    constructor.addCode("\n");
-
     if (hasUnqualifiedResourceBindings()) {
       // Aapt can change IDs out from underneath us, just suppress since all will work at runtime.
       constructor.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
@@ -198,64 +141,47 @@ private MethodSpec createBindingConstructor(TypeName targetType) {
           .build());
     }
 
+    if (parentBinding != null) {
+      if (parentBinding.constructorNeedsView()) {
+        constructor.addStatement("super(target, source)");
+      } else if (constructorNeedsView()) {
+        constructor.addStatement("super(target, source.getContext())");
+      } else {
+        constructor.addStatement("super(target, context)");
+      }
+      constructor.addCode("\n");
+    }
+    if (hasTargetField()) {
+      constructor.addStatement("this.target = target");
+      constructor.addCode("\n");
+    }
+
     if (hasViewBindings()) {
-      if (bindNeedsViewLocal()) {
+      if (hasViewLocal()) {
         // Local variable in which all views will be temporarily stored.
         constructor.addStatement("$T view", VIEW);
       }
-      for (ViewBindings bindings : viewIdMap.values()) {
+      for (ViewBindings bindings : viewBindings) {
         addViewBindings(constructor, bindings);
       }
-      for (Map.Entry<FieldCollectionViewBinding, List<Id>> entry : collectionBindings.entrySet()) {
-        emitCollectionBinding(constructor, entry.getKey(), entry.getValue());
+      for (FieldCollectionViewBinding binding : collectionBindings) {
+        constructor.addStatement("$L", binding.render());
       }
 
-      if (hasResourceBindings()) {
+      if (!resourceBindings.isEmpty()) {
         constructor.addCode("\n");
       }
     }
 
-    if (hasResourceBindings()) {
-      boolean hasView = bindNeedsView();
-      boolean needsSourceToContext = bindNeedsTheme() && hasView;
-      if (needsSourceToContext) {
+    if (!resourceBindings.isEmpty()) {
+      if (constructorNeedsView()) {
         constructor.addStatement("$T context = source.getContext()", CONTEXT);
       }
-      constructor.addStatement("$T res = $N.getResources()", RESOURCES,
-          needsSourceToContext || !hasView ? "context" : "source");
-      if (bindNeedsTheme()) {
-        constructor.addStatement("$T theme = context.getTheme()", THEME);
-      }
-
-      for (FieldBitmapBinding binding : bitmapBindings) {
-        constructor.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),
-            BITMAP_FACTORY, binding.getId().code);
-      }
-
-      for (FieldDrawableBinding binding : drawableBindings) {
-        Id tintAttributeId = binding.getTintAttributeId();
-        if (tintAttributeId.value != 0) {
-          constructor.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",
-              binding.getName(), UTILS, binding.getId().code, tintAttributeId.code);
-        } else {
-          constructor.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),
-              UTILS, binding.getId().code);
-        }
+      if (hasResourceBindingsNeedingResource(sdk)) {
+        constructor.addStatement("$T res = context.getResources()", RESOURCES);
       }
-
-      for (FieldResourceBinding binding : resourceBindings) {
-        if (binding.requiresUtils()) {
-          if (binding.isThemeable()) {
-            constructor.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(), UTILS,
-                binding.getMethod(), binding.getId().code);
-          } else {
-            constructor.addStatement("target.$L = $T.$L(res, $L)", binding.getName(), UTILS,
-                binding.getMethod(), binding.getId().code);
-          }
-        } else {
-          constructor.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
-              binding.getId().code);
-        }
+      for (ResourceBinding binding : resourceBindings) {
+        constructor.addStatement("$L", binding.render(sdk));
       }
     }
 
@@ -267,45 +193,39 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
     MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC);
-    if (!isFinal && !hasParentBinding()) {
+    if (!isFinal && parentBinding == null) {
       result.addAnnotation(CALL_SUPER);
     }
-    boolean rootBindingWithFields = !hasParentBinding() && hasFieldBindings();
-    if (hasFieldBindings() || rootBindingWithFields) {
-      result.addStatement("$T target = this.target", targetType);
-    }
-    if (!hasParentBinding()) {
-      String target = rootBindingWithFields ? "target" : "this.target";
-      result.addStatement("if ($N == null) throw new $T($S)", target, IllegalStateException.class,
-          "Bindings already cleared.");
-    } else {
-      result.addStatement("super.unbind()");
-    }
 
-    if (hasFieldBindings()) {
+    if (hasTargetField()) {
+      if (hasFieldBindings()) {
+        result.addStatement("$T target = this.target", targetType);
+      }
+      result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
+          "Bindings already cleared.");
+      result.addStatement("$N = null", hasFieldBindings() ? "this.target" : "target");
       result.addCode("\n");
-      for (ViewBindings bindings : viewIdMap.values()) {
+      for (ViewBindings bindings : viewBindings) {
         if (bindings.getFieldBinding() != null) {
           result.addStatement("target.$L = null", bindings.getFieldBinding().getName());
         }
       }
-      for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
-        result.addStatement("target.$L = null", fieldCollectionBinding.getName());
+      for (FieldCollectionViewBinding binding : collectionBindings) {
+        result.addStatement("target.$L = null", binding.name);
       }
     }
 
     if (hasMethodBindings()) {
       result.addCode("\n");
-      for (ViewBindings bindings : viewIdMap.values()) {
+      for (ViewBindings bindings : viewBindings) {
         addFieldAndUnbindStatement(bindingClass, result, bindings);
       }
     }
 
-    if (!hasParentBinding()) {
+    if (parentBinding != null) {
       result.addCode("\n");
-      result.addStatement("this.target = null");
+      result.addStatement("super.unbind()");
     }
-
     return result.build();
   }
 
@@ -364,52 +284,6 @@ private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemo
         : listenerClass.setter();
   }
 
-  private void emitCollectionBinding(
-      MethodSpec.Builder result,
-      FieldCollectionViewBinding binding,
-      List<Id> ids) {
-    String ofName;
-    switch (binding.getKind()) {
-      case ARRAY:
-        ofName = "arrayOf";
-        break;
-      case LIST:
-        ofName = "listOf";
-        break;
-      default:
-        throw new IllegalStateException("Unknown kind: " + binding.getKind());
-    }
-
-    CodeBlock.Builder builder = CodeBlock.builder();
-    for (int i = 0; i < ids.size(); i++) {
-      if (i > 0) {
-        builder.add(", ");
-      }
-      builder.add("\n");
-
-      boolean requiresCast = requiresCast(binding.getType());
-      if (!requiresCast && !binding.isRequired()) {
-        builder.add("source.findViewById($L)", ids.get(i).code);
-      } else {
-        builder.add("$T.find", UTILS);
-        builder.add(binding.isRequired() ? "RequiredView" : "OptionalView");
-        if (requiresCast) {
-          builder.add("AsType");
-        }
-        builder.add("(source, $L", ids.get(i).code);
-        if (binding.isRequired() || requiresCast) {
-          builder.add(", $S", asHumanDescription(singletonList(binding)));
-        }
-        if (requiresCast) {
-          builder.add(", $T.class", binding.getRawType());
-        }
-        builder.add(")");
-      }
-    }
-
-    result.addStatement("target.$L = $T.$L($L)", binding.getName(), UTILS, ofName, builder.build());
-  }
-
   private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
     if (bindings.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
@@ -634,53 +508,25 @@ private static TypeName bestGuess(String type) {
     }
   }
 
-  /** True when this type has a parent view binder type. */
-  private boolean hasParentBinding() {
-    return parentBinding != null;
-  }
-
-  /** Return the nearest binding class from this type's parents. */
-  private ClassName getParentBinding() {
-    return parentBinding.bindingClassName;
-  }
-
   /** True when this type's bindings require a view hierarchy. */
   private boolean hasViewBindings() {
-    return !viewIdMap.isEmpty() || !collectionBindings.isEmpty();
-  }
-
-  /** True when this type's bindings require Android's {@code Resources}. */
-  private boolean hasResourceBindings() {
-    return !(bitmapBindings.isEmpty() && drawableBindings.isEmpty() && resourceBindings.isEmpty());
+    return !viewBindings.isEmpty() || !collectionBindings.isEmpty();
   }
 
   /** True when this type's bindings use raw integer values instead of {@code R} references. */
   private boolean hasUnqualifiedResourceBindings() {
-    for (FieldBitmapBinding binding : bitmapBindings) {
-      if (!binding.getId().qualifed) {
-        return true;
-      }
-    }
-    for (FieldDrawableBinding binding : drawableBindings) {
-      if (!binding.getId().qualifed) {
-        return true;
-      }
-    }
-    for (FieldResourceBinding binding : resourceBindings) {
-      if (!binding.getId().qualifed) {
+    for (ResourceBinding binding : resourceBindings) {
+      if (!binding.id().qualifed) {
         return true;
       }
     }
     return false;
   }
 
-  /** True when this type's resource bindings require Android's {@code Theme}. */
-  private boolean hasResourceBindingsNeedingTheme() {
-    if (!drawableBindings.isEmpty()) {
-      return true;
-    }
-    for (FieldResourceBinding resourceBinding : resourceBindings) {
-      if (resourceBinding.isThemeable()) {
+  /** True when this type's bindings use Resource directly instead of Context. */
+  private boolean hasResourceBindingsNeedingResource(int sdk) {
+    for (ResourceBinding binding : resourceBindings) {
+      if (binding.requiresResources(sdk)) {
         return true;
       }
     }
@@ -688,8 +534,8 @@ private boolean hasResourceBindingsNeedingTheme() {
   }
 
   private boolean hasMethodBindings() {
-    for (ViewBindings viewBindings : viewIdMap.values()) {
-      if (!viewBindings.getMethodBindings().isEmpty()) {
+    for (ViewBindings bindings : viewBindings) {
+      if (!bindings.getMethodBindings().isEmpty()) {
         return true;
       }
     }
@@ -697,39 +543,118 @@ private boolean hasMethodBindings() {
   }
 
   private boolean hasFieldBindings() {
-    for (ViewBindings viewBindings : viewIdMap.values()) {
-      if (viewBindings.getFieldBinding() != null) {
+    for (ViewBindings bindings : viewBindings) {
+      if (bindings.getFieldBinding() != null) {
         return true;
       }
     }
     return !collectionBindings.isEmpty();
   }
 
-  /** True if this binding requires a view. Otherwise only a context is needed. */
-  private boolean bindNeedsView() {
-    return hasViewBindings() //
-        || hasParentBinding() && parentBinding.bindNeedsView();
-  }
-
-  private boolean bindNeedsTheme() {
-    return hasResourceBindings() && hasResourceBindingsNeedingTheme() //
-        || hasParentBinding() && parentBinding.bindNeedsTheme();
+  private boolean hasTargetField() {
+    return hasFieldBindings() || hasMethodBindings();
   }
 
-  private boolean bindNeedsViewLocal() {
-    for (ViewBindings viewBindings : viewIdMap.values()) {
-      if (viewBindings.requiresLocal()) {
+  private boolean hasViewLocal() {
+    for (ViewBindings bindings : viewBindings) {
+      if (bindings.requiresLocal()) {
         return true;
       }
     }
     return false;
   }
 
-  private static boolean requiresCast(TypeName type) {
+  /** True if this binding requires a view. Otherwise only a context is needed. */
+  private boolean constructorNeedsView() {
+    return hasViewBindings() //
+        || parentBinding != null && parentBinding.constructorNeedsView();
+  }
+
+  static boolean requiresCast(TypeName type) {
     return !VIEW_TYPE.equals(type.toString());
   }
 
   @Override public String toString() {
     return bindingClassName.toString();
   }
+
+  static Builder newBuilder(TypeElement enclosingElement) {
+    TypeName targetType = TypeName.get(enclosingElement.asType());
+    if (targetType instanceof ParameterizedTypeName) {
+      targetType = ((ParameterizedTypeName) targetType).rawType;
+    }
+
+    String packageName = getPackage(enclosingElement).getQualifiedName().toString();
+    String className = enclosingElement.getQualifiedName().toString().substring(
+        packageName.length() + 1).replace('.', '$');
+    ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
+
+    boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
+    return new Builder(targetType, bindingClassName, isFinal);
+  }
+
+  static final class Builder {
+    private final TypeName targetTypeName;
+    private final ClassName bindingClassName;
+    private final boolean isFinal;
+
+    private BindingSet parentBinding;
+
+    private final Map<Id, ViewBindings> viewIdMap = new LinkedHashMap<>();
+    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();
+    private final List<ResourceBinding> resourceBindings = new ArrayList<>();
+
+    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {
+      this.targetTypeName = targetTypeName;
+      this.bindingClassName = bindingClassName;
+      this.isFinal = isFinal;
+    }
+
+    void addField(Id id, FieldViewBinding binding) {
+      getOrCreateViewBindings(id).setFieldBinding(binding);
+    }
+
+    void addFieldCollection(FieldCollectionViewBinding binding) {
+      collectionBindings.add(binding);
+    }
+
+    boolean addMethod(
+        Id id,
+        ListenerClass listener,
+        ListenerMethod method,
+        MethodViewBinding binding) {
+      ViewBindings viewBindings = getOrCreateViewBindings(id);
+      if (viewBindings.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
+        return false;
+      }
+      viewBindings.addMethodBinding(listener, method, binding);
+      return true;
+    }
+
+    void addResource(ResourceBinding binding) {
+      resourceBindings.add(binding);
+    }
+
+    void setParent(BindingSet parent) {
+      this.parentBinding = parent;
+    }
+
+    ViewBindings getViewBinding(Id id) {
+      return viewIdMap.get(id);
+    }
+
+    private ViewBindings getOrCreateViewBindings(Id id) {
+      ViewBindings viewId = viewIdMap.get(id);
+      if (viewId == null) {
+        viewId = new ViewBindings(id);
+        viewIdMap.put(id, viewId);
+      }
+      return viewId;
+    }
+
+    BindingSet build() {
+      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewIdMap.values(),
+          collectionBindings, resourceBindings, parentBinding);
+    }
+  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index f9b30c3e..83934cdb 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -29,7 +29,6 @@
 import com.google.auto.service.AutoService;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
-import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.sun.source.tree.ClassTree;
 import com.sun.source.util.Trees;
@@ -42,9 +41,12 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
+import java.util.Collections;
+import java.util.Deque;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -80,6 +82,8 @@
 
 @AutoService(Processor.class)
 public final class ButterKnifeProcessor extends AbstractProcessor {
+  // TODO remove when http://b.android.com/187527 is released.
+  private static final String OPTION_SDK_INT = "butterknife.minSdk";
   static final Id NO_ID = new Id(-1);
   static final String VIEW_TYPE = "android.view.View";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
@@ -111,12 +115,25 @@
   private Types typeUtils;
   private Filer filer;
   private Trees trees;
+  private int sdk = 1;
 
   private final Map<Integer, Id> symbols = new LinkedHashMap<>();
 
   @Override public synchronized void init(ProcessingEnvironment env) {
     super.init(env);
 
+    String sdk = env.getOptions().get(OPTION_SDK_INT);
+    if (sdk != null) {
+      try {
+        this.sdk = Integer.parseInt(sdk);
+      } catch (NumberFormatException e) {
+        env.getMessager()
+            .printMessage(Kind.WARNING, "Unable to parse supplied minSdk option '"
+                + sdk
+                + "'. Falling back to API 1 support.");
+      }
+    }
+
     elementUtils = env.getElementUtils();
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
@@ -126,6 +143,10 @@
     }
   }
 
+  @Override public Set<String> getSupportedOptions() {
+    return Collections.singleton(OPTION_SDK_INT);
+  }
+
   @Override public Set<String> getSupportedAnnotationTypes() {
     Set<String> types = new LinkedHashSet<>();
     for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
@@ -154,13 +175,13 @@
   }
 
   @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
-    Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);
+    Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(env);
 
-    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
+    for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {
       TypeElement typeElement = entry.getKey();
-      BindingClass bindingClass = entry.getValue();
+      BindingSet binding = entry.getValue();
 
-      JavaFile javaFile = bindingClass.brewJava();
+      JavaFile javaFile = binding.brewJava(sdk);
       try {
         javaFile.writeTo(filer);
       } catch (IOException e) {
@@ -171,8 +192,8 @@
     return true;
   }
 
-  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {
-    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
+  private Map<TypeElement, BindingSet> findAndParseTargets(RoundEnvironment env) {
+    Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();
     Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
 
     scanForRClasses(env);
@@ -181,7 +202,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceArray(element, targetClassMap, erasedTargetNames);
+        parseResourceArray(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindArray.class, e);
       }
@@ -191,7 +212,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindBitmap.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceBitmap(element, targetClassMap, erasedTargetNames);
+        parseResourceBitmap(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindBitmap.class, e);
       }
@@ -201,7 +222,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindBool.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceBool(element, targetClassMap, erasedTargetNames);
+        parseResourceBool(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindBool.class, e);
       }
@@ -211,7 +232,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindColor.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceColor(element, targetClassMap, erasedTargetNames);
+        parseResourceColor(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindColor.class, e);
       }
@@ -221,7 +242,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindDimen.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceDimen(element, targetClassMap, erasedTargetNames);
+        parseResourceDimen(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindDimen.class, e);
       }
@@ -231,7 +252,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindDrawable.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceDrawable(element, targetClassMap, erasedTargetNames);
+        parseResourceDrawable(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindDrawable.class, e);
       }
@@ -241,7 +262,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindFloat.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceFloat(element, targetClassMap, erasedTargetNames);
+        parseResourceFloat(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindFloat.class, e);
       }
@@ -251,7 +272,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceInt(element, targetClassMap, erasedTargetNames);
+        parseResourceInt(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindInt.class, e);
       }
@@ -261,7 +282,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceString(element, targetClassMap, erasedTargetNames);
+        parseResourceString(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindString.class, e);
       }
@@ -272,7 +293,7 @@
       // we don't SuperficialValidation.validateElement(element)
       // so that an unresolved View type can be generated by later processing rounds
       try {
-        parseBindView(element, targetClassMap, erasedTargetNames);
+        parseBindView(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindView.class, e);
       }
@@ -283,7 +304,7 @@
       // we don't SuperficialValidation.validateElement(element)
       // so that an unresolved View type can be generated by later processing rounds
       try {
-        parseBindViews(element, targetClassMap, erasedTargetNames);
+        parseBindViews(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindViews.class, e);
       }
@@ -291,20 +312,36 @@
 
     // Process each annotation that corresponds to a listener.
     for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+      findAndParseListener(env, listener, builderMap, erasedTargetNames);
     }
 
-    // Try to find a parent binder for each.
-    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
-      TypeElement parentType = findParentType(entry.getKey(), erasedTargetNames);
-      if (parentType != null) {
-        BindingClass bindingClass = entry.getValue();
-        BindingClass parentBindingClass = targetClassMap.get(parentType);
-        bindingClass.setParent(parentBindingClass);
+    // Associate superclass binders with their subclass binders. This is a queue-based tree walk
+    // which starts at the roots (superclasses) and walks to the leafs (subclasses).
+    Deque<Map.Entry<TypeElement, BindingSet.Builder>> entries =
+        new ArrayDeque<>(builderMap.entrySet());
+    Map<TypeElement, BindingSet> bindingMap = new LinkedHashMap<>();
+    while (!entries.isEmpty()) {
+      Map.Entry<TypeElement, BindingSet.Builder> entry = entries.removeFirst();
+
+      TypeElement type = entry.getKey();
+      BindingSet.Builder builder = entry.getValue();
+
+      TypeElement parentType = findParentType(type, erasedTargetNames);
+      if (parentType == null) {
+        bindingMap.put(type, builder.build());
+      } else {
+        BindingSet parentBinding = bindingMap.get(parentType);
+        if (parentBinding != null) {
+          builder.setParent(parentBinding);
+          bindingMap.put(type, builder.build());
+        } else {
+          // Has a superclass binding but we haven't built it yet. Re-enqueue for later.
+          entries.addLast(entry);
+        }
       }
     }
 
-    return targetClassMap;
+    return bindingMap;
   }
 
   private void logParsingError(Element element, Class<? extends Annotation> annotation,
@@ -366,7 +403,7 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
-  private void parseBindView(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
       Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -401,9 +438,9 @@ private void parseBindView(Element element, Map<TypeElement, BindingClass> targe
     // Assemble information on the field.
     int id = element.getAnnotation(BindView.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
-    if (bindingClass != null) {
-      ViewBindings viewBindings = bindingClass.getViewBinding(getId(id));
+    BindingSet.Builder builder = builderMap.get(enclosingElement);
+    if (builder != null) {
+      ViewBindings viewBindings = builder.getViewBinding(getId(id));
       if (viewBindings != null && viewBindings.getFieldBinding() != null) {
         FieldViewBinding existingBinding = viewBindings.getFieldBinding();
         error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
@@ -412,21 +449,20 @@ private void parseBindView(Element element, Map<TypeElement, BindingClass> targe
         return;
       }
     } else {
-      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+      builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     }
 
     String name = element.getSimpleName().toString();
     TypeName type = TypeName.get(elementType);
     boolean required = isFieldRequired(element);
 
-    FieldViewBinding binding = new FieldViewBinding(name, type, required);
-    bindingClass.addField(getId(id), binding);
+    builder.addField(getId(id), new FieldViewBinding(name, type, required));
 
     // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseBindViews(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
       Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -510,15 +546,14 @@ private void parseBindViews(Element element, Map<TypeElement, BindingClass> targ
       idVars.add(getId(id));
     }
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
-    bindingClass.addFieldCollection(idVars, binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceBool(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceBool(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -542,16 +577,14 @@ private void parseResourceBool(Element element, Map<TypeElement, BindingClass> t
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBool.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name, "getBoolean", false,
-        false);
-    bindingClass.addResource(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceColor(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceColor(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -579,16 +612,16 @@ private void parseResourceColor(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindColor.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name,
-        isColorStateList ? "getColorStateList" : "getColor", true, true);
-    bindingClass.addResource(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name,
+        isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST
+            : FieldResourceBinding.Type.COLOR));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceDimen(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceDimen(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -616,16 +649,15 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDimen.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name,
-        isInt ? "getDimensionPixelSize" : "getDimension", false, false);
-    bindingClass.addResource(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name,
+        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceBitmap(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -649,15 +681,15 @@ private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBitmap.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldBitmapBinding binding = new FieldBitmapBinding(getId(id), name);
-    bindingClass.addBitmap(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceDrawable(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceDrawable(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -682,15 +714,14 @@ private void parseResourceDrawable(Element element, Map<TypeElement, BindingClas
     int id = element.getAnnotation(BindDrawable.class).value();
     int tint = element.getAnnotation(BindDrawable.class).tint();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldDrawableBinding binding = new FieldDrawableBinding(getId(id), name, getId(tint));
-    bindingClass.addDrawable(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldDrawableBinding(getId(id), name, getId(tint)));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceFloat(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceFloat(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -714,16 +745,14 @@ private void parseResourceFloat(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindFloat.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding =
-        new FieldResourceBinding(getId(id), name, "getFloat", true, false);
-    bindingClass.addResource(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceInt(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceInt(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -746,16 +775,14 @@ private void parseResourceInt(Element element, Map<TypeElement, BindingClass> ta
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindInt.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name, "getInteger", false,
-        false);
-    bindingClass.addResource(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceString(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceString(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -779,22 +806,21 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindString.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name, "getString", false,
-        false);
-    bindingClass.addResource(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING));
 
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceArray(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+  private void parseResourceArray(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
     // Verify that the target type is supported.
-    String methodName = getArrayResourceMethodName(element);
-    if (methodName == null) {
+    FieldResourceBinding.Type type = getArrayResourceMethodName(element);
+    if (type == null) {
       error(element,
           "@%s field type must be one of: String[], int[], CharSequence[], %s. (%s.%s)",
           BindArray.class.getSimpleName(), TYPED_ARRAY_TYPE, enclosingElement.getQualifiedName(),
@@ -814,10 +840,8 @@ private void parseResourceArray(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindArray.class).value();
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name, methodName, false,
-        false);
-    bindingClass.addResource(binding);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(id), name, type));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -826,20 +850,20 @@ private void parseResourceArray(Element element, Map<TypeElement, BindingClass>
    * Returns a method name from the {@link android.content.res.Resources} class for array resource
    * binding, null if the element type is not supported.
    */
-  private static String getArrayResourceMethodName(Element element) {
+  private static FieldResourceBinding.Type getArrayResourceMethodName(Element element) {
     TypeMirror typeMirror = element.asType();
     if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
-      return "obtainTypedArray";
+      return FieldResourceBinding.Type.TYPED_ARRAY;
     }
     if (TypeKind.ARRAY.equals(typeMirror.getKind())) {
       ArrayType arrayType = (ArrayType) typeMirror;
       String componentType = arrayType.getComponentType().toString();
       if (STRING_TYPE.equals(componentType)) {
-        return "getStringArray";
+        return FieldResourceBinding.Type.STRING_ARRAY;
       } else if ("int".equals(componentType)) {
-        return "getIntArray";
+        return FieldResourceBinding.Type.INT_ARRAY;
       } else if ("java.lang.CharSequence".equals(componentType)) {
-        return "getTextArray";
+        return FieldResourceBinding.Type.TEXT_ARRAY;
       }
     }
     return null;
@@ -869,12 +893,12 @@ private String doubleErasure(TypeMirror elementType) {
   }
 
   private void findAndParseListener(RoundEnvironment env,
-      Class<? extends Annotation> annotationClass, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
+      Class<? extends Annotation> annotationClass,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);
+        parseListenerAnnotation(annotationClass, element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         StringWriter stackTrace = new StringWriter();
         e.printStackTrace(new PrintWriter(stackTrace));
@@ -886,7 +910,7 @@ private void findAndParseListener(RoundEnvironment env,
   }
 
   private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
-      Map<TypeElement, BindingClass> targetClassMap, Set<TypeElement> erasedTargetNames)
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames)
       throws Exception {
     // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
     if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
@@ -1060,9 +1084,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
-      if (!bindingClass.addMethod(getId(id), listener, method, binding)) {
+      if (!builder.addMethod(getId(id), listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
@@ -1118,30 +1142,14 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     return false;
   }
 
-  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
-      TypeElement enclosingElement) {
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
-    if (bindingClass == null) {
-      TypeName targetType = TypeName.get(enclosingElement.asType());
-      if (targetType instanceof ParameterizedTypeName) {
-        targetType = ((ParameterizedTypeName) targetType).rawType;
-      }
-
-      String packageName = getPackageName(enclosingElement);
-      String className = getClassName(enclosingElement, packageName);
-      ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
-
-      boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
-
-      bindingClass = new BindingClass(targetType, bindingClassName, isFinal);
-      targetClassMap.put(enclosingElement, bindingClass);
+  private BindingSet.Builder getOrCreateBindingBuilder(
+      Map<TypeElement, BindingSet.Builder> builderMap, TypeElement enclosingElement) {
+    BindingSet.Builder builder = builderMap.get(enclosingElement);
+    if (builder == null) {
+      builder = BindingSet.newBuilder(enclosingElement);
+      builderMap.put(enclosingElement, builder);
     }
-    return bindingClass;
-  }
-
-  private static String getClassName(TypeElement type, String packageName) {
-    int packageLen = packageName.length() + 1;
-    return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
+    return builder;
   }
 
   /** Finds the parent binder type in the supplied set, if any. */
@@ -1179,10 +1187,6 @@ private void printMessage(Kind kind, Element element, String message, Object[] a
     processingEnv.getMessager().printMessage(kind, message, element);
   }
 
-  private String getPackageName(TypeElement type) {
-    return elementUtils.getPackageOf(type).getQualifiedName().toString();
-  }
-
   private static boolean hasAnnotationWithName(Element element, String simpleName) {
     for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
       String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java
deleted file mode 100644
index 9c102afb..00000000
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package butterknife.compiler;
-
-final class FieldBitmapBinding {
-  private final Id id;
-  private final String name;
-
-  FieldBitmapBinding(Id id, String name) {
-    this.id = id;
-    this.name = name;
-  }
-
-  public Id getId() {
-    return id;
-  }
-
-  public String getName() {
-    return name;
-  }
-}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
index 2607cda9..f96bb6b8 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -1,51 +1,69 @@
 package butterknife.compiler;
 
-import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
+import java.util.List;
 
-final class FieldCollectionViewBinding implements ViewBinding {
+import static butterknife.compiler.BindingSet.UTILS;
+import static butterknife.compiler.BindingSet.requiresCast;
+
+final class FieldCollectionViewBinding {
   enum Kind {
-    ARRAY,
-    LIST
+    ARRAY("arrayOf"),
+    LIST("listOf");
+
+    final String factoryName;
+
+    Kind(String factoryName) {
+      this.factoryName = factoryName;
+    }
   }
 
-  private final String name;
+  final String name;
   private final TypeName type;
   private final Kind kind;
   private final boolean required;
+  private final List<Id> ids;
 
-  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, TypeName type, Kind kind, List<Id> ids,
+      boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
+    this.ids = ids;
     this.required = required;
   }
 
-  public String getName() {
-    return name;
-  }
-
-  public TypeName getType() {
-    return type;
-  }
+  CodeBlock render() {
+    CodeBlock.Builder builder = CodeBlock.builder()
+        .add("target.$L = $T.$L(", name, UTILS, kind.factoryName);
+    for (int i = 0; i < ids.size(); i++) {
+      if (i > 0) {
+        builder.add(", ");
+      }
+      builder.add("\n");
 
-  public ClassName getRawType() {
-    if (type instanceof ParameterizedTypeName) {
-      return ((ParameterizedTypeName) type).rawType;
+      boolean requiresCast = requiresCast(type);
+      if (!requiresCast && !required) {
+        builder.add("source.findViewById($L)", ids.get(i).code);
+      } else {
+        builder.add("$T.find", UTILS);
+        builder.add(required ? "RequiredView" : "OptionalView");
+        if (requiresCast) {
+          builder.add("AsType");
+        }
+        builder.add("(source, $L, \"field '$L'\"", ids.get(i).code, name);
+        if (requiresCast) {
+          TypeName rawType = type;
+          if (rawType instanceof ParameterizedTypeName) {
+            rawType = ((ParameterizedTypeName) rawType).rawType;
+          }
+          builder.add(", $T.class", rawType);
+        }
+        builder.add(")");
+      }
     }
-    return (ClassName) type;
-  }
-
-  public Kind getKind() {
-    return kind;
-  }
-
-  public boolean isRequired() {
-    return required;
-  }
-
-  @Override public String getDescription() {
-    return "field '" + name + "'";
+    return builder.add(")").build();
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
index 624c3a6e..238a0947 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -1,6 +1,11 @@
 package butterknife.compiler;
 
-final class FieldDrawableBinding {
+import com.squareup.javapoet.CodeBlock;
+
+import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
+import static butterknife.compiler.BindingSet.UTILS;
+
+final class FieldDrawableBinding implements ResourceBinding {
   private final Id id;
   private final String name;
   private final Id tintAttributeId;
@@ -11,15 +16,22 @@
     this.tintAttributeId = tintAttributeId;
   }
 
-  public Id getId() {
+  @Override public Id id() {
     return id;
   }
 
-  public String getName() {
-    return name;
+  @Override public boolean requiresResources(int sdk) {
+    return false;
   }
 
-  public Id getTintAttributeId() {
-    return tintAttributeId;
+  @Override public CodeBlock render(int sdk) {
+    if (tintAttributeId.value != 0) {
+      return CodeBlock.of("target.$L = $T.getTintedDrawable(context, $L, $L)", name, UTILS, id.code,
+          tintAttributeId.code);
+    }
+    if (sdk >= 21) {
+      return CodeBlock.of("target.$L = context.getDrawable($L)", name, id.code);
+    }
+    return CodeBlock.of("target.$L = $T.getDrawable(context, $L)", name, CONTEXT_COMPAT, id.code);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index dea02197..d9510525 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -1,41 +1,105 @@
 package butterknife.compiler;
 
-final class FieldResourceBinding {
-  private final Id id;
-  private final String name;
-  private final String method;
-  private final boolean requiresUtils;
-  private final boolean themeable;
-
-  FieldResourceBinding(Id id, String name, String method, boolean requiresUtils,
-      boolean themeable) {
-    if (themeable && !requiresUtils) {
-      throw new IllegalArgumentException("Being themeable must require utils.");
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static java.util.Collections.singletonList;
+import static java.util.Collections.unmodifiableList;
+
+final class FieldResourceBinding implements ResourceBinding {
+  enum Type {
+    BITMAP(new ResourceMethod(BindingSet.BITMAP_FACTORY, "decodeResource", true, 1)),
+    BOOL("getBoolean"),
+    COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
+        new ResourceMethod(null, "getColor", false, 23)),
+    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColorStateList", false, 1),
+        new ResourceMethod(null, "getColorStateList", false, 23)),
+    DIMEN_AS_INT("getDimensionPixelSize"),
+    DIMEN_AS_FLOAT("getDimension"),
+    FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
+    INT("getInteger"),
+    INT_ARRAY("getIntArray"),
+    STRING("getString"),
+    STRING_ARRAY("getStringArray"),
+    TEXT_ARRAY("getTextArray"),
+    TYPED_ARRAY("obtainTypedArray");
+
+    private final List<ResourceMethod> methods;
+
+    Type(ResourceMethod... methods) {
+      List<ResourceMethod> methodList = new ArrayList<>(methods.length);
+      Collections.addAll(methodList, methods);
+      Collections.sort(methodList);
+      Collections.reverse(methodList);
+      this.methods = unmodifiableList(methodList);
+    }
+
+    Type(String methodName) {
+      methods = singletonList(new ResourceMethod(null, methodName, true, 1));
+    }
+
+    ResourceMethod methodForSdk(int sdk) {
+      for (ResourceMethod method : methods) {
+        if (method.sdk <= sdk) {
+          return method;
+        }
+      }
+      throw new AssertionError();
     }
-    this.id = id;
-    this.name = name;
-    this.method = method;
-    this.requiresUtils = requiresUtils;
-    this.themeable = themeable;
   }
 
-  public Id getId() {
-    return id;
+  static final class ResourceMethod implements Comparable<ResourceMethod> {
+    final ClassName typeName;
+    final String name;
+    final boolean requiresResources;
+    final int sdk;
+
+    ResourceMethod(ClassName typeName, String name, boolean requiresResources, int sdk) {
+      this.typeName = typeName;
+      this.name = name;
+      this.requiresResources = requiresResources;
+      this.sdk = sdk;
+    }
+
+    @Override public int compareTo(ResourceMethod other) {
+      return Integer.compare(sdk, other.sdk);
+    }
   }
 
-  public String getName() {
-    return name;
+  private final Id id;
+  private final String name;
+  private final Type type;
+
+  FieldResourceBinding(Id id, String name, Type type) {
+    this.id = id;
+    this.name = name;
+    this.type = type;
   }
 
-  public String getMethod() {
-    return method;
+  @Override public Id id() {
+    return id;
   }
 
-  public boolean requiresUtils() {
-    return requiresUtils;
+  @Override public boolean requiresResources(int sdk) {
+    return type.methodForSdk(sdk).requiresResources;
   }
 
-  public boolean isThemeable() {
-    return themeable;
+  @Override public CodeBlock render(int sdk) {
+    ResourceMethod method = type.methodForSdk(sdk);
+    if (method.typeName == null) {
+      if (method.requiresResources) {
+        return CodeBlock.of("target.$L = res.$L($L)", name, method.name, id.code);
+      }
+      return CodeBlock.of("target.$L = context.$L($L)", name, method.name, id.code);
+    }
+    if (method.requiresResources) {
+      return CodeBlock.of("target.$L = $T.$L(res, $L)", name, method.typeName, method.name,
+          id.code);
+    }
+    return CodeBlock.of("target.$L = $T.$L(context, $L)", name, method.typeName, method.name,
+        id.code);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java
new file mode 100644
index 00000000..42b63acb
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java
@@ -0,0 +1,12 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+
+interface ResourceBinding {
+  Id id();
+
+  /** True if the code for this binding requires a 'res' variable for {@code Resources} access. */
+  boolean requiresResources(int sdk);
+
+  CodeBlock render(int sdk);
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
index 6cd9bc4d..36372420 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
@@ -11,8 +11,8 @@
 
 final class ViewBindings {
   private final Id id;
-  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
-      methodBindings = new LinkedHashMap<>();
+  private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings =
+      new LinkedHashMap<>();
   private FieldViewBinding fieldBinding;
 
   ViewBindings(Id id) {
diff --git a/butterknife-compiler/src/test/java/butterknife/BindColorTest.java b/butterknife-compiler/src/test/java/butterknife/BindColorTest.java
deleted file mode 100644
index bafc009c..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindColorTest.java
+++ /dev/null
@@ -1,149 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindColorTest {
-  @Test public void simpleInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
-        + "  @BindColor(1) int one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.one = Utils.getColor(res, theme, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void simpleColorStateList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import android.content.res.ColorStateList;\n"
-        + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
-        + "  @BindColor(1) ColorStateList one;\n"
-        +"}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.one = Utils.getColorStateList(res, theme, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void typeMustBeIntOrColorStateList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
-        + "  @BindColor(1) String one;\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/ButterKnife.java b/butterknife-compiler/src/test/java/butterknife/ButterKnife.java
deleted file mode 100644
index 81d54661..00000000
--- a/butterknife-compiler/src/test/java/butterknife/ButterKnife.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package butterknife;
-
-import android.view.View;
-
-/** STUB! Required for test sources to compile. */
-public class ButterKnife {
-  public static Unbinder bind(Object target, View view) {
-    return Unbinder.EMPTY;
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/Unbinder.java b/butterknife-compiler/src/test/java/butterknife/Unbinder.java
deleted file mode 100644
index b19ecba3..00000000
--- a/butterknife-compiler/src/test/java/butterknife/Unbinder.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package butterknife;
-
-/** STUB! Required for test sources to compile. */
-public interface Unbinder {
-  void unbind();
-
-  Unbinder EMPTY = new Unbinder() {
-    @Override public void unbind() { }
-  };
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
similarity index 90%
rename from butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java
rename to butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
index caedd36c..d5143217 100644
--- a/butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
@@ -2,12 +2,12 @@
 
 import org.junit.Test;
 
-import static butterknife.compiler.BindingClass.asHumanDescription;
+import static butterknife.compiler.BindingSet.asHumanDescription;
 import static com.google.common.truth.Truth.assertThat;
 import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 
-public class ViewBindingClassTest {
+public class BindingSetTest {
   @Test public void humanDescriptionJoinWorks() {
     ViewBinding one = new TestViewBinding("one");
     ViewBinding two = new TestViewBinding("two");
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java
deleted file mode 100644
index 011cd83f..00000000
--- a/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-
-/**
- * DO NOT MODIFY! This is a Stub class for DebouncingOnClickListener.java found in the butterknife
- * module, in order to work around the fact that java projects can't depend on android libraries.
- */
-public abstract class DebouncingOnClickListener implements View.OnClickListener {
-
-  static boolean enabled = true;
-
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
-
-  @Override public final void onClick(View v) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public abstract void doClick(View v);
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/Utils.java b/butterknife-compiler/src/test/java/butterknife/internal/Utils.java
deleted file mode 100644
index 60aa33b7..00000000
--- a/butterknife-compiler/src/test/java/butterknife/internal/Utils.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package butterknife.internal;
-
-import android.content.res.ColorStateList;
-import android.content.res.Resources;
-import android.graphics.drawable.Drawable;
-import android.view.View;
-import java.util.List;
-
-public final class Utils {
-  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme, int id,
-      int tintAttrId) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static int getColor(Resources res, Resources.Theme theme, int id) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme, int id) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static Drawable getDrawable(Resources res, Resources.Theme theme, int id) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static float getFloat(Resources res, int id) {
-    throw new RuntimeException("Stub!");
-  }
-
-  @SafeVarargs
-  public static <T> T[] arrayOf(T... views) {
-    throw new RuntimeException("Stub!");
-  }
-
-  @SafeVarargs
-  public static <T> List<T> listOf(T... views) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static View findRequiredView(View source, int id, String who) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static <T> T findRequiredViewAsType(View source, int id, String who, Class<T> cls) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static <T> T findOptionalViewAsType(View source, int id, String who, Class<T> cls) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static <T> T castView(View view, int id, String who, Class<T> cls) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
-    throw new RuntimeException("Stub!");
-  }
-}
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index 047eaacf..79584af3 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -1,5 +1,4 @@
 apply plugin: 'com.android.application'
-apply plugin: 'com.neenbedankt.android-apt'
 
 android {
   compileSdkVersion rootProject.ext.compileSdkVersion
@@ -37,7 +36,7 @@ android {
 
 dependencies {
   compile project(':butterknife')
-  apt project(':butterknife-compiler')
+  annotationProcessor project(':butterknife-compiler')
 
   testCompile deps.junit
   testCompile deps.truth
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
index c5be63ce..ccda50b4 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -6,11 +6,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class SimpleActivityTest {
   @Test public void verifyContentViewBinding() {
     SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class).create().get();
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
index 59dad6ce..cd625c3e 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
@@ -1,23 +1,22 @@
 package com.example.butterknife.library;
 
 import android.content.Context;
-import android.view.LayoutInflater;
 import android.view.View;
 import com.example.butterknife.R;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
 import static com.example.butterknife.library.SimpleAdapter.ViewHolder;
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class SimpleAdapterTest {
   @Test public void verifyViewHolderViews() {
     Context context = RuntimeEnvironment.application;
 
-    View root = LayoutInflater.from(context).inflate(R.layout.simple_list_item, null);
+    View root = View.inflate(context, R.layout.simple_list_item, null);
     ViewHolder holder = new ViewHolder(root);
 
     assertThat(holder.word.getId()).isEqualTo(R.id.word);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
index 9cc6536c..55754140 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
@@ -7,12 +7,12 @@
 import butterknife.Unbinder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public final class UnbinderTest {
 
   @Test
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 5b365ef9..06fc3869 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -9,6 +9,8 @@ android {
     minSdkVersion rootProject.ext.minSdkVersion
 
     consumerProguardFiles 'proguard-rules.txt'
+
+    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
   }
 
   lintOptions {
@@ -20,14 +22,34 @@ android {
 dependencies {
   compile project(':butterknife-annotations')
   compile deps.supportAnnotations
-  provided deps.supportv4
+  compile deps.supportCompat
 
   lintRules project(':butterknife-lint')
 
+  androidTestCompile deps.junit
+  androidTestCompile deps.truth
+  androidTestCompile deps.supportTestRunner
+
   testCompile deps.junit
   testCompile deps.truth
-  testCompile deps.robolectric
-  testCompile deps.openglApi
+  testCompile deps.compiletesting
+  testCompile files(getRuntimeJar())
+  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testCompile project(':butterknife-compiler')
+}
+
+def getRuntimeJar() {
+  try {
+    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
+    File runtimeJar = new File(javaBase, "lib/rt.jar");
+    if (runtimeJar.exists()) {
+      return runtimeJar;
+    }
+    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
+    return runtimeJar.exists() ? runtimeJar : null;
+  } catch (IOException e) {
+    throw new RuntimeException(e);
+  }
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
similarity index 75%
rename from butterknife/src/test/java/butterknife/ButterKnifeTest.java
rename to butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
index 32c97e20..9bde9ff5 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -1,27 +1,23 @@
 package butterknife;
 
-import android.app.Activity;
+import android.annotation.TargetApi;
+import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.filters.SdkSuppress;
 import android.util.Property;
 import android.view.View;
-
+import java.util.List;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
 
+import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
 import static com.google.common.truth.Truth.assertThat;
 import static java.util.Arrays.asList;
 
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
+@TargetApi(ICE_CREAM_SANDWICH)
+@SdkSuppress(minSdkVersion = ICE_CREAM_SANDWICH)
 public class ButterKnifeTest {
   private static final Property<View, Boolean> PROPERTY_ENABLED =
       new Property<View, Boolean>(Boolean.class, "enabled") {
@@ -50,13 +46,15 @@
     }
   };
 
+  private final Context context = InstrumentationRegistry.getContext();
+
   @Before @After // Clear out cache of binders before and after each test.
   public void resetViewsCache() {
     ButterKnife.BINDINGS.clear();
   }
 
   @Test public void propertyAppliedToView() {
-    View view = new View(RuntimeEnvironment.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
 
     ButterKnife.apply(view, PROPERTY_ENABLED, false);
@@ -64,9 +62,9 @@ public void resetViewsCache() {
   }
 
   @Test public void propertyAppliedToEveryViewInList() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -80,9 +78,9 @@ public void resetViewsCache() {
   }
 
   @Test public void propertyAppliedToEveryViewInArray() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -96,7 +94,7 @@ public void resetViewsCache() {
   }
 
   @Test public void actionAppliedToView() {
-    View view = new View(RuntimeEnvironment.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
 
     ButterKnife.apply(view, ACTION_DISABLE);
@@ -105,7 +103,7 @@ public void resetViewsCache() {
   }
 
   @Test public void actionsAppliedToView() {
-    View view = new View(RuntimeEnvironment.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
     assertThat(view.getAlpha()).isEqualTo(1f);
 
@@ -115,9 +113,9 @@ public void resetViewsCache() {
   }
 
   @Test public void actionAppliedToEveryViewInList() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -131,9 +129,9 @@ public void resetViewsCache() {
   }
 
   @Test public void actionAppliedToEveryViewInArray() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -147,9 +145,9 @@ public void resetViewsCache() {
   }
 
   @Test public void actionsAppliedToEveryViewInList() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -169,9 +167,9 @@ public void resetViewsCache() {
   }
 
   @Test public void actionsAppliedToEveryViewInArray() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -191,7 +189,7 @@ public void resetViewsCache() {
   }
 
   @Test public void setterAppliedToView() {
-    View view = new View(RuntimeEnvironment.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
 
     ButterKnife.apply(view, SETTER_ENABLED, false);
@@ -200,9 +198,9 @@ public void resetViewsCache() {
   }
 
   @Test public void setterAppliedToEveryViewInList() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -216,9 +214,9 @@ public void resetViewsCache() {
   }
 
   @Test public void setterAppliedToEveryViewInArray() {
-    View view1 = new View(RuntimeEnvironment.application);
-    View view2 = new View(RuntimeEnvironment.application);
-    View view3 = new View(RuntimeEnvironment.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -239,12 +237,11 @@ public void resetViewsCache() {
     assertThat(ButterKnife.bind(example, (View) null)).isSameAs(Unbinder.EMPTY);
   }
 
-  @Ignore("This doesn't work!") // TODO
   @Test public void bindingKnownPackagesIsNoOp() {
-    Activity activity = Robolectric.buildActivity(Activity.class).attach().setup().get();
-    ButterKnife.bind(activity);
+    View view = new View(context);
+    ButterKnife.bind(view);
     assertThat(ButterKnife.BINDINGS).isEmpty();
-    ButterKnife.bind(new Object(), activity);
+    ButterKnife.bind(new Object(), view);
     assertThat(ButterKnife.BINDINGS).isEmpty();
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/UtilsTest.java b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
similarity index 82%
rename from butterknife/src/test/java/butterknife/internal/UtilsTest.java
rename to butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
index efbe8839..af44c804 100644
--- a/butterknife/src/test/java/butterknife/internal/UtilsTest.java
+++ b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -1,20 +1,15 @@
 package butterknife.internal;
 
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
 import android.view.View;
-import butterknife.shadow.EditModeShadowView;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 
 import static butterknife.internal.Utils.arrayOf;
 import static butterknife.internal.Utils.listOf;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
 public final class UtilsTest {
   @Test public void listOfFiltersNull() {
     assertThat(listOf(null, null, null)).isEmpty();
@@ -37,7 +32,8 @@
   }
 
   @Test public void finderThrowsNiceError() {
-    View view = new View(RuntimeEnvironment.application);
+    Context context = InstrumentationRegistry.getContext();
+    View view = new View(context);
     try {
       Utils.findRequiredView(view, android.R.id.button1, "yo mama");
       fail();
@@ -48,9 +44,9 @@
     }
   }
 
-  @Config(shadows = EditModeShadowView.class)
   @Test public void finderThrowsLessNiceErrorInEditMode() {
-    View view = new View(RuntimeEnvironment.application);
+    Context context = InstrumentationRegistry.getContext();
+    View view = new EditModeView(context);
     try {
       Utils.findRequiredView(view, android.R.id.button1, "yo mama");
       fail();
@@ -60,4 +56,14 @@
           + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
     }
   }
+
+  static final class EditModeView extends View {
+    EditModeView(Context context) {
+      super(context);
+    }
+
+    @Override public boolean isInEditMode() {
+      return true;
+    }
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index 97e82bdf..52b2fc23 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -1,57 +1,47 @@
 package butterknife.internal;
 
-import android.content.res.ColorStateList;
+import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.support.annotation.AttrRes;
-import android.support.annotation.ColorRes;
 import android.support.annotation.DimenRes;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.IdRes;
 import android.support.annotation.UiThread;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.TypedValue;
 import android.view.View;
 import java.lang.reflect.Array;
 import java.util.List;
 
-@SuppressWarnings({ "deprecation", "WeakerAccess" }) // Used by generated code.
+@SuppressWarnings("WeakerAccess") // Used by generated code.
 public final class Utils {
-  private static final boolean HAS_SUPPORT_V4 = hasSupportV4();
   private static final TypedValue VALUE = new TypedValue();
 
-  private static boolean hasSupportV4() {
-    try {
-      Class.forName("android.support.v4.graphics.drawable.DrawableCompat");
-      return true;
-    } catch (ClassNotFoundException ignored) {
-      return false;
-    } catch (VerifyError ignored) {
-      return false;
-    }
-  }
-
-  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme,
+  @UiThread // Implicit synchronization for use of shared resource VALUE.
+  public static Drawable getTintedDrawable(Context context,
       @DrawableRes int id, @AttrRes int tintAttrId) {
-    if (HAS_SUPPORT_V4) {
-      return SupportV4.getTintedDrawable(res, theme, id, tintAttrId);
+    boolean attributeFound = context.getTheme().resolveAttribute(tintAttrId, VALUE, true);
+    if (!attributeFound) {
+      throw new Resources.NotFoundException("Required tint color attribute with name "
+          + context.getResources().getResourceEntryName(tintAttrId)
+          + " and attribute ID "
+          + tintAttrId
+          + " was not found.");
     }
-    throw new RuntimeException(
-        "Android support-v4 library is required for @BindDrawable with tint.");
-  }
 
-  public static int getColor(Resources res, Resources.Theme theme, @ColorRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
-      return res.getColor(id);
-    }
-    return res.getColor(id, theme);
+    Drawable drawable = ContextCompat.getDrawable(context, id);
+    drawable = DrawableCompat.wrap(drawable.mutate());
+    int color = ContextCompat.getColor(context, VALUE.resourceId);
+    DrawableCompat.setTint(drawable, color);
+    return drawable;
   }
 
   @UiThread // Implicit synchronization for use of shared resource VALUE.
-  public static float getFloat(Resources res, @DimenRes int id) {
+  public static float getFloat(Context context, @DimenRes int id) {
     TypedValue value = VALUE;
-    res.getValue(id, value, true);
+    context.getResources().getValue(id, value, true);
     if (value.type == TypedValue.TYPE_FLOAT) {
       return value.getFloat();
     }
@@ -59,21 +49,6 @@ public static float getFloat(Resources res, @DimenRes int id) {
         + " type #0x" + Integer.toHexString(value.type) + " is not valid");
   }
 
-  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme,
-      @ColorRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
-      return res.getColorStateList(id);
-    }
-    return res.getColorStateList(id, theme);
-  }
-
-  public static Drawable getDrawable(Resources res, Resources.Theme theme, @DrawableRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
-      return res.getDrawable(id);
-    }
-    return res.getDrawable(id, theme);
-  }
-
   @SafeVarargs
   public static <T> T[] arrayOf(T... views) {
     return filterNull(views);
@@ -102,27 +77,6 @@ public static Drawable getDrawable(Resources res, Resources.Theme theme, @Drawab
     return newViews;
   }
 
-  static class SupportV4 {
-    private static final TypedValue OUT_VALUE = new TypedValue();
-
-    static Drawable getTintedDrawable(Resources res, Resources.Theme theme, @DrawableRes int id,
-        @AttrRes int tintAttributeId) {
-      boolean attributeFound = theme.resolveAttribute(tintAttributeId, OUT_VALUE, true);
-      if (!attributeFound) {
-        throw new Resources.NotFoundException("Required tint color attribute with name "
-            + res.getResourceEntryName(tintAttributeId)
-            + " and attribute ID "
-            + tintAttributeId
-            + " was not found.");
-      }
-
-      Drawable drawable = getDrawable(res, theme, id);
-      drawable = DrawableCompat.wrap(drawable.mutate());
-      int color = getColor(res, theme, OUT_VALUE.resourceId);
-      DrawableCompat.setTint(drawable, color);
-      return drawable;
-    }
-  }
   public static <T> T findOptionalViewAsType(View source, @IdRes int id, String who,
       Class<T> cls) {
     View view = source.findViewById(id);
diff --git a/butterknife-compiler/src/test/java/android/support/v4/view/ViewPager.java b/butterknife/src/test/java/android/support/v4/view/ViewPager.java
similarity index 100%
rename from butterknife-compiler/src/test/java/android/support/v4/view/ViewPager.java
rename to butterknife/src/test/java/android/support/v4/view/ViewPager.java
diff --git a/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java b/butterknife/src/test/java/butterknife/BindArrayTest.java
similarity index 78%
rename from butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
rename to butterknife/src/test/java/butterknife/BindArrayTest.java
index 25ce125f..ade8a399 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
+++ b/butterknife/src/test/java/butterknife/BindArrayTest.java
@@ -29,32 +29,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getStringArray(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -88,32 +83,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getIntArray(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -146,32 +136,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getTextArray(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -205,32 +190,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.obtainTypedArray(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java b/butterknife/src/test/java/butterknife/BindBitmapTest.java
similarity index 83%
rename from butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java
rename to butterknife/src/test/java/butterknife/BindBitmapTest.java
index 4dc65344..820b6dd0 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java
+++ b/butterknife/src/test/java/butterknife/BindBitmapTest.java
@@ -31,32 +31,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = BitmapFactory.decodeResource(res, 1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java b/butterknife/src/test/java/butterknife/BindBoolTest.java
similarity index 82%
rename from butterknife-compiler/src/test/java/butterknife/BindBoolTest.java
rename to butterknife/src/test/java/butterknife/BindBoolTest.java
index bf44b964..92148b15 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java
+++ b/butterknife/src/test/java/butterknife/BindBoolTest.java
@@ -29,32 +29,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getBoolean(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/BindColorTest.java b/butterknife/src/test/java/butterknife/BindColorTest.java
new file mode 100644
index 00000000..37a42471
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindColorTest.java
@@ -0,0 +1,236 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindColorTest {
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ContextCompat.getColor(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleIntSdk23() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getColor(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=23")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.content.res.ColorStateList;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) ColorStateList one;\n"
+        +"}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ContextCompat.getColorStateList(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleColorStateListSdk23() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.content.res.ColorStateList;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) ColorStateList one;\n"
+        +"}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getColorStateList(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=23")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindColor(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java b/butterknife/src/test/java/butterknife/BindDimenTest.java
similarity index 79%
rename from butterknife-compiler/src/test/java/butterknife/BindDimenTest.java
rename to butterknife/src/test/java/butterknife/BindDimenTest.java
index e0509b6a..94f7db26 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java
+++ b/butterknife/src/test/java/butterknife/BindDimenTest.java
@@ -29,32 +29,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getDimension(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -87,32 +82,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getDimensionPixelSize(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java b/butterknife/src/test/java/butterknife/BindDrawableTest.java
similarity index 60%
rename from butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java
rename to butterknife/src/test/java/butterknife/BindDrawableTest.java
index 5803230d..ddce3db4 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java
+++ b/butterknife/src/test/java/butterknife/BindDrawableTest.java
@@ -24,40 +24,32 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.CallSuper;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.one = Utils.getDrawable(res, theme, 1);\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ContextCompat.getDrawable(context, 1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -70,6 +62,58 @@
         .generatesSources(bindingSource);
   }
 
+  @Test public void simpleSdk21() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.graphics.drawable.Drawable;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindDrawable(1) Drawable one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getDrawable(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=21")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
   @Test public void withTint() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -85,40 +129,32 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.CallSuper;\n"
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.one = Utils.getTintedDrawable(res, theme, 1, 2);\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = Utils.getTintedDrawable(context, 1, 2);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindFloatTest.java b/butterknife/src/test/java/butterknife/BindFloatTest.java
similarity index 77%
rename from butterknife-compiler/src/test/java/butterknife/BindFloatTest.java
rename to butterknife/src/test/java/butterknife/BindFloatTest.java
index cae40a47..871ae519 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindFloatTest.java
+++ b/butterknife/src/test/java/butterknife/BindFloatTest.java
@@ -23,39 +23,32 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.CallSuper;\n"
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
-        + "    Resources res = context.getResources();\n"
-        + "    target.one = Utils.getFloat(res, 1);\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = Utils.getFloat(context, 1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindIntTest.java b/butterknife/src/test/java/butterknife/BindIntTest.java
similarity index 82%
rename from butterknife-compiler/src/test/java/butterknife/BindIntTest.java
rename to butterknife/src/test/java/butterknife/BindIntTest.java
index 5e68101e..6749e747 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindIntTest.java
+++ b/butterknife/src/test/java/butterknife/BindIntTest.java
@@ -29,32 +29,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getInteger(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindStringTest.java b/butterknife/src/test/java/butterknife/BindStringTest.java
similarity index 82%
rename from butterknife-compiler/src/test/java/butterknife/BindStringTest.java
rename to butterknife/src/test/java/butterknife/BindStringTest.java
index 87e2cbec..44675a24 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindStringTest.java
+++ b/butterknife/src/test/java/butterknife/BindStringTest.java
@@ -29,32 +29,27 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getString(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
similarity index 90%
rename from butterknife-compiler/src/test/java/butterknife/BindViewTest.java
rename to butterknife/src/test/java/butterknife/BindViewTest.java
index 36ad9d28..e2e4ef95 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -33,20 +33,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -125,8 +125,8 @@
         + "  public void unbind() {\n"
         + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -167,20 +167,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Base_ViewBinding<T extends Base> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Base_ViewBinding implements Unbinder {\n"
+        + "  private Base target;\n"
         + "  @UiThread\n"
-        + "  public Base_ViewBinding(T target, View source) {\n"
+        + "  public Base_ViewBinding(Base target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Base target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -190,18 +190,23 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public final class Test_ViewBinding extends Base_ViewBinding<Test> {\n"
+        + "public final class Test_ViewBinding extends Base_ViewBinding {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
         + "    Test target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
         + "    target.thing = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -236,20 +241,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Outer$Test_ViewBinding<T extends Outer.Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Outer$Test_ViewBinding implements Unbinder {\n"
+        + "  private Outer.Test target;\n"
         + "  @UiThread\n"
-        + "  public Outer$Test_ViewBinding(T target, View source) {\n"
+        + "  public Outer$Test_ViewBinding(Outer.Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Outer.Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -282,20 +287,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -329,20 +334,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -377,20 +382,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -428,11 +433,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
@@ -448,12 +453,12 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.thing1 = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -490,11 +495,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
@@ -510,12 +515,12 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.thing1 = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -567,20 +572,20 @@
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.view = source.findViewById(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.view = null;\n"
         + "    this.target = null;\n"
+        + "    target.view = null;\n"
         + "  }\n"
         + "}"
     );
@@ -628,20 +633,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.view = null;\n"
         + "    this.target = null;\n"
+        + "    target.view = null;\n"
         + "  }\n"
         + "}"
     );
@@ -651,18 +656,23 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
         + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(T target, View source) {\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.thing = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -710,20 +720,20 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.view = null;\n"
         + "    this.target = null;\n"
+        + "    target.view = null;\n"
         + "  }\n"
         + "}"
     );
@@ -733,18 +743,23 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
         + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(T target, View source) {\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
         + "    target.thing = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java b/butterknife/src/test/java/butterknife/BindViewsTest.java
similarity index 92%
rename from butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
rename to butterknife/src/test/java/butterknife/BindViewsTest.java
index 511dc41e..d8b78979 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewsTest.java
@@ -53,10 +53,10 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.arrayOf(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
@@ -66,10 +66,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -102,10 +102,10 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.arrayOf(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
@@ -115,10 +115,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -154,10 +154,10 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.arrayOf(\n"
         + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n"
@@ -167,10 +167,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -204,10 +204,10 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
@@ -217,10 +217,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -292,10 +292,10 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
         + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n"
@@ -305,10 +305,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -342,10 +342,10 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
@@ -355,10 +355,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -395,10 +395,10 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
         + "        source.findViewById(1), \n"
@@ -408,10 +408,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
similarity index 87%
rename from butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java
rename to butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
index 2ef8eb6b..b1ac9f2f 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java
+++ b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
@@ -29,11 +29,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -48,10 +48,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((CompoundButton) view1).setOnCheckedChangeListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
similarity index 92%
rename from butterknife-compiler/src/test/java/butterknife/OnClickTest.java
rename to butterknife/src/test/java/butterknife/OnClickTest.java
index 4a7f3896..71e21a60 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -29,11 +29,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -48,10 +48,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -101,10 +101,10 @@
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -140,12 +140,12 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  private View view2;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");\n"
@@ -170,12 +170,12 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
         + "    view2.setOnClickListener(null);\n"
         + "    view2 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -211,11 +211,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
@@ -231,12 +231,12 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.view = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -298,15 +298,15 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view0;\n"
         + "  private View view1;\n"
         + "  private View view2;\n"
         + "  private View view3;\n"
         + "  private View view4;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 0, \"method 'click0'\");\n"
@@ -353,7 +353,8 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view0.setOnClickListener(null);\n"
         + "    view0 = null;\n"
         + "    view1.setOnClickListener(null);\n"
@@ -364,7 +365,6 @@
         + "    view3 = null;\n"
         + "    view4.setOnClickListener(null);\n"
         + "    view4 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -398,13 +398,13 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  private View view2;\n"
         + "  private View view3;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'click'\");\n"
@@ -435,14 +435,14 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
         + "    view2.setOnClickListener(null);\n"
         + "    view2 = null;\n"
         + "    view3.setOnClickListener(null);\n"
         + "    view3 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -474,11 +474,11 @@
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = source.findViewById(1);\n"
@@ -495,12 +495,12 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    if (view1 != null) {\n"
         + "      view1.setOnClickListener(null);\n"
         + "      view1 = null;\n"
         + "    }\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -537,11 +537,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
@@ -557,12 +557,12 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.view = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
similarity index 87%
rename from butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java
rename to butterknife/src/test/java/butterknife/OnEditorActionTest.java
index abe9b72c..74d681a0 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java
+++ b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
@@ -30,11 +30,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -49,10 +49,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((TextView) view1).setOnEditorActionListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
similarity index 86%
rename from butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java
rename to butterknife/src/test/java/butterknife/OnFocusChangeTest.java
index 2c06afb6..b503b8ea 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java
+++ b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
@@ -28,11 +28,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -47,10 +47,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnFocusChangeListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java b/butterknife/src/test/java/butterknife/OnItemClickTest.java
similarity index 88%
rename from butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
rename to butterknife/src/test/java/butterknife/OnItemClickTest.java
index 1d3252db..0da6d879 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java
@@ -30,11 +30,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -49,10 +49,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -92,11 +92,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -111,10 +111,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -153,11 +153,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -172,10 +172,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -214,11 +214,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -234,10 +234,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -275,11 +275,11 @@
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View viewSource;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    viewSource = source;\n"
         + "    ((AdapterView<?>) source).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
@@ -292,10 +292,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) viewSource).setOnItemClickListener(null);\n"
         + "    viewSource = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -326,11 +326,11 @@
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View viewSource;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    viewSource = source;\n"
         + "    ((AdapterView<?>) source).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
@@ -343,10 +343,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) viewSource).setOnItemClickListener(null);\n"
         + "    viewSource = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
similarity index 87%
rename from butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java
rename to butterknife/src/test/java/butterknife/OnItemLongClickTest.java
index 9e80d7d3..3584b0f7 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
@@ -29,11 +29,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -48,10 +48,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemLongClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
similarity index 89%
rename from butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java
rename to butterknife/src/test/java/butterknife/OnItemSelectedTest.java
index 16ee0bd1..1a6fd281 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
@@ -30,11 +30,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -52,10 +52,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -90,11 +90,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -112,10 +112,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -152,11 +152,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");\n"
@@ -175,10 +175,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -215,13 +215,13 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  private View view2;\n"
         + "  private View view3;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");\n"
@@ -262,14 +262,14 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
         + "    view1 = null;\n"
         + "    ((AdapterView<?>) view2).setOnItemSelectedListener(null);\n"
         + "    view2 = null;\n"
         + "    ((AdapterView<?>) view3).setOnItemSelectedListener(null);\n"
         + "    view3 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java b/butterknife/src/test/java/butterknife/OnLongClickTest.java
similarity index 89%
rename from butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java
rename to butterknife/src/test/java/butterknife/OnLongClickTest.java
index da6318aa..fc324b46 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnLongClickTest.java
@@ -31,11 +31,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -50,10 +50,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnLongClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
similarity index 89%
rename from butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java
rename to butterknife/src/test/java/butterknife/OnPageChangeTest.java
index 0cd24c49..0b0cd55f 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java
+++ b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
@@ -29,12 +29,12 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  private ViewPager.OnPageChangeListener view1OnPageChangeListener;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -56,11 +56,11 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((ViewPager) view1).removeOnPageChangeListener(view1OnPageChangeListener);\n"
         + "    view1OnPageChangeListener = null;\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
similarity index 89%
rename from butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java
rename to butterknife/src/test/java/butterknife/OnTextChangedTest.java
index fbc605ce..ac027c6e 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java
+++ b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
@@ -32,12 +32,12 @@
         + "import java.lang.CharSequence;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  private TextWatcher view1TextWatcher;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -59,11 +59,11 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    ((TextView) view1).removeTextChangedListener(view1TextWatcher);\n"
         + "    view1TextWatcher = null;\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/OnTouchTest.java b/butterknife/src/test/java/butterknife/OnTouchTest.java
similarity index 89%
rename from butterknife-compiler/src/test/java/butterknife/OnTouchTest.java
rename to butterknife/src/test/java/butterknife/OnTouchTest.java
index 1470bf93..3e32bc81 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnTouchTest.java
+++ b/butterknife/src/test/java/butterknife/OnTouchTest.java
@@ -29,11 +29,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -48,10 +48,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnTouchListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/RClassTest.java b/butterknife/src/test/java/butterknife/RClassTest.java
similarity index 79%
rename from butterknife-compiler/src/test/java/butterknife/RClassTest.java
rename to butterknife/src/test/java/butterknife/RClassTest.java
index 805de0ef..8179e875 100644
--- a/butterknife-compiler/src/test/java/butterknife/RClassTest.java
+++ b/butterknife/src/test/java/butterknife/RClassTest.java
@@ -97,30 +97,25 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.one = res.getInteger(R.integer.res);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -153,30 +148,25 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
         + "    Resources res = context.getResources();\n"
         + "    target.bool = res.getBoolean(R.bool.res);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -203,38 +193,30 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.CallSuper;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.black = Utils.getColor(res, theme, android.R.color.black);\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.black = ContextCompat.getColor(context, android.R.color.black);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife-compiler/src/test/java/butterknife/TestGeneratingProcessor.java b/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
similarity index 100%
rename from butterknife-compiler/src/test/java/butterknife/TestGeneratingProcessor.java
rename to butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife/src/test/java/butterknife/UnbinderTest.java
similarity index 50%
rename from butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
rename to butterknife/src/test/java/butterknife/UnbinderTest.java
index a3d2c4f4..e5c09b26 100644
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife/src/test/java/butterknife/UnbinderTest.java
@@ -37,11 +37,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");\n"
@@ -64,14 +64,14 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.view = null;\n"
         + "    target.view2 = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1.setOnLongClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -84,355 +84,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void unbinderRespectsNullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "import butterknife.Optional;\n"
-        + "public class Test extends Activity {\n"
-        + "  @Optional @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = source.findViewById(1);\n"
-        + "    if (view != null) {\n"
-        + "      view1 = view;\n"
-        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "        @Override\n"
-        + "        public void doClick(View p0) {\n"
-        + "          target.doStuff();\n"
-        + "        }\n"
-        + "      });\n"
-        + "    }\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    if (view1 != null) {\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1 = null;\n"
-        + "    }\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void childBindsSecondUnbinder() {
-    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
-        + "  @OnClick(1) void doStuff1() {}\n"
-        + "}"
-    );
-
-    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class TestOne extends Test {\n"
-        + "  @OnClick(1) void doStuff2() {}\n"
-        + "}"
-    );
-
-    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
-        + "package test;\n"
-        + "class TestTwo extends Test {}"
-    );
-
-    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(final T target, View source) {\n"
-        + "    super(target, source);\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff2();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  public void unbind() {\n"
-        + "    super.unbind();\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSources()).that(asList(source1, source2, source3))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(binding1Source, binding2Source);
-  }
-
-  @Test public void childUsesOwnUnbinder() {
-    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
-        + "  @OnClick(1) void doStuff1() { }\n"
-        + "}"
-    );
-
-    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class TestOne extends Test {\n"
-        + "  @OnClick(1) void doStuff2() { }\n"
-        + "}"
-    );
-
-    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(final T target, View source) {\n"
-        + "    super(target, source);\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff2();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  public void unbind() {\n"
-        + "    super.unbind();\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSources()).that(asList(source1, source2))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(binding1Source, binding2Source);
-  }
-
-  @Test public void childInDifferentPackage() {
-    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
-        + "  @OnClick(1) void doStuff1() { }\n"
-        + "}"
-    );
-
-    JavaFileObject source2 = JavaFileObjects.forSourceString("test.one.TestOne", ""
-        + "package test.one;\n"
-        + "import test.Test;\n"
-        + "import butterknife.OnClick;\n"
-        + "class TestOne extends Test {\n"
-        + "  @OnClick(2) void doStuff2() { }\n"
-        + "}"
-    );
-
-    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject binding2Source =
-        JavaFileObjects.forSourceString("test/one/TestOne_ViewBinding", ""
-            + "package test.one;\n"
-            + "import android.support.annotation.UiThread;\n"
-            + "import android.view.View;\n"
-            + "import butterknife.internal.DebouncingOnClickListener;\n"
-            + "import butterknife.internal.Utils;\n"
-            + "import java.lang.Override;\n"
-            + "import test.Test_ViewBinding;\n"
-            + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
-            + "  private View view2;\n"
-            + "  @UiThread\n"
-            + "  public TestOne_ViewBinding(final T target, View source) {\n"
-            + "    super(target, source);\n"
-            + "    View view;\n"
-            + "    view = Utils.findRequiredView(source, 2, \"method 'doStuff2'\");\n"
-            + "    view2 = view;\n"
-            + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-            + "      @Override\n"
-            + "      public void doClick(View p0) {\n"
-            + "        target.doStuff2();\n"
-            + "      }\n"
-            + "    });\n"
-            + "  }\n"
-            + "  @Override\n"
-            + "  public void unbind() {\n"
-            + "    super.unbind();\n"
-            + "    view2.setOnClickListener(null);\n"
-            + "    view2 = null;\n"
-            + "  }\n"
-            + "}"
-        );
-
-    assertAbout(javaSources()).that(asList(source1, source2))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(binding1Source, binding2Source);
-  }
-
   @Test public void unbindingThroughAbstractChild() {
     JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -445,7 +96,7 @@
 
     JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
         + "package test;\n"
-        + "public class TestOne extends Test {\n"
+        + "public abstract class TestOne extends Test {\n"
         + "}"
     );
 
@@ -467,11 +118,11 @@
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
@@ -486,10 +137,10 @@
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -500,12 +151,15 @@
         + "import android.view.View;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class TestTwo_ViewBinding<T extends TestTwo> extends Test_ViewBinding<T> {\n"
+        + "public class TestTwo_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestTwo target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public TestTwo_ViewBinding(final T target, View source) {\n"
+        + "  public TestTwo_ViewBinding(final TestTwo target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
         + "    view1 = view;\n"
@@ -518,9 +172,11 @@
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    super.unbind();\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -658,38 +314,30 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.CallSuper;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class A_ViewBinding<T extends A> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class A_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(A, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(A target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
-        + "  public A_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.blackColor = Utils.getColor(res, theme, android.R.color.black);\n"
+        + "  public A_ViewBinding(A target, Context context) {\n"
+        + "    target.blackColor = ContextCompat.getColor(context, android.R.color.black);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -698,27 +346,24 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
-        + "public class B_ViewBinding<T extends B> extends A_ViewBinding<T> {\n"
+        + "public class B_ViewBinding extends A_ViewBinding {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(B, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(B target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
-        + "  public B_ViewBinding(T target, Context context) {\n"
+        + "  public B_ViewBinding(B target, Context context) {\n"
         + "    super(target, context);\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.whiteColor = Utils.getColor(res, theme, android.R.color.white);\n"
+        + "    target.whiteColor = ContextCompat.getColor(context, android.R.color.white);\n"
         + "  }\n"
         + "}"
     );
@@ -727,26 +372,29 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class C_ViewBinding<T extends C> extends B_ViewBinding<T> {\n"
+        + "public class C_ViewBinding extends B_ViewBinding {\n"
+        + "  private C target;\n"
         + "  @UiThread\n"
-        + "  public C_ViewBinding(T target, View source) {\n"
+        + "  public C_ViewBinding(C target, View source) {\n"
         + "    super(target, source.getContext());\n"
+        + "    this.target = target;\n"
         + "    target.button1 = Utils.findRequiredView(source, android.R.id.button1, \"field 'button1'\");\n"
         + "    Context context = source.getContext();\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.transparentColor = Utils.getColor(res, theme, android.R.color.transparent);\n"
+        + "    target.transparentColor = ContextCompat.getColor(context, android.R.color.transparent);\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    C target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.button1 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -754,18 +402,15 @@
     JavaFileObject bindingDSource = JavaFileObjects.forSourceString("test/D_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "public class D_ViewBinding<T extends D> extends C_ViewBinding<T> {\n"
+        + "public class D_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
-        + "  public D_ViewBinding(T target, View source) {\n"
+        + "  public D_ViewBinding(D target, View source) {\n"
         + "    super(target, source);\n"
         + "    Context context = source.getContext();\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.grayColor = Utils.getColor(res, theme, android.R.color.darker_gray);\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.darker_gray);\n"
         + "  }\n"
         + "}"
     );
@@ -773,18 +418,15 @@
     JavaFileObject bindingESource = JavaFileObjects.forSourceString("test/E_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "public class E_ViewBinding<T extends E> extends C_ViewBinding<T> {\n"
+        + "public class E_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
-        + "  public E_ViewBinding(T target, View source) {\n"
+        + "  public E_ViewBinding(E target, View source) {\n"
         + "    super(target, source);\n"
         + "    Context context = source.getContext();\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.backgroundDarkColor = Utils.getColor(res, theme, android.R.color.background_dark);\n"
+        + "    target.backgroundDarkColor = ContextCompat.getColor(context, android.R.color.background_dark);\n"
         + "  }\n"
         + "}"
     );
@@ -792,18 +434,15 @@
     JavaFileObject bindingFSource = JavaFileObjects.forSourceString("test/F_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "public class F_ViewBinding<T extends F> extends D_ViewBinding<T> {\n"
+        + "public class F_ViewBinding extends D_ViewBinding {\n"
         + "  @UiThread\n"
-        + "  public F_ViewBinding(T target, View source) {\n"
+        + "  public F_ViewBinding(F target, View source) {\n"
         + "    super(target, source);\n"
         + "    Context context = source.getContext();\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.backgroundLightColor = Utils.getColor(res, theme, android.R.color.background_light);\n"
+        + "    target.backgroundLightColor = ContextCompat.getColor(context, android.R.color.background_light);\n"
         + "  }\n"
         + "}"
     );
@@ -811,17 +450,20 @@
     JavaFileObject bindingGSource = JavaFileObjects.forSourceString("test/G_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class G_ViewBinding<T extends G> extends E_ViewBinding<T> {\n"
+        + "public class G_ViewBinding extends E_ViewBinding {\n"
+        + "  private G target;\n"
         + "  private View view16908290;\n"
         + "  @UiThread\n"
-        + "  public G_ViewBinding(final T target, View source) {\n"
+        + "  public G_ViewBinding(final G target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    View view;\n"
         + "    target.button2 = Utils.findRequiredView(source, android.R.id.button2, \"field 'button2'\");\n"
         + "    view = Utils.findRequiredView(source, android.R.id.content, \"method 'onClick'\");\n"
@@ -833,17 +475,17 @@
         + "      }\n"
         + "    });\n"
         + "    Context context = source.getContext();\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.grayColor = Utils.getColor(res, theme, android.R.color.darker_gray);\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.darker_gray);\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    G target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
         + "    target.button2 = null;\n"
         + "    view16908290.setOnClickListener(null);\n"
         + "    view16908290 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -851,26 +493,29 @@
     JavaFileObject bindingHSource = JavaFileObjects.forSourceString("test/H_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class H_ViewBinding<T extends H> extends G_ViewBinding<T> {\n"
+        + "public class H_ViewBinding extends G_ViewBinding {\n"
+        + "  private H target;\n"
         + "  @UiThread\n"
-        + "  public H_ViewBinding(T target, View source) {\n"
+        + "  public H_ViewBinding(H target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.button3 = Utils.findRequiredView(source, android.R.id.button3, \"field 'button3'\");\n"
         + "    Context context = source.getContext();\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    target.grayColor = Utils.getColor(res, theme, android.R.color.primary_text_dark);\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.primary_text_dark);\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    H target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.button3 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
deleted file mode 100644
index e4fd9951..00000000
--- a/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package butterknife.shadow;
-
-import android.view.View;
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowView;
-
-/**
- * Behaves just like standard Robolectric views, but always reports that it is in Edit Mode.
- */
-@Implements(View.class)
-public class EditModeShadowView extends ShadowView {
-  @SuppressWarnings("UnusedDeclaration")
-  @Implementation
-  public boolean isInEditMode() {
-    return true;
-  }
-}
diff --git a/butterknife/src/test/resources/robolectric.properties b/butterknife/src/test/resources/robolectric.properties
deleted file mode 100644
index 01684e1e..00000000
--- a/butterknife/src/test/resources/robolectric.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-constants=butterknife.BuildConfig
-sdk=23
diff --git a/checkstyle.xml b/checkstyle.xml
index 67d211ce..a91a2812 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -16,7 +16,7 @@
 
   <!-- Space after 'for' and 'if' -->
   <module name="RegexpSingleline">
-    <property name="format" value="^\s*(for|if)[^ ]"/>
+    <property name="format" value="^\s*(for|if)\b[^ ]"/>
     <property name="message" value="Space needed before opening parenthesis."/>
   </module>
 
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3baa851b..6ffa2378 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f3fdc34d..a65e9c08 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Sep 02 22:21:42 PDT 2016
+#Mon Sep 19 21:26:00 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.1-all.zip
diff --git a/gradlew b/gradlew
index 27309d92..9aa616c2 100755
--- a/gradlew
+++ b/gradlew
@@ -161,4 +161,9 @@ function splitJvmOpts() {
 eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
 JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
 
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [[ "$(uname)" == "Darwin" ]] && [[ "$HOME" == "$PWD" ]]; then
+  cd "$(dirname "$0")"
+fi
+
 exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974e..e95643d6 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/sample/app/build.gradle b/sample/app/build.gradle
index 6fd47a57..41fa2f5f 100644
--- a/sample/app/build.gradle
+++ b/sample/app/build.gradle
@@ -1,5 +1,4 @@
 apply plugin: 'com.android.application'
-apply plugin: 'com.neenbedankt.android-apt'
 
 android {
   compileSdkVersion rootProject.ext.compileSdkVersion
@@ -31,14 +30,13 @@ android {
 }
 
 dependencies {
-  compile 'com.jakewharton:butterknife:8.2.0'
-  apt 'com.jakewharton:butterknife-compiler:8.2.0'
+  compile deps.butterknife
+  annotationProcessor deps.butterknifeCompiler
 
   compile project(':sample:library')
 
   testCompile deps.junit
   testCompile deps.truth
-  testCompile deps.robolectric
 }
 
 afterEvaluate {
diff --git a/sample/library/build.gradle b/sample/library/build.gradle
index b6d4c6ef..826c25aa 100644
--- a/sample/library/build.gradle
+++ b/sample/library/build.gradle
@@ -1,11 +1,10 @@
 buildscript {
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.2.0'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0'
   }
 }
 
 apply plugin: 'com.android.library'
-apply plugin: 'com.neenbedankt.android-apt'
 apply plugin: 'com.jakewharton.butterknife'
 
 android {
@@ -18,10 +17,9 @@ android {
 }
 
 dependencies {
-  compile 'com.jakewharton:butterknife:8.2.0'
-  apt 'com.jakewharton:butterknife-compiler:8.2.0'
+  compile deps.butterknife
+  annotationProcessor deps.butterknifeCompiler
 
   testCompile deps.junit
   testCompile deps.truth
-  testCompile deps.robolectric
 }
