diff --git a/CHANGELOG.md b/CHANGELOG.md
index a61b410e..839fe608 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,38 @@
 Change Log
 ==========
 
+Version 9.0.0-rc1 *(2018-10-10)*
+--------------------------------
+
+ * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate
+   AndroidX code.
+
+ * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs
+   required for the generated code but does not contain the code to reflectively look up the generated
+   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can
+   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules
+   remain in the old `butterknife` artifact.
+ 
+ * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation
+   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged
+   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more
+   information. Currently about 90% of functionality is covered. File bugs for anything that does not work.
+
+   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to
+   having this be a default. As of AGP 3.2 there is no reason not to do this.
+
+ * New: Lint checks have been ported to UAST and now work on Kotlin code.
+
+ * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`.
+ * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities.
+ * Fix: Use the application ID instead of the resource package for generating `R2`.
+ * Deprecated methods from 8.x have been removed.
+
+Note: The next release candidate will switch all artifacts to require Java 8 bytecode which will force
+your applications to enable Java 8 bytecode. As of AGP 3.2 there is no cost to this, and there is no
+reason to have it set any lower.
+
+
 Version 8.8.1 *(2017-08-09)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 26d21abc..41d25f66 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  implementation 'com.jakewharton:butterknife:8.8.1'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  implementation 'com.jakewharton:butterknife:9.0.0-rc1'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc1'
 }
 ```
 
@@ -65,7 +65,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc1'
   }
 }
 ```
diff --git a/build.gradle b/build.gradle
index 1eba8524..c64dd5a2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,12 +3,11 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
       'minSdk': 14,
-      'compileSdk': 27,
+      'compileSdk': 28,
 
-      'supportLibrary': '27.0.2',
-      'androidPlugin': '3.1.0-alpha09',
-      'androidTools': '26.1.0-alpha09',
-      'kotlin': '1.2.21',
+      'supportLibrary': '28.0.0',
+      'androidTools': '26.2.0',
+      'kotlin': '1.2.71',
 
       'release': '8.8.1',
   ]
@@ -16,15 +15,19 @@ buildscript {
   ext.deps = [
       android: [
           'runtime': 'com.google.android:android:4.1.1.4',
-          'gradlePlugin': "com.android.tools.build:gradle:${versions.androidPlugin}",
+          'gradlePlugin': "com.android.tools.build:gradle:3.1.4",
       ],
       'support': [
           'compat': "com.android.support:support-compat:${versions.supportLibrary}",
           'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
           'test': [
               'runner': 'com.android.support.test:runner:1.0.1',
+              'rules': 'com.android.support.test:rules:1.0.1',
           ],
       ],
+      'androidx': [
+          'annotations': "androidx.annotation:annotation:1.0.0",
+      ],
       'lint': [
           'core': "com.android.tools.lint:lint:${versions.androidTools}",
           'api': "com.android.tools.lint:lint-api:${versions.androidTools}",
@@ -34,8 +37,7 @@ buildscript {
       javapoet: 'com.squareup:javapoet:1.10.0',
       javaparser: 'com.github.javaparser:javaparser-core:3.5.14',
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.39',
-      robolectric: 'org.robolectric:robolectric:3.7.1',
+      truth: 'com.google.truth:truth:0.42',
       compiletesting: 'com.google.testing.compile:compile-testing:0.15',
       'auto': [
           'service': 'com.google.auto.service:auto-service:1.0-rc4',
@@ -47,7 +49,7 @@ buildscript {
           'compiler': "com.jakewharton:butterknife-compiler:${versions.release}"
       ],
       'kotlin': [
-          'stdLibJre8': "org.jetbrains.kotlin:kotlin-stdlib-jre8:${versions.kotlin}",
+          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",
       ]
   ]
 
@@ -55,12 +57,14 @@ buildscript {
     mavenCentral()
     jcenter()
     google()
+    gradlePluginPortal()
   }
 
   dependencies {
-    classpath deps.android.gradlePlugin
+    classpath 'com.android.tools.build:gradle:3.2.0'
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
+    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16'
   }
 }
 
@@ -74,6 +78,27 @@ subprojects { project ->
     jcenter()
   }
 
+  apply plugin: 'net.ltgt.errorprone'
+
+  dependencies {
+    errorprone 'com.google.errorprone:error_prone_core:2.3.1'
+  }
+
+  // TODO figure out why this causes codegen to fail in android tests.
+  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5')
+  //configurations.all { Configuration configuration ->
+  //  if (configuration.name.endsWith('nnotationProcessor')) {
+  //    configuration.dependencies.add(nullaway)
+  //  }
+  //}
+  //
+  //tasks.withType(JavaCompile) {
+  //  options.compilerArgs += [
+  //      '-Xep:NullAway:ERROR',
+  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',
+  //  ]
+  //}
+
   if (!project.name.equals('butterknife-gradle-plugin')) {
     apply plugin: 'checkstyle'
 
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index f96179a7..47d8f373 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 checkstyle {
   configFile rootProject.file('checkstyle.xml')
diff --git a/butterknife-annotations/src/main/java/butterknife/BindAnim.java b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
index 62c30778..7e12157b 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindAnim.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
@@ -1,12 +1,11 @@
 package butterknife;
 
 import android.support.annotation.AnimRes;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified animation resource ID.
@@ -14,7 +13,8 @@
  * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindAnim {
   /** Animation resource ID to which the field will be bound. */
   @AnimRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindArray.java b/butterknife-annotations/src/main/java/butterknife/BindArray.java
index b2f7be27..6f016b4d 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindArray.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified array resource ID. The type of array will be inferred from the
@@ -31,7 +31,7 @@
  * {@literal @}BindArray(R.array.icons) TypedArray icons;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindArray {
   /** Array resource ID to which the field will be bound. */
   @ArrayRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
index e12be465..0b3576e8 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
@@ -6,7 +6,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to a {@link Bitmap} from the specified drawable resource ID.
@@ -14,7 +14,8 @@
  * {@literal @}BindBitmap(R.drawable.logo) Bitmap logo;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindBitmap {
   /** Drawable resource ID from which the {@link Bitmap} will be created. */
   @DrawableRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBool.java b/butterknife-annotations/src/main/java/butterknife/BindBool.java
index 89112ac8..5c0abd39 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBool.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified boolean resource ID.
@@ -13,7 +13,8 @@
  * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindBool {
   /** Boolean resource ID to which the field will be bound. */
   @BoolRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindColor.java b/butterknife-annotations/src/main/java/butterknife/BindColor.java
index 002616e3..af289c33 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindColor.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified color resource ID. Type can be {@code int} or
@@ -15,7 +15,8 @@
  * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindColor {
   /** Color resource ID to which the field will be bound. */
   @ColorRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDimen.java b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
index 172871f8..62115a1e 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindDimen.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
@@ -15,7 +15,8 @@
  * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindDimen {
   /** Dimension resource ID to which the field will be bound. */
   @DimenRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
index 5bf6f777..8156dca9 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
@@ -6,9 +6,8 @@
 import java.lang.annotation.Target;
 
 import static butterknife.internal.Constants.NO_RES_ID;
-
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified drawable resource ID.
@@ -19,7 +18,8 @@
  * Drawable tintedPlaceholder;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindDrawable {
   /** Drawable resource ID to which the field will be bound. */
   @DrawableRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFloat.java b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
index 49a1a482..bb15a288 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindFloat.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified dimension resource ID whose type is explicitly defined as float.
@@ -17,7 +17,8 @@
  * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindFloat {
   /** Float resource ID to which the field will be bound. */
   @DimenRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFont.java b/butterknife-annotations/src/main/java/butterknife/BindFont.java
index 5e6e7666..d2360c2b 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindFont.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java
@@ -1,6 +1,7 @@
 package butterknife;
 
 import android.graphics.Typeface;
+import android.support.annotation.FontRes;
 import android.support.annotation.IntDef;
 import android.support.annotation.RestrictTo;
 import java.lang.annotation.Retention;
@@ -8,7 +9,7 @@
 
 import static android.support.annotation.RestrictTo.Scope.LIBRARY;
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified font resource ID.
@@ -16,10 +17,11 @@
  * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindFont {
   /** Font resource ID to which the field will be bound. */
-  /* TODO support lib 26.0.0: @FontRes */ int value();
+  @FontRes int value();
 
   @TypefaceStyle int style() default Typeface.NORMAL;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindInt.java b/butterknife-annotations/src/main/java/butterknife/BindInt.java
index 7c683548..137950a5 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindInt.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified integer resource ID.
@@ -13,7 +13,8 @@
  * {@literal @}BindInt(R.int.columns) int columns;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindInt {
   /** Integer resource ID to which the field will be bound. */
   @IntegerRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindString.java b/butterknife-annotations/src/main/java/butterknife/BindString.java
index ff82aa99..5dfebd59 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindString.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindString.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified string resource ID.
@@ -13,7 +13,7 @@
  * {@literal @}BindString(R.string.username_error) String usernameErrorText;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindString {
   /** String resource ID to which the field will be bound. */
   @StringRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindView.java b/butterknife-annotations/src/main/java/butterknife/BindView.java
index 4770bf69..85da51c3 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindView.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindView.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
@@ -14,7 +14,7 @@
  * {@literal @}BindView(R.id.title) TextView title;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindView {
   /** View ID to which the field will be bound. */
   @IdRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindViews.java b/butterknife-annotations/src/main/java/butterknife/BindViews.java
index 07a0499c..8b174f1f 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindViews.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
@@ -15,7 +15,7 @@
  * List&lt;TextView&gt; titles;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindViews {
   /** View IDs to which the field will be bound. */
   @IdRes int[] value();
diff --git a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
index b590a037..22681659 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
@@ -9,7 +9,7 @@
 
 import static android.widget.CompoundButton.OnCheckedChangeListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnCheckedChangeListener OnCheckedChangeListener} on the view for
@@ -26,7 +26,7 @@
  * @see OnCheckedChangeListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.CompoundButton",
     setter = "setOnCheckedChangeListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index 3671a751..a3324ab4 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnClickListener OnClickListener} on the view for each ID specified.
@@ -25,7 +25,7 @@
  * @see OnClickListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnClickListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
index 6c02f264..1e9cdca2 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
@@ -9,7 +9,7 @@
 
 import static android.widget.TextView.OnEditorActionListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnEditorActionListener OnEditorActionListener} on the view for each
@@ -27,7 +27,7 @@
  * @see OnEditorActionListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "setOnEditorActionListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
index 88c55425..8bcc772d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnFocusChangeListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnFocusChangeListener OnFocusChangeListener} on the view for each ID
@@ -25,7 +25,7 @@
  * @see OnFocusChangeListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnFocusChangeListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 1c20ff30..6a411cdd 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -9,7 +9,7 @@
 
 import static android.widget.AdapterView.OnItemClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnItemClickListener OnItemClickListener} on the view for each ID
@@ -25,7 +25,7 @@
  * @see OnItemClickListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.AdapterView<?>",
     setter = "setOnItemClickListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index afc49b72..543cda23 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -9,7 +9,7 @@
 
 import static android.widget.AdapterView.OnItemLongClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnItemLongClickListener OnItemLongClickListener} on the view for each
@@ -27,7 +27,7 @@
  * @see OnItemLongClickListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.AdapterView<?>",
     setter = "setOnItemLongClickListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 9cc1c9f3..0b53b6d9 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnLongClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnLongClickListener OnLongClickListener} on the view for each ID
@@ -25,7 +25,8 @@
  *
  * @see OnLongClickListener
  */
-@Retention(CLASS) @Target(METHOD)
+@Target(METHOD)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnLongClickListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index 3c792e6d..c840a69a 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -30,10 +30,12 @@
 @Target(METHOD)
 @Retention(CLASS)
 @ListenerClass(
-    targetType = "android.support.v4.view.ViewPager",
+    targetType = "androidx.viewpager.widget.ViewPager",
+    legacyTargetType = "android.support.v4.view.ViewPager",
     setter = "addOnPageChangeListener",
     remover = "removeOnPageChangeListener",
-    type = "android.support.v4.view.ViewPager.OnPageChangeListener",
+    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",
+    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",
     callbacks = OnPageChange.Callback.class
 )
 public @interface OnPageChange {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTouch.java b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
index dc4b69e7..4b54a0d3 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTouch.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnTouchListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
@@ -26,7 +26,7 @@
  * @see OnTouchListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnTouchListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/Optional.java b/butterknife-annotations/src/main/java/butterknife/Optional.java
index c525a26a..adc95d2c 100644
--- a/butterknife-annotations/src/main/java/butterknife/Optional.java
+++ b/butterknife-annotations/src/main/java/butterknife/Optional.java
@@ -4,7 +4,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Denote that the view specified by the injection is not required to be present.
@@ -12,6 +12,7 @@
  * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}
  * </code></pre>
  */
-@Retention(CLASS) @Target(METHOD)
+@Target(METHOD)
+@Retention(RUNTIME)
 public @interface Optional {
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
index e6d3ed5f..c736e899 100644
--- a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
@@ -10,6 +10,8 @@
 public @interface ListenerClass {
   String targetType();
 
+  String legacyTargetType() default "";
+
   /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */
   String setter();
 
@@ -22,6 +24,8 @@
   /** Fully-qualified class name of the listener type. */
   String type();
 
+  String legacyType() default "";
+
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
 
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index 5775e644..077bc65d 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
   implementation project(':butterknife-annotations')
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 1c44014e..0df2479c 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
@@ -32,6 +33,7 @@
 import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;
 import static com.google.auto.common.MoreElements.getPackage;
 import static java.util.Collections.singletonList;
+import static java.util.Objects.requireNonNull;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -42,21 +44,21 @@
   private static final ClassName VIEW = ClassName.get("android.view", "View");
   private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
   private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
-  private static final ClassName UI_THREAD =
+  private static final ClassName UI_THREAD_LEGACY =
       ClassName.get("android.support.annotation", "UiThread");
-  private static final ClassName UI_THREAD_ANDROIDX =
+  private static final ClassName UI_THREAD =
       ClassName.get("androidx.annotation", "UiThread");
-  private static final ClassName CALL_SUPER =
+  private static final ClassName CALL_SUPER_LEGACY =
       ClassName.get("android.support.annotation", "CallSuper");
-  private static final ClassName CALL_SUPER_ANDROIDX =
+  private static final ClassName CALL_SUPER =
       ClassName.get("androidx.annotation", "CallSuper");
   private static final ClassName SUPPRESS_LINT =
       ClassName.get("android.annotation", "SuppressLint");
   private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
-  static final ClassName CONTEXT_COMPAT =
+  static final ClassName CONTEXT_COMPAT_LEGACY =
       ClassName.get("android.support.v4.content", "ContextCompat");
-  static final ClassName CONTEXT_COMPAT_ANDROIDX =
+  static final ClassName CONTEXT_COMPAT =
       ClassName.get("androidx.core.content", "ContextCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
@@ -70,12 +72,12 @@
   private final ImmutableList<ViewBinding> viewBindings;
   private final ImmutableList<FieldCollectionViewBinding> collectionBindings;
   private final ImmutableList<ResourceBinding> resourceBindings;
-  private final BindingSet parentBinding;
+  private final @Nullable BindingSet parentBinding;
 
   private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
       boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,
       ImmutableList<FieldCollectionViewBinding> collectionBindings,
-      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
+      ImmutableList<ResourceBinding> resourceBindings, @Nullable BindingSet parentBinding) {
     this.isFinal = isFinal;
     this.targetTypeName = targetTypeName;
     this.bindingClassName = bindingClassName;
@@ -88,14 +90,14 @@ private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean
     this.parentBinding = parentBinding;
   }
 
-  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {
-    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);
+  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {
+    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);
     return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration)
         .addFileComment("Generated code from Butter Knife. Do not modify!")
         .build();
   }
 
-  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {
+  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {
     TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())
         .addModifiers(PUBLIC);
     if (isFinal) {
@@ -113,32 +115,32 @@ private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {
     }
 
     if (isView) {
-      result.addMethod(createBindingConstructorForView(useAndroidX));
+      result.addMethod(createBindingConstructorForView(useLegacyTypes));
     } else if (isActivity) {
-      result.addMethod(createBindingConstructorForActivity(useAndroidX));
+      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));
     } else if (isDialog) {
-      result.addMethod(createBindingConstructorForDialog(useAndroidX));
+      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));
     }
     if (!constructorNeedsView()) {
       // Add a delegating constructor with a target type + view signature for reflective use.
-      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));
+      result.addMethod(createBindingViewDelegateConstructor(useLegacyTypes));
     }
-    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));
+    result.addMethod(createBindingConstructor(sdk, debuggable, useLegacyTypes));
 
     if (hasViewBindings() || parentBinding == null) {
-      result.addMethod(createBindingUnbindMethod(result, useAndroidX));
+      result.addMethod(createBindingUnbindMethod(result, useLegacyTypes));
     }
 
     return result.build();
   }
 
-  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {
+  private MethodSpec createBindingViewDelegateConstructor(boolean useLegacyTypes) {
     return MethodSpec.constructorBuilder()
         .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    "
                 + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",
             bindingClassName, targetTypeName, CONTEXT)
         .addAnnotation(Deprecated.class)
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target")
         .addParameter(VIEW, "source")
@@ -146,9 +148,9 @@ private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {
         .build();
   }
 
-  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForView(boolean useLegacyTypes) {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -159,9 +161,9 @@ private MethodSpec createBindingConstructorForView(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForActivity(boolean useLegacyTypes) {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -172,9 +174,9 @@ private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForDialog(boolean useLegacyTypes) {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -185,9 +187,9 @@ private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {
+  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useLegacyTypes) {
     MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC);
 
     if (hasMethodBindings()) {
@@ -236,7 +238,7 @@ private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean
         constructor.addStatement("$T view", VIEW);
       }
       for (ViewBinding binding : viewBindings) {
-        addViewBinding(constructor, binding, debuggable);
+        addViewBinding(constructor, binding, debuggable, useLegacyTypes);
       }
       for (FieldCollectionViewBinding binding : collectionBindings) {
         constructor.addStatement("$L", binding.render(debuggable));
@@ -262,12 +264,13 @@ private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean
     return constructor.build();
   }
 
-  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {
+  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
+      boolean useLegacyTypes) {
     MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC);
     if (!isFinal && parentBinding == null) {
-      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);
+      result.addAnnotation(useLegacyTypes ? CALL_SUPER_LEGACY : CALL_SUPER);
     }
 
     if (hasTargetField()) {
@@ -291,7 +294,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, bool
     if (hasMethodBindings()) {
       result.addCode("\n");
       for (ViewBinding binding : viewBindings) {
-        addFieldAndUnbindStatement(bindingClass, result, binding);
+        addFieldAndUnbindStatement(bindingClass, result, binding, useLegacyTypes);
       }
     }
 
@@ -303,7 +306,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, bool
   }
 
   private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
-      ViewBinding bindings) {
+      ViewBinding bindings, boolean useLegacyTypes) {
     // Only add fields to the binding if there are method bindings.
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         bindings.getMethodBindings();
@@ -329,13 +332,14 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
       boolean requiresRemoval = !"".equals(listenerClass.remover());
       String listenerField = "null";
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(listenerClass.type());
+        TypeName listenerClassName = bestGuess(getType(listenerClass, useLegacyTypes));
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addField(listenerClassName, listenerField, PRIVATE);
       }
 
-      if (!VIEW_TYPE.equals(listenerClass.targetType())) {
-        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),
+      String targetType = getTargetType(listenerClass, useLegacyTypes);
+      if (!VIEW_TYPE.equals(targetType)) {
+        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),
             fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);
       } else {
         unbindMethod.addStatement("$N.$N($N)", fieldName,
@@ -354,16 +358,35 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
     }
   }
 
+  private static String getType(ListenerClass listenerClass, boolean useLegacyTypes) {
+    String type = listenerClass.type();
+    String legacyType = listenerClass.legacyType();
+    if (useLegacyTypes && !legacyType.isEmpty()) {
+      type = legacyType;
+    }
+    return type;
+  }
+
+  private static String getTargetType(ListenerClass listenerClass, boolean useLegacyTypes) {
+    String targetType = listenerClass.targetType();
+    String legacyTargetType = listenerClass.legacyTargetType();
+    if (useLegacyTypes && !legacyTargetType.isEmpty()) {
+      targetType = legacyTargetType;
+    }
+    return targetType;
+  }
+
   private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemoval) {
     return requiresRemoval
         ? listenerClass.remover()
         : listenerClass.setter();
   }
 
-  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
+  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
+      boolean useLegacyTypes) {
     if (binding.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
-      FieldViewBinding fieldBinding = binding.getFieldBinding();
+      FieldViewBinding fieldBinding = requireNonNull(binding.getFieldBinding());
       CodeBlock.Builder builder = CodeBlock.builder()
           .add("target.$L = ", fieldBinding.getName());
 
@@ -401,7 +424,7 @@ private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, bool
     }
 
     addFieldBinding(result, binding, debuggable);
-    addMethodBindings(result, binding, debuggable);
+    addMethodBindings(result, binding, debuggable, useLegacyTypes);
   }
 
   private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
@@ -422,8 +445,8 @@ private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boo
     }
   }
 
-  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
-      boolean debuggable) {
+  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
+      boolean useLegacyTypes) {
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         binding.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
@@ -451,7 +474,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
       Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
 
       TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
-          .superclass(ClassName.bestGuess(listener.type()));
+          .superclass(ClassName.bestGuess(getType(listener, useLegacyTypes)));
 
       for (ListenerMethod method : getListenerMethods(listener)) {
         MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
@@ -506,13 +529,14 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
       boolean requiresRemoval = listener.remover().length() != 0;
       String listenerField = null;
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(listener.type());
+        TypeName listenerClassName = bestGuess(getType(listener, useLegacyTypes));
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addStatement("$L = $L", listenerField, callback.build());
       }
 
-      if (!VIEW_TYPE.equals(listener.targetType())) {
-        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,
+      String targetType = getTargetType(listener, useLegacyTypes);
+      if (!VIEW_TYPE.equals(targetType)) {
+        result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,
             listener.setter(), requiresRemoval ? listenerField : callback.build());
       } else {
         result.addStatement("$N.$L($L)", bindName, listener.setter(),
@@ -667,7 +691,7 @@ private boolean hasViewLocal() {
   /** True if this binding requires a view. Otherwise only a context is needed. */
   private boolean constructorNeedsView() {
     return hasViewBindings() //
-        || parentBinding != null && parentBinding.constructorNeedsView();
+        || (parentBinding != null && parentBinding.constructorNeedsView());
   }
 
   static boolean requiresCast(TypeName type) {
@@ -707,7 +731,7 @@ static Builder newBuilder(TypeElement enclosingElement) {
     private final boolean isActivity;
     private final boolean isDialog;
 
-    private BindingSet parentBinding;
+    private @Nullable BindingSet parentBinding;
 
     private final Map<Id, ViewBinding.Builder> viewIdMap = new LinkedHashMap<>();
     private final ImmutableList.Builder<FieldCollectionViewBinding> collectionBindings =
@@ -753,7 +777,7 @@ void setParent(BindingSet parent) {
       this.parentBinding = parent;
     }
 
-    String findExistingBindingName(Id id) {
+    @Nullable String findExistingBindingName(Id id) {
       ViewBinding.Builder builder = viewIdMap.get(id);
       if (builder == null) {
         return null;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index d1f65953..27093e6a 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -53,6 +53,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -76,7 +77,7 @@
 import javax.tools.Diagnostic.Kind;
 
 import static butterknife.internal.Constants.NO_RES_ID;
-
+import static java.util.Objects.requireNonNull;
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -84,6 +85,7 @@
 import static javax.lang.model.element.Modifier.STATIC;
 
 @AutoService(Processor.class)
+@SuppressWarnings("NullAway") // TODO fix all these...
 public final class ButterKnifeProcessor extends AbstractProcessor {
   // TODO remove when http://b.android.com/187527 is released.
   private static final String OPTION_SDK_INT = "butterknife.minSdk";
@@ -117,11 +119,11 @@
 
   private Types typeUtils;
   private Filer filer;
-  private Trees trees;
+  private @Nullable Trees trees;
 
   private int sdk = 1;
   private boolean debuggable = true;
-  private boolean useAndroidX = false;
+  private boolean useLegacyTypes = false;
 
   private final RScanner rScanner = new RScanner();
 
@@ -141,7 +143,7 @@
     }
 
     debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));
-    useAndroidX = hasAndroidX(env.getElementUtils());
+    useLegacyTypes = !hasAndroidX(env.getElementUtils());
 
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
@@ -191,7 +193,7 @@
       TypeElement typeElement = entry.getKey();
       BindingSet binding = entry.getValue();
 
-      JavaFile javaFile = binding.brewJava(sdk, debuggable, useAndroidX);
+      JavaFile javaFile = binding.brewJava(sdk, debuggable, useLegacyTypes);
       try {
         javaFile.writeTo(filer);
       } catch (IOException e) {
@@ -564,12 +566,11 @@ private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder
       return;
     }
 
-    assert viewType != null; // Always false as hasError would have been true.
-    TypeName type = TypeName.get(viewType);
+    TypeName type = TypeName.get(requireNonNull(viewType));
     boolean required = isFieldRequired(element);
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind,
+    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, requireNonNull(kind),
         new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));
 
     erasedTargetNames.add(enclosingElement);
@@ -670,11 +671,11 @@ private void parseResourceColor(Element element,
     Id resourceId = elementToId(element, BindColor.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
 
-    FieldResourceBinding.Type colorStateList = useAndroidX
-        ? FieldResourceBinding.Type.COLOR_STATE_LIST_ANDROIDX
-        : FieldResourceBinding.Type.COLOR_STATE_LIST;
-    FieldResourceBinding.Type color = useAndroidX
-        ? FieldResourceBinding.Type.COLOR_ANDROIDX
+    FieldResourceBinding.Type colorStateList = useLegacyTypes
+        ? FieldResourceBinding.Type.COLOR_STATE_LIST_LEGACY
+            : FieldResourceBinding.Type.COLOR_STATE_LIST;
+    FieldResourceBinding.Type color = useLegacyTypes
+        ? FieldResourceBinding.Type.COLOR_LEGACY
         : FieldResourceBinding.Type.COLOR;
     builder.addResource(new FieldResourceBinding(
         resourceId,
@@ -781,7 +782,7 @@ private void parseResourceDrawable(Element element,
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint),
-        useAndroidX));
+        useLegacyTypes));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -853,7 +854,7 @@ private void parseResourceFont(Element element,
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     Id resourceId = elementToId(element, BindFont.class, bindFont.value());
-    builder.addResource(new FieldTypefaceBinding(resourceId, name, style, useAndroidX));
+    builder.addResource(new FieldTypefaceBinding(resourceId, name, style, useLegacyTypes));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -949,16 +950,16 @@ private void parseResourceArray(Element element,
     int id = element.getAnnotation(BindArray.class).value();
     Id resourceId = elementToId(element, BindArray.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(resourceId, name, type));
+    builder.addResource(new FieldResourceBinding(resourceId, name, requireNonNull(type)));
 
     erasedTargetNames.add(enclosingElement);
   }
 
   /**
-   * Returns a method name from the {@link android.content.res.Resources} class for array resource
+   * Returns a method name from the {@code android.content.res.Resources} class for array resource
    * binding, null if the element type is not supported.
    */
-  private static FieldResourceBinding.Type getArrayResourceMethodName(Element element) {
+  private static @Nullable FieldResourceBinding.Type getArrayResourceMethodName(Element element) {
     TypeMirror typeMirror = element.asType();
     if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
       return FieldResourceBinding.Type.TYPED_ARRAY;
@@ -978,7 +979,7 @@ private void parseResourceArray(Element element,
   }
 
   /** Returns the first duplicate element inside an array, null if there are no duplicates. */
-  private static Integer findDuplicate(int[] array) {
+  private static @Nullable Integer findDuplicate(int[] array) {
     Set<Integer> seenElements = new LinkedHashSet<>();
 
     for (int element : array) {
@@ -1197,10 +1198,10 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);
 
-    for (int id : resourceIds.keySet()) {
-      if (!builder.addMethod(resourceIds.get(id), listener, method, binding)) {
+    for (Map.Entry<Integer, Id> entry : resourceIds.entrySet()) {
+      if (!builder.addMethod(entry.getValue(), listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
-            id, enclosingElement.getQualifiedName(), element.getSimpleName());
+            entry.getKey(), enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
       }
     }
@@ -1269,7 +1270,7 @@ private static boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
   }
 
   /** Finds the parent binder type in the supplied set, if any. */
-  private TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
+  private @Nullable TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
     TypeMirror type;
     while (true) {
       type = typeElement.getSuperclass();
@@ -1350,7 +1351,7 @@ private static boolean isListenerRequired(ExecutableElement element) {
     return element.getAnnotation(Optional.class) == null;
   }
 
-  private static AnnotationMirror getMirror(Element element,
+  private static @Nullable AnnotationMirror getMirror(Element element,
       Class<? extends Annotation> annotation) {
     for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
       if (annotationMirror.getAnnotationType().toString().equals(annotation.getCanonicalName())) {
@@ -1361,16 +1362,11 @@ private static AnnotationMirror getMirror(Element element,
   }
 
   /**
-   * Perform two lookups to see if the androidx annotation and core libraries are on the application
-   * classpath. If both aren't present butterknife will leverage support annotations and
-   * compat libraries instead.
+   * Check for an AndroidX type required by the runtime to determine whether we're in AndroidX or
+   * using legacy support library types.
    */
-  private static boolean hasAndroidX(Elements elementUtils) {
-    boolean annotationsPresent
-        = elementUtils.getTypeElement("androidx.annotation.NonNull") != null;
-    boolean corePresent
-        = elementUtils.getTypeElement("androidx.core.content.ContextCompat") != null;
-    return annotationsPresent && corePresent;
+  private static boolean hasAndroidX(Elements elements) {
+    return elements.getTypeElement("androidx.core.content.ContextCompat") != null;
   }
 
   private static class RScanner extends TreeScanner {
@@ -1382,7 +1378,7 @@ private static boolean hasAndroidX(Elements elementUtils) {
           && symbol.getEnclosingElement().getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {
         try {
-          int value = (Integer) ((Symbol.VarSymbol) symbol).getConstantValue();
+          int value = (Integer) requireNonNull(((Symbol.VarSymbol) symbol).getConstantValue());
           resourceIds.put(value, new Id(value, symbol));
         } catch (Exception ignored) { }
       }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
index 8da58ac3..b68f6dc5 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -10,8 +10,8 @@
 
 final class FieldCollectionViewBinding {
   enum Kind {
-    ARRAY("arrayOf"),
-    LIST("listOf");
+    ARRAY("arrayFilteringNull"),
+    LIST("listFilteringNull");
 
     final String factoryName;
 
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
index 2bdac846..ac44d7e2 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -2,8 +2,8 @@
 
 import com.squareup.javapoet.CodeBlock;
 
+import static butterknife.compiler.BindingSet.CONTEXT_COMPAT_LEGACY;
 import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
-import static butterknife.compiler.BindingSet.CONTEXT_COMPAT_ANDROIDX;
 import static butterknife.compiler.BindingSet.UTILS;
 import static butterknife.internal.Constants.NO_RES_ID;
 
@@ -11,13 +11,13 @@
   private final Id id;
   private final String name;
   private final Id tintAttributeId;
-  private final boolean androidX;
+  private final boolean useLegacyTypes;
 
-  FieldDrawableBinding(Id id, String name, Id tintAttributeId, boolean useAndroidX) {
+  FieldDrawableBinding(Id id, String name, Id tintAttributeId, boolean useLegacyTypes) {
     this.id = id;
     this.name = name;
     this.tintAttributeId = tintAttributeId;
-    this.androidX = useAndroidX;
+    this.useLegacyTypes = useLegacyTypes;
   }
 
   @Override public Id id() {
@@ -37,6 +37,6 @@
       return CodeBlock.of("target.$L = context.getDrawable($L)", name, id.code);
     }
     return CodeBlock.of("target.$L = $T.getDrawable(context, $L)", name,
-        androidX ? CONTEXT_COMPAT_ANDROIDX : CONTEXT_COMPAT, id.code);
+        useLegacyTypes ? CONTEXT_COMPAT_LEGACY : CONTEXT_COMPAT, id.code);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index 7213781e..80e0a9fe 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -1,25 +1,26 @@
 package butterknife.compiler;
 
+import android.support.annotation.Nullable;
+import com.google.common.collect.ImmutableList;
+import com.google.errorprone.annotations.Immutable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import static java.util.Collections.singletonList;
-import static java.util.Collections.unmodifiableList;
-
 final class FieldResourceBinding implements ResourceBinding {
   enum Type {
     BITMAP(new ResourceMethod(BindingSet.BITMAP_FACTORY, "decodeResource", true, 1)),
     BOOL("getBoolean"),
-    COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
+    COLOR_LEGACY(new ResourceMethod(BindingSet.CONTEXT_COMPAT_LEGACY, "getColor", false, 1),
         new ResourceMethod(null, "getColor", false, 23)),
-    COLOR_ANDROIDX(new ResourceMethod(BindingSet.CONTEXT_COMPAT_ANDROIDX, "getColor", false, 1),
+    COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
         new ResourceMethod(null, "getColor", false, 23)),
-    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColorStateList", false, 1),
+    COLOR_STATE_LIST_LEGACY(
+        new ResourceMethod(BindingSet.CONTEXT_COMPAT_LEGACY, "getColorStateList", false, 1),
         new ResourceMethod(null, "getColorStateList", false, 23)),
-    COLOR_STATE_LIST_ANDROIDX(new ResourceMethod(BindingSet.CONTEXT_COMPAT_ANDROIDX,
+    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT,
         "getColorStateList", false, 1),
         new ResourceMethod(null, "getColorStateList", false, 23)),
     DIMEN_AS_INT("getDimensionPixelSize"),
@@ -32,18 +33,18 @@
     TEXT_ARRAY("getTextArray"),
     TYPED_ARRAY("obtainTypedArray");
 
-    private final List<ResourceMethod> methods;
+    private final ImmutableList<ResourceMethod> methods;
 
     Type(ResourceMethod... methods) {
       List<ResourceMethod> methodList = new ArrayList<>(methods.length);
       Collections.addAll(methodList, methods);
       Collections.sort(methodList);
       Collections.reverse(methodList);
-      this.methods = unmodifiableList(methodList);
+      this.methods = ImmutableList.copyOf(methodList);
     }
 
     Type(String methodName) {
-      methods = singletonList(new ResourceMethod(null, methodName, true, 1));
+      methods = ImmutableList.of(new ResourceMethod(null, methodName, true, 1));
     }
 
     ResourceMethod methodForSdk(int sdk) {
@@ -56,13 +57,15 @@ ResourceMethod methodForSdk(int sdk) {
     }
   }
 
+  @Immutable
   static final class ResourceMethod implements Comparable<ResourceMethod> {
-    final ClassName typeName;
+    @SuppressWarnings("Immutable")
+    final @Nullable ClassName typeName;
     final String name;
     final boolean requiresResources;
     final int sdk;
 
-    ResourceMethod(ClassName typeName, String name, boolean requiresResources, int sdk) {
+    ResourceMethod(@Nullable ClassName typeName, String name, boolean requiresResources, int sdk) {
       this.typeName = typeName;
       this.name = name;
       this.requiresResources = requiresResources;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
index 7ee422a4..b9c67bfc 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -5,9 +5,9 @@
 import com.squareup.javapoet.CodeBlock;
 
 final class FieldTypefaceBinding implements ResourceBinding {
-  private static final ClassName RESOURCES_COMPAT =
+  private static final ClassName RESOURCES_COMPAT_LEGACY =
       ClassName.get("android.support.v4.content.res", "ResourcesCompat");
-  private static final ClassName RESOURCES_COMPAT_ANDROIDX =
+  private static final ClassName RESOURCES_COMPAT =
       ClassName.get("androidx.core.content.res", "ResourcesCompat");
   private static final ClassName TYPEFACE = ClassName.get("android.graphics", "Typeface");
 
@@ -37,13 +37,13 @@
   private final Id id;
   private final String name;
   private final TypefaceStyles style;
-  private final boolean useAndroidX;
+  private final boolean useLegacyTypes;
 
-  FieldTypefaceBinding(Id id, String name, TypefaceStyles style, boolean useAndroidX) {
+  FieldTypefaceBinding(Id id, String name, TypefaceStyles style, boolean useLegacyTypes) {
     this.id = id;
     this.name = name;
     this.style = style;
-    this.useAndroidX = useAndroidX;
+    this.useLegacyTypes = useLegacyTypes;
   }
 
   @Override public Id id() {
@@ -58,7 +58,7 @@
     CodeBlock typeface = sdk >= 26
         ? CodeBlock.of("res.getFont($L)", id.code)
         : CodeBlock.of("$T.getFont(context, $L)",
-            useAndroidX ? RESOURCES_COMPAT_ANDROIDX : RESOURCES_COMPAT, id.code);
+            useLegacyTypes ? RESOURCES_COMPAT_LEGACY : RESOURCES_COMPAT, id.code);
     if (style != TypefaceStyles.NORMAL) {
       typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
index cdbca725..597582a2 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
@@ -1,5 +1,6 @@
 package butterknife.compiler;
 
+import android.support.annotation.Nullable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.sun.tools.javac.code.Symbol;
@@ -19,7 +20,7 @@
     this(value, null);
   }
 
-  Id(int value, Symbol rSymbol) {
+  Id(int value, @Nullable Symbol rSymbol) {
     this.value = value;
     if (rSymbol != null) {
       ClassName className = ClassName.get(rSymbol.packge().getQualifiedName().toString(), R,
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
index 085124cd..f2d49f3d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
@@ -8,14 +8,15 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 
 final class ViewBinding {
   private final Id id;
   private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings;
-  private final FieldViewBinding fieldBinding;
+  private final @Nullable FieldViewBinding fieldBinding;
 
   ViewBinding(Id id, Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings,
-      FieldViewBinding fieldBinding) {
+      @Nullable FieldViewBinding fieldBinding) {
     this.id = id;
     this.methodBindings = methodBindings;
     this.fieldBinding = fieldBinding;
@@ -25,7 +26,7 @@ public Id getId() {
     return id;
   }
 
-  public FieldViewBinding getFieldBinding() {
+  public @Nullable FieldViewBinding getFieldBinding() {
     return fieldBinding;
   }
 
@@ -73,7 +74,7 @@ public boolean isBoundToRoot() {
 
     private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings =
         new LinkedHashMap<>();
-    FieldViewBinding fieldBinding;
+    @Nullable FieldViewBinding fieldBinding;
 
     Builder(Id id) {
       this.id = id;
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
index 785287e1..aaff4907 100644
--- a/butterknife-gradle-plugin/build.gradle
+++ b/butterknife-gradle-plugin/build.gradle
@@ -4,26 +4,18 @@ apply plugin: 'kotlin'
 sourceCompatibility = JavaVersion.VERSION_1_8
 targetCompatibility = JavaVersion.VERSION_1_8
 
-configurations {
-  fixtureClasspath
-}
-// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
-// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
-// and de-duplication semantics.
-def metadata = tasks.getByName('pluginUnderTestMetadata')
-metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath)
-
 dependencies {
   compileOnly gradleApi()
 
   implementation deps.android.gradlePlugin
   implementation deps.javaparser
   implementation deps.javapoet
-  implementation deps.kotlin.stdLibJre8
+  implementation deps.kotlin.stdLibJdk8
 
   testImplementation deps.junit
   testImplementation deps.truth
   testImplementation deps.support.annotations
+  testImplementation deps.androidx.annotations
   testImplementation deps.compiletesting
 }
 
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index 8645fbee..cfc5c261 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -54,10 +54,12 @@ class ButterKnifePlugin : Plugin<Project> {
 
   private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
+      val useAndroidX = (project.findProperty("android.useAndroidX") as String?)?.toBoolean() ?: false
       val outputDir = project.buildDir.resolve(
           "generated/source/r2/${variant.dirName}")
 
       val task = project.tasks.create("generate${variant.name.capitalize()}R2")
+      task.inputs.property("useAndroidX", useAndroidX)
       task.outputs.dir(outputDir)
       variant.registerJavaGeneratingTask(task, outputDir)
 
@@ -77,7 +79,7 @@ class ButterKnifePlugin : Plugin<Project> {
             inputs.file(rFile)
 
             doLast {
-              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", !useAndroidX)
             }
           }
         }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
index 672da6dc..4cda90a4 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -27,7 +27,8 @@
  * Also enables adding support annotations to indicate the type of resource for every field.
  */
 public final class FinalRClassBuilder {
-  private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
+  private static final String ANNOTATION_PACKAGE = "androidx.annotation";
+  private static final String ANNOTATION_PACKAGE_LEGACY = "android.support.annotation";
   private static final String[] SUPPORTED_TYPES = {
       "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
       "string", "style", "styleable"
@@ -35,17 +36,17 @@
 
   private FinalRClassBuilder() { }
 
-  public static void brewJava(File rFile, File outputDir, String packageName, String className)
+  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useLegacyTypes)
       throws Exception {
     CompilationUnit compilationUnit = JavaParser.parse(rFile);
     TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
 
-    TypeSpec.Builder result =
-        TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC, FINAL);
 
     for (Node node : resourceClass.getChildNodes()) {
       if (node instanceof ClassOrInterfaceDeclaration) {
-        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);
+        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useLegacyTypes);
       }
     }
 
@@ -57,13 +58,14 @@ public static void brewJava(File rFile, File outputDir, String packageName, Stri
   }
 
   private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
-      ClassOrInterfaceDeclaration node) {
+      ClassOrInterfaceDeclaration node, boolean useLegacyTypes) {
     if (!supportedTypes.contains(node.getNameAsString())) {
       return;
     }
 
     String type = node.getNameAsString();
-    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
+    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type)
+        .addModifiers(PUBLIC, STATIC, FINAL);
 
     for (BodyDeclaration field : node.getMembers()) {
       if (field instanceof FieldDeclaration) {
@@ -72,7 +74,7 @@ private static void addResourceType(List<String> supportedTypes, TypeSpec.Builde
         // used in annotations.
         if (isInt(declaration)) {
           addResourceField(resourceType, declaration.getVariables().get(0),
-                  getSupportAnnotationClass(type));
+                  getSupportAnnotationClass(type, useLegacyTypes));
         }
       }
     }
@@ -89,7 +91,10 @@ private static boolean isInt(FieldDeclaration field) {
   private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
       ClassName annotation) {
     String fieldName = variable.getNameAsString();
-    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);
+    String fieldValue = variable.getInitializer()
+        .map(Node::toString)
+        .orElseThrow(
+            () -> new IllegalStateException("Field " + fieldName + " missing initializer"));
     FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
         .addModifiers(PUBLIC, STATIC, FINAL)
         .initializer(fieldValue);
@@ -101,8 +106,9 @@ private static void addResourceField(TypeSpec.Builder resourceType, VariableDecl
     resourceType.addField(fieldSpecBuilder.build());
   }
 
-  private static ClassName getSupportAnnotationClass(String type) {
-    return ClassName.get(SUPPORT_ANNOTATION_PACKAGE, capitalize(type) + "Res");
+  private static ClassName getSupportAnnotationClass(String type, boolean useLegacyTypes) {
+    String supportPackage = useLegacyTypes ? ANNOTATION_PACKAGE_LEGACY : ANNOTATION_PACKAGE;
+    return ClassName.get(supportPackage, capitalize(type) + "Res");
   }
 
   private static String capitalize(String word) {
diff --git a/butterknife-gradle-plugin/src/test/build.gradle b/butterknife-gradle-plugin/src/test/build.gradle
index fedc46aa..670488ac 100644
--- a/butterknife-gradle-plugin/src/test/build.gradle
+++ b/butterknife-gradle-plugin/src/test/build.gradle
@@ -8,11 +8,11 @@ repositories {
 }
 
 android {
-    compileSdkVersion 27
+    compileSdkVersion 28
 
     compileOptions {
-        sourceCompatibility = JavaVersion.VERSION_1_7
-        targetCompatibility = JavaVersion.VERSION_1_7
+        sourceCompatibility = JavaVersion.VERSION_1_8
+        targetCompatibility = JavaVersion.VERSION_1_8
     }
 
     defaultConfig {
@@ -51,6 +51,7 @@ android {
 
     sourceSets {
         main.java.srcDirs += '../../../../../butterknife/src/main/java'
+        main.java.srcDirs += '../../../../../butterknife-runtime/src/main/java'
         main.java.srcDirs += '../../../../../butterknife-annotations/src/main/java'
     }
 
@@ -61,6 +62,5 @@ android {
 }
 
 dependencies {
-    implementation "com.android.support:support-annotations:27.0.2"
-    implementation "com.android.support:support-v4:27.0.2"
+    implementation "com.android.support:support-v4:28.0.0"
 }
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
index 68918ff8..a07dfc67 100644
--- a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
@@ -12,7 +12,7 @@ import org.junit.runners.Parameterized
 import org.junit.runners.Parameterized.Parameters
 
 @RunWith(Parameterized::class)
-class FinalRClassBuilderTest(val rFile: String, val r2File: String) {
+class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useLegacyTypes: Boolean) {
   @Rule @JvmField val tempFolder = TemporaryFolder()
 
   @Test fun brewJava() {
@@ -23,10 +23,13 @@ class FinalRClassBuilderTest(val rFile: String, val r2File: String) {
     }
 
     val outputDir = tempFolder.newFolder()
-    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2")
+    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2", useLegacyTypes)
 
     val actual = outputDir.resolve("com/butterknife/example/R2.java").readText()
-    val expected = javaClass.getResource("/fixtures/$r2File.java").readText()
+    var expected = javaClass.getResource("/fixtures/$r2File.java").readText()
+    if (useLegacyTypes) {
+      expected = expected.replace("import androidx.", "import android.support.")
+    }
 
     assertEquals(expected.trim(), actual.trim())
 
@@ -36,8 +39,10 @@ class FinalRClassBuilderTest(val rFile: String, val r2File: String) {
 
   companion object {
     @JvmStatic @Parameters fun data() = listOf(
-        arrayOf<Any>("R", "R2"),
-        arrayOf<Any>("RFinal", "R2")
+        arrayOf("R", "R2", false),
+        arrayOf("RFinal", "R2", false),
+        arrayOf("R", "R2", true),
+        arrayOf("RFinal", "R2", true)
     )
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
index 4b44bab4..d70a8a41 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -1,21 +1,21 @@
 // Generated code from Butter Knife gradle plugin. Do not modify!
 package com.butterknife.example;
 
-import android.support.annotation.AnimRes;
-import android.support.annotation.ArrayRes;
-import android.support.annotation.AttrRes;
-import android.support.annotation.BoolRes;
-import android.support.annotation.ColorRes;
-import android.support.annotation.DimenRes;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.IdRes;
-import android.support.annotation.IntegerRes;
-import android.support.annotation.LayoutRes;
-import android.support.annotation.MenuRes;
-import android.support.annotation.PluralsRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-import android.support.annotation.StyleableRes;
+import androidx.annotation.AnimRes;
+import androidx.annotation.ArrayRes;
+import androidx.annotation.AttrRes;
+import androidx.annotation.BoolRes;
+import androidx.annotation.ColorRes;
+import androidx.annotation.DimenRes;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.IdRes;
+import androidx.annotation.IntegerRes;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.MenuRes;
+import androidx.annotation.PluralsRes;
+import androidx.annotation.StringRes;
+import androidx.annotation.StyleRes;
+import androidx.annotation.StyleableRes;
 
 public final class R2 {
   public static final class anim {
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index f06fe678..dbe2ab9d 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -4,8 +4,8 @@ android {
   compileSdkVersion versions.compileSdk
 
   compileOptions {
-    sourceCompatibility = JavaVersion.VERSION_1_7
-    targetCompatibility = JavaVersion.VERSION_1_7
+    sourceCompatibility = JavaVersion.VERSION_1_8
+    targetCompatibility = JavaVersion.VERSION_1_8
   }
 
   defaultConfig {
@@ -14,6 +14,8 @@ android {
     targetSdkVersion versions.compileSdk
     versionCode 1
     versionName '1.0.0'
+
+    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
   }
 
   lintOptions {
@@ -21,6 +23,7 @@ android {
     textOutput "stdout"
     checkAllWarnings true
     warningsAsErrors true
+    disable 'UnknownNullness'
     showAll true
     explainIssues true
     // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
@@ -28,9 +31,23 @@ android {
   }
 
   buildTypes {
-    release {
+    debug {
       minifyEnabled true
-      proguardFile getDefaultProguardFile('proguard-android.txt')
+      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro'
+      testProguardFile 'src/androidTest/proguard.pro'
+    }
+  }
+
+  productFlavors {
+    flavorDimensions 'runtime'
+
+    reflect {
+      dimension 'runtime'
+      applicationIdSuffix '.reflect'
+    }
+    codegen {
+      dimension 'runtime'
+      applicationIdSuffix '.codegen'
     }
   }
 
@@ -42,10 +59,14 @@ android {
 }
 
 dependencies {
-  implementation project(':butterknife')
-  annotationProcessor project(':butterknife-compiler')
+  reflectImplementation project(':butterknife-reflect')
+
+  codegenImplementation project(':butterknife')
+  codegenAnnotationProcessor project(':butterknife-compiler')
+  androidTestCodegenAnnotationProcessor project(':butterknife-compiler')
 
-  testImplementation deps.junit
-  testImplementation deps.truth
-  testImplementation deps.robolectric
+  androidTestImplementation deps.junit
+  androidTestImplementation deps.truth
+  androidTestImplementation deps.support.test.runner
+  androidTestImplementation deps.support.test.rules
 }
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
deleted file mode 100644
index c9c69e79..00000000
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.example.butterknife;
-
-import android.test.ActivityInstrumentationTestCase2;
-import com.example.butterknife.library.SimpleActivity;
-
-public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {
-  public SimpleActivityTest() {
-    super(SimpleActivity.class);
-  }
-
-  public void testActivityStarts() {
-    getActivity(); // Trigger activity creation.
-    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup.
-  }
-}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
new file mode 100644
index 00000000..8099272e
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
@@ -0,0 +1,270 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnClickTest {
+  static final class Simple {
+    int clicks = 0;
+
+    @OnClick(1) void click() {
+      clicks++;
+    }
+  }
+
+  @Test public void simple() {
+    View tree = treeWithIds(1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class MultipleBindings {
+    int clicks = 0;
+
+    @OnClick(1) void click1() {
+      clicks++;
+    }
+
+    @OnClick(1) void clicks2() {
+      clicks++;
+    }
+  }
+
+  @Test public void multipleBindings() {
+    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+
+    View tree = treeWithIds(1);
+    View view1 = tree.findViewById(1);
+
+    MultipleBindings target = new MultipleBindings();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnClick(1) public void publicClick() {
+      clicks++;
+    }
+
+    @OnClick(2) void packageClick() {
+      clicks++;
+    }
+
+    @OnClick(3) protected void protectedClick() {
+      clicks++;
+    }
+  }
+
+  @Test public void visibilities() {
+    View tree = treeWithIds(1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    view3.performClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnClick({1, 2}) void click() {
+      clicks++;
+    }
+  }
+
+  @Test public void multipleIds() {
+    View tree = treeWithIds(1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    view2.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnClick(1) public void click() {
+      clicks++;
+    }
+  }
+
+  @Test public void optionalIdPresent() {
+    View tree = treeWithIds(1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @Test public void optionalIdAbsent() {
+    View tree = treeWithIds(2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnClick(1) void clickView(View view) {
+      last = view;
+    }
+
+    @OnClick(2) void clickTextView(TextView view) {
+      last = view;
+    }
+
+    @OnClick(3) void clickButton(Button view) {
+      last = view;
+    }
+
+    @OnClick(4) void clickMyInterface(MyInterface view) {
+      last = (View) view;
+    }
+  }
+
+  @Test public void argumentCast() {
+    class MyView extends Button implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+
+      @Override public boolean post(Runnable action) {
+        // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
+        action.run();
+        return true;
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    View view4 = new MyView(InstrumentationRegistry.getContext());
+    view4.setId(4);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+    tree.addView(view4);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performClick();
+    assertSame(view1, target.last);
+
+    view2.performClick();
+    assertSame(view2, target.last);
+
+    view3.performClick();
+    assertSame(view3, target.last);
+
+    view4.performClick();
+    assertSame(view4, target.last);
+  }
+
+  private static View treeWithIds(int... ids) {
+    Context context = InstrumentationRegistry.getContext();
+    FrameLayout group = new FrameLayout(context);
+
+    class SuperGrossView extends View {
+      SuperGrossView(Context context) {
+        super(context);
+      }
+
+      @Override public boolean post(Runnable action) {
+        // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
+        action.run();
+        return true;
+      }
+    }
+
+    for (int id : ids) {
+      View view = new SuperGrossView(context);
+      view.setId(id);
+      group.addView(view);
+    }
+    return group;
+  }
+}
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
similarity index 79%
rename from butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
index ccda50b4..3e2d8fab 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -1,19 +1,20 @@
 package com.example.butterknife.library;
 
+import android.support.test.rule.ActivityTestRule;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
 import com.example.butterknife.R;
+import org.junit.Rule;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
-public class SimpleActivityTest {
+public final class SimpleActivityTest {
+  @Rule public final ActivityTestRule<SimpleActivity> activityRule =
+      new ActivityTestRule<>(SimpleActivity.class);
+
   @Test public void verifyContentViewBinding() {
-    SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class).create().get();
+    SimpleActivity activity = activityRule.getActivity();
 
     Unbinder unbinder = ButterKnife.bind(activity);
     verifySimpleActivityBound(activity);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
similarity index 76%
rename from butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
index cd625c3e..a086835c 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
@@ -1,20 +1,17 @@
 package com.example.butterknife.library;
 
 import android.content.Context;
+import android.support.test.InstrumentationRegistry;
 import android.view.View;
 import com.example.butterknife.R;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 
 import static com.example.butterknife.library.SimpleAdapter.ViewHolder;
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
 public class SimpleAdapterTest {
   @Test public void verifyViewHolderViews() {
-    Context context = RuntimeEnvironment.application;
+    Context context = InstrumentationRegistry.getTargetContext();
 
     View root = View.inflate(context, R.layout.simple_list_item, null);
     ViewHolder holder = new ViewHolder(root);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
similarity index 66%
rename from butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
index 55754140..626bd17a 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
@@ -1,33 +1,31 @@
 package com.example.butterknife.unbinder;
 
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
 import android.view.View;
 import android.widget.Button;
 import android.widget.FrameLayout;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
 public final class UnbinderTest {
+  private final Context context = InstrumentationRegistry.getContext();
 
-  @Test
-  public void verifyContentViewBinding() {
-    FrameLayout frameLayout = new FrameLayout(RuntimeEnvironment.application);
-    Button button1 = new Button(RuntimeEnvironment.application);
+  @Test public void verifyContentViewBinding() {
+    FrameLayout frameLayout = new FrameLayout(context);
+    Button button1 = new Button(context);
     button1.setId(android.R.id.button1);
     frameLayout.addView(button1);
-    Button button2 = new Button(RuntimeEnvironment.application);
+    Button button2 = new Button(context);
     button2.setId(android.R.id.button2);
     frameLayout.addView(button2);
-    Button button3 = new Button(RuntimeEnvironment.application);
+    Button button3 = new Button(context);
     button3.setId(android.R.id.button3);
     frameLayout.addView(button3);
-    View content = new View(RuntimeEnvironment.application);
+    View content = new View(context);
     content.setId(android.R.id.content);
     frameLayout.addView(content);
     H h = new H(frameLayout);
diff --git a/butterknife-integration-test/src/androidTest/proguard.pro b/butterknife-integration-test/src/androidTest/proguard.pro
new file mode 100644
index 00000000..f85ddc9e
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/proguard.pro
@@ -0,0 +1,4 @@
+-dontoptimize
+-dontobfuscate
+-dontshrink
+-dontwarn **
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 7097639f..f72eb3e4 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -2,13 +2,13 @@
 
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
+import butterknife.Action;
 import butterknife.BindString;
 import butterknife.BindView;
 import butterknife.BindViews;
@@ -16,21 +16,19 @@
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
+import butterknife.ViewCollections;
 import com.example.butterknife.R;
-
 import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SimpleActivity extends Activity {
-  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
-      alphaAnimation.setFillBefore(true);
-      alphaAnimation.setDuration(500);
-      alphaAnimation.setStartOffset(index * 100);
-      view.startAnimation(alphaAnimation);
-    }
+  private static final Action<View> ALPHA_FADE = (view, index) -> {
+    AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
+    alphaAnimation.setFillBefore(true);
+    alphaAnimation.setDuration(500);
+    alphaAnimation.setStartOffset(index * 100);
+    view.startAnimation(alphaAnimation);
   };
 
   @BindView(R.id.title) TextView title;
@@ -49,7 +47,7 @@
 
   @OnClick(R.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
-    ButterKnife.apply(headerViews, ALPHA_FADE);
+    ViewCollections.run(headerViews, ALPHA_FADE);
   }
 
   @OnLongClick(R.id.hello) boolean sayGetOffMe() {
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
index 354bc4b8..7c713ab6 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
@@ -8,7 +8,7 @@
 
 public class H extends G {
 
-  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;
+  @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;
   @BindView(android.R.id.button3) View button3;
 
   public H(View view) {
diff --git a/butterknife-integration-test/src/main/proguard.pro b/butterknife-integration-test/src/main/proguard.pro
new file mode 100644
index 00000000..c3054308
--- /dev/null
+++ b/butterknife-integration-test/src/main/proguard.pro
@@ -0,0 +1,16 @@
+-dontoptimize
+-dontobfuscate
+
+# STUFF USED BY TESTS:
+
+-keep class butterknife.internal.Utils {
+  <methods>;
+}
+
+-keep class butterknife.Unbinder {
+  void unbind();
+}
+
+-keep class com.example.butterknife.unbinder.H {
+  <init>(...);
+}
diff --git a/butterknife-integration-test/src/test/resources/robolectric.properties b/butterknife-integration-test/src/test/resources/robolectric.properties
deleted file mode 100644
index 135477ad..00000000
--- a/butterknife-integration-test/src/test/resources/robolectric.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-constants=com.example.butterknife.BuildConfig
-sdk=23
diff --git a/butterknife-reflect/README.md b/butterknife-reflect/README.md
new file mode 100644
index 00000000..a4f06e8d
--- /dev/null
+++ b/butterknife-reflect/README.md
@@ -0,0 +1,61 @@
+ButterKnife Reflect
+===================
+
+The `butterknife-reflect` artifact is an API-compatible replacement for `butterknife` which uses
+100% reflection to fulfill field and method bindings for use during development.
+
+
+Er, what? Why would I want this?
+--------------------------------
+
+The normal `butterknife` artifact requires the use of `butterknife-compiler` as an annotation
+processor for compile-time validation of your bindings and code generation for runtime performance.
+This is a desirable feature for your CI and release builds, but it slows down iterative development.
+By using `butterknife-reflect` for only your IDE builds, you have one less annotation processor
+sitting between you and your running app. This is especially important for Kotlin-only or
+Java/Kotlin mixed projects using KAPT. And if `butterknife-compiler` is your only annotation
+processor for a module, using `butterknife-reflect` means that **zero** annotation processors run
+during development.
+
+
+Can I use this in production?
+-----------------------------
+
+No.
+
+Well technically you _can_, but don't. It's slow, inefficient, and lacks the level of validation
+that normal Butter Knife usage provides.
+
+
+Usage
+-----
+
+Kotlin modules:
+```groovy
+dependencies {
+  if (properties.containsKey('android.injected.invoked.from.ide')) {
+    implementation 'com.jakewharton:butterknife-reflect:<version>'
+  } else {
+    implementation 'com.jakewharton:butterknife:<version>'
+    kapt 'com.jakewharton:butterknife-compiler:<version>'
+  }
+}
+```
+
+Java modules:
+```groovy
+dependencies {
+  if (properties.containsKey('android.injected.invoked.from.ide')) {
+    implementation 'com.jakewharton:butterknife-reflect:<version>'
+  } else {
+    implementation 'com.jakewharton:butterknife:<version>'
+    annotationProcessor 'com.jakewharton:butterknife-compiler:<version>'
+  }
+}
+```
+
+_(Replacing `<version>` with whatever version you are using.)_
+
+If you have a dedicated variant for development you can skip the `if` check and simply add
+`butterknife-reflect` to that variant and `butterknife`+`butterknife-compiler` for the regular
+variants.
diff --git a/butterknife-reflect/build.gradle b/butterknife-reflect/build.gradle
new file mode 100644
index 00000000..ccf464e6
--- /dev/null
+++ b/butterknife-reflect/build.gradle
@@ -0,0 +1,34 @@
+apply plugin: 'com.android.library'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  defaultConfig {
+    minSdkVersion versions.minSdk
+
+    consumerProguardFiles 'proguard-rules.txt'
+  }
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
+  }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
+}
+
+dependencies {
+  api project(':butterknife-runtime')
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-reflect/gradle.properties b/butterknife-reflect/gradle.properties
new file mode 100644
index 00000000..f4fbc045
--- /dev/null
+++ b/butterknife-reflect/gradle.properties
@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=butterknife-reflect
+POM_NAME=ButterKnife Reflect
+POM_PACKAGING=aar
diff --git a/butterknife-reflect/proguard-rules.txt b/butterknife-reflect/proguard-rules.txt
new file mode 100644
index 00000000..977eba49
--- /dev/null
+++ b/butterknife-reflect/proguard-rules.txt
@@ -0,0 +1,2 @@
+-keepclassmembers class * { @butterknife.* <methods>; }
+-keepclassmembers class * { @butterknife.* <fields>; }
diff --git a/butterknife-reflect/src/main/AndroidManifest.xml b/butterknife-reflect/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..3306b63c
--- /dev/null
+++ b/butterknife-reflect/src/main/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest package="butterknife.reflect"/>
diff --git a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
new file mode 100644
index 00000000..c35f9aad
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
@@ -0,0 +1,1002 @@
+package butterknife;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.UiThread;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.content.res.ResourcesCompat;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.animation.Animation;
+import android.widget.AdapterView;
+import android.widget.CompoundButton;
+import android.widget.TextView;
+import butterknife.internal.Constants;
+import butterknife.internal.Utils;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.AccessibleObject;
+import java.lang.reflect.Array;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Member;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static java.lang.reflect.Modifier.PRIVATE;
+import static java.lang.reflect.Modifier.PUBLIC;
+import static java.lang.reflect.Modifier.STATIC;
+import static java.util.Collections.singletonList;
+
+public final class ButterKnife {
+  private ButterKnife() {
+    throw new AssertionError();
+  }
+
+  private static final String TAG = "ButterKnife";
+  private static boolean debug = false;
+
+  /** Control whether debug logging is enabled. */
+  public static void setDebug(boolean debug) {
+    ButterKnife.debug = debug;
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@link Activity}. The current content
+   * view is used as the view root.
+   *
+   * @param target Target activity for view binding.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Activity target) {
+    View sourceView = target.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@link View}. The view and its children
+   * are used as the view root.
+   *
+   * @param target Target view for view binding.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull View target) {
+    return bind(target, target);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@link Dialog}. The current content
+   * view is used as the view root.
+   *
+   * @param target Target dialog for view binding.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Dialog target) {
+    View sourceView = target.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
+   * {@link Activity} as the view root.
+   *
+   * @param target Target class for view binding.
+   * @param source Activity on which IDs will be looked up.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
+    View sourceView = source.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
+   * {@link Dialog} as the view root.
+   *
+   * @param target Target class for view binding.
+   * @param source Dialog on which IDs will be looked up.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
+    View sourceView = source.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
+   * {@link View} as the view root.
+   *
+   * @param target Target class for view binding.
+   * @param source View root on which IDs will be looked up.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
+    List<Unbinder> unbinders = new ArrayList<>();
+    Class<?> targetClass = target.getClass();
+    if ((targetClass.getModifiers() & PRIVATE) != 0) {
+      throw new IllegalArgumentException(targetClass.getName() + " must not be private.");
+    }
+
+    while (true) {
+      String clsName = targetClass.getName();
+      if (clsName.startsWith("android.") || clsName.startsWith("java.")
+          || clsName.startsWith("androidx.")) {
+        break;
+      }
+
+      for (Field field : targetClass.getDeclaredFields()) {
+        int unbinderStartingSize = unbinders.size();
+        Unbinder unbinder;
+
+        unbinder = parseBindView(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindViews(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindAnim(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindArray(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindBitmap(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindBool(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindColor(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindDimen(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindDrawable(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindFloat(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindFont(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindInt(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindString(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        if (unbinders.size() - unbinderStartingSize > 1) {
+          throw new IllegalStateException(
+              "More than one bind annotation on " + targetClass.getName() + "." + field.getName());
+        }
+      }
+
+      for (Method method : targetClass.getDeclaredMethods()) {
+        Unbinder unbinder;
+
+        unbinder = parseOnCheckedChanged(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnEditorAction(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnFocusChange(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnItemClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnItemLongClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnLongClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnTouch(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+      }
+
+      targetClass = targetClass.getSuperclass();
+    }
+
+    if (unbinders.isEmpty()) {
+      if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
+      return Unbinder.EMPTY;
+    }
+
+    if (debug) Log.d(TAG, "HIT: Reflectively found " + unbinders.size() + " bindings.");
+    return new CompositeUnbinder(unbinders);
+  }
+
+  private static @Nullable Unbinder parseBindView(Object target, Field field, View source) {
+    BindView bindView = field.getAnnotation(BindView.class);
+    if (bindView == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindView.value();
+    boolean isRequired = isRequired(field);
+    Class<?> viewClass = field.getType();
+    String who = "field '" + field.getName() + "'";
+    Object view;
+    if (isRequired) {
+      view = Utils.findRequiredViewAsType(source, id, who, viewClass);
+    } else {
+      view = Utils.findOptionalViewAsType(source, id, who, viewClass);
+    }
+    trySet(field, target, view);
+
+    return new FieldUnbinder(target, field);
+  }
+
+  private static @Nullable Unbinder parseBindViews(Object target, Field field, View source) {
+    BindViews bindViews = field.getAnnotation(BindViews.class);
+    if (bindViews == null) {
+      return null;
+    }
+    validateMember(field);
+
+    Class<?> fieldClass = field.getType();
+    Class<?> viewClass;
+    boolean isArray = fieldClass.isArray();
+    if (isArray) {
+      viewClass = fieldClass.getComponentType();
+    } else if (fieldClass == List.class) {
+      Type fieldType = field.getGenericType();
+      if (fieldType instanceof ParameterizedType) {
+        Type viewType = ((ParameterizedType) fieldType).getActualTypeArguments()[0];
+        // TODO real rawType impl!!!!
+        viewClass = (Class<?>) viewType;
+      } else {
+        throw new IllegalStateException(); // TODO
+      }
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+
+    int[] ids = bindViews.value();
+    boolean isRequired = isRequired(field);
+    List<Object> views = new ArrayList<>(ids.length);
+    String who = "field '" + field.getName() + "'";
+    for (int id : ids) {
+      Object view;
+      if (isRequired) {
+        view = Utils.findRequiredViewAsType(source, id, who, viewClass);
+      } else {
+        view = Utils.findOptionalViewAsType(source, id, who, viewClass);
+      }
+      if (view != null) {
+        views.add(view);
+      }
+    }
+
+    Object value;
+    if (isArray) {
+      Object[] viewArray = (Object[]) Array.newInstance(viewClass, views.size());
+      value = views.toArray(viewArray);
+    } else {
+      value = views;
+    }
+
+    trySet(field, target, value);
+    return new FieldUnbinder(target, field);
+  }
+
+  private static @Nullable Unbinder parseBindAnim(Object target, Field field, View source) {
+    BindAnim bindAnim = field.getAnnotation(BindAnim.class);
+    if (bindAnim == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindAnim.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == Animation.class) {
+      value = resources.getAnimation(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindArray(Object target, Field field, View source) {
+    BindArray bindArray = field.getAnnotation(BindArray.class);
+    if (bindArray == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindArray.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == TypedArray.class) {
+      value = resources.obtainTypedArray(id);
+    } else if (fieldType.isArray()) {
+      Class<?> componentType = fieldType.getComponentType();
+      if (componentType == String.class) {
+        value = resources.getStringArray(id);
+      } else if (componentType == int.class) {
+        value = resources.getIntArray(id);
+      } else if (componentType == CharSequence.class) {
+        value = resources.getTextArray(id);
+      } else {
+        throw new IllegalStateException(); // TODO
+      }
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindBitmap(Object target, Field field, View source) {
+    BindBitmap bindBitmap = field.getAnnotation(BindBitmap.class);
+    if (bindBitmap == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindBitmap.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == Bitmap.class) {
+      value = BitmapFactory.decodeResource(resources, id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindBool(Object target, Field field, View source) {
+    BindBool bindBool = field.getAnnotation(BindBool.class);
+    if (bindBool == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindBool.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == boolean.class) {
+      value = resources.getBoolean(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindColor(Object target, Field field, View source) {
+    BindColor bindColor = field.getAnnotation(BindColor.class);
+    if (bindColor == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindColor.value();
+    Context context = source.getContext();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == int.class) {
+      value = ContextCompat.getColor(context, id);
+    } else if (fieldType == ColorStateList.class) {
+      value = ContextCompat.getColorStateList(context, id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindDimen(Object target, Field field, View source) {
+    BindDimen bindDimen = field.getAnnotation(BindDimen.class);
+    if (bindDimen == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindDimen.value();
+    Resources resources = source.getContext().getResources();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == int.class) {
+      value = resources.getDimensionPixelSize(id);
+    } else if (fieldType == float.class) {
+      value = resources.getDimension(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindDrawable(Object target, Field field, View source) {
+    BindDrawable bindDrawable = field.getAnnotation(BindDrawable.class);
+    if (bindDrawable == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindDrawable.value();
+    int tint = bindDrawable.tint();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == Drawable.class) {
+      value = tint != Constants.NO_RES_ID
+          ? Utils.getTintedDrawable(context, id, tint)
+          : ContextCompat.getDrawable(context, id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindFloat(Object target, Field field, View source) {
+    BindFloat bindInt = field.getAnnotation(BindFloat.class);
+    if (bindInt == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindInt.value();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == float.class) {
+      value = Utils.getFloat(context, id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindFont(Object target, Field field, View source) {
+    BindFont bindFont = field.getAnnotation(BindFont.class);
+    if (bindFont == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindFont.value();
+    int style = bindFont.style();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == Typeface.class) {
+      Typeface font = ResourcesCompat.getFont(context, id);
+      value = style != Typeface.NORMAL
+          ? Typeface.create(font, style)
+          : font;
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindInt(Object target, Field field, View source) {
+    BindInt bindInt = field.getAnnotation(BindInt.class);
+    if (bindInt == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindInt.value();
+    Resources resources = source.getContext().getResources();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == int.class) {
+      value = resources.getInteger(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindString(Object target, Field field, View source) {
+    BindString bindString = field.getAnnotation(BindString.class);
+    if (bindString == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindString.value();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == String.class) {
+      value = context.getString(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseOnCheckedChanged(final Object target, final Method method,
+      View source) {
+    OnCheckedChanged onCheckedChanged = method.getAnnotation(OnCheckedChanged.class);
+    if (onCheckedChanged == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_CHECKED_CHANGED_TYPES);
+
+    List<CompoundButton> views =
+        findViews(source, onCheckedChanged.value(), isRequired(method), method.getName(),
+            CompoundButton.class);
+
+    ViewCollections.set(views, ON_CHECKED_CHANGE,
+        (buttonView, isChecked) -> tryInvoke(method, target,
+            argumentTransformer.transform(buttonView, isChecked)));
+
+    return new ListenerUnbinder<>(views, ON_CHECKED_CHANGE);
+  }
+
+  private static @Nullable Unbinder parseOnClick(final Object target, final Method method,
+      View source) {
+    OnClick onClick = method.getAnnotation(OnClick.class);
+    if (onClick == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_CLICK_TYPES);
+
+    List<View> views =
+        findViews(source, onClick.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_CLICK,
+        v -> tryInvoke(method, target, argumentTransformer.transform(v)));
+
+    return new ListenerUnbinder<>(views, ON_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnEditorAction(final Object target, final Method method,
+      View source) {
+    OnEditorAction onEditorAction = method.getAnnotation(OnEditorAction.class);
+    if (onEditorAction == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_EDITOR_ACTION_TYPES);
+
+    List<TextView> views =
+        findViews(source, onEditorAction.value(), isRequired(method), method.getName(),
+            TextView.class);
+
+    ViewCollections.set(views, ON_EDITOR_ACTION, (v, actionId, event) -> {
+      Object value = tryInvoke(method, target, argumentTransformer.transform(v, actionId, event));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : false;
+    });
+
+    return new ListenerUnbinder<>(views, ON_EDITOR_ACTION);
+  }
+
+  private static @Nullable Unbinder parseOnFocusChange(final Object target, final Method method,
+      View source) {
+    OnFocusChange onFocusChange = method.getAnnotation(OnFocusChange.class);
+    if (onFocusChange == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_FOCUS_CHANGE_TYPES);
+
+    List<View> views =
+        findViews(source, onFocusChange.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_FOCUS_CHANGE,
+        (v, hasFocus) -> tryInvoke(method, target, argumentTransformer.transform(v, hasFocus)));
+
+    return new ListenerUnbinder<>(views, ON_FOCUS_CHANGE);
+  }
+
+  private static @Nullable Unbinder parseOnItemClick(final Object target, final Method method,
+      View source) {
+    OnItemClick onItemClick = method.getAnnotation(OnItemClick.class);
+    if (onItemClick == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_ITEM_CLICK_TYPES);
+
+    List<AdapterView<?>> views =
+        findViews(source, onItemClick.value(), isRequired(method), method.getName(),
+            AdapterView.class);
+
+    ViewCollections.set(views, ON_ITEM_CLICK,
+        (parent, view, position, id) -> tryInvoke(method, target,
+            argumentTransformer.transform(parent, view, position, id)));
+
+    return new ListenerUnbinder<>(views, ON_ITEM_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnItemLongClick(final Object target, final Method method,
+      View source) {
+    OnItemLongClick onItemLongClick = method.getAnnotation(OnItemLongClick.class);
+    if (onItemLongClick == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_ITEM_LONG_CLICK_TYPES);
+
+    List<AdapterView<?>> views =
+        findViews(source, onItemLongClick.value(), isRequired(method), method.getName(),
+            AdapterView.class);
+
+    ViewCollections.set(views, ON_ITEM_LONG_CLICK, (parent, view, position, id) -> {
+      Object value =
+          tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : false;
+    });
+
+    return new ListenerUnbinder<>(views, ON_ITEM_LONG_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnLongClick(final Object target, final Method method,
+      View source) {
+    OnLongClick onLongClick = method.getAnnotation(OnLongClick.class);
+    if (onLongClick == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_LONG_CLICK_TYPES);
+
+    List<View> views =
+        findViews(source, onLongClick.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_LONG_CLICK, v -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : false;
+    });
+
+    return new ListenerUnbinder<>(views, ON_LONG_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnTouch(final Object target, final Method method,
+      View source) {
+    OnTouch onTouch = method.getAnnotation(OnTouch.class);
+    if (onTouch == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_TOUCH_TYPES);
+
+    List<View> views =
+        findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_TOUCH, (v, event) -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : false;
+    });
+
+    return new ListenerUnbinder<>(views, ON_TOUCH);
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <T extends View> List<T> findViews(View source, int[] ids, boolean isRequired,
+      String name, Class<? extends View> cls) {
+    if (ids.length == 1 && ids[0] == View.NO_ID) {
+      return singletonList((T) cls.cast(source));
+    }
+
+    String who = "method '" + name + "'";
+    List<T> views = new ArrayList<>(ids.length);
+    for (int id : ids) {
+      if (isRequired) {
+        views.add((T) Utils.findRequiredViewAsType(source, id, who, cls));
+      } else {
+        T view = (T) Utils.findOptionalViewAsType(source, id, who, cls);
+        if (view != null) {
+          views.add(view);
+        }
+      }
+    }
+    return views;
+  }
+
+  private static <T extends AccessibleObject & Member> void validateMember(T object) {
+    int modifiers = object.getModifiers();
+    if ((modifiers & (PRIVATE | STATIC)) != 0) {
+      throw new IllegalStateException(object.getDeclaringClass().getName()
+          + "."
+          + object.getName()
+          + " must not be private or static");
+    }
+    if ((modifiers & PUBLIC) == 0) {
+      object.setAccessible(true);
+    }
+  }
+
+  /** Returns true when the return value should be propagated. Use a default otherwise. */
+  private static boolean validateReturnType(Method method, Class<?> expected) {
+    Class<?> returnType = method.getReturnType();
+    if (returnType == void.class) {
+      return false;
+    }
+    if (returnType != expected) {
+      String expectedType = "'" + expected.getName() + "'";
+      if (expected != void.class) {
+        expectedType = "'void' or " + expectedType;
+      }
+      throw new IllegalStateException(method.getDeclaringClass().getName()
+          + "."
+          + method.getName()
+          + " must have return type of "
+          + expectedType);
+    }
+    return true;
+  }
+
+  private static boolean isRequired(Field field) {
+    for (Annotation annotation : field.getAnnotations()) {
+      if (annotation.annotationType().getSimpleName().equals("Nullable")) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private static boolean isRequired(Method method) {
+    return method.getAnnotation(Optional.class) == null;
+  }
+
+  private static ArgumentTransformer createArgumentTransformer(Method method,
+      Class<?>[] callbackParameterTypes) {
+    Class<?>[] targetParameterTypes = method.getParameterTypes();
+
+    int targetParameterLength = targetParameterTypes.length;
+    if (targetParameterLength == 0) {
+      // Special case the common case of no arguments.
+      return ArgumentTransformer.EMPTY;
+    }
+
+    int callbackParameterLength = callbackParameterTypes.length;
+    if (targetParameterLength > callbackParameterLength) {
+      throw new IllegalStateException(method.getDeclaringClass().getName()
+          + "."
+          + method.getName()
+          + " must have at most "
+          + callbackParameterLength
+          + " parameter(s).");
+    }
+
+    if (Arrays.equals(targetParameterTypes, callbackParameterTypes)) {
+      // Special case the common case of exact argument match.
+      return ArgumentTransformer.IDENTITY;
+    }
+
+    boolean[] callbackIndexUsed = new boolean[callbackParameterLength];
+    final int[] indexMap = new int[targetParameterLength];
+    nextTarget: for (int targetIndex = 0; targetIndex < targetParameterLength; targetIndex++) {
+      Class<?> targetParameterType = targetParameterTypes[targetIndex];
+      for (int callbackIndex = 0; callbackIndex < callbackParameterLength; callbackIndex++) {
+        if (callbackIndexUsed[callbackIndex]) {
+          continue; // We have already used this callback argument.
+        }
+        Class<?> callbackParameterType = callbackParameterTypes[callbackIndex];
+
+        if (/* exact match */
+            callbackParameterType.equals(targetParameterType)
+            /* or subtype of view */
+            || (View.class.isAssignableFrom(callbackParameterType)
+                && callbackParameterType.isAssignableFrom(targetParameterType))
+            /* or interface (like Checkable) */
+            || targetParameterType.isInterface()) {
+          indexMap[targetIndex] = callbackIndex;
+          callbackIndexUsed[callbackIndex] = true;
+          continue nextTarget; // This avoids the error handling code if loop exits normally.
+        }
+      }
+
+      StringBuilder builder = new StringBuilder();
+      builder.append("Unable to match ")
+          .append(method.getDeclaringClass().getName())
+          .append('.')
+          .append(method.getName())
+          .append(" method arguments.");
+      for (int i = 0; i < targetParameterLength; i++) {
+        builder.append("\n\n  Parameter #")
+            .append(i + 1)
+            .append(": ")
+            .append(targetParameterTypes[i].getName())
+            .append("\n    ");
+        if (i < targetIndex) {
+          builder.append("matched listener parameter #")
+              .append(indexMap[i])
+              .append(": ")
+              .append(callbackParameterTypes[indexMap[i]].getName());
+        } else {
+          builder.append("did not match any listener parameters");
+        }
+      }
+      builder.append("\n\nMethods may have up to ")
+          .append(callbackParameterLength)
+          .append(" parameter(s):\n");
+      for (Class<?> callbackParameter : callbackParameterTypes) {
+        builder.append("\n  ").append(callbackParameter.getName());
+      }
+      builder.append(
+          "\n\nThese may be listed in any order but will be searched for from top to bottom.");
+      throw new IllegalStateException(builder.toString());
+    }
+
+    return new ArgumentTransformer() {
+      @Override public Object[] transform(Object... arguments) {
+        Object[] newArguments = new Object[indexMap.length];
+        for (int i = 0; i < indexMap.length; i++) {
+          newArguments[i] = arguments[indexMap[i]];
+        }
+        return newArguments;
+      }
+
+      @Override public String toString() {
+        StringBuilder builder = new StringBuilder("ArgumentTransformer[");
+        for (int i = 0; i < indexMap.length; i++) {
+          if (i > 0) {
+            builder.append(", ");
+          }
+          builder.append(i).append(" => ").append(indexMap[i]);
+        }
+        return builder.append(']').toString();
+      }
+    };
+  }
+
+  static void trySet(Field field, Object target, @Nullable Object value) {
+    try {
+      field.set(target, value);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException("Unable to assign " + value + " to " + field + " on " + target, e);
+    }
+  }
+
+  private static Object tryInvoke(Method method, Object target, Object... arguments) {
+    Throwable cause;
+    try {
+      return method.invoke(target, arguments);
+    } catch (IllegalAccessException e) {
+      cause = e;
+    } catch (InvocationTargetException e) {
+      cause = e;
+    }
+    throw new RuntimeException(
+        "Unable to invoke " + method + " on " + target + " with arguments "
+            + Arrays.toString(arguments), cause);
+  }
+
+  private static final Setter<CompoundButton, CompoundButton.OnCheckedChangeListener>
+      ON_CHECKED_CHANGE = (view, value, index) -> view.setOnCheckedChangeListener(value);
+  private static final Setter<View, View.OnClickListener> ON_CLICK =
+      (view, value, index) -> view.setOnClickListener(value);
+  private static final Setter<TextView, TextView.OnEditorActionListener> ON_EDITOR_ACTION =
+      (view, value, index) -> view.setOnEditorActionListener(value);
+  private static final Setter<View, View.OnFocusChangeListener> ON_FOCUS_CHANGE =
+      (view, value, index) -> view.setOnFocusChangeListener(value);
+  private static final Setter<AdapterView<?>, AdapterView.OnItemClickListener> ON_ITEM_CLICK =
+      (view, value, index) -> view.setOnItemClickListener(value);
+  private static final Setter<AdapterView<?>, AdapterView.OnItemLongClickListener>
+      ON_ITEM_LONG_CLICK = (view, value, index) -> view.setOnItemLongClickListener(value);
+  private static final Setter<View, View.OnLongClickListener> ON_LONG_CLICK =
+      (view, value, index) -> view.setOnLongClickListener(value);
+  private static final Setter<View, View.OnTouchListener> ON_TOUCH =
+      (view, value, index) -> view.setOnTouchListener(value);
+
+  private static final Class<?>[] ON_CHECKED_CHANGED_TYPES =
+      { CompoundButton.class, boolean.class };
+  private static final Class<?>[] ON_CLICK_TYPES = { View.class };
+  private static final Class<?>[] ON_EDITOR_ACTION_TYPES =
+      { TextView.class, int.class, KeyEvent.class };
+  private static final Class<?>[] ON_FOCUS_CHANGE_TYPES = { View.class, boolean.class };
+  private static final Class<?>[] ON_ITEM_CLICK_TYPES =
+      { AdapterView.class, View.class, int.class, long.class };
+  private static final Class<?>[] ON_ITEM_LONG_CLICK_TYPES = ON_ITEM_CLICK_TYPES;
+  private static final Class<?>[] ON_LONG_CLICK_TYPES = ON_CLICK_TYPES;
+  private static final Class<?>[] ON_TOUCH_TYPES = { View.class, MotionEvent.class };
+
+  private interface ArgumentTransformer {
+    ArgumentTransformer EMPTY = new ArgumentTransformer() {
+      private final Object[] empty = new Object[0];
+
+      @Override public Object[] transform(Object... arguments) {
+        return empty;
+      }
+
+      @Override public String toString() {
+        return "ArgumentTransformer[empty]";
+      }
+    };
+    ArgumentTransformer IDENTITY = new ArgumentTransformer() {
+      @Override public Object[] transform(Object... arguments) {
+        return arguments;
+      }
+
+      @Override public String toString() {
+        return "ArgumentTransformer[identity]";
+      }
+    };
+
+    Object[] transform(Object... arguments);
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java b/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java
new file mode 100644
index 00000000..87923fc8
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java
@@ -0,0 +1,23 @@
+package butterknife;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import java.util.List;
+
+final class CompositeUnbinder implements Unbinder {
+  private @Nullable List<Unbinder> unbinders;
+
+  CompositeUnbinder(@NonNull List<Unbinder> unbinders) {
+    this.unbinders = unbinders;
+  }
+
+  @Override public void unbind() {
+    if (unbinders == null) {
+      throw new IllegalStateException("Bindings already cleared.");
+    }
+    for (Unbinder unbinder : unbinders) {
+      unbinder.unbind();
+    }
+    unbinders = null;
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java b/butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java
new file mode 100644
index 00000000..915c567a
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.reflect.Field;
+
+import static butterknife.ButterKnife.trySet;
+
+final class FieldUnbinder implements Unbinder {
+  private final Object target;
+  private final Field field;
+
+  FieldUnbinder(Object target, Field field) {
+    this.target = target;
+    this.field = field;
+  }
+
+  @Override public void unbind() {
+    trySet(field, target, null);
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
new file mode 100644
index 00000000..2ae07c21
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
@@ -0,0 +1,18 @@
+package butterknife;
+
+import android.view.View;
+import java.util.List;
+
+final class ListenerUnbinder<T extends View> implements Unbinder {
+  private final List<T> targets;
+  private final Setter<T, ?> setter;
+
+  ListenerUnbinder(List<T> targets, Setter<T, ?> setter) {
+    this.targets = targets;
+    this.setter = setter;
+  }
+
+  @Override public void unbind() {
+    ViewCollections.set(targets, setter, null);
+  }
+}
diff --git a/butterknife-runtime/build.gradle b/butterknife-runtime/build.gradle
new file mode 100644
index 00000000..6aa0345b
--- /dev/null
+++ b/butterknife-runtime/build.gradle
@@ -0,0 +1,70 @@
+apply plugin: 'com.android.library'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  defaultConfig {
+    minSdkVersion versions.minSdk
+
+    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+
+    javaCompileOptions {
+      annotationProcessorOptions {
+        includeCompileClasspath = true
+      }
+    }
+  }
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
+  }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
+}
+
+dependencies {
+  api project(':butterknife-annotations')
+  api deps.support.compat
+
+  lintChecks project(':butterknife-lint')
+
+  androidTestImplementation deps.junit
+  androidTestImplementation deps.truth
+  androidTestImplementation deps.support.test.runner
+  androidTestAnnotationProcessor project(':butterknife-compiler')
+
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.compiletesting
+  testImplementation files(getRuntimeJar())
+  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testImplementation project(':butterknife-compiler')
+  testImplementation deps.androidx.annotations
+}
+
+def getRuntimeJar() {
+  try {
+    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
+    File runtimeJar = new File(javaBase, "lib/rt.jar");
+    if (runtimeJar.exists()) {
+      return runtimeJar;
+    }
+    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
+    return runtimeJar.exists() ? runtimeJar : null;
+  } catch (IOException e) {
+    throw new RuntimeException(e);
+  }
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-runtime/gradle.properties b/butterknife-runtime/gradle.properties
new file mode 100644
index 00000000..db9751f9
--- /dev/null
+++ b/butterknife-runtime/gradle.properties
@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=butterknife-runtime
+POM_NAME=ButterKnife Runtime
+POM_PACKAGING=aar
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
new file mode 100644
index 00000000..d0a4e890
--- /dev/null
+++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
@@ -0,0 +1,208 @@
+package butterknife;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.test.InstrumentationRegistry;
+import android.util.Property;
+import android.view.View;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static java.util.Arrays.asList;
+
+public class ViewCollectionsTest {
+  private static final Property<View, Boolean> PROPERTY_ENABLED =
+      new Property<View, Boolean>(Boolean.class, "enabled") {
+        @Override public Boolean get(View view) {
+          return view.isEnabled();
+        }
+
+        @Override public void set(View view, Boolean enabled) {
+          view.setEnabled(enabled);
+        }
+      };
+  private static final Setter<View, Boolean> SETTER_ENABLED =
+      (view, value, index) -> view.setEnabled(value);
+  private static final Action<View> ACTION_DISABLE = (view, index) -> view.setEnabled(false);
+  private static final Action<View> ACTION_ZERO_ALPHA = (view, index) -> view.setAlpha(0f);
+
+  private final Context context = InstrumentationRegistry.getContext();
+
+  @Test public void propertyAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ViewCollections.set(view, PROPERTY_ENABLED, false);
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void propertyAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.set(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void propertyAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.set(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ViewCollections.run(view, ACTION_DISABLE);
+
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void actionsAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+    assertThat(view.getAlpha()).isEqualTo(1f);
+
+    ViewCollections.run(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+    assertThat(view.isEnabled()).isFalse();
+    assertThat(view.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void actionAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.run(views, ACTION_DISABLE);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.run(views, ACTION_DISABLE);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionsAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.run(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void actionsAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.run(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void setterAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ViewCollections.set(view, SETTER_ENABLED, false);
+
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void setterAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.set(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void setterAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.set(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindArrayTest.java
similarity index 98%
rename from butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindArrayTest.java
index 19992317..1efa8bb6 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindArrayTest.java
@@ -4,7 +4,7 @@
 import android.support.test.InstrumentationRegistry;
 import butterknife.BindArray;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBitmapTest.java
similarity index 88%
rename from butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindBitmapTest.java
index b3517fc8..b15fe241 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBitmapTest.java
@@ -5,12 +5,10 @@
 import android.graphics.BitmapFactory;
 import android.support.test.InstrumentationRegistry;
 import butterknife.BindBitmap;
-import butterknife.BindBool;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
-import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertTrue;
 
 public final class BindBitmapTest {
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBoolTest.java
similarity index 95%
rename from butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindBoolTest.java
index 9156f8dc..627d4e98 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindBoolTest.java
@@ -4,7 +4,7 @@
 import android.support.test.InstrumentationRegistry;
 import butterknife.BindBool;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindColorTest.java
similarity index 97%
rename from butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindColorTest.java
index 12c8d020..bc4ac69d 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindColorTest.java
@@ -5,7 +5,7 @@
 import android.support.test.InstrumentationRegistry;
 import butterknife.BindColor;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDimenTest.java
similarity index 97%
rename from butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindDimenTest.java
index 4c76d548..78001649 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDimenTest.java
@@ -4,7 +4,7 @@
 import android.support.test.InstrumentationRegistry;
 import butterknife.BindDimen;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDrawableTest.java
similarity index 84%
rename from butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindDrawableTest.java
index 88d23687..b9f7c063 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindDrawableTest.java
@@ -1,18 +1,14 @@
 package butterknife.functional;
 
 import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.graphics.drawable.Drawable;
 import android.support.test.InstrumentationRegistry;
-import butterknife.BindBitmap;
 import butterknife.BindDrawable;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertTrue;
 
 public final class BindDrawableTest {
   private final Context context = InstrumentationRegistry.getContext();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindFloatTest.java
similarity index 94%
rename from butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindFloatTest.java
index 5ec97658..a835f842 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindFloatTest.java
@@ -4,9 +4,8 @@
 import android.support.test.InstrumentationRegistry;
 import android.util.TypedValue;
 import butterknife.BindFloat;
-import butterknife.BindInt;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindIntTest.java
similarity index 95%
rename from butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindIntTest.java
index 8f091966..9f6e150e 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindIntTest.java
@@ -4,7 +4,7 @@
 import android.support.test.InstrumentationRegistry;
 import butterknife.BindInt;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindStringTest.java
similarity index 95%
rename from butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/functional/BindStringTest.java
index c72e0549..4a0981a3 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/functional/BindStringTest.java
@@ -4,7 +4,7 @@
 import android.support.test.InstrumentationRegistry;
 import butterknife.BindString;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import butterknife.runtime.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
diff --git a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
similarity index 50%
rename from butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
rename to butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
index a46b74a4..f3227a2f 100644
--- a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -5,32 +5,10 @@
 import android.view.View;
 import org.junit.Test;
 
-import static butterknife.internal.Utils.arrayOf;
-import static butterknife.internal.Utils.listOf;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
 public final class UtilsTest {
-  @Test public void listOfFiltersNull() {
-    assertThat(listOf(null, null, null)).isEmpty();
-    assertThat(listOf("One", null, null)).containsExactly("One");
-    assertThat(listOf(null, "One", null)).containsExactly("One");
-    assertThat(listOf(null, null, "One")).containsExactly("One");
-    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
-
-  @Test public void arrayOfFiltersNull() {
-    assertThat(arrayOf(null, null, null)).isEmpty();
-    assertThat(arrayOf("One", null, null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, "One", null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, null, "One")).asList().containsExactly("One");
-    assertThat(arrayOf("One", "Two", null)).asList().containsExactly("One", "Two");
-    assertThat(arrayOf("One", null, "Two")).asList().containsExactly("One", "Two");
-    assertThat(arrayOf(null, "One", "Two")).asList().containsExactly("One", "Two");
-  }
-
   @Test public void finderThrowsNiceError() {
     Context context = InstrumentationRegistry.getContext();
     View view = new View(context);
@@ -57,16 +35,6 @@
     }
   }
 
-  @Test public void testCastParam() {
-    try {
-      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
-      fail();
-    } catch (IllegalStateException ise) {
-      assertThat(ise.getMessage()).isEqualTo(
-          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");
-    }
-  }
-
   static final class EditModeView extends View {
     EditModeView(Context context) {
       super(context);
diff --git a/butterknife/src/androidTest/res/color/colors.xml b/butterknife-runtime/src/androidTest/res/color/colors.xml
similarity index 100%
rename from butterknife/src/androidTest/res/color/colors.xml
rename to butterknife-runtime/src/androidTest/res/color/colors.xml
diff --git a/butterknife/src/androidTest/res/drawable/circle.xml b/butterknife-runtime/src/androidTest/res/drawable/circle.xml
similarity index 100%
rename from butterknife/src/androidTest/res/drawable/circle.xml
rename to butterknife-runtime/src/androidTest/res/drawable/circle.xml
diff --git a/butterknife/src/androidTest/res/drawable/pixel.png b/butterknife-runtime/src/androidTest/res/drawable/pixel.png
similarity index 100%
rename from butterknife/src/androidTest/res/drawable/pixel.png
rename to butterknife-runtime/src/androidTest/res/drawable/pixel.png
diff --git a/butterknife/src/androidTest/res/values/values.xml b/butterknife-runtime/src/androidTest/res/values/values.xml
similarity index 100%
rename from butterknife/src/androidTest/res/values/values.xml
rename to butterknife-runtime/src/androidTest/res/values/values.xml
diff --git a/butterknife-runtime/src/main/AndroidManifest.xml b/butterknife-runtime/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..e116347b
--- /dev/null
+++ b/butterknife-runtime/src/main/AndroidManifest.xml
@@ -0,0 +1,2 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="butterknife.runtime"/>
diff --git a/butterknife-runtime/src/main/java/butterknife/Action.java b/butterknife-runtime/src/main/java/butterknife/Action.java
new file mode 100644
index 00000000..b7a27918
--- /dev/null
+++ b/butterknife-runtime/src/main/java/butterknife/Action.java
@@ -0,0 +1,11 @@
+package butterknife;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.UiThread;
+import android.view.View;
+
+/** An action that can be applied to a list of views. */
+public interface Action<T extends View> {
+  /** Apply the action on the {@code view} which is at {@code index} in the list. */
+  @UiThread void apply(@NonNull T view, int index);
+}
diff --git a/butterknife-runtime/src/main/java/butterknife/Setter.java b/butterknife-runtime/src/main/java/butterknife/Setter.java
new file mode 100644
index 00000000..ccbae905
--- /dev/null
+++ b/butterknife-runtime/src/main/java/butterknife/Setter.java
@@ -0,0 +1,12 @@
+package butterknife;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.UiThread;
+import android.view.View;
+
+/** A setter that can apply a value to a list of views. */
+public interface Setter<T extends View, V> {
+  /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
+  @UiThread void set(@NonNull T view, @Nullable V value, int index);
+}
diff --git a/butterknife/src/main/java/butterknife/Unbinder.java b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
similarity index 70%
rename from butterknife/src/main/java/butterknife/Unbinder.java
rename to butterknife-runtime/src/main/java/butterknife/Unbinder.java
index ce27c3e9..663fc869 100644
--- a/butterknife/src/main/java/butterknife/Unbinder.java
+++ b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
@@ -6,7 +6,5 @@
 public interface Unbinder {
   @UiThread void unbind();
 
-  Unbinder EMPTY = new Unbinder() {
-    @Override public void unbind() { }
-  };
+  Unbinder EMPTY = () -> { };
 }
diff --git a/butterknife-runtime/src/main/java/butterknife/ViewCollections.java b/butterknife-runtime/src/main/java/butterknife/ViewCollections.java
new file mode 100644
index 00000000..7b10fdae
--- /dev/null
+++ b/butterknife-runtime/src/main/java/butterknife/ViewCollections.java
@@ -0,0 +1,124 @@
+package butterknife;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.UiThread;
+import android.util.Property;
+import android.view.View;
+import java.util.List;
+
+/** Convenience methods for working with view collections. */
+public final class ViewCollections {
+  /** Apply the specified {@code actions} across the {@code list} of views. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void run(@NonNull List<T> list,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(list.get(i), i);
+      }
+    }
+  }
+
+  /** Apply the specified {@code actions} across the {@code array} of views. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void run(@NonNull T[] array,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(array[i], i);
+      }
+    }
+  }
+
+  /** Apply the specified {@code action} across the {@code list} of views. */
+  @UiThread
+  public static <T extends View> void run(@NonNull List<T> list,
+      @NonNull Action<? super T> action) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      action.apply(list.get(i), i);
+    }
+  }
+
+  /** Apply the specified {@code action} across the {@code array} of views. */
+  @UiThread
+  public static <T extends View> void run(@NonNull T[] array, @NonNull Action<? super T> action) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      action.apply(array[i], i);
+    }
+  }
+
+  /** Apply {@code actions} to {@code view}. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void run(@NonNull T view,
+      @NonNull Action<? super T>... actions) {
+    for (Action<? super T> action : actions) {
+      action.apply(view, 0);
+    }
+  }
+
+  /** Apply {@code action} to {@code view}. */
+  @UiThread
+  public static <T extends View> void run(@NonNull T view, @NonNull Action<? super T> action) {
+    action.apply(view, 0);
+  }
+
+  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull List<T> list,
+      @NonNull Setter<? super T, V> setter, @Nullable V value) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      setter.set(list.get(i), value, i);
+    }
+  }
+
+  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T[] array,
+      @NonNull Setter<? super T, V> setter, @Nullable V value) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value, i);
+    }
+  }
+
+  /** Set {@code value} on {@code view} using {@code setter}. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T view,
+      @NonNull Setter<? super T, V> setter, @Nullable V value) {
+    setter.set(view, value, 0);
+  }
+
+  /**
+   * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
+   */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull List<T> list,
+      @NonNull Property<? super T, V> setter, @Nullable V value) {
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = list.size(); i < count; i++) {
+      setter.set(list.get(i), value);
+    }
+  }
+
+  /**
+   * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
+   */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T[] array,
+      @NonNull Property<? super T, V> setter, @Nullable V value) {
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value);
+    }
+  }
+
+  /** Apply {@code value} to {@code view} using {@code property}. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T view,
+      @NonNull Property<? super T, V> setter, @Nullable V value) {
+    setter.set(view, value);
+  }
+
+  private ViewCollections() {
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
similarity index 80%
rename from butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
rename to butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index f936ff6f..b1de399e 100644
--- a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -9,11 +9,7 @@
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
   static boolean enabled = true;
 
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
+  private static final Runnable ENABLE_AGAIN = () -> enabled = true;
 
   @Override public final void onClick(View v) {
     if (enabled) {
diff --git a/butterknife/src/main/java/butterknife/internal/ImmutableList.java b/butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java
similarity index 100%
rename from butterknife/src/main/java/butterknife/internal/ImmutableList.java
rename to butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java
similarity index 95%
rename from butterknife/src/main/java/butterknife/internal/Utils.java
rename to butterknife-runtime/src/main/java/butterknife/internal/Utils.java
index e9101f74..7f9339cd 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java
@@ -50,16 +50,7 @@ public static float getFloat(Context context, @DimenRes int id) {
   }
 
   @SafeVarargs
-  public static <T> T[] arrayOf(T... views) {
-    return filterNull(views);
-  }
-
-  @SafeVarargs
-  public static <T> List<T> listOf(T... views) {
-    return new ImmutableList<>(filterNull(views));
-  }
-
-  private static <T> T[] filterNull(T[] views) {
+  public static <T> T[] arrayFilteringNull(T... views) {
     int end = 0;
     int length = views.length;
     for (int i = 0; i < length; i++) {
@@ -77,6 +68,11 @@ public static float getFloat(Context context, @DimenRes int id) {
     return newViews;
   }
 
+  @SafeVarargs
+  public static <T> List<T> listFilteringNull(T... views) {
+    return new ImmutableList<>(arrayFilteringNull(views));
+  }
+
   public static <T> T findOptionalViewAsType(View source, @IdRes int id, String who,
       Class<T> cls) {
     View view = source.findViewById(id);
diff --git a/butterknife/src/test/java/butterknife/BindAnimTest.java b/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindAnimTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
diff --git a/butterknife/src/test/java/butterknife/BindArrayTest.java b/butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindArrayTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
diff --git a/butterknife/src/test/java/butterknife/BindBitmapTest.java b/butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindBitmapTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java
diff --git a/butterknife/src/test/java/butterknife/BindBoolTest.java b/butterknife-runtime/src/test/java/butterknife/BindBoolTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindBoolTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindBoolTest.java
diff --git a/butterknife/src/test/java/butterknife/BindColorTest.java b/butterknife-runtime/src/test/java/butterknife/BindColorTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindColorTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindColorTest.java
diff --git a/butterknife/src/test/java/butterknife/BindDimenTest.java b/butterknife-runtime/src/test/java/butterknife/BindDimenTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindDimenTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindDimenTest.java
diff --git a/butterknife/src/test/java/butterknife/BindDrawableTest.java b/butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindDrawableTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
diff --git a/butterknife/src/test/java/butterknife/BindFloatTest.java b/butterknife-runtime/src/test/java/butterknife/BindFloatTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindFloatTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindFloatTest.java
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindFontTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindFontTest.java
diff --git a/butterknife/src/test/java/butterknife/BindIntTest.java b/butterknife-runtime/src/test/java/butterknife/BindIntTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindIntTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindIntTest.java
diff --git a/butterknife/src/test/java/butterknife/BindStringTest.java b/butterknife-runtime/src/test/java/butterknife/BindStringTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindStringTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindStringTest.java
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/BindViewTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindViewTest.java
index 525abe5b..c252098e 100644
--- a/butterknife/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
@@ -7,6 +7,7 @@
 import javax.tools.StandardLocation;
 import org.junit.Test;
 
+import static butterknife.TestStubs.ANDROIDX_CONTEXT_COMPAT;
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
@@ -58,6 +59,52 @@
         .generatesSources(bindingSource);
   }
 
+  @Test public void bindingViewAndroidX() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources())
+        .that(asList(source, ANDROIDX_CONTEXT_COMPAT))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
   @Test public void bindingViewNonDebuggable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife/src/test/java/butterknife/BindViewsTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
similarity index 97%
rename from butterknife/src/test/java/butterknife/BindViewsTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
index e41a3ec4..437d1aee 100644
--- a/butterknife/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
@@ -56,7 +56,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
@@ -104,7 +104,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
@@ -155,7 +155,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n"
         + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", TextView.class), \n"
         + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", TextView.class));\n"
@@ -203,7 +203,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        source.findViewById(1), \n"
         + "        source.findViewById(2), \n"
         + "        source.findViewById(3));\n"
@@ -252,7 +252,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        (TextView) source.findViewById(1), \n"
         + "        (TextView) source.findViewById(2), \n"
         + "        (TextView) source.findViewById(3));\n"
@@ -301,7 +301,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
+        + "    target.thing = Utils.listFilteringNull(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
@@ -387,7 +387,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
+        + "    target.thing = Utils.listFilteringNull(\n"
         + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n"
         + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", Test.TestInterface.class), \n"
         + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", Test.TestInterface.class));\n"
@@ -436,7 +436,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
+        + "    target.thing = Utils.listFilteringNull(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
@@ -488,7 +488,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
+        + "    target.thing = Utils.listFilteringNull(\n"
         + "        source.findViewById(1), \n"
         + "        source.findViewById(2), \n"
         + "        source.findViewById(3));\n"
@@ -643,7 +643,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        Utils.findRequiredView(source, android.R.color.black, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, android.R.color.white, \"field 'thing'\"));\n"
         + "  }\n"
@@ -691,7 +691,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        Utils.findRequiredView(source, android.R.color.black, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, android.R.color.white, \"field 'thing'\"));\n"
diff --git a/butterknife/src/test/java/butterknife/ExtendActivityTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/ExtendActivityTest.java
rename to butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
diff --git a/butterknife/src/test/java/butterknife/ExtendDialogTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/ExtendDialogTest.java
rename to butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
diff --git a/butterknife/src/test/java/butterknife/ExtendViewTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/ExtendViewTest.java
rename to butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
diff --git a/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java
diff --git a/butterknife-runtime/src/test/java/butterknife/OnClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnClickTest.java
new file mode 100644
index 00000000..324f727e
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/OnClickTest.java
@@ -0,0 +1,412 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnClickTest {
+  @Test public void findOnlyCalledOnce() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void methodCastsArgumentNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  interface TestInterface {}\n"
+        + "  @OnClick(0) void click0() {}\n"
+        + "  @OnClick(1) void click1(View view) {}\n"
+        + "  @OnClick(2) void click2(TextView view) {}\n"
+        + "  @OnClick(3) void click3(Button button) {}\n"
+        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view0;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  private View view4;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = source.findViewById(0);\n"
+        + "    view0 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click0();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(1);\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click1(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(2);\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click2((TextView) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(3);\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click3((Button) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(4);\n"
+        + "    view4 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click4((Test.TestInterface) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view0.setOnClickListener(null);\n"
+        + "    view0 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "    view4.setOnClickListener(null);\n"
+        + "    view4 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void optionalAndRequiredSkipsNullCheck() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @Optional @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package java.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package android.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfHasReturnType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public String doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfPrivateMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  private void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public static void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfParameterNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(String thing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(""
+            + "Unable to match @OnClick method arguments. (test.Test.doStuff)\n"
+            + "  \n"
+            + "    Parameter #1: java.lang.String\n"
+            + "      did not match any listener parameters\n"
+            + "  \n"
+            + "  Methods may have up to 1 parameter(s):\n"
+            + "  \n"
+            + "    android.view.View\n"
+            + "  \n"
+            + "  These may be listed in any order but will be searched for from top to bottom.")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfMoreThanOneParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(View thing, View otherThing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public interface Test {\n"
+        + "  @OnClick(1)\n"
+        + "  void doStuff();\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
+        .in(source).onLine(3);
+  }
+
+  @Test public void failsIfHasDuplicateIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick({1, 2, 3, 1})\n"
+        + "  void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnEditorActionTest.java b/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnEditorActionTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
diff --git a/butterknife/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnFocusChangeTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnItemClickTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
diff --git a/butterknife/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnItemLongClickTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
diff --git a/butterknife/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnItemSelectedTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
diff --git a/butterknife/src/test/java/butterknife/OnLongClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnLongClickTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnLongClickTest.java
diff --git a/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java b/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
new file mode 100644
index 00000000..2326802e
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
@@ -0,0 +1,143 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static butterknife.TestStubs.ANDROIDX_CONTEXT_COMPAT;
+import static butterknife.TestStubs.ANDROIDX_VIEW_PAGER;
+import static butterknife.TestStubs.SUPPORT_VIEW_PAGER;
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class OnPageChangeTest {
+  @Test public void pageChange() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnPageChange;\n"
+        + "public class Test {\n"
+        + "  @OnPageChange(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.view.ViewPager;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private ViewPager.OnPageChangeListener view1OnPageChangeListener;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view1OnPageChangeListener = new ViewPager.OnPageChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onPageSelected(int p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrolled(int p0, float p1, int p2) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrollStateChanged(int p0) {\n"
+        + "      }\n"
+        + "    };\n"
+        + "    ((ViewPager) view).addOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((ViewPager) view1).removeOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "    view1OnPageChangeListener = null;\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources())
+        .that(asList(source, SUPPORT_VIEW_PAGER))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void pageChangeAndroidX() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnPageChange;\n"
+        + "public class Test {\n"
+        + "  @OnPageChange(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.viewpager.widget.ViewPager;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private ViewPager.OnPageChangeListener view1OnPageChangeListener;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view1OnPageChangeListener = new ViewPager.OnPageChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onPageSelected(int p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrolled(int p0, float p1, int p2) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrollStateChanged(int p0) {\n"
+        + "      }\n"
+        + "    };\n"
+        + "    ((ViewPager) view).addOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((ViewPager) view1).removeOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "    view1OnPageChangeListener = null;\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources())
+        .that(asList(source, ANDROIDX_VIEW_PAGER, ANDROIDX_CONTEXT_COMPAT))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnTextChangedTest.java b/butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnTextChangedTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
diff --git a/butterknife/src/test/java/butterknife/OnTouchTest.java b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/OnTouchTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
diff --git a/butterknife/src/test/java/butterknife/RClassTest.java b/butterknife-runtime/src/test/java/butterknife/RClassTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/RClassTest.java
rename to butterknife-runtime/src/test/java/butterknife/RClassTest.java
diff --git a/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java b/butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java
similarity index 84%
rename from butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
rename to butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java
index 372f15dd..72a13522 100644
--- a/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
+++ b/butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java
@@ -46,20 +46,12 @@
   public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
     if (!processed) {
       processed = true;
-      Writer writer = null;
-      try {
-        writer = processingEnv.getFiler().createSourceFile(generatedClassName).openWriter();
+      try (Writer writer = processingEnv.getFiler()
+          .createSourceFile(generatedClassName)
+          .openWriter()) {
         writer.append(generatedSource);
       } catch (IOException e) {
         throw new RuntimeException(e);
-      } finally {
-        if (writer != null) {
-          try {
-            writer.close();
-          } catch (IOException e) {
-            throw new RuntimeException(e);
-          }
-        }
       }
     }
     return false;
diff --git a/butterknife-runtime/src/test/java/butterknife/TestStubs.java b/butterknife-runtime/src/test/java/butterknife/TestStubs.java
new file mode 100644
index 00000000..8ff58539
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/TestStubs.java
@@ -0,0 +1,43 @@
+package butterknife;
+
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+
+final class TestStubs {
+  /**
+   * The presence of this type (and {@code androidx.annotation.NonNull}, which should be on the
+   * classpath already) trigger AndroidX emission.
+   */
+  static final JavaFileObject ANDROIDX_CONTEXT_COMPAT =
+      JavaFileObjects.forSourceString("androidx.core.content.ContextCompat", ""
+          + "package androidx.core.content;\n"
+          + "public class ContextCompat {}");
+
+  static final JavaFileObject ANDROIDX_VIEW_PAGER =
+      JavaFileObjects.forSourceString("androidx.viewpager.widget.ViewPager", ""
+          + "package androidx.viewpager.widget;\n"
+          + "\n"
+          + "public interface ViewPager {\n"
+          + "  void addOnPageChangeListener(OnPageChangeListener listener);\n"
+          + "  void removeOnPageChangeListener(OnPageChangeListener listener);\n"
+          + "  interface OnPageChangeListener {\n"
+          + "    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);\n"
+          + "    void onPageSelected(int position);\n"
+          + "    void onPageScrollStateChanged(int state);\n"
+          + "  }\n"
+          + "}\n");
+
+  static final JavaFileObject SUPPORT_VIEW_PAGER =
+      JavaFileObjects.forSourceString("androidx.viewpager.widget.ViewPager", ""
+          + "package android.support.v4.view;\n"
+          + "\n"
+          + "public interface ViewPager {\n"
+          + "  void addOnPageChangeListener(OnPageChangeListener listener);\n"
+          + "  void removeOnPageChangeListener(OnPageChangeListener listener);\n"
+          + "  interface OnPageChangeListener {\n"
+          + "    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);\n"
+          + "    void onPageSelected(int position);\n"
+          + "    void onPageScrollStateChanged(int state);\n"
+          + "  }\n"
+          + "}\n");
+}
diff --git a/butterknife/src/test/java/butterknife/UnbinderTest.java b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/UnbinderTest.java
rename to butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
index c59ae3fc..e2f06023 100644
--- a/butterknife/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
@@ -193,11 +193,9 @@
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class A {\n"
         + "  @BindColor(android.R.color.black) @ColorInt int blackColor;\n"
         + "  public A(View view) {\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -206,12 +204,10 @@
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class B extends A {\n"
         + "  @BindColor(android.R.color.white) @ColorInt int whiteColor;\n"
         + "  public B(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -221,13 +217,11 @@
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class C extends B {\n"
         + "  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;\n"
         + "  @BindView(android.R.id.button1) View button1;\n"
         + "  public C(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -236,12 +230,10 @@
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class D extends C {\n"
         + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
         + "  public D(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -250,12 +242,10 @@
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class E extends C {\n"
         + "  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;\n"
         + "  public E(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -264,12 +254,10 @@
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class F extends D {\n"
         + "  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;\n"
         + "  public F(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -279,14 +267,12 @@
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "import butterknife.OnClick;\n"
         + "public class G extends E {\n"
         + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
         + "  @BindView(android.R.id.button2) View button2;\n"
         + "  public G(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "  @OnClick(android.R.id.content) public void onClick() {\n"
         + "  }\n"
@@ -298,13 +284,11 @@
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class H extends G {\n"
-        + "  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;\n"
+        + "  @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;\n"
         + "  @BindView(android.R.id.button3) View button3;\n"
         + "  public H(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -505,7 +489,7 @@
         + "    this.target = target;\n"
         + "    target.button3 = Utils.findRequiredView(source, android.R.id.button3, \"field 'button3'\");\n"
         + "    Context context = source.getContext();\n"
-        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.primary_text_dark);\n"
+        + "    target.holoGreenDark = ContextCompat.getColor(context, android.R.color.holo_green_dark);\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/UtilsTest.java b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java
new file mode 100644
index 00000000..ef00e11e
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java
@@ -0,0 +1,41 @@
+package butterknife;
+
+import butterknife.internal.Utils;
+import org.junit.Test;
+
+import static butterknife.internal.Utils.arrayFilteringNull;
+import static butterknife.internal.Utils.listFilteringNull;
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class UtilsTest {
+  @Test public void listOfFiltersNull() {
+    assertThat(listFilteringNull(null, null, null)).isEmpty();
+    assertThat(listFilteringNull("One", null, null)).containsExactly("One");
+    assertThat(listFilteringNull(null, "One", null)).containsExactly("One");
+    assertThat(listFilteringNull(null, null, "One")).containsExactly("One");
+    assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");
+  }
+
+  @Test public void arrayOfFiltersNull() {
+    assertThat(arrayFilteringNull(null, null, null)).isEmpty();
+    assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");
+    assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");
+    assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");
+    assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");
+    assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");
+    assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");
+  }
+
+  @Test public void testCastParam() {
+    try {
+      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
+      fail();
+    } catch (IllegalStateException ise) {
+      assertThat(ise.getMessage()).isEqualTo(
+          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");
+    }
+  }
+}
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index b08fccc8..76c74263 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -9,12 +9,11 @@ android {
     consumerProguardFiles 'proguard-rules.txt'
 
     testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+  }
 
-    javaCompileOptions {
-      annotationProcessorOptions {
-        includeCompileClasspath = true
-      }
-    }
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
   }
 
   lintOptions {
@@ -31,36 +30,12 @@ android {
 }
 
 dependencies {
-  api project(':butterknife-annotations')
-  api deps.support.compat
-
-  lintChecks project(':butterknife-lint')
+  api project(':butterknife-runtime')
 
   androidTestImplementation deps.junit
   androidTestImplementation deps.truth
   androidTestImplementation deps.support.test.runner
   androidTestAnnotationProcessor project(':butterknife-compiler')
-
-  testImplementation deps.junit
-  testImplementation deps.truth
-  testImplementation deps.compiletesting
-  testImplementation files(getRuntimeJar())
-  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
-  testImplementation project(':butterknife-compiler')
-}
-
-def getRuntimeJar() {
-  try {
-    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
-    File runtimeJar = new File(javaBase, "lib/rt.jar");
-    if (runtimeJar.exists()) {
-      return runtimeJar;
-    }
-    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
-    return runtimeJar.exists() ? runtimeJar : null;
-  } catch (IOException e) {
-    throw new RuntimeException(e);
-  }
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
index 9bde9ff5..2c496e9a 100644
--- a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -1,10 +1,9 @@
 package butterknife;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.test.InstrumentationRegistry;
-import android.support.test.filters.SdkSuppress;
 import android.util.Property;
 import android.view.View;
 import java.util.List;
@@ -12,12 +11,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
 import static com.google.common.truth.Truth.assertThat;
 import static java.util.Arrays.asList;
 
-@TargetApi(ICE_CREAM_SANDWICH)
-@SdkSuppress(minSdkVersion = ICE_CREAM_SANDWICH)
 public class ButterKnifeTest {
   private static final Property<View, Boolean> PROPERTY_ENABLED =
       new Property<View, Boolean>(Boolean.class, "enabled") {
@@ -30,21 +26,11 @@
         }
       };
   private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
-      new ButterKnife.Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, Boolean value, int index) {
-          view.setEnabled(value);
-        }
-      };
-  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setEnabled(false);
-    }
-  };
-  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setAlpha(0f);
-    }
-  };
+      (view, value, index) -> view.setEnabled(value);
+  private static final ButterKnife.Action<View> ACTION_DISABLE =
+      (view, index) -> view.setEnabled(false);
+  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA =
+      (view, index) -> view.setAlpha(0f);
 
   private final Context context = InstrumentationRegistry.getContext();
 
@@ -234,7 +220,8 @@ public void resetViewsCache() {
     }
 
     Example example = new Example();
-    assertThat(ButterKnife.bind(example, (View) null)).isSameAs(Unbinder.EMPTY);
+    View view = new View(context);
+    assertThat(ButterKnife.bind(example, view)).isSameAs(Unbinder.EMPTY);
   }
 
   @Test public void bindingKnownPackagesIsNoOp() {
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index e4090708..655e5eb2 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -1,13 +1,10 @@
 package butterknife;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.Dialog;
-import android.os.Build;
 import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.annotation.RequiresApi;
 import android.support.annotation.UiThread;
 import android.support.annotation.VisibleForTesting;
 import android.util.Log;
@@ -47,12 +44,6 @@
  * {@literal @}BindView({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
- * There are three convenience methods for working with view collections:
- * <ul>
- * <li>{@link #apply(List, Action)} &ndash; Applies an action to each view.</li>
- * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>
- * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>
- * </ul>
  * <p>
  * To bind listeners to your views you can annotate your methods:
  * <pre><code>
@@ -86,20 +77,6 @@ private ButterKnife() {
     throw new AssertionError("No instances.");
   }
 
-  /** An action that can be applied to a list of views. */
-  public interface Action<T extends View> {
-    /** Apply the action on the {@code view} which is at {@code index} in the list. */
-    @UiThread
-    void apply(@NonNull T view, int index);
-  }
-
-  /** A setter that can apply a value to a list of views. */
-  public interface Setter<T extends View, V> {
-    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
-    @UiThread
-    void set(@NonNull T view, V value, int index);
-  }
-
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
@@ -120,7 +97,7 @@ public static void setDebug(boolean debug) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Activity target) {
     View sourceView = target.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return bind(target, sourceView);
   }
 
   /**
@@ -131,7 +108,7 @@ public static Unbinder bind(@NonNull Activity target) {
    */
   @NonNull @UiThread
   public static Unbinder bind(@NonNull View target) {
-    return createBinding(target, target);
+    return bind(target, target);
   }
 
   /**
@@ -143,7 +120,7 @@ public static Unbinder bind(@NonNull View target) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Dialog target) {
     View sourceView = target.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return bind(target, sourceView);
   }
 
   /**
@@ -156,35 +133,31 @@ public static Unbinder bind(@NonNull Dialog target) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
     View sourceView = source.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return bind(target, sourceView);
   }
 
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
-   * {@link View} as the view root.
+   * {@link Dialog} as the view root.
    *
    * @param target Target class for view binding.
-   * @param source View root on which IDs will be looked up.
+   * @param source Dialog on which IDs will be looked up.
    */
   @NonNull @UiThread
-  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
-    return createBinding(target, source);
+  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
+    View sourceView = source.getWindow().getDecorView();
+    return bind(target, sourceView);
   }
 
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
-   * {@link Dialog} as the view root.
+   * {@link View} as the view root.
    *
    * @param target Target class for view binding.
-   * @param source Dialog on which IDs will be looked up.
+   * @param source View root on which IDs will be looked up.
    */
   @NonNull @UiThread
-  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
-    View sourceView = source.getWindow().getDecorView();
-    return createBinding(target, sourceView);
-  }
-
-  private static Unbinder createBinding(@NonNull Object target, @NonNull View source) {
+  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     Class<?> targetClass = target.getClass();
     if (debug) Log.d(TAG, "Looking up binding for " + targetClass.getName());
     Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);
@@ -220,7 +193,8 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
       return bindingCtor;
     }
     String clsName = cls.getName();
-    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
+    if (clsName.startsWith("android.") || clsName.startsWith("java.")
+        || clsName.startsWith("androidx.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
       return null;
     }
@@ -239,119 +213,107 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
     return bindingCtor;
   }
 
-  /** Apply the specified {@code actions} across the {@code list} of views. */
+  /** @deprecated Use {@link ViewCollections#run(List, butterknife.Action[])} */
   @UiThread
+  @Deprecated
   @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,
       @NonNull Action<? super T>... actions) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      for (Action<? super T> action : actions) {
-        action.apply(list.get(i), i);
-      }
-    }
+    ViewCollections.run(list, actions);
   }
 
-  /** Apply the specified {@code actions} across the {@code array} of views. */
+  /** @deprecated Use {@link ViewCollections#run(View[], butterknife.Action[])} */
   @UiThread
+  @Deprecated
   @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,
       @NonNull Action<? super T>... actions) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      for (Action<? super T> action : actions) {
-        action.apply(array[i], i);
-      }
-    }
+    ViewCollections.run(array, actions);
   }
 
-  /** Apply the specified {@code action} across the {@code list} of views. */
+  /** @deprecated Use {@link ViewCollections#run(List, butterknife.Action)} */
   @UiThread
+  @Deprecated
   public static <T extends View> void apply(@NonNull List<T> list,
       @NonNull Action<? super T> action) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      action.apply(list.get(i), i);
-    }
+    ViewCollections.run(list, action);
   }
 
-  /** Apply the specified {@code action} across the {@code array} of views. */
+  /** @deprecated Use {@link ViewCollections#run(View[], butterknife.Action)} */
   @UiThread
+  @Deprecated
   public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      action.apply(array[i], i);
-    }
+    ViewCollections.run(array, action);
   }
 
-  /** Apply {@code actions} to {@code view}. */
+  /** @deprecated Use {@link ViewCollections#run(View, butterknife.Action[])} */
   @UiThread
+  @Deprecated
   @SafeVarargs public static <T extends View> void apply(@NonNull T view,
       @NonNull Action<? super T>... actions) {
-    for (Action<? super T> action : actions) {
-      action.apply(view, 0);
-    }
+    ViewCollections.run(view, actions);
   }
 
-  /** Apply {@code action} to {@code view}. */
+  /** @deprecated {@link ViewCollections#run(View, butterknife.Action)} */
   @UiThread
+  @Deprecated
   public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
-    action.apply(view, 0);
+    ViewCollections.run(view, action);
   }
 
-  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
+  /** @deprecated Use {@link ViewCollections#set(List, butterknife.Setter, Object)} */
   @UiThread
+  @Deprecated
   public static <T extends View, V> void apply(@NonNull List<T> list,
       @NonNull Setter<? super T, V> setter, V value) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      setter.set(list.get(i), value, i);
-    }
+    ViewCollections.set(list, setter, value);
   }
 
-  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
+  /** @deprecated Use {@link ViewCollections#set(View[], butterknife.Setter, Object)} */
   @UiThread
+  @Deprecated
   public static <T extends View, V> void apply(@NonNull T[] array,
       @NonNull Setter<? super T, V> setter, V value) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      setter.set(array[i], value, i);
-    }
+    ViewCollections.set(array, setter, value);
   }
 
-  /** Set {@code value} on {@code view} using {@code setter}. */
+  /** @deprecated Use {@link ViewCollections#set(View, butterknife.Setter, Object)} */
   @UiThread
+  @Deprecated
   public static <T extends View, V> void apply(@NonNull T view,
       @NonNull Setter<? super T, V> setter, V value) {
-    setter.set(view, value, 0);
+    ViewCollections.set(view, setter, value);
   }
 
-  /**
-   * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
-   */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
-  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  /** @deprecated Use {@link ViewCollections#set(List, Property, Object)} */
   @UiThread
+  @Deprecated
   public static <T extends View, V> void apply(@NonNull List<T> list,
       @NonNull Property<? super T, V> setter, V value) {
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = list.size(); i < count; i++) {
-      setter.set(list.get(i), value);
-    }
+    ViewCollections.set(list, setter, value);
   }
 
-  /**
-   * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
-   */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
-  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  /** @deprecated Use {@link ViewCollections#set(View[], Property, Object)} */
   @UiThread
+  @Deprecated
   public static <T extends View, V> void apply(@NonNull T[] array,
       @NonNull Property<? super T, V> setter, V value) {
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = array.length; i < count; i++) {
-      setter.set(array[i], value);
-    }
+    ViewCollections.set(array, setter, value);
   }
 
-  /** Apply {@code value} to {@code view} using {@code property}. */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
-  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  /** @deprecated Use {@link ViewCollections#set(View, Property, Object)} */
   @UiThread
+  @Deprecated
   public static <T extends View, V> void apply(@NonNull T view,
       @NonNull Property<? super T, V> setter, V value) {
-    setter.set(view, value);
+    ViewCollections.set(view, setter, value);
+  }
+
+  /** @deprecated Use {@link butterknife.Action} */
+  @Deprecated
+  public interface Action<T extends View> extends butterknife.Action<T> {
+  }
+
+  /** @deprecated Use {@link butterknife.Setter} */
+  @Deprecated
+  public interface Setter<T extends View, V> extends butterknife.Setter<T, V> {
   }
 }
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index bb2a5807..8b0a8718 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -6,12 +6,6 @@
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
  * {@link butterknife.BindView @BindView} on fields.</li>
  * <li>Group multiple views in a {@linkplain java.util.List list} or array.
- * Operate on all of them at once with
- * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
- * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
- * butterknife.ButterKnife.Setter, Object) setters}, or
- * {@linkplain butterknife.ButterKnife#apply(java.util.List, android.util.Property, Object)
- * properties}.</li>
  * <li>Eliminate anonymous inner-classes for listeners by annotating methods with
  * {@link butterknife.OnClick @OnClick} and others.</li>
  * <li>Eliminate resource lookups by using resource annotations on fields.</li>
diff --git a/butterknife/src/test/java/android/support/v4/view/ViewPager.java b/butterknife/src/test/java/android/support/v4/view/ViewPager.java
deleted file mode 100644
index f5be6a29..00000000
--- a/butterknife/src/test/java/android/support/v4/view/ViewPager.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package android.support.v4.view;
-
-/** STUB! Required for test sources to compile. */
-public interface ViewPager {
-  void addOnPageChangeListener(OnPageChangeListener listener);
-
-  void removeOnPageChangeListener(OnPageChangeListener listener);
-
-  interface OnPageChangeListener {
-    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);
-
-    void onPageSelected(int position);
-
-    void onPageScrollStateChanged(int state);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
deleted file mode 100644
index 9d06efce..00000000
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ /dev/null
@@ -1,848 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnClickTest {
-  @Test public void onClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void onClickBindingFinalType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public final class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public final class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void onClickMultipleBindings() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff1() {}\n"
-        + "  @OnClick(1) void doStuff2() {}\n"
-        + "  @OnClick({1, 2}) void doStuff3(View v) {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "        target.doStuff2();\n"
-        + "        target.doStuff3(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 2, \"method 'doStuff3'\");\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff3(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void findOnlyCalledOnce() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @BindView(1) View view;\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
-        + "    target.view = view;\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.view = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void methodVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) public void thing1() {}\n"
-        + "  @OnClick(2) void thing2() {}\n"
-        + "  @OnClick(3) protected void thing3() {}\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings();
-  }
-
-  @Test public void methodCastsArgument() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  interface TestInterface {}\n"
-        + "  @OnClick(0) void click0() {}\n"
-        + "  @OnClick(1) void click1(View view) {}\n"
-        + "  @OnClick(2) void click2(TextView view) {}\n"
-        + "  @OnClick(3) void click3(Button button) {}\n"
-        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view0;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  private View view3;\n"
-        + "  private View view4;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 0, \"method 'click0'\");\n"
-        + "    view0 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click0();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'click1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click1(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 2, \"method 'click2'\");\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
-        + "    view3 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
-        + "    view4 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view0.setOnClickListener(null);\n"
-        + "    view0 = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "    view3.setOnClickListener(null);\n"
-        + "    view3 = null;\n"
-        + "    view4.setOnClickListener(null);\n"
-        + "    view4 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void methodCastsArgumentNonDebuggable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  interface TestInterface {}\n"
-        + "  @OnClick(0) void click0() {}\n"
-        + "  @OnClick(1) void click1(View view) {}\n"
-        + "  @OnClick(2) void click2(TextView view) {}\n"
-        + "  @OnClick(3) void click3(Button button) {}\n"
-        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view0;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  private View view3;\n"
-        + "  private View view4;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = source.findViewById(0);\n"
-        + "    view0 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click0();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(1);\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click1(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(2);\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click2((TextView) p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(3);\n"
-        + "    view3 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click3((Button) p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(4);\n"
-        + "    view4 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click4((Test.TestInterface) p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view0.setOnClickListener(null);\n"
-        + "    view0 = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "    view3.setOnClickListener(null);\n"
-        + "    view3 = null;\n"
-        + "    view4.setOnClickListener(null);\n"
-        + "    view4 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void methodWithMultipleIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick({1, 2, 3}) void click() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  private View view3;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'click'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 2, \"method 'click'\");\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 3, \"method 'click'\");\n"
-        + "    view3 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "    view3.setOnClickListener(null);\n"
-        + "    view3 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "import butterknife.Optional;\n"
-        + "public class Test {\n"
-        + "  @Optional @OnClick(1) void doStuff() {}\n"
-        + "}");
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = source.findViewById(1);\n"
-        + "    if (view != null) {\n"
-        + "      view1 = view;\n"
-        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "        @Override\n"
-        + "        public void doClick(View p0) {\n"
-        + "          target.doStuff();\n"
-        + "        }\n"
-        + "      });\n"
-        + "    }\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    if (view1 != null) {\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1 = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void optionalAndRequiredSkipsNullCheck() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "import butterknife.OnClick;\n"
-        + "import butterknife.Optional;\n"
-        + "public class Test {\n"
-        + "  @BindView(1) View view;\n"
-        + "  @Optional @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
-        + "    target.view = view;\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.view = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package java.test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package android.test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfHasReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public String doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfPrivateMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  private void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public static void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfParameterNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public void doStuff(String thing) {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(""
-            + "Unable to match @OnClick method arguments. (test.Test.doStuff)\n"
-            + "  \n"
-            + "    Parameter #1: java.lang.String\n"
-            + "      did not match any listener parameters\n"
-            + "  \n"
-            + "  Methods may have up to 1 parameter(s):\n"
-            + "  \n"
-            + "    android.view.View\n"
-            + "  \n"
-            + "  These may be listed in any order but will be searched for from top to bottom.")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfMoreThanOneParameter() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public void doStuff(View thing, View otherThing) {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public interface Test {\n"
-        + "  @OnClick(1)\n"
-        + "  void doStuff();\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
-        .in(source).onLine(3);
-  }
-
-  @Test public void failsIfHasDuplicateIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick({1, 2, 3, 1})\n"
-        + "  void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
deleted file mode 100644
index a7c7590e..00000000
--- a/butterknife/src/test/java/butterknife/OnPageChangeTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnPageChangeTest {
-  @Test public void pageChange() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnPageChange;\n"
-        + "public class Test {\n"
-        + "  @OnPageChange(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.view.ViewPager;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  private ViewPager.OnPageChangeListener view1OnPageChangeListener;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view1OnPageChangeListener = new ViewPager.OnPageChangeListener() {\n"
-        + "      @Override\n"
-        + "      public void onPageSelected(int p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "      @Override\n"
-        + "      public void onPageScrolled(int p0, float p1, int p2) {\n"
-        + "      }\n"
-        + "      @Override\n"
-        + "      public void onPageScrollStateChanged(int p0) {\n"
-        + "      }\n"
-        + "    };\n"
-        + "    ((ViewPager) view).addOnPageChangeListener(view1OnPageChangeListener);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    ((ViewPager) view1).removeOnPageChangeListener(view1OnPageChangeListener);\n"
-        + "    view1OnPageChangeListener = null;\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-}
diff --git a/checkstyle.xml b/checkstyle.xml
index 69942dfe..cd3c43b2 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -78,7 +78,9 @@
     <module name="GenericWhitespace"/>
     <module name="EmptyForIteratorPad"/>
     <module name="MethodParamPad"/>
-    <module name="NoWhitespaceAfter"/>
+    <module name="NoWhitespaceAfter">
+      <property name="tokens" value="INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT, DOT, ARRAY_DECLARATOR, INDEX_OP"/>
+    </module>
     <module name="NoWhitespaceBefore"/>
     <module name="OperatorWrap"/>
     <module name="ParenPad"/>
diff --git a/gradle.properties b/gradle.properties
index a4db5d39..a7b1e077 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,3 +16,6 @@ POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
 org.gradle.jvmargs=-Xmx1536M
+
+# TODO https://issuetracker.google.com/issues/73450622
+android.enableAapt2=false
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index c44b679a..28861d27 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8941bfbb..115e6ac0 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip
diff --git a/settings.gradle b/settings.gradle
index cd8829a5..9ecaae16 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -2,8 +2,10 @@ include ':butterknife'
 include ':butterknife-annotations'
 include ':butterknife-compiler'
 include ':butterknife-gradle-plugin'
-include ':butterknife-lint'
 include ':butterknife-integration-test'
+include ':butterknife-lint'
+include ':butterknife-reflect'
+include ':butterknife-runtime'
 
 //include ':sample:app'
 //include ':sample:library'
