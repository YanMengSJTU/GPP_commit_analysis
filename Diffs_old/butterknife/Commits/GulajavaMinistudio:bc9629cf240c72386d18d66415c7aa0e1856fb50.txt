diff --git a/butterknife-annotations/src/main/java/butterknife/BindAnim.java b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
new file mode 100644
index 00000000..62c30778
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import android.support.annotation.AnimRes;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified animation resource ID.
+ * <pre><code>
+ * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindAnim {
+  /** Animation resource ID to which the field will be bound. */
+  @AnimRes int value();
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 02d69fba..e7ea9a97 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -52,6 +52,8 @@
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
+  static final ClassName ANIMATION_UTILS =
+          ClassName.get("android.view.animation", "AnimationUtils");
 
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
@@ -462,8 +464,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
+                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",
+                    UTILS, listenerPosition, method.name(), listenerPosition,
+                    methodBinding.getName(), i, parameter.getType());
               } else {
                 builder.add("p$L", listenerPosition);
               }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index ce462055..cbbec0e8 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,5 +1,6 @@
 package butterknife.compiler;
 
+import butterknife.BindAnim;
 import butterknife.BindArray;
 import butterknife.BindBitmap;
 import butterknife.BindBool;
@@ -92,6 +93,7 @@
   static final String DIALOG_TYPE = "android.app.Dialog";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
   private static final String BITMAP_TYPE = "android.graphics.Bitmap";
+  private static final String ANIMATION_TYPE = "android.view.animation.Animation";
   private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
   private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
   private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
@@ -162,6 +164,7 @@
   private Set<Class<? extends Annotation>> getSupportedAnnotations() {
     Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();
 
+    annotations.add(BindAnim.class);
     annotations.add(BindArray.class);
     annotations.add(BindBitmap.class);
     annotations.add(BindBool.class);
@@ -202,6 +205,16 @@
 
     scanForRClasses(env);
 
+    // Process each @BindAnim element.
+    for (Element element : env.getElementsAnnotatedWith(BindAnim.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceAnimation(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindAnim.class, e);
+      }
+    }
+
     // Process each @BindArray element.
     for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
@@ -561,6 +574,37 @@ private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder
     erasedTargetNames.add(enclosingElement);
   }
 
+  private void parseResourceAnimation(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Animation.
+    if (!ANIMATION_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Animation'. (%s.%s)",
+          BindAnim.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindAnim.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindAnim.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindAnim.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldAnimationBinding(getId(qualifiedId), name));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
   private void parseResourceBool(Element element,
       Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java
new file mode 100644
index 00000000..739261af
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java
@@ -0,0 +1,28 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+
+import static butterknife.compiler.BindingSet.ANIMATION_UTILS;
+
+final class FieldAnimationBinding implements ResourceBinding {
+  private final Id id;
+  private final String name;
+
+  FieldAnimationBinding(Id id, String name) {
+    this.id = id;
+    this.name = name;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return false;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    return CodeBlock.of("target.$L = $T.loadAnimation(context, $L)", name, ANIMATION_UTILS,
+            id.code);
+  }
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
index daf2d5ad..2d3895d4 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -10,6 +10,8 @@
 import com.github.javaparser.ast.body.TypeDeclaration;
 import com.github.javaparser.ast.body.VariableDeclarator;
 import com.github.javaparser.ast.expr.Expression;
+import com.github.javaparser.ast.type.PrimitiveType;
+import com.github.javaparser.ast.type.Type;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.JavaFile;
@@ -30,7 +32,8 @@
 public final class FinalRClassBuilder {
   private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
   private static final String[] SUPPORTED_TYPES = {
-      "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
+      "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
+      "string", "style", "styleable"
   };
 
   private FinalRClassBuilder() { }
@@ -67,14 +70,25 @@ private static void addResourceType(List<String> supportedTypes, TypeSpec.Builde
 
     for (BodyDeclaration field : node.getMembers()) {
       if (field instanceof FieldDeclaration) {
-        addResourceField(resourceType, ((FieldDeclaration) field).getVariables().get(0),
-            getSupportAnnotationClass(type));
+        FieldDeclaration declaration = (FieldDeclaration) field;
+        // Check that the field is an Int because styleable also contains Int arrays which can't be
+        // used in annotations.
+        if (isInt(declaration)) {
+          addResourceField(resourceType, declaration.getVariables().get(0),
+                  getSupportAnnotationClass(type));
+        }
       }
     }
 
     result.addType(resourceType.build());
   }
 
+  private static boolean isInt(FieldDeclaration field) {
+    Type type = field.getType();
+    return type instanceof PrimitiveType
+        && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.Int;
+  }
+
   private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
       ClassName annotation) {
     String fieldName = variable.getNameAsString();
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
index 21591802..f02e0d09 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
@@ -1,43 +1,68 @@
 package com.example.butterknife;
 
 public final class R {
-  public static final class anim {
+  public static final class unsupported {
     public static int res = 0x7f040000;
   }
 
-  public static final class array {
+  public static final class anim {
     public static int res = 0x7f040001;
   }
 
-  public static final class attr {
+  public static final class array {
     public static int res = 0x7f040002;
   }
 
-  public static final class bool {
+  public static final class attr {
     public static int res = 0x7f040003;
   }
 
-  public static final class color {
+  public static final class bool {
     public static int res = 0x7f040004;
   }
 
-  public static final class dimen {
+  public static final class color {
     public static int res = 0x7f040005;
   }
 
-  public static final class drawable {
+  public static final class dimen {
     public static int res = 0x7f040006;
   }
 
-  public static final class id {
+  public static final class drawable {
     public static int res = 0x7f040007;
   }
 
-  public static final class integer {
+  public static final class id {
     public static int res = 0x7f040008;
   }
 
-  public static final class string {
+  public static final class integer {
     public static int res = 0x7f040009;
   }
+
+  public static final class layout {
+    public static int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    public static int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    public static int res = 0x7f040012;
+  }
+
+  public static final class string {
+    public static int res = 0x7f040013;
+  }
+
+  public static final class style {
+    public static int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    public static int[] resArray = { 0x7f040003 };
+    public static int res = 0x7f040015;
+  }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
index d4490bb5..4b44bab4 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -1,6 +1,7 @@
 // Generated code from Butter Knife gradle plugin. Do not modify!
 package com.butterknife.example;
 
+import android.support.annotation.AnimRes;
 import android.support.annotation.ArrayRes;
 import android.support.annotation.AttrRes;
 import android.support.annotation.BoolRes;
@@ -9,51 +10,86 @@
 import android.support.annotation.DrawableRes;
 import android.support.annotation.IdRes;
 import android.support.annotation.IntegerRes;
+import android.support.annotation.LayoutRes;
+import android.support.annotation.MenuRes;
+import android.support.annotation.PluralsRes;
 import android.support.annotation.StringRes;
+import android.support.annotation.StyleRes;
+import android.support.annotation.StyleableRes;
 
 public final class R2 {
+  public static final class anim {
+    @AnimRes
+    public static final int res = 0x7f040001;
+  }
+
   public static final class array {
     @ArrayRes
-    public static final int res = 0x7f040001;
+    public static final int res = 0x7f040002;
   }
 
   public static final class attr {
     @AttrRes
-    public static final int res = 0x7f040002;
+    public static final int res = 0x7f040003;
   }
 
   public static final class bool {
     @BoolRes
-    public static final int res = 0x7f040003;
+    public static final int res = 0x7f040004;
   }
 
   public static final class color {
     @ColorRes
-    public static final int res = 0x7f040004;
+    public static final int res = 0x7f040005;
   }
 
   public static final class dimen {
     @DimenRes
-    public static final int res = 0x7f040005;
+    public static final int res = 0x7f040006;
   }
 
   public static final class drawable {
     @DrawableRes
-    public static final int res = 0x7f040006;
+    public static final int res = 0x7f040007;
   }
 
   public static final class id {
     @IdRes
-    public static final int res = 0x7f040007;
+    public static final int res = 0x7f040008;
   }
 
   public static final class integer {
     @IntegerRes
-    public static final int res = 0x7f040008;
+    public static final int res = 0x7f040009;
+  }
+
+  public static final class layout {
+    @LayoutRes
+    public static final int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    @MenuRes
+    public static final int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    @PluralsRes
+    public static final int res = 0x7f040012;
   }
 
   public static final class string {
     @StringRes
-    public static final int res = 0x7f040009;
+    public static final int res = 0x7f040013;
+  }
+
+  public static final class style {
+    @StyleRes
+    public static final int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    @StyleableRes
+    public static final int res = 0x7f040015;
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
index fd2c3dd3..c1391905 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
@@ -1,39 +1,63 @@
 package com.example.butterknife;
 
 public final class R {
-  public static final class array {
+  public static final class anim {
     public static final int res = 0x7f040001;
   }
 
-  public static final class attr {
+  public static final class array {
     public static final int res = 0x7f040002;
   }
 
-  public static final class bool {
+  public static final class attr {
     public static final int res = 0x7f040003;
   }
 
-  public static final class color {
+  public static final class bool {
     public static final int res = 0x7f040004;
   }
 
-  public static final class dimen {
+  public static final class color {
     public static final int res = 0x7f040005;
   }
 
-  public static final class drawable {
+  public static final class dimen {
     public static final int res = 0x7f040006;
   }
 
-  public static final class id {
+  public static final class drawable {
     public static final int res = 0x7f040007;
   }
 
-  public static final class integer {
+  public static final class id {
     public static final int res = 0x7f040008;
   }
 
-  public static final class string {
+  public static final class integer {
     public static final int res = 0x7f040009;
   }
+
+  public static final class layout {
+    public static final int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    public static final int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    public static final int res = 0x7f040012;
+  }
+
+  public static final class string {
+    public static final int res = 0x7f040013;
+  }
+
+  public static final class style {
+    public static final int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    public static final int res = 0x7f040015;
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index 52b2fc23..e9101f74 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -120,10 +120,10 @@ public static View findRequiredView(View source, @IdRes int id, String who) {
     }
   }
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
+      Class<T> cls) {
     try {
-      return (T) value;
+      return cls.cast(value);
     } catch (ClassCastException e) {
       throw new IllegalStateException("Parameter #"
           + (fromPos + 1)
diff --git a/butterknife/src/test/java/butterknife/BindAnimTest.java b/butterknife/src/test/java/butterknife/BindAnimTest.java
new file mode 100644
index 00000000..3cbff425
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindAnimTest.java
@@ -0,0 +1,82 @@
+package butterknife;
+
+import com.google.testing.compile.JavaFileObjects;
+
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import butterknife.compiler.ButterKnifeProcessor;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindAnimTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.animation.Animation;\n"
+        + "import butterknife.BindAnim;\n"
+        + "public class Test {\n"
+        + "  @BindAnim(1) Animation one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.view.animation.AnimationUtils;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = AnimationUtils.loadAnimation(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeAnimation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindAnim;\n"
+        + "public class Test {\n"
+        + "  @BindAnim(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindAnim field type must be 'Animation'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 3cf004a6..81b22b72 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -324,7 +324,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
+        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
@@ -332,7 +332,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
+        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
@@ -340,7 +340,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
+        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife/src/test/java/butterknife/OnItemClickTest.java
index 31ba53d2..03f334c4 100644
--- a/butterknife/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java
@@ -162,7 +162,7 @@
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -222,7 +222,7 @@
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
         + "        , p2);\n"
         + "      }\n"
         + "    });\n"
diff --git a/butterknife/src/test/java/butterknife/internal/UtilsTest.java b/butterknife/src/test/java/butterknife/internal/UtilsTest.java
new file mode 100644
index 00000000..b22c6523
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/UtilsTest.java
@@ -0,0 +1,18 @@
+package butterknife.internal;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public class UtilsTest {
+
+  @Test public void testCastParam() {
+    try {
+      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
+      Assert.fail("Failed to cast exception");
+    } catch (IllegalStateException ise) {
+      assertThat(ise.getMessage()).contains("foo()");
+    }
+  }
+}
