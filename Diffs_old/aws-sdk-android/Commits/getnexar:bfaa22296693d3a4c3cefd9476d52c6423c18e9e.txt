diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
index cbc5c384e9..07bfd2f6fc 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
@@ -71,7 +71,7 @@ public DownloadTask(TransferRecord download, AmazonS3 s3, TransferStatusUpdater
      */
     @Override
     public Boolean call() throws Exception {
-        if (!networkInfo.isNetworkConnected()) {
+        if (!networkInfo.isNetworkAvailableForTransfer(download)) {
             updater.updateState(download.id, TransferState.WAITING_FOR_NETWORK);
             return false;
         }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 3eb9e29d88..5c56e5d8a2 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -143,9 +143,16 @@ public void onCreate() {
     /**
      * A Broadcast receiver to receive network connection change events.
      */
-    static class NetworkInfoReceiver extends BroadcastReceiver {
-        private final Handler handler;
-        private final ConnectivityManager connManager;
+    public static class NetworkInfoReceiver extends BroadcastReceiver {
+        public static NetworkInfoReceiverFactory factory = new NetworkInfoReceiverFactory() {
+            @Override
+            public NetworkInfoReceiver getNetworkReceiver(Context context, Handler updateHandler) {
+                return new NetworkInfoReceiver(context, updateHandler);
+            }
+        };
+
+        protected final Handler handler;
+        protected final ConnectivityManager connManager;
 
         /**
          * Constructs a NetworkInfoReceiver.
@@ -163,19 +170,35 @@ public void onReceive(Context context, Intent intent) {
             if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
                 final boolean networkConnected = isNetworkConnected();
                 LOGGER.debug("Network connected: " + networkConnected);
-                handler.sendEmptyMessage(networkConnected ? MSG_CHECK : MSG_DISCONNECT);
+                if (networkConnected) {
+                    handler.sendMessage(handler.obtainMessage(MSG_CHECK, shouldScan()));
+                } else {
+                    handler.sendEmptyMessage(MSG_DISCONNECT);
+                }
             }
         }
 
+        protected boolean shouldScan() {
+            return false;
+        }
+
         /**
          * Gets the status of network connectivity.
          *
          * @return true if network is connected, false otherwise.
          */
-        boolean isNetworkConnected() {
+        protected boolean isNetworkConnected() {
             final NetworkInfo info = connManager.getActiveNetworkInfo();
             return info != null && info.isConnected();
         }
+
+        protected boolean isNetworkAvailableForTransfer(TransferRecord transfer) {
+            return isNetworkConnected();
+        }
+    }
+
+    public static interface NetworkInfoReceiverFactory {
+        public NetworkInfoReceiver getNetworkReceiver(Context context, Handler updateHandler);
     }
 
     @Override
@@ -233,6 +256,10 @@ public UpdateHandler(Looper looper) {
         @Override
         public void handleMessage(Message msg) {
             if (msg.what == MSG_CHECK) {
+                boolean forceShouldScan = (Boolean)msg.obj;
+                if (forceShouldScan) {
+                    shouldScan = true;
+                }
                 // remove messages of the same type
                 updateHandler.removeMessages(MSG_CHECK);
                 checkTransfers();
@@ -262,7 +289,7 @@ void checkTransfers() {
         if (isActive()) {
             lastActiveTime = System.currentTimeMillis();
             // check after one minute
-            updateHandler.sendEmptyMessageDelayed(MSG_CHECK, MINUTE_IN_MILLIS);
+            updateHandler.sendMessageDelayed(updateHandler.obtainMessage(MSG_CHECK, false), MINUTE_IN_MILLIS);
         } else {
             /*
              * Stop the service when it's been idled for more than a minute.
@@ -441,7 +468,8 @@ void pauseAllForNetwork() {
      */
     void setHandlerLooper(Looper looper) {
         updateHandler = new UpdateHandler(looper);
-        networkInfoReceiver = new NetworkInfoReceiver(getApplicationContext(), updateHandler);
+        networkInfoReceiver = NetworkInfoReceiver.factory.getNetworkReceiver(getApplicationContext(), updateHandler);
+        LOGGER.info("Using NetworkInfoReceiver of type: " + this.networkInfoReceiver.getClass().getSimpleName());
     }
 
     @Override
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index 12b4acd3e4..262be2622e 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -68,7 +68,7 @@ public UploadTask(TransferRecord uploadInfo, AmazonS3 s3, TransferDBUtil dbUtil,
      */
     @Override
     public Boolean call() throws Exception {
-        if (!networkInfo.isNetworkConnected()) {
+        if (!networkInfo.isNetworkAvailableForTransfer(upload)) {
             updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
             return false;
         }
@@ -177,7 +177,7 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                     LOGGER.debug("Transfer " + upload.id + " is interrupted by user");
                     return false;
                 } else if (e.getCause() != null && e.getCause() instanceof IOException
-                        && !networkInfo.isNetworkConnected()) {
+                        && !networkInfo.isNetworkAvailableForTransfer(upload)) {
                     LOGGER.debug("Transfer " + upload.id + " waits for network");
                     updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
                 }
@@ -230,7 +230,7 @@ private Boolean uploadSinglePartAndWaitForCompletion() {
                 updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
                 return false;
             } else if (e.getCause() != null && e.getCause() instanceof IOException
-                    && !networkInfo.isNetworkConnected()) {
+                    && !networkInfo.isNetworkAvailableForTransfer(upload)) {
                 LOGGER.debug("Transfer " + upload.id + " waits for network");
                 updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
             }
