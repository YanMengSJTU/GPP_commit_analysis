diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
new file mode 100644
index 0000000000..e5c1750f7a
--- /dev/null
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
@@ -0,0 +1,126 @@
+package com.amazonaws.mobileconnectors.s3.receiver;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Handler;
+import android.util.Log;
+
+/**
+ * A Broadcast receiver to receive network connection change events.
+ */
+public class NetworkInfoReceiver extends BroadcastReceiver {
+
+    private static final String TAG = "NetworkInfoReceiver";
+
+    private final Handler handler;
+
+    private final ConnectivityManager connectivityManager;
+
+    private int checkFlag;
+
+    private int disconnectFlag;
+
+    /**
+     * Constructs a NetworkInfoReceiver.
+     * @param context Service context
+     * @param handler a handle to send message to
+     */
+    public NetworkInfoReceiver(final Context context,
+                               final Handler handler,
+                               final int checkFlag, final int disconnectFlag) {
+        this.connectivityManager = (ConnectivityManager) context
+                .getSystemService(Context.CONNECTIVITY_SERVICE);
+        this.handler = handler;
+        this.checkFlag = checkFlag;
+        this.disconnectFlag = disconnectFlag;
+    }
+
+    @Override
+    public void onReceive(final Context context, final Intent intent) {
+        if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
+            Type checkType = connectionCheckType;
+            if (connectionCheckType == null) {
+                checkType = DEFAULT_CONNECTION_CHECK_TYPE;
+                Log.w(TAG, "Using default type: " + checkType.name());
+            }
+            boolean networkConnected = checkType.isConnected(connectivityManager);
+            Log.d(TAG, "Network connected: " + networkConnected);
+            handler.sendEmptyMessage(networkConnected ?
+                    checkFlag : disconnectFlag);
+        }
+    }
+
+    public static final Type DEFAULT_CONNECTION_CHECK_TYPE = Type.WIFI_ONLY;
+
+    Type connectionCheckType = DEFAULT_CONNECTION_CHECK_TYPE;
+
+    public void setConnectionCheckType(Type connectionCheckType) {
+        this.connectionCheckType = connectionCheckType;
+    }
+
+    public boolean isNetworkConnected() {
+        return connectionCheckType.isConnected(connectivityManager);
+    }
+
+    public enum Type {
+        ANY("any") {
+            @Override
+            public boolean verify(final NetworkInfo info) {
+                return info != null && info.isConnected();
+            }
+        },
+        MOBILE_ONLY("mobile_only") {
+            @Override
+            public boolean verify(final NetworkInfo info) {
+                return info != null && info.isConnected()
+                        && info.getType() == ConnectivityManager.TYPE_MOBILE;
+            }
+        },
+        WIFI_ONLY("wifi_only") {
+            @Override
+            public boolean verify(final NetworkInfo info) {
+                return (info != null && info.isConnected()
+                        && info.getType() == ConnectivityManager.TYPE_WIFI);
+            }
+        };
+
+        private String intentKey;
+
+        Type(String intentKey) {
+            this.intentKey = intentKey;
+        }
+
+        /**
+         * Gets the status of network connectivity.
+         *
+         * @return true if network is connected, false otherwise.
+         */
+        boolean isConnected(final ConnectivityManager connectivityManager) {
+            return verify(connectivityManager.getActiveNetworkInfo());
+        }
+
+        protected abstract boolean verify(final NetworkInfo networkInfo);
+
+        public static Type from(final String name) {
+            if (name != null) {
+                for (final Type type : values()) {
+                    if (type.intentKey.toLowerCase().equals(name.toLowerCase())) {
+                        return type;
+                    }
+                }
+            }
+            return null;
+        }
+
+        public static Type from(final String name, final Type defaultType) {
+            Type type = from(name);
+            if (type == null) {
+                return defaultType;
+            }
+            return type;
+        }
+    }
+}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
index 663699e7b9..3b4c3f9c8a 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
@@ -16,20 +16,14 @@
 package com.amazonaws.mobileconnectors.s3.transferutility;
 
 import android.util.Log;
-
 import com.amazonaws.AmazonClientException;
-import com.amazonaws.mobileconnectors.s3.transferutility.TransferService.NetworkInfoReceiver;
+import com.amazonaws.mobileconnectors.s3.receiver.NetworkInfoReceiver;
 import com.amazonaws.retry.RetryUtils;
 import com.amazonaws.services.s3.AmazonS3;
 import com.amazonaws.services.s3.model.GetObjectRequest;
 import com.amazonaws.services.s3.model.S3Object;
 
-import java.io.BufferedOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
+import java.io.*;
 import java.util.concurrent.Callable;
 
 /**
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
index 0093a52058..641f18fca2 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
@@ -17,9 +17,8 @@
 
 import android.database.Cursor;
 import android.util.Log;
-
 import com.amazonaws.AmazonClientException;
-import com.amazonaws.mobileconnectors.s3.transferutility.TransferService.NetworkInfoReceiver;
+import com.amazonaws.mobileconnectors.s3.receiver.NetworkInfoReceiver;
 import com.amazonaws.services.s3.AmazonS3;
 import com.amazonaws.services.s3.model.AbortMultipartUploadRequest;
 import com.amazonaws.util.json.JsonUtils;
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 1fa566358b..3a4f38067c 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -16,21 +16,14 @@
 package com.amazonaws.mobileconnectors.s3.transferutility;
 
 import android.app.Service;
-import android.content.BroadcastReceiver;
-import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.ApplicationInfo;
 import android.database.Cursor;
 import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.os.IBinder;
-import android.os.Looper;
-import android.os.Message;
+import android.os.*;
 import android.util.Log;
-
+import com.amazonaws.mobileconnectors.s3.receiver.NetworkInfoReceiver;
 import com.amazonaws.services.s3.AmazonS3;
 
 import java.io.FileDescriptor;
@@ -66,6 +59,7 @@
     static final String INTENT_ACTION_TRANSFER_CANCEL = "cancel_transfer";
     static final String INTENT_BUNDLE_TRANSFER_ID = "id";
     static final String INTENT_BUNDLE_S3_REFERENCE_KEY = "s3_reference_key";
+    static final String INTENT_BUNDLE_CONNECTION_CHECK_TYPE = "connection_check_type";
 
     private AmazonS3 s3;
 
@@ -127,44 +121,6 @@ public void onCreate() {
         setHandlerLooper(handlerThread.getLooper());
     }
 
-    /**
-     * A Broadcast receiver to receive network connection change events.
-     */
-    static class NetworkInfoReceiver extends BroadcastReceiver {
-        private final Handler handler;
-        private final ConnectivityManager connManager;
-
-        /**
-         * Constructs a NetworkInfoReceiver.
-         *
-         * @param handler a handle to send message to
-         */
-        public NetworkInfoReceiver(Context context, Handler handler) {
-            this.handler = handler;
-            connManager = (ConnectivityManager) context
-                    .getSystemService(Context.CONNECTIVITY_SERVICE);
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
-                final boolean networkConnected = isNetworkConnected();
-                Log.d(TAG, "Network connected: " + networkConnected);
-                handler.sendEmptyMessage(networkConnected ? MSG_CHECK : MSG_DISCONNECT);
-            }
-        }
-
-        /**
-         * Gets the status of network connectivity.
-         *
-         * @return true if network is connected, false otherwise.
-         */
-        boolean isNetworkConnected() {
-            final NetworkInfo info = connManager.getActiveNetworkInfo();
-            return info != null && info.isConnected();
-        }
-    }
-
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
         this.startId = startId;
@@ -180,7 +136,12 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             stopSelf(startId);
             return START_NOT_STICKY;
         }
-
+        String networkCheckType = intent.getStringExtra(INTENT_BUNDLE_CONNECTION_CHECK_TYPE);
+        if (networkCheckType != null) {
+            networkInfoReceiver.setConnectionCheckType(
+                    NetworkInfoReceiver.Type.from(networkCheckType,
+                            NetworkInfoReceiver.DEFAULT_CONNECTION_CHECK_TYPE));
+        }
         updateHandler.sendMessage(updateHandler.obtainMessage(MSG_EXEC, intent));
         if (isFirst) {
             registerReceiver(networkInfoReceiver, new IntentFilter(
@@ -307,7 +268,9 @@ void execCommand(Intent intent) {
                     Log.e(TAG, "Can't find transfer: " + id);
                 }
             }
-            transfer.start(s3, dbUtil, updater, networkInfoReceiver);
+            if (transfer != null) {
+                transfer.start(s3, dbUtil, updater, networkInfoReceiver);
+            }
         } else if (INTENT_ACTION_TRANSFER_CANCEL.equals(action)) {
             TransferRecord transfer = updater.getTransfer(id);
             if (transfer == null) {
@@ -419,9 +382,10 @@ void pauseAllForNetwork() {
      *
      * @param looper new looper
      */
-    void setHandlerLooper(Looper looper) {
+    void setHandlerLooper(final Looper looper) {
         updateHandler = new UpdateHandler(looper);
-        networkInfoReceiver = new NetworkInfoReceiver(getApplicationContext(), updateHandler);
+        networkInfoReceiver = new NetworkInfoReceiver(getApplicationContext(), updateHandler,
+                MSG_CHECK, MSG_DISCONNECT);
     }
 
     @Override
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
index 1a88536b95..d2159753b0 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
@@ -15,17 +15,14 @@
 
 package com.amazonaws.mobileconnectors.s3.transferutility;
 
-import static com.amazonaws.services.s3.internal.Constants.MAXIMUM_UPLOAD_PARTS;
-import static com.amazonaws.services.s3.internal.Constants.MB;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
 import android.database.Cursor;
 import android.net.Uri;
 import android.util.Log;
-
 import com.amazonaws.AmazonWebServiceRequest;
+import com.amazonaws.mobileconnectors.s3.receiver.NetworkInfoReceiver;
 import com.amazonaws.services.s3.AmazonS3;
 import com.amazonaws.services.s3.model.CannedAccessControlList;
 import com.amazonaws.services.s3.model.ObjectMetadata;
@@ -36,6 +33,9 @@
 import java.util.List;
 import java.util.UUID;
 
+import static com.amazonaws.services.s3.internal.Constants.MAXIMUM_UPLOAD_PARTS;
+import static com.amazonaws.services.s3.internal.Constants.MB;
+
 /**
  * The transfer utility is a high-level class for applications to upload and
  * download files. It inserts upload and download records into the database and
@@ -105,7 +105,6 @@
      *
      * @param s3 The client to use when making requests to Amazon S3
      * @param context The current context
-     * @param configuration Configuration parameters for this TransferUtility
      */
     public TransferUtility(AmazonS3 s3, Context context) {
         this.s3 = s3;
@@ -124,6 +123,23 @@ public TransferUtility(AmazonS3 s3, Context context) {
      * @return A TransferObserver used to track download progress and state
      */
     public TransferObserver download(String bucket, String key, File file) {
+        return download(bucket, key, file, null);
+    }
+
+
+    /**
+     * Starts downloading the S3 object specified by the bucket and the key to
+     * the given file. The file must be a valid file. Directory isn't supported.
+     * Note that if the given file exists, it'll be overwritten.
+     *
+     * @param bucket The name of the bucket containing the object to download.
+     * @param key The key under which the object to download is stored.
+     * @param file The file to download the object's data to.
+     * @param connectionCheckType Type of connection check. Default is {@link NetworkInfoReceiver.Type#WIFI_ONLY}
+     * @return A TransferObserver used to track download progress and state
+     */
+    public TransferObserver download(String bucket, String key, File file,
+                                     NetworkInfoReceiver.Type connectionCheckType) {
         if (file == null || file.isDirectory()) {
             throw new IllegalArgumentException("Invalid file: " + file);
         }
@@ -135,7 +151,7 @@ public TransferObserver download(String bucket, String key, File file) {
             file.delete();
         }
 
-        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId);
+        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId, connectionCheckType);
         return new TransferObserver(recordId, dbUtil, bucket, key, file);
     }
 
@@ -147,11 +163,13 @@ public TransferObserver download(String bucket, String key, File file) {
      * @param key The key in the specified bucket by which to store the new
      *            object.
      * @param file The file to upload.
+     * @param connectionCheckType Type of connection check
      * @return A TransferObserver used to track upload progress and state
      */
-    public TransferObserver upload(String bucket, String key, File file) {
+    public TransferObserver upload(String bucket, String key, File file,
+                                   NetworkInfoReceiver.Type connectionCheckType) {
 
-        return upload(bucket, key, file, new ObjectMetadata());
+        return upload(bucket, key, file, new ObjectMetadata(), connectionCheckType);
     }
 
     /**
@@ -163,12 +181,13 @@ public TransferObserver upload(String bucket, String key, File file) {
      *            object.
      * @param file The file to upload.
      * @param cannedAcl The canned ACL to associate with this object
+     * @param connectionCheckType Type of connection check
      * @return A TransferObserver used to track upload progress and state
      */
     public TransferObserver upload(String bucket, String key, File file,
-            CannedAccessControlList cannedAcl) {
+                                   CannedAccessControlList cannedAcl, NetworkInfoReceiver.Type connectionCheckType) {
 
-        return upload(bucket, key, file, new ObjectMetadata(), cannedAcl);
+        return upload(bucket, key, file, new ObjectMetadata(), cannedAcl, connectionCheckType);
     }
 
     /**
@@ -180,10 +199,12 @@ public TransferObserver upload(String bucket, String key, File file,
      *            object.
      * @param file The file to upload.
      * @param metadata The S3 metadata to associate with this object
+     * @param connectionCheckType Type of connection check
      * @return A TransferObserver used to track upload progress and state
      */
-    public TransferObserver upload(String bucket, String key, File file, ObjectMetadata metadata) {
-        return upload(bucket, key, file, metadata, null);
+    public TransferObserver upload(String bucket, String key, File file, ObjectMetadata metadata,
+                                   NetworkInfoReceiver.Type connectionCheckType) {
+        return upload(bucket, key, file, metadata, null, connectionCheckType);
     }
 
     /**
@@ -196,10 +217,11 @@ public TransferObserver upload(String bucket, String key, File file, ObjectMetad
      * @param file The file to upload.
      * @param metadata The S3 metadata to associate with this object
      * @param cannedAcl The canned ACL to associate with this object
+     * @param connectionCheckType Type of connection check. Default is {@link NetworkInfoReceiver.Type#WIFI_ONLY}
      * @return A TransferObserver used to track upload progress and state
      */
     public TransferObserver upload(String bucket, String key, File file, ObjectMetadata metadata,
-            CannedAccessControlList cannedAcl) {
+                                   CannedAccessControlList cannedAcl, NetworkInfoReceiver.Type connectionCheckType) {
         if (file == null || file.isDirectory()) {
             throw new IllegalArgumentException("Invalid file: " + file);
         }
@@ -213,7 +235,7 @@ public TransferObserver upload(String bucket, String key, File file, ObjectMetad
             recordId = Integer.parseInt(uri.getLastPathSegment());
         }
 
-        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId);
+        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId, connectionCheckType);
         return new TransferObserver(recordId, dbUtil, bucket, key, file);
     }
 
@@ -293,7 +315,6 @@ public TransferObserver getTransferById(int id) {
      * @param key The key in the specified bucket by which to store the new
      *            object.
      * @param file The file to upload.
-     * @param isUsingEncryption Whether the upload is encrypted.
      * @return Number of records created in database
      */
     private int createMultipartUploadRecords(String bucket, String key, File file,
@@ -423,12 +444,17 @@ public boolean deleteTransferRecord(int id) {
      * @param id id of the transfer
      */
     private void sendIntent(String action, int id) {
+        sendIntent(action, id, null);
+    }
+
+    private void sendIntent(String action, int id, NetworkInfoReceiver.Type networkCheckType) {
         String s3Key = UUID.randomUUID().toString();
         S3ClientReference.put(s3Key, s3);
         Intent intent = new Intent(appContext, TransferService.class);
         intent.setAction(action);
         intent.putExtra(TransferService.INTENT_BUNDLE_TRANSFER_ID, id);
         intent.putExtra(TransferService.INTENT_BUNDLE_S3_REFERENCE_KEY, s3Key);
+        intent.putExtra(TransferService.INTENT_BUNDLE_CONNECTION_CHECK_TYPE, networkCheckType);
         appContext.startService(intent);
     }
 
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index 37e8a81bc7..fd1b6d3797 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -16,27 +16,16 @@
 package com.amazonaws.mobileconnectors.s3.transferutility;
 
 import android.util.Log;
-
 import com.amazonaws.AmazonClientException;
-import com.amazonaws.mobileconnectors.s3.transferutility.TransferService.NetworkInfoReceiver;
+import com.amazonaws.mobileconnectors.s3.receiver.NetworkInfoReceiver;
 import com.amazonaws.retry.RetryUtils;
 import com.amazonaws.services.s3.AmazonS3;
-import com.amazonaws.services.s3.model.CannedAccessControlList;
-import com.amazonaws.services.s3.model.CompleteMultipartUploadRequest;
-import com.amazonaws.services.s3.model.InitiateMultipartUploadRequest;
-import com.amazonaws.services.s3.model.ObjectMetadata;
-import com.amazonaws.services.s3.model.PartETag;
-import com.amazonaws.services.s3.model.PutObjectRequest;
-import com.amazonaws.services.s3.model.UploadPartRequest;
+import com.amazonaws.services.s3.model.*;
 import com.amazonaws.services.s3.util.Mimetypes;
 
 import java.io.File;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -256,7 +245,6 @@ private String initiateMultipartUpload(PutObjectRequest putObjectRequest)
     /**
      * Creates a PutObjectRequest from the data in the TransferRecord
      *
-     * @param por The request to fill
      * @param upload The data for the Object Metadata
      * @return Returns a PutObjectRequest with filled in metadata and parameters
      */
