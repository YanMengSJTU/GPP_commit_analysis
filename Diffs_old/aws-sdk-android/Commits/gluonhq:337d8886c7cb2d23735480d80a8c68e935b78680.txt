diff --git a/aws-java-sdk-core/pom.xml b/aws-java-sdk-core/pom.xml
index 7f03af5029..02bd8b147b 100644
--- a/aws-java-sdk-core/pom.xml
+++ b/aws-java-sdk-core/pom.xml
@@ -34,10 +34,24 @@
       <version>2.2.4</version>
     </dependency>
     <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <version>2.3.3</version>
-      <scope>provided</scope>
+        <groupId>org.apache.httpcomponents</groupId>
+        <artifactId>httpclient</artifactId>
+        <version>4.5.5</version>
+    </dependency>
+    <dependency>
+        <groupId>xmlpull</groupId>
+        <artifactId>xmlpull</artifactId>
+        <version>1.1.3.4a</version>
+    </dependency>
+    <dependency>
+        <groupId>org.json</groupId>
+        <artifactId>json</artifactId>
+        <version>20180130</version>
+    </dependency>
+    <dependency>
+        <groupId>com.gluonhq</groupId>
+        <artifactId>charm-down-plugin-settings</artifactId>
+        <version>3.8.0</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/aws-java-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java b/aws-java-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java
index 148d15b7ae..99505e79e2 100644
--- a/aws-java-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java
+++ b/aws-java-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java
@@ -15,10 +15,6 @@
 
 package com.amazonaws.auth;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.util.Log;
-
 import com.amazonaws.ClientConfiguration;
 import com.amazonaws.mobile.config.AWSConfiguration;
 import com.amazonaws.regions.Regions;
@@ -26,13 +22,18 @@
 import com.amazonaws.services.cognitoidentity.model.NotAuthorizedException;
 import com.amazonaws.services.securitytoken.AWSSecurityTokenService;
 import com.amazonaws.util.VersionInfoUtils;
+import com.gluonhq.charm.down.Services;
+import com.gluonhq.charm.down.plugins.SettingsService;
 
 import java.util.Date;
 import java.util.Map;
+import java.util.function.Supplier;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This credentials provider is intended for Android applications. It offers the
- * ability to persist the Cognito identity id in {@link android.content.SharedPreferences}.
+ * ability to persist the Cognito identity id in {@link SharedPreferences}.
  * Furthermore, it caches session credentials so as to reduce the number of
  * network requests. This is the provider to use with a custom identity
  * provider, which should be an extension of AWSAbstractCognitoIdentityProvider.
@@ -77,10 +78,11 @@
 public class CognitoCachingCredentialsProvider
         extends CognitoCredentialsProvider {
 
-    private final String DEFAULT_SHAREDPREFERENCES_NAME = "com.amazonaws.android.auth";
+    private static final Logger LOG = Logger.getLogger(CognitoCachingCredentialsProvider.class.getName());
+    
     private static final String USER_AGENT = CognitoCachingCredentialsProvider.class.getName()
             + "/" + VersionInfoUtils.getVersion();
-    private final SharedPreferences prefs;
+    private final SettingsService prefs;
     private String identityId;
 
     private static final String ID_KEY = "identityId";
@@ -91,12 +93,10 @@
 
     volatile boolean needIdentityRefresh = false;
 
-    private static final String TAG = "CognitoCachingCredentialsProvider";
-
     private final IdentityChangedListener listener = new IdentityChangedListener() {
         @Override
         public void identityChanged(String oldIdentityId, String newIdentityId) {
-            Log.d(TAG, "Identity id is changed");
+            LOG.log(Level.FINE,  "Identity id is changed");
             saveIdentityId(newIdentityId);
             clearCredentials();
         }
@@ -109,7 +109,6 @@ public void identityChanged(String oldIdentityId, String newIdentityId) {
      * request short-lived session credentials, which will then be returned by
      * this class's {@link #getCredentials()} method.
      *
-     * @param context The Android context to be used for the caching
      * @param accountId The AWS accountId for the account with Amazon Cognito
      * @param identityPoolId The Amazon Cogntio identity pool to use
      * @param unauthRoleArn The ARN of the IAM Role that will be assumed when
@@ -117,15 +116,19 @@ public void identityChanged(String oldIdentityId, String newIdentityId) {
      * @param authRoleArn The ARN of the IAM Role that will be assumed when
      *            authenticated
      * @param region The region to use when contacting Cognito Identity
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, String accountId,
-            String identityPoolId, String unauthRoleArn, String authRoleArn, Regions region) {
+    public CognitoCachingCredentialsProvider(String accountId,
+            String identityPoolId, String unauthRoleArn, String authRoleArn, Regions region) throws Throwable {
         super(accountId, identityPoolId, unauthRoleArn, authRoleArn, region);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
         initialize();
     }
 
@@ -140,7 +143,6 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * configuration for the Amazon Cognito and STS clients.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param accountId The AWS accountId for the account with Amazon Cognito
      * @param identityPoolId The Amazon Cognito identity pool to use
      * @param unauthRoleArn The ARN of the IAM Role that will be assumed when
@@ -150,16 +152,21 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * @param region The region to use when contacting Cognito Identity
      * @param clientConfiguration Configuration to apply to service clients
      *            created
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, String accountId,
+    public CognitoCachingCredentialsProvider(String accountId,
             String identityPoolId, String unauthRoleArn, String authRoleArn, Regions region,
-            ClientConfiguration clientConfiguration) {
+            ClientConfiguration clientConfiguration) throws Throwable {
         super(accountId, identityPoolId, unauthRoleArn, authRoleArn, region, clientConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -178,17 +185,20 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param identityPoolId The Amazon Cognito identity pool to use
      * @param region The region to use when contacting Cognito Identity
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, String identityPoolId, Regions region) {
+    public CognitoCachingCredentialsProvider(String identityPoolId, Regions region) throws Throwable {
         super(identityPoolId, region);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
         initialize();
     }
 
@@ -219,18 +229,22 @@ public CognitoCachingCredentialsProvider(Context context, String identityPoolId,
      *     }
      * }
      *
-     * @param context The Android context to be used for the caching
      * @param awsConfiguration The configuration holding you identity pool id
      *                         and the region to use when contacting
      *                         Cognito Identity
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSConfiguration awsConfiguration) {
+    public CognitoCachingCredentialsProvider(AWSConfiguration awsConfiguration) throws Throwable {
         super(awsConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -253,20 +267,24 @@ public CognitoCachingCredentialsProvider(Context context, AWSConfiguration awsCo
      * enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param identityPoolId The Amazon Cognito identity pool to use
      * @param region The region to use when contacting Cognito Identity
      * @param clientConfiguration Configuration to apply to service clients
      *            created
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, String identityPoolId,
-            Regions region, ClientConfiguration clientConfiguration) {
+    public CognitoCachingCredentialsProvider(String identityPoolId,
+            Regions region, ClientConfiguration clientConfiguration) throws Throwable {
         super(identityPoolId, region, clientConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -285,7 +303,6 @@ public CognitoCachingCredentialsProvider(Context context, String identityPoolId,
      * flow, not contacting STS. Otherwise the basic flow will be used.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param accountId The AWS accountId for the account with Amazon Cognito
      * @param identityPoolId The Amazon Cogntio identity pool to use
      * @param unauthArn The ARN of the IAM Role that will be assumed when
@@ -295,16 +312,21 @@ public CognitoCachingCredentialsProvider(Context context, String identityPoolId,
      * @param cibClient Preconfigured CognitoIdentity client to make requests
      *            with
      * @param stsClient Preconfigured STS client to make requests with
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, String accountId,
+    public CognitoCachingCredentialsProvider(String accountId,
             String identityPoolId, String unauthArn, String authArn,
-            AmazonCognitoIdentityClient cibClient, AWSSecurityTokenService stsClient) {
+            AmazonCognitoIdentityClient cibClient, AWSSecurityTokenService stsClient) throws Throwable {
         super(accountId, identityPoolId, unauthArn, authArn, cibClient, stsClient);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -318,20 +340,24 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * Provider class.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with STS
      * @param unauthArn the unauthArn, for use with the STS call
      * @param authArn the authArn, for use with the STS call
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            String unauthArn, String authArn) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+            String unauthArn, String authArn) throws Throwable {
         super(provider, unauthArn, authArn);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -345,21 +371,25 @@ public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProv
      * Provider class, and the STS client to use.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with STS
      * @param unauthArn the unauthArn, for use with the STS call
      * @param authArn the authArn, for use with the STS call
      * @param stsClient the sts endpoint to get session credentials from
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            String unauthArn, String authArn, AWSSecurityTokenService stsClient) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+            String unauthArn, String authArn, AWSSecurityTokenService stsClient) throws Throwable {
         super(provider, unauthArn, authArn, stsClient);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -380,20 +410,24 @@ public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProv
      * roles) will work without doing so, but will not use the enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with Amazon
      *            Cognito
      * @param region The region to use when contacting Cognito
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            Regions region) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+            Regions region) throws Throwable {
         super(provider, region);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -414,22 +448,26 @@ public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProv
      * roles) will work without doing so, but will not use the enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with Amazon
      *            Cognito
      * @param clientConfiguration Configuration to apply to service clients
      *            created
      * @param region The region to use when contacting Cognito Identity
+     * @throws java.lang.Throwable
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            Regions region, ClientConfiguration clientConfiguration) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+            Regions region, ClientConfiguration clientConfiguration) throws Throwable {
         super(provider, region, clientConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
+        
+        this.prefs = Services.get(SettingsService.class)
+                .orElseThrow(new Supplier() {
+                    @Override
+                    public Object get() {
+                        throw new RuntimeException("Error accessing Settings Service"); 
+                    }
+                });
+        
         initialize();
     }
 
@@ -443,7 +481,7 @@ private void initialize() {
     /**
      * Gets the Cognito identity id of the user. The first time when this method
      * is called, a network request will be made to retrieve a new identity id.
-     * After that it's saved in {@link android.content.SharedPreferences}. Please don't call it
+     * After that it's saved in {@link SharedPreferences}. Please don't call it
      * in the main thread.
      *
      * @return identity id of the user
@@ -491,7 +529,7 @@ public AWSSessionCredentials getCredentials() {
         	}
         	return sessionCredentials;
         } catch (NotAuthorizedException e) {
-            Log.e(TAG, "Failure to get credentials", e);
+            LOG.log(Level.WARNING,  "Failure to get credentials", e);
             if (getLogins() != null) {
                 // If the fetch failed then the credentials don't
                 // match the current id, so clear them
@@ -547,7 +585,7 @@ public void clear() {
         super.clear();
 
         // clear cached identity id and credentials
-        prefs.edit().clear().apply();
+        clearPrefs();
     }
 
     /*
@@ -559,16 +597,14 @@ public void clear() {
     public void clearCredentials() {
     	credentialsLock.writeLock().lock();
     	try {
-	        super.clearCredentials();
-	        Log.d(TAG, "Clearing credentials from SharedPreferences");
-	        prefs.edit()
-	                .remove(namespace(AK_KEY))
-	                .remove(namespace(SK_KEY))
-	                .remove(namespace(ST_KEY))
-	                .remove(namespace(EXP_KEY))
-	                .apply();
+            super.clearCredentials();
+            LOG.log(Level.FINE,  "Clearing credentials from SharedPreferences");
+            prefs.remove(namespace(AK_KEY));
+            prefs.remove(namespace(SK_KEY));
+            prefs.remove(namespace(ST_KEY));
+            prefs.remove(namespace(EXP_KEY));
     	} finally {
-    		credentialsLock.writeLock().unlock();
+            credentialsLock.writeLock().unlock();
     	}
     }
 
@@ -578,7 +614,7 @@ public void clearCredentials() {
      * @return cached identity id, null if it doesn't exist
      */
     public String getCachedIdentityId() {
-        String cachedIdentityId = prefs.getString(namespace(ID_KEY), null);
+        String cachedIdentityId = prefs.retrieve(namespace(ID_KEY));
         if (cachedIdentityId != null && identityId == null) {
             super.setIdentityId(cachedIdentityId);
         }
@@ -589,51 +625,52 @@ public String getCachedIdentityId() {
      * Load the credentials from prefs
      */
     void loadCachedCredentials() {
-        Log.d(TAG, "Loading credentials from SharedPreferences");
-        sessionCredentialsExpiration = new Date(prefs.getLong(namespace(EXP_KEY), 0));
+        LOG.log(Level.FINE,  "Loading credentials from SharedPreferences");
+        final String value = prefs.retrieve(namespace(EXP_KEY));
+        if (value != null && ! value.isEmpty()) {
+            sessionCredentialsExpiration = new Date(Long.valueOf(value));
+        } else {
+            sessionCredentialsExpiration = null;
+        }
         // make sure we have valid data in prefs
-        boolean hasAK = prefs.contains(namespace(AK_KEY));
-        boolean hasSK = prefs.contains(namespace(SK_KEY));
-        boolean hasST = prefs.contains(namespace(ST_KEY));
+        boolean hasAK = prefs.retrieve(namespace(AK_KEY)) != null;
+        boolean hasSK = prefs.retrieve(namespace(SK_KEY)) != null;
+        boolean hasST = prefs.retrieve(namespace(ST_KEY)) != null;
         if (!hasAK || !hasSK || !hasST) {
-            Log.d(TAG, "No valid credentials found in SharedPreferences");
+            LOG.log(Level.FINE,  "No valid credentials found in SharedPreferences");
             sessionCredentialsExpiration = null;
             return;
         }
-        String AK = prefs.getString(namespace(AK_KEY), null);
-        String SK = prefs.getString(namespace(SK_KEY), null);
-        String ST = prefs.getString(namespace(ST_KEY), null);
+        String AK = prefs.retrieve(namespace(AK_KEY));
+        String SK = prefs.retrieve(namespace(SK_KEY));
+        String ST = prefs.retrieve(namespace(ST_KEY));
 
         sessionCredentials = new BasicSessionCredentials(AK, SK, ST);
     }
 
     /**
-     * Save the credentials to {@link android.content.SharedPreferences}.
+     * Save the credentials to SharedPreferences
      */
     private void saveCredentials(AWSSessionCredentials sessionCredentials,
             long time) {
-        Log.d(TAG, "Saving credentials to SharedPreferences");
+        LOG.log(Level.FINE,  "Saving credentials to SharedPreferences");
         if (sessionCredentials != null) {
-            prefs.edit()
-                    .putString(namespace(AK_KEY), sessionCredentials.getAWSAccessKeyId())
-                    .putString(namespace(SK_KEY), sessionCredentials.getAWSSecretKey())
-                    .putString(namespace(ST_KEY), sessionCredentials.getSessionToken())
-                    .putLong(namespace(EXP_KEY), time)
-                    .apply();
+            prefs.store(namespace(AK_KEY), sessionCredentials.getAWSAccessKeyId());
+            prefs.store(namespace(SK_KEY), sessionCredentials.getAWSSecretKey());
+            prefs.store(namespace(ST_KEY), sessionCredentials.getSessionToken());
+            prefs.store(namespace(EXP_KEY), Long.toString(time));
         }
     }
 
     /**
      * clear cached identity id and credentials Save the Amazon Cognito Identity
-     * Id to {@link android.content.SharedPreferences}.
+     * Id to SharedPreferences
      */
     private void saveIdentityId(String identityId) {
-        Log.d(TAG, "Saving identity id to SharedPreferences");
+        LOG.log(Level.FINE,  "Saving identity id to SharedPreferences");
         this.identityId = identityId;
 
-        prefs.edit()
-                .putString(namespace(ID_KEY), identityId)
-                .apply();
+        prefs.store(namespace(ID_KEY), identityId);
     }
 
     @Override
@@ -648,14 +685,13 @@ protected String getUserAgent() {
     // namespace.
     private void checkUpgrade() {
         // check identity id without namespace
-        if (prefs.contains(ID_KEY)) {
-            Log.i(TAG,
+        if (prefs.retrieve(ID_KEY) != null) {
+            LOG.log(Level.INFO, 
                     "Identity id without namespace is detected. It will be saved under new namespace.");
             // save identity id
-            String identityId = prefs.getString(ID_KEY, null);
-            prefs.edit().clear() // clear old data
-                    .putString(namespace(ID_KEY), identityId)
-                    .apply();
+            String identityId = prefs.retrieve(ID_KEY);
+            clearPrefs();
+            prefs.store(namespace(ID_KEY), identityId);
         }
     }
 
@@ -663,4 +699,12 @@ private void checkUpgrade() {
     private String namespace(String key) {
         return getIdentityPoolId() + "." + key;
     }
+    
+    private void clearPrefs() {
+        prefs.remove(namespace(ID_KEY));
+        prefs.remove(namespace(AK_KEY));
+        prefs.remove(namespace(SK_KEY));
+        prefs.remove(namespace(ST_KEY));
+        prefs.remove(namespace(EXP_KEY));
+    }
 }
