diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBBase.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBBase.java
deleted file mode 100644
index 597e860f30..0000000000
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBBase.java
+++ /dev/null
@@ -1,283 +0,0 @@
-/**
- * Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-
-package com.amazonaws.mobileconnectors.s3.transferutility;
-
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.UriMatcher;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQueryBuilder;
-import android.net.Uri;
-import android.text.TextUtils;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-/**
- * Provides methods to access database through which applications can interact
- * with transfer tasks.
- */
-class TransferDBBase {
-    private static final Log LOGGER = LogFactory.getLog(TransferDBBase.class);
-
-    private static final int TRANSFERS = 10;
-    private static final int TRANSFER_ID = 20;
-    private static final int TRANSFER_PART = 30;
-    private static final int TRANSFER_STATE = 40;
-    private static final String BASE_PATH = "transfers";
-    private final Context context;
-    private final Uri contentUri;
-    private final UriMatcher uriMatcher;
-    private final TransferDatabaseHelper databaseHelper;
-    private SQLiteDatabase database;
-
-    /**
-     * Constructs TransferdatabaseBase with the given Context.
-     *
-     * @param context A Context instance.
-     */
-    public TransferDBBase(Context context) {
-        this.context = context;
-        final String mAuthority = context.getApplicationContext().getPackageName();
-        databaseHelper = new TransferDatabaseHelper(this.context);
-        database = databaseHelper.getWritableDatabase();
-        contentUri = Uri.parse("content://" + mAuthority + "/" + BASE_PATH);
-        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
-
-        /*
-         * The Uri of TRANSFERS is for all records in the table.
-         */
-        uriMatcher.addURI(mAuthority, BASE_PATH, TRANSFERS);
-
-        /*
-         * The Uri of TRANSFER_ID is for a single transfer record.
-         */
-        uriMatcher.addURI(mAuthority, BASE_PATH + "/#", TRANSFER_ID);
-
-        /*
-         * The Uri of TRANSFER_PART is for part records of a multipart upload.
-         */
-        uriMatcher.addURI(mAuthority, BASE_PATH + "/part/#", TRANSFER_PART);
-
-        /*
-         * The Uri of TRANSFER_STATE is for records with a specific state.
-         */
-        uriMatcher.addURI(mAuthority, BASE_PATH + "/state/*", TRANSFER_STATE);
-    }
-
-
-    /* package private */ TransferDatabaseHelper getDatabaseHelper() {
-        return databaseHelper;
-    }
-
-    /**
-     * Closes the database helper.
-     */
-    public void closeDBHelper() {
-        databaseHelper.close();
-    }
-
-    /**
-     * Gets the Uri for the table.
-     *
-     * @return The Uri for the table.
-     */
-    public Uri getContentUri() {
-        return contentUri;
-    }
-
-    /**
-     * Inserts a record to the table.
-     *
-     * @param uri The Uri of a table.
-     * @param values The values of a record.
-     * @return The Uri of the inserted record.
-     */
-    public Uri insert(Uri uri, ContentValues values) {
-        final int uriType = uriMatcher.match(uri);
-        long id = 0;
-        ensureDatabaseOpen();
-
-        switch (uriType) {
-            case TRANSFERS:
-                id = database.insertOrThrow(TransferTable.TABLE_TRANSFER, null, values);
-                break;
-            default:
-                throw new IllegalArgumentException("Unknown URI: " + uri);
-        }
-        return Uri.parse(BASE_PATH + "/" + id);
-    }
-
-    /**
-     * Query records from the database.
-     *
-     * @param uri A Uri indicating which part of data to query.
-     * @param projection The projection of columns.
-     * @param selection The "where" clause of sql.
-     * @param selectionArgs Strings in the "where" clause.
-     * @param sortOrder Sorting order of the query.
-     * @param type Type of transfers to query.
-     * @return A Cursor pointing to records.
-     */
-    public Cursor query(Uri uri, String[] projection, String selection,
-            String[] selectionArgs,
-            String sortOrder) {
-        final SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-        // TODO: currently all methods calling this pass null to projection.
-        // In the future we want to update projection to be more specific for
-        // performance and must handle that here.
-        queryBuilder.setTables(TransferTable.TABLE_TRANSFER);
-        final int uriType = uriMatcher.match(uri);
-        switch (uriType) {
-            case TRANSFERS:
-                queryBuilder.appendWhere(TransferTable.COLUMN_PART_NUM + "=" + 0);
-                break;
-            case TRANSFER_ID:
-                queryBuilder.appendWhere(TransferTable.COLUMN_ID + "=" + uri.getLastPathSegment());
-                break;
-            case TRANSFER_PART:
-                queryBuilder.appendWhere(TransferTable.COLUMN_MAIN_UPLOAD_ID + "="
-                        + uri.getLastPathSegment());
-                break;
-            case TRANSFER_STATE:
-                queryBuilder.appendWhere(TransferTable.COLUMN_STATE + "=");
-                queryBuilder.appendWhereEscapeString(uri.getLastPathSegment());
-                break;
-            default:
-                throw new IllegalArgumentException("Unknown URI: " + uri);
-        }
-        ensureDatabaseOpen();
-        final Cursor cursor = queryBuilder.query(database, projection, selection, selectionArgs,
-                null, null,
-                sortOrder);
-        return cursor;
-    }
-
-    /**
-     * Updates records in the table synchronously.
-     *
-     * @param uri A Uri of the specific record.
-     * @param values The values to update.
-     * @param whereClause The "where" clause of sql.
-     * @param whereArgs Strings in the "where" clause.
-     * @return Number of rows updated.
-     */
-    public synchronized int update(Uri uri, ContentValues values, String whereClause,
-            String[] whereArgs) {
-        final int uriType = uriMatcher.match(uri);
-        int rowsUpdated = 0;
-        ensureDatabaseOpen();
-        switch (uriType) {
-            case TRANSFERS:
-                rowsUpdated = database.update(TransferTable.TABLE_TRANSFER, values, whereClause,
-                        whereArgs);
-                break;
-            case TRANSFER_ID:
-                final String id = uri.getLastPathSegment();
-                if (TextUtils.isEmpty(whereClause)) {
-                    rowsUpdated = database.update(TransferTable.TABLE_TRANSFER, values,
-                            TransferTable.COLUMN_ID + "=" + id, null);
-                } else {
-                    rowsUpdated = database
-                            .update(TransferTable.TABLE_TRANSFER, values, TransferTable.COLUMN_ID
-                                    + "=" + id + " and " + whereClause, whereArgs);
-                }
-                break;
-            default:
-                throw new IllegalArgumentException("Unknown URI: " + uri);
-        }
-        return rowsUpdated;
-    }
-
-    /**
-     * Deletes a record in the table.
-     *
-     * @param uri A Uri of the specific record.
-     * @param selection The "where" clause of sql.
-     * @param selectionArgs Strings in the "where" clause.
-     * @return Number of rows deleted.
-     */
-    public int delete(Uri uri, String selection, String[] selectionArgs) {
-        final int uriType = uriMatcher.match(uri);
-        int rowsDeleted = 0;
-        ensureDatabaseOpen();
-        switch (uriType) {
-            case TRANSFERS:
-                rowsDeleted = database.delete(TransferTable.TABLE_TRANSFER, selection,
-                        selectionArgs);
-                break;
-            case TRANSFER_ID:
-                final String id = uri.getLastPathSegment();
-                if (TextUtils.isEmpty(selection)) {
-                    rowsDeleted = database.delete(TransferTable.TABLE_TRANSFER,
-                            TransferTable.COLUMN_ID + "=" + id, null);
-                } else {
-                    rowsDeleted = database
-                            .delete(TransferTable.TABLE_TRANSFER, TransferTable.COLUMN_ID + "="
-                                    + id + " and " + selection, selectionArgs);
-                }
-                break;
-            default:
-                throw new IllegalArgumentException("Unknown URI: " + uri);
-        }
-        return rowsDeleted;
-    }
-
-    /**
-     * @param uri The Uri of a table.
-     * @param valuesArray A array of values to insert.
-     * @return The mainUploadId of the multipart transfer records
-     */
-    public int bulkInsert(Uri uri, ContentValues[] valuesArray) {
-        final int uriType = uriMatcher.match(uri);
-        int mainUploadId = 0;
-        ensureDatabaseOpen();
-        switch (uriType) {
-            case TRANSFERS:
-                try {
-                    database.beginTransaction();
-                    mainUploadId = (int) database.insertOrThrow(TransferTable.TABLE_TRANSFER, null,
-                            valuesArray[0]);
-                    for (int i = 1; i < valuesArray.length; i++) {
-                        valuesArray[i].put(TransferTable.COLUMN_MAIN_UPLOAD_ID, mainUploadId);
-                        database.insertOrThrow(TransferTable.TABLE_TRANSFER, null, valuesArray[i]);
-                    }
-                    database.setTransactionSuccessful();
-                } catch (final Exception e) {
-                    LOGGER.error("bulkInsert error : ", e);
-                } finally {
-                    database.endTransaction();
-                }
-                break;
-            default:
-                throw new IllegalArgumentException("Unknown URI: " + uri);
-        }
-        return mainUploadId;
-    }
-
-    private void ensureDatabaseOpen() {
-        // close and reopen database.
-        if (!database.isOpen()) {
-            database = databaseHelper.getWritableDatabase();
-        }
-    }
-
-    SQLiteDatabase getDatabase() {
-        return database;
-    }
-
-}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
deleted file mode 100644
index b875b0cd32..0000000000
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
+++ /dev/null
@@ -1,819 +0,0 @@
-/**
- * Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-
-package com.amazonaws.mobileconnectors.s3.transferutility;
-
-import android.content.ContentValues;
-import android.content.Context;
-import android.database.Cursor;
-import android.net.Uri;
-
-import com.amazonaws.services.s3.model.CannedAccessControlList;
-import com.amazonaws.services.s3.model.ObjectMetadata;
-import com.amazonaws.services.s3.model.PartETag;
-import com.amazonaws.services.s3.model.UploadPartRequest;
-import com.amazonaws.util.json.JsonUtils;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Provides methods to conveniently perform database operations.
- */
-class TransferDBUtil {
-
-    private static final Log LOGGER = LogFactory.getLog(TransferDBUtil.class);
-
-    private static final String QUERY_PLACE_HOLDER_STRING = ",?";
-
-    /**
-     * transferDBBase is a basic helper for accessing the database
-     */
-    private static TransferDBBase transferDBBase;
-
-    /**
-     * Constructs a TransferDBUtil with the given Context.
-     *
-     * @param context An instance of Context.
-     */
-    public TransferDBUtil(Context context) {
-        if (transferDBBase == null) {
-            transferDBBase = new TransferDBBase(context);
-        }
-    }
-
-    /**
-     * Closes the DB Connection
-     */
-    public void closeDB() {
-        if (transferDBBase != null) {
-            transferDBBase.closeDBHelper();
-        }
-    }
-
-    /**
-     * Inserts a part upload record into database with the given values.
-     *
-     * @param bucket The name of the bucket to upload to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param fileOffset The byte offset for the file to upload.
-     * @param partNumber The part number of this part.
-     * @param uploadId The multipart upload id of the upload.
-     * @param bytesTotal The Total bytes of the file.
-     * @param isLastPart Whether this part is the last part of the upload.
-     * @return An Uri of the record inserted.
-     */
-    public Uri insertMultipartUploadRecord(String bucket, String key, File file,
-            long fileOffset, int partNumber, String uploadId, long bytesTotal, int isLastPart) {
-        final ContentValues values = generateContentValuesForMultiPartUpload(bucket, key, file,
-                fileOffset, partNumber, uploadId, bytesTotal, isLastPart, new ObjectMetadata(),
-                null);
-        return transferDBBase.insert(transferDBBase.getContentUri(), values);
-    }
-
-    /**
-     * Inserts a transfer record into database with the given values.
-     *
-     * @param type The type of the transfer, can be "upload" or "download".
-     * @param bucket The name of the bucket to upload to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param metadata The S3 Object metadata associated with this object
-     * @return An Uri of the record inserted.
-     */
-    public Uri insertSingleTransferRecord(TransferType type, String bucket, String key, File file,
-            ObjectMetadata metadata) {
-        return insertSingleTransferRecord(type, bucket, key, file, metadata, null);
-    }
-
-    /**
-     * Inserts a transfer record into database with the given values.
-     *
-     * @param type The type of the transfer, can be "upload" or "download".
-     * @param bucket The name of the bucket to upload to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param metadata The S3 Object metadata associated with this object
-     * @param cannedAcl The canned Acl of this S3 object
-     * @return An Uri of the record inserted.
-     */
-    public Uri insertSingleTransferRecord(TransferType type, String bucket, String key, File file,
-            ObjectMetadata metadata, CannedAccessControlList cannedAcl) {
-        final ContentValues values = generateContentValuesForSinglePartTransfer(type, bucket, key, file,
-                metadata, cannedAcl);
-        return transferDBBase.insert(transferDBBase.getContentUri(), values);
-    }
-
-    /**
-     * Inserts a transfer record into database with the given values.
-     *
-     * @param type The type of the transfer, can be "upload" or "download".
-     * @param bucket The name of the bucket to upload to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @return An Uri of the record inserted.
-     */
-    public Uri insertSingleTransferRecord(TransferType type, String bucket, String key, File file) {
-        return insertSingleTransferRecord(type, bucket, key, file,
-                new ObjectMetadata());
-    }
-
-    /**
-     * Inserts multiple records at a time.
-     *
-     * @param valuesArray An array of values to insert.
-     * @return The mainUploadId of the multipart records
-     */
-    public int bulkInsertTransferRecords(ContentValues[] valuesArray) {
-        return transferDBBase.bulkInsert(transferDBBase.getContentUri(), valuesArray);
-    }
-
-    /**
-     * Writes transfer status including transfer state, current transferred
-     * bytes and total bytes into database.
-     *
-     * @param transfer a TransferRecord object
-     * @return Number of rows updated.
-     */
-    public int updateTransferRecord(TransferRecord transfer) {
-        final ContentValues cv = new ContentValues();
-        cv.put(TransferTable.COLUMN_ID, transfer.id);
-        cv.put(TransferTable.COLUMN_STATE, transfer.state.toString());
-        cv.put(TransferTable.COLUMN_BYTES_TOTAL, transfer.bytesTotal);
-        cv.put(TransferTable.COLUMN_BYTES_CURRENT, transfer.bytesCurrent);
-        return transferDBBase.update(getRecordUri(transfer.id), cv, null, null);
-    }
-
-    /**
-     * Updates the current bytes of a transfer record.
-     *
-     * @param id The id of the transfer
-     * @param bytes The bytes currently transferred
-     * @return Number of rows updated.
-     */
-    public int updateBytesTransferred(int id, long bytes) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_BYTES_CURRENT, bytes);
-        return transferDBBase.update(getRecordUri(id), values, null, null);
-    }
-
-    /**
-     * Updates the total bytes of a download record.
-     *
-     * @param id The id of the transfer
-     * @param bytes The total bytes of the download.
-     * @return Number of rows updated.
-     */
-    public int updateBytesTotalForDownload(int id, long bytes) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_BYTES_TOTAL, bytes);
-        return transferDBBase.update(getRecordUri(id), values, null, null);
-    }
-
-    /**
-     * Updates the state but do not notify TransferService to refresh its
-     * transfer record list. Therefore, only TransferObserver knows the state
-     * change of the transfer record. If the new state is STATE_FAILED, we need
-     * to check the original state, because "pause", "cancel" and
-     * "disconnect network" actions may also cause failure message of the
-     * threads, but these are not actual failure of transfers.
-     *
-     * @param id The id of the transfer.
-     * @param state The new state of the transfer.
-     * @return Number of rows updated.
-     */
-    public int updateState(int id, TransferState state) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_STATE, state.toString());
-        if (TransferState.FAILED.equals(state)) {
-            return transferDBBase.update(getRecordUri(id), values, TransferTable.COLUMN_STATE
-                    + " not in (?,?,?,?,?) ", new String[] {
-                    TransferState.COMPLETED.toString(),
-                    TransferState.PENDING_NETWORK_DISCONNECT.toString(),
-                    TransferState.PAUSED.toString(),
-                    TransferState.CANCELED.toString(),
-                    TransferState.WAITING_FOR_NETWORK.toString()
-                    });
-        } else {
-            return transferDBBase.update(getRecordUri(id), values, null, null);
-        }
-    }
-
-    /**
-     * Updates the state and also notify TransferService to refresh its transfer
-     * record list. The method is called by TransferUtility, more typically, by
-     * applications to perform "pause" or "resume" actions, so it needs to
-     * explicitly notify the Service after updating the database.
-     *
-     * @param id The id of the transfer.
-     * @param state The new state of the transfer.
-     * @return Number of rows updated.
-     */
-    public int updateStateAndNotifyUpdate(int id, TransferState state) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_STATE, state.toString());
-        return transferDBBase.update(transferDBBase.getContentUri(), values,
-                TransferTable.COLUMN_ID + "=" + id, null);
-    }
-
-    /**
-     * Updates the multipart id of the transfer record.
-     *
-     * @param id The id of the transfer.
-     * @param multipartId The multipart id of the transfer.
-     * @return Number of rows updated.
-     */
-    public int updateMultipartId(int id, String multipartId) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_MULTIPART_ID, multipartId);
-        return transferDBBase.update(getRecordUri(id), values, null, null);
-    }
-
-    /**
-     * Updates the Etag of the transfer record.
-     *
-     * @param id The id of the transfer.
-     * @param etag The Etag of the transfer.
-     * @return Number of rows updated.
-     */
-    public int updateETag(int id, String etag) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_ETAG, etag);
-        return transferDBBase.update(getRecordUri(id), values, null, null);
-    }
-
-    /**
-     * Updates states of all transfer records which are "running" and "waiting"
-     * to "network disconnect"
-     *
-     * @return Number of rows updated.
-     */
-    public int updateNetworkDisconnected() {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_STATE,
-                TransferState.PENDING_NETWORK_DISCONNECT.toString());
-        return transferDBBase.update(transferDBBase.getContentUri(), values,
-                TransferTable.COLUMN_STATE
-                        + " in (?,?,?)", new String[] {
-                        TransferState.IN_PROGRESS.toString(),
-                        TransferState.RESUMED_WAITING.toString(),
-                        TransferState.WAITING.toString()
-                        });
-    }
-
-    /**
-     * Updates states of all transfer records which are "waiting for network" to
-     * "waiting to resume"
-     *
-     * @return Number of rows updated.
-     */
-    public int updateNetworkConnected() {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_STATE, TransferState.RESUMED_WAITING.toString());
-        return transferDBBase.update(transferDBBase.getContentUri(), values,
-                TransferTable.COLUMN_STATE
-                        + " in (?,?)", new String[] {
-                        TransferState.PENDING_NETWORK_DISCONNECT.toString(),
-                        TransferState.WAITING_FOR_NETWORK.toString()
-                        });
-    }
-
-    /**
-     * Updates states of all transfer records which are "running" and "waiting"
-     * to "paused"
-     *
-     * @return Number of rows updated.
-     */
-    public int setAllRunningRecordsToPausedBeforeShutdownService() {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_STATE, TransferState.PAUSED.toString());
-        return transferDBBase.update(
-                transferDBBase.getContentUri(),
-                values,
-                TransferTable.COLUMN_STATE
-                        + " in (?,?,?,?)",
-                new String[] {
-                        TransferState.IN_PROGRESS.toString(),
-                        TransferState.PENDING_PAUSE.toString(),
-                        TransferState.RESUMED_WAITING.toString(),
-                        TransferState.WAITING.toString()
-                    });
-    }
-
-    /**
-     * Updates states of all transfer records with the specified type which are
-     * "running" and "waiting" to "pending pause".
-     *
-     * @param TransferType The type of transfers to query for.
-     * @return Number of rows updated.
-     */
-    public int pauseAllWithType(TransferType type) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_STATE, TransferState.PENDING_PAUSE.toString());
-        String selection = null;
-        String[] selectionArgs = null;
-        if (type == TransferType.ANY) {
-            selection = TransferTable.COLUMN_STATE + " in (?,?,?)";
-            selectionArgs = new String[] {
-                    TransferState.IN_PROGRESS.toString(),
-                    TransferState.RESUMED_WAITING.toString(),
-                    TransferState.WAITING.toString()
-            };
-        } else {
-            selection = TransferTable.COLUMN_STATE + " in (?,?,?) and " + TransferTable.COLUMN_TYPE
-                    + "=?";
-            selectionArgs = new String[] {
-                    TransferState.IN_PROGRESS.toString(),
-                    TransferState.RESUMED_WAITING.toString(),
-                    TransferState.WAITING.toString(),
-                    type.toString()
-            };
-        }
-        return transferDBBase.update(transferDBBase.getContentUri(), values, selection,
-                selectionArgs);
-    }
-
-    /**
-     * Updates states of all transfer records with the specified which are
-     * "running" and "waiting" to "pending cancel"
-     *
-     * @param TransferType The type of transfers to cancel
-     * @return Number of rows updated.
-     */
-    public int cancelAllWithType(TransferType type) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_STATE, TransferState.PENDING_CANCEL.toString());
-        String selection = null;
-        String[] selectionArgs = null;
-        if (type == TransferType.ANY) {
-            selection = TransferTable.COLUMN_STATE + " in (?,?,?,?,?)";
-            selectionArgs = new String[] {
-                    TransferState.IN_PROGRESS.toString(),
-                    TransferState.RESUMED_WAITING.toString(),
-                    TransferState.WAITING.toString(),
-                    TransferState.PAUSED.toString(),
-                    TransferState.WAITING_FOR_NETWORK.toString()
-            };
-        } else {
-            selection = TransferTable.COLUMN_STATE + " in (?,?,?,?,?) and "
-                    + TransferTable.COLUMN_TYPE + "=?";
-            selectionArgs = new String[] {
-                    TransferState.IN_PROGRESS.toString(),
-                    TransferState.RESUMED_WAITING.toString(),
-                    TransferState.WAITING.toString(),
-                    TransferState.PAUSED.toString(),
-                    TransferState.WAITING_FOR_NETWORK.toString(),
-                    type.toString()
-            };
-        }
-        return transferDBBase.update(transferDBBase.getContentUri(), values, selection,
-                selectionArgs);
-    }
-
-    /**
-     * Queries all the records which have the given type.
-     *
-     * @param TransferType The type of transfers to query for.
-     * @return A Cursor pointing to records in the database with the given type.
-     */
-    public Cursor queryAllTransfersWithType(TransferType type) {
-        if (type == TransferType.ANY) {
-            return transferDBBase.query(transferDBBase.getContentUri(), null, null, null, null);
-        } else {
-            return transferDBBase.query(transferDBBase.getContentUri(), null,
-                    TransferTable.COLUMN_TYPE + "=?", new String[] {
-                        type.toString()
-                    }, null);
-        }
-    }
-
-    /**
-     * Queries all the records which have the given type and state.
-     *
-     * @param TransferType The type of transfers to query for.
-     * @param TransferState The state of the transfer.
-     * @return A Cursor pointing to records in the database with the given type
-     *         and state.
-     */
-    public Cursor queryTransfersWithTypeAndState(TransferType type, TransferState state) {
-        if (type == TransferType.ANY) {
-            return transferDBBase.query(getStateUri(state), null, null,
-                    null, null);
-        } else {
-            return transferDBBase.query(getStateUri(state), null, TransferTable.COLUMN_TYPE + "=?",
-                    new String[] {
-                        type.toString()
-                    }, null);
-        }
-    }
-
-    /**
-     * Queries all the records which have the given type and states.
-     *
-     * @param type   The type of Transfer
-     * @param states The list of Transfer States whose Transfer Records are required.
-     * @return A Cursor pointing to records in the database in any of the given states.
-     */
-    public Cursor queryTransfersWithTypeAndStates(TransferType type,
-                                                  TransferState[] states) {
-        final String selection;
-        final String[] selectionArgs;
-        int index = 0;
-        int numStates = states.length;
-        String placeholderString = createPlaceholders(numStates);
-
-        if (type == TransferType.ANY) {
-            selection = TransferTable.COLUMN_STATE +
-                    " in (" + placeholderString + ")";
-            selectionArgs = new String[numStates];
-            for (index = 0; index < numStates; index++) {
-                selectionArgs[index] = states[index].toString();
-            }
-        } else {
-            selection = TransferTable.COLUMN_STATE
-                    + " in (" + placeholderString + ") and "
-                    + TransferTable.COLUMN_TYPE + "=?";
-            selectionArgs = new String[numStates + 1];
-            for (index = 0; index < numStates; index++) {
-                selectionArgs[index] = states[index].toString();
-            }
-            selectionArgs[index] = type.toString();
-        }
-
-        return transferDBBase.query(transferDBBase.getContentUri(), null, selection,
-                selectionArgs, null);
-    }
-
-    /**
-     * Queries the transfer record specified by id.
-     *
-     * @param id The id of the transfer.
-     * @return The result Cursor of the query.
-     */
-    public Cursor queryTransferById(int id) {
-        return transferDBBase.query(getRecordUri(id), null, null, null, null);
-    }
-
-    /**
-     * Queries the transfer record specified by main upload id.
-     *
-     * @param mainUploadId The mainUploadId of a multipart upload task
-     * @return The bytes already uploaded for this multipart upload task
-     */
-    public long queryBytesTransferredByMainUploadId(int mainUploadId) {
-        Cursor c = null;
-        long bytesTotal = 0;
-        try {
-            c = transferDBBase.query(getPartUri(mainUploadId), null, null, null, null);
-            while (c.moveToNext()) {
-                final String state = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_STATE));
-                if (TransferState.PART_COMPLETED.equals(TransferState.getState(state))) {
-                    bytesTotal += c.getLong(c
-                            .getColumnIndexOrThrow(TransferTable.COLUMN_BYTES_TOTAL));
-                }
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-        }
-        return bytesTotal;
-    }
-
-    /**
-     * Deletes the record with the given id.
-     *
-     * @param id The id of the transfer to be deleted.
-     * @return Number of rows deleted.
-     */
-    public int deleteTransferRecords(int id) {
-        return transferDBBase.delete(getRecordUri(id), null, null);
-    }
-
-    /**
-     * Queries all the PartETags of completed parts from the multipart upload
-     * specified by the mainUploadId. The list of PartETags is used to complete
-     * a multipart upload, so it's usually called after all partUpload tasks are
-     * finished.
-     *
-     * @param mainUploadId The mainUploadId of a multipart upload task
-     * @return A list of PartEtag of completed parts
-     */
-    public List<PartETag> queryPartETagsOfUpload(int mainUploadId) {
-        final List<PartETag> partETags = new ArrayList<PartETag>();
-        Cursor c = null;
-        int partNum = 0;
-        String eTag = null;
-        try {
-            c = transferDBBase.query(getPartUri(mainUploadId), null, null, null, null);
-            while (c.moveToNext()) {
-                partNum = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_PART_NUM));
-                eTag = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_ETAG));
-                partETags.add(new PartETag(partNum, eTag));
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-        }
-        return partETags;
-    }
-
-    /**
-     * Queries uncompleted partUpload tasks of a multipart upload and constructs
-     * a UploadPartRequest for each task. It's used when resuming a multipart
-     * upload
-     *
-     * @param mainUploadId The mainUploadId of a multipart upload task
-     * @param multipartId The multipartId of a multipart upload task
-     * @return A list of UploadPartRequest
-     */
-    public List<UploadPartRequest> getNonCompletedPartRequestsFromDB(int mainUploadId,
-            String multipartId) {
-        final ArrayList<UploadPartRequest> list = new ArrayList<UploadPartRequest>();
-        Cursor c = null;
-        try {
-            c = transferDBBase.query(getPartUri(mainUploadId), null, null, null, null);
-            while (c.moveToNext()) {
-                if (TransferState.PART_COMPLETED.equals(TransferState.getState(c.getString(c
-                        .getColumnIndexOrThrow(TransferTable.COLUMN_STATE))))) {
-                    continue;
-                }
-                final UploadPartRequest putPartRequest = new UploadPartRequest()
-                        .withId(c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID)))
-                        .withMainUploadId(
-                                c.getInt(c
-                                        .getColumnIndexOrThrow(TransferTable.COLUMN_MAIN_UPLOAD_ID)))
-                        .withBucketName(
-                                c.getString(c
-                                        .getColumnIndexOrThrow(TransferTable.COLUMN_BUCKET_NAME)))
-                        .withKey(c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_KEY)))
-                        .withUploadId(multipartId)
-                        .withFile(new File(
-                                c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_FILE))))
-                        .withFileOffset(
-                                c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_FILE_OFFSET)))
-                        .withPartNumber(
-                                c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_PART_NUM)))
-                        .withPartSize(
-                                c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_BYTES_TOTAL)))
-                        .withLastPart(1 == c.getInt(c
-                                .getColumnIndexOrThrow(TransferTable.COLUMN_IS_LAST_PART)));
-                list.add(putPartRequest);
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-        }
-        return list;
-    }
-
-    /**
-     * Queries waiting for network partUpload tasks of a multipart upload and returns
-     * true if one such partUpload tasks
-     *
-     * @param mainUploadId The mainUploadId of a multipart upload task
-     * @return If a partUpload task waiting for network exist
-     */
-    public boolean checkWaitingForNetworkPartRequestsFromDB(int mainUploadId) {
-        boolean isNetworkInterrupted = false;
-        Cursor c = null;
-
-        try {
-            c = transferDBBase.query(getPartUri(mainUploadId), null, TransferTable.COLUMN_STATE + "=?",
-                    new String[] {
-                            TransferState.WAITING_FOR_NETWORK.toString()
-                    }, null);
-            while (c.moveToNext()) {
-                isNetworkInterrupted = true;
-                break;
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-        }
-
-        return isNetworkInterrupted;
-    }
-
-    /**
-     * Create a string with the required number of placeholders
-     *
-     * @param length Number of placeholders needed
-     * @return String with the required placeholders
-     */
-    private String createPlaceholders(int numPlaceHolders) {
-        if (numPlaceHolders <= 0) {
-            LOGGER.error("Cannot create a string of 0 or less placeholders.");
-            return null;
-        }
-
-        StringBuilder stringBuilder = new StringBuilder(
-                numPlaceHolders * QUERY_PLACE_HOLDER_STRING.length() - 1);
-        stringBuilder.append("?");
-
-        for (int index = 1; index < numPlaceHolders; index++) {
-            stringBuilder.append(QUERY_PLACE_HOLDER_STRING);
-        }
-        return stringBuilder.toString();
-    }
-
-    /**
-     * Generates a ContentValues object to insert into the database with the
-     * given values for a multipart upload record.
-     *
-     * @param bucket The name of the bucket to upload to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param fileOffset The byte offset for the file to upload.
-     * @param partNumber The part number of this part.
-     * @param uploadId The multipart upload id of the upload.
-     * @param bytesTotal The Total bytes of the file.
-     * @param isLastPart Whether this part is the last part of the upload.
-     * @param metadata The S3 ObjectMetadata to send along with the object
-     * @param cannedAcl The canned ACL associated with the object
-     * @return The ContentValues object generated.
-     */
-    public ContentValues generateContentValuesForMultiPartUpload(String bucket,
-            String key, File file, long fileOffset, int partNumber, String uploadId,
-            long bytesTotal, int isLastPart, ObjectMetadata metadata,
-            CannedAccessControlList cannedAcl) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_TYPE, TransferType.UPLOAD.toString());
-        values.put(TransferTable.COLUMN_STATE, TransferState.WAITING.toString());
-        values.put(TransferTable.COLUMN_BUCKET_NAME, bucket);
-        values.put(TransferTable.COLUMN_KEY, key);
-        values.put(TransferTable.COLUMN_FILE, file.getAbsolutePath());
-        values.put(TransferTable.COLUMN_BYTES_CURRENT, 0L);
-        values.put(TransferTable.COLUMN_BYTES_TOTAL, bytesTotal);
-        values.put(TransferTable.COLUMN_IS_MULTIPART, 1);
-        values.put(TransferTable.COLUMN_PART_NUM, partNumber);
-        values.put(TransferTable.COLUMN_FILE_OFFSET, fileOffset);
-        values.put(TransferTable.COLUMN_MULTIPART_ID, uploadId);
-        values.put(TransferTable.COLUMN_IS_LAST_PART, isLastPart);
-        values.put(TransferTable.COLUMN_IS_ENCRYPTED, 0);
-        values.putAll(generateContentValuesForObjectMetadata(metadata));
-        if (cannedAcl != null) {
-            values.put(TransferTable.COLUMN_CANNED_ACL, cannedAcl.toString());
-        }
-        return values;
-    }
-
-    /**
-     * Adds mappings to a ContentValues object for the data in the passed in
-     * ObjectMetadata
-     *
-     * @param metadata The ObjectMetadata the content values should be filled
-     *            with
-     * @return the ContentValues
-     */
-    private ContentValues generateContentValuesForObjectMetadata(ObjectMetadata metadata) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_USER_METADATA,
-                JsonUtils.mapToString(metadata.getUserMetadata()));
-        values.put(TransferTable.COLUMN_HEADER_CONTENT_TYPE, metadata.getContentType());
-        values.put(TransferTable.COLUMN_HEADER_CONTENT_ENCODING, metadata.getContentEncoding());
-        values.put(TransferTable.COLUMN_HEADER_CACHE_CONTROL, metadata.getCacheControl());
-        values.put(TransferTable.COLUMN_CONTENT_MD5, metadata.getContentMD5());
-        values.put(TransferTable.COLUMN_HEADER_CONTENT_DISPOSITION,
-                metadata.getContentDisposition());
-        values.put(TransferTable.COLUMN_SSE_ALGORITHM, metadata.getSSEAlgorithm());
-        values.put(TransferTable.COLUMN_SSE_KMS_KEY, metadata.getSSEAwsKmsKeyId());
-        values.put(TransferTable.COLUMN_EXPIRATION_TIME_RULE_ID, metadata.getExpirationTimeRuleId());
-        if (metadata.getHttpExpiresDate() != null) {
-            values.put(TransferTable.COLUMN_HTTP_EXPIRES_DATE,
-                    String.valueOf(metadata.getHttpExpiresDate().getTime()));
-        }
-
-        return values;
-    }
-
-    /**
-     * Generates a ContentValues object to insert into the database with the
-     * given values for a single chunk upload or download.
-     *
-     * @param type The type of the transfer, can be "upload" or "download".
-     * @param bucket The name of the bucket to upload to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param metadata The S3 ObjectMetadata to send along with the object
-     * @param cannedAcl The canned ACL associated with the object
-     * @return The ContentValues object generated.
-     */
-    private ContentValues generateContentValuesForSinglePartTransfer(TransferType type,
-            String bucket, String key, File file, ObjectMetadata metadata,
-            CannedAccessControlList cannedAcl) {
-        final ContentValues values = new ContentValues();
-        values.put(TransferTable.COLUMN_TYPE, type.toString());
-        values.put(TransferTable.COLUMN_STATE, TransferState.WAITING.toString());
-        values.put(TransferTable.COLUMN_BUCKET_NAME, bucket);
-        values.put(TransferTable.COLUMN_KEY, key);
-        values.put(TransferTable.COLUMN_FILE, file.getAbsolutePath());
-        values.put(TransferTable.COLUMN_BYTES_CURRENT, 0L);
-        if (type.equals(TransferType.UPLOAD)) {
-            values.put(TransferTable.COLUMN_BYTES_TOTAL, file == null ? 0L : file.length());
-        }
-        values.put(TransferTable.COLUMN_IS_MULTIPART, 0);
-        values.put(TransferTable.COLUMN_PART_NUM, 0);
-        values.put(TransferTable.COLUMN_IS_ENCRYPTED, 0);
-        values.putAll(generateContentValuesForObjectMetadata(metadata));
-        if (cannedAcl != null) {
-            values.put(TransferTable.COLUMN_CANNED_ACL, cannedAcl.toString());
-        }
-        return values;
-    }
-
-    /**
-     * Gets the Uri of the transfer record table.
-     *
-     * @return The Uri of a table.
-     */
-    public Uri getContentUri() {
-        return transferDBBase.getContentUri();
-    }
-
-    /**
-     * Gets the Uri of a record.
-     *
-     * @param id The id of the transfer.
-     * @return The Uri of the record specified by the id.
-     */
-    public Uri getRecordUri(int id) {
-        return Uri.parse(transferDBBase.getContentUri() + "/" + id);
-    }
-
-    /**
-     * Gets the Uri of part records of a multipart upload.
-     *
-     * @param mainUploadId The main upload id of the transfer.
-     * @return The Uri of the part upload records that have the given
-     *         mainUploadId value.
-     */
-    public Uri getPartUri(int mainUploadId) {
-        return Uri.parse(transferDBBase.getContentUri() + "/part/" + mainUploadId);
-    }
-
-    /**
-     * Gets the Uri of the records that have the given state.
-     *
-     * @param state The state of transfers
-     * @return The Uri that is used to query transfer records with the given
-     *         state.
-     */
-    public Uri getStateUri(TransferState state) {
-        return Uri.parse(transferDBBase.getContentUri() + "/state/" + state.toString());
-    }
-
-    /**
-     * Gets the TransferRecord by id.
-     *
-     * @param id transfer id
-     * @return a TransferRecord if exists, null otherwise
-     */
-    TransferRecord getTransferById(int id) {
-        TransferRecord transfer = null;
-        Cursor c = null;
-        try {
-            c = queryTransferById(id);
-            if (c.moveToFirst()) {
-                transfer = new TransferRecord(id);
-                transfer.updateFromDB(c);
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-        }
-        return transfer;
-    }
-
-    static TransferDBBase getTransferDBBase() {
-        return transferDBBase;
-    }
-}
-
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDatabaseHelper.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDatabaseHelper.java
deleted file mode 100644
index a9725a9213..0000000000
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDatabaseHelper.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-
-package com.amazonaws.mobileconnectors.s3.transferutility;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-
-class TransferDatabaseHelper extends SQLiteOpenHelper {
-
-    private static final String DATABASE_NAME = "awss3transfertable.db";
-    private static final int DATABASE_VERSION = 4;
-
-    private int version;
-
-    public TransferDatabaseHelper(Context context) {
-        this(context, DATABASE_VERSION);
-    }
-
-    public TransferDatabaseHelper(Context context, int version) {
-        super(context, DATABASE_NAME, null, version);
-        this.version = version;
-    }
-
-    @Override
-    public void onCreate(SQLiteDatabase database) {
-        TransferTable.onCreate(database, version);
-    }
-
-    @Override
-    public void onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) {
-        TransferTable.onUpgrade(database, oldVersion, newVersion);
-    }
-
-}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
deleted file mode 100644
index b2534a0c46..0000000000
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
+++ /dev/null
@@ -1,294 +0,0 @@
-/**
- * Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-
-package com.amazonaws.mobileconnectors.s3.transferutility;
-
-import android.database.Cursor;
-
-import com.amazonaws.AmazonClientException;
-import com.amazonaws.mobileconnectors.s3.transferutility.TransferService.NetworkInfoReceiver;
-import com.amazonaws.services.s3.AmazonS3;
-import com.amazonaws.services.s3.model.AbortMultipartUploadRequest;
-import com.amazonaws.util.json.JsonUtils;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import java.io.File;
-import java.util.Map;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-/**
- * TransferRecord is used to store all the information of a transfer and
- * start/stop the a thread for the transfer task.
- */
-@SuppressWarnings("checkstyle:visibilitymodifier")
-class TransferRecord {
-    private static final Log LOGGER = LogFactory.getLog(TransferRecord.class);
-
-    public int id;
-    public int mainUploadId;
-    public int isRequesterPays;
-    public int isMultipart;
-    public int isLastPart;
-    public int isEncrypted;
-    public int partNumber;
-    public long bytesTotal;
-    public long bytesCurrent;
-    public long speed;
-    public long rangeStart;
-    public long rangeLast;
-    public long fileOffset;
-    public TransferType type;
-    public TransferState state;
-    public String bucketName;
-    public String key;
-    public String versionId;
-    public String file;
-    public String multipartId;
-    public String eTag;
-    public String headerContentType;
-    public String headerContentLanguage;
-    public String headerContentDisposition;
-    public String headerContentEncoding;
-    public String headerCacheControl;
-    public String headerExpire;
-
-    /**
-     * The following were added in 2.2.6 to support object metdata
-     */
-    public Map<String, String> userMetadata;
-    public String expirationTimeRuleId;
-    // This is a long representing a date, however it may be null
-    public String httpExpires;
-    public String sseAlgorithm;
-    public String sseKMSKey;
-    public String md5;
-    public String cannedAcl;
-
-    private Future<?> submittedTask;
-
-    /**
-     * Constructs a TransferRecord and initializes the transfer id and S3
-     * client.
-     *
-     * @param id The id of a transfer.
-     */
-    public TransferRecord(int id) {
-        this.id = id;
-    }
-
-    /**
-     * Updates all the fields from database using the given Cursor.
-     *
-     * @param c A Cursor pointing to a transfer record.
-     */
-    public void updateFromDB(Cursor c) {
-        this.id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-        this.mainUploadId = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_MAIN_UPLOAD_ID));
-        this.type = TransferType.getType(c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_TYPE)));
-        this.state = TransferState.getState(c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_STATE)));
-        this.bucketName = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_BUCKET_NAME));
-        this.key = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_KEY));
-        this.versionId = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_VERSION_ID));
-        this.bytesTotal = c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_BYTES_TOTAL));
-        this.bytesCurrent = c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_BYTES_CURRENT));
-        this.speed = c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_SPEED));
-        this.isRequesterPays = c.getInt(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_IS_REQUESTER_PAYS));
-        this.isMultipart = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_IS_MULTIPART));
-        this.isLastPart = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_IS_LAST_PART));
-        this.isEncrypted = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_IS_ENCRYPTED));
-        this.partNumber = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_PART_NUM));
-        this.eTag = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_ETAG));
-        this.file = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_FILE));
-        this.multipartId = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_MULTIPART_ID));
-        this.rangeStart = c
-                .getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_DATA_RANGE_START));
-        this.rangeLast = c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_DATA_RANGE_LAST));
-        this.fileOffset = c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_FILE_OFFSET));
-        this.headerContentType = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_HEADER_CONTENT_TYPE));
-        this.headerContentLanguage = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_HEADER_CONTENT_LANGUAGE));
-        this.headerContentDisposition = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_HEADER_CONTENT_DISPOSITION));
-        this.headerContentEncoding = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_HEADER_CONTENT_ENCODING));
-        this.headerCacheControl = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_HEADER_CACHE_CONTROL));
-        this.headerExpire = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_HEADER_EXPIRE));
-        this.userMetadata = JsonUtils.jsonToMap(c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_USER_METADATA)));
-        this.expirationTimeRuleId = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_EXPIRATION_TIME_RULE_ID));
-        this.httpExpires = c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_HTTP_EXPIRES_DATE));
-        this.sseAlgorithm = c
-                .getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_SSE_ALGORITHM));
-        this.sseKMSKey = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_SSE_KMS_KEY));
-        this.md5 = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_CONTENT_MD5));
-        this.cannedAcl = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_CANNED_ACL));
-    }
-
-    /**
-     * Checks the state of the transfer and starts a thread to run the transfer
-     * task if possible.
-     *
-     * @param s3 s3 instance
-     * @param dbUtil database util
-     * @param updater status updater
-     * @param networkInfo network info
-     * @return Whether the task is running.
-     */
-    public boolean start(AmazonS3 s3, TransferDBUtil dbUtil, TransferStatusUpdater updater,
-            NetworkInfoReceiver networkInfo) {
-        if (!isRunning() && checkIsReadyToRun()) {
-            if (type.equals(TransferType.DOWNLOAD)) {
-                submittedTask = TransferThreadPool
-                        .submitTask(new DownloadTask(this, s3, updater, networkInfo));
-            } else {
-                submittedTask = TransferThreadPool
-                        .submitTask(new UploadTask(this, s3, dbUtil, updater, networkInfo));
-            }
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * Pauses a running transfer.
-     *
-     * @param s3 s3 instance
-     * @param updater status updater
-     * @return true if the transfer is running and is paused successfully, false
-     *         otherwise
-     */
-    public boolean pause(AmazonS3 s3, TransferStatusUpdater updater) {
-        if (!isFinalState(state) && !TransferState.PAUSED.equals(state)) {
-            updater.updateState(id, TransferState.PAUSED);
-            if (isRunning()) {
-                submittedTask.cancel(true);
-            }
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * Cancels a running transfer.
-     * 
-     * @param s3 s3 instance
-     * @param updater status updater
-     * @return true if the transfer is running and is canceled successfully,
-     *         false otherwise
-     */
-    public boolean cancel(final AmazonS3 s3, final TransferStatusUpdater updater) {
-        if (!isFinalState(state)) {
-            updater.updateState(id, TransferState.CANCELED);
-            if (isRunning()) {
-                submittedTask.cancel(true);
-            }
-            // additional cleanups
-            if (isMultipart == 1) {
-                new Thread(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            s3.abortMultipartUpload(new AbortMultipartUploadRequest(bucketName,
-                                    key, multipartId));
-                            LOGGER.debug("Successfully clean up multipart upload: " + id);
-                        } catch (final AmazonClientException e) {
-                            LOGGER.debug("Failed to abort multiplart upload: " + id, e);
-                        }
-                    }
-                }).start();
-            } else if (TransferType.DOWNLOAD.equals(type)) {
-                // remove partially download file
-                new File(file).delete();
-            }
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * Checks whether the transfer is actively running
-     *
-     * @return true if the transfer is running
-     */
-    boolean isRunning() {
-        return submittedTask != null && !submittedTask.isDone();
-    }
-
-    /**
-     * Wait till transfer finishes.
-     *
-     * @param timeout the maximum time to wait in milliseconds
-     * @throws InterruptedException
-     * @throws ExecutionException
-     * @throws TimeoutException
-     */
-    void waitTillFinish(long timeout) throws InterruptedException, ExecutionException,
-            TimeoutException {
-        if (isRunning()) {
-            submittedTask.get(timeout, TimeUnit.MILLISECONDS);
-        }
-    }
-
-    /**
-     * Determines whether a transfer state is a final state.
-     */
-    @SuppressWarnings("checkstyle:hiddenfield")
-    private boolean isFinalState(TransferState state) {
-        return TransferState.COMPLETED.equals(state)
-                || TransferState.FAILED.equals(state)
-                || TransferState.CANCELED.equals(state);
-    }
-
-    private boolean checkIsReadyToRun() {
-        return partNumber == 0 && !TransferState.COMPLETED.equals(state);
-    }
-
-    @Override
-    public String toString() {
-        final StringBuilder sb = new StringBuilder();
-        sb.append("[")
-                .append("id:").append(id).append(",")
-                .append("bucketName:").append(bucketName).append(",")
-                .append("key:").append(key).append(",")
-                .append("file:").append(file).append(",")
-                .append("type:").append(type).append(",")
-                .append("bytesTotal:").append(bytesTotal).append(",")
-                .append("bytesCurrent:").append(bytesCurrent).append(",")
-                .append("fileOffset:").append(fileOffset).append(",")
-                .append("state:").append(state).append(",")
-                .append("cannedAcl:").append(cannedAcl).append(",")
-                .append("mainUploadId:").append(mainUploadId).append(",")
-                .append("isMultipart:").append(isMultipart).append(",")
-                .append("isLastPart:").append(isLastPart).append(",")
-                .append("partNumber:").append(partNumber).append(",")
-                .append("multipartId:").append(multipartId).append(",")
-                .append("eTag:").append(eTag)
-                .append("]");
-        return sb.toString();
-    }
-}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferTable.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferTable.java
deleted file mode 100644
index 56a5eae4a8..0000000000
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferTable.java
+++ /dev/null
@@ -1,307 +0,0 @@
-/**
- * Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-
-package com.amazonaws.mobileconnectors.s3.transferutility;
-
-import android.database.sqlite.SQLiteDatabase;
-
-class TransferTable {
-
-    /**
-     * Database table name
-     */
-    public static final String TABLE_TRANSFER = "awstransfer";
-
-    /**
-     * A unique id of the transfer record
-     */
-    public static final String COLUMN_ID = "_id";
-
-    /**
-     * For upload part record only, the transfer id of the main record of the
-     * part record.
-     */
-    public static final String COLUMN_MAIN_UPLOAD_ID = "main_upload_id";
-
-    /**
-     * Transfer type, can be whether "upload" or "download"
-     */
-    public static final String COLUMN_TYPE = "type";
-
-    /**
-     * The current state of the transfer, values of all states are in
-     * <code>TransferConstants</code>.
-     */
-    public static final String COLUMN_STATE = "state";
-
-    /**
-     * The name of the bucket.
-     */
-    public static final String COLUMN_BUCKET_NAME = "bucket_name";
-
-    /**
-     * A key in the bucket.
-     */
-    public static final String COLUMN_KEY = "key";
-
-    /**
-     * The total bytes to transfer.
-     */
-    public static final String COLUMN_BYTES_TOTAL = "bytes_total";
-
-    /**
-     * The bytes currently transferred.
-     */
-    public static final String COLUMN_BYTES_CURRENT = "bytes_current";
-
-    /**
-     * The path of the file to transfer.
-     */
-    public static final String COLUMN_FILE = "file";
-
-    /**
-     * The bytes offset of the file.
-     */
-    public static final String COLUMN_FILE_OFFSET = "file_offset";
-
-    /**
-     * Whether the transfer is a multi-part transfer.
-     */
-    public static final String COLUMN_IS_MULTIPART = "is_multipart";
-
-    /**
-     * Whether the part is the last part of the file.
-     */
-    public static final String COLUMN_IS_LAST_PART = "is_last_part";
-
-    /**
-     * The number of the part in the transfer.
-     */
-    public static final String COLUMN_PART_NUM = "part_num";
-
-    /**
-     * The multipart upload id.
-     */
-    public static final String COLUMN_MULTIPART_ID = "multipart_id";
-
-    /**
-     * The Etag of the transfer
-     */
-    public static final String COLUMN_ETAG = "etag";
-
-    /**
-     * The range's start index in the file.
-     */
-    public static final String COLUMN_DATA_RANGE_START = "range_start";
-
-    /**
-     * The range's end index in the file.
-     */
-    public static final String COLUMN_DATA_RANGE_LAST = "range_last";
-
-    /**
-     * Whether the transfer is encrypted.
-     */
-    public static final String COLUMN_IS_ENCRYPTED = "is_encrypted";
-
-    /*
-     * the following columns are not used yet
-     */
-    public static final String COLUMN_SPEED = "speed";
-    public static final String COLUMN_VERSION_ID = "version_id";
-    public static final String COLUMN_HEADER_EXPIRE = "header_expire";
-
-    /**
-     * If the object requires the requester to pay
-     */
-    public static final String COLUMN_IS_REQUESTER_PAYS = "is_requester_pays";
-
-    /**
-     * User specified content Type
-     */
-    public static final String COLUMN_HEADER_CONTENT_TYPE = "header_content_type";
-
-    /**
-     * User specified content language
-     */
-    public static final String COLUMN_HEADER_CONTENT_LANGUAGE = "header_content_language";
-
-    /**
-     * User specified content disposition
-     */
-    public static final String COLUMN_HEADER_CONTENT_DISPOSITION = "header_content_disposition";
-
-    /**
-     * User specified content encoding
-     */
-    public static final String COLUMN_HEADER_CONTENT_ENCODING = "header_content_encoding";
-
-    /**
-     * User specified cache control
-     */
-    public static final String COLUMN_HEADER_CACHE_CONTROL = "header_cache_control";
-
-    /**
-     * ============ Below added in 2.2.6 for support for metadata ============
-     */
-
-    /**
-     * User specified lifecycle configuration expiration time rule id
-     */
-    public static final String COLUMN_EXPIRATION_TIME_RULE_ID = "expiration_time_rule_id";
-
-    /**
-     * User specified lifecycle configuration expiration time rule id
-     */
-    public static final String COLUMN_HTTP_EXPIRES_DATE = "http_expires_date";
-
-    /**
-     * User specified server side encryption algorithm
-     */
-    public static final String COLUMN_SSE_ALGORITHM = "sse_algorithm";
-
-    /**
-     * User specified content MD5
-     */
-    public static final String COLUMN_CONTENT_MD5 = "content_md5";
-
-    /**
-     * Json serialization of user metadata to store with the Object
-     */
-    public static final String COLUMN_USER_METADATA = "user_metadata";
-
-    /**
-     * ============ Below added in 2.2.11 for support for KMS ============
-     */
-
-    /**
-     * User specified KMS key for server side encryption
-     */
-    public static final String COLUMN_SSE_KMS_KEY = "kms_key";
-
-    /**
-     * Canned ACL of this upload.
-     */
-    public static final String COLUMN_CANNED_ACL = "canned_acl";
-
-    /*
-     * Database creation SQL statement
-     */
-    private static final String DATABASE_CREATE = "create table "
-            + TABLE_TRANSFER
-            + "("
-            + COLUMN_ID + " integer primary key autoincrement, "
-            + COLUMN_MAIN_UPLOAD_ID + " integer, "
-            + COLUMN_TYPE + " text not null, "
-            + COLUMN_STATE + " text not null, "
-            + COLUMN_BUCKET_NAME + " text not null, "
-            + COLUMN_KEY + " text not null, "
-            + COLUMN_VERSION_ID + " text, "
-            + COLUMN_BYTES_TOTAL + " bigint, "
-            + COLUMN_BYTES_CURRENT + " bigint, "
-            + COLUMN_SPEED + " bigint, "
-            + COLUMN_IS_REQUESTER_PAYS + " integer, "
-            + COLUMN_IS_ENCRYPTED + " integer, "
-            + COLUMN_FILE + " text not null, "
-            + COLUMN_FILE_OFFSET + " bigint, "
-            + COLUMN_IS_MULTIPART + " int, "
-            + COLUMN_PART_NUM + " int not null, "
-            + COLUMN_IS_LAST_PART + " integer, "
-            + COLUMN_MULTIPART_ID + " text, "
-            + COLUMN_ETAG + " text, "
-            + COLUMN_DATA_RANGE_START + " bigint, "
-            + COLUMN_DATA_RANGE_LAST + " bigint, "
-            + COLUMN_HEADER_CONTENT_TYPE + " text, "
-            + COLUMN_HEADER_CONTENT_LANGUAGE + " text, "
-            + COLUMN_HEADER_CONTENT_DISPOSITION + " text, "
-            + COLUMN_HEADER_CONTENT_ENCODING + " text, "
-            + COLUMN_HEADER_CACHE_CONTROL + " text, "
-            + COLUMN_HEADER_EXPIRE + " text"
-            + ");";
-
-    /**
-     * Creates the database.
-     *
-     * @param database An SQLiteDatabase instance.
-     */
-    public static void onCreate(SQLiteDatabase database, int version) {
-        database.execSQL(DATABASE_CREATE);
-        onUpgrade(database, 1, version);
-    }
-
-    private static final int TABLE_VERSION_2 = 2;
-    private static final int TABLE_VERSION_3 = 3;
-    private static final int TABLE_VERSION_4 = 4;
-
-    /**
-     * Upgrades the database.
-     *
-     * @param database An SQLiteDatabase instance.
-     * @param oldVersion The old version of the database.
-     * @param newVersion The new version of the database.
-     */
-    public static void onUpgrade(SQLiteDatabase database, int oldVersion,
-            int newVersion) {
-
-        if (oldVersion < TABLE_VERSION_2 && newVersion >= TABLE_VERSION_2) {
-            addVersion2Columns(database);
-        }
-        if (oldVersion < TABLE_VERSION_3 && newVersion >= TABLE_VERSION_3) {
-            addVersion3Columns(database);
-        }
-        if (oldVersion < TABLE_VERSION_4 && newVersion >= TABLE_VERSION_4) {
-            addVersion4Columns(database);
-        }
-    }
-
-    /**
-     * Adds columns that were introduced in version 2 to the database
-     */
-    private static void addVersion2Columns(SQLiteDatabase database) {
-        final String addUserMetadata = "ALTER TABLE " + TABLE_TRANSFER +
-                " ADD COLUMN " + COLUMN_USER_METADATA + " text;";
-        final String addExpirationTimeRuleId = "ALTER TABLE " + TABLE_TRANSFER +
-                " ADD COLUMN " + COLUMN_EXPIRATION_TIME_RULE_ID + " text;";
-        final String addHttpExpires = "ALTER TABLE " + TABLE_TRANSFER +
-                " ADD COLUMN " + COLUMN_HTTP_EXPIRES_DATE + " text;";
-        final String addSSEAlgorithm = "ALTER TABLE " + TABLE_TRANSFER +
-                " ADD COLUMN " + COLUMN_SSE_ALGORITHM + " text;";
-        final String addContentMD5 = "ALTER TABLE " + TABLE_TRANSFER +
-                " ADD COLUMN " + COLUMN_CONTENT_MD5 + " text;";
-        database.execSQL(addUserMetadata);
-        database.execSQL(addExpirationTimeRuleId);
-        database.execSQL(addHttpExpires);
-        database.execSQL(addSSEAlgorithm);
-        database.execSQL(addContentMD5);
-    }
-
-    /**
-     * Adds columns that were introduced in version 3 to the database
-     */
-    private static void addVersion3Columns(SQLiteDatabase database) {
-        final String addKMSKey = "ALTER TABLE " + TABLE_TRANSFER +
-                " ADD COLUMN " + COLUMN_SSE_KMS_KEY + " text;";
-        database.execSQL(addKMSKey);
-    }
-
-    /**
-     * Adds columns that were introduced in version 3 to the database
-     */
-    private static void addVersion4Columns(SQLiteDatabase database) {
-        final String addCannedAcl = "ALTER TABLE " + TABLE_TRANSFER +
-                " ADD COLUMN " + COLUMN_CANNED_ACL + " text;";
-        database.execSQL(addCannedAcl);
-    }
-}
diff --git a/aws-java-sdk-auth-core/pom.xml b/aws-java-sdk-auth-core/pom.xml
index ab8158e833..9258db2ef0 100644
--- a/aws-java-sdk-auth-core/pom.xml
+++ b/aws-java-sdk-auth-core/pom.xml
@@ -2,11 +2,11 @@
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
-  <groupId>com.amazonaws</groupId>
+  <groupId>com.gluonhq</groupId>
   <artifactId>aws-java-sdk-auth-core</artifactId>
-  <name>AWS SDK for Java - AWS Authentication Core</name>
-  <description>The AWS Java SDK for AWS Authentication Core module holds the client classes that are used for enabling communication with Amazon CognitoIdentityProvider, Amazon Cognito UserPools, Facebook and Google SignIn Providers</description>
-  <url>http://aws.amazon.com/sdkforandroid</url>
+  <name>AWS SDK for Java Mobile - AWS Authentication Core</name>
+  <description>The AWS Java Mobile SDK for AWS Authentication Core module holds the client classes that are used for enabling communication with Amazon CognitoIdentityProvider, Amazon Cognito UserPools, Facebook and Google SignIn Providers</description>
+  <url>https://github.com/gluonhq/aws-sdk-java-mobile</url>
 
   <properties>
     <project.build.sourceEncoding>
@@ -18,41 +18,27 @@
   </properties>
 
   <parent>
-    <groupId>com.amazonaws</groupId>
+    <groupId>com.gluonhq</groupId>
     <artifactId>aws-java-sdk-pom</artifactId>
     <version>2.6.19</version>
   </parent>
 
   <dependencies>
     <dependency>
-      <groupId>com.amazonaws</groupId>
+      <groupId>com.gluonhq</groupId>
       <artifactId>aws-java-sdk-core</artifactId>
       <optional>false</optional>
       <version>2.6.19</version>
     </dependency>
-
     <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <version>4.1.1.4</version>
-      <scope>provided</scope>
+        <groupId>com.gluonhq</groupId>
+        <artifactId>charm-down-plugin-settings</artifactId>
+        <version>3.8.0</version>
     </dependency>
   </dependencies>
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>com.simpligility.maven.plugins</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <version>4.5.0</version>
-        <extensions>true</extensions>
-        <configuration>
-          <sdk>
-            <platform>11</platform>
-            <buildTools>19.1.0</buildTools>
-          </sdk>
-        </configuration>
-      </plugin>
 
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityManager.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityManager.java
index c728895a41..c05c90e746 100644
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityManager.java
+++ b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityManager.java
@@ -17,11 +17,6 @@
 
 package com.amazonaws.mobile.auth.core;
 
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.util.Log;
-
 import com.amazonaws.ClientConfiguration;
 import com.amazonaws.SDKGlobalConfiguration;
 
@@ -36,15 +31,13 @@
 import com.amazonaws.mobile.auth.core.signin.SignInManager;
 import com.amazonaws.mobile.auth.core.signin.SignInProvider;
 import com.amazonaws.mobile.auth.core.signin.SignInProviderResultHandler;
-import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;
 import com.amazonaws.mobile.config.AWSConfiguration;
 
 import com.amazonaws.regions.Region;
 import com.amazonaws.regions.Regions;
+import com.gluonhq.charm.down.Services;
+import com.gluonhq.charm.down.plugins.SettingsService;
 
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
@@ -55,8 +48,11 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.function.Consumer;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javafx.application.Platform;
 
-import org.json.JSONArray;
 
 /**
  * The identity manager keeps track of the current sign-in provider and is responsible
@@ -64,8 +60,7 @@
  * 
  * <pre>
  * // Create IdentityManager and set it as the default instance.
- * IdentityManager idm = new IdentityManager(getApplicationContext(), 
- *                                           new AWSConfiguration(getApplicationContext()));
+ * IdentityManager idm = new IdentityManager(new AWSConfiguration(getApplicationContext()));
  * IdentityManager.setDefaultIdentityManager(idm);
  * 
  * // Use IdentityManager to retrieve the {@link com.amazonaws.auth.CognitoCachingCredentialsProvider}
@@ -76,6 +71,8 @@
  */
 public class IdentityManager {
 
+    private static final Logger LOG = Logger.getLogger(IdentityManager.class.getName());
+    
     /** Holder for the credentials provider, allowing the underlying provider to be swapped when necessary. */
     private class AWSCredentialsProviderHolder implements AWSCredentialsProvider {
 
@@ -102,18 +99,12 @@ private void setUnderlyingProvider(final CognitoCachingCredentialsProvider under
         }
     }
 
-    /** Log tag. */
-    private static final String LOG_TAG = IdentityManager.class.getSimpleName();
-
     /** AWS Configuration json file */
     private static final String AWS_CONFIGURATION_FILE = "awsconfiguration.json";
 
     /** Holder for the credentials provider, allowing the underlying provider to be swapped when necessary. */
     private final AWSCredentialsProviderHolder credentialsProviderHolder;
 
-    /** Application context. */
-    private final Context appContext;
-
     /** Configuration for the mobile helper. */
     private AWSConfiguration awsConfiguration;
 
@@ -177,7 +168,7 @@ public AWSRefreshingCognitoIdentityProvider(final String accountId,
         public String refresh() {
 
             if (currentIdentityProvider != null) {
-                Log.d(LOG_TAG, "Storing the Refresh token in the loginsMap.");
+                LOG.log(Level.FINE, "Storing the Refresh token in the loginsMap.");
                 final String newToken = currentIdentityProvider.refreshToken();
                 getLogins().put(currentIdentityProvider.getCognitoLoginKey(), newToken);
             }
@@ -190,8 +181,7 @@ public String refresh() {
      * 
      * @param context the application context.
      */
-    public IdentityManager(final Context context) {
-        this.appContext = context.getApplicationContext();
+    public IdentityManager() {
         this.awsConfiguration = null;
         this.clientConfiguration = null;
         this.credentialsProviderHolder = null;
@@ -202,16 +192,13 @@ public IdentityManager(final Context context) {
      * Initializes with the application context and the AWSConfiguration passed in.
      * Creates a default ClientConfiguration with the user agent from AWSConfiguration.
      *
-     * @param context the application context.
      * @param awsConfiguration the aws configuration.
      */
-    public IdentityManager(final Context context,
-                           final AWSConfiguration awsConfiguration) {
-        this.appContext = context.getApplicationContext();
+    public IdentityManager(final AWSConfiguration awsConfiguration) {
         this.awsConfiguration = awsConfiguration;
         this.clientConfiguration = new ClientConfiguration().withUserAgent(awsConfiguration.getUserAgent());
         this.credentialsProviderHolder = new AWSCredentialsProviderHolder();
-        createCredentialsProvider(this.appContext, this.clientConfiguration);
+        createCredentialsProvider(this.clientConfiguration);
     }
 
     /**
@@ -220,14 +207,11 @@ public IdentityManager(final Context context,
      * and the ClientConfiguration passed in.
      * Read the UserAgent from AWSConfiguration and set in ClientConfiguration.
      *
-     * @param context the application context.
      * @param awsConfiguration the aws configuration.
      * @param clientConfiguration the client configuration options such as retries and timeouts.
      */
-    public IdentityManager(final Context context,
-                           final AWSConfiguration awsConfiguration,
+    public IdentityManager(final AWSConfiguration awsConfiguration,
                            final ClientConfiguration clientConfiguration) {
-        this.appContext = context.getApplicationContext();
         this.awsConfiguration = awsConfiguration;
         this.clientConfiguration = clientConfiguration;
 
@@ -240,7 +224,7 @@ public IdentityManager(final Context context,
         }
 
         this.credentialsProviderHolder = new AWSCredentialsProviderHolder();
-        createCredentialsProvider(this.appContext, this.clientConfiguration);
+        createCredentialsProvider(this.clientConfiguration);
     }
 
     /**
@@ -248,14 +232,11 @@ public IdentityManager(final Context context,
      * Initializes with the activity context, application's credentials provider
      * that provides the identity and the client configuration.
      *
-     * @param context the application context.
-     * @param awsConfiguration the aws configuration.
+     * @param credentialsProvider
      * @param clientConfiguration the client configuration options such as retries and timeouts.
      */
-    public IdentityManager(final Context context,
-                           final CognitoCachingCredentialsProvider credentialsProvider,
+    public IdentityManager(final CognitoCachingCredentialsProvider credentialsProvider,
                            final ClientConfiguration clientConfiguration) {
-        this.appContext = context.getApplicationContext();
         this.clientConfiguration = clientConfiguration;
         this.credentialsProviderHolder = new AWSCredentialsProviderHolder();
         credentialsProviderHolder.setUnderlyingProvider(credentialsProvider);
@@ -309,7 +290,7 @@ public boolean areCredentialsExpired() {
             credentialsProviderHolder.getUnderlyingProvider().getSessionCredentitalsExpiration();
 
         if (credentialsExpirationDate == null) {
-            Log.d(LOG_TAG, "Credentials are EXPIRED.");
+            LOG.log(Level.FINE, "Credentials are EXPIRED.");
             return true;
         }
 
@@ -319,7 +300,7 @@ public boolean areCredentialsExpired() {
         final boolean credsAreExpired =
                 (credentialsExpirationDate.getTime() - currentTime) < 0;
 
-        Log.d(LOG_TAG, "Credentials are " + (credsAreExpired ? "EXPIRED." : "OK"));
+        LOG.log(Level.FINE, "Credentials are " + (credsAreExpired ? "EXPIRED." : "OK"));
 
         return credsAreExpired;
     }
@@ -371,13 +352,13 @@ public void run() {
                     identityId = credentialsProviderHolder.getUnderlyingProvider().getIdentityId();
                 } catch (final Exception exception) {
                     this.exception = exception;
-                    Log.e(LOG_TAG, exception.getMessage(), exception);
+                    LOG.log(Level.WARNING, exception.getMessage(), exception);
                 } finally {
                     final String result = identityId;
-                    Log.d(LOG_TAG, "Got Amazon Cognito Federated Identity ID: " + identityId);
+                    LOG.log(Level.FINE, "Got Amazon Cognito Federated Identity ID: " + identityId);
 
                     if (handler != null) {
-                        ThreadUtils.runOnUiThread(new Runnable() {
+                        Platform.runLater(new Runnable() {
                             @Override
                             public void run() {
                                 if (exception != null) {
@@ -406,7 +387,7 @@ private SignInProviderResultAdapter(final SignInProviderResultHandler handler) {
 
         @Override
         public void onSuccess(final IdentityProvider provider) {
-            Log.d(LOG_TAG,
+            LOG.log(Level.FINE,
                     String.format("SignInProviderResultAdapter.onSuccess(): %s provider sign-in succeeded.",
                             provider.getDisplayName()));
             // Update Cognito login with the token.
@@ -414,12 +395,12 @@ public void onSuccess(final IdentityProvider provider) {
         }
 
         private void onCognitoSuccess() {
-            Log.d(LOG_TAG, "SignInProviderResultAdapter.onCognitoSuccess()");
+            LOG.log(Level.FINE, "SignInProviderResultAdapter.onCognitoSuccess()");
             handler.onSuccess(currentIdentityProvider);
         }
 
         private void onCognitoError(final Exception ex) {
-            Log.d(LOG_TAG, "SignInProviderResultAdapter.onCognitoError()", ex);
+            LOG.log(Level.FINE, "SignInProviderResultAdapter.onCognitoError()", ex);
             final IdentityProvider provider = currentIdentityProvider;
             // Sign out of parent provider. This clears the currentIdentityProvider.
             IdentityManager.this.signOut();
@@ -428,7 +409,7 @@ private void onCognitoError(final Exception ex) {
 
         @Override
         public void onCancel(final IdentityProvider provider) {
-            Log.d(LOG_TAG, String.format(
+            LOG.log(Level.FINE, String.format(
                 "SignInProviderResultAdapter.onCancel(): %s provider sign-in canceled.",
                 provider.getDisplayName()));
             handler.onCancel(provider);
@@ -436,7 +417,7 @@ public void onCancel(final IdentityProvider provider) {
 
         @Override
         public void onError(final IdentityProvider provider, final Exception ex) {
-            Log.e(LOG_TAG,
+            LOG.log(Level.WARNING,
                 String.format("SignInProviderResultAdapter.onError(): %s provider error. %s",
                               provider.getDisplayName(), ex.getMessage()), ex);
             handler.onError(provider, new ProviderAuthException(provider, ex));
@@ -482,7 +463,7 @@ public SignInProviderResultAdapter getResultsAdapter() {
      * anonymous (guest) identity, call {@link #getUserID(IdentityHandler)}.
      */
     public void signOut() {
-        Log.d(LOG_TAG, "Signing out...");
+        LOG.log(Level.FINE, "Signing out...");
 
         if (currentIdentityProvider != null) {
             executorService.submit(new Runnable() {
@@ -519,15 +500,18 @@ private void refreshCredentialWithLogins(final Map<String, String> loginMap) {
         credentialsProvider.withLogins(loginMap);
       
         // Calling refresh is equivalent to calling getIdentityId() + getCredentials().
-        Log.d(LOG_TAG, "refresh credentials");
+        LOG.log(Level.FINE, "refresh credentials");
         credentialsProvider.refresh();
 
         // Set the expiration key of the Credentials Provider to 8 minutes, 30 seconds.
-        appContext.getSharedPreferences(SHARED_PREF_NAME, Context.MODE_PRIVATE)
-                  .edit()
-                  .putLong(credentialsProvider.getIdentityPoolId() + "." + EXPIRATION_KEY,
-                           System.currentTimeMillis() + (510 * 1000))
-                  .apply();
+        Services.get(SettingsService.class).ifPresent(new Consumer<SettingsService>() {
+            @Override
+            public void accept(SettingsService settings) {
+                settings.store(credentialsProvider.getIdentityPoolId() + "." + EXPIRATION_KEY,
+                           Long.toString(System.currentTimeMillis() + (510 * 1000)));
+                
+            }
+        });
     }
 
     /**
@@ -551,7 +535,7 @@ public void setProviderResultsHandler(final SignInProviderResultHandler signInPr
      * @param provider A sign-in provider.
      */
     public void federateWithProvider(final IdentityProvider provider) {
-        Log.d(LOG_TAG, "federate with provider: Populate loginsMap with token.");
+        LOG.log(Level.FINE, "federate with provider: Populate loginsMap with token.");
         final Map<String, String> loginMap = new HashMap<String, String>();
         loginMap.put(provider.getCognitoLoginKey(), provider.getToken());
         currentIdentityProvider = provider;
@@ -626,10 +610,9 @@ public boolean isUserSignedIn() {
      * @param startupAuthResultHandler the callback object
      * @param ex the exception if raised during the resume session
      */
-    private void completeHandler(final Activity callingActivity,
-                                 final StartupAuthResultHandler startupAuthResultHandler,
+    private void completeHandler(final StartupAuthResultHandler startupAuthResultHandler,
                                  final AuthException ex) {
-        runAfterStartupAuthDelay(callingActivity, new Runnable() {
+        runAfterStartupAuthDelay(new Runnable() {
             @Override
             public void run() {
                 startupAuthResultHandler.onComplete(new StartupAuthResult(IdentityManager.this,
@@ -645,19 +628,18 @@ public void run() {
      *
      * @param runnable runnable to run after the splash timeout expires.
      */
-    private void runAfterStartupAuthDelay(final Activity callingActivity,
-                                          final Runnable runnable) {
+    private void runAfterStartupAuthDelay(final Runnable runnable) {
         executorService.submit(new Runnable() {
             public void run() {
                 // Wait for the startupAuthTimeoutLatch to go to zero.
                 try {
                     startupAuthTimeoutLatch.await();
                 } catch (InterruptedException e) {
-                    Log.d(LOG_TAG, "Interrupted while waiting for startup auth minimum delay.");
+                    LOG.log(Level.FINE, "Interrupted while waiting for startup auth minimum delay.");
                 }
 
                 // Notify user by invoking the callback on the UI thread
-                callingActivity.runOnUiThread(runnable);
+                Platform.runLater(runnable);
             }
         });
     }
@@ -668,45 +650,43 @@ public void run() {
      * If the user was not previously signed in or their identity could not be refreshed with the
      * previously signed-in provider, it will attempt to obtain an unauthenticated identity.
      *
-     * @param callingActivity the calling activity.
      * @param startupAuthResultHandler a handler for returning results.
      * @param minimumDelay the minimum delay to wait before returning the sign-in result.
      */
-    public void resumeSession(final Activity callingActivity,
-                              final StartupAuthResultHandler startupAuthResultHandler,
+    public void resumeSession(final StartupAuthResultHandler startupAuthResultHandler,
                               final long minimumDelay) {
 
-        Log.d(LOG_TAG, "Resume Session called.");
+        LOG.log(Level.FINE, "Resume Session called.");
         
         executorService.submit(new Runnable() {
             public void run() {
-                Log.d(LOG_TAG, "Looking for a previously signed-in session.");
-                final SignInManager signInManager = 
-                        SignInManager.getInstance(callingActivity.getApplicationContext());
+                LOG.log(Level.FINE, "Looking for a previously signed-in session.");
+                final SignInManager signInManager = SignInManager.getInstance();
                 
-                final SignInProvider signInProvider = 
-                        signInManager.getPreviouslySignedInProvider();
+                final SignInProvider signInProvider = signInManager.getPreviouslySignedInProvider();
 
                 // if the user was previously signed-in with an sign-in provider and
                 // we are able to verify with the sign-in provider.
                 if (signInProvider != null) {
-                    Log.d(LOG_TAG, "Refreshing credentials with sign-in provider "
+                    LOG.log(Level.FINE, "Refreshing credentials with sign-in provider "
                         + signInProvider.getDisplayName());
+                    // TODO
+                    throw new UnsupportedOperationException("Not supported yet");
                     
+                    /*
                     // Use the token from the previously signed-in session to
                     // get a AWS Identity using Cognito Federated Identities
                     // The AWS Identity will be wrapped into the CredentialsProvider
                     // which will contain short-lived AWS Credentials to access
                     // AWS resources.             
-                    signInManager.refreshCredentialsWithProvider(callingActivity,
-                            signInProvider,
+                    signInManager.refreshCredentialsWithProvider(signInProvider,
                             new SignInProviderResultHandler() {
 
                                 @Override
                                 public void onSuccess(final IdentityProvider provider) {
-                                    Log.d(LOG_TAG, "Successfully got AWS Credentials.");
+                                    LOG.log(Level.FINE, "Successfully got AWS Credentials.");
         
-                                    runAfterStartupAuthDelay(callingActivity, new Runnable() {
+                                    runAfterStartupAuthDelay(new Runnable() {
                                         @Override
                                         public void run() {
                                             startupAuthResultHandler.onComplete(new StartupAuthResult(IdentityManager.this, null));
@@ -716,28 +696,29 @@ public void run() {
         
                                 @Override
                                 public void onCancel(final IdentityProvider provider) {
-                                    Log.wtf(LOG_TAG, "Cancel can't happen when handling a previously signed-in user.");
+                                    LOG.log(Level.SEVERE, "Cancel can't happen when handling a previously signed-in user.");
                                 }
         
                                 @Override
                                 public void onError(final IdentityProvider provider, final Exception ex) {
-                                    Log.e(LOG_TAG,
+                                    LOG.log(Level.WARNING,
                                             String.format("Federate with Cognito with %s Sign-in provider failed. Error: %s",
                                                     provider.getDisplayName(), ex.getMessage()), ex);
         
                                     if (ex instanceof AuthException) {
-                                        completeHandler(callingActivity, startupAuthResultHandler,
+                                        completeHandler(startupAuthResultHandler,
                                                 (AuthException) ex);
                                     } else {
-                                        completeHandler(callingActivity, startupAuthResultHandler,
+                                        completeHandler(startupAuthResultHandler,
                                                 new AuthException(provider, ex));
                                     }
                                 }
                             });
+                    */
                 } else {
                     // No previously signed-in provider found. No session to resume.
                     // Notify the user by executing the callback handler.
-                    completeHandler(callingActivity, startupAuthResultHandler, null);
+                    completeHandler(startupAuthResultHandler, null);
                 }
 
                 if (minimumDelay > 0) {
@@ -745,7 +726,7 @@ public void onError(final IdentityProvider provider, final Exception ex) {
                     try {
                         Thread.sleep(minimumDelay);
                     } catch (final InterruptedException ex) {
-                        Log.i(LOG_TAG, "Interrupted while waiting for resume session timeout.");
+                        LOG.log(Level.INFO, "Interrupted while waiting for resume session timeout.");
                     }
                 }
 
@@ -762,12 +743,10 @@ public void onError(final IdentityProvider provider, final Exception ex) {
      * previously signed in provider and sign-in is optional, it will attempt to obtain an unauthenticated (guest)
      * identity.
      *
-     * @param callingActivity the calling activity.
      * @param startupAuthResultHandler a handler for returning results.
      */
-    public void resumeSession(final Activity callingActivity,
-                              final StartupAuthResultHandler startupAuthResultHandler) {
-        resumeSession(callingActivity, startupAuthResultHandler, 0);
+    public void resumeSession(final StartupAuthResultHandler startupAuthResultHandler) {
+        resumeSession(startupAuthResultHandler, 0);
     }
 
     /**
@@ -777,14 +756,12 @@ public void resumeSession(final Activity callingActivity,
      * previously signed in provider and sign-in is optional, it will attempt to obtain an unauthenticated (guest)
      * identity.
      *
-     * @param callingActivity the calling activity.
      * @param startupAuthResultHandler a handler for returning results.
      * @deprecated Please use {@link #resumeSession(Activity, StartupAuthResultHandler)} method instead.
      */
     @Deprecated
-    public void doStartupAuth(final Activity callingActivity,
-                              final StartupAuthResultHandler startupAuthResultHandler) {
-        resumeSession(callingActivity, startupAuthResultHandler, 0);
+    public void doStartupAuth(final StartupAuthResultHandler startupAuthResultHandler) {
+        resumeSession(startupAuthResultHandler, 0);
     }
 
     /**
@@ -794,15 +771,14 @@ public void doStartupAuth(final Activity callingActivity,
      * previously signed in provider and sign-in is optional, it will attempt to obtain an unauthenticated (guest)
      * identity.
      *
-     * @param callingActivity the calling activity.
      * @param startupAuthResultHandler a handler for returning results.
+     * @param minimumDelay
      * @deprecated Please use {@link #resumeSession(Activity, StartupAuthResultHandler, long)} method instead.
      */
     @Deprecated
-    public void doStartupAuth(final Activity callingActivity,
-                              final StartupAuthResultHandler startupAuthResultHandler,
+    public void doStartupAuth(final StartupAuthResultHandler startupAuthResultHandler,
                               final long minimumDelay) {
-        resumeSession(callingActivity, startupAuthResultHandler, minimumDelay);
+        resumeSession(startupAuthResultHandler, minimumDelay);
     }
 
     /**
@@ -817,14 +793,12 @@ public void expireSignInTimeout() {
      *
      * Note: This should not be called when already signed in with a provider.
      *
-     * @param context context.
      * @param signInResultHandler the results handler.
      * @deprecated Please use {@link #login(Context, SignInResultHandler)} method instead.
      */
     @Deprecated
-    public void setUpToAuthenticate(final Context context,
-                                    final SignInResultHandler signInResultHandler) {
-        this.login(context, signInResultHandler);
+    public void setUpToAuthenticate(final SignInResultHandler signInResultHandler) {
+        this.login(signInResultHandler);
     }
 
     /**
@@ -832,21 +806,21 @@ public void setUpToAuthenticate(final Context context,
      *
      * Note: This should not be called when already signed in with a provider.
      *
-     * @param context context.
      * @param signInResultHandler the results handler.
      */
-    public void login(final Context context,
-                      final SignInResultHandler signInResultHandler) {
+    public void login(final SignInResultHandler signInResultHandler) {
         // Start the sign-in activity. 
         // We do not finish the calling activity allowing the user to navigate back.
-        try {
-            SignInManager
-                .getInstance(context.getApplicationContext())
-                .setResultHandler(signInResultHandler);
-        } catch (final Exception exception) {
-            Log.e(LOG_TAG, "Error in instantiating SignInManager. " +
-                           "Check the context and completion handler.", exception);
-        }
+        // TODO
+        throw new UnsupportedOperationException("Not supported yet");
+//        try {
+//            SignInManager
+//                .getInstance()
+//                .setResultHandler(signInResultHandler);
+//        } catch (final Exception exception) {
+//            LOG.log(Level.WARNING, "Error in instantiating SignInManager. " +
+//                           "Check the context and completion handler.", exception);
+//        }
     }
 
     /**
@@ -855,22 +829,25 @@ public void login(final Context context,
      *   in order to refresh the credentials.  Therefore, currently cached credentials are
      *   only useful for unauthenticated users.
      */
-    private void createCredentialsProvider(final Context context,
-                                           final ClientConfiguration clientConfiguration) {
-
-        Log.d(LOG_TAG, "Creating the Cognito Caching Credentials Provider "
-                + "with a refreshing Cognito Identity Provider.");
+    private void createCredentialsProvider(final ClientConfiguration clientConfiguration) {
 
-        final String region = getCognitoIdentityRegion();
-        final Regions cognitoIdentityRegion = Regions.fromName(region);
-
-        final AWSRefreshingCognitoIdentityProvider refreshingCredentialsProvider =
-            new AWSRefreshingCognitoIdentityProvider(null, getCognitoIdentityPoolId(),
-                clientConfiguration, cognitoIdentityRegion);
-
-        credentialsProviderHolder.setUnderlyingProvider(
-            new CognitoCachingCredentialsProvider(context, refreshingCredentialsProvider,
-                    cognitoIdentityRegion, clientConfiguration));
+        try {
+            LOG.log(Level.FINE, "Creating the Cognito Caching Credentials Provider "
+                    + "with a refreshing Cognito Identity Provider.");
+            
+            final String region = getCognitoIdentityRegion();
+            final Regions cognitoIdentityRegion = Regions.fromName(region);
+            
+            final AWSRefreshingCognitoIdentityProvider refreshingCredentialsProvider =
+                    new AWSRefreshingCognitoIdentityProvider(null, getCognitoIdentityPoolId(),
+                            clientConfiguration, cognitoIdentityRegion);
+            
+            credentialsProviderHolder.setUnderlyingProvider(
+                    new CognitoCachingCredentialsProvider(refreshingCredentialsProvider,
+                            cognitoIdentityRegion, clientConfiguration));
+        } catch (Throwable ex) {
+            LOG.log(Level.SEVERE, "Error createCredentialsProvider", ex);
+        }
     }
 
     /**
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityProvider.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityProvider.java
index 5602a8c1d3..7f5bb7ff1a 100644
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityProvider.java
+++ b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/IdentityProvider.java
@@ -17,8 +17,6 @@
 
 package com.amazonaws.mobile.auth.core;
 
-import android.content.Context;
-
 import com.amazonaws.mobile.config.AWSConfiguration;
 
 /**
@@ -32,7 +30,7 @@
      * @param context the context.
      * @param configuration the configuration.
      */
-    void initialize(Context context, AWSConfiguration configuration);
+    void initialize(AWSConfiguration configuration);
 
     /**
      * @return the display name for this provider.
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/internal/util/ThreadUtils.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/internal/util/ThreadUtils.java
deleted file mode 100644
index a044ff5bcd..0000000000
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/internal/util/ThreadUtils.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
-  * Copyright 2013-2017 Amazon.com, Inc. or its affiliates.
-  * All Rights Reserved.
-  *
-  * Licensed under the Apache License, Version 2.0 (the "License");
-  * you may not use this file except in compliance with the License.
-  * You may obtain a copy of the License at
-  *
-  *     http://www.apache.org/licenses/LICENSE-2.0
-  *
-  * Unless required by applicable law or agreed to in writing, software
-  * distributed under the License is distributed on an "AS IS" BASIS,
-  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  * See the License for the specific language governing permissions and
-  * limitations under the License.
-  */
-
-package com.amazonaws.mobile.auth.core.internal.util;
-
-import android.os.Handler;
-import android.os.Looper;
-
-public class ThreadUtils {
-
-    private ThreadUtils() {
-
-    }
-
-    /**
-     * Run a runnable on the Main (UI) Thread.
-     * @param runnable the runnable
-     */
-    public static void runOnUiThread(final Runnable runnable) {
-        if (Looper.myLooper() != Looper.getMainLooper()) {
-            new Handler(Looper.getMainLooper()).post(runnable);
-        } else {
-            runnable.run();
-        }
-    }
-}
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/internal/util/ViewHelper.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/internal/util/ViewHelper.java
index 2b3064e8c7..c641cccfa7 100644
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/internal/util/ViewHelper.java
+++ b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/internal/util/ViewHelper.java
@@ -17,10 +17,9 @@
 
 package com.amazonaws.mobile.auth.core.internal.util;
 
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.widget.EditText;
+import java.util.Optional;
+import javafx.scene.control.Alert;
+import javafx.scene.control.ButtonType;
 
 /**
  * Utilities for Views.
@@ -30,26 +29,20 @@
     /**
      * Displays a modal dialog with an OK button.
      *
-     * @param activity invoking activity
      * @param title title to display for the dialog
      * @param body content of the dialog
      */
-    public static void showDialog(final Activity activity, final String title, final String body) {
-        if (null == activity) {
-            return;
-        }
+    public static void showDialog(final String title, final String body) {
 
-        final AlertDialog.Builder builder = new AlertDialog.Builder(activity);
-        builder.setTitle(title);
-        builder.setMessage(body);
-        builder.setNeutralButton(android.R.string.ok, null);
-        builder.show();
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle(title);
+        alert.setContentText(body);
+        alert.show();
     }
 
     /**
      * Displays a modal dialog.
      *
-     * @param activity invoking activity
      * @param title title to display for the dialog
      * @param body content of the dialog
      * @param positiveButton String for positive button
@@ -57,22 +50,25 @@ public static void showDialog(final Activity activity, final String title, final
      * @param negativeButtonListener  the listener which should be invoked when a negative button is pressed
      * @param positiveButtonListener  the listener which should be invoked when a positive button is pressed
      */
-    public static void showDialog(final Activity activity,
-                                  final String title,
+    public static void showDialog(final String title,
                                   final String body,
                                   final String positiveButton, 
-                                  final DialogInterface.OnClickListener positiveButtonListener,
+                                  final Runnable positiveButtonListener,
                                   final String negativeButton,
-                                  final DialogInterface.OnClickListener negativeButtonListener) {
-        if (null == activity) {
-            return;
-        }
+                                  final Runnable negativeButtonListener) {
 
-        final AlertDialog.Builder builder = new AlertDialog.Builder(activity);
-        builder.setTitle(title);
-        builder.setMessage(body);
-        builder.setPositiveButton(positiveButton,positiveButtonListener);
-        builder.setNegativeButton(negativeButton, negativeButtonListener);
-        builder.show();
+        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
+        alert.setTitle(title);
+        alert.setContentText(body);
+        ButtonType yesButton = new ButtonType("Yes");
+        ButtonType noButton = new ButtonType("No");
+        alert.getButtonTypes().setAll(yesButton, noButton);
+
+        Optional<ButtonType> result = alert.showAndWait();
+        if (result.get() == yesButton) {
+            positiveButtonListener.run();
+        } else {
+            negativeButtonListener.run();
+        }
     }
 }
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInManager.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInManager.java
index 416b9bbf55..857d66cde4 100644
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInManager.java
+++ b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInManager.java
@@ -17,21 +17,19 @@
 
 package com.amazonaws.mobile.auth.core.signin;
 
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.util.Log;
-import android.util.SparseArray;
-import android.view.View;
-
 import com.amazonaws.mobile.auth.core.IdentityManager;
 import com.amazonaws.mobile.auth.core.IdentityProvider;
 import com.amazonaws.mobile.auth.core.SignInResultHandler;
-import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;
+import java.util.ArrayList;
 
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javafx.application.Platform;
+import javafx.scene.control.Button;
 
 /**
  * The SignInManager is a singleton component, which orchestrates sign-in and sign-up flows. It is responsible for
@@ -39,9 +37,9 @@
  * buttons with the providers.
  */
 public class SignInManager {
-    /** Log Tag */
-    private static final String LOG_TAG = SignInManager.class.getSimpleName();
 
+    private static final Logger LOG = Logger.getLogger(SignInManager.class.getName());
+    
     /** This map holds the class and the object of the sign-in providers */
     private final Map<Class<? extends SignInProvider>, SignInProvider> signInProviders 
         = new HashMap<Class<? extends SignInProvider>, SignInProvider>();
@@ -53,30 +51,30 @@
     private volatile SignInResultHandler signInResultHandler;
 
     /** permissions handler */
-    private final SparseArray<SignInPermissionsHandler> providersHandlingPermissions 
-        = new SparseArray<SignInPermissionsHandler>();
+    private final List<SignInPermissionsHandler> providersHandlingPermissions 
+        = new ArrayList<SignInPermissionsHandler>();
 
     /**
      * Constructor.
      */
-    private SignInManager(final Context context) {
+    private SignInManager() {
 
         for (Class<? extends SignInProvider> providerClass : IdentityManager.getDefaultIdentityManager().getSignInProviderClasses()) {
             final SignInProvider provider;
             try {
                 provider = providerClass.newInstance();  
                 if (provider != null) {
-	                provider.initialize(context, IdentityManager.getDefaultIdentityManager().getConfiguration());
+	                provider.initialize(IdentityManager.getDefaultIdentityManager().getConfiguration());
 	                signInProviders.put(providerClass, provider);
 	                if (provider instanceof SignInPermissionsHandler) {
 	                    final SignInPermissionsHandler handler = (SignInPermissionsHandler) provider;
-	                    providersHandlingPermissions.put(handler.getPermissionRequestCode(), handler);
+	                    providersHandlingPermissions.add(handler.getPermissionRequestCode(), handler);
 	                }
                 }
             } catch (final IllegalAccessException ex) {
-                Log.e(LOG_TAG, "Unable to instantiate " + providerClass.getSimpleName() + " . Skipping this provider.");       
+                LOG.log(Level.WARNING, "Unable to instantiate " + providerClass.getSimpleName() + " . Skipping this provider.");       
             } catch (final InstantiationException ex) {
-            	Log.e(LOG_TAG, "Unable to instantiate " + providerClass.getSimpleName() + " . Skipping this provider.");
+            	LOG.log(Level.WARNING, "Unable to instantiate " + providerClass.getSimpleName() + " . Skipping this provider.");
             }
             
         }
@@ -90,17 +88,8 @@ private SignInManager(final Context context) {
      * @return instance
      */
     public synchronized static SignInManager getInstance() {
-        return singleton;
-    }
-
-    /**
-     * Gets the singleton instance of this class.
-     *
-     * @return instance
-     */
-    public synchronized static SignInManager getInstance(final Context context) {
         if (singleton == null) {
-            singleton = new SignInManager(context);
+            singleton = new SignInManager();
         }
         return singleton;
     }
@@ -141,13 +130,13 @@ public synchronized static void dispose() {
      */
     public SignInProvider getPreviouslySignedInProvider() {
     	
-    	Log.d(LOG_TAG, "Providers: " + Collections.singletonList(signInProviders)); 
+    	LOG.log(Level.FINE, "Providers: " + Collections.singletonList(signInProviders)); 
 
         for (final SignInProvider provider : signInProviders.values()) {
             // Note: This method may block. This loop could potentially be sped
             // up by running these calls in parallel using an executorService.
             if (provider.refreshUserSignInState()) {
-            	Log.d(LOG_TAG, "Refreshing provider: " + provider.getDisplayName());
+            	LOG.log(Level.FINE, "Refreshing provider: " + provider.getDisplayName());
                 return provider;
             }
         }
@@ -156,22 +145,16 @@ public SignInProvider getPreviouslySignedInProvider() {
 
     private class SignInProviderResultAdapter implements SignInProviderResultHandler {
         final private SignInProviderResultHandler handler;
-        final private Activity activity;
 
-        private SignInProviderResultAdapter(final Activity activity,
-                                            final SignInProviderResultHandler handler) {
+        private SignInProviderResultAdapter(final SignInProviderResultHandler handler) {
             this.handler = handler;
-            this.activity = activity;
         }
 
-        private Activity getActivity() {
-            return activity;
-        }
 
         /** {@inheritDoc} */
         @Override
         public void onSuccess(final IdentityProvider provider) {
-            ThreadUtils.runOnUiThread(new Runnable() {
+            Platform.runLater(new Runnable() {
                 @Override
                 public void run() {
                     handler.onSuccess(provider);
@@ -182,7 +165,7 @@ public void run() {
         /** {@inheritDoc} */
         @Override
         public void onCancel(final IdentityProvider provider) {
-            ThreadUtils.runOnUiThread(new Runnable() {
+            Platform.runLater(new Runnable() {
                 @Override
                 public void run() {
                     handler.onCancel(provider);
@@ -193,7 +176,7 @@ public void run() {
         /** {@inheritDoc} */
         @Override
         public void onError(final IdentityProvider provider, final Exception ex) {
-            ThreadUtils.runOnUiThread(new Runnable() {
+            Platform.runLater(new Runnable() {
                 @Override
                 public void run() {
                     handler.onError(provider, ex);
@@ -213,12 +196,10 @@ public void run() {
      * into the loginsMap and setting it with the CredentialsProvider.
      * After setting it, a refresh operation is made to get an identity from Cognito.
      * 
-     * @param activity the calling activity.
      * @param signInProvider the sign-in provider that was previously signed-in.
      * @param resultsHandler the handler to receive results for credential refresh.
      */
-    public void refreshCredentialsWithProvider(final Activity activity,
-                                               final IdentityProvider signInProvider,
+    public void refreshCredentialsWithProvider(final IdentityProvider signInProvider,
                                                final SignInProviderResultHandler resultsHandler) {
 
         if (signInProvider == null) {
@@ -230,7 +211,7 @@ public void refreshCredentialsWithProvider(final Activity activity,
                 new IllegalArgumentException("Given provider not previously logged in."));
         }
 
-        resultsAdapter = new SignInProviderResultAdapter(activity, resultsHandler);
+        resultsAdapter = new SignInProviderResultAdapter(resultsHandler);
         IdentityManager.getDefaultIdentityManager().setProviderResultsHandler(resultsAdapter);
         IdentityManager.getDefaultIdentityManager().federateWithProvider(signInProvider);
     }
@@ -239,12 +220,10 @@ public void refreshCredentialsWithProvider(final Activity activity,
      * Sets the results handler results from sign-in with a provider. Results handlers are
      * always called on the UI thread.
      *
-     * @param activity the calling activity.
      * @param resultsHandler the handler for results from sign-in with a provider.
      */
-    public void setProviderResultsHandler(final Activity activity,
-                                          final SignInProviderResultHandler resultsHandler) {
-        resultsAdapter = new SignInProviderResultAdapter(activity, resultsHandler);
+    public void setProviderResultsHandler(final SignInProviderResultHandler resultsHandler) {
+        resultsAdapter = new SignInProviderResultAdapter(resultsHandler);
         // Set the final results handler with the identity manager.
         IdentityManager.getDefaultIdentityManager().setProviderResultsHandler(resultsAdapter);
     }
@@ -256,13 +235,12 @@ public void setProviderResultsHandler(final Activity activity,
      * @param buttonView the view for the button associated with this provider.
      * @return the onClickListener for the button to be able to override the listener.
      */
-    public View.OnClickListener initializeSignInButton(final Class<? extends SignInProvider> providerClass,
-                                                       final View buttonView) {
+    public Runnable initializeSignInButton(final Class<? extends SignInProvider> providerClass,
+                                                       final Button buttonView) {
         final SignInProvider provider = findProvider(providerClass);
 
         // Initialize the sign in button with the identity manager's results adapter.
-        return provider.initializeSignInButton(resultsAdapter.getActivity(),
-            buttonView, IdentityManager.getDefaultIdentityManager().getResultsAdapter());
+        return provider.initializeSignInButton(buttonView, IdentityManager.getDefaultIdentityManager().getResultsAdapter());
     }
 
     private SignInProvider findProvider(final Class<? extends SignInProvider> providerClass) {
@@ -286,7 +264,7 @@ private SignInProvider findProvider(final Class<? extends SignInProvider> provid
      */
     public boolean handleActivityResult(final int requestCode, 
                                         final int resultCode, 
-                                        final Intent data) {
+                                        final Object data) {
         for (final SignInProvider provider : signInProviders.values()) {
             if (provider.isRequestCodeOurs(requestCode)) {
                 provider.handleActivityResult(requestCode, resultCode, data);
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInProvider.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInProvider.java
index 0f348f3982..a1cae3a200 100644
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInProvider.java
+++ b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/SignInProvider.java
@@ -17,11 +17,8 @@
 
 package com.amazonaws.mobile.auth.core.signin;
 
-import android.app.Activity;
-import android.content.Intent;
-import android.view.View;
-
 import com.amazonaws.mobile.auth.core.IdentityProvider;
+import javafx.scene.control.Button;
 
 /**
  * Each sign-in provider implements this interface, in order to do sign-in button
@@ -42,17 +39,14 @@
      * @param resultCode the result code.
      * @param data the result intent.
      */
-    void handleActivityResult(int requestCode, int resultCode, Intent data);
+    void handleActivityResult(int requestCode, int resultCode, Object data);
 
     /**
      * Initialize the sign-in button for the sign-in activity.
-     * @param signInActivity the activity for sign-in.
-     * @param buttonView the view for the sign-in button to initialize.
+     * @param buttonView the button
      * @param resultsHandler the resultsHandler for provider sign-in.
      * @return the onClickListener for the button to be able to override the listener,
      *         and null if the button cannot be initialized.
      */
-    View.OnClickListener initializeSignInButton(Activity signInActivity,
-                                                View buttonView,
-                                                SignInProviderResultHandler resultsHandler);
+    Runnable initializeSignInButton(Button buttonView, SignInProviderResultHandler resultsHandler);
 }
diff --git a/aws-java-sdk-core/pom.xml b/aws-java-sdk-core/pom.xml
index 02bd8b147b..e3e1f322a5 100644
--- a/aws-java-sdk-core/pom.xml
+++ b/aws-java-sdk-core/pom.xml
@@ -2,15 +2,15 @@
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
-  <groupId>com.amazonaws</groupId>
+  <groupId>com.gluonhq</groupId>
   <artifactId>aws-java-sdk-core</artifactId>
   <packaging>jar</packaging>
-  <name>AWS SDK for Java - Core Runtime</name>
-  <description>The AWS SDK for Android - Core module holds the classes that is used by the individual service clients to interact with Amazon Web Services. Users need to depend on aws-java-sdk artifact for accessing individual client classes.</description>
-  <url>http://aws.amazon.com/sdkforandroid</url>
+  <name>AWS SDK for Java Mobile - Core Runtime</name>
+  <description>The AWS SDK for Java Mobile - Core module holds the classes that is used by the individual service clients to interact with Amazon Web Services. Users need to depend on aws-java-sdk artifact for accessing individual client classes.</description>
+  <url>https://github.com/gluonhq/aws-sdk-java-mobile</url>
 
   <parent>
-    <groupId>com.amazonaws</groupId>
+    <groupId>com.gluonhq</groupId>
     <artifactId>aws-java-sdk-pom</artifactId>
     <version>2.6.19</version>
   </parent>
diff --git a/aws-java-sdk-kms/pom.xml b/aws-java-sdk-kms/pom.xml
index ae95a04943..da614a9b4f 100644
--- a/aws-java-sdk-kms/pom.xml
+++ b/aws-java-sdk-kms/pom.xml
@@ -2,22 +2,22 @@
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
-  <groupId>com.amazonaws</groupId>
-  <artifactId>aws-android-sdk-kms</artifactId>
+  <groupId>com.gluonhq</groupId>
+  <artifactId>aws-java-sdk-kms</artifactId>
   <packaging>jar</packaging>
-  <name>AWS SDK for Java - AWS KMS</name>
-  <description>The AWS Java SDK for AWS KMS module holds the client classes that are used for communicating with AWS Key Management Service</description>
-  <url>http://aws.amazon.com/sdkforandroid</url>
+  <name>AWS SDK for Java Mobile - AWS KMS</name>
+  <description>The AWS Java Mobile SDK for AWS KMS module holds the client classes that are used for communicating with AWS Key Management Service</description>
+  <url>https://github.com/gluonhq/aws-sdk-java-mobile</url>
 
   <parent>
-    <groupId>com.amazonaws</groupId>
+    <groupId>com.gluonhq</groupId>
     <artifactId>aws-java-sdk-pom</artifactId>
     <version>2.6.19</version>
   </parent>
 
   <dependencies>
     <dependency>
-      <groupId>com.amazonaws</groupId>
+      <groupId>com.gluonhq</groupId>
       <artifactId>aws-java-sdk-core</artifactId>
       <optional>false</optional>
       <version>2.6.19</version>
diff --git a/aws-java-sdk-mobile-client/pom.xml b/aws-java-sdk-mobile-client/pom.xml
index 240983b5ef..2d08475cba 100644
--- a/aws-java-sdk-mobile-client/pom.xml
+++ b/aws-java-sdk-mobile-client/pom.xml
@@ -2,12 +2,12 @@
   xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
-  <groupId>com.amazonaws</groupId>
+  <groupId>com.gluonhq</groupId>
   <artifactId>aws-java-sdk-mobile-client</artifactId>
   <packaging>jar</packaging>
-  <name>AWS SDK for Java - AWS Mobile Client</name>
-  <description>The AWS Java SDK for Mobile Core holds the client classes that are used for initializing the SDK and instantiating the SDK clients.</description>
-  <url>http://aws.amazon.com/sdkforandroid</url>
+  <name>AWS SDK for Java Mobile - AWS Mobile Client</name>
+  <description>The AWS Java SDK for Mobile Client holds the client classes that are used for initializing the SDK and instantiating the SDK clients.</description>
+  <url>https://github.com/gluonhq/aws-sdk-java-mobile</url>
 
   <properties>
     <project.build.sourceEncoding>
@@ -20,14 +20,14 @@
 
 
   <parent>
-    <groupId>com.amazonaws</groupId>
+    <groupId>com.gluonhq</groupId>
     <artifactId>aws-java-sdk-pom</artifactId>
     <version>2.6.19</version>
   </parent>
 
   <dependencies>
     <dependency>
-      <groupId>com.amazonaws</groupId>
+      <groupId>com.gluonhq</groupId>
       <artifactId>aws-java-sdk-auth-core</artifactId>
       <optional>false</optional>
       <version>2.6.19</version>
@@ -74,7 +74,7 @@
     </dependency>-->
 
     <dependency>
-      <groupId>com.amazonaws</groupId>
+      <groupId>com.gluonhq</groupId>
       <artifactId>aws-java-sdk-core</artifactId>
       <optional>true</optional>
       <version>2.6.19</version>
diff --git a/aws-android-sdk-s3/pom.xml b/aws-java-sdk-s3/pom.xml
similarity index 69%
rename from aws-android-sdk-s3/pom.xml
rename to aws-java-sdk-s3/pom.xml
index bcc65dc096..5337755561 100644
--- a/aws-android-sdk-s3/pom.xml
+++ b/aws-java-sdk-s3/pom.xml
@@ -2,32 +2,37 @@
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
-  <groupId>com.amazonaws</groupId>
-  <artifactId>aws-android-sdk-s3</artifactId>
+  <groupId>com.gluonhq</groupId>
+  <artifactId>aws-java-sdk-s3</artifactId>
   <packaging>jar</packaging>
-  <name>AWS SDK for Android - Amazon S3</name>
-  <description>The AWS Android SDK for Amazon S3 module holds the client classes that are used for communicating with Amazon Simple Storage Service</description>
-  <url>http://aws.amazon.com/sdkforandroid</url>
+  <name>AWS SDK for Java Mobile - Amazon S3</name>
+  <description>The AWS Java Mobile SDK for Amazon S3 module holds the client classes that are used for communicating with Amazon Simple Storage Service</description>
+  <url>https://github.com/gluonhq/aws-sdk-java-mobile</url>
 
   <parent>
-    <groupId>com.amazonaws</groupId>
-    <artifactId>aws-android-sdk-pom</artifactId>
+    <groupId>com.gluonhq</groupId>
+    <artifactId>aws-java-sdk-pom</artifactId>
     <version>2.6.19</version>
   </parent>
 
   <dependencies>
     <dependency>
-      <groupId>com.amazonaws</groupId>
-      <artifactId>aws-android-sdk-core</artifactId>
+      <groupId>com.gluonhq</groupId>
+      <artifactId>aws-java-sdk-core</artifactId>
       <optional>false</optional>
       <version>2.6.19</version>
     </dependency>
     <dependency>
-      <groupId>com.amazonaws</groupId>
-      <artifactId>aws-android-sdk-kms</artifactId>
+      <groupId>com.gluonhq</groupId>
+      <artifactId>aws-java-sdk-kms</artifactId>
       <optional>false</optional>
       <version>2.6.19</version>
     </dependency>
+    <dependency>
+      <groupId>com.gluonhq</groupId>
+      <artifactId>charm-cloudlink-client</artifactId>
+      <version>4.4.7</version>
+    </dependency>
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
@@ -72,6 +77,12 @@
     </dependency>
   </dependencies>
 
+  <repositories>
+    <repository>
+      <id>GluonID</id>
+      <url>http://nexus.gluonhq.com/nexus/content/repositories/releases</url>
+    </repository>
+  </repositories>
   <build>
     <plugins>
       <plugin>
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/auth/AwsChunkedEncodingInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/auth/AwsChunkedEncodingInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/auth/AwsChunkedEncodingInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/auth/AwsChunkedEncodingInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/auth/ChunkContentIterator.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/auth/ChunkContentIterator.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/auth/ChunkContentIterator.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/auth/ChunkContentIterator.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/auth/DecodedStreamBuffer.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/auth/DecodedStreamBuffer.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/auth/DecodedStreamBuffer.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/auth/DecodedStreamBuffer.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/actions/S3Actions.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/actions/S3Actions.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/actions/S3Actions.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/actions/S3Actions.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/conditions/S3ConditionFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/conditions/S3ConditionFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/conditions/S3ConditionFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/conditions/S3ConditionFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3BucketResource.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3BucketResource.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3BucketResource.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3BucketResource.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3ObjectResource.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3ObjectResource.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3ObjectResource.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/auth/policy/resources/S3ObjectResource.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Copy.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Copy.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Copy.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Copy.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Download.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Download.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Download.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Download.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileDownload.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileDownload.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileDownload.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileDownload.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferChangeStateListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferChangeStateListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferChangeStateListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferChangeStateListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferProgressUpdatingListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferProgressUpdatingListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferProgressUpdatingListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileTransferProgressUpdatingListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileUpload.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileUpload.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileUpload.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/MultipleFileUpload.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/ObjectMetadataProvider.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/ObjectMetadataProvider.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/ObjectMetadataProvider.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/ObjectMetadataProvider.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseStatus.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseStatus.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseStatus.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PauseStatus.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableDownload.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableDownload.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableDownload.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableDownload.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransfer.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransfer.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransfer.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransfer.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableUpload.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableUpload.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableUpload.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableUpload.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Transfer.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Transfer.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Transfer.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Transfer.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManager.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManager.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManager.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManager.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferProgress.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferProgress.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferProgress.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferProgress.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Upload.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Upload.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Upload.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/Upload.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/PauseException.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/PauseException.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/PauseException.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/PauseException.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/package-info.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/package-info.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/package-info.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/exception/package-info.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/AbstractTransfer.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/AbstractTransfer.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/AbstractTransfer.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/AbstractTransfer.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyCallable.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyCallable.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyCallable.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyCallable.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyImpl.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyImpl.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyImpl.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyImpl.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyMonitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyMonitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyMonitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyMonitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartCallable.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartCallable.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartCallable.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartCallable.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartRequestFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartRequestFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartRequestFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/CopyPartRequestFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadImpl.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadImpl.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadImpl.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadImpl.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadMonitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadMonitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadMonitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/DownloadMonitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileDownloadImpl.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileDownloadImpl.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileDownloadImpl.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileDownloadImpl.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransfer.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransfer.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransfer.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransfer.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransferMonitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransferMonitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransferMonitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileTransferMonitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileUploadImpl.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileUploadImpl.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileUploadImpl.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/MultipleFileUploadImpl.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListenerChain.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListenerChain.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListenerChain.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressListenerChain.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressPublisher.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressPublisher.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressPublisher.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/S3ProgressPublisher.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferManagerUtils.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferManagerUtils.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferManagerUtils.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferManagerUtils.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferMonitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferMonitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferMonitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferMonitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferProgressUpdatingListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferProgressUpdatingListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferProgressUpdatingListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferProgressUpdatingListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferStateChangeListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferStateChangeListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferStateChangeListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/TransferStateChangeListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadCallable.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadCallable.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadCallable.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadCallable.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadImpl.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadImpl.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadImpl.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadImpl.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadMonitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadMonitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadMonitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadMonitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartCallable.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartCallable.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartCallable.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartCallable.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartRequestFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartRequestFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartRequestFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/internal/UploadPartRequestFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/CopyResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/CopyResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/CopyResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/CopyResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/UploadResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/UploadResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/UploadResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/UploadResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/package-info.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/package-info.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/package-info.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/model/package-info.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/package-info.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/package-info.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/package-info.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transfermanager/package-info.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
similarity index 80%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
index cbc5c384e9..d8e3afa4eb 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
@@ -72,18 +72,18 @@ public DownloadTask(TransferRecord download, AmazonS3 s3, TransferStatusUpdater
     @Override
     public Boolean call() throws Exception {
         if (!networkInfo.isNetworkConnected()) {
-            updater.updateState(download.id, TransferState.WAITING_FOR_NETWORK);
+            updater.updateState(download.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
             return false;
         }
-        updater.updateState(download.id, TransferState.IN_PROGRESS);
+        updater.updateState(download.getRecord().getId(), TransferState.IN_PROGRESS);
 
-        final GetObjectRequest getObjectRequest = new GetObjectRequest(download.bucketName,
-                download.key);
+        final GetObjectRequest getObjectRequest = new GetObjectRequest(download.getRecord().getBucketName(),
+                download.getRecord().getKey());
         TransferUtility.appendTransferServiceUserAgentString(getObjectRequest);
-        final File file = new File(download.file);
+        final File file = new File(download.getRecord().getFile());
         final long bytesCurrent = file.length();
         if (bytesCurrent > 0) {
-            LOGGER.debug(String.format("Resume transfer %d from %d bytes", download.id,
+            LOGGER.debug(String.format("Resume transfer %d from %d bytes", download.getRecord().getId(),
                     bytesCurrent));
             /*
              * Setting the last byte position to －1 means downloading the object
@@ -91,22 +91,22 @@ public Boolean call() throws Exception {
              */
             getObjectRequest.setRange(bytesCurrent, -1);
         }
-        getObjectRequest.setGeneralProgressListener(updater.newProgressListener(download.id));
+        getObjectRequest.setGeneralProgressListener(updater.newProgressListener(download.getRecord().getId()));
 
         try {
             final S3Object object = s3.getObject(getObjectRequest);
             if (object == null) {
-                updater.throwError(download.id, new IllegalStateException(
+                updater.throwError(download.getRecord().getId(), new IllegalStateException(
                         "AmazonS3.getObject returns null"));
-                updater.updateState(download.id, TransferState.FAILED);
+                updater.updateState(download.getRecord().getId(), TransferState.FAILED);
                 return false;
             }
 
             final long bytesTotal = object.getObjectMetadata().getInstanceLength();
-            updater.updateProgress(download.id, bytesCurrent, bytesTotal);
+            updater.updateProgress(download.getRecord().getId(), bytesCurrent, bytesTotal);
             saveToFile(object.getObjectContent(), file);
-            updater.updateProgress(download.id, bytesTotal, bytesTotal);
-            updater.updateState(download.id, TransferState.COMPLETED);
+            updater.updateProgress(download.getRecord().getId(), bytesTotal, bytesTotal);
+            updater.updateState(download.getRecord().getId(), TransferState.COMPLETED);
             return true;
         } catch (final Exception e) {
             if (RetryUtils.isInterrupted(e)) {
@@ -114,16 +114,16 @@ public Boolean call() throws Exception {
                  * thread is interrupted by user. don't update the state as it's
                  * set by caller who interrupted
                  */
-                LOGGER.debug("Transfer " + download.id + " is interrupted by user");
+                LOGGER.debug("Transfer " + download.getRecord().getId() + " is interrupted by user");
             } else if (e.getCause() != null &&
                     (e.getCause() instanceof IOException || e.getCause() instanceof AmazonClientException)
                     && !networkInfo.isNetworkConnected()) {
-                LOGGER.debug("Transfer " + download.id + " waits for network");
-                updater.updateState(download.id, TransferState.WAITING_FOR_NETWORK);
+                LOGGER.debug("Transfer " + download.getRecord().getId() + " waits for network");
+                updater.updateState(download.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
             } else {
-                LOGGER.debug("Failed to download: " + download.id + " due to " + e.getMessage());
-                updater.throwError(download.id, e);
-                updater.updateState(download.id, TransferState.FAILED);
+                LOGGER.debug("Failed to download: " + download.getRecord().getId() + " due to " + e.getMessage());
+                updater.throwError(download.getRecord().getId(), e);
+                updater.updateState(download.getRecord().getId(), TransferState.FAILED);
             }
         }
         return false;
diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/Record.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/Record.java
new file mode 100644
index 0000000000..9f7bc80c0e
--- /dev/null
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/Record.java
@@ -0,0 +1,324 @@
+package com.amazonaws.mobileconnectors.s3.transferutility;
+
+import java.util.Map;
+
+public class Record {
+    
+    private int id;
+    private int mainUploadId;
+    private int isRequesterPays;
+    private int isMultipart;
+    private int isLastPart;
+    private int isEncrypted;
+    private int partNumber;
+    private long bytesTotal;
+    private long bytesCurrent;
+    private long speed;
+    private long rangeStart;
+    private long rangeLast;
+    private long fileOffset;
+    private TransferType type;
+    private TransferState state;
+    private String bucketName;
+    private String key;
+    private String versionId;
+    private String file;
+    private String multipartId;
+    private String eTag;
+    private String headerContentType;
+    private String headerContentLanguage;
+    private String headerContentDisposition;
+    private String headerContentEncoding;
+    private String headerCacheControl;
+    private String headerExpire;
+
+    private Map<String, String> userMetadata;
+    private String expirationTimeRuleId;
+    // This is a long representing a date, however it may be null
+    private String httpExpires;
+    private String sseAlgorithm;
+    private String sseKMSKey;
+    private String md5;
+    private String cannedAcl;
+    
+    public Record() {
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public int getMainUploadId() {
+        return mainUploadId;
+    }
+
+    public void setMainUploadId(int mainUploadId) {
+        this.mainUploadId = mainUploadId;
+    }
+
+    public int getIsRequesterPays() {
+        return isRequesterPays;
+    }
+
+    public void setIsRequesterPays(int isRequesterPays) {
+        this.isRequesterPays = isRequesterPays;
+    }
+
+    public int getIsMultipart() {
+        return isMultipart;
+    }
+
+    public void setIsMultipart(int isMultipart) {
+        this.isMultipart = isMultipart;
+    }
+
+    public int getIsLastPart() {
+        return isLastPart;
+    }
+
+    public void setIsLastPart(int isLastPart) {
+        this.isLastPart = isLastPart;
+    }
+
+    public int getIsEncrypted() {
+        return isEncrypted;
+    }
+
+    public void setIsEncrypted(int isEncrypted) {
+        this.isEncrypted = isEncrypted;
+    }
+
+    public int getPartNumber() {
+        return partNumber;
+    }
+
+    public void setPartNumber(int partNumber) {
+        this.partNumber = partNumber;
+    }
+
+    public long getBytesTotal() {
+        return bytesTotal;
+    }
+
+    public void setBytesTotal(long bytesTotal) {
+        this.bytesTotal = bytesTotal;
+    }
+
+    public long getBytesCurrent() {
+        return bytesCurrent;
+    }
+
+    public void setBytesCurrent(long bytesCurrent) {
+        this.bytesCurrent = bytesCurrent;
+    }
+
+    public long getSpeed() {
+        return speed;
+    }
+
+    public void setSpeed(long speed) {
+        this.speed = speed;
+    }
+
+    public long getRangeStart() {
+        return rangeStart;
+    }
+
+    public void setRangeStart(long rangeStart) {
+        this.rangeStart = rangeStart;
+    }
+
+    public long getRangeLast() {
+        return rangeLast;
+    }
+
+    public void setRangeLast(long rangeLast) {
+        this.rangeLast = rangeLast;
+    }
+
+    public long getFileOffset() {
+        return fileOffset;
+    }
+
+    public void setFileOffset(long fileOffset) {
+        this.fileOffset = fileOffset;
+    }
+
+    public TransferType getType() {
+        return type;
+    }
+
+    public void setType(TransferType type) {
+        this.type = type;
+    }
+
+    public TransferState getState() {
+        return state;
+    }
+
+    public void setState(TransferState state) {
+        this.state = state;
+    }
+
+    public String getBucketName() {
+        return bucketName;
+    }
+
+    public void setBucketName(String bucketName) {
+        this.bucketName = bucketName;
+    }
+
+    public String getKey() {
+        return key;
+    }
+
+    public void setKey(String key) {
+        this.key = key;
+    }
+
+    public String getVersionId() {
+        return versionId;
+    }
+
+    public void setVersionId(String versionId) {
+        this.versionId = versionId;
+    }
+
+    public String getFile() {
+        return file;
+    }
+
+    public void setFile(String file) {
+        this.file = file;
+    }
+
+    public String getMultipartId() {
+        return multipartId;
+    }
+
+    public void setMultipartId(String multipartId) {
+        this.multipartId = multipartId;
+    }
+
+    public String geteTag() {
+        return eTag;
+    }
+
+    public void seteTag(String eTag) {
+        this.eTag = eTag;
+    }
+
+    public String getHeaderContentType() {
+        return headerContentType;
+    }
+
+    public void setHeaderContentType(String headerContentType) {
+        this.headerContentType = headerContentType;
+    }
+
+    public String getHeaderContentLanguage() {
+        return headerContentLanguage;
+    }
+
+    public void setHeaderContentLanguage(String headerContentLanguage) {
+        this.headerContentLanguage = headerContentLanguage;
+    }
+
+    public String getHeaderContentDisposition() {
+        return headerContentDisposition;
+    }
+
+    public void setHeaderContentDisposition(String headerContentDisposition) {
+        this.headerContentDisposition = headerContentDisposition;
+    }
+
+    public String getHeaderContentEncoding() {
+        return headerContentEncoding;
+    }
+
+    public void setHeaderContentEncoding(String headerContentEncoding) {
+        this.headerContentEncoding = headerContentEncoding;
+    }
+
+    public String getHeaderCacheControl() {
+        return headerCacheControl;
+    }
+
+    public void setHeaderCacheControl(String headerCacheControl) {
+        this.headerCacheControl = headerCacheControl;
+    }
+
+    public String getHeaderExpire() {
+        return headerExpire;
+    }
+
+    public void setHeaderExpire(String headerExpire) {
+        this.headerExpire = headerExpire;
+    }
+
+    public Map<String, String> getUserMetadata() {
+        return userMetadata;
+    }
+
+    public void setUserMetadata(Map<String, String> userMetadata) {
+        this.userMetadata = userMetadata;
+    }
+
+    public String getExpirationTimeRuleId() {
+        return expirationTimeRuleId;
+    }
+
+    public void setExpirationTimeRuleId(String expirationTimeRuleId) {
+        this.expirationTimeRuleId = expirationTimeRuleId;
+    }
+
+    public String getHttpExpires() {
+        return httpExpires;
+    }
+
+    public void setHttpExpires(String httpExpires) {
+        this.httpExpires = httpExpires;
+    }
+
+    public String getSseAlgorithm() {
+        return sseAlgorithm;
+    }
+
+    public void setSseAlgorithm(String sseAlgorithm) {
+        this.sseAlgorithm = sseAlgorithm;
+    }
+
+    public String getSseKMSKey() {
+        return sseKMSKey;
+    }
+
+    public void setSseKMSKey(String sseKMSKey) {
+        this.sseKMSKey = sseKMSKey;
+    }
+
+    public String getMd5() {
+        return md5;
+    }
+
+    public void setMd5(String md5) {
+        this.md5 = md5;
+    }
+
+    public String getCannedAcl() {
+        return cannedAcl;
+    }
+
+    public void setCannedAcl(String cannedAcl) {
+        this.cannedAcl = cannedAcl;
+    }
+
+    @Override
+    public String toString() {
+        return "Record{" + "id=" + id + ", mainUploadId=" + mainUploadId + ", isRequesterPays=" + isRequesterPays + ", isMultipart=" + isMultipart + ", isLastPart=" + isLastPart + ", isEncrypted=" + isEncrypted + ", partNumber=" + partNumber + ", bytesTotal=" + bytesTotal + ", bytesCurrent=" + bytesCurrent + ", speed=" + speed + ", rangeStart=" + rangeStart + ", rangeLast=" + rangeLast + ", fileOffset=" + fileOffset + ", type=" + type + ", state=" + state + ", bucketName=" + bucketName + ", key=" + key + ", versionId=" + versionId + ", file=" + file + ", multipartId=" + multipartId + ", eTag=" + eTag + ", headerContentType=" + headerContentType + ", headerContentLanguage=" + headerContentLanguage + ", headerContentDisposition=" + headerContentDisposition + ", headerContentEncoding=" + headerContentEncoding + ", headerCacheControl=" + headerCacheControl + ", headerExpire=" + headerExpire + ", userMetadata=" + userMetadata + ", expirationTimeRuleId=" + expirationTimeRuleId + ", httpExpires=" + httpExpires + ", sseAlgorithm=" + sseAlgorithm + ", sseKMSKey=" + sseKMSKey + ", md5=" + md5 + ", cannedAcl=" + cannedAcl + '}';
+    }
+
+}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java
diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/Service.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/Service.java
new file mode 100644
index 0000000000..3624e0e37e
--- /dev/null
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/Service.java
@@ -0,0 +1,96 @@
+package com.amazonaws.mobileconnectors.s3.transferutility;
+
+import com.gluonhq.cloudlink.client.data.DataClient;
+import com.gluonhq.cloudlink.client.data.DataClientBuilder;
+import com.gluonhq.cloudlink.client.data.OperationMode;
+import com.gluonhq.cloudlink.client.data.SyncFlag;
+import com.gluonhq.connect.ConnectState;
+import com.gluonhq.connect.GluonObservableList;
+import com.gluonhq.connect.provider.DataProvider;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import javafx.collections.ObservableList;
+
+public class Service {
+
+    private static final Logger LOG = Logger.getLogger(Service.class.getName());
+    
+    private static final String DATABASE_NAME = "AWS_LOCAL_DATABASE";
+    
+    private final DataClient dataClient;
+
+    private GluonObservableList<Record> records;
+    
+    private static Service instance;
+    
+    public static Service getInstance() {
+        if (instance == null) {
+            instance = new Service();
+        }
+        return instance;
+    }
+    
+    private Service() {
+        dataClient = DataClientBuilder.create()
+                .operationMode(OperationMode.LOCAL_ONLY)
+                .build();
+        
+        retrieveRecords(DATABASE_NAME);
+    }
+    
+    private void retrieveRecords(String databaseName) {
+        records = DataProvider.retrieveList(dataClient.createListDataReader(databaseName, 
+                Record.class,
+                SyncFlag.LIST_WRITE_THROUGH, SyncFlag.OBJECT_WRITE_THROUGH));
+        records.exceptionProperty().addListener(new ChangeListener<Throwable>() {
+            @Override
+            public void changed(ObservableValue<? extends Throwable> observable, Throwable oldValue, Throwable newValue) {
+                LOG.log(Level.WARNING, "Exception dataClient", newValue);
+            }
+        });
+        records.stateProperty().addListener(new ChangeListener<ConnectState>() {
+            @Override
+            public void changed(ObservableValue<? extends ConnectState> observable, ConnectState oldValue, ConnectState newValue) {
+                LOG.log(Level.INFO, "State dataClient: " + newValue);
+            }
+        });
+        LOG.log(Level.INFO, "Initial state dataClient: " + records.getState());
+    }
+    
+    public ObservableList<Record> getRecords() {
+        return records;
+    }
+    
+    public Record getRecord(int id) {
+        for (Record record : records) {
+            if (record.getId() == id) {
+                return record;
+            }
+        }
+        return new Record();
+    }
+    
+    public void updateRecord(Record oldRecord, Record newRecord) {
+        Record r = getRecord(oldRecord.getId());
+        if (r.getId() == oldRecord.getId()) {
+            removeRecord(oldRecord);
+            addRecord(newRecord);
+            dataClient.push(records);
+        }
+    }
+    
+    public void addRecord(Record record) {
+        LOG.log(Level.INFO, "Adding record " + record);
+        records.add(record);
+        LOG.log(Level.INFO, "Push records");
+        dataClient.push(records);
+    }
+    
+    public void removeRecord(Record record) {
+        LOG.log(Level.INFO, "Removing record " + record);
+        records.remove(record);
+        dataClient.push(records);
+    }
+}
diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
new file mode 100644
index 0000000000..51f7c2ae61
--- /dev/null
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
@@ -0,0 +1,544 @@
+/**
+ * Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.mobileconnectors.s3.transferutility;
+
+import com.amazonaws.services.s3.model.CannedAccessControlList;
+import com.amazonaws.services.s3.model.ObjectMetadata;
+import com.amazonaws.services.s3.model.PartETag;
+import com.amazonaws.services.s3.model.UploadPartRequest;
+import com.amazonaws.util.json.JsonUtils;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Provides methods to conveniently perform database operations.
+ */
+class TransferDBUtil {
+
+    private static final Log LOGGER = LogFactory.getLog(TransferDBUtil.class);
+
+    private static final String QUERY_PLACE_HOLDER_STRING = ",?";
+
+    /**
+     * Constructs a TransferDBUtil with the given Context.
+     *
+     * @param context An instance of Context.
+     */
+    public TransferDBUtil() {
+    }
+
+    /**
+     * Inserts a part upload record into database with the given values.
+     *
+     * @param bucket The name of the bucket to upload to.
+     * @param key The key in the specified bucket by which to store the new
+     *            object.
+     * @param file The file to upload.
+     * @param fileOffset The byte offset for the file to upload.
+     * @param partNumber The part number of this part.
+     * @param uploadId The multipart upload id of the upload.
+     * @param bytesTotal The Total bytes of the file.
+     * @param isLastPart Whether this part is the last part of the upload.
+     */
+    public int insertMultipartUploadRecord(String bucket, String key, File file,
+            long fileOffset, int partNumber, String uploadId, long bytesTotal, int isLastPart) {
+        final Record record = generateRecordForMultiPartUpload(bucket, key, file,
+                fileOffset, partNumber, uploadId, bytesTotal, isLastPart, new ObjectMetadata(),
+                null);
+        Service.getInstance().addRecord(record);
+        return record.getId();
+    }
+
+    /**
+     * Inserts a transfer record into database with the given values.
+     *
+     * @param type The type of the transfer, can be "upload" or "download".
+     * @param bucket The name of the bucket to upload to.
+     * @param key The key in the specified bucket by which to store the new
+     *            object.
+     * @param file The file to upload.
+     * @param metadata The S3 Object metadata associated with this object
+     */
+    public int insertSingleTransferRecord(TransferType type, String bucket, String key, File file,
+            ObjectMetadata metadata) {
+        return insertSingleTransferRecord(type, bucket, key, file, metadata, null);
+    }
+
+    /**
+     * Inserts a transfer record into database with the given values.
+     *
+     * @param type The type of the transfer, can be "upload" or "download".
+     * @param bucket The name of the bucket to upload to.
+     * @param key The key in the specified bucket by which to store the new
+     *            object.
+     * @param file The file to upload.
+     * @param metadata The S3 Object metadata associated with this object
+     * @param cannedAcl The canned Acl of this S3 object
+     * @return An Uri of the record inserted.
+     */
+    public int insertSingleTransferRecord(TransferType type, String bucket, String key, File file,
+            ObjectMetadata metadata, CannedAccessControlList cannedAcl) {
+        final Record record = generateRecordForSinglePartTransfer(type, bucket, key, file,
+                metadata, cannedAcl);
+        Service.getInstance().addRecord(record);
+        return record.getId();
+    }
+
+    /**
+     * Inserts a transfer record into database with the given values.
+     *
+     * @param type The type of the transfer, can be "upload" or "download".
+     * @param bucket The name of the bucket to upload to.
+     * @param key The key in the specified bucket by which to store the new
+     *            object.
+     * @param file The file to upload.
+     */
+    public int insertSingleTransferRecord(TransferType type, String bucket, String key, File file) {
+        return insertSingleTransferRecord(type, bucket, key, file, new ObjectMetadata());
+    }
+
+    /**
+     * Inserts multiple records at a time.
+     *
+     * @param recordsArray An array of values to insert.
+     */
+    public int bulkInsertTransferRecords(Record[] recordsArray) {
+        for (Record record : recordsArray) {
+            Service.getInstance().addRecord(record);
+    }
+        return recordsArray.length;
+    }
+
+    /**
+     * Writes transfer status including transfer state, current transferred
+     * bytes and total bytes into database.
+     *
+     * @param transfer a TransferRecord object
+     */
+    public int updateTransferRecord(TransferRecord transfer) {
+        final Record record = Service.getInstance().getRecord(transfer.getRecord().getId());
+        record.setId(transfer.getRecord().getId());
+        record.setState(transfer.getRecord().getState());
+        record.setBytesTotal(transfer.getRecord().getBytesTotal());
+        record.setBytesCurrent(transfer.getRecord().getBytesCurrent());
+        Service.getInstance().updateRecord(transfer.getRecord(), record);
+        return record.getId();
+    }
+
+    /**
+     * Updates the current bytes of a transfer record.
+     *
+     * @param id The id of the transfer
+     * @param bytes The bytes currently transferred
+     */
+    public int updateBytesTransferred(int id, long bytes) {
+        final Record record = getRecord(id);
+        record.setBytesCurrent(bytes);
+        Service.getInstance().updateRecord(getRecord(id), record);
+        return record.getId();
+    }
+
+    /**
+     * Updates the total bytes of a download record.
+     *
+     * @param id The id of the transfer
+     * @param bytes The total bytes of the download.
+     */
+    public int updateBytesTotalForDownload(int id, long bytes) {
+        final Record record = getRecord(id);
+        record.setBytesTotal(bytes);
+        Service.getInstance().updateRecord(getRecord(id), record);
+        return record.getId();
+    }
+
+    /**
+     * Updates the state but do not notify TransferService to refresh its
+     * transfer record list. Therefore, only TransferObserver knows the state
+     * change of the transfer record. If the new state is STATE_FAILED, we need
+     * to check the original state, because "pause", "cancel" and
+     * "disconnect network" actions may also cause failure message of the
+     * threads, but these are not actual failure of transfers.
+     *
+     * @param id The id of the transfer.
+     * @param state The new state of the transfer.
+     */
+    public int updateState(int id, TransferState state) {
+        final Record record = getRecord(id);
+        record.setState(state);
+        Service.getInstance().updateRecord(getRecord(id), record);
+        return record.getId();
+    }
+
+    /**
+     * Updates the state and also notify TransferService to refresh its transfer
+     * record list. The method is called by TransferUtility, more typically, by
+     * applications to perform "pause" or "resume" actions, so it needs to
+     * explicitly notify the Service after updating the database.
+     *
+     * @param id The id of the transfer.
+     * @param state The new state of the transfer.
+     */
+    public int updateStateAndNotifyUpdate(int id, TransferState state) {
+        final Record record = getRecord(id);
+        record.setState(state);
+        Service.getInstance().updateRecord(getRecord(id), record);
+        return record.getId();
+    }
+
+    /**
+     * Updates the multipart id of the transfer record.
+     *
+     * @param id The id of the transfer.
+     * @param multipartId The multipart id of the transfer.
+     */
+    public int updateMultipartId(int id, String multipartId) {
+        final Record record = getRecord(id);
+        record.setMultipartId(multipartId);
+        Service.getInstance().updateRecord(getRecord(id), record);
+        return record.getId();
+    }
+
+    /**
+     * Updates the Etag of the transfer record.
+     *
+     * @param id The id of the transfer.
+     * @param etag The Etag of the transfer.
+     */
+    public int updateETag(int id, String etag) {
+        final Record record = getRecord(id);
+        record.seteTag(etag);
+        Service.getInstance().updateRecord(getRecord(id), record);
+        return record.getId();
+    }
+
+    /**
+     * Updates states of all transfer records which are "running" and "waiting"
+     * to "network disconnect"
+     *
+     */
+    public void updateNetworkDisconnected() {
+        for (Record record : Service.getInstance().getRecords()) {
+            if (record.getState().equals(TransferState.IN_PROGRESS) || 
+                    record.getState().equals(TransferState.RESUMED_WAITING) || 
+                    record.getState().equals(TransferState.WAITING)) {
+                Record newRecord = record;
+                newRecord.setState(TransferState.PENDING_NETWORK_DISCONNECT);
+                Service.getInstance().updateRecord(record, newRecord);
+            }
+        }
+    }
+
+    /**
+     * Updates states of all transfer records which are "waiting for network" to
+     * "waiting to resume"
+     *
+     */
+    public void updateNetworkConnected() {
+        for (Record record : Service.getInstance().getRecords()) {
+            if (record.getState().equals(TransferState.PENDING_NETWORK_DISCONNECT) || 
+                    record.getState().equals(TransferState.WAITING_FOR_NETWORK)) {
+                Record newRecord = record;
+                newRecord.setState(TransferState.RESUMED_WAITING);
+                Service.getInstance().updateRecord(record, newRecord);
+            }
+        }
+    }
+
+    /**
+     * Updates states of all transfer records which are "running" and "waiting"
+     * to "paused"
+     *
+     * @return Number of rows updated.
+     */
+    public void setAllRunningRecordsToPausedBeforeShutdownService() {
+        for (Record record : Service.getInstance().getRecords()) {
+            if (record.getState().equals(TransferState.IN_PROGRESS) || 
+                    record.getState().equals(TransferState.PENDING_PAUSE) || 
+                    record.getState().equals(TransferState.RESUMED_WAITING) || 
+                    record.getState().equals(TransferState.WAITING)) {
+                Record newRecord = record;
+                newRecord.setState(TransferState.PAUSED);
+                Service.getInstance().updateRecord(record, newRecord);
+            }
+        }
+    }
+
+    /**
+
+    /**
+     * Queries the transfer record specified by main upload id.
+     *
+     * @param mainUploadId The mainUploadId of a multipart upload task
+     * @return The bytes already uploaded for this multipart upload task
+     */
+    public long queryBytesTransferredByMainUploadId(int mainUploadId) {
+        long bytesTotal = 0;
+        for (Record record : getPartRecord(mainUploadId)) {
+            final TransferState state = record.getState();
+            if (TransferState.PART_COMPLETED.equals(TransferState.getState(state.name()))) {
+                bytesTotal += record.getBytesTotal();
+            }
+        }
+        return bytesTotal;
+    }
+
+    /**
+     * Deletes the record with the given id.
+     *
+     * @param id The id of the transfer to be deleted.
+     */
+    public int deleteTransferRecords(int id) {
+        Service.getInstance().removeRecord(getRecord(id));
+        return id;
+    }
+
+    /**
+     * Queries all the PartETags of completed parts from the multipart upload
+     * specified by the mainUploadId. The list of PartETags is used to complete
+     * a multipart upload, so it's usually called after all partUpload tasks are
+     * finished.
+     *
+     * @param mainUploadId The mainUploadId of a multipart upload task
+     * @return A list of PartEtag of completed parts
+     */
+    public List<PartETag> queryPartETagsOfUpload(int mainUploadId) {
+        final List<PartETag> partETags = new ArrayList<PartETag>();
+        for (Record record : getPartRecord(mainUploadId)) {
+            int partNum = record.getPartNumber();
+            String eTag = record.geteTag();
+                partETags.add(new PartETag(partNum, eTag));
+            }
+        return partETags;
+    }
+
+    /**
+     * Queries uncompleted partUpload tasks of a multipart upload and constructs
+     * a UploadPartRequest for each task. It's used when resuming a multipart
+     * upload
+     *
+     * @param mainUploadId The mainUploadId of a multipart upload task
+     * @param multipartId The multipartId of a multipart upload task
+     * @return A list of UploadPartRequest
+     */
+    public List<UploadPartRequest> getNonCompletedPartRequestsFromDB(int mainUploadId,
+            String multipartId) {
+        final ArrayList<UploadPartRequest> list = new ArrayList<UploadPartRequest>();
+        for (Record record : getPartRecord(mainUploadId)) {
+            final TransferState state = record.getState();
+            if (! TransferState.PART_COMPLETED.equals(TransferState.getState(state.name()))) {
+                final UploadPartRequest putPartRequest = new UploadPartRequest()
+                        .withId(record.getId())
+                        .withMainUploadId(record.getMainUploadId())
+                        .withBucketName(record.getBucketName())
+                        .withKey(record.getKey())
+                        .withUploadId(multipartId)
+                        .withFile(new File(record.getFile()))
+                        .withFileOffset(record.getFileOffset())
+                        .withPartNumber(record.getPartNumber())
+                        .withPartSize(record.getBytesTotal())
+                        .withLastPart(1 == record.getIsLastPart());
+                list.add(putPartRequest);
+            }
+        }
+        return list;
+    }
+
+    /**
+     * Queries waiting for network partUpload tasks of a multipart upload and returns
+     * true if one such partUpload tasks
+     *
+     * @param mainUploadId The mainUploadId of a multipart upload task
+     * @return If a partUpload task waiting for network exist
+     */
+    public boolean checkWaitingForNetworkPartRequestsFromDB(int mainUploadId) {
+        boolean isNetworkInterrupted = false;
+        for (Record record : getPartRecord(mainUploadId)) {
+            if (record.getState().equals(TransferState.WAITING_FOR_NETWORK)) {
+                isNetworkInterrupted = true;
+                break;
+            }
+            }
+        return isNetworkInterrupted;
+    }
+
+    /**
+     * Create a string with the required number of placeholders
+     *
+     * @param length Number of placeholders needed
+     * @return String with the required placeholders
+     */
+    private String createPlaceholders(int numPlaceHolders) {
+        if (numPlaceHolders <= 0) {
+            LOGGER.error("Cannot create a string of 0 or less placeholders.");
+            return null;
+        }
+
+        StringBuilder stringBuilder = new StringBuilder(
+                numPlaceHolders * QUERY_PLACE_HOLDER_STRING.length() - 1);
+        stringBuilder.append("?");
+
+        for (int index = 1; index < numPlaceHolders; index++) {
+            stringBuilder.append(QUERY_PLACE_HOLDER_STRING);
+        }
+        return stringBuilder.toString();
+    }
+
+    /**
+     * Generates a ContentValues object to insert into the database with the
+     * given values for a multipart upload record.
+     *
+     * @param bucket The name of the bucket to upload to.
+     * @param key The key in the specified bucket by which to store the new
+     *            object.
+     * @param file The file to upload.
+     * @param fileOffset The byte offset for the file to upload.
+     * @param partNumber The part number of this part.
+     * @param uploadId The multipart upload id of the upload.
+     * @param bytesTotal The Total bytes of the file.
+     * @param isLastPart Whether this part is the last part of the upload.
+     * @param metadata The S3 ObjectMetadata to send along with the object
+     * @param cannedAcl The canned ACL associated with the object
+     * @return The Record object generated.
+     */
+    public Record generateRecordForMultiPartUpload(String bucket,
+            String key, File file, long fileOffset, int partNumber, String uploadId,
+            long bytesTotal, int isLastPart, ObjectMetadata metadata,
+            CannedAccessControlList cannedAcl) {
+        final Record record = new Record();
+        record.setType(TransferType.UPLOAD);
+        record.setState(TransferState.WAITING);
+        record.setBucketName(bucket);
+        record.setKey(key);
+        record.setFile(file.getAbsolutePath());
+        record.setBytesCurrent(0L);
+        record.setBytesTotal(bytesTotal);
+        record.setIsMultipart(1);
+        record.setPartNumber(partNumber);
+        record.setFileOffset(fileOffset);
+        record.setMultipartId(uploadId);
+        record.setIsLastPart(isLastPart);
+        record.setIsEncrypted(0);
+        setRecordForObjectMetadata(record, metadata);
+        if (cannedAcl != null) {
+            record.setCannedAcl(cannedAcl.toString());
+        }
+        return record;
+    }
+
+    /**
+     * Adds mappings to a ContentValues object for the data in the passed in
+     * ObjectMetadata
+     *
+     * @param metadata The ObjectMetadata the content values should be filled
+     *            with
+     */
+    private void setRecordForObjectMetadata(Record values, ObjectMetadata metadata) {
+        values.setUserMetadata(metadata.getUserMetadata());
+        values.setHeaderContentType(metadata.getContentType());
+        values.setHeaderContentEncoding(metadata.getContentEncoding());
+        values.setHeaderCacheControl(metadata.getCacheControl());
+        values.setMd5(metadata.getContentMD5());
+        values.setHeaderContentDisposition(metadata.getContentDisposition());
+        values.setSseAlgorithm(metadata.getSSEAlgorithm());
+        values.setSseKMSKey(metadata.getSSEAwsKmsKeyId());
+        values.setExpirationTimeRuleId(metadata.getExpirationTimeRuleId());
+        if (metadata.getHttpExpiresDate() != null) {
+            values.setHttpExpires(String.valueOf(metadata.getHttpExpiresDate().getTime()));
+        }
+    }
+
+    /**
+     * Generates a ContentValues object to insert into the database with the
+     * given values for a single chunk upload or download.
+     *
+     * @param type The type of the transfer, can be "upload" or "download".
+     * @param bucket The name of the bucket to upload to.
+     * @param key The key in the specified bucket by which to store the new
+     *            object.
+     * @param file The file to upload.
+     * @param metadata The S3 ObjectMetadata to send along with the object
+     * @param cannedAcl The canned ACL associated with the object
+     * @return The Record object generated.
+     */
+    private Record generateRecordForSinglePartTransfer(TransferType type,
+            String bucket, String key, File file, ObjectMetadata metadata,
+            CannedAccessControlList cannedAcl) {
+        final Record record = new Record();
+        record.setType(type);
+        record.setState(TransferState.WAITING);
+        record.setBucketName(bucket);
+        record.setKey(key);
+        record.setFile(file.getAbsolutePath());
+        record.setBytesCurrent(0L);
+        if (type.equals(TransferType.UPLOAD)) {
+            record.setBytesTotal(file == null ? 0L : file.length());
+        }
+        record.setIsMultipart(0);
+        record.setPartNumber(0);
+        record.setIsEncrypted(0);
+        setRecordForObjectMetadata(record, metadata);
+        if (cannedAcl != null) {
+            record.setCannedAcl(cannedAcl.toString());
+        }
+        return record;
+    }
+
+    /**
+     * Gets the record.
+     *
+     * @param id The id of the transfer.
+     * @return The record specified by the id.
+     */
+    public Record getRecord(int id) {
+        return Service.getInstance().getRecord(id);
+    }
+
+    /**
+     * Gets the Uri of part records of a multipart upload.
+     *
+     * @param mainUploadId The main upload id of the transfer.
+     * @return The Uri of the part upload records that have the given
+     *         mainUploadId value.
+     */
+    public List<Record> getPartRecord(int mainUploadId) {
+        List<Record> records = new ArrayList<Record>();
+        for (Record r : Service.getInstance().getRecords()) {
+            if (r.getMultipartId().equals(mainUploadId)) {
+                records.add(r);
+            }
+        }
+        return records;
+    }
+
+    /**
+     * Gets the TransferRecord by id.
+     *
+     * @param id transfer id
+     * @return a TransferRecord if exists, null otherwise
+     */
+    TransferRecord getTransferById(int id) {
+        TransferRecord transfer = new TransferRecord();
+        transfer.updateFromDB(getRecord(id));
+        return transfer;
+    }
+
+}
+
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferObserver.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferObserver.java
similarity index 83%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferObserver.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferObserver.java
index 4421282cda..64a006ceb6 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferObserver.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferObserver.java
@@ -15,8 +15,6 @@
 
 package com.amazonaws.mobileconnectors.s3.transferutility;
 
-import android.database.Cursor;
-
 import java.io.File;
 
 /**
@@ -49,7 +47,6 @@
 public class TransferObserver {
 
     private final int id;
-    private final TransferDBUtil dbUtil;
 
     private String bucket;
     private String key;
@@ -71,9 +68,8 @@
      * @param key key of the S3 object
      * @param file a file associated with this transfer
      */
-    TransferObserver(int id, TransferDBUtil dbUtil, String bucket, String key, File file) {
+    TransferObserver(int id, String bucket, String key, File file) {
         this.id = id;
-        this.dbUtil = dbUtil;
         this.bucket = bucket;
         this.key = key;
         filePath = file.getAbsolutePath();
@@ -92,9 +88,9 @@
      * @param file a file associated with this transfer
      * @param listener the listener for the transfer
      */
-    TransferObserver(int id, TransferDBUtil dbUtil, String bucket, String key, File file,
+    TransferObserver(int id, String bucket, String key, File file,
             TransferListener listener) {
-        this(id, dbUtil, bucket, key, file);
+        this(id, bucket, key, file);
         this.setTransferListener(listener);
     }
 
@@ -105,9 +101,8 @@
      * @param id The transfer id of the transfer to be observed.
      * @param dbUtil an instance of database utility
      */
-    TransferObserver(int id, TransferDBUtil dbUtil) {
+    TransferObserver(int id) {
         this.id = id;
-        this.dbUtil = dbUtil;
     }
 
     /**
@@ -115,15 +110,10 @@
      * TransferListener is set, then there's no need to call this method.
      */
     public void refresh() {
-        Cursor c = null;
-        try {
-            c = dbUtil.queryTransferById(id);
-            if (c.moveToFirst()) {
-                updateFromDB(c);
-            }
-        } finally {
-            if (c != null) {
-                c.close();
+        for (Record record : Service.getInstance().getRecords()) {
+            if (record.getId() == id) {
+                updateFromDB(record);
+                break;
             }
         }
     }
@@ -131,17 +121,15 @@ public void refresh() {
     /**
      * Update transfer state from the given cursor.
      *
-     * @param c a cursor to read the state of the transfer from
+     * @param r a record to read the state of the transfer from
      */
-    protected void updateFromDB(Cursor c) {
-        bucket = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_BUCKET_NAME));
-        key = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_KEY));
-        bytesTotal = c.getLong(c.getColumnIndexOrThrow(TransferTable.COLUMN_BYTES_TOTAL));
-        bytesTransferred = c.getLong(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_BYTES_CURRENT));
-        transferState = TransferState.getState(c.getString(c
-                .getColumnIndexOrThrow(TransferTable.COLUMN_STATE)));
-        filePath = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_FILE));
+    protected void updateFromDB(Record r) {
+        bucket = r.getBucketName();
+        key = r.getKey();
+        bytesTotal = r.getBytesTotal();
+        bytesTransferred = r.getBytesCurrent();
+        transferState = r.getState();
+        filePath = r.getFile();
     }
 
     /**
diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
new file mode 100644
index 0000000000..cec3710bbb
--- /dev/null
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
@@ -0,0 +1,211 @@
+/**
+ * Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.mobileconnectors.s3.transferutility;
+
+import com.amazonaws.AmazonClientException;
+import com.amazonaws.mobileconnectors.s3.transferutility.TransferService.NetworkInfoReceiver;
+import com.amazonaws.services.s3.AmazonS3;
+import com.amazonaws.services.s3.model.AbortMultipartUploadRequest;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.io.File;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.logging.Level;
+
+/**
+ * TransferRecord is used to store all the information of a transfer and
+ * start/stop the a thread for the transfer task.
+ */
+@SuppressWarnings("checkstyle:visibilitymodifier")
+class TransferRecord {
+    private static final Log LOGGER = LogFactory.getLog(TransferRecord.class);
+
+    private Record record;
+
+    private Future<?> submittedTask;
+
+    /**
+     * Constructs a TransferRecord and initializes the transfer id and S3
+     * client.
+     *
+     * @param id The id of a transfer.
+     */
+    public TransferRecord() {
+    }
+
+    /**
+     * Updates all the fields from database using the given Cursor.
+     *
+     * @param record A Record pointing to a transfer record.
+     */
+    public void updateFromDB(Record record) {
+        this.record = record;
+    }
+
+    /**
+     * Checks the state of the transfer and starts a thread to run the transfer
+     * task if possible.
+     *
+     * @param s3 s3 instance
+     * @param dbUtil database util
+     * @param updater status updater
+     * @param networkInfo network info
+     * @return Whether the task is running.
+     */
+    public boolean start(AmazonS3 s3, TransferDBUtil dbUtil, TransferStatusUpdater updater,
+            NetworkInfoReceiver networkInfo) {
+        if (!isRunning() && checkIsReadyToRun()) {
+            if (TransferType.DOWNLOAD.equals(record.getType())) {
+                LOGGER.info("Task Download ");
+                submittedTask = TransferThreadPool
+                        .submitTask(new DownloadTask(this, s3, updater, networkInfo));
+            } else {
+                LOGGER.info("Task Upload ");
+                submittedTask = TransferThreadPool
+                        .submitTask(new UploadTask(this, s3, dbUtil, updater, networkInfo));
+            }
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Pauses a running transfer.
+     *
+     * @param s3 s3 instance
+     * @param updater status updater
+     * @return true if the transfer is running and is paused successfully, false
+     *         otherwise
+     */
+    public boolean pause(AmazonS3 s3, TransferStatusUpdater updater) {
+        if (!isFinalState(record.getState()) && !TransferState.PAUSED.equals(record.getState())) {
+            updater.updateState(record.getId(), TransferState.PAUSED);
+            if (isRunning()) {
+                submittedTask.cancel(true);
+            }
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Cancels a running transfer.
+     * 
+     * @param s3 s3 instance
+     * @param updater status updater
+     * @return true if the transfer is running and is canceled successfully,
+     *         false otherwise
+     */
+    public boolean cancel(final AmazonS3 s3, final TransferStatusUpdater updater) {
+        if (!isFinalState(record.getState())) {
+            updater.updateState(record.getId(), TransferState.CANCELED);
+            if (isRunning()) {
+                submittedTask.cancel(true);
+            }
+            // additional cleanups
+            if (record.getIsMultipart() == 1) {
+                new Thread(new Runnable() {
+                    @Override
+                    public void run() {
+                        try {
+                            s3.abortMultipartUpload(new AbortMultipartUploadRequest(record.getBucketName(),
+                                    record.getKey(), record.getMultipartId()));
+                            LOGGER.debug("Successfully clean up multipart upload: " + record.getId());
+                        } catch (final AmazonClientException e) {
+                            LOGGER.debug("Failed to abort multiplart upload: " + record.getId(), e);
+                        }
+                    }
+                }).start();
+            } else if (TransferType.DOWNLOAD.equals(record.getType())) {
+                // remove partially download file
+                new File(record.getFile()).delete();
+            }
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Checks whether the transfer is actively running
+     *
+     * @return true if the transfer is running
+     */
+    boolean isRunning() {
+        return submittedTask != null && !submittedTask.isDone();
+    }
+
+    /**
+     * Wait till transfer finishes.
+     *
+     * @param timeout the maximum time to wait in milliseconds
+     * @throws InterruptedException
+     * @throws ExecutionException
+     * @throws TimeoutException
+     */
+    void waitTillFinish(long timeout) throws InterruptedException, ExecutionException,
+            TimeoutException {
+        if (isRunning()) {
+            submittedTask.get(timeout, TimeUnit.MILLISECONDS);
+        }
+    }
+
+    /**
+     * Determines whether a transfer state is a final state.
+     */
+    @SuppressWarnings("checkstyle:hiddenfield")
+    private boolean isFinalState(TransferState state) {
+        return TransferState.COMPLETED.equals(state)
+                || TransferState.FAILED.equals(state)
+                || TransferState.CANCELED.equals(state);
+    }
+
+    private boolean checkIsReadyToRun() {
+        return record.getPartNumber() == 0 && !TransferState.COMPLETED.equals(record.getState());
+    }
+
+    public Record getRecord() {
+        return record;
+    }
+    
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("[")
+                .append("id:").append(record.getId()).append(",")
+                .append("bucketName:").append(record.getBucketName()).append(",")
+                .append("key:").append(record.getKey()).append(",")
+                .append("file:").append(record.getFile()).append(",")
+                .append("type:").append(record.getType()).append(",")
+                .append("bytesTotal:").append(record.getBytesTotal()).append(",")
+                .append("bytesCurrent:").append(record.getBytesCurrent()).append(",")
+                .append("fileOffset:").append(record.getFileOffset()).append(",")
+                .append("state:").append(record.getState()).append(",")
+                .append("cannedAcl:").append(record.getCannedAcl()).append(",")
+                .append("mainUploadId:").append(record.getMainUploadId()).append(",")
+                .append("isMultipart:").append(record.getIsMultipart()).append(",")
+                .append("isLastPart:").append(record.getIsLastPart()).append(",")
+                .append("partNumber:").append(record.getPartNumber()).append(",")
+                .append("multipartId:").append(record.getMultipartId()).append(",")
+                .append("eTag:").append(record.geteTag())
+                .append("]");
+        return sb.toString();
+    }
+}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
similarity index 67%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 6eeea6aa43..e92fa693dd 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -15,21 +15,6 @@
 
 package com.amazonaws.mobileconnectors.s3.transferutility;
 
-import android.app.Service;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.pm.ApplicationInfo;
-import android.database.Cursor;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.os.IBinder;
-import android.os.Looper;
-import android.os.Message;
-
 import com.amazonaws.services.s3.AmazonS3;
 
 import org.apache.commons.logging.Log;
@@ -47,10 +32,9 @@
  * the upload and download threads and limits the concurrent running threads.
  * When there are no active tasks, TransferService will stop itself.
  */
-public class TransferService extends Service {
+public class TransferService {
 
     private static final Log LOGGER = LogFactory.getLog(TransferService.class);
-    private static final String TAG = TransferService.class.getSimpleName();
 
     /*
      * Constants of message sent to update handler.
@@ -81,13 +65,6 @@
         TransferState.RESUMED_WAITING
     };
     
-    /*
-     * updateHandler manages update requests in a queue. It updates transfers
-     * from database and start/stop threads if needed.
-     */
-    private HandlerThread handlerThread;
-    private Handler updateHandler;
-
     /*
      * registers a BroadcastReceiver to receive network status change events. It
      * will update transfer records in database directly.
@@ -120,7 +97,7 @@
     /**
      * Reference to the transfer database utility.
      */
-    private TransferDBUtil dbUtil;
+    private final TransferDBUtil dbUtil;
     
     /**
      * The status updater that updates the state and the
@@ -129,6 +106,9 @@
      */
     TransferStatusUpdater updater;
     
+    private final UpdateHandler updateHandler;
+
+    
     /**
      * The time interval to wait before checking for the
      * unfinished transfers that are not tracked in memory
@@ -141,11 +121,6 @@
      */
     private long transferServiceCheckTimeInterval;
 
-    @Override
-    public IBinder onBind(Intent intent) {
-        throw new UnsupportedOperationException("Can't bind to TransferService");
-    }
-
     /**
      * <ul>
      * <li>The service starts upon intents from transfer utility.</li>
@@ -154,67 +129,62 @@ public IBinder onBind(Intent intent) {
      * transfers waiting.</li>
      * </ul>
      */
-    @Override
-    public void onCreate() {
-        super.onCreate();
-
+    public TransferService() {
         LOGGER.debug("Starting Transfer Service");
-        dbUtil = new TransferDBUtil(this);
+        dbUtil = new TransferDBUtil();
         updater = new TransferStatusUpdater(dbUtil);
-
-        handlerThread = new HandlerThread(TAG + "-AWSTransferUpdateHandlerThread");
-        handlerThread.start();
-        setHandlerLooper(handlerThread.getLooper());
+        updateHandler = new UpdateHandler();
+        networkInfoReceiver = new NetworkInfoReceiver();
     }
 
     /**
      * A Broadcast receiver to receive network connection change events.
      */
-    static class NetworkInfoReceiver extends BroadcastReceiver {
-        private final Handler handler;
-        private final ConnectivityManager connManager;
-
-        /**
-         * Constructs a NetworkInfoReceiver.
-         *
-         * @param handler a handle to send message to
-         */
-        public NetworkInfoReceiver(Context context, Handler handler) {
-            this.handler = handler;
-            connManager = (ConnectivityManager) context
-                    .getSystemService(Context.CONNECTIVITY_SERVICE);
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
-                final boolean networkConnected = isNetworkConnected();
-                LOGGER.debug("Network connected: " + networkConnected);
-                handler.sendEmptyMessage(networkConnected ? MSG_CONNECT : MSG_DISCONNECT);
-            }
-        }
-
-        /**
-         * Gets the status of network connectivity.
-         *
-         * @return true if network is connected, false otherwise.
-         */
+    static class NetworkInfoReceiver /*extends BroadcastReceiver */{
+//        private final Handler handler;
+//        private final ConnectivityManager connManager;
+//
+//        /**
+//         * Constructs a NetworkInfoReceiver.
+//         *
+//         * @param handler a handle to send message to
+//         */
+//        public NetworkInfoReceiver(Context context, Handler handler) {
+//            this.handler = handler;
+//            connManager = (ConnectivityManager) context
+//                    .getSystemService(Context.CONNECTIVITY_SERVICE);
+//        }
+//
+//        @Override
+//        public void onReceive(Context context, Intent intent) {
+//            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
+//                final boolean networkConnected = isNetworkConnected();
+//                LOGGER.debug("Network connected: " + networkConnected);
+//                handler.sendEmptyMessage(networkConnected ? MSG_CONNECT : MSG_DISCONNECT);
+//            }
+//        }
+//
+//        /**
+//         * Gets the status of network connectivity.
+//         *
+//         * @return true if network is connected, false otherwise.
+//         */
         boolean isNetworkConnected() {
-            final NetworkInfo info = connManager.getActiveNetworkInfo();
-            return info != null && info.isConnected();
+            // TODO: Add ConnectivityService
+            return true;
+//            final NetworkInfo info = connManager.getActiveNetworkInfo();
+//            return info != null && info.isConnected();
         }
     }
 
-    @Override
-    @SuppressWarnings("checkstyle:hiddenfield")
-    public int onStartCommand(Intent intent, int flags, int startId) {
+    public int onStartCommand(String action, Integer id, TransferUtilityOptions options, int flags, int startId) {
         this.startId = startId;
 
         if (isReceiverNotRegistered) {
             try {
                 LOGGER.info("registering receiver");
-                this.registerReceiver(this.networkInfoReceiver,
-                    new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
+//                this.registerReceiver(this.networkInfoReceiver,
+//                    new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
             } catch (final IllegalArgumentException iae) {
                 LOGGER.warn("Ignoring the exception trying to register the receiver for connectivity change.");
             } catch (final IllegalStateException ise) {
@@ -224,44 +194,37 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             }
         }
 
-        if (intent == null) {
-            return START_REDELIVER_INTENT;
-        }
-
-        final Integer id = intent.getIntExtra(INTENT_BUNDLE_TRANSFER_ID, -1);
         if (id < 0) {
             LOGGER.error("The intent sent by the TransferUtility doesn't have the id.");
-            return START_NOT_STICKY;
+            return -1;
         }
         
         final AmazonS3 s3 = S3ClientReference.get(id);
         if (s3 == null) {
             LOGGER.error("TransferService can't get s3 client and not acting on the id.");
-            return START_NOT_STICKY;
+            return -1;
         }
 
-        final TransferUtilityOptions tuOptions = (TransferUtilityOptions) 
-            intent.getSerializableExtra(INTENT_BUNDLE_TRANSFER_UTILITY_OPTIONS);
+        final TransferUtilityOptions tuOptions = options;
         
         TransferThreadPool.init(tuOptions.getTransferThreadPoolSize());
         transferServiceCheckTimeInterval = tuOptions.getTransferServiceCheckTimeInterval();
         LOGGER.debug("ThreadPoolSize: " + tuOptions.getTransferThreadPoolSize()
             + " transferServiceCheckTimeInterval: " + tuOptions.getTransferServiceCheckTimeInterval());
 
-        updateHandler.sendMessage(updateHandler.obtainMessage(MSG_EXEC, intent));
+        updateHandler.handleMessage(MSG_EXEC, action, id);
         
         /*
          * The service will not restart if it's killed by system.
          */
-        return START_NOT_STICKY;
+        return -1;
     }
 
-    @Override
     public void onDestroy() {
         try {
             if (networkInfoReceiver != null) {
                 LOGGER.info("unregistering receiver");
-                this.unregisterReceiver(this.networkInfoReceiver);
+//                this.unregisterReceiver(this.networkInfoReceiver);
                 isReceiverNotRegistered = true;
             }
         } catch (final IllegalArgumentException iae) {
@@ -273,38 +236,37 @@ public void onDestroy() {
         }
 
         pauseAll();
-        handlerThread.quit();
         TransferThreadPool.closeThreadPool();
         S3ClientReference.clear();
 
         LOGGER.info("Closing the database.");
-        dbUtil.closeDB();
-        super.onDestroy();
     }
 
-    class UpdateHandler extends Handler {
-        public UpdateHandler(Looper looper) {
-            super(looper);
-        }
-
-        @Override
-        public void handleMessage(Message msg) {
-            if (msg.what == MSG_CHECK) {
-                // remove messages of the same type
-                updateHandler.removeMessages(MSG_CHECK);
-                checkTransfers();
-            } else if (msg.what == MSG_EXEC) {
-                execCommand((Intent) msg.obj);
-            } else if (msg.what == MSG_DISCONNECT) {
-                pauseAllForNetwork();
-            } else if (msg.what == MSG_CONNECT) {
-                checkTransfersOnNetworkReconnect();
-            } else {
-                LOGGER.error("Unknown command: " + msg.what);
+    class UpdateHandler {
+
+        public void handleMessage(int msgWhat, String intentAction, Integer id) {
+            LOGGER.info("Mesage " + msgWhat + ", action: " + intentAction + ", id: " + id);
+            switch (msgWhat) {
+                case MSG_CHECK:
+                    // remove messages of the same type
+                    checkTransfers();
+                    break;
+                case MSG_EXEC:
+                    execCommand(intentAction, id);
+                    break;
+                case MSG_DISCONNECT:
+                    pauseAllForNetwork();
+                    break;
+                case MSG_CONNECT:
+                    checkTransfersOnNetworkReconnect();
+                    break;
+                default:
+                    LOGGER.error("Unknown command: " + msgWhat);
+                    break;
             }
         }
     }
-
+//
     /**
      * Checks two things: whether they are active transfers and whether a
      * database scan is necessary.
@@ -321,14 +283,13 @@ void checkTransfers() {
             lastActiveTime = System.currentTimeMillis();
             
             // check after transferServiceCheckTimeInterval milliseconds.
-            updateHandler.sendEmptyMessageDelayed(MSG_CHECK, transferServiceCheckTimeInterval);
+//            updateHandler.sendEmptyMessageDelayed(MSG_CHECK, transferServiceCheckTimeInterval);
         } else {
             /*
              * Stop the service when it's been idled for more than the time interval supplied
              * through {@link TransferUtilityConfiguration}. The default is 1-minute.
              */
             LOGGER.debug("Stop self");
-            stopSelf(startId);
         }
     }
 
@@ -349,18 +310,13 @@ void checkTransfersOnNetworkReconnect() {
      *
      * @param intent received intent
      */
-    void execCommand(Intent intent) {
+    void execCommand(String intentAction, Integer id) {
         // update last active time
         lastActiveTime = System.currentTimeMillis();
 
-        final String action = intent.getAction();
-        final Integer id = intent.getIntExtra(INTENT_BUNDLE_TRANSFER_ID, 0);
+        final String action = intentAction;
         final AmazonS3 s3 = S3ClientReference.get(id);
 
-        if (!TransferDBUtil.getTransferDBBase().getDatabase().isOpen()) {
-            LOGGER.debug("Database is not open. Opening the database before proceeding.");
-            this.dbUtil = new TransferDBUtil(this);
-        }
 
         if (INTENT_ACTION_TRANSFER_ADD.equals(action)) {
             if (updater.getTransfer(id) != null) {
@@ -444,33 +400,23 @@ private boolean isActive() {
      */
     void loadAndResumeTransfersFromDB(final TransferState[] transferStates) {
         LOGGER.debug("Loading transfers from database...");
-        Cursor c = null;
         int count = 0;
 
         // Read the transfer ids from the cursor and store in this list.
         List<Integer> transferIds = new ArrayList<Integer>();
 
         // Query for the unfinished transfers and store them in a list
-        try {
-            c = dbUtil.queryTransfersWithTypeAndStates(TransferType.ANY,
-                                                       transferStates);
-            while (c.moveToNext()) {
-                final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-                // If the transfer status updater doesn't track it, load the transfer record
-                // from the database and add it to the updater to track
-                if (updater.getTransfer(id) == null) {
-                    final TransferRecord transfer = new TransferRecord(id);
-                    transfer.updateFromDB(c);
-                    updater.addTransfer(transfer);
-                    count++;
-                }
-                transferIds.add(id);
-            }
-        } finally {
-            if (c != null) {
-                LOGGER.debug("Closing the cursor for loadAndResumeTransfersFromDB");
-                c.close();
+        for (Record record : Service.getInstance().getRecords()) {
+            final int id = record.getId();
+            // If the transfer status updater doesn't track it, load the transfer record
+            // from the database and add it to the updater to track
+            if (updater.getTransfer(id) == null) {
+                final TransferRecord transfer = new TransferRecord();
+                transfer.updateFromDB(record);
+                updater.addTransfer(transfer);
+                count++;
             }
+            transferIds.add(id);
         }
 
         // Iterate over each transfer id and resume them if it's not running.
@@ -491,48 +437,34 @@ void loadAndResumeTransfersFromDB(final TransferState[] transferStates) {
 
         LOGGER.debug(count + " transfers are loaded from database.");
     }
-    
+
     /**
      * Pause all running transfers and set the state to WAITING_FOR_NETWORK.
      */
     void pauseAll() {
         for (final TransferRecord transferRecord : updater.getTransfers().values()) {
-            final AmazonS3 s3 = S3ClientReference.get(transferRecord.id);
-            if (s3 != null && transferRecord != null) {
+            final AmazonS3 s3 = S3ClientReference.get(transferRecord.getRecord().getId());
+            if (s3 != null) {
                 transferRecord.pause(s3, updater);
             }
         }
     }
-    
+
     /**
      * Pause all running transfers and set the state to WAITING_FOR_NETWORK.
      */
     void pauseAllForNetwork() {
         for (final TransferRecord transferRecord : updater.getTransfers().values()) {
-            final AmazonS3 s3 = S3ClientReference.get(transferRecord.id);
-            if (s3 != null && transferRecord != null && transferRecord.pause(s3, updater)) {
-                updater.updateState(transferRecord.id, TransferState.WAITING_FOR_NETWORK);
+            final AmazonS3 s3 = S3ClientReference.get(transferRecord.getRecord().getId());
+            if (s3 != null && transferRecord.pause(s3, updater)) {
+                updater.updateState(transferRecord.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
             }
         }
         shouldScan = true;
     }
-
-    /**
-     * A helper method to swap a different looper for testing purpose.
-     *
-     * @param looper new looper
-     */
-    void setHandlerLooper(Looper looper) {
-        updateHandler = new UpdateHandler(looper);
-        networkInfoReceiver = new NetworkInfoReceiver(getApplicationContext(), updateHandler);
-    }
-
-    @Override
+    
     protected void dump(FileDescriptor fd, PrintWriter writer, String[] args) {
         // only available when the application is debuggable
-        if ((getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) == 0) {
-            return;
-        }
 
         writer.printf("start id: %d\n", startId);
         writer.printf("network status: %s\n", networkInfoReceiver.isNetworkConnected());
@@ -540,9 +472,10 @@ protected void dump(FileDescriptor fd, PrintWriter writer, String[] args) {
         final Map<Integer, TransferRecord> transfers = updater.getTransfers();
         writer.printf("# of active transfers: %d\n", transfers.size());
         for (final TransferRecord transfer : transfers.values()) {
+            Record r = transfer.getRecord();
             writer.printf("bucket: %s, key: %s, status: %s, total size: %d, current: %d\n",
-                    transfer.bucketName, transfer.key, transfer.state, transfer.bytesTotal,
-                    transfer.bytesCurrent);
+                    r.getBucketName(), r.getKey(), r.getState(), r.getBytesTotal(),
+                    r.getBytesCurrent());
         }
         writer.flush();
     }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferState.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferState.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferState.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferState.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
similarity index 90%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
index d8983516b1..5d39a7eaf7 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
@@ -15,9 +15,6 @@
 
 package com.amazonaws.mobileconnectors.s3.transferutility;
 
-import android.os.Handler;
-import android.os.Looper;
-
 import com.amazonaws.event.ProgressEvent;
 import com.amazonaws.event.ProgressListener;
 
@@ -31,6 +28,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
+import javafx.application.Platform;
 
 /**
  * A class that tracks active transfers. It has a static map that holds weak
@@ -69,17 +67,11 @@
      * Database util to update transfer status.
      */
     private final TransferDBUtil dbUtil;
-    /**
-     * The handler of main thread that runs callbacks.
-     */
-    private final Handler mainHandler;
-
     /**
      * This class is instantiated by TransferService.
      */
     TransferStatusUpdater(TransferDBUtil dbUtil) {
         this.dbUtil = dbUtil;
-        mainHandler = new Handler(Looper.getMainLooper());
         transfers = new HashMap<Integer, TransferRecord>();
         lastUpdateTime = new HashMap<Integer, Long>();
     }
@@ -99,7 +91,7 @@
      * @param transfer a transfer object
      */
     void addTransfer(TransferRecord transfer) {
-        transfers.put(transfer.id, transfer);
+        transfers.put(transfer.getRecord().getId(), transfer);
     }
 
     /**
@@ -154,16 +146,12 @@ void updateState(final int id, final TransferState newState) {
         final TransferRecord transfer = transfers.get(id);
         if (transfer == null) {
             // still wants to save state
-            if (dbUtil.updateState(id, newState) == 0) {
-                LOGGER.warn("Failed to update the status of transfer " + id);
-            }
+            dbUtil.updateState(id, newState);
         } else {
-            shouldNotNotify |= newState.equals(transfer.state);
-            transfer.state = newState;
+            shouldNotNotify |= newState.equals(transfer.getRecord().getState());
+            transfer.getRecord().setState(newState);
             // save to database
-            if (dbUtil.updateTransferRecord(transfer) == 0) {
-                LOGGER.warn("Failed to update the status of transfer " + id);
-            }
+            dbUtil.updateTransferRecord(transfer);
         }
 
         if (shouldNotNotify) {
@@ -180,7 +168,7 @@ void updateState(final int id, final TransferState newState) {
         }
 
         // invoke on main thread
-        mainHandler.post(new Runnable() {
+        Platform.runLater(new Runnable() {
             @Override
             public void run() {
                 for (final TransferListener l : list) {
@@ -213,8 +201,8 @@ public void run() {
     void updateProgress(final int id, final long bytesCurrent, final long bytesTotal) {
         final TransferRecord transfer = transfers.get(id);
         if (transfer != null) {
-            transfer.bytesCurrent = bytesCurrent;
-            transfer.bytesTotal = bytesTotal;
+            transfer.getRecord().setBytesCurrent(bytesCurrent);
+            transfer.getRecord().setBytesTotal(bytesTotal);
         }
 
         // Don't fire off the update too frequently, but still fire when it
@@ -238,7 +226,7 @@ void updateProgress(final int id, final long bytesCurrent, final long bytesTotal
             lastUpdateTime.put(id, timeInMillis);
 
             // invoke on main thread
-            mainHandler.post(new Runnable() {
+            Platform.runLater(new Runnable() {
                 @Override
                 public void run() {
                     for (final TransferListener l : list) {
@@ -263,7 +251,7 @@ void throwError(final int id, final Exception e) {
             return;
         }
         // invoke on main thread
-        mainHandler.post(new Runnable() {
+        Platform.runLater(new Runnable() {
             @Override
             public void run() {
                 for (final TransferListener l : list) {
@@ -346,13 +334,13 @@ public synchronized void progressChanged(ProgressEvent progressEvent) {
             if (progressEvent.getEventCode() == ProgressEvent.RESET_EVENT_CODE) {
                 // Reset will discard what's been transferred, so subtract the
                 // bytes transferred in this task from the total progress.
-                transfer.bytesCurrent -= bytesCurrent;
+                transfer.getRecord().setBytesCurrent(transfer.getRecord().getBytesCurrent() - bytesCurrent);
                 bytesCurrent = 0;
             } else {
                 bytesCurrent += progressEvent.getBytesTransferred();
-                transfer.bytesCurrent += progressEvent.getBytesTransferred();
+                transfer.getRecord().setBytesCurrent(transfer.getRecord().getBytesCurrent() + progressEvent.getBytesTransferred());
             }
-            updateProgress(transfer.id, transfer.bytesCurrent, transfer.bytesTotal);
+            updateProgress(transfer.getRecord().getId(), transfer.getRecord().getBytesCurrent(), transfer.getRecord().getBytesTotal());
         }
     }
 
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferType.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferType.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferType.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferType.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
similarity index 85%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
index fde4e308fa..6030886a1f 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
@@ -18,11 +18,6 @@
 import static com.amazonaws.services.s3.internal.Constants.MAXIMUM_UPLOAD_PARTS;
 import static com.amazonaws.services.s3.internal.Constants.MB;
 
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.Intent;
-import android.database.Cursor;
-import android.net.Uri;
 import org.json.JSONObject;
 
 import com.amazonaws.AmazonWebServiceRequest;
@@ -33,12 +28,11 @@
 import com.amazonaws.services.s3.model.ObjectMetadata;
 import com.amazonaws.util.VersionInfoUtils;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * The transfer utility is a high-level class for applications to upload and
@@ -100,7 +94,7 @@
  */
 public class TransferUtility {
 
-    private static final Log LOGGER = LogFactory.getLog(TransferUtility.class);
+    private static final Logger LOGGER = Logger.getLogger(TransferUtility.class.getName());
 
     /**
      * Default minimum part size for upload parts. Anything below this will use
@@ -125,7 +119,6 @@ private static String getUserAgentFromConfig() {
     }
 
     private final AmazonS3 s3;
-    private final Context appContext;
     private final TransferDBUtil dbUtil;
     private final String defaultBucket;
     private final TransferUtilityOptions transferUtilityOptions;
@@ -135,7 +128,6 @@ private static String getUserAgentFromConfig() {
      */
     public static class Builder {
         private AmazonS3 s3;
-        private Context appContext;
         private String defaultBucket;
         private AWSConfiguration awsConfig;
         private TransferUtilityOptions transferUtilityOptions;
@@ -153,17 +145,6 @@ public Builder s3Client(final AmazonS3 s3Client) {
             return this;
         }
         
-        /**
-         * Sets the context used.
-         * 
-         * @param applicationContext The application context.
-         * @return builder
-         */
-        public Builder context(final Context applicationContext) {
-            this.appContext = applicationContext.getApplicationContext();
-            return this;
-        }
-        
         /**
          * Sets the default bucket used for uploads and downloads.
          * This allows you to use the corresponding methods that do not require the bucket name to be specified.
@@ -233,8 +214,6 @@ public Builder transferUtilityOptions(final TransferUtilityOptions tuOptions) {
         public TransferUtility build() {
             if (this.s3 == null) {
                 throw new IllegalArgumentException("AmazonS3 client is required please set using .s3Client(yourClient)");
-            } else if (this.appContext == null) {
-                throw new IllegalArgumentException("Context is required please set using .context(applicationContext)");
             }
             
             if (this.awsConfig != null) {
@@ -255,7 +234,6 @@ public TransferUtility build() {
             }
             
             return new TransferUtility(this.s3,
-                                    this.appContext,
                                     this.defaultBucket,
                                     this.transferUtilityOptions);
         }
@@ -275,17 +253,14 @@ public static Builder builder() {
      * Constructor.
      * 
      * @param s3 The client to use when making requests to Amazon S3
-     * @param context The current context
      * @param defaultBucket The name of the default S3 bucket
      * @param tuOptions The TransferUtility Options object
      */
     private TransferUtility(AmazonS3 s3,
-                            Context context,
                             String defaultBucket,
                             TransferUtilityOptions tuOptions) {
         this.s3 = s3;
-        this.appContext = context.getApplicationContext();
-        this.dbUtil = new TransferDBUtil(appContext);
+        this.dbUtil = new TransferDBUtil();
         this.defaultBucket = defaultBucket;
         this.transferUtilityOptions = tuOptions;
     }
@@ -296,15 +271,13 @@ private TransferUtility(AmazonS3 s3,
      * reference.
      *
      * @param s3 The client to use when making requests to Amazon S3
-     * @param context The current context
      * 
      * @deprecated Please use TransferUtility.builder().s3Client(s3).context(context).build()
      */
     @Deprecated
-    public TransferUtility(AmazonS3 s3, Context context) {
+    public TransferUtility(AmazonS3 s3) {
         this.s3 = s3;
-        this.appContext = context.getApplicationContext();
-        this.dbUtil = new TransferDBUtil(appContext);
+        this.dbUtil = new TransferDBUtil();
         this.defaultBucket = null;
         this.transferUtilityOptions = new TransferUtilityOptions();
     }
@@ -365,16 +338,14 @@ public TransferObserver download(String bucket, String key, File file,
         if (file == null || file.isDirectory()) {
             throw new IllegalArgumentException("Invalid file: " + file);
         }
-        final Uri uri = dbUtil.insertSingleTransferRecord(TransferType.DOWNLOAD,
-                bucket, key, file);
-        final int recordId = Integer.parseInt(uri.getLastPathSegment());
+        final int recordId = dbUtil.insertSingleTransferRecord(TransferType.DOWNLOAD, bucket, key, file);
         if (file.isFile()) {
-            LOGGER.warn("Overwrite existing file: " + file);
+            LOGGER.log(Level.WARNING, "Overwrite existing file: " + file);
             file.delete();
         }
 
         sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId);
-        return new TransferObserver(recordId, dbUtil, bucket, key, file, listener);
+        return new TransferObserver(recordId, bucket, key, file, listener);
     }
 
     /**
@@ -536,13 +507,12 @@ public TransferObserver upload(String bucket, String key, File file, ObjectMetad
             recordId = createMultipartUploadRecords(bucket, key, file, metadata, cannedAcl);
         } else {
 
-            final Uri uri = dbUtil.insertSingleTransferRecord(TransferType.UPLOAD,
+            recordId = dbUtil.insertSingleTransferRecord(TransferType.UPLOAD,
                     bucket, key, file, metadata, cannedAcl);
-            recordId = Integer.parseInt(uri.getLastPathSegment());
         }
 
         sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId);
-        return new TransferObserver(recordId, dbUtil, bucket, key, file, listener);
+        return new TransferObserver(recordId, bucket, key, file, listener);
     }
 
     /**
@@ -570,20 +540,13 @@ public TransferObserver upload(String key, File file, ObjectMetadata metadata,
      * @return The TransferObserver instance which is observing the record.
      */
     public TransferObserver getTransferById(int id) {
-        Cursor c = null;
-        try {
-            c = dbUtil.queryTransferById(id);
-            if (c.moveToNext()) {
-                final TransferObserver to = new TransferObserver(id, dbUtil);
-                to.updateFromDB(c);
+        for (Record r : Service.getInstance().getRecords()) {
+            if (r.getId() == id) {
+                final TransferObserver to = new TransferObserver(id);
+                to.updateFromDB(r);
                 return to;
             }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
         }
-
         return null;
     }
 
@@ -596,20 +559,14 @@ public TransferObserver getTransferById(int id) {
      */
     public List<TransferObserver> getTransfersWithType(TransferType type) {
         final List<TransferObserver> transferObservers = new ArrayList<TransferObserver>();
-        Cursor c = null;
-        try {
-            c = dbUtil.queryAllTransfersWithType(type);
-            while (c.moveToNext()) {
-                final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-                final TransferObserver to = new TransferObserver(id, dbUtil);
-                to.updateFromDB(c);
+        for (Record record : Service.getInstance().getRecords()) {
+            if (record.getType().equals(type)) {
+                final TransferObserver to = new TransferObserver(record.getId());
+                to.updateFromDB(record);
                 transferObservers.add(to);
             }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
         }
+        
         return transferObservers;
     }
 
@@ -641,23 +598,17 @@ public TransferObserver getTransferById(int id) {
     public List<TransferObserver> getTransfersWithTypeAndStates(TransferType type,
                                                                 TransferState[] states) {
         final List<TransferObserver> transferObservers = new ArrayList<TransferObserver>();
-        Cursor c = null;
-        try {
-            c = dbUtil.queryTransfersWithTypeAndStates(type, states);
-            while (c.moveToNext()) {
-                final int partNum = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_PART_NUM));
-                if (partNum != 0) {
+        for (Record record : Service.getInstance().getRecords()) {
                     // skip parts of a multipart upload
-                    continue;
-                }
-                final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-                final TransferObserver to = new TransferObserver(id, dbUtil);
-                to.updateFromDB(c);
+            if (record.getType().equals(type) && ! record.getMultipartId().equals("0")) {
+                for (TransferState state : states) {
+                    if (record.getState().equals(state)) {
+                        final TransferObserver to = new TransferObserver(record.getId());
+                        to.updateFromDB(record);
                 transferObservers.add(to);
-            }
-        } finally {
-            if (c != null) {
-                c.close();
+                        break;
+                    }
+                }
             }
         }
         return transferObservers;
@@ -674,21 +625,17 @@ public TransferObserver getTransferById(int id) {
     private List<Integer> getTransferIdsWithTypeAndStates(TransferType type,
                                                           TransferState[] states) {
         List<Integer> transferIds = new ArrayList<Integer>();
-        Cursor c = null;
-        try {
-            c = dbUtil.queryTransfersWithTypeAndStates(type, states);
-            while (c.moveToNext()) {
-                final int partNum = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_PART_NUM));
-                if (partNum != 0) {
+        for (Record record : Service.getInstance().getRecords()) {
                     // skip parts of a multipart upload
-                    continue;
+            if (record.getType().equals(type) && ! record.getMultipartId().equals("0")) {
+                for (TransferState state : states) {
+                    if (record.getState().equals(state)) {
+                        final TransferObserver to = new TransferObserver(record.getId());
+                        to.updateFromDB(record);
+                        transferIds.add(to.getId());
+                        break;
+                    }
                 }
-                final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-                transferIds.add(id);
-            }
-        } finally {
-            if (c != null) {
-                c.close();
             }
         }
         return transferIds;
@@ -720,12 +667,12 @@ private int createMultipartUploadRecords(String bucket, String key, File file,
          * the size of valuesArray is partCount + 1, one for a multipart upload
          * summary, others are actual parts to be uploaded
          */
-        final ContentValues[] valuesArray = new ContentValues[partCount + 1];
-        valuesArray[0] = dbUtil.generateContentValuesForMultiPartUpload(bucket, key,
+        final Record[] valuesArray = new Record[partCount + 1];
+        valuesArray[0] = dbUtil.generateRecordForMultiPartUpload(bucket, key,
                 file, fileOffset, 0, "", file.length(), 0, metadata, cannedAcl);
         for (int i = 1; i < partCount + 1; i++) {
             final long bytesForPart = Math.min(optimalPartSize, remainingLenth);
-            valuesArray[i] = dbUtil.generateContentValuesForMultiPartUpload(bucket, key,
+            valuesArray[i] = dbUtil.generateRecordForMultiPartUpload(bucket, key,
                     file, fileOffset, partNumber, "", bytesForPart, remainingLenth
                             - optimalPartSize <= 0 ? 1 : 0,
                     metadata, cannedAcl);
@@ -753,16 +700,9 @@ public boolean pause(int id) {
      * @param type The type of transfers
      */
     public void pauseAllWithType(TransferType type) {
-        Cursor c = null;
-        try {
-            c = dbUtil.queryAllTransfersWithType(type);
-            while (c.moveToNext()) {
-                final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-                pause(id);
-            }
-        } finally {
-            if (c != null) {
-                c.close();
+        for (Record record : Service.getInstance().getRecords()) {
+            if (record.getType().equals(type)) {
+                pause(record.getId());
             }
         }
     }
@@ -830,16 +770,9 @@ public boolean cancel(int id) {
      * @param type The type of transfers
      */
     public void cancelAllWithType(TransferType type) {
-        Cursor c = null;
-        try {
-            c = dbUtil.queryAllTransfersWithType(type);
-            while (c.moveToNext()) {
-                final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-                cancel(id);
-            }
-        } finally {
-            if (c != null) {
-                c.close();
+        for (Record record : Service.getInstance().getRecords()) {
+            if (record.getType().equals(type)) {
+                cancel(record.getId());
             }
         }
     }
@@ -865,12 +798,9 @@ public boolean deleteTransferRecord(int id) {
      */
     private synchronized void sendIntent(String action, int id) {
         S3ClientReference.put(id, s3);
-        final Intent intent = new Intent(appContext, TransferService.class);
-        intent.setAction(action);
-        intent.putExtra(TransferService.INTENT_BUNDLE_TRANSFER_ID, id);
-        intent.putExtra(TransferService.INTENT_BUNDLE_TRANSFER_UTILITY_OPTIONS,
-                        this.transferUtilityOptions);
-        appContext.startService(intent);
+        TransferService service = new TransferService();
+        LOGGER.log(Level.INFO, "Sending action intent: " + action + " for id " + id);
+        service.onStartCommand(action, id, transferUtilityOptions, id, id);
     }
 
     private boolean shouldUploadInMultipart(File file) {
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtilityOptions.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtilityOptions.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtilityOptions.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtilityOptions.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadPartTask.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadPartTask.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadPartTask.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadPartTask.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
similarity index 66%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index 12b4acd3e4..e7af2b8370 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -68,12 +68,16 @@ public UploadTask(TransferRecord uploadInfo, AmazonS3 s3, TransferDBUtil dbUtil,
      */
     @Override
     public Boolean call() throws Exception {
+        LOGGER.info("CALL Upload Task " + networkInfo.isNetworkConnected());
         if (!networkInfo.isNetworkConnected()) {
-            updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
+            updater.updateState(upload.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
+            LOGGER.info("Upload Task not connected - false");
             return false;
         }
-        updater.updateState(upload.id, TransferState.IN_PROGRESS);
-        if (upload.isMultipart == 1 && upload.partNumber == 0) {
+        LOGGER.info("Upload Task state progress");
+        updater.updateState(upload.getRecord().getId(), TransferState.IN_PROGRESS);
+        LOGGER.info("Upload Task - multipart " + upload.getRecord().getIsMultipart());
+        if (upload.getRecord().getIsMultipart() == 1 && upload.getRecord().getPartNumber() == 0) {
             /*
              * If part number = 0, this multipart upload record is not a real
              * part upload task, it's a summary for all the parts with part
@@ -81,7 +85,7 @@ public Boolean call() throws Exception {
              * upload parts.
              */
             return uploadMultipartAndWaitForCompletion();
-        } else if (upload.isMultipart == 0) {
+        } else if (upload.getRecord().getIsMultipart() == 0) {
             /*
              * uploads in one Chunk, doesn't support pause and resume.
              */
@@ -96,39 +100,39 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
          * it's a resumed upload, upload.mMultipartId would not be null.
          */
         long bytesAlreadyTransferrd = 0;
-        if (upload.multipartId == null || upload.multipartId.isEmpty()) {
+        if (upload.getRecord().getMultipartId() == null || upload.getRecord().getMultipartId().isEmpty()) {
             final PutObjectRequest putObjectRequest = createPutObjectRequest(upload);
             TransferUtility.appendMultipartTransferServiceUserAgentString(putObjectRequest);
             try {
-                upload.multipartId = initiateMultipartUpload(putObjectRequest);
+                upload.getRecord().setMultipartId(initiateMultipartUpload(putObjectRequest));
             } catch (final AmazonClientException ace) {
-                LOGGER.error("Error initiating multipart upload: " + upload.id
+                LOGGER.error("Error initiating multipart upload: " + upload.getRecord().getId()
                         + " due to " + ace.getMessage(), ace);
-                updater.throwError(upload.id, ace);
-                updater.updateState(upload.id, TransferState.FAILED);
+                updater.throwError(upload.getRecord().getId(), ace);
+                updater.updateState(upload.getRecord().getId(), TransferState.FAILED);
                 return false;
             }
-            dbUtil.updateMultipartId(upload.id, upload.multipartId);
+            dbUtil.updateMultipartId(upload.getRecord().getId(), upload.getRecord().getMultipartId());
         } else {
             /*
              * For a resumed upload, we should calculate the bytes already
              * transferred.
              */
-            bytesAlreadyTransferrd = dbUtil.queryBytesTransferredByMainUploadId(upload.id);
+            bytesAlreadyTransferrd = dbUtil.queryBytesTransferredByMainUploadId(upload.getRecord().getId());
             if (bytesAlreadyTransferrd > 0) {
                 LOGGER.debug(String.format("Resume transfer %d from %d bytes",
-                        upload.id, bytesAlreadyTransferrd));
+                        upload.getRecord().getId(), bytesAlreadyTransferrd));
             }
         }
-        updater.updateProgress(upload.id, bytesAlreadyTransferrd, upload.bytesTotal);
+        updater.updateProgress(upload.getRecord().getId(), bytesAlreadyTransferrd, upload.getRecord().getBytesTotal());
 
-        final List<UploadPartRequest> requestList = dbUtil.getNonCompletedPartRequestsFromDB(upload.id,
-                upload.multipartId);
-        LOGGER.debug("multipart upload " + upload.id + " in " + requestList.size() + " parts.");
+        final List<UploadPartRequest> requestList = dbUtil.getNonCompletedPartRequestsFromDB(upload.getRecord().getId(),
+                upload.getRecord().getMultipartId());
+        LOGGER.debug("multipart upload " + upload.getRecord().getId() + " in " + requestList.size() + " parts.");
         final ArrayList<Future<Boolean>> futures = new ArrayList<Future<Boolean>>();
         for (final UploadPartRequest request : requestList) {
             TransferUtility.appendMultipartTransferServiceUserAgentString(request);
-            request.setGeneralProgressListener(updater.newProgressListener(upload.id));
+            request.setGeneralProgressListener(updater.newProgressListener(upload.getRecord().getId()));
             futures.add(TransferThreadPool.submitTask(new UploadPartTask(request, s3, dbUtil, networkInfo)));
         }
         try {
@@ -155,17 +159,17 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                 f.cancel(true);
             }
             // abort by user
-            LOGGER.debug("Transfer " + upload.id + " is interrupted by user");
+            LOGGER.debug("Transfer " + upload.getRecord().getId() + " is interrupted by user");
             return false;
         } catch (final ExecutionException ee) {
             // handle pause, cancel, etc
             boolean isNetworkInterrupted = false;
             if (ee.getCause() != null && ee.getCause() instanceof Exception) {
                 // check for network interruption and pause the transfer instead of failing them
-                isNetworkInterrupted = dbUtil.checkWaitingForNetworkPartRequestsFromDB(upload.id);
+                isNetworkInterrupted = dbUtil.checkWaitingForNetworkPartRequestsFromDB(upload.getRecord().getId());
                 if (isNetworkInterrupted) {
-                    LOGGER.debug("Network Connection Interrupted: Transfer " + upload.id + " waits for network");
-                    updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
+                    LOGGER.debug("Network Connection Interrupted: Transfer " + upload.getRecord().getId() + " waits for network");
+                    updater.updateState(upload.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
                     return false;
                 }
                 final Exception e = (Exception) ee.getCause();
@@ -174,46 +178,48 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                      * thread is interrupted by user. don't update the state as
                      * it's set by caller who interrupted
                      */
-                    LOGGER.debug("Transfer " + upload.id + " is interrupted by user");
+                    LOGGER.debug("Transfer " + upload.getRecord().getId() + " is interrupted by user");
                     return false;
                 } else if (e.getCause() != null && e.getCause() instanceof IOException
                         && !networkInfo.isNetworkConnected()) {
-                    LOGGER.debug("Transfer " + upload.id + " waits for network");
-                    updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
+                    LOGGER.debug("Transfer " + upload.getRecord().getId() + " waits for network");
+                    updater.updateState(upload.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
                 }
-                updater.throwError(upload.id, e);
+                updater.throwError(upload.getRecord().getId(), e);
             }
-            updater.updateState(upload.id, TransferState.FAILED);
+            updater.updateState(upload.getRecord().getId(), TransferState.FAILED);
             return false;
         }
 
         try {
-            completeMultiPartUpload(upload.id, upload.bucketName, upload.key,
-                    upload.multipartId);
-            updater.updateProgress(upload.id, upload.bytesTotal, upload.bytesTotal);
-            updater.updateState(upload.id, TransferState.COMPLETED);
+            completeMultiPartUpload(upload.getRecord().getId(), upload.getRecord().getBucketName(), upload.getRecord().getKey(),
+                    upload.getRecord().getMultipartId());
+            updater.updateProgress(upload.getRecord().getId(), upload.getRecord().getBytesTotal(), upload.getRecord().getBytesTotal());
+            updater.updateState(upload.getRecord().getId(), TransferState.COMPLETED);
             return true;
         } catch (final AmazonClientException ace) {
-            LOGGER.error("Failed to complete multipart: " + upload.id
+            LOGGER.error("Failed to complete multipart: " + upload.getRecord().getId()
                     + " due to " + ace.getMessage(), ace);
-            updater.throwError(upload.id, ace);
-            updater.updateState(upload.id, TransferState.FAILED);
+            updater.throwError(upload.getRecord().getId(), ace);
+            updater.updateState(upload.getRecord().getId(), TransferState.FAILED);
             return false;
         }
     }
 
     private Boolean uploadSinglePartAndWaitForCompletion() {
+        LOGGER.info("Upload single part");
         final PutObjectRequest putObjectRequest = createPutObjectRequest(upload);
 
         final long length = putObjectRequest.getFile().length();
+        LOGGER.info("length single part: " + length);
         TransferUtility.appendTransferServiceUserAgentString(putObjectRequest);
-        updater.updateProgress(upload.id, 0, length);
-        putObjectRequest.setGeneralProgressListener(updater.newProgressListener(upload.id));
+        updater.updateProgress(upload.getRecord().getId(), 0, length);
+        putObjectRequest.setGeneralProgressListener(updater.newProgressListener(upload.getRecord().getId()));
 
         try {
             s3.putObject(putObjectRequest);
-            updater.updateProgress(upload.id, length, length);
-            updater.updateState(upload.id, TransferState.COMPLETED);
+            updater.updateProgress(upload.getRecord().getId(), length, length);
+            updater.updateState(upload.getRecord().getId(), TransferState.COMPLETED);
             return true;
         } catch (final Exception e) {
             if (RetryUtils.isInterrupted(e)) {
@@ -221,23 +227,23 @@ private Boolean uploadSinglePartAndWaitForCompletion() {
                  * thread is interrupted by user. don't update the state as it's
                  * set by caller who interrupted
                  */
-                LOGGER.debug("Transfer " + upload.id + " is interrupted by user");
+                LOGGER.debug("Transfer " + upload.getRecord().getId() + " is interrupted by user");
                 return false;
             } else if (e.getCause() != null && e.getCause() instanceof AmazonClientException
                     && !networkInfo.isNetworkConnected()) {
                 // check for network interruption and pause the transfer instead of failing them
-                LOGGER.debug("Network Connection Interrupted: Transfer " + upload.id + " waits for network");
-                updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
+                LOGGER.debug("Network Connection Interrupted: Transfer " + upload.getRecord().getId() + " waits for network");
+                updater.updateState(upload.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
                 return false;
             } else if (e.getCause() != null && e.getCause() instanceof IOException
                     && !networkInfo.isNetworkConnected()) {
-                LOGGER.debug("Transfer " + upload.id + " waits for network");
-                updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
+                LOGGER.debug("Transfer " + upload.getRecord().getId() + " waits for network");
+                updater.updateState(upload.getRecord().getId(), TransferState.WAITING_FOR_NETWORK);
             }
             // all other exceptions
-            LOGGER.debug("Failed to upload: " + upload.id + " due to " + e.getMessage(), e);
-            updater.throwError(upload.id, e);
-            updater.updateState(upload.id, TransferState.FAILED);
+            LOGGER.debug("Failed to upload: " + upload.getRecord().getId() + " due to " + e.getMessage(), e);
+            updater.throwError(upload.getRecord().getId(), e);
+            updater.updateState(upload.getRecord().getId(), TransferState.FAILED);
             return false;
         }
     }
@@ -280,49 +286,49 @@ private String initiateMultipartUpload(PutObjectRequest putObjectRequest) {
      */
     @SuppressWarnings("checkstyle:hiddenfield")
     private PutObjectRequest createPutObjectRequest(TransferRecord upload) {
-        final File file = new File(upload.file);
-        final PutObjectRequest putObjectRequest = new PutObjectRequest(upload.bucketName,
-                upload.key, file);
+        final File file = new File(upload.getRecord().getFile());
+        final PutObjectRequest putObjectRequest = new PutObjectRequest(upload.getRecord().getBucketName(),
+                upload.getRecord().getKey(), file);
 
         final ObjectMetadata om = new ObjectMetadata();
         om.setContentLength(file.length());
 
-        if (upload.headerCacheControl != null) {
-            om.setCacheControl(upload.headerCacheControl);
+        if (upload.getRecord().getHeaderCacheControl() != null) {
+            om.setCacheControl(upload.getRecord().getHeaderCacheControl());
         }
-        if (upload.headerContentDisposition != null) {
-            om.setContentDisposition(upload.headerContentDisposition);
+        if (upload.getRecord().getHeaderContentDisposition() != null) {
+            om.setContentDisposition(upload.getRecord().getHeaderContentDisposition());
         }
-        if (upload.headerContentEncoding != null) {
-            om.setContentEncoding(upload.headerContentEncoding);
+        if (upload.getRecord().getHeaderContentEncoding() != null) {
+            om.setContentEncoding(upload.getRecord().getHeaderContentEncoding());
         }
-        if (upload.headerContentType != null) {
-            om.setContentType(upload.headerContentType);
+        if (upload.getRecord().getHeaderContentType() != null) {
+            om.setContentType(upload.getRecord().getHeaderContentType());
         } else {
             om.setContentType(Mimetypes.getInstance().getMimetype(file));
         }
-        if (upload.expirationTimeRuleId != null) {
-            om.setExpirationTimeRuleId(upload.expirationTimeRuleId);
+        if (upload.getRecord().getExpirationTimeRuleId() != null) {
+            om.setExpirationTimeRuleId(upload.getRecord().getExpirationTimeRuleId());
         }
-        if (upload.httpExpires != null) {
-            om.setHttpExpiresDate(new Date(Long.valueOf(upload.httpExpires)));
+        if (upload.getRecord().getHttpExpires() != null) {
+            om.setHttpExpiresDate(new Date(Long.valueOf(upload.getRecord().getHttpExpires())));
         }
-        if (upload.sseAlgorithm != null) {
-            om.setSSEAlgorithm(upload.sseAlgorithm);
+        if (upload.getRecord().getSseAlgorithm() != null) {
+            om.setSSEAlgorithm(upload.getRecord().getSseAlgorithm());
         }
-        if (upload.userMetadata != null) {
-            om.setUserMetadata(upload.userMetadata);
+        if (upload.getRecord().getUserMetadata() != null) {
+            om.setUserMetadata(upload.getRecord().getUserMetadata());
         }
-        if (upload.md5 != null) {
-            om.setContentMD5(upload.md5);
+        if (upload.getRecord().getMd5() != null) {
+            om.setContentMD5(upload.getRecord().getMd5());
         }
-        if (upload.sseKMSKey != null) {
+        if (upload.getRecord().getSseKMSKey() != null) {
             putObjectRequest
-                    .setSSEAwsKeyManagementParams(new SSEAwsKeyManagementParams(upload.sseKMSKey));
+                    .setSSEAwsKeyManagementParams(new SSEAwsKeyManagementParams(upload.getRecord().getSseKMSKey()));
         }
 
         putObjectRequest.setMetadata(om);
-        putObjectRequest.setCannedAcl(getCannedAclFromString(upload.cannedAcl));
+        putObjectRequest.setCannedAcl(getCannedAclFromString(upload.getRecord().getCannedAcl()));
 
         return putObjectRequest;
     }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/package-info.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/package-info.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/package-info.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/package-info.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Encryption.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Encryption.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Encryption.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Encryption.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3EncryptionClient.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3EncryptionClient.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3EncryptionClient.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3EncryptionClient.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3URI.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3URI.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3URI.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3URI.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/Headers.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/Headers.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/Headers.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/Headers.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/KeyWrapException.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/KeyWrapException.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/KeyWrapException.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/KeyWrapException.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/OnFileDelete.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/OnFileDelete.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/OnFileDelete.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/OnFileDelete.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ClientOptions.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ClientOptions.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ClientOptions.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ClientOptions.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ResponseMetadata.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ResponseMetadata.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ResponseMetadata.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/S3ResponseMetadata.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/UploadObjectObserver.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/UploadObjectObserver.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/UploadObjectObserver.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/UploadObjectObserver.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractRepeatableCipherInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractRepeatableCipherInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractRepeatableCipherInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractRepeatableCipherInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/BucketNameUtils.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/BucketNameUtils.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/BucketNameUtils.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/BucketNameUtils.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/CompleteMultipartUploadRetryCondition.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/CompleteMultipartUploadRetryCondition.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/CompleteMultipartUploadRetryCondition.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/CompleteMultipartUploadRetryCondition.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/Constants.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/Constants.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/Constants.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/Constants.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectTaggingHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectTaggingHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectTaggingHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectTaggingHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectsResponse.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectsResponse.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectsResponse.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DeleteObjectsResponse.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DigestValidationInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DigestValidationInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DigestValidationInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/DigestValidationInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/FileDeletionEvent.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/FileDeletionEvent.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/FileDeletionEvent.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/FileDeletionEvent.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/GetObjectTaggingResponseHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/GetObjectTaggingResponseHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/GetObjectTaggingResponseHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/GetObjectTaggingResponseHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/HeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/HeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/HeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/HeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/InputSubstream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/InputSubstream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/InputSubstream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/InputSubstream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MultiFileOutputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MultiFileOutputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MultiFileOutputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/MultiFileOutputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectExpirationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ObjectRestoreResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/PartCreationEvent.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/PartCreationEvent.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/PartCreationEvent.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/PartCreationEvent.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ProgressReportingInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ProgressReportingInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ProgressReportingInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ProgressReportingInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableCipherInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableCipherInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableCipherInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableCipherInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableFileInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableFileInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableFileInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RepeatableFileInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChain.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChain.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChain.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChain.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RestUtils.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RestUtils.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RestUtils.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/RestUtils.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Direct.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Direct.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Direct.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Direct.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3DirectSpi.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3DirectSpi.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3DirectSpi.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3DirectSpi.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ExecutionContext.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ExecutionContext.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ExecutionContext.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ExecutionContext.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3HttpUtils.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3HttpUtils.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3HttpUtils.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3HttpUtils.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3QueryStringSigner.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3QueryStringSigner.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3QueryStringSigner.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3QueryStringSigner.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3RequesterChargedResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3StringResponseHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3StringResponseHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3StringResponseHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3StringResponseHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3VersionResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3XmlResponseHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3XmlResponseHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3XmlResponseHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3XmlResponseHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SSEResultBase.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SSEResultBase.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SSEResultBase.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SSEResultBase.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServerSideEncryptionResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServiceUtils.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServiceUtils.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServiceUtils.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/ServiceUtils.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SetObjectTaggingResponseHeaderHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SetObjectTaggingResponseHeaderHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SetObjectTaggingResponseHeaderHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/SetObjectTaggingResponseHeaderHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/XmlWriter.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/XmlWriter.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/XmlWriter.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/XmlWriter.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AdjustedRangeInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AdjustedRangeInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AdjustedRangeInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AdjustedRangeInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCbc.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCbc.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCbc.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCbc.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCtr.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCtr.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCtr.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesCtr.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesGcm.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesGcm.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesGcm.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/AesGcm.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLite.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLite.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLite.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLite.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLiteInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLiteInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLiteInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CipherLiteInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoModuleDispatcher.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoModuleDispatcher.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoModuleDispatcher.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoModuleDispatcher.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoRuntime.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoRuntime.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoRuntime.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/CryptoRuntime.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptedUploadContext.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptedUploadContext.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptedUploadContext.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptedUploadContext.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionInstruction.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionInstruction.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionInstruction.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionInstruction.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionUtils.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionUtils.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionUtils.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionUtils.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/GCMCipherLite.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/GCMCipherLite.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/GCMCipherLite.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/GCMCipherLite.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/JceEncryptionConstants.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/JceEncryptionConstants.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/JceEncryptionConstants.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/JceEncryptionConstants.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/KMSSecuredCEK.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/KMSSecuredCEK.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/KMSSecuredCEK.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/KMSSecuredCEK.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadContext.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadContext.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadContext.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadContext.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCryptoContext.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCryptoContext.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCryptoContext.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/MultipartUploadCryptoContext.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/RenewableCipherLiteInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/RenewableCipherLiteInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/RenewableCipherLiteInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/RenewableCipherLiteInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModule.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModule.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModule.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModule.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAE.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAE.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAE.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAE.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAEStrict.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAEStrict.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAEStrict.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleAEStrict.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleBase.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleBase.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleBase.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleBase.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleEO.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleEO.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleEO.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleEO.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoScheme.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoScheme.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoScheme.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoScheme.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3KeyWrapScheme.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3KeyWrapScheme.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3KeyWrapScheme.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3KeyWrapScheme.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3ObjectWrapper.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3ObjectWrapper.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3ObjectWrapper.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3ObjectWrapper.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/SecuredCEK.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/SecuredCEK.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/SecuredCEK.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/SecuredCEK.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Objects.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Objects.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Objects.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Objects.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Versions.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Versions.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Versions.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/iterable/S3Versions.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/metrics/S3ServiceMetric.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/metrics/S3ServiceMetric.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/metrics/S3ServiceMetric.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/metrics/S3ServiceMetric.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortIncompleteMultipartUpload.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortIncompleteMultipartUpload.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortIncompleteMultipartUpload.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortIncompleteMultipartUpload.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortMultipartUploadRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortMultipartUploadRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortMultipartUploadRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbortMultipartUploadRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbstractPutObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbstractPutObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbstractPutObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AbstractPutObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AccessControlList.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AccessControlList.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AccessControlList.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AccessControlList.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AmazonS3Exception.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AmazonS3Exception.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AmazonS3Exception.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/AmazonS3Exception.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Bucket.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Bucket.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Bucket.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Bucket.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateStatus.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateStatus.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateStatus.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketAccelerateStatus.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketCrossOriginConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketCrossOriginConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketCrossOriginConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketCrossOriginConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLifecycleConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLifecycleConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLifecycleConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLifecycleConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLoggingConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLoggingConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLoggingConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketLoggingConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketNotificationConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketNotificationConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketNotificationConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketNotificationConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketPolicy.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketPolicy.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketPolicy.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketPolicy.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketReplicationConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketReplicationConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketReplicationConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketReplicationConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketTaggingConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketTaggingConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketTaggingConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketTaggingConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketVersioningConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketVersioningConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketVersioningConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketVersioningConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketWebsiteConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketWebsiteConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketWebsiteConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/BucketWebsiteConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CORSRule.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CORSRule.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CORSRule.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CORSRule.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CannedAccessControlList.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CannedAccessControlList.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CannedAccessControlList.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CannedAccessControlList.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CanonicalGrantee.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CanonicalGrantee.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CanonicalGrantee.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CanonicalGrantee.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CloudFunctionConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CloudFunctionConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CloudFunctionConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CloudFunctionConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CompleteMultipartUploadResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyObjectResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CopyPartResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CreateBucketRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CreateBucketRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CreateBucketRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CreateBucketRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoMode.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoMode.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoMode.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoMode.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoStorageMode.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoStorageMode.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoStorageMode.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/CryptoStorageMode.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketAnalyticsConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketCrossOriginConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketCrossOriginConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketCrossOriginConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketCrossOriginConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketInventoryConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketLifecycleConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketLifecycleConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketLifecycleConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketLifecycleConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketMetricsConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketPolicyRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketPolicyRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketPolicyRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketPolicyRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketReplicationConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketReplicationConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketReplicationConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketReplicationConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketTaggingConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketTaggingConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketTaggingConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketTaggingConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketWebsiteConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketWebsiteConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketWebsiteConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteBucketWebsiteConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectTaggingResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteObjectsResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteVersionRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteVersionRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteVersionRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/DeleteVersionRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EmailAddressGrantee.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EmailAddressGrantee.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EmailAddressGrantee.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EmailAddressGrantee.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedGetObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedGetObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedGetObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedGetObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedInitiateMultipartUploadRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedInitiateMultipartUploadRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedInitiateMultipartUploadRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedInitiateMultipartUploadRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedPutObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedPutObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedPutObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptedPutObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterials.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterials.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterials.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterials.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsAccessor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsAccessor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsAccessor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsAccessor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsProvider.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsProvider.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsProvider.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/EncryptionMaterialsProvider.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ExtraMaterialsDescription.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ExtraMaterialsDescription.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ExtraMaterialsDescription.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ExtraMaterialsDescription.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Filter.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Filter.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Filter.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Filter.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/FilterRule.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/FilterRule.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/FilterRule.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/FilterRule.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GenericBucketRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GenericBucketRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GenericBucketRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GenericBucketRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAccelerateConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAccelerateConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAccelerateConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAccelerateConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAclRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAclRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAclRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAclRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketAnalyticsConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketCrossOriginConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketCrossOriginConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketCrossOriginConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketCrossOriginConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketInventoryConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLifecycleConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLifecycleConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLifecycleConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLifecycleConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLocationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLocationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLocationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLocationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLoggingConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLoggingConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLoggingConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketLoggingConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketMetricsConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketNotificationConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketNotificationConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketNotificationConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketNotificationConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketPolicyRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketPolicyRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketPolicyRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketPolicyRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketReplicationConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketReplicationConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketReplicationConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketReplicationConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketTaggingConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketTaggingConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketTaggingConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketTaggingConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketVersioningConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketVersioningConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketVersioningConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketVersioningConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketWebsiteConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketWebsiteConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketWebsiteConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetBucketWebsiteConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectAclRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectAclRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectAclRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectAclRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectMetadataRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectMetadataRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectMetadataRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectMetadataRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetObjectTaggingResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetRequestPaymentConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetRequestPaymentConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetRequestPaymentConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetRequestPaymentConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetS3AccountOwnerRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetS3AccountOwnerRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetS3AccountOwnerRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GetS3AccountOwnerRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grant.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grant.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grant.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grant.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grantee.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grantee.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grantee.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Grantee.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GroupGrantee.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GroupGrantee.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GroupGrantee.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GroupGrantee.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/HeadBucketResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InitiateMultipartUploadResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InstructionFileId.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InstructionFileId.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InstructionFileId.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/InstructionFileId.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterials.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterials.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterials.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterials.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterialsProvider.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterialsProvider.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterialsProvider.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/KMSEncryptionMaterialsProvider.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LambdaConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LambdaConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LambdaConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LambdaConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LegacyS3ProgressListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LegacyS3ProgressListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LegacyS3ProgressListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/LegacyS3ProgressListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketAnalyticsConfigurationsResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketInventoryConfigurationsResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketMetricsConfigurationsResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListBucketsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListMultipartUploadsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListMultipartUploadsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListMultipartUploadsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListMultipartUploadsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfObjectsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfObjectsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfObjectsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfObjectsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfVersionsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfVersionsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfVersionsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListNextBatchOfVersionsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Request.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Request.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Request.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Request.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Result.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Result.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Result.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListObjectsV2Result.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListPartsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListPartsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListPartsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListPartsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListVersionsRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListVersionsRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListVersionsRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ListVersionsRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MaterialsDescriptionProvider.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MaterialsDescriptionProvider.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MaterialsDescriptionProvider.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MaterialsDescriptionProvider.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiFactorAuthentication.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiFactorAuthentication.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiFactorAuthentication.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiFactorAuthentication.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiObjectDeleteException.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiObjectDeleteException.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiObjectDeleteException.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultiObjectDeleteException.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUpload.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUpload.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUpload.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUpload.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUploadListing.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUploadListing.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUploadListing.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/MultipartUploadListing.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/NotificationConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/NotificationConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/NotificationConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/NotificationConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectListing.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectListing.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectListing.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectListing.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectTagging.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectTagging.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectTagging.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectTagging.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Owner.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Owner.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Owner.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Owner.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartETag.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartETag.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartETag.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartETag.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartListing.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartListing.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartListing.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartListing.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartSummary.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartSummary.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartSummary.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PartSummary.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Permission.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Permission.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Permission.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Permission.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressEvent.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressEvent.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressEvent.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressEvent.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressListener.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressListener.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressListener.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ProgressListener.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutInstructionFileRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutInstructionFileRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutInstructionFileRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutInstructionFileRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/PutObjectResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/QueueConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/QueueConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/QueueConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/QueueConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RedirectRule.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RedirectRule.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RedirectRule.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RedirectRule.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Region.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Region.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Region.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Region.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationDestinationConfig.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationDestinationConfig.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationDestinationConfig.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationDestinationConfig.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRule.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRule.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRule.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRule.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRuleStatus.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRuleStatus.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRuleStatus.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ReplicationRuleStatus.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RequestPaymentConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RequestPaymentConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RequestPaymentConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RequestPaymentConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ResponseHeaderOverrides.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ResponseHeaderOverrides.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ResponseHeaderOverrides.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ResponseHeaderOverrides.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RestoreObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RestoreObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RestoreObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RestoreObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRule.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRule.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRule.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRule.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRuleCondition.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRuleCondition.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRuleCondition.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/RoutingRuleCondition.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3AccelerateUnsupported.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3AccelerateUnsupported.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3AccelerateUnsupported.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3AccelerateUnsupported.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3DataSource.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3DataSource.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3DataSource.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3DataSource.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Event.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Event.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Event.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Event.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3KeyFilter.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3KeyFilter.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3KeyFilter.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3KeyFilter.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Object.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Object.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Object.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3Object.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectId.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectId.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectId.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectId.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectIdBuilder.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectIdBuilder.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectIdBuilder.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectIdBuilder.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectInputStream.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectInputStream.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectInputStream.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectSummary.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectSummary.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectSummary.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3ObjectSummary.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3VersionSummary.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3VersionSummary.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3VersionSummary.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/S3VersionSummary.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAlgorithm.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAlgorithm.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAlgorithm.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAlgorithm.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParams.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParams.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParams.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParams.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParamsProvider.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParamsProvider.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParamsProvider.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSEAwsKeyManagementParamsProvider.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKey.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKey.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKey.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKey.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKeyProvider.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKeyProvider.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKeyProvider.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SSECustomerKeyProvider.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAccelerateConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAccelerateConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAccelerateConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAccelerateConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAclRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAclRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAclRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAclRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketAnalyticsConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketCrossOriginConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketCrossOriginConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketCrossOriginConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketCrossOriginConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketInventoryConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLifecycleConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLifecycleConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLifecycleConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLifecycleConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLoggingConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLoggingConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLoggingConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketLoggingConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketMetricsConfigurationResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketNotificationConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketNotificationConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketNotificationConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketNotificationConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketPolicyRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketPolicyRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketPolicyRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketPolicyRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketReplicationConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketReplicationConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketReplicationConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketReplicationConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketTaggingConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketTaggingConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketTaggingConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketTaggingConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketVersioningConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketVersioningConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketVersioningConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketVersioningConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketWebsiteConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketWebsiteConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketWebsiteConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetBucketWebsiteConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectAclRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectAclRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectAclRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectAclRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetObjectTaggingResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetRequestPaymentConfigurationRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetRequestPaymentConfigurationRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetRequestPaymentConfigurationRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/SetRequestPaymentConfigurationRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProvider.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProvider.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProvider.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProvider.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StorageClass.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StorageClass.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StorageClass.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/StorageClass.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Tag.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Tag.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Tag.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Tag.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TagSet.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TagSet.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TagSet.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TagSet.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TopicConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TopicConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TopicConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/TopicConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadObjectRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadObjectRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadObjectRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadObjectRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartRequest.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartRequest.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartRequest.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartRequest.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartResult.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartResult.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartResult.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/UploadPartResult.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/VersionListing.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/VersionListing.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/VersionListing.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/VersionListing.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/WebsiteConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/WebsiteConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/WebsiteConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/WebsiteConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsAndOperator.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsAndOperator.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsAndOperator.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsAndOperator.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsExportDestination.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsExportDestination.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsExportDestination.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsExportDestination.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilter.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilter.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilter.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilter.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilterPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilterPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilterPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsFilterPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsNAryOperator.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsNAryOperator.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsNAryOperator.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsNAryOperator.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPredicateVisitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPredicateVisitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPredicateVisitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPredicateVisitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPrefixPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPrefixPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPrefixPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsPrefixPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3BucketDestination.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3BucketDestination.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3BucketDestination.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3BucketDestination.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3ExportFileFormat.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3ExportFileFormat.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3ExportFileFormat.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsS3ExportFileFormat.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsTagPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsTagPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsTagPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/AnalyticsTagPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysis.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysis.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysis.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysis.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisDataExport.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisDataExport.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisDataExport.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisDataExport.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisSchemaVersion.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisSchemaVersion.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisSchemaVersion.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/analytics/StorageClassAnalysisSchemaVersion.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryDestination.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryDestination.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryDestination.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryDestination.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilter.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilter.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilter.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilter.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilterPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilterPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilterPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFilterPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFormat.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFormat.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFormat.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFormat.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFrequency.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFrequency.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFrequency.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryFrequency.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryIncludedObjectVersions.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryIncludedObjectVersions.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryIncludedObjectVersions.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryIncludedObjectVersions.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryOptionalField.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryOptionalField.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryOptionalField.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryOptionalField.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPredicateVisitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPredicateVisitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPredicateVisitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPredicateVisitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPrefixPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPrefixPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPrefixPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryPrefixPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryS3BucketDestination.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryS3BucketDestination.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryS3BucketDestination.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventoryS3BucketDestination.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventorySchedule.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventorySchedule.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventorySchedule.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/inventory/InventorySchedule.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleAndOperator.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleAndOperator.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleAndOperator.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleAndOperator.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilter.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilter.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilter.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilter.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilterPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilterPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilterPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleFilterPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleNAryOperator.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleNAryOperator.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleNAryOperator.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleNAryOperator.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePredicateVisitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePredicateVisitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePredicateVisitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePredicateVisitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePrefixPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePrefixPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePrefixPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecyclePrefixPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleTagPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleTagPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleTagPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/lifecycle/LifecycleTagPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsAndOperator.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsAndOperator.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsAndOperator.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsAndOperator.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsConfiguration.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsConfiguration.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsConfiguration.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsConfiguration.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilter.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilter.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilter.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilter.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilterPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilterPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilterPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsFilterPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsNAryOperator.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsNAryOperator.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsNAryOperator.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsNAryOperator.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPredicateVisitor.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPredicateVisitor.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPredicateVisitor.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPredicateVisitor.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPrefixPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPrefixPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPrefixPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsPrefixPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsTagPredicate.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsTagPredicate.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsTagPredicate.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/metrics/MetricsTagPredicate.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/package-info.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/package-info.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/package-info.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/package-info.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractSSEHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractSSEHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractSSEHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AbstractSSEHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AclXmlFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AclXmlFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AclXmlFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/AclXmlFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketConfigurationXmlFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketConfigurationXmlFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketConfigurationXmlFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketConfigurationXmlFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterRuleStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterRuleStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterRuleStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterRuleStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/FilterStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/HeadBucketResultHandler.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/HeadBucketResultHandler.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/HeadBucketResultHandler.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/HeadBucketResultHandler.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/LambdaConfigurationStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/LambdaConfigurationStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/LambdaConfigurationStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/LambdaConfigurationStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/MultiObjectDeleteXmlFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/MultiObjectDeleteXmlFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/MultiObjectDeleteXmlFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/MultiObjectDeleteXmlFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/NotificationConfigurationStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/NotificationConfigurationStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/NotificationConfigurationStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/NotificationConfigurationStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/ObjectTaggingXmlFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/ObjectTaggingXmlFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/ObjectTaggingXmlFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/ObjectTaggingXmlFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/QueueConfigurationStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/QueueConfigurationStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/QueueConfigurationStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/QueueConfigurationStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestPaymentConfigurationXmlFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestPaymentConfigurationXmlFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestPaymentConfigurationXmlFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestPaymentConfigurationXmlFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestXmlFactory.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestXmlFactory.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestXmlFactory.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/RequestXmlFactory.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/S3KeyFilterStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/S3KeyFilterStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/S3KeyFilterStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/S3KeyFilterStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/TopicConfigurationStaxUnmarshaller.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/TopicConfigurationStaxUnmarshaller.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/TopicConfigurationStaxUnmarshaller.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/TopicConfigurationStaxUnmarshaller.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/Unmarshallers.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/Unmarshallers.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/Unmarshallers.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/Unmarshallers.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/package-info.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/package-info.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/package-info.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/package-info.java
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/util/Mimetypes.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/util/Mimetypes.java
similarity index 100%
rename from aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/util/Mimetypes.java
rename to aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/util/Mimetypes.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/auth/AwsChunkedEncodingInputStreamTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/auth/AwsChunkedEncodingInputStreamTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/auth/AwsChunkedEncodingInputStreamTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/auth/AwsChunkedEncodingInputStreamTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/auth/DecodedStreamBufferTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/auth/DecodedStreamBufferTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/auth/DecodedStreamBufferTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/auth/DecodedStreamBufferTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/auth/policy/conditions/S3ConditionFactoryTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/auth/policy/conditions/S3ConditionFactoryTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/auth/policy/conditions/S3ConditionFactoryTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/auth/policy/conditions/S3ConditionFactoryTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3BucketResourceTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3BucketResourceTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3BucketResourceTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3BucketResourceTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3ObjectResourceTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3ObjectResourceTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3ObjectResourceTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/auth/policy/resources/S3ObjectResourceTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/CorruptionInputStream.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/CorruptionInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/CorruptionInputStream.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/CorruptionInputStream.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransferTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransferTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransferTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/PersistableTransferTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerUtilsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerUtilsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerUtilsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/mobileconnectors/s3/transfermanager/TransferManagerUtilsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/AmazonS3URITest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/AmazonS3URITest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/AmazonS3URITest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/AmazonS3URITest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/Amazons3ClientTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/Amazons3ClientTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/Amazons3ClientTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/Amazons3ClientTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/DefaultSigningMethodTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/DefaultSigningMethodTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/DefaultSigningMethodTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/DefaultSigningMethodTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/ExpirationHeaderParsingTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/ExpirationHeaderParsingTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/ExpirationHeaderParsingTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/ExpirationHeaderParsingTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/InputStreamsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/InputStreamsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/InputStreamsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/InputStreamsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/RegionTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/RegionTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/RegionTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/RegionTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/RestUtilsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/RestUtilsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/RestUtilsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/RestUtilsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/RestoreHeaderParsingTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/RestoreHeaderParsingTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/RestoreHeaderParsingTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/RestoreHeaderParsingTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/S3ClientOptionsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/S3ClientOptionsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/S3ClientOptionsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/S3ClientOptionsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AWSS3V4SignerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AWSS3V4SignerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AWSS3V4SignerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AWSS3V4SignerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/BucketNameUtilsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/BucketNameUtilsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/BucketNameUtilsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/BucketNameUtilsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ConstantsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ConstantsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ConstantsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ConstantsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/DeleteObjectsResponseTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/DeleteObjectsResponseTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/DeleteObjectsResponseTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/DeleteObjectsResponseTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStreamTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStreamTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStreamTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MD5DigestCalculatingInputStreamTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MultiFileOutputStreamTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MultiFileOutputStreamTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MultiFileOutputStreamTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/MultiFileOutputStreamTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ProgressReportingInputStreamTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ProgressReportingInputStreamTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ProgressReportingInputStreamTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ProgressReportingInputStreamTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RepeatableFileInputStreamTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RepeatableFileInputStreamTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RepeatableFileInputStreamTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RepeatableFileInputStreamTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChainTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChainTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChainTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ResponseHeaderHandlerChainTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RestUtilsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RestUtilsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RestUtilsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/RestUtilsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandlerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandlerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandlerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ErrorResponseHandlerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandlerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandlerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandlerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3ObjectResponseHandlerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3QueryStringSignerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3QueryStringSignerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3QueryStringSignerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3QueryStringSignerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3SignerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3SignerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3SignerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3SignerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3StringResponseHandlerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3StringResponseHandlerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3StringResponseHandlerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3StringResponseHandlerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3XmlResponseHandlerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3XmlResponseHandlerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3XmlResponseHandlerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3XmlResponseHandlerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ServiceUtilsTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ServiceUtilsTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ServiceUtilsTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/ServiceUtilsTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/XmlWriterTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/XmlWriterTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/XmlWriterTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/XmlWriterTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsInBucketTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsInBucketTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsInBucketTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsInBucketTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsTestCommon.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsTestCommon.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsTestCommon.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsTestCommon.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsWithPrefixTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsWithPrefixTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsWithPrefixTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3ObjectsWithPrefixTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsForKeyTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsForKeyTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsForKeyTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsForKeyTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsInBucketTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsInBucketTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsInBucketTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsInBucketTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsTestCommon.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsTestCommon.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsTestCommon.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsTestCommon.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsWithPrefixTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsWithPrefixTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsWithPrefixTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/iterable/S3VersionsWithPrefixTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/metrics/S3ServiceMetricTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/metrics/S3ServiceMetricTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/metrics/S3ServiceMetricTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/metrics/S3ServiceMetricTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/BucketAccelerateStatusTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/BucketAccelerateStatusTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/BucketAccelerateStatusTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/BucketAccelerateStatusTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/DeleteObjectsRequestTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/DeleteObjectsRequestTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/DeleteObjectsRequestTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/DeleteObjectsRequestTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/NonCurrentVersionTransitionTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/NonCurrentVersionTransitionTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/NonCurrentVersionTransitionTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/NonCurrentVersionTransitionTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/PutObjectRequestTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/PutObjectRequestTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/PutObjectRequestTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/PutObjectRequestTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/RegionTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/RegionTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/RegionTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/RegionTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProviderTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProviderTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProviderTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/StaticEncryptionMaterialsProviderTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/TransitionTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/TransitionTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/TransitionTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/TransitionTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketAnalyticsSaxUnmarshallerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketAnalyticsSaxUnmarshallerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketAnalyticsSaxUnmarshallerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketAnalyticsSaxUnmarshallerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketInventorySaxUnmarshallerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketInventorySaxUnmarshallerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketInventorySaxUnmarshallerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketInventorySaxUnmarshallerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketLifecycleSaxUnmarshallerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketLifecycleSaxUnmarshallerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketLifecycleSaxUnmarshallerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketLifecycleSaxUnmarshallerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketMetricsSaxUnmarshallerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketMetricsSaxUnmarshallerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketMetricsSaxUnmarshallerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketMetricsSaxUnmarshallerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshallerTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshallerTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshallerTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/BucketNotificationConfigurationStaxUnmarshallerTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/MimetypesTest.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/MimetypesTest.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/MimetypesTest.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/MimetypesTest.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/SpecialObjectKeyNameGenerator.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/SpecialObjectKeyNameGenerator.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/SpecialObjectKeyNameGenerator.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/SpecialObjectKeyNameGenerator.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/StreamUtils.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/StreamUtils.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/StreamUtils.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/StreamUtils.java
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/UnreliableRepeatableFileInputStream.java b/aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/UnreliableRepeatableFileInputStream.java
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/util/UnreliableRepeatableFileInputStream.java
rename to aws-java-sdk-s3/src/test/java/com/amazonaws/services/s3/util/UnreliableRepeatableFileInputStream.java
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseBasicTags.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseBasicTags.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseBasicTags.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseBasicTags.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTagError.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTagError.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTagError.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTagError.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTags.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTags.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTags.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseChildTags.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseNoErrorTag.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseNoErrorTag.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseNoErrorTag.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseNoErrorTag.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRepeatedXml.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRepeatedXml.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRepeatedXml.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRepeatedXml.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRootElementAsFoo.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRootElementAsFoo.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRootElementAsFoo.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseRootElementAsFoo.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml b/aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml
rename to aws-java-sdk-s3/src/test/java/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/marshalling/AnalyticsConfiguration.xml b/aws-java-sdk-s3/src/test/java/resources/marshalling/AnalyticsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/marshalling/AnalyticsConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/resources/marshalling/AnalyticsConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/marshalling/InventoryConfiguration.xml b/aws-java-sdk-s3/src/test/java/resources/marshalling/InventoryConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/marshalling/InventoryConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/resources/marshalling/InventoryConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/marshalling/MetricsConfiguration.xml b/aws-java-sdk-s3/src/test/java/resources/marshalling/MetricsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/marshalling/MetricsConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/resources/marshalling/MetricsConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/marshalling/RestoreObjectWithTier.xml b/aws-java-sdk-s3/src/test/java/resources/marshalling/RestoreObjectWithTier.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/marshalling/RestoreObjectWithTier.xml
rename to aws-java-sdk-s3/src/test/java/resources/marshalling/RestoreObjectWithTier.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/unmarshalling/AnalyticsConfiguration.xml b/aws-java-sdk-s3/src/test/java/resources/unmarshalling/AnalyticsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/unmarshalling/AnalyticsConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/resources/unmarshalling/AnalyticsConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/unmarshalling/InventoryConfiguration.xml b/aws-java-sdk-s3/src/test/java/resources/unmarshalling/InventoryConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/unmarshalling/InventoryConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/resources/unmarshalling/InventoryConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml b/aws-java-sdk-s3/src/test/java/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml
rename to aws-java-sdk-s3/src/test/java/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml b/aws-java-sdk-s3/src/test/java/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml
rename to aws-java-sdk-s3/src/test/java/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml b/aws-java-sdk-s3/src/test/java/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml
rename to aws-java-sdk-s3/src/test/java/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/java/resources/unmarshalling/MetricsConfiguration.xml b/aws-java-sdk-s3/src/test/java/resources/unmarshalling/MetricsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/java/resources/unmarshalling/MetricsConfiguration.xml
rename to aws-java-sdk-s3/src/test/java/resources/unmarshalling/MetricsConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/auth/RandomTestData.txt b/aws-java-sdk-s3/src/test/resources/com/amazonaws/auth/RandomTestData.txt
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/auth/RandomTestData.txt
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/auth/RandomTestData.txt
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/auth/SignedTestData.txt b/aws-java-sdk-s3/src/test/resources/com/amazonaws/auth/SignedTestData.txt
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/auth/SignedTestData.txt
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/auth/SignedTestData.txt
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/CloudFunctionConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/GetObjectTagsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/LambdaConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/QueueConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/TopicConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/model/transform/lifecycle-configuration-unknown-storage-class.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/errorResponse.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/multiObjectDelete/testResponses/fullResponse.xml
diff --git a/aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/samplePolicy.json b/aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/samplePolicy.json
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/com/amazonaws/services/s3/samplePolicy.json
rename to aws-java-sdk-s3/src/test/resources/com/amazonaws/services/s3/samplePolicy.json
diff --git a/aws-android-sdk-s3/src/test/resources/log4j.properties b/aws-java-sdk-s3/src/test/resources/log4j.properties
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/log4j.properties
rename to aws-java-sdk-s3/src/test/resources/log4j.properties
diff --git a/aws-android-sdk-s3/src/test/resources/mime.types b/aws-java-sdk-s3/src/test/resources/mime.types
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/mime.types
rename to aws-java-sdk-s3/src/test/resources/mime.types
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseBasicTags.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseBasicTags.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseBasicTags.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseBasicTags.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTagError.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTagError.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTagError.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTagError.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTags.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTags.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTags.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseChildTags.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseNoErrorTag.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseNoErrorTag.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseNoErrorTag.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseNoErrorTag.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRepeatedXml.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRepeatedXml.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRepeatedXml.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRepeatedXml.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRootElementAsFoo.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRootElementAsFoo.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRootElementAsFoo.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseRootElementAsFoo.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseWithAdditionalDetails.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml b/aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml
rename to aws-java-sdk-s3/src/test/resources/resources/errorResponse/ErrorResponseXMLNotProperFormat.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/marshalling/AnalyticsConfiguration.xml b/aws-java-sdk-s3/src/test/resources/resources/marshalling/AnalyticsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/marshalling/AnalyticsConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/resources/marshalling/AnalyticsConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/marshalling/InventoryConfiguration.xml b/aws-java-sdk-s3/src/test/resources/resources/marshalling/InventoryConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/marshalling/InventoryConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/resources/marshalling/InventoryConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/marshalling/MetricsConfiguration.xml b/aws-java-sdk-s3/src/test/resources/resources/marshalling/MetricsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/marshalling/MetricsConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/resources/marshalling/MetricsConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/marshalling/RestoreObjectWithTier.xml b/aws-java-sdk-s3/src/test/resources/resources/marshalling/RestoreObjectWithTier.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/marshalling/RestoreObjectWithTier.xml
rename to aws-java-sdk-s3/src/test/resources/resources/marshalling/RestoreObjectWithTier.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/unmarshalling/AnalyticsConfiguration.xml b/aws-java-sdk-s3/src/test/resources/resources/unmarshalling/AnalyticsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/unmarshalling/AnalyticsConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/resources/unmarshalling/AnalyticsConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/unmarshalling/InventoryConfiguration.xml b/aws-java-sdk-s3/src/test/resources/resources/unmarshalling/InventoryConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/unmarshalling/InventoryConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/resources/unmarshalling/InventoryConfiguration.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml b/aws-java-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml
rename to aws-java-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketAnalyticsConfigurationsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml b/aws-java-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml
rename to aws-java-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketInventoryConfigurationsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml b/aws-java-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml
rename to aws-java-sdk-s3/src/test/resources/resources/unmarshalling/ListBucketMetricsConfigurationsResponse.xml
diff --git a/aws-android-sdk-s3/src/test/resources/resources/unmarshalling/MetricsConfiguration.xml b/aws-java-sdk-s3/src/test/resources/resources/unmarshalling/MetricsConfiguration.xml
similarity index 100%
rename from aws-android-sdk-s3/src/test/resources/resources/unmarshalling/MetricsConfiguration.xml
rename to aws-java-sdk-s3/src/test/resources/resources/unmarshalling/MetricsConfiguration.xml
diff --git a/pom.xml b/pom.xml
index 44a4f18b6f..c5c6d50f10 100644
--- a/pom.xml
+++ b/pom.xml
@@ -2,13 +2,13 @@
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
-  <groupId>com.amazonaws</groupId>
+  <groupId>com.gluonhq</groupId>
   <artifactId>aws-java-sdk-pom</artifactId>
   <packaging>pom</packaging>
   <name>AWS SDK for Java Mobile</name>
   <version>2.6.19</version>
-  <description>The Amazon Web Services SDK for Java provides Java APIs for building software on AWS’ cost-effective, scalable, and reliable infrastructure products. The AWS SDK for Java allows developers to code against APIs for all of Amazon's infrastructure web services (Amazon S3, Amazon EC2, Amazon SQS, Auto Scaling, etc).</description>
-  <url>http://aws.amazon.com/sdkforandroid</url>
+  <description>The Amazon Web Services SDK for Java Mobile provides Java APIs for building software on AWS’ cost-effective, scalable, and reliable infrastructure products. The AWS SDK for Java allows developers to code against APIs for all of Amazon's infrastructure web services (Amazon S3, Amazon EC2, Amazon SQS, Auto Scaling, etc).</description>
+  <url>https://github.com/gluonhq/aws-sdk-java-mobile</url>
 
   <properties>
     <project.build.sourceEncoding>
@@ -20,13 +20,13 @@
   </properties>
 
   <scm>
-    <url>http://github.com/aws/aws-sdk-android.git</url>
+    <url>https://github.com/gluonhq/aws-sdk-java-mobile.git</url>
   </scm>
 
   <licenses>
     <license>
       <name>Apache License, Version 2.0</name>
-      <url>http://aws.amazon.com/apache2.0</url>
+      <url>https://www.apache.org/licenses/LICENSE-2.0</url>
       <distribution>repo</distribution>
     </license>
   </licenses>
@@ -58,7 +58,7 @@
     <module>aws-android-sdk-polly</module>
     <module>aws-android-sdk-pinpoint</module>
     <module>aws-android-sdk-rekognition</module>
-    <module>aws-android-sdk-s3</module>
+    
     <module>aws-android-sdk-sdb</module>
     <module>aws-android-sdk-ses</module>
     <module>aws-android-sdk-sns</module>
@@ -68,13 +68,14 @@
     <module>aws-java-sdk-auth-core</module>
     <module>aws-java-sdk-mobile-client</module>
     <module>aws-java-sdk-kms</module>
+    <module>aws-java-sdk-s3</module>
   </modules>
 
   <developers>
     <developer>
-      <id>amazonwebservices</id>
-      <organization>Amazon Web Services</organization>
-      <organizationUrl>http://aws.amazon.com</organizationUrl>
+      <id>gluon</id>
+      <organization>Gluon</organization>
+      <organizationUrl>http://gluonhq.com</organizationUrl>
       <roles>
         <role>developer</role>
       </roles>
@@ -140,10 +141,36 @@
               </execution>
             </executions>
           </plugin>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-javadoc-plugin</artifactId>
+            <executions>
+              <execution>
+                <id>attach-javadoc</id>
+                <phase>package</phase>
+                <goals>
+                  <goal>jar</goal>
+                </goals>
+              </execution>
+            </executions>
+          </plugin>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-source-plugin</artifactId>
+            <executions>
+              <execution>
+                <id>attach-source</id>
+                <phase>package</phase>
+                <goals>
+                  <goal>jar</goal>
+                </goals>
+              </execution>
+            </executions>
+          </plugin>
           <plugin>
             <groupId>org.sonatype.plugins</groupId>
             <artifactId>nexus-staging-maven-plugin</artifactId>
-            <version>1.5.1</version>
+            <version>1.6.8</version>
             <extensions>true</extensions>
             <configuration>
               <serverId>sonatype-nexus-staging</serverId>
