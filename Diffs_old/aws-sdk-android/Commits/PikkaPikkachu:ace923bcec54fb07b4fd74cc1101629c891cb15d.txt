diff --git a/.DS_Store b/.DS_Store
index 55ccbc2682..2137fbebd4 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/.DS_Store b/aws-android-sdk-cognito/.DS_Store
similarity index 90%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/.DS_Store
rename to aws-android-sdk-cognito/.DS_Store
index 208043a7d2..989c968661 100644
Binary files a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/.DS_Store and b/aws-android-sdk-cognito/.DS_Store differ
diff --git a/aws-android-sdk-cognito/src/.DS_Store b/aws-android-sdk-cognito/src/.DS_Store
new file mode 100644
index 0000000000..87a96bd15d
Binary files /dev/null and b/aws-android-sdk-cognito/src/.DS_Store differ
diff --git a/aws-android-sdk-cognito/src/main/.DS_Store b/aws-android-sdk-cognito/src/main/.DS_Store
new file mode 100644
index 0000000000..b484c245ea
Binary files /dev/null and b/aws-android-sdk-cognito/src/main/.DS_Store differ
diff --git a/aws-android-sdk-cognito/src/main/java/.DS_Store b/aws-android-sdk-cognito/src/main/java/.DS_Store
new file mode 100644
index 0000000000..101db06245
Binary files /dev/null and b/aws-android-sdk-cognito/src/main/java/.DS_Store differ
diff --git a/aws-android-sdk-cognito/src/main/java/com/.DS_Store b/aws-android-sdk-cognito/src/main/java/com/.DS_Store
new file mode 100644
index 0000000000..3757b2f913
Binary files /dev/null and b/aws-android-sdk-cognito/src/main/java/com/.DS_Store differ
diff --git a/aws-android-sdk-cognito/src/main/java/com/amazonaws/.DS_Store b/aws-android-sdk-cognito/src/main/java/com/amazonaws/.DS_Store
new file mode 100644
index 0000000000..829fbab740
Binary files /dev/null and b/aws-android-sdk-cognito/src/main/java/com/amazonaws/.DS_Store differ
diff --git a/aws-android-sdk-cognito/src/main/java/com/amazonaws/mobileconnectors/.DS_Store b/aws-android-sdk-cognito/src/main/java/com/amazonaws/mobileconnectors/.DS_Store
new file mode 100644
index 0000000000..dd8d7bd784
Binary files /dev/null and b/aws-android-sdk-cognito/src/main/java/com/amazonaws/mobileconnectors/.DS_Store differ
diff --git a/aws-android-sdk-cognito/src/main/java/com/amazonaws/services/.DS_Store b/aws-android-sdk-cognito/src/main/java/com/amazonaws/services/.DS_Store
new file mode 100644
index 0000000000..e0b3942b42
Binary files /dev/null and b/aws-android-sdk-cognito/src/main/java/com/amazonaws/services/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/.DS_Store b/aws-android-sdk-cognitoidentityprovider/.DS_Store
new file mode 100644
index 0000000000..989c968661
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/.DS_Store
new file mode 100644
index 0000000000..87a96bd15d
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/main/.DS_Store
new file mode 100644
index 0000000000..b484c245ea
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/main/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/main/java/.DS_Store
new file mode 100644
index 0000000000..101db06245
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/main/java/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/.DS_Store
new file mode 100644
index 0000000000..16ceb081fa
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/.DS_Store
new file mode 100644
index 0000000000..df8db7c28b
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/.DS_Store
new file mode 100644
index 0000000000..ec9e678d6c
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/.DS_Store
new file mode 100644
index 0000000000..ec9e678d6c
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/.DS_Store differ
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/.DS_Store b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/.DS_Store
new file mode 100644
index 0000000000..7ac7d2da3b
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/.DS_Store differ
diff --git a/aws-android-sdk-lex/.DS_Store b/aws-android-sdk-lex/.DS_Store
index 3aa25352e7..307dc92fb7 100644
Binary files a/aws-android-sdk-lex/.DS_Store and b/aws-android-sdk-lex/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/.DS_Store b/aws-android-sdk-lex/src/.DS_Store
index 3e02a2e053..782f38a8ce 100644
Binary files a/aws-android-sdk-lex/src/.DS_Store and b/aws-android-sdk-lex/src/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/.DS_Store b/aws-android-sdk-lex/src/main/.DS_Store
index 7413239df6..ed308353dc 100644
Binary files a/aws-android-sdk-lex/src/main/.DS_Store and b/aws-android-sdk-lex/src/main/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/.DS_Store b/aws-android-sdk-lex/src/main/java/.DS_Store
index 87a29d50a3..6e2b270e57 100644
Binary files a/aws-android-sdk-lex/src/main/java/.DS_Store and b/aws-android-sdk-lex/src/main/java/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/.DS_Store b/aws-android-sdk-lex/src/main/java/com/.DS_Store
index 9ad9d8cae4..7110b2c204 100644
Binary files a/aws-android-sdk-lex/src/main/java/com/.DS_Store and b/aws-android-sdk-lex/src/main/java/com/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/.DS_Store
index bba7ac7d18..3fe23a113f 100644
Binary files a/aws-android-sdk-lex/src/main/java/com/amazonaws/.DS_Store and b/aws-android-sdk-lex/src/main/java/com/amazonaws/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/.DS_Store
index 7702018ce8..35a5cd59f6 100644
Binary files a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/.DS_Store and b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/.DS_Store
index b27f90f631..26988910f0 100644
Binary files a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/.DS_Store and b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/.DS_Store
index 18c0611fc8..01a91b6d19 100644
Binary files a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/.DS_Store and b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Continuations/LexServiceContinuation.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Continuations/LexServiceContinuation.java
index 93ff63f71a..3a12df5d5d 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Continuations/LexServiceContinuation.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Continuations/LexServiceContinuation.java
@@ -1,10 +1,10 @@
-package com.example.prakritibansal.posttextrequest.Continuations;
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Continuations;
 
 /**
  * Created by prakritibansal on 12/28/17.
  */
 
-import com.example.prakritibansal.posttextrequest.InteractionClient;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.InteractionClient;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -66,6 +66,30 @@ public void setSessionAttribute(String attribute, String value) {
         sessionAttributes.put(attribute, value);
     }
 
+//    /**
+//     * Use this method if the users response is speech. The client will listen to user's input from
+//     * the device's microphone. The service will respond to this request with text.
+//     */
+//    public void continueWithAudioInForTextOut() {
+//        interactionClient.audioInForTextOut(sessionAttributes);
+//    }
+//
+//    /**
+//     * Use this method if the users response is speech. The client will listen to user's input from
+//     * the device's microphone. The service will respond to this request with audio.
+//     */
+//    public void continueWithAudioInForAudioOut() {
+//        interactionClient.audioInForAudioOut(sessionAttributes);
+//    }
+
+//    /**
+//     * Use this method to respond with text and expect service response with audio.
+//     * @param text the response to the prompt as a {@link String}.
+//     */
+//    public void continueWithTextInForAudioOut(String text) {
+//        interactionClient.textInForAudioOut(text, sessionAttributes);
+//    }
+
     /**
      * Use this method to respond with text and expect service response with text.
      * @param text the response to the prompt as a {@link String}.
@@ -74,6 +98,19 @@ public void continueWithTextInForTextOut(String text) {
         interactionClient.textInForTextOut(text, sessionAttributes);
     }
 
+//    /**
+//     * Use this method to continue with the current input and output mode.
+//     */
+//    public void continueWithCurrentMode() {
+//        Log.d("SDK", " -- responseMode: " + responseMode + "; requestMode: " + requestMode);
+//        if (ResponseType.AUDIO_MPEG.equals(responseMode) && ResponseType.AUDIO_MPEG.equals(requestMode)) {
+//            continueWithAudioInForAudioOut();
+//        } else {
+//            throw new InvalidParameterException(
+//                    "Cannot continue with current mode, if request and response are not audio");
+//        }
+//    }
+
     /**
      * Use this method to cancel the current transaction.
      */
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/InteractionClient.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/InteractionClient.java
index 31693fa1a9..162c267d07 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/InteractionClient.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/InteractionClient.java
@@ -1,4 +1,4 @@
-package com.example.prakritibansal.posttextrequest;
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText;
 
 import android.content.Context;
 import android.os.Handler;
@@ -17,11 +17,11 @@
 import com.amazonaws.services.lexrts.model.PostTextRequest;
 import com.amazonaws.services.lexrts.model.PostTextResult;
 import com.amazonaws.util.StringUtils;
-import com.example.prakritibansal.posttextrequest.Continuations.LexServiceContinuation;
-import com.example.prakritibansal.posttextrequest.Listeners.DefaultInteractionListener;
-import com.example.prakritibansal.posttextrequest.Listeners.InteractionListener;
-import com.example.prakritibansal.posttextrequest.Utils.CreateLexServiceRequest;
-import com.example.prakritibansal.posttextrequest.config.InteractionConfig;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Continuations.LexServiceContinuation;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Listeners.DefaultInteractionListener;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Listeners.InteractionListener;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Utils.CreateLexServiceRequest;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.config.InteractionConfig;
 
 import java.util.Map;
 
@@ -43,9 +43,9 @@
      */
     private final AmazonLexRuntime amazonlex;
 
-    /**
-     * User speech interaction client for Android.
-     */
+//    /**
+//     * User speech interaction client for Android.
+//     */
     private final InteractionConfig interactionConfig;
 
     /**
@@ -58,6 +58,41 @@
      */
     private InteractionListener interactionListener;
 
+//    /**
+//     * Callback for audio playback.
+//     */
+//    private AudioPlaybackListener audioPlaybackListener;
+
+//    /**
+//     * Callback for user interactions with microphone.
+//     */
+//    private MicrophoneListener microphoneListener;
+
+//    /**
+//     * Local media player for audio playback.
+//     */
+//    private MediaPlayer lMediaPlayer;
+//
+//    /**
+//     * Audio encoding used for audio streamed to the Amazon Lex service.
+//     */
+//    private AudioEncoder audioEncoder;
+//
+//    /**
+//     * Intervals for no speech and max speech timeouts.
+//     */
+//    private AudioTimeouts audioTimeouts;
+//
+//    /**
+//     * Config for voice activity detection.
+//     */
+//    private DnnVADConfig vadConfig;
+//
+//    /**
+//     * Records user audio for streaming.
+//     */
+//    private LexAudioRecorder lexAudioRecorder;
+
     /**
      * The size of the each sample in bit.
      */
@@ -74,6 +109,11 @@
      */
     private volatile boolean requestInProgress;
 
+//    /**
+//     * Indicates if the client is busy with audio playback.
+//     */
+//    private volatile boolean audioPlayBackInProgress;
+
     /**
      * Constructors for Amazon Lex local clients.
      */
@@ -144,6 +184,23 @@ public InteractionClient(Context context,
         amazonlex.setRegion(Region.getRegion(region));
     }
 
+//    /**
+//     * Accept input from mic (speech) for text, {@link String}, response from the service.
+//     * @param sessionAttributes {@link Map}.
+//     */
+//    public void audioInForTextOut(final Map<String, String> sessionAttributes) {
+//        carryOnWithMic(sessionAttributes, ResponseType.TEXT);
+//    }
+//
+//    /**
+//     * Accept input from mic (speech) for audio response from the service. To allow the to playback
+//     * audio from the service response, use {@link InteractionConfig#setEnableAudioPlayback(boolean)}.
+//     * @param sessionAttributes {@link Map}.
+//     */
+//    public void audioInForAudioOut(final Map<String, String> sessionAttributes) {
+//        carryOnWithMic(sessionAttributes, ResponseType.AUDIO_MPEG);
+//    }
+
     /**
      * Accept input as text, {@link String}, for text, {@link String}, reponse from the service.
      * @param text input as {@link String}.
@@ -153,13 +210,138 @@ public void textInForTextOut(final String text, final Map<String, String> sessio
         carryOnWithText(text, sessionAttributes);
     }
 
+//    /**
+//     * Accept input as text, {@link String}, for audio response from the service. To allow the to playback
+//     * audio from the service response, use {@link InteractionConfig#setEnableAudioPlayback(boolean)}.
+//     * @param text input as {@link String}.
+//     * @param sessionAttributes {@link Map}.
+//     */
+//    public void textInForAudioOut(final String text, final Map<String, String> sessionAttributes) {
+//        carryOnWithText(text, sessionAttributes, ResponseType.AUDIO_MPEG);
+//    }
+
     /**
      * Cancel the current  with the user's.
      */
     public void cancel() {
+        // TODO - Also stop the http client.
+        // Stop current dialog.
+//        terminateAudioDecoder();
+//        terminateAudioPlayback();
         setBusyState(NOT_BUSY);
     }
 
+//    /**
+//     * Starts listening for the user to speak, through the microphones. The voice interaction client
+//     * detects the start and end of speech.
+//     */
+//    private void carryOnWithMic(final Map<String, String> sessionAttributes, final ResponseType mode) {
+//        // Ensure that the client is not pre-occupied with another dlalog
+//        checkBusyState();
+//        // Send user's response to Amazon Lex service as an audio-stream.
+//        final InteractionClient client = this;
+//        new Thread(new Runnable() {
+//            @Override
+//            public void run() {
+//                final Handler handler = new Handler(context.getMainLooper());
+//                Runnable returnCallBack;
+//                try {
+//                    // Create a new voice interaction client.
+//                    if (AudioEncoding.LPCM.equals(interactionConfig.getAudioEncoding())) {
+//                        audioEncoder = new BufferedAudioEncoder(new L16PcmEncoder());
+//                    } else {
+//                        audioEncoder = new BufferedAudioEncoder(new OpusEncoder());
+//                    }
+//
+//                    // Set time-out limits for mic audio.
+//                    audioTimeouts = new AudioTimeouts(interactionConfig.getNoSpeechTimeoutInterval(),
+//                            interactionConfig.getMaxSpeechTimeoutInterval());
+//
+//                    // Set VAD configuration.
+//                    vadConfig = new DnnVADConfig(interactionConfig.getLrtThreshold(),
+//                            interactionConfig.getStartPointingThreshold(),
+//                            interactionConfig.getEndPointingThreshold());
+//
+//                    lexAudioRecorder =
+//                            new LexAudioRecorderBuilder(context).
+//                                    audioEncoder(audioEncoder).
+//                                    audioTimeouts(audioTimeouts).
+//                                    dnnVADConfig(vadConfig).
+//                                    build();
+//
+//                    // Calculate the maximum buffer size for pipes.
+//                    final int maxTotalAudioLengthInMills = audioTimeouts.getNoSpeechTimeout()
+//                            + audioTimeouts.getMaxSpeechTimeout();
+//                    final int pipeSize = AudioRecorder.DEFAULT_SAMPLE_RATE
+//                            * (int) TimeUnit.MILLISECONDS.toSeconds(maxTotalAudioLengthInMills)
+//                            * (SAMPLE_SIZE / Byte.SIZE);
+//
+//                    final InputStream audioInStream =
+//                            new BufferedInputStream(lexAudioRecorder.getConsumerStream(),
+//                                    pipeSize);
+//
+//                    final PostContentRequest request =
+//                            CreateLexServiceRequest.generatePostContentRequest(sessionAttributes,
+//                                    interactionConfig,
+//                                    credentialsProvider,
+//                                    mode,
+//                                    audioInStream,
+//                                    audioEncoder.getMediaType().toString());
+//
+//                    // Start the speech listener, service api's will be called only when the speech frames are detected.
+//                    startListening(handler, microphoneListener, lexAudioRecorder, request, client,
+//                            mode);
+//                } catch (final Exception e) {
+//                    returnCallBack = new Runnable() {
+//                        @Override
+//                        public void run() {
+//                            interactionListener.onInteractionError(null, e);
+//                        }
+//                    };
+//                    handler.post(returnCallBack);
+//                } finally {
+//                    setBusyState(NOT_BUSY);
+//                }
+//            }
+//        }).start();
+//    }
+
+//    /**
+//     * This method will be invoked when speech frames are detected in the audio
+//     * input over the microphone.
+//     *
+//     * @param handler {@link Handler}, to interact with app components in the
+//     *            main thread.
+//     * @param request {@link PostContentResult}, response from the Amazon Lex
+//     *            service.
+//     * @param client {@link com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient}, reference to this object.
+//     * @param mode {@link ResponseType}, current response type.
+//     */
+//    private void sendAudioRequest(final Handler handler,
+//                                  final PostContentRequest request,
+//                                  final com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient client,
+//                                  final ResponseType mode) {
+//        new Thread(new Runnable() {
+//            @Override
+//            public void run() {
+//                try {
+//                    final PostContentResult result = amazonlex.postContent(request);
+//                    processResponseAudioPlayback(handler, result, client, mode, ResponseType.AUDIO_MPEG);
+//                } catch (final Exception e) {
+//                    final Runnable returnCallBack = new Runnable() {
+//                        @Override
+//                        public void run() {
+//                            interactionListener.onInteractionError(null, e);
+//                        }
+//                    };
+//                    handler.post(returnCallBack);
+//                } finally {
+//                    setBusyState(NOT_BUSY);
+//                }
+//            }
+//        }).start();
+//    }
+
     /**
      * Accepts user's response as {@link String}.
      */
@@ -198,6 +380,143 @@ public void run() {
         }).start();
     }
 
+//    /**
+//     * Invokes the Android {@link MediaPlayer} to playback audio if audio
+//     * playback was requested, and continues to analyze the response. If the
+//     * response does not contain audio stream or if audio playback was not
+//     * requested, continues to analyze the response.
+//     *
+//     * @param handler {@link Handler}, to interact with app components in the
+//     *            main thread.
+//     * @param result {@link PostContentResult}, response from the Amazon Lex
+//     *            service.
+//     * @param client {@link com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient}, reference to this object.
+//     * @param responseMode {@link ResponseType}, current response type.
+//     */
+//    private void processResponseAudioPlayback(final Handler handler,
+//                                              final PostContentResult result,
+//                                              final com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient client,
+//                                              final ResponseType responseMode,
+//                                              final ResponseType requestType) {
+//        // Check if response is audio and audio playback is requested.
+//        if (ResponseType.AUDIO_MPEG.equals(responseMode) && interactionConfig.isEnableAudioPlayback()) {
+//            this.lMediaPlayer = new MediaPlayer();
+//            this.lMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
+//            try {
+//                setAudioPlaybackState(BUSY);
+//                File tempAudioFile = File.createTempFile("lex_temp_response", "mp3",
+//                        context.getFilesDir());
+//                tempAudioFile.deleteOnExit();
+//                // Media player listeners.
+//                lMediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener() {
+//                    @Override
+//                    public boolean onError(final MediaPlayer mp, final int what, final int extra) {
+//                        if (interactionListener != null) {
+//                            final Runnable appCallback = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    audioPlaybackListener.onAudioPlaybackError(
+//                                            new AudioPlaybackException(
+//                                                    String.format(Locale.US,
+//                                                            "MediaPlayer error: \"what\": %d, \"extra\":%d",
+//                                                            what,
+//                                                            extra)));
+//                                }
+//                            };
+//                            handler.post(appCallback);
+//                        }
+//                        return false;
+//                    }
+//                });
+//
+//                lMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
+//                    @Override
+//                    public void onPrepared(MediaPlayer mp) {
+//                        if (audioPlaybackListener != null) {
+//                            final Runnable appCallback = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    audioPlaybackListener.onAudioPlaybackStarted();
+//                                }
+//                            };
+//                            handler.post(appCallback);
+//                        }
+//                        mp.start();
+//                    }
+//                });
+//
+//                lMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+//                    @Override
+//                    public void onCompletion(MediaPlayer mp) {
+//                        setAudioPlaybackState(NOT_BUSY);
+//                        if (audioPlaybackListener != null) {
+//                            final Runnable appCallback = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    audioPlaybackListener.onAudioPlayBackCompleted();
+//                                }
+//                            };
+//                            handler.post(appCallback);
+//                        }
+//                        try {
+//                            if (lMediaPlayer.isPlaying() || lMediaPlayer.isLooping()) {
+//                                lMediaPlayer.stop();
+//                            }
+//                            lMediaPlayer.release();
+//                        } catch (final Exception e) {
+//                            Log.e(TAG, "InteractionClient: Error while releasing MediaPlayer", e);
+//                        } finally {
+//                            lMediaPlayer = null;
+//                        }
+//                    }
+//                });
+//
+//                final InputStream audioStream = result.getAudioStream();
+//                tempAudioFile = File.createTempFile("lex_temp_response", "dat",
+//                        context.getFilesDir());
+//                tempAudioFile.deleteOnExit();
+//                final FileOutputStream audioOut = new FileOutputStream(tempAudioFile);
+//                final byte buffer[] = new byte[16384];
+//                int length;
+//                while ((length = audioStream.read(buffer)) != -1) {
+//                    audioOut.write(buffer, 0, length);
+//                }
+//                audioOut.close();
+//                final FileInputStream audioIn = new FileInputStream(tempAudioFile);
+//                lMediaPlayer.setDataSource(audioIn.getFD());
+//                lMediaPlayer.prepare();
+//                processResponse(handler, result, client, responseMode, requestType);
+//            } catch (final Exception e) {
+//                // Playback failed.
+//                if (audioPlaybackListener != null) {
+//                    final Runnable appCallback = new Runnable() {
+//                        @Override
+//                        public void run() {
+//                            audioPlaybackListener.onAudioPlaybackError(
+//                                    new LexClientException("Audio playback failed", e));
+//                        }
+//                    };
+//                    handler.post(appCallback);
+//                }
+//                try {
+//                    if (lMediaPlayer.isPlaying() || lMediaPlayer.isLooping()) {
+//                        lMediaPlayer.stop();
+//                    }
+//                    lMediaPlayer.release();
+//                    lMediaPlayer = null;
+//                } catch (final Exception exp) {
+//                    Log.e(TAG, "InteractionClient: Error while releasing MediaPlayer", exp);
+//                }
+//                processResponse(handler, result, client, responseMode, requestType);
+//            } finally {
+//                setAudioPlaybackState(NOT_BUSY);
+//            }
+//
+//        } else {
+//            processResponse(handler, result, client, responseMode, requestType);
+//        }
+//    }
+
     /**
      * Analyzes response from Amazon Lex service. Returns a {@link Runnable}
      * with the next step, which is usually a callback method in the
@@ -271,6 +590,163 @@ public void run() {
         handler.post(response);
     }
 
+//    /**
+//     * Starts listening to the user over the mic.
+//     *
+//     * @param handler {@link Handler}, to interact with app components in the
+//     *            main thread.
+//     * @param microphoneListener {@link MicrophoneListener}, callback to
+//     *            communicate recording over microphone to the application.
+//     * @param lexAudioRecorder {@link LexAudioRecorder}, listens to audio from
+//     *            mic.
+//     */
+//    private void startListening(final Handler handler,
+//                                final MicrophoneListener microphoneListener,
+//                                final LexAudioRecorder lexAudioRecorder,
+//                                final PostContentRequest request,
+//                                final com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient client,
+//                                final ResponseType mode) {
+//        final AudioRecordingTask recordingTask = new AudioRecordingTask(lexAudioRecorder,
+//                new AudioRecordingTaskListener() {
+//                    @Override
+//                    public void onReadyForSpeech() {
+//                        // Client ready to listen to user speech.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.readyForRecording();
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onBeginningOfSpeech() {
+//                        // App detected speech.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.startedRecording();
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//
+//                        // Now since the speech frames have been detected, send
+//                        // the request to the Amazon Lex bot.
+//                        sendAudioRequest(handler, request, client, mode);
+//                    }
+//
+//                    @Override
+//                    public void onBufferReceived(byte[] buffer) {
+//                        // No operation required. This callback is invoked by AudioRecorder. The bytes received
+//                        // in this callback are PCM encoded. LexAudioRecorder extends AudioRecorder to
+//                        // allow other audio encoders, and pipe the encoded bytes through a PipedInputStream.
+//                        // The PipedInputStream used in the request to the
+//                        // Amazon Lex service.
+//                    }
+//
+//                    @Override
+//                    public void onRmsChanged(final float rmsdB) {
+//                        // Sound level has changed.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onSoundLevelChanged(rmsdB);
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onSilenceDetected() {
+//                        // Silence detected after speech.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onRecordingEnd();
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onNoSpeechTimeout() {
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onMicrophoneError(
+//                                            new NoSpeechTimeOutException(
+//                                                    "User did not respond within the speech time out limit."));
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//
+//                        // Stop recording on no timeout.
+//                        lexAudioRecorder.cancel();
+//                        setBusyState(NOT_BUSY);
+//                    }
+//
+//                    @Override
+//                    public void onMaxSpeechTimeout() {
+//                        lexAudioRecorder.cancel();
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onMicrophoneError(
+//                                            new MaxSpeechTimeOutException(
+//                                                    "User did not complete response within the max speech time out limit."));
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onError(final AmazonClientException e) {
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onMicrophoneError(
+//                                            new LexClientException(e.getMessage(), e));
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//                });
+//
+//        recordingTask.execute();
+//    }
+
+//    /**
+//     * Assign a audio playback listener to this interaction client. This will be invoked during
+//     * audio playback events only when audio playback is enabled.
+//     * @param audioPlaybackListener
+//     */
+//    public void setAudioPlaybackListener(AudioPlaybackListener audioPlaybackListener) {
+//        this.audioPlaybackListener = audioPlaybackListener;
+//    }
+//
+//    /**
+//     * Assign a listener for microphone events.
+//     * @param microphoneListener
+//     */
+//    public void setMicrophoneListener(MicrophoneListener microphoneListener) {
+//        this.microphoneListener = microphoneListener;
+//    }
+//
     /**
      * Set an interaction listener for this client. If no internaction listner was provided, the
      * default implementation is used.
@@ -311,5 +787,55 @@ private void setBusyState(boolean busyState) {
         this.requestInProgress = busyState;
     }
 
+//    /**
+//     * Returns {@code true} if audio playback is on progress.
+//     * @return
+//     */
+//    private boolean isAudioPlayBackInProgress() {
+//        return audioPlayBackInProgress;
+//    }
+//
+//    /**
+//     * Sets the current state of the client.
+//     * @param playbackState the audio playback state.
+//     */
+//    private void setAudioPlaybackState(boolean playbackState) {
+//        this.audioPlayBackInProgress = playbackState;
+//    }
+//
+//    /**
+//     * Terminates any audio playback which is in progress.
+//     */
+//    private void terminateAudioPlayback() {
+//        try {
+//            if (lMediaPlayer != null) {
+//                if (lMediaPlayer.isPlaying() || lMediaPlayer.isLooping()) {
+//                    lMediaPlayer.stop();
+//                }
+//                lMediaPlayer.release();
+//                lMediaPlayer = null;
+//            }
+//        } catch (final Exception e) {
+//            // Media player failed.
+//            Log.e(TAG, "InteractionClient: MediaPlayer error", e);
+//        } finally {
+//            setAudioPlaybackState(NOT_BUSY);
+//        }
+//    }
+//
+//    /**
+//     * Terminates active audio decoder and release any allocated AudioRecorder system resources.
+//     */
+//    private void terminateAudioDecoder() {
+//        try {
+//            if (lexAudioRecorder != null) {
+//                lexAudioRecorder.cancel();
+//            }
+//        } catch (final Exception e) {
+//            // Bluefront audio decoder failed.
+//            Log.e(TAG, "InteractionClient: Bluefront audio decoder error", e);
+//        }
+//    }
+
 }
 
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/DefaultInteractionListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/DefaultInteractionListener.java
index 95a527a327..a81f1ddc59 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/DefaultInteractionListener.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/DefaultInteractionListener.java
@@ -1,4 +1,4 @@
-package com.example.prakritibansal.posttextrequest.Listeners;
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Listeners;
 
 /**
  * Created by prakritibansal on 12/28/17.
@@ -6,8 +6,8 @@
 
 import android.util.Log;
 
-import com.example.prakritibansal.posttextrequest.Continuations.LexServiceContinuation;
-import com.example.prakritibansal.posttextrequest.TextResponse;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Continuations.LexServiceContinuation;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.TextResponse;
 
 public class DefaultInteractionListener implements InteractionListener {
     private static final String TAG = "DefaultInteractionLis";
@@ -21,6 +21,7 @@ public void onReadyForFulfillment(TextResponse response) {
     public void promptUserToRespond(TextResponse response,
                                     LexServiceContinuation continuation) {
         Log.d(TAG, "Prompting user to respond");
+        //continuation.continueWithTextInForTextOut();
     }
 
     @Override
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/InteractionListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/InteractionListener.java
index 93091eb1a7..fe7c522b5f 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/InteractionListener.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/InteractionListener.java
@@ -1,11 +1,11 @@
-package com.example.prakritibansal.posttextrequest.Listeners;
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Listeners;
 
 /**
  * Created by prakritibansal on 12/28/17.
  */
 
-import com.example.prakritibansal.posttextrequest.Continuations.LexServiceContinuation;
-import com.example.prakritibansal.posttextrequest.TextResponse;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Continuations.LexServiceContinuation;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.TextResponse;
 
 /**
  * Interaction listener.
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/TextResponse.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/TextResponse.java
index 20f6ce58d3..2eeb28d978 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/TextResponse.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/TextResponse.java
@@ -1,4 +1,4 @@
-package com.example.prakritibansal.posttextrequest;
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText;
 
 /**
  * Created by prakritibansal on 12/28/17.
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Utils/CreateLexServiceRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Utils/CreateLexServiceRequest.java
index f5fd284d24..fef766babe 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Utils/CreateLexServiceRequest.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Utils/CreateLexServiceRequest.java
@@ -1,4 +1,4 @@
-package com.example.prakritibansal.posttextrequest.Utils;
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Utils;
 
 /**
  * Created by prakritibansal on 12/28/17.
@@ -7,7 +7,7 @@
 import com.amazonaws.auth.AWSCredentialsProvider;
 import com.amazonaws.auth.CognitoCredentialsProvider;
 import com.amazonaws.services.lexrts.model.PostTextRequest;
-import com.example.prakritibansal.posttextrequest.config.InteractionConfig;
+import com.amazonaws.mobileconnectors.lex.interactionkit.PostText.config.InteractionConfig;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Voice/SpeechRecognition.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Voice/SpeechRecognition.java
new file mode 100644
index 0000000000..61b8e6c4ca
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Voice/SpeechRecognition.java
@@ -0,0 +1,80 @@
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText.Voice;
+
+import android.app.Dialog;
+import android.content.Intent;
+import android.os.Bundle;
+import android.speech.RecognizerIntent;
+import android.speech.SpeechRecognizer;
+import android.support.v4.content.ContextCompat;
+import android.view.View;
+import android.widget.Toast;
+
+import java.util.ArrayList;
+import java.util.Locale;
+
+/**
+ * Created by prakritibansal on 1/11/18.
+ */
+
+public class SpeechRecognition {
+    public void getSpeechInput(View view) {
+
+        dialog = new Dialog(this);
+        dialog.setContentView(R.layout.dialogue_speech);
+
+
+        int[] colors = {
+                ContextCompat.getColor(this, R.color.colorPrimary),
+                ContextCompat.getColor(this, R.color.colorPrimaryDark),
+                ContextCompat.getColor(this, R.color.colorAccent),
+                ContextCompat.getColor(this, R.color.light_blue),
+                ContextCompat.getColor(this, R.color.bg_main)
+        };
+
+        int[] heights = { 28, 32, 26, 31, 24 };
+
+        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);
+
+        final RecognitionProgressView recognitionProgressView = (RecognitionProgressView) dialog.findViewById(R.id.recognition_view);
+        recognitionProgressView.setSpeechRecognizer(speechRecognizer);
+        recognitionProgressView.setRecognitionListener(new RecognitionListenerAdapter() {
+            @Override
+            public void onResults(Bundle results) {
+                dialog.hide();
+                ArrayList<String> matches = results.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
+                textEntered(matches.get(0));
+                //Toast.makeText(this, matches.get(0), Toast.LENGTH_LONG).show();
+            }
+        });
+        recognitionProgressView.setColors(colors);
+        recognitionProgressView.setBarMaxHeightsInDp(heights);
+        recognitionProgressView.setCircleRadiusInDp(2);
+        recognitionProgressView.setSpacingInDp(4);
+        recognitionProgressView.setIdleStateAmplitudeInDp(5);
+        recognitionProgressView.setRotationRadiusInDp(10);
+        recognitionProgressView.play();
+
+
+        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
+        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
+        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
+        if (intent.resolveActivity(getPackageManager()) != null) {
+            //startActivityForResult(intent, 10);
+            speechRecognizer.startListening(intent);
+            dialog.show();
+        } else {
+            Toast.makeText(this, "Your Device Doesn't Support Speech Input", Toast.LENGTH_SHORT).show();
+        }
+
+
+//        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
+//        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
+//        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
+
+//        if (intent.resolveActivity(getPackageManager()) != null) {
+//            startActivityForResult(intent, 10);
+//        } else {
+//            Toast.makeText(this, "Your Device Doesn't Support Speech Input", Toast.LENGTH_SHORT).show();
+//        }
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/config/InteractionConfig.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/config/InteractionConfig.java
index e776ec8d79..7a5e992595 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/config/InteractionConfig.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/config/InteractionConfig.java
@@ -1,4 +1,19 @@
-package com.example.prakritibansal.posttextrequest.config;
+package com.amazonaws.mobileconnectors.lex.interactionkit.PostText.config;
+
+/*
+ * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
 
 
 import com.amazonaws.mobileconnectors.lex.interactionkit.utils.AudioEncoding;
@@ -10,6 +25,45 @@
  * Contains configuration for SDK's interaction with the users.
  */
 public class InteractionConfig {
+//    /**
+//     * Time out interval in milli-seconds when no sound is heard from the user.
+//     */
+//    private int noSpeechTimeoutInterval;
+//
+//    /**
+//     * Maximum value for no sound time put, in milli-seconds.
+//     */
+//    private int maxSpeechTimeoutInterval;
+//
+//    /**
+//     * The number of speech frames which defines what is a active speech. TODO -
+//     * Add explanations to use this setting.
+//     */
+//    private int startPointingThreshold;
+//
+//    /**
+//     * The number of non-speech frames which defines what a silence is. TODO -
+//     * Add explanations to use this setting.
+//     */
+//    private int endPointingThreshold;
+//
+//    /**
+//     * The likelihood-ratio test threshold value, which will be used to classify
+//     * whether a frame of audio is a speech or not. TODO - Expose this to
+//     * developers? TODO - Add explanations to use this setting.
+//     */
+//    private float lrtThreshold;
+//
+//    /**
+//     * Indicates if the SDK should playback audio response from Amazon Lex.
+//     * Default is "true".
+//     */
+//    private boolean enableAudioPlayback;
+//
+//    /**
+//     * Current audio encoding codec.
+//     */
+//    private AudioEncoding audioEncoding;
 
     /**
      * The Amazon Lex bot name.
@@ -26,6 +80,13 @@
      */
     private String userId;
 
+//    public static final int DEFAULT_NO_SPEECH_TIMEOUT_INTERVAL = 5000;
+//    public static final int DEFAULT_MAX_SPEECH_TIMEOUT_INTERVAL = 15000;
+//    public static final int DEFAULT_START_POINTING_THRESHOLD = 8;
+//    public static final int DEFAULT_END_POINTING_THRESHOLD = 80;
+//    public static final float DEFAULT_LRT_THRESHOLD = 1.8f;
+//    public static final AudioEncoding DEFAULT_AUDIO_ENCODING = AudioEncoding.OPUS;
+
     /**
      * Session attributes which are common for all requests.
      */
@@ -60,6 +121,12 @@ public InteractionConfig(String botName, String botAlias) {
      */
     public InteractionConfig(String botName, String botAlias, String userId,
                              Map<String, String> globalSessionAttributes) {
+//        this.noSpeechTimeoutInterval = DEFAULT_NO_SPEECH_TIMEOUT_INTERVAL;
+//        this.startPointingThreshold = DEFAULT_START_POINTING_THRESHOLD;
+//        this.maxSpeechTimeoutInterval = DEFAULT_MAX_SPEECH_TIMEOUT_INTERVAL;
+//        this.endPointingThreshold = DEFAULT_END_POINTING_THRESHOLD;
+//        this.lrtThreshold = DEFAULT_LRT_THRESHOLD;
+//        this.audioEncoding = DEFAULT_AUDIO_ENCODING;
         this.botName = botName;
         this.botAlias = botAlias;
         this.userId = userId;
@@ -70,6 +137,7 @@ public InteractionConfig(String botName, String botAlias, String userId,
             this.globalSessionAttributes = globalSessionAttributes;
         }
 
+//        this.enableAudioPlayback = true;
     }
 
     /**
@@ -108,6 +176,187 @@ public void setBotAlias(String botAlias) {
         this.botAlias = botAlias;
     }
 
+    /**
+     * Returns current audio encoding, if no encoding is set returns default
+     * encoding.
+     *
+     * @return {@link AudioEncoding}
+     */
+//    public AudioEncoding getAudioEncoding() {
+//        return audioEncoding;
+//    }
+//
+//    /**
+//     * Set audio encoding.
+//     *
+//     * @param audioEncoding {@link AudioEncoding}, encoding used for audio
+//     *            streamed to the service.
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withAudioEncoding(AudioEncoding audioEncoding) {
+//        this.audioEncoding = audioEncoding;
+//        return this;
+//    }
+//
+//    /**
+//     * Set audio encoding.
+//     *
+//     * @param audioEncoding {@link AudioEncoding}, encoding used for audio
+//     *            streamed to the service.
+//     */
+//    public void setAudioEncoding(AudioEncoding audioEncoding) {
+//        this.audioEncoding = audioEncoding;
+//    }
+//
+//    /**
+//     * Returns current audio playback setting.
+//     *
+//     * @return true if the audio playback from the SDK has been enabled.
+//     */
+//    public boolean isEnableAudioPlayback() {
+//        return enableAudioPlayback;
+//    }
+//
+//    /**
+//     * Set this to true if the audio response from Amazon Lex service should be
+//     * played back by the SDK.
+//     *
+//     * @param enableAudioPlayback {@link boolean}
+//     */
+//    public void setEnableAudioPlayback(boolean enableAudioPlayback) {
+//        this.enableAudioPlayback = enableAudioPlayback;
+//    }
+//
+//    /**
+//     * Set this to true if the audio response from Amazon Lex service should be
+//     * played back by the SDK.
+//     *
+//     * @param enableAudioPlayback {@link boolean}
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig WithEnableAudioPlayback(boolean enableAudioPlayback) {
+//        this.enableAudioPlayback = enableAudioPlayback;
+//        return this;
+//    }
+//
+//    /**
+//     * Set no speech time out interval.
+//     *
+//     * @param noSpeechTimeoutInterval time out interval in milli-seconds.
+//     */
+//    public void setNoSpeechTimeoutInterval(int noSpeechTimeoutInterval) {
+//        this.noSpeechTimeoutInterval = noSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set no speech time out interval.
+//     *
+//     * @param noSpeechTimeoutInterval time out interval in milli-seconds.
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withNoSpeechTimeoutInterval(int noSpeechTimeoutInterval) {
+//        this.noSpeechTimeoutInterval = noSpeechTimeoutInterval;
+//        return this;
+//    }
+//
+//    /**
+//     * Returns current no speech time-out value.
+//     *
+//     * @return
+//     */
+//    public int getNoSpeechTimeoutInterval() {
+//        return noSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set maximum interval for speech.
+//     *
+//     * @param maxSpeechTimeoutInterval maximum speech time out interval in
+//     *            milli-seconds.
+//     */
+//    public void setMaxSpeechTimeoutInterval(int maxSpeechTimeoutInterval) {
+//        this.maxSpeechTimeoutInterval = maxSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set maximum interval for speech.
+//     *
+//     * @param maxSpeechTimeoutInterval maximum speech time out interval in
+//     *            milli-seconds.
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withMaxSpeechTimeoutInterval(int maxSpeechTimeoutInterval) {
+//        this.maxSpeechTimeoutInterval = maxSpeechTimeoutInterval;
+//        return this;
+//    }
+//
+//    /**
+//     * Returns maximum interval for speech.
+//     *
+//     * @return
+//     */
+//    public int getMaxSpeechTimeoutInterval() {
+//        return maxSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set start point threshold.
+//     *
+//     * @param startPointingThreshold
+//     */
+//    public void setStartPointingThreshold(int startPointingThreshold) {
+//        this.startPointingThreshold = startPointingThreshold;
+//    }
+//
+//    /**
+//     * Set start point threshold.
+//     *
+//     * @param startPointingThreshold
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withStartPointingThreshold(int startPointingThreshold) {
+//        this.startPointingThreshold = startPointingThreshold;
+//        return this;
+//    }
+//
+//    /**
+//     * Get current star point threshold.
+//     *
+//     * @return
+//     */
+//    public int getStartPointingThreshold() {
+//        return startPointingThreshold;
+//    }
+//
+//    /**
+//     * Set endpoint threshold.
+//     *
+//     * @param endPointingThreshold
+//     */
+//    public void setEndPointingThreshold(int endPointingThreshold) {
+//        this.endPointingThreshold = endPointingThreshold;
+//    }
+//
+//    /**
+//     * Set endpoint threshold.
+//     *
+//     * @param endPointingThreshold
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withEndPointingThreshold(int endPointingThreshold) {
+//        this.endPointingThreshold = endPointingThreshold;
+//        return this;
+//    }
+//
+//    /**
+//     * Get current end point threshold.
+//     *
+//     * @return the end pointing threshold.
+//     */
+//    public int getEndPointingThreshold() {
+//        return endPointingThreshold;
+//    }
+
     /**
      * Get the global SessionAtributes
      *
@@ -166,4 +415,32 @@ public InteractionConfig withUserId(String userId) {
         this.userId = userId;
         return this;
     }
+
+//    /**
+//     * Returns the likely hood ration threshold
+//     *
+//     * @return
+//     */
+//    public float getLrtThreshold() {
+//        return lrtThreshold;
+//    }
+//
+//    /**
+//     * Sets the Likely hood ration threshold for the VAD
+//     *
+//     * @param lrtThreshold
+//     */
+//    public void setLrtThreshold(float lrtThreshold) {
+//        this.lrtThreshold = lrtThreshold;
+//    }
+//
+//    /**
+//     * Sets the Likely hood ration threshold for the VAD
+//     *
+//     * @param lrtThreshold
+//     */
+//    public InteractionConfig withLrtThreshold(float lrtThreshold) {
+//        this.lrtThreshold = lrtThreshold;
+//        return this;
+//    }
 }
