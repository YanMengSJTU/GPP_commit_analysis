diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/BackgroundDrawable.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/BackgroundDrawable.java
deleted file mode 100644
index 716298453d..0000000000
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/BackgroundDrawable.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
-  * Copyright 2017-2017 Amazon.com, Inc. or its affiliates.
-  * All Rights Reserved.
-  *
-  * Licensed under the Apache License, Version 2.0 (the "License");
-  * you may not use this file except in compliance with the License.
-  * You may obtain a copy of the License at
-  *
-  *     http://www.apache.org/licenses/LICENSE-2.0
-  *
-  * Unless required by applicable law or agreed to in writing, software
-  * distributed under the License is distributed on an "AS IS" BASIS,
-  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  * See the License for the specific language governing permissions and
-  * limitations under the License.
-  */
-
-package com.amazonaws.mobile.auth.core.signin.ui;
-
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.Rect;
-import android.graphics.drawable.Drawable;
-
-/**
- * Provides drawable for a background.
- */
-public class BackgroundDrawable extends Drawable {
-    private Paint paint;
-    private int backgroundColor;
-    private static final int DEFAULT_BACKGROUND_COLOR = Color.WHITE;
-
-    public BackgroundDrawable() {
-        paint = new Paint();
-        this.backgroundColor = DEFAULT_BACKGROUND_COLOR;
-    }
-
-    public BackgroundDrawable(int backgroundColor) {
-        paint = new Paint();
-        this.backgroundColor = backgroundColor;
-    }
-
-    @Override
-    public void draw(final Canvas canvas) {
-        final Rect b = getBounds();
-        paint.setColor(this.backgroundColor);
-        canvas.drawRect(0, 0, b.width(), b.height(), paint);
-    }
-
-    @Override
-    public void setAlpha(final int alpha) {
-    }
-
-    @Override
-    public void setColorFilter(final ColorFilter colorFilter) {
-    }
-
-    @Override
-    public int getOpacity() {
-        return PixelFormat.TRANSLUCENT;
-    }
-}
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/DisplayUtils.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/DisplayUtils.java
deleted file mode 100644
index 60a9f1a85a..0000000000
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/DisplayUtils.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
-  * Copyright 2013-2017 Amazon.com, Inc. or its affiliates.
-  * All Rights Reserved.
-  *
-  * Licensed under the Apache License, Version 2.0 (the "License");
-  * you may not use this file except in compliance with the License.
-  * You may obtain a copy of the License at
-  *
-  *     http://www.apache.org/licenses/LICENSE-2.0
-  *
-  * Unless required by applicable law or agreed to in writing, software
-  * distributed under the License is distributed on an "AS IS" BASIS,
-  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  * See the License for the specific language governing permissions and
-  * limitations under the License.
-  */
-
-package com.amazonaws.mobile.auth.core.signin.ui;
-
-import android.content.res.Resources;
-import android.graphics.drawable.ShapeDrawable;
-import android.graphics.drawable.shapes.RoundRectShape;
-import android.graphics.drawable.shapes.Shape;
-import android.util.DisplayMetrics;
-
-/**
- * A class containing UI Utility methods.
- */
-public class DisplayUtils {
-    private static final DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();
-    private static int dpMultiplier = (metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);
-
-    /**
-     * @param dp number of design pixels.
-     * @return number of pixels corresponding to the desired design pixels.
-     */
-    public static int dp(final int dp) {
-        return dp * dpMultiplier;
-    }
-
-    /**
-     * Create a rounded rectangle with a specified corner radius.
-     *
-     * @param cornerRadius the corner radius in pixels
-     * @return the shape drawable.
-     */
-    public static Shape getRoundedRectangleShape(int cornerRadius) {
-
-        // Background color for Button.
-        return new RoundRectShape(
-            new float[]{
-                cornerRadius, cornerRadius, cornerRadius, cornerRadius,
-                cornerRadius, cornerRadius, cornerRadius, cornerRadius},
-            null, null);
-    }
-
-    public static ShapeDrawable getRoundedRectangleBackground(int cornerRadius, int backgroundColor) {
-        final ShapeDrawable drawable = new ShapeDrawable(
-            getRoundedRectangleShape(cornerRadius));
-        drawable.getPaint().setColor(backgroundColor);
-        return drawable;
-    }
-}
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/SplitBackgroundDrawable.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/SplitBackgroundDrawable.java
deleted file mode 100644
index c02a9e25f3..0000000000
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/SplitBackgroundDrawable.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
-  * Copyright 2013-2017 Amazon.com, Inc. or its affiliates.
-  * All Rights Reserved.
-  *
-  * Licensed under the Apache License, Version 2.0 (the "License");
-  * you may not use this file except in compliance with the License.
-  * You may obtain a copy of the License at
-  *
-  *     http://www.apache.org/licenses/LICENSE-2.0
-  *
-  * Unless required by applicable law or agreed to in writing, software
-  * distributed under the License is distributed on an "AS IS" BASIS,
-  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  * See the License for the specific language governing permissions and
-  * limitations under the License.
-  */
-
-package com.amazonaws.mobile.auth.core.signin.ui;
-
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.Rect;
-import android.graphics.drawable.Drawable;
-
-/**
- * Provides drawable for a vertically split background.
- */
-public class SplitBackgroundDrawable extends Drawable {
-    private Paint paint;
-    private int distanceFromTopToSplitPoint = -1;
-    private int topBackgroundColor;
-    private static final int DEFAULT_BACKGROUND_COLOR = Color.WHITE;
-
-    public SplitBackgroundDrawable(int distanceFromTop) {
-        paint = new Paint();
-        this.topBackgroundColor = DEFAULT_BACKGROUND_COLOR;
-        setSplitPointDistanceFromTop(distanceFromTop);
-    }
-
-    public SplitBackgroundDrawable(int distanceFromTop, int topBackgroundColor) {
-        paint = new Paint();
-        this.topBackgroundColor = topBackgroundColor;
-        setSplitPointDistanceFromTop(distanceFromTop);
-    }
-
-    public void setSplitPointDistanceFromTop(int distanceFromTop) {
-        distanceFromTopToSplitPoint = distanceFromTop;
-        invalidateSelf();
-    }
-
-    @Override
-    public void draw(final Canvas canvas) {
-        final Rect b = getBounds();
-        paint.setColor(this.topBackgroundColor);
-        float y = distanceFromTopToSplitPoint < b.height() ? distanceFromTopToSplitPoint : b.height();
-
-        canvas.drawRect(0, 0, b.width(), y, paint);
-        paint.setColor(DEFAULT_BACKGROUND_COLOR);
-        canvas.drawRect(0, y, b.width(), b.height(), paint);
-    }
-
-    @Override
-    public void setAlpha(final int alpha) {
-    }
-
-    @Override
-    public void setColorFilter(final ColorFilter colorFilter) {
-    }
-
-    @Override
-    public int getOpacity() {
-        return PixelFormat.TRANSLUCENT;
-    }
-}
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/buttons/SignInButton.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/buttons/SignInButton.java
deleted file mode 100644
index a7c45e89e5..0000000000
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/buttons/SignInButton.java
+++ /dev/null
@@ -1,308 +0,0 @@
-/*
-  * Copyright 2013-2017 Amazon.com, Inc. or its affiliates.
-  * All Rights Reserved.
-  *
-  * Licensed under the Apache License, Version 2.0 (the "License");
-  * you may not use this file except in compliance with the License.
-  * You may obtain a copy of the License at
-  *
-  *     http://www.apache.org/licenses/LICENSE-2.0
-  *
-  * Unless required by applicable law or agreed to in writing, software
-  * distributed under the License is distributed on an "AS IS" BASIS,
-  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  * See the License for the specific language governing permissions and
-  * limitations under the License.
-  */
-
-package com.amazonaws.mobile.auth.core.signin.ui.buttons;
-
-import android.content.Context;
-import android.content.res.TypedArray;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.RectF;
-import android.graphics.Typeface;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.graphics.drawable.GradientDrawable;
-import android.graphics.drawable.LayerDrawable;
-import android.graphics.drawable.ShapeDrawable;
-import android.graphics.drawable.StateListDrawable;
-import android.text.TextPaint;
-import android.text.method.TransformationMethod;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.amazonaws.mobile.auth.core.R;
-
-import static com.amazonaws.mobile.auth.core.signin.ui.DisplayUtils.dp;
-import static com.amazonaws.mobile.auth.core.signin.ui.DisplayUtils.getRoundedRectangleBackground;
-
-/**
- * Base class for Sign in Buttons
- */
-public class SignInButton extends LinearLayout {
-    /** Image left margin. */
-    private static final int IMAGE_LEFT_MARGIN = dp(8);
-
-    /** Image right margin. */
-    private static final int IMAGE_RIGHT_MARGIN = dp(8);
-
-    /** Text left margin. */
-    private static final int TEXT_LEFT_MARGIN = dp(2);
-
-    /** Text right margin. */
-    private static final int TEXT_RIGHT_MARGIN = dp(8);
-
-    /** Min text size in SP. */
-    private static final float MIN_TEXT_SIZE_SP = 8;
-
-    /** Max text size in pixels. */
-    private static final float MAX_TEXT_SIZE_PX = dp(50);
-
-    /** Color for the border. */
-    private static final int BORDER_COLOR = 0xFF000000;
-
-    /** Button Attributes. */
-    private final SignInButtonAttributes attributes;
-
-    /** Image View for displaying the Icon. */
-    protected ImageView imageView;
-
-    /** Text View for displaying the text */
-    protected TextView textView;
-
-    /** Bitmap for the icon. */
-    protected Bitmap bitmap;
-
-    /** Boolean to keep track of whether the button should only display the image and no text. */
-    protected boolean isSmallStyle = false;
-
-    public SignInButton(final Context context, final AttributeSet attrs,
-                        final int defStyleAttr, final SignInButtonAttributes buttonAttributes) {
-        super(context, attrs, defStyleAttr);
-        this.attributes = buttonAttributes;
-        setFocusable(true);
-        setClickable(true);
-        this.setOrientation(HORIZONTAL);
-        this.setGravity(Gravity.CENTER_VERTICAL);
-        this.setBackgroundDrawable(getBackgroundStatesDrawable());
-
-        imageView = new ImageView(context);
-        bitmap = BitmapFactory.decodeResource(getResources(), attributes.getImageIconResourceId());
-        final BitmapDrawable bitmapDrawable = new BitmapDrawable(getResources(), bitmap);
-        imageView.setImageDrawable(bitmapDrawable);
-        imageView.setScaleType(ImageView.ScaleType.FIT_XY);
-        imageView.setAdjustViewBounds(true);
-
-        final LinearLayout.LayoutParams imageLayoutParams
-            = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
-        imageLayoutParams.setMargins(IMAGE_LEFT_MARGIN, 0, IMAGE_RIGHT_MARGIN, 0);
-
-        imageLayoutParams.weight = 0;
-        this.addView(imageView, imageLayoutParams);
-
-        textView = new TextView(context);
-        textView.setTextColor(attributes.getTextColor());
-        textView.setTypeface(null, Typeface.BOLD);
-        textView.setSingleLine(true);
-        textView.setGravity(Gravity.CENTER_VERTICAL); // Gravity.CENTER_HORIZONTAL
-        final String buttonText;
-        if (attrs != null) {
-            // Get styled attributes for the button style and button text.
-            final TypedArray styledAttributes = context.obtainStyledAttributes(attrs, R.styleable.SignInButton);
-            if (styledAttributes.getInt(R.styleable.SignInButton_button_style, 0) > 0) {
-                isSmallStyle = true;
-            }
-            buttonText = styledAttributes.getString(R.styleable.SignInButton_text);
-            styledAttributes.recycle();
-        } else {
-            buttonText = null;
-        }
-
-        if (buttonText != null) {
-            textView.setText(buttonText);
-        } else {
-            textView.setText(attributes.getDefaultTextResourceId());
-        }
-
-        final LinearLayout.LayoutParams textViewLayoutParams
-            = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
-        textViewLayoutParams.setMargins(dp(TEXT_LEFT_MARGIN), 0, dp(TEXT_RIGHT_MARGIN), 0);
-
-        // Use layout weight so the text view will take up the available space in the view.
-        textViewLayoutParams.weight = 1;
-        this.addView(textView, textViewLayoutParams);
-
-        updateStyle();
-        invalidate();
-    }
-
-    /**
-     * Create the button background.
-     * @param buttonFaceColor the color for the button.
-     * @return the background drawable.
-     */
-    private Drawable getButtonBackground(final int buttonFaceColor) {
-        final int cornerRadius = attributes.getCornerRadius();
-        // Set Button shape and background color.
-        final ShapeDrawable insetBackgroundDrawable =
-            getRoundedRectangleBackground(cornerRadius, buttonFaceColor);
-
-        // Top Shadow for Button.
-        final GradientDrawable outerShadowTopDrawable = new GradientDrawable(
-            GradientDrawable.Orientation.LEFT_RIGHT,
-            new int[]{attributes.getTopShadowColor(), attributes.getTopShadowColor()});
-        outerShadowTopDrawable.setCornerRadius(dp(cornerRadius));
-
-        // Bottom Shadow for Button.
-        final GradientDrawable outerShadowBottomDrawable = new GradientDrawable(
-            GradientDrawable.Orientation.LEFT_RIGHT, new int[]{
-            attributes.getBottomShadowColor(), attributes.getBottomShadowColor()});
-        outerShadowBottomDrawable.setCornerRadius(dp(cornerRadius));
-
-        final LayerDrawable layerDrawable = new LayerDrawable(
-            new Drawable[] {outerShadowTopDrawable,
-                            outerShadowBottomDrawable,
-                            insetBackgroundDrawable});
-
-        // Top shadow is the furthest down drawable, so it is ok if this overlaps the bottom shadow.
-        layerDrawable.setLayerInset(0, 0, 0, 0, 0);
-        
-        // Bottom shadow does not overlap the top shadow.
-        layerDrawable.setLayerInset(1, attributes.getTopShadowThickness(), attributes.getTopShadowThickness(), 0, 0);
-        
-        // Background must not overlap either of the shadows.
-        layerDrawable.setLayerInset(2, attributes.getTopShadowThickness(), attributes.getTopShadowThickness(),
-            attributes.getBottomShadowThickness(), attributes.getBottomShadowThickness());
-
-        return layerDrawable;
-    }
-
-    /**
-     * @return the button background drawable states for when pressed and not pressed.
-     */
-    private Drawable getBackgroundStatesDrawable() {
-        final StateListDrawable states = new StateListDrawable();
-        states.addState(new int[] {android.R.attr.state_pressed},
-            getButtonBackground(attributes.getBackgroundColorPressed()));
-        states.addState(new int[] {},
-            getButtonBackground(attributes.getBackgroundColor()));
-        return states;
-    }
-
-    private void updateStyle() {
-        if (isSmallStyle) {
-            textView.setVisibility(GONE);
-            this.setGravity(Gravity.CENTER);
-        } else {
-            textView.setVisibility(VISIBLE);
-            this.setGravity(Gravity.CENTER_VERTICAL);
-        }
-    }
-
-    /**
-     * Sets the button style to small, where only the icon will be shown.
-     * @param shouldSetStyleSmall true if style should be small, otherwise false.
-     */
-    public void setSmallStyle(final boolean shouldSetStyleSmall) {
-        isSmallStyle = shouldSetStyleSmall;
-        updateStyle();
-    }
-
-    /**
-     * Set the button text.
-     * @param text the text string.
-     */
-    public void setButtonText(final String text) {
-        textView.setText(text);
-        resizeButtonText();
-    }
-
-    /**
-     * Set the button text from a resource.
-     * @param resId the resource id containing a string.
-     */
-    public void setButtonText(final int resId) {
-        textView.setText(resId);
-        resizeButtonText();
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-        ViewGroup.LayoutParams layoutParams = imageView.getLayoutParams();
-        int sideSize = (int)(getMeasuredHeight() * 0.72);
-        if (sideSize > bitmap.getHeight()) {
-            sideSize = bitmap.getHeight();
-        }
-
-        // Set image to a square based on the desired height.
-        layoutParams.height = sideSize;
-        layoutParams.width = sideSize;
-    }
-
-    private boolean doesTextViewFit(final float suggestedSize, final RectF availableRect) {
-        final TextPaint textPaint = new TextPaint(textView.getPaint());
-        textPaint.setTextSize(suggestedSize);
-        final TransformationMethod transformMethod = textView.getTransformationMethod();
-        final String text = (transformMethod == null) ? textView.getText().toString()
-            : transformMethod.getTransformation(textView.getText(), textView).toString();
-
-        final RectF textRect = new RectF(0, 0, textPaint.measureText(text), textPaint.getFontSpacing());
-
-        // Return true if the text view fits, even though it may have extra space.
-        return availableRect.contains(textRect);
-    }
-
-    private float findBestSize(final float start, final float end, final RectF availableSpace) {
-        float low = start;
-        float high = end;
-        float midpoint;
-        float bestFit = low;
-        // Binary search to find the best size.
-        while (low <= high) {
-            midpoint = (low + high) / 2;
-            if (doesTextViewFit(midpoint, availableSpace)) {
-                bestFit = midpoint;
-                low = midpoint + 0.5f;
-            } else {
-                high = midpoint - 0.5f;
-            }
-        }
-        return bestFit;
-    }
-
-    /**
-     * Resize the text to the best fit.
-     */
-    private void resizeButtonText() {
-        if (getMeasuredWidth() == 0 || isSmallStyle) {
-            return;
-        }
-
-        final float minTextSize = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, MIN_TEXT_SIZE_SP,
-            getResources().getDisplayMetrics());
-        final RectF availableSpaceRect = new RectF();
-        availableSpaceRect.right = textView.getMeasuredWidth() - textView.getCompoundPaddingLeft()
-            - textView.getCompoundPaddingRight();
-        availableSpaceRect.bottom = textView.getMeasuredHeight() - textView.getCompoundPaddingBottom()
-            - textView.getCompoundPaddingTop();
-
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,
-            findBestSize(minTextSize, MAX_TEXT_SIZE_PX, availableSpaceRect));
-    }
-
-    @Override
-    protected void onSizeChanged(final int width, final int height, final int oldwidth, final int oldheight) {
-        super.onSizeChanged(width, height, oldwidth, oldheight);
-        if (width != oldwidth || height != oldheight)
-            resizeButtonText();
-    }
-}
diff --git a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/buttons/SignInButtonAttributes.java b/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/buttons/SignInButtonAttributes.java
deleted file mode 100644
index d193d0e60c..0000000000
--- a/aws-java-sdk-auth-core/src/main/java/com/amazonaws/mobile/auth/core/signin/ui/buttons/SignInButtonAttributes.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
-  * Copyright 2013-2017 Amazon.com, Inc. or its affiliates.
-  * All Rights Reserved.
-  *
-  * Licensed under the Apache License, Version 2.0 (the "License");
-  * you may not use this file except in compliance with the License.
-  * You may obtain a copy of the License at
-  *
-  *     http://www.apache.org/licenses/LICENSE-2.0
-  *
-  * Unless required by applicable law or agreed to in writing, software
-  * distributed under the License is distributed on an "AS IS" BASIS,
-  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  * See the License for the specific language governing permissions and
-  * limitations under the License.
-  */
-
-package com.amazonaws.mobile.auth.core.signin.ui.buttons;
-
-/**
- * Sign-in Button Attributes
- */
-public class SignInButtonAttributes {
-    private int cornerRadius;
-    private int backgroundColor;
-    private int backgroundColorPressed;
-    private int topShadowColor;
-    private int bottomShadowColor;
-    private int topShadowThickness;
-    private int bottomShadowThickness;
-    private int textColor;
-    private int defaultTextResourceId;
-    private int imageIconResourceId;
-
-    public int getCornerRadius() {
-        return cornerRadius;
-    }
-
-    public int getBackgroundColor() {
-        return backgroundColor;
-    }
-
-    public int getBackgroundColorPressed() {
-        return backgroundColorPressed;
-    }
-
-    public int getTopShadowColor() {
-        return topShadowColor;
-    }
-
-    public int getBottomShadowColor() {
-        return bottomShadowColor;
-    }
-
-    public int getTopShadowThickness() {
-        return topShadowThickness;
-    }
-
-    public int getBottomShadowThickness() {
-        return bottomShadowThickness;
-    }
-
-    public int getTextColor() {
-        return textColor;
-    }
-
-    public int getDefaultTextResourceId() {
-        return defaultTextResourceId;
-    }
-
-    public int getImageIconResourceId() {
-        return imageIconResourceId;
-    }
-
-    public SignInButtonAttributes withCornerRadius(int cornerRadius) {
-        this.cornerRadius = cornerRadius;
-        return this;
-    }
-
-    public SignInButtonAttributes withBackgroundColor(int backgroundColor) {
-        this.backgroundColor = backgroundColor;
-        return this;
-    }
-
-    public SignInButtonAttributes withBackgroundColorPressed(int backgroundColorPressed) {
-        this.backgroundColorPressed = backgroundColorPressed;
-        return this;
-    }
-
-    public SignInButtonAttributes withTopShadowColor(int topShadowColor) {
-        this.topShadowColor = topShadowColor;
-        return this;
-    }
-
-    public SignInButtonAttributes withBottomShadowColor(int bottomShadowColor) {
-        this.bottomShadowColor = bottomShadowColor;
-        return this;
-    }
-
-    public SignInButtonAttributes withTopShadowThickness(int topShadowThickness) {
-        this.topShadowThickness = topShadowThickness;
-        return this;
-    }
-
-    public SignInButtonAttributes withBottomShadowThickness(int bottomShadowThickness) {
-        this.bottomShadowThickness = bottomShadowThickness;
-        return this;
-    }
-
-    public SignInButtonAttributes withTextColor(int textColor) {
-        this.textColor = textColor;
-        return this;
-    }
-
-    public SignInButtonAttributes withDefaultTextResourceId(int defaultTextResourceId) {
-        this.defaultTextResourceId = defaultTextResourceId;
-        return this;
-    }
-
-    public SignInButtonAttributes withImageIconResourceId(int imageIconResourceId) {
-        this.imageIconResourceId = imageIconResourceId;
-        return this;
-    }
-}
