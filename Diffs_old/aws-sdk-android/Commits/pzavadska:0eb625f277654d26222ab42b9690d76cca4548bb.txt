diff --git a/CHANGELOG.md b/CHANGELOG.md
index 128c28d8e0..6721280d9b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,72 @@
 # Change Log - AWS SDK for Android
 
+## [Release 2.6.17](https://github.com/aws/aws-sdk-android/releases/tag/release_v2.6.17)
+
+### Bug Fixes
+
+* **Amazon Pinpoint**
+  * Issue with Android API level 23 causing crashes when generating notification icon from a bitmap. Updated SDK behavior to only generate icon from a bitmap on API level 24 and above.
+  * Fixed an issue when the userId was unset, registering for notifications would clobber the userId on the server. This overwrote any value set by `updateEndpointProfile`. Set user id to empty string to reset server user id, null to retain server value.
+  * Issue with ANRs (Application Not Responding) when downloading images for notifications. Updated SDK behavior to background download image tasks.
+  * Added an option to specify a custom ExecutorService through PinpointConfiguration for the TargetingClient. Use `PinpointConfiguration.withExecutor(ExecutorService)` to choose an Executor to register for Pinpoint notifications and to run handlers. Choosing a single thread Executor can be used when running handlers sequentially on the same thread after registration.
+
+* **Amazon S3**
+  * Optimized the `TransferService.loadAndResumeTransfersFromDB` to minimize the time holding the database connection.
+
+## [Release 2.6.16](https://github.com/aws/aws-sdk-android/releases/tag/release_v2.6.16)
+
+### Enhancements
+
+* **Amazon S3**
+  * Added `TransferUtilityOptions` to configure the size of the transfer thread pool and the time interval in `TransferService` to check for unfinished transfers and resume them.
+  * Fixed bugs and added some performance improvements.
+
+## [Release 2.6.15](https://github.com/aws/aws-sdk-android/releases/tag/release_v2.6.15)
+
+### New Features
+
+* **Amazon Cognito Identity Provider**
+  * Support for user migration over lambda trigger in Cognito User Pools.
+
+### Enhancements
+
+* **Amazon Kinesis Video Streams**
+  * **Breaking API  Changes**: Added `uploadHandle` parameter to the following APIs.
+      * `KinesisVideoProducerStream.getDataStream()`
+      * `KinesisVideoProducerStream.fragmentAck()`
+      * `KinesisVideoProducerStream.streamTerminated()`
+      * `StremCallbacks.streamDataAvailable()`
+      * `StremCallbacks.streamClosed()`
+      * `NativeKinesisVideoProducerJni.streamClosed()`
+      * `NativeKinesisVideoProducerJni.fragmentAck()`
+      * `NativeKinesisVideoProducerJni.streamDataAvailable()`
+      * `NativeKinesisVideoProducerJni.streamTerminated()`
+      * `NativeKinesisVideoProducerStream.getDataStream()`
+      * `NativeKinesisVideoProducerStream.fragmentAck()`
+      * `NativeKinesisVideoProducerStream.parseFragmentAck()`
+      * `NativeKinesisVideoProducerStream.streamTerminated()`
+      * `NativeKinesisVideoProducerStream.streamDataAvailable()`
+      * `NativeKinesisVideoProducerStream.streamClosed()`
+      * `DefaultStreamCallbacks.streamDataAvailable()`
+      * `DefaultStreamCallbacks.streamClosed()`
+      * `AckConsumer.AckConsumer()`
+      * `DefaultServiceCallbacksImpl.CompletionCallback()`
+
+## [Release 2.6.14](https://github.com/aws/aws-sdk-android/releases/tag/release_v2.6.14)
+
+### Bug Fixes
+
+* **Amazon CloudWatch Logs**
+  * Allow `Amazon CloudWatch Logs` SDK to be fetched via maven. See [issue #392](https://github.com/aws/aws-sdk-android/issues/392)
+
+### Enhancements
+
+* **Amazon Cognito Identity Provider**
+  * Repackaged Amazon Cognito Identity Service Provider Android SDK to change dependency for ASF components.
+
+* **Amazon Cognito Auth**
+  * Repackaged Amazon Cognito Auth Android SDK to change dependency for ASF components. Use `{ transitive = true; }` while importing `aws-android-sdk-cognitoauth` via maven in gradle.
+
 ## [Release 2.6.13](https://github.com/aws/aws-sdk-android/releases/tag/release_v2.6.13)
 
 ### Bug Fixes
diff --git a/README.md b/README.md
index db5d7ab35b..c7639c7b8f 100644
--- a/README.md
+++ b/README.md
@@ -14,7 +14,7 @@ The [AWS SDK for Android](http://aws.amazon.com/sdkforandroid) provides a librar
 
 * **[Code Samples](https://github.com/awslabs/aws-sdk-android-samples)** - Repository of example projects using the SDK.
 * **[AWS Mobile Forum](https://forums.aws.amazon.com/forum.jspa?forumID=88)** â€“ Ask questions, get help, and give feedback
-* **[Developer Guide](http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/)** - For in-depth getting started and usage information.
+* **[Developer Guide](https://docs.aws.amazon.com/aws-mobile/latest/developerguide/getting-started.html)** - For in-depth getting started and usage information.
 * **[Javadoc](http://docs.aws.amazon.com/AWSAndroidSDK/latest/javadoc/)** - For operations, parameters, responses, and examples
 * **[AWS Mobile Developer Blog](http://mobile.awsblog.com/)** - For updates and guidance on using the AWS SDK for Android
 * **[Release Notes](https://aws.amazon.com/releasenotes/Android)** - To see the latest features, bug fixes, and changes in the SDK
@@ -29,29 +29,33 @@ This section explains how to understand and work with the various components of
 
 The AWS SDK for Android supports the following AWS services:
 
+* [Amazon API Gateway](https://aws.amazon.com/api-gateway/)
+* [Amazon Auto Scaling](https://aws.amazon.com/autoscaling/)
 * [Amazon CloudWatch](https://aws.amazon.com/cloudwatch/)
+* [Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_GettingStarted.html)
 * [Amazon Cognito](https://aws.amazon.com/cognito/)
+* [Amazon Cognito Auth](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html)
 * [Amazon DynamoDB](https://aws.amazon.com/dynamodb/)
 * [Amazon Elastic Compute Cloud (EC2)](https://aws.amazon.com/ec2/)
+* [Amazon Elastic Load Balancing (ELB)](https://aws.amazon.com/elasticloadbalancing/)
+* [AWS IoT](https://aws.amazon.com/iot/)
+* [AWS Key Management Service (KMS)](https://aws.amazon.com/kms/)
 * [Amazon Kinesis Firehose](https://aws.amazon.com/kinesis/firehose/)
 * [Amazon Kinesis Streams](https://aws.amazon.com/kinesis/streams/)
+* [Amazon Kinesis Video Streams](https://aws.amazon.com/kinesis/video-streams/)
+* [AWS Lambda](https://aws.amazon.com/lambda/)
 * [Amazon Lex](https://aws.amazon.com/lex)
 * [Amazon Machine Learning](https://aws.amazon.com/machine-learning/)
 * [Amazon Mobile Analytics](https://aws.amazon.com/mobileanalytics/)
-* [Amazon Polly](https://aws.amazon.com/polly/)
 * [Amazon Pinpoint](https://aws.amazon.com/pinpoint/)
+* [Amazon Polly](https://aws.amazon.com/polly/)
+* [Amazon Rekoginiton](https://aws.amazon.com/rekognition/)
 * [Amazon S3](https://aws.amazon.com/s3/)
 * [Amazon Security Token Service (STS)](https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html)
 * [Amazon Simple Email Service (SES)](https://aws.amazon.com/ses/)
 * [Amazon Simple Notification Service (SNS)](https://aws.amazon.com/sns/)
 * [Amazon Simple Queue Service (SQS)](https://aws.amazon.com/sqs/)
 * [Amazon SimpleDB](https://aws.amazon.com/simpledb/)
-* [Auto Scaling](https://aws.amazon.com/autoscaling/)
-* [AWS Key Management Service (KMS)](https://aws.amazon.com/kms/)
-* [AWS Lambda](https://aws.amazon.com/lambda/)
-* [Elastic Load Balancing](https://aws.amazon.com/elasticloadbalancing/)
-
-
 
 ### A Quick Code Example
 
@@ -95,7 +99,7 @@ private class S3Example extends AsyncTask<Void,Void,Void>{
 ### SDK Fundamentals
 There are only a few fundamentals that are helpful to know when developing against the AWS SDK for Android.
 
-* Never embed credentrials in an Android application.  It is trivially easy to decompile applications and steal embedded credentials.  Always use temporarily vended credentials from services such as [Amazon Cognito Identity](http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-auth.html).
+* Never embed credentrials in an Android application.  It is trivially easy to decompile applications and steal embedded credentials.  Always use temporarily vended credentials from services such as [Amazon Cognito Identity](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html).
 * Unless explicitly stated, calls are synchronous and must be taken off of the main thread.
 * Unless explicitly stated, calls can always throw an AmazonServiceException or an AmazonClientException (depending on if the exception is generated by the client or the service).
 * The SDK will handle re-trying requests automatically, but unless explicitly stated will throw an exception if it cannot contact AWS.
diff --git a/aws-android-sdk-apigateway-core/pom.xml b/aws-android-sdk-apigateway-core/pom.xml
index d0e1991707..fb5d72a857 100644
--- a/aws-android-sdk-apigateway-core/pom.xml
+++ b/aws-android-sdk-apigateway-core/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-auth-core/pom.xml b/aws-android-sdk-auth-core/pom.xml
index fa23794d39..fa5907d6e9 100644
--- a/aws-android-sdk-auth-core/pom.xml
+++ b/aws-android-sdk-auth-core/pom.xml
@@ -21,7 +21,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -29,7 +29,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
 
     <dependency>
diff --git a/aws-android-sdk-auth-facebook/pom.xml b/aws-android-sdk-auth-facebook/pom.xml
index 9811586097..f10f4e230f 100644
--- a/aws-android-sdk-auth-facebook/pom.xml
+++ b/aws-android-sdk-auth-facebook/pom.xml
@@ -21,7 +21,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <repositories>
@@ -36,7 +36,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
     <dependency>
diff --git a/aws-android-sdk-auth-google/pom.xml b/aws-android-sdk-auth-google/pom.xml
index 042dea1940..c6e5e12e13 100644
--- a/aws-android-sdk-auth-google/pom.xml
+++ b/aws-android-sdk-auth-google/pom.xml
@@ -21,7 +21,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <repositories>
@@ -40,7 +40,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
     
diff --git a/aws-android-sdk-auth-ui/pom.xml b/aws-android-sdk-auth-ui/pom.xml
index 7efa35e3ed..d2b59bcce8 100644
--- a/aws-android-sdk-auth-ui/pom.xml
+++ b/aws-android-sdk-auth-ui/pom.xml
@@ -21,7 +21,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <repositories>
@@ -36,28 +36,28 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-google</artifactId>
       <optional>true</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-facebook</artifactId>
       <optional>true</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-userpools</artifactId>
       <optional>true</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
     <dependency>
diff --git a/aws-android-sdk-auth-ui/src/main/java/com/amazonaws/mobile/auth/ui/SignInView.java b/aws-android-sdk-auth-ui/src/main/java/com/amazonaws/mobile/auth/ui/SignInView.java
index aace5316dd..055daa1fa8 100644
--- a/aws-android-sdk-auth-ui/src/main/java/com/amazonaws/mobile/auth/ui/SignInView.java
+++ b/aws-android-sdk-auth-ui/src/main/java/com/amazonaws/mobile/auth/ui/SignInView.java
@@ -58,7 +58,7 @@
     private static final int IMAGE_LAYOUT_MARGINS = dp(10);
 
     /** String that represents the SDK Version. */
-    private static final String SDK_VERSION = "2.6.13";
+    private static final String SDK_VERSION = "2.6.17";
 
     /** Common Prefix of the namespaces of different SignIn providers. */
     private static final String NAMESPACE_COMMON_PREFIX = "com.amazonaws.mobile.auth";
diff --git a/aws-android-sdk-auth-userpools/pom.xml b/aws-android-sdk-auth-userpools/pom.xml
index 7bcb4f1765..3ca4012bb0 100644
--- a/aws-android-sdk-auth-userpools/pom.xml
+++ b/aws-android-sdk-auth-userpools/pom.xml
@@ -21,7 +21,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <repositories>
@@ -36,14 +36,14 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-cognitoidentityprovider</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
 
diff --git a/aws-android-sdk-autoscaling/pom.xml b/aws-android-sdk-autoscaling/pom.xml
index e6cf3a0670..23ee2e3ccb 100644
--- a/aws-android-sdk-autoscaling/pom.xml
+++ b/aws-android-sdk-autoscaling/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-cloudwatch/pom.xml b/aws-android-sdk-cloudwatch/pom.xml
index 16ddbffb39..d97a813726 100644
--- a/aws-android-sdk-cloudwatch/pom.xml
+++ b/aws-android-sdk-cloudwatch/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-cognito/pom.xml b/aws-android-sdk-cognito/pom.xml
index f9bd9c8bcd..78e1689e7b 100644
--- a/aws-android-sdk-cognito/pom.xml
+++ b/aws-android-sdk-cognito/pom.xml
@@ -6,14 +6,14 @@
   <artifactId>aws-android-sdk-cognito</artifactId>
   <packaging>jar</packaging>
   <name>AWS SDK for Android - Amazon Cognito Sync</name>
-  <version>2.6.13</version>
+  <version>2.6.17</version>
   <description>The AWS Android SDK for Amazon Cognito Sync module holds the client classes that are used for communicating with Amazon Cognito Sync Service</description>
   <url>http://aws.amazon.com/sdkforandroid</url>
 
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <licenses>
@@ -29,7 +29,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>com.google.android</groupId>
diff --git a/aws-android-sdk-cognito/src/main/resources/fabric/com.amazonaws.aws-android-sdk-cognito.properties b/aws-android-sdk-cognito/src/main/resources/fabric/com.amazonaws.aws-android-sdk-cognito.properties
index 7fde7ea3bf..08cfa33f9b 100644
--- a/aws-android-sdk-cognito/src/main/resources/fabric/com.amazonaws.aws-android-sdk-cognito.properties
+++ b/aws-android-sdk-cognito/src/main/resources/fabric/com.amazonaws.aws-android-sdk-cognito.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.amazonaws.aws-android-sdk-cognito
-fabric-version=2.6.13
+fabric-version=2.6.17
 fabric-build-type=binary
diff --git a/aws-android-sdk-cognitoauth/pom.xml b/aws-android-sdk-cognitoauth/pom.xml
index 8cceb84e5c..ca9e6c1f8b 100644
--- a/aws-android-sdk-cognitoauth/pom.xml
+++ b/aws-android-sdk-cognitoauth/pom.xml
@@ -6,14 +6,14 @@
   <artifactId>aws-android-sdk-cognitoauth</artifactId>
   <packaging>aar</packaging>
   <name>AWS SDK for Android - Amazon Cognito Auth</name>
-  <version>2.6.13</version>
+  <version>2.6.17</version>
   <description>The AWS Android SDK with app integration for Amazon Cognito Your User Pools Service</description>
   <url>http://aws.amazon.com/sdkforandroid</url>
 
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <repositories>
@@ -42,6 +42,12 @@
       <artifactId>android</artifactId>
       <version>4.1.1.4</version>
       <scope>provided</scope>
+    </dependency>   
+    <dependency>
+      <groupId>com.amazonaws</groupId>
+      <artifactId>aws-android-sdk-cognitoidentityprovider-asf</artifactId>
+      <optional>false</optional>
+      <version>1.0.0</version>
     </dependency>
     <dependency>
       <groupId>com.android.support</groupId>
diff --git a/aws-android-sdk-cognitoidentityprovider/pom.xml b/aws-android-sdk-cognitoidentityprovider/pom.xml
index df10677f1d..956deb15fa 100644
--- a/aws-android-sdk-cognitoidentityprovider/pom.xml
+++ b/aws-android-sdk-cognitoidentityprovider/pom.xml
@@ -6,14 +6,14 @@
   <artifactId>aws-android-sdk-cognitoidentityprovider</artifactId>
   <packaging>jar</packaging>
   <name>AWS SDK for Android - Amazon Cognito Identity Provider</name>
-  <version>2.6.13</version>
+  <version>2.6.17</version>
   <description>The AWS Android SDK for Amazon Cognito Identity Provider module holds the client classes that are used for communicating with Amazon Cognito Identity Provider Service</description>
   <url>http://aws.amazon.com/sdkforandroid</url>
 
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <licenses>
@@ -29,7 +29,13 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
+    </dependency>
+    <dependency>
+      <groupId>com.amazonaws</groupId>
+      <artifactId>aws-android-sdk-cognitoidentityprovider-asf</artifactId>
+      <optional>false</optional>
+      <version>1.0.0</version>
     </dependency>
     <dependency>
       <groupId>com.google.android</groupId>
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java
index c331e8b9ce..eb2d03c993 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java
@@ -762,12 +762,15 @@ public void getSession(final AuthenticationHandler callback) {
      */
     public Runnable initiateUserAuthentication(final AuthenticationDetails authenticationDetails,
             final AuthenticationHandler callback, final boolean runInBackground) {
-        if (CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD_VERIFIER
-                .equals(authenticationDetails.getAuthenticationType())) {
+        if (CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD_VERIFIER.equals(
+                            authenticationDetails.getAuthenticationType())) {
             return startWithUserSrpAuth(authenticationDetails, callback, runInBackground);
-        } else if (CognitoServiceConstants.CHLG_TYPE_CUSTOM_CHALLENGE
-                .equals(authenticationDetails.getAuthenticationType())) {
+        } else if (CognitoServiceConstants.CHLG_TYPE_CUSTOM_CHALLENGE.equals(
+                            authenticationDetails.getAuthenticationType())) {
             return startWithCustomAuth(authenticationDetails, callback, runInBackground);
+        } else if (CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD.equals(
+                            authenticationDetails.getAuthenticationType())) {
+            return startWithUserPasswordAuth(authenticationDetails, callback, runInBackground);
         } else {
             return new Runnable() {
                 @Override
@@ -2549,6 +2552,73 @@ public void run() {
         }
     }
 
+    /**
+     * This method performs user authentication with username and password without using SRP.
+     *
+     * @param authenticationDetails REQUIRED: {@link AuthenticationDetails}
+     *            contains details about the custom authentication flow.
+     * @param callback REQUIRED: {@link AuthenticationHandler} callback.
+     * @param runInBackground REQUIRED: Boolean to indicate the current
+     *            threading.
+     * @return {@link Runnable} for the next step in user authentication.
+     */
+    private Runnable startWithUserPasswordAuth(final AuthenticationDetails authenticationDetails,
+            final AuthenticationHandler callback, final boolean runInBackground) {
+        try {
+            final InitiateAuthRequest initiateAuthRequest = initiateUserPasswordAuthRequest(
+                authenticationDetails);
+            final InitiateAuthResult initiateAuthResult = cognitoIdentityProviderClient
+                    .initiateAuth(initiateAuthRequest);
+            this.usernameInternal = initiateAuthResult.getChallengeParameters()
+                    .get(CognitoServiceConstants.CHLG_PARAM_USER_ID_FOR_SRP);
+            return handleChallenge(initiateAuthResult, callback, runInBackground);
+        } catch (final Exception e) {
+            return new Runnable() {
+                @Override
+                public void run() {
+                    callback.onFailure(e);
+                }
+            };
+        }
+    }
+
+    /**
+     * Creates a authentication request to start authentication with user-password authentication (without SRP) flow.
+     *
+     * @param authenticationDetails REQUIRED: {@link AuthenticationDetails},
+     *            contains details required to start authentication flow.
+     * @return {@link InitiateAuthRequest}, request to start the authentication.
+     */
+    private InitiateAuthRequest initiateUserPasswordAuthRequest(
+            AuthenticationDetails authenticationDetails) {
+
+        if (StringUtils.isBlank(authenticationDetails.getUserId()) 
+                || StringUtils.isBlank(authenticationDetails.getPassword())) {
+            throw new CognitoNotAuthorizedException("User name and password are required");
+        }
+
+        final InitiateAuthRequest authRequest = new InitiateAuthRequest();
+        authRequest.setAuthFlow(CognitoServiceConstants.AUTH_TYPE_INIT_USER_PASSWORD);
+        authRequest.setClientId(clientId);
+        authRequest.addAuthParametersEntry(CognitoServiceConstants.AUTH_PARAM_USERNAME,
+                authenticationDetails.getUserId());
+        authRequest.addAuthParametersEntry(CognitoServiceConstants.AUTH_PARAM_PASSWORD,
+                authenticationDetails.getPassword());
+
+        if (authenticationDetails.getValidationData() != null
+                && authenticationDetails.getValidationData().size() > 0) {
+            final Map<String, String> userValidationData = new HashMap<String, String>();
+            for (final AttributeType attribute : authenticationDetails.getValidationData()) {
+                userValidationData.put(attribute.getName(), attribute.getValue());
+            }
+            authRequest.setClientMetadata(userValidationData);
+        }
+
+        return authRequest;
+    }
+
+
+
     /**
      * Performs device SRP authentication to identify remembered devices.
      * Restarts authentication if the device verification does not succeed.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationDetails.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationDetails.java
index 0890b82a2d..ecdbfe9423 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationDetails.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationDetails.java
@@ -82,8 +82,8 @@ public AuthenticationDetails(String userId, Map<String, String> authenticationPa
      */
     public void setAuthenticationType(String authenticationType) {
         this.authenticationType = authenticationType;
-        if (CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD_VERIFIER
-                .equals(this.authenticationType)) {
+        if (CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD_VERIFIER.equals(this.authenticationType)
+            || CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD.equals(this.authenticationType)) {
             this.authenticationParameters = null;
         } else if (CognitoServiceConstants.CHLG_TYPE_CUSTOM_CHALLENGE
                 .equals(this.authenticationType)) {
@@ -142,11 +142,10 @@ public String getAuthenticationType() {
      * @param customChallenge           REQUIRED: Custom challenge name.
      */
     public void setCustomChallenge(String customChallenge) {
-        if (CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD_VERIFIER
-                .equals(this.authenticationType)) {
+        if (CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD_VERIFIER.equals(this.authenticationType)
+            || CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD.equals(this.authenticationType)) {
             throw new CognitoParameterInvalidException(
-                    String.format("Cannot set custom challenge when the authentication type is %s.",
-                            CognitoServiceConstants.CHLG_TYPE_USER_PASSWORD_VERIFIER));
+                    String.format("Cannot set custom challenge when the authentication type is %s.", this.authenticationType));
         }
         this.authenticationType = CognitoServiceConstants.CHLG_TYPE_CUSTOM_CHALLENGE;
         setAuthenticationParameter(CognitoServiceConstants.AUTH_PARAM_CHALLENGE_NAME,
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoServiceConstants.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoServiceConstants.java
index 8d6d72616b..b9aa3d2f6f 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoServiceConstants.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoServiceConstants.java
@@ -33,6 +33,10 @@
      * Indicates user auth through a custom process.
      */
     public static final String AUTH_TYPE_INIT_CUSTOM_AUTH = "CUSTOM_AUTH";
+    /**
+     * Indicates user auth using username and password.
+     */
+    public static final String AUTH_TYPE_INIT_USER_PASSWORD = "USER_PASSWORD_AUTH";
     /**
      * Indicates MFA SETUP challenge.
      */
@@ -69,6 +73,11 @@
      * Indicates a challenge to set a new password.
      */
     public static final String CHLG_TYPE_NEW_PASSWORD_REQUIRED = "NEW_PASSWORD_REQUIRED";
+    /**
+     * Indicates a challenge for username and password authentication flow (without using SRP).
+     */
+    public static final String CHLG_TYPE_USER_PASSWORD = "USER_PASSWORD";
+
     /**
      * Indicates a refresh-token parameter. 
      */
diff --git a/aws-android-sdk-core/pom.xml b/aws-android-sdk-core/pom.xml
index 641b6f7812..620b340b35 100644
--- a/aws-android-sdk-core/pom.xml
+++ b/aws-android-sdk-core/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/util/VersionInfoUtils.java b/aws-android-sdk-core/src/main/java/com/amazonaws/util/VersionInfoUtils.java
index ca4df49f8c..4f60d58028 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/util/VersionInfoUtils.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/util/VersionInfoUtils.java
@@ -26,7 +26,7 @@
     private static final int DEFAULT_STRING_LENGTH = 128;
 
     /** SDK version info */
-    private static volatile String version = "2.6.13";
+    private static volatile String version = "2.6.17";
                                                                 // changed build
                                                                 // logic
 
diff --git a/aws-android-sdk-core/src/main/resources/fabric/com.amazonaws.aws-android-sdk-core.properties b/aws-android-sdk-core/src/main/resources/fabric/com.amazonaws.aws-android-sdk-core.properties
index a7220ceaa8..95c984402a 100644
--- a/aws-android-sdk-core/src/main/resources/fabric/com.amazonaws.aws-android-sdk-core.properties
+++ b/aws-android-sdk-core/src/main/resources/fabric/com.amazonaws.aws-android-sdk-core.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.amazonaws.aws-android-sdk-core
-fabric-version=2.6.13
+fabric-version=2.6.17
 fabric-build-type=binary
diff --git a/aws-android-sdk-core/src/test/java/com/amazonaws/util/VersionInfoUtilsTest.java b/aws-android-sdk-core/src/test/java/com/amazonaws/util/VersionInfoUtilsTest.java
index dcaae5589d..60922b2c92 100644
--- a/aws-android-sdk-core/src/test/java/com/amazonaws/util/VersionInfoUtilsTest.java
+++ b/aws-android-sdk-core/src/test/java/com/amazonaws/util/VersionInfoUtilsTest.java
@@ -24,7 +24,7 @@
 
     @Test
     public void getVersion() {
-        assertEquals("2.6.13", VersionInfoUtils.getVersion());
+        assertEquals("2.6.17", VersionInfoUtils.getVersion());
     }
 
     @Test
diff --git a/aws-android-sdk-ddb-document/pom.xml b/aws-android-sdk-ddb-document/pom.xml
index 834085a406..78f445a0db 100644
--- a/aws-android-sdk-ddb-document/pom.xml
+++ b/aws-android-sdk-ddb-document/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,13 +20,13 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-ddb</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>com.google.guava</groupId>
diff --git a/aws-android-sdk-ddb-mapper/pom.xml b/aws-android-sdk-ddb-mapper/pom.xml
index f07d6b2d78..94d64010cf 100644
--- a/aws-android-sdk-ddb-mapper/pom.xml
+++ b/aws-android-sdk-ddb-mapper/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,19 +20,19 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-ddb</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-s3</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
         <dependency>
         <groupId>junit</groupId>
diff --git a/aws-android-sdk-ddb/pom.xml b/aws-android-sdk-ddb/pom.xml
index 99492bd64a..faf91323a2 100644
--- a/aws-android-sdk-ddb/pom.xml
+++ b/aws-android-sdk-ddb/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
         <dependency>
         <groupId>junit</groupId>
diff --git a/aws-android-sdk-ec2/pom.xml b/aws-android-sdk-ec2/pom.xml
index 8cf50b16b0..ced057b264 100644
--- a/aws-android-sdk-ec2/pom.xml
+++ b/aws-android-sdk-ec2/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-elb/pom.xml b/aws-android-sdk-elb/pom.xml
index 3b74616a11..3aa57f9a2d 100644
--- a/aws-android-sdk-elb/pom.xml
+++ b/aws-android-sdk-elb/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-iot/pom.xml b/aws-android-sdk-iot/pom.xml
index eb32268245..8cd5db6639 100644
--- a/aws-android-sdk-iot/pom.xml
+++ b/aws-android-sdk-iot/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.paho</groupId>
diff --git a/aws-android-sdk-kinesis/pom.xml b/aws-android-sdk-kinesis/pom.xml
index 7ad31cd65e..e2b039f990 100644
--- a/aws-android-sdk-kinesis/pom.xml
+++ b/aws-android-sdk-kinesis/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/aws-android-sdk-kinesisvideo/pom.xml b/aws-android-sdk-kinesisvideo/pom.xml
index 864231a612..c7d02e4866 100644
--- a/aws-android-sdk-kinesisvideo/pom.xml
+++ b/aws-android-sdk-kinesisvideo/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <licenses>
@@ -43,7 +43,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
 
     <dependency>
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java
index d0b57f8e3e..16f2ff53f9 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java
index fae8454529..10f5879ad2 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java
index 01b041d22c..fd32d5e2cb 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java
index 09c14cb152..4d71e8cd02 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java
index 836ef2cbbb..45a60c7e77 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java
index c52bfb384e..5c033531b6 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java
index 4a0e851777..0767a254f3 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/AbstractKinesisVideoClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/AbstractKinesisVideoClient.java
index 88c8e8fc37..7004d652bd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/AbstractKinesisVideoClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/AbstractKinesisVideoClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java
index ab4e952e9b..9427d78bbe 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java
index 40214035e8..e82060f19b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java
index 7dc1473879..49800979a7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java
index a1ec1fc524..4b5e9ad7d2 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/NativeKinesisVideoClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/NativeKinesisVideoClient.java
index bbd8b78696..01bc295f90 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/NativeKinesisVideoClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/NativeKinesisVideoClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java
index c70ee4511f..5520af9933 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -76,6 +76,7 @@ public void putMediaInBackground() {
                 ParallelSimpleHttpClient.builder()
                         .uri(mBuilder.mUri)
                         .method(POST)
+                        .log(log)
                         .header(STREAM_NAME_HEADER, mBuilder.mStreamName)
                         .header(TRANSFER_ENCODING, CHUNKED)
                         .header(CONNECTION, KEEP_ALIVE);
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java
index 6aace291f3..811247fd78 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java
index 7c744dca27..61147feb3f 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSource.java
index d45842215c..a09d28736c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSource.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceConfiguration.java
index 32965e0b34..1d50c90736 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceConfiguration.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceSink.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceSink.java
index c41ac85da4..96ffd9b6e8 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceSink.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceSink.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java
index e055b639d3..8c20335889 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java
index 5f3e42cdb0..a6afd60528 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java
index 6129d22f8c..903b82d934 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java
index 80cb09a8c5..b2e2a4f6ed 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java
index e3dcc0c3c9..85529c1a55 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java
index 4edf48bb6e..8fd01e2577 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java
index e118ce54a5..a192877be8 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java
index 5a20545bfc..19adb1990a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java
index 57460f385c..96219a2f8b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java
index 5cda3c03fe..ae64fd0065 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java
index eb396de047..2216d80409 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java
index ba5ae51aeb..0438629cdb 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java
index 177dfd503d..c574061ac4 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java
index 7d11625d3e..84b1f46425 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java
index 7d9fa69445..8a8b146ea7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java
index 5128138fdb..234a48e2bd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/OnFrameDataAvailable.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/OnFrameDataAvailable.java
index 7412268932..511eda24f8 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/OnFrameDataAvailable.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/OnFrameDataAvailable.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/ProducerStreamSink.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/ProducerStreamSink.java
index d3f3616a11..933a0c44fd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/ProducerStreamSink.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/ProducerStreamSink.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesGenerator.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesGenerator.java
index 081975106b..59c88808ae 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesGenerator.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesGenerator.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSource.java
index 795165046d..74baf0f0ef 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSource.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSourceConfiguration.java
index 03d16aad3d..de1fbeb7be 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSourceConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/mediasource/bytes/BytesMediaSourceConfiguration.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -29,12 +29,18 @@
             implements MediaSourceConfiguration.Builder<BytesMediaSourceConfiguration> {
 
         private int fps;
+        private long retentionPeriodInHours;
 
         public Builder withFps(final int fps) {
             this.fps = fps;
             return this;
         }
 
+        public Builder withRetentionPeriodInHours(final long retentionPeriodInHours) {
+            this.retentionPeriodInHours = retentionPeriodInHours;
+            return this;
+        }
+
         @Override
         public BytesMediaSourceConfiguration build() {
             return new BytesMediaSourceConfiguration(this);
@@ -51,13 +57,17 @@ public int getFps() {
         return mBuilder.fps;
     }
 
+    public long getRetentionPeriodInHours() {
+        return mBuilder.retentionPeriodInHours;
+    }
+
     @Override
     public String getMediaSourceType() {
-        return null;
+        return MEDIA_SOURCE_TYPE;
     }
 
     @Override
     public String getMediaSourceDescription() {
-        return null;
+        return MEDIA_SOURCE_DESCRIPTION;
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java
index e2d8253823..da0f35f26c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java
index 325e09d194..f4eb9e3439 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java
index aa23497ca2..5ae3b13790 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java
index dff04e9edf..d4c29eee7b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java
index 374ed6b18b..155515fd6c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java
index 4e99418e28..bc1e9aee44 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java
index c489d55883..dc6bd854c3 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -50,7 +50,7 @@
     public static final int FRAGMENT_ACK_TYPE_ERROR = 4;
 
     /**
-     * Iddle ACK to keep alive
+     * Idle ACK to keep alive
      */
     public static final int FRAGMENT_ACK_TYPE_IDLE = 5;
 
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java
index e8c68a7580..21e75b0b13 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java
index cde33cb734..8fce530f72 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -52,7 +52,17 @@
      */
     private final int mResult;
 
-    public KinesisVideoFragmentAck(@NonNull final FragmentAckType ackType, long timestamp, @NonNull final String sequenceNumber, int result) {
+    public KinesisVideoFragmentAck(int ackType,
+                                   long timestamp,
+                                   @NonNull final String sequenceNumber,
+                                   int result) {
+        this(new FragmentAckType(ackType), timestamp, sequenceNumber, result);
+    }
+
+    public KinesisVideoFragmentAck(@NonNull final FragmentAckType ackType,
+                                   long timestamp,
+                                   @NonNull final String sequenceNumber,
+                                   int result) {
         mAckType = ackType;
         mTimestamp = timestamp;
         mSequenceNumber = sequenceNumber;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java
index 62c39bfbe5..18ccc0b70a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoMetrics.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoMetrics.java
index db8132d5bd..cfcf6370ed 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoMetrics.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoMetrics.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducer.java
index 2f38a69f51..5a452d4e18 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducer.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducerStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducerStream.java
index a00ad1d482..492a015987 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducerStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoProducerStream.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -47,11 +47,12 @@
      * gets closed the stream returned by this function will also close.
      * The caller then should re-acquire a new stream by calling this API again.
      *
+     * @param uploadHandle Client stream upload handle.
      * @return {@link InputStream} for retrieving the data
      * @throws ProducerException
      */
     @NonNull
-    InputStream getDataStream() throws ProducerException;
+    InputStream getDataStream(final long uploadHandle) throws ProducerException;
 
     /**
      * Get stream data from the buffer.
@@ -75,15 +76,20 @@ int getStreamData(final @NonNull byte[] fillBuffer, int offset, int length)
 
     /**
      * Reports an ACK for a fragment.
+     *
+     * @param uploadHandle Client stream upload handle.
+     * @param kinesisVideoFragmentAck ACK string returned from the service.
+     * @throws ProducerException
      */
-    void fragmentAck(final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck) throws ProducerException;
+    void fragmentAck(final long uploadHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck) throws ProducerException;
 
     /**
      * Parses and processes a response which can contain partial/multiple fragment ACK.
+     * @param uploadHandle Client stream upload handle.
      * @param kinesisVideoFragmentAck ACK string returned from the service.
      * @throws ProducerException
      */
-    void parseFragmentAck(final @NonNull String kinesisVideoFragmentAck) throws ProducerException;
+    void parseFragmentAck(final long uploadHandle, final @NonNull String kinesisVideoFragmentAck) throws ProducerException;
 
     /**
      * Indicates that the stream format has changed.
@@ -112,10 +118,11 @@ int getStreamData(final @NonNull byte[] fillBuffer, int offset, int length)
 
     /**
      * Reports an abnormal stream termination
+     * @param uploadHandle - Client stream upload handle.
      * @param statusCode - Status code of the termination.
      * @throws ProducerException
      */
-    void streamTerminated(int statusCode) throws ProducerException;
+    void streamTerminated(long uploadHandle, int statusCode) throws ProducerException;
 
     /**
      * Returns stream specific metrics.
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoStreamMetrics.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoStreamMetrics.java
index 1a5a781602..08bf6f3178 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoStreamMetrics.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoStreamMetrics.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java
index 34084c8cab..fe767f21fe 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java
index 37375e6346..e6b5f1bf9c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ServiceCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ServiceCallbacks.java
index ae5d6c378a..9b6628e825 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ServiceCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ServiceCallbacks.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java
index 2741d1696c..b6f5933b5e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java
index 1f544dbdde..eb81380fe7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java
index 37a2d0d52f..090e48aa45 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -17,6 +17,8 @@
 
 package com.amazonaws.kinesisvideo.producer;
 
+import android.support.annotation.NonNull;
+
 /**
  *
  * Interface to the Kinesis Video Producer Stream Callbacks functionality.
@@ -45,7 +47,14 @@
      * @param lastAckDuration The duration of time window when the last "buffering" ACK is received in 100ns.
      * @throws ProducerException
      */
-    void streamConnectionStale(long duration) throws ProducerException;
+    void streamConnectionStale(long lastAckDuration) throws ProducerException;
+
+    /**
+     * Reports the received ACK.
+     * @param fragmentAck The received fragment ACK.
+     * @throws ProducerException
+     */
+    void fragmentAckReceived(@NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException;
 
     /**
      * Reports a dropped frame for the stream.
@@ -73,11 +82,12 @@
 
     /**
      * New data is available for the stream.
+     * @param uploadHandle The client stream upload handle.
      * @param duration The duration of content available in the stream.
      * @param availableSize The size of the content available in the stream.
      * @throws ProducerException
      */
-    void streamDataAvailable(long duration, long availableSize) throws ProducerException;
+    void streamDataAvailable(long uploadHandle, long duration, long availableSize) throws ProducerException;
 
     /**
      * Ready to stream data.
@@ -87,7 +97,8 @@
 
     /**
      * Stream has been closed.
+     * @param uploadHandle The client stream upload handle.
      * @throws ProducerException
      */
-    void streamClosed() throws ProducerException;
+    void streamClosed(long uploadHandle) throws ProducerException;
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java
index 3d21b4f785..e8b6facf0e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java
index ce47ea630c..f0723b0845 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java
index 38453c7a8d..8a8de9c9b7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java
index 1d7608a60c..588f24c4f1 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java
index d9ad8b1377..fb01b302fc 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/client/KinesisVideoServiceClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/client/KinesisVideoServiceClient.java
index 4de5782dd0..9c2b2aa4c1 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/client/KinesisVideoServiceClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/client/KinesisVideoServiceClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerJni.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerJni.java
index ec9621f438..612cd19538 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerJni.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerJni.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -60,7 +60,7 @@
     /**
      * The expected library version.
      */
-    private static final String EXPECTED_LIBRARY_VERSION = "1.1";
+    private static final String EXPECTED_LIBRARY_VERSION = "1.4";
 
     /**
      * The manifest handle will be set after call to parse()
@@ -192,6 +192,13 @@ public NativeKinesisVideoProducerJni(final @NonNull AuthCallbacks authCallbacks,
         mKinesisVideoMetrics = new KinesisVideoMetrics();
     }
 
+    @Override
+    protected void finalize() throws Throwable {
+        if (isInitialized()) {
+            free();
+        }
+    }
+
     /**
      * Creates the underlying Kinesis Video client object
      * @param deviceInfo {@link DeviceInfo} object
@@ -384,7 +391,7 @@ public void stopStreams() throws ProducerException
      * @param streamHandle the handle of the stream
      * @throws ProducerException
      */
-    public void stopStream(long streamHandle) throws ProducerException
+    public void stopStream(final long streamHandle) throws ProducerException
     {
         // Idempotent call if already closed
         if (!isInitialized()) {
@@ -400,10 +407,11 @@ public void stopStream(long streamHandle) throws ProducerException
     /**
      * Reports an abnormal stream termination event.
      * @param streamHandle the handle of the stream
+     * @param uploadHandle the client stream upload handle
      * @param statusCode the status code of the termination event.
      * @throws ProducerException
      */
-    public void streamTerminated(long streamHandle, int statusCode) throws ProducerException
+    public void streamTerminated(final long streamHandle, final long uploadHandle, final int statusCode) throws ProducerException
     {
         // Idempotent call if already closed
         if (!isInitialized()) {
@@ -412,7 +420,7 @@ public void streamTerminated(long streamHandle, int statusCode) throws ProducerE
 
         synchronized (mSyncObject) {
             // Stop the streams
-            kinesisVideoStreamTerminated(mClientHandle, streamHandle, statusCode);
+            kinesisVideoStreamTerminated(mClientHandle, streamHandle, uploadHandle, statusCode);
         }
     }
 
@@ -422,7 +430,7 @@ public void streamTerminated(long streamHandle, int statusCode) throws ProducerE
      * @param streamMetrics stream metrics to fill in
      * @throws ProducerException
      */
-    public void getStreamMetrics(long streamHandle, @NonNull final KinesisVideoStreamMetrics streamMetrics)
+    public void getStreamMetrics(final long streamHandle, @NonNull final KinesisVideoStreamMetrics streamMetrics)
             throws ProducerException
     {
         Preconditions.checkState(isInitialized());
@@ -439,7 +447,7 @@ public void getStreamMetrics(long streamHandle, @NonNull final KinesisVideoStrea
      * @param kinesisVideoFrame  an KinesisVideoFrame object
      * @throws ProducerException
      */
-    public void putFrame(long streamHandle, final @NonNull KinesisVideoFrame kinesisVideoFrameFrame) throws ProducerException
+    public void putFrame(final long streamHandle, final @NonNull KinesisVideoFrame kinesisVideoFrameFrame) throws ProducerException
     {
         Preconditions.checkState(isInitialized());
         Preconditions.checkNotNull(kinesisVideoFrameFrame);
@@ -456,13 +464,13 @@ public void putFrame(long streamHandle, final @NonNull KinesisVideoFrame kinesis
      * @param kinesisVideoFragmentAck an KinesisVideoFragmentAck object
      * @throws ProducerException
      */
-    public void fragmentAck(long streamHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck) throws ProducerException
+    public void fragmentAck(final long streamHandle, final long uploadHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck) throws ProducerException
     {
         Preconditions.checkState(isInitialized());
         Preconditions.checkNotNull(kinesisVideoFragmentAck);
 
         synchronized (mSyncObject) {
-            kinesisVideoStreamFragmentAck(mClientHandle, streamHandle, kinesisVideoFragmentAck);
+            kinesisVideoStreamFragmentAck(mClientHandle, streamHandle, uploadHandle, kinesisVideoFragmentAck);
         }
     }
 
@@ -473,13 +481,13 @@ public void fragmentAck(long streamHandle, final @NonNull KinesisVideoFragmentAc
      * @param kinesisVideoFragmentAck string containing ACKs
      * @throws ProducerException
      */
-    public void parseFragmentAck(long streamHandle, final @NonNull String kinesisVideoFragmentAck) throws ProducerException
+    public void parseFragmentAck(final long streamHandle, final long uploadHandle, final @NonNull String kinesisVideoFragmentAck) throws ProducerException
     {
         Preconditions.checkState(isInitialized());
         Preconditions.checkNotNull(kinesisVideoFragmentAck);
 
         synchronized (mSyncObject) {
-            kinesisVideoStreamParseFragmentAck(mClientHandle, streamHandle, kinesisVideoFragmentAck);
+            kinesisVideoStreamParseFragmentAck(mClientHandle, streamHandle, uploadHandle, kinesisVideoFragmentAck);
         }
     }
 
@@ -493,7 +501,7 @@ public void parseFragmentAck(long streamHandle, final @NonNull String kinesisVid
      * @return  The number of bytes filled
      * @throws ProducerException
      */
-    public int getStreamData(long streamHandle, final @NonNull byte[] fillBuffer, int offset, int length) throws ProducerException
+    public int getStreamData(final long streamHandle, final @NonNull byte[] fillBuffer, final int offset, final int length) throws ProducerException
     {
         Preconditions.checkState(isInitialized());
         Preconditions.checkNotNull(fillBuffer);
@@ -510,7 +518,7 @@ public int getStreamData(long streamHandle, final @NonNull byte[] fillBuffer, in
      * @param codecPrivateData    Codec Private Data or null to reset
      * @throws ProducerException
      */
-    public void streamFormatChanged(long streamHandle, final @Nullable byte[] codecPrivateData) throws ProducerException
+    public void streamFormatChanged(final long streamHandle, final @Nullable byte[] codecPrivateData) throws ProducerException
     {
         Preconditions.checkState(isInitialized());
 
@@ -561,7 +569,7 @@ private String getDeviceFingerprint()
     /**
      * Reports stream underflow
      */
-    private void streamUnderflowReport(long streamHandle) throws ProducerException
+    private void streamUnderflowReport(final long streamHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -576,7 +584,7 @@ private void streamUnderflowReport(long streamHandle) throws ProducerException
     /**
      * Reports storage overflow pressure
      */
-    private void storageOverflowPressure(long remainingSize)
+    private void storageOverflowPressure(final long remainingSize)
     {
         synchronized (mCallbackSyncObject) {
             mStorageCallbacks.storageOverflowPressure(remainingSize);
@@ -586,7 +594,7 @@ private void storageOverflowPressure(long remainingSize)
     /**
      * Reports stream latency pressure
      */
-    private void streamLatencyPressure(long streamHandle, long duration) throws ProducerException
+    private void streamLatencyPressure(final long streamHandle, final long duration) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -601,7 +609,7 @@ private void streamLatencyPressure(long streamHandle, long duration) throws Prod
     /**
      * Reports stream connection staleness
      */
-    private void streamConnectionStale(long streamHandle, long lastAckDuration) throws ProducerException
+    private void streamConnectionStale(final long streamHandle, final long lastAckDuration) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -613,10 +621,26 @@ private void streamConnectionStale(long streamHandle, long lastAckDuration) thro
         }
     }
 
+    /**
+     * Reports received fragment ACK
+     */
+    private void fragmentAckReceived(final long streamHandle, @NonNull final KinesisVideoFragmentAck fragmentAck)
+            throws ProducerException
+    {
+        synchronized (mCallbackSyncObject) {
+            if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
+                throw new ProducerException("Invalid stream handle.", STATUS_INVALID_OPERATION);
+            }
+
+            final KinesisVideoProducerStream kinesisVideoProducerStream = mKinesisVideoHandleMap.get(streamHandle);
+            kinesisVideoProducerStream.fragmentAckReceived(fragmentAck);
+        }
+    }
+
     /**
      * Reports dropped frame
      */
-    private void droppedFrameReport(long streamHandle, long frameTimecode) throws ProducerException
+    private void droppedFrameReport(final long streamHandle, final long frameTimecode) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -631,7 +655,7 @@ private void droppedFrameReport(long streamHandle, long frameTimecode) throws Pr
     /**
      * Reports dropped fragment
      */
-    private void droppedFragmentReport(long streamHandle, long fragmentTimecode) throws ProducerException
+    private void droppedFragmentReport(final long streamHandle, final long fragmentTimecode) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -646,7 +670,7 @@ private void droppedFragmentReport(long streamHandle, long fragmentTimecode) thr
     /**
      * Reports stream error.
      */
-    private void streamErrorReport(long streamHandle, long fragmentTimecode, long statusCode) throws ProducerException
+    private void streamErrorReport(final long streamHandle, final long fragmentTimecode, final long statusCode) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -661,7 +685,7 @@ private void streamErrorReport(long streamHandle, long fragmentTimecode, long st
     /**
      * Reports stream data is available
      */
-    private void streamDataAvailable(long streamHandle, String streamName, long duration, long availableSize) throws ProducerException
+    private void streamDataAvailable(final long streamHandle, final String streamName, final long uploadHandle, final long duration, final long availableSize) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -669,14 +693,14 @@ private void streamDataAvailable(long streamHandle, String streamName, long dura
             }
 
             final KinesisVideoProducerStream kinesisVideoProducerStream = mKinesisVideoHandleMap.get(streamHandle);
-            kinesisVideoProducerStream.streamDataAvailable(duration, availableSize);
+            kinesisVideoProducerStream.streamDataAvailable(uploadHandle, duration, availableSize);
         }
     }
 
     /**
      * Reports stream is ready
      */
-    private void streamReady(long streamHandle) throws ProducerException
+    private void streamReady(final long streamHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -691,7 +715,7 @@ private void streamReady(long streamHandle) throws ProducerException
     /**
      * Reports stream is closed
      */
-    private void streamClosed(long streamHandle) throws ProducerException
+    private void streamClosed(final long streamHandle, final long uploadHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -699,14 +723,14 @@ private void streamClosed(long streamHandle) throws ProducerException
             }
 
             final KinesisVideoProducerStream kinesisVideoProducerStream = mKinesisVideoHandleMap.get(streamHandle);
-            kinesisVideoProducerStream.streamClosed();
+            kinesisVideoProducerStream.streamClosed(uploadHandle);
         }
     }
 
     /**
      * Reports client is ready
      */
-    private void clientReady(long clientHandle) throws ProducerException
+    private void clientReady(final long clientHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (mClientHandle != clientHandle) {
@@ -738,12 +762,12 @@ private int createStream(final @NonNull String deviceName,
             final @NonNull String streamName,
             final @NonNull String contentType,
             final @Nullable String kmsKeyId,
-            long retentionPeriod,
-            long callAfter,
-            long timeout,
+            final long retentionPeriod,
+            final long callAfter,
+            final long timeout,
             final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -777,11 +801,11 @@ public void createStreamResult(final long customData, final @Nullable String str
      * @return STATUS of the call
      */
     private int describeStream(final @NonNull String streamName,
-            long callAfter,
-            long timeout,
+            final long callAfter,
+            final long timeout,
             final byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
 
         synchronized (mCallbackSyncObject) {
@@ -797,7 +821,7 @@ private int describeStream(final @NonNull String streamName,
     @Override
     public void describeStreamResult(final long customData,
                                       final @Nullable StreamDescription streamDescription,
-                                      int httpStatusCode) throws ProducerException
+                                      final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             describeStreamResultEvent(mClientHandle, customData, httpStatusCode, streamDescription);
@@ -817,11 +841,11 @@ public void describeStreamResult(final long customData,
      */
     private int getStreamingEndpoint(final @NonNull String streamName,
             final @NonNull String apiName,
-            long callAfter,
-            long timeout,
+            final long callAfter,
+            final long timeout,
             final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -834,7 +858,7 @@ private int getStreamingEndpoint(final @NonNull String streamName,
     }
 
     @Override
-    public void getStreamingEndpointResult(final long customData, final @Nullable String endpoint, int httpStatusCode) throws ProducerException
+    public void getStreamingEndpointResult(final long customData, final @Nullable String endpoint, final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             getStreamingEndpointResultEvent(mClientHandle, customData, httpStatusCode, endpoint);
@@ -852,11 +876,11 @@ public void getStreamingEndpointResult(final long customData, final @Nullable St
      * @return STATUS of the call
      */
     private int getStreamingToken(final @NonNull String streamName,
-            long callAfter,
-            long timeout,
+            final long callAfter,
+            final long timeout,
             final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -869,7 +893,7 @@ private int getStreamingToken(final @NonNull String streamName,
     }
 
     @Override
-    public void getStreamingTokenResult(final long customData, final @Nullable byte[] token, long expiration, int httpStatusCode) throws ProducerException
+    public void getStreamingTokenResult(final long customData, final @Nullable byte[] token, final long expiration, final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             final int tokenSize = token == null ? 0 : token.length;
@@ -895,15 +919,15 @@ public void getStreamingTokenResult(final long customData, final @Nullable byte[
      */
     private int putStream(final @NonNull String streamName,
             final @NonNull String containerType,
-            long streamStartTime,
-            boolean absoluteFragmentTimes,
-            boolean ackRequired,
+            final long streamStartTime,
+            final boolean absoluteFragmentTimes,
+            final boolean ackRequired,
             final @NonNull String streamingEndpoint,
-            long callAfter,
-            long timeout,
+            final long callAfter,
+            final long timeout,
             final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -926,7 +950,7 @@ private int putStream(final @NonNull String streamName,
     }
 
     @Override
-    public void putStreamResult(final long customData, long clientStreamHandle, int httpStatusCode) throws ProducerException
+    public void putStreamResult(final long customData, final long clientStreamHandle, final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             putStreamResultEvent(mClientHandle, customData, httpStatusCode, clientStreamHandle);
@@ -946,11 +970,11 @@ public void putStreamResult(final long customData, long clientStreamHandle, int
      */
     private int tagResource(final @NonNull String resourceArn,
             final @NonNull Tag[] tags,
-            long callAfter,
-            long timeout,
+            final long callAfter,
+            final long timeout,
             final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -963,7 +987,7 @@ private int tagResource(final @NonNull String resourceArn,
     }
 
     @Override
-    public void tagResourceResult(final long customData, int httpStatusCode) throws ProducerException
+    public void tagResourceResult(final long customData, final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             tagResourceResultEvent(mClientHandle, customData, httpStatusCode);
@@ -986,11 +1010,11 @@ public void tagResourceResult(final long customData, int httpStatusCode) throws
      * @return STATUS of the call
      */
     private int createDevice(final @NonNull String deviceName,
-            long callAfter,
-            long timeout,
+            final long callAfter,
+            final long timeout,
             final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -1003,7 +1027,7 @@ private int createDevice(final @NonNull String deviceName,
     }
 
     @Override
-    public void createDeviceResult(final long customData, final @Nullable String deviceArm, int httpStatusCode) throws ProducerException
+    public void createDeviceResult(final long customData, final @Nullable String deviceArm, final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             createDeviceResultEvent(mClientHandle, customData, httpStatusCode, deviceArm);
@@ -1026,11 +1050,11 @@ public void createDeviceResult(final long customData, final @Nullable String dev
      * @return STATUS of the call
      */
     private int deviceCertToToken(final @NonNull String deviceName,
-            long callAfter,
-            long timeout,
+            final long callAfter,
+            final long timeout,
             final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException
+            final int authType,
+            final long customData) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -1043,7 +1067,7 @@ private int deviceCertToToken(final @NonNull String deviceName,
     }
 
     @Override
-    public void deviceCertToTokenResult(final long customData, final @Nullable byte[] token, long expiration, int httpStatusCode) throws ProducerException
+    public void deviceCertToTokenResult(final long customData, final @Nullable byte[] token, final long expiration, final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             final int tokenSize = token == null ? 0 : token.length;
@@ -1155,10 +1179,11 @@ private native void putKinesisVideoFrame(long clientHandle, long streamHandle, f
      *
      * @param clientHandle Client handle
      * @param streamHandle Stream handle
+     * @param uploadHandle the client stream upload handle
      * @param kinesisVideoFragmentAck Kinesis Video fragment ack to report for the stream
      * @throws ProducerException
      */
-    private native void kinesisVideoStreamFragmentAck(long clientHandle, long streamHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck)
+    private native void kinesisVideoStreamFragmentAck(long clientHandle, long streamHandle, long uploadHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck)
             throws ProducerException;
 
     /**
@@ -1166,10 +1191,11 @@ private native void kinesisVideoStreamFragmentAck(long clientHandle, long stream
      *
      * @param clientHandle Client handle
      * @param streamHandle Stream handle
+     * @param uploadHandle the client stream upload handle
      * @param kinesisVideoFragmentAck Kinesis Video fragment ack string to report for the stream
      * @throws ProducerException
      */
-    private native void kinesisVideoStreamParseFragmentAck(long clientHandle, long streamHandle, final @NonNull String kinesisVideoFragmentAck)
+    private native void kinesisVideoStreamParseFragmentAck(long clientHandle, long streamHandle, long uploadHandle, final @NonNull String kinesisVideoFragmentAck)
             throws ProducerException;
 
     /**
@@ -1322,9 +1348,10 @@ private native void deviceCertToTokenResultEvent(long clientHandle, long deviceH
      *
      * @param clientHandle the handle of the client
      * @param streamHandle the handle of the stream
+     * @param uploadHandle the client stream upload handle
      * @param statusCode the status code of the termination event
      * @throws ProducerException
      */
-    private native void kinesisVideoStreamTerminated(long clientHandle, long streamHandle, int statusCode)
+    private native void kinesisVideoStreamTerminated(long clientHandle, long streamHandle, long uploadHandle, int statusCode)
             throws ProducerException;
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerStream.java
index 138142a11e..b7f0fe7acd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeKinesisVideoProducerStream.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -25,6 +25,8 @@
 import android.support.annotation.Nullable;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
@@ -46,6 +48,16 @@
          */
         private volatile boolean mStreamClosed = false;
 
+        // Set the notification values
+        private final Object mMonitor = new Object();
+        private boolean mDataAvailable = false;
+        private long mAvailableDataSize = 0;
+        final long mUploadHandle;
+
+        public NativeDataInputStream(final long uploadHandle) {
+            mUploadHandle = uploadHandle;
+        }
+
         @Override
         public int read() throws IOException
         {
@@ -53,12 +65,12 @@ public int read() throws IOException
         }
 
         @Override
-        public int read(byte[] b,
-                int off,
-                int len)
+        public int read(final byte[] b,
+                final int off,
+                final int len)
                 throws IOException {
             if (mStreamClosed) {
-                mLog.warn("Stream %s has been closed", mStreamInfo.getName());
+                mLog.warn("Stream %s with uploadHandle %d has been closed", mStreamInfo.getName(), mUploadHandle);
             }
 
             // Read from the KinesisVideo Producer
@@ -72,7 +84,8 @@ public int read(byte[] b,
                         try {
                             mMonitor.wait();
                         } catch (final InterruptedException e) {
-                            mLog.exception(e, "Waiting for the data availability threw an interrupted exception. Continuing...");
+                            mLog.exception(e, "Waiting for the data availability with uploadHandle %d"
+                                    + "threw an interrupted exception. Continuing...", mUploadHandle);
                         }
                     }
 
@@ -84,7 +97,8 @@ public int read(byte[] b,
                     bytesRead = mKinesisVideoProducerJni.getStreamData(mStreamHandle, b, off, len);
 
                     if ((bytesRead & END_OF_STREAM_INDICATOR) == END_OF_STREAM_INDICATOR) {
-                        mLog.info("Received end-of-stream indicator for %s", mStreamInfo.getName());
+                        mLog.info("Received end-of-stream indicator for %s, uploadHandle %d",
+                                mStreamInfo.getName(), mUploadHandle);
                         // Clear the indicator bit
                         bytesRead &= ~END_OF_STREAM_INDICATOR;
 
@@ -113,17 +127,18 @@ public int read(byte[] b,
                 }
             }
 
-            mLog.debug("Streamed %d bytes for stream %s", bytesRead, mStreamInfo.getName());
+            mLog.debug("Streamed %d bytes for stream %s with uploadHandle %d", bytesRead, mStreamInfo.getName(),
+                    mUploadHandle);
 
             if (-1 == bytesRead) {
-                mLog.debug("Closing stream %s", mStreamInfo.getName());
+                mLog.debug("Closing stream %s with uploadHandle %d", mStreamInfo.getName(), mUploadHandle);
             }
 
             return bytesRead;
         }
 
         @Override
-        public int read(byte[] b)
+        public int read(final byte[] b)
                 throws IOException
         {
             return read(b, 0, b.length);
@@ -139,6 +154,19 @@ public void close()
             // Notify the awaiting thread
             notifyReaderThread(0, 0);
         }
+
+        protected void notifyReaderThread(final long duration, final long availableSize) {
+            // Unblock the awaiting reading code block
+            synchronized (mMonitor) {
+                mAvailableDataSize = availableSize;
+                mLog.debug("Data availability notification. Upload handle: %d, Size: %d, Duration %d ",
+                        mUploadHandle, availableSize, duration);
+
+                mDataAvailable = true;
+
+                mMonitor.notify();
+            }
+        }
     }
 
     private final NativeKinesisVideoProducerJni mKinesisVideoProducerJni;
@@ -149,13 +177,11 @@ public void close()
     private final CountDownLatch mStoppedLatch;
     private final Log mLog;
     private final KinesisVideoStreamMetrics mStreamMetrics;
-    private final Object mMonitor;
-    private boolean mDataAvailable;
-    private long mAvailableDataSize;
+    private final Map<Long, NativeDataInputStream> mInputStreamMap;
 
     public NativeKinesisVideoProducerStream(final @NonNull NativeKinesisVideoProducerJni kinesisVideoProducerJni,
                                             final @NonNull StreamInfo streamInfo,
-                                            long streamHandle,
+                                            final long streamHandle,
                                             final @NonNull Log log,
                                             final @Nullable StreamCallbacks streamCallbacks) {
         mKinesisVideoProducerJni = Preconditions.checkNotNull(kinesisVideoProducerJni);
@@ -167,25 +193,23 @@ public NativeKinesisVideoProducerStream(final @NonNull NativeKinesisVideoProduce
         mStoppedLatch = new CountDownLatch(1);
         mLog = Preconditions.checkNotNull(log);
         mStreamMetrics = new KinesisVideoStreamMetrics();
-        mMonitor = new Object();
-
-        // Set the notification values
-        mDataAvailable = false;
-        mAvailableDataSize = 0;
+        mInputStreamMap = new HashMap<Long, NativeDataInputStream>();
     }
 
     @Override
-    public InputStream getDataStream() throws ProducerException {
-        return new NativeDataInputStream();
+    public InputStream getDataStream(final long uploadHandle) throws ProducerException {
+        final NativeDataInputStream inputStream = new NativeDataInputStream(uploadHandle);
+        mInputStreamMap.put(uploadHandle, inputStream);
+        return inputStream;
     }
 
     @Override
-    public int getStreamData(@NonNull byte[] fillBuffer, int offset, int length) throws ProducerException {
+    public int getStreamData(@NonNull final byte[] fillBuffer, final int offset, final int length) throws ProducerException {
         return mKinesisVideoProducerJni.getStreamData(mStreamHandle, fillBuffer, offset, length);
     }
 
     @Override
-    public void putFrame(@NonNull KinesisVideoFrame kinesisVideoFrame) throws ProducerException {
+    public void putFrame(@NonNull final KinesisVideoFrame kinesisVideoFrame) throws ProducerException {
         Preconditions.checkNotNull(kinesisVideoFrame);
 
         mLog.debug("PutFrame index: %s, pts: %s, dts: %s, duration: %s, keyFrame: %s, flags: %s",
@@ -231,17 +255,17 @@ public void putFrame(@NonNull KinesisVideoFrame kinesisVideoFrame) throws Produc
     }
 
     @Override
-    public void fragmentAck(final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck) throws ProducerException {
+    public void fragmentAck(final long uploadHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck) throws ProducerException {
         Preconditions.checkNotNull(kinesisVideoFragmentAck);
 
-        mKinesisVideoProducerJni.fragmentAck(mStreamHandle, kinesisVideoFragmentAck);
+        mKinesisVideoProducerJni.fragmentAck(mStreamHandle, uploadHandle, kinesisVideoFragmentAck);
     }
 
     @Override
-    public void parseFragmentAck(final @NonNull String kinesisVideoFragmentAck) throws ProducerException {
+    public void parseFragmentAck(final long uploadHandle, final @NonNull String kinesisVideoFragmentAck) throws ProducerException {
         Preconditions.checkNotNull(kinesisVideoFragmentAck);
 
-        mKinesisVideoProducerJni.parseFragmentAck(mStreamHandle, kinesisVideoFragmentAck);
+        mKinesisVideoProducerJni.parseFragmentAck(mStreamHandle, uploadHandle, kinesisVideoFragmentAck);
     }
 
     @Override
@@ -250,8 +274,8 @@ public void streamFormatChanged(final @Nullable byte[] codecPrivateData) throws
     }
 
     @Override
-    public void streamTerminated(int statusCode) throws ProducerException {
-        mKinesisVideoProducerJni.streamTerminated(mStreamHandle, statusCode);
+    public void streamTerminated(final long uploadHandle, final int statusCode) throws ProducerException {
+        mKinesisVideoProducerJni.streamTerminated(mStreamHandle, uploadHandle, statusCode);
     }
 
     @Override
@@ -293,7 +317,7 @@ public void streamUnderflowReport() throws ProducerException
     }
 
     @Override
-    public void streamLatencyPressure(long duration) throws ProducerException
+    public void streamLatencyPressure(final long duration) throws ProducerException
     {
         if (mStreamCallbacks != null) {
             mStreamCallbacks.streamLatencyPressure(duration);
@@ -301,7 +325,7 @@ public void streamLatencyPressure(long duration) throws ProducerException
     }
 
     @Override
-    public void streamConnectionStale(long lastAckDuration) throws ProducerException
+    public void streamConnectionStale(final long lastAckDuration) throws ProducerException
     {
         if (mStreamCallbacks != null) {
             mStreamCallbacks.streamConnectionStale(lastAckDuration);
@@ -309,7 +333,15 @@ public void streamConnectionStale(long lastAckDuration) throws ProducerException
     }
 
     @Override
-    public void droppedFrameReport(long frameTimecode) throws ProducerException
+    public void fragmentAckReceived(@NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException
+    {
+        if (mStreamCallbacks != null) {
+            mStreamCallbacks.fragmentAckReceived(fragmentAck);
+        }
+    }
+
+    @Override
+    public void droppedFrameReport(final long frameTimecode) throws ProducerException
     {
         if (mStreamCallbacks != null) {
             mStreamCallbacks.droppedFrameReport(frameTimecode);
@@ -317,7 +349,7 @@ public void droppedFrameReport(long frameTimecode) throws ProducerException
     }
 
     @Override
-    public void droppedFragmentReport(long fragmentTimecode) throws ProducerException
+    public void droppedFragmentReport(final long fragmentTimecode) throws ProducerException
     {
         if (mStreamCallbacks != null) {
             mStreamCallbacks.droppedFragmentReport(fragmentTimecode);
@@ -325,7 +357,7 @@ public void droppedFragmentReport(long fragmentTimecode) throws ProducerExceptio
     }
 
     @Override
-    public void streamErrorReport(long fragmentTimecode, long statusCode) throws ProducerException
+    public void streamErrorReport(final long fragmentTimecode, final long statusCode) throws ProducerException
     {
         if (mStreamCallbacks != null) {
             mStreamCallbacks.streamErrorReport(fragmentTimecode, statusCode);
@@ -333,13 +365,18 @@ public void streamErrorReport(long fragmentTimecode, long statusCode) throws Pro
     }
 
     @Override
-    public void streamDataAvailable(long duration, long availableSize) throws ProducerException
+    public void streamDataAvailable(final long uploadHandle, final long duration, final long availableSize) throws ProducerException
     {
         // Unblock the reader thread
-        notifyReaderThread(duration, availableSize);
+        final NativeDataInputStream inputStreamToNotify = mInputStreamMap.get(uploadHandle);
+        if (inputStreamToNotify != null) {
+            inputStreamToNotify.notifyReaderThread(duration, availableSize);
+        } else {
+            mLog.warn("Data available notification for non-existing uploadHandle %d", uploadHandle);
+        }
 
         if (mStreamCallbacks != null) {
-            mStreamCallbacks.streamDataAvailable(duration, availableSize);
+            mStreamCallbacks.streamDataAvailable(uploadHandle, duration, availableSize);
         }
     }
 
@@ -356,28 +393,18 @@ public void streamReady() throws ProducerException
     }
 
     @Override
-    public void streamClosed() throws ProducerException
+    public void streamClosed(final long uploadHandle) throws ProducerException
     {
         mLog.debug("Stream %s is closed", mStreamInfo.getName());
         // Release the stopped latch
         mStoppedLatch.countDown();
 
         if (mStreamCallbacks != null) {
-            mStreamCallbacks.streamClosed();
+            mStreamCallbacks.streamClosed(uploadHandle);
         }
     }
 
-    private void notifyReaderThread(long duration, long availableSize) {
-        // Unblock the awaiting reading code block
-        synchronized (mMonitor) {
-            mAvailableDataSize = availableSize;
-            mDataAvailable = true;
-
-            mLog.debug("Data availability notification. Size: %d, Duration %d", availableSize, duration);
 
-            mMonitor.notify();
-        }
-    }
 
     public void awaitReady() throws ProducerException
     {
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeLibraryLoader.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeLibraryLoader.java
index d6576629e7..d5c5d331cf 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeLibraryLoader.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/jni/NativeLibraryLoader.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/AckConsumer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/AckConsumer.java
index 9b40c7a188..423dfdc9f2 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/AckConsumer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/AckConsumer.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -38,11 +38,14 @@
     private InputStream ackStream = null;
     private final CountDownLatch stoppedLatch;
     private final Log log;
+    private final long uploadHandle;
     private volatile boolean closed = false;
 
-    public AckConsumer(@NonNull final KinesisVideoProducerStream stream,
+    public AckConsumer(final long uploadHandle,
+                       @NonNull final KinesisVideoProducerStream stream,
                        @NonNull final Log log) {
         this.stream = Preconditions.checkNotNull(stream);
+        this.uploadHandle = uploadHandle;
         this.log = Preconditions.checkNotNull(log);
         this.stoppedLatch = new CountDownLatch(1);
     }
@@ -80,7 +83,7 @@ private void processAckInputStream() {
                     final String bytesString = new String(buffer, 0, bytesRead, StandardCharsets.UTF_8);
                     log.debug("Received ACK bits: " + bytesString);
                     try {
-                        stream.parseFragmentAck(bytesString);
+                        stream.parseFragmentAck(uploadHandle, bytesString);
                     } catch (final ProducerException e) {
                         // Log the exception
                         log.exception(e, "Processing ACK threw an exception. Logging and continuing. ");
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingAckConsumer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingAckConsumer.java
index 8a6f4869ff..e536604aa5 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingAckConsumer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingAckConsumer.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingInputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingInputStream.java
index 7c0dbfe193..dc93b932a2 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingInputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/BlockingInputStream.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/DefaultServiceCallbacksImpl.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/DefaultServiceCallbacksImpl.java
index a95a0e6c2e..be2267b4df 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/DefaultServiceCallbacksImpl.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/DefaultServiceCallbacksImpl.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -44,7 +44,6 @@
  */
 public class DefaultServiceCallbacksImpl implements ServiceCallbacks {
     private static final int HTTP_OK = 200;
-    private static final int HTTP_TEAPOT = 418;
     private static final int HTTP_BAD_REQUEST = 400;
     private static final int HTTP_NOT_FOUND = 404;
     private static final int HTTP_RESOURCE_IN_USE = 10003;
@@ -55,10 +54,13 @@
 
     private class CompletionCallback implements Consumer<Exception> {
         private final KinesisVideoProducerStream stream;
+        private final long uploadHandle;
 
-        public CompletionCallback(@NonNull final KinesisVideoProducerStream stream) {
+        public CompletionCallback(@NonNull final KinesisVideoProducerStream stream,
+                                  final long uploadHandle) {
 
             this.stream = Preconditions.checkNotNull(stream);
+            this.uploadHandle = uploadHandle;
         }
 
         @Override
@@ -80,7 +82,7 @@ public void accept(@Nullable final Exception object) {
 
                 if (statusCode != HTTP_OK) {
                     try {
-                        stream.streamTerminated(statusCode);
+                        stream.streamTerminated(uploadHandle, statusCode);
                     } catch (final ProducerException e) {
                         log.exception(e, "Reporting stream termination threw an exception");
                     }
@@ -131,7 +133,7 @@ public CompletionCallback getCompletionCallback() {
     }
 
     private static class OngoingStreamList extends ArrayList<OngoingStream> {
-        public OngoingStream stopActiveStream(int index) throws IndexOutOfBoundsException {
+        public OngoingStream stopActiveStream(final int index) throws IndexOutOfBoundsException {
             final OngoingStream stream = super.remove(index);
             stream.stop();
 
@@ -144,7 +146,7 @@ public OngoingStream stopActiveStream(int index) throws IndexOutOfBoundsExceptio
             return stream;
         }
 
-        public boolean addStream(OngoingStream stream) {
+        public boolean addStream(final OngoingStream stream) {
             if (size() == 0) {
                 // Mark as active if no other streams are in progress
                 stream.setActive();
@@ -235,6 +237,11 @@ public void appendOngoingStream(@NonNull final BlockingInputStream dataStream,
      */
     private final List<OngoingStreamingInfo> mStreams = new ArrayList<OngoingStreamingInfo>();
 
+    /**
+     * A monotonically increasing value serving as an upload handle
+     */
+    private long uploadHandle;
+
     public DefaultServiceCallbacksImpl(
             @NonNull final Log log,
             @NonNull final ScheduledExecutorService executor,
@@ -245,6 +252,8 @@ public DefaultServiceCallbacksImpl(
         this.log = Preconditions.checkNotNull(log);
         this.configuration = Preconditions.checkNotNull(configuration);
 
+        this.uploadHandle = 0;
+
         try {
             this.kinesisVideoServiceClient.initialize(configuration);
         } catch (final KinesisVideoException e) {
@@ -388,7 +397,7 @@ public void run() {
                             apiName,
                             timeoutInMillis,
                             credentialsProvider);
-                } catch (KinesisVideoException e) {
+                } catch (final KinesisVideoException e) {
                     log.error("Kinesis Video service client returned an error " + e.getMessage() + " Reporting to Kinesis Video PIC.");
                     statusCode = getStatusCodeFromException(e);
                 }
@@ -514,11 +523,13 @@ public void run() {
 
                 final KinesisVideoCredentialsProvider credentialsProvider = getCredentialsProvider(authData, log);
 
+                final long clientUploadHandle = getUploadHandle();
+
                 try {
-                    final BlockingInputStream dataStream = new BlockingInputStream(kinesisVideoProducerStream.getDataStream(), log);
-                    final AckConsumer ackConsumer = new AckConsumer(kinesisVideoProducerStream, log);
+                    final BlockingInputStream dataStream = new BlockingInputStream(kinesisVideoProducerStream.getDataStream(clientUploadHandle), log);
+                    final AckConsumer ackConsumer = new AckConsumer(clientUploadHandle, kinesisVideoProducerStream, log);
                     final BlockingAckConsumer blockingAckConsumer = new BlockingAckConsumer(ackConsumer);
-                    final CompletionCallback completionCallback = new CompletionCallback(kinesisVideoProducerStream);
+                    final CompletionCallback completionCallback = new CompletionCallback(kinesisVideoProducerStream, clientUploadHandle);
 
                     // Insert into the ongoing streams for book keeping
                     addOngoingStreams(dataStream, ackConsumer, completionCallback, kinesisVideoProducerStream);
@@ -544,9 +555,8 @@ public void run() {
                 }
 
                 try {
-                    // TODO: think about what we need to identify the stream
-                    final long clientHandle = 0;
-                    kinesisVideoProducer.putStreamResult(customData, clientHandle, statusCode);
+                    log.info("putStreamResult uploadHandle " + clientUploadHandle + " status " + statusCode);
+                    kinesisVideoProducer.putStreamResult(customData, clientUploadHandle, statusCode);
                 } catch (final ProducerException e) {
                     throw new RuntimeException(e);
                 }
@@ -589,7 +599,7 @@ public void run() {
                             tagsMap,
                             timeoutInMillis,
                             credentialsProvider);
-                } catch (KinesisVideoException e) {
+                } catch (final KinesisVideoException e) {
                     log.error("Kinesis Video service client returned an error " + e.getMessage() + " Reporting to Kinesis Video PIC.");
                     statusCode = getStatusCodeFromException(e);
                 }
@@ -673,6 +683,10 @@ private long calculateRelativeServiceCallAfter(final long absoluteCallAfter) {
                 System.currentTimeMillis() * Time.NANOS_IN_A_MILLISECOND);
     }
 
+    private long getUploadHandle() {
+        return uploadHandle++;
+    }
+
     /**
      * <p>Checks if a CharSequence is whitespace, empty ("") or null.</p>
      * <p>
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AccessDeniedException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AccessDeniedException.java
index e6b06c12c4..16315da348 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AccessDeniedException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AccessDeniedException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AmazonServiceException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AmazonServiceException.java
index cff730f9d6..bfc253191a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AmazonServiceException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/AmazonServiceException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceInUseException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceInUseException.java
index 88e3b9e701..909d87af6c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceInUseException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceInUseException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceNotFoundException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceNotFoundException.java
index 35181456fe..8dad89e80d 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceNotFoundException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/service/exception/ResourceNotFoundException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java
index 8680b65982..4af46e9341 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java
index 4a3c379661..4b3e786a69 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java
index 2b5b291fe3..91313a205e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java
index 930b7e9797..c09c489d19 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java
index 0e947271c5..a07c3cf90b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java
index 698b6fb6cc..41e9284dd7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java
index d068769ea6..9511066cba 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java
index 13685431f9..efb3c4d29c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java
index 9648c43f2d..53ced408f9 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java
index 90d8cb82f6..bc7f648104 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java
index 73f8c9e1b1..457e899053 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java
index 30a9e5e563..1084864467 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java
index ad47ade689..ccfd21500e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -17,9 +17,12 @@
 
 package com.amazonaws.kinesisvideo.streaming;
 
+import com.amazonaws.kinesisvideo.producer.KinesisVideoFragmentAck;
 import com.amazonaws.kinesisvideo.producer.ProducerException;
 import com.amazonaws.kinesisvideo.producer.StreamCallbacks;
 
+import android.support.annotation.NonNull;
+
 public class DefaultStreamCallbacks implements StreamCallbacks {
     @Override
     public void streamUnderflowReport() throws ProducerException {
@@ -32,7 +35,12 @@ public void streamLatencyPressure(final long duration) throws ProducerException
     }
 
     @Override
-    public void streamConnectionStale(final long duration) throws ProducerException {
+    public void streamConnectionStale(final long lastAckDuration) throws ProducerException {
+        // no-op
+    }
+
+    @Override
+    public void fragmentAckReceived(@NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException {
         // no-op
     }
 
@@ -52,7 +60,8 @@ public void droppedFragmentReport(final long fragmentTimecode) throws ProducerEx
     }
 
     @Override
-    public void streamDataAvailable(final long duration, final long availableSize) throws ProducerException {
+    public void streamDataAvailable(final long uploadHandle, final long duration, final long availableSize)
+            throws ProducerException {
         // no-op
     }
 
@@ -62,7 +71,7 @@ public void streamReady() throws ProducerException {
     }
 
     @Override
-    public void streamClosed() throws ProducerException {
+    public void streamClosed(final long uploadHandle) throws ProducerException {
         // no-op
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/ProducerStreamUtil.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/ProducerStreamUtil.java
index 49c333e153..e8943e1d81 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/ProducerStreamUtil.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/ProducerStreamUtil.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
@@ -74,7 +74,7 @@ public static StreamInfo toStreamInfo(
         if (isCameraConfiguration(mediaSourceConfiguration)) {
             return getCameraStreamInfo(streamName, mediaSourceConfiguration);
         } else if (isBytesConfiguration(mediaSourceConfiguration)) {
-            return getBytesStreamInfo(streamName);
+            return getBytesStreamInfo(streamName, mediaSourceConfiguration);
         } else if (isImageFileConfiguration(mediaSourceConfiguration)) {
             return getImageFileStreamInfo(mediaSourceConfiguration, streamName);
         }
@@ -136,26 +136,29 @@ private static StreamInfo getCameraStreamInfo(
                 DEFAULT_BUFFER_DURATION_IN_SECONDS * HUNDREDS_OF_NANOS_IN_A_SECOND,
                 DEFAULT_REPLAY_DURATION_IN_SECONDS * HUNDREDS_OF_NANOS_IN_A_SECOND,
                 DEFAULT_STALENESS_DURATION_IN_SECONDS * HUNDREDS_OF_NANOS_IN_A_SECOND,
-                configuration.getTimeScale() / 100,
+                configuration.getTimeScale() / NANOS_IN_A_TIME_UNIT,
                 RECALCULATE_METRICS,
                 configuration.getCodecPrivateData(),
                 getTags(),
                 configuration.getNalAdaptationFlags());
     }
 
-    private static StreamInfo getBytesStreamInfo(final String streamName) throws KinesisVideoException {
+    private static StreamInfo getBytesStreamInfo(final String streamName,
+            final MediaSourceConfiguration mediaSourceConfiguration) throws KinesisVideoException {
+        final BytesMediaSourceConfiguration configuration =
+                (BytesMediaSourceConfiguration) mediaSourceConfiguration;
         return new StreamInfo(VERSION_ZERO,
                 streamName,
                 StreamInfo.StreamingType.STREAMING_TYPE_REALTIME,
                 "application/octet-stream",
                 NO_KMS_KEY_ID,
-                NO_RETENTION,
+                configuration.getRetentionPeriodInHours() * HUNDREDS_OF_NANOS_IN_AN_HOUR,
                 NOT_ADAPTIVE,
                 MAX_LATENCY_ZERO,
                 DEFAULT_GOP_DURATION * HUNDREDS_OF_NANOS_IN_A_MILLISECOND,
                 KEYFRAME_FRAGMENTATION,
-                SDK_GENERATES_TIMECODES,
-                RELATIVE_FRAGMENT_TIMECODES,
+                USE_FRAME_TIMECODES,
+                ABSOLUTE_TIMECODES,
                 REQUEST_FRAGMENT_ACKS,
                 RECOVER_ON_FAILURE,
                 null,
@@ -165,7 +168,7 @@ private static StreamInfo getBytesStreamInfo(final String streamName) throws Kin
                 DEFAULT_BUFFER_DURATION_IN_SECONDS * HUNDREDS_OF_NANOS_IN_A_SECOND,
                 DEFAULT_REPLAY_DURATION_IN_SECONDS * HUNDREDS_OF_NANOS_IN_A_SECOND,
                 DEFAULT_STALENESS_DURATION_IN_SECONDS * HUNDREDS_OF_NANOS_IN_A_SECOND,
-                DEFAULT_TIMESCALE / 100,
+                DEFAULT_TIMESCALE,
                 RECALCULATE_METRICS,
                 null,
                 getTags(),
@@ -177,15 +180,15 @@ private static StreamInfo getImageFileStreamInfo(final MediaSourceConfiguration
         try {
             return (StreamInfo) configuration.getClass().getMethod("toStreamInfo", String.class)
                     .invoke(configuration, streamName);
-        } catch (IllegalAccessException e) {
+        } catch (final IllegalAccessException e) {
             throw new KinesisVideoException(e);
-        } catch (IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e) {
             throw new KinesisVideoException(e);
-        } catch (InvocationTargetException e) {
+        } catch (final InvocationTargetException e) {
             throw new KinesisVideoException(e);
-        } catch (NoSuchMethodException e) {
+        } catch (final NoSuchMethodException e) {
             throw new KinesisVideoException(e);
-        } catch (SecurityException e) {
+        } catch (final SecurityException e) {
             throw new KinesisVideoException(e);
         }
     }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/KinesisVideoCredentialsProviderImpl.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/KinesisVideoCredentialsProviderImpl.java
index 8fb3b9762d..cf737e8fdd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/KinesisVideoCredentialsProviderImpl.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/KinesisVideoCredentialsProviderImpl.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAdapter.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAdapter.java
index 3be6867a78..6522096c6f 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAdapter.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAdapter.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraFramesSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraFramesSource.java
index 635e431e58..7f42e7b9b6 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraFramesSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraFramesSource.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/EncodingCancellationToken.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/EncodingCancellationToken.java
index 5e2dc1f921..b6505a475a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/EncodingCancellationToken.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/EncodingCancellationToken.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/KinesisVideoCameraException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/KinesisVideoCameraException.java
index c67200bf4a..c4a97b77b4 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/KinesisVideoCameraException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/KinesisVideoCameraException.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/TextureViewHelper.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/TextureViewHelper.java
index 584d75250c..198f454dbe 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/TextureViewHelper.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/TextureViewHelper.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/AndroidKinesisVideoClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/AndroidKinesisVideoClient.java
index 55b204582f..7b9de08aa1 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/AndroidKinesisVideoClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/AndroidKinesisVideoClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java
index bcd5c25da1..3dccb217fa 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/data/MimeType.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/data/MimeType.java
index d9943124b6..6d608f41cf 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/data/MimeType.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/data/MimeType.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java
index e65e5f6ddf..67b3bef637 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFrameSubmitter.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFrameSubmitter.java
index a480041691..ce9dfc08bf 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFrameSubmitter.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFrameSubmitter.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
index 4e8f404938..9a628929d4 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/MuxerWrapper.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/MuxerWrapper.java
index 1d49dd1108..b036c095d3 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/MuxerWrapper.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/MuxerWrapper.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSource.java
index 00049c6077..f418de991a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSource.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSourceConfiguration.java
index 80af30ead6..f6576a9686 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSourceConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidCameraMediaSourceConfiguration.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java
index d15d7344c1..8c89a7ed96 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java
index 9485b064dd..c63f00ba23 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/service/KinesisVideoAndroidServiceClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/service/KinesisVideoAndroidServiceClient.java
index cd551a187b..3824d153fc 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/service/KinesisVideoAndroidServiceClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/service/KinesisVideoAndroidServiceClient.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/signing/KinesisVideoAndroidAWS4Signer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/signing/KinesisVideoAndroidAWS4Signer.java
index 9f6fc8e329..20ff56ecdd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/signing/KinesisVideoAndroidAWS4Signer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/signing/KinesisVideoAndroidAWS4Signer.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/AndroidLogOutputChannel.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/AndroidLogOutputChannel.java
index 927c63dd89..b2060783fd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/AndroidLogOutputChannel.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/AndroidLogOutputChannel.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraHardwareCapabilitiesHelper.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraHardwareCapabilitiesHelper.java
index 596e04e0f0..7f9222fe24 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraHardwareCapabilitiesHelper.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraHardwareCapabilitiesHelper.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraUtils.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraUtils.java
index 0e925e349c..3ae3451173 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraUtils.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/CameraUtils.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/DefaultCameraConfigurationHelper.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/DefaultCameraConfigurationHelper.java
index afc5cf5b29..4fc5246526 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/DefaultCameraConfigurationHelper.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/DefaultCameraConfigurationHelper.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java
index 40b54bc8be..ddb4cbf909 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/VideoEncoderUtils.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/VideoEncoderUtils.java
index 2d4d8a7dc2..e8205acd50 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/VideoEncoderUtils.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/VideoEncoderUtils.java
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017-2017 Amazon.com,
+ * Copyright 2017-2018 Amazon.com,
  * Inc. or its affiliates. All Rights Reserved.
  *
  * Licensed under the Amazon Software License (the "License").
diff --git a/aws-android-sdk-kinesisvideo/src/main/jni/arm64-v8a/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jni/arm64-v8a/libKinesisVideoProducerJNI.so
index 78c0a9fef6..9fa77fc20e 100644
Binary files a/aws-android-sdk-kinesisvideo/src/main/jni/arm64-v8a/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jni/arm64-v8a/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jni/armeabi-v7a/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jni/armeabi-v7a/libKinesisVideoProducerJNI.so
index edae05c3a9..2496c194a1 100644
Binary files a/aws-android-sdk-kinesisvideo/src/main/jni/armeabi-v7a/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jni/armeabi-v7a/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jni/armeabi/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jni/armeabi/libKinesisVideoProducerJNI.so
index c486104b08..f54bca8ca3 100644
Binary files a/aws-android-sdk-kinesisvideo/src/main/jni/armeabi/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jni/armeabi/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jni/x86/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jni/x86/libKinesisVideoProducerJNI.so
index 1c930d6222..ef5a6eaacf 100644
Binary files a/aws-android-sdk-kinesisvideo/src/main/jni/x86/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jni/x86/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jni/x86_64/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jni/x86_64/libKinesisVideoProducerJNI.so
index ae26553dc3..fbf5c29ada 100644
Binary files a/aws-android-sdk-kinesisvideo/src/main/jni/x86_64/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jni/x86_64/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kms/pom.xml b/aws-android-sdk-kms/pom.xml
index c69ca24962..abef3aa20c 100644
--- a/aws-android-sdk-kms/pom.xml
+++ b/aws-android-sdk-kms/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-lambda/pom.xml b/aws-android-sdk-lambda/pom.xml
index abc35630be..c71eddacf7 100644
--- a/aws-android-sdk-lambda/pom.xml
+++ b/aws-android-sdk-lambda/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/aws-android-sdk-lex/pom.xml b/aws-android-sdk-lex/pom.xml
index 3bd507d1ca..ae3c09b6b7 100644
--- a/aws-android-sdk-lex/pom.xml
+++ b/aws-android-sdk-lex/pom.xml
@@ -12,7 +12,7 @@
     <parent>
         <groupId>com.amazonaws</groupId>
         <artifactId>aws-android-sdk-pom</artifactId>
-        <version>2.6.13</version>
+        <version>2.6.17</version>
     </parent>
 
    <!-- Component includes software under each of these licenses; this is not a choice of license -->
@@ -33,7 +33,7 @@
             <groupId>com.amazonaws</groupId>
             <artifactId>aws-android-sdk-core</artifactId>
             <optional>false</optional>
-            <version>2.6.13</version>
+            <version>2.6.17</version>
         </dependency>
         <dependency>
             <groupId>com.google.android</groupId>
diff --git a/aws-android-sdk-logs/pom.xml b/aws-android-sdk-logs/pom.xml
index a207b98f06..5673bdf5a9 100644
--- a/aws-android-sdk-logs/pom.xml
+++ b/aws-android-sdk-logs/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-machinelearning/pom.xml b/aws-android-sdk-machinelearning/pom.xml
index bec4acd896..1d1b7e5d30 100644
--- a/aws-android-sdk-machinelearning/pom.xml
+++ b/aws-android-sdk-machinelearning/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-mobile-client/pom.xml b/aws-android-sdk-mobile-client/pom.xml
index aba5ca135a..c9b9da91e0 100644
--- a/aws-android-sdk-mobile-client/pom.xml
+++ b/aws-android-sdk-mobile-client/pom.xml
@@ -28,7 +28,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -36,7 +36,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
 
@@ -44,7 +44,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-ui</artifactId>
       <optional>true</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
 
@@ -60,7 +60,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-google</artifactId>
       <optional>true</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
 
@@ -68,7 +68,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-facebook</artifactId>
       <optional>true</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
 
@@ -76,7 +76,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-auth-userpools</artifactId>
       <optional>true</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
       <type>aar</type>
     </dependency>
 
diff --git a/aws-android-sdk-mobileanalytics/pom.xml b/aws-android-sdk-mobileanalytics/pom.xml
index 895bc125e7..6a291e894b 100644
--- a/aws-android-sdk-mobileanalytics/pom.xml
+++ b/aws-android-sdk-mobileanalytics/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/aws-android-sdk-pinpoint/pom.xml b/aws-android-sdk-pinpoint/pom.xml
index 7558f9b6f3..35e898c231 100644
--- a/aws-android-sdk-pinpoint/pom.xml
+++ b/aws-android-sdk-pinpoint/pom.xml
@@ -12,7 +12,7 @@
     <parent>
         <groupId>com.amazonaws</groupId>
         <artifactId>aws-android-sdk-pom</artifactId>
-        <version>2.6.13</version>
+        <version>2.6.17</version>
     </parent>
 
     <dependencies>
@@ -20,7 +20,7 @@
             <groupId>com.amazonaws</groupId>
             <artifactId>aws-android-sdk-core</artifactId>
             <optional>false</optional>
-            <version>2.6.13</version>
+            <version>2.6.17</version>
         </dependency>
         <dependency>
             <groupId>junit</groupId>
diff --git a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointConfiguration.java b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointConfiguration.java
index 53eeffe4c8..9fb0fb0880 100644
--- a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointConfiguration.java
+++ b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointConfiguration.java
@@ -16,16 +16,16 @@
 package com.amazonaws.mobileconnectors.pinpoint;
 
 import android.content.Context;
-
 import com.amazonaws.ClientConfiguration;
 import com.amazonaws.auth.AWSCredentialsProvider;
 import com.amazonaws.mobile.config.AWSConfiguration;
 import com.amazonaws.mobileconnectors.pinpoint.targeting.notification.AppLevelOptOutProvider;
 import com.amazonaws.regions.Regions;
 import com.amazonaws.services.pinpoint.model.ChannelType;
-
 import org.json.JSONObject;
 
+import java.util.concurrent.ExecutorService;
+
 /**
  * The PinpointConfiguration class allows developers to configure the Pinpoint SDK.
  */
@@ -42,6 +42,7 @@
     private AWSCredentialsProvider credentialsProvider;
     private PinpointCallback<PinpointManager> initCompletionCallback;
     private AppLevelOptOutProvider appLevelOptOutProvider;
+    private ExecutorService executor;
 
     /**
      * Create an {@link PinpointConfiguration} object with the specified parameters.
@@ -351,6 +352,24 @@ public PinpointConfiguration withPostNotificationsInForeground(final boolean sho
         return this;
     }
 
+    /**
+     * The custom executor used for handlers in the TargetingClient.
+     * @return The custom executor.
+     */
+    public ExecutorService getExecutor() {
+        return executor;
+    }
+
+    /**
+     * Custom executor to use for handlers in the TargetingClient.
+     * @param executorService the executor to use.
+     * @return the current PinpointConfiguration instance.
+     */
+    public PinpointConfiguration withExecutor(final ExecutorService executorService) {
+        this.executor = executorService;
+        return this;
+    }
+
     /**
      * @return true if notifications should be posted while the app is in the foreground, otherwise false.
      */
diff --git a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointManager.java b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointManager.java
index 2dd8a02712..519acbc8f6 100644
--- a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointManager.java
+++ b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/PinpointManager.java
@@ -105,7 +105,12 @@ public PinpointManager(final PinpointConfiguration config) {
             }
 
             if (config.getEnableTargeting()) {
-                this.targetingClient = new TargetingClient(pinpointContext);
+                if (config.getExecutor() != null) {
+                    this.targetingClient = new TargetingClient(pinpointContext, config.getExecutor());
+                } else {
+                    this.targetingClient = new TargetingClient(pinpointContext);
+                }
+
                 this.pinpointContext.setTargetingClient(this.targetingClient);
                 this.notificationClient.addDeviceTokenRegisteredHandler(new DeviceTokenRegisteredHandler() {
 
diff --git a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClient.java b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClient.java
index 9b45cebd2d..2226209a62 100644
--- a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClient.java
+++ b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClient.java
@@ -25,6 +25,7 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.json.JSONArray;
@@ -72,7 +73,7 @@
      * @param executor A thread pool executor
      */
     public TargetingClient(final PinpointContext context,
-                           ThreadPoolExecutor executor) {
+                           ExecutorService executor) {
         checkNotNull(context, "A valid pinpointContext must be provided");
         this.endpointRunnableQueue = executor;
         this.context = context;
@@ -168,8 +169,13 @@ private void executeUpdate(EndpointProfile endpointProfile) {
             .withRegion(endpointProfile.getLocation().getRegion())
             .withCountry(endpointProfile.getLocation().getCountry());
 
-        final EndpointUser user = new EndpointUser();
-        user.setUserId(endpointProfile.getUser().getUserId());
+        final EndpointUser user;
+        if (endpointProfile.getUser().getUserId() == null) {
+            user = null;
+        } else {
+            user = new EndpointUser();
+            user.setUserId(endpointProfile.getUser().getUserId());
+        }
 
         final EndpointRequest endpointRequest = new EndpointRequest().withChannelType(endpointProfile.getChannelType())
                                                                      .withAddress(endpointProfile.getAddress())
diff --git a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/endpointProfile/EndpointProfileUser.java b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/endpointProfile/EndpointProfileUser.java
index 55843a77ee..d1b1f7230b 100644
--- a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/endpointProfile/EndpointProfileUser.java
+++ b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/endpointProfile/EndpointProfileUser.java
@@ -24,7 +24,7 @@
  */
 public class EndpointProfileUser implements JSONSerializable {
 
-    private String userId = "";
+    private String userId;
 
     public String getUserId() {
         return this.userId;
diff --git a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/notification/NotificationClientBase.java b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/notification/NotificationClientBase.java
index 43b9e6de42..e0b073f573 100644
--- a/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/notification/NotificationClientBase.java
+++ b/aws-android-sdk-pinpoint/src/main/java/com/amazonaws/mobileconnectors/pinpoint/targeting/notification/NotificationClientBase.java
@@ -101,6 +101,7 @@
     private static final int ANDROID_KITKAT = 19;
     private static final int ANDROID_LOLLIPOP = 21;
     private static final int ANDROID_MARSHMALLOW = 23;
+    private static final int ANDROID_NOUGAT = 24;
     private static final int ANDROID_OREO = 26;
     private static final int NOTIFICATION_CHANNEL_IMPORTANCE = 4; //IMPORTANCE_HIGH = 4. This corresponds to PRIORITY_HIGH (value 1) in NotificationBuilder. setPriority is deprecated in API 26
 
@@ -309,8 +310,8 @@ private boolean initClassesAndMethodsByReflection() {
             notificationBigTextStyleClass = Class.forName("android.app.Notification$BigTextStyle"); //API Level 16
             notificationStyleClass = Class.forName("android.app.Notification$Style"); //API Level 16
             notificationBigPictureStyleClass = Class.forName("android.app.Notification$BigPictureStyle"); //API Level 16
-            if (android.os.Build.VERSION.SDK_INT >= ANDROID_MARSHMALLOW) {
-                iconClass = Class.forName("android.graphics.drawable.Icon"); //API Level 23
+            if (android.os.Build.VERSION.SDK_INT >= ANDROID_NOUGAT) {
+                iconClass = Class.forName("android.graphics.drawable.Icon"); //API Level 24
             }
             if (android.os.Build.VERSION.SDK_INT >= ANDROID_OREO) {
                 notificationChannelClass = Class.forName("android.app.NotificationChannel"); //API Level 26
@@ -346,7 +347,7 @@ private boolean buildMethodsByReflection() {
             setSummaryMethod = notificationBigPictureStyleClass.getDeclaredMethod("setSummaryText", CharSequence.class);
             setLargeIconMethod = notificationBuilderClass.getDeclaredMethod("setLargeIcon", Bitmap.class);
 
-            if (android.os.Build.VERSION.SDK_INT >= ANDROID_MARSHMALLOW) {
+            if (android.os.Build.VERSION.SDK_INT >= ANDROID_NOUGAT) {
                 setSmallIconMethod = notificationBuilderClass.getDeclaredMethod("setSmallIcon", iconClass);
                 createWithBitmapMethod = iconClass.getDeclaredMethod("createWithBitmap", Bitmap.class);
             }
@@ -494,11 +495,12 @@ private boolean buildNotificationIcons(final int iconResId, final String imageIc
                     // we can set the large icon as the app icon, so that the small icon will be shown in the corner
                     // of the large icon, where it doesn't look as bad that it may be a grey box.
                     ((android.os.Build.VERSION.SDK_INT >= ANDROID_LOLLIPOP
-                        && android.os.Build.VERSION.SDK_INT < ANDROID_MARSHMALLOW)
+                        && android.os.Build.VERSION.SDK_INT < ANDROID_NOUGAT)
                     // For API level 23 and above when the small icon isn't set it makes sense to show the large icon
                     // also for the user experience (to make it easiest for the customer to quickly recognize the app
                     // that caused the notification) also if the large icon fails to load we can fall back to app icon.
-                     || (android.os.Build.VERSION.SDK_INT >= ANDROID_MARSHMALLOW
+                    // We were experiencing crashes using this behavior on API level 23 so only use on API level 24.
+                     || (android.os.Build.VERSION.SDK_INT >= ANDROID_NOUGAT
                         && (imageIconUrl != null || imageSmallIconUrl == null)))) {
                 largeIconBitmap = obtainBitmapFromResId(iconResId);
             }
@@ -511,8 +513,9 @@ private boolean buildNotificationIcons(final int iconResId, final String imageIc
             }
 
             // If we are able to use a bitmap to set the small icon.
-            if (iconClass != null && android.os.Build.VERSION.SDK_INT >= ANDROID_MARSHMALLOW) {
-                // Small icon cannot be set from a bitmap unless on SDK version 23 or above.
+            if (iconClass != null && android.os.Build.VERSION.SDK_INT >= ANDROID_NOUGAT) {
+                // Small icon cannot be set from a bitmap unless on API level 23 or above.
+                // We were experiencing crashes using this behavior on API level 23 so only use on API level 24.
                 Bitmap smallIconBitmap = null;
                 if (imageSmallIconUrl != null) {
                     try {
@@ -671,11 +674,16 @@ protected final Intent notificationIntent(final Bundle pushBundle, final String
         return (campaignId + ":" + activityId).hashCode();
     }
 
-    private boolean displayNotification(final Bundle pushBundle, final Class<?> targetClass, String imageUrl,
-                                        String iconImageUrl, String iconSmallImageUrl,
-                                        Map<String, String> campaignAttributes, String intentAction) {
+    private boolean displayNotification(final Bundle pushBundle, final Class<?> targetClass, final String imageUrl,
+                                        final String iconImageUrl, final String iconSmallImageUrl,
+                                        final Map<String, String> campaignAttributes, final String intentAction) {
         log.info("Display Notification: " + pushBundle.toString());
 
+        final int iconResId = getNotificationIconResourceId(pushBundle.getString(NOTIFICATION_ICON_PUSH_KEY));
+        if (iconResId == 0) {
+            return false;
+        }
+
         final String title = pushBundle.getString(NOTIFICATION_TITLE_PUSH_KEY);
         final String message = pushBundle.getString(NOTIFICATION_BODY_PUSH_KEY);
 
@@ -684,53 +692,54 @@ private boolean displayNotification(final Bundle pushBundle, final Class<?> targ
 
         final int requestID = getNotificationRequestId(campaignId, activityId);
 
-        final int iconResId = getNotificationIconResourceId(pushBundle.getString(NOTIFICATION_ICON_PUSH_KEY));
-        if (iconResId == 0) {
-            return false;
-        }
-
-        final Notification notification = createNotification(iconResId, title, message, imageUrl, iconImageUrl,
-                                                             iconSmallImageUrl,
-                                                             this.createOpenAppPendingIntent(pushBundle, targetClass,
-                                                                                             campaignId, requestID,
-                                                                                             intentAction));
-
-        notification.flags |= Notification.FLAG_AUTO_CANCEL;
-        notification.defaults |= Notification.DEFAULT_SOUND | Notification.DEFAULT_VIBRATE;
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                final Notification notification = createNotification(iconResId, title, message, imageUrl, iconImageUrl,
+                                                                     iconSmallImageUrl,
+                                                                     NotificationClientBase.this.createOpenAppPendingIntent(pushBundle, targetClass,
+                                                                                                     campaignId, requestID,
+                                                                                                     intentAction));
+
+                notification.flags |= Notification.FLAG_AUTO_CANCEL;
+                notification.defaults |= Notification.DEFAULT_SOUND | Notification.DEFAULT_VIBRATE;
+
+                if (android.os.Build.VERSION.SDK_INT >= ANDROID_LOLLIPOP) {
+                    log.info("SDK greater than 21 detected: " + android.os.Build.VERSION.SDK_INT);
+
+                    final String colorString = pushBundle.getString(NOTIFICATION_COLOR_PUSH_KEY);
+                    if (colorString != null) {
+                        int color;
+                        try {
+                            color = Color.parseColor(colorString);
+                        } catch (final IllegalArgumentException ex) {
+                            log.warn("Couldn't parse campaign notification color.", ex);
+                            color = 0;
+                        }
+                        Exception exception = null;
+                        try {
+                            final Field colorField = notification.getClass().getDeclaredField("color");
+                            colorField.setAccessible(true);
+                            colorField.set(notification, color);
+                        } catch (final IllegalAccessException ex) {
+                            exception = ex;
+                        } catch (final NoSuchFieldException ex) {
+                            exception = ex;
+                        }
+                        if (exception != null) {
+                            log.error("Couldn't set campaign notification color : " + exception.getMessage(), exception);
+                        }
+                    }
+                }
 
-        if (android.os.Build.VERSION.SDK_INT >= ANDROID_LOLLIPOP) {
-            log.info("SDK greater than 21 detected: " + android.os.Build.VERSION.SDK_INT);
+                final NotificationManager notificationManager = (NotificationManager) pinpointContext.getApplicationContext()
+                                                                                                     .getSystemService(
+                                                                                                         Context.NOTIFICATION_SERVICE);
 
-            final String colorString = pushBundle.getString(NOTIFICATION_COLOR_PUSH_KEY);
-            if (colorString != null) {
-                int color;
-                try {
-                    color = Color.parseColor(colorString);
-                } catch (final IllegalArgumentException ex) {
-                    log.warn("Couldn't parse campaign notification color.", ex);
-                    color = 0;
-                }
-                Exception exception = null;
-                try {
-                    final Field colorField = notification.getClass().getDeclaredField("color");
-                    colorField.setAccessible(true);
-                    colorField.set(notification, color);
-                } catch (final IllegalAccessException ex) {
-                    exception = ex;
-                } catch (final NoSuchFieldException ex) {
-                    exception = ex;
-                }
-                if (exception != null) {
-                    log.error("Couldn't set campaign notification color : " + exception.getMessage(), exception);
-                }
+                notificationManager.notify(requestID, notification);
             }
-        }
-
-        final NotificationManager notificationManager = (NotificationManager) pinpointContext.getApplicationContext()
-                                                                                             .getSystemService(
-                                                                                                 Context.NOTIFICATION_SERVICE);
+        }).start();
 
-        notificationManager.notify(requestID, notification);
         return true;
     }
 
diff --git a/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/analytics/PinpointManagerTest.java b/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/analytics/PinpointManagerTest.java
index 4b4d2ddc09..8350c0f64e 100644
--- a/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/analytics/PinpointManagerTest.java
+++ b/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/analytics/PinpointManagerTest.java
@@ -16,6 +16,10 @@
 package com.amazonaws.mobileconnectors.pinpoint.analytics;
 
 import java.util.Random;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -113,4 +117,15 @@ public void initAndTestNewConstructor() {
 
         assertNotNull(analyticsClient);
     }
+
+    @Test
+    public void initWithCustomExecutor() {
+        PinpointConfiguration config = createConfig(uniqueAnalyticsTag1);
+        ThreadPoolExecutor customExecutor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1),
+                new ThreadPoolExecutor.DiscardPolicy());
+        analyticsClient = new PinpointManager(config.withExecutor(customExecutor));
+        assertNotNull(analyticsClient);
+        assertNotNull(analyticsClient.getTargetingClient());
+
+    }
 }
diff --git a/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClientTest.java b/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClientTest.java
index 94912d37a1..bbe09c9d87 100644
--- a/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClientTest.java
+++ b/aws-android-sdk-pinpoint/src/test/java/com/amazonaws/mobileconnectors/pinpoint/targeting/TargetingClientTest.java
@@ -15,9 +15,14 @@
 
 package com.amazonaws.mobileconnectors.pinpoint.targeting;
 
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.ThreadPoolExecutor;
+import com.amazonaws.mobileconnectors.pinpoint.analytics.MobileAnalyticsTestBase;
+import com.amazonaws.mobileconnectors.pinpoint.analytics.utils.AnalyticsContextBuilder;
+import com.amazonaws.mobileconnectors.pinpoint.internal.core.PinpointContext;
+import com.amazonaws.mobileconnectors.pinpoint.internal.core.system.MockDeviceDetails;
+import com.amazonaws.mobileconnectors.pinpoint.targeting.endpointProfile.EndpointProfile;
+import com.amazonaws.mobileconnectors.pinpoint.targeting.endpointProfile.EndpointProfileUser;
+import com.amazonaws.services.pinpoint.AmazonPinpointClient;
+import com.amazonaws.services.pinpoint.model.UpdateEndpointRequest;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -25,20 +30,17 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
-import com.amazonaws.mobileconnectors.pinpoint.analytics.MobileAnalyticsTestBase;
-import com.amazonaws.mobileconnectors.pinpoint.analytics.utils.AnalyticsContextBuilder;
-import com.amazonaws.mobileconnectors.pinpoint.internal.core.PinpointContext;
-import com.amazonaws.mobileconnectors.pinpoint.internal.core.system.MockDeviceDetails;
-import com.amazonaws.mobileconnectors.pinpoint.targeting.endpointProfile.EndpointProfile;
-import com.amazonaws.services.pinpoint.AmazonPinpointClient;
-import com.amazonaws.services.pinpoint.model.UpdateEndpointRequest;
 
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.ThreadPoolExecutor;
+
+import static junit.framework.Assert.assertNotNull;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.junit.Assert.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -178,4 +180,39 @@ public void updateEndpointCallNullSetters() {
 
         targetingClient.updateEndpointProfile(profile);
     }
+
+    @Test
+    public void updateEndpointNullUserId() {
+        final ArgumentCaptor<UpdateEndpointRequest> requestArgumentCaptor = ArgumentCaptor.forClass(UpdateEndpointRequest.class);
+
+        targetingClient.updateEndpointProfile();
+
+        verifyAndRunExecutorService(1);
+        verify(mockPinpointServiceClient, times(1))
+                .updateEndpoint(requestArgumentCaptor.capture());
+
+        for (final UpdateEndpointRequest request : requestArgumentCaptor.getAllValues()) {
+            assertNull(request.getEndpointRequest().getUser());
+        }
+    }
+
+    @Test
+    public void updateEndpointEmptyUserId() {
+        final ArgumentCaptor<UpdateEndpointRequest> requestArgumentCaptor = ArgumentCaptor.forClass(UpdateEndpointRequest.class);
+
+        EndpointProfile endpointProfile = new EndpointProfile(mockContext);
+        EndpointProfileUser user = new EndpointProfileUser();
+        user.setUserId("");
+        endpointProfile.setUser(user);
+
+        targetingClient.updateEndpointProfile(endpointProfile);
+        verifyAndRunExecutorService(1);
+        verify(mockPinpointServiceClient, times(1))
+                .updateEndpoint(requestArgumentCaptor.capture());
+        
+        for (final UpdateEndpointRequest request : requestArgumentCaptor.getAllValues()) {
+            assertNotNull(request.getEndpointRequest().getUser());
+            assertEquals(request.getEndpointRequest().getUser().getUserId(), "");
+        }
+    }
 }
diff --git a/aws-android-sdk-polly/pom.xml b/aws-android-sdk-polly/pom.xml
index ba26842ce6..c22e809e5a 100644
--- a/aws-android-sdk-polly/pom.xml
+++ b/aws-android-sdk-polly/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/aws-android-sdk-rekognition/pom.xml b/aws-android-sdk-rekognition/pom.xml
index 628495dbb8..c837043307 100644
--- a/aws-android-sdk-rekognition/pom.xml
+++ b/aws-android-sdk-rekognition/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/aws-android-sdk-s3/pom.xml b/aws-android-sdk-s3/pom.xml
index cf89da984d..688cd76d84 100644
--- a/aws-android-sdk-s3/pom.xml
+++ b/aws-android-sdk-s3/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,13 +20,13 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-kms</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java
index 2f5520eff0..eccc8e04a6 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/S3ClientReference.java
@@ -22,26 +22,43 @@
 
 /**
  * A holder of S3 clients for {@link TransferUtility} to pass a reference of
- * AmazonS3 to {@link TransferService}. Usually objects are passed to a service
+ * {@link AmazonS3} to {@link TransferService}. Usually objects are passed to a service
  * via intent in a parcelable form. A S3 client has too many elements to
  * capture. Instead, this serves as an alternative approach, not ideal though.
  */
 class S3ClientReference {
 
-    private static Map<String, AmazonS3> map = new ConcurrentHashMap<String, AmazonS3>();
+    private static Map<Integer, AmazonS3> map = new ConcurrentHashMap<Integer, AmazonS3>();
 
-    public static void put(String key, AmazonS3 s3) {
-        map.put(key, s3);
+    /**
+     * Insert the transferId and the corresponding {@link AmazonS3Client}
+     * into the map. {@link TransferService} retrieves the
+     * {@link AmazonS3Client} based on the transferId.
+     * 
+     * @param transferId the id for the transfer record
+     * @param s3 an AmazonS3 instance
+     */
+    public static void put(final Integer transferId, AmazonS3 s3) {
+        map.put(transferId, s3);
     }
 
     /**
      * Retrieves the AmazonS3 client on the given key.
      *
-     * @param key key of the client
+     * @param transferId the id for the transfer record
      * @return an AmazonS3 instance, or null if the key doesn't exist
      */
-    public static AmazonS3 get(String key) {
-        return map.remove(key);
+    public static AmazonS3 get(final Integer transferId) {
+        return map.get(transferId);
+    }
+    
+    /**
+     * Remove the S3 Client for the given transferId.
+     * 
+     * @param transferId the id for the transfer record
+     */
+    public static void remove(final Integer transferId) {
+        map.remove(transferId);
     }
 
     /**
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBBase.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBBase.java
index a3e0949c1b..597e860f30 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBBase.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBBase.java
@@ -240,7 +240,7 @@ public int delete(Uri uri, String selection, String[] selectionArgs) {
     /**
      * @param uri The Uri of a table.
      * @param valuesArray A array of values to insert.
-     * @return Number of rows inserted.
+     * @return The mainUploadId of the multipart transfer records
      */
     public int bulkInsert(Uri uri, ContentValues[] valuesArray) {
         final int uriType = uriMatcher.match(uri);
@@ -281,5 +281,3 @@ SQLiteDatabase getDatabase() {
     }
 
 }
-
-
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
index 9464006493..6a48d59341 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
@@ -434,12 +434,9 @@ public Cursor queryTransfersWithTypeAndState(TransferType type, TransferState st
     /**
      * Queries all the records which have the given type and states.
      *
-     * @param projections The list of columns to be projected
-     * @param type The type of Transfer
-     * @param String[] The list of Transfer States whose Transfer Records are
-     *            required.
-     * @return A Cursor pointing to records in the database in any of the given
-     *         states.
+     * @param type   The type of Transfer
+     * @param states The list of Transfer States whose Transfer Records are required.
+     * @return A Cursor pointing to records in the database in any of the given states.
      */
     public Cursor queryTransfersWithTypeAndStates(TransferType type,
             TransferState[] states) {
@@ -521,7 +518,7 @@ public int deleteTransferRecords(int id) {
     /**
      * Queries all the PartETags of completed parts from the multipart upload
      * specified by the mainUploadId. The list of PartETags is used to complete
-     * a multiart upload, so it's usually called after all partUpload tasks are
+     * a multipart upload, so it's usually called after all partUpload tasks are
      * finished.
      *
      * @param mainUploadId The mainUploadId of a multipart upload task
@@ -816,7 +813,7 @@ TransferRecord getTransferById(int id) {
         try {
             c = queryTransferById(id);
             if (c.moveToFirst()) {
-                transfer = new TransferRecord(0);
+                transfer = new TransferRecord(id);
                 transfer.updateFromDB(c);
             }
         } finally {
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
index 9191e06984..66471aa88f 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
@@ -198,7 +198,7 @@ public boolean pause(AmazonS3 s3, TransferStatusUpdater updater) {
 
     /**
      * Cancels a running transfer.
-     *
+     * 
      * @param s3 s3 instance
      * @param updater status updater
      * @return true if the transfer is running and is canceled successfully,
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 3eb9e29d88..6eeea6aa43 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -58,7 +58,7 @@
     static final int MSG_EXEC = 100;
     static final int MSG_CHECK = 200;
     static final int MSG_DISCONNECT = 300;
-    private static final int MINUTE_IN_MILLIS = 60 * 1000;
+    static final int MSG_CONNECT = 400;
 
     /*
      * Constants of intent action sent to the service.
@@ -68,21 +68,19 @@
     static final String INTENT_ACTION_TRANSFER_RESUME = "resume_transfer";
     static final String INTENT_ACTION_TRANSFER_CANCEL = "cancel_transfer";
     static final String INTENT_BUNDLE_TRANSFER_ID = "id";
-    static final String INTENT_BUNDLE_S3_REFERENCE_KEY = "s3_reference_key";
+    static final String INTENT_BUNDLE_TRANSFER_UTILITY_OPTIONS = "transfer_utility_options";
 
     /*
      * Create a list of the transfer states depicting the transfers that
      * are unfinished.
      */
-    static final TransferState[] UNFINISHED_TRANSFER_STATES = new TransferState[]{
+    static final TransferState[] UNFINISHED_TRANSFER_STATES = new TransferState[] {
         TransferState.WAITING,
         TransferState.WAITING_FOR_NETWORK,
         TransferState.IN_PROGRESS,
         TransferState.RESUMED_WAITING
     };
-
-    private AmazonS3 s3;
-
+    
     /*
      * updateHandler manages update requests in a queue. It updates transfers
      * from database and start/stop threads if needed.
@@ -95,24 +93,53 @@
      * will update transfer records in database directly.
      */
     private NetworkInfoReceiver networkInfoReceiver;
+    
     /*
      * A flag indicates whether a database scan is necessary. This is true when
      * service starts and when network is disconnected.
      */
     private boolean shouldScan = true;
+    
     /*
      * A flag indicates whether the service is started the first time.
      */
-    private boolean isFirst = true;
+    private boolean isReceiverNotRegistered = true;
+    
     /*
-     * A timestamp when the service is last known active. The service will stop
+     * A time-stamp when the service is last known active. The service will stop
      * after a minute of inactivity.
      */
     private volatile long lastActiveTime;
 
+    /**
+     * The identifier that identifies the invocation of onStartCommand.
+     * This is used while stopping the service.
+     */
     private volatile int startId;
+    
+    /**
+     * Reference to the transfer database utility.
+     */
     private TransferDBUtil dbUtil;
+    
+    /**
+     * The status updater that updates the state and the
+     * progress of the transfer in memory and persists to the
+     * database.
+     */
     TransferStatusUpdater updater;
+    
+    /**
+     * The time interval to wait before checking for the
+     * unfinished transfers that are not tracked in memory
+     * and start them.
+     * 
+     * Default is 1-minute. 
+     * Scan will be skipped if -1 is passed.
+     * Can be changed by passing in through the
+     * {@link TransferUtilityOptions}
+     */
+    private long transferServiceCheckTimeInterval;
 
     @Override
     public IBinder onBind(Intent intent) {
@@ -132,7 +159,7 @@ public void onCreate() {
         super.onCreate();
 
         LOGGER.debug("Starting Transfer Service");
-        dbUtil = new TransferDBUtil(getApplicationContext());
+        dbUtil = new TransferDBUtil(this);
         updater = new TransferStatusUpdater(dbUtil);
 
         handlerThread = new HandlerThread(TAG + "-AWSTransferUpdateHandlerThread");
@@ -163,7 +190,7 @@ public void onReceive(Context context, Intent intent) {
             if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
                 final boolean networkConnected = isNetworkConnected();
                 LOGGER.debug("Network connected: " + networkConnected);
-                handler.sendEmptyMessage(networkConnected ? MSG_CHECK : MSG_DISCONNECT);
+                handler.sendEmptyMessage(networkConnected ? MSG_CONNECT : MSG_DISCONNECT);
             }
         }
 
@@ -183,24 +210,46 @@ boolean isNetworkConnected() {
     public int onStartCommand(Intent intent, int flags, int startId) {
         this.startId = startId;
 
+        if (isReceiverNotRegistered) {
+            try {
+                LOGGER.info("registering receiver");
+                this.registerReceiver(this.networkInfoReceiver,
+                    new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
+            } catch (final IllegalArgumentException iae) {
+                LOGGER.warn("Ignoring the exception trying to register the receiver for connectivity change.");
+            } catch (final IllegalStateException ise) {
+                LOGGER.warn("Ignoring the leak in registering the receiver.");
+            } finally {
+                isReceiverNotRegistered = false;
+            }
+        }
+
         if (intent == null) {
             return START_REDELIVER_INTENT;
         }
 
-        final String keyForS3Client = intent.getStringExtra(INTENT_BUNDLE_S3_REFERENCE_KEY);
-        s3 = S3ClientReference.get(keyForS3Client);
+        final Integer id = intent.getIntExtra(INTENT_BUNDLE_TRANSFER_ID, -1);
+        if (id < 0) {
+            LOGGER.error("The intent sent by the TransferUtility doesn't have the id.");
+            return START_NOT_STICKY;
+        }
+        
+        final AmazonS3 s3 = S3ClientReference.get(id);
         if (s3 == null) {
-            LOGGER.warn("TransferService can't get s3 client, and it will stop.");
-            stopSelf(startId);
+            LOGGER.error("TransferService can't get s3 client and not acting on the id.");
             return START_NOT_STICKY;
         }
 
+        final TransferUtilityOptions tuOptions = (TransferUtilityOptions) 
+            intent.getSerializableExtra(INTENT_BUNDLE_TRANSFER_UTILITY_OPTIONS);
+        
+        TransferThreadPool.init(tuOptions.getTransferThreadPoolSize());
+        transferServiceCheckTimeInterval = tuOptions.getTransferServiceCheckTimeInterval();
+        LOGGER.debug("ThreadPoolSize: " + tuOptions.getTransferThreadPoolSize()
+            + " transferServiceCheckTimeInterval: " + tuOptions.getTransferServiceCheckTimeInterval());
+
         updateHandler.sendMessage(updateHandler.obtainMessage(MSG_EXEC, intent));
-        if (isFirst) {
-            registerReceiver(networkInfoReceiver, new IntentFilter(
-                    ConnectivityManager.CONNECTIVITY_ACTION));
-            isFirst = false;
-        }
+        
         /*
          * The service will not restart if it's killed by system.
          */
@@ -210,17 +259,25 @@ public int onStartCommand(Intent intent, int flags, int startId) {
     @Override
     public void onDestroy() {
         try {
-            unregisterReceiver(networkInfoReceiver);
+            if (networkInfoReceiver != null) {
+                LOGGER.info("unregistering receiver");
+                this.unregisterReceiver(this.networkInfoReceiver);
+                isReceiverNotRegistered = true;
+            }
         } catch (final IllegalArgumentException iae) {
             /*
              * Ignore on purpose, just in case the service stops before
              * onStartCommand where the receiver is registered.
              */
-            LOGGER.warn("exception trying to destroy the service", iae);
+            LOGGER.warn("exception trying to destroy the service");
         }
+
+        pauseAll();
         handlerThread.quit();
         TransferThreadPool.closeThreadPool();
         S3ClientReference.clear();
+
+        LOGGER.info("Closing the database.");
         dbUtil.closeDB();
         super.onDestroy();
     }
@@ -240,6 +297,8 @@ public void handleMessage(Message msg) {
                 execCommand((Intent) msg.obj);
             } else if (msg.what == MSG_DISCONNECT) {
                 pauseAllForNetwork();
+            } else if (msg.what == MSG_CONNECT) {
+                checkTransfersOnNetworkReconnect();
             } else {
                 LOGGER.error("Unknown command: " + msg.what);
             }
@@ -252,26 +311,39 @@ public void handleMessage(Message msg) {
      */
     void checkTransfers() {
         // scan database for previously unfinished transfers
-        if (shouldScan && networkInfoReceiver.isNetworkConnected() && s3 != null) {
-            loadTransfersFromDB();
+        if (shouldScan && networkInfoReceiver.isNetworkConnected()) {
+            loadAndResumeTransfersFromDB(UNFINISHED_TRANSFER_STATES);
             shouldScan = false;
         }
-        removeCompletedTransfers();
 
         // update last active time if service is active
         if (isActive()) {
             lastActiveTime = System.currentTimeMillis();
-            // check after one minute
-            updateHandler.sendEmptyMessageDelayed(MSG_CHECK, MINUTE_IN_MILLIS);
+            
+            // check after transferServiceCheckTimeInterval milliseconds.
+            updateHandler.sendEmptyMessageDelayed(MSG_CHECK, transferServiceCheckTimeInterval);
         } else {
             /*
-             * Stop the service when it's been idled for more than a minute.
+             * Stop the service when it's been idled for more than the time interval supplied
+             * through {@link TransferUtilityConfiguration}. The default is 1-minute.
              */
             LOGGER.debug("Stop self");
             stopSelf(startId);
         }
     }
 
+    /**
+     * Check for the transfers that are in WAITING_FOR_NETWORK state
+     * and resume them to execution.
+     */
+    void checkTransfersOnNetworkReconnect() {
+        if (networkInfoReceiver.isNetworkConnected()) {
+            loadAndResumeTransfersFromDB(new TransferState[] {TransferState.WAITING_FOR_NETWORK});
+        } else {
+            LOGGER.error("Network Connect message received but not connected to network.");
+        }
+    }
+
     /**
      * Executes command received by the service.
      *
@@ -282,11 +354,12 @@ void execCommand(Intent intent) {
         lastActiveTime = System.currentTimeMillis();
 
         final String action = intent.getAction();
-        final int id = intent.getIntExtra(INTENT_BUNDLE_TRANSFER_ID, 0);
+        final Integer id = intent.getIntExtra(INTENT_BUNDLE_TRANSFER_ID, 0);
+        final AmazonS3 s3 = S3ClientReference.get(id);
 
-        if (id == 0) {
-            LOGGER.error("Invalid id: " + id);
-            return;
+        if (!TransferDBUtil.getTransferDBBase().getDatabase().isOpen()) {
+            LOGGER.debug("Database is not open. Opening the database before proceeding.");
+            this.dbUtil = new TransferDBUtil(this);
         }
 
         if (INTENT_ACTION_TRANSFER_ADD.equals(action)) {
@@ -354,27 +427,7 @@ private boolean isActive() {
                 return true;
             }
         }
-        return System.currentTimeMillis() - lastActiveTime < MINUTE_IN_MILLIS;
-    }
-
-    /**
-     * Remove completed transfers from status updater.
-     */
-    private void removeCompletedTransfers() {
-        final List<Integer> ids = new ArrayList<Integer>();
-        for (final TransferRecord transfer : updater.getTransfers().values()) {
-            if (TransferState.COMPLETED.equals(transfer.state)) {
-                /*
-                 * Add completed transfers to remove. Removing transfers with
-                 * updater.removeTransfer(transfer.id) will result in
-                 * ConcurrentModificationException
-                 */
-                ids.add(transfer.id);
-            }
-        }
-        for (final Integer id : ids) {
-            updater.removeTransfer(id);
-        }
+        return System.currentTimeMillis() - lastActiveTime < transferServiceCheckTimeInterval;
     }
 
     /**
@@ -382,53 +435,83 @@ private void removeCompletedTransfers() {
      * previous session or are new transfers waiting for network. It skips any
      * transfer that is already tracked by the status updater. Also starts
      * transfers whose states indicate running but aren't.
+     *
+     * The transfers would start only if the AmazonS3Client is present in the
+     * S3ClientReference map. If the AmazonS3Client is not present, this would
+     * skip starting the transfer.
+     *
+     * @param transferStates The list of the transfer states 
      */
-    void loadTransfersFromDB() {
-        LOGGER.debug("Loading transfers from database");
+    void loadAndResumeTransfersFromDB(final TransferState[] transferStates) {
+        LOGGER.debug("Loading transfers from database...");
         Cursor c = null;
         int count = 0;
 
+        // Read the transfer ids from the cursor and store in this list.
+        List<Integer> transferIds = new ArrayList<Integer>();
+
+        // Query for the unfinished transfers and store them in a list
         try {
-            // Query for the unfinshed transfers
-            c = dbUtil.queryTransfersWithTypeAndStates(TransferType.ANY, UNFINISHED_TRANSFER_STATES);
+            c = dbUtil.queryTransfersWithTypeAndStates(TransferType.ANY,
+                                                       transferStates);
             while (c.moveToNext()) {
                 final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
-                final TransferState state = TransferState.getState(c.getString(c
-                        .getColumnIndexOrThrow(TransferTable.COLUMN_STATE)));
-                final int partNumber = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_PART_NUM));
-                // add unfinished transfers
-                if (partNumber == 0) {
-                    if (updater.getTransfer(id) == null) {
-                        final TransferRecord transfer = new TransferRecord(id);
-                        transfer.updateFromDB(c);
-                        if (transfer.start(s3, dbUtil, updater, networkInfoReceiver)) {
-                            updater.addTransfer(transfer);
-                            count++;
-                        }
-                    } else {
-                        final TransferRecord transfer = updater.getTransfer(id);
-                        if (!transfer.isRunning()) {
-                            transfer.start(s3, dbUtil, updater, networkInfoReceiver);
-                        }
-                    }
+                // If the transfer status updater doesn't track it, load the transfer record
+                // from the database and add it to the updater to track
+                if (updater.getTransfer(id) == null) {
+                    final TransferRecord transfer = new TransferRecord(id);
+                    transfer.updateFromDB(c);
+                    updater.addTransfer(transfer);
+                    count++;
                 }
+                transferIds.add(id);
             }
         } finally {
             if (c != null) {
+                LOGGER.debug("Closing the cursor for loadAndResumeTransfersFromDB");
                 c.close();
             }
         }
-        LOGGER.debug(count + " transfers are loaded from database");
-    }
 
+        // Iterate over each transfer id and resume them if it's not running.
+        try {
+            for (final Integer id: transferIds) {
+                final AmazonS3 s3 = S3ClientReference.get(id);
+                if (s3 != null) {
+                    // Check if it's running. If not, start the transfer.
+                    final TransferRecord transfer = updater.getTransfer(id);
+                    if (transfer != null && !transfer.isRunning()) {
+                        transfer.start(s3, dbUtil, updater, networkInfoReceiver);
+                    }
+                }
+            }
+        } catch (final Exception exception) {
+            LOGGER.error("Error in resuming the transfers." + exception.getMessage());
+        }
+
+        LOGGER.debug(count + " transfers are loaded from database.");
+    }
+    
     /**
-     * Pause all running transfers and set state to WAITING_FOR_NETWORK.
+     * Pause all running transfers and set the state to WAITING_FOR_NETWORK.
+     */
+    void pauseAll() {
+        for (final TransferRecord transferRecord : updater.getTransfers().values()) {
+            final AmazonS3 s3 = S3ClientReference.get(transferRecord.id);
+            if (s3 != null && transferRecord != null) {
+                transferRecord.pause(s3, updater);
+            }
+        }
+    }
+    
+    /**
+     * Pause all running transfers and set the state to WAITING_FOR_NETWORK.
      */
     void pauseAllForNetwork() {
-        for (final TransferRecord transfer : updater.getTransfers().values()) {
-            if (s3 != null && transfer != null && transfer.pause(s3, updater)) {
-                // change status to waiting
-                updater.updateState(transfer.id, TransferState.WAITING_FOR_NETWORK);
+        for (final TransferRecord transferRecord : updater.getTransfers().values()) {
+            final AmazonS3 s3 = S3ClientReference.get(transferRecord.id);
+            if (s3 != null && transferRecord != null && transferRecord.pause(s3, updater)) {
+                updater.updateState(transferRecord.id, TransferState.WAITING_FOR_NETWORK);
             }
         }
         shouldScan = true;
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
index ec899b5ac2..d8983516b1 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferStatusUpdater.java
@@ -122,6 +122,16 @@ void removeTransfer(int id) {
         LISTENERS.remove(id);
         lastUpdateTime.remove(id);
     }
+    
+    /**
+     * Removes a transfer from the persistent store.
+     *
+     * @param id id of the transfer to remove
+     */
+    void removeTransferRecordFromDB(final int id) {
+        S3ClientReference.remove(id);
+        dbUtil.deleteTransferRecords(id);
+    }
 
     /**
      * Updates the state of an active transfer. If the transfer isn't tracked,
@@ -163,6 +173,9 @@ void updateState(final int id, final TransferState newState) {
         // invoke LISTENERS
         final List<TransferListener> list = LISTENERS.get(id);
         if (list == null || list.isEmpty()) {
+            if (TransferState.COMPLETED.equals(newState)) {
+                removeTransferRecordFromDB(id);
+            }
             return;
         }
 
@@ -174,12 +187,16 @@ public void run() {
                     l.onStateChanged(id, newState);
                 }
                 // remove all LISTENERS when the transfer is in a final state so
-                // as to release resources asap.
+                // as to release resources ASAP.
                 if (TransferState.COMPLETED.equals(newState)
                         || TransferState.FAILED.equals(newState)
                         || TransferState.CANCELED.equals(newState)) {
                     list.clear();
                 }
+                
+                if (TransferState.COMPLETED.equals(newState)) {
+                    removeTransferRecordFromDB(id);
+                }
             }
         });
     }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java
index d170610c53..b722dbc033 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferThreadPool.java
@@ -22,23 +22,31 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 class TransferThreadPool {
+    
+    private static final Log LOGGER = LogFactory.getLog(TransferService.class);
 
     private static ExecutorService executorMainTask;
     private static ExecutorService executorPartTask;
 
-    private static synchronized void init() {
-        final int processors = Runtime.getRuntime().availableProcessors();
+    static synchronized void init(final int transferThreadPoolSize) {
+        LOGGER.debug("Initializing the thread pool of size: " + transferThreadPoolSize);
+        
+        final int poolSize = Math.max((int) (Math.ceil((double) transferThreadPoolSize / 2)), 1);
+        
         if (executorMainTask == null) {
-            executorMainTask = buildExecutor(processors + 1);
+            executorMainTask = buildExecutor(poolSize);
         }
         if (executorPartTask == null) {
-            executorPartTask = buildExecutor(processors + 1);
+            executorPartTask = buildExecutor(poolSize);
         }
     }
 
     public static <T> Future<T> submitTask(Callable<T> c) {
-        init();
+        init(TransferUtilityOptions.getDefaultThreadPoolSize());
         if (c instanceof UploadPartTask) {
             return executorPartTask.submit(c);
         } else {
@@ -47,10 +55,14 @@ private static synchronized void init() {
     }
 
     public static void closeThreadPool() {
-        shutdown(executorPartTask);
-        executorPartTask = null;
-        shutdown(executorMainTask);
-        executorMainTask = null;
+        if (executorPartTask != null) {
+            shutdown(executorPartTask);
+            executorPartTask = null;
+        }
+        if (executorMainTask != null) {
+            shutdown(executorMainTask);
+            executorMainTask = null;
+        }
     }
 
     private static final int WAIT_TIME = 250;
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
index ba9059ccff..fde4e308fa 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
@@ -23,7 +23,6 @@
 import android.content.Intent;
 import android.database.Cursor;
 import android.net.Uri;
-
 import org.json.JSONObject;
 
 import com.amazonaws.AmazonWebServiceRequest;
@@ -40,7 +39,6 @@
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.UUID;
 
 /**
  * The transfer utility is a high-level class for applications to upload and
@@ -75,16 +73,26 @@
  *
  * // Pauses the transfer.
  * transferUtility.pause(id);
+ * 
+ * // Pause all the transfers.
+ * transferUtility.pauseAllWithType(TransferType.ANY);
  *
  * // Resumes the transfer.
  * transferUtility.resume(id);
+ * 
+ * // Resume all the transfers.
+ * transferUtility.resumeAllWithType(TransferType.ANY);
+ * 
  * </pre>
- *
- * For cancelling and deleting tasks:
+ * 
+ * For canceling and deleting tasks:
  *
  * <pre>
  * // Cancels the transfer.
  * transferUtility.cancel(id);
+ * 
+ * // Cancel all the transfers.
+ * transferUtility.cancelAllWithType(TransferType.ANY);
  *
  * // Deletes the transfer.
  * transferUtility.delete(id);
@@ -120,6 +128,7 @@ private static String getUserAgentFromConfig() {
     private final Context appContext;
     private final TransferDBUtil dbUtil;
     private final String defaultBucket;
+    private final TransferUtilityOptions transferUtilityOptions;
 
     /**
      * Builder class for TransferUtility
@@ -129,6 +138,7 @@ private static String getUserAgentFromConfig() {
         private Context appContext;
         private String defaultBucket;
         private AWSConfiguration awsConfig;
+        private TransferUtilityOptions transferUtilityOptions;
         
         protected Builder() { }
         
@@ -189,6 +199,33 @@ public Builder awsConfiguration(AWSConfiguration awsConfiguration) {
             return this;
         }
         
+        /**
+         * Sets the TransferUtilityOptions for this TransferUtility
+         * instance. Currently, this includes the option to override the 
+         * time interval to periodically resume unfinished transfers by 
+         * the TransferService and the size of the transfer thread pool
+         * which is shared across the different transfers.
+         *  
+         * Example:
+         * 
+         *   TransferUtilityOptions tuOptions 
+         *     = new TransferUtilityOptions();
+         *   tuConfig.setTransferServiceCheckTimeInterval(5);
+         *   tuConfig.setTransferThreadPoolSize(10);
+         *   
+         *   TransferUtility tu = TransferUtility
+         *       .builder()
+         *       .transferUtilityOptions(tuOptions)
+         *       .build();
+         *   
+         * @param tuOptions The TransferUtility Options object
+         * @return builder
+         */
+        public Builder transferUtilityOptions(final TransferUtilityOptions tuOptions) {
+            this.transferUtilityOptions = tuOptions;
+            return this;
+        }
+        
         /**
          * 
          * @return TransferUtility
@@ -213,7 +250,14 @@ public TransferUtility build() {
                 }
             }
             
-            return new TransferUtility(this.s3, this.appContext, this.defaultBucket);
+            if (this.transferUtilityOptions == null) {
+                this.transferUtilityOptions = new TransferUtilityOptions();
+            }
+            
+            return new TransferUtility(this.s3,
+                                    this.appContext,
+                                    this.defaultBucket,
+                                    this.transferUtilityOptions);
         }
     }
     
@@ -227,14 +271,23 @@ public static Builder builder() {
         return new Builder();
     }
     
-    private TransferUtility(
-            final AmazonS3 s3,
-            final Context context,
-            final String defaultBucket) {
+    /**
+     * Constructor.
+     * 
+     * @param s3 The client to use when making requests to Amazon S3
+     * @param context The current context
+     * @param defaultBucket The name of the default S3 bucket
+     * @param tuOptions The TransferUtility Options object
+     */
+    private TransferUtility(AmazonS3 s3,
+                            Context context,
+                            String defaultBucket,
+                            TransferUtilityOptions tuOptions) {
         this.s3 = s3;
         this.appContext = context.getApplicationContext();
         this.dbUtil = new TransferDBUtil(appContext);
         this.defaultBucket = defaultBucket;
+        this.transferUtilityOptions = tuOptions;
     }
 
     /**
@@ -253,6 +306,7 @@ public TransferUtility(AmazonS3 s3, Context context) {
         this.appContext = context.getApplicationContext();
         this.dbUtil = new TransferDBUtil(appContext);
         this.defaultBucket = null;
+        this.transferUtilityOptions = new TransferUtilityOptions();
     }
 
     private String getDefaultBucketOrThrow() {
@@ -608,6 +662,37 @@ public TransferObserver getTransferById(int id) {
         }
         return transferObservers;
     }
+    
+    /**
+     * Gets a list of TransferObserver instances which are observing records
+     * with the given type.
+     *
+     * @param type The type of the transfer.
+     * @param states A list of the the transfer states.
+     * @return A list of transfer ids that identifies the transfer records
+     */
+    private List<Integer> getTransferIdsWithTypeAndStates(TransferType type,
+                                                          TransferState[] states) {
+        List<Integer> transferIds = new ArrayList<Integer>();
+        Cursor c = null;
+        try {
+            c = dbUtil.queryTransfersWithTypeAndStates(type, states);
+            while (c.moveToNext()) {
+                final int partNum = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_PART_NUM));
+                if (partNum != 0) {
+                    // skip parts of a multipart upload
+                    continue;
+                }
+                final int id = c.getInt(c.getColumnIndexOrThrow(TransferTable.COLUMN_ID));
+                transferIds.add(id);
+            }
+        } finally {
+            if (c != null) {
+                c.close();
+            }
+        }
+        return transferIds;
+    }
 
     /**
      * Inserts a multipart summary record and actual part records into database
@@ -696,6 +781,33 @@ public TransferObserver resume(int id) {
         sendIntent(TransferService.INTENT_ACTION_TRANSFER_RESUME, id);
         return getTransferById(id);
     }
+    
+    /**
+     * Resume all the transfers which are not finished. You can resume a transfer in
+     * paused, canceled or failed state. If a transfer is in waiting or in
+     * progress state but it isn't actually running, this operation will force
+     * it to run.
+     *
+     * @param type The type of transfers
+     * @return A list of TransferObserver objects of the resumed upload/download or 
+     *         null if the ID does not represent a paused transfer
+     */
+    public List<TransferObserver> resumeAllWithType(final TransferType type) {
+        List<TransferObserver> observers = new ArrayList<TransferObserver>();
+        final List<Integer> transferIds = getTransferIdsWithTypeAndStates(type, 
+            new TransferState[] {
+                TransferState.PAUSED,
+                TransferState.FAILED,
+                TransferState.CANCELED
+            }
+        );
+        
+        for (final Integer transferId: transferIds) {
+            observers.add(resume(transferId));
+        }
+        
+        return observers;
+    }
 
     /**
      * Sets a transfer to be canceled. Note the TransferState must be
@@ -752,19 +864,18 @@ public boolean deleteTransferRecord(int id) {
      * @param id id of the transfer
      */
     private synchronized void sendIntent(String action, int id) {
-        final String s3Key = UUID.randomUUID().toString();
-        S3ClientReference.put(s3Key, s3);
+        S3ClientReference.put(id, s3);
         final Intent intent = new Intent(appContext, TransferService.class);
         intent.setAction(action);
         intent.putExtra(TransferService.INTENT_BUNDLE_TRANSFER_ID, id);
-        intent.putExtra(TransferService.INTENT_BUNDLE_S3_REFERENCE_KEY, s3Key);
+        intent.putExtra(TransferService.INTENT_BUNDLE_TRANSFER_UTILITY_OPTIONS,
+                        this.transferUtilityOptions);
         appContext.startService(intent);
     }
 
     private boolean shouldUploadInMultipart(File file) {
         return (file != null
                 && file.length() > MINIMUM_UPLOAD_PART_SIZE);
-
     }
 
     static <X extends AmazonWebServiceRequest> X appendTransferServiceUserAgentString(
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtilityOptions.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtilityOptions.java
new file mode 100644
index 0000000000..cf68a1a673
--- /dev/null
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtilityOptions.java
@@ -0,0 +1,132 @@
+/*
+ * Copyright 2018-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.mobileconnectors.s3.transferutility;
+
+import java.io.Serializable;
+
+/**
+ * Configuration information used by the {@link TransferUtility}
+ * and {@link TransferService}
+ *
+ * <pre>
+ * Create TransferUtilityOptions and pass it to {@link TransferUtility}.
+ * 
+ * TransferUtilityOptions tuOptions = new TransferUtilityOptions();
+ * tuOptions.setTransferServiceCheckTimeInterval(5 * 60 * 1000); // Scan for unfinished transfers every 5 minutes.
+ * tuOptions.setTransferThreadPoolSize(10); // 10 threads for upload and download operations.
+ *
+ * // Initializes TransferUtility
+ * TransferUtility transferUtility = TransferUtility
+ *     .builder()
+ *     .s3Client(s3Client)
+ *     .context(getApplicationContext())
+ *     .transferUtilityConfiguration(tuConfig)
+ *     .build();
+ * </pre>
+ *
+ */
+public class TransferUtilityOptions implements Serializable {
+
+    /**
+     * Default serial versionID.
+     */
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Milliseconds in a minute.
+     */
+    private static final int MILLIS_IN_MINUTE = 60 * 1000;
+
+    /**
+     * TransferService checks for the transfers that are waiting or in progress
+     * and restarts the transfer for every time interval in milliseconds.
+     */
+    private long transferServiceCheckTimeInterval;
+    
+    /**
+     * Number of threads in the pool for the all the transfers.
+     */
+    private int transferThreadPoolSize;
+    
+    /**
+     * Constructor that sets the options to the
+     * default values.
+     */
+    public TransferUtilityOptions() {
+        super();
+        this.transferServiceCheckTimeInterval = getDefaultCheckTimeInterval();
+        this.transferThreadPoolSize = getDefaultThreadPoolSize();
+    }
+
+    /**
+     * Retrieve the transfer service check time interval.
+     * 
+     * @return the transferServiceCheckTimeInterval
+     */
+    public long getTransferServiceCheckTimeInterval() {
+        return transferServiceCheckTimeInterval;
+    }
+
+    /**
+     * Set the transfer service check time interval.
+     * 
+     * @param transferServiceCheckTimeInterval the transferServiceCheckTimeInterval to set
+     */
+    public void setTransferServiceCheckTimeInterval(final long transferServiceCheckTimeInterval) {
+        this.transferServiceCheckTimeInterval = transferServiceCheckTimeInterval;
+    }
+
+    /**
+     * Retrieve the transfer thread pool size.
+     * 
+     * @return the transferThreadPoolSize
+     */
+    public int getTransferThreadPoolSize() {
+        return transferThreadPoolSize;
+    }
+
+    /**
+     * Set the transfer thread pool size. If it's negative, then
+     * set the default value.
+     * 
+     * @param transferThreadPoolSize the transferThreadPoolSize to set
+     */
+    public void setTransferThreadPoolSize(final int transferThreadPoolSize) {
+        if (transferThreadPoolSize < 0) {
+            this.transferThreadPoolSize = getDefaultThreadPoolSize();
+        } else {
+            this.transferThreadPoolSize = transferThreadPoolSize;
+        }
+    }
+    
+    /**
+     * Return the default thread pool size.
+     * 
+     * @return 2 * (Number of available processors + 1)
+     */
+    static int getDefaultThreadPoolSize() {
+        return 2 * (Runtime.getRuntime().availableProcessors() + 1);
+    }
+
+    /**
+     * Return the default check time interval.
+     * 
+     * @return The default check time interval in milliseconds.
+     */
+    static long getDefaultCheckTimeInterval() {
+        return 1 * MILLIS_IN_MINUTE;
+    }
+}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
index efb8cecc61..ab95cc7c33 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
@@ -3241,6 +3241,9 @@ public URL generatePresignedUrl(GeneratePresignedUrlRequest generatePresignedUrl
         // before generating the URL.
         final Request<GeneratePresignedUrlRequest> request = createRequest(bucketName, key,
                 generatePresignedUrlRequest, httpMethod);
+
+        addParameterIfNotNull(request, "versionId", generatePresignedUrlRequest.getVersionId());
+
         if (generatePresignedUrlRequest.isZeroByteContent()) {
             request.setContent(new ByteArrayInputStream(new byte[0]));
         }
@@ -3258,7 +3261,7 @@ public URL generatePresignedUrl(GeneratePresignedUrlRequest generatePresignedUrl
             request.addHeader(Headers.CONTENT_MD5, generatePresignedUrlRequest.getContentMd5());
         }
 
-          // SSE-C
+        // SSE-C
         populateSSE_C(request, generatePresignedUrlRequest.getSSECustomerKey());
         // SSE
         addHeaderIfNotNull(request, Headers.SERVER_SIDE_ENCRYPTION,
@@ -3267,7 +3270,15 @@ public URL generatePresignedUrl(GeneratePresignedUrlRequest generatePresignedUrl
         addHeaderIfNotNull(request,
                 Headers.SERVER_SIDE_ENCRYPTION_KMS_KEY_ID,
                 generatePresignedUrlRequest.getKmsCmkId());
-
+        
+        // Add custom query parameters
+        final Map<String, String> customQueryParameters = generatePresignedUrlRequest.getCustomQueryParameters();
+        if (customQueryParameters != null) {
+        	for (Map.Entry<String, String> e: customQueryParameters.entrySet()) {
+        		request.addParameter(e.getKey(), e.getValue());
+        	}
+        }
+        
         addResponseHeaderParameters(request, generatePresignedUrlRequest.getResponseHeaders());
 
         final Signer signer = createSigner(request, bucketName, key);
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java
index 86ad16cdad..554a3aab09 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequest.java
@@ -20,8 +20,11 @@
 import com.amazonaws.services.s3.AmazonS3;
 
 import java.io.Serializable;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Map;
 
 /**
@@ -48,6 +51,12 @@
 
     /** The key of the object involved in this request */
     private String key;
+    
+    /**		
+     * The version ID of the object, only present if versioning has been		
+     * enabled for the bucket.		
+     */		
+    private String versionId;	
 
     /** The optional Content-Type header that will be sent when the presigned URL is accessed */
     private String contentType;
@@ -77,6 +86,11 @@
      */
     private final Map<String, String> requestParameters = new HashMap<String, String>();
 
+    /**
+     * Custom query parameters for the request.
+     */
+    private Map<String, String> customQueryParameters;
+
     /**
      * Optional field that overrides headers on the response.
      */
@@ -325,6 +339,45 @@ public GeneratePresignedUrlRequest withKey(String key) {
         setKey(key);
         return this;
     }
+    
+    /**
+     * Returns the version ID of the object, only present if versioning has
+     * been enabled for the bucket.
+     *
+     * @return The version ID of the object, only present if versioning has
+     *         been enabled for the bucket.
+     */
+    public String getVersionId() {
+        return versionId;
+    }
+
+    /**
+     * Sets the version ID of the object, only present if versioning has
+     * been enabled for the bucket.
+     *
+     * @param versionId
+     *            The version ID of the object, only present if versioning
+     *            has been enabled for the bucket.
+     */
+    public void setVersionId(String versionId) {
+        this.versionId = versionId;
+    }
+
+    /**
+     * Sets the version ID of the object, only present if versioning has
+     * been enabled for the bucket. Returns the {@link GeneratePresignedUrlRequest}
+     * object for method chanining.
+     *
+     * @param versionId
+     *            The version ID of the object, only present if versioning
+     *            has been enabled for the bucket.
+     *
+     * @return This object for method chaining.
+     */
+    public GeneratePresignedUrlRequest withVersionId(String versionId) {
+        setVersionId(versionId);
+        return this;
+    }
 
     /**
      * The expiration date at which point the new pre-signed URL will no longer
@@ -397,6 +450,41 @@ public void addRequestParameter(String key, String value) {
         return requestParameters;
     }
 
+    /**
+     * @return the immutable map of custom query parameters. The parameter value is modeled as a
+     *         list of strings because multiple values can be specified for the same parameter name.
+     */
+    public Map<String, String> getCustomQueryParameters() {
+        if (customQueryParameters == null) {
+            return null;
+        }
+        return Collections.unmodifiableMap(customQueryParameters);
+    }
+
+    /**
+     * Add a custom query parameter for the request. Since multiple values are allowed for the same
+     * query parameter, this method does NOT overwrite any existing parameter values in the request.
+     * <p>
+     * Any custom query parameters that are defined are used in the HTTP request to the AWS service.
+     *
+     * @param name
+     *            The name of the query parameter
+     * @param value
+     *            The value of the query parameter. Only the parameter name will be added in the URI
+     *            if the value is set to null. For example, addCustomQueryParameter("param", null)
+     *            will be serialized to "?param", while addCustomQueryParameter("param", "") will be
+     *            serialized to "?param=".
+     */
+    public void addCustomQueryParameter(String name, String value) {
+        if (customQueryParameters == null) {
+            customQueryParameters = new HashMap<String, String>();
+        }
+        
+        if (customQueryParameters.get(name) == null) {
+            customQueryParameters.put(name, value);
+        }
+    }
+
     /**
      * Returns the headers to be overridden in the service response.
      *
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java
index b5dd028b81..b7d5ae9bf5 100644
--- a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java
+++ b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/GeneratePresignedUrlRequestTest.java
@@ -1,7 +1,13 @@
 package com.amazonaws.services.s3.model;
 
+import com.amazonaws.HttpMethod;
+import com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;
+
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 public class GeneratePresignedUrlRequestTest {
 
     @Test
@@ -22,7 +28,48 @@ public void nullMethod() {
 
     @Test
     public void defaultGetMethod() {
-        new GeneratePresignedUrlRequest("bucket", "key").rejectIllegalArguments();
+    	    final GeneratePresignedUrlRequest generatePresignedUrlRequest 
+    	        = new GeneratePresignedUrlRequest("bucket", "key");
+    	    generatePresignedUrlRequest.rejectIllegalArguments();
+    	    assertEquals(generatePresignedUrlRequest.getBucketName(), "bucket");
+    	    assertEquals(generatePresignedUrlRequest.getKey(), "key");
+    	    assertEquals(generatePresignedUrlRequest.getMethod(), HttpMethod.GET);
+    }
+    
+    @Test
+    public void putMethod() {
+    	    final GeneratePresignedUrlRequest generatePresignedUrlRequest
+            = new GeneratePresignedUrlRequest("bucket", "key", HttpMethod.PUT);
+    	    assertEquals(generatePresignedUrlRequest.getBucketName(), "bucket");
+    	    assertEquals(generatePresignedUrlRequest.getKey(), "key");
+    	    assertEquals(generatePresignedUrlRequest.getMethod(), HttpMethod.PUT);
     }
 
+    @Test
+    public void testCustomQueryParameters() {
+    	    final GeneratePresignedUrlRequest generatePresignedUrlRequest
+            = new GeneratePresignedUrlRequest("bucket", "key", HttpMethod.PUT);
+    	    
+    	    assertEquals(generatePresignedUrlRequest.getBucketName(), "bucket");
+    	    assertEquals(generatePresignedUrlRequest.getKey(), "key");
+    	    assertEquals(generatePresignedUrlRequest.getMethod(), HttpMethod.PUT);
+    	    assertNull(generatePresignedUrlRequest.getCustomQueryParameters());
+    	    
+    	    generatePresignedUrlRequest.addCustomQueryParameter("param1", "value1");
+    	    generatePresignedUrlRequest.addCustomQueryParameter("param2", "value2");
+    	    generatePresignedUrlRequest.addCustomQueryParameter("param3", "value3");
+    	    
+    	    assert(generatePresignedUrlRequest.getCustomQueryParameters().size() == 3);
+    }
+    
+    @Test
+    public void testVersionId() {
+    	    final GeneratePresignedUrlRequest generatePresignedUrlRequest
+            = new GeneratePresignedUrlRequest("bucket", "key")
+                .withMethod(HttpMethod.PUT)
+                .withVersionId("123")
+                .withZeroByteContent(false);
+    	    
+    	    assert(generatePresignedUrlRequest.getVersionId() == "123");
+    }
 }
diff --git a/aws-android-sdk-sdb/pom.xml b/aws-android-sdk-sdb/pom.xml
index 20c4464c1a..8920fe4d2c 100644
--- a/aws-android-sdk-sdb/pom.xml
+++ b/aws-android-sdk-sdb/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
         <dependency>
         <groupId>junit</groupId>
diff --git a/aws-android-sdk-ses/pom.xml b/aws-android-sdk-ses/pom.xml
index b5dc776204..48c4d93db3 100644
--- a/aws-android-sdk-ses/pom.xml
+++ b/aws-android-sdk-ses/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-sns/pom.xml b/aws-android-sdk-sns/pom.xml
index ff69776eb9..d774f8114e 100644
--- a/aws-android-sdk-sns/pom.xml
+++ b/aws-android-sdk-sns/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,13 +20,13 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
     <dependency>
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-sqs</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/aws-android-sdk-sqs/pom.xml b/aws-android-sdk-sqs/pom.xml
index 0c08407449..4f3d8c2866 100644
--- a/aws-android-sdk-sqs/pom.xml
+++ b/aws-android-sdk-sqs/pom.xml
@@ -12,7 +12,7 @@
   <parent>
     <groupId>com.amazonaws</groupId>
     <artifactId>aws-android-sdk-pom</artifactId>
-    <version>2.6.13</version>
+    <version>2.6.17</version>
   </parent>
 
   <dependencies>
@@ -20,7 +20,7 @@
       <groupId>com.amazonaws</groupId>
       <artifactId>aws-android-sdk-core</artifactId>
       <optional>false</optional>
-      <version>2.6.13</version>
+      <version>2.6.17</version>
     </dependency>
   </dependencies>
 
diff --git a/pom.xml b/pom.xml
index 6c5be291df..59eae22869 100644
--- a/pom.xml
+++ b/pom.xml
@@ -6,7 +6,7 @@
   <artifactId>aws-android-sdk-pom</artifactId>
   <packaging>pom</packaging>
   <name>AWS SDK for Android</name>
-  <version>2.6.13</version>
+  <version>2.6.17</version>
   <description>The Amazon Web Services SDK for Android provides Android APIs for building software on AWSâ€™ cost-effective, scalable, and reliable infrastructure products. The AWS SDK for Android allows developers to code against APIs for all of Amazon's infrastructure web services (Amazon S3, Amazon EC2, Amazon SQS, Auto Scaling, etc).</description>
   <url>http://aws.amazon.com/sdkforandroid</url>
 
@@ -55,6 +55,7 @@
     <module>aws-android-sdk-kms</module>
     <module>aws-android-sdk-lambda</module>
     <module>aws-android-sdk-lex</module>
+    <module>aws-android-sdk-logs</module>
     <module>aws-android-sdk-machinelearning</module>
     <module>aws-android-sdk-mobileanalytics</module>
     <module>aws-android-sdk-mobile-client</module>
