diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000000..f419abcf42
Binary files /dev/null and b/.DS_Store differ
diff --git a/aws-android-sdk-lex/.DS_Store b/aws-android-sdk-lex/.DS_Store
new file mode 100644
index 0000000000..a4ca40e57a
Binary files /dev/null and b/aws-android-sdk-lex/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/.DS_Store b/aws-android-sdk-lex/src/.DS_Store
new file mode 100644
index 0000000000..0616937339
Binary files /dev/null and b/aws-android-sdk-lex/src/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/.DS_Store b/aws-android-sdk-lex/src/main/.DS_Store
new file mode 100644
index 0000000000..8173cc14c9
Binary files /dev/null and b/aws-android-sdk-lex/src/main/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/.DS_Store b/aws-android-sdk-lex/src/main/java/.DS_Store
new file mode 100644
index 0000000000..2976c0785e
Binary files /dev/null and b/aws-android-sdk-lex/src/main/java/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/.DS_Store b/aws-android-sdk-lex/src/main/java/com/.DS_Store
new file mode 100644
index 0000000000..501058a14b
Binary files /dev/null and b/aws-android-sdk-lex/src/main/java/com/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/.DS_Store
new file mode 100644
index 0000000000..1797ef7a66
Binary files /dev/null and b/aws-android-sdk-lex/src/main/java/com/amazonaws/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/.DS_Store
new file mode 100644
index 0000000000..6db1f563c5
Binary files /dev/null and b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/.DS_Store
new file mode 100644
index 0000000000..098cc4cafa
Binary files /dev/null and b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/.DS_Store
new file mode 100644
index 0000000000..b0ff3206ad
Binary files /dev/null and b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/InteractionClient.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/InteractionClient.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/InteractionClient.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/InteractionClient.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/Response.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/Response.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/Response.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/Response.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/config/InteractionConfig.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/config/InteractionConfig.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/config/InteractionConfig.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/config/InteractionConfig.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/config/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/config/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/config/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/config/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/continuations/LexServiceContinuation.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/continuations/LexServiceContinuation.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/continuations/LexServiceContinuation.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/continuations/LexServiceContinuation.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/continuations/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/continuations/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/continuations/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/continuations/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/AudioPlaybackException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/AudioPlaybackException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/AudioPlaybackException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/AudioPlaybackException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/DialogFailedException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/DialogFailedException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/DialogFailedException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/DialogFailedException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/InvalidParameterException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/InvalidParameterException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/InvalidParameterException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/InvalidParameterException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/LexClientException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/LexClientException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/LexClientException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/LexClientException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/MaxSpeechTimeOutException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/MaxSpeechTimeOutException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/MaxSpeechTimeOutException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/MaxSpeechTimeOutException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/NoSpeechTimeOutException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/NoSpeechTimeOutException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/NoSpeechTimeOutException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/NoSpeechTimeOutException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/exceptions/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/exceptions/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioRecorder.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioRecorder.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioRecorder.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioRecorder.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioRecordingTask.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioRecordingTask.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioRecordingTask.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioRecordingTask.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioRecordingTaskListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioRecordingTaskListener.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioRecordingTaskListener.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioRecordingTaskListener.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioSource.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioSource.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioSource.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioSource.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioSourceException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioSourceException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioSourceException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioSourceException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioSourceListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioSourceListener.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioSourceListener.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioSourceListener.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioStream.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioStream.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioStream.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioStream.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioTimeouts.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioTimeouts.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/AudioTimeouts.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/AudioTimeouts.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/ChunkedAudioSource.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/ChunkedAudioSource.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/ChunkedAudioSource.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/ChunkedAudioSource.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/ChunkedAudioStream.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/ChunkedAudioStream.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/ChunkedAudioStream.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/ChunkedAudioStream.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/LexAudioRecorder.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/LexAudioRecorder.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/LexAudioRecorder.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/LexAudioRecorder.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/LexAudioRecorderBuilder.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/LexAudioRecorderBuilder.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/LexAudioRecorderBuilder.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/LexAudioRecorderBuilder.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/common/Progress.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/common/Progress.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/common/Progress.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/common/Progress.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/common/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/common/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/common/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/common/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/AudioEncoder.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/AudioEncoder.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/AudioEncoder.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/AudioEncoder.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/AudioEncoderException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/AudioEncoderException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/AudioEncoderException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/AudioEncoderException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/BufferedAudioEncoder.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/BufferedAudioEncoder.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/BufferedAudioEncoder.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/BufferedAudioEncoder.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/L16PcmEncoder.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/L16PcmEncoder.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/L16PcmEncoder.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/L16PcmEncoder.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/encoder/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/encoder/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/audio/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/audio/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/DnnVAD.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/DnnVAD.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/DnnVAD.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/DnnVAD.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/VADException.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/VADException.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/VADException.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/VADException.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/VoiceActivityDetector.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/VoiceActivityDetector.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/VoiceActivityDetector.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/VoiceActivityDetector.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/config/DnnVADConfig.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/config/DnnVADConfig.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/config/DnnVADConfig.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/config/DnnVADConfig.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/config/VADConfig.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/config/VADConfig.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/config/VADConfig.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/config/VADConfig.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/config/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/config/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/config/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/config/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/internal/vad/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/internal/vad/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/AudioPlaybackListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/AudioPlaybackListener.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/AudioPlaybackListener.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/AudioPlaybackListener.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/DefaultInteractionListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/DefaultInteractionListener.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/DefaultInteractionListener.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/DefaultInteractionListener.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/InteractionListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/InteractionListener.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/InteractionListener.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/InteractionListener.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/MicrophoneListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/MicrophoneListener.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/listeners/MicrophoneListener.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/listeners/MicrophoneListener.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/package-info.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/package-info.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/package-info.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/package-info.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/ui/InteractiveVoiceView.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/ui/InteractiveVoiceView.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/ui/InteractiveVoiceView.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/ui/InteractiveVoiceView.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/ui/InteractiveVoiceViewAdapter.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/ui/InteractiveVoiceViewAdapter.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/ui/InteractiveVoiceViewAdapter.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/ui/InteractiveVoiceViewAdapter.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/utils/AudioEncoding.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/utils/AudioEncoding.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/utils/AudioEncoding.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/utils/AudioEncoding.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/utils/CreateLexServiceRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/utils/CreateLexServiceRequest.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/utils/CreateLexServiceRequest.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/utils/CreateLexServiceRequest.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/utils/ResponseType.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/utils/ResponseType.java
similarity index 100%
rename from aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/utils/ResponseType.java
rename to aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostContent/utils/ResponseType.java
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/.DS_Store b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/.DS_Store
new file mode 100644
index 0000000000..afef48c1e2
Binary files /dev/null and b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/.DS_Store differ
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Continuations/LexServiceContinuation.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Continuations/LexServiceContinuation.java
new file mode 100644
index 0000000000..d5d3681969
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Continuations/LexServiceContinuation.java
@@ -0,0 +1,121 @@
+package com.example.prakritibansal.posttextrequest.Continuations;
+
+/**
+ * Created by prakritibansal on 12/28/17.
+ */
+
+import com.example.prakritibansal.posttextrequest.InteractionClient;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * <b>Continuations</b>
+ * <p>
+ * "Continuation"s provide a simple technique to continue with a transaction
+ * after a user responds to a prompt from the Amazon Lex service. This
+ * encapsulates and provides access to responses from the Amazon Lex service.
+ * </p>
+ */
+public final class LexServiceContinuation{
+    // Response from Amazon Lex service.
+    private final InteractionClient interactionClient;
+    private final Map<String, String> sessionAttributes;
+
+    /**
+     * Constructs a continuation for speech request.
+     * @param interactionClient {@link InteractionClient}.
+     */
+    public LexServiceContinuation(InteractionClient interactionClient) {
+        this.interactionClient = interactionClient;
+        this.sessionAttributes = new HashMap<String, String>();
+    }
+
+    /**
+     * Returns a specific session attribute.
+     * @param attribute the request attribute as a {@link String}.
+     * @return the value for the attribute, null if the attribute is not set.
+     */
+    public String getSessionAttribute(String attribute) {
+        return this.sessionAttributes.get(attribute);
+    }
+
+    /**
+     * Returns all session attributes.
+     * @return All session attributes as a {@link Map}.
+     */
+    public Map<String, String> getSessionAttributes() {
+        return this.sessionAttributes;
+    }
+
+    /**
+     * Replace all session attributes with a new set.
+     * @param sessionAttributes {@link Map}.
+     */
+    public void setSessionAttributes(Map<String, String> sessionAttributes) {
+        this.sessionAttributes.clear();
+        this.sessionAttributes.putAll(sessionAttributes);
+    }
+
+    /**
+     * Set value for a specific session attribute, will over-write current value.
+     * @param attribute name of the attribute as {@link String}.
+     * @param value value of the attribute as {@link String}.
+     */
+    public void setSessionAttribute(String attribute, String value) {
+        sessionAttributes.put(attribute, value);
+    }
+
+//    /**
+//     * Use this method if the users response is speech. The client will listen to user's input from
+//     * the device's microphone. The service will respond to this request with text.
+//     */
+//    public void continueWithAudioInForTextOut() {
+//        interactionClient.audioInForTextOut(sessionAttributes);
+//    }
+//
+//    /**
+//     * Use this method if the users response is speech. The client will listen to user's input from
+//     * the device's microphone. The service will respond to this request with audio.
+//     */
+//    public void continueWithAudioInForAudioOut() {
+//        interactionClient.audioInForAudioOut(sessionAttributes);
+//    }
+
+//    /**
+//     * Use this method to respond with text and expect service response with audio.
+//     * @param text the response to the prompt as a {@link String}.
+//     */
+//    public void continueWithTextInForAudioOut(String text) {
+//        interactionClient.textInForAudioOut(text, sessionAttributes);
+//    }
+
+    /**
+     * Use this method to respond with text and expect service response with text.
+     * @param text the response to the prompt as a {@link String}.
+     */
+    public void continueWithTextInForTextOut(String text) {
+        interactionClient.textInForTextOut(text, sessionAttributes);
+    }
+
+//    /**
+//     * Use this method to continue with the current input and output mode.
+//     */
+//    public void continueWithCurrentMode() {
+//        Log.d("SDK", " -- responseMode: " + responseMode + "; requestMode: " + requestMode);
+//        if (ResponseType.AUDIO_MPEG.equals(responseMode) && ResponseType.AUDIO_MPEG.equals(requestMode)) {
+//            continueWithAudioInForAudioOut();
+//        } else {
+//            throw new InvalidParameterException(
+//                    "Cannot continue with current mode, if request and response are not audio");
+//        }
+//    }
+
+    /**
+     * Use this method to cancel the current transaction.
+     */
+    public void cancel() {
+        interactionClient.cancel();
+    }
+}
+
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/InteractionClient.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/InteractionClient.java
new file mode 100644
index 0000000000..b1e2281497
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/InteractionClient.java
@@ -0,0 +1,841 @@
+package com.example.prakritibansal.posttextrequest;
+
+import android.content.Context;
+import android.os.Handler;
+
+import com.amazonaws.ClientConfiguration;
+import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.auth.CognitoCredentialsProvider;
+import com.amazonaws.mobileconnectors.lex.interactionkit.exceptions.DialogFailedException;
+import com.amazonaws.mobileconnectors.lex.interactionkit.exceptions.InvalidParameterException;
+import com.amazonaws.mobileconnectors.lex.interactionkit.exceptions.LexClientException;
+import com.amazonaws.regions.Region;
+import com.amazonaws.regions.Regions;
+import com.amazonaws.services.lexrts.AmazonLexRuntime;
+import com.amazonaws.services.lexrts.AmazonLexRuntimeClient;
+import com.amazonaws.services.lexrts.model.DialogState;
+import com.amazonaws.services.lexrts.model.PostTextRequest;
+import com.amazonaws.services.lexrts.model.PostTextResult;
+import com.amazonaws.util.StringUtils;
+import com.example.prakritibansal.posttextrequest.Continuations.LexServiceContinuation;
+import com.example.prakritibansal.posttextrequest.Listeners.DefaultInteractionListener;
+import com.example.prakritibansal.posttextrequest.Listeners.InteractionListener;
+import com.example.prakritibansal.posttextrequest.Utils.CreateLexServiceRequest;
+import com.example.prakritibansal.posttextrequest.config.InteractionConfig;
+
+import java.util.Map;
+
+/**
+ * Created by prakritibansal on 12/28/17.
+ */
+
+public class InteractionClient {
+    private final String TAG = "Lex";
+    private static final String INTERACTION_CLIENT_USER_AGENT = "INTERACTION_CLIENT";
+
+    /**
+     * Application context.
+     */
+    private final Context context;
+
+    /**
+     * Amazon Lex service client.
+     */
+    private final AmazonLexRuntime amazonlex;
+
+//    /**
+//     * User speech interaction client for Android.
+//     */
+    private final InteractionConfig interactionConfig;
+
+    /**
+     * Amazon AWS Credentials to access DeespSense service.
+     */
+    private final AWSCredentialsProvider credentialsProvider;
+
+    /**
+     * Callback for high-level user interactions.
+     */
+    private InteractionListener interactionListener;
+
+//    /**
+//     * Callback for audio playback.
+//     */
+//    private AudioPlaybackListener audioPlaybackListener;
+
+//    /**
+//     * Callback for user interactions with microphone.
+//     */
+//    private MicrophoneListener microphoneListener;
+
+//    /**
+//     * Local media player for audio playback.
+//     */
+//    private MediaPlayer lMediaPlayer;
+//
+//    /**
+//     * Audio encoding used for audio streamed to the Amazon Lex service.
+//     */
+//    private AudioEncoder audioEncoder;
+//
+//    /**
+//     * Intervals for no speech and max speech timeouts.
+//     */
+//    private AudioTimeouts audioTimeouts;
+//
+//    /**
+//     * Config for voice activity detection.
+//     */
+//    private DnnVADConfig vadConfig;
+//
+//    /**
+//     * Records user audio for streaming.
+//     */
+//    private LexAudioRecorder lexAudioRecorder;
+
+    /**
+     * The size of the each sample in bit.
+     */
+    public static final int SAMPLE_SIZE = 16;
+
+    /**
+     * Client states.
+     */
+    private final boolean BUSY = true;
+    private final boolean NOT_BUSY = false;
+
+    /**
+     * Indicates if the client is busy with a request.
+     */
+    private volatile boolean requestInProgress;
+
+//    /**
+//     * Indicates if the client is busy with audio playback.
+//     */
+//    private volatile boolean audioPlayBackInProgress;
+
+    /**
+     * Constructors for Amazon Lex local clients.
+     */
+    public InteractionClient(Context context,
+                             AWSCredentialsProvider credentialsProvider,
+                             Regions region,
+                             String botName,
+                             String botAlias) {
+        // Uses default interaction configuration and listeners.
+        this(context,
+                credentialsProvider,
+                region,
+                new InteractionConfig(botName, botAlias));
+    }
+
+    public InteractionClient(Context context,
+                             AWSCredentialsProvider credentialsProvider,
+                             Regions region,
+                             InteractionConfig interactionConfig) {
+        this(context, credentialsProvider, region, interactionConfig, null);
+    }
+
+    public InteractionClient(Context context,
+                             AWSCredentialsProvider credentialsProvider,
+                             Regions region,
+                             InteractionConfig interactionConfig,
+                             ClientConfiguration clientConfiguration) {
+
+        if (context == null) {
+            throw new InvalidParameterException("Context cannot be null.");
+        } else {
+            this.context = context;
+        }
+
+        // Check if all necessary credentials are available.
+        if (credentialsProvider == null) {
+            throw new InvalidParameterException("Credentials are not set.");
+        }
+
+        if (interactionConfig == null) {
+            throw new InvalidParameterException("Interaction config is not set.");
+        }
+
+        if ((interactionConfig.getUserId() == null || interactionConfig.getUserId().isEmpty())
+                && !(credentialsProvider instanceof CognitoCredentialsProvider)) {
+            throw new InvalidParameterException(
+                    "User id must be set in the config or Amazon Cognito Identity must used as the credentials provider");
+        }
+
+        this.interactionConfig = interactionConfig;
+        this.credentialsProvider = credentialsProvider;
+        this.interactionListener = new DefaultInteractionListener();
+
+        // Create service low-level client.
+        if (null == clientConfiguration) {
+            clientConfiguration = new ClientConfiguration();
+        }
+
+        String userAgent = INTERACTION_CLIENT_USER_AGENT;
+
+        if (!StringUtils.isBlank(clientConfiguration.getUserAgent())) {
+            userAgent += clientConfiguration.getUserAgent();
+        }
+
+        clientConfiguration.setUserAgent(userAgent);
+
+        amazonlex = new AmazonLexRuntimeClient(credentialsProvider, clientConfiguration);
+        amazonlex.setRegion(Region.getRegion(region));
+    }
+
+//    /**
+//     * Accept input from mic (speech) for text, {@link String}, response from the service.
+//     * @param sessionAttributes {@link Map}.
+//     */
+//    public void audioInForTextOut(final Map<String, String> sessionAttributes) {
+//        carryOnWithMic(sessionAttributes, ResponseType.TEXT);
+//    }
+//
+//    /**
+//     * Accept input from mic (speech) for audio response from the service. To allow the to playback
+//     * audio from the service response, use {@link InteractionConfig#setEnableAudioPlayback(boolean)}.
+//     * @param sessionAttributes {@link Map}.
+//     */
+//    public void audioInForAudioOut(final Map<String, String> sessionAttributes) {
+//        carryOnWithMic(sessionAttributes, ResponseType.AUDIO_MPEG);
+//    }
+
+    /**
+     * Accept input as text, {@link String}, for text, {@link String}, reponse from the service.
+     * @param text input as {@link String}.
+     * @param sessionAttributes {@link Map}.
+     */
+    public void textInForTextOut(final String text, final Map<String, String> sessionAttributes) {
+        carryOnWithText(text, sessionAttributes);
+    }
+
+//    /**
+//     * Accept input as text, {@link String}, for audio response from the service. To allow the to playback
+//     * audio from the service response, use {@link InteractionConfig#setEnableAudioPlayback(boolean)}.
+//     * @param text input as {@link String}.
+//     * @param sessionAttributes {@link Map}.
+//     */
+//    public void textInForAudioOut(final String text, final Map<String, String> sessionAttributes) {
+//        carryOnWithText(text, sessionAttributes, ResponseType.AUDIO_MPEG);
+//    }
+
+    /**
+     * Cancel the current  with the user's.
+     */
+    public void cancel() {
+        // TODO - Also stop the http client.
+        // Stop current dialog.
+//        terminateAudioDecoder();
+//        terminateAudioPlayback();
+        setBusyState(NOT_BUSY);
+    }
+
+//    /**
+//     * Starts listening for the user to speak, through the microphones. The voice interaction client
+//     * detects the start and end of speech.
+//     */
+//    private void carryOnWithMic(final Map<String, String> sessionAttributes, final ResponseType mode) {
+//        // Ensure that the client is not pre-occupied with another dlalog
+//        checkBusyState();
+//        // Send user's response to Amazon Lex service as an audio-stream.
+//        final InteractionClient client = this;
+//        new Thread(new Runnable() {
+//            @Override
+//            public void run() {
+//                final Handler handler = new Handler(context.getMainLooper());
+//                Runnable returnCallBack;
+//                try {
+//                    // Create a new voice interaction client.
+//                    if (AudioEncoding.LPCM.equals(interactionConfig.getAudioEncoding())) {
+//                        audioEncoder = new BufferedAudioEncoder(new L16PcmEncoder());
+//                    } else {
+//                        audioEncoder = new BufferedAudioEncoder(new OpusEncoder());
+//                    }
+//
+//                    // Set time-out limits for mic audio.
+//                    audioTimeouts = new AudioTimeouts(interactionConfig.getNoSpeechTimeoutInterval(),
+//                            interactionConfig.getMaxSpeechTimeoutInterval());
+//
+//                    // Set VAD configuration.
+//                    vadConfig = new DnnVADConfig(interactionConfig.getLrtThreshold(),
+//                            interactionConfig.getStartPointingThreshold(),
+//                            interactionConfig.getEndPointingThreshold());
+//
+//                    lexAudioRecorder =
+//                            new LexAudioRecorderBuilder(context).
+//                                    audioEncoder(audioEncoder).
+//                                    audioTimeouts(audioTimeouts).
+//                                    dnnVADConfig(vadConfig).
+//                                    build();
+//
+//                    // Calculate the maximum buffer size for pipes.
+//                    final int maxTotalAudioLengthInMills = audioTimeouts.getNoSpeechTimeout()
+//                            + audioTimeouts.getMaxSpeechTimeout();
+//                    final int pipeSize = AudioRecorder.DEFAULT_SAMPLE_RATE
+//                            * (int) TimeUnit.MILLISECONDS.toSeconds(maxTotalAudioLengthInMills)
+//                            * (SAMPLE_SIZE / Byte.SIZE);
+//
+//                    final InputStream audioInStream =
+//                            new BufferedInputStream(lexAudioRecorder.getConsumerStream(),
+//                                    pipeSize);
+//
+//                    final PostContentRequest request =
+//                            CreateLexServiceRequest.generatePostContentRequest(sessionAttributes,
+//                                    interactionConfig,
+//                                    credentialsProvider,
+//                                    mode,
+//                                    audioInStream,
+//                                    audioEncoder.getMediaType().toString());
+//
+//                    // Start the speech listener, service api's will be called only when the speech frames are detected.
+//                    startListening(handler, microphoneListener, lexAudioRecorder, request, client,
+//                            mode);
+//                } catch (final Exception e) {
+//                    returnCallBack = new Runnable() {
+//                        @Override
+//                        public void run() {
+//                            interactionListener.onInteractionError(null, e);
+//                        }
+//                    };
+//                    handler.post(returnCallBack);
+//                } finally {
+//                    setBusyState(NOT_BUSY);
+//                }
+//            }
+//        }).start();
+//    }
+
+//    /**
+//     * This method will be invoked when speech frames are detected in the audio
+//     * input over the microphone.
+//     *
+//     * @param handler {@link Handler}, to interact with app components in the
+//     *            main thread.
+//     * @param request {@link PostContentResult}, response from the Amazon Lex
+//     *            service.
+//     * @param client {@link com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient}, reference to this object.
+//     * @param mode {@link ResponseType}, current response type.
+//     */
+//    private void sendAudioRequest(final Handler handler,
+//                                  final PostContentRequest request,
+//                                  final com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient client,
+//                                  final ResponseType mode) {
+//        new Thread(new Runnable() {
+//            @Override
+//            public void run() {
+//                try {
+//                    final PostContentResult result = amazonlex.postContent(request);
+//                    processResponseAudioPlayback(handler, result, client, mode, ResponseType.AUDIO_MPEG);
+//                } catch (final Exception e) {
+//                    final Runnable returnCallBack = new Runnable() {
+//                        @Override
+//                        public void run() {
+//                            interactionListener.onInteractionError(null, e);
+//                        }
+//                    };
+//                    handler.post(returnCallBack);
+//                } finally {
+//                    setBusyState(NOT_BUSY);
+//                }
+//            }
+//        }).start();
+//    }
+
+    /**
+     * Accepts user's response as {@link String}.
+     */
+    private void carryOnWithText(final String text, final Map<String, String> sessionAttributes) {
+        // Ensure the client is not pre-occupied with a request.
+        checkBusyState();
+        // Send user's response to Amazon Lex service as a text.
+        final InteractionClient client = this;
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                final Handler handler = new Handler(context.getMainLooper());
+                Runnable returnCallback;
+                try {
+                    final PostTextRequest request =
+                            CreateLexServiceRequest.generatePostTextRequest(sessionAttributes,
+                                    interactionConfig,
+                                    credentialsProvider,
+                                    text);
+                    final PostTextResult result = amazonlex.postText(request);
+                    processResponse(handler, result, client);
+                    //processResponseAudioPlayback(handler, result, client, mode, ResponseType.TEXT);
+                } catch (final Exception e) {
+                    returnCallback = new Runnable() {
+                        @Override
+                        public void run() {
+
+                            interactionListener.onInteractionError(null, e);
+                        }
+                    };
+                    handler.post(returnCallback);
+                } finally {
+                    setBusyState(NOT_BUSY);
+                }
+            }
+        }).start();
+    }
+
+//    /**
+//     * Invokes the Android {@link MediaPlayer} to playback audio if audio
+//     * playback was requested, and continues to analyze the response. If the
+//     * response does not contain audio stream or if audio playback was not
+//     * requested, continues to analyze the response.
+//     *
+//     * @param handler {@link Handler}, to interact with app components in the
+//     *            main thread.
+//     * @param result {@link PostContentResult}, response from the Amazon Lex
+//     *            service.
+//     * @param client {@link com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient}, reference to this object.
+//     * @param responseMode {@link ResponseType}, current response type.
+//     */
+//    private void processResponseAudioPlayback(final Handler handler,
+//                                              final PostContentResult result,
+//                                              final com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient client,
+//                                              final ResponseType responseMode,
+//                                              final ResponseType requestType) {
+//        // Check if response is audio and audio playback is requested.
+//        if (ResponseType.AUDIO_MPEG.equals(responseMode) && interactionConfig.isEnableAudioPlayback()) {
+//            this.lMediaPlayer = new MediaPlayer();
+//            this.lMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
+//            try {
+//                setAudioPlaybackState(BUSY);
+//                File tempAudioFile = File.createTempFile("lex_temp_response", "mp3",
+//                        context.getFilesDir());
+//                tempAudioFile.deleteOnExit();
+//                // Media player listeners.
+//                lMediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener() {
+//                    @Override
+//                    public boolean onError(final MediaPlayer mp, final int what, final int extra) {
+//                        if (interactionListener != null) {
+//                            final Runnable appCallback = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    audioPlaybackListener.onAudioPlaybackError(
+//                                            new AudioPlaybackException(
+//                                                    String.format(Locale.US,
+//                                                            "MediaPlayer error: \"what\": %d, \"extra\":%d",
+//                                                            what,
+//                                                            extra)));
+//                                }
+//                            };
+//                            handler.post(appCallback);
+//                        }
+//                        return false;
+//                    }
+//                });
+//
+//                lMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
+//                    @Override
+//                    public void onPrepared(MediaPlayer mp) {
+//                        if (audioPlaybackListener != null) {
+//                            final Runnable appCallback = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    audioPlaybackListener.onAudioPlaybackStarted();
+//                                }
+//                            };
+//                            handler.post(appCallback);
+//                        }
+//                        mp.start();
+//                    }
+//                });
+//
+//                lMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+//                    @Override
+//                    public void onCompletion(MediaPlayer mp) {
+//                        setAudioPlaybackState(NOT_BUSY);
+//                        if (audioPlaybackListener != null) {
+//                            final Runnable appCallback = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    audioPlaybackListener.onAudioPlayBackCompleted();
+//                                }
+//                            };
+//                            handler.post(appCallback);
+//                        }
+//                        try {
+//                            if (lMediaPlayer.isPlaying() || lMediaPlayer.isLooping()) {
+//                                lMediaPlayer.stop();
+//                            }
+//                            lMediaPlayer.release();
+//                        } catch (final Exception e) {
+//                            Log.e(TAG, "InteractionClient: Error while releasing MediaPlayer", e);
+//                        } finally {
+//                            lMediaPlayer = null;
+//                        }
+//                    }
+//                });
+//
+//                final InputStream audioStream = result.getAudioStream();
+//                tempAudioFile = File.createTempFile("lex_temp_response", "dat",
+//                        context.getFilesDir());
+//                tempAudioFile.deleteOnExit();
+//                final FileOutputStream audioOut = new FileOutputStream(tempAudioFile);
+//                final byte buffer[] = new byte[16384];
+//                int length;
+//                while ((length = audioStream.read(buffer)) != -1) {
+//                    audioOut.write(buffer, 0, length);
+//                }
+//                audioOut.close();
+//                final FileInputStream audioIn = new FileInputStream(tempAudioFile);
+//                lMediaPlayer.setDataSource(audioIn.getFD());
+//                lMediaPlayer.prepare();
+//                processResponse(handler, result, client, responseMode, requestType);
+//            } catch (final Exception e) {
+//                // Playback failed.
+//                if (audioPlaybackListener != null) {
+//                    final Runnable appCallback = new Runnable() {
+//                        @Override
+//                        public void run() {
+//                            audioPlaybackListener.onAudioPlaybackError(
+//                                    new LexClientException("Audio playback failed", e));
+//                        }
+//                    };
+//                    handler.post(appCallback);
+//                }
+//                try {
+//                    if (lMediaPlayer.isPlaying() || lMediaPlayer.isLooping()) {
+//                        lMediaPlayer.stop();
+//                    }
+//                    lMediaPlayer.release();
+//                    lMediaPlayer = null;
+//                } catch (final Exception exp) {
+//                    Log.e(TAG, "InteractionClient: Error while releasing MediaPlayer", exp);
+//                }
+//                processResponse(handler, result, client, responseMode, requestType);
+//            } finally {
+//                setAudioPlaybackState(NOT_BUSY);
+//            }
+//
+//        } else {
+//            processResponse(handler, result, client, responseMode, requestType);
+//        }
+//    }
+
+    /**
+     * Analyzes response from Amazon Lex service. Returns a {@link Runnable}
+     * with the next step, which is usually a callback method in the
+     * {@link InteractionListener} object.
+     *
+     * @param handler {@link Handler}, to interact with app components in the
+     *            main thread.
+     * @param result {@link PostTextRequest}, response from the Amazon Lex
+     *            service.
+     * @param client {@link com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient}, reference to this object.
+     */
+    private void processResponse(final Handler handler,
+                                 final PostTextResult result,
+                                 final InteractionClient client) {
+        Runnable response;
+        try {
+            setBusyState(NOT_BUSY);
+            final TextResponse serviceResponse = new TextResponse(result);
+            if (DialogState.Failed.toString().equals(result.getDialogState())) {
+                // Amazon Lex service reported an error.
+                response = new Runnable() {
+                    @Override
+                    public void run() {
+                        interactionListener.onInteractionError(serviceResponse,
+                                new DialogFailedException(
+                                        "Failed to fulfill current request."));
+                    }
+                };
+            } else if (DialogState.ReadyForFulfillment.toString().equals(result.getDialogState())) {
+                // The current dialog is ready for fulfillment by the client, no
+                // further action is required.
+                response = new Runnable() {
+                    @Override
+                    public void run() {
+                        interactionListener.onReadyForFulfillment(new TextResponse(result));
+
+                        interactionListener.promptUserToRespond(serviceResponse, null);
+                    }
+                };
+            } else if (DialogState.Fulfilled.toString().equals(result.getDialogState())) {
+                // Request was successfully fulfilled, no further action required.
+                response = new Runnable() {
+                    @Override
+                    public void run() {
+                        interactionListener.promptUserToRespond(serviceResponse, null);
+                    }
+                };
+            } else {
+                // User's response is required to continue.
+                final LexServiceContinuation continuation =
+                        new LexServiceContinuation(client);
+                // set the session attributes on the continuation
+                continuation.setSessionAttributes(serviceResponse.getSessionAttributes());
+                response = new Runnable() {
+                    @Override
+                    public void run() {
+                        interactionListener.promptUserToRespond(serviceResponse, continuation);
+                    }
+                };
+            }
+        } catch (final Exception e) {
+            response = new Runnable() {
+                @Override
+                public void run() {
+                    interactionListener.onInteractionError(null, e);
+                }
+            };
+        } finally {
+            setBusyState(NOT_BUSY);
+        }
+        handler.post(response);
+    }
+
+//    /**
+//     * Starts listening to the user over the mic.
+//     *
+//     * @param handler {@link Handler}, to interact with app components in the
+//     *            main thread.
+//     * @param microphoneListener {@link MicrophoneListener}, callback to
+//     *            communicate recording over microphone to the application.
+//     * @param lexAudioRecorder {@link LexAudioRecorder}, listens to audio from
+//     *            mic.
+//     */
+//    private void startListening(final Handler handler,
+//                                final MicrophoneListener microphoneListener,
+//                                final LexAudioRecorder lexAudioRecorder,
+//                                final PostContentRequest request,
+//                                final com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient client,
+//                                final ResponseType mode) {
+//        final AudioRecordingTask recordingTask = new AudioRecordingTask(lexAudioRecorder,
+//                new AudioRecordingTaskListener() {
+//                    @Override
+//                    public void onReadyForSpeech() {
+//                        // Client ready to listen to user speech.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.readyForRecording();
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onBeginningOfSpeech() {
+//                        // App detected speech.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.startedRecording();
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//
+//                        // Now since the speech frames have been detected, send
+//                        // the request to the Amazon Lex bot.
+//                        sendAudioRequest(handler, request, client, mode);
+//                    }
+//
+//                    @Override
+//                    public void onBufferReceived(byte[] buffer) {
+//                        // No operation required. This callback is invoked by AudioRecorder. The bytes received
+//                        // in this callback are PCM encoded. LexAudioRecorder extends AudioRecorder to
+//                        // allow other audio encoders, and pipe the encoded bytes through a PipedInputStream.
+//                        // The PipedInputStream used in the request to the
+//                        // Amazon Lex service.
+//                    }
+//
+//                    @Override
+//                    public void onRmsChanged(final float rmsdB) {
+//                        // Sound level has changed.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onSoundLevelChanged(rmsdB);
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onSilenceDetected() {
+//                        // Silence detected after speech.
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onRecordingEnd();
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onNoSpeechTimeout() {
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onMicrophoneError(
+//                                            new NoSpeechTimeOutException(
+//                                                    "User did not respond within the speech time out limit."));
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//
+//                        // Stop recording on no timeout.
+//                        lexAudioRecorder.cancel();
+//                        setBusyState(NOT_BUSY);
+//                    }
+//
+//                    @Override
+//                    public void onMaxSpeechTimeout() {
+//                        lexAudioRecorder.cancel();
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onMicrophoneError(
+//                                            new MaxSpeechTimeOutException(
+//                                                    "User did not complete response within the max speech time out limit."));
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//
+//                    @Override
+//                    public void onError(final AmazonClientException e) {
+//                        if (microphoneListener != null) {
+//                            final Runnable appCallBack = new Runnable() {
+//                                @Override
+//                                public void run() {
+//                                    microphoneListener.onMicrophoneError(
+//                                            new LexClientException(e.getMessage(), e));
+//                                }
+//                            };
+//                            handler.post(appCallBack);
+//                        }
+//                    }
+//                });
+//
+//        recordingTask.execute();
+//    }
+
+//    /**
+//     * Assign a audio playback listener to this interaction client. This will be invoked during
+//     * audio playback events only when audio playback is enabled.
+//     * @param audioPlaybackListener
+//     */
+//    public void setAudioPlaybackListener(AudioPlaybackListener audioPlaybackListener) {
+//        this.audioPlaybackListener = audioPlaybackListener;
+//    }
+//
+//    /**
+//     * Assign a listener for microphone events.
+//     * @param microphoneListener
+//     */
+//    public void setMicrophoneListener(MicrophoneListener microphoneListener) {
+//        this.microphoneListener = microphoneListener;
+//    }
+//
+    /**
+     * Set an interaction listener for this client. If no internaction listner was provided, the
+     * default implementation is used.
+     * @param interactionListener the interaction listener {@link InteractionListener}.
+     */
+    public void setInteractionListener(InteractionListener interactionListener) {
+        if (interactionListener == null) {
+            // use the default implementation
+            interactionListener = new DefaultInteractionListener();
+        }
+        this.interactionListener = interactionListener;
+    }
+
+    /**
+     * Check if this client is busy, with a request in progress.
+     */
+    private void checkBusyState() {
+        if (isBusy()) {
+            throw new LexClientException("Client is busy with a request.");
+        } else {
+            setBusyState(BUSY);
+        }
+    }
+
+    /**
+     * Returns the current state of the client.
+     * @return boolean for the current state of the client.
+     */
+    private boolean isBusy() {
+        return requestInProgress;
+    }
+
+    /**
+     * Sets the current state of the client.
+     * @param busyState the client state.
+     */
+    private void setBusyState(boolean busyState) {
+        this.requestInProgress = busyState;
+    }
+
+//    /**
+//     * Returns {@code true} if audio playback is on progress.
+//     * @return
+//     */
+//    private boolean isAudioPlayBackInProgress() {
+//        return audioPlayBackInProgress;
+//    }
+//
+//    /**
+//     * Sets the current state of the client.
+//     * @param playbackState the audio playback state.
+//     */
+//    private void setAudioPlaybackState(boolean playbackState) {
+//        this.audioPlayBackInProgress = playbackState;
+//    }
+//
+//    /**
+//     * Terminates any audio playback which is in progress.
+//     */
+//    private void terminateAudioPlayback() {
+//        try {
+//            if (lMediaPlayer != null) {
+//                if (lMediaPlayer.isPlaying() || lMediaPlayer.isLooping()) {
+//                    lMediaPlayer.stop();
+//                }
+//                lMediaPlayer.release();
+//                lMediaPlayer = null;
+//            }
+//        } catch (final Exception e) {
+//            // Media player failed.
+//            Log.e(TAG, "InteractionClient: MediaPlayer error", e);
+//        } finally {
+//            setAudioPlaybackState(NOT_BUSY);
+//        }
+//    }
+//
+//    /**
+//     * Terminates active audio decoder and release any allocated AudioRecorder system resources.
+//     */
+//    private void terminateAudioDecoder() {
+//        try {
+//            if (lexAudioRecorder != null) {
+//                lexAudioRecorder.cancel();
+//            }
+//        } catch (final Exception e) {
+//            // Bluefront audio decoder failed.
+//            Log.e(TAG, "InteractionClient: Bluefront audio decoder error", e);
+//        }
+//    }
+
+}
+
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/DefaultInteractionListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/DefaultInteractionListener.java
new file mode 100644
index 0000000000..73b8336919
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/DefaultInteractionListener.java
@@ -0,0 +1,33 @@
+package com.example.prakritibansal.posttextrequest.Listeners;
+
+/**
+ * Created by prakritibansal on 12/28/17.
+ */
+
+import android.util.Log;
+
+import com.example.prakritibansal.posttextrequest.Continuations.LexServiceContinuation;
+import com.example.prakritibansal.posttextrequest.TextResponse;
+
+public class DefaultInteractionListener implements InteractionListener {
+    private static final String TAG = "DefaultInteractionLis";
+
+    @Override
+    public void onReadyForFulfillment(TextResponse response) {
+        Log.d(TAG, "ready to be fulfilled");
+    }
+
+    @Override
+    public void promptUserToRespond(TextResponse response,
+                                    LexServiceContinuation continuation) {
+        Log.d(TAG, "Prompting user to respond");
+        //continuation.continueWithTextInForTextOut();
+    }
+
+    @Override
+    public void onInteractionError(TextResponse response, Exception e) {
+        Log.e(TAG, "on interaction error " + e.getMessage());
+    }
+
+}
+
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/InteractionListener.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/InteractionListener.java
new file mode 100644
index 0000000000..93091eb1a7
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Listeners/InteractionListener.java
@@ -0,0 +1,44 @@
+package com.example.prakritibansal.posttextrequest.Listeners;
+
+/**
+ * Created by prakritibansal on 12/28/17.
+ */
+
+import com.example.prakritibansal.posttextrequest.Continuations.LexServiceContinuation;
+import com.example.prakritibansal.posttextrequest.TextResponse;
+
+/**
+ * Interaction listener.
+ */
+public interface InteractionListener {
+
+    /**
+     * This is invoked when all information required to fulfill a transaction
+     * has been recovered.
+     *
+     * @param response {@link TextResponse}, contains the service
+     *            response.
+     */
+    public void onReadyForFulfillment(final TextResponse response);
+
+    /**
+     * This is invoked when input is required from the user.
+     *
+     * @param response {@link TextResponse}, contains the service
+     *            response.
+     * @param continuation {@link LexServiceContinuation}, allows to
+     *            continue with the current transaction.
+     */
+    public void promptUserToRespond(final TextResponse response,
+                                    final LexServiceContinuation continuation);
+
+    /**
+     * This method is invoked on error.
+     *
+     * @param response {@link TextResponse}, contains the service
+     *            response.
+     * @param e error reported as {@link Exception}.
+     */
+    public void onInteractionError(final TextResponse response, final Exception e);
+}
+
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/TextResponse.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/TextResponse.java
new file mode 100644
index 0000000000..20f6ce58d3
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/TextResponse.java
@@ -0,0 +1,90 @@
+package com.example.prakritibansal.posttextrequest;
+
+/**
+ * Created by prakritibansal on 12/28/17.
+ */
+
+
+import com.amazonaws.services.lexrts.model.PostTextResult;
+import com.amazonaws.services.lexrts.model.ResponseCard;
+
+import java.util.Map;
+
+
+public class TextResponse {
+    private final PostTextResult result;
+
+    /**
+     * Uses the service response to create an instance of this class.
+     * @param result response from the service.
+     */
+    protected TextResponse(PostTextResult result) {
+        this.result = result;
+    }
+
+    /**
+     * Returns the dialog state. The dialog states represent the service's
+     * intent in this response, that is what the service expects from the user.
+     * There are five dialog states.
+     *
+     * @return dialog state as {@link String}.
+     */
+    public String getDialogState() {
+        return result.getDialogState();
+    }
+
+    /**
+     * Returns session attributes.
+     * @return session attributes, as {@link Map}.
+     */
+    public Map<String, String> getSessionAttributes() {
+        return result.getSessionAttributes();
+    }
+
+
+    /**
+     * Returns a text response from the service.
+     * @return text response, as {@link String}.
+     */
+    public String getTextResponse() {
+        return  result.getMessage();
+    }
+
+    /**
+     * Returns the name of the slot which is required from the user.
+     *
+     * @return parameter required from user, as {@link String}.
+     */
+    public String getSlotToIllicit() {
+        return result.getSlotToElicit();
+    }
+
+    /**
+     *
+     * @return
+     */
+    public String getIntentName() {
+        return result.getIntentName();
+    }
+
+    /**
+     * Returns a Map of key value pair of the slots which are filled.
+     *
+     * @return
+     */
+    public Map<String, String> getSlots() {
+        return result.getSlots();
+    }
+
+    /**
+     * Returns a CardResponse
+     *
+     * @return ResponseCard
+     */
+
+    public ResponseCard getResponseCard(){
+        return result.getResponseCard();
+    }
+
+
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Utils/CreateLexServiceRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Utils/CreateLexServiceRequest.java
new file mode 100644
index 0000000000..f5fd284d24
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/Utils/CreateLexServiceRequest.java
@@ -0,0 +1,70 @@
+package com.example.prakritibansal.posttextrequest.Utils;
+
+/**
+ * Created by prakritibansal on 12/28/17.
+ */
+
+import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.auth.CognitoCredentialsProvider;
+import com.amazonaws.services.lexrts.model.PostTextRequest;
+import com.example.prakritibansal.posttextrequest.config.InteractionConfig;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Utility class to create requests for Amazon Lex service.
+ */
+public class CreateLexServiceRequest {
+
+    /**
+     * Creates a request to post text input request for Amazon Lex service.
+     *
+     * @param sessionAttributes Session attributes for this current transaction.
+     * @param text Input text.
+     * @return {@link PostTextRequest}.
+     */
+    public static PostTextRequest generatePostTextRequest(Map<String, String> sessionAttributes,
+                                                                InteractionConfig interactionConfig,
+                                                                AWSCredentialsProvider credentialsProvider,
+                                                                String text) {
+        final PostTextRequest request = generateRequestInternal(sessionAttributes,
+                interactionConfig,
+                credentialsProvider);
+        request.setInputText(text);
+        return request;
+    }
+
+    /**
+     *
+     * @param sessionAttributes
+     * @param interactionConfig
+     * @param credentialsProvider
+     * @return
+     */
+    private static PostTextRequest generateRequestInternal(Map<String, String> sessionAttributes,
+                                                              InteractionConfig interactionConfig,
+                                                              AWSCredentialsProvider credentialsProvider) {
+        final PostTextRequest request = new PostTextRequest();
+
+        request.setBotName(interactionConfig.getBotName());
+        request.setBotAlias(interactionConfig.getBotAlias());
+
+        final Map<String, String> newSessionAttributes = new HashMap<String, String>();
+        newSessionAttributes.putAll(interactionConfig.getGlobalSessionAttributes());
+        if (sessionAttributes != null) {
+            newSessionAttributes.putAll(sessionAttributes);
+        }
+
+        request.setSessionAttributes(newSessionAttributes);
+
+        if (interactionConfig.getUserId() == null || interactionConfig.getUserId().isEmpty()) {
+            final CognitoCredentialsProvider cognitoCredentialsProvider = (CognitoCredentialsProvider) credentialsProvider;
+            request.setUserId(cognitoCredentialsProvider.getIdentityId());
+        } else {
+            request.setUserId(interactionConfig.getUserId());
+        }
+
+        return request;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/config/InteractionConfig.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/config/InteractionConfig.java
new file mode 100644
index 0000000000..0464013d92
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/mobileconnectors/lex/interactionkit/PostText/config/InteractionConfig.java
@@ -0,0 +1,446 @@
+package com.example.prakritibansal.posttextrequest.config;
+
+/*
+ * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+
+import com.amazonaws.mobileconnectors.lex.interactionkit.utils.AudioEncoding;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Contains configuration for SDK's interaction with the users.
+ */
+public class InteractionConfig {
+//    /**
+//     * Time out interval in milli-seconds when no sound is heard from the user.
+//     */
+//    private int noSpeechTimeoutInterval;
+//
+//    /**
+//     * Maximum value for no sound time put, in milli-seconds.
+//     */
+//    private int maxSpeechTimeoutInterval;
+//
+//    /**
+//     * The number of speech frames which defines what is a active speech. TODO -
+//     * Add explanations to use this setting.
+//     */
+//    private int startPointingThreshold;
+//
+//    /**
+//     * The number of non-speech frames which defines what a silence is. TODO -
+//     * Add explanations to use this setting.
+//     */
+//    private int endPointingThreshold;
+//
+//    /**
+//     * The likelihood-ratio test threshold value, which will be used to classify
+//     * whether a frame of audio is a speech or not. TODO - Expose this to
+//     * developers? TODO - Add explanations to use this setting.
+//     */
+//    private float lrtThreshold;
+//
+//    /**
+//     * Indicates if the SDK should playback audio response from Amazon Lex.
+//     * Default is "true".
+//     */
+//    private boolean enableAudioPlayback;
+//
+//    /**
+//     * Current audio encoding codec.
+//     */
+//    private AudioEncoding audioEncoding;
+
+    /**
+     * The Amazon Lex bot name.
+     */
+    private String botName;
+
+    /**
+     * The Amazon Lex bot Alias
+     */
+    private String botAlias;
+
+    /**
+     * User id.
+     */
+    private String userId;
+
+//    public static final int DEFAULT_NO_SPEECH_TIMEOUT_INTERVAL = 5000;
+//    public static final int DEFAULT_MAX_SPEECH_TIMEOUT_INTERVAL = 15000;
+//    public static final int DEFAULT_START_POINTING_THRESHOLD = 8;
+//    public static final int DEFAULT_END_POINTING_THRESHOLD = 80;
+//    public static final float DEFAULT_LRT_THRESHOLD = 1.8f;
+//    public static final AudioEncoding DEFAULT_AUDIO_ENCODING = AudioEncoding.OPUS;
+
+    /**
+     * Session attributes which are common for all requests.
+     */
+    private Map<String, String> globalSessionAttributes;
+
+    /**
+     * Creates a new instance of this object, with no global attributes.
+     *
+     * @param botName Name of the bot, should match a bot in set in the service.
+     * @param botAlias Bot alias.
+     */
+    public InteractionConfig(String botName, String botAlias, String userId) {
+        this(botName, botAlias, userId, null);
+    }
+
+    /**
+     * Creates a new instance of this object, with no global attributes.
+     *
+     * @param botName Name of the bot, should match a bot in set in the service.
+     * @param botAlias Bot alias.
+     */
+    public InteractionConfig(String botName, String botAlias) {
+        this(botName, botAlias, null);
+    }
+
+    /**
+     * Creates a new instance of this object, with global attributes.
+     *
+     * @param botName Name of the bot, should match a bot in set in the service.
+     * @param botAlias Bot alias.
+     * @param globalSessionAttributes {@link Map}.
+     */
+    public InteractionConfig(String botName, String botAlias, String userId,
+                             Map<String, String> globalSessionAttributes) {
+//        this.noSpeechTimeoutInterval = DEFAULT_NO_SPEECH_TIMEOUT_INTERVAL;
+//        this.startPointingThreshold = DEFAULT_START_POINTING_THRESHOLD;
+//        this.maxSpeechTimeoutInterval = DEFAULT_MAX_SPEECH_TIMEOUT_INTERVAL;
+//        this.endPointingThreshold = DEFAULT_END_POINTING_THRESHOLD;
+//        this.lrtThreshold = DEFAULT_LRT_THRESHOLD;
+//        this.audioEncoding = DEFAULT_AUDIO_ENCODING;
+        this.botName = botName;
+        this.botAlias = botAlias;
+        this.userId = userId;
+
+        if (globalSessionAttributes == null) {
+            this.globalSessionAttributes = new HashMap<String, String>();
+        } else {
+            this.globalSessionAttributes = globalSessionAttributes;
+        }
+
+//        this.enableAudioPlayback = true;
+    }
+
+    /**
+     * Returns bot name.
+     *
+     * @return bot name as a {@link String}.
+     */
+    public String getBotName() {
+        return botName;
+    }
+
+    /**
+     * Sets bot name.
+     *
+     * @param botName Bot name as a {@link String}.
+     */
+    public void setBotName(String botName) {
+        this.botName = botName;
+    }
+
+    /**
+     * Returns bot alias.
+     *
+     * @return bot alias as a {@link String}.
+     */
+    public String getBotAlias() {
+        return botAlias;
+    }
+
+    /**
+     * Sets bot alias.
+     *
+     * @param botAlias Bots alias as a {@link String}.
+     */
+    public void setBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+    }
+
+    /**
+     * Returns current audio encoding, if no encoding is set returns default
+     * encoding.
+     *
+     * @return {@link AudioEncoding}
+     */
+//    public AudioEncoding getAudioEncoding() {
+//        return audioEncoding;
+//    }
+//
+//    /**
+//     * Set audio encoding.
+//     *
+//     * @param audioEncoding {@link AudioEncoding}, encoding used for audio
+//     *            streamed to the service.
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withAudioEncoding(AudioEncoding audioEncoding) {
+//        this.audioEncoding = audioEncoding;
+//        return this;
+//    }
+//
+//    /**
+//     * Set audio encoding.
+//     *
+//     * @param audioEncoding {@link AudioEncoding}, encoding used for audio
+//     *            streamed to the service.
+//     */
+//    public void setAudioEncoding(AudioEncoding audioEncoding) {
+//        this.audioEncoding = audioEncoding;
+//    }
+//
+//    /**
+//     * Returns current audio playback setting.
+//     *
+//     * @return true if the audio playback from the SDK has been enabled.
+//     */
+//    public boolean isEnableAudioPlayback() {
+//        return enableAudioPlayback;
+//    }
+//
+//    /**
+//     * Set this to true if the audio response from Amazon Lex service should be
+//     * played back by the SDK.
+//     *
+//     * @param enableAudioPlayback {@link boolean}
+//     */
+//    public void setEnableAudioPlayback(boolean enableAudioPlayback) {
+//        this.enableAudioPlayback = enableAudioPlayback;
+//    }
+//
+//    /**
+//     * Set this to true if the audio response from Amazon Lex service should be
+//     * played back by the SDK.
+//     *
+//     * @param enableAudioPlayback {@link boolean}
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig WithEnableAudioPlayback(boolean enableAudioPlayback) {
+//        this.enableAudioPlayback = enableAudioPlayback;
+//        return this;
+//    }
+//
+//    /**
+//     * Set no speech time out interval.
+//     *
+//     * @param noSpeechTimeoutInterval time out interval in milli-seconds.
+//     */
+//    public void setNoSpeechTimeoutInterval(int noSpeechTimeoutInterval) {
+//        this.noSpeechTimeoutInterval = noSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set no speech time out interval.
+//     *
+//     * @param noSpeechTimeoutInterval time out interval in milli-seconds.
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withNoSpeechTimeoutInterval(int noSpeechTimeoutInterval) {
+//        this.noSpeechTimeoutInterval = noSpeechTimeoutInterval;
+//        return this;
+//    }
+//
+//    /**
+//     * Returns current no speech time-out value.
+//     *
+//     * @return
+//     */
+//    public int getNoSpeechTimeoutInterval() {
+//        return noSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set maximum interval for speech.
+//     *
+//     * @param maxSpeechTimeoutInterval maximum speech time out interval in
+//     *            milli-seconds.
+//     */
+//    public void setMaxSpeechTimeoutInterval(int maxSpeechTimeoutInterval) {
+//        this.maxSpeechTimeoutInterval = maxSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set maximum interval for speech.
+//     *
+//     * @param maxSpeechTimeoutInterval maximum speech time out interval in
+//     *            milli-seconds.
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withMaxSpeechTimeoutInterval(int maxSpeechTimeoutInterval) {
+//        this.maxSpeechTimeoutInterval = maxSpeechTimeoutInterval;
+//        return this;
+//    }
+//
+//    /**
+//     * Returns maximum interval for speech.
+//     *
+//     * @return
+//     */
+//    public int getMaxSpeechTimeoutInterval() {
+//        return maxSpeechTimeoutInterval;
+//    }
+//
+//    /**
+//     * Set start point threshold.
+//     *
+//     * @param startPointingThreshold
+//     */
+//    public void setStartPointingThreshold(int startPointingThreshold) {
+//        this.startPointingThreshold = startPointingThreshold;
+//    }
+//
+//    /**
+//     * Set start point threshold.
+//     *
+//     * @param startPointingThreshold
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withStartPointingThreshold(int startPointingThreshold) {
+//        this.startPointingThreshold = startPointingThreshold;
+//        return this;
+//    }
+//
+//    /**
+//     * Get current star point threshold.
+//     *
+//     * @return
+//     */
+//    public int getStartPointingThreshold() {
+//        return startPointingThreshold;
+//    }
+//
+//    /**
+//     * Set endpoint threshold.
+//     *
+//     * @param endPointingThreshold
+//     */
+//    public void setEndPointingThreshold(int endPointingThreshold) {
+//        this.endPointingThreshold = endPointingThreshold;
+//    }
+//
+//    /**
+//     * Set endpoint threshold.
+//     *
+//     * @param endPointingThreshold
+//     * @return {@link InteractionConfig}
+//     */
+//    public InteractionConfig withEndPointingThreshold(int endPointingThreshold) {
+//        this.endPointingThreshold = endPointingThreshold;
+//        return this;
+//    }
+//
+//    /**
+//     * Get current end point threshold.
+//     *
+//     * @return the end pointing threshold.
+//     */
+//    public int getEndPointingThreshold() {
+//        return endPointingThreshold;
+//    }
+
+    /**
+     * Get the global SessionAtributes
+     *
+     * @return the global session attributes
+     */
+    public Map<String, String> getGlobalSessionAttributes() {
+        return globalSessionAttributes;
+    }
+
+    /**
+     * Set the global SessionAtributes
+     *
+     * @param globalSessionAttributes the global session attributes.
+     */
+    public void setGlobalSessionAttributes(Map<String, String> globalSessionAttributes) {
+        this.globalSessionAttributes = globalSessionAttributes;
+    }
+
+    /**
+     * Set the global SessionAtributes
+     *
+     * @param globalSessionAttributes the global session attributes.
+     * @return {@link InteractionConfig}
+     */
+    public InteractionConfig withGlobalSessionAttributes(
+            Map<String, String> globalSessionAttributes) {
+        this.globalSessionAttributes = globalSessionAttributes;
+        return this;
+    }
+
+    /**
+     * Get the user id
+     *
+     * @return the userid
+     */
+    public String getUserId() {
+        return userId;
+    }
+
+    /**
+     * Sets the user id
+     *
+     * @param userId
+     */
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    /**
+     * Sets the user id
+     *
+     * @param userId
+     * @return {@link InteractionConfig}
+     */
+    public InteractionConfig withUserId(String userId) {
+        this.userId = userId;
+        return this;
+    }
+
+//    /**
+//     * Returns the likely hood ration threshold
+//     *
+//     * @return
+//     */
+//    public float getLrtThreshold() {
+//        return lrtThreshold;
+//    }
+//
+//    /**
+//     * Sets the Likely hood ration threshold for the VAD
+//     *
+//     * @param lrtThreshold
+//     */
+//    public void setLrtThreshold(float lrtThreshold) {
+//        this.lrtThreshold = lrtThreshold;
+//    }
+//
+//    /**
+//     * Sets the Likely hood ration threshold for the VAD
+//     *
+//     * @param lrtThreshold
+//     */
+//    public InteractionConfig withLrtThreshold(float lrtThreshold) {
+//        this.lrtThreshold = lrtThreshold;
+//        return this;
+//    }
+}
