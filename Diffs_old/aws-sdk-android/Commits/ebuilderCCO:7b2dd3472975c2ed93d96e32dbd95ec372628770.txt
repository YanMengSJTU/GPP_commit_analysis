diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
index e5c1750f7a..7b64a07022 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
@@ -53,7 +53,7 @@ public void onReceive(final Context context, final Intent intent) {
         }
     }
 
-    public static final Type DEFAULT_CONNECTION_CHECK_TYPE = Type.WIFI_ONLY;
+    public static final Type DEFAULT_CONNECTION_CHECK_TYPE = Type.ANY;
 
     Type connectionCheckType = DEFAULT_CONNECTION_CHECK_TYPE;
 
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
index 3b4c3f9c8a..65a8e19be2 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
@@ -23,7 +23,12 @@
 import com.amazonaws.services.s3.model.GetObjectRequest;
 import com.amazonaws.services.s3.model.S3Object;
 
-import java.io.*;
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.util.concurrent.Callable;
 
 /**
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferConfiguration.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferConfiguration.java
new file mode 100644
index 0000000000..713ca029bb
--- /dev/null
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferConfiguration.java
@@ -0,0 +1,31 @@
+package com.amazonaws.mobileconnectors.s3.transferutility;
+
+import com.amazonaws.mobileconnectors.s3.receiver.NetworkInfoReceiver;
+
+/**
+ * Created by <a href="mailto:Dmitry.Gorohov@ebuilder.com">Dmitry Gorohov</a>
+ */
+public class TransferConfiguration {
+
+    public TransferConfiguration() {
+        connectionCheckType = NetworkInfoReceiver.Type.ANY;
+    }
+
+    /**
+     * Type of network connection validator.
+     */
+    private NetworkInfoReceiver.Type connectionCheckType;
+
+    public NetworkInfoReceiver.Type getConnectionCheckType() {
+        return connectionCheckType;
+    }
+
+    public void setConnectionCheckType(final NetworkInfoReceiver.Type connectionCheckType) {
+        this.connectionCheckType = connectionCheckType;
+    }
+
+    public TransferConfiguration withConnectionCheckType(final NetworkInfoReceiver.Type connectionCheckType) {
+        this.connectionCheckType = connectionCheckType;
+        return this;
+    }
+}
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 3a4f38067c..cdf7f6fc10 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -21,7 +21,11 @@
 import android.content.pm.ApplicationInfo;
 import android.database.Cursor;
 import android.net.ConnectivityManager;
-import android.os.*;
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.os.IBinder;
+import android.os.Looper;
+import android.os.Message;
 import android.util.Log;
 import com.amazonaws.mobileconnectors.s3.receiver.NetworkInfoReceiver;
 import com.amazonaws.services.s3.AmazonS3;
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
index 9e07e156a3..27320afac0 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferUtility.java
@@ -97,6 +97,7 @@
     private final AmazonS3 s3;
     private final Context appContext;
     private final TransferDBUtil dbUtil;
+    private final TransferConfiguration transferConfiguration;
 
     /**
      * Constructs a new TransferUtility specifying the client to use and
@@ -106,27 +107,26 @@
      * @param s3 The client to use when making requests to Amazon S3
      * @param context The current context
      */
-    public TransferUtility(AmazonS3 s3, Context context) {
-        this.s3 = s3;
-        this.appContext = context.getApplicationContext();
-        this.dbUtil = new TransferDBUtil(appContext);
+    public TransferUtility(final AmazonS3 s3, final Context context) {
+        this(s3, context, new TransferConfiguration());
     }
 
     /**
-     * Starts downloading the S3 object specified by the bucket and the key to
-     * the given file. The file must be a valid file. Directory isn't supported.
-     * Note that if the given file exists, it'll be overwritten.
+     * Constructs a new TransferUtility specifying the client to use and
+     * initializes configuration of TransferUtility and a key for S3 client weak
+     * reference.
      *
-     * @param bucket The name of the bucket containing the object to download.
-     * @param key The key under which the object to download is stored.
-     * @param file The file to download the object's data to.
-     * @return A TransferObserver used to track download progress and state
+     * @param s3 The client to use when making requests to Amazon S3
+     * @param context The current context
+     * @param transferConfiguration Transfer configuration
      */
-    public TransferObserver download(String bucket, String key, File file) {
-        return download(bucket, key, file, null);
+    public TransferUtility(final AmazonS3 s3, final Context context, final TransferConfiguration transferConfiguration) {
+        this.s3 = s3;
+        this.appContext = context.getApplicationContext();
+        this.dbUtil = new TransferDBUtil(appContext);
+        this.transferConfiguration = transferConfiguration;
     }
 
-
     /**
      * Starts downloading the S3 object specified by the bucket and the key to
      * the given file. The file must be a valid file. Directory isn't supported.
@@ -135,11 +135,9 @@ public TransferObserver download(String bucket, String key, File file) {
      * @param bucket The name of the bucket containing the object to download.
      * @param key The key under which the object to download is stored.
      * @param file The file to download the object's data to.
-     * @param connectionCheckType Type of connection check. Default is {@link NetworkInfoReceiver.Type#WIFI_ONLY}
      * @return A TransferObserver used to track download progress and state
      */
-    public TransferObserver download(String bucket, String key, File file,
-                                     NetworkInfoReceiver.Type connectionCheckType) {
+    public TransferObserver download(String bucket, String key, File file) {
         if (file == null || file.isDirectory()) {
             throw new IllegalArgumentException("Invalid file: " + file);
         }
@@ -151,27 +149,11 @@ public TransferObserver download(String bucket, String key, File file,
             file.delete();
         }
 
-        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId, connectionCheckType);
+        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId,
+                transferConfiguration.getConnectionCheckType());
         return new TransferObserver(recordId, dbUtil, bucket, key, file);
     }
 
-    /**
-     * Starts uploading the file to the given bucket, using the given key. The
-     * file must be a valid file. Directory isn't supported.
-     *
-     * @param bucket The name of the bucket to upload the new object to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param connectionCheckType Type of connection check
-     * @return A TransferObserver used to track upload progress and state
-     */
-    public TransferObserver upload(String bucket, String key, File file,
-                                   NetworkInfoReceiver.Type connectionCheckType) {
-
-        return upload(bucket, key, file, new ObjectMetadata(), connectionCheckType);
-    }
-
     /**
      * Starts uploading the file to the given bucket, using the given key. The
      * file must be a valid file. Directory isn't supported.
@@ -184,25 +166,7 @@ public TransferObserver upload(String bucket, String key, File file,
      */
     public TransferObserver upload(String bucket, String key, File file) {
 
-        return upload(bucket, key, file, new ObjectMetadata(), null);
-    }
-
-    /**
-     * Starts uploading the file to the given bucket, using the given key. The
-     * file must be a valid file. Directory isn't supported.
-     *
-     * @param bucket The name of the bucket to upload the new object to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param cannedAcl The canned ACL to associate with this object
-     * @param connectionCheckType Type of connection check
-     * @return A TransferObserver used to track upload progress and state
-     */
-    public TransferObserver upload(String bucket, String key, File file,
-                                   CannedAccessControlList cannedAcl, NetworkInfoReceiver.Type connectionCheckType) {
-
-        return upload(bucket, key, file, new ObjectMetadata(), cannedAcl, connectionCheckType);
+        return upload(bucket, key, file, new ObjectMetadata());
     }
 
     /**
@@ -219,24 +183,7 @@ public TransferObserver upload(String bucket, String key, File file,
     public TransferObserver upload(String bucket, String key, File file,
                                    CannedAccessControlList cannedAcl) {
 
-        return upload(bucket, key, file, new ObjectMetadata(), cannedAcl, null);
-    }
-
-    /**
-     * Starts uploading the file to the given bucket, using the given key. The
-     * file must be a valid file. Directory isn't supported.
-     *
-     * @param bucket The name of the bucket to upload the new object to.
-     * @param key The key in the specified bucket by which to store the new
-     *            object.
-     * @param file The file to upload.
-     * @param metadata The S3 metadata to associate with this object
-     * @param connectionCheckType Type of connection check
-     * @return A TransferObserver used to track upload progress and state
-     */
-    public TransferObserver upload(String bucket, String key, File file, ObjectMetadata metadata,
-                                   NetworkInfoReceiver.Type connectionCheckType) {
-        return upload(bucket, key, file, metadata, null, connectionCheckType);
+        return upload(bucket, key, file, new ObjectMetadata(), cannedAcl);
     }
 
     /**
@@ -251,7 +198,7 @@ public TransferObserver upload(String bucket, String key, File file, ObjectMetad
      * @return A TransferObserver used to track upload progress and state
      */
     public TransferObserver upload(String bucket, String key, File file, ObjectMetadata metadata) {
-        return upload(bucket, key, file, metadata, null, null);
+        return upload(bucket, key, file, metadata, null);
     }
 
     /**
@@ -264,11 +211,10 @@ public TransferObserver upload(String bucket, String key, File file, ObjectMetad
      * @param file The file to upload.
      * @param metadata The S3 metadata to associate with this object
      * @param cannedAcl The canned ACL to associate with this object
-     * @param connectionCheckType Type of connection check. Default is {@link NetworkInfoReceiver.Type#WIFI_ONLY}
      * @return A TransferObserver used to track upload progress and state
      */
     public TransferObserver upload(String bucket, String key, File file, ObjectMetadata metadata,
-                                   CannedAccessControlList cannedAcl, NetworkInfoReceiver.Type connectionCheckType) {
+                                   CannedAccessControlList cannedAcl) {
         if (file == null || file.isDirectory()) {
             throw new IllegalArgumentException("Invalid file: " + file);
         }
@@ -282,7 +228,7 @@ public TransferObserver upload(String bucket, String key, File file, ObjectMetad
             recordId = Integer.parseInt(uri.getLastPathSegment());
         }
 
-        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId, connectionCheckType);
+        sendIntent(TransferService.INTENT_ACTION_TRANSFER_ADD, recordId, transferConfiguration.getConnectionCheckType());
         return new TransferObserver(recordId, dbUtil, bucket, key, file);
     }
 
