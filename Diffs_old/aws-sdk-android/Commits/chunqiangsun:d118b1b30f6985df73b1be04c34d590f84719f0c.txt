diff --git a/CircleciScripts/functions.py b/CircleciScripts/functions.py
index 2d399eca00..f89cbafcc0 100644
--- a/CircleciScripts/functions.py
+++ b/CircleciScripts/functions.py
@@ -46,7 +46,7 @@ def runcommand(command, timeout=0,pipein=None, pipeout =  None):
 def runtest(module, testtype, results):
 
     
-    testcommand = "bash gradlew {0}:{1} --no-daemon --max-workers 2".format(module, testtype.testAction)
+    testcommand = "bash gradlew {0}:{1} --stacktrace --debug".format(module, testtype.testAction)
     print("Running {0} for {1} .......".format(testtype.displayString, module))   
     exit_code = runcommand(testcommand)   
     if exit_code != 0 :
diff --git a/aws-android-sdk-kinesis/src/test/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/FileRecordStoreTest.java b/aws-android-sdk-kinesis/src/test/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/FileRecordStoreTest.java
index 1de6e85373..3f6ba1648f 100644
--- a/aws-android-sdk-kinesis/src/test/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/FileRecordStoreTest.java
+++ b/aws-android-sdk-kinesis/src/test/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/FileRecordStoreTest.java
@@ -154,125 +154,125 @@ public void testFileRecordStore_putIterateAndRemove() throws IOException {
 
     }
 
-    // @Test
-    // public void
-    //         testWhenRecordssFileIsMissingAndRecordssDirectoryIsReadOnly_error() throws IOException {
-    //     File kinesisDirectory = null;
-    //     try {
-    //         File eventDirectory = null;
-
-    //         FileManager fileManager = new FileManager(TEST_DIRECTORY);
-    //         FileRecordStore recordStore = new FileRecordStore(TEST_DIRECTORY,
-    //                 RECORDER_FILE_NAME, MAX_STORAGE_SIZE);
+    @Test
+    public void
+            testWhenRecordssFileIsMissingAndRecordssDirectoryIsReadOnly_error() throws IOException {
+        File kinesisDirectory = null;
+        try {
+            File eventDirectory = null;
 
-    //         kinesisDirectory =
-    //                 fileManager.createDirectory(Constants.RECORDS_DIRECTORY);
-    //         File recordsFile = new File(eventDirectory, Constants.RECORDS_FILE_NAME);
+            FileManager fileManager = new FileManager(TEST_DIRECTORY);
+            FileRecordStore recordStore = new FileRecordStore(TEST_DIRECTORY,
+                    RECORDER_FILE_NAME, MAX_STORAGE_SIZE);
 
-    //         fileManager.deleteFile(recordsFile);
-    //         kinesisDirectory.setReadOnly();
-    //         recordStore.put("2");
-    //     } finally {
-    //         if (kinesisDirectory != null && kinesisDirectory.exists()) {
+            kinesisDirectory =
+                    fileManager.createDirectory(Constants.RECORDS_DIRECTORY);
+            File recordsFile = new File(eventDirectory, Constants.RECORDS_FILE_NAME);
 
-    //             kinesisDirectory.setWritable(true);
-    //             kinesisDirectory.delete();
-    //         }
-    //     }
+            fileManager.deleteFile(recordsFile);
+            kinesisDirectory.setReadOnly();
+            recordStore.put("2");
+        } finally {
+            if (kinesisDirectory != null && kinesisDirectory.exists()) {
 
-    // }
+                kinesisDirectory.setWritable(true);
+                kinesisDirectory.delete();
+            }
+        }
 
-    // @Test
-    // public void testWhenWritingExceedsMaxStorageSize_noMoreRecordsWritten() throws IOException {
-    //     File recordsDirectory = null;
-    //     File recordsFile = null;
+    }
 
-    //     FileManager fileManager = new FileManager(TEST_DIRECTORY);
-    //     FileRecordStore recordStore = new FileRecordStore(TEST_DIRECTORY,
-    //             RECORDER_FILE_NAME, 100L);
+    @Test
+    public void testWhenWritingExceedsMaxStorageSize_noMoreRecordsWritten() throws IOException {
+        File recordsDirectory = null;
+        File recordsFile = null;
 
-    //     recordsDirectory = fileManager.getDirectory(Constants.RECORDS_DIRECTORY);
-    //     recordsFile = new File(recordsDirectory, Constants.RECORDS_FILE_NAME);
+        FileManager fileManager = new FileManager(TEST_DIRECTORY);
+        FileRecordStore recordStore = new FileRecordStore(TEST_DIRECTORY,
+                RECORDER_FILE_NAME, 100L);
 
-    //     for (int i = 0; i < 10; i++) {
-    //         recordStore.put("ten bytes");
-    //     }
-    //     assertSame(recordsFile.length(), 100L);
+        recordsDirectory = fileManager.getDirectory(Constants.RECORDS_DIRECTORY);
+        recordsFile = new File(recordsDirectory, Constants.RECORDS_FILE_NAME);
 
-    //     recordStore.put("0123456789");
-    //     assertSame(recordsFile.length(), 100L);
+        for (int i = 0; i < 10; i++) {
+            recordStore.put("ten bytes");
+        }
+        assertSame(recordsFile.length(), 100L);
 
-    // }
+        recordStore.put("0123456789");
+        assertSame(recordsFile.length(), 100L);
 
-    // @Test
-    // public void testWhenWritingTooManyConcurrentRecords() throws
-    //         InterruptedException, IOException {
-    //     File recordsDirectory = null;
-    //     File recordsFile = null;
-    //     FileManager fileManager = new FileManager(TEST_DIRECTORY);
-    //     final FileRecordStore recordStore = new FileRecordStore(TEST_DIRECTORY,
-    //             RECORDER_FILE_NAME, MAX_STORAGE_SIZE);
+    }
 
-    //     recordsDirectory = fileManager.getDirectory(Constants.RECORDS_DIRECTORY);
-    //     recordsFile = new File(recordsDirectory, Constants.RECORDS_FILE_NAME);
+    @Test
+    public void testWhenWritingTooManyConcurrentRecords() throws
+            InterruptedException, IOException {
+        File recordsDirectory = null;
+        File recordsFile = null;
+        FileManager fileManager = new FileManager(TEST_DIRECTORY);
+        final FileRecordStore recordStore = new FileRecordStore(TEST_DIRECTORY,
+                RECORDER_FILE_NAME, MAX_STORAGE_SIZE);
 
-    //     SecureRandom random = new SecureRandom();
+        recordsDirectory = fileManager.getDirectory(Constants.RECORDS_DIRECTORY);
+        recordsFile = new File(recordsDirectory, Constants.RECORDS_FILE_NAME);
 
-    //     // first fill the disk
-    //     String tempRecordStr = "";
-    //     for (int i = 0; i < 10000; i++) {
-    //         tempRecordStr = tempRecordStr + new BigInteger(130, random).toString(32);
-    //     }
+        SecureRandom random = new SecureRandom();
 
-    //     final String recordStr = tempRecordStr;
+        // first fill the disk
+        String tempRecordStr = "";
+        for (int i = 0; i < 10000; i++) {
+            tempRecordStr = tempRecordStr + new BigInteger(130, random).toString(32);
+        }
 
-    //     for (int i = 0; i < 30; i++) {
-    //         recordStore.put(recordStr);
-    //     }
+        final String recordStr = tempRecordStr;
 
-    //     long initialSize = recordsFile.length();
-    //     assertTrue(recordsFile.length() <= MAX_STORAGE_SIZE);
-
-    //     final CountDownLatch latch = new CountDownLatch(1);
-    //     ExecutorService threadPool = Executors.newFixedThreadPool(1);
-    //     threadPool.execute(new Runnable() {
-    //         @Override
-    //         public void run() {
-    //             try {
-    //                 for (int i = 0; i < 100; i++) {
-    //                     RecordIterator itr = recordStore.iterator();
-    //                     if (itr.hasNext()) {
-    //                         String next = itr.next();
-    //                         assertEquals(next.length(), recordStr.length());
-    //                         itr.removeReadRecords();
-    //                     }
-    //                     Thread.sleep(1);
-    //                 }
-    //             } catch (InterruptedException e) {
-    //                 e.printStackTrace();
-    //             } catch (IOException e) {
-    //                 throw new RuntimeException(e);
-    //             } finally {
-    //                 latch.countDown();
-    //             }
-    //         }
-    //     });
+        for (int i = 0; i < 30; i++) {
+            recordStore.put(recordStr);
+        }
 
-    //     for (int i = 0; i < 10000; i++) {
-    //         recordStore.put(recordStr);
-    //         assertTrue(recordsFile.length() <= initialSize);
-    //         recordStore.put(recordStr);
-    //         assertTrue(recordsFile.length() <= initialSize);
-    //         recordStore.put(recordStr);
-    //         assertTrue(recordsFile.length() <= initialSize);
-    //         Thread.sleep(1);
-    //     }
+        long initialSize = recordsFile.length();
+        assertTrue(recordsFile.length() <= MAX_STORAGE_SIZE);
+
+        final CountDownLatch latch = new CountDownLatch(1);
+        ExecutorService threadPool = Executors.newFixedThreadPool(1);
+        threadPool.execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    for (int i = 0; i < 100; i++) {
+                        RecordIterator itr = recordStore.iterator();
+                        if (itr.hasNext()) {
+                            String next = itr.next();
+                            assertEquals(next.length(), recordStr.length());
+                            itr.removeReadRecords();
+                        }
+                        Thread.sleep(1);
+                    }
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                } catch (IOException e) {
+                    throw new RuntimeException(e);
+                } finally {
+                    latch.countDown();
+                }
+            }
+        });
+
+        for (int i = 0; i < 10000; i++) {
+            recordStore.put(recordStr);
+            assertTrue(recordsFile.length() <= initialSize);
+            recordStore.put(recordStr);
+            assertTrue(recordsFile.length() <= initialSize);
+            recordStore.put(recordStr);
+            assertTrue(recordsFile.length() <= initialSize);
+            Thread.sleep(1);
+        }
 
-    //     latch.await();
-    //     assertEquals(recordsFile.length(), initialSize);
-    //     assertTrue(recordsFile.length() < MAX_STORAGE_SIZE);
+        latch.await();
+        assertEquals(recordsFile.length(), initialSize);
+        assertTrue(recordsFile.length() < MAX_STORAGE_SIZE);
 
-    // }
+    }
 
     // @Test
     // public void
