diff --git a/.idea/modules.xml b/.idea/modules.xml
index f6762ff36d..79270e1732 100644
--- a/.idea/modules.xml
+++ b/.idea/modules.xml
@@ -17,7 +17,9 @@
       <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-cognito/aws-android-sdk-cognito.iml" filepath="$PROJECT_DIR$/aws-android-sdk-cognito/aws-android-sdk-cognito.iml" />
       <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-cognitoauth/aws-android-sdk-cognitoauth.iml" filepath="$PROJECT_DIR$/aws-android-sdk-cognitoauth/aws-android-sdk-cognitoauth.iml" />
       <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-cognitoidentityprovider/aws-android-sdk-cognitoidentityprovider.iml" filepath="$PROJECT_DIR$/aws-android-sdk-cognitoidentityprovider/aws-android-sdk-cognitoidentityprovider.iml" />
+      <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-cognitoidentityprovider-test/aws-android-sdk-cognitoidentityprovider-test.iml" filepath="$PROJECT_DIR$/aws-android-sdk-cognitoidentityprovider-test/aws-android-sdk-cognitoidentityprovider-test.iml" />
       <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-comprehend/aws-android-sdk-comprehend.iml" filepath="$PROJECT_DIR$/aws-android-sdk-comprehend/aws-android-sdk-comprehend.iml" />
+      <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-comprehend-test/aws-android-sdk-comprehend-test.iml" filepath="$PROJECT_DIR$/aws-android-sdk-comprehend-test/aws-android-sdk-comprehend-test.iml" />
       <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-connect/aws-android-sdk-connect.iml" filepath="$PROJECT_DIR$/aws-android-sdk-connect/aws-android-sdk-connect.iml" />
       <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-connect-test/aws-android-sdk-connect-test.iml" filepath="$PROJECT_DIR$/aws-android-sdk-connect-test/aws-android-sdk-connect-test.iml" />
       <module fileurl="file://$PROJECT_DIR$/aws-android-sdk-core/aws-android-sdk-core.iml" filepath="$PROJECT_DIR$/aws-android-sdk-core/aws-android-sdk-core.iml" />
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 864802d3d5..8903064da3 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,15 +1,19 @@
 # Change Log - AWS SDK for Android
 
-### Bug Fixes
-* **Amazon Kinesis Video**
-  * Fixed a bug when CreateStreamRequest is initialized without setting Tags, auto-generated empty HashMap of Tags would cause ValidationException from Kinesis Video.
-  * Fixed incorrect timestamp unit for encoder input caused high bitrate issue for the stream.
 ## [Release 2.14.1](https://github.com/aws/aws-sdk-android/releases/tag/release_v2.14.1)
 
+### Bug Fixes
+- **AWS Core Runtime**
+  - Fixed response unmarshalling when response is gzip encoded without a CRC32 checksum. Also fixes bug decoding Kinesis responses with GZIP encoding.
+- **Amazon Kinesis Video**
+  - Fixed a bug when CreateStreamRequest is initialized without setting Tags, auto-generated empty HashMap of Tags would cause ValidationException from Kinesis Video.
+  - Fixed incorrect timestamp unit for encoder input caused high bitrate issue for the stream.
+
 ### Misc. Updates
 
 - Model updates for the following services
   - Amazon Comprehend
+  - Amazon Security Token Service (STS)
 
 ## [Release 2.14.0](https://github.com/aws/aws-sdk-android/releases/tag/release_v2.14.0)
 
@@ -1671,4 +1675,3 @@ All documentation is now centralized at https://aws-amplify.github.io/
 ### Bug Fixes
 - **Amazon S3**: Fixed an issue that occurs when required headers are not properly signed. This issue affects S3 in two regions: Frankfurt (eu-central-1) and China (cn-north-1). [#42](https://github.com/aws/aws-sdk-android/issues/42)
 - **AWS Core Runtime Library**: Fixed an issue in Maven distribution where an incorrect version string is set in "User-Agent".
-1
diff --git a/README.md b/README.md
index c6d19c938b..7d5a9990b1 100644
--- a/README.md
+++ b/README.md
@@ -172,7 +172,7 @@ This section describes how you can compile the SDK source code on your own.
 
 2. When building the [Core module](https://github.com/aws-amplify/aws-sdk-android/blob/master/aws-android-sdk-core/build.gradle#L32), it requires the following:
    2.1 Environment variable `ANDROID_HOME` to be set in order to find the `android-23.jar`.
-   2.2 Environemnt variable `ANDROID_PLATFORM` to be set to the platform number (`10` through `28` and above)
+   2.2 Environment variable `ANDROID_PLATFORM` to be set to the platform number (`10` through `28` and above)
 
 For command line approach, you can build the source via Gradle, which can be downloaded and installed from [here](https://gradle.org/install/).
 After installing Gradle, clone this repository and run
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java
index d63d348bcb..780078b82d 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java
@@ -31,6 +31,9 @@
     /** Action for the AssumeRoleWithWebIdentity operation. */
     AssumeRoleWithWebIdentity("sts:AssumeRoleWithWebIdentity"),
 
+    /** Action for the GetAccessKeyInfo operation. */
+    GetAccessKeyInfo("sts:GetAccessKeyInfo"),
+
     /** Action for the GetCallerIdentity operation. */
     GetCallerIdentity("sts:GetCallerIdentity"),
 
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/http/JsonResponseHandler.java b/aws-android-sdk-core/src/main/java/com/amazonaws/http/JsonResponseHandler.java
index a9d29b095b..4f8d2522c1 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/http/JsonResponseHandler.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/http/JsonResponseHandler.java
@@ -86,7 +86,6 @@ public JsonResponseHandler(Unmarshaller<T, JsonUnmarshallerContext> responseUnma
         log.trace("Parsing service response JSON");
 
         final String crc32Checksum = response.getHeaders().get("x-amz-crc32");
-        CRC32ChecksumCalculatingInputStream crc32ChecksumInputStream = null;
 
         // Get the raw content input stream to calculate the crc32 checksum on
         // gzipped data.
@@ -99,13 +98,21 @@ public JsonResponseHandler(Unmarshaller<T, JsonUnmarshallerContext> responseUnma
         log.debug("CRC32Checksum = " + crc32Checksum);
         log.debug("content encoding = " + response.getHeaders().get("Content-Encoding"));
 
+        boolean isGzipEncoded = "gzip".equals(response.getHeaders().get("Content-Encoding"));
+
+        CRC32ChecksumCalculatingInputStream checksumCalculatingInputStream = null;
+
+        // Handle various combinations of GZIP encoding and CRC checksums. Some services (e.g.,
+        // DynamoDB) return a checksum with gzip encoding, some do not. We'll also cover the case
+        // where a service returns a checksum for non-gzip encoding. The default case (not gzip
+        // encoded, no checksum) is already handled: we'll just operate on the raw content stream.
         if (crc32Checksum != null) {
-            crc32ChecksumInputStream = new CRC32ChecksumCalculatingInputStream(content);
-            if ("gzip".equals(response.getHeaders().get("Content-Encoding"))) {
-                content = new GZIPInputStream(crc32ChecksumInputStream);
-            } else {
-                content = crc32ChecksumInputStream;
-            }
+            checksumCalculatingInputStream = new CRC32ChecksumCalculatingInputStream(content);
+            content = checksumCalculatingInputStream;
+        }
+
+        if (isGzipEncoded) {
+            content = new GZIPInputStream(content);
         }
 
         final AwsJsonReader jsonReader = JsonUtils.getJsonReader(new InputStreamReader(content,
@@ -118,9 +125,9 @@ public JsonResponseHandler(Unmarshaller<T, JsonUnmarshallerContext> responseUnma
 
             final T result = responseUnmarshaller.unmarshall(unmarshallerContext);
 
-            if (crc32Checksum != null) {
+            if (checksumCalculatingInputStream != null) {
                 final long serverSideCRC = Long.parseLong(crc32Checksum);
-                final long clientSideCRC = crc32ChecksumInputStream.getCRC32Checksum();
+                final long clientSideCRC = checksumCalculatingInputStream.getCRC32Checksum();
                 if (clientSideCRC != serverSideCRC) {
                     throw new CRC32MismatchException(
                             "Client calculated crc32 checksum didn't match that calculated by server side");
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java
index 7a12682dcb..3f2c59dc4e 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java
@@ -526,6 +526,54 @@ AssumeRoleWithWebIdentityResult assumeRoleWithWebIdentity(
             AssumeRoleWithWebIdentityRequest assumeRoleWithWebIdentityRequest)
             throws AmazonClientException, AmazonServiceException;
 
+    /**
+     * <p>
+     * Returns the account identifier for the specified access key ID.
+     * </p>
+     * <p>
+     * Access keys consist of two parts: an access key ID (for example,
+     * <code>AKIAIOSFODNN7EXAMPLE</code>) and a secret access key (for example,
+     * <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code>). For more
+     * information about access keys, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html"
+     * >Managing Access Keys for IAM Users</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * When you pass an access key ID to this operation, it returns the ID of
+     * the AWS account to which the keys belong. Access key IDs beginning with
+     * <code>AKIA</code> are long-term credentials for an IAM user or the AWS
+     * account root user. Access key IDs beginning with <code>ASIA</code> are
+     * temporary credentials that are created using STS operations. If the
+     * account in the response belongs to you, you can sign in as the root user
+     * and review your root user access keys. Then, you can pull a <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report"
+     * >credentials report</a> to learn which IAM user owns the keys. To learn
+     * who requested the temporary credentials for an <code>ASIA</code> access
+     * key, view the STS events in your <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration"
+     * >CloudTrail logs</a>.
+     * </p>
+     * <p>
+     * This operation does not indicate the state of the access key. The key
+     * might be active, inactive, or deleted. Active keys might not have
+     * permissions to perform an operation. Providing a deleted keys might
+     * return an error that the key doesn't exist.
+     * </p>
+     * 
+     * @param getAccessKeyInfoRequest
+     * @return getAccessKeyInfoResult The response from the GetAccessKeyInfo
+     *         service method, as returned by AWS Security Token Service.
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by AWS
+     *             Security Token Service indicating either a problem with the
+     *             data in the request, or a server side issue.
+     */
+    GetAccessKeyInfoResult getAccessKeyInfo(GetAccessKeyInfoRequest getAccessKeyInfoRequest)
+            throws AmazonClientException, AmazonServiceException;
+
     /**
      * <p>
      * Returns details about the IAM identity whose credentials are used to call
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java
index 90ce7aa360..706c680d79 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java
@@ -836,6 +836,71 @@ public AssumeRoleWithWebIdentityResult assumeRoleWithWebIdentity(
         }
     }
 
+    /**
+     * <p>
+     * Returns the account identifier for the specified access key ID.
+     * </p>
+     * <p>
+     * Access keys consist of two parts: an access key ID (for example,
+     * <code>AKIAIOSFODNN7EXAMPLE</code>) and a secret access key (for example,
+     * <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code>). For more
+     * information about access keys, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html"
+     * >Managing Access Keys for IAM Users</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * When you pass an access key ID to this operation, it returns the ID of
+     * the AWS account to which the keys belong. Access key IDs beginning with
+     * <code>AKIA</code> are long-term credentials for an IAM user or the AWS
+     * account root user. Access key IDs beginning with <code>ASIA</code> are
+     * temporary credentials that are created using STS operations. If the
+     * account in the response belongs to you, you can sign in as the root user
+     * and review your root user access keys. Then, you can pull a <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report"
+     * >credentials report</a> to learn which IAM user owns the keys. To learn
+     * who requested the temporary credentials for an <code>ASIA</code> access
+     * key, view the STS events in your <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration"
+     * >CloudTrail logs</a>.
+     * </p>
+     * <p>
+     * This operation does not indicate the state of the access key. The key
+     * might be active, inactive, or deleted. Active keys might not have
+     * permissions to perform an operation. Providing a deleted keys might
+     * return an error that the key doesn't exist.
+     * </p>
+     * 
+     * @param getAccessKeyInfoRequest
+     * @return getAccessKeyInfoResult The response from the GetAccessKeyInfo
+     *         service method, as returned by AWS Security Token Service.
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by AWS
+     *             Security Token Service indicating either a problem with the
+     *             data in the request, or a server side issue.
+     */
+    public GetAccessKeyInfoResult getAccessKeyInfo(GetAccessKeyInfoRequest getAccessKeyInfoRequest)
+            throws AmazonServiceException, AmazonClientException {
+        ExecutionContext executionContext = createExecutionContext(getAccessKeyInfoRequest);
+        AWSRequestMetrics awsRequestMetrics = executionContext.getAwsRequestMetrics();
+        awsRequestMetrics.startEvent(Field.ClientExecuteTime);
+        Request<GetAccessKeyInfoRequest> request = null;
+        Response<GetAccessKeyInfoResult> response = null;
+        try {
+            request = new GetAccessKeyInfoRequestMarshaller().marshall(getAccessKeyInfoRequest);
+            // Binds the request metrics to the current request.
+            request.setAWSRequestMetrics(awsRequestMetrics);
+            response = invoke(request, new GetAccessKeyInfoResultStaxUnmarshaller(),
+                    executionContext);
+            return response.getAwsResponse();
+        } finally {
+            awsRequestMetrics.endEvent(Field.ClientExecuteTime);
+            endClientExecution(awsRequestMetrics, request, response);
+        }
+    }
+
     /**
      * <p>
      * Returns details about the IAM identity whose credentials are used to call
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleRequest.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleRequest.java
index c38d3cbab8..c9bf3a6049 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleRequest.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleRequest.java
@@ -205,9 +205,10 @@
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -603,9 +604,10 @@ public AssumeRoleRequest withRoleSessionName(String roleSessionName) {
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -637,10 +639,10 @@ public AssumeRoleRequest withRoleSessionName(String roleSessionName) {
      *         This parameter is optional. You can provide up to 10 managed
      *         policy ARNs. However, the plain text that you use for both inline
      *         and managed session policies shouldn't exceed 2048 characters.
-     *         For more information about ARNs, see <a
-     *         href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *         Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
-     *         General Reference.
+     *         For more information about ARNs, see <a href=
+     *         "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *         >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in
+     *         the AWS General Reference.
      *         </p>
      *         <note>
      *         <p>
@@ -680,9 +682,10 @@ public AssumeRoleRequest withRoleSessionName(String roleSessionName) {
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -714,10 +717,10 @@ public AssumeRoleRequest withRoleSessionName(String roleSessionName) {
      *            This parameter is optional. You can provide up to 10 managed
      *            policy ARNs. However, the plain text that you use for both
      *            inline and managed session policies shouldn't exceed 2048
-     *            characters. For more information about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            AWS General Reference.
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
      *            </p>
      *            <note>
      *            <p>
@@ -762,9 +765,10 @@ public void setPolicyArns(java.util.Collection<PolicyDescriptorType> policyArns)
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -799,10 +803,10 @@ public void setPolicyArns(java.util.Collection<PolicyDescriptorType> policyArns)
      *            This parameter is optional. You can provide up to 10 managed
      *            policy ARNs. However, the plain text that you use for both
      *            inline and managed session policies shouldn't exceed 2048
-     *            characters. For more information about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            AWS General Reference.
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
      *            </p>
      *            <note>
      *            <p>
@@ -850,9 +854,10 @@ public AssumeRoleRequest withPolicyArns(PolicyDescriptorType... policyArns) {
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -887,10 +892,10 @@ public AssumeRoleRequest withPolicyArns(PolicyDescriptorType... policyArns) {
      *            This parameter is optional. You can provide up to 10 managed
      *            policy ARNs. However, the plain text that you use for both
      *            inline and managed session policies shouldn't exceed 2048
-     *            characters. For more information about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            AWS General Reference.
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
      *            </p>
      *            <note>
      *            <p>
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithWebIdentityRequest.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithWebIdentityRequest.java
index b28bd51438..581acc418c 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithWebIdentityRequest.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithWebIdentityRequest.java
@@ -250,9 +250,10 @@
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -746,9 +747,10 @@ public AssumeRoleWithWebIdentityRequest withProviderId(String providerId) {
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -780,10 +782,10 @@ public AssumeRoleWithWebIdentityRequest withProviderId(String providerId) {
      *         This parameter is optional. You can provide up to 10 managed
      *         policy ARNs. However, the plain text that you use for both inline
      *         and managed session policies shouldn't exceed 2048 characters.
-     *         For more information about ARNs, see <a
-     *         href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *         Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
-     *         General Reference.
+     *         For more information about ARNs, see <a href=
+     *         "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *         >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in
+     *         the AWS General Reference.
      *         </p>
      *         <note>
      *         <p>
@@ -823,9 +825,10 @@ public AssumeRoleWithWebIdentityRequest withProviderId(String providerId) {
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -857,10 +860,10 @@ public AssumeRoleWithWebIdentityRequest withProviderId(String providerId) {
      *            This parameter is optional. You can provide up to 10 managed
      *            policy ARNs. However, the plain text that you use for both
      *            inline and managed session policies shouldn't exceed 2048
-     *            characters. For more information about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            AWS General Reference.
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
      *            </p>
      *            <note>
      *            <p>
@@ -905,9 +908,10 @@ public void setPolicyArns(java.util.Collection<PolicyDescriptorType> policyArns)
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -942,10 +946,10 @@ public void setPolicyArns(java.util.Collection<PolicyDescriptorType> policyArns)
      *            This parameter is optional. You can provide up to 10 managed
      *            policy ARNs. However, the plain text that you use for both
      *            inline and managed session policies shouldn't exceed 2048
-     *            characters. For more information about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            AWS General Reference.
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
      *            </p>
      *            <note>
      *            <p>
@@ -993,9 +997,10 @@ public AssumeRoleWithWebIdentityRequest withPolicyArns(PolicyDescriptorType... p
      * This parameter is optional. You can provide up to 10 managed policy ARNs.
      * However, the plain text that you use for both inline and managed session
      * policies shouldn't exceed 2048 characters. For more information about
-     * ARNs, see <a href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     * Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS General
-     * Reference.
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
      * </p>
      * <note>
      * <p>
@@ -1030,10 +1035,10 @@ public AssumeRoleWithWebIdentityRequest withPolicyArns(PolicyDescriptorType... p
      *            This parameter is optional. You can provide up to 10 managed
      *            policy ARNs. However, the plain text that you use for both
      *            inline and managed session policies shouldn't exceed 2048
-     *            characters. For more information about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            AWS General Reference.
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
      *            </p>
      *            <note>
      *            <p>
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/GetAccessKeyInfoRequest.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/GetAccessKeyInfoRequest.java
new file mode 100644
index 0000000000..50cb09b876
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/GetAccessKeyInfoRequest.java
@@ -0,0 +1,201 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model;
+
+import java.io.Serializable;
+
+import com.amazonaws.AmazonWebServiceRequest;
+
+/**
+ * <p>
+ * Returns the account identifier for the specified access key ID.
+ * </p>
+ * <p>
+ * Access keys consist of two parts: an access key ID (for example,
+ * <code>AKIAIOSFODNN7EXAMPLE</code>) and a secret access key (for example,
+ * <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code>). For more information
+ * about access keys, see <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html"
+ * >Managing Access Keys for IAM Users</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * <p>
+ * When you pass an access key ID to this operation, it returns the ID of the
+ * AWS account to which the keys belong. Access key IDs beginning with
+ * <code>AKIA</code> are long-term credentials for an IAM user or the AWS
+ * account root user. Access key IDs beginning with <code>ASIA</code> are
+ * temporary credentials that are created using STS operations. If the account
+ * in the response belongs to you, you can sign in as the root user and review
+ * your root user access keys. Then, you can pull a <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report"
+ * >credentials report</a> to learn which IAM user owns the keys. To learn who
+ * requested the temporary credentials for an <code>ASIA</code> access key, view
+ * the STS events in your <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration"
+ * >CloudTrail logs</a>.
+ * </p>
+ * <p>
+ * This operation does not indicate the state of the access key. The key might
+ * be active, inactive, or deleted. Active keys might not have permissions to
+ * perform an operation. Providing a deleted keys might return an error that the
+ * key doesn't exist.
+ * </p>
+ */
+public class GetAccessKeyInfoRequest extends AmazonWebServiceRequest implements Serializable {
+    /**
+     * <p>
+     * The identifier of an access key.
+     * </p>
+     * <p>
+     * This parameter allows (through its regex pattern) a string of characters
+     * that can consist of any upper- or lowercased letter or digit.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>16 - 128<br/>
+     * <b>Pattern: </b>[\w]*<br/>
+     */
+    private String accessKeyId;
+
+    /**
+     * <p>
+     * The identifier of an access key.
+     * </p>
+     * <p>
+     * This parameter allows (through its regex pattern) a string of characters
+     * that can consist of any upper- or lowercased letter or digit.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>16 - 128<br/>
+     * <b>Pattern: </b>[\w]*<br/>
+     *
+     * @return <p>
+     *         The identifier of an access key.
+     *         </p>
+     *         <p>
+     *         This parameter allows (through its regex pattern) a string of
+     *         characters that can consist of any upper- or lowercased letter or
+     *         digit.
+     *         </p>
+     */
+    public String getAccessKeyId() {
+        return accessKeyId;
+    }
+
+    /**
+     * <p>
+     * The identifier of an access key.
+     * </p>
+     * <p>
+     * This parameter allows (through its regex pattern) a string of characters
+     * that can consist of any upper- or lowercased letter or digit.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>16 - 128<br/>
+     * <b>Pattern: </b>[\w]*<br/>
+     *
+     * @param accessKeyId <p>
+     *            The identifier of an access key.
+     *            </p>
+     *            <p>
+     *            This parameter allows (through its regex pattern) a string of
+     *            characters that can consist of any upper- or lowercased letter
+     *            or digit.
+     *            </p>
+     */
+    public void setAccessKeyId(String accessKeyId) {
+        this.accessKeyId = accessKeyId;
+    }
+
+    /**
+     * <p>
+     * The identifier of an access key.
+     * </p>
+     * <p>
+     * This parameter allows (through its regex pattern) a string of characters
+     * that can consist of any upper- or lowercased letter or digit.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>16 - 128<br/>
+     * <b>Pattern: </b>[\w]*<br/>
+     *
+     * @param accessKeyId <p>
+     *            The identifier of an access key.
+     *            </p>
+     *            <p>
+     *            This parameter allows (through its regex pattern) a string of
+     *            characters that can consist of any upper- or lowercased letter
+     *            or digit.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetAccessKeyInfoRequest withAccessKeyId(String accessKeyId) {
+        this.accessKeyId = accessKeyId;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getAccessKeyId() != null)
+            sb.append("AccessKeyId: " + getAccessKeyId());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode
+                + ((getAccessKeyId() == null) ? 0 : getAccessKeyId().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof GetAccessKeyInfoRequest == false)
+            return false;
+        GetAccessKeyInfoRequest other = (GetAccessKeyInfoRequest) obj;
+
+        if (other.getAccessKeyId() == null ^ this.getAccessKeyId() == null)
+            return false;
+        if (other.getAccessKeyId() != null
+                && other.getAccessKeyId().equals(this.getAccessKeyId()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/GetAccessKeyInfoResult.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/GetAccessKeyInfoResult.java
new file mode 100644
index 0000000000..3eace88ad3
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/GetAccessKeyInfoResult.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model;
+
+import java.io.Serializable;
+
+public class GetAccessKeyInfoResult implements Serializable {
+    /**
+     * <p>
+     * The number used to identify the AWS account.
+     * </p>
+     */
+    private String account;
+
+    /**
+     * <p>
+     * The number used to identify the AWS account.
+     * </p>
+     *
+     * @return <p>
+     *         The number used to identify the AWS account.
+     *         </p>
+     */
+    public String getAccount() {
+        return account;
+    }
+
+    /**
+     * <p>
+     * The number used to identify the AWS account.
+     * </p>
+     *
+     * @param account <p>
+     *            The number used to identify the AWS account.
+     *            </p>
+     */
+    public void setAccount(String account) {
+        this.account = account;
+    }
+
+    /**
+     * <p>
+     * The number used to identify the AWS account.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param account <p>
+     *            The number used to identify the AWS account.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetAccessKeyInfoResult withAccount(String account) {
+        this.account = account;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getAccount() != null)
+            sb.append("Account: " + getAccount());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getAccount() == null) ? 0 : getAccount().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof GetAccessKeyInfoResult == false)
+            return false;
+        GetAccessKeyInfoResult other = (GetAccessKeyInfoResult) obj;
+
+        if (other.getAccount() == null ^ this.getAccount() == null)
+            return false;
+        if (other.getAccount() != null && other.getAccount().equals(this.getAccount()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/PolicyDescriptorType.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/PolicyDescriptorType.java
index f2c4cf6f13..2d3a00115c 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/PolicyDescriptorType.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/PolicyDescriptorType.java
@@ -28,9 +28,10 @@
      * <p>
      * The Amazon Resource Name (ARN) of the IAM managed policy to use as a
      * session policy for the role. For more information about ARNs, see <a
-     * href="general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource
-     * Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General
-     * Reference</i>.
+     * href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the
+     * <i>AWS General Reference</i>.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -44,9 +45,10 @@
      * <p>
      * The Amazon Resource Name (ARN) of the IAM managed policy to use as a
      * session policy for the role. For more information about ARNs, see <a
-     * href="general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource
-     * Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General
-     * Reference</i>.
+     * href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the
+     * <i>AWS General Reference</i>.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -57,10 +59,10 @@
      * @return <p>
      *         The Amazon Resource Name (ARN) of the IAM managed policy to use
      *         as a session policy for the role. For more information about
-     *         ARNs, see <a
-     *         href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *         Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *         <i>AWS General Reference</i>.
+     *         ARNs, see <a href=
+     *         "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *         >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in
+     *         the <i>AWS General Reference</i>.
      *         </p>
      */
     public String getArn() {
@@ -71,9 +73,10 @@ public String getArn() {
      * <p>
      * The Amazon Resource Name (ARN) of the IAM managed policy to use as a
      * session policy for the role. For more information about ARNs, see <a
-     * href="general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource
-     * Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General
-     * Reference</i>.
+     * href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the
+     * <i>AWS General Reference</i>.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -84,10 +87,10 @@ public String getArn() {
      * @param arn <p>
      *            The Amazon Resource Name (ARN) of the IAM managed policy to
      *            use as a session policy for the role. For more information
-     *            about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            <i>AWS General Reference</i>.
+     *            about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the <i>AWS General Reference</i>.
      *            </p>
      */
     public void setArn(String arn) {
@@ -98,9 +101,10 @@ public void setArn(String arn) {
      * <p>
      * The Amazon Resource Name (ARN) of the IAM managed policy to use as a
      * session policy for the role. For more information about ARNs, see <a
-     * href="general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource
-     * Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General
-     * Reference</i>.
+     * href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the
+     * <i>AWS General Reference</i>.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -114,10 +118,10 @@ public void setArn(String arn) {
      * @param arn <p>
      *            The Amazon Resource Name (ARN) of the IAM managed policy to
      *            use as a session policy for the role. For more information
-     *            about ARNs, see <a
-     *            href="general/latest/gr/aws-arns-and-namespaces.html">Amazon
-     *            Resource Names (ARNs) and AWS Service Namespaces</a> in the
-     *            <i>AWS General Reference</i>.
+     *            about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the <i>AWS General Reference</i>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/GetAccessKeyInfoRequestMarshaller.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/GetAccessKeyInfoRequestMarshaller.java
new file mode 100644
index 0000000000..a1e7de3094
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/GetAccessKeyInfoRequestMarshaller.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model.transform;
+
+import com.amazonaws.AmazonClientException;
+import com.amazonaws.Request;
+import com.amazonaws.DefaultRequest;
+import com.amazonaws.services.securitytoken.model.*;
+import com.amazonaws.transform.Marshaller;
+import com.amazonaws.util.StringUtils;
+
+/**
+ * StAX request marshaller for GetAccessKeyInfoRequest
+ */
+public class GetAccessKeyInfoRequestMarshaller implements
+        Marshaller<Request<GetAccessKeyInfoRequest>, GetAccessKeyInfoRequest> {
+
+    public Request<GetAccessKeyInfoRequest> marshall(GetAccessKeyInfoRequest getAccessKeyInfoRequest) {
+        if (getAccessKeyInfoRequest == null) {
+            throw new AmazonClientException(
+                    "Invalid argument passed to marshall(GetAccessKeyInfoRequest)");
+        }
+
+        Request<GetAccessKeyInfoRequest> request = new DefaultRequest<GetAccessKeyInfoRequest>(
+                getAccessKeyInfoRequest, "AWSSecurityTokenService");
+        request.addParameter("Action", "GetAccessKeyInfo");
+        request.addParameter("Version", "2011-06-15");
+
+        String prefix;
+        if (getAccessKeyInfoRequest.getAccessKeyId() != null) {
+            prefix = "AccessKeyId";
+            String accessKeyId = getAccessKeyInfoRequest.getAccessKeyId();
+            request.addParameter(prefix, StringUtils.fromString(accessKeyId));
+        }
+
+        return request;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/GetAccessKeyInfoResultStaxUnmarshaller.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/GetAccessKeyInfoResultStaxUnmarshaller.java
new file mode 100644
index 0000000000..dcf937732a
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/GetAccessKeyInfoResultStaxUnmarshaller.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model.transform;
+
+import java.util.Map;
+import java.util.Map.Entry;
+
+import org.xmlpull.v1.XmlPullParser;
+
+import com.amazonaws.services.securitytoken.model.*;
+import com.amazonaws.transform.Unmarshaller;
+import com.amazonaws.transform.MapEntry;
+import com.amazonaws.transform.StaxUnmarshallerContext;
+import com.amazonaws.transform.SimpleTypeStaxUnmarshallers.*;
+
+/**
+ * StAX unmarshaller for response GetAccessKeyInfoResult
+ */
+public class GetAccessKeyInfoResultStaxUnmarshaller implements
+        Unmarshaller<GetAccessKeyInfoResult, StaxUnmarshallerContext> {
+
+    public GetAccessKeyInfoResult unmarshall(StaxUnmarshallerContext context) throws Exception {
+        GetAccessKeyInfoResult getAccessKeyInfoResult = new GetAccessKeyInfoResult();
+
+        int originalDepth = context.getCurrentDepth();
+        int targetDepth = originalDepth + 1;
+
+        if (context.isStartOfDocument())
+            targetDepth += 2;
+
+        while (true) {
+            int xmlEvent = context.nextEvent();
+            if (xmlEvent == XmlPullParser.END_DOCUMENT)
+                break;
+
+            if (xmlEvent == XmlPullParser.START_TAG) {
+                if (context.testExpression("Account", targetDepth)) {
+                    getAccessKeyInfoResult.setAccount(StringStaxUnmarshaller.getInstance()
+                            .unmarshall(context));
+                    continue;
+                }
+            } else if (xmlEvent == XmlPullParser.END_TAG) {
+                if (context.getCurrentDepth() < originalDepth) {
+                    break;
+                }
+            }
+        }
+        return getAccessKeyInfoResult;
+    }
+
+    private static GetAccessKeyInfoResultStaxUnmarshaller instance;
+
+    public static GetAccessKeyInfoResultStaxUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new GetAccessKeyInfoResultStaxUnmarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-core/src/test/java/com/amazonaws/auth/AWS3SignerTest.java b/aws-android-sdk-core/src/test/java/com/amazonaws/auth/AWS3SignerTest.java
index 86e426341f..2cbc0dcbdb 100644
--- a/aws-android-sdk-core/src/test/java/com/amazonaws/auth/AWS3SignerTest.java
+++ b/aws-android-sdk-core/src/test/java/com/amazonaws/auth/AWS3SignerTest.java
@@ -36,8 +36,7 @@
 public class AWS3SignerTest {
 
     /**
-     * A previously computed AWS3 HTTP authorization header from a Coral
-     * Explorer request.
+     * A previously computed AWS3 HTTP authorization header
      */
     private static final String EXPECTED_AUTHORIZATION_HEADER =
             "AWS3 AWSAccessKeyId=access,Algorithm=HmacSHA256," +
diff --git a/aws-android-sdk-core/src/test/java/com/amazonaws/auth/policy/PolicyReaderTest.java b/aws-android-sdk-core/src/test/java/com/amazonaws/auth/policy/PolicyReaderTest.java
index 1c3f9793e6..8520a21eec 100644
--- a/aws-android-sdk-core/src/test/java/com/amazonaws/auth/policy/PolicyReaderTest.java
+++ b/aws-android-sdk-core/src/test/java/com/amazonaws/auth/policy/PolicyReaderTest.java
@@ -341,13 +341,12 @@ public String getActionName() {
     }
 
     /**
-     * This test case was written as result of the following tt
+     * This test case was written as result of the tt0030871921 
      *
-     * @see https://tt.amazon.com/0030871921 When a service is mentioned in the
-     *      principal, we always try to figure out the service from
-     *      <code>com.amazonaws.auth.policy.Principal.Services</code> enum. For
-     *      new services introduced, if the enum is not updated, then the
-     *      parsing fails.
+     * When a service is mentioned in the principal, we always try to figure
+     * out the service from
+     * <code>com.amazonaws.auth.policy.Principal.Services</code> enum. For new
+     * services introduced, if the enum is not updated, then the parsing fails.
      */
     @Test
     public void testPrincipalWithServiceNotInServicesEnum() {
diff --git a/aws-android-sdk-ddb-mapper-test/src/androidTest/java/com/amazonaws/mobileconnectors/dynamodbv2/dynamodbmapper/BatchLoadIntegrationTest.java b/aws-android-sdk-ddb-mapper-test/src/androidTest/java/com/amazonaws/mobileconnectors/dynamodbv2/dynamodbmapper/BatchLoadIntegrationTest.java
index 01c7a4b92c..e88fbb3fe7 100644
--- a/aws-android-sdk-ddb-mapper-test/src/androidTest/java/com/amazonaws/mobileconnectors/dynamodbv2/dynamodbmapper/BatchLoadIntegrationTest.java
+++ b/aws-android-sdk-ddb-mapper-test/src/androidTest/java/com/amazonaws/mobileconnectors/dynamodbv2/dynamodbmapper/BatchLoadIntegrationTest.java
@@ -20,6 +20,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+import com.amazonaws.ClientConfiguration;
 import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapperConfig.ConsistentReads;
 import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapperConfig.SaveBehavior;
 import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
@@ -169,7 +170,7 @@ public void testMultipleTables() {
     }
 
     @Test
-    public void testBoudaryCases() {
+    public void testBoundaryCases() {
         // The request is an empty Map.
         Map<Class<?>, List<KeyPair>> itemsToGet = new HashMap<Class<?>, List<KeyPair>>();
         Map<String, List<Object>> response = null;
@@ -217,6 +218,41 @@ public void testExponentialBackOffForBatchGetInMapper()
         }
     }
 
+    @Test
+    public void testGzippedResponse() throws InterruptedException {
+        ClientConfiguration clientConfiguration = new ClientConfiguration()
+                .withEnableGzip(true);
+        AmazonDynamoDBClient gzippingDynamo = new AmazonDynamoDBClient(credentials, clientConfiguration);
+        DynamoDBMapper gzippingMapper = new DynamoDBMapper(gzippingDynamo);
+
+        // To see whether batchGet can handle more than 100 items per request
+        final int numItems = 200;
+        List<NumberSetAttributeClass> objs = new ArrayList<NumberSetAttributeClass>();
+        List<KeyPair> keyPairs = new LinkedList<KeyPair>();
+        Class<?> clazz = null;
+        for (int i = 0; i < numItems; i++) {
+            NumberSetAttributeClass obj = getUniqueNumericObject();
+            objs.add(obj);
+            clazz = obj.getClass();
+            keyPairs.add(new KeyPair().withHashKey(obj.getKey()));
+        }
+
+        gzippingMapper.batchSave(objs);
+
+        Map<Class<?>, List<KeyPair>> itemsToGet = new HashMap<Class<?>, List<KeyPair>>();
+        Map<String, List<Object>> response = null;
+        itemsToGet.put(clazz, keyPairs);
+        response = gzippingMapper.batchLoad(itemsToGet);
+        List<Object> items = response.get(TABLE_NAME);
+        assertEquals(numItems, items.size());
+
+        for (Object item : items) {
+            objs.contains(item);
+        }
+        Thread.sleep(1000 * 10);
+    }
+
+
     private NumberSetAttributeClass getUniqueNumericObject() {
         NumberSetAttributeClass obj = new NumberSetAttributeClass();
         obj.setKey(String.valueOf(startKeyDebug++));
diff --git a/aws-android-sdk-kinesis-test/src/androidTest/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/KinesisRecorderIntegrationTest.java b/aws-android-sdk-kinesis-test/src/androidTest/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/KinesisRecorderIntegrationTest.java
index 3fcc61cdb2..45461d92df 100644
--- a/aws-android-sdk-kinesis-test/src/androidTest/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/KinesisRecorderIntegrationTest.java
+++ b/aws-android-sdk-kinesis-test/src/androidTest/java/com/amazonaws/mobileconnectors/kinesis/kinesisrecorder/KinesisRecorderIntegrationTest.java
@@ -21,6 +21,7 @@
 import android.support.test.InstrumentationRegistry;
 import android.util.Log;
 
+import com.amazonaws.ClientConfiguration;
 import com.amazonaws.auth.AWSCredentialsProvider;
 import com.amazonaws.auth.CognitoCachingCredentialsProvider;
 import com.amazonaws.regions.Regions;
@@ -41,7 +42,9 @@
 import com.amazonaws.util.StringUtils;
 
 import org.json.JSONException;
+import org.junit.AfterClass;
 import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 import java.io.File;
@@ -60,65 +63,60 @@
     // Constants for Kinesis tests
     private static final String DATA_STRING_PREFIX = "KinesisData";
     private static final String DELIMITER = "/";
+    private static final int NUM_SHARDS = 5;
+
+    private static final String STREAM_NAME = "Android_" + TAG;
 
     // directory where Kinesis Recorder saves records
-    private File directory;
     private static final String DIR_NAME = "KinesisRecorderDirectory";
-    private static final String STREAM_NAME = "Android_" + TAG;
+    private File directory;
 
+    private AmazonKinesisClient client;
     private KinesisRecorder recorder;
-    private boolean initCompleted = false;
     private final Set<String> dataRecordSet = new HashSet<String>();
     private List<Shard> shards;
-    private AmazonKinesisClient client;
+
+    // Create the stream for our tests once
+    @BeforeClass
+    public static void createStream() throws InterruptedException, JSONException {
+        AmazonKinesisClient client = makeClient();
+
+        boolean streamIsCreated = false;
+        do {
+            try {
+                Log.d(TAG, "Creating stream, this may take some time");
+                client.createStream(STREAM_NAME, NUM_SHARDS);
+                streamIsCreated = true;
+                Log.d(TAG, "Stream is created.");
+            } catch (ResourceInUseException re) {
+                // if stream exists, try to delete it and create it again
+                Log.d(TAG, "Stream already exists. Deleting...");
+                waitUntilStreamIsDeleted(client);
+            }
+        } while (!streamIsCreated);
+
+    }
 
     @Before
     public void setup() throws InterruptedException, JSONException {
+        client = makeClient();
 
-        Context appContext = InstrumentationRegistry.getTargetContext();
-        if (!initCompleted) {
-            AWSCredentialsProvider provider = new CognitoCachingCredentialsProvider(appContext,
-                    getPackageConfigure().getString("identity_pool_id"), Regions.US_EAST_1);
-
-            client = new AmazonKinesisClient(provider);
-
-            int numShards = 5;
-
-            // Create the stream for our tests
-            boolean streamIsCreated = false;
-            do {
-                try {
-                    Log.d(TAG, "Creating stream, this may take some time");
-                    client.createStream(STREAM_NAME, numShards);
-                    Log.d(TAG, "Stream created, getting shards");
-                    shards = getShardsAfterStreamIsReady(numShards);
-                    streamIsCreated = true;
-                    Log.d(TAG, "Stream is created.");
-                } catch (ResourceInUseException re) {
-                    // if stream exists, try to delete it and create it again
-                    Log.d(TAG, "Stream already exists. Deleting...");
-                    waitUntilStreamIsDeleted();
-                } catch (LimitExceededException e) {
-                    Log.d(TAG, "limit exceeded, going to retry with less shards");
-                    if (numShards > 1) {
-                        numShards--;
-                    } else {
-                        throw e;
-                    }
-                }
-            } while (!streamIsCreated);
-
-            directory = new File(appContext.getApplicationContext().getFilesDir(), DIR_NAME);
-            directory.mkdir();
-            recorder = new KinesisRecorder(directory, Regions.US_EAST_1, provider);
-            initCompleted = true;
+        try {
+            shards = getShardsAfterStreamIsReady(client, NUM_SHARDS);
+        } catch (LimitExceededException e) {
+            Log.d(TAG, "limit exceeded, make sure test account hasn't exceeded shard limit");
+            throw e;
         }
+
+        directory = makeDirectory();
+        recorder = makeRecorder(directory, false);
     }
+
     @Test
     public void testPut() {
         // batch 5 records with 5 partition keys
         int i = 0;
-        for (i = 0; i < 5; i++) {
+        for (; i < 5; i++) {
             String dataStr = DATA_STRING_PREFIX + DELIMITER + String.valueOf(i);
             dataRecordSet.add(dataStr);
             recorder.saveRecord(dataStr.getBytes(StringUtils.UTF8), STREAM_NAME);
@@ -210,7 +208,127 @@ public void testReadCorruptLines() throws IOException {
         		   streamName.equals(nextStream));
     }
 
-    private List<Shard> getShardsAfterStreamIsReady(int numShards)
+    @Test
+    public void testPutWithGzip() {
+        boolean wasGzipEnabled = recorder.getKinesisRecorderConfig().getClientConfiguration().isEnableGzip();
+
+        recorder.getKinesisRecorderConfig().getClientConfiguration().setEnableGzip(true);
+
+        // batch 25 records with 5 partition keys. A large payload is necessary to trigger a gzip
+        // encoded response from the service
+        int i = 0;
+        for (i = 0; i < 25; i++) {
+            String dataStr = DATA_STRING_PREFIX + DELIMITER + String.valueOf(i);
+            dataRecordSet.add(dataStr);
+            recorder.saveRecord(dataStr.getBytes(StringUtils.UTF8), STREAM_NAME);
+        }
+
+        recorder.submitAllRecords();
+
+        // submit one record
+        String parKey = "PartitionKey" + i;
+        String dataStr = DATA_STRING_PREFIX + DELIMITER + parKey;
+        dataRecordSet.add(dataStr);
+        recorder.saveRecord(dataStr.getBytes(StringUtils.UTF8), STREAM_NAME);
+
+        recorder.submitAllRecords();
+
+        try {
+            Log.d(TAG, "Sleeping for 10 seconds");
+            Thread.sleep(10000);
+        } catch (InterruptedException e) {
+            Thread.interrupted();
+        }
+
+        Log.d(TAG, "Reading records");
+        Set partitionKeys = new HashSet();
+
+        readRecordsFromKinesis(partitionKeys);
+
+        if (!dataRecordSet.isEmpty()) {
+            Log.e(TAG, "Missing records from shards.");
+            Log.e(TAG, "Sleeping for 10 more seconds and trying again");
+            try {
+                Log.d(TAG, "Sleeping for 10 seconds");
+                Thread.sleep(10000);
+            } catch (InterruptedException e) {
+                Thread.interrupted();
+            }
+            readRecordsFromKinesis(partitionKeys);
+            assertTrue("Still missing records from shards.", dataRecordSet.isEmpty());
+        }
+
+        recorder.getKinesisRecorderConfig().getClientConfiguration().setEnableGzip(wasGzipEnabled);
+
+    }
+
+    private void readRecordsFromKinesis(Set partitionKeys) {
+        for (Shard shard : shards) {
+            String shardId = shard.getShardId();
+            Log.d(TAG, "Reading from shard: " + shardId);
+
+            GetShardIteratorRequest getShardIterRq = new GetShardIteratorRequest();
+            getShardIterRq.setStreamName(STREAM_NAME);
+            getShardIterRq.setShardId(shardId);
+            getShardIterRq.setShardIteratorType(ShardIteratorType.TRIM_HORIZON);
+
+            GetShardIteratorResult getShardIterRslt = client.getShardIterator(getShardIterRq);
+
+            GetRecordsRequest getRecordsRq = new GetRecordsRequest();
+            getRecordsRq.setShardIterator(getShardIterRslt.getShardIterator());
+            getRecordsRq.setLimit(100);
+
+            GetRecordsResult getRecordResult = client.getRecords(getRecordsRq);
+
+            int currShardResultCount = 0;
+            for (Record r : getRecordResult.getRecords()) {
+                String recordStr = new String(r.getData().array(), StringUtils.UTF8);
+                ++currShardResultCount;
+                Log.d(TAG, "Retrieved a total of " + currShardResultCount + " records from shard "
+                        + shardId);
+                if (partitionKeys != null && dataRecordSet.contains(recordStr)) {
+                    String partitionKey = r.getPartitionKey();
+                    assertTrue("There are duplicated partition keys", !partitionKeys.contains(partitionKey));
+                    partitionKeys.add(partitionKey);
+                }
+                dataRecordSet.remove(recordStr);
+            }
+        }
+
+        assertTrue(dataRecordSet.isEmpty());
+    }
+
+    // Static utility methods
+
+    private static AmazonKinesisClient makeClient() throws JSONException {
+        AmazonKinesisClient client = new AmazonKinesisClient(makeCredentialsProvider());
+        return client;
+    }
+
+    private static KinesisRecorder makeRecorder(File directory, boolean gzipEnabled) throws JSONException {
+        KinesisRecorderConfig recorderConfig = new KinesisRecorderConfig();
+        recorderConfig.getClientConfiguration().setEnableGzip(gzipEnabled);
+        KinesisRecorder recorder = new KinesisRecorder(directory, Regions.US_EAST_1,
+                makeCredentialsProvider(), recorderConfig);
+        return recorder;
+    }
+
+    private static AWSCredentialsProvider makeCredentialsProvider() throws JSONException {
+        Context appContext = InstrumentationRegistry.getTargetContext();
+        String identityPoolId = getPackageConfigure().getString("identity_pool_id");
+        AWSCredentialsProvider provider = new CognitoCachingCredentialsProvider(appContext,
+                identityPoolId, Regions.US_EAST_1);
+        return provider;
+    }
+
+    private static File makeDirectory() {
+        Context appContext = InstrumentationRegistry.getTargetContext();
+        File directory = new File(appContext.getApplicationContext().getFilesDir(), DIR_NAME);
+        directory.mkdir();
+        return directory;
+    }
+
+    private static List<Shard> getShardsAfterStreamIsReady(AmazonKinesisClient client, int numShards)
             throws InterruptedException {
         long giveUpTimeMillis = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(45);
         while (System.currentTimeMillis() < giveUpTimeMillis) {
@@ -227,7 +345,7 @@ public void testReadCorruptLines() throws IOException {
         return null;
     }
 
-    private boolean waitUntilStreamIsDeleted() {
+    private static boolean waitUntilStreamIsDeleted(AmazonKinesisClient client) {
         // delete stream
         int retries = 1;
         while (true) {
@@ -242,6 +360,7 @@ private boolean waitUntilStreamIsDeleted() {
                 }
             }
         }
+
         // wait till stream is deleted
         retries = 1;
         while (true) {
@@ -255,43 +374,13 @@ private boolean waitUntilStreamIsDeleted() {
                     return true;
                 }
             }
+
             retries++;
             if (retries > 30) {
                 throw new RuntimeException(
-                        "Stream still exists after deleting.  Consider refactoring incase of eventual consistency");
+                        "Stream still exists after deleting. Consider refactoring in case of eventual consistency");
             }
         }
     }
 
-    private void readRecordsFromKinesis(Set partitionKeys) {
-        for (Shard shard : shards) {
-            String shardId = shard.getShardId();
-            Log.d(TAG, "Reading from shard: " + shardId);
-            GetShardIteratorRequest getShardIterRq = new GetShardIteratorRequest();
-            getShardIterRq.setStreamName(STREAM_NAME);
-            getShardIterRq.setShardId(shardId);
-            getShardIterRq.setShardIteratorType(ShardIteratorType.TRIM_HORIZON);
-            GetShardIteratorResult getShardIterRslt = client.getShardIterator(getShardIterRq);
-            GetRecordsRequest getRecordsRq = new GetRecordsRequest();
-            getRecordsRq.setShardIterator(getShardIterRslt.getShardIterator());
-            getRecordsRq.setLimit(100);
-            GetRecordsResult getRecordResult = client.getRecords(getRecordsRq);
-            int currShardResultCount = 0;
-            for (Record r : getRecordResult.getRecords()) {
-                String recordStr = new String(r.getData().array(), StringUtils.UTF8);
-                ++currShardResultCount;
-                Log.d(TAG, "Retrieved a total of " + currShardResultCount + " records from shard "
-                        + shardId);
-                if(partitionKeys != null && dataRecordSet.contains(recordStr)) {
-                    String partitionKey = r.getPartitionKey();
-                    assertTrue("There are duplicated partition keys", !partitionKeys.contains(partitionKey));
-                    partitionKeys.add(partitionKey);
-                }
-                dataRecordSet.remove(recordStr);
-
-            }
-        }
-
-        assertTrue(dataRecordSet.isEmpty());
-    }
 }
