diff --git a/library/test/com/orm/query/SelectTest.java b/library/test/com/orm/query/SelectTest.java
index a0fa01e9..7a6ac10a 100644
--- a/library/test/com/orm/query/SelectTest.java
+++ b/library/test/com/orm/query/SelectTest.java
@@ -11,12 +11,12 @@
     @Test
     public void testMergeCondition(){
         Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
-        assertEquals("test = ? ", where.getWhereCond());
+        assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
 
         where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("test = ?  AND prop = ? ", where.getWhereCond());
+        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
         assertEquals(2, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
         assertEquals("2", where.getArgs()[1]);
@@ -26,12 +26,12 @@ public void testMergeCondition(){
     @Test
     public void testWhere(){
         Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
-        assertEquals("test = ? ", where.getWhereCond());
+        assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
 
         where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("test = ?  AND prop = ? ", where.getWhereCond());
+        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
         assertEquals(2, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
         assertEquals("2", where.getArgs()[1]);
@@ -41,12 +41,12 @@ public void testWhere(){
     @Test
     public void testWhereOr(){
         Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("test = ? ", where.getWhereCond());
+        assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
 
         where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("test = ?  OR prop = ? ", where.getWhereCond());
+        assertEquals("(test = ?  OR prop = ? )", where.getWhereCond());
         assertEquals(2, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
         assertEquals("2", where.getArgs()[1]);
@@ -55,13 +55,13 @@ public void testWhereOr(){
     @Test
     public void testAnd(){
         Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("test = ? ", where.getWhereCond());
+        assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
 
         where.and(Condition.prop("prop").eq(2));
 
-        assertEquals("test = ?  AND prop = ? ", where.getWhereCond());
+        assertEquals("(test = ? ) AND (prop = ? )", where.getWhereCond());
         assertEquals(2, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
         assertEquals("2", where.getArgs()[1]);
@@ -70,13 +70,13 @@ public void testAnd(){
     @Test
     public void testOr(){
         Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("test = ? ", where.getWhereCond());
+        assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
 
         where.or(Condition.prop("prop").eq(2));
 
-        assertEquals("test = ?  OR prop = ? ", where.getWhereCond());
+        assertEquals("(test = ? ) OR (prop = ? )", where.getWhereCond());
         assertEquals(2, where.getArgs().length);
         assertEquals("satya", where.getArgs()[0]);
         assertEquals("2", where.getArgs()[1]);
