diff --git a/library/build.gradle b/library/build.gradle
index 907162ee..6f28502d 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,9 +1,9 @@
 apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
+//apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    buildToolsVersion '27.0.3'
 
     defaultConfig {
         minSdkVersion 9
@@ -20,15 +20,18 @@ android {
     lintOptions {
         abortOnError false
     }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 dependencies {
-    testCompile 'junit:junit:4.12'
-    testCompile 'org.robolectric:robolectric:3.0'
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.robolectric:robolectric:3.0'
 }
 
 task libraryJar(type: Jar) {
-    dependsOn assembleRelease
     from android.sourceSets.main.java.srcDirs,
          ['build/intermediates/classes/release/'] // Add the release classes into the jar
     baseName 'sugar'
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 2ade2ba3..ca5ee257 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -282,7 +282,7 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> long sum(Class<T> type, String field) {
-        return sum(type, field, null, null);
+        return sum(type, field, null, (String) null );
     }
 
     public static <T> long sum(Class<T> type, String field, String whereClause, String... whereArgs) {
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 18943d09..41f73216 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -25,8 +25,11 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.Enumeration;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 public final class ReflectionUtil {
 
@@ -320,6 +323,11 @@ private static Class getDomainClass(String className) {
             for (String classString : allClasses) {
                 if (classString.startsWith(packageName)) classNames.add(classString);
             }
+
+            // remove duplicates
+            Set<String> hs = new LinkedHashSet<>(classNames);
+            classNames.clear();
+            classNames.addAll(hs);
         } catch (NullPointerException e) {
             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
             Enumeration<URL> urls = classLoader.getResources("");
