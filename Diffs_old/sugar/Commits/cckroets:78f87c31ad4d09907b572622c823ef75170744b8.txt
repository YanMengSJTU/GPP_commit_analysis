diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 6e0beddd..00000000
--- a/.travis.yml
+++ /dev/null
@@ -1,31 +0,0 @@
-language: android
-jdk: oraclejdk7
-
-env:
-  global:
-    - TERM=dumb
-android:
-  components:
-    - sys-img-armeabi-v7a-android-23
-    - tools
-    - build-tools-23.0.3
-    - android-23
-    - extra-android-m2repository
-before_script:
-  - sudo service postgresql stop || true
-  - sudo service mysql stop || true
-  - sudo service memcached stop || true
-  - sudo service bootlogd stop || true
-  - sudo service elasticsearch stop || true
-  - sudo service mongodb stop || true
-  - sudo service neo4j stop || true
-  - sudo service cassandra stop || true
-  - sudo service riak stop || true
-  - sudo service rsync stop || true
-  - sudo service x11-common stop || true
-script:
-  - ./gradlew clean build connectedCheck coveralls
-
-cache:
-  directories:
-    - $HOME/.m2
diff --git a/gradle.properties b/gradle.properties
deleted file mode 100644
index 35b4c26f..00000000
--- a/gradle.properties
+++ /dev/null
@@ -1,34 +0,0 @@
-# Project-wide Gradle settings.
-
-# IDE (e.g. Android Studio) users:
-# Settings specified in this file will override any Gradle settings
-# configured through the IDE.
-
-# For more details on how to configure your build environment visit
-# http://www.gradle.org/docs/current/userguide/build_environment.html
-
-# Specifies the JVM arguments used for the daemon process.
-# The setting is particularly useful for tweaking memory settings.
-# Default value: -Xmx10248m -XX:MaxPermSize=256m
-# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
-
-# When configured, Gradle will run in incubating parallel mode.
-# This option should only be used with decoupled projects. More details, visit
-# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
-org.gradle.daemon=true
-
-VERSION_NAME=2
-VERSION_CODE=2
-GROUP=com.github.satyan
-
-POM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database
-POM_URL=https://github.com/satyan/sugar
-POM_SCM_URL=https://github.com/satyan/sugar
-POM_SCM_CONNECTION=scm:git@github.com:satyan/sugar.git
-POM_SCM_DEV_CONNECTION=scm:git@github.com:satyan/sugar.git
-POM_LICENCE_NAME=The Apache Software License, Version 2.0
-POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
-POM_LICENCE_DIST=repo
-POM_DEVELOPER_ID=satyan
-POM_DEVELOPER_NAME=Satya Narayan
\ No newline at end of file
diff --git a/gradlew b/gradlew
deleted file mode 100755
index 91a7e269..00000000
--- a/gradlew
+++ /dev/null
@@ -1,164 +0,0 @@
-#!/usr/bin/env bash
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn ( ) {
-    echo "$*"
-}
-
-die ( ) {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-esac
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
-}
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
-
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
deleted file mode 100755
index aec99730..00000000
--- a/gradlew.bat
+++ /dev/null
@@ -1,90 +0,0 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/library/build.gradle b/library/build.gradle
index bc32d26a..2f7566a1 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,5 +1,4 @@
 apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 23
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 61609986..3745b381 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -5,6 +5,7 @@
 import com.orm.util.ContextUtil;
 
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.WeakHashMap;
 
@@ -14,10 +15,12 @@
     private static SugarContext instance = null;
     private SugarDb sugarDb;
     private Map<Object, Long> entitiesMap;
+    private Map<Class<?>, SugarSerializer> serializers;
 
-    private SugarContext() {
-        this.sugarDb = SugarDb.getInstance();
+    private SugarContext(SugarDbCallback sugarDbCallback) {
+        this.sugarDb = SugarDb.getInstance(sugarDbCallback);
         this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Long>());
+        this.serializers = Collections.synchronizedMap(new HashMap<Class<?>, SugarSerializer>());
     }
     
     public static SugarContext getSugarContext() {
@@ -27,14 +30,14 @@ public static SugarContext getSugarContext() {
         return instance;
     }
 
-    public static void init(Context context) {
+    public static void init(Context context, SugarDbCallback sugarDbCallback) {
         ContextUtil.init(context);
-        instance = new SugarContext();
+        instance = new SugarContext(sugarDbCallback);
         dbConfiguration = null;
     }
 
-    public static void init(Context context, SugarDbConfiguration configuration) {
-        init(context);
+    public static void init(Context context, SugarDbCallback sugarDbCallback, SugarDbConfiguration configuration) {
+        init(context, sugarDbCallback);
         dbConfiguration = configuration;
     }
 
@@ -54,6 +57,7 @@ public static void terminate() {
      * Robolectric Android mock.
      */
     private void doTerminate() {
+        serializers.clear();
         if (this.sugarDb != null) {
             this.sugarDb.getDB().close();
         }
@@ -70,4 +74,8 @@ public SugarDb getSugarDb() {
     public Map<Object, Long> getEntitiesMap() {
         return entitiesMap;
     }
+
+    public Map<Class<?>, SugarSerializer> getSerializers() {
+        return serializers;
+    }
 }
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index ed05b80a..814ebb98 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -16,22 +16,31 @@
     private static final String LOG_TAG = "Sugar";
 
     private final SchemaGenerator schemaGenerator;
+    private final SugarDbCallback dbCallback;
     private SQLiteDatabase sqLiteDatabase;
     private int openedConnections = 0;
 
     //Prevent instantiation
-    private SugarDb() {
+    private SugarDb(SugarDbCallback callback) {
         super(getContext(), getDbName(), new SugarCursorFactory(ManifestHelper.isDebugEnabled()), getDatabaseVersion());
+        dbCallback = callback;
         schemaGenerator = SchemaGenerator.getInstance();
     }
 
     public static SugarDb getInstance() {
-        return new SugarDb();
+        return new SugarDb(null);
+    }
+
+    public static SugarDb getInstance(SugarDbCallback callback) {
+        return new SugarDb(callback);
     }
 
     @Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
         schemaGenerator.createDatabase(sqLiteDatabase);
+        if (dbCallback != null) {
+            dbCallback.onCreate(sqLiteDatabase);
+        }
     }
 
     @Override
@@ -45,11 +54,17 @@ public void onConfigure(SQLiteDatabase db) {
         }
 
         super.onConfigure(db);
+        if (dbCallback != null) {
+            dbCallback.onConfigure(db);
+        }
     }
 
     @Override
     public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
         schemaGenerator.doUpgrade(sqLiteDatabase, oldVersion, newVersion);
+        if (dbCallback != null) {
+            dbCallback.onUpgrade(sqLiteDatabase, oldVersion, newVersion);
+        }
     }
 
     public synchronized SQLiteDatabase getDB() {
diff --git a/library/src/main/java/com/orm/SugarDbCallback.java b/library/src/main/java/com/orm/SugarDbCallback.java
new file mode 100644
index 00000000..4bb53816
--- /dev/null
+++ b/library/src/main/java/com/orm/SugarDbCallback.java
@@ -0,0 +1,12 @@
+package com.orm;
+
+import android.database.sqlite.SQLiteDatabase;
+
+public interface SugarDbCallback {
+
+    void onCreate(SQLiteDatabase sqLiteDatabase);
+
+    void onConfigure(SQLiteDatabase db);
+
+    void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion);
+}
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index a6d22f04..6ef645cc 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -215,7 +215,7 @@ public static void executeQuery(String query, String... arguments) {
         try {
             while (cursor.moveToNext()) {
                 entity = type.getDeclaredConstructor().newInstance();
-                inflate(cursor, entity, getSugarContext().getEntitiesMap());
+                inflate(cursor, entity, getSugarContext().getEntitiesMap(), getSugarContext().getSerializers());
                 result.add(entity);
             }
         } catch (Exception e) {
@@ -267,11 +267,12 @@ public static long save(Object object) {
 
     static long save(SQLiteDatabase db, Object object) {
         Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+        Map<Class<?>, SugarSerializer> serializerMap = getSugarContext().getSerializers();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
         Field idField = null;
         for (Field column : columns) {
-            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap, serializerMap);
             if (column.getName().equals("id")) {
                 idField = column;
             }
@@ -313,6 +314,7 @@ public static long update(Object object) {
 
     static long update(SQLiteDatabase db, Object object) {
         Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+        Map<Class<?>, SugarSerializer> serializerMap = getSugarContext().getSerializers();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
 
@@ -333,7 +335,7 @@ static long update(SQLiteDatabase db, Object object) {
                 }
             } else {
                 if (!column.getName().equals("id")) {
-                    ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+                    ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap, serializerMap);
                 }
             }
         }
@@ -355,7 +357,8 @@ public static boolean isSugarEntity(Class<?> objectClass) {
         return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
     }
 
-    private static void inflate(Cursor cursor, Object object, Map<Object, Long> entitiesMap) {
+    private static void inflate(Cursor cursor, Object object, Map<Object, Long> entitiesMap,
+                                Map<Class<?>, SugarSerializer> serializerMap) {
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         if (!entitiesMap.containsKey(object)) {
             entitiesMap.put(object, cursor.getLong(cursor.getColumnIndex(("ID"))));
@@ -372,7 +375,7 @@ private static void inflate(Cursor cursor, Object object, Map<Object, Long> enti
                     e.printStackTrace();
                 }
             } else {
-                ReflectionUtil.setFieldValueFromCursor(cursor, field, object);
+                ReflectionUtil.setFieldValueFromCursor(cursor, field, object, serializerMap);
             }
         }
     }
@@ -429,7 +432,7 @@ public long update() {
 
     @SuppressWarnings("unchecked")
     void inflate(Cursor cursor) {
-        inflate(cursor, this, getSugarContext().getEntitiesMap());
+        inflate(cursor, this, getSugarContext().getEntitiesMap(), getSugarContext().getSerializers());
     }
 
     public Long getId() {
@@ -467,7 +470,7 @@ public E next() {
 
             try {
                 entity = type.getDeclaredConstructor().newInstance();
-                inflate(cursor, entity, getSugarContext().getEntitiesMap());
+                inflate(cursor, entity, getSugarContext().getEntitiesMap(), getSugarContext().getSerializers());
             } catch (Exception e) {
                 e.printStackTrace();
             } finally {
diff --git a/library/src/main/java/com/orm/SugarSerializer.java b/library/src/main/java/com/orm/SugarSerializer.java
new file mode 100644
index 00000000..c1ae0ad7
--- /dev/null
+++ b/library/src/main/java/com/orm/SugarSerializer.java
@@ -0,0 +1,19 @@
+package com.orm;
+
+import java.lang.reflect.Field;
+
+/**
+ * A custom serializer that the client can implement to serialize any data structure the way they
+ * want. Must be used in conjunction with {@link com.orm.annotation.Serialize} annotation.
+ *
+ * TODO:
+ * - Use a generic serializer instead of just String
+ * - Accept multiple, and register each with a type
+ */
+public interface SugarSerializer {
+
+    String serialize(Field field, Object data);
+
+    Object deserialize(Field field, String serializedData);
+
+}
diff --git a/library/src/main/java/com/orm/annotation/Serialize.java b/library/src/main/java/com/orm/annotation/Serialize.java
new file mode 100644
index 00000000..71762ed3
--- /dev/null
+++ b/library/src/main/java/com/orm/annotation/Serialize.java
@@ -0,0 +1,12 @@
+package com.orm.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Serialize {
+    Class<?> value();
+}
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 05502bf6..2f5bb117 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -6,7 +6,9 @@
 import android.util.Log;
 
 import com.orm.SugarRecord;
+import com.orm.SugarSerializer;
 import com.orm.annotation.Ignore;
+import com.orm.annotation.Serialize;
 import com.orm.annotation.Table;
 import com.orm.helper.ManifestHelper;
 import com.orm.helper.MultiDexHelper;
@@ -63,8 +65,32 @@ private ReflectionUtil() { }
         return fields;
     }
 
+    private static SugarSerializer getSerializer(Serialize annotation,
+                                                 Map<Class<?>, SugarSerializer> serializerMap) {
+        Class<?> serializerClass = annotation.value();
+        if (serializerMap.containsKey(serializerClass)) {
+            return serializerMap.get(serializerClass);
+        }
+
+        if (!SugarSerializer.class.isAssignableFrom(serializerClass)) {
+            Log.e("Sugar", "Invalid serializer " + annotation.value());
+            return null;
+        }
+        try {
+            SugarSerializer sugarSerializer = (SugarSerializer) serializerClass.newInstance();
+            serializerMap.put(serializerClass, sugarSerializer);
+            return sugarSerializer;
+        } catch (IllegalAccessException e1) {
+            Log.e("Sugar", e1.getMessage());
+        } catch (InstantiationException e2) {
+            Log.e("Sugar", e2.getMessage());
+        }
+        return null;
+    }
+
     public static void addFieldValueToColumn(ContentValues values, Field column, Object object,
-                                             Map<Object, Long> entitiesMap) {
+                                             Map<Object, Long> entitiesMap,
+                                             Map<Class<?>, SugarSerializer> serializerMap) {
         column.setAccessible(true);
         Class<?> columnType = column.getType();
         try {
@@ -135,6 +161,11 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
                 } else {
                     if (columnValue == null) {
                         values.putNull(columnName);
+                    } else if (column.isAnnotationPresent(Serialize.class)) {
+                        SugarSerializer sugarSerializer = getSerializer(column.getAnnotation(Serialize.class), serializerMap);
+                        if (sugarSerializer != null) {
+                            values.put(columnName, sugarSerializer.serialize(column, columnValue));
+                        }
                     } else if (columnType.isEnum()) {
                         values.put(columnName, ((Enum) columnValue).name());
                     } else {
@@ -148,7 +179,8 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
         }
     }
 
-    public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object) {
+    public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object,
+                                               Map<Class<?>, SugarSerializer> serializerMap) {
         field.setAccessible(true);
         try {
             Class fieldType = field.getType();
@@ -211,6 +243,12 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 } else {
                     field.set(object, cursor.getBlob(columnIndex));
                 }
+            } else if (field.isAnnotationPresent(Serialize.class)) {
+                SugarSerializer serializer = getSerializer(field.getAnnotation(Serialize.class), serializerMap);
+                if (serializer != null) {
+                    String val = cursor.getString(columnIndex);
+                    field.set(object, serializer.deserialize(field, val));
+                }
             } else if (Enum.class.isAssignableFrom(fieldType)) {
                 try {
                     Method valueOf = field.getType().getMethod("valueOf", String.class);
diff --git a/library/src/test/java/com/orm/SugarDbConfigurationTest.java b/library/src/test/java/com/orm/SugarDbConfigurationTest.java
index 64d50df6..f68f2f5b 100644
--- a/library/src/test/java/com/orm/SugarDbConfigurationTest.java
+++ b/library/src/test/java/com/orm/SugarDbConfigurationTest.java
@@ -27,7 +27,7 @@ public void testNotNullConfiguration() {
                 .setMaxSize(1024L)
                 .setPageSize(400L);
 
-        SugarContext.init(RuntimeEnvironment.application, configuration);
+        SugarContext.init(RuntimeEnvironment.application, null, configuration);
 
         final SugarDbConfiguration config = SugarContext.getDbConfiguration();
 
@@ -38,7 +38,7 @@ public void testNotNullConfiguration() {
 
     @Test
     public void testNullConfiguration() {
-        SugarContext.init(RuntimeEnvironment.application);
+        SugarContext.init(RuntimeEnvironment.application, null);
         assertNull(SugarContext.getDbConfiguration());
     }
 
diff --git a/maven_push.gradle b/maven_push.gradle
deleted file mode 100644
index b741e61b..00000000
--- a/maven_push.gradle
+++ /dev/null
@@ -1,92 +0,0 @@
-apply plugin: 'maven'
-apply plugin: 'signing'
-
-def sonatypeRepositoryUrl
-if (isReleaseBuild()) {
-    println 'RELEASE BUILD'
-    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
-            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
-} else {
-    println 'DEBUG BUILD'
-    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
-            : "https://oss.sonatype.org/content/repositories/snapshots/"
-}
-
-def getRepositoryUsername() {
-    return hasProperty('nexusUsername') ? nexusUsername : ""
-}
-
-def getRepositoryPassword() {
-    return hasProperty('nexusPassword') ? nexusPassword : ""
-}
-
-afterEvaluate { project ->
-    uploadArchives {
-        repositories {
-            mavenDeployer {
-                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-
-                pom.artifactId = POM_ARTIFACT_ID
-
-                repository(url: sonatypeRepositoryUrl) {
-                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
-                }
-
-                pom.project {
-                    name POM_NAME
-                    packaging POM_PACKAGING
-                    description POM_DESCRIPTION
-                    url POM_URL
-
-                    scm {
-                        url POM_SCM_URL
-                        connection POM_SCM_CONNECTION
-                        developerConnection POM_SCM_DEV_CONNECTION
-                    }
-
-                    licenses {
-                        license {
-                            name POM_LICENCE_NAME
-                            url POM_LICENCE_URL
-                            distribution POM_LICENCE_DIST
-                        }
-                    }
-
-                    developers {
-                        developer {
-                            id POM_DEVELOPER_ID
-                            name POM_DEVELOPER_NAME
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    signing {
-        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
-        sign configurations.archives
-    }
-
-    task androidJavadocs(type: Javadoc) {
-        source = android.sourceSets.main.java.sourceFiles
-    }
-
-    task androidJavadocsJar(type: Jar) {
-        classifier = 'javadoc'
-        //basename = artifact_id
-        from androidJavadocs.destinationDir
-    }
-
-    task androidSourcesJar(type: Jar) {
-        classifier = 'sources'
-        //basename = artifact_id
-        from android.sourceSets.main.java.sourceFiles
-    }
-
-    artifacts {
-        //archives packageReleaseJar
-        archives androidSourcesJar
-        archives androidJavadocsJar
-    }
-}
\ No newline at end of file
