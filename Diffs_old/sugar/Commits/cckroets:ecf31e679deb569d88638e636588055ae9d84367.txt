diff --git a/library/build.gradle b/library/build.gradle
index 2f7566a1..4042c614 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -24,6 +24,7 @@ android {
 dependencies {
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
+    compile 'io.reactivex:rxjava:1.1.3'
 }
 
 task libraryJar(type: Jar) {
diff --git a/library/build.properties b/library/build.properties
index b5b95df0..e69de29b 100644
--- a/library/build.properties
+++ b/library/build.properties
@@ -1,3 +0,0 @@
-jdk.home.1.6=$JAVA_HOME
-android.home=/Users/ADMIN/Downloads/android-sdk-macosx/platforms/android-17/android.jar
-android.travis.home=/usr/local/android-sdk/platforms/android-17/android.jar
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 3745b381..2c95610b 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -30,6 +30,10 @@ public static SugarContext getSugarContext() {
         return instance;
     }
 
+    public static void init(Context context) {
+        init(context, null);
+    }
+
     public static void init(Context context, SugarDbCallback sugarDbCallback) {
         ContextUtil.init(context);
         instance = new SugarContext(sugarDbCallback);
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index 814ebb98..72306f25 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -55,15 +55,17 @@ public void onConfigure(SQLiteDatabase db) {
 
         super.onConfigure(db);
         if (dbCallback != null) {
+            sqLiteDatabase = db;
             dbCallback.onConfigure(db);
         }
     }
 
     @Override
-    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
-        schemaGenerator.doUpgrade(sqLiteDatabase, oldVersion, newVersion);
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        schemaGenerator.doUpgrade(db, oldVersion, newVersion);
         if (dbCallback != null) {
-            dbCallback.onUpgrade(sqLiteDatabase, oldVersion, newVersion);
+            sqLiteDatabase = db;
+            dbCallback.onUpgrade(db, oldVersion, newVersion);
         }
     }
 
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 6ef645cc..4e4f6a21 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -26,6 +26,8 @@
 import java.util.NoSuchElementException;
 
 import static com.orm.SugarContext.getSugarContext;
+import rx.Observable;
+import rx.Subscriber;
 
 public class SugarRecord {
     public static final String SUGAR = "Sugar";
@@ -142,6 +144,17 @@ private static SQLiteDatabase getSugarDataBase() {
         return findById(type, Long.valueOf(id));
     }
 
+    public static <T> Observable<T> findByIdRx(final Class<T> type, final Integer id) {
+        return Observable.create(new Observable.OnSubscribe<T>() {
+            @Override
+            public void call(Subscriber<? super T> subscriber) {
+                subscriber.onStart();
+                subscriber.onNext(findById(type, Long.valueOf(id)));
+                subscriber.onCompleted();
+            }
+        });
+    }
+
     public static <T> List<T> findById(Class<T> type, String[] ids) {
         String whereClause = "id IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
         return find(type, whereClause, ids);
@@ -169,6 +182,20 @@ private static SQLiteDatabase getSugarDataBase() {
         return findAsIterator(type, null, null, null, null, null);
     }
 
+    public static <T> Observable<T> findAllRx(final Class<T> type) {
+        return Observable.create(new Observable.OnSubscribe<T>() {
+            @Override
+            public void call(Subscriber<? super T> subscriber) {
+                subscriber.onStart();
+                Iterator<T> results = findAsIterator(type, null, null, null, null, null);
+                while (results.hasNext()) {
+                    subscriber.onNext(results.next());
+                }
+                subscriber.onCompleted();
+            }
+        });
+    }
+
     public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String... whereArgs) {
         return findAsIterator(type, whereClause, whereArgs, null, null, null);
     }
@@ -188,6 +215,20 @@ private static SQLiteDatabase getSugarDataBase() {
         return find(type, whereClause, whereArgs, null, null, null);
     }
 
+    public static <T> Observable<T> findRx(final Class<T> type, final String whereClause, final String... whereArgs) {
+        return Observable.create(new Observable.OnSubscribe<T>() {
+            @Override
+            public void call(Subscriber<? super T> subscriber) {
+                subscriber.onStart();
+                List<T> results = find(type, whereClause, whereArgs, null, null, null);
+                for (T r : results) {
+                    subscriber.onNext(r);
+                }
+                subscriber.onCompleted();
+            }
+        });
+    }
+
     public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
         Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
 
@@ -209,6 +250,20 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type);
     }
 
+    public static <T> Observable<List<T>> findRx(final Class<T> type, final String whereClause,
+                                                 final String[] whereArgs, final String groupBy,
+                                                 final String orderBy, final String limit) {
+        return Observable.create(new Observable.OnSubscribe<List<T>>() {
+            @Override
+            public void call(Subscriber<? super List<T>> subscriber) {
+                subscriber.onStart();
+                List<T> results = find(type, whereClause, whereArgs, groupBy, orderBy, limit);
+                subscriber.onNext(results);
+                subscriber.onCompleted();
+            }
+        });
+    }
+
     public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
         T entity;
         List<T> result = new ArrayList<>();
diff --git a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java b/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
index 1fe73708..595271d2 100644
--- a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
+++ b/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
@@ -3,7 +3,6 @@
 import com.orm.app.ClientApp;
 import com.orm.SugarContext;
 import com.orm.dsl.BuildConfig;
-import com.orm.helper.SugarTransactionHelper;
 import com.orm.model.TestRecord;
 
 import org.junit.Before;
diff --git a/library/src/test/java/com/orm/record/NestedMixedBATests.java b/library/src/test/java/com/orm/record/NestedMixedBATests.java
index c6f07da5..6a803404 100644
--- a/library/src/test/java/com/orm/record/NestedMixedBATests.java
+++ b/library/src/test/java/com/orm/record/NestedMixedBATests.java
@@ -1,7 +1,6 @@
 package com.orm.record;
 
 import com.orm.app.ClientApp;
-import com.orm.SugarRecord;
 import com.orm.dsl.BuildConfig;
 import com.orm.model.NestedMixedBAModel;
 import com.orm.model.RelationshipMixedAModel;
diff --git a/library/src/test/java/com/orm/util/ReflectionUtilTest.java b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
index 5d0dd12b..35eeaf16 100644
--- a/library/src/test/java/com/orm/util/ReflectionUtilTest.java
+++ b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
@@ -4,11 +4,13 @@
 import android.database.Cursor;
 
 import com.orm.SugarContext;
+import com.orm.SugarSerializer;
 import com.orm.app.ClientApp;
 import com.orm.dsl.BuildConfig;
 import com.orm.model.TestRecord;
 import com.orm.query.Select;
 
+import java.util.HashMap;
 import junit.framework.Assert;
 
 import org.junit.Test;
@@ -55,7 +57,7 @@ public void testAddFieldValueToColumn() throws NoSuchFieldException {
         Field column = TestRecord.class.getField("name");
         ContentValues values = new ContentValues();
 
-        ReflectionUtil.addFieldValueToColumn(values, column, record, context.getEntitiesMap());
+        ReflectionUtil.addFieldValueToColumn(values, column, record, context.getEntitiesMap(), context.getSerializers());
 
         Assert.assertEquals(record.getName(), values.getAsString("NAME"));
     }
@@ -86,6 +88,6 @@ public void testSetFieldValueFromCursor() throws NoSuchFieldException {
         TestRecord testRecord = new TestRecord();
         Field field = TestRecord.class.getField("name");
 
-        ReflectionUtil.setFieldValueFromCursor(cursor, field, testRecord);
+        ReflectionUtil.setFieldValueFromCursor(cursor, field, testRecord, new HashMap<Class<?>, SugarSerializer>());
     }
 }
