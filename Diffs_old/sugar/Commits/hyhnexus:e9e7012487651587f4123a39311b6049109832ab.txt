diff --git a/build.gradle b/build.gradle
index 030e1cb3..e7c4bc42 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,7 +7,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0'
+        classpath 'com.android.tools.build:gradle:3.0.1'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
@@ -28,6 +28,7 @@ allprojects {
         mavenLocal()
         mavenCentral()
         jcenter()
+        google()
     }
 }
 
diff --git a/example/build.gradle b/example/build.gradle
index a8b90f05..93de3bcd 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -1,13 +1,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion 26
+    buildToolsVersion "26.0.2"
 
     defaultConfig {
         applicationId "com.example"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 26
     }
     buildTypes {
         release {
@@ -21,5 +21,5 @@ android {
 
 dependencies {
     compile project (':library')
-    compile 'com.android.support:appcompat-v7:23.3.0'
+    compile 'com.android.support:appcompat-v7:27.0.2'
 }
diff --git a/gradle.properties b/gradle.properties
index 35b4c26f..da518bdb 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -20,15 +20,15 @@ org.gradle.daemon=true
 
 VERSION_NAME=2
 VERSION_CODE=2
-GROUP=com.github.satyan
+GROUP=com.github.hyhnexus
 
 POM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database
-POM_URL=https://github.com/satyan/sugar
-POM_SCM_URL=https://github.com/satyan/sugar
-POM_SCM_CONNECTION=scm:git@github.com:satyan/sugar.git
-POM_SCM_DEV_CONNECTION=scm:git@github.com:satyan/sugar.git
+POM_URL=https://github.com/hyhnexus/sugar
+POM_SCM_URL=https://github.com/hyhnexus/sugar
+POM_SCM_CONNECTION=scm:git@github.com:hyhnexus/sugar.git
+POM_SCM_DEV_CONNECTION=scm:git@github.com:hyhnexus/sugar.git
 POM_LICENCE_NAME=The Apache Software License, Version 2.0
 POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
 POM_LICENCE_DIST=repo
-POM_DEVELOPER_ID=satyan
-POM_DEVELOPER_NAME=Satya Narayan
\ No newline at end of file
+POM_DEVELOPER_ID=hyhnexus
+POM_DEVELOPER_NAME=hyhnexus
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b0bb3ffb..48f99524 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index 907162ee..fb10ec01 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -2,12 +2,12 @@ apply plugin: 'com.android.library'
 apply from: '../maven_push.gradle'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion 26
+    buildToolsVersion "26.0.2"
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 26
     }
     buildTypes {
         release {
@@ -27,10 +27,10 @@ dependencies {
     testCompile 'org.robolectric:robolectric:3.0'
 }
 
-task libraryJar(type: Jar) {
-    dependsOn assembleRelease
-    from android.sourceSets.main.java.srcDirs,
-         ['build/intermediates/classes/release/'] // Add the release classes into the jar
-    baseName 'sugar'
-}
+//task libraryJar(type: Jar) {
+//    dependsOn assembleRelease
+//    from android.sourceSets.main.java.srcDirs,
+//         ['build/intermediates/classes/release/'] // Add the release classes into the jar
+//    baseName 'sugar'
+//}
 
diff --git a/library/build.properties b/library/build.properties
index b5b95df0..b097da0b 100644
--- a/library/build.properties
+++ b/library/build.properties
@@ -1,3 +1,3 @@
 jdk.home.1.6=$JAVA_HOME
-android.home=/Users/ADMIN/Downloads/android-sdk-macosx/platforms/android-17/android.jar
-android.travis.home=/usr/local/android-sdk/platforms/android-17/android.jar
+android.home=D:\\android-sdk-windows\\platforms\\android-26\\android.jar
+android.travis.home=D:\\android-sdk-windows\\platforms\\android-26\\android.jar
diff --git a/library/gradle.properties b/library/gradle.properties
index 07fe1d15..42a8df22 100644
--- a/library/gradle.properties
+++ b/library/gradle.properties
@@ -1,3 +1,3 @@
 POM_NAME=Sugar ORM
-POM_ARTIFACT_ID=sugar
+POM_ARTIFACT_ID=hyhnexus
 POM_PACKAGING=aar
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index c25407fc..c54d82d9 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -44,9 +44,9 @@ public static SchemaGenerator getInstance() {
         return new SchemaGenerator();
     }
 
-    public void createDatabase(SQLiteDatabase sqLiteDatabase) {
-        List<Class> domainClasses = getDomainClasses();
-        for (Class domain : domainClasses) {
+    public void createDatabase(SQLiteDatabase sqLiteDatabase, Class<?>[] classes) {
+//        List<Class> domainClasses = getDomainClasses();
+        for (Class domain : classes) {
             createTable(domain, sqLiteDatabase);
             afterTableCreated(domain,sqLiteDatabase);
         }
@@ -262,7 +262,7 @@ protected String createTableSQL(Class<?> table) {
         if (table.isAnnotationPresent(MultiUnique.class)) {
             String constraint = table.getAnnotation(MultiUnique.class).value();
 
-            sb.append(", UNIQUE(");
+            sb.append(", PRIMARY KEY (");
 
             String[] constraintFields = constraint.split(",");
             for(int i = 0; i < constraintFields.length; i++) {
diff --git a/library/src/main/java/com/orm/SugarApp.java b/library/src/main/java/com/orm/SugarApp.java
index cab35ca7..55c18208 100644
--- a/library/src/main/java/com/orm/SugarApp.java
+++ b/library/src/main/java/com/orm/SugarApp.java
@@ -2,12 +2,15 @@
 
 import android.app.Application;
 
+/**
+ * Use {@link SugarContext.init()} instead
+ */
+@Deprecated
 public class SugarApp extends Application {
-
     @Override
     public void onCreate() {
         super.onCreate();
-        SugarContext.init(this);
+        SugarContext.init(this, null);
     }
 
     @Override
@@ -15,5 +18,4 @@ public void onTerminate() {
         super.onTerminate();
         SugarContext.terminate();
     }
-
-}
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 61609986..d3104bdc 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -9,17 +9,16 @@
 import java.util.WeakHashMap;
 
 public class SugarContext {
-
     private static SugarDbConfiguration dbConfiguration = null;
     private static SugarContext instance = null;
     private SugarDb sugarDb;
     private Map<Object, Long> entitiesMap;
 
-    private SugarContext() {
-        this.sugarDb = SugarDb.getInstance();
+    private SugarContext(Class<?>[] classes) {
+        this.sugarDb = SugarDb.getInstance(classes);
         this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Long>());
     }
-    
+
     public static SugarContext getSugarContext() {
         if (instance == null) {
             throw new NullPointerException("SugarContext has not been initialized properly. Call SugarContext.init(Context) in your Application.onCreate() method and SugarContext.terminate() in your Application.onTerminate() method.");
@@ -27,18 +26,17 @@ public static SugarContext getSugarContext() {
         return instance;
     }
 
-    public static void init(Context context) {
+    public static void init(Context context, Class<?>[] classes) {
         ContextUtil.init(context);
-        instance = new SugarContext();
+        instance = new SugarContext(classes);
         dbConfiguration = null;
     }
 
-    public static void init(Context context, SugarDbConfiguration configuration) {
-        init(context);
+    public static void init(Context context, SugarDbConfiguration configuration, Class<?>[] classes) {
+        init(context, classes);
         dbConfiguration = configuration;
     }
 
-
     public static void terminate() {
         if (instance == null) {
             return;
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index bc71ba23..7e903074 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -19,20 +19,22 @@
     private final SchemaGenerator schemaGenerator;
     private SQLiteDatabase sqLiteDatabase;
     private int openedConnections = 0;
+    private Class<?>[] mClasses;
 
     //Prevent instantiation
-    private SugarDb() {
+    private SugarDb(Class<?>[] classes) {
         super(getContext(), getDbName(), new SugarCursorFactory(ManifestHelper.isDebugEnabled()), getDatabaseVersion());
+        this.mClasses = classes;
         schemaGenerator = SchemaGenerator.getInstance();
     }
 
-    public static SugarDb getInstance() {
-        return new SugarDb();
+    public static SugarDb getInstance(Class<?>[] classes) {
+        return new SugarDb(classes);
     }
 
     @Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
-        schemaGenerator.createDatabase(sqLiteDatabase);
+        schemaGenerator.createDatabase(sqLiteDatabase, mClasses);
     }
 
     @Override
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 2ade2ba3..e608691c 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -7,6 +7,7 @@
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
 import android.util.Log;
+
 import com.orm.annotation.Table;
 import com.orm.annotation.Unique;
 import com.orm.helper.ManifestHelper;
@@ -17,7 +18,13 @@
 import com.orm.util.SugarCursor;
 
 import java.lang.reflect.Field;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.NoSuchElementException;
 
 import static com.orm.SugarContext.getSugarContext;
 
@@ -55,7 +62,7 @@ private static SQLiteDatabase getSugarDataBase() {
         try {
             sqLiteDatabase.beginTransaction();
             sqLiteDatabase.setLockingEnabled(false);
-            for (T object: objects) {
+            for (T object : objects) {
                 save(object);
             }
             sqLiteDatabase.setTransactionSuccessful();
@@ -80,7 +87,7 @@ private static SQLiteDatabase getSugarDataBase() {
         try {
             sqLiteDatabase.beginTransaction();
             sqLiteDatabase.setLockingEnabled(false);
-            for (T object: objects) {
+            for (T object : objects) {
                 update(object);
             }
             sqLiteDatabase.setTransactionSuccessful();
@@ -114,7 +121,7 @@ private static SQLiteDatabase getSugarDataBase() {
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
             deletedRows = 0;
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "Error in deleting in transaction " + e.getMessage());
             }
         } finally {
@@ -147,7 +154,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return find(type, whereClause, ids);
     }
 
-    public static <T> T first(Class<T>type) {
+    public static <T> T first(Class<T> type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID ASC LIMIT 1");
         if (list.isEmpty()) {
@@ -156,7 +163,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return list.get(0);
     }
 
-    public static <T> T last(Class<T>type) {
+    public static <T> T last(Class<T> type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID DESC LIMIT 1");
         if (list.isEmpty()) {
@@ -210,7 +217,7 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> List<T> findOneToMany(Class<T> type, String relationFieldName, Object relationObject, Long relationObjectId) {
-        String args[] = { String.valueOf(relationObjectId) };
+        String args[] = {String.valueOf(relationObjectId)};
         String whereClause = NamingHelper.toSQLNameDefault(relationFieldName) + " = ?";
 
         Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, args,
@@ -219,11 +226,11 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type, relationFieldName, relationObject);
     }
 
-    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type) {
         return getEntitiesFromCursor(cursor, type, null, null);
     }
 
-    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject){
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject) {
         T entity;
         List<T> result = new ArrayList<>();
         try {
@@ -252,12 +259,12 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> long count(Class<T> type, String whereClause, String... whereArgs) {
-    	return count(type, whereClause, whereArgs, null, null, null);
+        return count(type, whereClause, whereArgs, null, null, null);
     }
 
     public static <T> long count(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
         long result = -1;
-        String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
+        String filter = (!TextUtils.isEmpty(whereClause)) ? " where " + whereClause : "";
         SQLiteStatement sqliteStatement;
         try {
             sqliteStatement = getSugarDataBase().compileStatement("SELECT count(*) FROM " + NamingHelper.toTableName(type) + filter);
@@ -282,7 +289,7 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> long sum(Class<T> type, String field) {
-        return sum(type, field, null, null);
+        return sum(type, field, null, new String[]{});
     }
 
     public static <T> long sum(Class<T> type, String field, String whereClause, String... whereArgs) {
@@ -329,7 +336,7 @@ static long save(SQLiteDatabase db, Object object) {
 
         boolean isSugarEntity = isSugarEntity(object.getClass());
         if (isSugarEntity && entitiesMap.containsKey(object)) {
-                values.put("id", entitiesMap.get(object));
+            values.put("id", entitiesMap.get(object));
         }
 
         long id = db.insertWithOnConflict(NamingHelper.toTableName(object.getClass()), null, values,
@@ -370,7 +377,7 @@ static long update(SQLiteDatabase db, Object object) {
         List<String> whereArgs = new ArrayList<>();
 
         for (Field column : columns) {
-            if(column.isAnnotationPresent(Unique.class)) {
+            if (column.isAnnotationPresent(Unique.class)) {
                 try {
                     column.setAccessible(true);
                     String columnName = NamingHelper.toColumnName(column);
@@ -407,12 +414,12 @@ public boolean delete() {
         Long id = getId();
         Class<?> type = getClass();
         if (id != null && id > 0L) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
             }
             return getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
         } else {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
             }
             return false;
@@ -428,23 +435,23 @@ public static boolean delete(Object object) {
                 Long id = (Long) field.get(object);
                 if (id != null && id > 0L) {
                     boolean deleted = getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
-                    if(ManifestHelper.isDebugEnabled()) {
+                    if (ManifestHelper.isDebugEnabled()) {
                         Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
                     }
                     return deleted;
                 } else {
-                    if(ManifestHelper.isDebugEnabled()) {
+                    if (ManifestHelper.isDebugEnabled()) {
                         Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
                     }
                     return false;
                 }
             } catch (NoSuchFieldException e) {
-                if(ManifestHelper.isDebugEnabled()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
                 }
                 return false;
             } catch (IllegalAccessException e) {
-                if(ManifestHelper.isDebugEnabled()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
                 }
                 return false;
@@ -452,7 +459,7 @@ public static boolean delete(Object object) {
         } else if (SugarRecord.class.isAssignableFrom(type)) {
             return ((SugarRecord) object).delete();
         } else {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
             }
             return false;
@@ -534,12 +541,12 @@ public void remove() {
         }
     }
 
-    public static String[] replaceArgs(String[] args){
+    public static String[] replaceArgs(String[] args) {
 
-        String [] replace = new String[args.length];
-        for (int i=0; i<args.length; i++){
+        String[] replace = new String[args.length];
+        for (int i = 0; i < args.length; i++) {
 
-            replace[i]= (args[i].equals("true")) ? replace[i]="1" : (args[i].equals("false")) ? replace[i]="0" : args[i];
+            replace[i] = (args[i].equals("true")) ? replace[i] = "1" : (args[i].equals("false")) ? replace[i] = "0" : args[i];
 
         }
 
diff --git a/library/src/test/java/com/orm/app/ClientApp.java b/library/src/test/java/com/orm/app/ClientApp.java
index e9943aea..a62f92c2 100644
--- a/library/src/test/java/com/orm/app/ClientApp.java
+++ b/library/src/test/java/com/orm/app/ClientApp.java
@@ -5,11 +5,11 @@
 import com.orm.SugarContext;
 
 public class ClientApp extends Application {
-
+    private static final Class<?>[] CLASSES = new Class[]{};
     @Override
     public void onCreate() {
         super.onCreate();
-        SugarContext.init(this);
+        SugarContext.init(this, CLASSES);
     }
 
     @Override
