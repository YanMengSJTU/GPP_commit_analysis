diff --git a/dist/sugar-1.3_beta.jar b/dist/sugar-1.3_beta.jar
index b67161da..542e2bdc 100644
Binary files a/dist/sugar-1.3_beta.jar and b/dist/sugar-1.3_beta.jar differ
diff --git a/example/.classpath b/example/.classpath
new file mode 100644
index 00000000..7bc01d9a
--- /dev/null
+++ b/example/.classpath
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/example/.project b/example/.project
new file mode 100644
index 00000000..8687ca72
--- /dev/null
+++ b/example/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>SugarActivity</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/example/default.properties b/example/default.properties
deleted file mode 100755
index e2e8061f..00000000
--- a/example/default.properties
+++ /dev/null
@@ -1,11 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "build.properties", and override values to adapt the script to your
-# project structure.
-
-# Project target.
-target=android-8
diff --git a/example/example/project.properties b/example/example/project.properties
new file mode 100644
index 00000000..debfe960
--- /dev/null
+++ b/example/example/project.properties
@@ -0,0 +1,15 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-3
+android.library.reference.1=../library
diff --git a/example/libs/sugar-1.1.jar b/example/libs/sugar-1.1.jar
deleted file mode 100755
index 96a6b77e..00000000
Binary files a/example/libs/sugar-1.1.jar and /dev/null differ
diff --git a/example/project.properties b/example/project.properties
new file mode 100644
index 00000000..a6cf15da
--- /dev/null
+++ b/example/project.properties
@@ -0,0 +1,15 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-19
+android.library.reference.1=../library
diff --git a/example/src/com/example/AddNoteActivity.java b/example/src/com/example/AddNoteActivity.java
index 4302c7ae..4c1585d8 100755
--- a/example/src/com/example/AddNoteActivity.java
+++ b/example/src/com/example/AddNoteActivity.java
@@ -9,7 +9,6 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-
 public class AddNoteActivity extends Activity {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -38,13 +37,12 @@ public void onCreate(Bundle savedInstanceState) {
 
         save.setOnClickListener(new View.OnClickListener() {
             public void onClick(View view) {
-                Tag tag = new Tag(AddNoteActivity.this, tagBox.getText().toString());
+                Tag tag = new Tag(tagBox.getText().toString());
                 tag.save();
-                new Note(AddNoteActivity.this, 10, titleBox.getText().toString(), descBox.getText().toString(),tag).save();
+                new Note( 10, titleBox.getText().toString(), descBox.getText().toString(),tag).save();
                 Intent intent = new Intent(AddNoteActivity.this, NoteListActivity.class);
                 startActivity(intent);
             }
         });
-
     }
 }
\ No newline at end of file
diff --git a/example/src/com/example/Note.java b/example/src/com/example/Note.java
index 1105a30d..440f142e 100755
--- a/example/src/com/example/Note.java
+++ b/example/src/com/example/Note.java
@@ -1,65 +1,62 @@
 package com.example;
 
-import android.content.Context;
 import com.orm.SugarRecord;
 
-public class Note extends SugarRecord<Note>{
-    private int noteId;
-    private String title;
-    private String description;
-   private String name;
-    private Integer noteNumber = 2;
-    private Float tagNumber = 4.0f;
-    private float tagNo = 5.0f;
-    private Boolean isTag = true;
-    private boolean isTagged = false;
-    private Double noteTagNo = 40.5;
-    private double noteTagNumber = 24.4;
-    private Tag tag;
-
-    public Note(Context context){
-        super(context);
-    }
-
-    public Note(Context context, int noteId, String title, String description, Tag tag) {
-        super(context);
-        this.noteId = noteId;
-        this.title = title;
-        this.description = description;
-        this.tag = tag;
-    }
-
-    public int getNoteId() {
-        return noteId;
-    }
-
-    public void setNoteId(int noteId) {
-        this.noteId = noteId;
-    }
-
-    public String getTitle() {
-        return title;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public Tag getTag() {
-        return tag;
-    }
-
-    public void setDescription(String description){
-        this.description = description;
-    }
-
-    public void setTitle(String title) {
-        this.title = title;
-    }
-
-    @Override
-    public String toString() {
-        return  title + "id: " + id + " - " + tag + " " + tag.getId();
-
-    }
+@SuppressWarnings("unused")
+public class Note extends SugarRecord<Note> {
+	private int noteId;
+	private String title;
+	private String description;
+	private String name;
+	private Integer noteNumber = 2;
+	private Float tagNumber = 4.0f;
+	private float tagNo = 5.0f;
+	private Boolean isTag = true;
+	private boolean isTagged = false;
+	private Double noteTagNo = 40.5;
+	private double noteTagNumber = 24.4;
+	private Tag tag;
+
+	public Note() {
+	}
+
+	public Note(int noteId, String title, String description, Tag tag) {
+		this.noteId = noteId;
+		this.title = title;
+		this.description = description;
+		this.tag = tag;
+	}
+
+	public int getNoteId() {
+		return noteId;
+	}
+
+	public void setNoteId(int noteId) {
+		this.noteId = noteId;
+	}
+
+	public String getTitle() {
+		return title;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public Tag getTag() {
+		return tag;
+	}
+
+	public void setDescription(String description) {
+		this.description = description;
+	}
+
+	public void setTitle(String title) {
+		this.title = title;
+	}
+
+	@Override
+	public String toString() {
+		return title + "id: " + id + " - " + tag + " " + tag.getId();
+	}
 }
diff --git a/example/src/com/example/NoteListActivity.java b/example/src/com/example/NoteListActivity.java
index bdb09993..d722b361 100755
--- a/example/src/com/example/NoteListActivity.java
+++ b/example/src/com/example/NoteListActivity.java
@@ -3,8 +3,11 @@
 import android.app.ListActivity;
 import android.content.Intent;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import android.widget.ArrayAdapter;
+
+import com.orm.query.Condition;
 import com.orm.query.Select;
 
 import java.util.List;
@@ -25,6 +28,10 @@ public void onClick(View view) {
                 startActivity(intent);
             }
         });
+        
+        // TEST COUNT
+		//        android.util.Log.d("COUNT", "Count: " + Select.from(Note.class).where("title like '%ba%'").count() +"/"+notes.size());
+        Log.d("COUNT", "Count: " + Select.from(Note.class).where(new Condition[]{new Condition("title").eq("note")}).count() + "/" + notes.size());
     }
 
 }
\ No newline at end of file
diff --git a/example/src/com/example/NoteRelation.java b/example/src/com/example/NoteRelation.java
index 84b5be2a..b2196b37 100644
--- a/example/src/com/example/NoteRelation.java
+++ b/example/src/com/example/NoteRelation.java
@@ -3,36 +3,31 @@
 import android.content.Context;
 import com.orm.SugarRecord;
 
-public class NoteRelation  extends SugarRecord<Note> {
-    String name;
-    int noteId;
+public class NoteRelation extends SugarRecord<Note> {
+	String name;
+	int noteId;
 
+	public NoteRelation() {
+	}
 
-    public NoteRelation(Context context) {
-        super(context);
-    }
+	public NoteRelation(Context context, String name, int noteId) {
+		this.name = name;
+		this.noteId = noteId;
+	}
 
-    public NoteRelation(Context context, String name, int noteId) {
-        super(context);
-        this.name = name;
-        this.noteId = noteId;
+	public String getName() {
+		return name;
+	}
 
-    }
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public int getNoteId() {
-        return noteId;
-    }
-
-    public void setNoteId(int noteId) {
-        this.noteId = noteId;
-    }
+	public void setName(String name) {
+		this.name = name;
+	}
 
+	public int getNoteId() {
+		return noteId;
+	}
 
+	public void setNoteId(int noteId) {
+		this.noteId = noteId;
+	}
 }
diff --git a/example/src/com/example/SugarActivity.java b/example/src/com/example/SugarActivity.java
index a719c2f8..1ecaff96 100755
--- a/example/src/com/example/SugarActivity.java
+++ b/example/src/com/example/SugarActivity.java
@@ -2,61 +2,52 @@
 
 import android.app.Activity;
 import android.content.Intent;
-import android.database.sqlite.SQLiteDatabase;
 import android.os.Bundle;
-import android.util.Log;
-import com.orm.Database;
-import com.orm.SugarApp;
-
-public class SugarActivity extends Activity
-{
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-         Note.deleteAll(Note.class);
-        TextNote.deleteAll(TextNote.class);
-        Tag.deleteAll(Tag.class);
-        initDb();
-        Intent intent = new Intent(this, NoteListActivity.class);
-        startActivity(intent);
-    }
-
-     private void initDb() {
-
-        Tag t1 = new Tag(this, "tag1");
-        Tag t2 = new Tag(this, "tag2");
-        t1.save();
-        t2.save();
-
-
-
-
-        Note n1 = new Note(this, 10, "note1", "description1", t1);
-        Note n2 = new Note(this, 10, "note2", "description2", t1);
-        Note n3 = new Note(this, 10, "note3", "description3", t2);
-        Note n4 = new Note(this, 10, "note4", "description4", t2);
-
-         TextNote textNote = new TextNote(this);
-         textNote.desc = "Test";
-
-         textNote.save();
-        n1.save();
-        n2.save();
-        n3.save();
-        n4.save();
-
-         n1.setDescription("matrix");
-         n1.setTitle("atrix");
-         n1.save();
-         n2.setDescription("matrix");
-         n2.setTitle("satrix");
-         n2.save();
-         n3.setDescription("matrix");
-         n3.setTitle("batrix");
-         n3.save();
-
-    }
+
+public class SugarActivity extends Activity {
+	/** Called when the activity is first created. */
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.main);
+		Note.deleteAll(Note.class);
+		TextNote.deleteAll(TextNote.class);
+		Tag.deleteAll(Tag.class);
+		initDb();
+		Intent intent = new Intent(this, NoteListActivity.class);
+		startActivity(intent);
+	}
+
+	private void initDb() {
+
+		Tag t1 = new Tag("tag1");
+		Tag t2 = new Tag("tag2");
+		t1.save();
+		t2.save();
+
+		Note n1 = new Note(10, "note1", "description1", t1);
+		Note n2 = new Note(10, "note2", "description2", t1);
+		Note n3 = new Note(10, "note3", "description3", t2);
+		Note n4 = new Note(10, "note4", "description4", t2);
+
+		TextNote textNote = new TextNote();
+		textNote.desc = "Test";
+
+		textNote.save();
+		n1.save();
+		n2.save();
+		n3.save();
+		n4.save();
+
+		n1.setDescription("matrix");
+		n1.setTitle("atrix");
+		n1.save();
+		n2.setDescription("matrix");
+		n2.setTitle("satrix");
+		n2.save();
+		n3.setDescription("matrix");
+		n3.setTitle("batrix");
+		n3.save();
+
+	}
 }
diff --git a/example/src/com/example/Tag.java b/example/src/com/example/Tag.java
index 76cb7520..9bdbdd16 100755
--- a/example/src/com/example/Tag.java
+++ b/example/src/com/example/Tag.java
@@ -1,26 +1,23 @@
 package com.example;
 
-import android.content.Context;
 import com.orm.SugarRecord;
 
-public class Tag extends SugarRecord<Tag>{
-    private String name;
+public class Tag extends SugarRecord<Tag> {
+	private String name;
 
-    public Tag(Context context, String name) {
-        super(context);
-        this.name = name;
-    }
+	public Tag(String name) {
+		this.name = name;
+	}
 
-    public Tag(Context context) {
-        super(context);
-    }
+	public Tag() {
+	}
 
-    public String getName() {
-        return name;
-    }
+	public String getName() {
+		return name;
+	}
 
-    @Override
-    public String toString() {
-        return getName();
-    }
+	@Override
+	public String toString() {
+		return getName();
+	}
 }
diff --git a/example/src/com/example/TextNote.java b/example/src/com/example/TextNote.java
index 1cd5a343..7f95b9d9 100644
--- a/example/src/com/example/TextNote.java
+++ b/example/src/com/example/TextNote.java
@@ -1,14 +1,9 @@
 package com.example;
 
-import android.content.Context;
-
 public class TextNote extends Note {
 
-    public String desc;
-
-    public TextNote(Context context) {
-        super(context);
-    }
-
+	public String desc;
 
+	public TextNote() {
+	}
 }
diff --git a/library/build.gradle b/library/build.gradle
new file mode 100644
index 00000000..6911754f
--- /dev/null
+++ b/library/build.gradle
@@ -0,0 +1,29 @@
+buildscript {
+        repositories {
+            mavenCentral()
+        }
+
+        dependencies {
+            classpath 'com.android.tools.build:gradle:0.7.+'
+        }
+    }
+
+    apply plugin: 'android-library'
+
+    dependencies {
+	    compile 'com.android.support:support-v4:13.0.+'
+    }
+
+    android {
+        compileSdkVersion 17
+        buildToolsVersion "17.0.0"
+        sourceSets {
+            main {
+                manifest.srcFile 'AndroidManifest.xml'
+                java.srcDirs = ['src']
+                resources.srcDirs = ['src']
+                res.srcDirs = ['res']
+                assets.srcDirs = ['assets']
+            }
+        }
+    }
diff --git a/library/lint.xml b/library/lint.xml
new file mode 100644
index 00000000..ee0eead5
--- /dev/null
+++ b/library/lint.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+</lint>
\ No newline at end of file
diff --git a/library/project.properties b/library/project.properties
index 4a46b9d1..61afc8fe 100644
--- a/library/project.properties
+++ b/library/project.properties
@@ -12,4 +12,4 @@
 
 android.library=true
 # Project target.
-target=android-17
+target=android-19
diff --git a/library/src/com/orm/QueryBuilder.java b/library/src/com/orm/QueryBuilder.java
index 4cb1160b..8b1ca32e 100644
--- a/library/src/com/orm/QueryBuilder.java
+++ b/library/src/com/orm/QueryBuilder.java
@@ -13,8 +13,7 @@ public static String getColumnType(Class<?> type) {
                 (type.equals(Long.class)) ||
                 (type.equals(Long.TYPE)) || (
                 (!type.isPrimitive()) &&
-                        (type.getSuperclass() != null) &&
-                        (type.getSuperclass().equals(SugarRecord.class)))) {
+                        (SugarRecord.class.isAssignableFrom(type))))  {
             return "INTEGER";
         }
 
@@ -25,6 +24,10 @@ public static String getColumnType(Class<?> type) {
             return "FLOAT";
         }
 
+        if (type.getName().equals(byte[].class)) {
+            return "BLOB";
+        }
+
         if ((type.equals(String.class)) || 
                 (type.equals(Character.TYPE)) ||
                 (type.equals(android.net.Uri.class))) {
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index 87051583..f58450b9 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteException;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 import dalvik.system.DexFile;
@@ -66,7 +67,7 @@ public SugarDb(Context context) {
             return null;
         } else {
             try {
-                return (T) discoveredClass.getDeclaredConstructor(Context.class).newInstance(context);
+                return (T) discoveredClass.getDeclaredConstructor().newInstance();
             } catch (InstantiationException e) {
                 Log.e("Sugar", e.getMessage());
             } catch (IllegalAccessException e) {
@@ -132,12 +133,30 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
     @Override
     public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
         Log.i("Sugar", "upgrading sugar");
+        // check if some tables are to be created
+        doUpgrade(sqLiteDatabase);
+
         if (!executeSugarUpgrade(sqLiteDatabase, oldVersion, newVersion)) {
             deleteTables(sqLiteDatabase);
             onCreate(sqLiteDatabase);
         }
     }
 
+    /**
+     * Create the tables that do not exist.
+     */
+    private <T extends SugarRecord<?>> void doUpgrade(SQLiteDatabase sqLiteDatabase) {
+        List<T> domainClasses = getDomainClasses(context);
+        for (T domain : domainClasses) {
+            try {// we try to do a select, if fails then (?) there isn't the table
+                sqLiteDatabase.query(domain.tableName, null, null, null, null, null, null);
+            } catch (SQLiteException e) {
+                Log.i("Sugar", String.format("creating table on update (error was '%s')", e.getMessage()));
+                createTable(domain, sqLiteDatabase);
+            }
+        }
+    }
+
     public <T extends SugarRecord<?>> void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<T> tables = getDomainClasses(this.context);
         for (T table : tables) {
@@ -174,20 +193,18 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
     }
 
     private void executeScript(SQLiteDatabase db, String file) {
-        StringBuilder text = new StringBuilder();
         try {
             InputStream is = this.context.getAssets().open("sugar_upgrades/" + file);
             BufferedReader reader = new BufferedReader(new InputStreamReader(is));
             String line;
             while ((line = reader.readLine()) != null) {
-                text.append(line);
-                text.append("\n");
+                Log.i("Sugar script", line);
+                db.execSQL(line.toString());
             }
         } catch (IOException e) {
             Log.e("Sugar", e.getMessage());
         }
 
-        Log.i("Sugar", "script: " + text.toString());
-        db.execSQL(text.toString());
+        Log.i("Sugar", "script executed: " + file);
     }
 }
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index 25dae204..02c611bc 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -1,12 +1,13 @@
 package com.orm;
 
 import android.content.ContentValues;
-import android.content.Context;
 import android.database.Cursor;
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
+import android.database.sqlite.SQLiteStatement;
 import android.net.Uri;
+import android.text.TextUtils;
 import android.util.Log;
 import com.orm.dsl.Ignore;
 
@@ -18,30 +19,13 @@
 
 import static com.orm.SugarApp.getSugarContext;
 
-public class SugarRecord<T> {
+public class SugarRecord<T>{
 
-    @Ignore
-    private Context context;
-    @Ignore
-    private SugarApp application;
-    @Ignore
-    private Database database;
     @Ignore
     String tableName = getSqlName();
 
     protected Long id = null;
 
-    public SugarRecord(Context context) {
-        this.context = context;
-        // this.application = (SugarApp) context.getApplicationContext();
-        this.database = ((SugarApp) context.getApplicationContext()).getDatabase();
-    }
-
-    public SugarRecord(){
-        this.context = SugarApp.getSugarContext();
-        this.database = SugarApp.getSugarContext().getDatabase();
-    }
-
     public void delete() {
         if (id != null)
         {
@@ -71,12 +55,35 @@ public void delete() {
     }
     
     public void save() {
+        save(getSugarContext().getDatabase().getDB());
+    }
+
+    public static <T extends SugarRecord<?>> void saveInTx(T... objects ) {
+        saveInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T extends SugarRecord<?>> void saveInTx(Collection<T> objects ) {
         SQLiteDatabase sqLiteDatabase = getSugarContext().getDatabase().getDB();
-        save(sqLiteDatabase);
+
+        try{
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for(T object: objects){
+                object.save(sqLiteDatabase);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        }catch (Exception e){
+            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
+        }finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+
     }
 
     protected void save(SQLiteDatabase db) {
-        
+
         List<Field> columns = getTableFields();
         ContentValues values = new ContentValues(columns.size());
         for (Field column : columns) {
@@ -144,47 +151,6 @@ else if (columnType.equals(byte[].class)) {
         }
     }
 
-    @SuppressWarnings("deprecation")
-    public static <T extends SugarRecord<?>> void saveInTx(T... objects ) {
-
-        SQLiteDatabase sqLiteDatabase = getSugarContext().getDatabase().getDB();
-
-        try{
-            sqLiteDatabase.beginTransaction();
-            sqLiteDatabase.setLockingEnabled(false);
-            for(T object: objects){
-                object.save(sqLiteDatabase);
-            }
-            sqLiteDatabase.setTransactionSuccessful();
-        }catch (Exception e){
-            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
-        }finally {
-            sqLiteDatabase.endTransaction();
-            sqLiteDatabase.setLockingEnabled(true);
-        }
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T extends SugarRecord<?>> void saveInTx(Collection<T> objects ) {
-
-        SQLiteDatabase sqLiteDatabase = getSugarContext().getDatabase().getDB();
-
-        try{
-            sqLiteDatabase.beginTransaction();
-            sqLiteDatabase.setLockingEnabled(false);
-            for(T object: objects){
-                object.save(sqLiteDatabase);
-            }
-            sqLiteDatabase.setTransactionSuccessful();
-        }catch (Exception e){
-            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
-        }finally {
-            sqLiteDatabase.endTransaction();
-            sqLiteDatabase.setLockingEnabled(true);
-        }
-
-    }
-
     public static <T extends SugarRecord<?>> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
@@ -195,6 +161,33 @@ else if (columnType.equals(byte[].class)) {
         return list.get(0);
     }
 
+    public static <T extends SugarRecord<?>> Iterator<T> findAll(Class<T> type) {
+        return findAsIterator(type, null, null, null, null, null);
+    }
+
+    public static <T extends SugarRecord<?>> Iterator<T> findAsIterator(Class<T> type,
+                                                                        String whereClause, String... whereArgs) {
+        return findAsIterator(type, whereClause, whereArgs, null, null, null);
+    }
+
+    public static <T extends SugarRecord<?>> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
+        Database db = getSugarContext().getDatabase();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+        Cursor c = sqLiteDatabase.rawQuery(query, arguments);
+        return new CursorIterator<T>(type, c);
+    }
+
+    public static <T extends SugarRecord<?>> Iterator<T> findAsIterator(Class<T> type,
+                                                                    String whereClause, String[] whereArgs,
+                                                                    String groupBy, String orderBy, String limit) {
+
+        Database db = getSugarContext().getDatabase();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+        Cursor c = sqLiteDatabase.query(getTableName(type), null,
+                whereClause, whereArgs, groupBy, null, orderBy, limit);
+        return new CursorIterator<T>(type, c);
+    }
+
     public static <T extends SugarRecord<?>> List<T> find(Class<T> type,
                                                        String whereClause, String... whereArgs) {
         return find(type, whereClause, whereArgs, null, null, null);
@@ -210,7 +203,7 @@ else if (columnType.equals(byte[].class)) {
 
         try {
             while (c.moveToNext()) {
-                entity = type.getDeclaredConstructor(Context.class).newInstance(getSugarContext());
+                entity = type.getDeclaredConstructor().newInstance();
                 entity.inflate(c);
                 toRet.add(entity);
             }
@@ -237,7 +230,7 @@ public static void executeQuery(String query, String... arguments){
                 whereClause, whereArgs, groupBy, null, orderBy, limit);
         try {
             while (c.moveToNext()) {
-                entity = type.getDeclaredConstructor(Context.class).newInstance(getSugarContext());
+                entity = type.getDeclaredConstructor().newInstance();
                 entity.inflate(c);
                 toRet.add(entity);
             }
@@ -269,6 +262,34 @@ public static void executeQuery(String query, String... arguments){
          } 
     }
     
+    public static <T extends SugarRecord<?>> long count(Class<?> type,
+            String whereClause, String[] whereArgs,
+            String groupBy, String orderBy, String limit) {
+    	
+    	Database db = getSugarContext().getDatabase();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+
+        long toRet = -1;
+        String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
+        SQLiteStatement sqLiteStatament = sqLiteDatabase.compileStatement("SELECT count(*) FROM " + getTableName(type) + filter);
+
+        if (whereArgs != null) {
+            for (int i = whereArgs.length; i != 0; i--) {
+                sqLiteStatament.bindString(i, whereArgs[i - 1]);
+            }
+        }
+
+        try {
+            toRet = sqLiteStatament.simpleQueryForLong();
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            sqLiteStatament.close();
+        }
+        
+        return toRet;
+    }
+
     @SuppressWarnings("unchecked")
     protected void inflate(Cursor cursor) {
         Map<Field, Long> entities = new HashMap<Field, Long>();
@@ -367,7 +388,7 @@ else if (field.getName() == "shadow$_klass_")
                     // skip this, it's generated by ART
                 }
                 else
-                    Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + fieldType.getName() + ")");
+                    Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + " (" + fieldType.getName() + ")");
             } catch (IllegalArgumentException e) {
                 Log.e("Sugar", "Field set error (IllegalArgumentException). Please check the field " + field.getName());
             } catch (IllegalAccessException e) {
@@ -431,4 +452,46 @@ public Long getId() {
     public void setId(Long id) {
         this.id = id;
     }
+
+    static class CursorIterator<E extends SugarRecord<?>> implements Iterator<E> {
+        Class<E> type;
+        Cursor cursor;
+
+        public CursorIterator(Class<E> type, Cursor cursor) {
+            this.type = type;
+            this.cursor = cursor;
+        }
+
+        public boolean hasNext() {
+            return cursor != null && !cursor.isClosed() && !cursor.isAfterLast();
+        }
+
+        public E next() {
+            E entity = null;
+            if (cursor == null || cursor.isAfterLast()) {
+                throw new NoSuchElementException();
+            }
+
+            if (cursor.isBeforeFirst()) {
+                cursor.moveToFirst();
+            }
+
+            try {
+                entity = type.getDeclaredConstructor().newInstance();
+                entity.inflate(cursor);
+            } catch (Exception e) {
+                e.printStackTrace();
+            } finally {
+                cursor.moveToNext();
+                if (cursor.isAfterLast()) {
+                    cursor.close();
+                }
+            }
+            return entity;
+        }
+
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }
 }
diff --git a/library/src/com/orm/query/Select.java b/library/src/com/orm/query/Select.java
index 9e99c2f2..2c82bb65 100644
--- a/library/src/com/orm/query/Select.java
+++ b/library/src/com/orm/query/Select.java
@@ -3,9 +3,10 @@
 import com.orm.SugarRecord;
 
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 
-public class Select<T extends SugarRecord<?>> {
+public class Select<T extends SugarRecord<?>> implements Iterable<T> {
 
     private Class<T> record;
     private String[] arguments;
@@ -21,33 +22,33 @@ public Select(Class<T> record) {
         this.record = record;
     }
 
-    public static <T extends SugarRecord<?>> Select<?> from(Class<T> record) {
+    public static <T extends SugarRecord<T>> Select<T> from(Class<T> record) {
         return new Select<T>(record);
     }
 
-    public Select<?> orderBy(String prop) {
+    public Select<T> orderBy(String prop) {
         this.orderBy = prop;
         return this;
     }
 
-    public Select<?> groupBy(String prop) {
+    public Select<T> groupBy(String prop) {
         this.groupBy = prop;
         return this;
     }
 
-    public Select<?> limit(String limit) {
+    public Select<T> limit(String limit) {
         this.limit = limit;
         return this;
     }
 
 
 
-    public Select<?> where(String whereClause) {
+    public Select<T> where(String whereClause) {
         this.whereClause = whereClause;
         return this;
     }
 
-    public Select<?> where(Condition... condition) {
+    public Select<T> where(Condition... condition) {
 
         mergeConditions(condition, Condition.Type.AND);
 
@@ -70,26 +71,25 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
                 whereClause += condition.getProperty() + condition.getCheckSymbol() + "? ";
                 args.add(condition.getValue());
             }
-
         }
     }
 
-    public Select<?> whereOr(Condition... args) {
+    public Select<T> whereOr(Condition... args) {
         mergeConditions(args, Condition.Type.OR);
         return this;
     }
 
-    public Select<?> and(Condition... args) {
+    public Select<T> and(Condition... args) {
         mergeConditions(args, Condition.Type.AND);
         return this;
     }
 
-    public Select<?> or(Condition... args) {
+    public Select<T> or(Condition... args) {
         mergeConditions(args, Condition.Type.OR);
         return this;
     }
 
-    public Select<?> where(String whereClause, String[] args) {
+    public Select<T> where(String whereClause, String[] args) {
         this.whereClause = whereClause;
         this.arguments = args;
         return this;
@@ -102,6 +102,13 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
         return T.find(record, whereClause, arguments, groupBy, orderBy, limit);
 
     }
+    
+    public long count() {
+    	
+    	if(arguments == null) arguments = convertArgs(args);
+    	
+    	return SugarRecord.count(record, whereClause, arguments, groupBy, orderBy, limit);
+    }
 
     public T first() {
 
@@ -156,4 +163,10 @@ String getWhereCond() {
 
         return argsArray;
     }
+
+    public Iterator<T> iterator() {
+        if(arguments == null) arguments = convertArgs(args);
+
+        return T.findAsIterator(record, whereClause, arguments, groupBy, orderBy, limit);
+    }
 }
diff --git a/library/test/com/orm/query/TestRecord.java b/library/test/com/orm/query/TestRecord.java
index 5f4644ee..0751a936 100644
--- a/library/test/com/orm/query/TestRecord.java
+++ b/library/test/com/orm/query/TestRecord.java
@@ -9,11 +9,6 @@
     private String name;
 
     public TestRecord(Context context) {
-        super(new DummyContext(){
-            @Override
-            public Context getApplicationContext() {
-                return null;
-            }
-        });
+        super();
     }
 }
