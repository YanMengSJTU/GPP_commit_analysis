diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 764e1f52..33c83914 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -8,7 +8,8 @@
 
     <application
         android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name" >
+        android:label="@string/app_name"
+        android:name="com.orm.SugarApp">
     </application>
 
 </manifest>
\ No newline at end of file
diff --git a/src/com/orm/Database.java b/src/com/orm/Database.java
index 2bbe9dd2..fceab384 100644
--- a/src/com/orm/Database.java
+++ b/src/com/orm/Database.java
@@ -2,27 +2,30 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-
+import android.util.Log;
 
 public class Database {
-    private SugarDb sugarDb;
+
+    private SugarDb        sugarDb;
+
     private SQLiteDatabase sqLiteDatabase;
 
-    public Database(Context context){
-        this.sugarDb  = new SugarDb(context);
+    public Database(Context context) {
+        this.sugarDb = new SugarDb(context);
     }
 
+    public SQLiteDatabase openDB() {
 
-  public SQLiteDatabase openDB() {
-    this.sqLiteDatabase = this.sugarDb.getWritableDatabase();
+        Log.v("Sugar", "openDB");
+        this.sqLiteDatabase = this.sugarDb.getWritableDatabase();
 
-    return this.sqLiteDatabase;
-  }
+        return this.sqLiteDatabase;
+    }
 
-  public void closeDB() {
-    if (this.sqLiteDatabase != null) {
-      this.sqLiteDatabase.close();
-      this.sqLiteDatabase = null;
+    public void closeDB() {
+        if (this.sqLiteDatabase != null) {
+            this.sqLiteDatabase.close();
+            this.sqLiteDatabase = null;
+        }
     }
-  }
 }
diff --git a/src/com/orm/SugarApp.java b/src/com/orm/SugarApp.java
index 16f47afa..d6eaca76 100644
--- a/src/com/orm/SugarApp.java
+++ b/src/com/orm/SugarApp.java
@@ -1,27 +1,24 @@
 package com.orm;
 
-import android.util.Log;
 
-import java.util.*;
-
-import static com.orm.dsl.Collection.set;
-
-public class SugarApp extends android.app.Application{
+public class SugarApp extends android.app.Application {
 
     Database database;
 
-    public void onCreate(){
+    @Override
+    public void onCreate() {
+
         super.onCreate();
         this.database = new Database(this);
     }
 
-    public void onTerminate(){
+    @Override
+    public void onTerminate() {
 
-    if (this.database != null) {
-      this.database.closeDB();
-    }
+        if (this.database != null) {
+            this.database.closeDB();
+        }
         super.onTerminate();
     }
 
-
 }
diff --git a/src/com/orm/SugarDb.java b/src/com/orm/SugarDb.java
index 8d790541..a3a36036 100644
--- a/src/com/orm/SugarDb.java
+++ b/src/com/orm/SugarDb.java
@@ -1,11 +1,8 @@
 package com.orm;
 
-import android.content.Context;
-import android.content.pm.PackageManager;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
-import dalvik.system.DexFile;
+import static com.orm.SugarConfig.getDatabaseName;
+import static com.orm.SugarConfig.getDatabaseVersion;
+import static com.orm.SugarConfig.getDebugEnabled;
 
 import java.io.IOException;
 import java.lang.reflect.Field;
@@ -14,16 +11,19 @@
 import java.util.Enumeration;
 import java.util.List;
 
-import static com.orm.SugarConfig.getDatabaseName;
-import static com.orm.SugarConfig.getDatabaseVersion;
-import static com.orm.SugarConfig.getDebugEnabled;
-import static com.orm.dsl.Collection.list;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+import dalvik.system.DexFile;
 
 public class SugarDb extends SQLiteOpenHelper {
     private Context context;
 
     public SugarDb(Context context) {
-        super(context, getDatabaseName(context), new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
+        super(context, getDatabaseName(context), new SugarCursorFactory(getDebugEnabled(context)),
+                getDatabaseVersion(context));
         this.context = context;
 
     }
@@ -36,7 +36,10 @@ public SugarDb(Context context) {
             while (allClasses.hasMoreElements()) {
                 String className = (String) allClasses.nextElement();
                 T domainClass = getDomainClass(className, context);
-                if (domainClass != null) domainClasses.add(domainClass);
+                if (domainClass != null) {
+                    Log.i("Sugar", "got domain class for " + className);
+                    domainClasses.add(domainClass);
+                }
             }
 
         } catch (IOException e) {
@@ -49,7 +52,8 @@ public SugarDb(Context context) {
     }
 
     private static <T extends SugarRecord> T getDomainClass(String className, Context context) {
-        Log.i("Sugar", "domain class" );
+
+        // Log.i("Sugar", "getDomainClass " + className);
         Class discoveredClass = null;
         Class superClass = null;
         try {
@@ -59,20 +63,20 @@ public SugarDb(Context context) {
             Log.e("Sugar", e.getMessage());
         }
 
-        if ((discoveredClass == null) || (superClass == null) ||
-                (!discoveredClass.getSuperclass().equals(SugarRecord.class))) {
+        if ((discoveredClass == null) || (superClass == null)
+                || (!discoveredClass.getSuperclass().equals(SugarRecord.class))) {
             return null;
         } else {
             try {
                 return (T) discoveredClass.getDeclaredConstructor(Context.class).newInstance(context);
             } catch (InstantiationException e) {
-                Log.e("Sugar", e.getMessage());
+                Log.e("Sugar", "couldn't process domain class " + className, e);
             } catch (IllegalAccessException e) {
-                Log.e("Sugar", e.getMessage());
+                Log.e("Sugar", "couldn't process domain class " + className, e);
             } catch (NoSuchMethodException e) {
-                Log.e("Sugar", e.getMessage());
+                Log.e("Sugar", "couldn't process domain class " + className, e);
             } catch (InvocationTargetException e) {
-                Log.e("Sugar", e.getMessage());
+                Log.e("Sugar", "couldn't process domain class " + className, e);
             }
         }
 
@@ -92,19 +96,21 @@ private static String getSourcePath(Context context) throws PackageManager.NameN
 
     @Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
-        Log.i("Sugar", "on create" );
+        Log.i("Sugar", "on create");
         createDatabase(sqLiteDatabase);
     }
 
     private <T extends SugarRecord> void createDatabase(SQLiteDatabase sqLiteDatabase) {
+        Log.i("Sugar", "createDatabase");
         List<T> domainClasses = getDomainClasses(context);
         for (T domain : domainClasses) {
+
             createTable(domain, sqLiteDatabase);
         }
     }
 
     private <T extends SugarRecord> void createTable(T table, SQLiteDatabase sqLiteDatabase) {
-        Log.i("Sugar", "create table" );
+        Log.i("Sugar", "create table");
         List<Field> fields = table.getTableFields();
         StringBuilder sb = new StringBuilder("CREATE TABLE ").append(table.getSqlName()).append(
                 " ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
@@ -123,22 +129,26 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         }
         sb.append(" ) ");
 
-        Log.i("Sugar", "creating table " + table.getSqlName());
+        Log.i("Sugar", "creating table " + table.getSqlName() + ": " + sb.toString());
 
-        if (!"".equals(sb.toString()))
+        if (!"".equals(sb.toString())) {
             sqLiteDatabase.execSQL(sb.toString());
+        }
     }
 
     @Override
     public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
+
+        Log.v("Sugar", "onUpgrade");
+
         deleteTables(sqLiteDatabase);
         onCreate(sqLiteDatabase);
     }
 
     private <T extends SugarRecord> void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<T> tables = getDomainClasses(this.context);
-    for (T table : tables) {
-      sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table.getSqlName());
-    }
+        for (T table : tables) {
+            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table.getSqlName());
+        }
     }
 }
diff --git a/src/com/orm/SugarRecord.java b/src/com/orm/SugarRecord.java
index f9d035c7..fd806696 100644
--- a/src/com/orm/SugarRecord.java
+++ b/src/com/orm/SugarRecord.java
@@ -2,6 +2,8 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -166,6 +168,21 @@ void inflate(Cursor cursor) {
                     } else {
                         field.set(this, null);
                     }
+                } else if (Enum.class.isAssignableFrom(field.getType())) {
+
+                    try {
+
+                        Method valueOf = field.getType().getMethod("valueOf", String.class);
+                        String strVal = cursor.getString(cursor.getColumnIndex(colName));
+                        Object enumVal = valueOf.invoke(field.getType(), strVal);
+                        field.set(this, enumVal);
+
+                    } catch (Exception e) {
+
+                        Log.e("Sugar", "Enum cannot be read from Sqlite3 database. Please check the type of field "
+                                + field.getName());
+                    }
+
                 } else {
                     Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field "
                             + field.getName());
@@ -200,7 +217,7 @@ void inflate(Cursor cursor) {
 
         Field[] fields = getClass().getDeclaredFields();
         for (Field field : fields) {
-            if (!field.isAnnotationPresent(Ignore.class)) {
+            if (!field.isAnnotationPresent(Ignore.class) && !Modifier.isStatic(field.getModifiers())) {
                 typeFields.add(field);
             }
         }
