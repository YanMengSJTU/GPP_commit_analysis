diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 61acf813..be28c9c9 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 
 import com.google.common.collect.MapMaker;
+import com.orm.entity.EntityListenerManager;
 
 import java.util.concurrent.ConcurrentMap;
 
@@ -12,13 +13,15 @@
     private SugarDb sugarDb;
     private Context context;
     private ConcurrentMap<Object, Long> entitiesMap;
+    private EntityListenerManager entitylistenerManager;
 
     private SugarContext(Context context) {
         this.context = context;
         this.sugarDb = new SugarDb(context);
         this.entitiesMap = new MapMaker().weakKeys().makeMap();
+        this.entitylistenerManager = new EntityListenerManager(context);
     }
-    
+
     public static SugarContext getSugarContext() {
         if (instance == null) {
             throw new NullPointerException("SugarContext has not been initialized properly. Call SugarContext.init(Context) in your Application.onCreate() method and SugarContext.terminate() in your Application.onTerminate() method.");
@@ -56,4 +59,8 @@ protected SugarDb getSugarDb() {
     ConcurrentMap<Object, Long> getEntitiesMap() {
         return entitiesMap;
     }
+
+    public EntityListenerManager getEntitylistenerManager() {
+        return entitylistenerManager;
+    }
 }
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 0f76b766..beed28a4 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -23,6 +23,9 @@
 import java.util.Map;
 import java.util.NoSuchElementException;
 
+import javax.persistence.PostPersist;
+import javax.persistence.PrePersist;
+
 import static com.orm.SugarContext.getSugarContext;
 
 public class SugarRecord {
@@ -93,7 +96,7 @@
     public static <T> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
-    
+
     public static <T> List<T> listAll(Class<T> type, String orderBy) {
         return find(type, null, null, null, orderBy, null);
     }
@@ -263,6 +266,8 @@ static long save(SQLiteDatabase db, Object object) {
                 values.put("id", entitiesMap.get(object));
         }
 
+        getSugarContext().getEntitylistenerManager().notify(object, PrePersist.class);
+
         long id = db.insertWithOnConflict(NamingHelper.toSQLName(object.getClass()), null, values,
                 SQLiteDatabase.CONFLICT_REPLACE);
 
@@ -281,6 +286,8 @@ static long save(SQLiteDatabase db, Object object) {
             ((SugarRecord) object).setId(id);
         }
 
+        getSugarContext().getEntitylistenerManager().notify(object, PostPersist.class);
+
         Log.i("Sugar", object.getClass().getSimpleName() + " saved : " + id);
 
         return id;
@@ -324,7 +331,7 @@ public boolean delete() {
             return false;
         }
     }
-    
+
     public static boolean delete(Object object) {
         Class<?> type = object.getClass();
         if (type.isAnnotationPresent(Table.class)) {
diff --git a/library/src/main/java/com/orm/entity/EntityListenerManager.java b/library/src/main/java/com/orm/entity/EntityListenerManager.java
new file mode 100644
index 00000000..5dfd989a
--- /dev/null
+++ b/library/src/main/java/com/orm/entity/EntityListenerManager.java
@@ -0,0 +1,129 @@
+package com.orm.entity;
+
+import android.content.Context;
+
+import com.google.common.collect.Lists;
+import com.orm.util.ReflectionUtil;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.persistence.EntityListeners;
+import javax.persistence.PostPersist;
+import javax.persistence.PostRemove;
+import javax.persistence.PrePersist;
+import javax.persistence.PreRemove;
+
+public class EntityListenerManager {
+
+    private Map<Class, List<EntityListenerMeta>> entityListenerMetaMap;
+
+    private Context context;
+
+    public EntityListenerManager(Context context) {
+        this.context = context;
+        load();
+    }
+
+    public void notify(Object entity, Class listenerType) {
+        List<EntityListenerMeta> entityListenerMetas = entityListenerMetaMap.get(entity.getClass());
+
+        if (entityListenerMetas != null && entityListenerMetas.isEmpty()) {
+            for (EntityListenerMeta meta : entityListenerMetas) {
+                notify(entity, listenerType, meta);
+            }
+        }
+    }
+
+    private void notify(Object entity, Class listenerType, EntityListenerMeta meta) {
+        if (listenerType == PrePersist.class && meta.getPrePersist() != null) {
+            execute(meta.getListener(), meta.getPrePersist(), entity);
+        } else if (listenerType == PreRemove.class && meta.getPreRemove() != null) {
+            execute(meta.getListener(), meta.getPreRemove(), entity);
+        } else if (listenerType == PostPersist.class && meta.getPostPersist() != null) {
+            execute(meta.getListener(), meta.getPostPersist(), entity);
+        } else if (listenerType == PostRemove.class && meta.getPostRemove() != null) {
+            execute(meta.getListener(), meta.getPostRemove(), entity);
+        }
+    }
+
+    private void execute(Object obj, Method method, Object entity) {
+        try {
+            method.invoke(obj, entity);
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        } catch (InvocationTargetException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void load() {
+        entityListenerMetaMap = new HashMap<>();
+
+        List<Class> domainClasses = ReflectionUtil.getDomainClasses(context);
+
+        for (Class domainClass : domainClasses) {
+            processDomainClass(domainClass);
+        }
+    }
+
+    private void processDomainClass(Class domainClass) {
+        EntityListeners annotation = (EntityListeners) domainClass.getAnnotation(EntityListeners.class);
+
+        if (annotation != null) {
+            Class[] listenerClasses = annotation.value();
+
+            if (listenerClasses != null && listenerClasses.length > 0) {
+                List<EntityListenerMeta> metaList = processListenerClasses(domainClass, listenerClasses);
+
+                if (metaList != null && !metaList.isEmpty()) {
+                    entityListenerMetaMap.put(domainClass, metaList);
+                }
+            }
+        }
+    }
+
+    private List<EntityListenerMeta> processListenerClasses(Class domainClass, Class[] listenerClasses) {
+        List<EntityListenerMeta> metaList = Lists.newArrayList();
+
+        for (Class listenerClass : listenerClasses) {
+            EntityListenerMeta meta = processListenerClass(domainClass, listenerClass);
+            if (meta != null) {
+                metaList.add(meta);
+            }
+        }
+
+        return metaList;
+    }
+
+    private EntityListenerMeta processListenerClass(Class domainClass, Class listenerClass) {
+        try {
+            EntityListenerMeta meta = new EntityListenerMeta(domainClass, listenerClass);
+            meta.setPrePersist(findMethod(listenerClass, PrePersist.class));
+            meta.setPreRemove(findMethod(listenerClass, PreRemove.class));
+            meta.setPostPersist(findMethod(listenerClass, PostPersist.class));
+            meta.setPostRemove(findMethod(listenerClass, PostRemove.class));
+
+            return meta;
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        } catch (InstantiationException e) {
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+
+    private Method findMethod(Class source, Class annotation) {
+        for (Method method : source.getMethods()) {
+            if (method.getAnnotation(annotation) != null) {
+                return method;
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/library/src/main/java/com/orm/entity/EntityListenerMeta.java b/library/src/main/java/com/orm/entity/EntityListenerMeta.java
new file mode 100644
index 00000000..12fc9e66
--- /dev/null
+++ b/library/src/main/java/com/orm/entity/EntityListenerMeta.java
@@ -0,0 +1,60 @@
+package com.orm.entity;
+
+import java.lang.reflect.Method;
+
+public class EntityListenerMeta {
+
+    private final Class entityClass;
+
+    private final Object listener;
+
+    private Method prePersist;
+    private Method preRemove;
+    private Method postPersist;
+    private Method postRemove;
+
+    public EntityListenerMeta(Class entityClass, Class listenerClass) throws IllegalAccessException, InstantiationException {
+        this.entityClass = entityClass;
+        this.listener = listenerClass.newInstance();
+    }
+
+    public Class getEntityClass() {
+        return entityClass;
+    }
+
+    public Object getListener() {
+        return listener;
+    }
+
+    public Method getPrePersist() {
+        return prePersist;
+    }
+
+    public void setPrePersist(Method prePersist) {
+        this.prePersist = prePersist;
+    }
+
+    public Method getPreRemove() {
+        return preRemove;
+    }
+
+    public void setPreRemove(Method preRemove) {
+        this.preRemove = preRemove;
+    }
+
+    public Method getPostPersist() {
+        return postPersist;
+    }
+
+    public void setPostPersist(Method postPersist) {
+        this.postPersist = postPersist;
+    }
+
+    public Method getPostRemove() {
+        return postRemove;
+    }
+
+    public void setPostRemove(Method postRemove) {
+        this.postRemove = postRemove;
+    }
+}
diff --git a/library/src/main/java/javax/persistence/EntityListeners.java b/library/src/main/java/javax/persistence/EntityListeners.java
new file mode 100644
index 00000000..6a4ac952
--- /dev/null
+++ b/library/src/main/java/javax/persistence/EntityListeners.java
@@ -0,0 +1,13 @@
+package javax.persistence;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface EntityListeners {
+
+    Class[] value();
+}
diff --git a/library/src/main/java/javax/persistence/PostPersist.java b/library/src/main/java/javax/persistence/PostPersist.java
new file mode 100644
index 00000000..0d360209
--- /dev/null
+++ b/library/src/main/java/javax/persistence/PostPersist.java
@@ -0,0 +1,11 @@
+package javax.persistence;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface PostPersist {
+}
diff --git a/library/src/main/java/javax/persistence/PostRemove.java b/library/src/main/java/javax/persistence/PostRemove.java
new file mode 100644
index 00000000..633b24a3
--- /dev/null
+++ b/library/src/main/java/javax/persistence/PostRemove.java
@@ -0,0 +1,11 @@
+package javax.persistence;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface PostRemove {
+}
diff --git a/library/src/main/java/javax/persistence/PrePersist.java b/library/src/main/java/javax/persistence/PrePersist.java
new file mode 100644
index 00000000..79a5a602
--- /dev/null
+++ b/library/src/main/java/javax/persistence/PrePersist.java
@@ -0,0 +1,11 @@
+package javax.persistence;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface PrePersist {
+}
diff --git a/library/src/main/java/javax/persistence/PreRemove.java b/library/src/main/java/javax/persistence/PreRemove.java
new file mode 100644
index 00000000..c591bfcc
--- /dev/null
+++ b/library/src/main/java/javax/persistence/PreRemove.java
@@ -0,0 +1,11 @@
+package javax.persistence;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface PreRemove {
+}
