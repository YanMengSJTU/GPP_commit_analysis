diff --git a/.travis.yml b/.travis.yml
index f6784c11..80ca1ced 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,11 +1,28 @@
 language: android
+jdk: oraclejdk7
 
+env:
+  global:
+    - TERM=dumb
 android:
   components:
-    - sys-img-armeabi-v7a-android-21
-    - build-tools-21.1.2
-    - android-21
-
+    - sys-img-armeabi-v7a-android-23
+    - tools
+    - build-tools-23.0.2
+    - android-23
+    - extra-android-m2repository
+before_script:
+  - sudo service postgresql stop || true
+  - sudo service mysql stop || true
+  - sudo service memcached stop || true
+  - sudo service bootlogd stop || true
+  - sudo service elasticsearch stop || true
+  - sudo service mongodb stop || true
+  - sudo service neo4j stop || true
+  - sudo service cassandra stop || true
+  - sudo service riak stop || true
+  - sudo service rsync stop || true
+  - sudo service x11-common stop || true
 script:
   - gradle clean build connectedCheck coveralls
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 00000000..5c3f700b
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,91 @@
+# Sugar Releases
+
+## [Unreleased]
+### Added
+* [#328](https://github.com/satyan/sugar/pull/328) @jedid auto add new columns during database upgrade, fix [#299](https://github.com/satyan/sugar/issues/299) and [#151](https://github.com/satyan/sugar/issues/151)
+* [#389](https://github.com/satyan/sugar/pull/389) @alfmatos MultiUnique DSL to handle MultiColumn Unique Table constraint
+* @sibeliusseraphini update, updateInTx methods based on Unique values of SugarRecord
+* [#155](https://github.com/satyan/sugar/issues/155) @benohalloran adding Cursors for Cursor Adapters [Pull 312](https://github.com/satyan/sugar/pull/312)
+* [#430](https://github.com/satyan/sugar/pull/430) @sibeliusseraphini update to roboelectric 3.0 and target android-32
+
+### Changed
+* [#437](https://github.com/satyan/sugar/pull/437) @dnalves removing guava dependency, using synchronized WeakHashMap instead
+* [#423](https://github.com/satyan/sugar/pull/423) @sibeliusseraphini moving changelog of README.md to CHANGELOG.md
+
+### Fixed
+* [#362](https://github.com/satyan/sugar/pull/362) @mitchyboy9 fixed NoClassDefFoundError
+* [#455](https://github.com/satyan/sugar/pull/455) @nurolopher fixed travis and coveralls config 
+* [#434](https://github.com/satyan/sugar/pull/434) @bendaniel10 fix multi-dex
+* [#410](https://github.com/satyan/sugar/pull/410) [#408](https://github.com/satyan/sugar/pull/408) @RoyMontoya simplify code
+* [#327](https://github.com/satyan/sugar/pull/327) @tracytheron support multi-dex
+* [#373](https://github.com/satyan/sugar/pull/373) @salimkamboh use existing tables
+
+## v1.4
+### Added
+* [#306](https://github.com/satyan/sugar/pull/306) @Shyish return boolean/integer on delete methods
+* [#304](https://github.com/satyan/sugar/pull/304) @benohalloran add support to enum type
+* [#197](https://github.com/satyan/sugar/pull/197) @andresteves add suport for bytes[]
+* [#293](https://github.com/satyan/sugar/pull/293) @neilw4 support NULL in queries
+* [#273](https://github.com/satyan/sugar/pull/273) @dominicwong617 findById support an array of ids
+* [#246](https://github.com/satyan/sugar/pull/246) @kwf2030 use sqlite\_master to check whether table already exist
+* [#253](https://github.com/satyan/sugar/pull/202) @JeroenMols add bulk delete
+* [#285](https://github.com/satyan/sugar/pull/202) @Shyish add listAll with orderBy param
+* No need to extend SugarApp - just call SugarContext.init(Context) instead
+* [#129](https://github.com/satyan/sugar/pull/129) @satyan support sugar entities using @Table annotations
+
+### Fixed
+* [#314](https://github.com/satyan/sugar/pull/314) @abscondment fix StrictMode DexFile
+* [#303](https://github.com/satyan/sugar/pull/303) @RossinesP fixed saving row string bug
+* [#258](https://github.com/satyan/sugar/pull/258) @nosrak113 change SugarRecord ID to private to not conflit with other libraries
+* [#254](https://github.com/satyan/sugar/pull/254) @jivimberg use weak keys to keep track of annotated entities
+* [#215](https://github.com/satyan/sugar/issues/215) @jivimberg fix bug persisting relationship
+* [#185](https://github.com/satyan/sugar/issues/185) [#243](https://github.com/satyan/sugar/issues/243) @whoshuu fix save and update method
+* [#202](https://github.com/satyan/sugar/pull/202) @allieus improve getDomainsClass()
+* [#104](https://github.com/satyan/sugar/issues/104) @whoshuu fix nesting "and" and "or"
+
+## v1.4 Beta [[jar](https://github.com/satyan/sugar/releases/download/v1.4_beta/sugar-1.4_beta.jar)]
+### Added
+* [#112](https://github.com/satyan/sugar/pull/112) @androdevcafe added Unique and NotNull annotations
+* [#78](https://github.com/satyan/sugar/pull/78) @HiddenCleverde capability to specify primary key
+
+### Fixed
+* [#113](https://github.com/satyan/sugar/pull/113) @whoshuu override findById to support int
+* [#106](https://github.com/satyan/sugar/issues/106) @whoshuu add documentation to onTerminate
+* [#54](https://github.com/satyan/sugar/issues/54) @whoshuu simplify count interface
+* [#43](https://github.com/satyan/sugar/issues/43) @whoshuu return id on save
+* [#72](https://github.com/satyan/sugar/issues/72) @whoshuu allow null values to Date and Calendar objects
+* [#96](https://github.com/satyan/sugar/issues/96) @whoshuu roboeletric fallback
+
+## v1.3 [[jar](https://github.com/satyan/sugar/releases/download/v1.3/sugar-1.3.jar)]
+
+- Transaction Support
+- Bulk Insert of records 
+- Encrypted datastore (branch : sugar-cipher using sqlcipher)
+- Removed Constructor with context parameter. Needs default constructor now.
+- Enhancements to QueryBuilder
+- Bug fixes and other improvements.
+
+## v1.2 [[jar](https://github.com/satyan/sugar/releases/download/v1.2/sugar-1.2.jar)]
+
+- package restriction for domain classes.
+- metadata caching
+- QueryBuilder v1
+- Database Migrations
+- Provision for Raw queries
+- Better and more organized api guide and usage instructions.
+
+## v1.1 [[jar](https://github.com/satyan/sugar/releases/download/v1.1/sugar-1.1.jar)]
+
+- Static api doesn't take context anymore. Hence
+
+```java
+Book.findById(context, Book.class, 1);
+```
+
+becomes
+
+```java
+Book.findById(Book.class, 1);
+```
+
+- Some cleanup in the code.
diff --git a/README.md b/README.md
index 5939f46d..dc12a0ed 100644
--- a/README.md
+++ b/README.md
@@ -18,9 +18,11 @@ Let me know what features are important or bugs you encounter and I will do my b
 
 # Sugar ORM [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master)
 
+[![Join the chat at https://gitter.im/satyan/sugar](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/satyan/sugar?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+
 Insanely easy way to work with Android databases.
 
-Official documentation can be found [here](http://satyan.github.io/sugar). The example application is provided in the **example** folder in the source.
+Official documentation can be found [here](http://satyan.github.io/sugar) - Check some examples below. The example application is provided in the **example** folder in the source.
 
 ## Features
 
@@ -39,7 +41,7 @@ There are four ways to install Sugar:
 This is the preferred way. Simply add:
 
 ```groovy
-compile 'com.github.satyan:sugar:1.3.1'
+compile 'com.github.satyan:sugar:1.4'
 ```
 
 to your project dependencies and run `gradle build` or `gradle assemble`.
@@ -52,7 +54,7 @@ Declare the dependency in Maven:
 <dependency>
     <groupId>com.github.satyan</groupId>
     <artifactId>sugar</artifactId>
-    <version>1.3</version>
+    <version>1.4</version>
 </dependency>
 ```
 
@@ -64,46 +66,125 @@ Download the source code and import it as a library project in Eclipse. The proj
 
 Visit the [releases](https://github.com/satyan/sugar/releases) page to download jars directly. You can drop them into your `libs` folder and configure the Java build path to include the library. See this [tutorial](http://www.vogella.com/tutorials/AndroidLibraryProjects/article.html) for an excellent guide on how to do this.
 
-===================
 
-After installing, check out how to set up your first database and models [here](http://satyan.github.io/sugar/getting-started.html).
+### How to use master version
+First, download sugar repository
+```
+git clone git@github.com:satyan/sugar.git
+```
 
-## Contributing
+include this in your **settings.gradle**
+```gradle
+include ':app' // your module app
+include ':sugar'
 
-Please fork this repository and contribute back using [pull requests](https://github.com/satyan/sugar/pulls). Features can be requested using [issues](https://github.com/satyan/sugar/issues). All code, comments, and critiques are greatly appreciated.
+def getLocalProperty(prop) {
+	Properties properties = new Properties()
+	properties.load(new File(rootDir.absolutePath + '/local.properties').newDataInputStream())
+	return properties.getProperty(prop, '')
+}
 
-## Changelog
+project(':sugar').projectDir = new File(getLocalProperty('sugar.dir'))
 
-#### v1.3 [[jar](https://github.com/satyan/sugar/releases/download/v1.3/sugar-1.3.jar)]
+```
 
-- Transaction Support
-- Bulk Insert of records 
-- Encrypted datastore (branch : sugar-cipher using sqlcipher)
-- Removed Constructor with context parameter. Needs default constructor now.
-- Enhancements to QueryBuilder
-- Bug fixes and other improvements.
+include this in your **local.properties**
+```
+sugar.dir=/path/to/sugar/library
+```
 
-#### v1.2 [[jar](https://github.com/satyan/sugar/releases/download/v1.2/sugar-1.2.jar)]
+add sugar project to the dependencies of your main project (build.gradle)
+```gradle
+dependencies {
+    compile project(':sugar')
+}
+```
 
-- package restriction for domain classes.
-- metadata caching
-- QueryBuilder v1
-- Database Migrations
-- Provision for Raw queries
-- Better and more organized api guide and usage instructions.
+===================
 
-#### v1.1 [[jar](https://github.com/satyan/sugar/releases/download/v1.1/sugar-1.1.jar)]
+After installing, check out how to set up your first database and models [here](http://satyan.github.io/sugar/getting-started.html) **Outdated**. Check examples of 1.4 and master below: 
 
-- Static api doesn't take context anymore. Hence
+## Examples
+### SugarRecord
+```java
+public class Book extends SugarRecord {
+  @Unique
+  String isbn;
+  String title;
+  String edition;
+
+  // Default constructor is necessary for SugarRecord
+  public Book() {
+
+  }
+
+  public Book(String isbn, String title, String edition) {
+    this.isbn = isbn;
+    this.title = title;
+    this.edition = edition;
+  }
+}
+```
+or
+```java
+@Table
+public class Book { ... }
+```
 
+### Save Entity
 ```java
-Book.findById(context, Book.class, 1);
+Book book = new Book("isbn123", "Title here", "2nd edition")
+book.save();
 ```
 
-becomes
+### Load Entity
+```java
+Book book = Book.findById(Book.class, 1);
+```
 
+### Update Entity
 ```java
-Book.findById(Book.class, 1);
+Book book = Book.findById(Book.class, 1);
+book.title = "updated title here"; // modify the values
+book.edition = "3rd edition";
+book.save(); // updates the previous entry with new values.
 ```
 
-- Some cleanup in the code.
+### Delete Entity
+```java
+Book book = Book.findById(Book.class, 1);
+book.delete();
+```
+
+### Update Entity based on Unique values
+```java
+Book book = new Book("isbn123", "Title here", "2nd edition")
+book.save();
+
+// Update book with isbn123
+Book sameBook = new Book("isbn123", "New Title", "5th edition")
+sameBook.update();
+
+book.getId() == sameBook.getId(); // true
+```
+
+### Bulk Insert
+```java
+List<Book> books = new ArrayList<>();
+books.add(new Book("isbn123", "Title here", "2nd edition"))
+books.add(new Book("isbn456", "Title here 2", "3nd edition"))
+books.add(new Book("isbn789", "Title here 3", "4nd edition"))
+SugarRecord.saveInTx(books);
+```
+
+### When using ProGuard
+```java
+# Ensures entities remain un-obfuscated so table and columns are named correctly
+-keep class com.yourpackage.yourapp.domainclasspackage.** { *; }
+```
+
+## [CHANGELOG](https://github.com/satyan/sugar/blob/master/CHANGELOG.md)
+
+## Contributing
+
+Please fork this repository and contribute back using [pull requests](https://github.com/satyan/sugar/pulls). Features can be requested using [issues](https://github.com/satyan/sugar/issues). All code, comments, and critiques are greatly appreciated.
diff --git a/build.gradle b/build.gradle
index f0b4d4fb..f0bca97d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,13 +1,13 @@
 apply plugin: 'jacoco'
 apply plugin: 'com.github.kt3k.coveralls'
+apply plugin: 'java'
 
 buildscript {
     repositories {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.1'
-        classpath 'org.robolectric:robolectric-gradle-plugin:1.0.1'
+        classpath 'com.android.tools.build:gradle:1.5.0'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
@@ -15,7 +15,11 @@ buildscript {
 def isReleaseBuild() {
     return version.contains("SNAPSHOT") == false
 }
-
+test{
+    testLogging{
+        exceptionFormat = 'full'
+    }
+}
 allprojects {
     version = VERSION_NAME
     group = GROUP
@@ -34,7 +38,7 @@ subprojects { proj ->
         version "0.7.1.20151214"
     }
 
-    task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
+    task jacocoTestReport(type: JacocoReport) {
         group = "Reporting"
         description = "Generate Jacoco coverage reports after running tests."
         reports {
@@ -46,7 +50,7 @@ subprojects { proj ->
                 excludes: ['**/R*.class',
                            '**/BuildConfig*'])
         sourceDirectories = files('src/main/java')
-        executionData = files('build/jacoco/testDebug.exec')
+        executionData = files('build/jacoco/testDebugUnitTest.exec')
         doFirst {
             files('build/intermediates/classes/debug').getFiles().each { file ->
                 if (file.name.contains('$$')) {
diff --git a/example/build.gradle b/example/build.gradle
index dad72cd7..084b9d2d 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -1,14 +1,12 @@
 apply plugin: 'com.android.application'
-apply plugin: 'org.robolectric'
-
 android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.2"
+    compileSdkVersion 23
+    buildToolsVersion "23.0.2"
 
     defaultConfig {
         applicationId "com.example"
         minSdkVersion 9
-        targetSdkVersion 21
+        targetSdkVersion 23
     }
 
     buildTypes {
@@ -16,31 +14,38 @@ android {
             minifyEnabled false
         }
     }
+
+    testOptions{
+        unitTests.returnDefaultValues = true
+    }
+    lintOptions{
+        abortOnError false
+    }
 }
 
 dependencies {
     compile project (':library')
-    compile 'com.android.support:support-v4:21.0.3'
-    testCompile 'org.robolectric:robolectric:2.4'
+    compile 'com.android.support:appcompat-v7:23.1.1'
+    testCompile 'org.robolectric:robolectric:3.0'
     testCompile 'junit:junit:4.12'
 }
 
-robolectric {
-    // Configure includes / excludes
-    include '**/*Tests.class'
-    exclude '**/espresso/**/*.class'
-
-    // Configure max heap size of the test JVM
-    maxHeapSize = '2048m'
-
-    // Configure the test JVM arguments - Does not apply to Java 8
-    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
-
-    // configure whether failing tests should fail the build
-    ignoreFailures true
-
-    // use afterTest to listen to the test execution results
-    afterTest { descriptor, result ->
-        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
-    }
-}
+//robolectric {
+//    // Configure includes / excludes
+//    include '**/*Tests.class'
+//    exclude '**/espresso/**/*.class'
+//
+//    // Configure max heap size of the test JVM
+//    maxHeapSize = '2048m'
+//
+//    // Configure the test JVM arguments - Does not apply to Java 8
+//    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
+//
+//    // configure whether failing tests should fail the build
+//    ignoreFailures true
+//
+//    // use afterTest to listen to the test execution results
+//    afterTest { descriptor, result ->
+//        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
+//    }
+//}
diff --git a/example/src/main/java/com/example/activities/SugarActivity.java b/example/src/main/java/com/example/activities/SugarActivity.java
index 197314a0..81044546 100644
--- a/example/src/main/java/com/example/activities/SugarActivity.java
+++ b/example/src/main/java/com/example/activities/SugarActivity.java
@@ -1,7 +1,6 @@
 package com.example.activities;
 
 import android.app.Activity;
-import android.content.Intent;
 import android.os.Bundle;
 
 import com.example.R;
diff --git a/example/src/main/java/com/example/models/SimpleModel.java b/example/src/main/java/com/example/models/SimpleModel.java
new file mode 100644
index 00000000..dd482ee5
--- /dev/null
+++ b/example/src/main/java/com/example/models/SimpleModel.java
@@ -0,0 +1,33 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class SimpleModel extends SugarRecord {
+    private String str;
+    private int integer;
+    private boolean bool;
+
+    public String getStr() {
+        return str;
+    }
+
+    public void setStr(String str) {
+        this.str = str;
+    }
+
+    public int getInteger() {
+        return integer;
+    }
+
+    public void setInteger(int integer) {
+        this.integer = integer;
+    }
+
+    public boolean isBool() {
+        return bool;
+    }
+
+    public void setBool(boolean bool) {
+        this.bool = bool;
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java b/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
index f50550ab..9e4b36bb 100644
--- a/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
@@ -16,7 +16,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class BigDecimalFieldTests {
     @Test
     public void nullBigDecimalExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/BooleanFieldTests.java b/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
index 849f5520..a117af6c 100644
--- a/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class BooleanFieldTests {
     @Test
     public void nullBooleanExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/ByteArrayFieldTests.java b/example/src/test/java/com/example/sugartest/ByteArrayFieldTests.java
index b8ae0cfd..6f830960 100644
--- a/example/src/test/java/com/example/sugartest/ByteArrayFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/ByteArrayFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class ByteArrayFieldTests {
     @Test
     public void nullByteArrayExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/CursorTests.java b/example/src/test/java/com/example/sugartest/CursorTests.java
new file mode 100644
index 00000000..78c3d71b
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/CursorTests.java
@@ -0,0 +1,72 @@
+package com.example.sugartest;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.database.Cursor;
+import android.os.Build;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CursorAdapter;
+import android.widget.TextView;
+
+import com.example.models.SimpleModel;
+import com.orm.query.Select;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static junit.framework.Assert.assertNotSame;
+import static junit.framework.Assert.assertSame;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(sdk=18)
+public class CursorTests {
+    @Test
+    public void testColumnNames() {
+        save(new SimpleModel());
+        Cursor c = Select.from(SimpleModel.class).getCursor();
+        for (String col : new String[]{"STR", "INTEGER", "BOOL", "ID"}) {
+            assertNotSame("Missing column for field: " + col, -1, c.getColumnIndex(col));
+        }
+    }
+    @Test
+    public void testSugarCursor(){
+        save(new SimpleModel());
+        Cursor cursor = Select.from(SimpleModel.class).getCursor();
+        assertNotSame("No _id", -1, cursor.getColumnIndex("_id"));
+        assertSame("_id != ID", cursor.getColumnIndex("_id"), cursor.getColumnIndex("ID"));
+    }
+
+    @Test
+    public void testNoColumn(){
+        save(new SimpleModel());
+        Cursor cursor = Select.from(SimpleModel.class).getCursor();
+        assertSame(-1, cursor.getColumnIndex("nonexistent"));
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    @Test
+    public void testMakeAdapter() {
+        save(new SimpleModel());
+        Cursor c = Select.from(SimpleModel.class).getCursor();
+        CursorAdapter adapter = new CursorAdapter(RuntimeEnvironment.application, c, true) {
+            @Override
+            public View newView(Context context, Cursor cursor, ViewGroup parent) {
+                TextView tv = new TextView(context);
+                String s = cursor.getString(cursor.getColumnIndex("STR"));
+                tv.setText(s);
+                return null;
+            }
+
+            @Override
+            public void bindView(View view, Context context, Cursor cursor) {
+                String s = cursor.getString(cursor.getColumnIndex("STR"));
+                ((TextView) view).setText(s);
+            }
+        };
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/DoubleFieldTests.java b/example/src/test/java/com/example/sugartest/DoubleFieldTests.java
index 86f5bfde..89dbd00a 100644
--- a/example/src/test/java/com/example/sugartest/DoubleFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/DoubleFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class DoubleFieldTests {
     @Test
     public void nullDoubleExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/EnumFieldTests.java b/example/src/test/java/com/example/sugartest/EnumFieldTests.java
index 7ce17380..4eeaed71 100644
--- a/example/src/test/java/com/example/sugartest/EnumFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/EnumFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk = 18)
+@Config(sdk = 18)
 public class EnumFieldTests {
     @Test
     public void nullDefaultEnumExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/FirstAndLastTests.java b/example/src/test/java/com/example/sugartest/FirstAndLastTests.java
index 75108b83..d095578f 100644
--- a/example/src/test/java/com/example/sugartest/FirstAndLastTests.java
+++ b/example/src/test/java/com/example/sugartest/FirstAndLastTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class FirstAndLastTests {
     @Test
     public void firstExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/FloatFieldTests.java b/example/src/test/java/com/example/sugartest/FloatFieldTests.java
index 669f2703..16f52bbc 100644
--- a/example/src/test/java/com/example/sugartest/FloatFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/FloatFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class FloatFieldTests {
     @Test
     public void nullFloatExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/IncompleteAnnotatedModelTests.java b/example/src/test/java/com/example/sugartest/IncompleteAnnotatedModelTests.java
index 4959f757..25f544ae 100644
--- a/example/src/test/java/com/example/sugartest/IncompleteAnnotatedModelTests.java
+++ b/example/src/test/java/com/example/sugartest/IncompleteAnnotatedModelTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertFalse;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class IncompleteAnnotatedModelTests {
     @Test(expected=SQLiteException.class)
     public void saveNoIdFieldTest() {
diff --git a/example/src/test/java/com/example/sugartest/IntegerFieldTests.java b/example/src/test/java/com/example/sugartest/IntegerFieldTests.java
index badb29dd..25dbd0bd 100644
--- a/example/src/test/java/com/example/sugartest/IntegerFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/IntegerFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class IntegerFieldTests {
     @Test
     public void nullIntegerExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java b/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java
index e6dfb8e3..014c989d 100644
--- a/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java
+++ b/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java
@@ -16,7 +16,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class ListAllOrderByTests {
     @Test
     public void listAllOrderByEmptyTest() {
diff --git a/example/src/test/java/com/example/sugartest/LongFieldTests.java b/example/src/test/java/com/example/sugartest/LongFieldTests.java
index 5f3f8998..b99e7537 100644
--- a/example/src/test/java/com/example/sugartest/LongFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/LongFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class LongFieldTests {
     @Test
     public void nullLongExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/MultipleSaveTests.java b/example/src/test/java/com/example/sugartest/MultipleSaveTests.java
index 05dc4939..58c669c5 100644
--- a/example/src/test/java/com/example/sugartest/MultipleSaveTests.java
+++ b/example/src/test/java/com/example/sugartest/MultipleSaveTests.java
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class MultipleSaveTests {
     @Test
     public void stringMultipleSaveOriginalExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/NestedAnnotatedTests.java b/example/src/test/java/com/example/sugartest/NestedAnnotatedTests.java
index 267441ad..bf3f0e46 100644
--- a/example/src/test/java/com/example/sugartest/NestedAnnotatedTests.java
+++ b/example/src/test/java/com/example/sugartest/NestedAnnotatedTests.java
@@ -16,7 +16,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class NestedAnnotatedTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/NestedExtendedTests.java b/example/src/test/java/com/example/sugartest/NestedExtendedTests.java
index 1c4171f6..f403784b 100644
--- a/example/src/test/java/com/example/sugartest/NestedExtendedTests.java
+++ b/example/src/test/java/com/example/sugartest/NestedExtendedTests.java
@@ -16,7 +16,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class NestedExtendedTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedAATests.java b/example/src/test/java/com/example/sugartest/NestedMixedAATests.java
index 7d25a88c..daf19272 100644
--- a/example/src/test/java/com/example/sugartest/NestedMixedAATests.java
+++ b/example/src/test/java/com/example/sugartest/NestedMixedAATests.java
@@ -16,7 +16,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class NestedMixedAATests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedABTests.java b/example/src/test/java/com/example/sugartest/NestedMixedABTests.java
index 78de85ef..5b9a70dc 100644
--- a/example/src/test/java/com/example/sugartest/NestedMixedABTests.java
+++ b/example/src/test/java/com/example/sugartest/NestedMixedABTests.java
@@ -16,7 +16,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class NestedMixedABTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedBATests.java b/example/src/test/java/com/example/sugartest/NestedMixedBATests.java
index 23d2d14b..7d6e4886 100644
--- a/example/src/test/java/com/example/sugartest/NestedMixedBATests.java
+++ b/example/src/test/java/com/example/sugartest/NestedMixedBATests.java
@@ -16,7 +16,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class NestedMixedBATests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedBBTests.java b/example/src/test/java/com/example/sugartest/NestedMixedBBTests.java
index dc325a90..c9e32182 100644
--- a/example/src/test/java/com/example/sugartest/NestedMixedBBTests.java
+++ b/example/src/test/java/com/example/sugartest/NestedMixedBBTests.java
@@ -16,7 +16,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class NestedMixedBBTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/NoSugarModelTests.java b/example/src/test/java/com/example/sugartest/NoSugarModelTests.java
index f638d56b..dbab8103 100644
--- a/example/src/test/java/com/example/sugartest/NoSugarModelTests.java
+++ b/example/src/test/java/com/example/sugartest/NoSugarModelTests.java
@@ -12,7 +12,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class NoSugarModelTests {
     @Test
     public void deleteTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/RelationshipAnnotatedTests.java b/example/src/test/java/com/example/sugartest/RelationshipAnnotatedTests.java
index 83326c0c..503926e1 100644
--- a/example/src/test/java/com/example/sugartest/RelationshipAnnotatedTests.java
+++ b/example/src/test/java/com/example/sugartest/RelationshipAnnotatedTests.java
@@ -15,7 +15,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class RelationshipAnnotatedTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/RelationshipExtendedTests.java b/example/src/test/java/com/example/sugartest/RelationshipExtendedTests.java
index f3ba1355..3c3e04c7 100644
--- a/example/src/test/java/com/example/sugartest/RelationshipExtendedTests.java
+++ b/example/src/test/java/com/example/sugartest/RelationshipExtendedTests.java
@@ -15,7 +15,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class RelationshipExtendedTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/RelationshipMixedATests.java b/example/src/test/java/com/example/sugartest/RelationshipMixedATests.java
index 2793d247..7ecb6751 100644
--- a/example/src/test/java/com/example/sugartest/RelationshipMixedATests.java
+++ b/example/src/test/java/com/example/sugartest/RelationshipMixedATests.java
@@ -15,7 +15,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class RelationshipMixedATests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/RelationshipMixedBTests.java b/example/src/test/java/com/example/sugartest/RelationshipMixedBTests.java
index 408ffefe..1d31ecd2 100644
--- a/example/src/test/java/com/example/sugartest/RelationshipMixedBTests.java
+++ b/example/src/test/java/com/example/sugartest/RelationshipMixedBTests.java
@@ -15,7 +15,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class RelationshipMixedBTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/RobolectricGradleTestRunner.java b/example/src/test/java/com/example/sugartest/RobolectricGradleTestRunner.java
index 765df649..4f7bc39d 100644
--- a/example/src/test/java/com/example/sugartest/RobolectricGradleTestRunner.java
+++ b/example/src/test/java/com/example/sugartest/RobolectricGradleTestRunner.java
@@ -3,9 +3,9 @@
 import com.example.ClientApp;
 
 import org.junit.runners.model.InitializationError;
-import org.robolectric.AndroidManifest;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.manifest.AndroidManifest;
 import org.robolectric.res.Fs;
 
 public class RobolectricGradleTestRunner extends RobolectricTestRunner {
@@ -18,6 +18,7 @@ public RobolectricGradleTestRunner(Class<?> testClass) throws InitializationErro
         String manifestPath = myAppPath + "../../../../src/main/AndroidManifest.xml";
         String resPath = myAppPath + "../../../../src/main/res";
         String assetPath = myAppPath + "../../../../src/main/assets";
-        return createAppManifest(Fs.fileFromPath(manifestPath), Fs.fileFromPath(resPath), Fs.fileFromPath(assetPath));
+        String packageName = "com.example";
+        return createAppManifest(Fs.fileFromPath(manifestPath), Fs.fileFromPath(resPath), Fs.fileFromPath(assetPath), packageName);
     }
 }
\ No newline at end of file
diff --git a/example/src/test/java/com/example/sugartest/ShortFieldTests.java b/example/src/test/java/com/example/sugartest/ShortFieldTests.java
index dd22b662..3c428752 100644
--- a/example/src/test/java/com/example/sugartest/ShortFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/ShortFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class ShortFieldTests {
     @Test
     public void nullShortExtendedTest() {
diff --git a/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java b/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
index 77a14677..7bfe0108 100644
--- a/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
+++ b/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
@@ -23,7 +23,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class SimpleAnnotatedModelTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java b/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
index 704ea5c3..aa860270 100644
--- a/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
+++ b/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
@@ -23,7 +23,7 @@
 
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class SimpleExtendedModelTests {
     @Test
     public void emptyDatabaseTest() throws Exception {
diff --git a/example/src/test/java/com/example/sugartest/StringFieldTests.java b/example/src/test/java/com/example/sugartest/StringFieldTests.java
index c37446e4..afecdf3d 100644
--- a/example/src/test/java/com/example/sugartest/StringFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/StringFieldTests.java
@@ -14,7 +14,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(emulateSdk=18)
+@Config(sdk=18)
 public class StringFieldTests {
     @Test
     public void nullStringExtendedTest() {
diff --git a/gradle.properties b/gradle.properties
index 672f5287..97b0dbf7 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -21,8 +21,8 @@ POM_PACKAGING=aar
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-VERSION_NAME=1.4
-VERSION_CODE=1
+VERSION_NAME=2
+VERSION_CODE=2
 GROUP=com.github.satyan
 
 POM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database
diff --git a/library/build.gradle b/library/build.gradle
index 0b97b43f..3dbb44d3 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -3,7 +3,7 @@ apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 23
-    buildToolsVersion "23.0.0"
+    buildToolsVersion "23.0.2"
 
     defaultConfig {
         minSdkVersion 9
@@ -15,12 +15,19 @@ android {
             minifyEnabled false
         }
     }
+
+    testOptions{
+        unitTests.returnDefaultValues = true
+    }
+
+    lintOptions{
+        abortOnError false
+    }
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.0.1'
-    compile 'com.google.guava:guava:18.0'
     testCompile 'junit:junit:4.12'
+    compile 'com.google.guava:guava:18.0'
 }
 
 task libraryJar(type: Jar) {
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index 9c332ff0..99955e67 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -7,9 +7,11 @@
 import android.util.Log;
 
 import com.orm.dsl.Column;
+import com.orm.dsl.MultiUnique;
 import com.orm.dsl.Relationship;
 import com.orm.dsl.NotNull;
 import com.orm.dsl.Unique;
+import com.orm.util.MigrationFileParser;
 import com.orm.util.NamingHelper;
 import com.orm.util.NumberComparator;
 import com.orm.util.QueryBuilder;
@@ -20,6 +22,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.lang.reflect.Field;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -30,6 +33,11 @@
 
     private Context context;
 
+    public static final String NULL = " NULL";
+    public static final String NOT_NULL = " NOT NULL";
+    public static final String UNIQUE = " UNIQUE";
+    public static final String SUGAR = "Sugar";
+
     public SchemaGenerator(Context context) {
         this.context = context;
     }
@@ -52,15 +60,32 @@ public void clearDb(SQLiteDatabase sqLiteDatabase) {
     public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
         List<Class> domainClasses = getDomainClasses(context);
         String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
+
         for (Class domain : domainClasses) {
-            Cursor c = sqLiteDatabase.rawQuery(String.format(sql, NamingHelper.toSQLName(domain)), null);
+            String tableName = NamingHelper.toSQLName(domain);
+            Cursor c = sqLiteDatabase.rawQuery(String.format(sql, tableName), null);
             if (c.moveToFirst() && c.getInt(0) == 0) {
                 createTable(domain, sqLiteDatabase);
+            } else {
+                addColumns(domain, sqLiteDatabase);
             }
         }
         executeSugarUpgrade(sqLiteDatabase, oldVersion, newVersion);
     }
 
+    private ArrayList<String> getColumnNames(SQLiteDatabase sqLiteDatabase, String tableName) {
+        Cursor resultsQuery = sqLiteDatabase.query(tableName, null, null, null, null, null, null);
+        //Check if columns match vs the one on the domain class
+        ArrayList<String> columnNames = new ArrayList<>();
+        for (int i = 0; i < resultsQuery.getColumnCount(); i++) {
+            String columnName = resultsQuery.getColumnName(i);
+            columnNames.add(columnName);
+        }
+        resultsQuery.close();
+        return columnNames;
+    }
+
+
     public void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<Class> tables = getDomainClasses(context);
         for (Class table : tables) {
@@ -75,7 +100,7 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
             List<String> files = Arrays.asList(this.context.getAssets().list("sugar_upgrades"));
             Collections.sort(files, new NumberComparator());
             for (String file : files) {
-                Log.i("Sugar", "filename : " + file);
+                Log.i(SUGAR, "filename : " + file);
 
                 try {
                     int version = Integer.valueOf(file.replace(".sql", ""));
@@ -85,12 +110,12 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
                         isSuccess = true;
                     }
                 } catch (NumberFormatException e) {
-                    Log.i("Sugar", "not a sugar script. ignored." + file);
+                    Log.i(SUGAR, "not a sugar script. ignored." + file);
                 }
 
             }
         } catch (IOException e) {
-            Log.e("Sugar", e.getMessage());
+            Log.e(SUGAR, e.getMessage());
         }
 
         return isSuccess;
@@ -100,19 +125,27 @@ private void executeScript(SQLiteDatabase db, String file) {
         try {
             InputStream is = this.context.getAssets().open("sugar_upgrades/" + file);
             BufferedReader reader = new BufferedReader(new InputStreamReader(is));
+            StringBuilder sb = new StringBuilder();
             String line;
             while ((line = reader.readLine()) != null) {
-                Log.i("Sugar script", line);
-                db.execSQL(line.toString());
+                sb.append(line);
             }
+            MigrationFileParser migrationFileParser = new MigrationFileParser(sb.toString());
+            for(String statement: migrationFileParser.getStatements()){
+                Log.i("Sugar script", statement);
+                if (!statement.isEmpty()) {
+                    db.execSQL(statement);
+                }
+            }
+
         } catch (IOException e) {
-            Log.e("Sugar", e.getMessage());
+            Log.e(SUGAR, e.getMessage());
         }
 
-        Log.i("Sugar", "Script executed");
+        Log.i(SUGAR, "Script executed");
     }
 
-    private void clearTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
+	private void clearTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         Log.i("Sugar", "Clear table");
         List<Field> fields = ReflectionUtil.getTableFields(table);
         String tableName = NamingHelper.toSQLName(table);
@@ -150,11 +183,57 @@ private void clearJoinTable(Relationship relationship, SQLiteDatabase sqLiteData
         }
     }
 
-    private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
-        Log.i("Sugar", "Create table");
+    private void addColumns(Class<?> table, SQLiteDatabase sqLiteDatabase) {
+
         List<Field> fields = ReflectionUtil.getTableFields(table);
         String tableName = NamingHelper.toSQLName(table);
-        StringBuilder sb = new StringBuilder("CREATE TABLE ");
+        ArrayList<String> presentColumns = getColumnNames(sqLiteDatabase, tableName);
+        ArrayList<String> alterCommands = new ArrayList<>();
+
+        for (Field column : fields) {
+            String columnName = NamingHelper.toSQLName(column);
+            String columnType = QueryBuilder.getColumnType(column.getType());
+
+            if (column.isAnnotationPresent(Column.class)) {
+                Column columnAnnotation = column.getAnnotation(Column.class);
+                columnName = columnAnnotation.name();
+            }
+
+            if (!presentColumns.contains(columnName)) {
+                StringBuilder sb = new StringBuilder("ALTER TABLE ");
+                sb.append(tableName).append(" ADD COLUMN ").append(columnName).append(" ").append(columnType);
+                if (column.isAnnotationPresent(NotNull.class)) {
+                    if (columnType.endsWith(" NULL")) {
+                        sb.delete(sb.length() - 5, sb.length());
+                    }
+                    sb.append(" NOT NULL");
+                }
+
+                // Unique is not working on ALTER TABLE
+//                if (column.isAnnotationPresent(Unique.class)) {
+//                    sb.append(" UNIQUE");
+//                }
+                alterCommands.add(sb.toString());
+            }
+			
+            //Create join table for all relationships. This will prevent issues with migrations (yes, unnecessary joins will be slower)
+            if(column.isAnnotationPresent(Relationship.class)) {
+                Relationship relationship =  column.getAnnotation(Relationship.class);
+                createJoinTable(relationship, sqLiteDatabase);
+            }
+        }
+
+        for (String command : alterCommands) {
+            Log.i("Sugar", command);
+            sqLiteDatabase.execSQL(command);
+        }
+    }
+
+    protected String createTableSQL(Class<?> table, SQLiteDatabase sqLiteDatabase) {
+        Log.i(SUGAR, "Create table if not exists");
+        List<Field> fields = ReflectionUtil.getTableFields(table);
+        String tableName = NamingHelper.toSQLName(table);
+        StringBuilder sb = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
         sb.append(tableName).append(" ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
 
         for (Field column : fields) {
@@ -173,31 +252,31 @@ private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
                     sb.append(", ").append(columnName).append(" ").append(columnType);
 
                     if (columnAnnotation.notNull()) {
-                        if (columnType.endsWith(" NULL")) {
+                        if (columnType.endsWith(NULL)) {
                             sb.delete(sb.length() - 5, sb.length());
                         }
-                        sb.append(" NOT NULL");
+                        sb.append(NOT_NULL);
                     }
 
                     if (columnAnnotation.unique()) {
-                        sb.append(" UNIQUE");
+                        sb.append(UNIQUE);
                     }
 
                 } else {
                     sb.append(", ").append(columnName).append(" ").append(columnType);
 
                     if (column.isAnnotationPresent(NotNull.class)) {
-                        if (columnType.endsWith(" NULL")) {
+                        if (columnType.endsWith(NULL)) {
                             sb.delete(sb.length() - 5, sb.length());
                         }
-                        sb.append(" NOT NULL");
+                        sb.append(NOT_NULL);
                     }
 
                     if (column.isAnnotationPresent(Unique.class)) {
-                        sb.append(" UNIQUE");
+                        sb.append(UNIQUE);
                     }
                 }
-
+				
                 //Create join table for all relationships. This will prevent issues with migrations (yes, unnecessary joins will be slower)
                 if(column.isAnnotationPresent(Relationship.class)) {
                     Relationship relationship =  column.getAnnotation(Relationship.class);
@@ -206,12 +285,36 @@ private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
             }
         }
 
+        if (table.isAnnotationPresent(MultiUnique.class)) {
+            String constraint = table.getAnnotation(MultiUnique.class).value();
+
+            sb.append(", UNIQUE(");
+
+            String[] constraintFields = constraint.split(",");
+            for(int i = 0; i < constraintFields.length; i++) {
+                String columnName = NamingHelper.toSQLNameDefault(constraintFields[i]);
+                sb.append(columnName);
+
+                if(i < (constraintFields.length -1)) {
+                    sb.append(",");
+                }
+            }
+
+            sb.append(") ON CONFLICT REPLACE");
+        }
+
         sb.append(" ) ");
-        Log.i("Sugar", "Creating table " + tableName);
+        Log.i(SUGAR, "Creating table " + tableName);
 
-        if (!"".equals(sb.toString())) {
+        return sb.toString();
+    }
+
+    private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
+        String createSQL = createTableSQL(table, sqLiteDatabase);
+
+        if (!createSQL.isEmpty()) {
             try {
-                sqLiteDatabase.execSQL(sb.toString());
+                sqLiteDatabase.execSQL(createSQL);
             } catch (SQLException e) {
                 e.printStackTrace();
             }
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 58aa4737..03dd1658 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -2,21 +2,19 @@
 
 import android.content.Context;
 
-import com.google.common.collect.MapMaker;
-
-import java.util.concurrent.ConcurrentMap;
+import java.util.Collections;
+import java.util.Map;
+import java.util.WeakHashMap;
 
 public class SugarContext {
 
     private static SugarContext instance = null;
     private SugarDb sugarDb;
-    private Context context;
-    private ConcurrentMap<Object, Long> entitiesMap;
+    private Map<Object, Long> entitiesMap;
 
     private SugarContext(Context context) {
-        this.context = context;
         this.sugarDb = new SugarDb(context);
-        this.entitiesMap = new MapMaker().weakKeys().makeMap();
+        this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Long>());
     }
     
     public static SugarContext getSugarContext() {
@@ -57,7 +55,7 @@ protected SugarDb getSugarDb() {
         return sugarDb;
     }
 
-    ConcurrentMap<Object, Long> getEntitiesMap() {
+    Map<Object, Long> getEntitiesMap() {
         return entitiesMap;
     }
 }
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index 2e3c2e58..153fc82f 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
 
 import com.orm.util.ManifestHelper;
 import com.orm.util.SugarCursorFactory;
@@ -14,6 +15,7 @@
 
     private final SchemaGenerator schemaGenerator;
     private SQLiteDatabase sqLiteDatabase;
+    private int openedConnections = 0;
 
     public SugarDb(Context context) {
         super(context, ManifestHelper.getDatabaseName(context),
@@ -43,4 +45,20 @@ public void clearDb() {
         schemaGenerator.clearDb(sqLiteDatabase);
     }
 
+    @Override
+    public synchronized SQLiteDatabase getReadableDatabase() {
+        Log.d("SUGAR", "getReadableDatabase");
+        openedConnections++;
+        return super.getReadableDatabase();
+    }
+
+    @Override
+    public synchronized void close() {
+        Log.d("SUGAR", "getReadableDatabase");
+        openedConnections--;
+        if(openedConnections == 0) {
+            Log.d("SUGAR", "closing");
+            super.close();
+        }
+    }
 }
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index b74335b9..aa86cb1c 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -14,15 +14,12 @@
 import com.orm.dsl.Id;
 import com.orm.dsl.Relationship;
 import com.orm.dsl.Table;
+import com.orm.dsl.Unique;
 import com.orm.util.NamingHelper;
-import com.orm.util.ReflectionUtil;
 import com.orm.util.QueryBuilder;
+import com.orm.util.ReflectionUtil;
+import com.orm.util.SugarCursor;
 
-import java.lang.IllegalStateException;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.String;
-import java.lang.StringBuffer;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -39,16 +36,25 @@
 
 public class SugarRecord {
 
+    public static final String SUGAR = "Sugar";
     private Long id = null;
 
+    private static SQLiteDatabase getSugarDataBase() {
+        return getSugarContext().getSugarDb().getDB();
+    }
+
     public static <T> int deleteAll(Class<T> type) {
         return deleteAll(type, null);
     }
 
     public static <T> int deleteAll(Class<T> type, String whereClause, String... whereArgs) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
-        return sqLiteDatabase.delete(NamingHelper.toSQLName(type), whereClause, whereArgs);
+        return getSugarDataBase().delete(NamingHelper.toSQLName(type), whereClause, whereArgs);
+    }
+
+    public static <T> Cursor getCursor(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        Cursor raw = getSugarDataBase().query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
+                groupBy, null, orderBy, limit);
+        return new SugarCursor(raw);
     }
 
     @SuppressWarnings("deprecation")
@@ -58,7 +64,7 @@
 
     @SuppressWarnings("deprecation")
     public static <T> void saveInTx(Collection<T> objects) {
-        SQLiteDatabase sqLiteDatabase = getSugarContext().getSugarDb().getDB();
+        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
         try {
             sqLiteDatabase.beginTransaction();
             sqLiteDatabase.setLockingEnabled(false);
@@ -67,7 +73,30 @@
             }
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
-            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
+            Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+        } finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void updateInTx(T... objects) {
+        updateInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void updateInTx(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
+        try {
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for (T object: objects) {
+                update(object);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
         } finally {
             sqLiteDatabase.endTransaction();
             sqLiteDatabase.setLockingEnabled(true);
@@ -81,7 +110,7 @@
 
     @SuppressWarnings("deprecation")
     public static <T> int deleteInTx(Collection<T> objects) {
-        SQLiteDatabase sqLiteDatabase = getSugarContext().getSugarDb().getDB();
+        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
         int deletedRows = 0;
         try {
             sqLiteDatabase.beginTransaction();
@@ -94,7 +123,7 @@
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
             deletedRows = 0;
-            Log.i("Sugar", "Error in deleting in transaction " + e.getMessage());
+            Log.i(SUGAR, "Error in deleting in transaction " + e.getMessage());
         } finally {
             sqLiteDatabase.endTransaction();
             sqLiteDatabase.setLockingEnabled(true);
@@ -152,18 +181,14 @@
     }
 
     public static <T> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
-        Cursor c = sqLiteDatabase.rawQuery(query, arguments);
-        return new CursorIterator<T>(type, c);
+        Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
+        return new CursorIterator<T>(type, cursor);
     }
 
     public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
-        Cursor c = sqLiteDatabase.query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
+        Cursor cursor = getSugarDataBase().query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
                 groupBy, null, orderBy, limit);
-        return new CursorIterator<T>(type, c);
+        return new CursorIterator<T>(type, cursor);
     }
 
     public static <T> List<T> find(Class<T> type, String whereClause, String... whereArgs) {
@@ -171,29 +196,13 @@
     }
 
     public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
-        T entity;
-        List<T> toRet = new ArrayList<T>();
-        Cursor c = sqLiteDatabase.rawQuery(query, arguments);
-
-        try {
-            while (c.moveToNext()) {
-                entity = type.getDeclaredConstructor().newInstance();
-                inflate(c, entity, getSugarContext().getEntitiesMap());
-                toRet.add(entity);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        } finally {
-            c.close();
-        }
+        Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
 
-        return toRet;
+        return  getEntitiesFromCursor(cursor, type);
     }
 
     public static void executeQuery(String query, String... arguments) {
-        getSugarContext().getSugarDb().getDB().execSQL(query, arguments);
+        getSugarDataBase().execSQL(query, arguments);
     }
 
     public static <T> List<T> findByRelationship(Class<T> type, Relationship relationship, String where, String groupBy, String orderBy, String limit) {
@@ -205,8 +214,6 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> List<T> findByRelationship(Class<T> type, String joinTable, String objectIdName, String joinColumnName, String where, String groupBy, String orderBy, String limit) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
         T entity;
         List<T> toRet = new ArrayList<T>();
 
@@ -223,7 +230,7 @@ public static void executeQuery(String query, String... arguments) {
 
         Log.v("SUGAR", "Join table sql: " + sb.toString());
 
-        Cursor c = sqLiteDatabase.rawQuery(sb.toString(), new String[0]);
+        Cursor c = getSugarDataBase().rawQuery(sb.toString(), new String[0]);
 
         try {
             while (c.moveToNext()) {
@@ -240,11 +247,9 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static List<Long> executeRawQuery(String query) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
         List<Long> ids = new ArrayList<Long>();
 
-        Cursor cursor = sqLiteDatabase.rawQuery(query, new String[0]);
+        Cursor cursor = getSugarDataBase().rawQuery(query, new String[0]);
 
         try {
             while (cursor.moveToNext()) {
@@ -279,24 +284,28 @@ private static void appendClause(StringBuilder s, String name, String clause) {
     }
 
     public static <T> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
-        T entity;
-        List<T> toRet = new ArrayList<T>();
-        Cursor c = sqLiteDatabase.query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
+        Cursor cursor = getSugarDataBase().query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
                 groupBy, null, orderBy, limit);
+
+        return getEntitiesFromCursor(cursor, type);
+    }
+
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
+        T entity;
+        List<T> result = new ArrayList<T>();
         try {
-            while (c.moveToNext()) {
+            while (cursor.moveToNext()) {
                 entity = type.getDeclaredConstructor().newInstance();
-                inflate(c, entity, getSugarContext().getEntitiesMap());
-                toRet.add(entity);
+                inflate(cursor, entity, getSugarContext().getEntitiesMap());
+                result.add(entity);
             }
         } catch (Exception e) {
             e.printStackTrace();
         } finally {
-            c.close();
+            cursor.close();
         }
-        return toRet;
+
+        return result;
     }
 
     public static <T> long count(Class<?> type) {
@@ -308,17 +317,14 @@ private static void appendClause(StringBuilder s, String name, String clause) {
     }
 
     public static <T> long count(Class<?> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-        SugarDb db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
-
-        long toRet = -1;
+        long result = -1;
         String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
         SQLiteStatement sqliteStatement;
         try {
-            sqliteStatement = sqLiteDatabase.compileStatement("SELECT count(*) FROM " + NamingHelper.toSQLName(type) + filter);
+            sqliteStatement = getSugarDataBase().compileStatement("SELECT count(*) FROM " + NamingHelper.toSQLName(type) + filter);
         } catch (SQLiteException e) {
             e.printStackTrace();
-            return toRet;
+            return result;
         }
 
         if (whereArgs != null) {
@@ -328,32 +334,16 @@ private static void appendClause(StringBuilder s, String name, String clause) {
         }
 
         try {
-            toRet = sqliteStatement.simpleQueryForLong();
+            result = sqliteStatement.simpleQueryForLong();
         } finally {
             sqliteStatement.close();
         }
 
-        return toRet;
+        return result;
     }
 
     public static long save(Object object) {
-
-        Set<SugarRecord> recordsToSave = new HashSet<SugarRecord>();
-        ListMultimap<String, ContentValues> joinTables = ArrayListMultimap.create();
-        ReflectionUtil.getRecordsToSave(object, recordsToSave, joinTables);
-
-        if(recordsToSave != null && !recordsToSave.isEmpty()) {
-            saveInTx(recordsToSave);
-
-            if(joinTables != null) {
-                for(String tableName: joinTables.keySet()) {
-                    saveJoinTableList(getSugarContext().getSugarDb().getDB(), joinTables.get(tableName), tableName);
-                }
-            }
-        }
-
-
-        return save(getSugarContext().getSugarDb().getDB(), object);
+        return save(getSugarDataBase(), object);
     }
 
     static void saveJoinTableList(SQLiteDatabase db, List<ContentValues> relationshipList, String joinTableName) {
@@ -446,11 +436,55 @@ else if (column.getName().equals("id") && idField == null) {
             ((SugarRecord) object).setId(id);
         }
 
-        Log.i("Sugar", object.getClass().getSimpleName() + " saved : " + id);
+        Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
 
         return id;
     }
 
+    public static long update(Object object) {
+        return update(getSugarDataBase(), object);
+    }
+
+    static long update(SQLiteDatabase db, Object object) {
+        Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+        List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+        ContentValues values = new ContentValues(columns.size());
+
+        StringBuilder whereClause = new StringBuilder();
+        List<String> whereArgs = new ArrayList<>();
+
+        for (Field column : columns) {
+            if(column.isAnnotationPresent(Unique.class)) {
+                try {
+                    column.setAccessible(true);
+                    String columnName = NamingHelper.toSQLName(column);
+                    Object columnValue = column.get(object);
+
+                    whereClause.append(columnName).append(" = ?");
+                    whereArgs.add(String.valueOf(columnValue));
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            } else {
+                if (!column.getName().equals("id")) {
+                    ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+                }
+            }
+        }
+
+        String[] whereArgsArray = whereArgs.toArray(new String[whereArgs.size()]);
+        // Get SugarRecord based on Unique values
+        long rowsEffected = db.update(NamingHelper.toSQLName(object.getClass()), values, whereClause.toString(), whereArgsArray);
+
+        if (rowsEffected == 0) {
+            return save(db, object);
+        } else {
+            return rowsEffected;
+        }
+    }
+
+
+
     public static boolean isSugarEntity(Class<?> objectClass) {
         return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
     }
@@ -481,11 +515,10 @@ public boolean delete() {
         Long id = getId();
         Class<?> type = getClass();
         if (id != null && id > 0L) {
-            SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
-            Log.i("Sugar", type.getSimpleName() + " deleted : " + id);
-            return db.delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()}) == 1;
+            Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
+            return getSugarDataBase().delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()}) == 1;
         } else {
-            Log.i("Sugar", "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
+            Log.i(SUGAR, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
             return false;
         }
     }
@@ -501,46 +534,34 @@ public static boolean delete(Object object) {
                 field.setAccessible(true);
                 Long id = (Long) field.get(object);
                 if (id != null && id > 0L) {
-                    SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
-                    boolean deleted = db.delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()}) == 1;
-                    Log.i("Sugar", type.getSimpleName() + " deleted : " + id);
+                    boolean deleted = getSugarDataBase().delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()}) == 1;
+                    Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
                     return deleted;
                 } else {
-                    Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
+                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
                     return false;
                 }
             } catch (NoSuchFieldException e) {
-                Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
+                Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
                 return false;
             } catch (IllegalAccessException e) {
-                Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
+                Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
                 return false;
             }
         } else if (SugarRecord.class.isAssignableFrom(type)) {
             return ((SugarRecord) object).delete();
         } else {
-            Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
+            Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
             return false;
         }
     }
 
     public long save() {
+        return save(getSugarDataBase(), this);
+    }
 
-        Set<SugarRecord> recordsToSave = new HashSet<SugarRecord>();
-        ListMultimap<String, ContentValues> joinTables = ArrayListMultimap.create();
-        ReflectionUtil.getRecordsToSave(this, recordsToSave, joinTables);
-
-        if(recordsToSave != null && !recordsToSave.isEmpty()) {
-            saveInTx(recordsToSave);
-
-            if(joinTables != null) {
-                for(String tableName: joinTables.keySet()) {
-                    saveJoinTableList(getSugarContext().getSugarDb().getDB(), joinTables.get(tableName), tableName);
-                }
-            }
-        }
-
-        return save(getSugarContext().getSugarDb().getDB(), this);
+    public long update() {
+        return update(getSugarDataBase(), this);
     }
 
     @SuppressWarnings("unchecked")
diff --git a/library/src/main/java/com/orm/SugarTransactionHelper.java b/library/src/main/java/com/orm/SugarTransactionHelper.java
index 25687566..2e0e9011 100644
--- a/library/src/main/java/com/orm/SugarTransactionHelper.java
+++ b/library/src/main/java/com/orm/SugarTransactionHelper.java
@@ -24,7 +24,7 @@ public static void doInTransaction(Callback callback) {
         }
     }
 
-    public static interface Callback {
+    public interface Callback {
         void manipulateInTransaction();
     }
 }
diff --git a/library/src/main/java/com/orm/dsl/Column.java b/library/src/main/java/com/orm/dsl/Column.java
index 2c47e3c0..58e66529 100644
--- a/library/src/main/java/com/orm/dsl/Column.java
+++ b/library/src/main/java/com/orm/dsl/Column.java
@@ -1,9 +1,12 @@
 package com.orm.dsl;
 
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface Column {
     String name();
     boolean unique() default false;
diff --git a/library/src/main/java/com/orm/dsl/Ignore.java b/library/src/main/java/com/orm/dsl/Ignore.java
index 9678d33a..e4d748f1 100644
--- a/library/src/main/java/com/orm/dsl/Ignore.java
+++ b/library/src/main/java/com/orm/dsl/Ignore.java
@@ -1,8 +1,11 @@
 package com.orm.dsl;
 
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface Ignore {
 }
diff --git a/library/src/main/java/com/orm/dsl/MultiUnique.java b/library/src/main/java/com/orm/dsl/MultiUnique.java
new file mode 100644
index 00000000..86c6e323
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/MultiUnique.java
@@ -0,0 +1,12 @@
+package com.orm.dsl;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface MultiUnique {
+    String value();
+}
diff --git a/library/src/main/java/com/orm/dsl/NotNull.java b/library/src/main/java/com/orm/dsl/NotNull.java
index b2361851..f71ebf54 100644
--- a/library/src/main/java/com/orm/dsl/NotNull.java
+++ b/library/src/main/java/com/orm/dsl/NotNull.java
@@ -1,8 +1,11 @@
 package com.orm.dsl;
 
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface NotNull {
 }
diff --git a/library/src/main/java/com/orm/dsl/Table.java b/library/src/main/java/com/orm/dsl/Table.java
index 33dfa2e8..77c9afe8 100644
--- a/library/src/main/java/com/orm/dsl/Table.java
+++ b/library/src/main/java/com/orm/dsl/Table.java
@@ -1,9 +1,12 @@
 package com.orm.dsl;
 
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
 public @interface Table {
     String name() default "";
     String primaryKeyField() default "id";
diff --git a/library/src/main/java/com/orm/dsl/Unique.java b/library/src/main/java/com/orm/dsl/Unique.java
index 7384b749..c05960ed 100644
--- a/library/src/main/java/com/orm/dsl/Unique.java
+++ b/library/src/main/java/com/orm/dsl/Unique.java
@@ -1,8 +1,11 @@
 package com.orm.dsl;
 
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface Unique {
 }
diff --git a/library/src/main/java/com/orm/query/Select.java b/library/src/main/java/com/orm/query/Select.java
index e975d1ba..b7d87bff 100644
--- a/library/src/main/java/com/orm/query/Select.java
+++ b/library/src/main/java/com/orm/query/Select.java
@@ -1,5 +1,7 @@
 package com.orm.query;
 
+import android.database.Cursor;
+
 import com.orm.SugarRecord;
 import com.orm.util.NamingHelper;
 
@@ -12,12 +14,22 @@
     private Class<T> record;
     private String[] arguments;
     private String whereClause = "";
-    private String orderBy;
-    private String groupBy;
-    private String limit;
-    private String offset;
-    private boolean caseInsensitive = false;
+    private String orderBy = "";
+    private String groupBy = "";
+    private String limit = "";
+    private String offset = "";
     private List<Object> args = new ArrayList<Object>();
+    private static final String SPACE =" ";
+    private static final String SINGLE_QUOTE ="'";
+    private static final String LEFT_PARENTHESIS="(";
+    private static final String RIGHT_PARENTHESIS=")";
+    private static final String SELECT_FROM="SELECT * FROM ";
+    private static final String WHERE="WHERE ";
+    private static final String ORDER_BY ="ORDER BY ";
+    private static final String GROUP_BY ="GROUP BY ";
+    private static final String LIMIT ="LIMIT ";
+    private static final String OFFSET ="OFFSET ";
+    private boolean caseInsensitive;
 
     public Select(Class<T> record) {
         this(record, false);
@@ -51,6 +63,11 @@ public Select(Class<T> record, boolean caseInsensitive) {
         return this;
     }
 
+    public Select<T> offset(String offset) {
+        this.offset = offset;
+        return this;
+    }
+
     public Select<T> where(String whereClause) {
         this.whereClause = whereClause;
         return this;
@@ -64,10 +81,10 @@ public Select(Class<T> record, boolean caseInsensitive) {
     }
 
     private void mergeConditions(Condition[] conditions, Condition.Type type) {
-        StringBuilder toAppend = new StringBuilder("");
+        StringBuilder toAppend = new StringBuilder();
         for (Condition condition : conditions) {
             if (toAppend.length() != 0) {
-                toAppend.append(" ").append(type.name()).append(" ");
+                toAppend.append(SPACE).append(type.name()).append(SPACE);
             }
 
             if (Condition.Check.LIKE.equals(condition.getCheck()) ||
@@ -77,11 +94,9 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
                     .append(condition.getProperty())
                     .append(caseInsensitive ? ")" : "")
                     .append(condition.getCheckSymbol())
-                    .append(caseInsensitive ? "LOWER(" : "")
-                    .append("'")
+                    .append(SINGLE_QUOTE)
                     .append(condition.getValue().toString())
-                    .append("'")
-                    .append(caseInsensitive ? ")" : "");
+                    .append(SINGLE_QUOTE);
             } else if (Condition.Check.IS_NULL.equals(condition.getCheck()) ||
                     Condition.Check.IS_NOT_NULL.equals(condition.getCheck())) {
                 toAppend
@@ -100,11 +115,11 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
             }
         }
         
-        if (!"".equals(whereClause)) {
-            whereClause += " " + type.name() + " ";
+        if (!whereClause.isEmpty()) {
+            whereClause += SPACE + type.name() + SPACE;
         }
 
-        whereClause += "(" + toAppend + ")";
+        whereClause += LEFT_PARENTHESIS + toAppend + RIGHT_PARENTHESIS;
     }
 
     public Select<T> whereOr(Condition... args) {
@@ -128,6 +143,9 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
         return this;
     }
 
+    public Cursor getCursor() {
+       return SugarRecord.getCursor(record, whereClause, arguments, groupBy, orderBy, limit);
+    }
     public List<T> list() {
         if (arguments == null) {
             arguments = convertArgs(args);
@@ -155,22 +173,26 @@ public T first() {
     
     public String toSql() {
         StringBuilder sql = new StringBuilder();
-        sql.append("SELECT * FROM ").append(NamingHelper.toSQLName(this.record)).append(" ");
+        sql.append(SELECT_FROM).append(NamingHelper.toSQLName(this.record)).append(SPACE);
+
+        if (!whereClause.isEmpty()) {
+            sql.append(WHERE).append(whereClause).append(SPACE);
+        }
 
-        if (whereClause != null) {
-            sql.append("WHERE ").append(whereClause).append(" ");
+        if (!orderBy.isEmpty()) {
+            sql.append(ORDER_BY).append(orderBy).append(SPACE);
         }
 
-        if (orderBy != null) {
-            sql.append("ORDER BY ").append(orderBy).append(" ");
+        if (!groupBy.isEmpty()) {
+            sql.append(GROUP_BY).append(groupBy).append(SPACE);
         }
 
-        if (limit != null) {
-            sql.append("LIMIT ").append(limit).append(" ");
+        if (!limit.isEmpty()) {
+            sql.append(LIMIT).append(limit).append(SPACE);
         }
 
-        if (offset != null) {
-            sql.append("OFFSET ").append(offset).append(" ");
+        if (!offset.isEmpty()) {
+            sql.append(OFFSET).append(offset).append(SPACE);
         }
 
         return sql.toString();
diff --git a/library/src/main/java/com/orm/util/MigrationFileParser.java b/library/src/main/java/com/orm/util/MigrationFileParser.java
new file mode 100644
index 00000000..1691a1eb
--- /dev/null
+++ b/library/src/main/java/com/orm/util/MigrationFileParser.java
@@ -0,0 +1,21 @@
+package com.orm.util;
+
+/**
+ * Created by Nursultan Turdaliev on 12/4/15.
+ */
+public class MigrationFileParser {
+
+    private String content;
+
+    /**
+     * @param content
+     */
+    public MigrationFileParser(String content){
+        this.content = content.replaceAll("(\\/\\*([\\s\\S]*?)\\*\\/)|(--(.)*)|(\n)","");
+    }
+
+    public String[] getStatements(){
+        return this.content.split(";");
+    }
+
+}
diff --git a/library/src/main/java/com/orm/util/MultiDexHelper.java b/library/src/main/java/com/orm/util/MultiDexHelper.java
new file mode 100644
index 00000000..87f7fb3a
--- /dev/null
+++ b/library/src/main/java/com/orm/util/MultiDexHelper.java
@@ -0,0 +1,103 @@
+package com.orm.util;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.os.Build;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+
+import dalvik.system.DexFile;
+
+/**
+ * Created by xudshen@hotmail.com on 14/11/13.
+ */
+
+//http://stackoverflow.com/a/26892658
+public class MultiDexHelper {
+    private static final String EXTRACTED_NAME_EXT = ".classes";
+    private static final String EXTRACTED_SUFFIX = ".zip";
+
+    private static final String SECONDARY_FOLDER_NAME = "code_cache" + File.separator +
+            "secondary-dexes";
+
+    private static final String PREFS_FILE = "multidex.version";
+    private static final String KEY_DEX_NUMBER = "dex.number";
+
+    private static SharedPreferences getMultiDexPreferences(Context context) {
+        return context.getSharedPreferences(PREFS_FILE,
+                Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB
+                        ? Context.MODE_PRIVATE
+                        : Context.MODE_PRIVATE | Context.MODE_MULTI_PROCESS);
+    }
+
+    /**
+     * get all the dex path
+     *
+     * @param context the application context
+     * @return all the dex path
+     * @throws PackageManager.NameNotFoundException
+     * @throws IOException
+     */
+    public static List<String> getSourcePaths(Context context) throws PackageManager.NameNotFoundException, IOException {
+        ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), 0);
+        File sourceApk = new File(applicationInfo.sourceDir);
+        File dexDir = new File(applicationInfo.dataDir, SECONDARY_FOLDER_NAME);
+
+        List<String> sourcePaths = new ArrayList<String>();
+        sourcePaths.add(applicationInfo.sourceDir); //add the default apk path
+
+        //the prefix of extracted file, ie: test.classes
+        String extractedFilePrefix = sourceApk.getName() + EXTRACTED_NAME_EXT;
+        //the total dex numbers
+        int totalDexNumber = getMultiDexPreferences(context).getInt(KEY_DEX_NUMBER, 1);
+
+        for (int secondaryNumber = 2; secondaryNumber <= totalDexNumber; secondaryNumber++) {
+            //for each dex file, ie: test.classes2.zip, test.classes3.zip...
+            String fileName = extractedFilePrefix + secondaryNumber + EXTRACTED_SUFFIX;
+            File extractedFile = new File(dexDir, fileName);
+            if (extractedFile.isFile()) {
+                sourcePaths.add(extractedFile.getAbsolutePath());
+                //we ignore the verify zip part
+            }
+        }
+
+        return sourcePaths;
+    }
+
+    /**
+     * get all the classes name in "classes.dex", "classes2.dex", ....
+     *
+     * @param context the application context
+     * @return all the classes name
+     * @throws PackageManager.NameNotFoundException
+     * @throws IOException
+     */
+    public static List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
+        List<String> classNames = new ArrayList<String>();
+        for (String path : getSourcePaths(context)) {
+            try {
+                DexFile dexfile;
+                if (path.endsWith(EXTRACTED_SUFFIX)) {
+                    //NOT use new DexFile(path), because it will throw "permission error in /data/dalvik-cache"
+                    dexfile = DexFile.loadDex(path, path + ".tmp", 0);
+                } else {
+                    dexfile = new DexFile(path);
+                }
+                Enumeration<String> dexEntries = dexfile.entries();
+                while (dexEntries.hasMoreElements()) {
+                    classNames.add(dexEntries.nextElement());
+                }
+            } catch (IOException e) {
+                throw new IOException("Error at loading dex file '" +
+                        path + "'");
+            }
+        }
+        return classNames;
+    }
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/util/NamingHelper.java b/library/src/main/java/com/orm/util/NamingHelper.java
index 85c29ea4..8bdd2475 100644
--- a/library/src/main/java/com/orm/util/NamingHelper.java
+++ b/library/src/main/java/com/orm/util/NamingHelper.java
@@ -1,14 +1,9 @@
 package com.orm.util;
 
-import android.text.TextUtils;
-
 import com.orm.dsl.Column;
 import com.orm.dsl.Table;
 
 import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.LinkedList;
-import java.util.List;
 
 public class NamingHelper {
 
diff --git a/library/src/main/java/com/orm/util/NumberComparator.java b/library/src/main/java/com/orm/util/NumberComparator.java
index b39ca9c9..08a9f0b4 100644
--- a/library/src/main/java/com/orm/util/NumberComparator.java
+++ b/library/src/main/java/com/orm/util/NumberComparator.java
@@ -49,8 +49,8 @@ public int compare(Object o1, Object o2) {
 
         int ia = 0;
         int ib = 0;
-        int nza = 0;
-        int nzb = 0;
+        int nza;
+        int nzb;
         while (true) {
             nza = nzb = 0;
 
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index c96477ce..94e5797c 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -7,6 +7,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
+import com.google.common.collect.ListMultimap;
 import com.orm.SugarRecord;
 import com.orm.dsl.Id;
 import com.orm.dsl.Ignore;
@@ -29,9 +30,6 @@
 import java.util.Collection;
 import java.util.HashSet;
 
-import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.ListMultimap;
-
 import dalvik.system.DexFile;
 
 public class ReflectionUtil {
@@ -196,9 +194,9 @@
             Object columnValue = column.get(object);
 
             if (columnType.isAnnotationPresent(Table.class)) {
-                Field field = null;
-                Table table = columnType.getAnnotation(Table.class);
+                Field field;
                 try {
+                    Table table = columnType.getAnnotation(Table.class);
                     field = columnType.getDeclaredField(table.primaryKeyField());
                     field.setAccessible(true);
                     values.put(columnName,
@@ -350,6 +348,12 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
 
             int columnIndex = cursor.getColumnIndex(colName);
 
+            //TODO auto upgrade to add new columns
+            if (columnIndex < 0) {
+                Log.e("SUGAR", "Invalid colName, you should upgrade database");
+                return;
+            }
+
             if (cursor.isNull(columnIndex)) {
                 return;
             }
@@ -470,14 +474,9 @@ private static Class getDomainClass(String className, Context context) {
         Class<?> discoveredClass = null;
         try {
             discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
-        } catch (ClassNotFoundException e) {
-            if(e != null && e.getMessage() != null) {
-                Log.e("Sugar", e.getMessage());
-            }
-        } catch (ExceptionInInitializerError e1) {
-            if(e1 != null && e1.getMessage() != null) {
-                Log.e("Sugar", e1.getMessage());
-            }
+        } catch (Throwable e) {
+            String error = (e.getMessage() == null) ? "getDomainClass " + className + " error" : e.getMessage();
+            Log.e("Sugar", error);
         }
 
         if ((discoveredClass != null) &&
@@ -513,7 +512,8 @@ private static Class getDomainClass(String className, Context context) {
             while (urls.hasMoreElements()) {
                 List<String> fileNames = new ArrayList<String>();
                 String classDirectoryName = urls.nextElement().getFile();
-                if (classDirectoryName.contains("bin") || classDirectoryName.contains("classes")) {
+                if (classDirectoryName.contains("bin") || classDirectoryName.contains("classes")
+                        || classDirectoryName.contains("retrolambda")) {
                     File classDirectory = new File(classDirectoryName);
                     for (File filePath : classDirectory.listFiles()) {
                         populateFiles(filePath, fileNames, "");
@@ -524,8 +524,9 @@ private static Class getDomainClass(String className, Context context) {
                 }
             }
         } finally {
-            if (null != dexfile) dexfile.close();
+//            if (null != dexfile) dexfile.close();
         }
+
         return classNames;
     }
 
diff --git a/library/src/main/java/com/orm/util/SugarConfig.java b/library/src/main/java/com/orm/util/SugarConfig.java
index b93da25e..c8cf3868 100644
--- a/library/src/main/java/com/orm/util/SugarConfig.java
+++ b/library/src/main/java/com/orm/util/SugarConfig.java
@@ -1,10 +1,5 @@
 package com.orm.util;
 
-import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.util.Log;
-
 import java.lang.reflect.Field;
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/library/src/main/java/com/orm/util/SugarCursor.java b/library/src/main/java/com/orm/util/SugarCursor.java
new file mode 100644
index 00000000..e326f49b
--- /dev/null
+++ b/library/src/main/java/com/orm/util/SugarCursor.java
@@ -0,0 +1,29 @@
+package com.orm.util;
+
+import android.database.Cursor;
+import android.database.CursorWrapper;
+
+public class SugarCursor extends CursorWrapper {
+    public SugarCursor(Cursor cursor) {
+        super(cursor);
+    }
+
+    @Override
+    public int getColumnIndexOrThrow(String columnName) throws IllegalArgumentException {
+        try {
+            return super.getColumnIndexOrThrow(columnName);
+        } catch (IllegalArgumentException e) {
+            if (columnName.equals("_id"))
+                return super.getColumnIndexOrThrow("ID");
+            else
+                throw e;
+        }
+    }
+
+    @Override
+    public int getColumnIndex(String columnName) {
+        if (columnName.equals("_id"))
+            columnName = "ID";
+        return super.getColumnIndex(columnName);
+    }
+}
diff --git a/library/src/test/java/com/orm/SchemaGeneratorTest.java b/library/src/test/java/com/orm/SchemaGeneratorTest.java
new file mode 100644
index 00000000..ddef0e3f
--- /dev/null
+++ b/library/src/test/java/com/orm/SchemaGeneratorTest.java
@@ -0,0 +1,77 @@
+package com.orm;
+
+import com.orm.dsl.Table;
+import com.orm.models.EmptyModel;
+import com.orm.models.IntUniqueModel;
+import com.orm.models.MultiColumnUniqueModel;
+import com.orm.models.StringFieldAnnotatedModel;
+import com.orm.models.StringFieldExtendedModel;
+import com.orm.models.StringFieldExtendedModelAnnotatedColumn;
+import com.orm.query.DummyContext;
+import com.orm.util.NamingHelper;
+
+import org.junit.Test;
+
+import static junit.framework.Assert.assertEquals;
+
+public class SchemaGeneratorTest {
+    @Test
+    public void testEmptyTableCreation() throws Exception {
+        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
+        String createSQL = schemaGenerator.createTableSQL(EmptyModel.class);
+        assertEquals(
+                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(EmptyModel.class) +
+                    " ( ID INTEGER PRIMARY KEY AUTOINCREMENT  ) ",
+                createSQL);
+    }
+
+    @Test
+    public void testSimpleColumnTableCreation() throws Exception {
+        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
+        String createSQL = schemaGenerator.createTableSQL(StringFieldExtendedModel.class);
+        assertEquals(
+                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(StringFieldExtendedModel.class) +
+                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
+                        "NAME TEXT ) ",
+                createSQL);
+
+        String createSQL2 = schemaGenerator.createTableSQL(StringFieldAnnotatedModel.class);
+
+        assertEquals(
+                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(StringFieldAnnotatedModel.class) +
+                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
+                        "NAME TEXT ) ",
+                createSQL2);
+
+        String createSQL3 = schemaGenerator.createTableSQL(StringFieldExtendedModelAnnotatedColumn.class);
+
+        assertEquals(
+                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(StringFieldExtendedModelAnnotatedColumn.class) +
+                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
+                        "anyName TEXT ) ",
+                createSQL3);
+    }
+
+    @Test
+    public void testUniqueTableCreation() {
+        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
+        String createSQL = schemaGenerator.createTableSQL(IntUniqueModel.class);
+        assertEquals(
+                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(IntUniqueModel.class) +
+                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
+                        "VALUE INTEGER UNIQUE ) ",
+                createSQL);
+    }
+
+    @Test
+    public void testMultiColumnUniqueTableCreation() {
+        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
+        String createSQL = schemaGenerator.createTableSQL(MultiColumnUniqueModel.class);
+        assertEquals(
+                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(MultiColumnUniqueModel.class) +
+                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
+                        "A INTEGER, B INTEGER, " +
+                        "UNIQUE(A, B) ON CONFLICT REPLACE ) ",
+                createSQL);
+    }
+}
diff --git a/library/src/test/java/com/orm/models/EmptyModel.java b/library/src/test/java/com/orm/models/EmptyModel.java
new file mode 100644
index 00000000..8efb9dd4
--- /dev/null
+++ b/library/src/test/java/com/orm/models/EmptyModel.java
@@ -0,0 +1,12 @@
+package com.orm.models;
+
+import com.orm.SugarRecord;
+
+/**
+ * Created by sibelius on 02/12/15.
+ */
+public class EmptyModel extends SugarRecord {
+    public EmptyModel() {
+
+    }
+}
diff --git a/library/src/test/java/com/orm/models/IntUniqueModel.java b/library/src/test/java/com/orm/models/IntUniqueModel.java
new file mode 100644
index 00000000..e73e8968
--- /dev/null
+++ b/library/src/test/java/com/orm/models/IntUniqueModel.java
@@ -0,0 +1,20 @@
+package com.orm.models;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.Unique;
+
+/**
+ * Created by sibelius on 02/12/15.
+ */
+public class IntUniqueModel extends SugarRecord {
+    @Unique
+    private int value;
+
+    public IntUniqueModel() {
+
+    }
+
+    public IntUniqueModel(int value) {
+        this.value = value;
+    }
+}
diff --git a/library/src/test/java/com/orm/models/MultiColumnUniqueModel.java b/library/src/test/java/com/orm/models/MultiColumnUniqueModel.java
new file mode 100644
index 00000000..73ab5d8e
--- /dev/null
+++ b/library/src/test/java/com/orm/models/MultiColumnUniqueModel.java
@@ -0,0 +1,23 @@
+package com.orm.models;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.MultiUnique;
+import com.orm.dsl.Unique;
+
+/**
+ * Created by sibelius on 02/12/15.
+ */
+@MultiUnique("a, b")
+public class MultiColumnUniqueModel extends SugarRecord {
+
+    private int a;
+    private int b;
+
+    public MultiColumnUniqueModel() {
+    }
+
+    public MultiColumnUniqueModel(int a, int b) {
+        this.a = a;
+        this.b = b;
+    }
+}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/models/StringFieldAnnotatedModel.java b/library/src/test/java/com/orm/models/StringFieldAnnotatedModel.java
new file mode 100644
index 00000000..1203db01
--- /dev/null
+++ b/library/src/test/java/com/orm/models/StringFieldAnnotatedModel.java
@@ -0,0 +1,21 @@
+package com.orm.models;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.Column;
+import com.orm.dsl.Table;
+
+/**
+ * Created by sibelius on 02/12/15.
+ */
+@Table
+public class StringFieldAnnotatedModel extends SugarRecord {
+    public String name;
+
+    public StringFieldAnnotatedModel() {
+
+    }
+
+    public StringFieldAnnotatedModel(String name) {
+        this.name = name;
+    }
+}
diff --git a/library/src/test/java/com/orm/models/StringFieldExtendedModel.java b/library/src/test/java/com/orm/models/StringFieldExtendedModel.java
new file mode 100644
index 00000000..ee781632
--- /dev/null
+++ b/library/src/test/java/com/orm/models/StringFieldExtendedModel.java
@@ -0,0 +1,18 @@
+package com.orm.models;
+
+import com.orm.SugarRecord;
+
+/**
+ * Created by sibelius on 02/12/15.
+ */
+public class StringFieldExtendedModel extends SugarRecord {
+    public String name;
+
+    public StringFieldExtendedModel() {
+
+    }
+
+    public StringFieldExtendedModel(String name) {
+        this.name = name;
+    }
+}
diff --git a/library/src/test/java/com/orm/models/StringFieldExtendedModelAnnotatedColumn.java b/library/src/test/java/com/orm/models/StringFieldExtendedModelAnnotatedColumn.java
new file mode 100644
index 00000000..9f2b43cd
--- /dev/null
+++ b/library/src/test/java/com/orm/models/StringFieldExtendedModelAnnotatedColumn.java
@@ -0,0 +1,20 @@
+package com.orm.models;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.Column;
+
+/**
+ * Created by sibelius on 02/12/15.
+ */
+public class StringFieldExtendedModelAnnotatedColumn extends SugarRecord {
+    @Column(name="anyName")
+    public String name;
+
+    public StringFieldExtendedModelAnnotatedColumn() {
+
+    }
+
+    public StringFieldExtendedModelAnnotatedColumn(String name) {
+        this.name = name;
+    }
+}
diff --git a/library/src/test/java/com/orm/query/DummyContext.java b/library/src/test/java/com/orm/query/DummyContext.java
index 5505b37f..77a897ff 100644
--- a/library/src/test/java/com/orm/query/DummyContext.java
+++ b/library/src/test/java/com/orm/query/DummyContext.java
@@ -377,19 +377,29 @@ public Object getSystemService(String s) {
         return null;  //To change body of implemented methods use File | Settings | File Templates.
     }
 
+    @Override
+    public String getSystemServiceName(Class<?> serviceClass) {
+        return null;
+    }
+
     @Override
     public int checkPermission(String s, int i, int i1) {
-        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+        return PackageManager.PERMISSION_GRANTED;  //To change body of implemented methods use File | Settings | File Templates.
     }
 
     @Override
     public int checkCallingPermission(String s) {
-        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+        return PackageManager.PERMISSION_GRANTED;  //To change body of implemented methods use File | Settings | File Templates.
     }
 
     @Override
     public int checkCallingOrSelfPermission(String s) {
-        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+        return PackageManager.PERMISSION_GRANTED;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkSelfPermission(String permission) {
+        return PackageManager.PERMISSION_GRANTED;
     }
 
     @Override
diff --git a/library/src/test/java/com/orm/query/SelectTest.java b/library/src/test/java/com/orm/query/SelectTest.java
index 3ab345ae..39508b77 100644
--- a/library/src/test/java/com/orm/query/SelectTest.java
+++ b/library/src/test/java/com/orm/query/SelectTest.java
@@ -35,6 +35,34 @@ public void testWhere(){
         assertEquals("2", where.getArgs()[1]);
     }
 
+    @Test
+    public void toSqlAllClauses(){
+        String toSql = Select.from(TestRecord.class)
+                .where("foo")
+                .orderBy("doe")
+                .groupBy("john")
+                .limit("5")
+                .offset("10")
+                .toSql();
+        assertEquals("SELECT * FROM TEST_RECORD WHERE foo ORDER BY doe GROUP BY john LIMIT 5 OFFSET 10 ", toSql);
+    }
+
+    @Test
+    public void toSqlNoClauses(){
+        String toSql = Select.from(TestRecord.class)
+                .toSql();
+        assertEquals("SELECT * FROM TEST_RECORD ", toSql);
+    }
+
+    @Test
+    public void toSqlWhereLimitClauses(){
+        String toSql = Select.from(TestRecord.class)
+                .where("foo")
+                .limit("10")
+                .toSql();
+        assertEquals("SELECT * FROM TEST_RECORD WHERE foo LIMIT 10 ", toSql);
+    }
+
 
     @Test
     public void testWhereOr(){
@@ -101,4 +129,4 @@ public void testIsNotNull() {
         assertEquals("(test IS NOT NULL )", where.getWhereCond());
         assertEquals(0, where.getArgs().length);
     }
-}
+}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/util/MigrationFileParserTest.java b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
new file mode 100644
index 00000000..536af4cb
--- /dev/null
+++ b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
@@ -0,0 +1,48 @@
+package com.orm.util;
+
+import com.orm.util.MigrationFileParser;
+
+import org.junit.Test;
+import org.junit.Before;
+
+import java.lang.String;
+
+import static junit.framework.Assert.assertEquals;
+
+public class MigrationFileParserTest{
+    MigrationFileParser emptyFile;
+
+    @Test
+    public void testSingleLineStatement()
+    {
+        MigrationFileParser singleLineComment = new MigrationFileParser("insert into table--comment");
+
+        String statements[] = singleLineComment.getStatements();
+        assertEquals("Testing single line statement size",1,statements.length);
+        assertEquals("Testing single line statement content","insert into table",statements[0]);
+
+        singleLineComment = new MigrationFileParser("insert into table--comment\n");
+
+        singleLineComment.getStatements();
+        assertEquals("Testing single line statement size",1,statements.length);
+        assertEquals("Testing single line statement content","insert into table",statements[0]);
+    }
+    @Test
+    public void testMultiLineComment(){
+        MigrationFileParser multiLineComment = new MigrationFileParser("insert into table /**comment \n new line 2 \n new line 3 */hello");
+
+        String statements[] = multiLineComment.getStatements();
+        assertEquals("Testing multiline statement size",1,statements.length);
+        assertEquals("Testing multiline comment","insert into table hello",statements[0]);
+    }
+
+    @Test
+    public void testMixedComment(){
+        MigrationFileParser mixedComment = new MigrationFileParser("insert into/*multiline\n **comment*/--comment");
+
+        String statements[] = mixedComment.getStatements();
+
+        assertEquals("Testing mixed comment statement size",1,statements.length);
+        assertEquals("Testing mixed comment statments", "insert into", statements[0]);
+    }
+}
