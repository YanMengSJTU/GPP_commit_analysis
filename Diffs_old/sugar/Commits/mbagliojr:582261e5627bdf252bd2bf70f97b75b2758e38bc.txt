diff --git a/build/intermediates/bundles/debug/classes.jar b/build/intermediates/bundles/debug/classes.jar
index 20b5c4e0..c906c732 100644
Binary files a/build/intermediates/bundles/debug/classes.jar and b/build/intermediates/bundles/debug/classes.jar differ
diff --git a/build/intermediates/classes/debug/com/orm/SchemaGenerator.class b/build/intermediates/classes/debug/com/orm/SchemaGenerator.class
index 545e02b6..78b83624 100644
Binary files a/build/intermediates/classes/debug/com/orm/SchemaGenerator.class and b/build/intermediates/classes/debug/com/orm/SchemaGenerator.class differ
diff --git a/build/outputs/aar/sugarOrm-debug.aar b/build/outputs/aar/sugarOrm-debug.aar
index 42cb0e09..3a7109c5 100644
Binary files a/build/outputs/aar/sugarOrm-debug.aar and b/build/outputs/aar/sugarOrm-debug.aar differ
diff --git a/src/main/java/com/orm/SchemaGenerator.java b/src/main/java/com/orm/SchemaGenerator.java
index d67fb2af..72c84b94 100644
--- a/src/main/java/com/orm/SchemaGenerator.java
+++ b/src/main/java/com/orm/SchemaGenerator.java
@@ -7,7 +7,7 @@
 import android.util.Log;
 
 import com.orm.dsl.Column;
-import com.orm.dsl.ManyToMany;
+import com.orm.dsl.Relationship;
 import com.orm.dsl.ManyToOne;
 import com.orm.dsl.NotNull;
 import com.orm.dsl.OneToOne;
@@ -154,15 +154,18 @@ private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
                     }
                 }
 
-                if(column.isAnnotationPresent(OneToOne.class)) {
+                /*if(column.isAnnotationPresent(OneToOne.class)) {
                     OneToOne oneToOne =  column.getAnnotation(OneToOne.class);
                     sb.append(", ").append(oneToOne.name()).append(" INTEGER");
                 } else if(column.isAnnotationPresent(ManyToOne.class)) {
                     ManyToOne manyToOne =  column.getAnnotation(ManyToOne.class);
                     sb.append(", ").append(manyToOne.name()).append(" INTEGER");
-                } else if(column.isAnnotationPresent(ManyToMany.class)) {
-                    ManyToMany manyToMany =  column.getAnnotation(ManyToMany.class);
-                    createJoinTable(manyToMany, sqLiteDatabase);
+                } else */
+
+                //Create join table for all relationships. This will prevent issues with migrations (yes, unnecessary joins will be slower)
+                if(column.isAnnotationPresent(Relationship.class)) {
+                    Relationship relationship =  column.getAnnotation(Relationship.class);
+                    createJoinTable(relationship, sqLiteDatabase);
                 }
             }
         }
@@ -179,18 +182,18 @@ private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         }
     }
 
-    private void createJoinTable(ManyToMany manyToMany, SQLiteDatabase sqLiteDatabase) {
+    private void createJoinTable(Relationship relationship, SQLiteDatabase sqLiteDatabase) {
 
-        if(manyToMany.joinTable() == null) {
+        if(relationship.joinTable() == null) {
             return;
         }
 
         Log.i("Sugar", "Create join table");
         StringBuilder sb = new StringBuilder("CREATE TABLE ");
-        sb.append(manyToMany.joinTable()).append(" ( ")
-                .append(manyToMany.columnOneName()).append(" INTEGER NOT NULL,")
-                .append(manyToMany.columnTwoName()).append(" INTEGER NOT NULL,")
-                .append(" PRIMARY KEY(").append(manyToMany.columnOneName()).append(", ").append(manyToMany.columnTwoName()).append(" )")
+        sb.append(relationship.joinTable()).append(" ( ")
+                .append(relationship.columnOneName()).append(" INTEGER NOT NULL,")
+                .append(relationship.columnTwoName()).append(" INTEGER NOT NULL,")
+                .append(" PRIMARY KEY(").append(relationship.columnOneName()).append(", ").append(relationship.columnTwoName()).append(" )")
         .append(" );");
 
         if (!"".equals(sb.toString())) {
diff --git a/src/main/java/com/orm/SugarRecord.java b/src/main/java/com/orm/SugarRecord.java
index 642b58a2..25fb4ac9 100644
--- a/src/main/java/com/orm/SugarRecord.java
+++ b/src/main/java/com/orm/SugarRecord.java
@@ -8,6 +8,7 @@
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.orm.dsl.Relationship;
 import com.orm.dsl.Table;
 import com.orm.util.NamingHelper;
 import com.orm.util.ReflectionUtil;
@@ -246,16 +247,33 @@ public static long save(Object object) {
         return save(getSugarContext().getSugarDb().getDB(), object);
     }
 
+    static void saveJoinTable(SQLiteDatabase db, List<ContentValues> relationshipList, String joinTableName) {
+
+        for(ContentValues values: relationshipList) {
+
+            //If record already exists then ignore
+            long id = db.insertWithOnConflict(joinTableName, null, values,
+                    SQLiteDatabase.CONFLICT_IGNORE);
+
+            Log.i("Sugar", "Inserted Join table record for " + joinTableName + ".");
+
+        }
+    }
+
     static long save(SQLiteDatabase db, Object object) {
         Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
         Field idField = null;
         for (Field column : columns) {
-            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+            List<ContentValues> relationshipList = ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
             if (column.getName().equals("id")) {
                 idField = column;
             }
+
+            if(relationshipList != null && !relationshipList.isEmpty()) {
+                saveJoinTable(db, relationshipList, column.getAnnotation(Relationship.class).joinTable());
+            }
         }
 
         boolean isSugarEntity = isSugarEntity(object.getClass());
diff --git a/src/main/java/com/orm/dsl/ManyToMany.java b/src/main/java/com/orm/dsl/Relationship.java
similarity index 92%
rename from src/main/java/com/orm/dsl/ManyToMany.java
rename to src/main/java/com/orm/dsl/Relationship.java
index 9af0a93d..f4d7e632 100644
--- a/src/main/java/com/orm/dsl/ManyToMany.java
+++ b/src/main/java/com/orm/dsl/Relationship.java
@@ -12,7 +12,7 @@
 @Documented
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface ManyToMany {
+public @interface Relationship {
 
     String joinTable();
     String columnOneName();
diff --git a/src/main/java/com/orm/util/ReflectionUtil.java b/src/main/java/com/orm/util/ReflectionUtil.java
index a740b42d..beab65ef 100644
--- a/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/src/main/java/com/orm/util/ReflectionUtil.java
@@ -8,23 +8,23 @@
 
 import com.orm.SugarRecord;
 import com.orm.dsl.Ignore;
+import com.orm.dsl.Relationship;
+import com.orm.dsl.ManyToOne;
+import com.orm.dsl.OneToMany;
+import com.orm.dsl.OneToOne;
 import com.orm.dsl.Table;
 
 import java.io.File;
 import java.io.IOException;
+import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.math.BigDecimal;
 import java.net.URL;
 import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Enumeration;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
+import java.util.Collection;
 
 import dalvik.system.DexFile;
 
@@ -60,8 +60,11 @@
         return fields;
     }
 
-    public static void addFieldValueToColumn(ContentValues values, Field column, Object object,
+    public static List<ContentValues> addFieldValueToColumn(ContentValues values, Field column, Object object,
                                              Map<Object, Long> entitiesMap) {
+
+        List<ContentValues> relationshipList = null;
+
         column.setAccessible(true);
         Class<?> columnType = column.getType();
         try {
@@ -129,6 +132,32 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
                     } else {
                         values.put(columnName, (byte[]) columnValue);
                     }
+                } else if(column.isAnnotationPresent(Relationship.class)) {
+                    Relationship relationship = column.getAnnotation(Relationship.class);
+
+                    relationshipList = new ArrayList<ContentValues>();
+
+                    if(java.util.Collection.class.isAssignableFrom(columnValue.getClass())) {
+                        for(Object children: (Collection)columnValue) {
+                            //They should be
+                            if(SugarRecord.isSugarEntity(children.getClass())) {
+                                ContentValues contentValues = new ContentValues(2);
+                                contentValues.put(relationship.columnOneName(), ((SugarRecord) children).getId());
+                                contentValues.put(relationship.columnTwoName(), ((SugarRecord) object).getId());
+
+                                relationshipList.add(contentValues);
+                            } else {
+                              break;
+                            }
+                        }
+                    } else if(SugarRecord.isSugarEntity(columnValue.getClass())) {
+                        ContentValues contentValues = new ContentValues(2);
+                        contentValues.put(relationship.columnOneName(), ((SugarRecord) columnValue).getId());
+                        contentValues.put(relationship.columnTwoName(), ((SugarRecord) object).getId());
+
+                        relationshipList.add(contentValues);
+                    }
+
                 } else {
                     if (columnValue == null) {
                         values.putNull(columnName);
@@ -143,6 +172,8 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
         } catch (IllegalAccessException e) {
             Log.e("Sugar", e.getMessage());
         }
+
+        return relationshipList;
     }
 
     public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object) {
