diff --git a/build.gradle b/build.gradle
index 2504c317..2495aaba 100644
--- a/build.gradle
+++ b/build.gradle
@@ -31,7 +31,7 @@ subprojects { proj ->
     apply plugin: 'jacoco'
 
     jacoco {
-        version "0.7.1.201508030944"
+        version "0.7.1.20151014"
     }
 
     task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
diff --git a/library/build.gradle b/library/build.gradle
index 9251b0d8..0b97b43f 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -2,12 +2,12 @@ apply plugin: 'com.android.library'
 apply from: '../maven_push.gradle'
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.2"
+    compileSdkVersion 23
+    buildToolsVersion "23.0.0"
 
     defaultConfig {
         minSdkVersion 9
-        targetSdkVersion 21
+        targetSdkVersion 23
     }
 
     buildTypes {
@@ -18,7 +18,7 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:21.0.3'
+    compile 'com.android.support:support-v4:23.0.1'
     compile 'com.google.guava:guava:18.0'
     testCompile 'junit:junit:4.12'
 }
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 4c3bc545..c96477ce 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -45,7 +45,7 @@
         getAllFields(typeFields, table);
 
         for (Field field : typeFields) {
-            if(field.isAnnotationPresent(Relationship.class) && ((Relationship) field.getAnnotation(Relationship.class)).cascade()) {
+            if(field.isAnnotationPresent(Relationship.class)) {
 
                 field.setAccessible(true);
                 Class<?> columnType = field.getType();
@@ -85,9 +85,16 @@
 
                             //They should be
                             if (SugarRecord.isSugarEntity(child.getClass())) {
-                                boolean success = recordsToSave.add((SugarRecord) child);
+
+                                boolean success = true;
+
+                                if(((Relationship) field.getAnnotation(Relationship.class)).cascade()) {
+                                    success = recordsToSave.add((SugarRecord) child);
+                                }
 
                                 //If not then it means it is a bidirectional relationship and we don't want it showing up twice
+                                //Even if there is no cascading, we still want to hook up the relationship.
+                                //NOTE: If cascading = false, the child object must already exist or this will fail because no Id will be present.
                                 if(success) {
 
                                     ContentValues contentValues = new ContentValues(2);
@@ -96,7 +103,9 @@
 
                                     joinTables.put(relationship.joinTable(), contentValues);
 
-                                    ReflectionUtil.getRecordsToSave(child, recordsToSave, joinTables);
+                                    if(((Relationship) field.getAnnotation(Relationship.class)).cascade()) {
+                                        ReflectionUtil.getRecordsToSave(child, recordsToSave, joinTables);
+                                    }
                                 }
                             } else {
                                 break;
@@ -444,9 +453,13 @@ public static void setFieldValueForId(Object object, Long value) {
                 if (domainClass != null) domainClasses.add(domainClass);
             }
         } catch (IOException e) {
-            Log.e("Sugar", e.getMessage());
+            if(e != null && e.getMessage() != null) {
+                Log.e("Sugar", e.getMessage());
+            }
         } catch (PackageManager.NameNotFoundException e) {
-            Log.e("Sugar", e.getMessage());
+            if(e != null && e.getMessage() != null) {
+                Log.e("Sugar", e.getMessage());
+            }
         }
 
         return domainClasses;
@@ -458,9 +471,13 @@ private static Class getDomainClass(String className, Context context) {
         try {
             discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
         } catch (ClassNotFoundException e) {
-            Log.e("Sugar", e.getMessage());
+            if(e != null && e.getMessage() != null) {
+                Log.e("Sugar", e.getMessage());
+            }
         } catch (ExceptionInInitializerError e1) {
-            Log.e("Sugar", e1.getMessage());
+            if(e1 != null && e1.getMessage() != null) {
+                Log.e("Sugar", e1.getMessage());
+            }
         }
 
         if ((discoveredClass != null) &&
