diff --git a/README.md b/README.md
index 032de07d..2156ed5f 100644
--- a/README.md
+++ b/README.md
@@ -23,18 +23,6 @@ See below for more example and explaination ...
 
 
 ## Install
-Add bintray repository on your project build.gradle
-```
-allprojects {
-    repositories {
-        ...
-        maven {
-            url 'https://dl.bintray.com/sylversky/AndroidLibrary/'
-        }
-    }
-}
-```
-
 
 Add on your app build.gradle
 ```
@@ -68,7 +56,7 @@ public class ClientApp extends Application {
 }
 ```
 
-Open your AndroidManifest.xml and put some like this inside appication tag:
+Open your AndroidManifest.xml and put meta data configuration inside appication tag:
 ```
 <application ...
 android:name=".ClientApp">
@@ -112,7 +100,7 @@ This is will create table PERSON with columns ID,REG_ID,NAME,DOB on SQLite.
 
 ### Primary Key with another data type
 The default primary key is with Long data type.
-If you need other data type (for example String), just keep the "Long id" for primary key, add new filed and put the <b>@Unique</b> annotation.
+If you need other data type (for example String), just add new filed and put the <b>@Unique</b> annotation but keep the "Long id".
 ```java
 @Table
 public class Person {
@@ -176,9 +164,10 @@ SugarRecord.delete(person);
 ### Bulk Insert
 ```java
 List<Person> persons = new ArrayList<>();
-persons.add(new Person(1l,"abc12345","Leonardo", new Date()))
-persons.add(new Person(2l,"def12345","Donatelo", new Date()))
-persons.add(new Person(3l,"ghi12345","Michaelangelo", new Date()))
+persons.add(new Person(1l,"abc12345","Leonardo", new Date()));
+persons.add(new Person(2l,"def12345","Donatelo", new Date()));
+persons.add(new Person(3l,"ghi12345","Michaelangelo", new Date()));
+persons.add(new Person(4l,"jkl12345","Raphael", new Date()));
 SugarRecord.insertOrUpdate(persons);
 ```
 
@@ -191,10 +180,10 @@ SugarRecord.drop(Person.class);
 
 ### Ignore Update
 You can ignoring update for specified column. Only work when use <b>SugarRecord.insertOrUpdate( )</b> function.
-For example : we need to give flag data read/unread, but ignoring to replace when refreshed from api server.
-Don't worry, you still can update specified column with SugarRecord.update( ) function.
+For example : need to give flag data read/unread, but ignoring to replace when refreshed from api server.
+But, you can update specified column with SugarRecord.update( ) function.
 
-##### Create entitiy table with @IgnoreUpdate
+##### Create entity table with @IgnoreUpdate
 ```java
 @Table
 public class Person {
@@ -246,7 +235,7 @@ This will insert data person with default read value is 'false', but because use
 ### Automatic One To Many
 When you need other entity be member of your entity, Sugar will automatically manage it.
 
-##### Create entitiy table
+##### Create entity table
 ```java
 @Table
 public class Address {
@@ -264,7 +253,7 @@ public class Address {
 }
 ```
 
-##### Create entitiy table with other entity member
+##### Create entity table with other entity member
 ```java
 @Table
 public class Person {
@@ -303,7 +292,7 @@ Person and address will automatically insert into different table.
 Person person = SugarRecord.findById(Person.class, 1);
 List<Address> addresList = person.address;
 ```
-With execute just one find( ) function, person and address will automatically combined.
+With just one find( ) function, person and address automatically combined.
 
 ### Migration
 1. Just declare your new column inside your entity.
