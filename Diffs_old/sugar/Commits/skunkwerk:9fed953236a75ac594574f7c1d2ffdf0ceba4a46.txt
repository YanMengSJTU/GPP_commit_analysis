diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index 2b625728..3bb46f41 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -232,8 +232,7 @@ else if (Calendar.class.equals(columnType))
 
         try {
             while (c.moveToNext()) {
-                //entity = type.getDeclaredConstructor().newInstance();
-            	entity = type.getDeclaredConstructor(new Class[] {android.content.Context.class}).newInstance(getSugarContext());
+                entity = type.getDeclaredConstructor(new Class[] {android.content.Context.class}).newInstance(getSugarContext());
             	entity.inflate(c);
                 toRet.add(entity);
             }
@@ -259,27 +258,7 @@ public static void executeQuery(String query, String... arguments)
     {
     	String url = "content://" + PROVIDER_NAME + "/EXTENDED_QUERY";
     	Uri uri = Uri.parse(url);
-    	//is deprecated: buildQuery (String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit)
-        /*Object args[] = whereArgs;
-    	String where_query = String.format(whereClause, args);
-    	SQLiteQueryBuilder builder = new SQLiteQueryBuilder();
-    	builder.setTables(getTableName(type));
-    	String query = builder.buildQuery(null, whereClause, whereArgs, groupBy, null, orderBy, limit);
-    	String query = builder.buildQuery(null, where_query, groupBy, null, orderBy, limit);
-    	Cursor c = db.query(uri, null, query, null, null);//null pointer exception here*/
-    	/*Bundle b = new Bundle();
-    	b.putString("whereClause", whereClause);
-    	b.putStringArray("whereArgs", whereArgs);
-        b.putString("groupBy", groupBy);
-        b.putString("orderBy", orderBy);
-        b.putString("limit", limit);
-        Bundle ret = db.call("EXTENDED_QUERY", getTableName(type), b);
-        //how do i put a cursor in the return bundle?  don't want to do this logic inside the call method itself*/
     	String[] args = {getTableName(type), groupBy, orderBy, limit};
-    	/*Log.d("null testing", uri.toString());
-    	Log.d("null testing", args.toString());
-    	Log.d("null testing", whereClause.toString());
-    	Log.d("null testing", whereArgs.toString());*/
     	
         T entity;
         List<T> toRet = new ArrayList<T>();
@@ -288,11 +267,7 @@ public static void executeQuery(String query, String... arguments)
         try {
             while (c.moveToNext())
             {
-            	Log.d("in find", "got result row from query");
-                //entity = type.getDeclaredConstructor().newInstance();//error here
-            	//The parameterTypes parameter is an array of Class objects that identify the constructor's formal parameter types, in declared order.
                 entity = type.getDeclaredConstructor(new Class[] {android.content.Context.class}).newInstance(getSugarContext());
-                Log.d("constructor","got constructor & new instance");
                 entity.inflate(c);
                 toRet.add(entity);
             }
@@ -514,8 +489,7 @@ public E next()
             }
 
             try {
-                //entity = type.getDeclaredConstructor().newInstance();
-            	entity = type.getDeclaredConstructor(new Class[] {android.content.Context.class}).newInstance(getSugarContext());
+                entity = type.getDeclaredConstructor(new Class[] {android.content.Context.class}).newInstance(getSugarContext());
                 entity.inflate(cursor);
             } catch (Exception e) {
                 e.printStackTrace();
