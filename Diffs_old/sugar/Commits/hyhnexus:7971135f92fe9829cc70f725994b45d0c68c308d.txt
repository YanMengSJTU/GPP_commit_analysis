diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 6e0beddd..00000000
--- a/.travis.yml
+++ /dev/null
@@ -1,31 +0,0 @@
-language: android
-jdk: oraclejdk7
-
-env:
-  global:
-    - TERM=dumb
-android:
-  components:
-    - sys-img-armeabi-v7a-android-23
-    - tools
-    - build-tools-23.0.3
-    - android-23
-    - extra-android-m2repository
-before_script:
-  - sudo service postgresql stop || true
-  - sudo service mysql stop || true
-  - sudo service memcached stop || true
-  - sudo service bootlogd stop || true
-  - sudo service elasticsearch stop || true
-  - sudo service mongodb stop || true
-  - sudo service neo4j stop || true
-  - sudo service cassandra stop || true
-  - sudo service riak stop || true
-  - sudo service rsync stop || true
-  - sudo service x11-common stop || true
-script:
-  - ./gradlew clean build connectedCheck coveralls
-
-cache:
-  directories:
-    - $HOME/.m2
diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 7015053d..00000000
--- a/CHANGELOG.md
+++ /dev/null
@@ -1,94 +0,0 @@
-# Sugar Releases
-
-## [Unreleased]
-
-
-## v1.5
-### Added
-* [#328](https://github.com/satyan/sugar/pull/328) @jedid auto add new columns during database upgrade, fix [#299](https://github.com/satyan/sugar/issues/299) and [#151](https://github.com/satyan/sugar/issues/151)
-* [#389](https://github.com/satyan/sugar/pull/389) @alfmatos MultiUnique DSL to handle MultiColumn Unique Table constraint
-* @sibeliusseraphini update, updateInTx methods based on Unique values of SugarRecord
-* [#155](https://github.com/satyan/sugar/issues/155) @benohalloran adding Cursors for Cursor Adapters [Pull 312](https://github.com/satyan/sugar/pull/312)
-* [#430](https://github.com/satyan/sugar/pull/430) @sibeliusseraphini update to roboelectric 3.0 and target android-32
-
-### Changed
-* [#437](https://github.com/satyan/sugar/pull/437) @dnalves removing guava dependency, using synchronized WeakHashMap instead
-* [#423](https://github.com/satyan/sugar/pull/423) @sibeliusseraphini moving changelog of README.md to CHANGELOG.md
-
-### Fixed
-* [#362](https://github.com/satyan/sugar/pull/362) @mitchyboy9 fixed NoClassDefFoundError
-* [#455](https://github.com/satyan/sugar/pull/455) @nurolopher fixed travis and coveralls config 
-* [#434](https://github.com/satyan/sugar/pull/434) @bendaniel10 fix multi-dex
-* [#410](https://github.com/satyan/sugar/pull/410) [#408](https://github.com/satyan/sugar/pull/408) @RoyMontoya simplify code
-* [#327](https://github.com/satyan/sugar/pull/327) @tracytheron support multi-dex
-* [#373](https://github.com/satyan/sugar/pull/373) @salimkamboh use existing tables
-
-## v1.4
-### Added
-* [#306](https://github.com/satyan/sugar/pull/306) @Shyish return boolean/integer on delete methods
-* [#304](https://github.com/satyan/sugar/pull/304) @benohalloran add support to enum type
-* [#197](https://github.com/satyan/sugar/pull/197) @andresteves add suport for bytes[]
-* [#293](https://github.com/satyan/sugar/pull/293) @neilw4 support NULL in queries
-* [#273](https://github.com/satyan/sugar/pull/273) @dominicwong617 findById support an array of ids
-* [#246](https://github.com/satyan/sugar/pull/246) @kwf2030 use sqlite\_master to check whether table already exist
-* [#253](https://github.com/satyan/sugar/pull/202) @JeroenMols add bulk delete
-* [#285](https://github.com/satyan/sugar/pull/202) @Shyish add listAll with orderBy param
-* No need to extend SugarApp - just call SugarContext.init(Context) instead
-* [#129](https://github.com/satyan/sugar/pull/129) @satyan support sugar entities using @Table annotations
-
-### Fixed
-* [#314](https://github.com/satyan/sugar/pull/314) @abscondment fix StrictMode DexFile
-* [#303](https://github.com/satyan/sugar/pull/303) @RossinesP fixed saving row string bug
-* [#258](https://github.com/satyan/sugar/pull/258) @nosrak113 change SugarRecord ID to private to not conflit with other libraries
-* [#254](https://github.com/satyan/sugar/pull/254) @jivimberg use weak keys to keep track of annotated entities
-* [#215](https://github.com/satyan/sugar/issues/215) @jivimberg fix bug persisting relationship
-* [#185](https://github.com/satyan/sugar/issues/185) [#243](https://github.com/satyan/sugar/issues/243) @whoshuu fix save and update method
-* [#202](https://github.com/satyan/sugar/pull/202) @allieus improve getDomainsClass()
-* [#104](https://github.com/satyan/sugar/issues/104) @whoshuu fix nesting "and" and "or"
-
-## v1.4 Beta [[jar](https://github.com/satyan/sugar/releases/download/v1.4_beta/sugar-1.4_beta.jar)]
-### Added
-* [#112](https://github.com/satyan/sugar/pull/112) @androdevcafe added Unique and NotNull annotations
-* [#78](https://github.com/satyan/sugar/pull/78) @HiddenCleverde capability to specify primary key
-
-### Fixed
-* [#113](https://github.com/satyan/sugar/pull/113) @whoshuu override findById to support int
-* [#106](https://github.com/satyan/sugar/issues/106) @whoshuu add documentation to onTerminate
-* [#54](https://github.com/satyan/sugar/issues/54) @whoshuu simplify count interface
-* [#43](https://github.com/satyan/sugar/issues/43) @whoshuu return id on save
-* [#72](https://github.com/satyan/sugar/issues/72) @whoshuu allow null values to Date and Calendar objects
-* [#96](https://github.com/satyan/sugar/issues/96) @whoshuu roboeletric fallback
-
-## v1.3 [[jar](https://github.com/satyan/sugar/releases/download/v1.3/sugar-1.3.jar)]
-
-- Transaction Support
-- Bulk Insert of records 
-- Encrypted datastore (branch : sugar-cipher using sqlcipher)
-- Removed Constructor with context parameter. Needs default constructor now.
-- Enhancements to QueryBuilder
-- Bug fixes and other improvements.
-
-## v1.2 [[jar](https://github.com/satyan/sugar/releases/download/v1.2/sugar-1.2.jar)]
-
-- package restriction for domain classes.
-- metadata caching
-- QueryBuilder v1
-- Database Migrations
-- Provision for Raw queries
-- Better and more organized api guide and usage instructions.
-
-## v1.1 [[jar](https://github.com/satyan/sugar/releases/download/v1.1/sugar-1.1.jar)]
-
-- Static api doesn't take context anymore. Hence
-
-```java
-Book.findById(context, Book.class, 1);
-```
-
-becomes
-
-```java
-Book.findById(Book.class, 1);
-```
-
-- Some cleanup in the code.
diff --git a/example/build.xml b/example/build.xml
deleted file mode 100644
index 3d352f3a..00000000
--- a/example/build.xml
+++ /dev/null
@@ -1,79 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="SugarExample" default="help">
-
-<!-- The local.properties file is created and updated by the 'android'
-     tool.
-     It contains the path to the SDK. It should *NOT* be checked into
-     Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The build.properties file can be created by you and is never touched
-         by the 'android' tool. This is the place to change some of the
-         default property values used by the Ant rules.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="build.properties" />
-
-    <!-- The default.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <property file="default.properties" />
-
-
-    <!-- Required pre-setup import -->
-    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />
-
-
-<!-- extension targets. Uncomment the ones where you want to do custom work
-     in between standard targets -->
-<!--
-    <target name="-pre-build">
-    </target>
-    <target name="-pre-compile">
-    </target>
-
-    [This is typically used for code obfuscation.
-     Compiled code location: ${out.classes.absolute.dir}
-     If this is not done in place, override ${out.dex.input.absolute.dir}]
-    <target name="-post-compile">
-    </target>
--->
-
-    <!-- Execute the Android Setup task that will setup some properties
-         specific to the target, and import the build rules files.
-
-         The rules file is imported from
-            <SDK>/tools/ant/
-         Depending on the project type it can be either:
-         - main_rules.xml
-         - lib_rules.xml
-         - test_rules.xml
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <setup> task.
-             - customize it to your needs.
-         - Customize the whole script.
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, *after* the <setup> task
-             - disable the import of the rules by changing the setup task
-               below to <setup import="false" />.
-             - customize to your needs.
-    -->
-    <setup />
-
-</project>
diff --git a/example/src/main/AndroidManifest.xml b/example/src/main/AndroidManifest.xml
index d6853e53..e1b306ec 100644
--- a/example/src/main/AndroidManifest.xml
+++ b/example/src/main/AndroidManifest.xml
@@ -2,7 +2,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.example"
       android:versionCode="1"
-      android:versionName="1.0">
+      android:versionName="1.0.0">
     <application android:label="@string/app_name" android:icon="@drawable/icon" android:name=".BaseApp">
         <activity android:name=".activities.SugarActivity" android:label="@string/app_name">
             <intent-filter>
@@ -11,7 +11,7 @@
             </intent-filter>
         </activity>
         <meta-data android:name="DATABASE" android:value="sugar_example.db" />
-        <meta-data android:name="VERSION" android:value="3" />
+        <meta-data android:name="VERSION" android:value="1" />
         <meta-data android:name="QUERY_LOG" android:value="true" />
     </application>
-</manifest> 
+</manifest>
\ No newline at end of file
diff --git a/example/src/main/java/com/example/activities/SugarActivity.java b/example/src/main/java/com/example/activities/SugarActivity.java
index ee06f547..83033f4d 100644
--- a/example/src/main/java/com/example/activities/SugarActivity.java
+++ b/example/src/main/java/com/example/activities/SugarActivity.java
@@ -17,11 +17,6 @@
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main);
-        TestEntity entity = new TestEntity();
-        entity.setKid("0");
-        entity.setKname("test");
-        entity.setUpdate_time(System.currentTimeMillis() / 1000);
-        SugarRecord.update(entity);
     }
 
     public void insert1(View view) {
diff --git a/sugar/build.gradle b/sugar/build.gradle
index d6c9fc90..500571c2 100644
--- a/sugar/build.gradle
+++ b/sugar/build.gradle
@@ -9,8 +9,8 @@ android {
     defaultConfig {
         minSdkVersion 14
         targetSdkVersion 26
-        versionCode 1
-        versionName "1.0.0"
+        versionCode 2
+        versionName "1.0.1"
     }
     buildTypes {
         release {
@@ -35,7 +35,7 @@ publish {
     userOrg = 'hyhnexus'
     groupId = 'com.github.hyhnexus'
     artifactId = 'sugar'
-    publishVersion = '1.0.0'
+    publishVersion = '1.0.1'
     desc = 'Sugar ORM - Insanely easy way to work with android database'
     website = 'https://github.com/hyhnexus/sugar'
 }
\ No newline at end of file
diff --git a/sugar/src/main/AndroidManifest.xml b/sugar/src/main/AndroidManifest.xml
index 849de626..7c9b7679 100644
--- a/sugar/src/main/AndroidManifest.xml
+++ b/sugar/src/main/AndroidManifest.xml
@@ -2,6 +2,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.orm.dsl"
           android:versionCode="1"
-          android:versionName="1.3.1">
-
+          android:versionName="1.0.0">
 </manifest>
\ No newline at end of file
diff --git a/sugar/src/main/java/com/orm/SchemaGenerator.java b/sugar/src/main/java/com/orm/SchemaGenerator.java
index 91f6a4c2..c66d7ab7 100644
--- a/sugar/src/main/java/com/orm/SchemaGenerator.java
+++ b/sugar/src/main/java/com/orm/SchemaGenerator.java
@@ -215,7 +215,8 @@ protected String createTableSQL(Class<?> table) {
         }
 
         StringBuilder sb = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
-        sb.append(tableName).append(" (");
+        sb.append(tableName).append(" (ID INTEGER PRIMARY KEY AUTOINCREMENT");
+
         for (Field column : fields) {
             String columnName = NamingHelper.toColumnName(column);
             String columnType = QueryBuilder.getColumnType(column.getType());
@@ -229,7 +230,7 @@ protected String createTableSQL(Class<?> table) {
                     Column columnAnnotation = column.getAnnotation(Column.class);
                     columnName = columnAnnotation.name();
 
-                    sb.append(columnName).append(" ").append(columnType);
+                    sb.append(", ").append(columnName).append(" ").append(columnType);
 
                     if (columnAnnotation.notNull()) {
                         if (columnType.endsWith(NULL)) {
@@ -241,9 +242,9 @@ protected String createTableSQL(Class<?> table) {
                     if (columnAnnotation.unique()) {
                         sb.append(UNIQUE);
                     }
-                    sb.append(", ");
+
                 } else {
-                    sb.append(columnName).append(" ").append(columnType);
+                    sb.append(", ").append(columnName).append(" ").append(columnType);
 
                     if (column.isAnnotationPresent(NotNull.class)) {
                         if (columnType.endsWith(NULL)) {
@@ -255,7 +256,6 @@ protected String createTableSQL(Class<?> table) {
                     if (column.isAnnotationPresent(Unique.class)) {
                         sb.append(UNIQUE);
                     }
-                    sb.append(", ");
                 }
             }
         }
@@ -263,7 +263,7 @@ protected String createTableSQL(Class<?> table) {
         if (table.isAnnotationPresent(MultiUnique.class)) {
             String constraint = table.getAnnotation(MultiUnique.class).value();
 
-            sb.append("PRIMARY KEY(");
+            sb.append(", UNIQUE(");
 
             String[] constraintFields = constraint.split(",");
             for (int i = 0; i < constraintFields.length; i++) {
@@ -275,11 +275,11 @@ protected String createTableSQL(Class<?> table) {
                 }
             }
 
-            sb.append(") ON CONFLICT REPLACE)");
-        } else {
-            sb.append("ID INTEGER PRIMARY KEY AUTOINCREMENT)");
+            sb.append(") ON CONFLICT REPLACE");
         }
 
+        sb.append(")");
+
         if (ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Creating table " + tableName);
         }
