diff --git a/library/src/com/orm/QueryBuilder.java b/library/src/com/orm/QueryBuilder.java
index 8bf6df64..bf3cfd93 100644
--- a/library/src/com/orm/QueryBuilder.java
+++ b/library/src/com/orm/QueryBuilder.java
@@ -2,7 +2,7 @@
 
 public class QueryBuilder {
 
-    public static String getColumnType(Class type) {
+    public static String getColumnType(Class<?> type) {
         if ((type.equals(Boolean.class)) ||
                 (type.equals(Boolean.TYPE)) ||
                 (type.equals(java.util.Date.class)) ||
diff --git a/library/src/com/orm/SugarConfig.java b/library/src/com/orm/SugarConfig.java
index ee9448d7..aaeb79b6 100644
--- a/library/src/com/orm/SugarConfig.java
+++ b/library/src/com/orm/SugarConfig.java
@@ -13,7 +13,7 @@
 
 public class SugarConfig {
 
-    static Map<Class,List<Field>> fields = new HashMap<Class, List<Field>>();
+    static Map<Class<?>, List<Field>> fields = new HashMap<Class<?>, List<Field>>();
 
     public static String getDatabaseName(Context context) {
         String databaseName = getMetaDataString(context, "DATABASE");
@@ -25,11 +25,11 @@ public static String getDatabaseName(Context context) {
         return databaseName;
     }
 
-    public static void setFields(Class clazz, List<Field> fieldz){
+    public static void setFields(Class<?> clazz, List<Field> fieldz){
          fields.put(clazz, fieldz);
     }
 
-    public static List<Field> getFields(Class clazz){
+    public static List<Field> getFields(Class<?> clazz){
 
         if(fields.containsKey(clazz)){
             List<Field> list = fields.get(clazz);
@@ -41,7 +41,7 @@ public static void setFields(Class clazz, List<Field> fieldz){
 
     public static void clearCache(){
         fields.clear();
-        fields = new HashMap<Class, List<Field>>();
+        fields = new HashMap<Class<?>, List<Field>>();
     }
 
     public static int getDatabaseVersion(Context context) {
diff --git a/library/src/com/orm/SugarCursorFactory.java b/library/src/com/orm/SugarCursorFactory.java
index 9e4f5852..17c60c59 100644
--- a/library/src/com/orm/SugarCursorFactory.java
+++ b/library/src/com/orm/SugarCursorFactory.java
@@ -20,6 +20,7 @@ public SugarCursorFactory(boolean debugEnabled){
         this.debugEnabled = debugEnabled;
     }
 
+    @SuppressWarnings("deprecation")
     public Cursor newCursor(SQLiteDatabase sqLiteDatabase, SQLiteCursorDriver sqLiteCursorDriver, String editTable, SQLiteQuery sqLiteQuery) {
 
         if(debugEnabled){
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index bad94817..87051583 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -27,10 +27,10 @@ public SugarDb(Context context) {
         this.context = context;
     }
 
-    private <T extends SugarRecord> List<T> getDomainClasses(Context context) {
+    private <T extends SugarRecord<?>> List<T> getDomainClasses(Context context) {
         List<T> domainClasses = new ArrayList<T>();
         try {
-            Enumeration allClasses = getAllClasses(context);
+            Enumeration<?> allClasses = getAllClasses(context);
 
             while (allClasses.hasMoreElements()) {
                 String className = (String) allClasses.nextElement();
@@ -50,9 +50,10 @@ public SugarDb(Context context) {
         return domainClasses;
     }
 
-    private <T extends SugarRecord> T getDomainClass(String className, Context context) {
+    @SuppressWarnings("unchecked")
+    private <T extends SugarRecord<?>> T getDomainClass(String className, Context context) {
         Log.i("Sugar", "domain class: " + className);
-        Class discoveredClass = null;
+        Class<?> discoveredClass = null;
         try {
             discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
         } catch (ClassNotFoundException e) {
@@ -80,7 +81,7 @@ public SugarDb(Context context) {
         return null;
     }
 
-    private Enumeration getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
+    private Enumeration<?> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
         String path = getSourcePath(context);
         DexFile dexfile = new DexFile(path);
         return dexfile.entries();
@@ -96,14 +97,14 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         createDatabase(sqLiteDatabase);
     }
 
-    public <T extends SugarRecord> void createDatabase(SQLiteDatabase sqLiteDatabase) {
+    public <T extends SugarRecord<?>> void createDatabase(SQLiteDatabase sqLiteDatabase) {
         List<T> domainClasses = getDomainClasses(context);
         for (T domain : domainClasses) {
             createTable(domain, sqLiteDatabase);
         }
     }
 
-    private <T extends SugarRecord> void createTable(T table, SQLiteDatabase sqLiteDatabase) {
+    private <T extends SugarRecord<?>> void createTable(T table, SQLiteDatabase sqLiteDatabase) {
         List<Field> fields = table.getTableFields();
         StringBuilder sb = new StringBuilder("CREATE TABLE ").append(table.getSqlName()).append(
                 " ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
@@ -137,7 +138,7 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
         }
     }
 
-    public <T extends SugarRecord> void deleteTables(SQLiteDatabase sqLiteDatabase) {
+    public <T extends SugarRecord<?>> void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<T> tables = getDomainClasses(this.context);
         for (T table : tables) {
             Log.i("Sugar", "dropping table: " + table.getSqlName());
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index 04e58a4b..a6686f95 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -45,13 +45,13 @@ public void delete() {
         db.delete(this.tableName, "Id=?", new String[]{getId().toString()});
     }
 
-    public static <T extends SugarRecord> void deleteAll(Class<T> type) {
+    public static <T extends SugarRecord<?>> void deleteAll(Class<T> type) {
         Database db = getSugarContext().database;
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(getTableName(type), null, null);
     }
 
-    public static <T extends SugarRecord> void deleteAll(Class<T> type, String whereClause, String... whereArgs ) {
+    public static <T extends SugarRecord<?>> void deleteAll(Class<T> type, String whereClause, String... whereArgs ) {
         Database db = getSugarContext().database;
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(getTableName(type), whereClause, whereArgs);
@@ -62,7 +62,8 @@ public void save() {
         save(sqLiteDatabase);
     }
 
-    public static <T extends SugarRecord> void saveInTx(T... objects ) {
+    @SuppressWarnings("deprecation")
+    public static <T extends SugarRecord<?>> void saveInTx(T... objects ) {
 
         SQLiteDatabase sqLiteDatabase = getSugarContext().database.getDB();
 
@@ -82,7 +83,8 @@ public void save() {
 
     }
 
-    public static <T extends SugarRecord> void saveInTx(Collection<T> objects ) {
+    @SuppressWarnings("deprecation")
+    public static <T extends SugarRecord<?>> void saveInTx(Collection<T> objects ) {
 
         SQLiteDatabase sqLiteDatabase = getSugarContext().database.getDB();
 
@@ -162,22 +164,22 @@ else if (columnType.equals(Calendar.class)) {
         }
     }
 
-    public static <T extends SugarRecord> List<T> listAll(Class<T> type) {
+    public static <T extends SugarRecord<?>> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
 
-    public static <T extends SugarRecord> T findById(Class<T> type, Long id) {
+    public static <T extends SugarRecord<?>> T findById(Class<T> type, Long id) {
         List<T> list = find( type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
         if (list.isEmpty()) return null;
         return list.get(0);
     }
 
-    public static <T extends SugarRecord> List<T> find(Class<T> type,
+    public static <T extends SugarRecord<?>> List<T> find(Class<T> type,
                                                        String whereClause, String... whereArgs) {
         return find(type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T extends SugarRecord> List<T> findWithQuery(Class<T> type, String query, String... arguments){
+    public static <T extends SugarRecord<?>> List<T> findWithQuery(Class<T> type, String query, String... arguments){
 
         Database db = getSugarContext().database;
         SQLiteDatabase sqLiteDatabase = db.getDB();
@@ -203,7 +205,7 @@ public static void executeQuery(String query, String... arguments){
         getSugarContext().database.getDB().execSQL(query, arguments);
     }
 
-    public static <T extends SugarRecord> List<T> find(Class<T> type,
+    public static <T extends SugarRecord<?>> List<T> find(Class<T> type,
                                                        String whereClause, String[] whereArgs,
                                                        String groupBy, String orderBy, String limit) {
         Database db = getSugarContext().database;
@@ -226,6 +228,7 @@ public static void executeQuery(String query, String... arguments){
         return toRet;
     }
 
+    @SuppressWarnings("unchecked")
     void inflate(Cursor cursor) {
         Map<Field, Long> entities = new HashMap<Field, Long>();
         List<Field> columns = getTableFields();
@@ -311,7 +314,7 @@ else if (SugarRecord.class.isAssignableFrom(fieldType)) {
 
         for (Field f : entities.keySet()) {
             try {
-                f.set(this, findById((Class<? extends SugarRecord>) f.getType(),
+                f.set(this, findById((Class<? extends SugarRecord<?>>) f.getType(), 
                         entities.get(f)));
             } catch (SQLiteException e) {
             } catch (IllegalArgumentException e) {
diff --git a/library/src/com/orm/query/Condition.java b/library/src/com/orm/query/Condition.java
index ccc82425..6838b843 100644
--- a/library/src/com/orm/query/Condition.java
+++ b/library/src/com/orm/query/Condition.java
@@ -1,7 +1,5 @@
 package com.orm.query;
 
-import java.util.ResourceBundle;
-
 public class Condition {
     private String property;
     private Object value;
diff --git a/library/src/com/orm/query/Select.java b/library/src/com/orm/query/Select.java
index fb4bc868..9e99c2f2 100644
--- a/library/src/com/orm/query/Select.java
+++ b/library/src/com/orm/query/Select.java
@@ -5,7 +5,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class Select<T extends SugarRecord> {
+public class Select<T extends SugarRecord<?>> {
 
     private Class<T> record;
     private String[] arguments;
@@ -21,33 +21,33 @@ public Select(Class<T> record) {
         this.record = record;
     }
 
-    public static <T extends SugarRecord> Select from(Class<T> record) {
+    public static <T extends SugarRecord<?>> Select<?> from(Class<T> record) {
         return new Select<T>(record);
     }
 
-    public Select orderBy(String prop) {
+    public Select<?> orderBy(String prop) {
         this.orderBy = prop;
         return this;
     }
 
-    public Select groupBy(String prop) {
+    public Select<?> groupBy(String prop) {
         this.groupBy = prop;
         return this;
     }
 
-    public Select limit(String limit) {
+    public Select<?> limit(String limit) {
         this.limit = limit;
         return this;
     }
 
 
 
-    public Select where(String whereClause) {
+    public Select<?> where(String whereClause) {
         this.whereClause = whereClause;
         return this;
     }
 
-    public Select where(Condition... condition) {
+    public Select<?> where(Condition... condition) {
 
         mergeConditions(condition, Condition.Type.AND);
 
@@ -74,22 +74,22 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
         }
     }
 
-    public Select whereOr(Condition... args) {
+    public Select<?> whereOr(Condition... args) {
         mergeConditions(args, Condition.Type.OR);
         return this;
     }
 
-    public Select and(Condition... args) {
+    public Select<?> and(Condition... args) {
         mergeConditions(args, Condition.Type.AND);
         return this;
     }
 
-    public Select or(Condition... args) {
+    public Select<?> or(Condition... args) {
         mergeConditions(args, Condition.Type.OR);
         return this;
     }
 
-    public Select where(String whereClause, String[] args) {
+    public Select<?> where(String whereClause, String[] args) {
         this.whereClause = whereClause;
         this.arguments = args;
         return this;
