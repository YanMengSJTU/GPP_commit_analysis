diff --git a/library/libs/gson-2.2.4.jar b/library/libs/gson-2.2.4.jar
new file mode 100644
index 00000000..9478253e
Binary files /dev/null and b/library/libs/gson-2.2.4.jar differ
diff --git a/library/src/com/orm/QueryBuilder.java b/library/src/com/orm/QueryBuilder.java
index 6ca26fc9..85ccbaea 100644
--- a/library/src/com/orm/QueryBuilder.java
+++ b/library/src/com/orm/QueryBuilder.java
@@ -33,6 +33,6 @@ public static String getColumnType(Class<?> type) {
             return "TEXT";
         }
 
-        return "";
+        return "TEXT";
     }
 }
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index ca3e139c..b35d50ed 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -1,23 +1,33 @@
 package com.orm;
 
+import static com.orm.SugarApp.getSugarContext;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.NoSuchElementException;
+
 import android.content.ContentValues;
-import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
 import android.util.Log;
-import com.orm.dsl.Ignore;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.sql.Timestamp;
-import java.util.*;
-
-import static com.orm.SugarApp.getSugarContext;
+import com.google.gson.Gson;
+import com.orm.dsl.Ignore;
 
 public abstract class SugarRecord<T,I>{
 
@@ -114,8 +124,10 @@ long save(SQLiteDatabase db) {
                         } catch (NullPointerException e) {
                             values.put(columnName, (Long) null);
                         }
-                    } else {
+                    } else if (String.class.equals(columnType)) {
                         values.put(columnName, String.valueOf(columnValue));
+                    } else {
+                    	values.put(columnName, new Gson().toJson(columnValue));
                     }
                 }
 
@@ -342,8 +354,9 @@ void inflate(Cursor cursor) {
                         entities.put(field, id);
                     else
                         field.set(this, null);
-                } else
-                    Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + field.getType().getName() + ")");
+                } else {
+                    field.set(this, new Gson().fromJson(cursor.getString(columnIndex), field.getType()));
+                }
             } catch (IllegalArgumentException e) {
                 Log.e("field set error", e.getMessage());
             } catch (IllegalAccessException e) {
