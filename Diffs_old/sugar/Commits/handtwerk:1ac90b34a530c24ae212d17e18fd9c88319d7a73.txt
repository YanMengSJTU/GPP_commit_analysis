diff --git a/src/com/orm/SugarRecord.java b/src/com/orm/SugarRecord.java
index f3d49f02..f9d035c7 100644
--- a/src/com/orm/SugarRecord.java
+++ b/src/com/orm/SugarRecord.java
@@ -1,13 +1,5 @@
 package com.orm;
 
-import android.content.ContentValues;
-import android.content.Context;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-import android.util.Log;
-import com.orm.dsl.Ignore;
-
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.sql.Timestamp;
@@ -16,13 +8,26 @@
 import java.util.List;
 import java.util.Map;
 
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteException;
+import android.util.Log;
+
+import com.orm.dsl.Ignore;
+
 public class SugarRecord<T> {
 
-    private Context context;
-    protected Long id = null;
+    private Context  context;
+
+    protected long   id        = -1;
+
     private SugarApp application;
+
     private Database database;
-    String tableName = getSqlName();
+
+    String           tableName = getSqlName();
 
     public SugarRecord(Context context) {
         this.context = context;
@@ -30,10 +35,9 @@ public SugarRecord(Context context) {
         this.database = application.database;
     }
 
-
     public void delete() {
         SQLiteDatabase db = this.database.openDB();
-        db.delete(this.tableName, "Id=?", new String[]{getId().toString()});
+        db.delete(this.tableName, "Id=?", new String[] { String.valueOf(getId()) });
         this.database.closeDB();
 
     }
@@ -53,13 +57,10 @@ public void save() {
             try {
                 if (column.getType().getSuperclass() == SugarRecord.class) {
                     values.put(StringUtil.toSQLName(column.getName()),
-                            (column.get(this) != null)
-                                    ? String.valueOf(((SugarRecord) column.get(this)).id)
-                                    : "0");
+                            (column.get(this) != null) ? String.valueOf(((SugarRecord) column.get(this)).id) : "0");
                 } else {
                     if (!"id".equalsIgnoreCase(column.getName())) {
-                        values.put(StringUtil.toSQLName(column.getName()),
-                                String.valueOf(column.get(this)));
+                        values.put(StringUtil.toSQLName(column.getName()), String.valueOf(column.get(this)));
                     }
                 }
 
@@ -68,9 +69,16 @@ public void save() {
             }
         }
 
-        id = (id == null)
-                ? sqLiteDatabase.insert(getSqlName(), null, values)
-                : sqLiteDatabase.update(getSqlName(), values, "ID = ?", new String[]{String.valueOf(id)});
+        Log.i("Sugar", (id == -1) ? "inserting data" : "updating data");
+
+        if (id == -1) {
+
+            id = sqLiteDatabase.insert(getSqlName(), null, values);
+
+        } else {
+
+            sqLiteDatabase.update(getSqlName(), values, "ID = ?", new String[] { String.valueOf(id) });
+        }
 
         Log.i("Sugar", getClass().getSimpleName() + " saved : " + id);
         database.closeDB();
@@ -81,25 +89,26 @@ public void save() {
     }
 
     public static <T extends SugarRecord> T findById(Context context, Class<T> type, Long id) {
-        List<T> list = find(context, type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
-        if (list.isEmpty()) return null;
+        List<T> list = find(context, type, "id=?", new String[] { String.valueOf(id) }, null, null, "1");
+        if (list.isEmpty()) {
+            return null;
+        }
         return list.get(0);
     }
 
-    public static <T extends SugarRecord> List<T> find(Context context, Class<T> type,
-                                                       String whereClause, String[] whereArgs) {
+    public static <T extends SugarRecord> List<T> find(Context context, Class<T> type, String whereClause,
+            String[] whereArgs) {
         return find(context, type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T extends SugarRecord> List<T> find(Context context, Class<T> type,
-                                                       String whereClause, String[] whereArgs,
-                                                       String groupBy, String orderBy, String limit) {
+    public static <T extends SugarRecord> List<T> find(Context context, Class<T> type, String whereClause,
+            String[] whereArgs, String groupBy, String orderBy, String limit) {
         Database db = ((SugarApp) context.getApplicationContext()).database;
         SQLiteDatabase sqLiteDatabase = db.openDB();
         T entity;
         List<T> toRet = new ArrayList<T>();
-        Cursor c = sqLiteDatabase.query(getTableName(type), null,
-                whereClause, whereArgs, groupBy, null, orderBy, limit);
+        Cursor c = sqLiteDatabase
+                .query(getTableName(type), null, whereClause, whereArgs, groupBy, null, orderBy, limit);
         try {
             while (c.moveToNext()) {
                 entity = type.getDeclaredConstructor(Context.class).newInstance(context);
@@ -125,48 +134,42 @@ void inflate(Cursor cursor) {
                 String typeString = field.getType().getName();
                 String colName = StringUtil.toSQLName(field.getName());
 
-                if(colName.equalsIgnoreCase("id")){
+                if (colName.equalsIgnoreCase("id")) {
                     long cid = cursor.getLong(cursor.getColumnIndex(colName));
                     field.set(this, Long.valueOf(cid));
                 }
 
                 if (typeString.equals("long")) {
-                    field.setLong(this,
-                            cursor.getLong(cursor.getColumnIndex(colName)));
+                    field.setLong(this, cursor.getLong(cursor.getColumnIndex(colName)));
                 } else if (typeString.equals("java.lang.String")) {
-                    String val = cursor.getString(cursor
-                            .getColumnIndex(colName));
+                    String val = cursor.getString(cursor.getColumnIndex(colName));
                     field.set(this, val.equals("null") ? null : val);
                 } else if (typeString.equals("double")) {
-                    field.setDouble(this,
-                            cursor.getDouble(cursor.getColumnIndex(colName)));
+                    field.setDouble(this, cursor.getDouble(cursor.getColumnIndex(colName)));
                 } else if (typeString.equals("boolean")) {
-                    field.setBoolean(this,
-                            cursor.getString(cursor.getColumnIndex(colName))
-                                    .equals("true"));
+                    field.setBoolean(this, cursor.getString(cursor.getColumnIndex(colName)).equals("true"));
                 } else if (typeString.equals("[B")) {
-                    field.set(this,
-                            cursor.getBlob(cursor.getColumnIndex(colName)));
+                    field.set(this, cursor.getBlob(cursor.getColumnIndex(colName)));
                 } else if (typeString.equals("int")) {
-                    field.setInt(this,
-                            cursor.getInt(cursor.getColumnIndex(colName)));
+                    field.setInt(this, cursor.getInt(cursor.getColumnIndex(colName)));
                 } else if (typeString.equals("float")) {
-                    field.setFloat(this,
-                            cursor.getFloat(cursor.getColumnIndex(colName)));
+                    field.setFloat(this, cursor.getFloat(cursor.getColumnIndex(colName)));
                 } else if (typeString.equals("short")) {
-                    field.setShort(this,
-                            cursor.getShort(cursor.getColumnIndex(colName)));
+                    field.setShort(this, cursor.getShort(cursor.getColumnIndex(colName)));
                 } else if (typeString.equals("java.sql.Timestamp")) {
                     long l = cursor.getLong(cursor.getColumnIndex(colName));
                     field.set(this, new Timestamp(l));
                 } else if (field.getType().getSuperclass() == SugarRecord.class) {
                     long id = cursor.getLong(cursor.getColumnIndex(colName));
-                    if (id > 0)
+                    if (id > 0) {
                         entities.put(field, id);
-                    else
+                    } else {
                         field.set(this, null);
-                } else
-                    Log.e("Sugar", "Class cannot be read from Sqlite3 database.");
+                    }
+                } else {
+                    Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field "
+                            + field.getName());
+                }
             } catch (IllegalArgumentException e) {
                 Log.e("field set error", e.getMessage());
             } catch (IllegalAccessException e) {
@@ -177,9 +180,7 @@ void inflate(Cursor cursor) {
 
         for (Field f : entities.keySet()) {
             try {
-                f.set(this, findById(context,
-                        (Class<? extends SugarRecord>) f.getType(),
-                        entities.get(f)));
+                f.set(this, findById(context, (Class<? extends SugarRecord>) f.getType(), entities.get(f)));
             } catch (SQLiteException e) {
             } catch (IllegalArgumentException e) {
             } catch (IllegalAccessException e) {
@@ -211,12 +212,11 @@ public String getSqlName() {
         return getTableName(getClass());
     }
 
-
     public static String getTableName(Class<?> type) {
         return StringUtil.toSQLName(type.getSimpleName());
     }
 
-    public Long getId() {
+    public long getId() {
         return id;
     }
 
