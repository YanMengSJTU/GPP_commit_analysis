diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 4b9e04ef..4a3ecbdd 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -55,13 +55,18 @@ private static SQLiteDatabase getSugarDataBase() {
     }
 
     @SuppressWarnings("deprecation")
-    public static <T> void saveInTx(Collection<T> objects) {
+    public static <T> void saveInTx(boolean updateIfNull, T... objects) {
+        saveInTx(updateIfNull, Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void saveInTx(boolean updateIfNull, Collection<T> objects) {
         SQLiteDatabase sqLiteDatabase = getSugarDataBase();
         try {
             sqLiteDatabase.beginTransaction();
             sqLiteDatabase.setLockingEnabled(false);
-            for (T object: objects) {
-                save(object);
+            for (T object : objects) {
+                save(object, updateIfNull);
             }
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
@@ -72,19 +77,29 @@ private static SQLiteDatabase getSugarDataBase() {
         }
     }
 
+    @SuppressWarnings("deprecation")
+    public static <T> void saveInTx(Collection<T> objects) {
+        saveInTx(true, objects);
+    }
+
     @SuppressWarnings("deprecation")
     public static <T> void updateInTx(T... objects) {
         updateInTx(Arrays.asList(objects));
     }
 
     @SuppressWarnings("deprecation")
-    public static <T> void updateInTx(Collection<T> objects) {
+    public static <T> void updateInTx(boolean updateIfNull, T... objects) {
+        updateInTx(updateIfNull, Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void updateInTx(boolean updateIfNull, Collection<T> objects) {
         SQLiteDatabase sqLiteDatabase = getSugarDataBase();
         try {
             sqLiteDatabase.beginTransaction();
             sqLiteDatabase.setLockingEnabled(false);
-            for (T object: objects) {
-                update(object);
+            for (T object : objects) {
+                update(object, updateIfNull);
             }
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
@@ -95,6 +110,11 @@ private static SQLiteDatabase getSugarDataBase() {
         }
     }
 
+    @SuppressWarnings("deprecation")
+    public static <T> void updateInTx(Collection<T> objects) {
+        updateInTx(true, objects);
+    }
+
     @SuppressWarnings("deprecation")
     public static <T> int deleteInTx(T... objects) {
         return deleteInTx(Arrays.asList(objects));
@@ -126,7 +146,7 @@ private static SQLiteDatabase getSugarDataBase() {
     public static <T> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
-    
+
     public static <T> List<T> listAll(Class<T> type, String orderBy) {
         return find(type, null, null, null, orderBy, null);
     }
@@ -146,7 +166,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return find(type, whereClause, ids);
     }
 
-    public static <T> T first(Class<T>type) {
+    public static <T> T first(Class<T> type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ID ASC LIMIT 1");
         if (list.isEmpty()) {
@@ -155,7 +175,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return list.get(0);
     }
 
-    public static <T> T last(Class<T>type) {
+    public static <T> T last(Class<T> type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ID DESC LIMIT 1");
         if (list.isEmpty()) {
@@ -190,7 +210,7 @@ private static SQLiteDatabase getSugarDataBase() {
     public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
         Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
 
-        return  getEntitiesFromCursor(cursor, type);
+        return getEntitiesFromCursor(cursor, type);
     }
 
     public static void executeQuery(String query, String... arguments) {
@@ -204,7 +224,7 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type);
     }
 
-    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type) {
         T entity;
         List<T> result = new ArrayList<T>();
         try {
@@ -227,12 +247,12 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> long count(Class<?> type, String whereClause, String[] whereArgs) {
-    	return count(type, whereClause, whereArgs, null, null, null);
+        return count(type, whereClause, whereArgs, null, null, null);
     }
 
     public static <T> long count(Class<?> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
         long result = -1;
-        String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
+        String filter = (!TextUtils.isEmpty(whereClause)) ? " where " + whereClause : "";
         SQLiteStatement sqliteStatement;
         try {
             sqliteStatement = getSugarDataBase().compileStatement("SELECT count(*) FROM " + NamingHelper.toSQLName(type) + filter);
@@ -257,16 +277,20 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static long save(Object object) {
-        return save(getSugarDataBase(), object);
+        return save(getSugarDataBase(), object, true);
+    }
+
+    public static long save(Object object, boolean updateIfNull) {
+        return save(getSugarDataBase(), object, updateIfNull);
     }
 
-    static long save(SQLiteDatabase db, Object object) {
+    static long save(SQLiteDatabase db, Object object, boolean updateIfNull) {
         Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
         Field idField = null;
         for (Field column : columns) {
-            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap, updateIfNull);
             if (column.getName().equals("id")) {
                 idField = column;
             }
@@ -274,7 +298,7 @@ static long save(SQLiteDatabase db, Object object) {
 
         boolean isSugarEntity = isSugarEntity(object.getClass());
         if (isSugarEntity && entitiesMap.containsKey(object)) {
-                values.put("id", entitiesMap.get(object));
+            values.put("id", entitiesMap.get(object));
         }
 
         long id = db.insertWithOnConflict(NamingHelper.toSQLName(object.getClass()), null, values,
@@ -301,10 +325,14 @@ static long save(SQLiteDatabase db, Object object) {
     }
 
     public static long update(Object object) {
-        return update(getSugarDataBase(), object);
+        return update(getSugarDataBase(), object, true);
     }
 
-    static long update(SQLiteDatabase db, Object object) {
+    public static long update(Object object, boolean updateIfNull) {
+        return update(getSugarDataBase(), object, updateIfNull);
+    }
+
+    static long update(SQLiteDatabase db, Object object, boolean updateIfNull) {
         Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
@@ -313,7 +341,7 @@ static long update(SQLiteDatabase db, Object object) {
         List<String> whereArgs = new ArrayList<>();
 
         for (Field column : columns) {
-            if(column.isAnnotationPresent(Unique.class)) {
+            if (column.isAnnotationPresent(Unique.class)) {
                 try {
                     column.setAccessible(true);
                     String columnName = NamingHelper.toSQLName(column);
@@ -326,7 +354,7 @@ static long update(SQLiteDatabase db, Object object) {
                 }
             } else {
                 if (!column.getName().equals("id")) {
-                    ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+                    ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap, updateIfNull);
                 }
             }
         }
@@ -336,14 +364,13 @@ static long update(SQLiteDatabase db, Object object) {
         long rowsEffected = db.update(NamingHelper.toSQLName(object.getClass()), values, whereClause.toString(), whereArgsArray);
 
         if (rowsEffected == 0) {
-            return save(db, object);
+            return save(db, object, updateIfNull);
         } else {
             return rowsEffected;
         }
     }
 
 
-
     public static boolean isSugarEntity(Class<?> objectClass) {
         return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
     }
@@ -355,7 +382,7 @@ private static void inflate(Cursor cursor, Object object, Map<Object, Long> enti
         }
 
         for (Field field : columns) {
-        	field.setAccessible(true);
+            field.setAccessible(true);
             Class<?> fieldType = field.getType();
             if (isSugarEntity(fieldType)) {
                 try {
@@ -381,7 +408,7 @@ public boolean delete() {
             return false;
         }
     }
-    
+
     public static boolean delete(Object object) {
         Class<?> type = object.getClass();
         if (type.isAnnotationPresent(Table.class)) {
@@ -413,11 +440,19 @@ public static boolean delete(Object object) {
     }
 
     public long save() {
-        return save(getSugarDataBase(), this);
+        return save(getSugarDataBase(), this, true);
+    }
+
+    public long save(boolean updateIfNull) {
+        return save(getSugarDataBase(), this, updateIfNull);
     }
 
     public long update() {
-        return update(getSugarDataBase(), this);
+        return update(getSugarDataBase(), this, true);
+    }
+
+    public long update(boolean updateIfNull) {
+        return save(getSugarDataBase(), this, updateIfNull);
     }
 
     @SuppressWarnings("unchecked")
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 1458a308..0d4bebc2 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -59,7 +59,7 @@
     }
 
     public static void addFieldValueToColumn(ContentValues values, Field column, Object object,
-                                             Map<Object, Long> entitiesMap) {
+                                             Map<Object, Long> entitiesMap, boolean updateIfNull) {
         column.setAccessible(true);
         Class<?> columnType = column.getType();
         try {
@@ -86,50 +86,62 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
                                 : "0");
             } else {
                 if (columnType.equals(Short.class) || columnType.equals(short.class)) {
-                    values.put(columnName, (Short) columnValue);
+                    if (updateIfNull || columnValue != null)
+                        values.put(columnName, (Short) columnValue);
                 } else if (columnType.equals(Integer.class) || columnType.equals(int.class)) {
-                    values.put(columnName, (Integer) columnValue);
+                    if (updateIfNull || columnValue != null)
+                        values.put(columnName, (Integer) columnValue);
                 } else if (columnType.equals(Long.class) || columnType.equals(long.class)) {
-                    values.put(columnName, (Long) columnValue);
+                    if (updateIfNull || columnValue != null)
+                        values.put(columnName, (Long) columnValue);
                 } else if (columnType.equals(Float.class) || columnType.equals(float.class)) {
-                    values.put(columnName, (Float) columnValue);
+                    if (updateIfNull || columnValue != null)
+                        values.put(columnName, (Float) columnValue);
                 } else if (columnType.equals(Double.class) || columnType.equals(double.class)) {
-                    values.put(columnName, (Double) columnValue);
+                    if (updateIfNull || columnValue != null)
+                        values.put(columnName, (Double) columnValue);
                 } else if (columnType.equals(Boolean.class) || columnType.equals(boolean.class)) {
-                    values.put(columnName, (Boolean) columnValue);
+                    if (updateIfNull || columnValue != null)
+                        values.put(columnName, (Boolean) columnValue);
                 } else if (columnType.equals(BigDecimal.class)) {
                     try {
                         values.put(columnName, column.get(object).toString());
                     } catch (NullPointerException e) {
-                        values.putNull(columnName);
+                        if (updateIfNull)
+                            values.putNull(columnName);
                     }
                 } else if (Timestamp.class.equals(columnType)) {
                     try {
                         values.put(columnName, ((Timestamp) column.get(object)).getTime());
                     } catch (NullPointerException e) {
-                        values.put(columnName, (Long) null);
+                        if (updateIfNull)
+                            values.put(columnName, (Long) null);
                     }
                 } else if (Date.class.equals(columnType)) {
                     try {
                         values.put(columnName, ((Date) column.get(object)).getTime());
                     } catch (NullPointerException e) {
-                        values.put(columnName, (Long) null);
+                        if (updateIfNull)
+                            values.put(columnName, (Long) null);
                     }
                 } else if (Calendar.class.equals(columnType)) {
                     try {
                         values.put(columnName, ((Calendar) column.get(object)).getTimeInMillis());
                     } catch (NullPointerException e) {
-                        values.put(columnName, (Long) null);
+                        if (updateIfNull)
+                            values.put(columnName, (Long) null);
                     }
                 } else if (columnType.equals(byte[].class)) {
                     if (columnValue == null) {
-                        values.put(columnName, "".getBytes());
+                        if (updateIfNull)
+                            values.put(columnName, "".getBytes());
                     } else {
                         values.put(columnName, (byte[]) columnValue);
                     }
                 } else {
                     if (columnValue == null) {
-                        values.putNull(columnName);
+                        if (updateIfNull)
+                            values.putNull(columnName);
                     } else if (columnType.isEnum()) {
                         values.put(columnName, ((Enum) columnValue).name());
                     } else {
diff --git a/sugar.iml b/sugar.iml
index e19b5594..4f9f25c3 100644
--- a/sugar.iml
+++ b/sugar.iml
@@ -4,16 +4,22 @@
     <facet type="java-gradle" name="Java-Gradle">
       <configuration>
         <option name="BUILD_FOLDER_PATH" value="$MODULE_DIR$/build" />
-        <option name="BUILDABLE" value="false" />
+        <option name="BUILDABLE" value="true" />
       </configuration>
     </facet>
   </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/classes/main" />
+    <output-test url="file://$MODULE_DIR$/build/classes/test" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
       <excludeFolder url="file://$MODULE_DIR$/.gradle" />
     </content>
-    <orderEntry type="jdk" jdkName="1.7" jdkType="JavaSDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
