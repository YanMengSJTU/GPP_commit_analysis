diff --git a/README.md b/README.md
index 6986479b..3d9627fe 100644
--- a/README.md
+++ b/README.md
@@ -1,188 +1,344 @@
-# Sugar ORM [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master) [![Code Triagers Badge](http://www.codetriage.com/satyan/sugar/badges/users.svg)](http://www.codetriage.com/satyan/sugar)
+# Sugar ORM
+#####(Sugar ORM for simple one to many relationship and encrypted database)
 
-[![Join the chat at https://gitter.im/satyan/sugar](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/satyan/sugar?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
-
-Insanely easy way to work with Android databases.
-
-Official documentation can be found [here](http://satyan.github.io/sugar) - Check some examples below. The example application is provided in the **example** folder in the source.
-
-## Looking for contributors
-We need contributors to help maintain this project, ask @satyan for repo permission
-
-Otherwise you can use another ORM, like https://github.com/requery/requery or https://realm.io/
-
-## Features
 
+Insanely easy way to work with Android databases. This is <b>custom version</b> based from master version of Sugar ORM.
 Sugar ORM was built in contrast to other ORM's to have:
 
 - A simple, concise, and clean integration process with minimal configuration.
 - Automatic table and column naming through reflection.
 - Support for migrations between different schema versions.
 
-## Installing
+Official documentation can be found [here](http://satyan.github.io/sugar) - Check some examples below. The example application is provided in the **example** folder in the source.
 
-There are four ways to install Sugar:
+## What is supported in this version
+- Use <b>SugarRecord.insertOrUpdate( )</b> to insert or update the data
+- Added <b>@IgnoreUpdate</b> annotation
+- Automatic one to many insert and query
+- Find All with return List
+- Drop table
+- Encrypted database
 
-#### As a Gradle dependency
+See below for more example and explaination ...
 
-This is the preferred way. Simply add:
 
-```groovy
-compile 'com.github.satyan:sugar:1.5'
+## Install
+Add bintray repository on your project build.gradle
 ```
-
-to your project dependencies and run `gradle build` or `gradle assemble`.
-
-#### As a Maven dependency
-
-Declare the dependency in Maven:
-
-```xml
-<dependency>
-    <groupId>com.github.satyan</groupId>
-    <artifactId>sugar</artifactId>
-    <version>1.5</version>
-</dependency>
+allprojects {
+    repositories {
+        ...
+        maven {
+            url 'https://dl.bintray.com/sylversky/AndroidLibrary/'
+        }
+    }
+}
 ```
 
-#### As a library project
 
-Download the source code and import it as a library project in Eclipse. The project is available in the folder **library**. For more information on how to do this, read [here](http://developer.android.com/tools/projects/index.html#LibraryProjects).
+Add on your app build.gradle
+```
+dependencies {
+    compile 'com.sylversky.library:sugarorm:1.0.0'
+}
+```
 
-#### As a jar
+## Configuration
 
-Visit the [releases](https://github.com/satyan/sugar/releases) page to download jars directly. You can drop them into your `libs` folder and configure the Java build path to include the library. See this [tutorial](http://www.vogella.com/tutorials/AndroidLibraryProjects/article.html) for an excellent guide on how to do this.
+Extends SugarApp on your application class
+```java
+public class ClientApp extends SugarApp {
 
+}
+```
+or you can manualy init the sugar orm on you application class
+```java
+public class ClientApp extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        SugarContext.init(this);
+    }
+
+    @Override
+    public void onTerminate() {
+        super.onTerminate();
+        SugarContext.terminate();
+    }
+}
+```
 
-### How to use master version
-First, download sugar repository
+Open your AndroidManifest.xml and put some like this inside appication tag:
 ```
-git clone git@github.com:satyan/sugar.git
+<application ...
+android:name=".ClientApp">
+.
+.
+<meta-data android:name="DATABASE" android:value="sugar_example.db" />  //database file name
+<meta-data android:name="VERSION" android:value="1" /> //database version
+<meta-data android:name="QUERY_LOG" android:value="true" /> //database log
+<meta-data android:name="DOMAIN_PACKAGE_NAME" android:value="yourentitypackage" /> //location of package for all of your entity table
+.
+.
+</application>
 ```
 
-include this in your **settings.gradle**
-```gradle
-include ':app' // your module app
-include ':sugar'
+## How to use
 
-def getLocalProperty(prop) {
-	Properties properties = new Properties()
-	properties.load(new File(rootDir.absolutePath + '/local.properties').newDataInputStream())
-	return properties.getProperty(prop, '')
+### Create Entity Table
+```java
+@Table
+public class Person {
+  Long id;
+  String regId;
+  String name;
+  Date dob;
+  
+  public Person(){}
+  
+  public Person(Long id, String regId, String name, Date dob){
+    this.id = id;
+    this.regId = regId;
+    this.name = name;
+    this.dob = dob;
+  }
+  
 }
-
-project(':sugar').projectDir = new File(getLocalProperty('sugar.dir'))
-
 ```
 
-include this in your **local.properties**
-```
-sugar.dir=/path/to/sugar/library
-```
+This is will create table PERSON with columns ID,REG_ID,NAME,DOB on SQLite.
+*** Field "Long id" is a <b>must</b> to declare. This will be the <b>primary key</b> (autoincrement) for your table.
+*** When you need to create your own constructor, you <b>must</b> add an empty constructor
 
-add sugar project to the dependencies of your main project (build.gradle)
-```gradle
-dependencies {
-    compile project(':sugar')
+### Primary Key with another data type
+The default primary key is with Long data type.
+If you need other data type (for example String), just keep the "Long id" for primary key, add new filed and put the <b>@Unique</b> annotation.
+```java
+@Table
+public class Person {
+  Long id;
+  @Unique
+  String personId;
+  
+  String regId;
+  String name;
+  Date dob;
+  
+  public Person(){}
+  
+  public Person(Long id, String personId, String regId, String name, Date dob){
+    this.id = id;
+    this.personId = personId;
+    this.regId = regId;
+    this.name = name;
+    this.dob = dob;
+  }
+  
 }
 ```
 
-You should also comment this line just comment this line (library/build.gradle): https://github.com/satyan/sugar/blob/master/library%2Fbuild.gradle#L2
+### Insert
+```java
+Person person = new Person(1l,"abc12345","Leonardo", new Date());
+SugarRecord.insertOrUpdate(person);
+```
 
-```gradle
-// apply from: '../maven_push.gradle'
+### Query
+```java
+Person person = SugarRecord.findById(Person.class, 1);
 ```
-===================
 
-After installing, check out how to set up your first database and models [here](http://satyan.github.io/sugar/getting-started.html) **Outdated**. Check examples of 1.4 and master below: 
+### Query with condition
+```java
+List<Person> person = SugarRecord.find(Person.class, "NAME = ?", "Leonardo");
+```
 
-## Examples
-### SugarRecord
+### Query All
 ```java
-public class Book extends SugarRecord {
-  @Unique
-  String isbn;
-  String title;
-  String edition;
+List<Person> person = SugarRecord.findAll(Person.class);
+```
 
-  // Default constructor is necessary for SugarRecord
-  public Book() {
 
-  }
+### Update
+```java
+Person person = SugarRecord.findById(Person.class, 1);
+person.regId = "def12345"
+person.name = "Donatelo"; // modify the values
+SugarRecord.update(person);
+```
 
-  public Book(String isbn, String title, String edition) {
-    this.isbn = isbn;
-    this.title = title;
-    this.edition = edition;
-  }
-}
+### Delete
+```java
+Person person = SugarRecord.findById(Person.class, 1);
+SugarRecord.delete(person);
 ```
-or
+
+### Bulk Insert
 ```java
-@Table
-public class Book { ... }
+List<Person> persons = new ArrayList<>();
+persons.add(new Person(1l,"abc12345","Leonardo", new Date()))
+persons.add(new Person(2l,"def12345","Donatelo", new Date()))
+persons.add(new Person(3l,"ghi12345","Michaelangelo", new Date()))
+SugarRecord.insertOrUpdate(persons);
 ```
 
-### Save Entity
+### Drop table
 ```java
-Book book = new Book("isbn123", "Title here", "2nd edition")
-book.save();
+SugarRecord.drop(Person.class);
 ```
+*** Becarefull when use drop. This function will remove the structure of table.
+
+
+### Ignore Update
+You can ignoring update for specified column. Only work when use <b>SugarRecord.insertOrUpdate( )</b> function.
+For example : we need to give flag data read/unread, but ignoring to replace when refreshed from api server.
+Don't worry, you still can update specified column with SugarRecord.update( ) function.
 
-or
+#####Create entitiy table with @IgnoreUpdate
 ```java
-SugarRecord.save(book); // if using the @Table annotation 
+@Table
+public class Person {
+  Long id;
+  String regId;
+  String name;
+  Date dob;
+  @IgnoreUpdate
+  boolean read;
+  
+  public Person(){}
+  
+  public Person(Long id, String regId, String name, Date dob){
+    this.id = id;
+    this.regId = regId;
+    this.name = name;
+    this.dob = dob;
+  }
+  
+}
 ```
 
-### Load Entity
+
+##### Then do some Insert
 ```java
-Book book = Book.findById(Book.class, 1);
+Person person = new Person(1l,"abc12345","Leonardo", new Date());
+SugarRecord.insertOrUpdate(person);
 ```
 
-### Update Entity
+Now read flag is 'false';
+
+##### Update read flag to 'true'
 ```java
-Book book = Book.findById(Book.class, 1);
-book.title = "updated title here"; // modify the values
-book.edition = "3rd edition";
-book.save(); // updates the previous entry with new values.
+Person person = SugarRecord.findById(Person.class, 1);
+person.read = true;
+SugarRecord.update(person);
 ```
 
+Now read flag is 'true';
 
-### Delete Entity
+##### Try to Insert again
 ```java
-Book book = Book.findById(Book.class, 1);
-book.delete();
+Person person = new Person(1l,"abc12345","Leonardo", new Date());
+SugarRecord.insertOrUpdate(person);
 ```
+This will insert data person with default read value is 'false', but because use @IgnoreUpdate now read flag still 'true'
 
-or
+
+### Automatic One To Many
+When you need other entity be member of your entity, Sugar will automatically manage it.
+
+#####Create entitiy table
 ```java
-SugarRecord.delete(book); // if using the @Table annotation 
+@Table
+public class Address {
+    Long id;
+    String street;
+    String province;
+    
+    public Address(){}
+    
+    public Address(Long id, String street, String province){
+        this.id = id;
+        this.street = street;
+        this.province = province;
+    }
+}
 ```
 
-### Update Entity based on Unique values
+#####Create entitiy table with other entity member
 ```java
-Book book = new Book("isbn123", "Title here", "2nd edition")
-book.save();
+@Table
+public class Person {
+  Long id;
+  String regId;
+  String name;
+  Date dob;
+  List<Address> address;
+  
+  public Person(){}
+  
+  public Person(Long id, String regId, String name, Date dob, List<Address> address){
+    this.id = id;
+    this.regId = regId;
+    this.name = name;
+    this.dob = dob;
+    this.address = address;
+  }
+  
+}
+```
 
-// Update book with isbn123
-Book sameBook = new Book("isbn123", "New Title", "5th edition")
-sameBook.update();
+##### Then do some Insert
+```java
+List<Address> addressList = new ArrayList();
+addressList.add(new Address(1l,"my office","my province"));
+addressList.add(new Address(2l,"my home","my countryside province"));
 
-book.getId() == sameBook.getId(); // true
+Person person = new Person(1l,"abc12345","Leonardo", new Date(), addressList);
+SugarRecord.insertOrUpdate(person);
 ```
+Person and address will automatically insert into different table.
 
-or
+##### Query
 ```java
-SugarRecord.update(sameBook); // if using the @Table annotation 
+Person person = SugarRecord.findById(Person.class, 1);
+List<Address> addresList = person.address;
 ```
+With execute just one find( ) function, person and address will automatically combined.
+
+### Migration
+1. Just declare your new column inside your entity.
+2. Increase meta VERSION value on AndroidManifest.xml.
+   ```
+   <application ...
+   android:name=".ClientApp">
+   .
+   .
+   <meta-data android:name="VERSION" android:value="2" /> //database version
+   .
+   .
+   </application>
+   ```
+
+Database schema will automatically updated.
+
+### Encrypt Database
+Just add SugarDbConfiguration with your password for encrypt when initialize Sugar
 
-### Bulk Insert
 ```java
-List<Book> books = new ArrayList<>();
-books.add(new Book("isbn123", "Title here", "2nd edition"))
-books.add(new Book("isbn456", "Title here 2", "3nd edition"))
-books.add(new Book("isbn789", "Title here 3", "4nd edition"))
-SugarRecord.saveInTx(books);
+public class ClientApp extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        SugarContext.init(this, new SugarDbConfiguration().setEncryptedPassword("mysugarpassword"));
+    }
+
+    @Override
+    public void onTerminate() {
+        SugarContext.terminate();
+        super.onTerminate();
+    }
+}
 ```
 
 ### When using ProGuard
@@ -202,8 +358,6 @@ To disable Instant-Run in Android Studio:
 
 ``(Preferences (Mac) or Settings (PC) -> Build, Execution, Deployment -> Instant Run -> Untick "Enable Instant Run..." )``
 
-## [CHANGELOG](https://github.com/satyan/sugar/blob/master/CHANGELOG.md)
-
 ## Contributing
 
 Please fork this repository and contribute back using [pull requests](https://github.com/satyan/sugar/pulls). Features can be requested using [issues](https://github.com/satyan/sugar/issues). All code, comments, and critiques are greatly appreciated.
diff --git a/build.gradle b/build.gradle
index 030e1cb3..119e6cf8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,103 +1,19 @@
-apply plugin: 'jacoco'
-apply plugin: 'com.github.kt3k.coveralls'
-apply plugin: 'java'
-
 buildscript {
     repositories {
+        jcenter()
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0'
-        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
+        classpath 'com.android.tools.build:gradle:2.2.2'
     }
 }
 
-def isReleaseBuild() {
-    return version.contains("SNAPSHOT") == false
-}
-test{
-    testLogging{
-        exceptionFormat = 'full'
-    }
-}
 allprojects {
-    version = VERSION_NAME
-    group = GROUP
-
     repositories {
-        mavenLocal()
-        mavenCentral()
         jcenter()
     }
 }
 
-subprojects { proj ->
-    apply plugin: 'jacoco'
-
-    jacoco {
-        version "0.7.1.201405082137"
-    }
-
-    task jacocoTestReport(type: JacocoReport) {
-        group = "Reporting"
-        description = "Generate Jacoco coverage reports after running tests."
-        reports {
-            xml.enabled = true
-            html.enabled = true
-        }
-        classDirectories = fileTree(
-            dir: 'build/intermediates/classes/debug',
-            excludes: ['**/R*.class',
-                       '**/BuildConfig*'])
-        sourceDirectories = files('src/main/java')
-        executionData = files('build/jacoco/testDebugUnitTest.exec')
-        doFirst {
-            files('build/intermediates/classes/debug').getFiles().each { file ->
-                if (file.name.contains('$$')) {
-                    file.renameTo(file.path.replace('$$', '$'))
-                }
-            }
-        }
-    }
-}
-
-jacoco {
-    toolVersion "0.7.1.201405082137"
-}
-
-task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
-    group = "Reporting"
-    description = 'Generates an aggregate report from all subprojects'
-    dependsOn(subprojects.jacocoTestReport)
-
-    additionalSourceDirs = files('library/src/main/java')
-    sourceDirectories = files('library/src/main/java')
-    classDirectories = files('library/build/intermediates/classes/debug')
-    executionData = files(subprojects.jacocoTestReport.executionData)
-
-    reports {
-        html.enabled = true
-        xml.enabled = true
-    }
-
-    onlyIf = {
-        true
-    }
-
-    doFirst {
-        executionData = files(executionData.findAll { it.exists() })
-    }
-}
-
-coveralls {
-    sourceDirs = files('library/src/main/java').flatten()
-    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
-}
-
-tasks.coveralls {
-    group = 'Coverage reports'
-    description = 'Uploads the aggregated coverage report to Coveralls'
-
-    dependsOn jacocoRootReport
-    onlyIf { System.env.'CI' }
+task clean(type: Delete) {
+    delete rootProject.buildDir
 }
\ No newline at end of file
diff --git a/example/build.gradle b/example/build.gradle
index a8b90f05..bc8a58c3 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -20,6 +20,6 @@ android {
 }
 
 dependencies {
-    compile project (':library')
+    compile project (':sugarorm')
     compile 'com.android.support:appcompat-v7:23.3.0'
 }
diff --git a/example/src/main/AndroidManifest.xml b/example/src/main/AndroidManifest.xml
index eb802533..d2b18baf 100644
--- a/example/src/main/AndroidManifest.xml
+++ b/example/src/main/AndroidManifest.xml
@@ -3,7 +3,7 @@
       package="com.example"
       android:versionCode="1"
       android:versionName="1.0">
-    <application android:label="@string/app_name" android:icon="@drawable/icon" android:name="ClientApp">
+    <application android:label="@string/app_name" android:icon="@drawable/icon" android:name=".ClientApp">
         <activity android:name=".activities.SugarActivity" android:label="@string/app_name">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
@@ -11,7 +11,8 @@
             </intent-filter>
         </activity>
         <meta-data android:name="DATABASE" android:value="sugar_example.db" />
-        <meta-data android:name="VERSION" android:value="3" />
+        <meta-data android:name="VERSION" android:value="1" />
         <meta-data android:name="QUERY_LOG" android:value="true" />
+        <meta-data android:name="DOMAIN_PACKAGE_NAME" android:value="com.example.model" />
     </application>
 </manifest> 
diff --git a/example/src/main/java/com/example/ClientApp.java b/example/src/main/java/com/example/ClientApp.java
new file mode 100644
index 00000000..10bcb339
--- /dev/null
+++ b/example/src/main/java/com/example/ClientApp.java
@@ -0,0 +1,20 @@
+package com.example;
+
+import android.app.Application;
+import com.orm.SugarContext;
+import com.orm.SugarDbConfiguration;
+
+public class ClientApp extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        SugarContext.init(this, new SugarDbConfiguration().setEncryptedPassword("mysugarpassword"));
+    }
+
+    @Override
+    public void onTerminate() {
+        SugarContext.terminate();
+        super.onTerminate();
+    }
+}
diff --git a/example/src/main/java/com/example/activities/SugarActivity.java b/example/src/main/java/com/example/activities/SugarActivity.java
index 81044546..457c4af5 100644
--- a/example/src/main/java/com/example/activities/SugarActivity.java
+++ b/example/src/main/java/com/example/activities/SugarActivity.java
@@ -2,17 +2,114 @@
 
 import android.app.Activity;
 import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
 
 import com.example.R;
+import com.example.model.Address;
+import com.example.model.Person;
+import com.orm.SugarRecord;
 
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+
+public class SugarActivity extends Activity {
+
+    private TextView textView;
+    private Button buttonView;
 
-public class SugarActivity extends Activity
-{
-    /** Called when the activity is first created. */
     @Override
     public void onCreate(Bundle savedInstanceState)
     {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main);
+
+        textView = (TextView) findViewById(R.id.textView);
+        buttonView = (Button) findViewById(R.id.buttonView);
+        buttonView.setOnClickListener(onClickListener);
+    }
+
+    private View.OnClickListener onClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            Person person = new Person();
+            person.setId(1l);
+            person.setRegId("qwertyuiop");
+            person.setName("human");
+            person.setDob(new Date());
+
+            Address addr1 = new Address();
+            addr1.setId(1l);
+            addr1.setStreet("Office building");
+            addr1.setProvince("my lovely province");
+
+            Address addr2 = new Address();
+            addr2.setId(2l);
+            addr2.setStreet("Apartment building");
+            addr2.setProvince("my lovely countryside province");
+
+            List addrList1 = new ArrayList();
+            addrList1.add(addr1);
+            addrList1.add(addr2);
+
+            person.setAddress(addrList1);
+            person.setReadStatus(0);
+
+            show("First data", person);
+            SugarRecord.insertOrUpdate(person);
+            List<Person> people = SugarRecord.findAll(Person.class);
+            Person p = people.get(0);
+            show("After insert", p);
+
+            p.setReadStatus(1);
+            SugarRecord.update(p);
+
+            List<Person> people1 = SugarRecord.findAll(Person.class);
+            Person p1 = people1.get(0);
+            show("After read status update", p1);
+
+            Person person2 = new Person();
+            person2.setId(2l);
+            person2.setRegId("qwertyuiop");
+            person2.setName("people");
+            person2.setDob(new Date());
+
+            Address addr3 = new Address();
+            addr3.setId(1l);
+            addr3.setStreet("home sweet home");
+            addr3.setProvince("my lovely province");
+
+            Address addr4 = new Address();
+            addr4.setId(2l);
+            addr4.setStreet("home comfortnest home");
+            addr4.setProvince("my lovely countryside province");
+
+            List<Address> addrList2 = new ArrayList<>();
+            addrList2.add(addr3);
+            addrList2.add(addr4);
+
+            person2.setAddress(addrList2);
+            person2.setReadStatus(2);
+
+            SugarRecord.insertOrUpdate(person2);
+            List<Person> people2 = SugarRecord.findAll(Person.class);
+            Person p3 = people2.get(0);
+            show("cant replace read status", p3);
+
+        }
+    };
+
+
+    private void show(String title, Person person){
+        StringBuffer stringBuffer = new StringBuffer(title);
+        stringBuffer.append("\n");
+        if(person!=null) {
+            stringBuffer.append(person.toString());
+        }
+        stringBuffer.append("\n");
+        textView.append(stringBuffer.toString());
     }
 }
diff --git a/example/src/main/java/com/example/model/Address.java b/example/src/main/java/com/example/model/Address.java
new file mode 100644
index 00000000..6a3087a9
--- /dev/null
+++ b/example/src/main/java/com/example/model/Address.java
@@ -0,0 +1,45 @@
+package com.example.model;
+
+import com.orm.annotation.Table;
+
+@Table
+public class Address {
+    private Long id;
+    private String street;
+    private String province;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getStreet() {
+        return street;
+    }
+
+    public void setStreet(String street) {
+        this.street = street;
+    }
+
+    public String getProvince() {
+        return province;
+    }
+
+    public void setProvince(String province) {
+        this.province = province;
+    }
+
+    @Override
+    public String toString() {
+        StringBuffer stringBuffer = new StringBuffer();
+        stringBuffer.append("{");
+        stringBuffer.append(getId()).append(",")
+                .append(getStreet()).append(",")
+                .append(getProvince()).append("}");
+
+        return stringBuffer.toString();
+    }
+}
diff --git a/example/src/main/java/com/example/model/Person.java b/example/src/main/java/com/example/model/Person.java
new file mode 100644
index 00000000..89d34830
--- /dev/null
+++ b/example/src/main/java/com/example/model/Person.java
@@ -0,0 +1,95 @@
+package com.example.model;
+
+import com.orm.annotation.IgnoreUpdate;
+import com.orm.annotation.Table;
+import com.orm.annotation.Unique;
+
+import java.util.Date;
+import java.util.List;
+
+@Table
+public class Person {
+    private Long id;
+    @Unique
+    private String regId;
+    private String name;
+    private Date dob;
+    private List<Address> address;
+    @IgnoreUpdate
+    private int readStatus;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getRegId() {
+        return regId;
+    }
+
+    public void setRegId(String regId) {
+        this.regId = regId;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Date getDob() {
+        return dob;
+    }
+
+    public void setDob(Date dob) {
+        this.dob = dob;
+    }
+
+    public List<Address> getAddress() {
+        return address;
+    }
+
+    public void setAddress(List<Address> address) {
+        this.address = address;
+    }
+
+    public int getReadStatus() {
+        return readStatus;
+    }
+
+    public void setReadStatus(int readStatus) {
+        this.readStatus = readStatus;
+    }
+
+    @Override
+    public String toString() {
+        StringBuffer stringBuffer = new StringBuffer();
+        stringBuffer.append("{");
+        stringBuffer.append(getId()).append(",")
+                .append(getRegId()).append(",")
+                .append(getName()).append(",")
+                .append(getDob().toString()).append(",\n");
+        stringBuffer.append("[");
+
+        Address item;
+        for(int i=0; i<address.size();i++){
+            item = address.get(i);
+            if(i==0){
+                stringBuffer.append(item.toString());
+            }else{
+                stringBuffer.append(",").append(item.toString());
+            }
+        }
+        stringBuffer.append("]\n,");
+
+        stringBuffer.append(getReadStatus());
+        stringBuffer.append("}");
+
+        return stringBuffer.toString();
+    }
+}
diff --git a/example/src/main/res/layout/main.xml b/example/src/main/res/layout/main.xml
index 92667838..a41decfe 100755
--- a/example/src/main/res/layout/main.xml
+++ b/example/src/main/res/layout/main.xml
@@ -1,9 +1,20 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:id="@+id/layout"
-    >
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:id="@+id/textView"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:scrollbars="vertical"/>
+
+    <Button
+        android:id="@+id/buttonView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Test"/>
 </LinearLayout>
 
diff --git a/gradle.properties b/gradle.properties
index 35b4c26f..b4862917 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,19 +16,4 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-org.gradle.daemon=true
-
-VERSION_NAME=2
-VERSION_CODE=2
-GROUP=com.github.satyan
-
-POM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database
-POM_URL=https://github.com/satyan/sugar
-POM_SCM_URL=https://github.com/satyan/sugar
-POM_SCM_CONNECTION=scm:git@github.com:satyan/sugar.git
-POM_SCM_DEV_CONNECTION=scm:git@github.com:satyan/sugar.git
-POM_LICENCE_NAME=The Apache Software License, Version 2.0
-POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
-POM_LICENCE_DIST=repo
-POM_DEVELOPER_ID=satyan
-POM_DEVELOPER_NAME=Satya Narayan
\ No newline at end of file
+org.gradle.daemon=true
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b0bb3ffb..e0eb2a4b 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/maven_push.gradle b/maven_push.gradle
deleted file mode 100644
index b741e61b..00000000
--- a/maven_push.gradle
+++ /dev/null
@@ -1,92 +0,0 @@
-apply plugin: 'maven'
-apply plugin: 'signing'
-
-def sonatypeRepositoryUrl
-if (isReleaseBuild()) {
-    println 'RELEASE BUILD'
-    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
-            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
-} else {
-    println 'DEBUG BUILD'
-    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
-            : "https://oss.sonatype.org/content/repositories/snapshots/"
-}
-
-def getRepositoryUsername() {
-    return hasProperty('nexusUsername') ? nexusUsername : ""
-}
-
-def getRepositoryPassword() {
-    return hasProperty('nexusPassword') ? nexusPassword : ""
-}
-
-afterEvaluate { project ->
-    uploadArchives {
-        repositories {
-            mavenDeployer {
-                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-
-                pom.artifactId = POM_ARTIFACT_ID
-
-                repository(url: sonatypeRepositoryUrl) {
-                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
-                }
-
-                pom.project {
-                    name POM_NAME
-                    packaging POM_PACKAGING
-                    description POM_DESCRIPTION
-                    url POM_URL
-
-                    scm {
-                        url POM_SCM_URL
-                        connection POM_SCM_CONNECTION
-                        developerConnection POM_SCM_DEV_CONNECTION
-                    }
-
-                    licenses {
-                        license {
-                            name POM_LICENCE_NAME
-                            url POM_LICENCE_URL
-                            distribution POM_LICENCE_DIST
-                        }
-                    }
-
-                    developers {
-                        developer {
-                            id POM_DEVELOPER_ID
-                            name POM_DEVELOPER_NAME
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    signing {
-        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
-        sign configurations.archives
-    }
-
-    task androidJavadocs(type: Javadoc) {
-        source = android.sourceSets.main.java.sourceFiles
-    }
-
-    task androidJavadocsJar(type: Jar) {
-        classifier = 'javadoc'
-        //basename = artifact_id
-        from androidJavadocs.destinationDir
-    }
-
-    task androidSourcesJar(type: Jar) {
-        classifier = 'sources'
-        //basename = artifact_id
-        from android.sourceSets.main.java.sourceFiles
-    }
-
-    artifacts {
-        //archives packageReleaseJar
-        archives androidSourcesJar
-        archives androidJavadocsJar
-    }
-}
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index 507c9f4a..9daf2030 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,2 @@
-include ':library'
+include ':sugarorm'
 include ':example'
diff --git a/library/build.gradle b/sugarorm/build.gradle
similarity index 65%
rename from library/build.gradle
rename to sugarorm/build.gradle
index 907162ee..0caf3629 100644
--- a/library/build.gradle
+++ b/sugarorm/build.gradle
@@ -1,5 +1,4 @@
 apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 23
@@ -25,12 +24,6 @@ android {
 dependencies {
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
-}
-
-task libraryJar(type: Jar) {
-    dependsOn assembleRelease
-    from android.sourceSets.main.java.srcDirs,
-         ['build/intermediates/classes/release/'] // Add the release classes into the jar
-    baseName 'sugar'
+    compile 'net.zetetic:android-database-sqlcipher:3.3.1-2@aar'
 }
 
diff --git a/library/build.properties b/sugarorm/build.properties
similarity index 100%
rename from library/build.properties
rename to sugarorm/build.properties
diff --git a/library/build.xml b/sugarorm/build.xml
similarity index 100%
rename from library/build.xml
rename to sugarorm/build.xml
diff --git a/library/gradle.properties b/sugarorm/gradle.properties
similarity index 100%
rename from library/gradle.properties
rename to sugarorm/gradle.properties
diff --git a/library/src/main/AndroidManifest.xml b/sugarorm/src/main/AndroidManifest.xml
similarity index 100%
rename from library/src/main/AndroidManifest.xml
rename to sugarorm/src/main/AndroidManifest.xml
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/sugarorm/src/main/java/com/orm/SchemaGenerator.java
similarity index 98%
rename from library/src/main/java/com/orm/SchemaGenerator.java
rename to sugarorm/src/main/java/com/orm/SchemaGenerator.java
index c25407fc..d355c76c 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/sugarorm/src/main/java/com/orm/SchemaGenerator.java
@@ -1,8 +1,8 @@
 package com.orm;
 
-import android.database.Cursor;
-import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.SQLException;
+import net.sqlcipher.database.SQLiteDatabase;
 import android.util.Log;
 
 import com.orm.annotation.Column;
diff --git a/library/src/main/java/com/orm/SugarApp.java b/sugarorm/src/main/java/com/orm/SugarApp.java
similarity index 100%
rename from library/src/main/java/com/orm/SugarApp.java
rename to sugarorm/src/main/java/com/orm/SugarApp.java
diff --git a/library/src/main/java/com/orm/SugarContext.java b/sugarorm/src/main/java/com/orm/SugarContext.java
similarity index 99%
rename from library/src/main/java/com/orm/SugarContext.java
rename to sugarorm/src/main/java/com/orm/SugarContext.java
index 61609986..f0f3238b 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/sugarorm/src/main/java/com/orm/SugarContext.java
@@ -38,7 +38,6 @@ public static void init(Context context, SugarDbConfiguration configuration) {
         dbConfiguration = configuration;
     }
 
-
     public static void terminate() {
         if (instance == null) {
             return;
diff --git a/library/src/main/java/com/orm/SugarDataSource.java b/sugarorm/src/main/java/com/orm/SugarDataSource.java
similarity index 100%
rename from library/src/main/java/com/orm/SugarDataSource.java
rename to sugarorm/src/main/java/com/orm/SugarDataSource.java
diff --git a/library/src/main/java/com/orm/SugarDb.java b/sugarorm/src/main/java/com/orm/SugarDb.java
similarity index 67%
rename from library/src/main/java/com/orm/SugarDb.java
rename to sugarorm/src/main/java/com/orm/SugarDb.java
index bc71ba23..ebd91202 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/sugarorm/src/main/java/com/orm/SugarDb.java
@@ -1,13 +1,15 @@
 package com.orm;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteOpenHelper;
 import android.util.Log;
 
 import com.orm.dsl.BuildConfig;
 import com.orm.helper.ManifestHelper;
 import com.orm.util.SugarCursorFactory;
 
+import java.util.Locale;
+
 import static com.orm.util.ContextUtil.getContext;
 import static com.orm.helper.ManifestHelper.getDatabaseVersion;
 import static com.orm.helper.ManifestHelper.getDbName;
@@ -19,11 +21,17 @@
     private final SchemaGenerator schemaGenerator;
     private SQLiteDatabase sqLiteDatabase;
     private int openedConnections = 0;
+    private String encrypted = new String();
 
     //Prevent instantiation
     private SugarDb() {
         super(getContext(), getDbName(), new SugarCursorFactory(ManifestHelper.isDebugEnabled()), getDatabaseVersion());
         schemaGenerator = SchemaGenerator.getInstance();
+        SQLiteDatabase.loadLibs(getContext());
+        SugarDbConfiguration configuration = getDbConfiguration();
+        if(configuration!=null){
+            encrypted = configuration.getEncryptedPassword();
+        }
     }
 
     public static SugarDb getInstance() {
@@ -35,17 +43,26 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         schemaGenerator.createDatabase(sqLiteDatabase);
     }
 
-    @Override
-    public void onConfigure(SQLiteDatabase db) {
+    private void configure() {
         final SugarDbConfiguration configuration = getDbConfiguration();
 
         if (null != configuration) {
-            db.setLocale(configuration.getDatabaseLocale());
-            db.setMaximumSize(configuration.getMaxSize());
-            db.setPageSize(configuration.getPageSize());
-        }
+            Locale dbLocale = configuration.getDatabaseLocale();
+            Long maxSize = configuration.getMaxSize();
+            Long pageSize = configuration.getPageSize();
+            if(dbLocale!=null) {
+                sqLiteDatabase.setLocale(dbLocale);
+            }
 
-        super.onConfigure(db);
+            if(maxSize!=-1){
+                sqLiteDatabase.setMaximumSize(maxSize);
+            }
+
+
+            if(pageSize!=-1) {
+                sqLiteDatabase.setPageSize(pageSize);
+            }
+        }
     }
 
     @Override
@@ -55,19 +72,19 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
 
     public synchronized SQLiteDatabase getDB() {
         if (this.sqLiteDatabase == null) {
-            this.sqLiteDatabase = getWritableDatabase();
+            this.sqLiteDatabase = getWritableDatabase(encrypted);
+            configure();
         }
 
         return this.sqLiteDatabase;
     }
 
-    @Override
     public synchronized SQLiteDatabase getReadableDatabase() {
         if(ManifestHelper.isDebugEnabled()) {
             Log.d(LOG_TAG, "getReadableDatabase");
         }
         openedConnections++;
-        return super.getReadableDatabase();
+        return super.getReadableDatabase(encrypted);
     }
 
     @Override
diff --git a/library/src/main/java/com/orm/SugarDbConfiguration.java b/sugarorm/src/main/java/com/orm/SugarDbConfiguration.java
similarity index 77%
rename from library/src/main/java/com/orm/SugarDbConfiguration.java
rename to sugarorm/src/main/java/com/orm/SugarDbConfiguration.java
index 161fce26..1a9ab98a 100644
--- a/library/src/main/java/com/orm/SugarDbConfiguration.java
+++ b/sugarorm/src/main/java/com/orm/SugarDbConfiguration.java
@@ -15,12 +15,14 @@
     /**
      * Tells SQLite how much it can grow
      */
-    private Long maxSize;
+    private Long maxSize=-1l;
 
     /**
      * Tells SQLite the page size that have
      */
-    private Long pageSize;
+    private Long pageSize=-1l;
+
+    private String encryptedPassword="";
 
     public SugarDbConfiguration() { }
 
@@ -51,6 +53,15 @@ public SugarDbConfiguration setPageSize(Long pageSize) {
         return this;
     }
 
+    public String getEncryptedPassword() {
+        return encryptedPassword;
+    }
+
+    public SugarDbConfiguration setEncryptedPassword(String encryptedPassword) {
+        this.encryptedPassword = encryptedPassword;
+        return this;
+    }
+
     @Override
     public String toString() {
         return "SugarDbConfiguration{" +
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/sugarorm/src/main/java/com/orm/SugarRecord.java
similarity index 74%
rename from library/src/main/java/com/orm/SugarRecord.java
rename to sugarorm/src/main/java/com/orm/SugarRecord.java
index 2ade2ba3..19cb5a8a 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/sugarorm/src/main/java/com/orm/SugarRecord.java
@@ -1,12 +1,14 @@
 package com.orm;
 
 import android.content.ContentValues;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteException;
+import net.sqlcipher.database.SQLiteStatement;
 import android.text.TextUtils;
 import android.util.Log;
+
+import com.orm.annotation.IgnoreUpdate;
 import com.orm.annotation.Table;
 import com.orm.annotation.Unique;
 import com.orm.helper.ManifestHelper;
@@ -165,7 +167,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return list.get(0);
     }
 
-    public static <T> Iterator<T> findAll(Class<T> type) {
+    public static <T> Iterator<T> findAllAsIterator(Class<T> type) {
         return findAsIterator(type, null, null, null, null, null);
     }
 
@@ -547,4 +549,169 @@ public void remove() {
 
     }
 
+    //New custom function added
+
+    public static long insertOrUpdate(Object object) {
+        SQLiteDatabase db = getSugarDataBase();
+        Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+        List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+        ContentValues values = new ContentValues(columns.size());
+
+        List<Field> ignoreReplaceColums = new ArrayList<>();
+        List<Field> uniqueColums = new ArrayList<>();
+
+        Field idField = null;
+        for (Field column : columns) {
+            column.setAccessible(true);
+            if(isSugarEntity(column.getType())){
+                try {
+                    Object columnValue = column.get(object);
+                    insertOrUpdate(columnValue);
+                } catch (IllegalAccessException e) {
+                    if (ManifestHelper.isDebugEnabled()) {
+                        Log.i(SUGAR, object.getClass().getSimpleName() + e.getMessage());
+                    }
+                }
+            }else if(column.getType().equals(List.class)){
+                try {
+                    Object columnValue = column.get(object);
+                    insertOrUpdate((Collection<? extends Object>) columnValue);
+                } catch (IllegalAccessException e) {
+                    if (ManifestHelper.isDebugEnabled()) {
+                        Log.i(SUGAR, object.getClass().getSimpleName() + e.getMessage());
+                    }
+                }
+            }
+
+            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+            if (column.getName().equals("id")) {
+                idField = column;
+            }
+
+            if(column.isAnnotationPresent(IgnoreUpdate.class)){
+                ignoreReplaceColums.add(column);
+            }
+
+            if(column.isAnnotationPresent(Unique.class)){
+                uniqueColums.add(column);
+            }
+        }
+
+        boolean isSugarEntity = isSugarEntity(object.getClass());
+        if (isSugarEntity && entitiesMap.containsKey(object)) {
+            values.put("id", entitiesMap.get(object));
+        }
+
+        if (!ignoreReplaceColums.isEmpty()) {
+            try {
+                Object valueId =  values.get("ID");
+                if (valueId == null) {
+                    valueId = values.get("id");
+                }
+
+                Object obj=null;
+                if(!uniqueColums.isEmpty()){
+                    StringBuilder whereClause = new StringBuilder();
+                    List<String> whereArgs = new ArrayList<>();
+                    Field column;
+                    for (int i=0;i<uniqueColums.size();i++) {
+                        try {
+                            column = uniqueColums.get(i);
+                            column.setAccessible(true);
+                            String columnName = NamingHelper.toColumnName(column);
+                            Object columnValue = column.get(object);
+                            if(i==0) {
+                                whereClause.append(columnName).append(" = ?");
+                            }else{
+                                whereClause.append(" AND ").append(columnName).append(" = ?");
+                            }
+                            whereArgs.add(String.valueOf(columnValue));
+                        } catch (IllegalAccessException e) {
+                            e.printStackTrace();
+                        }
+                    }
+                    String[] whereArgsArray = whereArgs.toArray(new String[whereArgs.size()]);
+                    List objList=find(object.getClass(),whereClause.toString(), whereArgsArray);
+                    if(!objList.isEmpty()){
+                        obj = objList.get(0);
+                    }
+                }else{
+                    obj = findById(object.getClass(), (Long)valueId);
+                }
+
+                if (obj != null) {
+                    ReflectionUtil.addFieldValue(values, idField, obj);
+                    for (Field column : ignoreReplaceColums) {
+                        ReflectionUtil.addFieldValue(values, column, obj);
+                    }
+                }
+            } catch (IllegalAccessException e) {
+                if (ManifestHelper.isDebugEnabled()) {
+                    Log.e("Sugar", e.getMessage());
+                }
+            }
+        }
+
+        long id = db.insertWithOnConflict(NamingHelper.toTableName(object.getClass()), null, values,
+                SQLiteDatabase.CONFLICT_REPLACE);
+
+        if (object.getClass().isAnnotationPresent(Table.class)) {
+            if (idField != null) {
+                idField.setAccessible(true);
+                try {
+                    idField.set(object, id);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            } else {
+                entitiesMap.put(object, id);
+            }
+        } else if (SugarRecord.class.isAssignableFrom(object.getClass())) {
+            ((SugarRecord) object).setId(id);
+        }
+
+        if (ManifestHelper.isDebugEnabled()) {
+            Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
+        }
+
+        return id;
+    }
+
+    public static <T> void insertOrUpdate(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
+        try {
+            sqLiteDatabase.beginTransaction();
+            for (T object: objects) {
+                insertOrUpdate(object);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            if (ManifestHelper.isDebugEnabled()) {
+                Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+            }
+        } finally {
+            sqLiteDatabase.endTransaction();
+        }
+    }
+
+    public static <T> List<T> findAll(Class<T> type) {
+        return find(type, null, null, null, null, null);
+    }
+
+    public static <T> List<T> findAll(Class<T> type, String orderBy) {
+        return find(type, null, null, null, orderBy, null);
+    }
+
+    public static void drop(String tableName){
+        try {
+            executeQuery("DROP TABLE " + tableName);
+        }catch(Exception e){
+            Log.i(SUGAR, "Cannot drop table: " + tableName + " - not exist");
+        }
+    }
+
+    public static <T> void drop(Class<T> type){
+        String tableName = new String();
+        drop(tableName);
+    }
 }
diff --git a/library/src/main/java/com/orm/annotation/Column.java b/sugarorm/src/main/java/com/orm/annotation/Column.java
similarity index 100%
rename from library/src/main/java/com/orm/annotation/Column.java
rename to sugarorm/src/main/java/com/orm/annotation/Column.java
diff --git a/library/src/main/java/com/orm/annotation/Ignore.java b/sugarorm/src/main/java/com/orm/annotation/Ignore.java
similarity index 100%
rename from library/src/main/java/com/orm/annotation/Ignore.java
rename to sugarorm/src/main/java/com/orm/annotation/Ignore.java
diff --git a/sugarorm/src/main/java/com/orm/annotation/IgnoreUpdate.java b/sugarorm/src/main/java/com/orm/annotation/IgnoreUpdate.java
new file mode 100755
index 00000000..59a94003
--- /dev/null
+++ b/sugarorm/src/main/java/com/orm/annotation/IgnoreUpdate.java
@@ -0,0 +1,11 @@
+package com.orm.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface IgnoreUpdate {
+}
diff --git a/library/src/main/java/com/orm/annotation/MultiUnique.java b/sugarorm/src/main/java/com/orm/annotation/MultiUnique.java
similarity index 100%
rename from library/src/main/java/com/orm/annotation/MultiUnique.java
rename to sugarorm/src/main/java/com/orm/annotation/MultiUnique.java
diff --git a/library/src/main/java/com/orm/annotation/NotNull.java b/sugarorm/src/main/java/com/orm/annotation/NotNull.java
similarity index 100%
rename from library/src/main/java/com/orm/annotation/NotNull.java
rename to sugarorm/src/main/java/com/orm/annotation/NotNull.java
diff --git a/library/src/main/java/com/orm/annotation/OneToMany.java b/sugarorm/src/main/java/com/orm/annotation/OneToMany.java
similarity index 100%
rename from library/src/main/java/com/orm/annotation/OneToMany.java
rename to sugarorm/src/main/java/com/orm/annotation/OneToMany.java
diff --git a/library/src/main/java/com/orm/annotation/Table.java b/sugarorm/src/main/java/com/orm/annotation/Table.java
similarity index 100%
rename from library/src/main/java/com/orm/annotation/Table.java
rename to sugarorm/src/main/java/com/orm/annotation/Table.java
diff --git a/library/src/main/java/com/orm/annotation/Unique.java b/sugarorm/src/main/java/com/orm/annotation/Unique.java
similarity index 100%
rename from library/src/main/java/com/orm/annotation/Unique.java
rename to sugarorm/src/main/java/com/orm/annotation/Unique.java
diff --git a/library/src/main/java/com/orm/helper/ManifestHelper.java b/sugarorm/src/main/java/com/orm/helper/ManifestHelper.java
similarity index 100%
rename from library/src/main/java/com/orm/helper/ManifestHelper.java
rename to sugarorm/src/main/java/com/orm/helper/ManifestHelper.java
diff --git a/library/src/main/java/com/orm/helper/MultiDexHelper.java b/sugarorm/src/main/java/com/orm/helper/MultiDexHelper.java
similarity index 100%
rename from library/src/main/java/com/orm/helper/MultiDexHelper.java
rename to sugarorm/src/main/java/com/orm/helper/MultiDexHelper.java
diff --git a/library/src/main/java/com/orm/helper/NamingHelper.java b/sugarorm/src/main/java/com/orm/helper/NamingHelper.java
similarity index 100%
rename from library/src/main/java/com/orm/helper/NamingHelper.java
rename to sugarorm/src/main/java/com/orm/helper/NamingHelper.java
diff --git a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java b/sugarorm/src/main/java/com/orm/helper/SugarTransactionHelper.java
similarity index 96%
rename from library/src/main/java/com/orm/helper/SugarTransactionHelper.java
rename to sugarorm/src/main/java/com/orm/helper/SugarTransactionHelper.java
index dbb9ca26..b28503fc 100644
--- a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
+++ b/sugarorm/src/main/java/com/orm/helper/SugarTransactionHelper.java
@@ -1,6 +1,6 @@
 package com.orm.helper;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import android.util.Log;
 
 import static com.orm.SugarContext.getSugarContext;
diff --git a/library/src/main/java/com/orm/inflater/EntityInflater.java b/sugarorm/src/main/java/com/orm/inflater/EntityInflater.java
similarity index 100%
rename from library/src/main/java/com/orm/inflater/EntityInflater.java
rename to sugarorm/src/main/java/com/orm/inflater/EntityInflater.java
diff --git a/library/src/main/java/com/orm/inflater/field/DefaultFieldInflater.java b/sugarorm/src/main/java/com/orm/inflater/field/DefaultFieldInflater.java
similarity index 100%
rename from library/src/main/java/com/orm/inflater/field/DefaultFieldInflater.java
rename to sugarorm/src/main/java/com/orm/inflater/field/DefaultFieldInflater.java
diff --git a/library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java b/sugarorm/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
similarity index 100%
rename from library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
rename to sugarorm/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
diff --git a/library/src/main/java/com/orm/inflater/field/FieldInflater.java b/sugarorm/src/main/java/com/orm/inflater/field/FieldInflater.java
similarity index 100%
rename from library/src/main/java/com/orm/inflater/field/FieldInflater.java
rename to sugarorm/src/main/java/com/orm/inflater/field/FieldInflater.java
diff --git a/library/src/main/java/com/orm/inflater/field/ListFieldInflater.java b/sugarorm/src/main/java/com/orm/inflater/field/ListFieldInflater.java
similarity index 68%
rename from library/src/main/java/com/orm/inflater/field/ListFieldInflater.java
rename to sugarorm/src/main/java/com/orm/inflater/field/ListFieldInflater.java
index 5fa7496c..304f6558 100644
--- a/library/src/main/java/com/orm/inflater/field/ListFieldInflater.java
+++ b/sugarorm/src/main/java/com/orm/inflater/field/ListFieldInflater.java
@@ -4,9 +4,11 @@
 import android.util.Log;
 import com.orm.SugarRecord;
 import com.orm.annotation.OneToMany;
+import com.orm.helper.NamingHelper;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.ParameterizedType;
+import java.util.List;
 
 /**
  * Created by Łukasz Wesołowski on 03.08.2016.
@@ -32,7 +34,17 @@ public void inflate() {
                 Log.e(LOG_TAG, String.format("Error while inflating list field %s", field), e);
             }
         } else {
-            Log.w(LOG_TAG, String.format("List field %s has not OneToMany annotation", field));
+            try{
+            String ids = cursor.getString(cursor.getColumnIndex(NamingHelper.toColumnName(field)));
+
+            ParameterizedType genericListType = (ParameterizedType) field.getGenericType();
+            Class<?> tableType = (Class<?>) genericListType.getActualTypeArguments()[0];
+
+            List data = SugarRecord.find(tableType,"ID IN("+ids+")");
+            field.set(object, data);
+            } catch (IllegalAccessException e) {
+                Log.e(LOG_TAG, String.format("Error while inflating list field %s", field), e);
+            }
         }
     }
 }
diff --git a/library/src/main/java/com/orm/inflater/field/RelationEntityFieldInflater.java b/sugarorm/src/main/java/com/orm/inflater/field/RelationEntityFieldInflater.java
similarity index 100%
rename from library/src/main/java/com/orm/inflater/field/RelationEntityFieldInflater.java
rename to sugarorm/src/main/java/com/orm/inflater/field/RelationEntityFieldInflater.java
diff --git a/library/src/main/java/com/orm/query/Condition.java b/sugarorm/src/main/java/com/orm/query/Condition.java
similarity index 100%
rename from library/src/main/java/com/orm/query/Condition.java
rename to sugarorm/src/main/java/com/orm/query/Condition.java
diff --git a/library/src/main/java/com/orm/query/Select.java b/sugarorm/src/main/java/com/orm/query/Select.java
similarity index 100%
rename from library/src/main/java/com/orm/query/Select.java
rename to sugarorm/src/main/java/com/orm/query/Select.java
diff --git a/library/src/main/java/com/orm/util/ContextUtil.java b/sugarorm/src/main/java/com/orm/util/ContextUtil.java
similarity index 100%
rename from library/src/main/java/com/orm/util/ContextUtil.java
rename to sugarorm/src/main/java/com/orm/util/ContextUtil.java
diff --git a/library/src/main/java/com/orm/util/KeyWordUtil.java b/sugarorm/src/main/java/com/orm/util/KeyWordUtil.java
similarity index 100%
rename from library/src/main/java/com/orm/util/KeyWordUtil.java
rename to sugarorm/src/main/java/com/orm/util/KeyWordUtil.java
diff --git a/library/src/main/java/com/orm/util/MigrationFileParser.java b/sugarorm/src/main/java/com/orm/util/MigrationFileParser.java
similarity index 100%
rename from library/src/main/java/com/orm/util/MigrationFileParser.java
rename to sugarorm/src/main/java/com/orm/util/MigrationFileParser.java
diff --git a/library/src/main/java/com/orm/util/NumberComparator.java b/sugarorm/src/main/java/com/orm/util/NumberComparator.java
similarity index 100%
rename from library/src/main/java/com/orm/util/NumberComparator.java
rename to sugarorm/src/main/java/com/orm/util/NumberComparator.java
diff --git a/library/src/main/java/com/orm/util/QueryBuilder.java b/sugarorm/src/main/java/com/orm/util/QueryBuilder.java
similarity index 84%
rename from library/src/main/java/com/orm/util/QueryBuilder.java
rename to sugarorm/src/main/java/com/orm/util/QueryBuilder.java
index e1c3557f..fa016986 100644
--- a/library/src/main/java/com/orm/util/QueryBuilder.java
+++ b/sugarorm/src/main/java/com/orm/util/QueryBuilder.java
@@ -1,10 +1,12 @@
 package com.orm.util;
 
 import com.orm.SugarRecord;
+import com.orm.annotation.Table;
 
 import java.lang.RuntimeException;
 import java.lang.StringBuilder;
 import java.math.BigDecimal;
+import java.util.List;
 
 public class QueryBuilder {
 
@@ -15,8 +17,8 @@ public static String getColumnType(Class<?> type) {
                 (type.equals(Integer.TYPE)) ||
                 (type.equals(Long.class)) ||
                 (type.equals(Long.TYPE)) || (
-                (!type.isPrimitive()) &&
-                        (SugarRecord.class.isAssignableFrom(type))))  {
+                (!type.isPrimitive()) && (SugarRecord.class.isAssignableFrom(type))) || (
+                (!type.isPrimitive()) && (type.isAnnotationPresent(Table.class))))  {
             return "INTEGER";
         }
 
@@ -40,6 +42,10 @@ public static String getColumnType(Class<?> type) {
             return "TEXT";
         }
 
+        if (type.equals(List.class)){
+            return "TEXT";
+        }
+
         return "";
     }
 
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/sugarorm/src/main/java/com/orm/util/ReflectionUtil.java
similarity index 80%
rename from library/src/main/java/com/orm/util/ReflectionUtil.java
rename to sugarorm/src/main/java/com/orm/util/ReflectionUtil.java
index 18943d09..3a61ddac 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/sugarorm/src/main/java/com/orm/util/ReflectionUtil.java
@@ -3,6 +3,7 @@
 import android.content.ContentValues;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.orm.SugarRecord;
@@ -17,6 +18,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.lang.reflect.ParameterizedType;
 import java.math.BigDecimal;
 import java.net.URL;
 import java.sql.Timestamp;
@@ -65,6 +67,67 @@ private ReflectionUtil() { }
         return fields;
     }
 
+    //New custom function
+    public static void addFieldValue(ContentValues values, Field column, Object object) throws IllegalAccessException {
+        Class<?> columnType = column.getType();
+        String columnName = NamingHelper.toColumnName(column);
+        Object columnValue = column.get(object);
+
+        if (columnType.equals(Short.class) || columnType.equals(short.class)) {
+            values.put(columnName, (Short) columnValue);
+        } else if (columnType.equals(Integer.class) || columnType.equals(int.class)) {
+            values.put(columnName, (Integer) columnValue);
+        } else if (columnType.equals(Long.class) || columnType.equals(long.class)) {
+            values.put(columnName, (Long) columnValue);
+        } else if (columnType.equals(Float.class) || columnType.equals(float.class)) {
+            values.put(columnName, (Float) columnValue);
+        } else if (columnType.equals(Double.class) || columnType.equals(double.class)) {
+            values.put(columnName, (Double) columnValue);
+        } else if (columnType.equals(Boolean.class) || columnType.equals(boolean.class)) {
+            values.put(columnName, (Boolean) columnValue);
+        } else if (columnType.equals(BigDecimal.class)) {
+            try {
+                values.put(columnName, column.get(object).toString());
+            } catch (NullPointerException e) {
+                values.putNull(columnName);
+            }
+        } else if (Timestamp.class.equals(columnType)) {
+            try {
+                values.put(columnName, ((Timestamp) column.get(object)).getTime());
+            } catch (NullPointerException e) {
+                values.put(columnName, (Long) null);
+            }
+        } else if (Date.class.equals(columnType)) {
+            try {
+                values.put(columnName, ((Date) column.get(object)).getTime());
+            } catch (NullPointerException e) {
+                values.put(columnName, (Long) null);
+            }
+        } else if (Calendar.class.equals(columnType)) {
+            try {
+                values.put(columnName, ((Calendar) column.get(object)).getTimeInMillis());
+            } catch (NullPointerException e) {
+                values.put(columnName, (Long) null);
+            }
+        } else if (columnType.equals(byte[].class)) {
+            if (columnValue == null) {
+                values.put(columnName, "".getBytes());
+            } else {
+                values.put(columnName, (byte[]) columnValue);
+            }
+        } else if (columnType.equals(List.class)) {
+            //ignore
+        } else {
+            if (columnValue == null) {
+                values.putNull(columnName);
+            } else if (columnType.isEnum()) {
+                values.put(columnName, ((Enum) columnValue).name());
+            } else {
+                values.put(columnName, String.valueOf(columnValue));
+            }
+        }
+    }
+
     public static void addFieldValueToColumn(ContentValues values, Field column, Object object,
                                              Map<Object, Long> entitiesMap) {
         column.setAccessible(true);
@@ -137,7 +200,26 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
                         values.put(columnName, (byte[]) columnValue);
                     }
                 } else if (columnType.equals(List.class)) {
-                    //ignore
+                    List<Long> ids = new ArrayList<>();
+
+                    ParameterizedType genericListType = (ParameterizedType) column.getGenericType();
+                    Class<?> tableType = (Class<?>) genericListType.getActualTypeArguments()[0];
+
+                    for(Object item : (List)columnValue){
+                        Field field;
+                        try {
+                            field = tableType.getDeclaredField("id");
+                            field.setAccessible(true);
+                            if(item != null) {
+                                ids.add((Long)field.get(item));
+                            }
+                        } catch (NoSuchFieldException e) {
+                            Log.d("TEST",e.getMessage());
+                        }
+                    }
+
+                    values.put(columnName,TextUtils.join(",",ids));
+                    Log.d("TEST",values.toString());
                 } else {
                     if (columnValue == null) {
                         values.putNull(columnName);
diff --git a/library/src/main/java/com/orm/util/SugarConfig.java b/sugarorm/src/main/java/com/orm/util/SugarConfig.java
similarity index 100%
rename from library/src/main/java/com/orm/util/SugarConfig.java
rename to sugarorm/src/main/java/com/orm/util/SugarConfig.java
diff --git a/library/src/main/java/com/orm/util/SugarCursor.java b/sugarorm/src/main/java/com/orm/util/SugarCursor.java
similarity index 91%
rename from library/src/main/java/com/orm/util/SugarCursor.java
rename to sugarorm/src/main/java/com/orm/util/SugarCursor.java
index d058c5c1..1d05fcc7 100644
--- a/library/src/main/java/com/orm/util/SugarCursor.java
+++ b/sugarorm/src/main/java/com/orm/util/SugarCursor.java
@@ -1,7 +1,7 @@
 package com.orm.util;
 
-import android.database.Cursor;
-import android.database.CursorWrapper;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.CursorWrapper;
 
 public class SugarCursor extends CursorWrapper {
 
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/sugarorm/src/main/java/com/orm/util/SugarCursorFactory.java
similarity index 77%
rename from library/src/main/java/com/orm/util/SugarCursorFactory.java
rename to sugarorm/src/main/java/com/orm/util/SugarCursorFactory.java
index 3274fccc..0c07e807 100644
--- a/library/src/main/java/com/orm/util/SugarCursorFactory.java
+++ b/sugarorm/src/main/java/com/orm/util/SugarCursorFactory.java
@@ -1,10 +1,10 @@
 package com.orm.util;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteCursor;
-import android.database.sqlite.SQLiteCursorDriver;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQuery;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteCursor;
+import net.sqlcipher.database.SQLiteCursorDriver;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteQuery;
 import android.util.Log;
 
 public class SugarCursorFactory implements SQLiteDatabase.CursorFactory {
diff --git a/library/src/main/java/com/orm/util/ThreadUtil.java b/sugarorm/src/main/java/com/orm/util/ThreadUtil.java
similarity index 100%
rename from library/src/main/java/com/orm/util/ThreadUtil.java
rename to sugarorm/src/main/java/com/orm/util/ThreadUtil.java
diff --git a/library/src/test/java/com/orm/SchemaGeneratorTest.java b/sugarorm/src/test/java/com/orm/SchemaGeneratorTest.java
similarity index 98%
rename from library/src/test/java/com/orm/SchemaGeneratorTest.java
rename to sugarorm/src/test/java/com/orm/SchemaGeneratorTest.java
index 811d1aa1..485fcd26 100644
--- a/library/src/test/java/com/orm/SchemaGeneratorTest.java
+++ b/sugarorm/src/test/java/com/orm/SchemaGeneratorTest.java
@@ -1,7 +1,7 @@
 package com.orm;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteDatabase;
 
 import com.orm.app.ClientApp;
 import com.orm.dsl.BuildConfig;
diff --git a/library/src/test/java/com/orm/SugarAppTest.java b/sugarorm/src/test/java/com/orm/SugarAppTest.java
similarity index 100%
rename from library/src/test/java/com/orm/SugarAppTest.java
rename to sugarorm/src/test/java/com/orm/SugarAppTest.java
diff --git a/library/src/test/java/com/orm/SugarDataSourceTest.java b/sugarorm/src/test/java/com/orm/SugarDataSourceTest.java
similarity index 100%
rename from library/src/test/java/com/orm/SugarDataSourceTest.java
rename to sugarorm/src/test/java/com/orm/SugarDataSourceTest.java
diff --git a/library/src/test/java/com/orm/SugarDbConfigurationTest.java b/sugarorm/src/test/java/com/orm/SugarDbConfigurationTest.java
similarity index 100%
rename from library/src/test/java/com/orm/SugarDbConfigurationTest.java
rename to sugarorm/src/test/java/com/orm/SugarDbConfigurationTest.java
diff --git a/library/src/test/java/com/orm/SugarDbTest.java b/sugarorm/src/test/java/com/orm/SugarDbTest.java
similarity index 84%
rename from library/src/test/java/com/orm/SugarDbTest.java
rename to sugarorm/src/test/java/com/orm/SugarDbTest.java
index 7ff5914a..4ed999b2 100644
--- a/library/src/test/java/com/orm/SugarDbTest.java
+++ b/sugarorm/src/test/java/com/orm/SugarDbTest.java
@@ -1,6 +1,6 @@
 package com.orm;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 
 import com.orm.app.ClientApp;
 import com.orm.dsl.BuildConfig;
@@ -23,13 +23,13 @@
     @Test
     //TODO check this better!
     public void testGetReadableDatabase() {
-        final SQLiteDatabase db = sugarDb.getReadableDatabase();
+        final SQLiteDatabase db = sugarDb.getReadableDatabase("");
         assertEquals(false, db.isReadOnly());
     }
 
     @Test
     public void testGetWritableDatabase() {
-        final SQLiteDatabase db = sugarDb.getWritableDatabase();
+        final SQLiteDatabase db = sugarDb.getWritableDatabase("");
         assertEquals(false, db.isReadOnly());
     }
 
diff --git a/library/src/test/java/com/orm/app/ClientApp.java b/sugarorm/src/test/java/com/orm/app/ClientApp.java
similarity index 100%
rename from library/src/test/java/com/orm/app/ClientApp.java
rename to sugarorm/src/test/java/com/orm/app/ClientApp.java
diff --git a/library/src/test/java/com/orm/helper/ManifestHelperTest.java b/sugarorm/src/test/java/com/orm/helper/ManifestHelperTest.java
similarity index 100%
rename from library/src/test/java/com/orm/helper/ManifestHelperTest.java
rename to sugarorm/src/test/java/com/orm/helper/ManifestHelperTest.java
diff --git a/library/src/test/java/com/orm/helper/NamingHelperTest.java b/sugarorm/src/test/java/com/orm/helper/NamingHelperTest.java
similarity index 100%
rename from library/src/test/java/com/orm/helper/NamingHelperTest.java
rename to sugarorm/src/test/java/com/orm/helper/NamingHelperTest.java
diff --git a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java b/sugarorm/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
similarity index 100%
rename from library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
rename to sugarorm/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
diff --git a/library/src/test/java/com/orm/model/AllAnotatedModel.java b/sugarorm/src/test/java/com/orm/model/AllAnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/AllAnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/AllAnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/BooleanFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/BooleanFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/ByteArrayExtendedModel.java b/sugarorm/src/test/java/com/orm/model/ByteArrayExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/ByteArrayExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/ByteArrayExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/DoubleFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/DoubleFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/EmptyModel.java b/sugarorm/src/test/java/com/orm/model/EmptyModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/EmptyModel.java
rename to sugarorm/src/test/java/com/orm/model/EmptyModel.java
diff --git a/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/EnumFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/EnumFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/FloatFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/FloatFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/FloatFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/FloatFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/IncompleteAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/IncompleteAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/IntUniqueModel.java b/sugarorm/src/test/java/com/orm/model/IntUniqueModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/IntUniqueModel.java
rename to sugarorm/src/test/java/com/orm/model/IntUniqueModel.java
diff --git a/library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/IntegerFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/IntegerFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/LongFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/LongFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/LongFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/LongFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/LongFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/LongFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/MultiColumnUniqueModel.java b/sugarorm/src/test/java/com/orm/model/MultiColumnUniqueModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/MultiColumnUniqueModel.java
rename to sugarorm/src/test/java/com/orm/model/MultiColumnUniqueModel.java
diff --git a/library/src/test/java/com/orm/model/NestedAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/NestedAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/NestedAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/NestedAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/NestedExtendedModel.java b/sugarorm/src/test/java/com/orm/model/NestedExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/NestedExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/NestedExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/NestedMixedAAModel.java b/sugarorm/src/test/java/com/orm/model/NestedMixedAAModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/NestedMixedAAModel.java
rename to sugarorm/src/test/java/com/orm/model/NestedMixedAAModel.java
diff --git a/library/src/test/java/com/orm/model/NestedMixedABModel.java b/sugarorm/src/test/java/com/orm/model/NestedMixedABModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/NestedMixedABModel.java
rename to sugarorm/src/test/java/com/orm/model/NestedMixedABModel.java
diff --git a/library/src/test/java/com/orm/model/NestedMixedBAModel.java b/sugarorm/src/test/java/com/orm/model/NestedMixedBAModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/NestedMixedBAModel.java
rename to sugarorm/src/test/java/com/orm/model/NestedMixedBAModel.java
diff --git a/library/src/test/java/com/orm/model/NestedMixedBBModel.java b/sugarorm/src/test/java/com/orm/model/NestedMixedBBModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/NestedMixedBBModel.java
rename to sugarorm/src/test/java/com/orm/model/NestedMixedBBModel.java
diff --git a/library/src/test/java/com/orm/model/NoSugarModel.java b/sugarorm/src/test/java/com/orm/model/NoSugarModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/NoSugarModel.java
rename to sugarorm/src/test/java/com/orm/model/NoSugarModel.java
diff --git a/library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/RelationshipAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/RelationshipAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/RelationshipExtendedModel.java b/sugarorm/src/test/java/com/orm/model/RelationshipExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/RelationshipExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/RelationshipExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/RelationshipMixedAModel.java b/sugarorm/src/test/java/com/orm/model/RelationshipMixedAModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/RelationshipMixedAModel.java
rename to sugarorm/src/test/java/com/orm/model/RelationshipMixedAModel.java
diff --git a/library/src/test/java/com/orm/model/RelationshipMixedBModel.java b/sugarorm/src/test/java/com/orm/model/RelationshipMixedBModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/RelationshipMixedBModel.java
rename to sugarorm/src/test/java/com/orm/model/RelationshipMixedBModel.java
diff --git a/library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/ShortFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/ShortFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/ShortFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/ShortFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/SimpleAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/SimpleAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/SimpleAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/SimpleAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/SimpleExtendedModel.java b/sugarorm/src/test/java/com/orm/model/SimpleExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/SimpleExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/SimpleExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/SimpleModel.java b/sugarorm/src/test/java/com/orm/model/SimpleModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/SimpleModel.java
rename to sugarorm/src/test/java/com/orm/model/SimpleModel.java
diff --git a/library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java b/sugarorm/src/test/java/com/orm/model/StringFieldAnnotatedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java
rename to sugarorm/src/test/java/com/orm/model/StringFieldAnnotatedModel.java
diff --git a/library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java b/sugarorm/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java
rename to sugarorm/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java
diff --git a/library/src/test/java/com/orm/model/StringFieldExtendedModel.java b/sugarorm/src/test/java/com/orm/model/StringFieldExtendedModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/StringFieldExtendedModel.java
rename to sugarorm/src/test/java/com/orm/model/StringFieldExtendedModel.java
diff --git a/library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java b/sugarorm/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java
similarity index 100%
rename from library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java
rename to sugarorm/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java
diff --git a/library/src/test/java/com/orm/model/TestRecord.java b/sugarorm/src/test/java/com/orm/model/TestRecord.java
similarity index 100%
rename from library/src/test/java/com/orm/model/TestRecord.java
rename to sugarorm/src/test/java/com/orm/model/TestRecord.java
diff --git a/library/src/test/java/com/orm/model/foreignnull/OriginRecord.java b/sugarorm/src/test/java/com/orm/model/foreignnull/OriginRecord.java
similarity index 100%
rename from library/src/test/java/com/orm/model/foreignnull/OriginRecord.java
rename to sugarorm/src/test/java/com/orm/model/foreignnull/OriginRecord.java
diff --git a/library/src/test/java/com/orm/model/onetomany/OneToManyModel.java b/sugarorm/src/test/java/com/orm/model/onetomany/OneToManyModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/onetomany/OneToManyModel.java
rename to sugarorm/src/test/java/com/orm/model/onetomany/OneToManyModel.java
diff --git a/library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java b/sugarorm/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java
rename to sugarorm/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java
diff --git a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java b/sugarorm/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java
rename to sugarorm/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java
diff --git a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java b/sugarorm/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java
similarity index 100%
rename from library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java
rename to sugarorm/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java
diff --git a/library/src/test/java/com/orm/query/QueryBuilderTests.java b/sugarorm/src/test/java/com/orm/query/QueryBuilderTests.java
similarity index 100%
rename from library/src/test/java/com/orm/query/QueryBuilderTests.java
rename to sugarorm/src/test/java/com/orm/query/QueryBuilderTests.java
diff --git a/library/src/test/java/com/orm/query/SelectTest.java b/sugarorm/src/test/java/com/orm/query/SelectTest.java
similarity index 100%
rename from library/src/test/java/com/orm/query/SelectTest.java
rename to sugarorm/src/test/java/com/orm/query/SelectTest.java
diff --git a/library/src/test/java/com/orm/record/BigDecimalFieldTests.java b/sugarorm/src/test/java/com/orm/record/BigDecimalFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/BigDecimalFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/BigDecimalFieldTests.java
diff --git a/library/src/test/java/com/orm/record/BooleanFieldTests.java b/sugarorm/src/test/java/com/orm/record/BooleanFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/BooleanFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/BooleanFieldTests.java
diff --git a/library/src/test/java/com/orm/record/ByteArrayFieldTests.java b/sugarorm/src/test/java/com/orm/record/ByteArrayFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/ByteArrayFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/ByteArrayFieldTests.java
diff --git a/library/src/test/java/com/orm/record/CursorTests.java b/sugarorm/src/test/java/com/orm/record/CursorTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/CursorTests.java
rename to sugarorm/src/test/java/com/orm/record/CursorTests.java
diff --git a/library/src/test/java/com/orm/record/DoubleFieldTests.java b/sugarorm/src/test/java/com/orm/record/DoubleFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/DoubleFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/DoubleFieldTests.java
diff --git a/library/src/test/java/com/orm/record/EnumFieldTests.java b/sugarorm/src/test/java/com/orm/record/EnumFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/EnumFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/EnumFieldTests.java
diff --git a/library/src/test/java/com/orm/record/FirstAndLastTests.java b/sugarorm/src/test/java/com/orm/record/FirstAndLastTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/FirstAndLastTests.java
rename to sugarorm/src/test/java/com/orm/record/FirstAndLastTests.java
diff --git a/library/src/test/java/com/orm/record/FloatFieldTests.java b/sugarorm/src/test/java/com/orm/record/FloatFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/FloatFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/FloatFieldTests.java
diff --git a/library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java b/sugarorm/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java
rename to sugarorm/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java
diff --git a/library/src/test/java/com/orm/record/IntegerFieldTests.java b/sugarorm/src/test/java/com/orm/record/IntegerFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/IntegerFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/IntegerFieldTests.java
diff --git a/library/src/test/java/com/orm/record/ListAllOrderByTests.java b/sugarorm/src/test/java/com/orm/record/ListAllOrderByTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/ListAllOrderByTests.java
rename to sugarorm/src/test/java/com/orm/record/ListAllOrderByTests.java
diff --git a/library/src/test/java/com/orm/record/LongFieldTests.java b/sugarorm/src/test/java/com/orm/record/LongFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/LongFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/LongFieldTests.java
diff --git a/library/src/test/java/com/orm/record/MultipleSaveTests.java b/sugarorm/src/test/java/com/orm/record/MultipleSaveTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/MultipleSaveTests.java
rename to sugarorm/src/test/java/com/orm/record/MultipleSaveTests.java
diff --git a/library/src/test/java/com/orm/record/NestedAnnotatedTests.java b/sugarorm/src/test/java/com/orm/record/NestedAnnotatedTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/NestedAnnotatedTests.java
rename to sugarorm/src/test/java/com/orm/record/NestedAnnotatedTests.java
diff --git a/library/src/test/java/com/orm/record/NestedExtendedTests.java b/sugarorm/src/test/java/com/orm/record/NestedExtendedTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/NestedExtendedTests.java
rename to sugarorm/src/test/java/com/orm/record/NestedExtendedTests.java
diff --git a/library/src/test/java/com/orm/record/NestedMixedAATests.java b/sugarorm/src/test/java/com/orm/record/NestedMixedAATests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/NestedMixedAATests.java
rename to sugarorm/src/test/java/com/orm/record/NestedMixedAATests.java
diff --git a/library/src/test/java/com/orm/record/NestedMixedABTests.java b/sugarorm/src/test/java/com/orm/record/NestedMixedABTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/NestedMixedABTests.java
rename to sugarorm/src/test/java/com/orm/record/NestedMixedABTests.java
diff --git a/library/src/test/java/com/orm/record/NestedMixedBATests.java b/sugarorm/src/test/java/com/orm/record/NestedMixedBATests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/NestedMixedBATests.java
rename to sugarorm/src/test/java/com/orm/record/NestedMixedBATests.java
diff --git a/library/src/test/java/com/orm/record/NestedMixedBBTests.java b/sugarorm/src/test/java/com/orm/record/NestedMixedBBTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/NestedMixedBBTests.java
rename to sugarorm/src/test/java/com/orm/record/NestedMixedBBTests.java
diff --git a/library/src/test/java/com/orm/record/NoSugarModelTests.java b/sugarorm/src/test/java/com/orm/record/NoSugarModelTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/NoSugarModelTests.java
rename to sugarorm/src/test/java/com/orm/record/NoSugarModelTests.java
diff --git a/library/src/test/java/com/orm/record/OneToManyTest.java b/sugarorm/src/test/java/com/orm/record/OneToManyTest.java
similarity index 100%
rename from library/src/test/java/com/orm/record/OneToManyTest.java
rename to sugarorm/src/test/java/com/orm/record/OneToManyTest.java
diff --git a/library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java b/sugarorm/src/test/java/com/orm/record/RelationshipAnnotatedTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java
rename to sugarorm/src/test/java/com/orm/record/RelationshipAnnotatedTests.java
diff --git a/library/src/test/java/com/orm/record/RelationshipExtendedTests.java b/sugarorm/src/test/java/com/orm/record/RelationshipExtendedTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/RelationshipExtendedTests.java
rename to sugarorm/src/test/java/com/orm/record/RelationshipExtendedTests.java
diff --git a/library/src/test/java/com/orm/record/RelationshipMixedATests.java b/sugarorm/src/test/java/com/orm/record/RelationshipMixedATests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/RelationshipMixedATests.java
rename to sugarorm/src/test/java/com/orm/record/RelationshipMixedATests.java
diff --git a/library/src/test/java/com/orm/record/RelationshipMixedBTests.java b/sugarorm/src/test/java/com/orm/record/RelationshipMixedBTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/RelationshipMixedBTests.java
rename to sugarorm/src/test/java/com/orm/record/RelationshipMixedBTests.java
diff --git a/library/src/test/java/com/orm/record/ShortFieldTests.java b/sugarorm/src/test/java/com/orm/record/ShortFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/ShortFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/ShortFieldTests.java
diff --git a/library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java b/sugarorm/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java
rename to sugarorm/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java
diff --git a/library/src/test/java/com/orm/record/SimpleExtendedModelTests.java b/sugarorm/src/test/java/com/orm/record/SimpleExtendedModelTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/SimpleExtendedModelTests.java
rename to sugarorm/src/test/java/com/orm/record/SimpleExtendedModelTests.java
diff --git a/library/src/test/java/com/orm/record/StringFieldTests.java b/sugarorm/src/test/java/com/orm/record/StringFieldTests.java
similarity index 100%
rename from library/src/test/java/com/orm/record/StringFieldTests.java
rename to sugarorm/src/test/java/com/orm/record/StringFieldTests.java
diff --git a/library/src/test/java/com/orm/record/UpdateInTxTest.java b/sugarorm/src/test/java/com/orm/record/UpdateInTxTest.java
similarity index 100%
rename from library/src/test/java/com/orm/record/UpdateInTxTest.java
rename to sugarorm/src/test/java/com/orm/record/UpdateInTxTest.java
diff --git a/library/src/test/java/com/orm/util/ContextUtilTest.java b/sugarorm/src/test/java/com/orm/util/ContextUtilTest.java
similarity index 100%
rename from library/src/test/java/com/orm/util/ContextUtilTest.java
rename to sugarorm/src/test/java/com/orm/util/ContextUtilTest.java
diff --git a/library/src/test/java/com/orm/util/KeyWordUtilTest.java b/sugarorm/src/test/java/com/orm/util/KeyWordUtilTest.java
similarity index 100%
rename from library/src/test/java/com/orm/util/KeyWordUtilTest.java
rename to sugarorm/src/test/java/com/orm/util/KeyWordUtilTest.java
diff --git a/library/src/test/java/com/orm/util/MigrationFileParserTest.java b/sugarorm/src/test/java/com/orm/util/MigrationFileParserTest.java
similarity index 100%
rename from library/src/test/java/com/orm/util/MigrationFileParserTest.java
rename to sugarorm/src/test/java/com/orm/util/MigrationFileParserTest.java
diff --git a/library/src/test/java/com/orm/util/NumberComparatorTest.java b/sugarorm/src/test/java/com/orm/util/NumberComparatorTest.java
similarity index 100%
rename from library/src/test/java/com/orm/util/NumberComparatorTest.java
rename to sugarorm/src/test/java/com/orm/util/NumberComparatorTest.java
diff --git a/library/src/test/java/com/orm/util/ReflectionUtilTest.java b/sugarorm/src/test/java/com/orm/util/ReflectionUtilTest.java
similarity index 100%
rename from library/src/test/java/com/orm/util/ReflectionUtilTest.java
rename to sugarorm/src/test/java/com/orm/util/ReflectionUtilTest.java
diff --git a/library/src/test/java/com/orm/util/SugarConfigTest.java b/sugarorm/src/test/java/com/orm/util/SugarConfigTest.java
similarity index 100%
rename from library/src/test/java/com/orm/util/SugarConfigTest.java
rename to sugarorm/src/test/java/com/orm/util/SugarConfigTest.java
