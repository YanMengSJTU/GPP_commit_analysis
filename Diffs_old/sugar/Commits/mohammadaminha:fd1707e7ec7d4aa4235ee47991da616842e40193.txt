diff --git a/build.gradle b/build.gradle
index 030e1cb3..c993efcb 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,9 +5,13 @@ apply plugin: 'java'
 buildscript {
     repositories {
         mavenCentral()
+        maven {
+            url 'https://maven.google.com/'
+            name 'Google'
+        }
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0'
+        classpath 'com.android.tools.build:gradle:3.1.4'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
@@ -28,6 +32,10 @@ allprojects {
         mavenLocal()
         mavenCentral()
         jcenter()
+        maven {
+            url 'https://maven.google.com/'
+            name 'Google'
+        }
     }
 }
 
diff --git a/example/build.gradle b/example/build.gradle
index a8b90f05..d5b09ae7 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -1,13 +1,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion 27
+    buildToolsVersion "27.0.3"
 
     defaultConfig {
         applicationId "com.example"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 27
     }
     buildTypes {
         release {
@@ -20,6 +20,6 @@ android {
 }
 
 dependencies {
-    compile project (':library')
-    compile 'com.android.support:appcompat-v7:23.3.0'
+    implementation project (':sugar')
+    implementation 'com.android.support:appcompat-v7:27.1.1'
 }
diff --git a/example/src/main/AndroidManifest.xml b/example/src/main/AndroidManifest.xml
index eb802533..e77c049f 100644
--- a/example/src/main/AndroidManifest.xml
+++ b/example/src/main/AndroidManifest.xml
@@ -1,17 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.example"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <application android:label="@string/app_name" android:icon="@drawable/icon" android:name="ClientApp">
-        <activity android:name=".activities.SugarActivity" android:label="@string/app_name">
+    package="com.example"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <application
+        android:name=".App"
+        android:icon="@drawable/icon"
+        android:label="@string/app_name">
+        <activity
+            android:name=".activities.SugarActivity"
+            android:label="@string/app_name">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <meta-data android:name="DATABASE" android:value="sugar_example.db" />
-        <meta-data android:name="VERSION" android:value="3" />
-        <meta-data android:name="QUERY_LOG" android:value="true" />
+
+        <meta-data
+            android:name="DATABASE"
+            android:value="database.db" />
+        <meta-data
+            android:name="VERSION"
+            android:value="3" />
+        <meta-data
+            android:name="QUERY_LOG"
+            android:value="true" />
     </application>
 </manifest> 
diff --git a/example/src/main/java/com/example/App.java b/example/src/main/java/com/example/App.java
new file mode 100644
index 00000000..f91c36f2
--- /dev/null
+++ b/example/src/main/java/com/example/App.java
@@ -0,0 +1,21 @@
+package com.example;
+
+import android.app.Application;
+
+import mohammadaminha.com.sugar.SugarContext;
+import mohammadaminha.com.sugar.SugarDb;
+
+public class App extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        SugarContext.init(getApplicationContext());
+        new SugarDb(getApplicationContext());
+    }
+
+    @Override
+    public void onTerminate() {
+        super.onTerminate();
+        SugarContext.terminate();
+    }
+}
diff --git a/example/src/main/java/com/example/DbClasses/book.java b/example/src/main/java/com/example/DbClasses/book.java
new file mode 100644
index 00000000..5d3777c3
--- /dev/null
+++ b/example/src/main/java/com/example/DbClasses/book.java
@@ -0,0 +1,13 @@
+package com.example.DbClasses;
+
+import mohammadaminha.com.sugar.SugarRecord;
+
+public class book extends SugarRecord {
+    private String title;
+    private int icon;
+
+    public book(String title, int icon) {
+        this.title = title;
+        this.icon = icon;
+    }
+}
diff --git a/example/src/main/java/com/example/activities/SugarActivity.java b/example/src/main/java/com/example/activities/SugarActivity.java
index 81044546..405defdb 100644
--- a/example/src/main/java/com/example/activities/SugarActivity.java
+++ b/example/src/main/java/com/example/activities/SugarActivity.java
@@ -3,16 +3,23 @@
 import android.app.Activity;
 import android.os.Bundle;
 
+import com.example.DbClasses.book;
 import com.example.R;
 
+import mohammadaminha.com.sugar.SugarRecord;
 
-public class SugarActivity extends Activity
-{
-    /** Called when the activity is first created. */
+
+public class SugarActivity extends Activity {
+    /**
+     * Called when the activity is first created.
+     */
     @Override
-    public void onCreate(Bundle savedInstanceState)
-    {
+    public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main);
+
+        book book = new book("test", R.drawable.icon);
+        SugarRecord.save(book);
+
     }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b0bb3ffb..1846ec56 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Apr 09 17:51:14 ART 2016
+#Sun Oct 28 12:56:03 IRST 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
diff --git a/library/build.gradle b/library/build.gradle
deleted file mode 100644
index 907162ee..00000000
--- a/library/build.gradle
+++ /dev/null
@@ -1,36 +0,0 @@
-apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
-
-android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
-
-    defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-        }
-    }
-    testOptions {
-        unitTests.returnDefaultValues = true
-    }
-    lintOptions {
-        abortOnError false
-    }
-}
-
-dependencies {
-    testCompile 'junit:junit:4.12'
-    testCompile 'org.robolectric:robolectric:3.0'
-}
-
-task libraryJar(type: Jar) {
-    dependsOn assembleRelease
-    from android.sourceSets.main.java.srcDirs,
-         ['build/intermediates/classes/release/'] // Add the release classes into the jar
-    baseName 'sugar'
-}
-
diff --git a/library/build.properties b/library/build.properties
deleted file mode 100644
index b5b95df0..00000000
--- a/library/build.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-jdk.home.1.6=$JAVA_HOME
-android.home=/Users/ADMIN/Downloads/android-sdk-macosx/platforms/android-17/android.jar
-android.travis.home=/usr/local/android-sdk/platforms/android-17/android.jar
diff --git a/library/build.xml b/library/build.xml
deleted file mode 100644
index 927b3904..00000000
--- a/library/build.xml
+++ /dev/null
@@ -1,69 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="sugar" default="all">
-
-  <property file="build.properties"/>
-
-  <patternset id="ignored.files">
-    <exclude name="**/.git/**"/>
-    <exclude name="**/*~/**"/>
-  </patternset>
-  <patternset id="library.patterns">
-    <include name="*.jar"/>
-  </patternset>
-
-  <property name="jdk.bin.1.6" value="${jdk.home.1.6}/bin"/>
-  <dirname property="module.sugar.basedir" file="${ant.file}"/>
-
-  <property name="sugar.output.dir" value="${module.sugar.basedir}/out/"/>
-
-  <path id="sugar.classpath">
-    <pathelement location="${android.home}"/>
-  </path>
-
-  <path id="sugar.travis.classpath">
-    <pathelement location="${android.travis.home}"/>
-  </path>
-
-  <patternset id="excluded.from.compilation.sugar">
-    <patternset refid="ignored.files"/>
-  </patternset>
-
-  <path id="sugar.module.sourcepath">
-    <dirset dir="${module.sugar.basedir}">
-      <include name="src"/>
-    </dirset>
-  </path>
- 
-  <target name="compile" description="Compile module sugar; production classes">
-    <mkdir dir="${sugar.output.dir}"/>
-    <javac destdir="${sugar.output.dir}" fork="false" executable="${jdk.bin.1.6}/javac">
-      <classpath refid="sugar.classpath"/>
-      <src refid="sugar.module.sourcepath"/>
-      <patternset refid="excluded.from.compilation.sugar"/>
-    </javac>
-
-      <jar destfile="${sugar.output.dir}/sugar.jar" basedir="${sugar.output.dir}"/>
-
-  </target>
-
-  <target name="compile-travis" description="Compile module sugar for travis-cl">
-
-    <mkdir dir="${sugar.output.dir}"/>
-    <javac destdir="${sugar.output.dir}" fork="false" executable="${jdk.bin.1.6}/javac">
-      <classpath refid="sugar.travis.classpath"/>
-      <src refid="sugar.module.sourcepath"/>
-      <patternset refid="excluded.from.compilation.sugar"/>
-    </javac>
-
-      <jar destfile="${sugar.output.dir}/sugar.jar" basedir="${sugar.output.dir}"/>
-
-  </target>
-
-  <target name="clean" description="cleanup module">
-    <delete dir="${sugar.output.dir}"/>
-  </target>
-      <patternset refid="excluded.from.compilation.sugar"/>
-  <target name="all" depends="clean, compile" description="build all modules"/>
-  <target name="travis-all" depends="clean, compile-travis" description="build all modules for travis"/>
-  
-</project>
diff --git a/library/gradle.properties b/library/gradle.properties
deleted file mode 100644
index 07fe1d15..00000000
--- a/library/gradle.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-POM_NAME=Sugar ORM
-POM_ARTIFACT_ID=sugar
-POM_PACKAGING=aar
\ No newline at end of file
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
deleted file mode 100644
index 849de626..00000000
--- a/library/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.orm.dsl"
-          android:versionCode="1"
-          android:versionName="1.3.1">
-
-</manifest>
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/SugarApp.java b/library/src/main/java/com/orm/SugarApp.java
deleted file mode 100644
index cab35ca7..00000000
--- a/library/src/main/java/com/orm/SugarApp.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm;
-
-import android.app.Application;
-
-public class SugarApp extends Application {
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        SugarContext.init(this);
-    }
-
-    @Override
-    public void onTerminate() {
-        super.onTerminate();
-        SugarContext.terminate();
-    }
-
-}
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
deleted file mode 100644
index bc71ba23..00000000
--- a/library/src/main/java/com/orm/SugarDb.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.orm;
-
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
-
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.ManifestHelper;
-import com.orm.util.SugarCursorFactory;
-
-import static com.orm.util.ContextUtil.getContext;
-import static com.orm.helper.ManifestHelper.getDatabaseVersion;
-import static com.orm.helper.ManifestHelper.getDbName;
-import static com.orm.SugarContext.getDbConfiguration;
-
-public class SugarDb extends SQLiteOpenHelper {
-    private static final String LOG_TAG = "Sugar";
-
-    private final SchemaGenerator schemaGenerator;
-    private SQLiteDatabase sqLiteDatabase;
-    private int openedConnections = 0;
-
-    //Prevent instantiation
-    private SugarDb() {
-        super(getContext(), getDbName(), new SugarCursorFactory(ManifestHelper.isDebugEnabled()), getDatabaseVersion());
-        schemaGenerator = SchemaGenerator.getInstance();
-    }
-
-    public static SugarDb getInstance() {
-        return new SugarDb();
-    }
-
-    @Override
-    public void onCreate(SQLiteDatabase sqLiteDatabase) {
-        schemaGenerator.createDatabase(sqLiteDatabase);
-    }
-
-    @Override
-    public void onConfigure(SQLiteDatabase db) {
-        final SugarDbConfiguration configuration = getDbConfiguration();
-
-        if (null != configuration) {
-            db.setLocale(configuration.getDatabaseLocale());
-            db.setMaximumSize(configuration.getMaxSize());
-            db.setPageSize(configuration.getPageSize());
-        }
-
-        super.onConfigure(db);
-    }
-
-    @Override
-    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
-        schemaGenerator.doUpgrade(sqLiteDatabase, oldVersion, newVersion);
-    }
-
-    public synchronized SQLiteDatabase getDB() {
-        if (this.sqLiteDatabase == null) {
-            this.sqLiteDatabase = getWritableDatabase();
-        }
-
-        return this.sqLiteDatabase;
-    }
-
-    @Override
-    public synchronized SQLiteDatabase getReadableDatabase() {
-        if(ManifestHelper.isDebugEnabled()) {
-            Log.d(LOG_TAG, "getReadableDatabase");
-        }
-        openedConnections++;
-        return super.getReadableDatabase();
-    }
-
-    @Override
-    public synchronized void close() {
-        if(ManifestHelper.isDebugEnabled()) {
-            Log.d(LOG_TAG, "getReadableDatabase");
-        }
-        openedConnections--;
-        if(openedConnections == 0) {
-            if(ManifestHelper.isDebugEnabled()) {
-                Log.d(LOG_TAG, "closing");
-            }
-            super.close();
-        }
-    }
-}
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
deleted file mode 100644
index 2ade2ba3..00000000
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ /dev/null
@@ -1,550 +0,0 @@
-package com.orm;
-
-import android.content.ContentValues;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SQLiteStatement;
-import android.text.TextUtils;
-import android.util.Log;
-import com.orm.annotation.Table;
-import com.orm.annotation.Unique;
-import com.orm.helper.ManifestHelper;
-import com.orm.helper.NamingHelper;
-import com.orm.inflater.EntityInflater;
-import com.orm.util.QueryBuilder;
-import com.orm.util.ReflectionUtil;
-import com.orm.util.SugarCursor;
-
-import java.lang.reflect.Field;
-import java.util.*;
-
-import static com.orm.SugarContext.getSugarContext;
-
-public class SugarRecord {
-    public static final String SUGAR = "Sugar";
-
-    private Long id = null;
-
-    private static SQLiteDatabase getSugarDataBase() {
-        return getSugarContext().getSugarDb().getDB();
-    }
-
-    public static <T> int deleteAll(Class<T> type) {
-        return deleteAll(type, null);
-    }
-
-    public static <T> int deleteAll(Class<T> type, String whereClause, String... whereArgs) {
-        return getSugarDataBase().delete(NamingHelper.toTableName(type), whereClause, whereArgs);
-    }
-
-    public static <T> Cursor getCursor(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-        Cursor raw = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, whereArgs,
-                groupBy, null, orderBy, limit);
-        return new SugarCursor(raw);
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T> void saveInTx(T... objects) {
-        saveInTx(Arrays.asList(objects));
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T> void saveInTx(Collection<T> objects) {
-        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
-        try {
-            sqLiteDatabase.beginTransaction();
-            sqLiteDatabase.setLockingEnabled(false);
-            for (T object: objects) {
-                save(object);
-            }
-            sqLiteDatabase.setTransactionSuccessful();
-        } catch (Exception e) {
-            if (ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
-            }
-        } finally {
-            sqLiteDatabase.endTransaction();
-            sqLiteDatabase.setLockingEnabled(true);
-        }
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T> void updateInTx(T... objects) {
-        updateInTx(Arrays.asList(objects));
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T> void updateInTx(Collection<T> objects) {
-        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
-        try {
-            sqLiteDatabase.beginTransaction();
-            sqLiteDatabase.setLockingEnabled(false);
-            for (T object: objects) {
-                update(object);
-            }
-            sqLiteDatabase.setTransactionSuccessful();
-        } catch (Exception e) {
-            if (ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
-            }
-        } finally {
-            sqLiteDatabase.endTransaction();
-            sqLiteDatabase.setLockingEnabled(true);
-        }
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T> int deleteInTx(T... objects) {
-        return deleteInTx(Arrays.asList(objects));
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T> int deleteInTx(Collection<T> objects) {
-        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
-        int deletedRows = 0;
-        try {
-            sqLiteDatabase.beginTransaction();
-            sqLiteDatabase.setLockingEnabled(false);
-            for (T object : objects) {
-                if (delete(object)) {
-                    ++deletedRows;
-                }
-            }
-            sqLiteDatabase.setTransactionSuccessful();
-        } catch (Exception e) {
-            deletedRows = 0;
-            if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Error in deleting in transaction " + e.getMessage());
-            }
-        } finally {
-            sqLiteDatabase.endTransaction();
-            sqLiteDatabase.setLockingEnabled(true);
-        }
-        return deletedRows;
-    }
-
-    public static <T> List<T> listAll(Class<T> type) {
-        return find(type, null, null, null, null, null);
-    }
-
-    public static <T> List<T> listAll(Class<T> type, String orderBy) {
-        return find(type, null, null, null, orderBy, null);
-    }
-
-    public static <T> T findById(Class<T> type, Long id) {
-        List<T> list = find(type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
-        if (list.isEmpty()) return null;
-        return list.get(0);
-    }
-
-    public static <T> T findById(Class<T> type, Integer id) {
-        return findById(type, Long.valueOf(id));
-    }
-
-    public static <T> List<T> findById(Class<T> type, String... ids) {
-        String whereClause = "id IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
-        return find(type, whereClause, ids);
-    }
-
-    public static <T> T first(Class<T>type) {
-        List<T> list = findWithQuery(type,
-                "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID ASC LIMIT 1");
-        if (list.isEmpty()) {
-            return null;
-        }
-        return list.get(0);
-    }
-
-    public static <T> T last(Class<T>type) {
-        List<T> list = findWithQuery(type,
-                "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID DESC LIMIT 1");
-        if (list.isEmpty()) {
-            return null;
-        }
-        return list.get(0);
-    }
-
-    public static <T> Iterator<T> findAll(Class<T> type) {
-        return findAsIterator(type, null, null, null, null, null);
-    }
-
-    public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String... whereArgs) {
-        return findAsIterator(type, whereClause, whereArgs, null, null, null);
-    }
-
-    public static <T> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
-        Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
-        return new CursorIterator<>(type, cursor);
-    }
-
-    public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-        Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, whereArgs,
-                groupBy, null, orderBy, limit);
-        return new CursorIterator<>(type, cursor);
-    }
-
-    public static <T> List<T> find(Class<T> type, String whereClause, String... whereArgs) {
-        return find(type, whereClause, whereArgs, null, null, null);
-    }
-
-    public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
-        Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
-
-        return getEntitiesFromCursor(cursor, type);
-    }
-
-    public static void executeQuery(String query, String... arguments) {
-        getSugarDataBase().execSQL(query, arguments);
-    }
-
-    public static <T> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-
-        String args[];
-        args = (whereArgs == null) ? null : replaceArgs(whereArgs);
-
-        Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, args,
-                groupBy, null, orderBy, limit);
-
-        return getEntitiesFromCursor(cursor, type);
-    }
-
-    public static <T> List<T> findOneToMany(Class<T> type, String relationFieldName, Object relationObject, Long relationObjectId) {
-        String args[] = { String.valueOf(relationObjectId) };
-        String whereClause = NamingHelper.toSQLNameDefault(relationFieldName) + " = ?";
-
-        Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, args,
-                null, null, null, null);
-
-        return getEntitiesFromCursor(cursor, type, relationFieldName, relationObject);
-    }
-
-    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
-        return getEntitiesFromCursor(cursor, type, null, null);
-    }
-
-    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject){
-        T entity;
-        List<T> result = new ArrayList<>();
-        try {
-            while (cursor.moveToNext()) {
-                entity = type.getDeclaredConstructor().newInstance();
-                new EntityInflater()
-                        .withCursor(cursor)
-                        .withObject(entity)
-                        .withEntitiesMap(getSugarContext().getEntitiesMap())
-                        .withRelationFieldName(relationFieldName)
-                        .withRelationObject(relationObject)
-                        .inflate();
-                result.add(entity);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        } finally {
-            cursor.close();
-        }
-
-        return result;
-    }
-
-    public static <T> long count(Class<T> type) {
-        return count(type, null, null, null, null, null);
-    }
-
-    public static <T> long count(Class<T> type, String whereClause, String... whereArgs) {
-    	return count(type, whereClause, whereArgs, null, null, null);
-    }
-
-    public static <T> long count(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-        long result = -1;
-        String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
-        SQLiteStatement sqliteStatement;
-        try {
-            sqliteStatement = getSugarDataBase().compileStatement("SELECT count(*) FROM " + NamingHelper.toTableName(type) + filter);
-        } catch (SQLiteException e) {
-            e.printStackTrace();
-            return result;
-        }
-
-        if (whereArgs != null) {
-            for (int i = whereArgs.length; i != 0; i--) {
-                sqliteStatement.bindString(i, whereArgs[i - 1]);
-            }
-        }
-
-        try {
-            result = sqliteStatement.simpleQueryForLong();
-        } finally {
-            sqliteStatement.close();
-        }
-
-        return result;
-    }
-
-    public static <T> long sum(Class<T> type, String field) {
-        return sum(type, field, null, null);
-    }
-
-    public static <T> long sum(Class<T> type, String field, String whereClause, String... whereArgs) {
-        long result = -1;
-        String filter = (!TextUtils.isEmpty(whereClause)) ? " where " + whereClause : "";
-        SQLiteStatement sqLiteStatement;
-        try {
-            sqLiteStatement = getSugarDataBase().compileStatement("SELECT sum(" + field + ") FROM " + NamingHelper.toTableName(type) + filter);
-        } catch (SQLiteException e) {
-            e.printStackTrace();
-            return result;
-        }
-
-        if (whereArgs != null) {
-            for (int i = whereArgs.length; i != 0; i--) {
-                sqLiteStatement.bindString(i, whereArgs[i - 1]);
-            }
-        }
-
-        try {
-            result = sqLiteStatement.simpleQueryForLong();
-        } finally {
-            sqLiteStatement.close();
-        }
-
-        return result;
-    }
-
-    public static long save(Object object) {
-        return save(getSugarDataBase(), object);
-    }
-
-    static long save(SQLiteDatabase db, Object object) {
-        Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
-        List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
-        ContentValues values = new ContentValues(columns.size());
-        Field idField = null;
-        for (Field column : columns) {
-            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
-            if (column.getName().equals("id")) {
-                idField = column;
-            }
-        }
-
-        boolean isSugarEntity = isSugarEntity(object.getClass());
-        if (isSugarEntity && entitiesMap.containsKey(object)) {
-                values.put("id", entitiesMap.get(object));
-        }
-
-        long id = db.insertWithOnConflict(NamingHelper.toTableName(object.getClass()), null, values,
-                SQLiteDatabase.CONFLICT_REPLACE);
-
-        if (object.getClass().isAnnotationPresent(Table.class)) {
-            if (idField != null) {
-                idField.setAccessible(true);
-                try {
-                    idField.set(object, id);
-                } catch (IllegalAccessException e) {
-                    e.printStackTrace();
-                }
-            } else {
-                entitiesMap.put(object, id);
-            }
-        } else if (SugarRecord.class.isAssignableFrom(object.getClass())) {
-            ((SugarRecord) object).setId(id);
-        }
-
-        if (ManifestHelper.isDebugEnabled()) {
-            Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
-        }
-
-        return id;
-    }
-
-    public static long update(Object object) {
-        return update(getSugarDataBase(), object);
-    }
-
-    static long update(SQLiteDatabase db, Object object) {
-        Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
-        List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
-        ContentValues values = new ContentValues(columns.size());
-
-        StringBuilder whereClause = new StringBuilder();
-        List<String> whereArgs = new ArrayList<>();
-
-        for (Field column : columns) {
-            if(column.isAnnotationPresent(Unique.class)) {
-                try {
-                    column.setAccessible(true);
-                    String columnName = NamingHelper.toColumnName(column);
-                    Object columnValue = column.get(object);
-
-                    whereClause.append(columnName).append(" = ?");
-                    whereArgs.add(String.valueOf(columnValue));
-                } catch (IllegalAccessException e) {
-                    e.printStackTrace();
-                }
-            } else {
-                if (!column.getName().equals("id")) {
-                    ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
-                }
-            }
-        }
-
-        String[] whereArgsArray = whereArgs.toArray(new String[whereArgs.size()]);
-        // Get SugarRecord based on Unique values
-        long rowsEffected = db.update(NamingHelper.toTableName(object.getClass()), values, whereClause.toString(), whereArgsArray);
-
-        if (rowsEffected == 0) {
-            return save(db, object);
-        } else {
-            return rowsEffected;
-        }
-    }
-
-    public static boolean isSugarEntity(Class<?> objectClass) {
-        return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
-    }
-
-    public boolean delete() {
-        Long id = getId();
-        Class<?> type = getClass();
-        if (id != null && id > 0L) {
-            if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
-            }
-            return getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
-        } else {
-            if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
-            }
-            return false;
-        }
-    }
-
-    public static boolean delete(Object object) {
-        Class<?> type = object.getClass();
-        if (type.isAnnotationPresent(Table.class)) {
-            try {
-                Field field = type.getDeclaredField("id");
-                field.setAccessible(true);
-                Long id = (Long) field.get(object);
-                if (id != null && id > 0L) {
-                    boolean deleted = getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
-                    if(ManifestHelper.isDebugEnabled()) {
-                        Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
-                    }
-                    return deleted;
-                } else {
-                    if(ManifestHelper.isDebugEnabled()) {
-                        Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
-                    }
-                    return false;
-                }
-            } catch (NoSuchFieldException e) {
-                if(ManifestHelper.isDebugEnabled()) {
-                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
-                }
-                return false;
-            } catch (IllegalAccessException e) {
-                if(ManifestHelper.isDebugEnabled()) {
-                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
-                }
-                return false;
-            }
-        } else if (SugarRecord.class.isAssignableFrom(type)) {
-            return ((SugarRecord) object).delete();
-        } else {
-            if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
-            }
-            return false;
-        }
-    }
-
-    public long save() {
-        return save(getSugarDataBase(), this);
-    }
-
-    public long update() {
-        return update(getSugarDataBase(), this);
-    }
-
-    @SuppressWarnings("unchecked")
-    void inflate(Cursor cursor) {
-        new EntityInflater()
-                .withCursor(cursor)
-                .withObject(this)
-                .withEntitiesMap(getSugarContext().getEntitiesMap())
-                .inflate();
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    static class CursorIterator<E> implements Iterator<E> {
-        Class<E> type;
-        Cursor cursor;
-
-        public CursorIterator(Class<E> type, Cursor cursor) {
-            this.type = type;
-            this.cursor = cursor;
-        }
-
-        @Override
-        public boolean hasNext() {
-            return cursor != null && !cursor.isClosed() && !cursor.isAfterLast();
-        }
-
-        @Override
-        public E next() {
-            E entity = null;
-            if (cursor == null || cursor.isAfterLast()) {
-                throw new NoSuchElementException();
-            }
-
-            if (cursor.isBeforeFirst()) {
-                cursor.moveToFirst();
-            }
-
-            try {
-                entity = type.getDeclaredConstructor().newInstance();
-                new EntityInflater()
-                        .withCursor(cursor)
-                        .withObject(entity)
-                        .withEntitiesMap(getSugarContext().getEntitiesMap())
-                        .inflate();
-            } catch (Exception e) {
-                e.printStackTrace();
-            } finally {
-                cursor.moveToNext();
-                if (cursor.isAfterLast()) {
-                    cursor.close();
-                }
-            }
-
-            return entity;
-        }
-
-        @Override
-        public void remove() {
-            throw new UnsupportedOperationException();
-        }
-    }
-
-    public static String[] replaceArgs(String[] args){
-
-        String [] replace = new String[args.length];
-        for (int i=0; i<args.length; i++){
-
-            replace[i]= (args[i].equals("true")) ? replace[i]="1" : (args[i].equals("false")) ? replace[i]="0" : args[i];
-
-        }
-
-        return replace;
-
-    }
-
-}
diff --git a/library/src/test/java/com/orm/SchemaGeneratorTest.java b/library/src/test/java/com/orm/SchemaGeneratorTest.java
deleted file mode 100644
index 811d1aa1..00000000
--- a/library/src/test/java/com/orm/SchemaGeneratorTest.java
+++ /dev/null
@@ -1,179 +0,0 @@
-package com.orm;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.AllAnotatedModel;
-import com.orm.model.EmptyModel;
-import com.orm.model.IntUniqueModel;
-import com.orm.model.MultiColumnUniqueModel;
-import com.orm.model.StringFieldAnnotatedModel;
-import com.orm.model.StringFieldExtendedModel;
-import com.orm.model.StringFieldExtendedModelAnnotatedColumn;
-import com.orm.helper.NamingHelper;
-import com.orm.model.TestRecord;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static junit.framework.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SchemaGeneratorTest {
-
-    @Test
-    public void testEmptyTableCreation() throws Exception {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(EmptyModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(EmptyModel.class) +
-                    " ( ID INTEGER PRIMARY KEY AUTOINCREMENT  ) ",
-                createSQL);
-    }
-
-    @Test
-    public void testSimpleColumnTableCreation() throws Exception {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(StringFieldExtendedModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(StringFieldExtendedModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "STRING TEXT ) ",
-                createSQL);
-
-        String createSQL2 = schemaGenerator.createTableSQL(StringFieldAnnotatedModel.class);
-
-        assertEquals("CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(StringFieldAnnotatedModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "STRING TEXT ) ",
-                createSQL2);
-
-        String createSQL3 = schemaGenerator.createTableSQL(StringFieldExtendedModelAnnotatedColumn.class);
-
-        assertEquals("CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(StringFieldExtendedModelAnnotatedColumn.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "anyName TEXT ) ",
-                createSQL3);
-    }
-
-    @Test
-    public void testUniqueTableCreation() {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(IntUniqueModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(IntUniqueModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "VALUE INTEGER UNIQUE ) ",
-                createSQL);
-    }
-
-    @Test
-    public void testMultiColumnUniqueTableCreation() {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(MultiColumnUniqueModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(MultiColumnUniqueModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "A INTEGER, B INTEGER, " +
-                        "UNIQUE(A, B) ON CONFLICT REPLACE ) ",
-                createSQL);
-    }
-
-    @Test
-    public void testTableCreation() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        schemaGenerator.createTable(TestRecord.class, sqLiteDatabase);
-        String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
-
-        String tableName = NamingHelper.toTableName(TestRecord.class);
-        Cursor c = sqLiteDatabase.rawQuery(String.format(sql, tableName), null);
-
-        if (c.moveToFirst()) {
-            Assert.assertEquals(1, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testAnnotatedModelTableCreation() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        schemaGenerator.createTable(AllAnotatedModel.class, sqLiteDatabase);
-        String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
-
-        String tableName = NamingHelper.toTableName(AllAnotatedModel.class);
-        Cursor c = sqLiteDatabase.rawQuery(String.format(sql, tableName), null);
-
-        if (c.moveToFirst()) {
-            Assert.assertEquals(1, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testAllTableCreation() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-
-        schemaGenerator.createDatabase(sqLiteDatabase);
-        String sql = "select count(*) from sqlite_master where type='table';";
-
-        Cursor c = sqLiteDatabase.rawQuery(sql, null);
-
-        if (c.moveToFirst()) {
-            Assert.assertEquals(48, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testDeleteAllTables() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-
-        schemaGenerator.createDatabase(sqLiteDatabase);
-        schemaGenerator.deleteTables(sqLiteDatabase);
-
-        String sql = "select count(*) from sqlite_master where type='table';";
-
-        Cursor c = sqLiteDatabase.rawQuery(sql, null);
-
-        if (c.moveToFirst()) {
-            //Two tables are by default created by SQLite
-            Assert.assertEquals(2, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testGetColumnNames() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        schemaGenerator.createTable(TestRecord.class, sqLiteDatabase);
-
-        List<String> columnNames = schemaGenerator.getColumnNames(sqLiteDatabase, NamingHelper.toTableName(TestRecord.class));
-        Assert.assertEquals(2, columnNames.size());
-    }
-}
diff --git a/library/src/test/java/com/orm/SugarAppTest.java b/library/src/test/java/com/orm/SugarAppTest.java
deleted file mode 100644
index 0f247ae8..00000000
--- a/library/src/test/java/com/orm/SugarAppTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.orm;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-
-/**
- * @author jonatan.salas
- */
-public final class SugarAppTest {
-
-    @Test
-    public void testOnCreate() {
-        SugarApp app = new SugarApp();
-        app.onCreate();
-
-        SugarContext context = SugarContext.getSugarContext();
-        Assert.assertNotNull(context);
-    }
-
-
-    @Test(expected = NullPointerException.class)
-    public void testOnTerminate() {
-        SugarApp app = new SugarApp();
-        app.onCreate();
-        app.onTerminate();
-
-        SugarContext context = SugarContext.getSugarContext();
-        Assert.assertNull(context);
-    }
-}
diff --git a/library/src/test/java/com/orm/SugarDataSourceTest.java b/library/src/test/java/com/orm/SugarDataSourceTest.java
deleted file mode 100644
index 9f3d25ba..00000000
--- a/library/src/test/java/com/orm/SugarDataSourceTest.java
+++ /dev/null
@@ -1,543 +0,0 @@
-package com.orm;
-
-import android.database.Cursor;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static junit.framework.Assert.*;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SugarDataSourceTest {
-    private SugarDataSource<TestRecord> recordSugarDataSource;
-
-    @Before
-    public void setUp() {
-        recordSugarDataSource = SugarDataSource.getInstance(TestRecord.class);
-    }
-
-    @Test
-    public void testInsertAndDelete() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        assertNotNull(record.getId());
-
-        recordSugarDataSource.delete(
-                record,
-                new SugarDataSource.SuccessCallback<Boolean>() {
-                    @Override
-                    public void onSuccess(Boolean result) {
-                        assertNotNull(result);
-                        assertEquals(true, result.booleanValue());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndFindById() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.findById(
-                record.getId(),
-                new SugarDataSource.SuccessCallback<TestRecord>() {
-                    @Override
-                    public void onSuccess(TestRecord result) {
-                        assertEquals(record.getId(), result.getId());
-                        assertEquals(record.getName(), result.getName());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertUpdateAndFindById() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        record.setName("fulano");
-        recordSugarDataSource.update(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        assertEquals(record.getId(), id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.findById(
-                record.getId(),
-                new SugarDataSource.SuccessCallback<TestRecord>() {
-                    @Override
-                    public void onSuccess(TestRecord result) {
-                        assertEquals(record.getId(), result.getId());
-                        assertEquals("fulano", result.getName());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndListAll() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        recordSugarDataSource.insert(
-                record1,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record1.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        recordSugarDataSource.insert(
-                record2,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record2.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> list) {
-                        assertEquals(3, list.size());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.deleteAll(
-                new SugarDataSource.SuccessCallback<Integer>() {
-                    @Override
-                    public void onSuccess(Integer count) {
-                        assertEquals(3, count.intValue());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndCount() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        recordSugarDataSource.insert(
-                record1,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record1.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        recordSugarDataSource.insert(
-                record2,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record2.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.count(
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long count) {
-                        assertEquals(3, count.longValue());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndGetCursor() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        recordSugarDataSource.insert(
-                record1,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record1.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        recordSugarDataSource.insert(
-                record2,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record2.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> list) {
-                        assertEquals(3, list.size());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.query(
-                null,
-                null,
-                null,
-                null,
-                null,
-                new SugarDataSource.SuccessCallback<Cursor>() {
-                    @Override
-                    public void onSuccess(Cursor cursor) {
-                        assertNotNull(cursor);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void bulkInsertAndListAllTest() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        final List<TestRecord> list = new ArrayList<>();
-        list.add(record);
-        list.add(record1);
-        list.add(record2);
-
-        recordSugarDataSource.bulkInsert(
-                list,
-                new SugarDataSource.SuccessCallback<List<Long>>() {
-                    @Override
-                    public void onSuccess(List<Long> ids) {
-                        for (int i = 0; i < list.size(); i++) {
-                            list.get(i).setId(ids.get(i));
-                        }
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> testRecords) {
-                        for (int i = 0; i < list.size(); i++) {
-                            TestRecord record1 = list.get(i);
-                            TestRecord record2 = testRecords.get(i);
-
-                            assertEquals(record1.getId(), record2.getId());
-                            assertEquals(record1.getName(), record2.getName());
-                        }
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void nullFindById() {
-        TestRecord record = new TestRecord();
-        record.setId(0L);
-
-        recordSugarDataSource.findById(
-                record.getId(),
-                new SugarDataSource.SuccessCallback<TestRecord>() {
-                    @Override
-                    public void onSuccess(TestRecord object) {
-                        assertNull(object);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        assertNotNull(e.getMessage());
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testNullListAll() {
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> object) {
-                        assertNull(object);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        assertNotNull(e.getMessage());
-                    }
-                }
-        );
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    @SuppressWarnings("all")
-    public void testNullConstructor() {
-        SugarDataSource<TestRecord> dataSource = SugarDataSource.getInstance(null);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    @SuppressWarnings("all")
-    public void testCheckNotNull() {
-        TestRecord record = null;
-        recordSugarDataSource.checkNotNull(record);
-    }
-}
diff --git a/library/src/test/java/com/orm/SugarDbConfigurationTest.java b/library/src/test/java/com/orm/SugarDbConfigurationTest.java
deleted file mode 100644
index 64d50df6..00000000
--- a/library/src/test/java/com/orm/SugarDbConfigurationTest.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.orm;
-
-import com.orm.dsl.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import java.util.Locale;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 16, constants = BuildConfig.class)
-public final class SugarDbConfigurationTest {
-
-    @Test
-    public void testNotNullConfiguration() {
-        SugarDbConfiguration configuration = new SugarDbConfiguration()
-                .setDatabaseLocale(Locale.getDefault())
-                .setMaxSize(1024L)
-                .setPageSize(400L);
-
-        SugarContext.init(RuntimeEnvironment.application, configuration);
-
-        final SugarDbConfiguration config = SugarContext.getDbConfiguration();
-
-        assertEquals(configuration.getDatabaseLocale(), config.getDatabaseLocale());
-        assertEquals(configuration.getMaxSize(), config.getMaxSize());
-        assertEquals(configuration.getPageSize(), config.getPageSize());
-    }
-
-    @Test
-    public void testNullConfiguration() {
-        SugarContext.init(RuntimeEnvironment.application);
-        assertNull(SugarContext.getDbConfiguration());
-    }
-
-//    @Test
-//    public void testNotNullConfigurationWithSugarDb() {
-//        SugarDbConfiguration configuration = new SugarDbConfiguration()
-//                .setDatabaseLocale(Locale.getDefault())
-//                .setMaxSize(100000L)
-//                .setPageSize(100000L);
-//
-//        SugarContext.init(RuntimeEnvironment.application, configuration);
-//
-//        SQLiteDatabase database = SugarContext.getSugarContext().getSugarDb().getDB();
-//        SQLiteDatabase sqLiteDatabase = SugarDb.getInstance().getDB();
-//
-//        assertEquals(database.getMaximumSize(), sqLiteDatabase.getMaximumSize());
-//        assertEquals(database.getPageSize(), sqLiteDatabase.getPageSize());
-//
-//        if (sqLiteDatabase.isOpen()) {
-//            sqLiteDatabase.close();
-//        }
-//    }
-}
diff --git a/library/src/test/java/com/orm/SugarDbTest.java b/library/src/test/java/com/orm/SugarDbTest.java
deleted file mode 100644
index 7ff5914a..00000000
--- a/library/src/test/java/com/orm/SugarDbTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.orm;
-
-import android.database.sqlite.SQLiteDatabase;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SugarDbTest {
-    private final SugarDb sugarDb = SugarDb.getInstance();
-
-    @Test
-    //TODO check this better!
-    public void testGetReadableDatabase() {
-        final SQLiteDatabase db = sugarDb.getReadableDatabase();
-        assertEquals(false, db.isReadOnly());
-    }
-
-    @Test
-    public void testGetWritableDatabase() {
-        final SQLiteDatabase db = sugarDb.getWritableDatabase();
-        assertEquals(false, db.isReadOnly());
-    }
-
-    @Test
-    public void testGetDB() {
-        final SQLiteDatabase db = sugarDb.getDB();
-        assertEquals(false, db.isReadOnly());
-    }
-}
diff --git a/library/src/test/java/com/orm/app/ClientApp.java b/library/src/test/java/com/orm/app/ClientApp.java
deleted file mode 100644
index e9943aea..00000000
--- a/library/src/test/java/com/orm/app/ClientApp.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.orm.app;
-
-import android.app.Application;
-
-import com.orm.SugarContext;
-
-public class ClientApp extends Application {
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        SugarContext.init(this);
-    }
-
-    @Override
-    public void onTerminate() {
-        super.onTerminate();
-        SugarContext.terminate();
-    }
-}
diff --git a/library/src/test/java/com/orm/helper/ManifestHelperTest.java b/library/src/test/java/com/orm/helper/ManifestHelperTest.java
deleted file mode 100644
index 2fad344c..00000000
--- a/library/src/test/java/com/orm/helper/ManifestHelperTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package com.orm.helper;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.util.KeyWordUtil;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static junit.framework.Assert.assertNull;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-import static com.orm.helper.ManifestHelper.getDatabaseName;
-import static com.orm.helper.ManifestHelper.getDatabaseVersion;
-import static com.orm.helper.ManifestHelper.getDomainPackageName;
-import static com.orm.helper.ManifestHelper.isDebugEnabled;
-import static com.orm.helper.ManifestHelper.DATABASE_DEFAULT_NAME;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ManifestHelperTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        ManifestHelper helper = ManifestHelper.class.getDeclaredConstructor().newInstance();
-        assertNull(helper);
-    }
-
-
-    @Test
-    public void testGetDbName() {
-        assertEquals(DATABASE_DEFAULT_NAME, getDatabaseName());
-    }
-
-    @Test
-    public void testGetDatabaseName() {
-        assertEquals(DATABASE_DEFAULT_NAME, getDatabaseName());
-    }
-
-    @Test
-    public void testGetDatabaseVersion() {
-        assertEquals(1, getDatabaseVersion());
-    }
-
-    @Test
-    public void testGetDomainPackageName() {
-        assertNotNull(getDomainPackageName());
-    }
-
-    @Test
-    public void testGetDebugEnabled() {
-        assertEquals(false, isDebugEnabled());
-    }
-}
diff --git a/library/src/test/java/com/orm/helper/NamingHelperTest.java b/library/src/test/java/com/orm/helper/NamingHelperTest.java
deleted file mode 100644
index d53769ad..00000000
--- a/library/src/test/java/com/orm/helper/NamingHelperTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package com.orm.helper;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-import com.orm.util.ReflectionUtil;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.orm.helper.NamingHelper.*;
-import static junit.framework.Assert.*;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NamingHelperTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        NamingHelper helper = NamingHelper.class.getDeclaredConstructor().newInstance();
-        assertNull(helper);
-    }
-
-    @Test
-    public void testToSQLNameFromField() {
-        List<Field> fieldList = ReflectionUtil.getTableFields(TestRecord.class);
-
-        if (null != fieldList && !fieldList.isEmpty()) {
-            List<String> columnList = new ArrayList<>();
-
-            for(Field field: fieldList) {
-                columnList.add(toColumnName(field));
-            }
-
-            boolean isIdInList = inList(columnList, "ID");
-            boolean isNameInList = inList(columnList, "NAME");
-
-            assertTrue(isIdInList);
-            assertTrue(isNameInList);
-        }
-    }
-
-    private boolean inList(List<String> list, String searchValue) {
-        for (String val: list) {
-            if (val.equals(searchValue)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    @Test
-    public void testToSQLNameFromClass() {
-        assertEquals("TEST_RECORD", toTableName(TestRecord.class));
-    }
-
-    @Test
-    public void testToSQLNameCaseConversion() throws Exception {
-        assertToSqlNameEquals("TESTLOWERCASE", "testlowercase");
-        assertToSqlNameEquals("TESTUPPERCASE", "TESTUPPERCASE");
-    }
-
-    @Test
-    public void testToSQLNameUnderscore() {
-        assertToSqlNameEquals("TEST_UNDERSCORE", "testUnderscore");
-        assertToSqlNameEquals("AB_CD", "AbCd");
-        assertToSqlNameEquals("AB_CD", "ABCd");
-        assertToSqlNameEquals("AB_CD", "AbCD");
-        assertToSqlNameEquals("SOME_DETAILS_OBJECT", "SomeDetailsObject");
-        assertToSqlNameEquals("H_OL_A","hOlA");
-        assertToSqlNameEquals("A","a");
-    }
-
-    /**
-     * Helper method that asserts a CamelCaseString is converted to UPPER_CASE_UNDER_SCORE.
-     *
-     * @param expected  a CamelCaseString
-     * @param actual    the expected UPPER_CASE_UNDER_SCORE string
-     */
-    private static void assertToSqlNameEquals(String expected, String actual) {
-        assertEquals(expected, toSQLNameDefault(actual));
-    }
-
-}
diff --git a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java b/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
deleted file mode 100644
index 1fe73708..00000000
--- a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package com.orm.helper;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarContext;
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.SugarTransactionHelper;
-import com.orm.model.TestRecord;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SugarTransactionHelperTest {
-    private List<TestRecord> recordList = new ArrayList<>();
-    private TestRecord record1 = new TestRecord();
-    private TestRecord record2 = new TestRecord();
-    private TestRecord record3 = new TestRecord();
-
-    @Before
-    public void setUp() {
-        SugarContext.init(RuntimeEnvironment.application);
-
-        record1.setId(1L);
-        record1.setName("lala");
-
-        record2.setId(2L);
-        record2.setName("fefe");
-
-        record3.setId(3L);
-        record3.setName("jaja");
-
-        recordList.add(record1);
-        recordList.add(record2);
-        recordList.add(record3);
-    }
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        SugarTransactionHelper helper = SugarTransactionHelper.class.getDeclaredConstructor().newInstance();
-        assertNull(helper);
-    }
-
-    @Test
-    public void testDoInTransaction() {
-        SugarTransactionHelper.doInTransaction(new SugarTransactionHelper.Callback() {
-            @Override
-            public void manipulateInTransaction() {
-                for (TestRecord record: recordList) {
-                    TestRecord.save(record);
-                }
-            }
-        });
-
-        final List<TestRecord> results = TestRecord.listAll(TestRecord.class);
-
-        assertEquals(true, inList(results, record1));
-        assertEquals(true, inList(results, record2));
-        assertEquals(true, inList(results, record3));
-    }
-
-    private boolean inList(List<TestRecord> list, TestRecord testRecord) {
-        for (TestRecord record: list) {
-            if (record.getId().equals(testRecord.getId()) &&
-                record.getName().equals(testRecord.getName())) {
-                return true;
-            }
-        }
-        return false;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/AllAnotatedModel.java b/library/src/test/java/com/orm/model/AllAnotatedModel.java
deleted file mode 100644
index c2fb888d..00000000
--- a/library/src/test/java/com/orm/model/AllAnotatedModel.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Column;
-import com.orm.annotation.Ignore;
-import com.orm.annotation.NotNull;
-import com.orm.annotation.Table;
-import com.orm.annotation.Unique;
-
-/**
- * @author jonatan.salas
- */
-@Table
-public class AllAnotatedModel {
-
-    @NotNull @Unique
-    private Long id;
-
-    @Column(notNull = true, name = "name", unique = true)
-    private String name;
-
-    @Ignore
-    private String surname;
-
-    public AllAnotatedModel() { }
-}
diff --git a/library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java
deleted file mode 100644
index f5529512..00000000
--- a/library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-import java.math.BigDecimal;
-
-@Table
-public class BigDecimalFieldAnnotatedModel {
-    private BigDecimal decimal;
-    private Long id;
-
-    public BigDecimalFieldAnnotatedModel() {}
-
-    public BigDecimalFieldAnnotatedModel(BigDecimal decimal) {
-        this.decimal = decimal;
-    }
-
-    public BigDecimal getBigDecimal() {
-        return decimal;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java b/library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java
deleted file mode 100644
index cbcdc3c9..00000000
--- a/library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-import java.math.BigDecimal;
-
-public class BigDecimalFieldExtendedModel extends SugarRecord {
-    private BigDecimal decimal;
-
-    public BigDecimalFieldExtendedModel() {}
-
-    public BigDecimalFieldExtendedModel(BigDecimal decimal) {
-        this.decimal = decimal;
-    }
-
-    public BigDecimal getBigDecimal() {
-        return decimal;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java
deleted file mode 100644
index 31a8668b..00000000
--- a/library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class BooleanFieldAnnotatedModel {
-    private Boolean objectBoolean;
-    private boolean rawBoolean;
-    private Long id;
-
-    public BooleanFieldAnnotatedModel() {}
-
-    public BooleanFieldAnnotatedModel(Boolean objectBoolean) {
-        this.objectBoolean = objectBoolean;
-    }
-
-    public BooleanFieldAnnotatedModel(boolean rawBoolean) {
-        this.rawBoolean = rawBoolean;
-    }
-
-    public Boolean getBoolean() {
-        return objectBoolean;
-    }
-
-    public boolean getRawBoolean() {
-        return rawBoolean;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java b/library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java
deleted file mode 100644
index 0c78c82a..00000000
--- a/library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class BooleanFieldExtendedModel extends SugarRecord {
-    private Boolean objectBoolean;
-    private boolean rawBoolean;
-
-    public BooleanFieldExtendedModel() {}
-
-    public BooleanFieldExtendedModel(Boolean objectBoolean) {
-        this.objectBoolean = objectBoolean;
-    }
-
-    public BooleanFieldExtendedModel(boolean rawBoolean) {
-        this.rawBoolean = rawBoolean;
-    }
-
-    public Boolean getBoolean() {
-        return objectBoolean;
-    }
-
-    public boolean getRawBoolean() {
-        return rawBoolean;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java b/library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java
deleted file mode 100644
index 4a9f809c..00000000
--- a/library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class ByteArrayAnnotatedModel {
-    private byte[] byteArray;
-    private Long id;
-
-    public ByteArrayAnnotatedModel() {}
-
-    public ByteArrayAnnotatedModel(byte[] byteArray) {
-        this.byteArray = byteArray;
-    }
-
-    public byte[] getByteArray() {
-        return byteArray;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ByteArrayExtendedModel.java b/library/src/test/java/com/orm/model/ByteArrayExtendedModel.java
deleted file mode 100644
index 7e40208d..00000000
--- a/library/src/test/java/com/orm/model/ByteArrayExtendedModel.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class ByteArrayExtendedModel extends SugarRecord {
-    private byte[] byteArray;
-
-    public ByteArrayExtendedModel() {}
-
-    public ByteArrayExtendedModel(byte[] byteArray) {
-        this.byteArray = byteArray;
-    }
-
-    public byte[] getByteArray() {
-        return byteArray;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java
deleted file mode 100644
index 2c13e075..00000000
--- a/library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class DoubleFieldAnnotatedModel {
-    private Double objectDouble;
-    private double rawDouble;
-    private Long id;
-
-    public DoubleFieldAnnotatedModel() {}
-
-    public DoubleFieldAnnotatedModel(Double objectDouble) {
-        this.objectDouble = objectDouble;
-    }
-
-    public DoubleFieldAnnotatedModel(double rawDouble) {
-        this.rawDouble = rawDouble;
-    }
-
-    public Double getDouble() {
-        return objectDouble;
-    }
-
-    public double getRawDouble() {
-        return rawDouble;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java b/library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java
deleted file mode 100644
index 1a000c3c..00000000
--- a/library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class DoubleFieldExtendedModel extends SugarRecord {
-    private Double objectDouble;
-    private double rawDouble;
-
-    public DoubleFieldExtendedModel() {}
-
-    public DoubleFieldExtendedModel(Double objectDouble) {
-        this.objectDouble = objectDouble;
-    }
-
-    public DoubleFieldExtendedModel(double rawDouble) {
-        this.rawDouble = rawDouble;
-    }
-
-    public Double getDouble() {
-        return objectDouble;
-    }
-
-    public double getRawDouble() {
-        return rawDouble;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/EmptyModel.java b/library/src/test/java/com/orm/model/EmptyModel.java
deleted file mode 100644
index a98ab5e2..00000000
--- a/library/src/test/java/com/orm/model/EmptyModel.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-public class EmptyModel extends SugarRecord {
-    public EmptyModel() { }
-}
diff --git a/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
deleted file mode 100644
index abb3a63f..00000000
--- a/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class EnumFieldAnnotatedModel {
-    public static enum DefaultEnum {
-        ONE, TWO
-    }
-
-    public static enum OverrideEnum {
-        ONE, TWO;
-
-        @Override
-        public String toString() {
-            return super.toString().toLowerCase();
-        }
-    }
-
-    private OverrideEnum overrideEnum;
-    private DefaultEnum defaultEnum;
-    private Long id;
-
-    public EnumFieldAnnotatedModel() {
-
-    }
-
-    public EnumFieldAnnotatedModel(OverrideEnum e1, DefaultEnum d1) {
-        overrideEnum = e1;
-        defaultEnum = d1;
-    }
-
-    public DefaultEnum getDefaultEnum() {
-        return defaultEnum;
-    }
-
-    public void setDefaultEnum(DefaultEnum defaultEnum) {
-        this.defaultEnum = defaultEnum;
-    }
-
-    public void setOverrideEnum(OverrideEnum overrideEnum) {
-        this.overrideEnum = overrideEnum;
-    }
-
-    public OverrideEnum getOverrideEnum() {
-        return overrideEnum;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java b/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
deleted file mode 100644
index 24ec7725..00000000
--- a/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class EnumFieldExtendedModel extends SugarRecord {
-    public static enum DefaultEnum {
-        ONE, TWO
-    }
-
-    public static enum OverrideEnum {
-        ONE, TWO;
-
-        @Override
-        public String toString() {
-            return super.toString().toLowerCase();
-        }
-    }
-
-    private OverrideEnum overrideEnum;
-    private DefaultEnum defaultEnum;
-
-    public EnumFieldExtendedModel() {
-
-    }
-
-    public EnumFieldExtendedModel(OverrideEnum e1, DefaultEnum d1) {
-        overrideEnum = e1;
-        defaultEnum = d1;
-    }
-
-    public DefaultEnum getDefaultEnum() {
-        return defaultEnum;
-    }
-
-    public void setDefaultEnum(DefaultEnum defaultEnum) {
-        this.defaultEnum = defaultEnum;
-    }
-
-    public void setOverrideEnum(OverrideEnum overrideEnum) {
-        this.overrideEnum = overrideEnum;
-    }
-
-    public OverrideEnum getOverrideEnum() {
-        return overrideEnum;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java
deleted file mode 100644
index be2f01f5..00000000
--- a/library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class FloatFieldAnnotatedModel {
-    private Float objectFloat;
-    private float rawFloat;
-    private Long id;
-
-    public FloatFieldAnnotatedModel() {}
-
-    public FloatFieldAnnotatedModel(Float objectFloat) {
-        this.objectFloat = objectFloat;
-    }
-
-    public FloatFieldAnnotatedModel(float rawFloat) {
-        this.rawFloat = rawFloat;
-    }
-
-    public Float getFloat() {
-        return objectFloat;
-    }
-
-    public float getRawFloat() {
-        return rawFloat;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/FloatFieldExtendedModel.java b/library/src/test/java/com/orm/model/FloatFieldExtendedModel.java
deleted file mode 100644
index e79f1a4b..00000000
--- a/library/src/test/java/com/orm/model/FloatFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class FloatFieldExtendedModel extends SugarRecord {
-    private Float objectFloat;
-    private float rawFloat;
-
-    public FloatFieldExtendedModel() {}
-
-    public FloatFieldExtendedModel(Float objectFloat) {
-        this.objectFloat = objectFloat;
-    }
-
-    public FloatFieldExtendedModel(float rawFloat) {
-        this.rawFloat = rawFloat;
-    }
-
-    public Float getFloat() {
-        return objectFloat;
-    }
-
-    public float getRawFloat() {
-        return rawFloat;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java b/library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java
deleted file mode 100644
index 64f8436b..00000000
--- a/library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class IncompleteAnnotatedModel {
-    // An annotated model must provide a Long id field. A setter or getter is optional
-    public IncompleteAnnotatedModel() {}
-}
diff --git a/library/src/test/java/com/orm/model/IntUniqueModel.java b/library/src/test/java/com/orm/model/IntUniqueModel.java
deleted file mode 100644
index 7a03e3d0..00000000
--- a/library/src/test/java/com/orm/model/IntUniqueModel.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.Unique;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-public class IntUniqueModel extends SugarRecord {
-
-    @Unique
-    private int value;
-
-    public IntUniqueModel() { }
-
-    public IntUniqueModel(int value) {
-        this.value = value;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java
deleted file mode 100644
index e486d5db..00000000
--- a/library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class IntegerFieldAnnotatedModel {
-    private Integer integer;
-    private int rawInteger;
-    public Long id;
-
-    public IntegerFieldAnnotatedModel() {}
-
-    public IntegerFieldAnnotatedModel(Integer integer) {
-        this.integer = integer;
-    }
-
-    public IntegerFieldAnnotatedModel(int rawInteger) {
-        this.rawInteger = rawInteger;
-    }
-
-    public Integer getInteger() {
-        return integer;
-    }
-
-    public int getInt() {
-        return rawInteger;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java b/library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java
deleted file mode 100644
index 407979a3..00000000
--- a/library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class IntegerFieldExtendedModel extends SugarRecord {
-    private Integer integer;
-    private int rawInteger;
-
-    public IntegerFieldExtendedModel() {}
-
-    public IntegerFieldExtendedModel(Integer integer) {
-        this.integer = integer;
-    }
-
-    public IntegerFieldExtendedModel(int rawInteger) {
-        this.rawInteger = rawInteger;
-    }
-
-    public Integer getInteger() {
-        return integer;
-    }
-
-    public int getInt() {
-        return rawInteger;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java
deleted file mode 100644
index 7f2cd539..00000000
--- a/library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class LongFieldAnnotatedModel {
-    private Long objectLong;
-    private long rawLong;
-    private Long id;
-
-    public LongFieldAnnotatedModel() {}
-
-    public LongFieldAnnotatedModel(Long objectLong) {
-        this.objectLong = objectLong;
-    }
-
-    public LongFieldAnnotatedModel(long rawLong) {
-        this.rawLong = rawLong;
-    }
-
-    public Long getLong() {
-        return objectLong;
-    }
-
-    public long getRawLong() {
-        return rawLong;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/LongFieldExtendedModel.java b/library/src/test/java/com/orm/model/LongFieldExtendedModel.java
deleted file mode 100644
index 66bc7d6d..00000000
--- a/library/src/test/java/com/orm/model/LongFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class LongFieldExtendedModel extends SugarRecord {
-    private Long objectLong;
-    private long rawLong;
-
-    public LongFieldExtendedModel() {}
-
-    public LongFieldExtendedModel(Long objectLong) {
-        this.objectLong = objectLong;
-    }
-
-    public LongFieldExtendedModel(long rawLong) {
-        this.rawLong = rawLong;
-    }
-
-    public Long getLong() {
-        return objectLong;
-    }
-
-    public long getRawLong() {
-        return rawLong;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/MultiColumnUniqueModel.java b/library/src/test/java/com/orm/model/MultiColumnUniqueModel.java
deleted file mode 100644
index cea9cd92..00000000
--- a/library/src/test/java/com/orm/model/MultiColumnUniqueModel.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.MultiUnique;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-@MultiUnique("a, b")
-public class MultiColumnUniqueModel extends SugarRecord {
-
-    private int a;
-    private int b;
-
-    public MultiColumnUniqueModel() { }
-
-    public MultiColumnUniqueModel(int a, int b) {
-        this.a = a;
-        this.b = b;
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/model/NestedAnnotatedModel.java b/library/src/test/java/com/orm/model/NestedAnnotatedModel.java
deleted file mode 100644
index f57b2d7a..00000000
--- a/library/src/test/java/com/orm/model/NestedAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class NestedAnnotatedModel {
-    private RelationshipAnnotatedModel nested;
-    private Long id;
-
-    public NestedAnnotatedModel() {}
-
-    public NestedAnnotatedModel(RelationshipAnnotatedModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipAnnotatedModel getNested() {
-        return nested;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedExtendedModel.java b/library/src/test/java/com/orm/model/NestedExtendedModel.java
deleted file mode 100644
index 0b583d95..00000000
--- a/library/src/test/java/com/orm/model/NestedExtendedModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class NestedExtendedModel extends SugarRecord {
-    private RelationshipExtendedModel nested;
-
-    public NestedExtendedModel() {}
-
-    public NestedExtendedModel(RelationshipExtendedModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipExtendedModel getNested() {
-        return nested;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedAAModel.java b/library/src/test/java/com/orm/model/NestedMixedAAModel.java
deleted file mode 100644
index a96500f5..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedAAModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class NestedMixedAAModel extends SugarRecord {
-    private RelationshipMixedAModel nested;
-
-    public NestedMixedAAModel() {}
-
-    public NestedMixedAAModel(RelationshipMixedAModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedAModel getNested() {
-        return nested;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedABModel.java b/library/src/test/java/com/orm/model/NestedMixedABModel.java
deleted file mode 100644
index 2cbae3db..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedABModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class NestedMixedABModel extends SugarRecord {
-    private RelationshipMixedBModel nested;
-
-    public NestedMixedABModel() {}
-
-    public NestedMixedABModel(RelationshipMixedBModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedBModel getNested() {
-        return nested;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedBAModel.java b/library/src/test/java/com/orm/model/NestedMixedBAModel.java
deleted file mode 100644
index 82de9717..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedBAModel.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.annotation.Table;
-
-@Table
-public class NestedMixedBAModel {
-    private RelationshipMixedAModel nested;
-    private Long id;
-
-    public NestedMixedBAModel() {}
-
-    public NestedMixedBAModel(RelationshipMixedAModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedAModel getNested() {
-        return nested;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedBBModel.java b/library/src/test/java/com/orm/model/NestedMixedBBModel.java
deleted file mode 100644
index 6a208b5b..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedBBModel.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.annotation.Table;
-
-@Table
-public class NestedMixedBBModel {
-    private RelationshipMixedBModel nested;
-    private Long id;
-
-    public NestedMixedBBModel() {}
-
-    public NestedMixedBBModel(RelationshipMixedBModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedBModel getNested() {
-        return nested;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NoSugarModel.java b/library/src/test/java/com/orm/model/NoSugarModel.java
deleted file mode 100644
index 617a99c4..00000000
--- a/library/src/test/java/com/orm/model/NoSugarModel.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.orm.model;
-
-
-public class NoSugarModel {
-    public NoSugarModel() {
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java b/library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java
deleted file mode 100644
index 42b9a4d9..00000000
--- a/library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class RelationshipAnnotatedModel {
-    private SimpleAnnotatedModel simple;
-    private Long id;
-
-    public RelationshipAnnotatedModel() {}
-
-    public RelationshipAnnotatedModel(SimpleAnnotatedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleAnnotatedModel getSimple() {
-        return simple;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/RelationshipExtendedModel.java b/library/src/test/java/com/orm/model/RelationshipExtendedModel.java
deleted file mode 100644
index 1e4e99bc..00000000
--- a/library/src/test/java/com/orm/model/RelationshipExtendedModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class RelationshipExtendedModel extends SugarRecord {
-    private SimpleExtendedModel simple;
-
-    public RelationshipExtendedModel() {}
-
-    public RelationshipExtendedModel(SimpleExtendedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleExtendedModel getSimple() {
-        return simple;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/RelationshipMixedAModel.java b/library/src/test/java/com/orm/model/RelationshipMixedAModel.java
deleted file mode 100644
index 1afa4a82..00000000
--- a/library/src/test/java/com/orm/model/RelationshipMixedAModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class RelationshipMixedAModel extends SugarRecord {
-    private SimpleAnnotatedModel simple;
-
-    public RelationshipMixedAModel() {}
-
-    public RelationshipMixedAModel(SimpleAnnotatedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleAnnotatedModel getSimple() {
-        return simple;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/RelationshipMixedBModel.java b/library/src/test/java/com/orm/model/RelationshipMixedBModel.java
deleted file mode 100644
index 2197e62f..00000000
--- a/library/src/test/java/com/orm/model/RelationshipMixedBModel.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.annotation.Table;
-
-@Table
-public class RelationshipMixedBModel {
-    private SimpleExtendedModel simple;
-    private Long id;
-
-    public RelationshipMixedBModel() {}
-
-    public RelationshipMixedBModel(SimpleExtendedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleExtendedModel getSimple() {
-        return simple;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java
deleted file mode 100644
index fea8e58e..00000000
--- a/library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class ShortFieldAnnotatedModel {
-    private Short objectShort;
-    private short rawShort;
-    private Long id;
-
-    public ShortFieldAnnotatedModel() {}
-
-    public ShortFieldAnnotatedModel(Short objectShort) {
-        this.objectShort = objectShort;
-    }
-
-    public ShortFieldAnnotatedModel(short rawShort) {
-        this.rawShort = rawShort;
-    }
-
-    public Short getShort() {
-        return objectShort;
-    }
-
-    public short getRawShort() {
-        return rawShort;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ShortFieldExtendedModel.java b/library/src/test/java/com/orm/model/ShortFieldExtendedModel.java
deleted file mode 100644
index 5e90b9f6..00000000
--- a/library/src/test/java/com/orm/model/ShortFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class ShortFieldExtendedModel extends SugarRecord {
-    private Short objectShort;
-    private short rawShort;
-
-    public ShortFieldExtendedModel() {}
-
-    public ShortFieldExtendedModel(Short objectShort) {
-        this.objectShort = objectShort;
-    }
-
-    public ShortFieldExtendedModel(short rawShort) {
-        this.rawShort = rawShort;
-    }
-
-    public Short getShort() {
-        return objectShort;
-    }
-
-    public short getRawShort() {
-        return rawShort;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/SimpleAnnotatedModel.java b/library/src/test/java/com/orm/model/SimpleAnnotatedModel.java
deleted file mode 100644
index 918840ed..00000000
--- a/library/src/test/java/com/orm/model/SimpleAnnotatedModel.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-
-@Table
-public class SimpleAnnotatedModel {
-    private Long id;
-
-    public SimpleAnnotatedModel() {}
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/SimpleExtendedModel.java b/library/src/test/java/com/orm/model/SimpleExtendedModel.java
deleted file mode 100644
index 9040145d..00000000
--- a/library/src/test/java/com/orm/model/SimpleExtendedModel.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-
-public class SimpleExtendedModel extends SugarRecord {
-    public SimpleExtendedModel() {}
-}
diff --git a/library/src/test/java/com/orm/model/SimpleModel.java b/library/src/test/java/com/orm/model/SimpleModel.java
deleted file mode 100644
index b2659084..00000000
--- a/library/src/test/java/com/orm/model/SimpleModel.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class SimpleModel extends SugarRecord {
-    private String str;
-    private int integer;
-    private boolean bool;
-
-    public String getStr() {
-        return str;
-    }
-
-    public void setStr(String str) {
-        this.str = str;
-    }
-
-    public int getInteger() {
-        return integer;
-    }
-
-    public void setInteger(int integer) {
-        this.integer = integer;
-    }
-
-    public boolean isBool() {
-        return bool;
-    }
-
-    public void setBool(boolean bool) {
-        this.bool = bool;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java
deleted file mode 100644
index e3220278..00000000
--- a/library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class StringFieldAnnotatedModel {
-    private String string;
-    private Long id;
-
-    public StringFieldAnnotatedModel() {}
-
-    public StringFieldAnnotatedModel(String string) {
-        this.string = string;
-    }
-
-    public String getString() {
-        return string;
-    }
-
-    public void setString(String string) {
-        this.string = string;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java b/library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java
deleted file mode 100644
index 4b458960..00000000
--- a/library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class StringFieldAnnotatedNoIdModel {
-    private String string;
-
-    public StringFieldAnnotatedNoIdModel() {}
-
-    public StringFieldAnnotatedNoIdModel(String string) {
-        this.string = string;
-    }
-
-    public String getString() {
-        return string;
-    }
-
-    public void setString(String string) {
-        this.string = string;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldExtendedModel.java b/library/src/test/java/com/orm/model/StringFieldExtendedModel.java
deleted file mode 100644
index 9b79bc61..00000000
--- a/library/src/test/java/com/orm/model/StringFieldExtendedModel.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class StringFieldExtendedModel extends SugarRecord {
-    private String string;
-
-    public StringFieldExtendedModel() {}
-
-    public StringFieldExtendedModel(String string) {
-        this.string = string;
-    }
-
-    public String getString() {
-        return string;
-    }
-
-    public void setString(String string) {
-        this.string = string;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java b/library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java
deleted file mode 100644
index 674d53ba..00000000
--- a/library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.Column;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-public class StringFieldExtendedModelAnnotatedColumn extends SugarRecord {
-    @Column(name="anyName")
-    public String name;
-
-    public StringFieldExtendedModelAnnotatedColumn() { }
-
-    public StringFieldExtendedModelAnnotatedColumn(String name) {
-        this.name = name;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/TestRecord.java b/library/src/test/java/com/orm/model/TestRecord.java
deleted file mode 100644
index 64fe7dba..00000000
--- a/library/src/test/java/com/orm/model/TestRecord.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class TestRecord extends SugarRecord {
-
-    private String name;
-
-    public TestRecord() {
-        super();
-    }
-
-    public TestRecord setName(String name) {
-        this.name = name;
-        return this;
-    }
-
-    public String getName() {
-        return name;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/foreignnull/OriginRecord.java b/library/src/test/java/com/orm/model/foreignnull/OriginRecord.java
deleted file mode 100644
index dbcd84bc..00000000
--- a/library/src/test/java/com/orm/model/foreignnull/OriginRecord.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.orm.model.foreignnull;
-
-import com.orm.annotation.Table;
-
-@Table
-public class OriginRecord {
-
-	private Long id;
-	private OriginRecord origin;
-
-	public OriginRecord() {
-	}
-
-	public OriginRecord(Long id, OriginRecord origin) {
-		this.id = id;
-		this.origin = origin;
-	}
-
-
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/OneToManyModel.java b/library/src/test/java/com/orm/model/onetomany/OneToManyModel.java
deleted file mode 100644
index bb7bd96a..00000000
--- a/library/src/test/java/com/orm/model/onetomany/OneToManyModel.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.OneToMany;
-
-import java.util.List;
-
-/**
- * Created by Łukasz Wesołowski on 28.07.2016.
- */
-public class OneToManyModel extends SugarRecord {
-    @OneToMany(targetField = "model")
-    private List<OneToManyRelationModel> models;
-
-    public OneToManyModel() {
-    }
-
-    public OneToManyModel(Long id) {
-        setId(id);
-    }
-
-    public List<OneToManyRelationModel> getModels() {
-        return models;
-    }
-
-    public void setModels(List<OneToManyRelationModel> models) {
-        this.models = models;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java b/library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java
deleted file mode 100644
index 4c17ec56..00000000
--- a/library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-
-/**
- * Created by Łukasz Wesołowski on 28.07.2016.
- */
-public class OneToManyRelationModel extends SugarRecord {
-    private OneToManyModel model;
-
-    public OneToManyRelationModel() {
-    }
-
-    public OneToManyRelationModel(Long id, OneToManyModel model) {
-        setId(id);
-        this.model = model;
-    }
-
-    public OneToManyModel getModel() {
-        return model;
-    }
-
-    public void setModel(OneToManyModel model) {
-        this.model = model;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java b/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java
deleted file mode 100644
index d48e38f0..00000000
--- a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-
-import java.util.List;
-
-/**
- * Created by Łukasz Wesołowski on 27.08.2016.
- */
-public class WithoutOneToManyAnnotationModel extends SugarRecord {
-    private List<OneToManyRelationModel> models;
-
-    public WithoutOneToManyAnnotationModel() {
-    }
-
-    public WithoutOneToManyAnnotationModel(Long id) {
-        setId(id);
-    }
-
-    public List<OneToManyRelationModel> getModels() {
-        return models;
-    }
-
-    public void setModels(List<OneToManyRelationModel> models) {
-        this.models = models;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java b/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java
deleted file mode 100644
index 34e1eb2a..00000000
--- a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-
-/**
- * Created by Łukasz Wesołowski on 27.08.2016.
- */
-public class WithoutOneToManyAnnotationRelationModel extends SugarRecord {
-    private WithoutOneToManyAnnotationModel model;
-
-    public WithoutOneToManyAnnotationRelationModel() {
-    }
-
-    public WithoutOneToManyAnnotationRelationModel(Long id, WithoutOneToManyAnnotationModel model) {
-        setId(id);
-        this.model = model;
-    }
-
-    public WithoutOneToManyAnnotationModel getModel() {
-        return model;
-    }
-
-    public void setModel(WithoutOneToManyAnnotationModel model) {
-        this.model = model;
-    }
-}
diff --git a/library/src/test/java/com/orm/query/QueryBuilderTests.java b/library/src/test/java/com/orm/query/QueryBuilderTests.java
deleted file mode 100644
index 30b220df..00000000
--- a/library/src/test/java/com/orm/query/QueryBuilderTests.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.orm.query;
-
-import com.orm.util.QueryBuilder;
-
-import org.junit.Test;
-
-import static junit.framework.Assert.assertEquals;
-
-public final class QueryBuilderTests {
-
-    @Test(expected=RuntimeException.class)
-    public void noArgumentsTest() {
-        QueryBuilder.generatePlaceholders(0);
-    }
-
-    @Test()
-    public void oneArgumentsTest() {
-        assertEquals("?", QueryBuilder.generatePlaceholders(1));
-    }
-
-    @Test
-    public void twoArgumentsTest() {
-        assertEquals("?,?", QueryBuilder.generatePlaceholders(2));
-    }
-
-    @Test
-    public void manyArgumentsTest() {
-        assertEquals("?,?,?,?,?,?,?,?,?,?", QueryBuilder.generatePlaceholders(10));
-    }
-}
diff --git a/library/src/test/java/com/orm/query/SelectTest.java b/library/src/test/java/com/orm/query/SelectTest.java
deleted file mode 100644
index ad0393bd..00000000
--- a/library/src/test/java/com/orm/query/SelectTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.orm.query;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static junit.framework.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SelectTest {
-
-    @Test
-    public void testMergeCondition(){
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testWhere(){
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void toSqlAllClauses(){
-        String toSql = Select.from(TestRecord.class)
-                .where("foo")
-                .orderBy("doe")
-                .groupBy("john")
-                .limit("5")
-                .offset("10")
-                .toSql();
-        assertEquals("SELECT * FROM TEST_RECORD WHERE foo ORDER BY doe GROUP BY john LIMIT 5 OFFSET 10 ", toSql);
-    }
-
-    @Test
-    public void toSqlNoClauses(){
-        String toSql = Select.from(TestRecord.class)
-                .toSql();
-        assertEquals("SELECT * FROM TEST_RECORD ", toSql);
-    }
-
-    @Test
-    public void toSqlWhereLimitClauses(){
-        String toSql = Select.from(TestRecord.class)
-                .where("foo")
-                .limit("10")
-                .toSql();
-        assertEquals("SELECT * FROM TEST_RECORD WHERE foo LIMIT 10 ", toSql);
-    }
-
-
-    @Test
-    public void testWhereOr(){
-        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("(test = ?  OR prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testAnd(){
-        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where.and(Condition.prop("prop").eq(2));
-
-        assertEquals("(test = ? ) AND (prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testOr(){
-        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where.or(Condition.prop("prop").eq(2));
-
-        assertEquals("(test = ? ) OR (prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testIsNull() {
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").isNull());
-        assertEquals("(test IS NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").eq(null));
-        assertEquals("(test IS NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-    }
-
-    @Test
-    public void testIsNotNull() {
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").isNotNull());
-        assertEquals("(test IS NOT NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").notEq(null));
-        assertEquals("(test IS NOT NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/record/BigDecimalFieldTests.java b/library/src/test/java/com/orm/record/BigDecimalFieldTests.java
deleted file mode 100644
index a877a6af..00000000
--- a/library/src/test/java/com/orm/record/BigDecimalFieldTests.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.BigDecimalFieldAnnotatedModel;
-import com.orm.model.BigDecimalFieldExtendedModel;
-
-import org.junit.After;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.math.BigDecimal;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class BigDecimalFieldTests {
-    private BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
-
-    @Test
-    public void nullBigDecimalExtendedTest() {
-        save(new BigDecimalFieldExtendedModel());
-        BigDecimalFieldExtendedModel model = findById(BigDecimalFieldExtendedModel.class, 1);
-        assertNull(model.getBigDecimal());
-    }
-
-    @Test
-    public void nullBigDecimalAnnotatedTest() {
-        save(new BigDecimalFieldAnnotatedModel());
-        BigDecimalFieldAnnotatedModel model = findById(BigDecimalFieldAnnotatedModel.class, 1);
-        assertNull(model.getBigDecimal());
-    }
-
-    @Test
-    public void bigDecimalExtendedTest() {
-        save(new BigDecimalFieldExtendedModel(decimal));
-        BigDecimalFieldExtendedModel model = findById(BigDecimalFieldExtendedModel.class, 1);
-        assertEquals(decimal, model.getBigDecimal());
-    }
-
-    @Test
-    public void bigDecimalAnnotatedTest() {
-        save(new BigDecimalFieldAnnotatedModel(decimal));
-        BigDecimalFieldAnnotatedModel model = findById(BigDecimalFieldAnnotatedModel.class, 1);
-        assertEquals(decimal, model.getBigDecimal());
-    }
-
-    @After
-    public void after() {
-        decimal = null;
-    }
-}
diff --git a/library/src/test/java/com/orm/record/BooleanFieldTests.java b/library/src/test/java/com/orm/record/BooleanFieldTests.java
deleted file mode 100644
index 3a026a48..00000000
--- a/library/src/test/java/com/orm/record/BooleanFieldTests.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.BooleanFieldAnnotatedModel;
-import com.orm.model.BooleanFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class BooleanFieldTests {
-
-    @Test
-    public void nullBooleanExtendedTest() {
-        save(new BooleanFieldExtendedModel());
-        BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertNull(model.getBoolean());
-    }
-
-    @Test
-    public void nullRawBooleanExtendedTest() {
-        save(new BooleanFieldExtendedModel());
-        BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
-    }
-
-    @Test
-    public void nullBooleanAnnotatedTest() {
-        save(new BooleanFieldAnnotatedModel());
-        BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertNull(model.getBoolean());
-    }
-
-    @Test
-    public void nullRawBooleanAnnotatedTest() {
-        save(new BooleanFieldAnnotatedModel());
-        BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
-    }
-
-////TODO check this method
-//    @Test
-//    public void objectBooleanExtendedTest() {
-//        save(new BooleanFieldExtendedModel(true));
-//        BooleanFieldExtendedModel model = SugarRecord.findById(BooleanFieldExtendedModel.class, 1);
-//        assertEquals(true, model.getBoolean());
-//    }
-
-    @Test
-    public void rawBooleanExtendedTest() {
-        save(new BooleanFieldExtendedModel(true));
-        BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
-    }
-
-//    //TODO check this
-//    @Test
-//    public void objectBooleanAnnotatedTest() {
-//        save(new BooleanFieldAnnotatedModel(true));
-//        BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
-//
-//        if (null != model) {
-//            assertEquals(true, model.getBoolean());
-//        }
-//    }
-
-    @Test
-    public void rawBooleanAnnotatedTest() {
-        save(new BooleanFieldAnnotatedModel(true));
-        BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/ByteArrayFieldTests.java b/library/src/test/java/com/orm/record/ByteArrayFieldTests.java
deleted file mode 100644
index 450823f2..00000000
--- a/library/src/test/java/com/orm/record/ByteArrayFieldTests.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.ByteArrayAnnotatedModel;
-import com.orm.model.ByteArrayExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ByteArrayFieldTests {
-
-    @Test
-    public void nullByteArrayExtendedTest() {
-        byte[] array = "".getBytes();
-        save(new ByteArrayExtendedModel());
-        ByteArrayExtendedModel model = findById(ByteArrayExtendedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-
-    @Test
-    public void nullByteArrayAnnotatedTest() {
-        byte[] array = "".getBytes();
-        save(new ByteArrayAnnotatedModel());
-        ByteArrayAnnotatedModel model = findById(ByteArrayAnnotatedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-
-    @Test
-    public void byteArrayExtendedTest() {
-        byte[] array = "hello".getBytes();
-        save(new ByteArrayExtendedModel(array));
-        ByteArrayExtendedModel model = findById(ByteArrayExtendedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-
-    @Test
-    public void byteArrayAnnotatedTest() {
-        byte[] array = "hello".getBytes();
-        save(new ByteArrayAnnotatedModel(array));
-        ByteArrayAnnotatedModel model = findById(ByteArrayAnnotatedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/CursorTests.java b/library/src/test/java/com/orm/record/CursorTests.java
deleted file mode 100644
index a6036a15..00000000
--- a/library/src/test/java/com/orm/record/CursorTests.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.orm.record;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.database.Cursor;
-import android.os.Build;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.CursorAdapter;
-import android.widget.TextView;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.SimpleModel;
-import com.orm.query.Select;
-
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static junit.framework.Assert.assertNotSame;
-import static junit.framework.Assert.assertSame;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class CursorTests {
-
-    @Test
-    public void testColumnNames() {
-        save(new SimpleModel());
-        Cursor c = Select.from(SimpleModel.class).getCursor();
-        for (String col : new String[]{"STR", "INTEGER", "BOOL", "ID"}) {
-            assertNotSame("Missing column for field: " + col, -1, c.getColumnIndex(col));
-        }
-    }
-    @Test
-    public void testSugarCursor() {
-        save(new SimpleModel());
-        Cursor cursor = Select.from(SimpleModel.class).getCursor();
-        assertNotSame("No _id", -1, cursor.getColumnIndex("_id"));
-        assertSame("_id != ID", cursor.getColumnIndex("_id"), cursor.getColumnIndex("ID"));
-    }
-
-    @Test
-    public void testNoColumn() {
-        save(new SimpleModel());
-        Cursor cursor = Select.from(SimpleModel.class).getCursor();
-        assertSame(-1, cursor.getColumnIndex("nonexistent"));
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    @Test
-    public void testMakeAdapter() {
-        save(new SimpleModel());
-        Cursor c = Select.from(SimpleModel.class).getCursor();
-        CursorAdapter adapter = new CursorAdapter(RuntimeEnvironment.application, c, true) {
-            @Override
-            public View newView(Context context, Cursor cursor, ViewGroup parent) {
-                TextView tv = new TextView(context);
-                String s = cursor.getString(cursor.getColumnIndex("STR"));
-                tv.setText(s);
-                return null;
-            }
-
-            @Override
-            public void bindView(View view, Context context, Cursor cursor) {
-                String s = cursor.getString(cursor.getColumnIndex("STR"));
-                ((TextView) view).setText(s);
-            }
-        };
-
-        Assert.assertNotNull(adapter);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/DoubleFieldTests.java b/library/src/test/java/com/orm/record/DoubleFieldTests.java
deleted file mode 100644
index a05fa3e0..00000000
--- a/library/src/test/java/com/orm/record/DoubleFieldTests.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarRecord;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.DoubleFieldAnnotatedModel;
-import com.orm.model.DoubleFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class DoubleFieldTests {
-
-    @Test
-    public void nullDoubleExtendedTest() {
-        save(new DoubleFieldExtendedModel());
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertNull(model.getDouble());
-    }
-
-    @Test
-    public void nullRawDoubleExtendedTest() {
-        save(new DoubleFieldExtendedModel());
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertEquals(0.0, model.getRawDouble(), 0.0000000001);
-    }
-
-    @Test
-    public void nullDoubleAnnotatedTest() {
-        save(new DoubleFieldAnnotatedModel());
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertNull(model.getDouble());
-    }
-
-    @Test
-    public void nullRawDoubleAnnotatedTest() {
-        save(new DoubleFieldAnnotatedModel());
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertEquals(0.0, model.getRawDouble(), 0.0000000001);
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void objectDoubleExtendedTest() {
-        Double objectDouble = Double.valueOf(25.0);
-        save(new DoubleFieldExtendedModel(objectDouble));
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertEquals(objectDouble, model.getDouble());
-    }
-
-    @Test
-    public void rawDoubleExtendedTest() {
-        save(new DoubleFieldExtendedModel(25.0));
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertEquals(25.0, model.getRawDouble(), 0.0000000001);
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void objectDoubleAnnotatedTest() {
-        Double objectDouble = Double.valueOf(25.0);
-        save(new DoubleFieldAnnotatedModel(objectDouble));
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertEquals(objectDouble, model.getDouble());
-    }
-
-    @Test
-    public void rawDoubleAnnotatedTest() {
-        save(new DoubleFieldAnnotatedModel(25.0));
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertEquals(25.0, model.getRawDouble(), 0.0000000001);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/EnumFieldTests.java b/library/src/test/java/com/orm/record/EnumFieldTests.java
deleted file mode 100644
index 42647b00..00000000
--- a/library/src/test/java/com/orm/record/EnumFieldTests.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.EnumFieldAnnotatedModel;
-import com.orm.model.EnumFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-import static com.orm.model.EnumFieldExtendedModel.DefaultEnum;
-import static com.orm.model.EnumFieldExtendedModel.OverrideEnum;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class EnumFieldTests {
-
-    @Test
-    public void nullDefaultEnumExtendedTest() {
-        save(new EnumFieldExtendedModel());
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNull(model.getDefaultEnum());
-    }
-
-    @Test
-    public void nullOverriddenEnumExtendedTest() {
-        save(new EnumFieldExtendedModel());
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNull(model.getOverrideEnum());
-    }
-    @Test
-    public void nullDefaultEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel());
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNull(model.getDefaultEnum());
-    }
-
-    @Test
-    public void nullOverriddenEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel());
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNull(model.getOverrideEnum());
-    }
-
-    @Test
-    public void defaultEnumExtendedTest() {
-        save(new EnumFieldExtendedModel(OverrideEnum.ONE, DefaultEnum.TWO));
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getDefaultEnum(), DefaultEnum.TWO);
-    }
-
-    @Test
-    public void overriddenEnumExtendedTest() {
-        save(new EnumFieldExtendedModel(OverrideEnum.ONE, DefaultEnum.TWO));
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getOverrideEnum(), OverrideEnum.ONE);
-    }
-
-    @Test
-    public void defaultEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel(EnumFieldAnnotatedModel.OverrideEnum.ONE,
-                EnumFieldAnnotatedModel.DefaultEnum.TWO));
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getDefaultEnum(), EnumFieldAnnotatedModel.DefaultEnum.TWO);
-    }
-
-    @Test
-    public void overriddenEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel(EnumFieldAnnotatedModel.OverrideEnum.ONE,
-                EnumFieldAnnotatedModel.DefaultEnum.TWO));
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getOverrideEnum(), EnumFieldAnnotatedModel.OverrideEnum.ONE);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/FirstAndLastTests.java b/library/src/test/java/com/orm/record/FirstAndLastTests.java
deleted file mode 100644
index 1b6db799..00000000
--- a/library/src/test/java/com/orm/record/FirstAndLastTests.java
+++ /dev/null
@@ -1,199 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.FloatFieldAnnotatedModel;
-import com.orm.model.FloatFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.first;
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.last;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class FirstAndLastTests {
-
-    @Test
-    @SuppressWarnings("all")
-    public void firstExtendedTest() {
-        Float firstObjectFloat = 25F;
-        Float lastObjectFloat = 50F;
-        save(new FloatFieldExtendedModel(firstObjectFloat));
-        save(new FloatFieldExtendedModel(lastObjectFloat));
-        FloatFieldExtendedModel model = first(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(firstObjectFloat, model.getFloat());
-        }
-    }
-
-    @Test
-    public void firstDeletedRecordExtendedTest() {
-        Float second = 25F;
-
-        save(new FloatFieldExtendedModel(15F));
-        save(new FloatFieldExtendedModel(second));
-        save(new FloatFieldExtendedModel(35F));
-        save(new FloatFieldExtendedModel(45F));
-
-        FloatFieldExtendedModel firstRecord = findById(FloatFieldExtendedModel.class, 1);
-        delete(firstRecord);
-        FloatFieldExtendedModel model = first(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(second, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastExtendedTest() {
-        Float last = 50F;
-
-        save(new FloatFieldExtendedModel(25F));
-        save(new FloatFieldExtendedModel(last));
-
-        FloatFieldExtendedModel model = last(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(last, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastDeletedRecordExtendedTest() {
-        Float third = 35F;
-
-        save(new FloatFieldExtendedModel(15F));
-        save(new FloatFieldExtendedModel(25F));
-        save(new FloatFieldExtendedModel(third));
-        save(new FloatFieldExtendedModel(45F));
-
-        FloatFieldExtendedModel lastRecord = findById(FloatFieldExtendedModel.class, 4);
-        delete(lastRecord);
-        FloatFieldExtendedModel model = last(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(third, model.getFloat());
-        }
-    }
-
-    @Test
-    public void nullFirstExtendedTest() {
-        assertNull(first(FloatFieldExtendedModel.class));
-    }
-
-    @Test
-    public void nullLastExtendedTest() {
-        assertNull(last(FloatFieldExtendedModel.class));
-    }
-
-    @Test
-    public void oneItemExtendedTest() {
-        save(new FloatFieldExtendedModel(25F));
-
-        FloatFieldExtendedModel firstModel = first(FloatFieldExtendedModel.class);
-        FloatFieldExtendedModel lastModel = last(FloatFieldExtendedModel.class);
-
-        if (null != firstModel && null != lastModel) {
-            assertEquals(firstModel.getFloat(), lastModel.getFloat());
-        }
-    }
-
-    @Test
-    public void firstAnnotatedTest() {
-        Float first = 25F;
-
-        save(new FloatFieldAnnotatedModel(first));
-        save(new FloatFieldAnnotatedModel(50F));
-
-        FloatFieldAnnotatedModel model = first(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(first, model.getFloat());
-        }
-    }
-
-    @Test
-    public void firstDeletedRecordAnnotatedTest() {
-        Float second = 25F;
-
-        save(new FloatFieldAnnotatedModel(15F));
-        save(new FloatFieldAnnotatedModel(second));
-        save(new FloatFieldAnnotatedModel(35F));
-        save(new FloatFieldAnnotatedModel(45F));
-
-        FloatFieldAnnotatedModel firstRecord = findById(FloatFieldAnnotatedModel.class, 1);
-
-        delete(firstRecord);
-
-        FloatFieldAnnotatedModel model = first(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(second, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastAnnotatedTest() {
-        Float last = 50F;
-
-        save(new FloatFieldAnnotatedModel(25F));
-        save(new FloatFieldAnnotatedModel(last));
-
-        FloatFieldAnnotatedModel model = last(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(last, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastDeletedRecordAnnotatedTest() {
-        Float third = 35F;
-
-        save(new FloatFieldAnnotatedModel(15F));
-        save(new FloatFieldAnnotatedModel(25F));
-        save(new FloatFieldAnnotatedModel(third));
-        save(new FloatFieldAnnotatedModel(45F));
-
-        FloatFieldAnnotatedModel lastRecord = findById(FloatFieldAnnotatedModel.class, 4);
-        delete(lastRecord);
-        FloatFieldAnnotatedModel model = last(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(third, model.getFloat());
-        }
-    }
-
-    @Test
-    public void nullFirstAnnotatedTest() {
-        assertNull(first(FloatFieldAnnotatedModel.class));
-    }
-
-    @Test
-    public void nullLastAnnotatedTest() {
-        assertNull(last(FloatFieldAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneItemAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel(25F));
-
-        FloatFieldAnnotatedModel first = first(FloatFieldAnnotatedModel.class);
-        FloatFieldAnnotatedModel last = last(FloatFieldAnnotatedModel.class);
-
-        if (null != first && null != last) {
-            assertEquals(first.getFloat(), last.getFloat());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/FloatFieldTests.java b/library/src/test/java/com/orm/record/FloatFieldTests.java
deleted file mode 100644
index d76516b9..00000000
--- a/library/src/test/java/com/orm/record/FloatFieldTests.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.FloatFieldAnnotatedModel;
-import com.orm.model.FloatFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@SuppressWarnings("all")
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class FloatFieldTests {
-    Float aFloat = Float.valueOf(25F);
-
-    @Test
-    public void nullFloatExtendedTest() {
-        save(new FloatFieldExtendedModel());
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertNull(model.getFloat());
-    }
-
-    @Test
-    public void nullRawFloatExtendedTest() {
-        save(new FloatFieldExtendedModel());
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertEquals(0F, model.getRawFloat(), 0.0000000001F);
-    }
-
-    @Test
-    public void nullFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel());
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertNull(model.getFloat());
-    }
-
-    @Test
-    public void nullRawFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel());
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertEquals(0F, model.getRawFloat(), 0.0000000001F);
-    }
-
-    @Test
-    public void objectFloatExtendedTest() {
-        save(new FloatFieldExtendedModel(aFloat));
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertEquals(aFloat, model.getFloat());
-    }
-
-    @Test
-    public void rawFloatExtendedTest() {
-        save(new FloatFieldExtendedModel(aFloat.floatValue()));
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertEquals(aFloat.floatValue(), model.getRawFloat(), 0.0000000001F);
-    }
-
-    @Test
-    public void objectFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel(aFloat));
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertEquals(aFloat, model.getFloat());
-    }
-
-    @Test
-    public void rawFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel(aFloat.floatValue()));
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertEquals(aFloat.floatValue(), model.getRawFloat(), 0.0000000001F);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java b/library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java
deleted file mode 100644
index 0053ed96..00000000
--- a/library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.orm.record;
-
-import android.database.sqlite.SQLiteException;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.IncompleteAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.save;
-
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class IncompleteAnnotatedModelTests {
-
-    @Test(expected = SQLiteException.class)
-    public void saveNoIdFieldTest() {
-        save(new IncompleteAnnotatedModel());
-    }
-
-    @Test
-    public void deleteNoIdFieldTest() {
-        assertFalse(delete(new IncompleteAnnotatedModel()));
-    }
-}
diff --git a/library/src/test/java/com/orm/record/IntegerFieldTests.java b/library/src/test/java/com/orm/record/IntegerFieldTests.java
deleted file mode 100644
index faf5fa84..00000000
--- a/library/src/test/java/com/orm/record/IntegerFieldTests.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.IntegerFieldAnnotatedModel;
-import com.orm.model.IntegerFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.sum;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class IntegerFieldTests {
-    private Integer integer = 25;
-
-    @Test
-    public void nullIntegerExtendedTest() {
-        save(new IntegerFieldExtendedModel());
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertNull(model.getInteger());
-    }
-
-    @Test
-    public void nullIntExtendedTest() {
-        save(new IntegerFieldExtendedModel());
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertEquals(0, model.getInt());
-    }
-
-    @Test
-    public void nullIntegerAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel());
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertNull(model.getInteger());
-    }
-
-    @Test
-    public void nullIntAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel());
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertEquals(0, model.getInt());
-    }
-
-    @Test
-    public void integerExtendedTest() {
-        save(new IntegerFieldExtendedModel(integer));
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertEquals(integer, model.getInteger());
-    }
-
-    @Test
-    public void intExtendedTest() {
-        save(new IntegerFieldExtendedModel(integer.intValue()));
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertEquals(integer.intValue(), model.getInt());
-    }
-
-    @Test
-    public void integerAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel(integer));
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertEquals(integer, model.getInteger());
-    }
-
-    @Test
-    public void intAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertEquals(integer.intValue(), model.getInt());
-    }
-
-
-    @Test
-    public void sumTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        assertEquals(2 * integer, sum(IntegerFieldAnnotatedModel.class, "raw_integer"));
-    }
-
-    @Test
-    public void whereSumTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        assertEquals((long) integer, sum(IntegerFieldAnnotatedModel.class,
-                "raw_integer", "id = ?", "1"));
-    }
-
-    @Test
-    public void noSumTest() {
-        assertEquals(0, sum(IntegerFieldAnnotatedModel.class, "raw_integer"));
-    }
-
-    @Test
-    public void brokenSumTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        assertEquals(-1, sum(IntegerFieldAnnotatedModel.class, "wrongfield"));
-    }
-}
diff --git a/library/src/test/java/com/orm/record/ListAllOrderByTests.java b/library/src/test/java/com/orm/record/ListAllOrderByTests.java
deleted file mode 100644
index 548ead23..00000000
--- a/library/src/test/java/com/orm/record/ListAllOrderByTests.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.IntegerFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ListAllOrderByTests {
-
-    @Test
-    public void listAllOrderByEmptyTest() {
-        final List<IntegerFieldExtendedModel> list = listAll(IntegerFieldExtendedModel.class, "id");
-        assertEquals(0L, list.size());
-    }
-
-    @Test
-    public void listAllOrderByIdTest() {
-        for (int i = 1; i <= 100; i++) {
-            save(new IntegerFieldExtendedModel(i));
-        }
-
-        List<IntegerFieldExtendedModel> models = listAll(IntegerFieldExtendedModel.class, "id");
-        assertEquals(100L, models.size());
-
-        Long id = models.get(0).getId();
-
-        for (int i = 1; i < 100; i++) {
-            assertTrue(id < models.get(i).getId());
-        }
-    }
-
-    @Test
-    public void listAllOrderByFieldTest() {
-        for (int i = 1; i <= 100; i++) {
-            save(new IntegerFieldExtendedModel(i));
-        }
-
-        List<IntegerFieldExtendedModel> models = listAll(IntegerFieldExtendedModel.class, "raw_integer");
-
-        assertEquals(100L, models.size());
-
-        int raw = models.get(0).getInt();
-
-        for (int i = 1; i < 100; i++) {
-            assertTrue(raw < models.get(i).getInt());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/LongFieldTests.java b/library/src/test/java/com/orm/record/LongFieldTests.java
deleted file mode 100644
index d1516a42..00000000
--- a/library/src/test/java/com/orm/record/LongFieldTests.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.LongFieldAnnotatedModel;
-import com.orm.model.LongFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@SuppressWarnings("all")
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class LongFieldTests {
-    private Long aLong = Long.valueOf(25L);
-
-    @Test
-    public void nullLongExtendedTest() {
-        save(new LongFieldExtendedModel());
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertNull(model.getLong());
-    }
-
-    @Test
-    public void nullRawLongExtendedTest() {
-        save(new LongFieldExtendedModel());
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertEquals(0L, model.getRawLong());
-    }
-
-    @Test
-    public void nullLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel());
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertNull(model.getLong());
-    }
-
-    @Test
-    public void nullRawLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel());
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertEquals(0L, model.getRawLong());
-    }
-
-    @Test
-    public void objectLongExtendedTest() {
-        save(new LongFieldExtendedModel(aLong));
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertEquals(aLong, model.getLong());
-    }
-
-    @Test
-    public void rawLongExtendedTest() {
-        save(new LongFieldExtendedModel(aLong.longValue()));
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertEquals(aLong.longValue(), model.getRawLong());
-    }
-
-    @Test
-    public void objectLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel(aLong));
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertEquals(aLong, model.getLong());
-    }
-
-    @Test
-    public void rawLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel(aLong.longValue()));
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertEquals(aLong.longValue(), model.getRawLong());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/MultipleSaveTests.java b/library/src/test/java/com/orm/record/MultipleSaveTests.java
deleted file mode 100644
index 73b353ad..00000000
--- a/library/src/test/java/com/orm/record/MultipleSaveTests.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.StringFieldAnnotatedModel;
-import com.orm.model.StringFieldAnnotatedNoIdModel;
-import com.orm.model.StringFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class MultipleSaveTests {
-    private String testString = "Test String";
-    private String anotherString = "Another test";
-
-    @Test
-    public void stringMultipleSaveOriginalExtendedTest() {
-        StringFieldExtendedModel model = new StringFieldExtendedModel(testString);
-        long id = save(model);
-        StringFieldExtendedModel query = findById(StringFieldExtendedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-        }
-
-        model.setString(anotherString);
-
-        assertEquals(id, save(model));
-        assertNull(findById(StringFieldExtendedModel.class, 2));
-    }
-
-    @Test
-    public void stringMultipleSaveQueriedExtendedTest() {
-        StringFieldExtendedModel model = new StringFieldExtendedModel(testString);
-        long id = save(model);
-        StringFieldExtendedModel query = findById(StringFieldExtendedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            query.setString(anotherString);
-            assertEquals(id, save(query));
-            assertNull(findById(StringFieldExtendedModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveOriginalAnnotatedTest() {
-        StringFieldAnnotatedModel model = new StringFieldAnnotatedModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedModel query = findById(StringFieldAnnotatedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            model.setString(anotherString);
-            assertEquals(id, save(model));
-            assertNull(findById(StringFieldAnnotatedModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveQueriedAnnotatedTest() {
-        StringFieldAnnotatedModel model = new StringFieldAnnotatedModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedModel query = findById(StringFieldAnnotatedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            query.setString(anotherString);
-            assertEquals(id, save(query));
-            assertNull(findById(StringFieldAnnotatedModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveOriginalAnnotatedNoIdTest() {
-        StringFieldAnnotatedNoIdModel model = new StringFieldAnnotatedNoIdModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedNoIdModel query = findById(StringFieldAnnotatedNoIdModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            model.setString(anotherString);
-            assertEquals(id, save(model));
-            assertNull(findById(StringFieldAnnotatedNoIdModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveQueriedAnnotatedNoIdTest() {
-        StringFieldAnnotatedNoIdModel model = new StringFieldAnnotatedNoIdModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedNoIdModel query = findById(StringFieldAnnotatedNoIdModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            query.setString(anotherString);
-            assertEquals(id, save(query));
-            assertNull(findById(StringFieldAnnotatedNoIdModel.class, 2));
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedAnnotatedTests.java b/library/src/test/java/com/orm/record/NestedAnnotatedTests.java
deleted file mode 100644
index d7c8ef43..00000000
--- a/library/src/test/java/com/orm/record/NestedAnnotatedTests.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedAnnotatedModel;
-import com.orm.model.RelationshipAnnotatedModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedAnnotatedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedAnnotatedModel.class));
-        assertEquals(0L, count(RelationshipAnnotatedModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        save(new NestedAnnotatedModel(nested));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-        assertEquals(1L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        save(new NestedAnnotatedModel(nested));
-        save(new NestedAnnotatedModel(nested));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-        assertEquals(2L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        save(anotherSimple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        RelationshipAnnotatedModel anotherNested = new RelationshipAnnotatedModel(anotherSimple);
-        save(anotherNested);
-        save(new NestedAnnotatedModel(nested));
-        save(new NestedAnnotatedModel(anotherNested));
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipAnnotatedModel.class));
-        assertEquals(2L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedAnnotatedModel(nested));
-        }
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-        assertEquals(100L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-            save(nested);
-            save(new NestedAnnotatedModel(nested));
-        }
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipAnnotatedModel.class));
-        assertEquals(100L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedAnnotatedModel(nested));
-        }
-
-        List<NestedAnnotatedModel> models = listAll(NestedAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedAnnotatedModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-            save(nested);
-            save(new NestedAnnotatedModel(nested));
-        }
-
-        List<NestedAnnotatedModel> models = listAll(NestedAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedAnnotatedModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedExtendedTests.java b/library/src/test/java/com/orm/record/NestedExtendedTests.java
deleted file mode 100644
index eaf8c120..00000000
--- a/library/src/test/java/com/orm/record/NestedExtendedTests.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedExtendedModel;
-import com.orm.model.RelationshipExtendedModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedExtendedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedExtendedModel.class));
-        assertEquals(0L, count(RelationshipExtendedModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        save(new NestedExtendedModel(nested));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-        assertEquals(1L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        save(new NestedExtendedModel(nested));
-        save(new NestedExtendedModel(nested));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-        assertEquals(2L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-        save(anotherSimple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        RelationshipExtendedModel anotherNested = new RelationshipExtendedModel(anotherSimple);
-        save(anotherNested);
-        save(new NestedExtendedModel(nested));
-        save(new NestedExtendedModel(anotherNested));
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipExtendedModel.class));
-        assertEquals(2L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedExtendedModel(nested));
-        }
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-        assertEquals(100L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-            save(nested);
-            save(new NestedExtendedModel(nested));
-        }
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipExtendedModel.class));
-        assertEquals(100L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedExtendedModel(nested));
-        }
-
-        List<NestedExtendedModel> models = listAll(NestedExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedExtendedModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-            save(nested);
-            save(new NestedExtendedModel(nested));
-        }
-
-        List<NestedExtendedModel> models = listAll(NestedExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedExtendedModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedAATests.java b/library/src/test/java/com/orm/record/NestedMixedAATests.java
deleted file mode 100644
index 9daf3fa9..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedAATests.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedAAModel;
-import com.orm.model.RelationshipMixedAModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedMixedAATests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedAAModel.class));
-        assertEquals(0L, count(RelationshipMixedAModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        save(new NestedMixedAAModel(nested));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(1L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        save(new NestedMixedAAModel(nested));
-        save(new NestedMixedAAModel(nested));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        save(anotherSimple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        RelationshipMixedAModel anotherNested = new RelationshipMixedAModel(anotherSimple);
-        save(anotherNested);
-        save(new NestedMixedAAModel(nested));
-        save(new NestedMixedAAModel(anotherNested));
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedAAModel(nested));
-        }
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedAAModel(nested));
-        }
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedAAModel(nested));
-        }
-
-        List<NestedMixedAAModel> models = listAll(NestedMixedAAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedAAModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedAAModel(nested));
-        }
-
-        List<NestedMixedAAModel> models = listAll(NestedMixedAAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedAAModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedABTests.java b/library/src/test/java/com/orm/record/NestedMixedABTests.java
deleted file mode 100644
index fa16b506..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedABTests.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedABModel;
-import com.orm.model.RelationshipMixedBModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class NestedMixedABTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedABModel.class));
-        assertEquals(0L, count(RelationshipMixedBModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedABModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(1L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedABModel(nested));
-        save(new NestedMixedABModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-        save(anotherSimple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-        RelationshipMixedBModel anotherNested = new RelationshipMixedBModel(anotherSimple);
-
-        save(anotherNested);
-        save(new NestedMixedABModel(nested));
-        save(new NestedMixedABModel(anotherNested));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedABModel(nested));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedABModel(nested));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedABModel(nested));
-        }
-
-        List<NestedMixedABModel> models = listAll(NestedMixedABModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedABModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedABModel(nested));
-        }
-
-        List<NestedMixedABModel> models = listAll(NestedMixedABModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedABModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedBATests.java b/library/src/test/java/com/orm/record/NestedMixedBATests.java
deleted file mode 100644
index c6f07da5..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedBATests.java
+++ /dev/null
@@ -1,151 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarRecord;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedBAModel;
-import com.orm.model.RelationshipMixedAModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedMixedBATests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedBAModel.class));
-        assertEquals(0L, count(RelationshipMixedAModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-
-        save(nested);
-        save(new NestedMixedBAModel(nested));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(1L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-
-        save(nested);
-        save(new NestedMixedBAModel(nested));
-        save(new NestedMixedBAModel(nested));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        save(anotherSimple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        RelationshipMixedAModel anotherNested = new RelationshipMixedAModel(anotherSimple);
-
-        save(anotherNested);
-        save(new NestedMixedBAModel(nested));
-        save(new NestedMixedBAModel(anotherNested));
-
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBAModel(nested));
-        }
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedBAModel(nested));
-        }
-
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBAModel(nested));
-        }
-
-        List<NestedMixedBAModel> models = listAll(NestedMixedBAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBAModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedBAModel(nested));
-        }
-
-        List<NestedMixedBAModel> models = listAll(NestedMixedBAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBAModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedBBTests.java b/library/src/test/java/com/orm/record/NestedMixedBBTests.java
deleted file mode 100644
index 1eeb2a7d..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedBBTests.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedBBModel;
-import com.orm.model.RelationshipMixedBModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class NestedMixedBBTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedBBModel.class));
-        assertEquals(0L, count(RelationshipMixedBModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedBBModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(1L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedBBModel(nested));
-        save(new NestedMixedBBModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-        save(anotherSimple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-        RelationshipMixedBModel anotherNested = new RelationshipMixedBModel(anotherSimple);
-
-        save(anotherNested);
-        save(new NestedMixedBBModel(nested));
-        save(new NestedMixedBBModel(anotherNested));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBBModel(nested));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedBBModel(nested));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBBModel(nested));
-        }
-
-        List<NestedMixedBBModel> models = listAll(NestedMixedBBModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBBModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedBBModel(nested));
-        }
-
-        List<NestedMixedBBModel> models = listAll(NestedMixedBBModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBBModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NoSugarModelTests.java b/library/src/test/java/com/orm/record/NoSugarModelTests.java
deleted file mode 100644
index 08f43154..00000000
--- a/library/src/test/java/com/orm/record/NoSugarModelTests.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NoSugarModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.saveInTx;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NoSugarModelTests {
-
-    @Test
-    public void deleteTest() throws Exception {
-        NoSugarModel model = new NoSugarModel();
-        assertFalse(delete(model));
-    }
-
-    @Test
-    public void saveInTransactionTest() throws Exception {
-        saveInTx(new NoSugarModel(), new NoSugarModel());
-        assertEquals(-1L, count(NoSugarModel.class));
-    }
-}
diff --git a/library/src/test/java/com/orm/record/OneToManyTest.java b/library/src/test/java/com/orm/record/OneToManyTest.java
deleted file mode 100644
index 73a60b57..00000000
--- a/library/src/test/java/com/orm/record/OneToManyTest.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.onetomany.OneToManyRelationModel;
-import com.orm.model.onetomany.OneToManyModel;
-import com.orm.model.onetomany.WithoutOneToManyAnnotationModel;
-import com.orm.model.onetomany.WithoutOneToManyAnnotationRelationModel;
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.List;
-
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.save;
-
-/**
- * Created by Łukasz Wesołowski on 28.07.2016.
- */
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class OneToManyTest {
-    @Test
-    public void shouldSaveWithOneToManyRelation() {
-        List<Long> relationIds = Arrays.asList(1l, 2l, 3l, 4l);
-
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : relationIds) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-
-        Assert.assertTrue(relationIds.contains(result.getModels().get(0).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(1).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(2).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(3).getId()));
-
-        Assert.assertEquals(result, result.getModels().get(0).getModel());
-        Assert.assertEquals(result, result.getModels().get(1).getModel());
-        Assert.assertEquals(result, result.getModels().get(2).getModel());
-        Assert.assertEquals(result, result.getModels().get(3).getModel());
-    }
-
-    @Test
-    public void shouldRemoveOneOfManyToOneRelation() {
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : Arrays.asList(1l, 2l, 3l, 4l)) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-
-        OneToManyRelationModel.deleteAll(OneToManyRelationModel.class, "id = ?", String.valueOf(3l));
-
-        result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(3, result.getModels().size());
-
-        Assert.assertTrue(result.getModels().get(0).getId() != 3l);
-        Assert.assertTrue(result.getModels().get(1).getId() != 3l);
-        Assert.assertTrue(result.getModels().get(2).getId() != 3l);
-    }
-
-    @Test
-    public void shouldNotRemoveRelation() {
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : Arrays.asList(1l, 2l, 3l, 4l)) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        result.getModels().clear();
-
-        save(model);
-
-        result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-    }
-
-    @Test
-    public void shouldNotAddRelation() {
-        List<Long> relationIds = Arrays.asList(1l, 2l, 3l, 4l);
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : relationIds) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        save(new OneToManyRelationModel(5l, null));
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-
-        Assert.assertTrue(relationIds.contains(result.getModels().get(0).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(1).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(2).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(3).getId()));
-
-        Assert.assertEquals(result, result.getModels().get(0).getModel());
-        Assert.assertEquals(result, result.getModels().get(1).getModel());
-        Assert.assertEquals(result, result.getModels().get(2).getModel());
-        Assert.assertEquals(result, result.getModels().get(3).getModel());
-    }
-
-    @Test
-    public void shouldNotInflateList() {
-        List<Long> relationIds = Arrays.asList(1l, 2l, 3l, 4l);
-        WithoutOneToManyAnnotationModel model = new WithoutOneToManyAnnotationModel(1l);
-        save(model);
-
-        for (long i : relationIds) {
-            save(new WithoutOneToManyAnnotationRelationModel(i, model));
-        }
-
-        WithoutOneToManyAnnotationModel result = findById(WithoutOneToManyAnnotationModel.class, 1l);
-
-        Assert.assertEquals(null, result.getModels());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java b/library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java
deleted file mode 100644
index 506e0264..00000000
--- a/library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipAnnotatedModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class RelationshipAnnotatedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipAnnotatedModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-        save(simple);
-        save(new RelationshipAnnotatedModel(simple));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-        save(simple);
-        save(new RelationshipAnnotatedModel(simple));
-        save(new RelationshipAnnotatedModel(simple));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-
-        save(anotherSimple);
-        save(new RelationshipAnnotatedModel(simple));
-        save(new RelationshipAnnotatedModel(anotherSimple));
-
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        List<RelationshipAnnotatedModel> models = listAll(RelationshipAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipAnnotatedModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        List<RelationshipAnnotatedModel> models = listAll(RelationshipAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipAnnotatedModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipExtendedTests.java b/library/src/test/java/com/orm/record/RelationshipExtendedTests.java
deleted file mode 100644
index f9faeedd..00000000
--- a/library/src/test/java/com/orm/record/RelationshipExtendedTests.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipExtendedModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class RelationshipExtendedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipExtendedModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipExtendedModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipExtendedModel(simple));
-        save(new RelationshipExtendedModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-
-        save(anotherSimple);
-        save(new RelationshipExtendedModel(simple));
-        save(new RelationshipExtendedModel(anotherSimple));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        List<RelationshipExtendedModel> models = listAll(RelationshipExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipExtendedModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        List<RelationshipExtendedModel> models = listAll(RelationshipExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipExtendedModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipMixedATests.java b/library/src/test/java/com/orm/record/RelationshipMixedATests.java
deleted file mode 100644
index 35aaa16d..00000000
--- a/library/src/test/java/com/orm/record/RelationshipMixedATests.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipMixedAModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class RelationshipMixedATests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipMixedAModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel = new RelationshipMixedAModel(simple);
-
-        save(simple);
-        save(mixedAModel);
-
-        assertEquals(1L, count(simple.getClass()));
-        assertEquals(1L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel1 = new RelationshipMixedAModel(simple);
-        RelationshipMixedAModel mixedAModel2 = new RelationshipMixedAModel(simple);
-
-
-        save(simple);
-        save(mixedAModel1);
-        save(mixedAModel2);
-
-        assertEquals(1L, count(simple.getClass()));
-        assertEquals(2L, count(mixedAModel1.getClass()));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel = new RelationshipMixedAModel(simple);
-        RelationshipMixedAModel anotherMixedAModel = new RelationshipMixedAModel(anotherSimple);
-
-        save(simple);
-        save(anotherSimple);
-        save(mixedAModel);
-        save(anotherMixedAModel);
-
-        assertEquals(2L, count(simple.getClass()));
-        assertEquals(2L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        final SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel = null;
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            mixedAModel = new RelationshipMixedAModel(simple);
-            save(mixedAModel);
-        }
-
-        assertEquals(1L, count(simple.getClass()));
-        assertEquals(100L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = null;
-        RelationshipMixedAModel mixedAModel = null;
-
-        for (int i = 1; i <= 100; i++) {
-            simple = new SimpleAnnotatedModel();
-            mixedAModel = new RelationshipMixedAModel(simple);
-
-            save(simple);
-            save(mixedAModel);
-        }
-
-        assertEquals(100L, count(simple.getClass()));
-        assertEquals(100L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-        for (int i = 1; i <= 100; i++) {
-            RelationshipMixedAModel mixedAModel = new RelationshipMixedAModel(simple);
-
-            save(simple);
-            save(mixedAModel);
-        }
-
-        List<RelationshipMixedAModel> models = listAll(RelationshipMixedAModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipMixedAModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-            save(simple);
-            save(new RelationshipMixedAModel(simple));
-        }
-
-        List<RelationshipMixedAModel> models = listAll(RelationshipMixedAModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipMixedAModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipMixedBTests.java b/library/src/test/java/com/orm/record/RelationshipMixedBTests.java
deleted file mode 100644
index 7792fce8..00000000
--- a/library/src/test/java/com/orm/record/RelationshipMixedBTests.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipMixedBModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class RelationshipMixedBTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipMixedBModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipMixedBModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipMixedBModel(simple));
-        save(new RelationshipMixedBModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-
-        save(anotherSimple);
-        save(new RelationshipMixedBModel(simple));
-        save(new RelationshipMixedBModel(anotherSimple));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipMixedBModel(simple));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipMixedBModel(simple));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipMixedBModel(simple));
-        }
-        List<RelationshipMixedBModel> models = listAll(RelationshipMixedBModel.class);
-        assertEquals(100, models.size());
-        for (RelationshipMixedBModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipMixedBModel(simple));
-        }
-        List<RelationshipMixedBModel> models = listAll(RelationshipMixedBModel.class);
-        assertEquals(100, models.size());
-        for (RelationshipMixedBModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/ShortFieldTests.java b/library/src/test/java/com/orm/record/ShortFieldTests.java
deleted file mode 100644
index 1a65f676..00000000
--- a/library/src/test/java/com/orm/record/ShortFieldTests.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.ShortFieldAnnotatedModel;
-import com.orm.model.ShortFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@SuppressWarnings("all")
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ShortFieldTests {
-    private Short aShort = Short.valueOf((short) 25);
-
-    @Test
-    public void nullShortExtendedTest() {
-        save(new ShortFieldExtendedModel());
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertNull(model.getShort());
-    }
-
-    @Test
-    public void nullRawShortExtendedTest() {
-        save(new ShortFieldExtendedModel());
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertEquals((short) 0, model.getRawShort());
-    }
-
-    @Test
-    public void nullShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel());
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertNull(model.getShort());
-    }
-
-    @Test
-    public void nullRawShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel());
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertEquals((short) 0, model.getRawShort());
-    }
-
-    @Test
-    public void objectShortExtendedTest() {
-        save(new ShortFieldExtendedModel(aShort));
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertEquals(aShort, model.getShort());
-    }
-
-    @Test
-    public void rawShortExtendedTest() {
-        save(new ShortFieldExtendedModel(aShort.shortValue()));
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertEquals(aShort.shortValue(), model.getRawShort());
-    }
-
-    @Test
-    public void objectShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel(aShort));
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertEquals(aShort, model.getShort());
-    }
-
-    @Test
-    public void rawShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel(aShort.shortValue()));
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertEquals(aShort.shortValue(), model.getRawShort());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java b/library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java
deleted file mode 100644
index a201a9eb..00000000
--- a/library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java
+++ /dev/null
@@ -1,373 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.NamingHelper;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.deleteAll;
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.deleteInTx;
-import static com.orm.SugarRecord.listAll;
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.saveInTx;
-import static com.orm.SugarRecord.find;
-import static com.orm.SugarRecord.findAsIterator;
-import static com.orm.SugarRecord.findWithQuery;
-import static com.orm.SugarRecord.findAll;
-import static com.orm.SugarRecord.findWithQueryAsIterator;
-import static com.orm.SugarRecord.executeQuery;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SimpleAnnotatedModelTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoSaveTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void manySaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void defaultIdTest() throws Exception {
-        assertEquals(1L, save(new SimpleAnnotatedModel()));
-    }
-
-    @Test
-    public void whereCountTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void whereNoCountTest() throws Exception {
-        assertEquals(0L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"1"}));
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(0L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"3"}));
-        assertEquals(0L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"a"}));
-    }
-
-    @Test
-    public void whereBrokenCountTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(-1L, count(SimpleAnnotatedModel.class, "di = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void deleteTest() throws Exception {
-        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-        save(model);
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertTrue(delete(model));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteUnsavedTest() throws Exception {
-        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-        assertFalse(delete(model));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteWrongTest() throws Exception {
-        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-        save(model);
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-
-        Field idField = model.getClass().getDeclaredField("id");
-        idField.setAccessible(true);
-        idField.set(model, Long.MAX_VALUE);
-
-        assertFalse(delete(model));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        assertEquals(100, deleteAll(SimpleAnnotatedModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void deleteAllWhereTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        assertEquals(99, deleteAll(SimpleAnnotatedModel.class, "id > ?", new String[]{"1"}));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionFewTest() throws Exception {
-        SimpleAnnotatedModel first = new SimpleAnnotatedModel();
-        SimpleAnnotatedModel second = new SimpleAnnotatedModel();
-        SimpleAnnotatedModel third = new SimpleAnnotatedModel();
-        save(first);
-        save(second);
-        // Not saving last model
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2, deleteInTx(first, second, third));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionManyTest() throws Exception {
-        List<SimpleAnnotatedModel> models = new ArrayList<>();
-
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-            models.add(model);
-            // Not saving last model
-            if (i < 100) {
-                save(model);
-            }
-        }
-
-        assertEquals(99, count(SimpleAnnotatedModel.class));
-        assertEquals(99, deleteInTx(models));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void saveInTransactionTest() throws Exception {
-        saveInTx(new SimpleAnnotatedModel(), new SimpleAnnotatedModel());
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void listAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        List<SimpleAnnotatedModel> models = listAll(SimpleAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (long i = 1; i <= 100; i++) {
-            assertEquals(Long.valueOf(i), models.get((int) i - 1).getId());
-        }
-    }
-
-    @Test
-    public void findTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-
-        List<SimpleAnnotatedModel> models = find(SimpleAnnotatedModel.class, "id = ?", "2");
-
-        assertEquals(1, models.size());
-        assertEquals(2L, models.get(0).getId().longValue());
-    }
-
-    @Test
-    public void findWithQueryTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        List<SimpleAnnotatedModel> models = findWithQuery(SimpleAnnotatedModel.class, "Select * from " +
-                        NamingHelper.toTableName(SimpleAnnotatedModel.class) +
-                        " where id >= ? ", "50");
-
-        for (SimpleAnnotatedModel model : models) {
-            assertEquals(75L, model.getId(), 25L);
-        }
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void findByIdTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, findById(SimpleAnnotatedModel.class, 1L).getId().longValue());
-    }
-
-    @Test
-    public void findByIdIntegerTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, findById(SimpleAnnotatedModel.class, 1).getId().longValue());
-    }
-
-    @Test
-    public void findByIdStringsNullTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(0, findById(SimpleAnnotatedModel.class, new String[]{""}).size());
-    }
-
-    @Test
-    public void findByIdStringsOneTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"1"});
-        assertEquals(1, models.size());
-        assertEquals(1L, models.get(0).getId().longValue());
-    }
-
-    @Test
-    public void findByIdStringsTwoTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"1", "3"});
-        assertEquals(2, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-    }
-
-    @Test
-    public void findByIdStringsManyTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"1", "3", "6", "10"});
-        assertEquals(4, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdStringsOrderTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"10", "6", "3", "1"});
-        assertEquals(4, models.size());
-        // The order of the query doesn't matter
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdNullTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertNull(findById(SimpleAnnotatedModel.class, 2L));
-    }
-
-    @Test
-    public void findAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        Iterator<SimpleAnnotatedModel> cursor = findAll(SimpleAnnotatedModel.class);
-        for (int i = 1; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleAnnotatedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        Iterator<SimpleAnnotatedModel> cursor = findAsIterator(SimpleAnnotatedModel.class,
-                "id >= ?", "50");
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleAnnotatedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findWithQueryAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        Iterator<SimpleAnnotatedModel> cursor = findWithQueryAsIterator(SimpleAnnotatedModel.class,
-                        "Select * from " +
-                                NamingHelper.toTableName(SimpleAnnotatedModel.class) +
-                                " where id >= ? ", "50");
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleAnnotatedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test(expected=NoSuchElementException.class)
-    public void findAsIteratorOutOfBoundsTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        Iterator<SimpleAnnotatedModel> cursor = findAsIterator(SimpleAnnotatedModel.class,
-                "id = ?", "1");
-        assertTrue(cursor.hasNext());
-        SimpleAnnotatedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a NoSuchElementException
-        cursor.next();
-    }
-
-    @Test(expected=UnsupportedOperationException.class)
-    public void disallowRemoveCursorTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        Iterator<SimpleAnnotatedModel> cursor = findAsIterator(SimpleAnnotatedModel.class, "id = ?", "1");
-        assertTrue(cursor.hasNext());
-        SimpleAnnotatedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a UnsupportedOperationException
-        cursor.remove();
-    }
-
-    @Test
-    public void vacuumTest() throws Exception {
-        executeQuery("Vacuum");
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/record/SimpleExtendedModelTests.java b/library/src/test/java/com/orm/record/SimpleExtendedModelTests.java
deleted file mode 100644
index e809405d..00000000
--- a/library/src/test/java/com/orm/record/SimpleExtendedModelTests.java
+++ /dev/null
@@ -1,382 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.NamingHelper;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.deleteAll;
-import static com.orm.SugarRecord.executeQuery;
-import static com.orm.SugarRecord.find;
-import static com.orm.SugarRecord.findAll;
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.findWithQuery;
-import static com.orm.SugarRecord.findAsIterator;
-import static com.orm.SugarRecord.findWithQueryAsIterator;
-import static com.orm.SugarRecord.deleteInTx;
-import static com.orm.SugarRecord.saveInTx;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SimpleExtendedModelTests {
-    private String id = "id = ?";
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(1L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void twoSaveTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(2L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void manySaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void defaultIdTest() throws Exception {
-        assertEquals(1L, save(new SimpleExtendedModel()));
-    }
-
-    @Test
-    public void whereCountTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(1L, count(SimpleExtendedModel.class, id, new String[]{"1"}));
-    }
-
-    @Test
-    public void whereNoCountTest() throws Exception {
-        assertEquals(0L, count(SimpleExtendedModel.class, id, new String[]{"1"}));
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(0L, count(SimpleExtendedModel.class, id, new String[]{"3"}));
-        assertEquals(0L, count(SimpleExtendedModel.class, id, new String[]{"a"}));
-    }
-
-    @Test
-    public void whereBrokenCountTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(-1L, count(SimpleExtendedModel.class, "di = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void saveMethodTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        model.save();
-        assertEquals(-1L, count(SimpleExtendedModel.class, "di = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void deleteTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        save(model);
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertTrue(delete(model));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteUnsavedTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        assertEquals(0L, count(SimpleExtendedModel.class));
-        assertFalse(delete(model));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteWrongTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        save(model);
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        Field idField = model.getClass().getSuperclass().getDeclaredField("id");
-        idField.setAccessible(true);
-        idField.set(model, Long.MAX_VALUE);
-        assertFalse(delete(model));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteAllTest() throws Exception {
-        int elementNumber = 100;
-        for (int i = 1; i <= elementNumber; i++) {
-            save(new SimpleExtendedModel());
-        }
-        assertEquals(elementNumber, deleteAll(SimpleExtendedModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void deleteAllWhereTest() throws Exception {
-        int elementNumber = 100;
-        for (int i = 1; i <= elementNumber; i++) {
-            save(new SimpleExtendedModel());
-        }
-        assertEquals(elementNumber - 1, deleteAll(SimpleExtendedModel.class, "id > ?", new String[]{"1"}));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionFewTest() throws Exception {
-        SimpleExtendedModel first = new SimpleExtendedModel();
-        SimpleExtendedModel second = new SimpleExtendedModel();
-        SimpleExtendedModel third = new SimpleExtendedModel();
-        save(first);
-        save(second);
-        // Not saving last model
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2, deleteInTx(first, second, third));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionManyTest() throws Exception {
-        long elementNumber = 100;
-        List<SimpleExtendedModel> models = new ArrayList<>();
-        for (int i = 1; i <= elementNumber; i++) {
-            SimpleExtendedModel model = new SimpleExtendedModel();
-            models.add(model);
-            // Not saving last model
-            if (i < elementNumber) {
-                save(model);
-            }
-        }
-        assertEquals(elementNumber - 1, count(SimpleExtendedModel.class));
-        assertEquals(elementNumber - 1, deleteInTx(models));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void saveInTransactionTest() throws Exception {
-        saveInTx(new SimpleExtendedModel(), new SimpleExtendedModel());
-        assertEquals(2L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void listAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-        List<SimpleExtendedModel> models = listAll(SimpleExtendedModel.class);
-        assertEquals(100, models.size());
-        for (long i = 1; i <= 100; i++) {
-            assertEquals(Long.valueOf(i), models.get((int) i - 1).getId());
-        }
-    }
-
-    @Test
-    public void findTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        List<SimpleExtendedModel> models = find(SimpleExtendedModel.class, "id = ?", "2");
-        assertEquals(1, models.size());
-        assertEquals(Long.valueOf(2L), models.get(0).getId());
-    }
-
-    @Test
-    public void findWithQueryTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-        List<SimpleExtendedModel> models = findWithQuery(SimpleExtendedModel.class, "Select * from " +
-                                          NamingHelper.toTableName(SimpleExtendedModel.class) +
-                                          " where id >= ? ", "50");
-        for (SimpleExtendedModel model : models) {
-            assertEquals(75, model.getId(), 25L);
-        }
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void findByIdTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(Long.valueOf(1L), findById(SimpleExtendedModel.class, 1L).getId());
-    }
-
-    @Test
-    public void findByIdIntegerTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(Long.valueOf(1L), findById(SimpleExtendedModel.class, 1).getId());
-    }
-
-    @Test
-    public void findByIdStringsNullTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(0, findById(SimpleExtendedModel.class, new String[]{""}).size());
-    }
-
-    @Test
-    public void findByIdStringsOneTest() throws Exception {
-        save(new SimpleExtendedModel());
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"1"});
-        assertEquals(1, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-    }
-
-    @Test
-    public void findByIdStringsTwoTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"1", "3"});
-
-        assertEquals(2, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-    }
-
-    @Test
-    public void findByIdStringsManyTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"1", "3", "6", "10"});
-
-        assertEquals(4, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdStringsOrderTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"10", "6", "3", "1"});
-
-        assertEquals(4, models.size());
-        // The order of the query doesn't matter
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdNullTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertNull(findById(SimpleExtendedModel.class, 2L));
-    }
-
-    @Test
-    public void findAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        Iterator<SimpleExtendedModel> cursor = findAll(SimpleExtendedModel.class);
-
-        for (int i = 1; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleExtendedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        Iterator<SimpleExtendedModel> cursor = findAsIterator(SimpleExtendedModel.class, "id >= ?", "50");
-
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleExtendedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findWithQueryAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        Iterator<SimpleExtendedModel> cursor = findWithQueryAsIterator(SimpleExtendedModel.class,
-                                                    "Select * from " +
-                                                    NamingHelper.toTableName(SimpleExtendedModel.class) +
-                                                    " where id >= ? ", "50");
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleExtendedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test(expected=NoSuchElementException.class)
-    public void findAsIteratorOutOfBoundsTest() throws Exception {
-        save(new SimpleExtendedModel());
-        Iterator<SimpleExtendedModel> cursor = findAsIterator(SimpleExtendedModel.class, id, "1");
-        assertTrue(cursor.hasNext());
-        SimpleExtendedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a NoSuchElementException
-        cursor.next();
-    }
-
-    @Test(expected=UnsupportedOperationException.class)
-    public void disallowRemoveCursorTest() throws Exception {
-        save(new SimpleExtendedModel());
-        Iterator<SimpleExtendedModel> cursor = findAsIterator(SimpleExtendedModel.class, id, "1");
-        assertTrue(cursor.hasNext());
-        SimpleExtendedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a UnsupportedOperationException
-        cursor.remove();
-    }
-
-    @Test
-    public void vacuumTest() throws Exception {
-        executeQuery("Vacuum");
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/record/StringFieldTests.java b/library/src/test/java/com/orm/record/StringFieldTests.java
deleted file mode 100644
index d9641ad7..00000000
--- a/library/src/test/java/com/orm/record/StringFieldTests.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.StringFieldAnnotatedModel;
-import com.orm.model.StringFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class StringFieldTests {
-    private String string = "Test String";
-
-    @Test
-    public void nullStringExtendedTest() {
-        save(new StringFieldExtendedModel());
-        StringFieldExtendedModel model = findById(StringFieldExtendedModel.class, 1);
-        assertNull(model.getString());
-    }
-
-    @Test
-    public void nullStringAnnotatedTest() {
-        save(new StringFieldAnnotatedModel());
-        StringFieldAnnotatedModel model = findById(StringFieldAnnotatedModel.class, 1);
-        assertNull(model.getString());
-    }
-
-    @Test
-    public void stringExtendedTest() {
-        save(new StringFieldExtendedModel(string));
-        StringFieldExtendedModel model = findById(StringFieldExtendedModel.class, 1);
-        assertEquals(string, model.getString());
-    }
-
-    @Test
-    public void stringAnnotatedTest() {
-        save(new StringFieldAnnotatedModel(string));
-        StringFieldAnnotatedModel model = findById(StringFieldAnnotatedModel.class, 1);
-        assertEquals(string, model.getString());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/UpdateInTxTest.java b/library/src/test/java/com/orm/record/UpdateInTxTest.java
deleted file mode 100644
index 2c5a032f..00000000
--- a/library/src/test/java/com/orm/record/UpdateInTxTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.orm.record;
-
-import com.orm.SugarRecord;
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class UpdateInTxTest {
-
-    @Test
-    public void testUpdateInTx() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        Long id = SugarRecord.save(record);
-        record.setId(id);
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("lalala");
-
-        Long id1 = SugarRecord.save(record1);
-        record1.setId(id1);
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("lalala");
-
-        Long id2 = SugarRecord.save(record2);
-        record2.setId(id2);
-
-        final TestRecord record3 = new TestRecord();
-        record3.setName("lalala");
-
-        Long id3 = SugarRecord.save(record3);
-        record3.setId(id3);
-
-        final TestRecord record4 = new TestRecord();
-        record4.setName("lalala");
-
-        Long id4 = SugarRecord.save(record4);
-        record.setId(id4);
-
-        record.setName("fulano");
-        record1.setName("fulano");
-        record2.setName("fulano");
-        record3.setName("fulano");
-        record4.setName("fulano");
-
-        SugarRecord.updateInTx(record, record1, record2, record3, record4);
-
-        List<TestRecord> list = SugarRecord.listAll(TestRecord.class);
-
-        for (TestRecord r: list) {
-            Assert.assertEquals(record.getName(), r.getName());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/util/ContextUtilTest.java b/library/src/test/java/com/orm/util/ContextUtilTest.java
deleted file mode 100644
index 9ce16c7d..00000000
--- a/library/src/test/java/com/orm/util/ContextUtilTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.orm.util;
-
-import android.content.Context;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarContext;
-import com.orm.dsl.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertNull;
-import static com.orm.util.ContextUtil.*;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ContextUtilTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        ContextUtil contextUtil = ContextUtil.class.getDeclaredConstructor().newInstance();
-        assertNull(contextUtil);
-    }
-
-
-    @Test
-    public void testInitContext() {
-        assertNotNull(getContext());
-    }
-
-    @Test
-    public void testGetAssets() {
-        assertNotNull(getAssets());
-    }
-
-    @Test
-    public void testGetPackageManager() {
-        assertNotNull(getPackageManager());
-    }
-
-    @Test
-    public void testGetPackageName() {
-        assertNotNull(getPackageName());
-    }
-
-    @Test
-    public void testGetPreferences() {
-        assertNotNull(getSharedPreferences("lala", Context.MODE_PRIVATE));
-    }
-
-    @Test
-    public void testTerminateContext() {
-        SugarContext.terminate();
-        assertNull(getContext());
-    }
-}
diff --git a/library/src/test/java/com/orm/util/KeyWordUtilTest.java b/library/src/test/java/com/orm/util/KeyWordUtilTest.java
deleted file mode 100644
index 417f1b21..00000000
--- a/library/src/test/java/com/orm/util/KeyWordUtilTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.orm.util;
-
-import org.junit.Test;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
-
-/**
- * @author jonatan.salas
- */
-public final class KeyWordUtilTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        KeyWordUtil keyWordUtil = KeyWordUtil.class.getDeclaredConstructor().newInstance();
-        assertNull(keyWordUtil);
-    }
-
-    @Test
-    public void testKeyWord() {
-        assertEquals(true, KeyWordUtil.isKeyword("SELECT"));
-        assertEquals(true, KeyWordUtil.isKeyword("TRANSACTION"));
-        assertEquals(true, KeyWordUtil.isKeyword("MATCH"));
-        assertEquals(true, KeyWordUtil.isKeyword("AS"));
-        assertEquals(true, KeyWordUtil.isKeyword("NOTNULL"));
-        assertEquals(true, KeyWordUtil.isKeyword("NOT"));
-        assertEquals(false, KeyWordUtil.isKeyword("PERSONS"));
-        assertEquals(false, KeyWordUtil.isKeyword("NAME"));
-        assertEquals(false, KeyWordUtil.isKeyword("LOCATION"));
-    }
-
-    @Test
-    public void testNullKeyword() {
-        assertEquals(false, KeyWordUtil.isKeyword(null));
-    }
-}
diff --git a/library/src/test/java/com/orm/util/MigrationFileParserTest.java b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
deleted file mode 100644
index 9b2d87ce..00000000
--- a/library/src/test/java/com/orm/util/MigrationFileParserTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.orm.util;
-
-import org.junit.Test;
-
-import java.lang.String;
-
-import static junit.framework.Assert.assertEquals;
-
-public final class MigrationFileParserTest {
-
-    @Test
-    public void testSingleLineStatement() {
-        MigrationFileParser singleLineComment = new MigrationFileParser("insert into table--comment");
-
-        String statements[] = singleLineComment.getStatements();
-        assertEquals("Testing single line statement size",1,statements.length);
-        assertEquals("Testing single line statement content","insert into table",statements[0]);
-
-        singleLineComment = new MigrationFileParser("insert into table--comment\n");
-
-        singleLineComment.getStatements();
-        assertEquals("Testing single line statement size",1,statements.length);
-        assertEquals("Testing single line statement content","insert into table",statements[0]);
-    }
-
-    @Test
-    public void testMultiLineComment() {
-        MigrationFileParser multiLineComment = new MigrationFileParser("insert into table /**comment \n new line 2 \n new line 3 */hello");
-
-        String statements[] = multiLineComment.getStatements();
-        assertEquals("Testing multiline statement size",1,statements.length);
-        assertEquals("Testing multiline comment","insert into table hello",statements[0]);
-    }
-
-    @Test
-    public void testMixedComment() {
-        MigrationFileParser mixedComment = new MigrationFileParser("insert into/*multiline\n **comment*/--comment");
-
-        String statements[] = mixedComment.getStatements();
-
-        assertEquals("Testing mixed comment statement size",1,statements.length);
-        assertEquals("Testing mixed comment statments", "insert into", statements[0]);
-    }
-}
diff --git a/library/src/test/java/com/orm/util/NumberComparatorTest.java b/library/src/test/java/com/orm/util/NumberComparatorTest.java
deleted file mode 100644
index aaabf453..00000000
--- a/library/src/test/java/com/orm/util/NumberComparatorTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package com.orm.util;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author jonatan.salas
- */
-public final class NumberComparatorTest {
-    private NumberComparator comparator;
-
-    @Before
-    public void setUp() {
-        comparator = new NumberComparator();
-    }
-
-    @Test
-    public void testNumberComparatorWithoutNumbers() {
-        int result = comparator.compare("hola", "hola");
-        assertEquals(0, result);
-    }
-
-    @Test
-    public void testNumberComparatorWithNumbers() {
-        int result = comparator.compare("1", "2");
-        assertEquals(-1, result);
-    }
-
-    @Test
-    public void testComparatorWithNumbers() {
-        int result = comparator.compare("4", "2");
-        assertEquals(1, result);
-    }
-
-    @Test
-    public void testCompareRight() {
-        int result = comparator.compareRight("hola", "hola");
-        assertEquals(0, result);
-    }
-
-    @Test
-    public void testCharAt() {
-        Character c = NumberComparator.charAt("Hola", 0);
-        assertEquals("H", c.toString());
-    }
-}
diff --git a/library/src/test/java/com/orm/util/ReflectionUtilTest.java b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
deleted file mode 100644
index a93e059a..00000000
--- a/library/src/test/java/com/orm/util/ReflectionUtilTest.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package com.orm.util;
-
-import android.content.ContentValues;
-import android.database.Cursor;
-
-import com.orm.SugarContext;
-import com.orm.SugarRecord;
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-import com.orm.model.foreignnull.OriginRecord;
-import com.orm.query.Select;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ReflectionUtilTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        ReflectionUtil reflectionUtil = ReflectionUtil.class.getDeclaredConstructor().newInstance();
-        Assert.assertNull(reflectionUtil);
-    }
-
-    @Test
-    public void testGetTableFields() {
-        List<Field> fieldList = ReflectionUtil.getTableFields(TestRecord.class);
-        List<String> strings = new ArrayList<>();
-
-        for (Field field: fieldList) {
-            strings.add(field.getName());
-        }
-
-        Assert.assertEquals(true, strings.contains("id"));
-        Assert.assertEquals(true, strings.contains("name"));
-    }
-
-    @Test(expected = NoSuchFieldException.class)
-    public void testAddFieldValueToColumn() throws NoSuchFieldException {
-        SugarContext context = SugarContext.getSugarContext();
-        TestRecord record = new TestRecord();
-        record.setName("lala");
-
-        Field column = TestRecord.class.getField("name");
-        ContentValues values = new ContentValues();
-
-        ReflectionUtil.addFieldValueToColumn(values, column, record, context.getEntitiesMap());
-
-        Assert.assertEquals(record.getName(), values.getAsString("NAME"));
-    }
-
-    @Test
-    public void testSetFieldValueForId() {
-        TestRecord record = new TestRecord();
-        record.setName("Bla bla");
-
-        ReflectionUtil.setFieldValueForId(record, 1L);
-        Assert.assertEquals(1L, record.getId().longValue());
-    }
-
-    @Test
-    public void testGetAllClasses() {
-        List<Class> classes = ReflectionUtil.getDomainClasses();
-        Assert.assertEquals(46, classes.size());
-    }
-
-    @Test(expected = NoSuchFieldException.class)
-    public void testSetFieldValueFromCursor() throws NoSuchFieldException {
-        final TestRecord record = new TestRecord().setName("bla bla");
-        Long id = record.save();
-        record.setId(id);
-
-        Cursor cursor = Select.from(TestRecord.class).getCursor();
-
-        TestRecord testRecord = new TestRecord();
-        Field field = TestRecord.class.getField("name");
-
-        ReflectionUtil.setFieldValueFromCursor(cursor, field, testRecord);
-    }
-
-    @Test
-    public void testForeignNull() throws NoSuchFieldException {
-        final OriginRecord record = new OriginRecord(null,null);
-        SugarRecord.save(record);
-    }
-}
diff --git a/library/src/test/java/com/orm/util/SugarConfigTest.java b/library/src/test/java/com/orm/util/SugarConfigTest.java
deleted file mode 100644
index 82943e9e..00000000
--- a/library/src/test/java/com/orm/util/SugarConfigTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.orm.util;
-
-import com.orm.model.TestRecord;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-
-import java.lang.reflect.Field;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * @author jonatan.salas
- */
-public final class SugarConfigTest {
-
-    @Test
-    public void testSetGetFields() {
-        Field[] fields = TestRecord.class.getFields();
-
-        List<Field> fieldList = Arrays.asList(fields);
-        SugarConfig.setFields(TestRecord.class, fieldList);
-
-        Assert.assertEquals(fieldList, SugarConfig.getFields(TestRecord.class));
-    }
-
-    @Test
-    public void testClearCache() {
-        SugarConfig.clearCache();
-        Assert.assertEquals(true, SugarConfig.fields.isEmpty());
-    }
-}
diff --git a/settings.gradle b/settings.gradle
index 507c9f4a..8a8a40bd 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,2 @@
-include ':library'
+include ':sugar'
 include ':example'
diff --git a/sugar/.gitignore b/sugar/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/sugar/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/sugar/build.gradle b/sugar/build.gradle
new file mode 100644
index 00000000..8d3af5b0
--- /dev/null
+++ b/sugar/build.gradle
@@ -0,0 +1,32 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 27
+
+
+
+    defaultConfig {
+        minSdkVersion 14
+        targetSdkVersion 27
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+}
+
+dependencies {
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
+
+    implementation 'com.android.support:appcompat-v7:27.1.1'
+    testImplementation 'junit:junit:4.12'
+}
diff --git a/sugar/proguard-rules.pro b/sugar/proguard-rules.pro
new file mode 100644
index 00000000..f1b42451
--- /dev/null
+++ b/sugar/proguard-rules.pro
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/sugar/src/androidTest/java/mohammadaminha/com/sugar/ExampleInstrumentedTest.java b/sugar/src/androidTest/java/mohammadaminha/com/sugar/ExampleInstrumentedTest.java
new file mode 100644
index 00000000..fbdd9491
--- /dev/null
+++ b/sugar/src/androidTest/java/mohammadaminha/com/sugar/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package mohammadaminha.com.sugar;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("mohammadaminha.com.sugar.test", appContext.getPackageName());
+    }
+}
diff --git a/sugar/src/main/AndroidManifest.xml b/sugar/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..7a377907
--- /dev/null
+++ b/sugar/src/main/AndroidManifest.xml
@@ -0,0 +1,2 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="mohammadaminha.com.sugar" />
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/sugar/src/main/java/mohammadaminha/com/sugar/SchemaGenerator.java
similarity index 76%
rename from library/src/main/java/com/orm/SchemaGenerator.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/SchemaGenerator.java
index c25407fc..4eb17a71 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/SchemaGenerator.java
@@ -1,22 +1,23 @@
-package com.orm;
+package mohammadaminha.com.sugar;
 
+import android.content.Context;
 import android.database.Cursor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
-import com.orm.annotation.Column;
-import com.orm.annotation.MultiUnique;
-import com.orm.annotation.NotNull;
-import com.orm.annotation.Unique;
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.ManifestHelper;
-import com.orm.util.KeyWordUtil;
-import com.orm.util.MigrationFileParser;
-import com.orm.helper.NamingHelper;
-import com.orm.util.NumberComparator;
-import com.orm.util.QueryBuilder;
-import com.orm.util.ReflectionUtil;
+import mohammadaminha.com.sugar.annotation.Column;
+import mohammadaminha.com.sugar.annotation.MultiUnique;
+import mohammadaminha.com.sugar.annotation.NotNull;
+import mohammadaminha.com.sugar.annotation.Table;
+import mohammadaminha.com.sugar.annotation.Unique;
+import mohammadaminha.com.sugar.helper.ManifestHelper;
+import mohammadaminha.com.sugar.helper.NamingHelper;
+import mohammadaminha.com.sugar.util.KeyWordUtil;
+import mohammadaminha.com.sugar.util.MigrationFileParser;
+import mohammadaminha.com.sugar.util.NumberComparator;
+import mohammadaminha.com.sugar.util.QueryBuilder;
+import mohammadaminha.com.sugar.util.ReflectionUtil;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -28,8 +29,9 @@
 import java.util.Collections;
 import java.util.List;
 
-import static com.orm.util.ReflectionUtil.getDomainClasses;
-import static com.orm.util.ContextUtil.getAssets;
+import static mohammadaminha.com.sugar.util.ContextUtil.getAssets;
+import static mohammadaminha.com.sugar.util.ReflectionUtil.getDomainClasses;
+
 
 public class SchemaGenerator {
     public static final String NULL = " NULL";
@@ -38,7 +40,9 @@
     public static final String SUGAR = "Sugar";
 
     //Prevent instantiation
-    private SchemaGenerator() { }
+    public SchemaGenerator() {
+
+    }
 
     public static SchemaGenerator getInstance() {
         return new SchemaGenerator();
@@ -47,16 +51,24 @@ public static SchemaGenerator getInstance() {
     public void createDatabase(SQLiteDatabase sqLiteDatabase) {
         List<Class> domainClasses = getDomainClasses();
         for (Class domain : domainClasses) {
-            createTable(domain, sqLiteDatabase);
-            afterTableCreated(domain,sqLiteDatabase);
+            if (!isTableExists(domain, sqLiteDatabase)) {
+                createTable(domain, sqLiteDatabase);
+                afterTableCreated(domain, sqLiteDatabase);
+            }
         }
 
     }
 
-    public void afterTableCreated(Class<?> table, SQLiteDatabase sqLiteDatabase) {
-        String fileName = table.getSimpleName() + ".sql";
-        executeScript(sqLiteDatabase,"sugar_after_create/" ,fileName);
+    public void createDatabase(SQLiteDatabase sqLiteDatabase, Class domain) {
+        if (!isTableExists(domain, sqLiteDatabase)) {
+            createTable(domain, sqLiteDatabase);
+            afterTableCreated(domain, sqLiteDatabase);
+        }
+    }
 
+    public void afterTableCreated(Class<?> table, SQLiteDatabase sqLiteDatabase) {
+        String fileName = NamingHelper.toTableName(table) + ".sql";
+        executeScript(sqLiteDatabase, "sugar_after_create/", fileName);
     }
 
     public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
@@ -87,7 +99,6 @@ public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
         return columnNames;
     }
 
-
     public void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<Class> tables = getDomainClasses();
         for (Class table : tables) {
@@ -102,7 +113,7 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
             List<String> files = Arrays.asList(getAssets().list("sugar_upgrades"));
             Collections.sort(files, new NumberComparator());
             for (String file : files) {
-                if(ManifestHelper.isDebugEnabled()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i(SUGAR, "filename : " + file);
                 }
 
@@ -110,18 +121,18 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
                     int version = Integer.valueOf(file.replace(".sql", ""));
 
                     if ((version > oldVersion) && (version <= newVersion)) {
-                        executeScript(db,"sugar_upgrades/" ,file);
+                        executeScript(db, "sugar_upgrades/", file);
                         isSuccess = true;
                     }
                 } catch (NumberFormatException e) {
-                    if(ManifestHelper.isDebugEnabled()) {
+                    if (ManifestHelper.isDebugEnabled()) {
                         Log.i(SUGAR, "not a sugar script. ignored." + file);
                     }
                 }
 
             }
         } catch (IOException e) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.e(SUGAR, e.getMessage());
             }
         }
@@ -129,7 +140,7 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
         return isSuccess;
     }
 
-    private void executeScript(SQLiteDatabase db,String path ,String file) {
+    private void executeScript(SQLiteDatabase db, String path, String file) {
         try {
             InputStream is = getAssets().open(path + file);
             BufferedReader reader = new BufferedReader(new InputStreamReader(is));
@@ -139,8 +150,8 @@ private void executeScript(SQLiteDatabase db,String path ,String file) {
                 sb.append(line);
             }
             MigrationFileParser migrationFileParser = new MigrationFileParser(sb.toString());
-            for(String statement: migrationFileParser.getStatements()){
-                if(ManifestHelper.isDebugEnabled()) {
+            for (String statement : migrationFileParser.getStatements()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i("Sugar script", statement);
                 }
                 if (!statement.isEmpty()) {
@@ -149,12 +160,12 @@ private void executeScript(SQLiteDatabase db,String path ,String file) {
             }
 
         } catch (IOException e) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.e(SUGAR, e.getMessage());
             }
         }
 
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Script executed");
         }
     }
@@ -193,7 +204,7 @@ private void addColumns(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         }
 
         for (String command : alterCommands) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i("Sugar", command);
             }
             sqLiteDatabase.execSQL(command);
@@ -201,14 +212,14 @@ private void addColumns(Class<?> table, SQLiteDatabase sqLiteDatabase) {
     }
 
     protected String createTableSQL(Class<?> table) {
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Create table if not exists");
         }
         List<Field> fields = ReflectionUtil.getTableFields(table);
         String tableName = NamingHelper.toTableName(table);
 
-        if(KeyWordUtil.isKeyword(tableName)) {
-            if(ManifestHelper.isDebugEnabled()) {
+        if (KeyWordUtil.isKeyword(tableName)) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "ERROR, SQLITE RESERVED WORD USED IN " + tableName);
             }
         }
@@ -265,11 +276,11 @@ protected String createTableSQL(Class<?> table) {
             sb.append(", UNIQUE(");
 
             String[] constraintFields = constraint.split(",");
-            for(int i = 0; i < constraintFields.length; i++) {
+            for (int i = 0; i < constraintFields.length; i++) {
                 String columnName = NamingHelper.toSQLNameDefault(constraintFields[i]);
                 sb.append(columnName);
 
-                if(i < (constraintFields.length -1)) {
+                if (i < (constraintFields.length - 1)) {
                     sb.append(",");
                 }
             }
@@ -278,7 +289,7 @@ protected String createTableSQL(Class<?> table) {
         }
 
         sb.append(" ) ");
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Creating table " + tableName);
         }
 
@@ -296,5 +307,24 @@ protected void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
             }
         }
     }
+    Cursor cursor;
+
+    public boolean isTableExists(Class table, SQLiteDatabase sqLiteDatabase) {
+
+        try {
+            cursor = sqLiteDatabase.rawQuery("select * from " + table.getSimpleName() + " limit 1" , null);
+            if (cursor != null) {
+                if (cursor.getColumnCount() > 0) {
+                    cursor.close();
+                    return true;
+                }
+                cursor.close();
+            }
+        }catch (Exception e){
+            return false;
+
+        }
+        return false;
+    }
 
 }
diff --git a/library/src/main/java/com/orm/SugarContext.java b/sugar/src/main/java/mohammadaminha/com/sugar/SugarContext.java
similarity index 84%
rename from library/src/main/java/com/orm/SugarContext.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/SugarContext.java
index 61609986..12c620b8 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/SugarContext.java
@@ -1,8 +1,8 @@
-package com.orm;
+package mohammadaminha.com.sugar;
 
 import android.content.Context;
 
-import com.orm.util.ContextUtil;
+import mohammadaminha.com.sugar.util.ContextUtil;
 
 import java.util.Collections;
 import java.util.Map;
@@ -19,7 +19,7 @@ private SugarContext() {
         this.sugarDb = SugarDb.getInstance();
         this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Long>());
     }
-    
+
     public static SugarContext getSugarContext() {
         if (instance == null) {
             throw new NullPointerException("SugarContext has not been initialized properly. Call SugarContext.init(Context) in your Application.onCreate() method and SugarContext.terminate() in your Application.onTerminate() method.");
@@ -28,6 +28,14 @@ public static SugarContext getSugarContext() {
     }
 
     public static void init(Context context) {
+        ContextUtil.init(context);
+        new SugarDb(context);
+        instance = new SugarContext();
+        dbConfiguration = null;
+    }
+
+    public static void init(Context context, String dbName, int version) {
+        new SugarDb(context, dbName, version);
         ContextUtil.init(context);
         instance = new SugarContext();
         dbConfiguration = null;
diff --git a/library/src/main/java/com/orm/SugarDataSource.java b/sugar/src/main/java/mohammadaminha/com/sugar/SugarDataSource.java
similarity index 99%
rename from library/src/main/java/com/orm/SugarDataSource.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/SugarDataSource.java
index d2d9aa2c..c77dde7b 100644
--- a/library/src/main/java/com/orm/SugarDataSource.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/SugarDataSource.java
@@ -1,4 +1,4 @@
-package com.orm;
+package mohammadaminha.com.sugar;
 
 import android.database.Cursor;
 
@@ -7,7 +7,8 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 
-import static com.orm.util.ThreadUtil.*;
+import static mohammadaminha.com.sugar.util.ThreadUtil.doInBackground;
+
 
 /**
  * SugarDataSource provides basic crud operations and simplifies SugarRecord by using callbacks and
diff --git a/sugar/src/main/java/mohammadaminha/com/sugar/SugarDb.java b/sugar/src/main/java/mohammadaminha/com/sugar/SugarDb.java
new file mode 100644
index 00000000..a6f45352
--- /dev/null
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/SugarDb.java
@@ -0,0 +1,170 @@
+package mohammadaminha.com.sugar;
+
+import android.content.Context;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+import android.widget.Toast;
+
+import java.io.File;
+
+import mohammadaminha.com.sugar.helper.ManifestHelper;
+
+import static mohammadaminha.com.sugar.SugarContext.getDbConfiguration;
+import static mohammadaminha.com.sugar.helper.ManifestHelper.getDatabaseVersion;
+
+public class SugarDb extends SQLiteOpenHelper {
+    private static final String LOG_TAG = "Sugar";
+
+    private static SchemaGenerator schemaGenerator;
+    private static SQLiteDatabase db;
+    private int openedConnections = 0;
+
+    public static Context context;
+    public static String dbName;
+    public static SQLiteDatabase writ;
+    public static File dbaddress;
+    public static int version = 1;
+
+    //Prevent instantiation
+    public SugarDb(Context context, String dbname, int version) {
+        super(context, dbname, null, version);
+        this.context = context;
+        this.version = version;
+        this.dbName = dbname;
+        schemaGenerator = SchemaGenerator.getInstance();
+    }
+
+    public SugarDb(Context context) {
+        super(context, ManifestHelper.getDatabaseName(), null, getDatabaseVersion());
+        this.context = context;
+        this.dbName = ManifestHelper.getDatabaseName();
+        this.version = getDatabaseVersion();
+        schemaGenerator = SchemaGenerator.getInstance();
+    }
+
+    public static SugarDb getInstance() {
+        return new SugarDb(context);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase sqLiteDatabase) {
+        //schemaGenerator.createDatabase(sqLiteDatabase);
+
+
+    }
+
+    public boolean database() {
+        boolean res = false;
+        if (checkdb()) {
+            res = true;
+            open();
+
+            writ = getWritableDatabase();
+            schemaGenerator.createDatabase(writ);
+        } else {
+            //getReadableDatabase();
+            open();
+
+            writ = getWritableDatabase();
+            schemaGenerator.createDatabase(writ);
+
+            return createDatabase();
+        }
+        return res;
+    }
+
+    public static boolean createDatabase() {
+        return context.openOrCreateDatabase(dbName, Context.MODE_PRIVATE, null) != null;
+    }
+
+    public static boolean checkdb() {
+        SQLiteDatabase db = null;
+
+        File file = null;
+
+        try {
+            dbaddress = context.getDatabasePath(dbName);
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return dbaddress.exists();
+    }
+
+    public static void open() {
+        try {
+            dbaddress = context.getDatabasePath(dbName);
+            db = SQLiteDatabase.openDatabase(dbaddress.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);
+        } catch (SQLException e) {
+            //Toast.makeText(context, "خطا در خواندن اطلاعات", Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public void onConfigure(SQLiteDatabase db) {
+        final SugarDbConfiguration configuration = getDbConfiguration();
+
+        if (null != configuration) {
+            db.setLocale(configuration.getDatabaseLocale());
+            db.setMaximumSize(configuration.getMaxSize());
+            db.setPageSize(configuration.getPageSize());
+        }
+
+        super.onConfigure(db);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
+        schemaGenerator.doUpgrade(sqLiteDatabase, oldVersion, newVersion);
+    }
+
+    public synchronized SQLiteDatabase getDB() {
+        if (writ == null)
+            if (database()) {
+                return writ;
+            } else {
+                Toast.makeText(context, "خطا در بازیابی دیتابیس", Toast.LENGTH_LONG).show();
+                return null;
+            }
+        else
+            return writ;
+
+    }
+
+    public synchronized SQLiteDatabase getWrite() {
+        if (writ == null)
+            if (database()) {
+                return writ;
+            } else {
+                Toast.makeText(context, "خطا در بازیابی دیتابیس", Toast.LENGTH_LONG).show();
+                return null;
+            }
+        else
+            return writ;
+    }
+
+    @Override
+    public synchronized SQLiteDatabase getReadableDatabase() {
+        if (ManifestHelper.isDebugEnabled()) {
+            Log.d(LOG_TAG, "getReadableDatabase");
+        }
+        openedConnections++;
+        return super.getReadableDatabase();
+    }
+
+    @Override
+    public synchronized void close() {
+        if (ManifestHelper.isDebugEnabled()) {
+            Log.d(LOG_TAG, "getReadableDatabase");
+        }
+        openedConnections--;
+        if (openedConnections == 0) {
+            if (ManifestHelper.isDebugEnabled()) {
+                Log.d(LOG_TAG, "closing");
+            }
+            super.close();
+        }
+    }
+}
diff --git a/library/src/main/java/com/orm/SugarDbConfiguration.java b/sugar/src/main/java/mohammadaminha/com/sugar/SugarDbConfiguration.java
similarity index 97%
rename from library/src/main/java/com/orm/SugarDbConfiguration.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/SugarDbConfiguration.java
index 161fce26..c3251afd 100644
--- a/library/src/main/java/com/orm/SugarDbConfiguration.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/SugarDbConfiguration.java
@@ -1,4 +1,4 @@
-package com.orm;
+package mohammadaminha.com.sugar;
 
 import java.util.Locale;
 
diff --git a/sugar/src/main/java/mohammadaminha/com/sugar/SugarRecord.java b/sugar/src/main/java/mohammadaminha/com/sugar/SugarRecord.java
new file mode 100644
index 00000000..36d7a97a
--- /dev/null
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/SugarRecord.java
@@ -0,0 +1,789 @@
+package mohammadaminha.com.sugar;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteException;
+import android.database.sqlite.SQLiteStatement;
+import android.text.TextUtils;
+import android.util.Log;
+
+import mohammadaminha.com.sugar.annotation.Table;
+import mohammadaminha.com.sugar.annotation.Unique;
+import mohammadaminha.com.sugar.helper.ManifestHelper;
+import mohammadaminha.com.sugar.helper.NamingHelper;
+import mohammadaminha.com.sugar.inflater.EntityInflater;
+import mohammadaminha.com.sugar.util.QueryBuilder;
+import mohammadaminha.com.sugar.util.ReflectionUtil;
+import mohammadaminha.com.sugar.util.SugarCursor;
+
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.NoSuchElementException;
+
+import static mohammadaminha.com.sugar.SugarContext.getSugarContext;
+
+
+public class SugarRecord {
+    public static final String SUGAR = "Sugar";
+
+    @Unique
+    private Long id = null;
+
+    public SugarRecord() {
+        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+        schemaGenerator.createDatabase(SugarDb.getInstance().getDB(), this.getClass());
+
+    }
+
+    public SugarRecord(Class clName) {
+        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+        schemaGenerator.createDatabase(SugarDb.getInstance().getDB(), clName);
+    }
+
+    
+    public void ExecuteQuery(String query) {
+        getSugarDataBase().execSQL(query);
+    }
+
+    public SQLiteDatabase db() {
+        return getSugarContext().getSugarDb().getDB();
+    }
+
+    private static SQLiteDatabase getSugarDataBase() {
+        return getSugarContext().getSugarDb().getDB();
+    }
+
+    public static <T> int deleteAll(Class type) {
+        if (isExist(type))
+            return deleteAll(type, null);
+        else
+            return 0;
+
+    }
+
+    public static <T> int deleteAll(Class type, String whereClause, String... whereArgs) {
+        if (isExist(type))
+            return getSugarDataBase().delete(NamingHelper.toTableName(type), whereClause, whereArgs);
+        else
+            return 0;
+    }
+
+    public static <T> Cursor getCursor(Class type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        if (isExist(type)) {
+            Cursor raw = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, whereArgs,
+                    groupBy, null, orderBy, limit);
+            return new SugarCursor(raw);
+        } else
+            return null;
+
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void saveInTx(T... objects) {
+        saveInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void saveInTx(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
+        try {
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for (T object : objects) {
+                save(object);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            if (ManifestHelper.isDebugEnabled()) {
+                Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+            }
+        } finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void updateInTx(T... objects) {
+        updateInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void updateInTx(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
+        try {
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for (T object : objects) {
+                update(object);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            if (ManifestHelper.isDebugEnabled()) {
+                Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+            }
+        } finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> int deleteInTx(T... objects) {
+        return deleteInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> int deleteInTx(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarDataBase();
+        int deletedRows = 0;
+        try {
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for (T object : objects) {
+                if (delete(object)) {
+                    ++deletedRows;
+                }
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            deletedRows = 0;
+            if (ManifestHelper.isDebugEnabled()) {
+                Log.i(SUGAR, "Error in deleting in transaction " + e.getMessage());
+            }
+        } finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+        return deletedRows;
+    }
+
+    public static <T> List<T> listAll(Class type) {
+        if (isExist(type))
+            return find(type, null, null, null, null, null);
+        else
+            return null;
+    }
+
+    public static <T> List<T> listAll(Class type, String orderBy) {
+        if (isExist(type))
+            return find(type, null, null, null, orderBy, null);
+        else
+            return null;
+    }
+
+    public static <T> T findById(Class type, Long id) {
+        if (isExist(type)) {
+            List<T> list = find(type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
+            if (list.isEmpty()) return null;
+            return list.get(0);
+        } else
+            return null;
+    }
+
+    public static <T> T findById(Class type, Integer id) {
+        if (isExist(type))
+            return findById(type, Long.valueOf(id));
+        else
+            return null;
+    }
+
+    public static <T> List<T> findById(Class type, String... ids) {
+        if (isExist(type)) {
+            String whereClause = "id IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
+            return find(type, whereClause, ids);
+        } else
+            return null;
+    }
+
+    public static <T> T first(Class type) {
+        if (isExist(type)) {
+            List<T> list = findWithQuery(type,
+                    "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID ASC LIMIT 1");
+            if (list.isEmpty()) {
+                return null;
+            }
+            return list.get(0);
+        } else
+            return null;
+    }
+
+    public static <T> T last(Class type) {
+        if (isExist(type)) {
+            List<T> list = findWithQuery(type,
+                    "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID DESC LIMIT 1");
+            if (list.isEmpty()) {
+                return null;
+            }
+            return list.get(0);
+        } else
+            return null;
+    }
+
+    public static <T> Iterator<T> findAll(Class type) {
+        if (isExist(type))
+            return findAsIterator(type, null, null, null, null, null);
+        else
+            return null;
+    }
+
+    public static <T> Iterator<T> findAsIterator(Class type, String whereClause, String... whereArgs) {
+        if (isExist(type))
+            return findAsIterator(type, whereClause, whereArgs, null, null, null);
+        else
+            return null;
+    }
+
+    public static <T> Iterator<T> findWithQueryAsIterator(Class type, String query, String... arguments) {
+        if (isExist(type)) {
+            Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
+            return new CursorIterator<>(type, cursor);
+        } else return null;
+    }
+
+    public static <T> Iterator<T> findAsIterator(Class type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        if (isExist(type)) {
+            Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, whereArgs,
+                    groupBy, null, orderBy, limit);
+            return new CursorIterator<>(type, cursor);
+        } else
+            return null;
+    }
+
+    public static <T> List<T> find(Class type, String whereClause, String... whereArgs) {
+        if (isExist(type))
+            try {
+                return find(type, whereClause, whereArgs, null, null, null);
+            } catch (Exception e) {
+                if (e.getMessage() != null)
+                    if (e.getMessage().contains("has no column") || e.getMessage().contains("no such column")) {
+                        List<Field> columns = ReflectionUtil.getTableFields(type.getClass());
+                        for (Field column : columns) {
+                            existsColumnInTable(getSugarDataBase(), type.getClass(), column);
+                        }
+                        return find(type, whereClause, whereArgs, null, null, null);
+                    }
+            }
+        return null;
+    }
+
+    public static <T> List<T> findWithQuery(Class type, String query, String... arguments) {
+        if (isExist(type)) {
+            Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
+            return getEntitiesFromCursor(cursor, type);
+        } else return null;
+    }
+
+    public static Cursor executeQuery(String query, String... arguments) {
+        return getSugarDataBase().rawQuery(query, arguments);
+    }
+
+    public static List find(Class type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        if (isExist(type)) {
+            try {
+                String args[];
+                args = (whereArgs == null) ? null : replaceArgs(whereArgs);
+
+                Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, args,
+                        groupBy, null, orderBy, limit);
+
+                return getEntitiesFromCursor(cursor, type);
+
+            } catch (Exception e) {
+                if (e.getMessage() != null)
+                    if (e.getMessage().contains("has no column") || e.getMessage().contains("no such column")) {
+                        List<Field> columns = ReflectionUtil.getTableFields(type.getClass());
+                        for (Field column : columns) {
+                            existsColumnInTable(getSugarDataBase(), type.getClass(), column);
+                        }
+                        find(type, whereClause, whereArgs, groupBy, orderBy, limit);
+                    }
+            }
+        } else {
+            new SugarRecord(type);
+        }
+        return null;
+
+    }
+
+    public static <T> List<T> findOneToMany(Class type, String relationFieldName, Object relationObject, Long relationObjectId) {
+        if (isExist(type)) {
+            try {
+                String args[] = {String.valueOf(relationObjectId)};
+                String whereClause = NamingHelper.toSQLNameDefault(relationFieldName) + " = ?";
+
+                Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, args,
+                        null, null, null, null);
+
+                return getEntitiesFromCursor(cursor, type, relationFieldName, relationObject);
+            } catch (Exception e) {
+                if (e.getMessage() != null)
+                    if (e.getMessage().contains("has no column") || e.getMessage().contains("no such column")) {
+                        List<Field> columns = ReflectionUtil.getTableFields(type.getClass());
+                        for (Field column : columns) {
+                            existsColumnInTable(getSugarDataBase(), type.getClass(), column);
+                        }
+                        findOneToMany(type, relationFieldName, relationObject, relationObjectId);
+                    }
+            }
+        } else {
+            new SugarRecord(type);
+        }
+        return null;
+
+    }
+
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class type) {
+        if (isExist(type))
+            try {
+                return getEntitiesFromCursor(cursor, type, null, null);
+            } catch (Exception e) {
+                if (e.getMessage() != null)
+                    if (e.getMessage().contains("has no column") || e.getMessage().contains("no such column")) {
+                        List<Field> columns = ReflectionUtil.getTableFields(type.getClass());
+                        for (Field column : columns) {
+                            existsColumnInTable(getSugarDataBase(), type.getClass(), column);
+                        }
+                        return getEntitiesFromCursor(cursor, type, null, null);
+                    }
+                return null;
+            }
+        else
+            return null;
+    }
+
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class type, String relationFieldName, Object relationObject) {
+        if (isExist(type)) {
+            T entity;
+            List result = new ArrayList<>();
+            try {
+                while (cursor.moveToNext()) {
+                    entity = (T) type.getDeclaredConstructor().newInstance();
+                    new EntityInflater()
+                            .withCursor(cursor)
+                            .withObject(entity)
+                            .withEntitiesMap(getSugarContext().getEntitiesMap())
+                            .withRelationFieldName(relationFieldName)
+                            .withRelationObject(relationObject)
+                            .inflate();
+                    result.add(entity);
+                }
+            } catch (Exception e) {
+                if (e.getMessage() != null)
+                    if (e.getMessage().contains("has no column") || e.getMessage().contains("no such column")) {
+                        List<Field> columns = ReflectionUtil.getTableFields(type.getClass());
+                        for (Field column : columns) {
+                            existsColumnInTable(getSugarDataBase(), type.getClass(), column);
+                        }
+                        return getEntitiesFromCursor(cursor, type, relationFieldName, relationObject);
+                    }
+            } finally {
+                cursor.close();
+            }
+
+            return result;
+        } else
+            return null;
+    }
+
+    public static <T> long count(Class type) {
+        if (isExist(type))
+            return count(type, null, null, null, null, null);
+        else return 0;
+    }
+
+    public static <T> long count(Class type, String whereClause, String... whereArgs) {
+        if (isExist(type))
+            return count(type, whereClause, whereArgs, null, null, null);
+        else return 0;
+    }
+
+    public static <T> long count(Class type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        if (isExist(type)) {
+            long result = -1;
+            String filter = (!TextUtils.isEmpty(whereClause)) ? " where " + whereClause : "";
+            SQLiteStatement sqliteStatement;
+            try {
+                sqliteStatement = getSugarDataBase().compileStatement("SELECT count(*) FROM " + NamingHelper.toTableName(type) + filter);
+            } catch (SQLiteException e) {
+                e.printStackTrace();
+                return result;
+            }
+
+            if (whereArgs != null) {
+                for (int i = whereArgs.length; i != 0; i--) {
+                    sqliteStatement.bindString(i, whereArgs[i - 1]);
+                }
+            }
+
+            try {
+                result = sqliteStatement.simpleQueryForLong();
+            } finally {
+                sqliteStatement.close();
+            }
+
+            return result;
+        } else return 0;
+    }
+
+    public static <T> long sum(Class type, String field) {
+        if (isExist(type))
+            return sum(type, field, null, null);
+        else return 0;
+    }
+
+    public static <T> long sum(Class type, String field, String whereClause, String... whereArgs) {
+        if (isExist(type)) {
+            long result = -1;
+            String filter = (!TextUtils.isEmpty(whereClause)) ? " where " + whereClause : "";
+            SQLiteStatement sqLiteStatement;
+            try {
+                sqLiteStatement = getSugarDataBase().compileStatement("SELECT sum(" + field + ") FROM " + NamingHelper.toTableName(type) + filter);
+            } catch (SQLiteException e) {
+                e.printStackTrace();
+                return result;
+            }
+
+            if (whereArgs != null) {
+                for (int i = whereArgs.length; i != 0; i--) {
+                    sqLiteStatement.bindString(i, whereArgs[i - 1]);
+                }
+            }
+
+            try {
+                result = sqLiteStatement.simpleQueryForLong();
+            } finally {
+                sqLiteStatement.close();
+            }
+
+            return result;
+        } else return 0;
+    }
+
+    public static long save(Object object) {
+        return save(getSugarDataBase(), object);
+    }
+
+    static long save(SQLiteDatabase db, Object object) {
+        long id = 0;
+        try {
+            Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+            List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+            ContentValues values = new ContentValues(columns.size());
+            Field idField = null;
+            for (Field column : columns) {
+                ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+                if (column.getName().equals("ID")) {
+                    idField = column;
+                }
+            }
+
+            boolean isSugarEntity = isSugarEntity(object.getClass());
+            if (isSugarEntity && entitiesMap.containsKey(object)) {
+                values.put("ID", entitiesMap.get(object));
+            }
+
+            id = db.insertWithOnConflict(NamingHelper.toTableName(object.getClass()), null, values,
+                    SQLiteDatabase.CONFLICT_REPLACE);
+
+            if (object.getClass().isAnnotationPresent(Table.class)) {
+                if (idField != null) {
+                    idField.setAccessible(true);
+                    try {
+                        idField.set(object, id);
+                    } catch (IllegalAccessException e) {
+                        e.printStackTrace();
+                    }
+                } else {
+                    entitiesMap.put(object, id);
+                }
+            } else if (SugarRecord.class.isAssignableFrom(object.getClass())) {
+                ((SugarRecord) object).setId(id);
+            }
+
+            if (ManifestHelper.isDebugEnabled()) {
+                Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
+            }
+        } catch (SQLiteException e) {
+            if (e.getMessage() != null)
+                if (e.getMessage().contains("has no column") || e.getMessage().contains("no such column")) {
+                    List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+                    for (Field column : columns) {
+                        existsColumnInTable(db, object.getClass(), column);
+                    }
+                    save(db, object);
+                }
+        }
+
+        return id;
+    }
+
+
+    public static long update(Object object) {
+        return update(getSugarDataBase(), object);
+    }
+
+    static long update(SQLiteDatabase db, Object object) {
+        long rowsEffected = 0;
+        try {
+            Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+            List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+            ContentValues values = new ContentValues(columns.size());
+
+            StringBuilder whereClause = new StringBuilder();
+            List<String> whereArgs = new ArrayList<>();
+
+            for (Field column : columns) {
+                String columnName = NamingHelper.toColumnName(column);
+                if (column.isAnnotationPresent(Unique.class)) {
+                    try {
+                        column.setAccessible(true);
+                        Object columnValue = column.get(object);
+
+                        whereClause.append(columnName).append(" = ?");
+                        whereArgs.add(String.valueOf(columnValue));
+                    } catch (IllegalAccessException e) {
+                        e.printStackTrace();
+                    }
+                } else if (!columnName.equals("ID")) {
+                    ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+                }
+
+            }
+
+            String[] whereArgsArray = whereArgs.toArray(new String[whereArgs.size()]);
+            // Get SugarRecord based on Unique values
+            rowsEffected = db.update(NamingHelper.toTableName(object.getClass()), values, whereClause.toString(), whereArgsArray);
+        } catch (SQLiteException e) {
+            if (e.getMessage() != null)
+                if (e.getMessage().contains("has no column") || e.getMessage().contains("no such column") || e.getMessage().contains("no such column")) {
+                    List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+                    for (Field column : columns) {
+                        existsColumnInTable(db, object.getClass(), column);
+                    }
+                    update(db, object);
+                }
+        }
+        if (rowsEffected == 0) {
+            return update(object);
+        } else {
+            return rowsEffected;
+        }
+    }
+
+    public static boolean isSugarEntity(Class<?> objectClass) {
+        return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
+    }
+
+    public boolean delete() {
+        if (isExist(getClass())) {
+            Long id = getId();
+            Class<?> type = getClass();
+            if (id != null && id > 0L) {
+                if (ManifestHelper.isDebugEnabled()) {
+                    Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
+                }
+                return getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
+            } else {
+                if (ManifestHelper.isDebugEnabled()) {
+                    Log.i(SUGAR, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
+                }
+                return false;
+            }
+        } else return false;
+    }
+
+    public static boolean delete(Object object) {
+        if (isExist(object.getClass())) {
+            Class<?> type = object.getClass();
+            if (type.isAnnotationPresent(Table.class)) {
+                try {
+                    Field field = type.getDeclaredField("ID");
+                    field.setAccessible(true);
+                    Long id = (Long) field.get(object);
+                    if (id != null && id > 0L) {
+                        boolean deleted = getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
+                        if (ManifestHelper.isDebugEnabled()) {
+                            Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
+                        }
+                        return deleted;
+                    } else {
+                        if (ManifestHelper.isDebugEnabled()) {
+                            Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
+                        }
+                        return false;
+                    }
+                } catch (NoSuchFieldException e) {
+                    if (ManifestHelper.isDebugEnabled()) {
+                        Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
+                    }
+                    return false;
+                } catch (IllegalAccessException e) {
+                    if (ManifestHelper.isDebugEnabled()) {
+                        Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
+                    }
+                    return false;
+                }
+            } else if (SugarRecord.class.isAssignableFrom(type)) {
+                return ((SugarRecord) object).delete();
+            } else {
+                if (ManifestHelper.isDebugEnabled()) {
+                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
+                }
+                return false;
+            }
+        } else
+            return false;
+    }
+
+    public long save() {
+        return save(getSugarDataBase(), this);
+    }
+
+    public long update() {
+        return update(getSugarDataBase(), this);
+    }
+
+    @SuppressWarnings("unchecked")
+    void inflate(Cursor cursor) {
+        new EntityInflater()
+                .withCursor(cursor)
+                .withObject(this)
+                .withEntitiesMap(getSugarContext().getEntitiesMap())
+                .inflate();
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    static class CursorIterator<E> implements Iterator<E> {
+        Class<E> type;
+        Cursor cursor;
+
+        public CursorIterator(Class<E> type, Cursor cursor) {
+            this.type = type;
+            this.cursor = cursor;
+        }
+
+        @Override
+        public boolean hasNext() {
+            return cursor != null && !cursor.isClosed() && !cursor.isAfterLast();
+        }
+
+        @Override
+        public E next() {
+            E entity = null;
+            if (cursor == null || cursor.isAfterLast()) {
+                throw new NoSuchElementException();
+            }
+
+            if (cursor.isBeforeFirst()) {
+                cursor.moveToFirst();
+            }
+
+            try {
+                entity = type.getDeclaredConstructor().newInstance();
+                new EntityInflater()
+                        .withCursor(cursor)
+                        .withObject(entity)
+                        .withEntitiesMap(getSugarContext().getEntitiesMap())
+                        .inflate();
+            } catch (Exception e) {
+                e.printStackTrace();
+            } finally {
+                cursor.moveToNext();
+                if (cursor.isAfterLast()) {
+                    cursor.close();
+                }
+            }
+
+            return entity;
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }
+
+    public static String[] replaceArgs(String[] args) {
+
+        String[] replace = new String[args.length];
+        for (int i = 0; i < args.length; i++) {
+
+            replace[i] = (args[i].equals("true")) ? replace[i] = "1" : (args[i].equals("false")) ? replace[i] = "0" : args[i];
+
+        }
+
+        return replace;
+
+    }
+
+    public static Boolean isExist(Class cl) {
+        try {
+            SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+            if (schemaGenerator.isTableExists(cl, SugarDb.getInstance().getDB()))
+                return true;
+            else
+                new SugarRecord(cl);
+        } catch (Exception e) {
+            new SugarRecord(cl);
+            SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+            if (schemaGenerator.isTableExists(cl, SugarDb.getInstance().getDB()))
+                return true;
+        }
+        return true;
+    }
+
+    static void existsColumnInTable(SQLiteDatabase db, Class inTable, Field columnToCheck) {
+        Cursor mCursor = null;
+        try {
+            // Query 1 row
+            mCursor = db.rawQuery("SELECT * FROM " + NamingHelper.toTableName(inTable) + " LIMIT 0", null);
+
+            String colName = NamingHelper.toColumnName(columnToCheck);
+            int i = mCursor.getColumnIndex(colName);// getColumnIndex() gives us the index (0 to ...) of the column - otherwise we get a -1
+            String query = "ALTER TABLE " + NamingHelper.toTableName(inTable) + " ADD COLUMN " + colName;
+            if (i == -1)//alter table add column
+            {
+                String type = QueryBuilder.getColumnType(columnToCheck.getType());
+
+                query += " " + type + " ";
+                switch (type) {
+                    case "INTEGER":
+                    case "FLOAT":
+                        query += " default 0 NULL";
+                        break;
+                    case "BOOLEAN":
+                        query += " default true NULL";
+                        break;
+                    case "TEXT":
+                        query += " default '' NULL";
+                        break;
+                }
+
+                db.execSQL(query);
+            }
+
+        } catch (Exception Exp) {
+            // Something went wrong. Missing the database? The table?
+            Exp.printStackTrace();
+            if (Exp.getMessage().contains("no such table"))
+                new SugarRecord(inTable);
+        } finally {
+            if (mCursor != null) mCursor.close();
+        }
+    }
+
+}
diff --git a/library/src/main/java/com/orm/annotation/Column.java b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Column.java
similarity index 88%
rename from library/src/main/java/com/orm/annotation/Column.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/annotation/Column.java
index ce4c2376..21a749fb 100644
--- a/library/src/main/java/com/orm/annotation/Column.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Column.java
@@ -1,4 +1,4 @@
-package com.orm.annotation;
+package mohammadaminha.com.sugar.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/library/src/main/java/com/orm/annotation/Ignore.java b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Ignore.java
similarity index 85%
rename from library/src/main/java/com/orm/annotation/Ignore.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/annotation/Ignore.java
index d214a559..61fc3b70 100644
--- a/library/src/main/java/com/orm/annotation/Ignore.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Ignore.java
@@ -1,4 +1,4 @@
-package com.orm.annotation;
+package mohammadaminha.com.sugar.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/library/src/main/java/com/orm/annotation/MultiUnique.java b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/MultiUnique.java
similarity index 88%
rename from library/src/main/java/com/orm/annotation/MultiUnique.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/annotation/MultiUnique.java
index fbdaa0df..78b06dfc 100644
--- a/library/src/main/java/com/orm/annotation/MultiUnique.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/MultiUnique.java
@@ -1,4 +1,4 @@
-package com.orm.annotation;
+package mohammadaminha.com.sugar.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
diff --git a/library/src/main/java/com/orm/annotation/NotNull.java b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/NotNull.java
similarity index 85%
rename from library/src/main/java/com/orm/annotation/NotNull.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/annotation/NotNull.java
index f3a6f585..500ccc12 100644
--- a/library/src/main/java/com/orm/annotation/NotNull.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/NotNull.java
@@ -1,4 +1,4 @@
-package com.orm.annotation;
+package mohammadaminha.com.sugar.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/library/src/main/java/com/orm/annotation/OneToMany.java b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/OneToMany.java
similarity index 88%
rename from library/src/main/java/com/orm/annotation/OneToMany.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/annotation/OneToMany.java
index 5423256b..0f1aa448 100644
--- a/library/src/main/java/com/orm/annotation/OneToMany.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/OneToMany.java
@@ -1,4 +1,4 @@
-package com.orm.annotation;
+package mohammadaminha.com.sugar.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/library/src/main/java/com/orm/annotation/Table.java b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Table.java
similarity index 86%
rename from library/src/main/java/com/orm/annotation/Table.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/annotation/Table.java
index 82ffc15b..866b6e8b 100644
--- a/library/src/main/java/com/orm/annotation/Table.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Table.java
@@ -1,4 +1,4 @@
-package com.orm.annotation;
+package mohammadaminha.com.sugar.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/library/src/main/java/com/orm/annotation/Unique.java b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Unique.java
similarity index 85%
rename from library/src/main/java/com/orm/annotation/Unique.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/annotation/Unique.java
index a6027e05..2afdf578 100644
--- a/library/src/main/java/com/orm/annotation/Unique.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/annotation/Unique.java
@@ -1,4 +1,4 @@
-package com.orm.annotation;
+package mohammadaminha.com.sugar.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/library/src/main/java/com/orm/helper/ManifestHelper.java b/sugar/src/main/java/mohammadaminha/com/sugar/helper/ManifestHelper.java
similarity index 95%
rename from library/src/main/java/com/orm/helper/ManifestHelper.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/helper/ManifestHelper.java
index cab85fd2..e9aedbe0 100644
--- a/library/src/main/java/com/orm/helper/ManifestHelper.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/helper/ManifestHelper.java
@@ -1,10 +1,12 @@
-package com.orm.helper;
+package mohammadaminha.com.sugar.helper;
 
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.util.Log;
 
-import static com.orm.util.ContextUtil.*;
+import static mohammadaminha.com.sugar.util.ContextUtil.getPackageManager;
+import static mohammadaminha.com.sugar.util.ContextUtil.getPackageName;
+
 
 /**
  * Helper class for accessing properties in the AndroidManifest
diff --git a/library/src/main/java/com/orm/helper/MultiDexHelper.java b/sugar/src/main/java/mohammadaminha/com/sugar/helper/MultiDexHelper.java
similarity index 94%
rename from library/src/main/java/com/orm/helper/MultiDexHelper.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/helper/MultiDexHelper.java
index 588908cd..b38b0942 100644
--- a/library/src/main/java/com/orm/helper/MultiDexHelper.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/helper/MultiDexHelper.java
@@ -1,4 +1,4 @@
-package com.orm.helper;
+package mohammadaminha.com.sugar.helper;
 
 import android.content.Context;
 import android.content.SharedPreferences;
@@ -14,9 +14,10 @@
 
 import dalvik.system.DexFile;
 
-import static com.orm.util.ContextUtil.getSharedPreferences;
-import static com.orm.util.ContextUtil.getPackageManager;
-import static com.orm.util.ContextUtil.getPackageName;
+import static mohammadaminha.com.sugar.util.ContextUtil.getPackageManager;
+import static mohammadaminha.com.sugar.util.ContextUtil.getPackageName;
+import static mohammadaminha.com.sugar.util.ContextUtil.getSharedPreferences;
+
 
 /**
  * Created by xudshen@hotmail.com on 14/11/13.
diff --git a/library/src/main/java/com/orm/helper/NamingHelper.java b/sugar/src/main/java/mohammadaminha/com/sugar/helper/NamingHelper.java
similarity index 80%
rename from library/src/main/java/com/orm/helper/NamingHelper.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/helper/NamingHelper.java
index 0ae3128b..d83f4552 100644
--- a/library/src/main/java/com/orm/helper/NamingHelper.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/helper/NamingHelper.java
@@ -1,7 +1,7 @@
-package com.orm.helper;
+package mohammadaminha.com.sugar.helper;
 
-import com.orm.annotation.Column;
-import com.orm.annotation.Table;
+import mohammadaminha.com.sugar.annotation.Column;
+import mohammadaminha.com.sugar.annotation.Table;
 
 import java.lang.reflect.Field;
 
@@ -54,10 +54,10 @@ public static String toSQLNameDefault(String camelCased) {
     /**
      * Maps a Java Field object to the database's column name.
      *
-     * @param field  the {@link java.lang.reflect.Field} that will be mapped
+     * @param field  the {@link Field} that will be mapped
      * @return the name of the given Field as represented in the database. If the Field is annotated
-     *         with {@link com.orm.annotation.Column} then the {@link com.orm.annotation.Column#name()} will be
-     *         returned. Else, the Field's {@link java.lang.reflect.Field#getName()} will be
+     *         with {@link Column} then the {@link Column#name()} will be
+     *         returned. Else, the Field's {@link Field#getName()} will be
      *         converted from CamelCase to UNDER_SCORE notation
      */
     public static String toColumnName(Field field) {
@@ -72,9 +72,9 @@ public static String toColumnName(Field field) {
     /**
      * Maps a Java Class to the name of the class.
      *
-     * @param table  the generic {@link java.lang.Class} that defines a database table
-     * @return if the given class is annotated with {@link com.orm.annotation.Table} then the value for
-     *         {@link com.orm.annotation.Table#name()} will be returned. Else, the class' simple name will
+     * @param table  the generic {@link Class} that defines a database table
+     * @return if the given class is annotated with {@link Table} then the value for
+     *         {@link Table#name()} will be returned. Else, the class' simple name will
      *         be converted from CamelCase to UNDER_SCORE notation
      */
     public static String toTableName(Class<?> table) {
diff --git a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java b/sugar/src/main/java/mohammadaminha/com/sugar/helper/SugarTransactionHelper.java
similarity index 91%
rename from library/src/main/java/com/orm/helper/SugarTransactionHelper.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/helper/SugarTransactionHelper.java
index dbb9ca26..04b11f09 100644
--- a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/helper/SugarTransactionHelper.java
@@ -1,9 +1,10 @@
-package com.orm.helper;
+package mohammadaminha.com.sugar.helper;
 
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
-import static com.orm.SugarContext.getSugarContext;
+import static mohammadaminha.com.sugar.SugarContext.getSugarContext;
+
 
 public final class SugarTransactionHelper {
     private static final String LOG_TAG = SugarTransactionHelper.class.getSimpleName();
diff --git a/library/src/main/java/com/orm/inflater/EntityInflater.java b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/EntityInflater.java
similarity index 81%
rename from library/src/main/java/com/orm/inflater/EntityInflater.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/inflater/EntityInflater.java
index 5d71e5df..df574502 100644
--- a/library/src/main/java/com/orm/inflater/EntityInflater.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/EntityInflater.java
@@ -1,9 +1,14 @@
-package com.orm.inflater;
+package mohammadaminha.com.sugar.inflater;
 
 import android.database.Cursor;
-import com.orm.SugarRecord;
-import com.orm.inflater.field.*;
-import com.orm.util.ReflectionUtil;
+
+import mohammadaminha.com.sugar.SugarRecord;
+import mohammadaminha.com.sugar.inflater.field.DefaultFieldInflater;
+import mohammadaminha.com.sugar.inflater.field.EntityFieldInflater;
+import mohammadaminha.com.sugar.inflater.field.FieldInflater;
+import mohammadaminha.com.sugar.inflater.field.ListFieldInflater;
+import mohammadaminha.com.sugar.inflater.field.RelationEntityFieldInflater;
+import mohammadaminha.com.sugar.util.ReflectionUtil;
 
 import java.lang.reflect.Field;
 import java.util.List;
diff --git a/library/src/main/java/com/orm/inflater/field/DefaultFieldInflater.java b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/DefaultFieldInflater.java
similarity index 81%
rename from library/src/main/java/com/orm/inflater/field/DefaultFieldInflater.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/DefaultFieldInflater.java
index d1cd8542..5e0109a8 100644
--- a/library/src/main/java/com/orm/inflater/field/DefaultFieldInflater.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/DefaultFieldInflater.java
@@ -1,7 +1,8 @@
-package com.orm.inflater.field;
+package mohammadaminha.com.sugar.inflater.field;
 
 import android.database.Cursor;
-import com.orm.util.ReflectionUtil;
+
+import mohammadaminha.com.sugar.util.ReflectionUtil;
 
 import java.lang.reflect.Field;
 
diff --git a/library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/EntityFieldInflater.java
similarity index 84%
rename from library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/EntityFieldInflater.java
index 9eda8f8e..09bc0538 100644
--- a/library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/EntityFieldInflater.java
@@ -1,9 +1,10 @@
-package com.orm.inflater.field;
+package mohammadaminha.com.sugar.inflater.field;
 
 import android.database.Cursor;
 import android.util.Log;
-import com.orm.SugarRecord;
-import com.orm.helper.NamingHelper;
+
+import mohammadaminha.com.sugar.SugarRecord;
+import mohammadaminha.com.sugar.helper.NamingHelper;
 
 import java.lang.reflect.Field;
 
diff --git a/library/src/main/java/com/orm/inflater/field/FieldInflater.java b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/FieldInflater.java
similarity index 91%
rename from library/src/main/java/com/orm/inflater/field/FieldInflater.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/FieldInflater.java
index 87795340..3ff31724 100644
--- a/library/src/main/java/com/orm/inflater/field/FieldInflater.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/FieldInflater.java
@@ -1,4 +1,4 @@
-package com.orm.inflater.field;
+package mohammadaminha.com.sugar.inflater.field;
 
 import android.database.Cursor;
 
diff --git a/library/src/main/java/com/orm/inflater/field/ListFieldInflater.java b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/ListFieldInflater.java
similarity index 90%
rename from library/src/main/java/com/orm/inflater/field/ListFieldInflater.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/ListFieldInflater.java
index 5fa7496c..fb272bdb 100644
--- a/library/src/main/java/com/orm/inflater/field/ListFieldInflater.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/ListFieldInflater.java
@@ -1,9 +1,10 @@
-package com.orm.inflater.field;
+package mohammadaminha.com.sugar.inflater.field;
 
 import android.database.Cursor;
 import android.util.Log;
-import com.orm.SugarRecord;
-import com.orm.annotation.OneToMany;
+
+import mohammadaminha.com.sugar.SugarRecord;
+import mohammadaminha.com.sugar.annotation.OneToMany;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.ParameterizedType;
diff --git a/library/src/main/java/com/orm/inflater/field/RelationEntityFieldInflater.java b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/RelationEntityFieldInflater.java
similarity index 94%
rename from library/src/main/java/com/orm/inflater/field/RelationEntityFieldInflater.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/RelationEntityFieldInflater.java
index 72df20f7..3aed1244 100644
--- a/library/src/main/java/com/orm/inflater/field/RelationEntityFieldInflater.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/inflater/field/RelationEntityFieldInflater.java
@@ -1,4 +1,4 @@
-package com.orm.inflater.field;
+package mohammadaminha.com.sugar.inflater.field;
 
 import android.database.Cursor;
 import android.util.Log;
diff --git a/library/src/main/java/com/orm/query/Condition.java b/sugar/src/main/java/mohammadaminha/com/sugar/query/Condition.java
similarity index 96%
rename from library/src/main/java/com/orm/query/Condition.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/query/Condition.java
index 52ae052c..286f0ee2 100644
--- a/library/src/main/java/com/orm/query/Condition.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/query/Condition.java
@@ -1,6 +1,6 @@
-package com.orm.query;
+package mohammadaminha.com.sugar.query;
 
-import com.orm.SugarRecord;
+import mohammadaminha.com.sugar.SugarRecord;
 
 public class Condition {
 
diff --git a/library/src/main/java/com/orm/query/Select.java b/sugar/src/main/java/mohammadaminha/com/sugar/query/Select.java
similarity index 80%
rename from library/src/main/java/com/orm/query/Select.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/query/Select.java
index cc57199d..8b1f21a0 100644
--- a/library/src/main/java/com/orm/query/Select.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/query/Select.java
@@ -1,9 +1,9 @@
-package com.orm.query;
+package mohammadaminha.com.sugar.query;
 
 import android.database.Cursor;
 
-import com.orm.SugarRecord;
-import com.orm.helper.NamingHelper;
+import mohammadaminha.com.sugar.SugarRecord;
+import mohammadaminha.com.sugar.helper.NamingHelper;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -21,7 +21,7 @@
     private static final String LIMIT = "LIMIT ";
     private static final String OFFSET = "OFFSET ";
 
-    private Class<T> record;
+    private Class record;
     private String[] arguments;
     private String whereClause = "";
     private String orderBy = "";
@@ -30,20 +30,20 @@
     private String offset = "";
     private List<String> args = new ArrayList<>();
 
-    public Select(Class<T> record) {
+    public Select(Class record) {
         this.record = record;
     }
 
-    public static <T> Select<T> from(Class<T> record) {
-        return new Select<>(record);
+    public static Select from(Class record) {
+        return new Select(record);
     }
 
-    public Select<T> orderBy(String prop) {
+    public Select orderBy(String prop) {
         this.orderBy = prop;
         return this;
     }
 
-    public Select<T> groupBy(String prop) {
+    public Select groupBy(String prop) {
         this.groupBy = prop;
         return this;
     }
@@ -80,25 +80,25 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
             if (Condition.Check.LIKE.equals(condition.getCheck()) ||
                     Condition.Check.NOT_LIKE.equals(condition.getCheck())) {
                 toAppend
-                    .append(condition.getProperty())
-                    .append(condition.getCheckSymbol())
-                    .append(SINGLE_QUOTE)
-                    .append(condition.getValue().toString())
-                    .append(SINGLE_QUOTE);
+                        .append(condition.getProperty())
+                        .append(condition.getCheckSymbol())
+                        .append(SINGLE_QUOTE)
+                        .append(condition.getValue().toString())
+                        .append(SINGLE_QUOTE);
             } else if (Condition.Check.IS_NULL.equals(condition.getCheck()) ||
                     Condition.Check.IS_NOT_NULL.equals(condition.getCheck())) {
                 toAppend
-                    .append(condition.getProperty())
-                    .append(condition.getCheckSymbol());
+                        .append(condition.getProperty())
+                        .append(condition.getCheckSymbol());
             } else {
                 toAppend
-                    .append(condition.getProperty())
-                    .append(condition.getCheckSymbol())
-                    .append("? ");
+                        .append(condition.getProperty())
+                        .append(condition.getCheckSymbol())
+                        .append("? ");
                 args.add(condition.getValue().toString());
             }
         }
-        
+
         if (!whereClause.isEmpty()) {
             whereClause += SPACE + type.name() + SPACE;
         }
@@ -128,33 +128,43 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
     }
 
     public Cursor getCursor() {
-       return SugarRecord.getCursor(record, whereClause, arguments, groupBy, orderBy, limit);
+        return SugarRecord.getCursor(record, whereClause, arguments, groupBy, orderBy, limit);
     }
-    public List<T> list() {
+
+    public Object list() {
         if (arguments == null) {
             arguments = convertArgs(args);
         }
 
+
         return SugarRecord.find(record, whereClause, arguments, groupBy, orderBy, limit);
     }
-    
+
     public long count() {
         if (arguments == null) {
             arguments = convertArgs(args);
         }
-    	
+
         return SugarRecord.count(record, whereClause, arguments, groupBy, orderBy, limit);
     }
 
     public T first() {
+
         if (arguments == null) {
             arguments = convertArgs(args);
         }
 
         List<T> list = SugarRecord.find(record, whereClause, arguments, groupBy, orderBy, "1");
-        return list.size() > 0 ? list.get(0) : null;
+        if (list != null)
+            if (list.size() > 0)
+                return list.get(0);
+            else
+                return null;
+        else
+            return null;
+
     }
-    
+
     String toSql() {
         StringBuilder sql = new StringBuilder();
         sql.append(SELECT_FROM).append(NamingHelper.toTableName(this.record)).append(SPACE);
diff --git a/library/src/main/java/com/orm/util/ContextUtil.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/ContextUtil.java
similarity index 96%
rename from library/src/main/java/com/orm/util/ContextUtil.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/ContextUtil.java
index 3e6eff58..541948af 100644
--- a/library/src/main/java/com/orm/util/ContextUtil.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/ContextUtil.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 import android.content.Context;
 import android.content.SharedPreferences;
diff --git a/library/src/main/java/com/orm/util/KeyWordUtil.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/KeyWordUtil.java
similarity index 97%
rename from library/src/main/java/com/orm/util/KeyWordUtil.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/KeyWordUtil.java
index 8983e7cf..9b63817f 100644
--- a/library/src/main/java/com/orm/util/KeyWordUtil.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/KeyWordUtil.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 /**
  * @author jonatan.salas
diff --git a/library/src/main/java/com/orm/util/MigrationFileParser.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/MigrationFileParser.java
similarity index 90%
rename from library/src/main/java/com/orm/util/MigrationFileParser.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/MigrationFileParser.java
index 1691a1eb..28a179b2 100644
--- a/library/src/main/java/com/orm/util/MigrationFileParser.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/MigrationFileParser.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 /**
  * Created by Nursultan Turdaliev on 12/4/15.
diff --git a/library/src/main/java/com/orm/util/NumberComparator.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/NumberComparator.java
similarity index 98%
rename from library/src/main/java/com/orm/util/NumberComparator.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/NumberComparator.java
index a6a08053..49882849 100644
--- a/library/src/main/java/com/orm/util/NumberComparator.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/NumberComparator.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 import java.util.Comparator;
 
diff --git a/library/src/main/java/com/orm/util/QueryBuilder.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/QueryBuilder.java
similarity index 93%
rename from library/src/main/java/com/orm/util/QueryBuilder.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/QueryBuilder.java
index e1c3557f..355de708 100644
--- a/library/src/main/java/com/orm/util/QueryBuilder.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/QueryBuilder.java
@@ -1,9 +1,7 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
-import com.orm.SugarRecord;
+import mohammadaminha.com.sugar.SugarRecord;
 
-import java.lang.RuntimeException;
-import java.lang.StringBuilder;
 import java.math.BigDecimal;
 
 public class QueryBuilder {
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/ReflectionUtil.java
similarity index 97%
rename from library/src/main/java/com/orm/util/ReflectionUtil.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/ReflectionUtil.java
index 18943d09..945967cb 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/ReflectionUtil.java
@@ -1,16 +1,16 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 import android.content.ContentValues;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.util.Log;
 
-import com.orm.SugarRecord;
-import com.orm.annotation.Ignore;
-import com.orm.annotation.Table;
-import com.orm.helper.ManifestHelper;
-import com.orm.helper.MultiDexHelper;
-import com.orm.helper.NamingHelper;
+import mohammadaminha.com.sugar.SugarRecord;
+import mohammadaminha.com.sugar.annotation.Ignore;
+import mohammadaminha.com.sugar.annotation.Table;
+import mohammadaminha.com.sugar.helper.ManifestHelper;
+import mohammadaminha.com.sugar.helper.MultiDexHelper;
+import mohammadaminha.com.sugar.helper.NamingHelper;
 
 import java.io.File;
 import java.io.IOException;
@@ -313,7 +313,7 @@ private static Class getDomainClass(String className) {
 
 
     private static List<String> getAllClasses() throws PackageManager.NameNotFoundException, IOException {
-        String packageName = ManifestHelper.getDomainPackageName();
+        String packageName = "com.example";
         List<String> classNames = new ArrayList<>();
         try {
             List<String> allClasses = MultiDexHelper.getAllClasses();
diff --git a/library/src/main/java/com/orm/util/SugarConfig.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/SugarConfig.java
similarity index 94%
rename from library/src/main/java/com/orm/util/SugarConfig.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/SugarConfig.java
index 46ebd8da..27a28b6e 100644
--- a/library/src/main/java/com/orm/util/SugarConfig.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/SugarConfig.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 import java.lang.reflect.Field;
 import java.util.Collections;
diff --git a/library/src/main/java/com/orm/util/SugarCursor.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/SugarCursor.java
similarity index 95%
rename from library/src/main/java/com/orm/util/SugarCursor.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/SugarCursor.java
index d058c5c1..3ef4aa46 100644
--- a/library/src/main/java/com/orm/util/SugarCursor.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/SugarCursor.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 import android.database.Cursor;
 import android.database.CursorWrapper;
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/SugarCursorFactory.java
similarity index 96%
rename from library/src/main/java/com/orm/util/SugarCursorFactory.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/SugarCursorFactory.java
index 3274fccc..f59eaebd 100644
--- a/library/src/main/java/com/orm/util/SugarCursorFactory.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/SugarCursorFactory.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteCursor;
diff --git a/library/src/main/java/com/orm/util/ThreadUtil.java b/sugar/src/main/java/mohammadaminha/com/sugar/util/ThreadUtil.java
similarity index 95%
rename from library/src/main/java/com/orm/util/ThreadUtil.java
rename to sugar/src/main/java/mohammadaminha/com/sugar/util/ThreadUtil.java
index 665e5c2d..fd5abdaa 100644
--- a/library/src/main/java/com/orm/util/ThreadUtil.java
+++ b/sugar/src/main/java/mohammadaminha/com/sugar/util/ThreadUtil.java
@@ -1,4 +1,4 @@
-package com.orm.util;
+package mohammadaminha.com.sugar.util;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
diff --git a/sugar/src/main/res/values/strings.xml b/sugar/src/main/res/values/strings.xml
new file mode 100644
index 00000000..b22178cd
--- /dev/null
+++ b/sugar/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">sugar</string>
+</resources>
diff --git a/sugar/src/test/java/mohammadaminha/com/sugar/ExampleUnitTest.java b/sugar/src/test/java/mohammadaminha/com/sugar/ExampleUnitTest.java
new file mode 100644
index 00000000..7a6e98de
--- /dev/null
+++ b/sugar/src/test/java/mohammadaminha/com/sugar/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package mohammadaminha.com.sugar;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
