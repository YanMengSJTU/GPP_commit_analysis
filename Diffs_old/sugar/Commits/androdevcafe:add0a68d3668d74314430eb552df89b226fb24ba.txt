diff --git a/README.md b/README.md
index e6916fb1..225f1682 100644
--- a/README.md
+++ b/README.md
@@ -1,16 +1,71 @@
-Please follow the documentation at
-http://satyan.github.io/sugar
+# Sugar ORM
 
-The example application is provided in the "example" folder in the source.
+Insanely easy way to work with Android databases.
 
+Official documentation can be found [here](http://satyan.github.io/sugar). The example application is provided in the **example** folder in the source.
 
-# Getting Started:
+## Features
 
-Sugar is now available as a library project also. Add it to your project and utilize the latest changes.
-The project is available in the folder "library"
-http://developer.android.com/tools/projects/index.html#LibraryProjects
+Sugar ORM was built in contrast to other ORM's to have:
 
-# New in version 1.2
+1. A simple, concise, and clean integration process with minimal configuration.
+3. Automatic table and column naming through reflection.
+4. Support for migrations between different schema versions.
+
+## Installing
+
+There are four ways to install Sugar:
+
+#### As a Gradle dependency
+
+This is the preferred way. Simply add:
+
+```groovy
+compile 'com.github.satyan:sugar:1.3'
+```
+
+to your project dependencies and run `gradle build` or `gradle assemble`.
+
+#### As a Maven dependency
+
+Declare the dependency in Maven:
+
+```xml
+<dependency>
+    <groupId>com.github.satyan</groupId>
+    <artifactId>sugar</artifactId>
+    <version>1.3</version>
+</dependency>
+```
+
+#### As a library project
+
+Download the source code and import it as a library project in Eclipse. The project is available in the folder **library**. For more information on how to do this, read [here](http://developer.android.com/tools/projects/index.html#LibraryProjects).
+
+#### Use a jar
+
+Visit the [releases](https://github.com/satyan/sugar/releases) page to download jars directly. You can drop them into your `libs` folder and configure the Java build path to include the library. See this [tutorial](http://www.vogella.com/tutorials/AndroidLibraryProjects/article.html) for an excellent guide on how to do this.
+
+===================
+
+After installing, check out how to set up your first database and models [here](http://satyan.github.io/sugar/getting-started.html).
+
+## Contributing
+
+Please fork this repository and contribute back using [pull requests](https://github.com/satyan/sugar/pulls). Features can be requested using [issues](https://github.com/satyan/sugar/issues). All code, comments, and critiques are greatly appreciated.
+
+## Changelog
+
+#### v1.3 [[jar](https://github.com/satyan/sugar/releases/download/v1.3/sugar-1.3.jar)]
+
+1. Transaction Support
+2. Bulk Insert of records 
+3. Encrypted datastore (branch : sugar-cipher using sqlcipher)
+4. Removed Constructor with context parameter. Needs default constructor now.
+5. Enhancements to QueryBuilder
+6. Bug fixes and other improvements.
+
+#### v1.2 [[jar](https://github.com/satyan/sugar/releases/download/v1.2/sugar-1.2.jar)]
 
 1. package restriction for domain classes.
 2. metadata caching
@@ -19,16 +74,18 @@ http://developer.android.com/tools/projects/index.html#LibraryProjects
 5. Provision for Raw queries
 6. Better and more organized api guide and usage instructions.
 
-# What's new in 1.1:
+#### v1.1 [[jar](https://github.com/satyan/sugar/releases/download/v1.1/sugar-1.1.jar)]
 
 1. Static api doesn't take context anymore. Hence
 
-        Book.findById(context, Book.class, 1);
+```java
+Book.findById(context, Book.class, 1);
+```
 
-        becomes
-
-        Book.findById(Book.class, 1);
+becomes
 
+```java
+Book.findById(Book.class, 1);
+```
 
 2. Some cleanup in the code.
-
diff --git a/dist/sugar-1.0.jar b/dist/sugar-1.0.jar
deleted file mode 100644
index 2bf1abd3..00000000
Binary files a/dist/sugar-1.0.jar and /dev/null differ
diff --git a/dist/sugar-1.1.jar b/dist/sugar-1.1.jar
deleted file mode 100644
index 96a6b77e..00000000
Binary files a/dist/sugar-1.1.jar and /dev/null differ
diff --git a/dist/sugar-1.2.jar b/dist/sugar-1.2.jar
deleted file mode 100644
index 2e6f0290..00000000
Binary files a/dist/sugar-1.2.jar and /dev/null differ
diff --git a/dist/sugar-1.3_beta.jar b/dist/sugar-1.3_beta.jar
deleted file mode 100644
index a9d0ed8c..00000000
Binary files a/dist/sugar-1.3_beta.jar and /dev/null differ
diff --git a/library/src/com/orm/QueryBuilder.java b/library/src/com/orm/QueryBuilder.java
index 8ff00beb..6ca26fc9 100644
--- a/library/src/com/orm/QueryBuilder.java
+++ b/library/src/com/orm/QueryBuilder.java
@@ -5,9 +5,6 @@
     public static String getColumnType(Class<?> type) {
         if ((type.equals(Boolean.class)) ||
                 (type.equals(Boolean.TYPE)) ||
-                (type.equals(java.util.Date.class)) ||
-                (type.equals(java.util.Calendar.class)) ||
-                (type.equals(java.sql.Date.class)) ||
                 (type.equals(Integer.class)) ||
                 (type.equals(Integer.TYPE)) ||
                 (type.equals(Long.class)) ||
@@ -17,6 +14,12 @@ public static String getColumnType(Class<?> type) {
             return "INTEGER";
         }
 
+        if ((type.equals(java.util.Date.class)) ||
+                (type.equals(java.sql.Date.class)) ||
+                (type.equals(java.util.Calendar.class))) {
+            return "INTEGER NULL";
+        }
+
         if (type.getName().equals("[B")) {
             return "BLOB";
         }
diff --git a/library/src/com/orm/SugarApp.java b/library/src/com/orm/SugarApp.java
index d15c411f..ac7da99d 100644
--- a/library/src/com/orm/SugarApp.java
+++ b/library/src/com/orm/SugarApp.java
@@ -11,6 +11,12 @@ public void onCreate(){
         this.database = new Database(this);
     }
 
+    /*
+     * Per issue #106 on Github, this method won't be called in
+     * any real Android device. This method is used purely in
+     * emulated process environments such as an emulator or
+     * Robolectric Android mock.
+     */
     public void onTerminate(){
         if (this.database != null) {
             this.database.getDB().close();
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index 7bb5fa4c..0f79cfe6 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -19,7 +19,12 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
-import java.util.*;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.List;
 
 import static com.orm.SugarConfig.getDatabaseVersion;
 import static com.orm.SugarConfig.getDebugEnabled;
@@ -36,11 +41,7 @@ public SugarDb(Context context) {
     private <T extends SugarRecord<?>> List<T> getDomainClasses(Context context) {
         List<T> domainClasses = new ArrayList<T>();
         try {
-            Enumeration<?> allClasses = getAllClasses(context);
-
-            while (allClasses.hasMoreElements()) {
-                String className = (String) allClasses.nextElement();
-
+            for (String className : getAllClasses(context)) {
                 if (className.startsWith(SugarConfig.getDomainPackageName(context))) {
                     T domainClass = getDomainClass(className, context);
                     if (domainClass != null) domainClasses.add(domainClass);
@@ -88,10 +89,26 @@ public SugarDb(Context context) {
 
     }
 
-    private Enumeration<?> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
+    private List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
         String path = getSourcePath(context);
-        DexFile dexfile = new DexFile(path);
-        return dexfile.entries();
+        List<String> classNames = new ArrayList<String>();
+        try {
+            DexFile dexfile = new DexFile(path);
+            Enumeration<String> dexEntries = dexfile.entries();
+            while (dexEntries.hasMoreElements()) {
+                classNames.add(dexEntries.nextElement());
+            }
+        } catch (NullPointerException e) {
+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+            Enumeration<URL> urls = classLoader.getResources("");
+            while (urls.hasMoreElements()) {
+                String urlPath = urls.nextElement().getFile();
+                if (urlPath.contains("bin") || urlPath.contains("classes")) {
+                    classNames.add(urlPath);
+                }
+            }
+        }
+        return classNames;
     }
 
     private String getSourcePath(Context context) throws PackageManager.NameNotFoundException {
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index da414a66..4bedcd1c 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -43,8 +43,8 @@ public void delete() {
         sqLiteDatabase.delete(getTableName(type), whereClause, whereArgs);
     }
 
-    public void save() {
-        save(getSugarContext().getDatabase().getDB());
+    public long save() {
+        return save(getSugarContext().getDatabase().getDB());
     }
 
     @SuppressWarnings("deprecation")
@@ -72,7 +72,7 @@ public void save() {
 
     }
 
-    void save(SQLiteDatabase db) {
+    long save(SQLiteDatabase db) {
 
         List<Field> columns = getTableFields();
         ContentValues values = new ContentValues(columns.size());
@@ -108,10 +108,18 @@ else if (columnType.equals(Boolean.class) || columnType.equals(boolean.class)) {
                             values.put(columnName, (Boolean) columnValue);
                         }
                         else if (Date.class.equals(columnType)) {
-                            values.put(columnName, ((Date) column.get(this)).getTime());
+                            try {
+                                values.put(columnName, ((Date) column.get(this)).getTime());
+                            } catch (NullPointerException e) {
+                                values.put(columnName, (Long) null);
+                            }
                         }
                         else if (Calendar.class.equals(columnType)) {
-                            values.put(columnName, ((Calendar) column.get(this)).getTimeInMillis());
+                            try {
+                                values.put(columnName, ((Calendar) column.get(this)).getTimeInMillis());
+                            } catch (NullPointerException e) {
+                                values.put(columnName, (Long) null);
+                            }
                         }else{
                             values.put(columnName, String.valueOf(columnValue));
                         }
@@ -130,6 +138,7 @@ else if (Calendar.class.equals(columnType)) {
             db.update(getSqlName(), values, "ID = ?", new String[]{String.valueOf(id)});
 
         Log.i("Sugar", getClass().getSimpleName() + " saved : " + id);
+        return id;
     }
 
     public static <T extends SugarRecord<?>> List<T> listAll(Class<T> type) {
@@ -142,6 +151,10 @@ else if (Calendar.class.equals(columnType)) {
         return list.get(0);
     }
 
+    public static <T extends SugarRecord<?>> T findById(Class<T> type, Integer id) {
+        return findById(type, Long.valueOf(id));
+    }
+
     public static <T extends SugarRecord<?>> Iterator<T> findAll(Class<T> type) {
         return findAsIterator(type, null, null, null, null, null);
     }
@@ -222,6 +235,10 @@ public static void executeQuery(String query, String... arguments){
         }
         return toRet;
     }
+
+    public static <T extends SugarRecord<?>> long count(Class<?> type) {
+        return count(type, null, null, null, null, null);
+    }
     
     public static <T extends SugarRecord<?>> long count(Class<?> type,
             String whereClause, String[] whereArgs) {
