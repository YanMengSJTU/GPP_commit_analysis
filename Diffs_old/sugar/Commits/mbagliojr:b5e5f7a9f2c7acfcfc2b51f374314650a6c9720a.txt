diff --git a/example/src/main/java/com/example/models/Author.java b/example/src/main/java/com/example/models/Author.java
new file mode 100644
index 00000000..202ed78e
--- /dev/null
+++ b/example/src/main/java/com/example/models/Author.java
@@ -0,0 +1,40 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.Relationship;
+import java.util.List;
+
+public class Author extends SugarRecord {
+    private String name;
+
+    @Relationship(joinTable = "AUTHOR_BOOK", objectIdName = "AUTHOR_ID", refObjectIdName = "BOOK_ID")
+    private List<Book> books;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public List<Book> getBooks() {
+
+        //Lazy Loading
+        if(books == null) {
+            try {
+                Relationship relationship = getClass().getField("books").getAnnotation(Relationship.class);
+
+                books = Book.findByRelationship(Book.class, relationship, "AUTHOR_ID = " + getId().toString(), null, null, null);
+            } catch (NoSuchFieldException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return books;
+    }
+
+    public void setBooks(List<Book> books) {
+        this.books = books;
+    }
+}
diff --git a/example/src/main/java/com/example/models/Book.java b/example/src/main/java/com/example/models/Book.java
new file mode 100644
index 00000000..fa58a6bd
--- /dev/null
+++ b/example/src/main/java/com/example/models/Book.java
@@ -0,0 +1,64 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.Relationship;
+import java.util.List;
+
+public class Book extends SugarRecord {
+    private String title;
+
+    @Relationship(joinTable = "AUTHOR_BOOK", objectIdName = "BOOK_ID", refObjectIdName = "AUTHOR_ID")
+    private Author author;
+
+    @Relationship(joinTable = "BOOK_PAGE", objectIdName = "BOOK_ID", refObjectIdName = "PAGE_ID")
+    private List<Page> pages;
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public Author getAuthor() {
+
+        //Lazy Loading
+        if(author == null) {
+            try {
+                Relationship relationship = getClass().getField("author").getAnnotation(Relationship.class);
+
+                List<Author> authors = Author.findByRelationship(Author.class, relationship, "BOOK_ID = " + getId().toString(), null, null, null);
+                author = authors == null || authors.isEmpty() ? null : authors.get(0);
+            } catch (NoSuchFieldException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return author;
+    }
+
+    public void setAuthor(Author author) {
+        this.author = author;
+    }
+
+    public List<Page> getPages() {
+
+        //Lazy Loading
+        if(pages == null) {
+            try {
+                Relationship relationship = getClass().getField("pages").getAnnotation(Relationship.class);
+
+                pages = Page.findByRelationship(Page.class, relationship, "BOOK_ID = " + getId().toString(), null, null, null);
+            } catch (NoSuchFieldException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return pages;
+    }
+
+    public void setPages(List<Page> pages) {
+        this.pages = pages;
+    }
+}
diff --git a/example/src/main/java/com/example/models/Page.java b/example/src/main/java/com/example/models/Page.java
new file mode 100644
index 00000000..96c9d262
--- /dev/null
+++ b/example/src/main/java/com/example/models/Page.java
@@ -0,0 +1,50 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.Relationship;
+import java.util.List;
+
+public class Page extends SugarRecord {
+    private String text;
+    private int pageNumber;
+
+    @Relationship(joinTable = "BOOK_PAGE", objectIdName = "PAGE_ID", refObjectIdName = "BOOK_ID")
+    private Book book;
+
+    public String getText() {
+        return text;
+    }
+
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    public int getPageNumber() {
+        return pageNumber;
+    }
+
+    public void setPageNumber(int pageNumber) {
+        this.pageNumber = pageNumber;
+    }
+
+    public Book getBook() {
+
+        //Lazy Loading
+        if(book == null) {
+            try {
+                Relationship relationship = getClass().getField("book").getAnnotation(Relationship.class);
+
+                List<Book> books = Book.findByRelationship(Book.class, relationship, "PAGE_ID = " + getId().toString(), null, null, null);
+                book = books == null || books.isEmpty() ? null : books.get(0);
+            } catch (NoSuchFieldException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return book;
+    }
+
+    public void setBook(Book book) {
+        this.book = book;
+    }
+}
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index 2ac98d70..ce4ae437 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -8,9 +8,7 @@
 
 import com.orm.dsl.Column;
 import com.orm.dsl.Relationship;
-import com.orm.dsl.ManyToOne;
 import com.orm.dsl.NotNull;
-import com.orm.dsl.OneToOne;
 import com.orm.dsl.Unique;
 import com.orm.util.NamingHelper;
 import com.orm.util.NumberComparator;
@@ -154,14 +152,6 @@ private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
                     }
                 }
 
-                /*if(column.isAnnotationPresent(OneToOne.class)) {
-                    OneToOne oneToOne =  column.getAnnotation(OneToOne.class);
-                    sb.append(", ").append(oneToOne.name()).append(" INTEGER");
-                } else if(column.isAnnotationPresent(ManyToOne.class)) {
-                    ManyToOne manyToOne =  column.getAnnotation(ManyToOne.class);
-                    sb.append(", ").append(manyToOne.name()).append(" INTEGER");
-                } else */
-
                 //Create join table for all relationships. This will prevent issues with migrations (yes, unnecessary joins will be slower)
                 if(column.isAnnotationPresent(Relationship.class)) {
                     Relationship relationship =  column.getAnnotation(Relationship.class);
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 3e836fbd..d15583f1 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -186,7 +186,11 @@ public static void executeQuery(String query, String... arguments) {
         getSugarContext().getSugarDb().getDB().execSQL(query, arguments);
     }
 
-    public static <T> List<T> findByInnerJoin(Class<T> type, String joinTable, String objectIdName, String where, String groupBy, String orderBy, String limit) {
+    public static <T> List<T> findByRelationship(Class<T> type, Relationship relationship, String where, String groupBy, String orderBy, String limit) {
+        return findByRelationship(type, relationship.joinTable(), relationship.refObjectIdName(), where, groupBy, orderBy, limit);
+    }
+
+    public static <T> List<T> findByRelationship(Class<T> type, String joinTable, String objectIdName, String where, String groupBy, String orderBy, String limit) {
         SugarDb db = getSugarContext().getSugarDb();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         T entity;
diff --git a/library/src/main/java/com/orm/dsl/ManyToOne.java b/library/src/main/java/com/orm/dsl/ManyToOne.java
deleted file mode 100644
index 90b51f16..00000000
--- a/library/src/main/java/com/orm/dsl/ManyToOne.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm.dsl;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-/**
- * Created by mbagliojr on 7/20/15.
- */
-@Documented
-@Target(ElementType.FIELD)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface ManyToOne {
-
-    String name();
-
-}
diff --git a/library/src/main/java/com/orm/dsl/OneToMany.java b/library/src/main/java/com/orm/dsl/OneToMany.java
deleted file mode 100644
index 29ec677d..00000000
--- a/library/src/main/java/com/orm/dsl/OneToMany.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm.dsl;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-/**
- * Created by mbagliojr on 7/20/15.
- */
-@Documented
-@Target(ElementType.FIELD)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface OneToMany {
-
-    String parentFieldName();
-
-}
diff --git a/library/src/main/java/com/orm/dsl/OneToOne.java b/library/src/main/java/com/orm/dsl/OneToOne.java
deleted file mode 100644
index 87c32655..00000000
--- a/library/src/main/java/com/orm/dsl/OneToOne.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm.dsl;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-/**
- * Created by mbagliojr on 7/20/15.
- */
-@Documented
-@Target(ElementType.FIELD)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface OneToOne {
-
-    String name();
-
-}
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index d3180323..4ad4555f 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -9,14 +9,12 @@
 import com.orm.SugarRecord;
 import com.orm.dsl.Ignore;
 import com.orm.dsl.Relationship;
-import com.orm.dsl.ManyToOne;
-import com.orm.dsl.OneToMany;
-import com.orm.dsl.OneToOne;
 import com.orm.dsl.Table;
 
 import java.io.File;
 import java.io.IOException;
 import java.lang.Exception;
+import java.lang.Object;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -144,13 +142,13 @@
                         //Try get{fieldName}
                         try {
                             Method getter = object.getClass().getMethod("get" + column.getName().substring(0, 1).toUpperCase() + column.getName().substring(1));
-                            columnValue = getter.invoke(object, null);
+                            columnValue = getter.invoke(object, (Object[]) null);
 
                             //Try is{fieldName}
                         } catch (Exception e) {
                             try {
                                 Method getter = object.getClass().getMethod("is" + column.getName().substring(0, 1).toUpperCase() + column.getName().substring(1));
-                                columnValue = getter.invoke(object, null);
+                                columnValue = getter.invoke(object, (Object[]) null);
                                 //No getter available. Get from field
                             } catch (Exception e1) {
                                 //DO NOTHING: columnValue already = columnValue
@@ -179,13 +177,13 @@
                         //Try get{fieldName}
                         try {
                             Method getter = object.getClass().getMethod("get" + column.getName().substring(0, 1).toUpperCase() + column.getName().substring(1));
-                            columnValue = getter.invoke(object, null);
+                            columnValue = getter.invoke(object, (Object[]) null);
 
                             //Try is{fieldName}
                         } catch (Exception e) {
                             try {
                                 Method getter = object.getClass().getMethod("is" + column.getName().substring(0, 1).toUpperCase() + column.getName().substring(1));
-                                columnValue = getter.invoke(object, null);
+                                columnValue = getter.invoke(object, (Object[]) null);
                                 //No getter available. Get from field
                             } catch (Exception e1) {
                                 //DO NOTHING: columnValue already = columnValue
