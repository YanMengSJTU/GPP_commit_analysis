diff --git a/library/build.gradle b/library/build.gradle
index 907162ee..1d5acf78 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,5 +1,5 @@
 apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
+//apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 23
@@ -25,10 +25,13 @@ android {
 dependencies {
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
+    compile 'net.zetetic:android-database-sqlcipher:3.5.4@aar'
 }
 
+
+
 task libraryJar(type: Jar) {
-    dependsOn assembleRelease
+    dependsOn "assembleRelease"
     from android.sourceSets.main.java.srcDirs,
          ['build/intermediates/classes/release/'] // Add the release classes into the jar
     baseName 'sugar'
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index c25407fc..d355c76c 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -1,8 +1,8 @@
 package com.orm;
 
-import android.database.Cursor;
-import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.SQLException;
+import net.sqlcipher.database.SQLiteDatabase;
 import android.util.Log;
 
 import com.orm.annotation.Column;
diff --git a/library/src/main/java/com/orm/SugarApp.java b/library/src/main/java/com/orm/SugarApp.java
index cab35ca7..7007cff9 100644
--- a/library/src/main/java/com/orm/SugarApp.java
+++ b/library/src/main/java/com/orm/SugarApp.java
@@ -2,11 +2,14 @@
 
 import android.app.Application;
 
+import net.sqlcipher.database.SQLiteDatabase;
+
 public class SugarApp extends Application {
 
     @Override
     public void onCreate() {
         super.onCreate();
+        SQLiteDatabase.loadLibs(this);
         SugarContext.init(this);
     }
 
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index bc71ba23..f6283612 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -1,7 +1,7 @@
 package com.orm;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteOpenHelper;
 import android.util.Log;
 
 import com.orm.dsl.BuildConfig;
@@ -35,18 +35,18 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         schemaGenerator.createDatabase(sqLiteDatabase);
     }
 
-    @Override
-    public void onConfigure(SQLiteDatabase db) {
-        final SugarDbConfiguration configuration = getDbConfiguration();
-
-        if (null != configuration) {
-            db.setLocale(configuration.getDatabaseLocale());
-            db.setMaximumSize(configuration.getMaxSize());
-            db.setPageSize(configuration.getPageSize());
-        }
-
-        super.onConfigure(db);
-    }
+//    @Override
+//    public void onConfigure(SQLiteDatabase db) {
+//        final SugarDbConfiguration configuration = getDbConfiguration();
+//
+//        if (null != configuration) {
+//            db.setLocale(configuration.getDatabaseLocale());
+//            db.setMaximumSize(configuration.getMaxSize());
+//            db.setPageSize(configuration.getPageSize());
+//        }
+//
+//        super.onConfigure(db);
+//    }
 
     @Override
     public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
@@ -55,19 +55,20 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
 
     public synchronized SQLiteDatabase getDB() {
         if (this.sqLiteDatabase == null) {
-            this.sqLiteDatabase = getWritableDatabase();
+            this.sqLiteDatabase = getWritableDatabase(ManifestHelper.getEncryptionKey());
         }
+        openedConnections++;
 
         return this.sqLiteDatabase;
     }
 
     @Override
-    public synchronized SQLiteDatabase getReadableDatabase() {
+    public synchronized SQLiteDatabase getReadableDatabase(String password) {
         if(ManifestHelper.isDebugEnabled()) {
             Log.d(LOG_TAG, "getReadableDatabase");
         }
         openedConnections++;
-        return super.getReadableDatabase();
+        return super.getReadableDatabase(password);
     }
 
     @Override
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 2ade2ba3..d775c772 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -1,10 +1,10 @@
 package com.orm;
 
 import android.content.ContentValues;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteException;
+import net.sqlcipher.database.SQLiteStatement;
 import android.text.TextUtils;
 import android.util.Log;
 import com.orm.annotation.Table;
diff --git a/library/src/main/java/com/orm/helper/ManifestHelper.java b/library/src/main/java/com/orm/helper/ManifestHelper.java
index cab85fd2..9fcc7a2f 100644
--- a/library/src/main/java/com/orm/helper/ManifestHelper.java
+++ b/library/src/main/java/com/orm/helper/ManifestHelper.java
@@ -24,6 +24,8 @@
     public final static String METADATA_VERSION = "VERSION";
     public final static String METADATA_DOMAIN_PACKAGE_NAME = "DOMAIN_PACKAGE_NAME";
     public final static String METADATA_QUERY_LOG = "QUERY_LOG";
+    public final static String METADATA_DB_PASSWORD = "DB_PASSWORD";
+
 
     /**
      * The default name for the database unless specified in the AndroidManifest.
@@ -39,6 +41,12 @@ private ManifestHelper() { }
      * @return the database version as specified by the {@link #METADATA_VERSION} version or 1 of
      *         not present
      */
+
+    public static String getEncryptionKey() {
+        String encryptionKey = getMetaDataString(METADATA_DB_PASSWORD);
+        return encryptionKey;
+    }
+
     public static int getDatabaseVersion() {
         Integer databaseVersion = getMetaDataInteger(METADATA_VERSION);
 
diff --git a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java b/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
index dbb9ca26..b28503fc 100644
--- a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
+++ b/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
@@ -1,6 +1,6 @@
 package com.orm.helper;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import android.util.Log;
 
 import static com.orm.SugarContext.getSugarContext;
diff --git a/library/src/main/java/com/orm/inflater/field/FieldInflater.java b/library/src/main/java/com/orm/inflater/field/FieldInflater.java
index 87795340..bff2fba5 100644
--- a/library/src/main/java/com/orm/inflater/field/FieldInflater.java
+++ b/library/src/main/java/com/orm/inflater/field/FieldInflater.java
@@ -20,5 +20,5 @@ public FieldInflater(Field field, Cursor cursor, Object object, Class<?> fieldTy
         this.fieldType = fieldType;
     }
 
-    public abstract void inflate();
+    public abstract void  inflate();
 }
diff --git a/library/src/main/java/com/orm/util/SugarCursor.java b/library/src/main/java/com/orm/util/SugarCursor.java
index d058c5c1..1d05fcc7 100644
--- a/library/src/main/java/com/orm/util/SugarCursor.java
+++ b/library/src/main/java/com/orm/util/SugarCursor.java
@@ -1,7 +1,7 @@
 package com.orm.util;
 
-import android.database.Cursor;
-import android.database.CursorWrapper;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.CursorWrapper;
 
 public class SugarCursor extends CursorWrapper {
 
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/library/src/main/java/com/orm/util/SugarCursorFactory.java
index 3274fccc..dd56fa90 100644
--- a/library/src/main/java/com/orm/util/SugarCursorFactory.java
+++ b/library/src/main/java/com/orm/util/SugarCursorFactory.java
@@ -1,10 +1,10 @@
 package com.orm.util;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteCursor;
-import android.database.sqlite.SQLiteCursorDriver;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQuery;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteCursor;
+import net.sqlcipher.database.SQLiteCursorDriver;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteQuery;
 import android.util.Log;
 
 public class SugarCursorFactory implements SQLiteDatabase.CursorFactory {
@@ -32,4 +32,5 @@ public Cursor newCursor(SQLiteDatabase sqLiteDatabase,
         return new SQLiteCursor(sqLiteDatabase, sqLiteCursorDriver, editTable, sqLiteQuery);
     }
 
+
 }
diff --git a/library/src/test/java/com/orm/SchemaGeneratorTest.java b/library/src/test/java/com/orm/SchemaGeneratorTest.java
deleted file mode 100644
index 90f35c07..00000000
--- a/library/src/test/java/com/orm/SchemaGeneratorTest.java
+++ /dev/null
@@ -1,179 +0,0 @@
-package com.orm;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.AllAnotatedModel;
-import com.orm.model.EmptyModel;
-import com.orm.model.IntUniqueModel;
-import com.orm.model.MultiColumnUniqueModel;
-import com.orm.model.StringFieldAnnotatedModel;
-import com.orm.model.StringFieldExtendedModel;
-import com.orm.model.StringFieldExtendedModelAnnotatedColumn;
-import com.orm.helper.NamingHelper;
-import com.orm.model.TestRecord;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static junit.framework.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SchemaGeneratorTest {
-
-    @Test
-    public void testEmptyTableCreation() throws Exception {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(EmptyModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(EmptyModel.class) +
-                    " ( ID INTEGER PRIMARY KEY AUTOINCREMENT  ) ",
-                createSQL);
-    }
-
-    @Test
-    public void testSimpleColumnTableCreation() throws Exception {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(StringFieldExtendedModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(StringFieldExtendedModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "STRING TEXT ) ",
-                createSQL);
-
-        String createSQL2 = schemaGenerator.createTableSQL(StringFieldAnnotatedModel.class);
-
-        assertEquals("CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(StringFieldAnnotatedModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "STRING TEXT ) ",
-                createSQL2);
-
-        String createSQL3 = schemaGenerator.createTableSQL(StringFieldExtendedModelAnnotatedColumn.class);
-
-        assertEquals("CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(StringFieldExtendedModelAnnotatedColumn.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "anyName TEXT ) ",
-                createSQL3);
-    }
-
-    @Test
-    public void testUniqueTableCreation() {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(IntUniqueModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(IntUniqueModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "VALUE INTEGER UNIQUE ) ",
-                createSQL);
-    }
-
-    @Test
-    public void testMultiColumnUniqueTableCreation() {
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        String createSQL = schemaGenerator.createTableSQL(MultiColumnUniqueModel.class);
-        assertEquals(
-                "CREATE TABLE IF NOT EXISTS " + NamingHelper.toTableName(MultiColumnUniqueModel.class) +
-                        " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
-                        "A INTEGER, B INTEGER, " +
-                        "UNIQUE(A, B) ON CONFLICT REPLACE ) ",
-                createSQL);
-    }
-
-    @Test
-    public void testTableCreation() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        schemaGenerator.createTable(TestRecord.class, sqLiteDatabase);
-        String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
-
-        String tableName = NamingHelper.toTableName(TestRecord.class);
-        Cursor c = sqLiteDatabase.rawQuery(String.format(sql, tableName), null);
-
-        if (c.moveToFirst()) {
-            Assert.assertEquals(1, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testAnnotatedModelTableCreation() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        schemaGenerator.createTable(AllAnotatedModel.class, sqLiteDatabase);
-        String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
-
-        String tableName = NamingHelper.toTableName(AllAnotatedModel.class);
-        Cursor c = sqLiteDatabase.rawQuery(String.format(sql, tableName), null);
-
-        if (c.moveToFirst()) {
-            Assert.assertEquals(1, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testAllTableCreation() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-
-        schemaGenerator.createDatabase(sqLiteDatabase);
-        String sql = "select count(*) from sqlite_master where type='table';";
-
-        Cursor c = sqLiteDatabase.rawQuery(sql, null);
-
-        if (c.moveToFirst()) {
-            Assert.assertEquals(47, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testDeleteAllTables() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-
-        schemaGenerator.createDatabase(sqLiteDatabase);
-        schemaGenerator.deleteTables(sqLiteDatabase);
-
-        String sql = "select count(*) from sqlite_master where type='table';";
-
-        Cursor c = sqLiteDatabase.rawQuery(sql, null);
-
-        if (c.moveToFirst()) {
-            //Two tables are by default created by SQLite
-            Assert.assertEquals(2, c.getInt(0));
-        }
-
-        if (!c.isClosed()) {
-            c.close();
-        }
-    }
-
-    @Test
-    public void testGetColumnNames() {
-        SQLiteDatabase sqLiteDatabase = SugarContext.getSugarContext().getSugarDb().getDB();
-        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
-        schemaGenerator.createTable(TestRecord.class, sqLiteDatabase);
-
-        List<String> columnNames = schemaGenerator.getColumnNames(sqLiteDatabase, NamingHelper.toTableName(TestRecord.class));
-        Assert.assertEquals(2, columnNames.size());
-    }
-}
diff --git a/library/src/test/java/com/orm/SugarAppTest.java b/library/src/test/java/com/orm/SugarAppTest.java
deleted file mode 100644
index 0f247ae8..00000000
--- a/library/src/test/java/com/orm/SugarAppTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.orm;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-
-/**
- * @author jonatan.salas
- */
-public final class SugarAppTest {
-
-    @Test
-    public void testOnCreate() {
-        SugarApp app = new SugarApp();
-        app.onCreate();
-
-        SugarContext context = SugarContext.getSugarContext();
-        Assert.assertNotNull(context);
-    }
-
-
-    @Test(expected = NullPointerException.class)
-    public void testOnTerminate() {
-        SugarApp app = new SugarApp();
-        app.onCreate();
-        app.onTerminate();
-
-        SugarContext context = SugarContext.getSugarContext();
-        Assert.assertNull(context);
-    }
-}
diff --git a/library/src/test/java/com/orm/SugarDataSourceTest.java b/library/src/test/java/com/orm/SugarDataSourceTest.java
deleted file mode 100644
index 9f3d25ba..00000000
--- a/library/src/test/java/com/orm/SugarDataSourceTest.java
+++ /dev/null
@@ -1,543 +0,0 @@
-package com.orm;
-
-import android.database.Cursor;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static junit.framework.Assert.*;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SugarDataSourceTest {
-    private SugarDataSource<TestRecord> recordSugarDataSource;
-
-    @Before
-    public void setUp() {
-        recordSugarDataSource = SugarDataSource.getInstance(TestRecord.class);
-    }
-
-    @Test
-    public void testInsertAndDelete() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        assertNotNull(record.getId());
-
-        recordSugarDataSource.delete(
-                record,
-                new SugarDataSource.SuccessCallback<Boolean>() {
-                    @Override
-                    public void onSuccess(Boolean result) {
-                        assertNotNull(result);
-                        assertEquals(true, result.booleanValue());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndFindById() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.findById(
-                record.getId(),
-                new SugarDataSource.SuccessCallback<TestRecord>() {
-                    @Override
-                    public void onSuccess(TestRecord result) {
-                        assertEquals(record.getId(), result.getId());
-                        assertEquals(record.getName(), result.getName());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertUpdateAndFindById() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        record.setName("fulano");
-        recordSugarDataSource.update(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        assertEquals(record.getId(), id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.findById(
-                record.getId(),
-                new SugarDataSource.SuccessCallback<TestRecord>() {
-                    @Override
-                    public void onSuccess(TestRecord result) {
-                        assertEquals(record.getId(), result.getId());
-                        assertEquals("fulano", result.getName());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndListAll() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        recordSugarDataSource.insert(
-                record1,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record1.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        recordSugarDataSource.insert(
-                record2,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record2.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> list) {
-                        assertEquals(3, list.size());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.deleteAll(
-                new SugarDataSource.SuccessCallback<Integer>() {
-                    @Override
-                    public void onSuccess(Integer count) {
-                        assertEquals(3, count.intValue());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndCount() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        recordSugarDataSource.insert(
-                record1,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record1.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        recordSugarDataSource.insert(
-                record2,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record2.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.count(
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long count) {
-                        assertEquals(3, count.longValue());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testInsertAndGetCursor() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        recordSugarDataSource.insert(
-                record,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        recordSugarDataSource.insert(
-                record1,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record1.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        recordSugarDataSource.insert(
-                record2,
-                new SugarDataSource.SuccessCallback<Long>() {
-                    @Override
-                    public void onSuccess(Long id) {
-                        record2.setId(id);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> list) {
-                        assertEquals(3, list.size());
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.query(
-                null,
-                null,
-                null,
-                null,
-                null,
-                new SugarDataSource.SuccessCallback<Cursor>() {
-                    @Override
-                    public void onSuccess(Cursor cursor) {
-                        assertNotNull(cursor);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void bulkInsertAndListAllTest() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("fulano");
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("mengano");
-
-        final List<TestRecord> list = new ArrayList<>();
-        list.add(record);
-        list.add(record1);
-        list.add(record2);
-
-        recordSugarDataSource.bulkInsert(
-                list,
-                new SugarDataSource.SuccessCallback<List<Long>>() {
-                    @Override
-                    public void onSuccess(List<Long> ids) {
-                        for (int i = 0; i < list.size(); i++) {
-                            list.get(i).setId(ids.get(i));
-                        }
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> testRecords) {
-                        for (int i = 0; i < list.size(); i++) {
-                            TestRecord record1 = list.get(i);
-                            TestRecord record2 = testRecords.get(i);
-
-                            assertEquals(record1.getId(), record2.getId());
-                            assertEquals(record1.getName(), record2.getName());
-                        }
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void nullFindById() {
-        TestRecord record = new TestRecord();
-        record.setId(0L);
-
-        recordSugarDataSource.findById(
-                record.getId(),
-                new SugarDataSource.SuccessCallback<TestRecord>() {
-                    @Override
-                    public void onSuccess(TestRecord object) {
-                        assertNull(object);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        assertNotNull(e.getMessage());
-                    }
-                }
-        );
-    }
-
-    @Test
-    public void testNullListAll() {
-        recordSugarDataSource.listAll(
-                null,
-                new SugarDataSource.SuccessCallback<List<TestRecord>>() {
-                    @Override
-                    public void onSuccess(List<TestRecord> object) {
-                        assertNull(object);
-                    }
-                },
-                new SugarDataSource.ErrorCallback() {
-                    @Override
-                    public void onError(Exception e) {
-                        assertNotNull(e.getMessage());
-                    }
-                }
-        );
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    @SuppressWarnings("all")
-    public void testNullConstructor() {
-        SugarDataSource<TestRecord> dataSource = SugarDataSource.getInstance(null);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    @SuppressWarnings("all")
-    public void testCheckNotNull() {
-        TestRecord record = null;
-        recordSugarDataSource.checkNotNull(record);
-    }
-}
diff --git a/library/src/test/java/com/orm/SugarDbConfigurationTest.java b/library/src/test/java/com/orm/SugarDbConfigurationTest.java
deleted file mode 100644
index 64d50df6..00000000
--- a/library/src/test/java/com/orm/SugarDbConfigurationTest.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.orm;
-
-import com.orm.dsl.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import java.util.Locale;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 16, constants = BuildConfig.class)
-public final class SugarDbConfigurationTest {
-
-    @Test
-    public void testNotNullConfiguration() {
-        SugarDbConfiguration configuration = new SugarDbConfiguration()
-                .setDatabaseLocale(Locale.getDefault())
-                .setMaxSize(1024L)
-                .setPageSize(400L);
-
-        SugarContext.init(RuntimeEnvironment.application, configuration);
-
-        final SugarDbConfiguration config = SugarContext.getDbConfiguration();
-
-        assertEquals(configuration.getDatabaseLocale(), config.getDatabaseLocale());
-        assertEquals(configuration.getMaxSize(), config.getMaxSize());
-        assertEquals(configuration.getPageSize(), config.getPageSize());
-    }
-
-    @Test
-    public void testNullConfiguration() {
-        SugarContext.init(RuntimeEnvironment.application);
-        assertNull(SugarContext.getDbConfiguration());
-    }
-
-//    @Test
-//    public void testNotNullConfigurationWithSugarDb() {
-//        SugarDbConfiguration configuration = new SugarDbConfiguration()
-//                .setDatabaseLocale(Locale.getDefault())
-//                .setMaxSize(100000L)
-//                .setPageSize(100000L);
-//
-//        SugarContext.init(RuntimeEnvironment.application, configuration);
-//
-//        SQLiteDatabase database = SugarContext.getSugarContext().getSugarDb().getDB();
-//        SQLiteDatabase sqLiteDatabase = SugarDb.getInstance().getDB();
-//
-//        assertEquals(database.getMaximumSize(), sqLiteDatabase.getMaximumSize());
-//        assertEquals(database.getPageSize(), sqLiteDatabase.getPageSize());
-//
-//        if (sqLiteDatabase.isOpen()) {
-//            sqLiteDatabase.close();
-//        }
-//    }
-}
diff --git a/library/src/test/java/com/orm/SugarDbTest.java b/library/src/test/java/com/orm/SugarDbTest.java
deleted file mode 100644
index 7ff5914a..00000000
--- a/library/src/test/java/com/orm/SugarDbTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.orm;
-
-import android.database.sqlite.SQLiteDatabase;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SugarDbTest {
-    private final SugarDb sugarDb = SugarDb.getInstance();
-
-    @Test
-    //TODO check this better!
-    public void testGetReadableDatabase() {
-        final SQLiteDatabase db = sugarDb.getReadableDatabase();
-        assertEquals(false, db.isReadOnly());
-    }
-
-    @Test
-    public void testGetWritableDatabase() {
-        final SQLiteDatabase db = sugarDb.getWritableDatabase();
-        assertEquals(false, db.isReadOnly());
-    }
-
-    @Test
-    public void testGetDB() {
-        final SQLiteDatabase db = sugarDb.getDB();
-        assertEquals(false, db.isReadOnly());
-    }
-}
diff --git a/library/src/test/java/com/orm/app/ClientApp.java b/library/src/test/java/com/orm/app/ClientApp.java
deleted file mode 100644
index e9943aea..00000000
--- a/library/src/test/java/com/orm/app/ClientApp.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.orm.app;
-
-import android.app.Application;
-
-import com.orm.SugarContext;
-
-public class ClientApp extends Application {
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        SugarContext.init(this);
-    }
-
-    @Override
-    public void onTerminate() {
-        super.onTerminate();
-        SugarContext.terminate();
-    }
-}
diff --git a/library/src/test/java/com/orm/helper/ManifestHelperTest.java b/library/src/test/java/com/orm/helper/ManifestHelperTest.java
deleted file mode 100644
index 2fad344c..00000000
--- a/library/src/test/java/com/orm/helper/ManifestHelperTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package com.orm.helper;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.util.KeyWordUtil;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static junit.framework.Assert.assertNull;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-import static com.orm.helper.ManifestHelper.getDatabaseName;
-import static com.orm.helper.ManifestHelper.getDatabaseVersion;
-import static com.orm.helper.ManifestHelper.getDomainPackageName;
-import static com.orm.helper.ManifestHelper.isDebugEnabled;
-import static com.orm.helper.ManifestHelper.DATABASE_DEFAULT_NAME;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ManifestHelperTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        ManifestHelper helper = ManifestHelper.class.getDeclaredConstructor().newInstance();
-        assertNull(helper);
-    }
-
-
-    @Test
-    public void testGetDbName() {
-        assertEquals(DATABASE_DEFAULT_NAME, getDatabaseName());
-    }
-
-    @Test
-    public void testGetDatabaseName() {
-        assertEquals(DATABASE_DEFAULT_NAME, getDatabaseName());
-    }
-
-    @Test
-    public void testGetDatabaseVersion() {
-        assertEquals(1, getDatabaseVersion());
-    }
-
-    @Test
-    public void testGetDomainPackageName() {
-        assertNotNull(getDomainPackageName());
-    }
-
-    @Test
-    public void testGetDebugEnabled() {
-        assertEquals(false, isDebugEnabled());
-    }
-}
diff --git a/library/src/test/java/com/orm/helper/NamingHelperTest.java b/library/src/test/java/com/orm/helper/NamingHelperTest.java
deleted file mode 100644
index d53769ad..00000000
--- a/library/src/test/java/com/orm/helper/NamingHelperTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package com.orm.helper;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-import com.orm.util.ReflectionUtil;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.orm.helper.NamingHelper.*;
-import static junit.framework.Assert.*;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NamingHelperTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        NamingHelper helper = NamingHelper.class.getDeclaredConstructor().newInstance();
-        assertNull(helper);
-    }
-
-    @Test
-    public void testToSQLNameFromField() {
-        List<Field> fieldList = ReflectionUtil.getTableFields(TestRecord.class);
-
-        if (null != fieldList && !fieldList.isEmpty()) {
-            List<String> columnList = new ArrayList<>();
-
-            for(Field field: fieldList) {
-                columnList.add(toColumnName(field));
-            }
-
-            boolean isIdInList = inList(columnList, "ID");
-            boolean isNameInList = inList(columnList, "NAME");
-
-            assertTrue(isIdInList);
-            assertTrue(isNameInList);
-        }
-    }
-
-    private boolean inList(List<String> list, String searchValue) {
-        for (String val: list) {
-            if (val.equals(searchValue)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    @Test
-    public void testToSQLNameFromClass() {
-        assertEquals("TEST_RECORD", toTableName(TestRecord.class));
-    }
-
-    @Test
-    public void testToSQLNameCaseConversion() throws Exception {
-        assertToSqlNameEquals("TESTLOWERCASE", "testlowercase");
-        assertToSqlNameEquals("TESTUPPERCASE", "TESTUPPERCASE");
-    }
-
-    @Test
-    public void testToSQLNameUnderscore() {
-        assertToSqlNameEquals("TEST_UNDERSCORE", "testUnderscore");
-        assertToSqlNameEquals("AB_CD", "AbCd");
-        assertToSqlNameEquals("AB_CD", "ABCd");
-        assertToSqlNameEquals("AB_CD", "AbCD");
-        assertToSqlNameEquals("SOME_DETAILS_OBJECT", "SomeDetailsObject");
-        assertToSqlNameEquals("H_OL_A","hOlA");
-        assertToSqlNameEquals("A","a");
-    }
-
-    /**
-     * Helper method that asserts a CamelCaseString is converted to UPPER_CASE_UNDER_SCORE.
-     *
-     * @param expected  a CamelCaseString
-     * @param actual    the expected UPPER_CASE_UNDER_SCORE string
-     */
-    private static void assertToSqlNameEquals(String expected, String actual) {
-        assertEquals(expected, toSQLNameDefault(actual));
-    }
-
-}
diff --git a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java b/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
deleted file mode 100644
index 1fe73708..00000000
--- a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package com.orm.helper;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarContext;
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.SugarTransactionHelper;
-import com.orm.model.TestRecord;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SugarTransactionHelperTest {
-    private List<TestRecord> recordList = new ArrayList<>();
-    private TestRecord record1 = new TestRecord();
-    private TestRecord record2 = new TestRecord();
-    private TestRecord record3 = new TestRecord();
-
-    @Before
-    public void setUp() {
-        SugarContext.init(RuntimeEnvironment.application);
-
-        record1.setId(1L);
-        record1.setName("lala");
-
-        record2.setId(2L);
-        record2.setName("fefe");
-
-        record3.setId(3L);
-        record3.setName("jaja");
-
-        recordList.add(record1);
-        recordList.add(record2);
-        recordList.add(record3);
-    }
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        SugarTransactionHelper helper = SugarTransactionHelper.class.getDeclaredConstructor().newInstance();
-        assertNull(helper);
-    }
-
-    @Test
-    public void testDoInTransaction() {
-        SugarTransactionHelper.doInTransaction(new SugarTransactionHelper.Callback() {
-            @Override
-            public void manipulateInTransaction() {
-                for (TestRecord record: recordList) {
-                    TestRecord.save(record);
-                }
-            }
-        });
-
-        final List<TestRecord> results = TestRecord.listAll(TestRecord.class);
-
-        assertEquals(true, inList(results, record1));
-        assertEquals(true, inList(results, record2));
-        assertEquals(true, inList(results, record3));
-    }
-
-    private boolean inList(List<TestRecord> list, TestRecord testRecord) {
-        for (TestRecord record: list) {
-            if (record.getId().equals(testRecord.getId()) &&
-                record.getName().equals(testRecord.getName())) {
-                return true;
-            }
-        }
-        return false;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/AllAnotatedModel.java b/library/src/test/java/com/orm/model/AllAnotatedModel.java
deleted file mode 100644
index c2fb888d..00000000
--- a/library/src/test/java/com/orm/model/AllAnotatedModel.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Column;
-import com.orm.annotation.Ignore;
-import com.orm.annotation.NotNull;
-import com.orm.annotation.Table;
-import com.orm.annotation.Unique;
-
-/**
- * @author jonatan.salas
- */
-@Table
-public class AllAnotatedModel {
-
-    @NotNull @Unique
-    private Long id;
-
-    @Column(notNull = true, name = "name", unique = true)
-    private String name;
-
-    @Ignore
-    private String surname;
-
-    public AllAnotatedModel() { }
-}
diff --git a/library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java
deleted file mode 100644
index f5529512..00000000
--- a/library/src/test/java/com/orm/model/BigDecimalFieldAnnotatedModel.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-import java.math.BigDecimal;
-
-@Table
-public class BigDecimalFieldAnnotatedModel {
-    private BigDecimal decimal;
-    private Long id;
-
-    public BigDecimalFieldAnnotatedModel() {}
-
-    public BigDecimalFieldAnnotatedModel(BigDecimal decimal) {
-        this.decimal = decimal;
-    }
-
-    public BigDecimal getBigDecimal() {
-        return decimal;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java b/library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java
deleted file mode 100644
index cbcdc3c9..00000000
--- a/library/src/test/java/com/orm/model/BigDecimalFieldExtendedModel.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-import java.math.BigDecimal;
-
-public class BigDecimalFieldExtendedModel extends SugarRecord {
-    private BigDecimal decimal;
-
-    public BigDecimalFieldExtendedModel() {}
-
-    public BigDecimalFieldExtendedModel(BigDecimal decimal) {
-        this.decimal = decimal;
-    }
-
-    public BigDecimal getBigDecimal() {
-        return decimal;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java
deleted file mode 100644
index 31a8668b..00000000
--- a/library/src/test/java/com/orm/model/BooleanFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class BooleanFieldAnnotatedModel {
-    private Boolean objectBoolean;
-    private boolean rawBoolean;
-    private Long id;
-
-    public BooleanFieldAnnotatedModel() {}
-
-    public BooleanFieldAnnotatedModel(Boolean objectBoolean) {
-        this.objectBoolean = objectBoolean;
-    }
-
-    public BooleanFieldAnnotatedModel(boolean rawBoolean) {
-        this.rawBoolean = rawBoolean;
-    }
-
-    public Boolean getBoolean() {
-        return objectBoolean;
-    }
-
-    public boolean getRawBoolean() {
-        return rawBoolean;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java b/library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java
deleted file mode 100644
index 0c78c82a..00000000
--- a/library/src/test/java/com/orm/model/BooleanFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class BooleanFieldExtendedModel extends SugarRecord {
-    private Boolean objectBoolean;
-    private boolean rawBoolean;
-
-    public BooleanFieldExtendedModel() {}
-
-    public BooleanFieldExtendedModel(Boolean objectBoolean) {
-        this.objectBoolean = objectBoolean;
-    }
-
-    public BooleanFieldExtendedModel(boolean rawBoolean) {
-        this.rawBoolean = rawBoolean;
-    }
-
-    public Boolean getBoolean() {
-        return objectBoolean;
-    }
-
-    public boolean getRawBoolean() {
-        return rawBoolean;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java b/library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java
deleted file mode 100644
index 4a9f809c..00000000
--- a/library/src/test/java/com/orm/model/ByteArrayAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class ByteArrayAnnotatedModel {
-    private byte[] byteArray;
-    private Long id;
-
-    public ByteArrayAnnotatedModel() {}
-
-    public ByteArrayAnnotatedModel(byte[] byteArray) {
-        this.byteArray = byteArray;
-    }
-
-    public byte[] getByteArray() {
-        return byteArray;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ByteArrayExtendedModel.java b/library/src/test/java/com/orm/model/ByteArrayExtendedModel.java
deleted file mode 100644
index 7e40208d..00000000
--- a/library/src/test/java/com/orm/model/ByteArrayExtendedModel.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class ByteArrayExtendedModel extends SugarRecord {
-    private byte[] byteArray;
-
-    public ByteArrayExtendedModel() {}
-
-    public ByteArrayExtendedModel(byte[] byteArray) {
-        this.byteArray = byteArray;
-    }
-
-    public byte[] getByteArray() {
-        return byteArray;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java
deleted file mode 100644
index 2c13e075..00000000
--- a/library/src/test/java/com/orm/model/DoubleFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class DoubleFieldAnnotatedModel {
-    private Double objectDouble;
-    private double rawDouble;
-    private Long id;
-
-    public DoubleFieldAnnotatedModel() {}
-
-    public DoubleFieldAnnotatedModel(Double objectDouble) {
-        this.objectDouble = objectDouble;
-    }
-
-    public DoubleFieldAnnotatedModel(double rawDouble) {
-        this.rawDouble = rawDouble;
-    }
-
-    public Double getDouble() {
-        return objectDouble;
-    }
-
-    public double getRawDouble() {
-        return rawDouble;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java b/library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java
deleted file mode 100644
index 1a000c3c..00000000
--- a/library/src/test/java/com/orm/model/DoubleFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class DoubleFieldExtendedModel extends SugarRecord {
-    private Double objectDouble;
-    private double rawDouble;
-
-    public DoubleFieldExtendedModel() {}
-
-    public DoubleFieldExtendedModel(Double objectDouble) {
-        this.objectDouble = objectDouble;
-    }
-
-    public DoubleFieldExtendedModel(double rawDouble) {
-        this.rawDouble = rawDouble;
-    }
-
-    public Double getDouble() {
-        return objectDouble;
-    }
-
-    public double getRawDouble() {
-        return rawDouble;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/EmptyModel.java b/library/src/test/java/com/orm/model/EmptyModel.java
deleted file mode 100644
index a98ab5e2..00000000
--- a/library/src/test/java/com/orm/model/EmptyModel.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-public class EmptyModel extends SugarRecord {
-    public EmptyModel() { }
-}
diff --git a/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
deleted file mode 100644
index abb3a63f..00000000
--- a/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class EnumFieldAnnotatedModel {
-    public static enum DefaultEnum {
-        ONE, TWO
-    }
-
-    public static enum OverrideEnum {
-        ONE, TWO;
-
-        @Override
-        public String toString() {
-            return super.toString().toLowerCase();
-        }
-    }
-
-    private OverrideEnum overrideEnum;
-    private DefaultEnum defaultEnum;
-    private Long id;
-
-    public EnumFieldAnnotatedModel() {
-
-    }
-
-    public EnumFieldAnnotatedModel(OverrideEnum e1, DefaultEnum d1) {
-        overrideEnum = e1;
-        defaultEnum = d1;
-    }
-
-    public DefaultEnum getDefaultEnum() {
-        return defaultEnum;
-    }
-
-    public void setDefaultEnum(DefaultEnum defaultEnum) {
-        this.defaultEnum = defaultEnum;
-    }
-
-    public void setOverrideEnum(OverrideEnum overrideEnum) {
-        this.overrideEnum = overrideEnum;
-    }
-
-    public OverrideEnum getOverrideEnum() {
-        return overrideEnum;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java b/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
deleted file mode 100644
index 24ec7725..00000000
--- a/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class EnumFieldExtendedModel extends SugarRecord {
-    public static enum DefaultEnum {
-        ONE, TWO
-    }
-
-    public static enum OverrideEnum {
-        ONE, TWO;
-
-        @Override
-        public String toString() {
-            return super.toString().toLowerCase();
-        }
-    }
-
-    private OverrideEnum overrideEnum;
-    private DefaultEnum defaultEnum;
-
-    public EnumFieldExtendedModel() {
-
-    }
-
-    public EnumFieldExtendedModel(OverrideEnum e1, DefaultEnum d1) {
-        overrideEnum = e1;
-        defaultEnum = d1;
-    }
-
-    public DefaultEnum getDefaultEnum() {
-        return defaultEnum;
-    }
-
-    public void setDefaultEnum(DefaultEnum defaultEnum) {
-        this.defaultEnum = defaultEnum;
-    }
-
-    public void setOverrideEnum(OverrideEnum overrideEnum) {
-        this.overrideEnum = overrideEnum;
-    }
-
-    public OverrideEnum getOverrideEnum() {
-        return overrideEnum;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java
deleted file mode 100644
index be2f01f5..00000000
--- a/library/src/test/java/com/orm/model/FloatFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class FloatFieldAnnotatedModel {
-    private Float objectFloat;
-    private float rawFloat;
-    private Long id;
-
-    public FloatFieldAnnotatedModel() {}
-
-    public FloatFieldAnnotatedModel(Float objectFloat) {
-        this.objectFloat = objectFloat;
-    }
-
-    public FloatFieldAnnotatedModel(float rawFloat) {
-        this.rawFloat = rawFloat;
-    }
-
-    public Float getFloat() {
-        return objectFloat;
-    }
-
-    public float getRawFloat() {
-        return rawFloat;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/FloatFieldExtendedModel.java b/library/src/test/java/com/orm/model/FloatFieldExtendedModel.java
deleted file mode 100644
index e79f1a4b..00000000
--- a/library/src/test/java/com/orm/model/FloatFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class FloatFieldExtendedModel extends SugarRecord {
-    private Float objectFloat;
-    private float rawFloat;
-
-    public FloatFieldExtendedModel() {}
-
-    public FloatFieldExtendedModel(Float objectFloat) {
-        this.objectFloat = objectFloat;
-    }
-
-    public FloatFieldExtendedModel(float rawFloat) {
-        this.rawFloat = rawFloat;
-    }
-
-    public Float getFloat() {
-        return objectFloat;
-    }
-
-    public float getRawFloat() {
-        return rawFloat;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java b/library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java
deleted file mode 100644
index 64f8436b..00000000
--- a/library/src/test/java/com/orm/model/IncompleteAnnotatedModel.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class IncompleteAnnotatedModel {
-    // An annotated model must provide a Long id field. A setter or getter is optional
-    public IncompleteAnnotatedModel() {}
-}
diff --git a/library/src/test/java/com/orm/model/IntUniqueModel.java b/library/src/test/java/com/orm/model/IntUniqueModel.java
deleted file mode 100644
index 7a03e3d0..00000000
--- a/library/src/test/java/com/orm/model/IntUniqueModel.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.Unique;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-public class IntUniqueModel extends SugarRecord {
-
-    @Unique
-    private int value;
-
-    public IntUniqueModel() { }
-
-    public IntUniqueModel(int value) {
-        this.value = value;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java
deleted file mode 100644
index e486d5db..00000000
--- a/library/src/test/java/com/orm/model/IntegerFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class IntegerFieldAnnotatedModel {
-    private Integer integer;
-    private int rawInteger;
-    public Long id;
-
-    public IntegerFieldAnnotatedModel() {}
-
-    public IntegerFieldAnnotatedModel(Integer integer) {
-        this.integer = integer;
-    }
-
-    public IntegerFieldAnnotatedModel(int rawInteger) {
-        this.rawInteger = rawInteger;
-    }
-
-    public Integer getInteger() {
-        return integer;
-    }
-
-    public int getInt() {
-        return rawInteger;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java b/library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java
deleted file mode 100644
index 407979a3..00000000
--- a/library/src/test/java/com/orm/model/IntegerFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class IntegerFieldExtendedModel extends SugarRecord {
-    private Integer integer;
-    private int rawInteger;
-
-    public IntegerFieldExtendedModel() {}
-
-    public IntegerFieldExtendedModel(Integer integer) {
-        this.integer = integer;
-    }
-
-    public IntegerFieldExtendedModel(int rawInteger) {
-        this.rawInteger = rawInteger;
-    }
-
-    public Integer getInteger() {
-        return integer;
-    }
-
-    public int getInt() {
-        return rawInteger;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java
deleted file mode 100644
index 7f2cd539..00000000
--- a/library/src/test/java/com/orm/model/LongFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class LongFieldAnnotatedModel {
-    private Long objectLong;
-    private long rawLong;
-    private Long id;
-
-    public LongFieldAnnotatedModel() {}
-
-    public LongFieldAnnotatedModel(Long objectLong) {
-        this.objectLong = objectLong;
-    }
-
-    public LongFieldAnnotatedModel(long rawLong) {
-        this.rawLong = rawLong;
-    }
-
-    public Long getLong() {
-        return objectLong;
-    }
-
-    public long getRawLong() {
-        return rawLong;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/LongFieldExtendedModel.java b/library/src/test/java/com/orm/model/LongFieldExtendedModel.java
deleted file mode 100644
index 66bc7d6d..00000000
--- a/library/src/test/java/com/orm/model/LongFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class LongFieldExtendedModel extends SugarRecord {
-    private Long objectLong;
-    private long rawLong;
-
-    public LongFieldExtendedModel() {}
-
-    public LongFieldExtendedModel(Long objectLong) {
-        this.objectLong = objectLong;
-    }
-
-    public LongFieldExtendedModel(long rawLong) {
-        this.rawLong = rawLong;
-    }
-
-    public Long getLong() {
-        return objectLong;
-    }
-
-    public long getRawLong() {
-        return rawLong;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/MultiColumnUniqueModel.java b/library/src/test/java/com/orm/model/MultiColumnUniqueModel.java
deleted file mode 100644
index cea9cd92..00000000
--- a/library/src/test/java/com/orm/model/MultiColumnUniqueModel.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.MultiUnique;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-@MultiUnique("a, b")
-public class MultiColumnUniqueModel extends SugarRecord {
-
-    private int a;
-    private int b;
-
-    public MultiColumnUniqueModel() { }
-
-    public MultiColumnUniqueModel(int a, int b) {
-        this.a = a;
-        this.b = b;
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/model/NestedAnnotatedModel.java b/library/src/test/java/com/orm/model/NestedAnnotatedModel.java
deleted file mode 100644
index f57b2d7a..00000000
--- a/library/src/test/java/com/orm/model/NestedAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class NestedAnnotatedModel {
-    private RelationshipAnnotatedModel nested;
-    private Long id;
-
-    public NestedAnnotatedModel() {}
-
-    public NestedAnnotatedModel(RelationshipAnnotatedModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipAnnotatedModel getNested() {
-        return nested;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedExtendedModel.java b/library/src/test/java/com/orm/model/NestedExtendedModel.java
deleted file mode 100644
index 0b583d95..00000000
--- a/library/src/test/java/com/orm/model/NestedExtendedModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class NestedExtendedModel extends SugarRecord {
-    private RelationshipExtendedModel nested;
-
-    public NestedExtendedModel() {}
-
-    public NestedExtendedModel(RelationshipExtendedModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipExtendedModel getNested() {
-        return nested;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedAAModel.java b/library/src/test/java/com/orm/model/NestedMixedAAModel.java
deleted file mode 100644
index a96500f5..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedAAModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class NestedMixedAAModel extends SugarRecord {
-    private RelationshipMixedAModel nested;
-
-    public NestedMixedAAModel() {}
-
-    public NestedMixedAAModel(RelationshipMixedAModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedAModel getNested() {
-        return nested;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedABModel.java b/library/src/test/java/com/orm/model/NestedMixedABModel.java
deleted file mode 100644
index 2cbae3db..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedABModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class NestedMixedABModel extends SugarRecord {
-    private RelationshipMixedBModel nested;
-
-    public NestedMixedABModel() {}
-
-    public NestedMixedABModel(RelationshipMixedBModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedBModel getNested() {
-        return nested;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedBAModel.java b/library/src/test/java/com/orm/model/NestedMixedBAModel.java
deleted file mode 100644
index 82de9717..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedBAModel.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.annotation.Table;
-
-@Table
-public class NestedMixedBAModel {
-    private RelationshipMixedAModel nested;
-    private Long id;
-
-    public NestedMixedBAModel() {}
-
-    public NestedMixedBAModel(RelationshipMixedAModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedAModel getNested() {
-        return nested;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NestedMixedBBModel.java b/library/src/test/java/com/orm/model/NestedMixedBBModel.java
deleted file mode 100644
index 6a208b5b..00000000
--- a/library/src/test/java/com/orm/model/NestedMixedBBModel.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.annotation.Table;
-
-@Table
-public class NestedMixedBBModel {
-    private RelationshipMixedBModel nested;
-    private Long id;
-
-    public NestedMixedBBModel() {}
-
-    public NestedMixedBBModel(RelationshipMixedBModel nested) {
-        this.nested = nested;
-    }
-
-    public RelationshipMixedBModel getNested() {
-        return nested;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/NoSugarModel.java b/library/src/test/java/com/orm/model/NoSugarModel.java
deleted file mode 100644
index 617a99c4..00000000
--- a/library/src/test/java/com/orm/model/NoSugarModel.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.orm.model;
-
-
-public class NoSugarModel {
-    public NoSugarModel() {
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java b/library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java
deleted file mode 100644
index 42b9a4d9..00000000
--- a/library/src/test/java/com/orm/model/RelationshipAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class RelationshipAnnotatedModel {
-    private SimpleAnnotatedModel simple;
-    private Long id;
-
-    public RelationshipAnnotatedModel() {}
-
-    public RelationshipAnnotatedModel(SimpleAnnotatedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleAnnotatedModel getSimple() {
-        return simple;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/RelationshipExtendedModel.java b/library/src/test/java/com/orm/model/RelationshipExtendedModel.java
deleted file mode 100644
index 1e4e99bc..00000000
--- a/library/src/test/java/com/orm/model/RelationshipExtendedModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class RelationshipExtendedModel extends SugarRecord {
-    private SimpleExtendedModel simple;
-
-    public RelationshipExtendedModel() {}
-
-    public RelationshipExtendedModel(SimpleExtendedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleExtendedModel getSimple() {
-        return simple;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/RelationshipMixedAModel.java b/library/src/test/java/com/orm/model/RelationshipMixedAModel.java
deleted file mode 100644
index 1afa4a82..00000000
--- a/library/src/test/java/com/orm/model/RelationshipMixedAModel.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.SugarRecord;
-
-public class RelationshipMixedAModel extends SugarRecord {
-    private SimpleAnnotatedModel simple;
-
-    public RelationshipMixedAModel() {}
-
-    public RelationshipMixedAModel(SimpleAnnotatedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleAnnotatedModel getSimple() {
-        return simple;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/RelationshipMixedBModel.java b/library/src/test/java/com/orm/model/RelationshipMixedBModel.java
deleted file mode 100644
index 2197e62f..00000000
--- a/library/src/test/java/com/orm/model/RelationshipMixedBModel.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.orm.model;
-
-
-import com.orm.annotation.Table;
-
-@Table
-public class RelationshipMixedBModel {
-    private SimpleExtendedModel simple;
-    private Long id;
-
-    public RelationshipMixedBModel() {}
-
-    public RelationshipMixedBModel(SimpleExtendedModel simple) {
-        this.simple = simple;
-    }
-
-    public SimpleExtendedModel getSimple() {
-        return simple;
-    }
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java
deleted file mode 100644
index fea8e58e..00000000
--- a/library/src/test/java/com/orm/model/ShortFieldAnnotatedModel.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class ShortFieldAnnotatedModel {
-    private Short objectShort;
-    private short rawShort;
-    private Long id;
-
-    public ShortFieldAnnotatedModel() {}
-
-    public ShortFieldAnnotatedModel(Short objectShort) {
-        this.objectShort = objectShort;
-    }
-
-    public ShortFieldAnnotatedModel(short rawShort) {
-        this.rawShort = rawShort;
-    }
-
-    public Short getShort() {
-        return objectShort;
-    }
-
-    public short getRawShort() {
-        return rawShort;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/ShortFieldExtendedModel.java b/library/src/test/java/com/orm/model/ShortFieldExtendedModel.java
deleted file mode 100644
index 5e90b9f6..00000000
--- a/library/src/test/java/com/orm/model/ShortFieldExtendedModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class ShortFieldExtendedModel extends SugarRecord {
-    private Short objectShort;
-    private short rawShort;
-
-    public ShortFieldExtendedModel() {}
-
-    public ShortFieldExtendedModel(Short objectShort) {
-        this.objectShort = objectShort;
-    }
-
-    public ShortFieldExtendedModel(short rawShort) {
-        this.rawShort = rawShort;
-    }
-
-    public Short getShort() {
-        return objectShort;
-    }
-
-    public short getRawShort() {
-        return rawShort;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/SimpleAnnotatedModel.java b/library/src/test/java/com/orm/model/SimpleAnnotatedModel.java
deleted file mode 100644
index 918840ed..00000000
--- a/library/src/test/java/com/orm/model/SimpleAnnotatedModel.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-
-@Table
-public class SimpleAnnotatedModel {
-    private Long id;
-
-    public SimpleAnnotatedModel() {}
-
-    public Long getId() {
-        return id;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/SimpleExtendedModel.java b/library/src/test/java/com/orm/model/SimpleExtendedModel.java
deleted file mode 100644
index 9040145d..00000000
--- a/library/src/test/java/com/orm/model/SimpleExtendedModel.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-
-public class SimpleExtendedModel extends SugarRecord {
-    public SimpleExtendedModel() {}
-}
diff --git a/library/src/test/java/com/orm/model/SimpleModel.java b/library/src/test/java/com/orm/model/SimpleModel.java
deleted file mode 100644
index b2659084..00000000
--- a/library/src/test/java/com/orm/model/SimpleModel.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class SimpleModel extends SugarRecord {
-    private String str;
-    private int integer;
-    private boolean bool;
-
-    public String getStr() {
-        return str;
-    }
-
-    public void setStr(String str) {
-        this.str = str;
-    }
-
-    public int getInteger() {
-        return integer;
-    }
-
-    public void setInteger(int integer) {
-        this.integer = integer;
-    }
-
-    public boolean isBool() {
-        return bool;
-    }
-
-    public void setBool(boolean bool) {
-        this.bool = bool;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java
deleted file mode 100644
index e3220278..00000000
--- a/library/src/test/java/com/orm/model/StringFieldAnnotatedModel.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class StringFieldAnnotatedModel {
-    private String string;
-    private Long id;
-
-    public StringFieldAnnotatedModel() {}
-
-    public StringFieldAnnotatedModel(String string) {
-        this.string = string;
-    }
-
-    public String getString() {
-        return string;
-    }
-
-    public void setString(String string) {
-        this.string = string;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java b/library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java
deleted file mode 100644
index 4b458960..00000000
--- a/library/src/test/java/com/orm/model/StringFieldAnnotatedNoIdModel.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.orm.model;
-
-import com.orm.annotation.Table;
-
-@Table
-public class StringFieldAnnotatedNoIdModel {
-    private String string;
-
-    public StringFieldAnnotatedNoIdModel() {}
-
-    public StringFieldAnnotatedNoIdModel(String string) {
-        this.string = string;
-    }
-
-    public String getString() {
-        return string;
-    }
-
-    public void setString(String string) {
-        this.string = string;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldExtendedModel.java b/library/src/test/java/com/orm/model/StringFieldExtendedModel.java
deleted file mode 100644
index 9b79bc61..00000000
--- a/library/src/test/java/com/orm/model/StringFieldExtendedModel.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class StringFieldExtendedModel extends SugarRecord {
-    private String string;
-
-    public StringFieldExtendedModel() {}
-
-    public StringFieldExtendedModel(String string) {
-        this.string = string;
-    }
-
-    public String getString() {
-        return string;
-    }
-
-    public void setString(String string) {
-        this.string = string;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java b/library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java
deleted file mode 100644
index 674d53ba..00000000
--- a/library/src/test/java/com/orm/model/StringFieldExtendedModelAnnotatedColumn.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.Column;
-
-/**
- * Created by sibelius on 02/12/15.
- */
-public class StringFieldExtendedModelAnnotatedColumn extends SugarRecord {
-    @Column(name="anyName")
-    public String name;
-
-    public StringFieldExtendedModelAnnotatedColumn() { }
-
-    public StringFieldExtendedModelAnnotatedColumn(String name) {
-        this.name = name;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/TestRecord.java b/library/src/test/java/com/orm/model/TestRecord.java
deleted file mode 100644
index 64fe7dba..00000000
--- a/library/src/test/java/com/orm/model/TestRecord.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.orm.model;
-
-import com.orm.SugarRecord;
-
-public class TestRecord extends SugarRecord {
-
-    private String name;
-
-    public TestRecord() {
-        super();
-    }
-
-    public TestRecord setName(String name) {
-        this.name = name;
-        return this;
-    }
-
-    public String getName() {
-        return name;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/OneToManyModel.java b/library/src/test/java/com/orm/model/onetomany/OneToManyModel.java
deleted file mode 100644
index bb7bd96a..00000000
--- a/library/src/test/java/com/orm/model/onetomany/OneToManyModel.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-import com.orm.annotation.OneToMany;
-
-import java.util.List;
-
-/**
- * Created by Łukasz Wesołowski on 28.07.2016.
- */
-public class OneToManyModel extends SugarRecord {
-    @OneToMany(targetField = "model")
-    private List<OneToManyRelationModel> models;
-
-    public OneToManyModel() {
-    }
-
-    public OneToManyModel(Long id) {
-        setId(id);
-    }
-
-    public List<OneToManyRelationModel> getModels() {
-        return models;
-    }
-
-    public void setModels(List<OneToManyRelationModel> models) {
-        this.models = models;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java b/library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java
deleted file mode 100644
index 4c17ec56..00000000
--- a/library/src/test/java/com/orm/model/onetomany/OneToManyRelationModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-
-/**
- * Created by Łukasz Wesołowski on 28.07.2016.
- */
-public class OneToManyRelationModel extends SugarRecord {
-    private OneToManyModel model;
-
-    public OneToManyRelationModel() {
-    }
-
-    public OneToManyRelationModel(Long id, OneToManyModel model) {
-        setId(id);
-        this.model = model;
-    }
-
-    public OneToManyModel getModel() {
-        return model;
-    }
-
-    public void setModel(OneToManyModel model) {
-        this.model = model;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java b/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java
deleted file mode 100644
index d48e38f0..00000000
--- a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationModel.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-
-import java.util.List;
-
-/**
- * Created by Łukasz Wesołowski on 27.08.2016.
- */
-public class WithoutOneToManyAnnotationModel extends SugarRecord {
-    private List<OneToManyRelationModel> models;
-
-    public WithoutOneToManyAnnotationModel() {
-    }
-
-    public WithoutOneToManyAnnotationModel(Long id) {
-        setId(id);
-    }
-
-    public List<OneToManyRelationModel> getModels() {
-        return models;
-    }
-
-    public void setModels(List<OneToManyRelationModel> models) {
-        this.models = models;
-    }
-}
diff --git a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java b/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java
deleted file mode 100644
index 34e1eb2a..00000000
--- a/library/src/test/java/com/orm/model/onetomany/WithoutOneToManyAnnotationRelationModel.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.orm.model.onetomany;
-
-import com.orm.SugarRecord;
-
-/**
- * Created by Łukasz Wesołowski on 27.08.2016.
- */
-public class WithoutOneToManyAnnotationRelationModel extends SugarRecord {
-    private WithoutOneToManyAnnotationModel model;
-
-    public WithoutOneToManyAnnotationRelationModel() {
-    }
-
-    public WithoutOneToManyAnnotationRelationModel(Long id, WithoutOneToManyAnnotationModel model) {
-        setId(id);
-        this.model = model;
-    }
-
-    public WithoutOneToManyAnnotationModel getModel() {
-        return model;
-    }
-
-    public void setModel(WithoutOneToManyAnnotationModel model) {
-        this.model = model;
-    }
-}
diff --git a/library/src/test/java/com/orm/query/QueryBuilderTests.java b/library/src/test/java/com/orm/query/QueryBuilderTests.java
deleted file mode 100644
index 30b220df..00000000
--- a/library/src/test/java/com/orm/query/QueryBuilderTests.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.orm.query;
-
-import com.orm.util.QueryBuilder;
-
-import org.junit.Test;
-
-import static junit.framework.Assert.assertEquals;
-
-public final class QueryBuilderTests {
-
-    @Test(expected=RuntimeException.class)
-    public void noArgumentsTest() {
-        QueryBuilder.generatePlaceholders(0);
-    }
-
-    @Test()
-    public void oneArgumentsTest() {
-        assertEquals("?", QueryBuilder.generatePlaceholders(1));
-    }
-
-    @Test
-    public void twoArgumentsTest() {
-        assertEquals("?,?", QueryBuilder.generatePlaceholders(2));
-    }
-
-    @Test
-    public void manyArgumentsTest() {
-        assertEquals("?,?,?,?,?,?,?,?,?,?", QueryBuilder.generatePlaceholders(10));
-    }
-}
diff --git a/library/src/test/java/com/orm/query/SelectTest.java b/library/src/test/java/com/orm/query/SelectTest.java
deleted file mode 100644
index ad0393bd..00000000
--- a/library/src/test/java/com/orm/query/SelectTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.orm.query;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static junit.framework.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SelectTest {
-
-    @Test
-    public void testMergeCondition(){
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testWhere(){
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void toSqlAllClauses(){
-        String toSql = Select.from(TestRecord.class)
-                .where("foo")
-                .orderBy("doe")
-                .groupBy("john")
-                .limit("5")
-                .offset("10")
-                .toSql();
-        assertEquals("SELECT * FROM TEST_RECORD WHERE foo ORDER BY doe GROUP BY john LIMIT 5 OFFSET 10 ", toSql);
-    }
-
-    @Test
-    public void toSqlNoClauses(){
-        String toSql = Select.from(TestRecord.class)
-                .toSql();
-        assertEquals("SELECT * FROM TEST_RECORD ", toSql);
-    }
-
-    @Test
-    public void toSqlWhereLimitClauses(){
-        String toSql = Select.from(TestRecord.class)
-                .where("foo")
-                .limit("10")
-                .toSql();
-        assertEquals("SELECT * FROM TEST_RECORD WHERE foo LIMIT 10 ", toSql);
-    }
-
-
-    @Test
-    public void testWhereOr(){
-        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
-        assertEquals("(test = ?  OR prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testAnd(){
-        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where.and(Condition.prop("prop").eq(2));
-
-        assertEquals("(test = ? ) AND (prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testOr(){
-        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
-        assertEquals("(test = ? )", where.getWhereCond());
-        assertEquals(1, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-
-        where.or(Condition.prop("prop").eq(2));
-
-        assertEquals("(test = ? ) OR (prop = ? )", where.getWhereCond());
-        assertEquals(2, where.getArgs().length);
-        assertEquals("satya", where.getArgs()[0]);
-        assertEquals("2", where.getArgs()[1]);
-    }
-
-    @Test
-    public void testIsNull() {
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").isNull());
-        assertEquals("(test IS NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").eq(null));
-        assertEquals("(test IS NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-    }
-
-    @Test
-    public void testIsNotNull() {
-        Select where = Select.from(TestRecord.class).where(Condition.prop("test").isNotNull());
-        assertEquals("(test IS NOT NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-
-        where = Select.from(TestRecord.class).where(Condition.prop("test").notEq(null));
-        assertEquals("(test IS NOT NULL )", where.getWhereCond());
-        assertEquals(0, where.getArgs().length);
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/record/BigDecimalFieldTests.java b/library/src/test/java/com/orm/record/BigDecimalFieldTests.java
deleted file mode 100644
index a877a6af..00000000
--- a/library/src/test/java/com/orm/record/BigDecimalFieldTests.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.BigDecimalFieldAnnotatedModel;
-import com.orm.model.BigDecimalFieldExtendedModel;
-
-import org.junit.After;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.math.BigDecimal;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class BigDecimalFieldTests {
-    private BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
-
-    @Test
-    public void nullBigDecimalExtendedTest() {
-        save(new BigDecimalFieldExtendedModel());
-        BigDecimalFieldExtendedModel model = findById(BigDecimalFieldExtendedModel.class, 1);
-        assertNull(model.getBigDecimal());
-    }
-
-    @Test
-    public void nullBigDecimalAnnotatedTest() {
-        save(new BigDecimalFieldAnnotatedModel());
-        BigDecimalFieldAnnotatedModel model = findById(BigDecimalFieldAnnotatedModel.class, 1);
-        assertNull(model.getBigDecimal());
-    }
-
-    @Test
-    public void bigDecimalExtendedTest() {
-        save(new BigDecimalFieldExtendedModel(decimal));
-        BigDecimalFieldExtendedModel model = findById(BigDecimalFieldExtendedModel.class, 1);
-        assertEquals(decimal, model.getBigDecimal());
-    }
-
-    @Test
-    public void bigDecimalAnnotatedTest() {
-        save(new BigDecimalFieldAnnotatedModel(decimal));
-        BigDecimalFieldAnnotatedModel model = findById(BigDecimalFieldAnnotatedModel.class, 1);
-        assertEquals(decimal, model.getBigDecimal());
-    }
-
-    @After
-    public void after() {
-        decimal = null;
-    }
-}
diff --git a/library/src/test/java/com/orm/record/BooleanFieldTests.java b/library/src/test/java/com/orm/record/BooleanFieldTests.java
deleted file mode 100644
index 3a026a48..00000000
--- a/library/src/test/java/com/orm/record/BooleanFieldTests.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.BooleanFieldAnnotatedModel;
-import com.orm.model.BooleanFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class BooleanFieldTests {
-
-    @Test
-    public void nullBooleanExtendedTest() {
-        save(new BooleanFieldExtendedModel());
-        BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertNull(model.getBoolean());
-    }
-
-    @Test
-    public void nullRawBooleanExtendedTest() {
-        save(new BooleanFieldExtendedModel());
-        BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
-    }
-
-    @Test
-    public void nullBooleanAnnotatedTest() {
-        save(new BooleanFieldAnnotatedModel());
-        BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertNull(model.getBoolean());
-    }
-
-    @Test
-    public void nullRawBooleanAnnotatedTest() {
-        save(new BooleanFieldAnnotatedModel());
-        BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
-    }
-
-////TODO check this method
-//    @Test
-//    public void objectBooleanExtendedTest() {
-//        save(new BooleanFieldExtendedModel(true));
-//        BooleanFieldExtendedModel model = SugarRecord.findById(BooleanFieldExtendedModel.class, 1);
-//        assertEquals(true, model.getBoolean());
-//    }
-
-    @Test
-    public void rawBooleanExtendedTest() {
-        save(new BooleanFieldExtendedModel(true));
-        BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
-    }
-
-//    //TODO check this
-//    @Test
-//    public void objectBooleanAnnotatedTest() {
-//        save(new BooleanFieldAnnotatedModel(true));
-//        BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
-//
-//        if (null != model) {
-//            assertEquals(true, model.getBoolean());
-//        }
-//    }
-
-    @Test
-    public void rawBooleanAnnotatedTest() {
-        save(new BooleanFieldAnnotatedModel(true));
-        BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/ByteArrayFieldTests.java b/library/src/test/java/com/orm/record/ByteArrayFieldTests.java
deleted file mode 100644
index 450823f2..00000000
--- a/library/src/test/java/com/orm/record/ByteArrayFieldTests.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.ByteArrayAnnotatedModel;
-import com.orm.model.ByteArrayExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ByteArrayFieldTests {
-
-    @Test
-    public void nullByteArrayExtendedTest() {
-        byte[] array = "".getBytes();
-        save(new ByteArrayExtendedModel());
-        ByteArrayExtendedModel model = findById(ByteArrayExtendedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-
-    @Test
-    public void nullByteArrayAnnotatedTest() {
-        byte[] array = "".getBytes();
-        save(new ByteArrayAnnotatedModel());
-        ByteArrayAnnotatedModel model = findById(ByteArrayAnnotatedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-
-    @Test
-    public void byteArrayExtendedTest() {
-        byte[] array = "hello".getBytes();
-        save(new ByteArrayExtendedModel(array));
-        ByteArrayExtendedModel model = findById(ByteArrayExtendedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-
-    @Test
-    public void byteArrayAnnotatedTest() {
-        byte[] array = "hello".getBytes();
-        save(new ByteArrayAnnotatedModel(array));
-        ByteArrayAnnotatedModel model = findById(ByteArrayAnnotatedModel.class, 1);
-        assertEquals(new String(array), new String(model.getByteArray()));
-        assertArrayEquals(array, model.getByteArray());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/CursorTests.java b/library/src/test/java/com/orm/record/CursorTests.java
deleted file mode 100644
index a6036a15..00000000
--- a/library/src/test/java/com/orm/record/CursorTests.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.orm.record;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.database.Cursor;
-import android.os.Build;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.CursorAdapter;
-import android.widget.TextView;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.SimpleModel;
-import com.orm.query.Select;
-
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static junit.framework.Assert.assertNotSame;
-import static junit.framework.Assert.assertSame;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class CursorTests {
-
-    @Test
-    public void testColumnNames() {
-        save(new SimpleModel());
-        Cursor c = Select.from(SimpleModel.class).getCursor();
-        for (String col : new String[]{"STR", "INTEGER", "BOOL", "ID"}) {
-            assertNotSame("Missing column for field: " + col, -1, c.getColumnIndex(col));
-        }
-    }
-    @Test
-    public void testSugarCursor() {
-        save(new SimpleModel());
-        Cursor cursor = Select.from(SimpleModel.class).getCursor();
-        assertNotSame("No _id", -1, cursor.getColumnIndex("_id"));
-        assertSame("_id != ID", cursor.getColumnIndex("_id"), cursor.getColumnIndex("ID"));
-    }
-
-    @Test
-    public void testNoColumn() {
-        save(new SimpleModel());
-        Cursor cursor = Select.from(SimpleModel.class).getCursor();
-        assertSame(-1, cursor.getColumnIndex("nonexistent"));
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    @Test
-    public void testMakeAdapter() {
-        save(new SimpleModel());
-        Cursor c = Select.from(SimpleModel.class).getCursor();
-        CursorAdapter adapter = new CursorAdapter(RuntimeEnvironment.application, c, true) {
-            @Override
-            public View newView(Context context, Cursor cursor, ViewGroup parent) {
-                TextView tv = new TextView(context);
-                String s = cursor.getString(cursor.getColumnIndex("STR"));
-                tv.setText(s);
-                return null;
-            }
-
-            @Override
-            public void bindView(View view, Context context, Cursor cursor) {
-                String s = cursor.getString(cursor.getColumnIndex("STR"));
-                ((TextView) view).setText(s);
-            }
-        };
-
-        Assert.assertNotNull(adapter);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/DoubleFieldTests.java b/library/src/test/java/com/orm/record/DoubleFieldTests.java
deleted file mode 100644
index a05fa3e0..00000000
--- a/library/src/test/java/com/orm/record/DoubleFieldTests.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarRecord;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.DoubleFieldAnnotatedModel;
-import com.orm.model.DoubleFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class DoubleFieldTests {
-
-    @Test
-    public void nullDoubleExtendedTest() {
-        save(new DoubleFieldExtendedModel());
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertNull(model.getDouble());
-    }
-
-    @Test
-    public void nullRawDoubleExtendedTest() {
-        save(new DoubleFieldExtendedModel());
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertEquals(0.0, model.getRawDouble(), 0.0000000001);
-    }
-
-    @Test
-    public void nullDoubleAnnotatedTest() {
-        save(new DoubleFieldAnnotatedModel());
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertNull(model.getDouble());
-    }
-
-    @Test
-    public void nullRawDoubleAnnotatedTest() {
-        save(new DoubleFieldAnnotatedModel());
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertEquals(0.0, model.getRawDouble(), 0.0000000001);
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void objectDoubleExtendedTest() {
-        Double objectDouble = Double.valueOf(25.0);
-        save(new DoubleFieldExtendedModel(objectDouble));
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertEquals(objectDouble, model.getDouble());
-    }
-
-    @Test
-    public void rawDoubleExtendedTest() {
-        save(new DoubleFieldExtendedModel(25.0));
-        DoubleFieldExtendedModel model = findById(DoubleFieldExtendedModel.class, 1);
-        assertEquals(25.0, model.getRawDouble(), 0.0000000001);
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void objectDoubleAnnotatedTest() {
-        Double objectDouble = Double.valueOf(25.0);
-        save(new DoubleFieldAnnotatedModel(objectDouble));
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertEquals(objectDouble, model.getDouble());
-    }
-
-    @Test
-    public void rawDoubleAnnotatedTest() {
-        save(new DoubleFieldAnnotatedModel(25.0));
-        DoubleFieldAnnotatedModel model = findById(DoubleFieldAnnotatedModel.class, 1);
-        assertEquals(25.0, model.getRawDouble(), 0.0000000001);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/EnumFieldTests.java b/library/src/test/java/com/orm/record/EnumFieldTests.java
deleted file mode 100644
index 42647b00..00000000
--- a/library/src/test/java/com/orm/record/EnumFieldTests.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.EnumFieldAnnotatedModel;
-import com.orm.model.EnumFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-import static com.orm.model.EnumFieldExtendedModel.DefaultEnum;
-import static com.orm.model.EnumFieldExtendedModel.OverrideEnum;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class EnumFieldTests {
-
-    @Test
-    public void nullDefaultEnumExtendedTest() {
-        save(new EnumFieldExtendedModel());
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNull(model.getDefaultEnum());
-    }
-
-    @Test
-    public void nullOverriddenEnumExtendedTest() {
-        save(new EnumFieldExtendedModel());
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNull(model.getOverrideEnum());
-    }
-    @Test
-    public void nullDefaultEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel());
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNull(model.getDefaultEnum());
-    }
-
-    @Test
-    public void nullOverriddenEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel());
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNull(model.getOverrideEnum());
-    }
-
-    @Test
-    public void defaultEnumExtendedTest() {
-        save(new EnumFieldExtendedModel(OverrideEnum.ONE, DefaultEnum.TWO));
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getDefaultEnum(), DefaultEnum.TWO);
-    }
-
-    @Test
-    public void overriddenEnumExtendedTest() {
-        save(new EnumFieldExtendedModel(OverrideEnum.ONE, DefaultEnum.TWO));
-        EnumFieldExtendedModel model = findById(EnumFieldExtendedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getOverrideEnum(), OverrideEnum.ONE);
-    }
-
-    @Test
-    public void defaultEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel(EnumFieldAnnotatedModel.OverrideEnum.ONE,
-                EnumFieldAnnotatedModel.DefaultEnum.TWO));
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getDefaultEnum(), EnumFieldAnnotatedModel.DefaultEnum.TWO);
-    }
-
-    @Test
-    public void overriddenEnumAnnotatedTest() {
-        save(new EnumFieldAnnotatedModel(EnumFieldAnnotatedModel.OverrideEnum.ONE,
-                EnumFieldAnnotatedModel.DefaultEnum.TWO));
-        EnumFieldAnnotatedModel model = findById(EnumFieldAnnotatedModel.class, 1);
-        assertNotNull(model);
-        assertEquals(model.getOverrideEnum(), EnumFieldAnnotatedModel.OverrideEnum.ONE);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/FirstAndLastTests.java b/library/src/test/java/com/orm/record/FirstAndLastTests.java
deleted file mode 100644
index 1b6db799..00000000
--- a/library/src/test/java/com/orm/record/FirstAndLastTests.java
+++ /dev/null
@@ -1,199 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.FloatFieldAnnotatedModel;
-import com.orm.model.FloatFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.first;
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.last;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class FirstAndLastTests {
-
-    @Test
-    @SuppressWarnings("all")
-    public void firstExtendedTest() {
-        Float firstObjectFloat = 25F;
-        Float lastObjectFloat = 50F;
-        save(new FloatFieldExtendedModel(firstObjectFloat));
-        save(new FloatFieldExtendedModel(lastObjectFloat));
-        FloatFieldExtendedModel model = first(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(firstObjectFloat, model.getFloat());
-        }
-    }
-
-    @Test
-    public void firstDeletedRecordExtendedTest() {
-        Float second = 25F;
-
-        save(new FloatFieldExtendedModel(15F));
-        save(new FloatFieldExtendedModel(second));
-        save(new FloatFieldExtendedModel(35F));
-        save(new FloatFieldExtendedModel(45F));
-
-        FloatFieldExtendedModel firstRecord = findById(FloatFieldExtendedModel.class, 1);
-        delete(firstRecord);
-        FloatFieldExtendedModel model = first(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(second, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastExtendedTest() {
-        Float last = 50F;
-
-        save(new FloatFieldExtendedModel(25F));
-        save(new FloatFieldExtendedModel(last));
-
-        FloatFieldExtendedModel model = last(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(last, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastDeletedRecordExtendedTest() {
-        Float third = 35F;
-
-        save(new FloatFieldExtendedModel(15F));
-        save(new FloatFieldExtendedModel(25F));
-        save(new FloatFieldExtendedModel(third));
-        save(new FloatFieldExtendedModel(45F));
-
-        FloatFieldExtendedModel lastRecord = findById(FloatFieldExtendedModel.class, 4);
-        delete(lastRecord);
-        FloatFieldExtendedModel model = last(FloatFieldExtendedModel.class);
-
-        if (null != model) {
-            assertEquals(third, model.getFloat());
-        }
-    }
-
-    @Test
-    public void nullFirstExtendedTest() {
-        assertNull(first(FloatFieldExtendedModel.class));
-    }
-
-    @Test
-    public void nullLastExtendedTest() {
-        assertNull(last(FloatFieldExtendedModel.class));
-    }
-
-    @Test
-    public void oneItemExtendedTest() {
-        save(new FloatFieldExtendedModel(25F));
-
-        FloatFieldExtendedModel firstModel = first(FloatFieldExtendedModel.class);
-        FloatFieldExtendedModel lastModel = last(FloatFieldExtendedModel.class);
-
-        if (null != firstModel && null != lastModel) {
-            assertEquals(firstModel.getFloat(), lastModel.getFloat());
-        }
-    }
-
-    @Test
-    public void firstAnnotatedTest() {
-        Float first = 25F;
-
-        save(new FloatFieldAnnotatedModel(first));
-        save(new FloatFieldAnnotatedModel(50F));
-
-        FloatFieldAnnotatedModel model = first(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(first, model.getFloat());
-        }
-    }
-
-    @Test
-    public void firstDeletedRecordAnnotatedTest() {
-        Float second = 25F;
-
-        save(new FloatFieldAnnotatedModel(15F));
-        save(new FloatFieldAnnotatedModel(second));
-        save(new FloatFieldAnnotatedModel(35F));
-        save(new FloatFieldAnnotatedModel(45F));
-
-        FloatFieldAnnotatedModel firstRecord = findById(FloatFieldAnnotatedModel.class, 1);
-
-        delete(firstRecord);
-
-        FloatFieldAnnotatedModel model = first(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(second, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastAnnotatedTest() {
-        Float last = 50F;
-
-        save(new FloatFieldAnnotatedModel(25F));
-        save(new FloatFieldAnnotatedModel(last));
-
-        FloatFieldAnnotatedModel model = last(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(last, model.getFloat());
-        }
-    }
-
-    @Test
-    public void lastDeletedRecordAnnotatedTest() {
-        Float third = 35F;
-
-        save(new FloatFieldAnnotatedModel(15F));
-        save(new FloatFieldAnnotatedModel(25F));
-        save(new FloatFieldAnnotatedModel(third));
-        save(new FloatFieldAnnotatedModel(45F));
-
-        FloatFieldAnnotatedModel lastRecord = findById(FloatFieldAnnotatedModel.class, 4);
-        delete(lastRecord);
-        FloatFieldAnnotatedModel model = last(FloatFieldAnnotatedModel.class);
-
-        if (null != model) {
-            assertEquals(third, model.getFloat());
-        }
-    }
-
-    @Test
-    public void nullFirstAnnotatedTest() {
-        assertNull(first(FloatFieldAnnotatedModel.class));
-    }
-
-    @Test
-    public void nullLastAnnotatedTest() {
-        assertNull(last(FloatFieldAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneItemAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel(25F));
-
-        FloatFieldAnnotatedModel first = first(FloatFieldAnnotatedModel.class);
-        FloatFieldAnnotatedModel last = last(FloatFieldAnnotatedModel.class);
-
-        if (null != first && null != last) {
-            assertEquals(first.getFloat(), last.getFloat());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/FloatFieldTests.java b/library/src/test/java/com/orm/record/FloatFieldTests.java
deleted file mode 100644
index d76516b9..00000000
--- a/library/src/test/java/com/orm/record/FloatFieldTests.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.FloatFieldAnnotatedModel;
-import com.orm.model.FloatFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@SuppressWarnings("all")
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class FloatFieldTests {
-    Float aFloat = Float.valueOf(25F);
-
-    @Test
-    public void nullFloatExtendedTest() {
-        save(new FloatFieldExtendedModel());
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertNull(model.getFloat());
-    }
-
-    @Test
-    public void nullRawFloatExtendedTest() {
-        save(new FloatFieldExtendedModel());
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertEquals(0F, model.getRawFloat(), 0.0000000001F);
-    }
-
-    @Test
-    public void nullFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel());
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertNull(model.getFloat());
-    }
-
-    @Test
-    public void nullRawFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel());
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertEquals(0F, model.getRawFloat(), 0.0000000001F);
-    }
-
-    @Test
-    public void objectFloatExtendedTest() {
-        save(new FloatFieldExtendedModel(aFloat));
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertEquals(aFloat, model.getFloat());
-    }
-
-    @Test
-    public void rawFloatExtendedTest() {
-        save(new FloatFieldExtendedModel(aFloat.floatValue()));
-        FloatFieldExtendedModel model = findById(FloatFieldExtendedModel.class, 1);
-        assertEquals(aFloat.floatValue(), model.getRawFloat(), 0.0000000001F);
-    }
-
-    @Test
-    public void objectFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel(aFloat));
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertEquals(aFloat, model.getFloat());
-    }
-
-    @Test
-    public void rawFloatAnnotatedTest() {
-        save(new FloatFieldAnnotatedModel(aFloat.floatValue()));
-        FloatFieldAnnotatedModel model = findById(FloatFieldAnnotatedModel.class, 1);
-        assertEquals(aFloat.floatValue(), model.getRawFloat(), 0.0000000001F);
-    }
-}
diff --git a/library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java b/library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java
deleted file mode 100644
index 0053ed96..00000000
--- a/library/src/test/java/com/orm/record/IncompleteAnnotatedModelTests.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.orm.record;
-
-import android.database.sqlite.SQLiteException;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.IncompleteAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.save;
-
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class IncompleteAnnotatedModelTests {
-
-    @Test(expected = SQLiteException.class)
-    public void saveNoIdFieldTest() {
-        save(new IncompleteAnnotatedModel());
-    }
-
-    @Test
-    public void deleteNoIdFieldTest() {
-        assertFalse(delete(new IncompleteAnnotatedModel()));
-    }
-}
diff --git a/library/src/test/java/com/orm/record/IntegerFieldTests.java b/library/src/test/java/com/orm/record/IntegerFieldTests.java
deleted file mode 100644
index faf5fa84..00000000
--- a/library/src/test/java/com/orm/record/IntegerFieldTests.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.IntegerFieldAnnotatedModel;
-import com.orm.model.IntegerFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.sum;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class IntegerFieldTests {
-    private Integer integer = 25;
-
-    @Test
-    public void nullIntegerExtendedTest() {
-        save(new IntegerFieldExtendedModel());
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertNull(model.getInteger());
-    }
-
-    @Test
-    public void nullIntExtendedTest() {
-        save(new IntegerFieldExtendedModel());
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertEquals(0, model.getInt());
-    }
-
-    @Test
-    public void nullIntegerAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel());
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertNull(model.getInteger());
-    }
-
-    @Test
-    public void nullIntAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel());
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertEquals(0, model.getInt());
-    }
-
-    @Test
-    public void integerExtendedTest() {
-        save(new IntegerFieldExtendedModel(integer));
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertEquals(integer, model.getInteger());
-    }
-
-    @Test
-    public void intExtendedTest() {
-        save(new IntegerFieldExtendedModel(integer.intValue()));
-        IntegerFieldExtendedModel model = findById(IntegerFieldExtendedModel.class, 1);
-        assertEquals(integer.intValue(), model.getInt());
-    }
-
-    @Test
-    public void integerAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel(integer));
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertEquals(integer, model.getInteger());
-    }
-
-    @Test
-    public void intAnnotatedTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        IntegerFieldAnnotatedModel model = findById(IntegerFieldAnnotatedModel.class, 1);
-        assertEquals(integer.intValue(), model.getInt());
-    }
-
-
-    @Test
-    public void sumTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        assertEquals(2 * integer, sum(IntegerFieldAnnotatedModel.class, "raw_integer"));
-    }
-
-    @Test
-    public void whereSumTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        assertEquals((long) integer, sum(IntegerFieldAnnotatedModel.class,
-                "raw_integer", "id = ?", "1"));
-    }
-
-    @Test
-    public void noSumTest() {
-        assertEquals(0, sum(IntegerFieldAnnotatedModel.class, "raw_integer"));
-    }
-
-    @Test
-    public void brokenSumTest() {
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        save(new IntegerFieldAnnotatedModel(integer.intValue()));
-        assertEquals(-1, sum(IntegerFieldAnnotatedModel.class, "wrongfield"));
-    }
-}
diff --git a/library/src/test/java/com/orm/record/ListAllOrderByTests.java b/library/src/test/java/com/orm/record/ListAllOrderByTests.java
deleted file mode 100644
index 548ead23..00000000
--- a/library/src/test/java/com/orm/record/ListAllOrderByTests.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.IntegerFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ListAllOrderByTests {
-
-    @Test
-    public void listAllOrderByEmptyTest() {
-        final List<IntegerFieldExtendedModel> list = listAll(IntegerFieldExtendedModel.class, "id");
-        assertEquals(0L, list.size());
-    }
-
-    @Test
-    public void listAllOrderByIdTest() {
-        for (int i = 1; i <= 100; i++) {
-            save(new IntegerFieldExtendedModel(i));
-        }
-
-        List<IntegerFieldExtendedModel> models = listAll(IntegerFieldExtendedModel.class, "id");
-        assertEquals(100L, models.size());
-
-        Long id = models.get(0).getId();
-
-        for (int i = 1; i < 100; i++) {
-            assertTrue(id < models.get(i).getId());
-        }
-    }
-
-    @Test
-    public void listAllOrderByFieldTest() {
-        for (int i = 1; i <= 100; i++) {
-            save(new IntegerFieldExtendedModel(i));
-        }
-
-        List<IntegerFieldExtendedModel> models = listAll(IntegerFieldExtendedModel.class, "raw_integer");
-
-        assertEquals(100L, models.size());
-
-        int raw = models.get(0).getInt();
-
-        for (int i = 1; i < 100; i++) {
-            assertTrue(raw < models.get(i).getInt());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/LongFieldTests.java b/library/src/test/java/com/orm/record/LongFieldTests.java
deleted file mode 100644
index d1516a42..00000000
--- a/library/src/test/java/com/orm/record/LongFieldTests.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.LongFieldAnnotatedModel;
-import com.orm.model.LongFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@SuppressWarnings("all")
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class LongFieldTests {
-    private Long aLong = Long.valueOf(25L);
-
-    @Test
-    public void nullLongExtendedTest() {
-        save(new LongFieldExtendedModel());
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertNull(model.getLong());
-    }
-
-    @Test
-    public void nullRawLongExtendedTest() {
-        save(new LongFieldExtendedModel());
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertEquals(0L, model.getRawLong());
-    }
-
-    @Test
-    public void nullLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel());
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertNull(model.getLong());
-    }
-
-    @Test
-    public void nullRawLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel());
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertEquals(0L, model.getRawLong());
-    }
-
-    @Test
-    public void objectLongExtendedTest() {
-        save(new LongFieldExtendedModel(aLong));
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertEquals(aLong, model.getLong());
-    }
-
-    @Test
-    public void rawLongExtendedTest() {
-        save(new LongFieldExtendedModel(aLong.longValue()));
-        LongFieldExtendedModel model = findById(LongFieldExtendedModel.class, 1);
-        assertEquals(aLong.longValue(), model.getRawLong());
-    }
-
-    @Test
-    public void objectLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel(aLong));
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertEquals(aLong, model.getLong());
-    }
-
-    @Test
-    public void rawLongAnnotatedTest() {
-        save(new LongFieldAnnotatedModel(aLong.longValue()));
-        LongFieldAnnotatedModel model = findById(LongFieldAnnotatedModel.class, 1);
-        assertEquals(aLong.longValue(), model.getRawLong());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/MultipleSaveTests.java b/library/src/test/java/com/orm/record/MultipleSaveTests.java
deleted file mode 100644
index 73b353ad..00000000
--- a/library/src/test/java/com/orm/record/MultipleSaveTests.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.StringFieldAnnotatedModel;
-import com.orm.model.StringFieldAnnotatedNoIdModel;
-import com.orm.model.StringFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class MultipleSaveTests {
-    private String testString = "Test String";
-    private String anotherString = "Another test";
-
-    @Test
-    public void stringMultipleSaveOriginalExtendedTest() {
-        StringFieldExtendedModel model = new StringFieldExtendedModel(testString);
-        long id = save(model);
-        StringFieldExtendedModel query = findById(StringFieldExtendedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-        }
-
-        model.setString(anotherString);
-
-        assertEquals(id, save(model));
-        assertNull(findById(StringFieldExtendedModel.class, 2));
-    }
-
-    @Test
-    public void stringMultipleSaveQueriedExtendedTest() {
-        StringFieldExtendedModel model = new StringFieldExtendedModel(testString);
-        long id = save(model);
-        StringFieldExtendedModel query = findById(StringFieldExtendedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            query.setString(anotherString);
-            assertEquals(id, save(query));
-            assertNull(findById(StringFieldExtendedModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveOriginalAnnotatedTest() {
-        StringFieldAnnotatedModel model = new StringFieldAnnotatedModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedModel query = findById(StringFieldAnnotatedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            model.setString(anotherString);
-            assertEquals(id, save(model));
-            assertNull(findById(StringFieldAnnotatedModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveQueriedAnnotatedTest() {
-        StringFieldAnnotatedModel model = new StringFieldAnnotatedModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedModel query = findById(StringFieldAnnotatedModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            query.setString(anotherString);
-            assertEquals(id, save(query));
-            assertNull(findById(StringFieldAnnotatedModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveOriginalAnnotatedNoIdTest() {
-        StringFieldAnnotatedNoIdModel model = new StringFieldAnnotatedNoIdModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedNoIdModel query = findById(StringFieldAnnotatedNoIdModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            model.setString(anotherString);
-            assertEquals(id, save(model));
-            assertNull(findById(StringFieldAnnotatedNoIdModel.class, 2));
-        }
-    }
-
-    @Test
-    public void stringMultipleSaveQueriedAnnotatedNoIdTest() {
-        StringFieldAnnotatedNoIdModel model = new StringFieldAnnotatedNoIdModel(testString);
-        long id = save(model);
-        StringFieldAnnotatedNoIdModel query = findById(StringFieldAnnotatedNoIdModel.class, id);
-
-        if (null != query) {
-            assertEquals(testString, query.getString());
-            query.setString(anotherString);
-            assertEquals(id, save(query));
-            assertNull(findById(StringFieldAnnotatedNoIdModel.class, 2));
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedAnnotatedTests.java b/library/src/test/java/com/orm/record/NestedAnnotatedTests.java
deleted file mode 100644
index d7c8ef43..00000000
--- a/library/src/test/java/com/orm/record/NestedAnnotatedTests.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedAnnotatedModel;
-import com.orm.model.RelationshipAnnotatedModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedAnnotatedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedAnnotatedModel.class));
-        assertEquals(0L, count(RelationshipAnnotatedModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        save(new NestedAnnotatedModel(nested));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-        assertEquals(1L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        save(new NestedAnnotatedModel(nested));
-        save(new NestedAnnotatedModel(nested));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-        assertEquals(2L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        save(anotherSimple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        RelationshipAnnotatedModel anotherNested = new RelationshipAnnotatedModel(anotherSimple);
-        save(anotherNested);
-        save(new NestedAnnotatedModel(nested));
-        save(new NestedAnnotatedModel(anotherNested));
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipAnnotatedModel.class));
-        assertEquals(2L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedAnnotatedModel(nested));
-        }
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-        assertEquals(100L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-            save(nested);
-            save(new NestedAnnotatedModel(nested));
-        }
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipAnnotatedModel.class));
-        assertEquals(100L, count(NestedAnnotatedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedAnnotatedModel(nested));
-        }
-
-        List<NestedAnnotatedModel> models = listAll(NestedAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedAnnotatedModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
-            save(nested);
-            save(new NestedAnnotatedModel(nested));
-        }
-
-        List<NestedAnnotatedModel> models = listAll(NestedAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedAnnotatedModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedExtendedTests.java b/library/src/test/java/com/orm/record/NestedExtendedTests.java
deleted file mode 100644
index eaf8c120..00000000
--- a/library/src/test/java/com/orm/record/NestedExtendedTests.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedExtendedModel;
-import com.orm.model.RelationshipExtendedModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedExtendedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedExtendedModel.class));
-        assertEquals(0L, count(RelationshipExtendedModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        save(new NestedExtendedModel(nested));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-        assertEquals(1L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        save(new NestedExtendedModel(nested));
-        save(new NestedExtendedModel(nested));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-        assertEquals(2L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-        save(anotherSimple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        RelationshipExtendedModel anotherNested = new RelationshipExtendedModel(anotherSimple);
-        save(anotherNested);
-        save(new NestedExtendedModel(nested));
-        save(new NestedExtendedModel(anotherNested));
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipExtendedModel.class));
-        assertEquals(2L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedExtendedModel(nested));
-        }
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-        assertEquals(100L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-            save(nested);
-            save(new NestedExtendedModel(nested));
-        }
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipExtendedModel.class));
-        assertEquals(100L, count(NestedExtendedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedExtendedModel(nested));
-        }
-
-        List<NestedExtendedModel> models = listAll(NestedExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedExtendedModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
-            save(nested);
-            save(new NestedExtendedModel(nested));
-        }
-
-        List<NestedExtendedModel> models = listAll(NestedExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedExtendedModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedAATests.java b/library/src/test/java/com/orm/record/NestedMixedAATests.java
deleted file mode 100644
index 9daf3fa9..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedAATests.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedAAModel;
-import com.orm.model.RelationshipMixedAModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedMixedAATests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedAAModel.class));
-        assertEquals(0L, count(RelationshipMixedAModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        save(new NestedMixedAAModel(nested));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(1L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        save(new NestedMixedAAModel(nested));
-        save(new NestedMixedAAModel(nested));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        save(anotherSimple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        RelationshipMixedAModel anotherNested = new RelationshipMixedAModel(anotherSimple);
-        save(anotherNested);
-        save(new NestedMixedAAModel(nested));
-        save(new NestedMixedAAModel(anotherNested));
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedAAModel(nested));
-        }
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedAAModel(nested));
-        }
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedAAModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedAAModel(nested));
-        }
-
-        List<NestedMixedAAModel> models = listAll(NestedMixedAAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedAAModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedAAModel(nested));
-        }
-
-        List<NestedMixedAAModel> models = listAll(NestedMixedAAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedAAModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedABTests.java b/library/src/test/java/com/orm/record/NestedMixedABTests.java
deleted file mode 100644
index fa16b506..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedABTests.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedABModel;
-import com.orm.model.RelationshipMixedBModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class NestedMixedABTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedABModel.class));
-        assertEquals(0L, count(RelationshipMixedBModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedABModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(1L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedABModel(nested));
-        save(new NestedMixedABModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-        save(anotherSimple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-        RelationshipMixedBModel anotherNested = new RelationshipMixedBModel(anotherSimple);
-
-        save(anotherNested);
-        save(new NestedMixedABModel(nested));
-        save(new NestedMixedABModel(anotherNested));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedABModel(nested));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedABModel(nested));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedABModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedABModel(nested));
-        }
-
-        List<NestedMixedABModel> models = listAll(NestedMixedABModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedABModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedABModel(nested));
-        }
-
-        List<NestedMixedABModel> models = listAll(NestedMixedABModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedABModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedBATests.java b/library/src/test/java/com/orm/record/NestedMixedBATests.java
deleted file mode 100644
index c6f07da5..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedBATests.java
+++ /dev/null
@@ -1,151 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarRecord;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedBAModel;
-import com.orm.model.RelationshipMixedAModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NestedMixedBATests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedBAModel.class));
-        assertEquals(0L, count(RelationshipMixedAModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-
-        save(nested);
-        save(new NestedMixedBAModel(nested));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(1L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-
-        save(nested);
-        save(new NestedMixedBAModel(nested));
-        save(new NestedMixedBAModel(nested));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        save(anotherSimple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-        RelationshipMixedAModel anotherNested = new RelationshipMixedAModel(anotherSimple);
-
-        save(anotherNested);
-        save(new NestedMixedBAModel(nested));
-        save(new NestedMixedBAModel(anotherNested));
-
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipMixedAModel.class));
-        assertEquals(2L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBAModel(nested));
-        }
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedBAModel(nested));
-        }
-
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipMixedAModel.class));
-        assertEquals(100L, count(NestedMixedBAModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBAModel(nested));
-        }
-
-        List<NestedMixedBAModel> models = listAll(NestedMixedBAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBAModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
-            save(nested);
-            save(new NestedMixedBAModel(nested));
-        }
-
-        List<NestedMixedBAModel> models = listAll(NestedMixedBAModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBAModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NestedMixedBBTests.java b/library/src/test/java/com/orm/record/NestedMixedBBTests.java
deleted file mode 100644
index 1eeb2a7d..00000000
--- a/library/src/test/java/com/orm/record/NestedMixedBBTests.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NestedMixedBBModel;
-import com.orm.model.RelationshipMixedBModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class NestedMixedBBTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(NestedMixedBBModel.class));
-        assertEquals(0L, count(RelationshipMixedBModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedBBModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(1L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-
-        save(nested);
-        save(new NestedMixedBBModel(nested));
-        save(new NestedMixedBBModel(nested));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-        save(anotherSimple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-        RelationshipMixedBModel anotherNested = new RelationshipMixedBModel(anotherSimple);
-
-        save(anotherNested);
-        save(new NestedMixedBBModel(nested));
-        save(new NestedMixedBBModel(anotherNested));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-        assertEquals(2L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBBModel(nested));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedBBModel(nested));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-        assertEquals(100L, count(NestedMixedBBModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-        save(nested);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new NestedMixedBBModel(nested));
-        }
-
-        List<NestedMixedBBModel> models = listAll(NestedMixedBBModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBBModel model : models) {
-            assertEquals(nested.getId(), model.getNested().getId());
-            assertEquals(simple.getId(), model.getNested().getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
-            save(nested);
-            save(new NestedMixedBBModel(nested));
-        }
-
-        List<NestedMixedBBModel> models = listAll(NestedMixedBBModel.class);
-        assertEquals(100, models.size());
-
-        for (NestedMixedBBModel model : models) {
-            assertEquals(model.getId(), model.getNested().getId());
-            assertEquals(model.getId(), model.getNested().getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/NoSugarModelTests.java b/library/src/test/java/com/orm/record/NoSugarModelTests.java
deleted file mode 100644
index 08f43154..00000000
--- a/library/src/test/java/com/orm/record/NoSugarModelTests.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.NoSugarModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.saveInTx;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class NoSugarModelTests {
-
-    @Test
-    public void deleteTest() throws Exception {
-        NoSugarModel model = new NoSugarModel();
-        assertFalse(delete(model));
-    }
-
-    @Test
-    public void saveInTransactionTest() throws Exception {
-        saveInTx(new NoSugarModel(), new NoSugarModel());
-        assertEquals(-1L, count(NoSugarModel.class));
-    }
-}
diff --git a/library/src/test/java/com/orm/record/OneToManyTest.java b/library/src/test/java/com/orm/record/OneToManyTest.java
deleted file mode 100644
index 73a60b57..00000000
--- a/library/src/test/java/com/orm/record/OneToManyTest.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.onetomany.OneToManyRelationModel;
-import com.orm.model.onetomany.OneToManyModel;
-import com.orm.model.onetomany.WithoutOneToManyAnnotationModel;
-import com.orm.model.onetomany.WithoutOneToManyAnnotationRelationModel;
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.List;
-
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.save;
-
-/**
- * Created by Łukasz Wesołowski on 28.07.2016.
- */
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class OneToManyTest {
-    @Test
-    public void shouldSaveWithOneToManyRelation() {
-        List<Long> relationIds = Arrays.asList(1l, 2l, 3l, 4l);
-
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : relationIds) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-
-        Assert.assertTrue(relationIds.contains(result.getModels().get(0).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(1).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(2).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(3).getId()));
-
-        Assert.assertEquals(result, result.getModels().get(0).getModel());
-        Assert.assertEquals(result, result.getModels().get(1).getModel());
-        Assert.assertEquals(result, result.getModels().get(2).getModel());
-        Assert.assertEquals(result, result.getModels().get(3).getModel());
-    }
-
-    @Test
-    public void shouldRemoveOneOfManyToOneRelation() {
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : Arrays.asList(1l, 2l, 3l, 4l)) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-
-        OneToManyRelationModel.deleteAll(OneToManyRelationModel.class, "id = ?", String.valueOf(3l));
-
-        result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(3, result.getModels().size());
-
-        Assert.assertTrue(result.getModels().get(0).getId() != 3l);
-        Assert.assertTrue(result.getModels().get(1).getId() != 3l);
-        Assert.assertTrue(result.getModels().get(2).getId() != 3l);
-    }
-
-    @Test
-    public void shouldNotRemoveRelation() {
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : Arrays.asList(1l, 2l, 3l, 4l)) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        result.getModels().clear();
-
-        save(model);
-
-        result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-    }
-
-    @Test
-    public void shouldNotAddRelation() {
-        List<Long> relationIds = Arrays.asList(1l, 2l, 3l, 4l);
-        OneToManyModel model = new OneToManyModel(1l);
-        save(model);
-
-        for (long i : relationIds) {
-            save(new OneToManyRelationModel(i, model));
-        }
-
-        save(new OneToManyRelationModel(5l, null));
-
-        OneToManyModel result = findById(OneToManyModel.class, 1l);
-
-        Assert.assertEquals(4, result.getModels().size());
-
-        Assert.assertTrue(relationIds.contains(result.getModels().get(0).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(1).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(2).getId()));
-        Assert.assertTrue(relationIds.contains(result.getModels().get(3).getId()));
-
-        Assert.assertEquals(result, result.getModels().get(0).getModel());
-        Assert.assertEquals(result, result.getModels().get(1).getModel());
-        Assert.assertEquals(result, result.getModels().get(2).getModel());
-        Assert.assertEquals(result, result.getModels().get(3).getModel());
-    }
-
-    @Test
-    public void shouldNotInflateList() {
-        List<Long> relationIds = Arrays.asList(1l, 2l, 3l, 4l);
-        WithoutOneToManyAnnotationModel model = new WithoutOneToManyAnnotationModel(1l);
-        save(model);
-
-        for (long i : relationIds) {
-            save(new WithoutOneToManyAnnotationRelationModel(i, model));
-        }
-
-        WithoutOneToManyAnnotationModel result = findById(WithoutOneToManyAnnotationModel.class, 1l);
-
-        Assert.assertEquals(null, result.getModels());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java b/library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java
deleted file mode 100644
index 506e0264..00000000
--- a/library/src/test/java/com/orm/record/RelationshipAnnotatedTests.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipAnnotatedModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class RelationshipAnnotatedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipAnnotatedModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-        save(simple);
-        save(new RelationshipAnnotatedModel(simple));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(1L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-        save(simple);
-        save(new RelationshipAnnotatedModel(simple));
-        save(new RelationshipAnnotatedModel(simple));
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-
-        save(anotherSimple);
-        save(new RelationshipAnnotatedModel(simple));
-        save(new RelationshipAnnotatedModel(anotherSimple));
-
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-        assertEquals(100L, count(RelationshipAnnotatedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        List<RelationshipAnnotatedModel> models = listAll(RelationshipAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipAnnotatedModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-            save(simple);
-            save(new RelationshipAnnotatedModel(simple));
-        }
-
-        List<RelationshipAnnotatedModel> models = listAll(RelationshipAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipAnnotatedModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipExtendedTests.java b/library/src/test/java/com/orm/record/RelationshipExtendedTests.java
deleted file mode 100644
index f9faeedd..00000000
--- a/library/src/test/java/com/orm/record/RelationshipExtendedTests.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipExtendedModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class RelationshipExtendedTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipExtendedModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipExtendedModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipExtendedModel(simple));
-        save(new RelationshipExtendedModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-
-        save(anotherSimple);
-        save(new RelationshipExtendedModel(simple));
-        save(new RelationshipExtendedModel(anotherSimple));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipExtendedModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        List<RelationshipExtendedModel> models = listAll(RelationshipExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipExtendedModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipExtendedModel(simple));
-        }
-
-        List<RelationshipExtendedModel> models = listAll(RelationshipExtendedModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipExtendedModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipMixedATests.java b/library/src/test/java/com/orm/record/RelationshipMixedATests.java
deleted file mode 100644
index 35aaa16d..00000000
--- a/library/src/test/java/com/orm/record/RelationshipMixedATests.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipMixedAModel;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class RelationshipMixedATests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipMixedAModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel = new RelationshipMixedAModel(simple);
-
-        save(simple);
-        save(mixedAModel);
-
-        assertEquals(1L, count(simple.getClass()));
-        assertEquals(1L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel1 = new RelationshipMixedAModel(simple);
-        RelationshipMixedAModel mixedAModel2 = new RelationshipMixedAModel(simple);
-
-
-        save(simple);
-        save(mixedAModel1);
-        save(mixedAModel2);
-
-        assertEquals(1L, count(simple.getClass()));
-        assertEquals(2L, count(mixedAModel1.getClass()));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel anotherSimple = new SimpleAnnotatedModel();
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel = new RelationshipMixedAModel(simple);
-        RelationshipMixedAModel anotherMixedAModel = new RelationshipMixedAModel(anotherSimple);
-
-        save(simple);
-        save(anotherSimple);
-        save(mixedAModel);
-        save(anotherMixedAModel);
-
-        assertEquals(2L, count(simple.getClass()));
-        assertEquals(2L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        final SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-        RelationshipMixedAModel mixedAModel = null;
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            mixedAModel = new RelationshipMixedAModel(simple);
-            save(mixedAModel);
-        }
-
-        assertEquals(1L, count(simple.getClass()));
-        assertEquals(100L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        SimpleAnnotatedModel simple = null;
-        RelationshipMixedAModel mixedAModel = null;
-
-        for (int i = 1; i <= 100; i++) {
-            simple = new SimpleAnnotatedModel();
-            mixedAModel = new RelationshipMixedAModel(simple);
-
-            save(simple);
-            save(mixedAModel);
-        }
-
-        assertEquals(100L, count(simple.getClass()));
-        assertEquals(100L, count(mixedAModel.getClass()));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-        for (int i = 1; i <= 100; i++) {
-            RelationshipMixedAModel mixedAModel = new RelationshipMixedAModel(simple);
-
-            save(simple);
-            save(mixedAModel);
-        }
-
-        List<RelationshipMixedAModel> models = listAll(RelationshipMixedAModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipMixedAModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
-
-            save(simple);
-            save(new RelationshipMixedAModel(simple));
-        }
-
-        List<RelationshipMixedAModel> models = listAll(RelationshipMixedAModel.class);
-        assertEquals(100, models.size());
-
-        for (RelationshipMixedAModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/RelationshipMixedBTests.java b/library/src/test/java/com/orm/record/RelationshipMixedBTests.java
deleted file mode 100644
index 7792fce8..00000000
--- a/library/src/test/java/com/orm/record/RelationshipMixedBTests.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.RelationshipMixedBModel;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public class RelationshipMixedBTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(RelationshipMixedBModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipMixedBModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(1L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void twoSameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-
-        save(simple);
-        save(new RelationshipMixedBModel(simple));
-        save(new RelationshipMixedBModel(simple));
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void twoDifferentSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        SimpleExtendedModel anotherSimple = new SimpleExtendedModel();
-
-        save(anotherSimple);
-        save(new RelationshipMixedBModel(simple));
-        save(new RelationshipMixedBModel(anotherSimple));
-
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void manySameSaveTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipMixedBModel(simple));
-        }
-
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void manyDifferentSaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipMixedBModel(simple));
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-        assertEquals(100L, count(RelationshipMixedBModel.class));
-    }
-
-    @Test
-    public void listAllSameTest() throws Exception {
-        SimpleExtendedModel simple = new SimpleExtendedModel();
-        save(simple);
-        for (int i = 1; i <= 100; i++) {
-            save(new RelationshipMixedBModel(simple));
-        }
-        List<RelationshipMixedBModel> models = listAll(RelationshipMixedBModel.class);
-        assertEquals(100, models.size());
-        for (RelationshipMixedBModel model : models) {
-            assertEquals(simple.getId(), model.getSimple().getId());
-        }
-    }
-
-    @Test
-    public void listAllDifferentTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            SimpleExtendedModel simple = new SimpleExtendedModel();
-            save(simple);
-            save(new RelationshipMixedBModel(simple));
-        }
-        List<RelationshipMixedBModel> models = listAll(RelationshipMixedBModel.class);
-        assertEquals(100, models.size());
-        for (RelationshipMixedBModel model : models) {
-            assertEquals(model.getId(), model.getSimple().getId());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/record/ShortFieldTests.java b/library/src/test/java/com/orm/record/ShortFieldTests.java
deleted file mode 100644
index 1a65f676..00000000
--- a/library/src/test/java/com/orm/record/ShortFieldTests.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.ShortFieldAnnotatedModel;
-import com.orm.model.ShortFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@SuppressWarnings("all")
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ShortFieldTests {
-    private Short aShort = Short.valueOf((short) 25);
-
-    @Test
-    public void nullShortExtendedTest() {
-        save(new ShortFieldExtendedModel());
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertNull(model.getShort());
-    }
-
-    @Test
-    public void nullRawShortExtendedTest() {
-        save(new ShortFieldExtendedModel());
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertEquals((short) 0, model.getRawShort());
-    }
-
-    @Test
-    public void nullShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel());
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertNull(model.getShort());
-    }
-
-    @Test
-    public void nullRawShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel());
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertEquals((short) 0, model.getRawShort());
-    }
-
-    @Test
-    public void objectShortExtendedTest() {
-        save(new ShortFieldExtendedModel(aShort));
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertEquals(aShort, model.getShort());
-    }
-
-    @Test
-    public void rawShortExtendedTest() {
-        save(new ShortFieldExtendedModel(aShort.shortValue()));
-        ShortFieldExtendedModel model = findById(ShortFieldExtendedModel.class, 1);
-        assertEquals(aShort.shortValue(), model.getRawShort());
-    }
-
-    @Test
-    public void objectShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel(aShort));
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertEquals(aShort, model.getShort());
-    }
-
-    @Test
-    public void rawShortAnnotatedTest() {
-        save(new ShortFieldAnnotatedModel(aShort.shortValue()));
-        ShortFieldAnnotatedModel model = findById(ShortFieldAnnotatedModel.class, 1);
-        assertEquals(aShort.shortValue(), model.getRawShort());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java b/library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java
deleted file mode 100644
index a201a9eb..00000000
--- a/library/src/test/java/com/orm/record/SimpleAnnotatedModelTests.java
+++ /dev/null
@@ -1,373 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.NamingHelper;
-import com.orm.model.SimpleAnnotatedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.deleteAll;
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.deleteInTx;
-import static com.orm.SugarRecord.listAll;
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.saveInTx;
-import static com.orm.SugarRecord.find;
-import static com.orm.SugarRecord.findAsIterator;
-import static com.orm.SugarRecord.findWithQuery;
-import static com.orm.SugarRecord.findAll;
-import static com.orm.SugarRecord.findWithQueryAsIterator;
-import static com.orm.SugarRecord.executeQuery;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SimpleAnnotatedModelTests {
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void twoSaveTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void manySaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        assertEquals(100L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void defaultIdTest() throws Exception {
-        assertEquals(1L, save(new SimpleAnnotatedModel()));
-    }
-
-    @Test
-    public void whereCountTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void whereNoCountTest() throws Exception {
-        assertEquals(0L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"1"}));
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(0L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"3"}));
-        assertEquals(0L, count(SimpleAnnotatedModel.class, "id = ?", new String[]{"a"}));
-    }
-
-    @Test
-    public void whereBrokenCountTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        assertEquals(-1L, count(SimpleAnnotatedModel.class, "di = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void deleteTest() throws Exception {
-        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-        save(model);
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-        assertTrue(delete(model));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteUnsavedTest() throws Exception {
-        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-        assertFalse(delete(model));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteWrongTest() throws Exception {
-        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-        save(model);
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-
-        Field idField = model.getClass().getDeclaredField("id");
-        idField.setAccessible(true);
-        idField.set(model, Long.MAX_VALUE);
-
-        assertFalse(delete(model));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        assertEquals(100, deleteAll(SimpleAnnotatedModel.class));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void deleteAllWhereTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        assertEquals(99, deleteAll(SimpleAnnotatedModel.class, "id > ?", new String[]{"1"}));
-        assertEquals(1L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionFewTest() throws Exception {
-        SimpleAnnotatedModel first = new SimpleAnnotatedModel();
-        SimpleAnnotatedModel second = new SimpleAnnotatedModel();
-        SimpleAnnotatedModel third = new SimpleAnnotatedModel();
-        save(first);
-        save(second);
-        // Not saving last model
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-        assertEquals(2, deleteInTx(first, second, third));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionManyTest() throws Exception {
-        List<SimpleAnnotatedModel> models = new ArrayList<>();
-
-        for (int i = 1; i <= 100; i++) {
-            SimpleAnnotatedModel model = new SimpleAnnotatedModel();
-            models.add(model);
-            // Not saving last model
-            if (i < 100) {
-                save(model);
-            }
-        }
-
-        assertEquals(99, count(SimpleAnnotatedModel.class));
-        assertEquals(99, deleteInTx(models));
-        assertEquals(0L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void saveInTransactionTest() throws Exception {
-        saveInTx(new SimpleAnnotatedModel(), new SimpleAnnotatedModel());
-        assertEquals(2L, count(SimpleAnnotatedModel.class));
-    }
-
-    @Test
-    public void listAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        List<SimpleAnnotatedModel> models = listAll(SimpleAnnotatedModel.class);
-        assertEquals(100, models.size());
-
-        for (long i = 1; i <= 100; i++) {
-            assertEquals(Long.valueOf(i), models.get((int) i - 1).getId());
-        }
-    }
-
-    @Test
-    public void findTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-
-        List<SimpleAnnotatedModel> models = find(SimpleAnnotatedModel.class, "id = ?", "2");
-
-        assertEquals(1, models.size());
-        assertEquals(2L, models.get(0).getId().longValue());
-    }
-
-    @Test
-    public void findWithQueryTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-
-        List<SimpleAnnotatedModel> models = findWithQuery(SimpleAnnotatedModel.class, "Select * from " +
-                        NamingHelper.toTableName(SimpleAnnotatedModel.class) +
-                        " where id >= ? ", "50");
-
-        for (SimpleAnnotatedModel model : models) {
-            assertEquals(75L, model.getId(), 25L);
-        }
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void findByIdTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, findById(SimpleAnnotatedModel.class, 1L).getId().longValue());
-    }
-
-    @Test
-    public void findByIdIntegerTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(1L, findById(SimpleAnnotatedModel.class, 1).getId().longValue());
-    }
-
-    @Test
-    public void findByIdStringsNullTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertEquals(0, findById(SimpleAnnotatedModel.class, new String[]{""}).size());
-    }
-
-    @Test
-    public void findByIdStringsOneTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"1"});
-        assertEquals(1, models.size());
-        assertEquals(1L, models.get(0).getId().longValue());
-    }
-
-    @Test
-    public void findByIdStringsTwoTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        save(new SimpleAnnotatedModel());
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"1", "3"});
-        assertEquals(2, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-    }
-
-    @Test
-    public void findByIdStringsManyTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"1", "3", "6", "10"});
-        assertEquals(4, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdStringsOrderTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        List<SimpleAnnotatedModel> models = findById(SimpleAnnotatedModel.class, new String[]{"10", "6", "3", "1"});
-        assertEquals(4, models.size());
-        // The order of the query doesn't matter
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdNullTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        assertNull(findById(SimpleAnnotatedModel.class, 2L));
-    }
-
-    @Test
-    public void findAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        Iterator<SimpleAnnotatedModel> cursor = findAll(SimpleAnnotatedModel.class);
-        for (int i = 1; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleAnnotatedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        Iterator<SimpleAnnotatedModel> cursor = findAsIterator(SimpleAnnotatedModel.class,
-                "id >= ?", "50");
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleAnnotatedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findWithQueryAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleAnnotatedModel());
-        }
-        Iterator<SimpleAnnotatedModel> cursor = findWithQueryAsIterator(SimpleAnnotatedModel.class,
-                        "Select * from " +
-                                NamingHelper.toTableName(SimpleAnnotatedModel.class) +
-                                " where id >= ? ", "50");
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleAnnotatedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test(expected=NoSuchElementException.class)
-    public void findAsIteratorOutOfBoundsTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        Iterator<SimpleAnnotatedModel> cursor = findAsIterator(SimpleAnnotatedModel.class,
-                "id = ?", "1");
-        assertTrue(cursor.hasNext());
-        SimpleAnnotatedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a NoSuchElementException
-        cursor.next();
-    }
-
-    @Test(expected=UnsupportedOperationException.class)
-    public void disallowRemoveCursorTest() throws Exception {
-        save(new SimpleAnnotatedModel());
-        Iterator<SimpleAnnotatedModel> cursor = findAsIterator(SimpleAnnotatedModel.class, "id = ?", "1");
-        assertTrue(cursor.hasNext());
-        SimpleAnnotatedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a UnsupportedOperationException
-        cursor.remove();
-    }
-
-    @Test
-    public void vacuumTest() throws Exception {
-        executeQuery("Vacuum");
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/record/SimpleExtendedModelTests.java b/library/src/test/java/com/orm/record/SimpleExtendedModelTests.java
deleted file mode 100644
index e809405d..00000000
--- a/library/src/test/java/com/orm/record/SimpleExtendedModelTests.java
+++ /dev/null
@@ -1,382 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.helper.NamingHelper;
-import com.orm.model.SimpleExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.count;
-import static com.orm.SugarRecord.delete;
-import static com.orm.SugarRecord.deleteAll;
-import static com.orm.SugarRecord.executeQuery;
-import static com.orm.SugarRecord.find;
-import static com.orm.SugarRecord.findAll;
-import static com.orm.SugarRecord.findById;
-import static com.orm.SugarRecord.findWithQuery;
-import static com.orm.SugarRecord.findAsIterator;
-import static com.orm.SugarRecord.findWithQueryAsIterator;
-import static com.orm.SugarRecord.deleteInTx;
-import static com.orm.SugarRecord.saveInTx;
-import static com.orm.SugarRecord.listAll;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class SimpleExtendedModelTests {
-    private String id = "id = ?";
-
-    @Test
-    public void emptyDatabaseTest() throws Exception {
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void oneSaveTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(1L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void twoSaveTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(2L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void manySaveTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        assertEquals(100L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void defaultIdTest() throws Exception {
-        assertEquals(1L, save(new SimpleExtendedModel()));
-    }
-
-    @Test
-    public void whereCountTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(1L, count(SimpleExtendedModel.class, id, new String[]{"1"}));
-    }
-
-    @Test
-    public void whereNoCountTest() throws Exception {
-        assertEquals(0L, count(SimpleExtendedModel.class, id, new String[]{"1"}));
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(0L, count(SimpleExtendedModel.class, id, new String[]{"3"}));
-        assertEquals(0L, count(SimpleExtendedModel.class, id, new String[]{"a"}));
-    }
-
-    @Test
-    public void whereBrokenCountTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        assertEquals(-1L, count(SimpleExtendedModel.class, "di = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void saveMethodTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        model.save();
-        assertEquals(-1L, count(SimpleExtendedModel.class, "di = ?", new String[]{"1"}));
-    }
-
-    @Test
-    public void deleteTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        save(model);
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        assertTrue(delete(model));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteUnsavedTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        assertEquals(0L, count(SimpleExtendedModel.class));
-        assertFalse(delete(model));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteWrongTest() throws Exception {
-        SimpleExtendedModel model = new SimpleExtendedModel();
-        save(model);
-        assertEquals(1L, count(SimpleExtendedModel.class));
-        Field idField = model.getClass().getSuperclass().getDeclaredField("id");
-        idField.setAccessible(true);
-        idField.set(model, Long.MAX_VALUE);
-        assertFalse(delete(model));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteAllTest() throws Exception {
-        int elementNumber = 100;
-        for (int i = 1; i <= elementNumber; i++) {
-            save(new SimpleExtendedModel());
-        }
-        assertEquals(elementNumber, deleteAll(SimpleExtendedModel.class));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void deleteAllWhereTest() throws Exception {
-        int elementNumber = 100;
-        for (int i = 1; i <= elementNumber; i++) {
-            save(new SimpleExtendedModel());
-        }
-        assertEquals(elementNumber - 1, deleteAll(SimpleExtendedModel.class, "id > ?", new String[]{"1"}));
-        assertEquals(1L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionFewTest() throws Exception {
-        SimpleExtendedModel first = new SimpleExtendedModel();
-        SimpleExtendedModel second = new SimpleExtendedModel();
-        SimpleExtendedModel third = new SimpleExtendedModel();
-        save(first);
-        save(second);
-        // Not saving last model
-        assertEquals(2L, count(SimpleExtendedModel.class));
-        assertEquals(2, deleteInTx(first, second, third));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void deleteInTransactionManyTest() throws Exception {
-        long elementNumber = 100;
-        List<SimpleExtendedModel> models = new ArrayList<>();
-        for (int i = 1; i <= elementNumber; i++) {
-            SimpleExtendedModel model = new SimpleExtendedModel();
-            models.add(model);
-            // Not saving last model
-            if (i < elementNumber) {
-                save(model);
-            }
-        }
-        assertEquals(elementNumber - 1, count(SimpleExtendedModel.class));
-        assertEquals(elementNumber - 1, deleteInTx(models));
-        assertEquals(0L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void saveInTransactionTest() throws Exception {
-        saveInTx(new SimpleExtendedModel(), new SimpleExtendedModel());
-        assertEquals(2L, count(SimpleExtendedModel.class));
-    }
-
-    @Test
-    public void listAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-        List<SimpleExtendedModel> models = listAll(SimpleExtendedModel.class);
-        assertEquals(100, models.size());
-        for (long i = 1; i <= 100; i++) {
-            assertEquals(Long.valueOf(i), models.get((int) i - 1).getId());
-        }
-    }
-
-    @Test
-    public void findTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        List<SimpleExtendedModel> models = find(SimpleExtendedModel.class, "id = ?", "2");
-        assertEquals(1, models.size());
-        assertEquals(Long.valueOf(2L), models.get(0).getId());
-    }
-
-    @Test
-    public void findWithQueryTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-        List<SimpleExtendedModel> models = findWithQuery(SimpleExtendedModel.class, "Select * from " +
-                                          NamingHelper.toTableName(SimpleExtendedModel.class) +
-                                          " where id >= ? ", "50");
-        for (SimpleExtendedModel model : models) {
-            assertEquals(75, model.getId(), 25L);
-        }
-    }
-
-    @Test
-    @SuppressWarnings("all")
-    public void findByIdTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(Long.valueOf(1L), findById(SimpleExtendedModel.class, 1L).getId());
-    }
-
-    @Test
-    public void findByIdIntegerTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(Long.valueOf(1L), findById(SimpleExtendedModel.class, 1).getId());
-    }
-
-    @Test
-    public void findByIdStringsNullTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertEquals(0, findById(SimpleExtendedModel.class, new String[]{""}).size());
-    }
-
-    @Test
-    public void findByIdStringsOneTest() throws Exception {
-        save(new SimpleExtendedModel());
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"1"});
-        assertEquals(1, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-    }
-
-    @Test
-    public void findByIdStringsTwoTest() throws Exception {
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-        save(new SimpleExtendedModel());
-
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"1", "3"});
-
-        assertEquals(2, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-    }
-
-    @Test
-    public void findByIdStringsManyTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"1", "3", "6", "10"});
-
-        assertEquals(4, models.size());
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdStringsOrderTest() throws Exception {
-        for (int i = 1; i <= 10; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        List<SimpleExtendedModel> models = findById(SimpleExtendedModel.class, new String[]{"10", "6", "3", "1"});
-
-        assertEquals(4, models.size());
-        // The order of the query doesn't matter
-        assertEquals(Long.valueOf(1L), models.get(0).getId());
-        assertEquals(Long.valueOf(3L), models.get(1).getId());
-        assertEquals(Long.valueOf(6L), models.get(2).getId());
-        assertEquals(Long.valueOf(10L), models.get(3).getId());
-    }
-
-    @Test
-    public void findByIdNullTest() throws Exception {
-        save(new SimpleExtendedModel());
-        assertNull(findById(SimpleExtendedModel.class, 2L));
-    }
-
-    @Test
-    public void findAllTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        Iterator<SimpleExtendedModel> cursor = findAll(SimpleExtendedModel.class);
-
-        for (int i = 1; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleExtendedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        Iterator<SimpleExtendedModel> cursor = findAsIterator(SimpleExtendedModel.class, "id >= ?", "50");
-
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleExtendedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test
-    public void findWithQueryAsIteratorTest() throws Exception {
-        for (int i = 1; i <= 100; i++) {
-            save(new SimpleExtendedModel());
-        }
-
-        Iterator<SimpleExtendedModel> cursor = findWithQueryAsIterator(SimpleExtendedModel.class,
-                                                    "Select * from " +
-                                                    NamingHelper.toTableName(SimpleExtendedModel.class) +
-                                                    " where id >= ? ", "50");
-        for (int i = 50; i <= 100; i++) {
-            assertTrue(cursor.hasNext());
-            SimpleExtendedModel model = cursor.next();
-            assertNotNull(model);
-            assertEquals(Long.valueOf(i), model.getId());
-        }
-    }
-
-    @Test(expected=NoSuchElementException.class)
-    public void findAsIteratorOutOfBoundsTest() throws Exception {
-        save(new SimpleExtendedModel());
-        Iterator<SimpleExtendedModel> cursor = findAsIterator(SimpleExtendedModel.class, id, "1");
-        assertTrue(cursor.hasNext());
-        SimpleExtendedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a NoSuchElementException
-        cursor.next();
-    }
-
-    @Test(expected=UnsupportedOperationException.class)
-    public void disallowRemoveCursorTest() throws Exception {
-        save(new SimpleExtendedModel());
-        Iterator<SimpleExtendedModel> cursor = findAsIterator(SimpleExtendedModel.class, id, "1");
-        assertTrue(cursor.hasNext());
-        SimpleExtendedModel model = cursor.next();
-        assertNotNull(model);
-        assertEquals(Long.valueOf(1), model.getId());
-        // This should throw a UnsupportedOperationException
-        cursor.remove();
-    }
-
-    @Test
-    public void vacuumTest() throws Exception {
-        executeQuery("Vacuum");
-    }
-}
\ No newline at end of file
diff --git a/library/src/test/java/com/orm/record/StringFieldTests.java b/library/src/test/java/com/orm/record/StringFieldTests.java
deleted file mode 100644
index d9641ad7..00000000
--- a/library/src/test/java/com/orm/record/StringFieldTests.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.orm.record;
-
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.StringFieldAnnotatedModel;
-import com.orm.model.StringFieldExtendedModel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.orm.SugarRecord.save;
-import static com.orm.SugarRecord.findById;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class StringFieldTests {
-    private String string = "Test String";
-
-    @Test
-    public void nullStringExtendedTest() {
-        save(new StringFieldExtendedModel());
-        StringFieldExtendedModel model = findById(StringFieldExtendedModel.class, 1);
-        assertNull(model.getString());
-    }
-
-    @Test
-    public void nullStringAnnotatedTest() {
-        save(new StringFieldAnnotatedModel());
-        StringFieldAnnotatedModel model = findById(StringFieldAnnotatedModel.class, 1);
-        assertNull(model.getString());
-    }
-
-    @Test
-    public void stringExtendedTest() {
-        save(new StringFieldExtendedModel(string));
-        StringFieldExtendedModel model = findById(StringFieldExtendedModel.class, 1);
-        assertEquals(string, model.getString());
-    }
-
-    @Test
-    public void stringAnnotatedTest() {
-        save(new StringFieldAnnotatedModel(string));
-        StringFieldAnnotatedModel model = findById(StringFieldAnnotatedModel.class, 1);
-        assertEquals(string, model.getString());
-    }
-}
diff --git a/library/src/test/java/com/orm/record/UpdateInTxTest.java b/library/src/test/java/com/orm/record/UpdateInTxTest.java
deleted file mode 100644
index 2c5a032f..00000000
--- a/library/src/test/java/com/orm/record/UpdateInTxTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.orm.record;
-
-import com.orm.SugarRecord;
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class UpdateInTxTest {
-
-    @Test
-    public void testUpdateInTx() {
-        final TestRecord record = new TestRecord();
-        record.setName("lalala");
-
-        Long id = SugarRecord.save(record);
-        record.setId(id);
-
-        final TestRecord record1 = new TestRecord();
-        record1.setName("lalala");
-
-        Long id1 = SugarRecord.save(record1);
-        record1.setId(id1);
-
-        final TestRecord record2 = new TestRecord();
-        record2.setName("lalala");
-
-        Long id2 = SugarRecord.save(record2);
-        record2.setId(id2);
-
-        final TestRecord record3 = new TestRecord();
-        record3.setName("lalala");
-
-        Long id3 = SugarRecord.save(record3);
-        record3.setId(id3);
-
-        final TestRecord record4 = new TestRecord();
-        record4.setName("lalala");
-
-        Long id4 = SugarRecord.save(record4);
-        record.setId(id4);
-
-        record.setName("fulano");
-        record1.setName("fulano");
-        record2.setName("fulano");
-        record3.setName("fulano");
-        record4.setName("fulano");
-
-        SugarRecord.updateInTx(record, record1, record2, record3, record4);
-
-        List<TestRecord> list = SugarRecord.listAll(TestRecord.class);
-
-        for (TestRecord r: list) {
-            Assert.assertEquals(record.getName(), r.getName());
-        }
-    }
-}
diff --git a/library/src/test/java/com/orm/util/ContextUtilTest.java b/library/src/test/java/com/orm/util/ContextUtilTest.java
deleted file mode 100644
index 9ce16c7d..00000000
--- a/library/src/test/java/com/orm/util/ContextUtilTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.orm.util;
-
-import android.content.Context;
-
-import com.orm.app.ClientApp;
-import com.orm.SugarContext;
-import com.orm.dsl.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertNull;
-import static com.orm.util.ContextUtil.*;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ContextUtilTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        ContextUtil contextUtil = ContextUtil.class.getDeclaredConstructor().newInstance();
-        assertNull(contextUtil);
-    }
-
-
-    @Test
-    public void testInitContext() {
-        assertNotNull(getContext());
-    }
-
-    @Test
-    public void testGetAssets() {
-        assertNotNull(getAssets());
-    }
-
-    @Test
-    public void testGetPackageManager() {
-        assertNotNull(getPackageManager());
-    }
-
-    @Test
-    public void testGetPackageName() {
-        assertNotNull(getPackageName());
-    }
-
-    @Test
-    public void testGetPreferences() {
-        assertNotNull(getSharedPreferences("lala", Context.MODE_PRIVATE));
-    }
-
-    @Test
-    public void testTerminateContext() {
-        SugarContext.terminate();
-        assertNull(getContext());
-    }
-}
diff --git a/library/src/test/java/com/orm/util/KeyWordUtilTest.java b/library/src/test/java/com/orm/util/KeyWordUtilTest.java
deleted file mode 100644
index 417f1b21..00000000
--- a/library/src/test/java/com/orm/util/KeyWordUtilTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.orm.util;
-
-import org.junit.Test;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
-
-/**
- * @author jonatan.salas
- */
-public final class KeyWordUtilTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        KeyWordUtil keyWordUtil = KeyWordUtil.class.getDeclaredConstructor().newInstance();
-        assertNull(keyWordUtil);
-    }
-
-    @Test
-    public void testKeyWord() {
-        assertEquals(true, KeyWordUtil.isKeyword("SELECT"));
-        assertEquals(true, KeyWordUtil.isKeyword("TRANSACTION"));
-        assertEquals(true, KeyWordUtil.isKeyword("MATCH"));
-        assertEquals(true, KeyWordUtil.isKeyword("AS"));
-        assertEquals(true, KeyWordUtil.isKeyword("NOTNULL"));
-        assertEquals(true, KeyWordUtil.isKeyword("NOT"));
-        assertEquals(false, KeyWordUtil.isKeyword("PERSONS"));
-        assertEquals(false, KeyWordUtil.isKeyword("NAME"));
-        assertEquals(false, KeyWordUtil.isKeyword("LOCATION"));
-    }
-
-    @Test
-    public void testNullKeyword() {
-        assertEquals(false, KeyWordUtil.isKeyword(null));
-    }
-}
diff --git a/library/src/test/java/com/orm/util/MigrationFileParserTest.java b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
deleted file mode 100644
index 9b2d87ce..00000000
--- a/library/src/test/java/com/orm/util/MigrationFileParserTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.orm.util;
-
-import org.junit.Test;
-
-import java.lang.String;
-
-import static junit.framework.Assert.assertEquals;
-
-public final class MigrationFileParserTest {
-
-    @Test
-    public void testSingleLineStatement() {
-        MigrationFileParser singleLineComment = new MigrationFileParser("insert into table--comment");
-
-        String statements[] = singleLineComment.getStatements();
-        assertEquals("Testing single line statement size",1,statements.length);
-        assertEquals("Testing single line statement content","insert into table",statements[0]);
-
-        singleLineComment = new MigrationFileParser("insert into table--comment\n");
-
-        singleLineComment.getStatements();
-        assertEquals("Testing single line statement size",1,statements.length);
-        assertEquals("Testing single line statement content","insert into table",statements[0]);
-    }
-
-    @Test
-    public void testMultiLineComment() {
-        MigrationFileParser multiLineComment = new MigrationFileParser("insert into table /**comment \n new line 2 \n new line 3 */hello");
-
-        String statements[] = multiLineComment.getStatements();
-        assertEquals("Testing multiline statement size",1,statements.length);
-        assertEquals("Testing multiline comment","insert into table hello",statements[0]);
-    }
-
-    @Test
-    public void testMixedComment() {
-        MigrationFileParser mixedComment = new MigrationFileParser("insert into/*multiline\n **comment*/--comment");
-
-        String statements[] = mixedComment.getStatements();
-
-        assertEquals("Testing mixed comment statement size",1,statements.length);
-        assertEquals("Testing mixed comment statments", "insert into", statements[0]);
-    }
-}
diff --git a/library/src/test/java/com/orm/util/NumberComparatorTest.java b/library/src/test/java/com/orm/util/NumberComparatorTest.java
deleted file mode 100644
index aaabf453..00000000
--- a/library/src/test/java/com/orm/util/NumberComparatorTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package com.orm.util;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author jonatan.salas
- */
-public final class NumberComparatorTest {
-    private NumberComparator comparator;
-
-    @Before
-    public void setUp() {
-        comparator = new NumberComparator();
-    }
-
-    @Test
-    public void testNumberComparatorWithoutNumbers() {
-        int result = comparator.compare("hola", "hola");
-        assertEquals(0, result);
-    }
-
-    @Test
-    public void testNumberComparatorWithNumbers() {
-        int result = comparator.compare("1", "2");
-        assertEquals(-1, result);
-    }
-
-    @Test
-    public void testComparatorWithNumbers() {
-        int result = comparator.compare("4", "2");
-        assertEquals(1, result);
-    }
-
-    @Test
-    public void testCompareRight() {
-        int result = comparator.compareRight("hola", "hola");
-        assertEquals(0, result);
-    }
-
-    @Test
-    public void testCharAt() {
-        Character c = NumberComparator.charAt("Hola", 0);
-        assertEquals("H", c.toString());
-    }
-}
diff --git a/library/src/test/java/com/orm/util/ReflectionUtilTest.java b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
deleted file mode 100644
index 318aa40d..00000000
--- a/library/src/test/java/com/orm/util/ReflectionUtilTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package com.orm.util;
-
-import android.content.ContentValues;
-import android.database.Cursor;
-
-import com.orm.SugarContext;
-import com.orm.app.ClientApp;
-import com.orm.dsl.BuildConfig;
-import com.orm.model.TestRecord;
-import com.orm.query.Select;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * @author jonatan.salas
- */
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
-public final class ReflectionUtilTest {
-
-    @Test(expected = IllegalAccessException.class)
-    public void testPrivateConstructor() throws Exception {
-        ReflectionUtil reflectionUtil = ReflectionUtil.class.getDeclaredConstructor().newInstance();
-        Assert.assertNull(reflectionUtil);
-    }
-
-    @Test
-    public void testGetTableFields() {
-        List<Field> fieldList = ReflectionUtil.getTableFields(TestRecord.class);
-        List<String> strings = new ArrayList<>();
-
-        for (Field field: fieldList) {
-            strings.add(field.getName());
-        }
-
-        Assert.assertEquals(true, strings.contains("id"));
-        Assert.assertEquals(true, strings.contains("name"));
-    }
-
-    @Test(expected = NoSuchFieldException.class)
-    public void testAddFieldValueToColumn() throws NoSuchFieldException {
-        SugarContext context = SugarContext.getSugarContext();
-        TestRecord record = new TestRecord();
-        record.setName("lala");
-
-        Field column = TestRecord.class.getField("name");
-        ContentValues values = new ContentValues();
-
-        ReflectionUtil.addFieldValueToColumn(values, column, record, context.getEntitiesMap());
-
-        Assert.assertEquals(record.getName(), values.getAsString("NAME"));
-    }
-
-    @Test
-    public void testSetFieldValueForId() {
-        TestRecord record = new TestRecord();
-        record.setName("Bla bla");
-
-        ReflectionUtil.setFieldValueForId(record, 1L);
-        Assert.assertEquals(1L, record.getId().longValue());
-    }
-
-    @Test
-    public void testGetAllClasses() {
-        List<Class> classes = ReflectionUtil.getDomainClasses();
-        Assert.assertEquals(45, classes.size());
-    }
-
-    @Test(expected = NoSuchFieldException.class)
-    public void testSetFieldValueFromCursor() throws NoSuchFieldException {
-        final TestRecord record = new TestRecord().setName("bla bla");
-        Long id = record.save();
-        record.setId(id);
-
-        Cursor cursor = Select.from(TestRecord.class).getCursor();
-
-        TestRecord testRecord = new TestRecord();
-        Field field = TestRecord.class.getField("name");
-
-        ReflectionUtil.setFieldValueFromCursor(cursor, field, testRecord);
-    }
-}
diff --git a/library/src/test/java/com/orm/util/SugarConfigTest.java b/library/src/test/java/com/orm/util/SugarConfigTest.java
deleted file mode 100644
index 82943e9e..00000000
--- a/library/src/test/java/com/orm/util/SugarConfigTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.orm.util;
-
-import com.orm.model.TestRecord;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-
-import java.lang.reflect.Field;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * @author jonatan.salas
- */
-public final class SugarConfigTest {
-
-    @Test
-    public void testSetGetFields() {
-        Field[] fields = TestRecord.class.getFields();
-
-        List<Field> fieldList = Arrays.asList(fields);
-        SugarConfig.setFields(TestRecord.class, fieldList);
-
-        Assert.assertEquals(fieldList, SugarConfig.getFields(TestRecord.class));
-    }
-
-    @Test
-    public void testClearCache() {
-        SugarConfig.clearCache();
-        Assert.assertEquals(true, SugarConfig.fields.isEmpty());
-    }
-}
