diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index a15110a3..427cd6e8 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -1,28 +1,41 @@
 package com.orm;
 
+import static com.orm.util.ManifestHelper.getDatabaseVersion;
+import static com.orm.util.ManifestHelper.getDebugEnabled;
+
+import java.io.File;
+
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
+import com.orm.util.FileUtil;
 import com.orm.util.ManifestHelper;
 import com.orm.util.SugarCursorFactory;
 
-import static com.orm.util.ManifestHelper.getDatabaseVersion;
-import static com.orm.util.ManifestHelper.getDebugEnabled;
-
 public class SugarDb extends SQLiteOpenHelper {
 
     private final SchemaGenerator schemaGenerator;
     private SQLiteDatabase sqLiteDatabase;
+    private boolean usedPreinstalledDatabase = false;
 
     public SugarDb(Context context) {
         super(context, ManifestHelper.getDatabaseName(context),
                 new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
         schemaGenerator = new SchemaGenerator(context);
+        
+        String preinstalledDatabaseFileName = ManifestHelper.getPreinstalledDatabaseName(context);
+        if (preinstalledDatabaseFileName != null) {
+        	usedPreinstalledDatabase = true;
+        	unpackPreinstalledDatabase(context, preinstalledDatabaseFileName);
+        }
     }
 
-    @Override
+	@Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
+		if (usedPreinstalledDatabase) {
+			return;
+		}
         schemaGenerator.createDatabase(sqLiteDatabase);
     }
 
@@ -39,4 +52,16 @@ public synchronized SQLiteDatabase getDB() {
         return this.sqLiteDatabase;
     }
 
+	private void unpackPreinstalledDatabase(Context context, String preinstalledDatabaseFileName) {
+    	try {
+	        File localDatabaseFile = context.getDatabasePath(ManifestHelper.getDatabaseName(context));
+	        if (!localDatabaseFile.exists()) {
+	        	getWritableDatabase();//needed for initialize internal structures of SQLiteOpenHelper
+	        	FileUtil.writeStreamToFile(context.getAssets().open(preinstalledDatabaseFileName), localDatabaseFile);
+	        }
+    	} catch (Exception e) {
+    		e.printStackTrace();
+    		usedPreinstalledDatabase = false;
+    	}
+	}
 }
diff --git a/library/src/com/orm/util/FileUtil.java b/library/src/com/orm/util/FileUtil.java
new file mode 100644
index 00000000..f60e6086
--- /dev/null
+++ b/library/src/com/orm/util/FileUtil.java
@@ -0,0 +1,47 @@
+package com.orm.util;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public final class FileUtil {
+	
+	public static boolean writeStreamToFile(InputStream from, File to_file) {
+		OutputStream to = null; // Stream to write to destination
+		try {
+			to = new BufferedOutputStream(new FileOutputStream(to_file)); // Create output stream
+			byte[] buffer = new byte[4096]; // To hold file contents
+			int bytes_read; // How many bytes in buffer
+
+			while ((bytes_read = from.read(buffer)) != -1) {
+				to.write(buffer, 0, bytes_read); // write
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+			return false;
+		}
+		// Always close the streams, even if exceptions were thrown
+		finally {
+			if (from != null) {
+				try {
+					from.close();
+				} catch (IOException e) {
+					e.printStackTrace();
+					return false;
+				}
+			}
+			if (to != null) {
+				try {
+					to.close();
+				} catch (IOException e) {
+					e.printStackTrace();
+					return false;
+				}
+			}
+		}
+		return true;
+	}
+}
diff --git a/library/src/com/orm/util/ManifestHelper.java b/library/src/com/orm/util/ManifestHelper.java
index fb65724c..2c1ab355 100644
--- a/library/src/com/orm/util/ManifestHelper.java
+++ b/library/src/com/orm/util/ManifestHelper.java
@@ -14,6 +14,10 @@
      * Key for the database name meta data.
      */
     public final static String METADATA_DATABASE = "DATABASE";
+    /**
+     * Key for the preinstalled database file name (in assets) meta data.
+     */
+    public final static String METADATA_PREINSTALLED_DATABASE = "PREINSTALLED_DATABASE";
     /**
      * Key for the database verison meta data.
      */
@@ -84,6 +88,16 @@ public static String getDatabaseName(Context context) {
     public static boolean getDebugEnabled(Context context) {
         return getMetaDataBoolean(context, METADATA_QUERY_LOG);
     }
+    
+    /**
+     * Grabs the preinstalled database file name (in assets) from the manifest.
+     *
+     * @param context  the {@link android.content.Context} of the Android application
+     * @return the value for the {@value #METADATA_PREINSTALLED_DATABASE} meta data in the AndroidManifest
+     */
+    public static String getPreinstalledDatabaseName(Context context) {
+    	return getMetaDataString(context, METADATA_PREINSTALLED_DATABASE);
+    }
 
     private static String getMetaDataString(Context context, String name) {
         String value = null;
