diff --git a/build.gradle b/build.gradle
index 030e1cb3..5d7bb4d8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,7 +7,8 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0'
+//        classpath 'com.android.tools.build:gradle:2.0.0'
+        classpath 'com.android.tools.build:gradle:3.0.1'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b0bb3ffb..43250c3a 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Apr 09 17:51:14 ART 2016
+#Tue Mar 27 00:34:20 WAT 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index 907162ee..74bd17dd 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -2,8 +2,10 @@ apply plugin: 'com.android.library'
 apply from: '../maven_push.gradle'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+//    compileSdkVersion 23
+//    buildToolsVersion "23.0.3"
+    compileSdkVersion 27
+    buildToolsVersion "26.0.2"
 
     defaultConfig {
         minSdkVersion 9
@@ -28,7 +30,7 @@ dependencies {
 }
 
 task libraryJar(type: Jar) {
-    dependsOn assembleRelease
+    dependsOn "assembleRelease"
     from android.sourceSets.main.java.srcDirs,
          ['build/intermediates/classes/release/'] // Add the release classes into the jar
     baseName 'sugar'
diff --git a/library/src/main/java/com/orm/Id.java b/library/src/main/java/com/orm/Id.java
new file mode 100644
index 00000000..2fb3c535
--- /dev/null
+++ b/library/src/main/java/com/orm/Id.java
@@ -0,0 +1,14 @@
+package com.orm;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * Joey Dalu
+ * <a href="http://www.joey.ng">joey.ng</a>
+ * 27 March, 2018 - 10:59 AM
+ * Copyright (c) 2016. All rights reserved.
+ */
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Id {
+}
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index c25407fc..569acbf8 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -9,7 +9,6 @@
 import com.orm.annotation.MultiUnique;
 import com.orm.annotation.NotNull;
 import com.orm.annotation.Unique;
-import com.orm.dsl.BuildConfig;
 import com.orm.helper.ManifestHelper;
 import com.orm.util.KeyWordUtil;
 import com.orm.util.MigrationFileParser;
@@ -22,6 +21,9 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.lang.annotation.Annotation;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,6 +34,9 @@
 import static com.orm.util.ContextUtil.getAssets;
 
 public class SchemaGenerator {
+
+    private static final String LOG_TAG = "Sugar";
+
     public static final String NULL = " NULL";
     public static final String NOT_NULL = " NOT NULL";
     public static final String UNIQUE = " UNIQUE";
@@ -46,7 +51,9 @@ public static SchemaGenerator getInstance() {
 
     public void createDatabase(SQLiteDatabase sqLiteDatabase) {
         List<Class> domainClasses = getDomainClasses();
+        Log.d(LOG_TAG, "Creating tables for classes: "+domainClasses.size());
         for (Class domain : domainClasses) {
+            Log.d(LOG_TAG, "Creating table for : "+domain.getSimpleName());
             createTable(domain, sqLiteDatabase);
             afterTableCreated(domain,sqLiteDatabase);
         }
@@ -200,6 +207,16 @@ private void addColumns(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         }
     }
 
+    private <T> List<Field> getFields(T t) {
+        List<Field> fields = new ArrayList<>();
+        Class clazz = t.getClass();
+        while (clazz != Object.class) {
+            fields.addAll(Arrays.asList(clazz.getDeclaredFields()));
+            clazz = clazz.getSuperclass();
+        }
+        return fields;
+    }
+
     protected String createTableSQL(Class<?> table) {
         if(ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Create table if not exists");
@@ -214,14 +231,31 @@ protected String createTableSQL(Class<?> table) {
         }
 
         StringBuilder sb = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
-        sb.append(tableName).append(" ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
+
+        sb.append(tableName).append(" ( ");
+
+        Field idField = findAnnotatedField(table, Id.class);
+
+        if(idField!= null) {
+            sb.append(idField.getName());
+            if (idField.getType() == Integer.class || idField.getType() == Long.class) {
+                sb.append(" INTEGER PRIMARY KEY AUTOINCREMENT ");
+            } else if (idField.getType() == String.class) {
+                sb.append(" TEXT PRIMARY KEY ");
+            } else {
+                throw new IllegalArgumentException("Annotated ID field was of different type, only Integer | Long | String alloweed");
+            }
+        }else{
+            sb.append("id INTEGER PRIMARY KEY AUTOINCREMENT ");
+        }
+
 
         for (Field column : fields) {
             String columnName = NamingHelper.toColumnName(column);
             String columnType = QueryBuilder.getColumnType(column.getType());
 
             if (columnType != null) {
-                if (columnName.equalsIgnoreCase("Id")) {
+                if (idField != null && columnName.equalsIgnoreCase(idField.getName())) {
                     continue;
                 }
 
@@ -293,8 +327,22 @@ protected void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
                 sqLiteDatabase.execSQL(createSQL);
             } catch (SQLException e) {
                 e.printStackTrace();
+                Log.d(LOG_TAG, "Exception: "+e.getMessage());
+            }
+        }
+    }
+
+    public static Field findAnnotatedField(Class<?> classs, Class<? extends Annotation> ann) {
+        Class<?> c = classs;
+        while (c != null) {
+            for (Field field : c.getDeclaredFields()) {
+                if (field.isAnnotationPresent(ann)) {
+                    return field;
+                }
             }
+            c = c.getSuperclass();
         }
+        return null;
     }
 
 }
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 61609986..c08ab528 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -13,11 +13,11 @@
     private static SugarDbConfiguration dbConfiguration = null;
     private static SugarContext instance = null;
     private SugarDb sugarDb;
-    private Map<Object, Long> entitiesMap;
+    private Map<Object, Object> entitiesMap;
 
     private SugarContext() {
         this.sugarDb = SugarDb.getInstance();
-        this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Long>());
+        this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Object>());
     }
     
     public static SugarContext getSugarContext() {
@@ -67,7 +67,7 @@ public SugarDb getSugarDb() {
         return sugarDb;
     }
 
-    public Map<Object, Long> getEntitiesMap() {
+    public Map<Object, Object> getEntitiesMap() {
         return entitiesMap;
     }
 }
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index bc71ba23..b70408dd 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -32,6 +32,7 @@ public static SugarDb getInstance() {
 
     @Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
+        Log.d(LOG_TAG, "On create called");
         schemaGenerator.createDatabase(sqLiteDatabase);
     }
 
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 2ade2ba3..ee421e26 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -22,9 +22,9 @@
 import static com.orm.SugarContext.getSugarContext;
 
 public class SugarRecord {
-    public static final String SUGAR = "Sugar";
 
-    private Long id = null;
+    public static final String LOG_TAG = "Sugar";
+
 
     private static SQLiteDatabase getSugarDataBase() {
         return getSugarContext().getSugarDb().getDB();
@@ -61,7 +61,7 @@ private static SQLiteDatabase getSugarDataBase() {
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
             if (ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+                Log.i(LOG_TAG, "Error in saving in transaction " + e.getMessage());
             }
         } finally {
             sqLiteDatabase.endTransaction();
@@ -86,7 +86,7 @@ private static SQLiteDatabase getSugarDataBase() {
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
             if (ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+                Log.i(LOG_TAG, "Error in saving in transaction " + e.getMessage());
             }
         } finally {
             sqLiteDatabase.endTransaction();
@@ -115,7 +115,7 @@ private static SQLiteDatabase getSugarDataBase() {
         } catch (Exception e) {
             deletedRows = 0;
             if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Error in deleting in transaction " + e.getMessage());
+                Log.i(LOG_TAG, "Error in deleting in transaction " + e.getMessage());
             }
         } finally {
             sqLiteDatabase.endTransaction();
@@ -133,7 +133,10 @@ private static SQLiteDatabase getSugarDataBase() {
     }
 
     public static <T> T findById(Class<T> type, Long id) {
-        List<T> list = find(type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
+        Field idField = SchemaGenerator.findAnnotatedField(type, Id.class);
+        if(idField == null)
+            return null;
+        List<T> list = find(type, idField.getName()+"=?", new String[]{String.valueOf(id)}, null, null, "1");
         if (list.isEmpty()) return null;
         return list.get(0);
     }
@@ -142,8 +145,20 @@ private static SQLiteDatabase getSugarDataBase() {
         return findById(type, Long.valueOf(id));
     }
 
+    public static <T> T findById(Class<T> type, String id) {
+        Field idField = SchemaGenerator.findAnnotatedField(type, Id.class);
+        if(idField == null)
+            return null;
+        List<T> list = find(type, idField.getName()+"=?", new String[]{id}, null, null, "1");
+        if (list.isEmpty()) return null;
+        return list.get(0);
+    }
+
     public static <T> List<T> findById(Class<T> type, String... ids) {
-        String whereClause = "id IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
+        Field idField = SchemaGenerator.findAnnotatedField(type, Id.class);
+        if(idField == null)
+            return null;
+        String whereClause = idField.getName()+" IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
         return find(type, whereClause, ids);
     }
 
@@ -223,19 +238,49 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type, null, null);
     }
 
+    public static <T> T getEntityFromCursor(Cursor cursor, Class<T> type){
+        T entity = null;
+        try {
+            entity = type.getDeclaredConstructor().newInstance();
+            new EntityInflater()
+                    .withCursor(cursor)
+                    .withObject(entity)
+                    .withEntitiesMap(getSugarContext().getEntitiesMap())
+                    .withRelationFieldName(null)
+                    .withRelationObject(null)
+                    .inflate();
+
+            //set id here
+            Field idField = SchemaGenerator.findAnnotatedField(type, Id.class);
+            if(idField != null){
+                idField.setAccessible(true);
+                Object id =null;
+                if(idField.getType() == Integer.class){
+                    id = cursor.getInt(cursor.getColumnIndex(idField.getName()));
+                }else if(idField.getType() == Long.class){
+                    id = cursor.getLong(cursor.getColumnIndex(idField.getName()));
+                    idField.set(entity, id);
+                }else if(idField.getType() == String.class){
+                    id = cursor.getString(cursor.getColumnIndex(idField.getName()));
+                }
+                if(id != null){
+                    idField.set(entity, id);
+                }
+            }
+
+            return entity;
+        }catch (Exception e){
+            e.printStackTrace();
+        }
+        return entity;
+    }
+
     public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject){
         T entity;
         List<T> result = new ArrayList<>();
         try {
             while (cursor.moveToNext()) {
-                entity = type.getDeclaredConstructor().newInstance();
-                new EntityInflater()
-                        .withCursor(cursor)
-                        .withObject(entity)
-                        .withEntitiesMap(getSugarContext().getEntitiesMap())
-                        .withRelationFieldName(relationFieldName)
-                        .withRelationObject(relationObject)
-                        .inflate();
+                entity = getEntityFromCursor(cursor, type);
                 result.add(entity);
             }
         } catch (Exception e) {
@@ -316,20 +361,28 @@ public static long save(Object object) {
     }
 
     static long save(SQLiteDatabase db, Object object) {
-        Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+        Map<Object, Object> entitiesMap = getSugarContext().getEntitiesMap();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
-        Field idField = null;
+        Field idField = SchemaGenerator.findAnnotatedField(object.getClass(), Id.class);
         for (Field column : columns) {
             ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
-            if (column.getName().equals("id")) {
-                idField = column;
-            }
+//            if (column.getName().equals("id")) {
+//                idField = column;
+//            }
         }
 
         boolean isSugarEntity = isSugarEntity(object.getClass());
         if (isSugarEntity && entitiesMap.containsKey(object)) {
-                values.put("id", entitiesMap.get(object));
+//                values.put("id", entitiesMap.get(object));
+            Object colOb = entitiesMap.get(object);
+            if(colOb instanceof Integer){
+                values.put(idField.getName(), (Integer) entitiesMap.get(object));
+            }else if(colOb instanceof Long){
+                values.put(idField.getName(), (Long) entitiesMap.get(object));
+            }else if(colOb instanceof String){
+                values.put(idField.getName(), (String) entitiesMap.get(object));
+            }
         }
 
         long id = db.insertWithOnConflict(NamingHelper.toTableName(object.getClass()), null, values,
@@ -347,11 +400,11 @@ static long save(SQLiteDatabase db, Object object) {
                 entitiesMap.put(object, id);
             }
         } else if (SugarRecord.class.isAssignableFrom(object.getClass())) {
-            ((SugarRecord) object).setId(id);
+//            ((SugarRecord) object).setId(id);
         }
 
         if (ManifestHelper.isDebugEnabled()) {
-            Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
+            Log.i(LOG_TAG, object.getClass().getSimpleName() + " saved : " + id);
         }
 
         return id;
@@ -362,13 +415,15 @@ public static long update(Object object) {
     }
 
     static long update(SQLiteDatabase db, Object object) {
-        Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+        Map<Object, Object> entitiesMap = getSugarContext().getEntitiesMap();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
 
         StringBuilder whereClause = new StringBuilder();
         List<String> whereArgs = new ArrayList<>();
 
+        Field id = SchemaGenerator.findAnnotatedField(object.getClass(), Id.class);
+
         for (Field column : columns) {
             if(column.isAnnotationPresent(Unique.class)) {
                 try {
@@ -382,7 +437,7 @@ static long update(SQLiteDatabase db, Object object) {
                     e.printStackTrace();
                 }
             } else {
-                if (!column.getName().equals("id")) {
+                if (id == null || !column.getName().equals(id.getName())) {
                     ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
                 }
             }
@@ -399,61 +454,73 @@ static long update(SQLiteDatabase db, Object object) {
         }
     }
 
+    public static <T> long update(Class<T> tClass, ContentValues values, String whereClause, String... selectionArgs){
+        SQLiteDatabase db = getSugarDataBase();
+        return db.update(NamingHelper.toTableName(tClass), values, whereClause, selectionArgs);
+    }
+
     public static boolean isSugarEntity(Class<?> objectClass) {
         return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
     }
 
     public boolean delete() {
-        Long id = getId();
+//        IdType id = getId();
         Class<?> type = getClass();
-        if (id != null && id > 0L) {
+        Field id = SchemaGenerator.findAnnotatedField(type, Id.class);
+//        if (id != null && id > 0L) {
+        if (id != null) {
             if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
+                Log.i(LOG_TAG, type.getSimpleName() + " deleted : " + id);
             }
-            return getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
+            return getSugarDataBase().delete(NamingHelper.toTableName(type), id.getName()+"=?", new String[]{id.toString()}) == 1;
         } else {
             if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
+                Log.i(LOG_TAG, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
             }
             return false;
         }
     }
 
+
+
     public static boolean delete(Object object) {
         Class<?> type = object.getClass();
         if (type.isAnnotationPresent(Table.class)) {
             try {
-                Field field = type.getDeclaredField("id");
-                field.setAccessible(true);
-                Long id = (Long) field.get(object);
-                if (id != null && id > 0L) {
-                    boolean deleted = getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
-                    if(ManifestHelper.isDebugEnabled()) {
-                        Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
+                Field id = SchemaGenerator.findAnnotatedField(type, Id.class);
+                id.setAccessible(true);
+                if (id != null) {
+                    boolean deleted = getSugarDataBase().delete(NamingHelper.toTableName(type), id.getName() + "=?", new String[]{id.toString()}) == 1;
+                    if (ManifestHelper.isDebugEnabled()) {
+                        Log.i(LOG_TAG, type.getSimpleName() + " deleted : " + id);
                     }
                     return deleted;
                 } else {
-                    if(ManifestHelper.isDebugEnabled()) {
-                        Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
+                    if (ManifestHelper.isDebugEnabled()) {
+                        Log.i(LOG_TAG, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
                     }
                     return false;
                 }
-            } catch (NoSuchFieldException e) {
-                if(ManifestHelper.isDebugEnabled()) {
-                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
-                }
-                return false;
-            } catch (IllegalAccessException e) {
-                if(ManifestHelper.isDebugEnabled()) {
-                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
-                }
+//            } catch (NoSuchFieldException e) {
+//                if(ManifestHelper.isDebugEnabled()) {
+//                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
+//                }
+//                return false;
+//            } catch (IllegalAccessException e) {
+//                if(ManifestHelper.isDebugEnabled()) {
+//                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
+//                }
+//                return false;
+//            }
+            }catch (Exception ignored){
+                Log.d(LOG_TAG, "Exception deleting: "+ignored.getMessage());
                 return false;
             }
         } else if (SugarRecord.class.isAssignableFrom(type)) {
             return ((SugarRecord) object).delete();
         } else {
             if(ManifestHelper.isDebugEnabled()) {
-                Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
+                Log.i(LOG_TAG, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
             }
             return false;
         }
@@ -476,12 +543,19 @@ void inflate(Cursor cursor) {
                 .inflate();
     }
 
-    public Long getId() {
-        return id;
-    }
 
-    public void setId(Long id) {
-        this.id = id;
+    public String getIdField(){
+        Field id = SchemaGenerator.findAnnotatedField(getClass(), Id.class);
+        id.setAccessible(true);
+        if(id != null) {
+            try {
+                return String.valueOf(id.get(this));
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+                Log.d(LOG_TAG, "Error getting id field: "+e.getMessage());
+            }
+        }
+        return null;
     }
 
     static class CursorIterator<E> implements Iterator<E> {
@@ -547,4 +621,8 @@ public void remove() {
 
     }
 
+    public static String column(String field){
+        return NamingHelper.toSQLNameDefault(field);
+    }
+
 }
diff --git a/library/src/main/java/com/orm/helper/NamingHelper.java b/library/src/main/java/com/orm/helper/NamingHelper.java
index 0ae3128b..ec5bad7b 100644
--- a/library/src/main/java/com/orm/helper/NamingHelper.java
+++ b/library/src/main/java/com/orm/helper/NamingHelper.java
@@ -18,37 +18,39 @@ private NamingHelper() { }
      *         "_id" (not case sensitive) in which case "_id" is returned
      */
     public static String toSQLNameDefault(String camelCased) {
-        if (camelCased.equalsIgnoreCase("_id")) {
-            return "_id";
-        }
-
-        StringBuilder sb = new StringBuilder();
-        char[] buf = camelCased.toCharArray();
-
-        for (int i = 0; i < buf.length; i++) {
-            char prevChar = (i > 0) ? buf[i - 1] : 0;
-            char c = buf[i];
-            char nextChar = (i < buf.length - 1) ? buf[i + 1] : 0;
-            boolean isFirstChar = (i == 0);
-
-            if (isFirstChar || Character.isLowerCase(c) || Character.isDigit(c)) {
-                sb.append(Character.toUpperCase(c));
-            } else if (Character.isUpperCase(c)) {
-                if (Character.isLetterOrDigit(prevChar)) {
-                    if (Character.isLowerCase(prevChar)) {
-                        sb.append('_').append(c);
-                    } else if (nextChar > 0 && Character.isLowerCase(nextChar)) {
-                        sb.append('_').append(c);
-                    } else {
-                        sb.append(c);
-                    }
-                } else {
-                    sb.append(c);
-                }
-            }
-        }
+//        if (camelCased.equalsIgnoreCase("_id")) {
+//            return "_id";
+//        }
+//
+//        StringBuilder sb = new StringBuilder();
+//        char[] buf = camelCased.toCharArray();
+//
+//        for (int i = 0; i < buf.length; i++) {
+//            char prevChar = (i > 0) ? buf[i - 1] : 0;
+//            char c = buf[i];
+//            char nextChar = (i < buf.length - 1) ? buf[i + 1] : 0;
+//            boolean isFirstChar = (i == 0);
+//
+//            if (isFirstChar || Character.isLowerCase(c) || Character.isDigit(c)) {
+//                sb.append(Character.toUpperCase(c));
+//            } else if (Character.isUpperCase(c)) {
+//                if (Character.isLetterOrDigit(prevChar)) {
+//                    if (Character.isLowerCase(prevChar)) {
+//                        sb.append('_').append(c);
+//                    } else if (nextChar > 0 && Character.isLowerCase(nextChar)) {
+//                        sb.append('_').append(c);
+//                    } else {
+//                        sb.append(c);
+//                    }
+//                } else {
+//                    sb.append(c);
+//                }
+//            }
+//        }
 
-        return sb.toString();
+//        return sb.toString();
+//        return tableName.toLowerCase() + "_"+camelCased;
+        return camelCased;
     }
 
     /**
@@ -81,12 +83,14 @@ public static String toTableName(Class<?> table) {
         if (table.isAnnotationPresent(Table.class)) {
             Table annotation = table.getAnnotation(Table.class);
             if ("".equals(annotation.name())) {
-                return NamingHelper.toSQLNameDefault(table.getSimpleName());
+//                return NamingHelper.toSQLNameDefault(table.getSimpleName());
+                return table.getSimpleName();
             }
             return annotation.name();
         }
 
-        return NamingHelper.toSQLNameDefault(table.getSimpleName());
+//        return NamingHelper.toSQLNameDefault(table.getSimpleName());
+        return table.getSimpleName().toLowerCase();
     }
 
 }
diff --git a/library/src/main/java/com/orm/inflater/EntityInflater.java b/library/src/main/java/com/orm/inflater/EntityInflater.java
index 5d71e5df..cf629b29 100644
--- a/library/src/main/java/com/orm/inflater/EntityInflater.java
+++ b/library/src/main/java/com/orm/inflater/EntityInflater.java
@@ -1,6 +1,10 @@
 package com.orm.inflater;
 
 import android.database.Cursor;
+import android.util.Log;
+
+import com.orm.Id;
+import com.orm.SchemaGenerator;
 import com.orm.SugarRecord;
 import com.orm.inflater.field.*;
 import com.orm.util.ReflectionUtil;
@@ -17,7 +21,7 @@
     private Object object;
     private Object relationObject;
     private String relationFieldName;
-    private Map<Object, Long> entitiesMap;
+    private Map<Object, Object> entitiesMap;
 
     public EntityInflater withCursor(Cursor cursor) {
         this.cursor = cursor;
@@ -39,16 +43,42 @@ public EntityInflater withRelationFieldName(String relationFieldName) {
         return this;
     }
 
-    public EntityInflater withEntitiesMap(Map<Object, Long> entitiesMap) {
+    public EntityInflater withEntitiesMap(Map<Object, Object> entitiesMap) {
         this.entitiesMap = entitiesMap;
         return this;
     }
 
+    private static final String LOG_TAG = "Sugar";
+
     public void inflate() {
+        Log.d(LOG_TAG, "Inflating class: "+object.getClass().getSimpleName());
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
-        Long objectId = cursor.getLong(cursor.getColumnIndex(("ID")));
-        if (!entitiesMap.containsKey(object)) {
-            entitiesMap.put(object, objectId);
+        Field id = SchemaGenerator.findAnnotatedField(object.getClass(), Id.class);
+        if(id != null){
+            Log.d(LOG_TAG, "ID field: "+id.getName());
+            Object objectId = null;
+            if(id.getType() == Integer.class){
+                Log.d(LOG_TAG, "Integer id field found");
+                objectId = cursor.getInt(cursor.getColumnIndex(id.getName()));
+            }else if(id.getType() == Long.class){
+                Log.d(LOG_TAG, "Long  id field found");
+                objectId = cursor.getLong(cursor.getColumnIndex(id.getName()));
+            }else if(id.getType() == String.class){
+                Log.d(LOG_TAG, "String id field found");
+                objectId = cursor.getString(cursor.getColumnIndex(id.getName()));
+            }
+//            Long objectId = cursor.getLong(cursor.getColumnIndex(("ID")));
+            if (!entitiesMap.containsKey(object)) {
+                Log.d(LOG_TAG, "Entities map contains object");
+                if(objectId != null) {
+                    Log.d(LOG_TAG, "Added object id: "+objectId);
+                    entitiesMap.put(object, objectId);
+                }else{
+                    Log.d(LOG_TAG, "Object id is null");
+                }
+            }else{
+                Log.d(LOG_TAG, "Failed to add id field, not found in entities map");
+            }
         }
 
         FieldInflater fieldInflater;
diff --git a/library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java b/library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
index 9eda8f8e..0fd2226e 100644
--- a/library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
+++ b/library/src/main/java/com/orm/inflater/field/EntityFieldInflater.java
@@ -20,6 +20,16 @@ public EntityFieldInflater(Field field, Cursor cursor, Object object, Class<?> f
     @Override
     public void inflate() {
         try {
+//            if(fieldType == Integer.class){
+//               Integer id = cursor.getInt(cursor.getColumnIndex(NamingHelper.toColumnName(field)));
+//               field.set(object, (id > 0) ? SugarRecord.findById(fieldType, id) : null);
+//            }else if(fieldType == Long.class){
+//                Long id = cursor.getLong(cursor.getColumnIndex(NamingHelper.toColumnName(field)));
+//                field.set(object, (id > 0) ? SugarRecord.findById(fieldType, id) : null);
+//            }else if(fieldType == String.class){
+//                String id = cursor.getString(cursor.getColumnIndex(NamingHelper.toColumnName(field)));
+//                field.set(object, SugarRecord.findById(fieldType, id));
+//            }
             long id = cursor.getLong(cursor.getColumnIndex(NamingHelper.toColumnName(field)));
             field.set(object, (id > 0) ? SugarRecord.findById(fieldType, id) : null);
         } catch (IllegalAccessException e) {
diff --git a/library/src/main/java/com/orm/query/Condition.java b/library/src/main/java/com/orm/query/Condition.java
index 52ae052c..fcf61cc6 100644
--- a/library/src/main/java/com/orm/query/Condition.java
+++ b/library/src/main/java/com/orm/query/Condition.java
@@ -115,7 +115,7 @@ public String getCheckSymbol() {
 
     private void setValue(Object value) {
         if (value instanceof SugarRecord) {
-            this.value = ((SugarRecord)value).getId();
+            this.value = ((SugarRecord)value).getIdField();
         } else {
             this.value = value;
         }
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 18943d09..5c2648e5 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -5,6 +5,8 @@
 import android.database.Cursor;
 import android.util.Log;
 
+import com.orm.Id;
+import com.orm.SchemaGenerator;
 import com.orm.SugarRecord;
 import com.orm.annotation.Ignore;
 import com.orm.annotation.Table;
@@ -66,33 +68,46 @@ private ReflectionUtil() { }
     }
 
     public static void addFieldValueToColumn(ContentValues values, Field column, Object object,
-                                             Map<Object, Long> entitiesMap) {
-        column.setAccessible(true);
-        Class<?> columnType = column.getType();
+                                             Map<Object, Object> entitiesMap) {
+        column.setAccessible(true); //column field
+        Class<?> columnType = column.getType(); //type of the column
         try {
-            String columnName = NamingHelper.toColumnName(column);
-            Object columnValue = column.get(object);
-
-            if (columnType.isAnnotationPresent(Table.class)) {
-                Field field;
-                try {
-                    field = columnType.getDeclaredField("id");
-                    field.setAccessible(true);
-                    if(columnValue != null) {
-                        values.put(columnName,String.valueOf(field.get(columnValue)));
-                    } else {
-                        values.putNull(columnName);
+            String columnName = NamingHelper.toColumnName(column); //name of the column
+            Object columnValue = column.get(object); //current value of the column
+
+            if (columnType.isAnnotationPresent(Table.class)) { //if column is table
+                Field field; //get id field
+//                try {
+//                    field = columnType.getDeclaredField("id");
+                    field = SchemaGenerator.findAnnotatedField(columnType, Id.class);
+                    if(field!=null) {
+                        field.setAccessible(true);
+                        if (columnValue != null) {
+                            values.put(columnName, String.valueOf(field.get(columnValue)));
+                        } else {
+                            values.putNull(columnName);
+                        }
                     }
-                } catch (NoSuchFieldException e) {
-                    if (entitiesMap.containsKey(columnValue)) {
-                        values.put(columnName, entitiesMap.get(columnValue));
-                    }
-                }
+//                } catch (NoSuchFieldException e) {
+//                    if (entitiesMap.containsKey(columnValue)) {
+//                        Object colOb = entitiesMap.get(columnName);
+//                        if(colOb instanceof Integer){
+//                            values.put(columnName, (Integer) entitiesMap.get(columnValue));
+//                        }else if(colOb instanceof Long){
+//                            values.put(columnName, (Long) entitiesMap.get(columnValue));
+//                        }else if(colOb instanceof String){
+//                            values.put(columnName, (String) entitiesMap.get(columnValue));
+//                        }
+//                    }
+//                }
             } else if (SugarRecord.class.isAssignableFrom(columnType)) {
                 values.put(columnName,
                         (columnValue != null)
-                                ? String.valueOf(((SugarRecord) columnValue).getId())
+                                ? ((SugarRecord) columnValue).getIdField()
                                 : "0");
+                if(columnValue!=null){
+                    ((SugarRecord)columnValue).save();
+                }
             } else {
                 if (columnType.equals(Short.class) || columnType.equals(short.class)) {
                     values.put(columnName, (Short) columnValue);
