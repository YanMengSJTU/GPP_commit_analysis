diff --git a/example/src/test/java/com/example/sugartest/HelperRecordTests.java b/example/src/test/java/com/example/sugartest/HelperRecordTests.java
index 79228533..b39d11d1 100644
--- a/example/src/test/java/com/example/sugartest/HelperRecordTests.java
+++ b/example/src/test/java/com/example/sugartest/HelperRecordTests.java
@@ -18,42 +18,74 @@
 public class HelperRecordTests {
     @Test
     public void firstHelperTest() {
-
         Float firstObjectFloat = new Float(25F);
         Float lastObjectFloat = new Float(50F);
         save(new FloatFieldExtendedModel(firstObjectFloat));
         save(new FloatFieldExtendedModel(lastObjectFloat));
-        FloatFieldExtendedModel model = SugarRecord.first(FloatFieldExtendedModel.class);
+        FloatFieldExtendedModel model = FloatFieldExtendedModel.first(FloatFieldExtendedModel.class);
         assertEquals(firstObjectFloat, model.getFloat() );
     }
 
+    @Test
+    public void firstHelperDeletedRecordTest() {
+        System.out.println("bla");
+        Float firstObjectFloat = new Float(15F);
+        Float secondObjectFloat = new Float(25F);
+        Float thirdObjectFloat = new Float(35F);
+        Float fourthObjectFloat = new Float(45F);
+        save(new FloatFieldExtendedModel(firstObjectFloat));
+        save(new FloatFieldExtendedModel(secondObjectFloat));
+        save(new FloatFieldExtendedModel(thirdObjectFloat));
+        save(new FloatFieldExtendedModel(fourthObjectFloat));
+        FloatFieldExtendedModel firstRecord = FloatFieldExtendedModel.findById(FloatFieldExtendedModel.class,1);
+        firstRecord.delete();
+        FloatFieldExtendedModel model = FloatFieldExtendedModel.first(FloatFieldExtendedModel.class);
+        assertEquals(secondObjectFloat, model.getFloat() );
+    }
+
     @Test
     public void lastHelperTest() {
         Float firstObjectFloat = new Float(25F);
         Float lastObjectFloat = new Float(50F);
         save(new FloatFieldExtendedModel(firstObjectFloat));
         save(new FloatFieldExtendedModel(lastObjectFloat));
-        FloatFieldExtendedModel model = SugarRecord.last(FloatFieldExtendedModel.class);
+        FloatFieldExtendedModel model = FloatFieldExtendedModel.last(FloatFieldExtendedModel.class);
         assertEquals(lastObjectFloat, model.getFloat() );
     }
 
+    @Test
+    public void lastHelperDeletedRecordTest() {
+        Float firstObjectFloat = new Float(15F);
+        Float secondObjectFloat = new Float(25F);
+        Float thirdObjectFloat = new Float(35F);
+        Float fourthObjectFloat = new Float(45F);
+        save(new FloatFieldExtendedModel(firstObjectFloat));
+        save(new FloatFieldExtendedModel(secondObjectFloat));
+        save(new FloatFieldExtendedModel(thirdObjectFloat));
+        save(new FloatFieldExtendedModel(fourthObjectFloat));
+        FloatFieldExtendedModel lastRecord = FloatFieldExtendedModel.findById(FloatFieldExtendedModel.class, 4);
+        lastRecord.delete();
+        FloatFieldExtendedModel model = FloatFieldExtendedModel.last(FloatFieldExtendedModel.class);
+        assertEquals(thirdObjectFloat, model.getFloat());
+    }
+
     @Test
     public void nullFirstHelperTest() {
-        FloatFieldExtendedModel model = SugarRecord.first(FloatFieldExtendedModel.class);
+        FloatFieldExtendedModel model = FloatFieldExtendedModel.first(FloatFieldExtendedModel.class);
         assertNull(model);
     }
 
     @Test
     public void nullLastHelperTest() {
-        FloatFieldExtendedModel model = SugarRecord.last(FloatFieldExtendedModel.class);
+        FloatFieldExtendedModel model = FloatFieldExtendedModel.last(FloatFieldExtendedModel.class);
         assertNull(model);
     }
 
     @Test
     public void oneItemHelperTest() {
         save(new FloatFieldExtendedModel(new Float(25F)));
-        FloatFieldExtendedModel firstModel = SugarRecord.first(FloatFieldExtendedModel.class);
-        FloatFieldExtendedModel lastModel = SugarRecord.last(FloatFieldExtendedModel.class);
+        FloatFieldExtendedModel firstModel = FloatFieldExtendedModel.first(FloatFieldExtendedModel.class);
+        FloatFieldExtendedModel lastModel = FloatFieldExtendedModel.last(FloatFieldExtendedModel.class);
         assertEquals(firstModel.getFloat(), lastModel.getFloat());
     }
 }
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 5102818b..d8c12b4a 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -76,11 +76,15 @@
     }
 
     public static <T> T first(Class<T>type){
-        return findById(type, 1);
+        List<T> list = findWithQuery(type, "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ROWID ASC LIMIT 1" );
+        if (list.isEmpty()) return null;
+        return list.get(0);
     }
 
     public static <T> T last(Class<T>type){
-        return findById(type, count(type));
+        List<T> list = findWithQuery(type, "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ROWID DESC LIMIT 1");
+        if (list.isEmpty()) return null;
+        return list.get(0);
     }
 
     public static <T> Iterator<T> findAll(Class<T> type) {
