diff --git a/example/build.gradle b/example/build.gradle
index 8ab86abb..a017d24a 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -36,13 +36,6 @@ robolectric {
     // Configure the test JVM arguments - Does not apply to Java 8
     jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
 
-    // Specify max number of processes (default is 1)
-    maxParallelForks = 4
-
-    // Specify max number of test classes to execute in a test process
-    // before restarting the process (default is unlimited)
-    forkEvery = 150
-
     // configure whether failing tests should fail the build
     ignoreFailures true
 
diff --git a/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java b/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java
new file mode 100644
index 00000000..e6dfb8e3
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java
@@ -0,0 +1,53 @@
+package com.example.sugartest;
+
+
+import com.example.models.IntegerFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class ListAllOrderByTests {
+    @Test
+    public void listAllOrderByEmptyTest() {
+        assertEquals(0L, SugarRecord.listAll(IntegerFieldExtendedModel.class, "id").size());
+    }
+
+    @Test
+    public void listAllOrderByIdTest() {
+        for(int i = 1; i <= 100; i++) {
+            save(new IntegerFieldExtendedModel(i));
+        }
+        List<IntegerFieldExtendedModel> models =
+                SugarRecord.listAll(IntegerFieldExtendedModel.class, "id");
+        assertEquals(100L, models.size());
+        Long id = models.get(0).getId();
+        for(int i = 1; i < 100; i++) {
+            assertTrue(id <models.get(i).getId());
+        }
+    }
+
+    @Test
+    public void listAllOrderByFieldTest() {
+        for(int i = 1; i <= 100; i++) {
+            save(new IntegerFieldExtendedModel(i));
+        }
+        List<IntegerFieldExtendedModel> models =
+                SugarRecord.listAll(IntegerFieldExtendedModel.class, "raw_integer");
+        assertEquals(100L, models.size());
+        int raw = models.get(0).getInt();
+        for(int i = 1; i < 100; i++) {
+            assertTrue(raw < models.get(i).getInt());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java b/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
index 5c3ed6a9..b058435a 100644
--- a/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
+++ b/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
@@ -76,6 +77,23 @@ public void whereBrokenCountTest() throws Exception {
         assertEquals(-1L, SugarRecord.count(SimpleAnnotatedModel.class, "di = ?", new String[]{"1"}));
     }
 
+    @Test
+    public void deleteTest() throws Exception {
+        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
+        save(model);
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        SugarRecord.delete(model);
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteUnsavedTest() throws Exception {
+        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+        SugarRecord.delete(model);
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
     @Test
     public void deleteAllTest() throws Exception {
         for (int i = 1; i <= 100; i++) {
@@ -94,6 +112,32 @@ public void deleteAllWhereTest() throws Exception {
         assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
     }
 
+    @Test
+    public void deleteInTransactionFewTest() throws Exception {
+        SimpleAnnotatedModel first = new SimpleAnnotatedModel();
+        SimpleAnnotatedModel second = new SimpleAnnotatedModel();
+        SimpleAnnotatedModel third = new SimpleAnnotatedModel();
+        save(first);
+        save(second);
+        save(third);
+        assertEquals(3L, SugarRecord.count(SimpleAnnotatedModel.class));
+        SugarRecord.deleteInTx(first, second, third);
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteInTransactionManyTest() throws Exception {
+        List<SimpleAnnotatedModel> models = new ArrayList<>();
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel model = new SimpleAnnotatedModel();
+            models.add(model);
+            save(model);
+        }
+        assertEquals(100L, SugarRecord.count(SimpleAnnotatedModel.class));
+        SugarRecord.deleteInTx(models);
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
     @Test
     public void saveInTransactionTest() throws Exception {
         SugarRecord.saveInTx(new SimpleAnnotatedModel(), new SimpleAnnotatedModel());
@@ -148,6 +192,62 @@ public void findByIdIntegerTest() throws Exception {
         assertEquals(new Long(1L), SugarRecord.findById(SimpleAnnotatedModel.class, 1).getId());
     }
 
+    @Test
+    public void findByIdStringsNullTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        assertEquals(0, SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{""}).size());
+    }
+
+    @Test
+    public void findByIdStringsOneTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"1"});
+        assertEquals(1, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+    }
+
+    @Test
+    public void findByIdStringsTwoTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"1", "3"});
+        assertEquals(2, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+    }
+
+    @Test
+    public void findByIdStringsManyTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"1", "3", "6", "10"});
+        assertEquals(4, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
+    @Test
+    public void findByIdStringsOrderTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"10", "6", "3", "1"});
+        assertEquals(4, models.size());
+        // The order of the query doesn't matter
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
     @Test
     public void findByIdNullTest() throws Exception {
         save(new SimpleAnnotatedModel());
diff --git a/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java b/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
index ccae3fb7..eb61a212 100644
--- a/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
+++ b/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
@@ -88,7 +89,15 @@ public void deleteTest() throws Exception {
         SimpleExtendedModel model = new SimpleExtendedModel();
         save(model);
         assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
-        model.delete();
+        SugarRecord.delete(model);
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteUnsavedTest() throws Exception {
+        SimpleExtendedModel model = new SimpleExtendedModel();
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+        SugarRecord.delete(model);
         assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
     }
 
@@ -110,6 +119,32 @@ public void deleteAllWhereTest() throws Exception {
         assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
     }
 
+    @Test
+    public void deleteInTransactionFewTest() throws Exception {
+        SimpleExtendedModel first = new SimpleExtendedModel();
+        SimpleExtendedModel second = new SimpleExtendedModel();
+        SimpleExtendedModel third = new SimpleExtendedModel();
+        save(first);
+        save(second);
+        save(third);
+        assertEquals(3L, SugarRecord.count(SimpleExtendedModel.class));
+        SugarRecord.deleteInTx(first, second, third);
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteInTransactionManyTest() throws Exception {
+        List<SimpleExtendedModel> models = new ArrayList<>();
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel model = new SimpleExtendedModel();
+            models.add(model);
+            save(model);
+        }
+        assertEquals(100L, SugarRecord.count(SimpleExtendedModel.class));
+        SugarRecord.deleteInTx(models);
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
     @Test
     public void saveInTransactionTest() throws Exception {
         SugarRecord.saveInTx(new SimpleExtendedModel(), new SimpleExtendedModel());
@@ -164,6 +199,62 @@ public void findByIdIntegerTest() throws Exception {
         assertEquals(new Long(1L), SugarRecord.findById(SimpleExtendedModel.class, 1).getId());
     }
 
+    @Test
+    public void findByIdStringsNullTest() throws Exception {
+        save(new SimpleExtendedModel());
+        assertEquals(0, SugarRecord.findById(SimpleExtendedModel.class, new String[]{""}).size());
+    }
+
+    @Test
+    public void findByIdStringsOneTest() throws Exception {
+        save(new SimpleExtendedModel());
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"1"});
+        assertEquals(1, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+    }
+
+    @Test
+    public void findByIdStringsTwoTest() throws Exception {
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"1", "3"});
+        assertEquals(2, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+    }
+
+    @Test
+    public void findByIdStringsManyTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleExtendedModel());
+        }
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"1", "3", "6", "10"});
+        assertEquals(4, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
+    @Test
+    public void findByIdStringsOrderTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleExtendedModel());
+        }
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"10", "6", "3", "1"});
+        assertEquals(4, models.size());
+        // The order of the query doesn't matter
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
     @Test
     public void findByIdNullTest() throws Exception {
         save(new SimpleExtendedModel());
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
diff --git a/gradlew.bat b/gradlew.bat
old mode 100644
new mode 100755
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index a7f25b51..590e259e 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -1,10 +1,11 @@
 package com.orm;
 
 import android.content.Context;
+import android.database.Cursor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
 import android.util.Log;
+
 import com.orm.dsl.Column;
 import com.orm.dsl.NotNull;
 import com.orm.dsl.Unique;
@@ -41,13 +42,11 @@ public void createDatabase(SQLiteDatabase sqLiteDatabase) {
 
     public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
         List<Class> domainClasses = getDomainClasses(context);
+        String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
         for (Class domain : domainClasses) {
-            try {  // we try to do a select, if fails then (?) there isn't the table
-                sqLiteDatabase.query(NamingHelper.toSQLName(domain), null, null, null, null, null, null);
-            } catch (SQLiteException e) {
-                Log.i("Sugar", String.format("Creating table on update (error was '%s')",
-                        e.getMessage()));
-                createTable(domain, sqLiteDatabase);
+            Cursor c = sqLiteDatabase.rawQuery(String.format(sql, NamingHelper.toSQLName(domain)), null);
+            if (c.moveToFirst() && c.getInt(0) == 0) {
+            	createTable(domain, sqLiteDatabase);
             }
         }
         executeSugarUpgrade(sqLiteDatabase, oldVersion, newVersion);
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index d8c12b4a..9226cba7 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -11,7 +11,9 @@
 import com.orm.dsl.Table;
 import com.orm.util.NamingHelper;
 import com.orm.util.ReflectionUtil;
+import com.orm.util.QueryBuilder;
 
+import java.lang.String;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -61,9 +63,36 @@
         }
     }
 
+    @SuppressWarnings("deprecation")
+    public static <T> void deleteInTx(T... objects) {
+        deleteInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void deleteInTx(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarContext().getSugarDb().getDB();
+        try {
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for (T object : objects) {
+                SugarRecord.delete(object);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            Log.i("Sugar", "Error in deleting in transaction " + e.getMessage());
+        } finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+    }
+
     public static <T> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
+    
+    public static <T> List<T> listAll(Class<T> type, String orderBy) {
+        return find(type, null, null, null, orderBy, null);
+    }
 
     public static <T> T findById(Class<T> type, Long id) {
         List<T> list = find(type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
@@ -75,6 +104,11 @@
         return findById(type, Long.valueOf(id));
     }
 
+    public static <T> List<T> findById(Class<T> type, String[] ids) {
+        String whereClause = "id IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
+        return find(type, whereClause, ids);
+    }
+
     public static <T> T first(Class<T>type){
         List<T> list = findWithQuery(type, "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ROWID ASC LIMIT 1" );
         if (list.isEmpty()) return null;
@@ -255,9 +289,46 @@ private static void inflate(Cursor cursor, Object object) {
     }
 
     public void delete() {
-        SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
-        db.delete(NamingHelper.toSQLName(getClass()), "Id=?", new String[]{getId().toString()});
-        Log.i("Sugar", getClass().getSimpleName() + " deleted : " + getId().toString());
+        Long id = getId();
+        Class<?> type = getClass();
+        if (id != null && id > 0L) {
+            SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
+            db.delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()});
+            Log.i("Sugar", type.getSimpleName() + " deleted : " + id.toString());
+        } else {
+            Log.i("Sugar", "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
+            return;
+        }
+    }
+    
+    public static void delete(Object object) {
+        Class<?> type = object.getClass();
+        if (type.isAnnotationPresent(Table.class)) {
+            try {
+                Field field = type.getDeclaredField("id");
+                field.setAccessible(true);
+                Long id = (Long) field.get(object);
+                if (id != null && id > 0L) {
+                    SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
+                    db.delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()});
+                    Log.i("Sugar", type.getSimpleName() + " deleted : " + id.toString());
+                } else {
+                    Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
+                    return;
+                }
+            } catch (NoSuchFieldException e) {
+                Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
+                return;
+            } catch (IllegalAccessException e) {
+                Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
+                return;
+            }
+        } else if (SugarRecord.class.isAssignableFrom(type)) {
+            ((SugarRecord) object).delete();
+        } else {
+            Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
+            return;
+        }
     }
 
     public long save() {
diff --git a/library/src/main/java/com/orm/util/QueryBuilder.java b/library/src/main/java/com/orm/util/QueryBuilder.java
index 6de9e8ca..5dfa36c6 100644
--- a/library/src/main/java/com/orm/util/QueryBuilder.java
+++ b/library/src/main/java/com/orm/util/QueryBuilder.java
@@ -2,6 +2,9 @@
 
 import com.orm.SugarRecord;
 
+import java.lang.RuntimeException;
+import java.lang.StringBuilder;
+
 public class QueryBuilder {
 
     public static String getColumnType(Class<?> type) {
@@ -38,4 +41,16 @@ public static String getColumnType(Class<?> type) {
         return "";
     }
 
+    public static String generatePlaceholders(int numberOfArgs) {
+        if (numberOfArgs < 1) {
+            throw new RuntimeException("The number of arguments must be greater than or equal to 1.");
+        }
+
+        StringBuilder stringBuilder = new StringBuilder(numberOfArgs * 2 - 1);
+        stringBuilder.append("?");
+        for (int i = 1; i < numberOfArgs; i++) {
+            stringBuilder.append(",?");
+        }
+        return stringBuilder.toString();
+    }
 }
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index dd8c419f..15ce2276 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -225,10 +225,8 @@ public static void setFieldValueForId(Object object, Long value) {
         List<Class> domainClasses = new ArrayList<Class>();
         try {
             for (String className : getAllClasses(context)) {
-                if (className.startsWith(ManifestHelper.getDomainPackageName(context))) {
-                    Class domainClass = getDomainClass(className, context);
-                    if (domainClass != null) domainClasses.add(domainClass);
-                }
+                Class domainClass = getDomainClass(className, context);
+                if (domainClass != null) domainClasses.add(domainClass);
             }
         } catch (IOException e) {
             Log.e("Sugar", e.getMessage());
@@ -264,13 +262,15 @@ private static Class getDomainClass(String className, Context context) {
 
 
     private static List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
+        String packageName = ManifestHelper.getDomainPackageName(context);
         String path = getSourcePath(context);
         List<String> classNames = new ArrayList<String>();
         try {
             DexFile dexfile = new DexFile(path);
             Enumeration<String> dexEntries = dexfile.entries();
             while (dexEntries.hasMoreElements()) {
-                classNames.add(dexEntries.nextElement());
+                String className = dexEntries.nextElement();
+                if (className.startsWith(packageName)) classNames.add(className);
             }
         } catch (NullPointerException e) {
             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
@@ -283,7 +283,9 @@ private static Class getDomainClass(String className, Context context) {
                     for (File filePath : classDirectory.listFiles()) {
                         populateFiles(filePath, fileNames, "");
                     }
-                    classNames.addAll(fileNames);
+                    for (String fileName : fileNames) {
+                        if (fileName.startsWith(packageName)) classNames.add(fileName);
+                    }
                 }
             }
         }
diff --git a/library/src/test/java/com/orm/query/QueryBuilderTests.java b/library/src/test/java/com/orm/query/QueryBuilderTests.java
new file mode 100644
index 00000000..96e3c79f
--- /dev/null
+++ b/library/src/test/java/com/orm/query/QueryBuilderTests.java
@@ -0,0 +1,29 @@
+package com.orm.query;
+
+import com.orm.util.QueryBuilder;
+
+import org.junit.Test;
+
+import static junit.framework.Assert.assertEquals;
+
+public class QueryBuilderTests {
+    @Test(expected=RuntimeException.class)
+    public void noArgumentsTest() {
+        QueryBuilder.generatePlaceholders(0);
+    }
+
+    @Test()
+    public void oneArgumentsTest() {
+        assertEquals("?", QueryBuilder.generatePlaceholders(1));
+    }
+
+    @Test
+    public void twoArgumentsTest() {
+        assertEquals("?,?", QueryBuilder.generatePlaceholders(2));
+    }
+
+    @Test
+    public void manyArgumentsTest() {
+        assertEquals("?,?,?,?,?,?,?,?,?,?", QueryBuilder.generatePlaceholders(10));
+    }
+}
