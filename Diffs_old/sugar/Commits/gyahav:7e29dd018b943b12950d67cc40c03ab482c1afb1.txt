diff --git a/example/src/main/java/com/example/activities/Model.java b/example/src/main/java/com/example/activities/Model.java
index ce6a1e62..a1ac598a 100644
--- a/example/src/main/java/com/example/activities/Model.java
+++ b/example/src/main/java/com/example/activities/Model.java
@@ -5,9 +5,9 @@
 
 public class Model extends SugarRecord {
 
-    @NotNull(value = "666")
+    @NotNull(intDef = 666)
     public Long defaultInt;
-    @NotNull(value = "Def")
+    @NotNull(strDef = "Def")
     public String defaultString;
 
     public Model() {}
diff --git a/gradle.properties b/gradle.properties
index 35b4c26f..15ec98c7 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -20,15 +20,15 @@ org.gradle.daemon=true
 
 VERSION_NAME=2
 VERSION_CODE=2
-GROUP=com.github.satyan
+GROUP=com.github.gyahav
 
 POM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database
-POM_URL=https://github.com/satyan/sugar
-POM_SCM_URL=https://github.com/satyan/sugar
-POM_SCM_CONNECTION=scm:git@github.com:satyan/sugar.git
-POM_SCM_DEV_CONNECTION=scm:git@github.com:satyan/sugar.git
+POM_URL=https://github.com/gyahav/sugar
+POM_SCM_URL=https://github.com/gyahav/sugar
+POM_SCM_CONNECTION=scm:git@github.com:gyahav/sugar.git
+POM_SCM_DEV_CONNECTION=scm:git@github.com:gyahav/sugar.git
 POM_LICENCE_NAME=The Apache Software License, Version 2.0
 POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
 POM_LICENCE_DIST=repo
-POM_DEVELOPER_ID=satyan
+POM_DEVELOPER_ID=gyahav
 POM_DEVELOPER_NAME=Satya Narayan
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index e7794103..b716dafd 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -237,7 +237,15 @@ protected String createTableSQL(Class<?> table) {
                             sb.delete(sb.length() - 5, sb.length());
                         }
                         sb.append(NOT_NULL);
-                        String constraint = column.getAnnotation(NotNull.class).value();
+                        String constraint = "";
+                        switch (columnType) {
+                            case "INTEGER":
+                               constraint =  String.valueOf(column.getAnnotation(NotNull.class).intDef());
+                               break;
+                            case "TEXT":
+                                constraint =  String.valueOf(column.getAnnotation(NotNull.class).strDef());
+                                break;
+                        }
 
                         if(!constraint.isEmpty()) {
                             sb.append(DEFAULT).append(" ").append(constraint);
@@ -256,7 +264,15 @@ protected String createTableSQL(Class<?> table) {
                             sb.delete(sb.length() - 5, sb.length());
                         }
                         sb.append(NOT_NULL);
-                        String constraint = column.getAnnotation(NotNull.class).value();
+                        String constraint = "";
+                        switch (columnType) {
+                            case "INTEGER":
+                                constraint =  String.valueOf(column.getAnnotation(NotNull.class).intDef());
+                                break;
+                            case "TEXT":
+                                constraint =  column.getAnnotation(NotNull.class).strDef();
+                                break;
+                        }
 
                         if(!constraint.isEmpty()) {
                             sb.append(DEFAULT).append(" ").append(constraint);
