diff --git a/dist/sugar-1.3_beta.jar b/dist/sugar-1.3_beta.jar
index ed56de2d..b67161da 100644
Binary files a/dist/sugar-1.3_beta.jar and b/dist/sugar-1.3_beta.jar differ
diff --git a/library/build.properties b/library/build.properties
index 6500e419..ff5c1fe8 100644
--- a/library/build.properties
+++ b/library/build.properties
@@ -1,2 +1,2 @@
 jdk.home.1.6=/Library/Java/Home
-android.home=/Users/satyanarayan/software/android-sdk-macosx/platforms/android-17/android.jar
\ No newline at end of file
+android.home=/Users/ADMIN/Downloads/android-sdk-macosx/platforms/android-17/android.jar
\ No newline at end of file
diff --git a/library/src/com/orm/SugarApp.java b/library/src/com/orm/SugarApp.java
index 956216df..7e277701 100644
--- a/library/src/com/orm/SugarApp.java
+++ b/library/src/com/orm/SugarApp.java
@@ -2,7 +2,7 @@
 
 public class SugarApp extends android.app.Application{
 
-    Database database;
+    private Database database;
     private static SugarApp sugarContext;
 
     public void onCreate(){
@@ -25,4 +25,8 @@ public static SugarApp getSugarContext(){
     public void deleteDatabase(){
         this.database.deleteDatabase();
     }
+
+    protected Database getDatabase() {
+        return database;
+    }
 }
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index 356c5d03..b1baf5cb 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -34,27 +34,27 @@
     public SugarRecord(Context context) {
         this.context = context;
         // this.application = (SugarApp) context.getApplicationContext();
-        this.database = ((SugarApp) context.getApplicationContext()).database;
+        this.database = ((SugarApp) context.getApplicationContext()).getDatabase();
     }
 
     public SugarRecord(){
         this.context = SugarApp.getSugarContext();
-        this.database = SugarApp.getSugarContext().database;
+        this.database = SugarApp.getSugarContext().getDatabase();
     }
 
     public void delete() {
-        SQLiteDatabase db = getSugarContext().database.getDB();
+        SQLiteDatabase db = getSugarContext().getDatabase().getDB();
         db.delete(this.tableName, "Id=?", new String[]{getId().toString()});
     }
 
     public static <T extends SugarRecord<?>> void deleteAll(Class<T> type) {
-        Database db = getSugarContext().database;
+        Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(getTableName(type), null, null);
     }
 
     public static <T extends SugarRecord<?>> void deleteAll(Class<T> type, String whereClause, String... whereArgs ) {
-        Database db = getSugarContext().database;
+        Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(getTableName(type), whereClause, whereArgs);
     }
@@ -66,51 +66,10 @@ public void delete() {
     }
     
     public void save() {
-        SQLiteDatabase sqLiteDatabase = getSugarContext().database.getDB();
+        SQLiteDatabase sqLiteDatabase = getSugarContext().getDatabase().getDB();
         save(sqLiteDatabase);
     }
 
-    @SuppressWarnings("deprecation")
-    public static <T extends SugarRecord<?>> void saveInTx(T... objects ) {
-
-        SQLiteDatabase sqLiteDatabase = getSugarContext().database.getDB();
-
-        try{
-            sqLiteDatabase.beginTransaction();
-            sqLiteDatabase.setLockingEnabled(false);
-            for(T object: objects){
-                object.save(sqLiteDatabase);
-            }
-            sqLiteDatabase.setTransactionSuccessful();
-        }catch (Exception e){
-            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
-        }finally {
-            sqLiteDatabase.endTransaction();
-            sqLiteDatabase.setLockingEnabled(true);
-        }
-    }
-
-    @SuppressWarnings("deprecation")
-    public static <T extends SugarRecord<?>> void saveInTx(Collection<T> objects ) {
-
-        SQLiteDatabase sqLiteDatabase = getSugarContext().database.getDB();
-
-        try{
-            sqLiteDatabase.beginTransaction();
-            sqLiteDatabase.setLockingEnabled(false);
-            for(T object: objects){
-                object.save(sqLiteDatabase);
-            }
-            sqLiteDatabase.setTransactionSuccessful();
-        }catch (Exception e){
-            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
-        }finally {
-            sqLiteDatabase.endTransaction();
-            sqLiteDatabase.setLockingEnabled(true);
-        }
-
-    }
-
     protected void save(SQLiteDatabase db) {
         
         List<Field> columns = getTableFields();
@@ -177,6 +136,47 @@ else if (columnType.equals(byte[].class)) {
         }
     }
 
+    @SuppressWarnings("deprecation")
+    public static <T extends SugarRecord<?>> void saveInTx(T... objects ) {
+
+        SQLiteDatabase sqLiteDatabase = getSugarContext().getDatabase().getDB();
+
+        try{
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for(T object: objects){
+                object.save(sqLiteDatabase);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        }catch (Exception e){
+            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
+        }finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T extends SugarRecord<?>> void saveInTx(Collection<T> objects ) {
+
+        SQLiteDatabase sqLiteDatabase = getSugarContext().getDatabase().getDB();
+
+        try{
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for(T object: objects){
+                object.save(sqLiteDatabase);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        }catch (Exception e){
+            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
+        }finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+
+    }
+
     public static <T extends SugarRecord<?>> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
@@ -194,7 +194,7 @@ else if (columnType.equals(byte[].class)) {
 
     public static <T extends SugarRecord<?>> List<T> findWithQuery(Class<T> type, String query, String... arguments){
 
-        Database db = getSugarContext().database;
+        Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         T entity;
         List<T> toRet = new ArrayList<T>();
@@ -215,13 +215,13 @@ else if (columnType.equals(byte[].class)) {
     }
 
     public static void executeQuery(String query, String... arguments){
-        getSugarContext().database.getDB().execSQL(query, arguments);
+        getSugarContext().getDatabase().getDB().execSQL(query, arguments);
     }
 
     public static <T extends SugarRecord<?>> List<T> find(Class<T> type,
                                                        String whereClause, String[] whereArgs,
                                                        String groupBy, String orderBy, String limit) {
-        Database db = getSugarContext().database;
+        Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         T entity;
         List<T> toRet = new ArrayList<T>();
diff --git a/library/src/com/orm/SugarTransactionHelper.java b/library/src/com/orm/SugarTransactionHelper.java
new file mode 100644
index 00000000..505547df
--- /dev/null
+++ b/library/src/com/orm/SugarTransactionHelper.java
@@ -0,0 +1,29 @@
+package com.orm;
+
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+public class SugarTransactionHelper {
+
+    public static void doInTansaction(SugarTransactionHelper.Callback callback) {
+
+        SQLiteDatabase database = SugarApp.getSugarContext().getDatabase().getDB();
+
+        database.beginTransaction();
+
+        try {
+            Log.d(SugarTransactionHelper.class.getSimpleName(), "callback executing within transaction");
+            callback.manipulateInTransaction();
+            database.setTransactionSuccessful();
+            Log.d(SugarTransactionHelper.class.getSimpleName(), "callback successfully executed within transaction");
+        } catch (Throwable e) {
+            Log.d(SugarTransactionHelper.class.getSimpleName(), "could execute callback within transaction", e);
+        } finally {
+            database.endTransaction();
+        }
+    }
+
+    public static interface Callback {
+        void manipulateInTransaction();
+    }
+}
diff --git a/library/test/com/orm/query/DummyContext.java b/library/test/com/orm/query/DummyContext.java
index 206f6381..cb7c6f4b 100644
--- a/library/test/com/orm/query/DummyContext.java
+++ b/library/test/com/orm/query/DummyContext.java
@@ -4,6 +4,7 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.res.AssetManager;
+import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.database.DatabaseErrorHandler;
 import android.database.sqlite.SQLiteDatabase;
@@ -13,6 +14,8 @@
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
+import android.os.UserHandle;
+import android.view.Display;
 
 import java.io.*;
 
@@ -207,18 +210,33 @@ public void startActivity(Intent intent) {
         //To change body of implemented methods use File | Settings | File Templates.
     }
 
+    @Override
+    public void startActivity(Intent intent, Bundle options) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
 
     @Override
     public void startActivities(Intent[] intents) {
         //To change body of implemented methods use File | Settings | File Templates.
     }
 
+    @Override
+    public void startActivities(Intent[] intents, Bundle options) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
 
     @Override
     public void startIntentSender(IntentSender intentSender, Intent intent, int i, int i1, int i2) throws IntentSender.SendIntentException {
         //To change body of implemented methods use File | Settings | File Templates.
     }
 
+    @Override
+    public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
     @Override
     public void sendBroadcast(Intent intent) {
         //To change body of implemented methods use File | Settings | File Templates.
@@ -239,6 +257,21 @@ public void sendOrderedBroadcast(Intent intent, String s, BroadcastReceiver broa
         //To change body of implemented methods use File | Settings | File Templates.
     }
 
+    @Override
+    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
     @Override
     public void sendStickyBroadcast(Intent intent) {
         //To change body of implemented methods use File | Settings | File Templates.
@@ -254,6 +287,21 @@ public void removeStickyBroadcast(Intent intent) {
         //To change body of implemented methods use File | Settings | File Templates.
     }
 
+    @Override
+    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
     @Override
     public Intent registerReceiver(BroadcastReceiver broadcastReceiver, IntentFilter intentFilter) {
         return null;  //To change body of implemented methods use File | Settings | File Templates.
@@ -383,4 +431,14 @@ public void enforceUriPermission(Uri uri, String s, String s1, int i, int i1, in
     public Context createPackageContext(String s, int i) throws PackageManager.NameNotFoundException {
         return null;  //To change body of implemented methods use File | Settings | File Templates.
     }
+
+    @Override
+    public Context createConfigurationContext(Configuration overrideConfiguration) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Context createDisplayContext(Display display) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
 }
