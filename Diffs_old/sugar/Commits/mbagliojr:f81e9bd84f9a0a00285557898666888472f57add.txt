diff --git a/.travis.yml b/.travis.yml
index 80ca1ced..db407323 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -8,7 +8,7 @@ android:
   components:
     - sys-img-armeabi-v7a-android-23
     - tools
-    - build-tools-23.0.2
+    - build-tools-23.0.3
     - android-23
     - extra-android-m2repository
 before_script:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5c3f700b..7015053d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,9 @@
 # Sugar Releases
 
 ## [Unreleased]
+
+
+## v1.5
 ### Added
 * [#328](https://github.com/satyan/sugar/pull/328) @jedid auto add new columns during database upgrade, fix [#299](https://github.com/satyan/sugar/issues/299) and [#151](https://github.com/satyan/sugar/issues/151)
 * [#389](https://github.com/satyan/sugar/pull/389) @alfmatos MultiUnique DSL to handle MultiColumn Unique Table constraint
diff --git a/README.md b/README.md
index dc12a0ed..013282ee 100644
--- a/README.md
+++ b/README.md
@@ -15,8 +15,7 @@ Let me know what features are important or bugs you encounter and I will do my b
 
 ###For those of you looking to use this DB for offline data storage (caching), Check out [Spice] (http://github.com/mbag102/spice)
 
-
-# Sugar ORM [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master)
+# Sugar ORM [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master) [![Code Triagers Badge](http://www.codetriage.com/satyan/sugar/badges/users.svg)](http://www.codetriage.com/satyan/sugar)
 
 [![Join the chat at https://gitter.im/satyan/sugar](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/satyan/sugar?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
 
@@ -41,7 +40,7 @@ There are four ways to install Sugar:
 This is the preferred way. Simply add:
 
 ```groovy
-compile 'com.github.satyan:sugar:1.4'
+compile 'com.github.satyan:sugar:1.5'
 ```
 
 to your project dependencies and run `gradle build` or `gradle assemble`.
@@ -54,7 +53,7 @@ Declare the dependency in Maven:
 <dependency>
     <groupId>com.github.satyan</groupId>
     <artifactId>sugar</artifactId>
-    <version>1.4</version>
+    <version>1.5</version>
 </dependency>
 ```
 
@@ -137,6 +136,11 @@ Book book = new Book("isbn123", "Title here", "2nd edition")
 book.save();
 ```
 
+or
+```java
+SugarRecord.save(book); // if using the @Table annotation 
+```
+
 ### Load Entity
 ```java
 Book book = Book.findById(Book.class, 1);
@@ -150,12 +154,18 @@ book.edition = "3rd edition";
 book.save(); // updates the previous entry with new values.
 ```
 
+
 ### Delete Entity
 ```java
 Book book = Book.findById(Book.class, 1);
 book.delete();
 ```
 
+or
+```java
+SugarRecord.delete(book); // if using the @Table annotation 
+```
+
 ### Update Entity based on Unique values
 ```java
 Book book = new Book("isbn123", "Title here", "2nd edition")
@@ -168,6 +178,11 @@ sameBook.update();
 book.getId() == sameBook.getId(); // true
 ```
 
+or
+```java
+SugarRecord.update(sameBook); // if using the @Table annotation 
+```
+
 ### Bulk Insert
 ```java
 List<Book> books = new ArrayList<>();
diff --git a/build.gradle b/build.gradle
index f0bca97d..d56ea91c 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,7 +7,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.5.0'
+        classpath 'com.android.tools.build:gradle:2.0.0'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
@@ -35,7 +35,7 @@ subprojects { proj ->
     apply plugin: 'jacoco'
 
     jacoco {
-        version "0.7.1.20151214"
+        version "0.7.1.20160408"
     }
 
     task jacocoTestReport(type: JacocoReport) {
diff --git a/example/build.gradle b/example/build.gradle
index 084b9d2d..db489e93 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -1,7 +1,7 @@
 apply plugin: 'com.android.application'
 android {
     compileSdkVersion 23
-    buildToolsVersion "23.0.2"
+    buildToolsVersion "23.0.3"
 
     defaultConfig {
         applicationId "com.example"
@@ -25,7 +25,7 @@ android {
 
 dependencies {
     compile project (':library')
-    compile 'com.android.support:appcompat-v7:23.1.1'
+    compile 'com.android.support:appcompat-v7:23.3.0'
     testCompile 'org.robolectric:robolectric:3.0'
     testCompile 'junit:junit:4.12'
 }
diff --git a/example/src/main/java/com/example/ClientApp.java b/example/src/main/java/com/example/ClientApp.java
index e546e11d..6637ea26 100644
--- a/example/src/main/java/com/example/ClientApp.java
+++ b/example/src/main/java/com/example/ClientApp.java
@@ -5,6 +5,7 @@
 import com.orm.SugarContext;
 
 public class ClientApp extends Application {
+
     @Override
     public void onCreate() {
         super.onCreate();
diff --git a/gradle.properties b/gradle.properties
index 97b0dbf7..f753d890 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -20,6 +20,7 @@ POM_PACKAGING=aar
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
+org.gradle.daemon=true
 
 VERSION_NAME=2
 VERSION_CODE=2
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 0c71e760..98b2f555 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Apr 10 15:27:10 PDT 2013
+#Fri Apr 08 14:11:13 EDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index 3dbb44d3..06b83a69 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -3,7 +3,7 @@ apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 23
-    buildToolsVersion "23.0.2"
+    buildToolsVersion "23.0.3"
 
     defaultConfig {
         minSdkVersion 9
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index 99955e67..adadbc44 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -1,6 +1,5 @@
 package com.orm;
 
-import android.content.Context;
 import android.database.Cursor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
@@ -11,6 +10,7 @@
 import com.orm.dsl.Relationship;
 import com.orm.dsl.NotNull;
 import com.orm.dsl.Unique;
+import com.orm.util.KeyWordUtil;
 import com.orm.util.MigrationFileParser;
 import com.orm.util.NamingHelper;
 import com.orm.util.NumberComparator;
@@ -28,29 +28,30 @@
 import java.util.List;
 
 import static com.orm.util.ReflectionUtil.getDomainClasses;
+import static com.orm.util.ContextUtil.getAssets;
 
 public class SchemaGenerator {
-
-    private Context context;
-
     public static final String NULL = " NULL";
     public static final String NOT_NULL = " NOT NULL";
     public static final String UNIQUE = " UNIQUE";
     public static final String SUGAR = "Sugar";
 
-    public SchemaGenerator(Context context) {
-        this.context = context;
+    //Prevent instantiation
+    private SchemaGenerator() { }
+
+    public static SchemaGenerator getInstance() {
+        return new SchemaGenerator();
     }
 
     public void createDatabase(SQLiteDatabase sqLiteDatabase) {
-        List<Class> domainClasses = getDomainClasses(context);
+        List<Class> domainClasses = getDomainClasses();
         for (Class domain : domainClasses) {
             createTable(domain, sqLiteDatabase);
         }
     }
 
     public void clearDb(SQLiteDatabase sqLiteDatabase) {
-        List<Class> domainClasses = getDomainClasses(context);
+        List<Class> domainClasses = getDomainClasses();
         for (Class domain : domainClasses) {
             clearTable(domain, sqLiteDatabase);
         }
@@ -58,7 +59,7 @@ public void clearDb(SQLiteDatabase sqLiteDatabase) {
     }
 
     public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
-        List<Class> domainClasses = getDomainClasses(context);
+        List<Class> domainClasses = getDomainClasses();
         String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
 
         for (Class domain : domainClasses) {
@@ -87,7 +88,7 @@ public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
 
 
     public void deleteTables(SQLiteDatabase sqLiteDatabase) {
-        List<Class> tables = getDomainClasses(context);
+        List<Class> tables = getDomainClasses();
         for (Class table : tables) {
             sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + NamingHelper.toSQLName(table));
         }
@@ -97,7 +98,7 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
         boolean isSuccess = false;
 
         try {
-            List<String> files = Arrays.asList(this.context.getAssets().list("sugar_upgrades"));
+            List<String> files = Arrays.asList(getAssets().list("sugar_upgrades"));
             Collections.sort(files, new NumberComparator());
             for (String file : files) {
                 Log.i(SUGAR, "filename : " + file);
@@ -123,7 +124,7 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
 
     private void executeScript(SQLiteDatabase db, String file) {
         try {
-            InputStream is = this.context.getAssets().open("sugar_upgrades/" + file);
+            InputStream is = getAssets().open("sugar_upgrades/" + file);
             BufferedReader reader = new BufferedReader(new InputStreamReader(is));
             StringBuilder sb = new StringBuilder();
             String line;
@@ -184,7 +185,6 @@ private void clearJoinTable(Relationship relationship, SQLiteDatabase sqLiteData
     }
 
     private void addColumns(Class<?> table, SQLiteDatabase sqLiteDatabase) {
-
         List<Field> fields = ReflectionUtil.getTableFields(table);
         String tableName = NamingHelper.toSQLName(table);
         ArrayList<String> presentColumns = getColumnNames(sqLiteDatabase, tableName);
@@ -233,6 +233,11 @@ protected String createTableSQL(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         Log.i(SUGAR, "Create table if not exists");
         List<Field> fields = ReflectionUtil.getTableFields(table);
         String tableName = NamingHelper.toSQLName(table);
+
+        if(KeyWordUtil.isKeyword(tableName)) {
+            Log.i(SUGAR,"ERROR, SQLITE RESERVED WORD USED IN " + tableName);
+        }
+
         StringBuilder sb = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
         sb.append(tableName).append(" ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
 
diff --git a/library/src/main/java/com/orm/SugarApp.java b/library/src/main/java/com/orm/SugarApp.java
index 5140e1ee..cab35ca7 100644
--- a/library/src/main/java/com/orm/SugarApp.java
+++ b/library/src/main/java/com/orm/SugarApp.java
@@ -1,7 +1,5 @@
 package com.orm;
 
-import com.orm.SugarContext;
-
 import android.app.Application;
 
 public class SugarApp extends Application {
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 03dd1658..6fb599a1 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 
+import com.orm.util.ContextUtil;
+
 import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -12,8 +14,8 @@
     private SugarDb sugarDb;
     private Map<Object, Long> entitiesMap;
 
-    private SugarContext(Context context) {
-        this.sugarDb = new SugarDb(context);
+    private SugarContext() {
+        this.sugarDb = SugarDb.getInstance();
         this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Long>());
     }
     
@@ -25,7 +27,8 @@ public static SugarContext getSugarContext() {
     }
 
     public static void init(Context context) {
-        instance = new SugarContext(context);
+        ContextUtil.init(context);
+        instance = new SugarContext();
     }
 
     public static void terminate() {
@@ -33,6 +36,7 @@ public static void terminate() {
             return;
         }
         instance.doTerminate();
+        ContextUtil.terminate();
     }
 
     public void clearDb() {
@@ -51,7 +55,7 @@ private void doTerminate() {
         }
     }
 
-    protected SugarDb getSugarDb() {
+    public SugarDb getSugarDb() {
         return sugarDb;
     }
 
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index 153fc82f..6cc98217 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -1,6 +1,5 @@
 package com.orm;
 
-import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
@@ -8,19 +7,25 @@
 import com.orm.util.ManifestHelper;
 import com.orm.util.SugarCursorFactory;
 
+import static com.orm.util.ContextUtil.getContext;
 import static com.orm.util.ManifestHelper.getDatabaseVersion;
-import static com.orm.util.ManifestHelper.getDebugEnabled;
+import static com.orm.util.ManifestHelper.getDbName;
 
 public class SugarDb extends SQLiteOpenHelper {
+    private static final String LOG_TAG = "Sugar";
 
     private final SchemaGenerator schemaGenerator;
     private SQLiteDatabase sqLiteDatabase;
     private int openedConnections = 0;
 
-    public SugarDb(Context context) {
-        super(context, ManifestHelper.getDatabaseName(context),
-                new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
-        schemaGenerator = new SchemaGenerator(context);
+    //Prevent instantiation
+    private SugarDb() {
+        super(getContext(), getDbName(), new SugarCursorFactory(ManifestHelper.isDebugEnabled()), getDatabaseVersion());
+        schemaGenerator = SchemaGenerator.getInstance();
+    }
+
+    public static SugarDb getInstance() {
+        return new SugarDb();
     }
 
     @Override
@@ -47,17 +52,17 @@ public void clearDb() {
 
     @Override
     public synchronized SQLiteDatabase getReadableDatabase() {
-        Log.d("SUGAR", "getReadableDatabase");
+        Log.d(LOG_TAG, "getReadableDatabase");
         openedConnections++;
         return super.getReadableDatabase();
     }
 
     @Override
     public synchronized void close() {
-        Log.d("SUGAR", "getReadableDatabase");
+        Log.d(LOG_TAG, "getReadableDatabase");
         openedConnections--;
         if(openedConnections == 0) {
-            Log.d("SUGAR", "closing");
+            Log.d(LOG_TAG, "closing");
             super.close();
         }
     }
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index aa86cb1c..eea034f4 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -10,11 +10,11 @@
 
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.ListMultimap;
-
 import com.orm.dsl.Id;
 import com.orm.dsl.Relationship;
 import com.orm.dsl.Table;
 import com.orm.dsl.Unique;
+import com.orm.util.ManifestHelper;
 import com.orm.util.NamingHelper;
 import com.orm.util.QueryBuilder;
 import com.orm.util.ReflectionUtil;
@@ -31,12 +31,11 @@
 import java.util.NoSuchElementException;
 import java.util.Set;
 
-
 import static com.orm.SugarContext.getSugarContext;
 
 public class SugarRecord {
-
     public static final String SUGAR = "Sugar";
+
     private Long id = null;
 
     private static SQLiteDatabase getSugarDataBase() {
@@ -182,13 +181,13 @@ private static SQLiteDatabase getSugarDataBase() {
 
     public static <T> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
         Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
-        return new CursorIterator<T>(type, cursor);
+        return new CursorIterator<>(type, cursor);
     }
 
     public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
         Cursor cursor = getSugarDataBase().query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
                 groupBy, null, orderBy, limit);
-        return new CursorIterator<T>(type, cursor);
+        return new CursorIterator<>(type, cursor);
     }
 
     public static <T> List<T> find(Class<T> type, String whereClause, String... whereArgs) {
@@ -284,7 +283,11 @@ private static void appendClause(StringBuilder s, String name, String clause) {
     }
 
     public static <T> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-        Cursor cursor = getSugarDataBase().query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
+
+        String args[];
+        args = (whereArgs == null) ? null : replaceArgs(whereArgs);
+
+        Cursor cursor = getSugarDataBase().query(NamingHelper.toSQLName(type), null, whereClause, args,
                 groupBy, null, orderBy, limit);
 
         return getEntitiesFromCursor(cursor, type);
@@ -292,7 +295,7 @@ private static void appendClause(StringBuilder s, String name, String clause) {
 
     public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
         T entity;
-        List<T> result = new ArrayList<T>();
+        List<T> result = new ArrayList<>();
         try {
             while (cursor.moveToNext()) {
                 entity = type.getDeclaredConstructor().newInstance();
@@ -308,15 +311,15 @@ private static void appendClause(StringBuilder s, String name, String clause) {
         return result;
     }
 
-    public static <T> long count(Class<?> type) {
+    public static <T> long count(Class<T> type) {
         return count(type, null, null, null, null, null);
     }
 
-    public static <T> long count(Class<?> type, String whereClause, String[] whereArgs) {
+    public static <T> long count(Class<T> type, String whereClause, String[] whereArgs) {
     	return count(type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T> long count(Class<?> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+    public static <T> long count(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
         long result = -1;
         String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
         SQLiteStatement sqliteStatement;
@@ -371,6 +374,21 @@ static void saveJoinTable(SQLiteDatabase db, ContentValues values, String joinTa
 
 
     static long save(SQLiteDatabase db, Object object) {
+
+        Set<SugarRecord> recordsToSave = new HashSet<SugarRecord>();
+        ListMultimap<String, ContentValues> joinTables = ArrayListMultimap.create();
+        ReflectionUtil.getRecordsToSave(object, recordsToSave, joinTables);
+
+        if(recordsToSave != null && !recordsToSave.isEmpty()) {
+            saveInTx(recordsToSave);
+
+            if(joinTables != null) {
+                for(String tableName: joinTables.keySet()) {
+                    saveJoinTableList(getSugarContext().getSugarDb().getDB(), joinTables.get(tableName), tableName);
+                }
+            }
+        }
+
         Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
 
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
@@ -425,7 +443,7 @@ else if (column.getName().equals("id") && idField == null) {
             if (idField != null) {
                 idField.setAccessible(true);
                 try {
-                    idField.set(object, new Long(id));
+                    idField.set(object, id);
                 } catch (IllegalAccessException e) {
                     e.printStackTrace();
                 }
@@ -436,7 +454,9 @@ else if (column.getName().equals("id") && idField == null) {
             ((SugarRecord) object).setId(id);
         }
 
-        Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
+        if (ManifestHelper.isDebugEnabled()) {
+            Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
+        }
 
         return id;
     }
@@ -635,7 +655,7 @@ public Cursor getCursor() {
         }
     }
 
-    @Override
+	@Override
     /**
      * Objects are equal if their IDs are equal and their class type is equal
      */
@@ -650,5 +670,18 @@ public boolean equals(Object object) {
             return false;
         }
     }
-    
+
+    public static String[] replaceArgs(String[] args){
+
+        String [] replace = new String[args.length];
+        for (int i=0; i<args.length; i++){
+
+            replace[i]= (args[i].equals("true")) ? replace[i]="1" : (args[i].equals("false")) ? replace[i]="0" : args[i];
+
+        }
+
+        return replace;
+
+    }
+
 }
diff --git a/library/src/main/java/com/orm/SugarTransactionHelper.java b/library/src/main/java/com/orm/SugarTransactionHelper.java
index 2e0e9011..1dab1b8d 100644
--- a/library/src/main/java/com/orm/SugarTransactionHelper.java
+++ b/library/src/main/java/com/orm/SugarTransactionHelper.java
@@ -4,21 +4,21 @@
 import android.util.Log;
 
 public class SugarTransactionHelper {
+    private static final String LOG_TAG = SugarTransactionHelper.class.getSimpleName();
 
     public static void doInTransaction(Callback callback) {
         SQLiteDatabase database = SugarContext.getSugarContext().getSugarDb().getDB();
         database.beginTransaction();
 
         try {
-            Log.d(SugarTransactionHelper.class.getSimpleName(),
-                    "Callback executing within transaction");
+            Log.d(LOG_TAG, "Callback executing within transaction");
+
             callback.manipulateInTransaction();
             database.setTransactionSuccessful();
-            Log.d(SugarTransactionHelper.class.getSimpleName(),
-                    "Callback successfully executed within transaction");
+
+            Log.d(LOG_TAG, "Callback successfully executed within transaction");
         } catch (Throwable e) {
-            Log.d(SugarTransactionHelper.class.getSimpleName(),
-                    "Could execute callback within transaction", e);
+            Log.d(LOG_TAG, "Could execute callback within transaction", e);
         } finally {
             database.endTransaction();
         }
diff --git a/library/src/main/java/com/orm/query/Select.java b/library/src/main/java/com/orm/query/Select.java
index b7d87bff..411caea1 100644
--- a/library/src/main/java/com/orm/query/Select.java
+++ b/library/src/main/java/com/orm/query/Select.java
@@ -10,6 +10,16 @@
 import java.util.List;
 
 public class Select<T> implements Iterable {
+    private static final String SPACE = " ";
+    private static final String SINGLE_QUOTE = "'";
+    private static final String LEFT_PARENTHESIS = "(";
+    private static final String RIGHT_PARENTHESIS = ")";
+    private static final String SELECT_FROM = "SELECT * FROM ";
+    private static final String WHERE = "WHERE ";
+    private static final String ORDER_BY = "ORDER BY ";
+    private static final String GROUP_BY = "GROUP BY ";
+    private static final String LIMIT = "LIMIT ";
+    private static final String OFFSET = "OFFSET ";
 
     private Class<T> record;
     private String[] arguments;
@@ -18,17 +28,7 @@
     private String groupBy = "";
     private String limit = "";
     private String offset = "";
-    private List<Object> args = new ArrayList<Object>();
-    private static final String SPACE =" ";
-    private static final String SINGLE_QUOTE ="'";
-    private static final String LEFT_PARENTHESIS="(";
-    private static final String RIGHT_PARENTHESIS=")";
-    private static final String SELECT_FROM="SELECT * FROM ";
-    private static final String WHERE="WHERE ";
-    private static final String ORDER_BY ="ORDER BY ";
-    private static final String GROUP_BY ="GROUP BY ";
-    private static final String LIMIT ="LIMIT ";
-    private static final String OFFSET ="OFFSET ";
+    private List<String> args = new ArrayList<>();
     private boolean caseInsensitive;
 
     public Select(Class<T> record) {
@@ -41,7 +41,7 @@ public Select(Class<T> record, boolean caseInsensitive) {
     }
 
     public static <T> Select<T> from(Class<T> record) {
-        return new Select<T>(record);
+        return new Select<>(record);
     }
 
     public static <T> Select<T> caseInsensitiveFrom(Class<T> record) {
@@ -108,10 +108,8 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
                     .append(condition.getProperty())
                     .append(caseInsensitive ? ")" : "")
                     .append(condition.getCheckSymbol())
-                    .append(caseInsensitive ? "LOWER(" : "")
-                    .append("? ")
-                    .append(caseInsensitive ? ")" : "");
-                args.add(condition.getValue());
+                    .append("? ");
+                args.add(condition.getValue().toString());
             }
         }
         
@@ -206,14 +204,8 @@ public String getWhereCond() {
         return convertArgs(args);
     }
 
-    private String[] convertArgs(List<Object> argsList) {
-        String[] argsArray = new String[argsList.size()];
-
-        for (int i = 0; i < argsList.size(); i++) {
-             argsArray[i] = argsList.get(i).toString();
-        }
-
-        return argsArray;
+    private String[] convertArgs(List<String> argsList) {
+        return argsList.toArray(new String[argsList.size()]);
     }
 
     @Override
diff --git a/library/src/main/java/com/orm/util/Collection.java b/library/src/main/java/com/orm/util/Collection.java
deleted file mode 100644
index fe7a7e63..00000000
--- a/library/src/main/java/com/orm/util/Collection.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.orm.util;
-import java.util.*;
-
-public class Collection {
-
-    public static <T> List<T> list(T... args) {
-        return Arrays.asList(args);
-    }
-
-    public static <T> Set<T> set(T... args) {
-        Set<T> result = new HashSet<T>(args.length);
-        result.addAll(Arrays.asList(args));
-        return result;
-    }
-
-    public static <K, V> Map<K, V> map(Entry<? extends K, ? extends V>... entries) {
-        Map<K, V> result = new HashMap<K, V>(entries.length);
-
-        for (Entry<? extends K, ? extends V> entry : entries)
-            if (entry.value != null)
-                result.put(entry.key, entry.value);
-
-        return result;
-    }
-
-    public static <K, V> Entry<K, V> entry(K key, V value) {
-        return new Entry<K, V>(key, value);
-    }
-
-    public static class Entry<K, V> {
-        K key;
-        V value;
-
-        public Entry(K key, V value) {
-            this.key = key;
-            this.value = value;
-        }
-    }
-
-}
diff --git a/library/src/main/java/com/orm/util/ContextUtil.java b/library/src/main/java/com/orm/util/ContextUtil.java
new file mode 100644
index 00000000..3e6eff58
--- /dev/null
+++ b/library/src/main/java/com/orm/util/ContextUtil.java
@@ -0,0 +1,48 @@
+package com.orm.util;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.content.res.AssetManager;
+
+/**
+ * @author jonatan.salas
+ */
+public final class ContextUtil {
+    private static Context ctx;
+
+    //Prevent instantiation
+    private ContextUtil() { }
+
+    public static void init(Context context) {
+        if (null == context) {
+            throw new IllegalArgumentException("context shouldn't be null!");
+        }
+
+        ctx = context;
+    }
+
+    public static void terminate() {
+        ctx = null;
+    }
+
+    public static Context getContext() {
+        return ctx;
+    }
+
+    public static AssetManager getAssets() {
+        return getContext().getAssets();
+    }
+
+    public static PackageManager getPackageManager() {
+        return getContext().getPackageManager();
+    }
+
+    public static String getPackageName() {
+        return getContext().getPackageName();
+    }
+
+    public static SharedPreferences getSharedPreferences(String name, int mode) {
+        return getContext().getSharedPreferences(name, mode);
+    }
+}
diff --git a/library/src/main/java/com/orm/util/KeyWordUtil.java b/library/src/main/java/com/orm/util/KeyWordUtil.java
new file mode 100644
index 00000000..8983e7cf
--- /dev/null
+++ b/library/src/main/java/com/orm/util/KeyWordUtil.java
@@ -0,0 +1,41 @@
+package com.orm.util;
+
+/**
+ * @author jonatan.salas
+ */
+public final class KeyWordUtil {
+
+    private static final String[] KEY_WORDS = new String[] {
+            "", "ABORT", "ACTION", "ADD", "AFTER", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ATTACH",
+            "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", "CASE", "CAST", "CHECK",
+            "COLLATE", "COLUMN", "COMMIT", "CONFLICT", "CONSTRAINT", "CREATE", "CROSS", "CURRENT_DATE",
+            "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE",
+            "DESC", "DETACH", "DISTINCT", "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUSIVE",
+            "EXISTS", "EXPLAIN", "FAIL", "FOR", "FOREIGN", "FROM", "FULL", "GLOB", "GROUP", "HAVING",
+            "IF", "IGNORE", "IMMEDIATE", "IN", "INDEX", "INDEXED", "INITIALLY", "INNER", "INSERT", "INSTEAD",
+            "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "KEY", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL",
+            "NO", "NOT", "NOTNULL", "NULL", "OF", "OFFSET", "ON", "OR", "ORDER", "OUTER", "PLAN", "PRAGMA",
+            "PRIMARY", "QUERY", "RAISE", "RECURSIVE", "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "RENAME",
+            "REPLACE", "RESTRICT", "RIGHT", "ROLLBACK", "ROW", "SAVEPOINT", "SELECT", "SET", "TABLE", "TEMP",
+            "TEMPORARY", "THEN", "TO", "TRANSACTION", "TRIGGER", "UNION", "UNIQUE", "UPDATE", "USING", "VACUUM",
+            "VALUES", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WITH", "WITHOUT"
+    };
+
+    //Prevent instantiation
+    private KeyWordUtil() { }
+
+    public static boolean isKeyword(String word) {
+        if (null == word) {
+            return false;
+        }
+
+        for (String keyWord: KEY_WORDS) {
+            if (keyWord.equals(word)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
+
diff --git a/library/src/main/java/com/orm/util/ManifestHelper.java b/library/src/main/java/com/orm/util/ManifestHelper.java
index 66ed2159..b9c12c9a 100644
--- a/library/src/main/java/com/orm/util/ManifestHelper.java
+++ b/library/src/main/java/com/orm/util/ManifestHelper.java
@@ -1,39 +1,46 @@
 package com.orm.util;
 
-import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.util.Log;
 
+import static com.orm.util.ContextUtil.*;
+
 /**
  * Helper class for accessing properties in the AndroidManifest
  */
-public class ManifestHelper {
+public final class ManifestHelper {
+    private static final String LOG_TAG = "Sugar";
+    private static Boolean debugEnabled = null;
 
     /**
      * Key for the database name meta data.
      */
     public final static String METADATA_DATABASE = "DATABASE";
+
     /**
-     * Key for the database verison meta data.
+     * Key for the database version meta data.
      */
     public final static String METADATA_VERSION = "VERSION";
     public final static String METADATA_DOMAIN_PACKAGE_NAME = "DOMAIN_PACKAGE_NAME";
     public final static String METADATA_QUERY_LOG = "QUERY_LOG";
+
     /**
      * The default name for the database unless specified in the AndroidManifest.
      */
     public final static String DATABASE_DEFAULT_NAME = "Sugar.db";
 
+    //Prevent instantiation
+    private ManifestHelper() { }
+
     /**
      * Grabs the database version from the manifest.
      *
-     * @param context  the {@link Context} of the Android application
      * @return the database version as specified by the {@link #METADATA_VERSION} version or 1 of
      *         not present
      */
-    public static int getDatabaseVersion(Context context) {
-        Integer databaseVersion = getMetaDataInteger(context, METADATA_VERSION);
+    public static int getDatabaseVersion() {
+        Integer databaseVersion = getMetaDataInteger(METADATA_VERSION);
 
         if ((databaseVersion == null) || (databaseVersion == 0)) {
             databaseVersion = 1;
@@ -45,11 +52,10 @@ public static int getDatabaseVersion(Context context) {
     /**
      * Grabs the domain name of the model classes from the manifest. 
      *
-     * @param context  the {@link Context} of the Android application
      * @return the package String that Sugar uses to search for model classes
      */
-    public static String getDomainPackageName(Context context){
-        String domainPackageName = getMetaDataString(context, METADATA_DOMAIN_PACKAGE_NAME);
+    public static String getDomainPackageName() {
+        String domainPackageName = getMetaDataString(METADATA_DOMAIN_PACKAGE_NAME);
 
         if (domainPackageName == null) {
             domainPackageName = "";
@@ -61,12 +67,11 @@ public static String getDomainPackageName(Context context){
     /**
      * Grabs the name of the database file specified in the manifest.
      *
-     * @param context  the {@link Context} of the Android application
      * @return the value for the {@value #METADATA_DATABASE} meta data in the AndroidManifest or
      *         {@link #DATABASE_DEFAULT_NAME} if not present
      */
-    public static String getDatabaseName(Context context) {
-        String databaseName = getMetaDataString(context, METADATA_DATABASE);
+    public static String getDatabaseName() {
+        String databaseName = getMetaDataString(METADATA_DATABASE);
 
         if (databaseName == null) {
             databaseName = DATABASE_DEFAULT_NAME;
@@ -75,59 +80,58 @@ public static String getDatabaseName(Context context) {
         return databaseName;
     }
 
+    public static String getDbName() {
+        return getDatabaseName();
+    }
+
     /**
      * Grabs the debug flag from the manifest.
      *
-     * @param context  the {@link Context} of the Android application
      * @return true if the debug flag is enabled
      */
-    public static boolean getDebugEnabled(Context context) {
-        return getMetaDataBoolean(context, METADATA_QUERY_LOG);
+    public static boolean isDebugEnabled() {
+        return (null == debugEnabled) ? debugEnabled = getMetaDataBoolean(METADATA_QUERY_LOG) : debugEnabled;
     }
 
-    private static String getMetaDataString(Context context, String name) {
+    private static String getMetaDataString(String name) {
+        PackageManager pm = getPackageManager();
         String value = null;
 
-        PackageManager pm = context.getPackageManager();
         try {
-            ApplicationInfo ai = pm.getApplicationInfo(context.getPackageName(),
-                    PackageManager.GET_META_DATA);
+            ApplicationInfo ai = pm.getApplicationInfo(getPackageName(), PackageManager.GET_META_DATA);
             value = ai.metaData.getString(name);
         } catch (Exception e) {
-            Log.d("sugar", "Couldn't find config value: " + name);
+            Log.d(LOG_TAG, "Couldn't find config value: " + name);
         }
 
         return value;
     }
 
-    private static Integer getMetaDataInteger(Context context, String name) {
+    private static Integer getMetaDataInteger(String name) {
+        PackageManager pm = getPackageManager();
         Integer value = null;
 
-        PackageManager pm = context.getPackageManager();
         try {
-            ApplicationInfo ai = pm.getApplicationInfo(context.getPackageName(),
-                    PackageManager.GET_META_DATA);
+            ApplicationInfo ai = pm.getApplicationInfo(getPackageName(), PackageManager.GET_META_DATA);
             value = ai.metaData.getInt(name);
         } catch (Exception e) {
-            Log.d("sugar", "Couldn't find config value: " + name);
+            Log.d(LOG_TAG, "Couldn't find config value: " + name);
         }
 
         return value;
     }
 
-    private static Boolean getMetaDataBoolean(Context context, String name) {
+    private static Boolean getMetaDataBoolean(String name) {
+        PackageManager pm = getPackageManager();
         Boolean value = false;
 
-        PackageManager pm = context.getPackageManager();
         try {
-            ApplicationInfo ai = pm.getApplicationInfo(context.getPackageName(),
-                    PackageManager.GET_META_DATA);
+            ApplicationInfo ai = pm.getApplicationInfo(getPackageName(), PackageManager.GET_META_DATA);
             value = ai.metaData.getBoolean(name);
         } catch (Exception e) {
-            Log.d("sugar", "Couldn't find config value: " + name);
+            Log.d(LOG_TAG, "Couldn't find config value: " + name);
         }
 
         return value;
     }
-
 }
diff --git a/library/src/main/java/com/orm/util/MultiDexHelper.java b/library/src/main/java/com/orm/util/MultiDexHelper.java
index 87f7fb3a..c074eeee 100644
--- a/library/src/main/java/com/orm/util/MultiDexHelper.java
+++ b/library/src/main/java/com/orm/util/MultiDexHelper.java
@@ -14,48 +14,56 @@
 
 import dalvik.system.DexFile;
 
+import static com.orm.util.ContextUtil.getSharedPreferences;
+import static com.orm.util.ContextUtil.getPackageManager;
+import static com.orm.util.ContextUtil.getPackageName;
+
 /**
  * Created by xudshen@hotmail.com on 14/11/13.
  */
-
 //http://stackoverflow.com/a/26892658
 public class MultiDexHelper {
     private static final String EXTRACTED_NAME_EXT = ".classes";
     private static final String EXTRACTED_SUFFIX = ".zip";
-
-    private static final String SECONDARY_FOLDER_NAME = "code_cache" + File.separator +
-            "secondary-dexes";
-
+    private static final String INSTANT_RUN_DEX_DIR_PATH = "files/instant-run/dex/";
+    private static final String SECONDARY_FOLDER_NAME = "code_cache" + File.separator + "secondary-dexes";
     private static final String PREFS_FILE = "multidex.version";
     private static final String KEY_DEX_NUMBER = "dex.number";
 
-    private static SharedPreferences getMultiDexPreferences(Context context) {
-        return context.getSharedPreferences(PREFS_FILE,
-                Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB
-                        ? Context.MODE_PRIVATE
-                        : Context.MODE_PRIVATE | Context.MODE_MULTI_PROCESS);
+    private static SharedPreferences getMultiDexPreferences() {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
+            return getSharedPreferences(PREFS_FILE, Context.MODE_PRIVATE);
+        } else {
+            return getSharedPreferences(PREFS_FILE, Context.MODE_MULTI_PROCESS);
+        }
     }
 
     /**
      * get all the dex path
      *
-     * @param context the application context
-     * @return all the dex path
+     * @return all the dex path, including the ones in the newly added instant-run folder
      * @throws PackageManager.NameNotFoundException
      * @throws IOException
      */
-    public static List<String> getSourcePaths(Context context) throws PackageManager.NameNotFoundException, IOException {
-        ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), 0);
+    public static List<String> getSourcePaths() throws PackageManager.NameNotFoundException, IOException {
+        ApplicationInfo applicationInfo = getPackageManager().getApplicationInfo(getPackageName(), 0);
         File sourceApk = new File(applicationInfo.sourceDir);
         File dexDir = new File(applicationInfo.dataDir, SECONDARY_FOLDER_NAME);
+        File instantRunDir = new File(applicationInfo.dataDir, INSTANT_RUN_DEX_DIR_PATH); //default instant-run dir
 
-        List<String> sourcePaths = new ArrayList<String>();
+        List<String> sourcePaths = new ArrayList<>();
         sourcePaths.add(applicationInfo.sourceDir); //add the default apk path
 
+        if (instantRunDir.exists()) { //check if app using instant run
+            for(final File dexFile : instantRunDir.listFiles()) { //add all sources from instan-run
+                sourcePaths.add(dexFile.getAbsolutePath());
+            }
+        }
+
         //the prefix of extracted file, ie: test.classes
         String extractedFilePrefix = sourceApk.getName() + EXTRACTED_NAME_EXT;
         //the total dex numbers
-        int totalDexNumber = getMultiDexPreferences(context).getInt(KEY_DEX_NUMBER, 1);
+        int totalDexNumber = getMultiDexPreferences().getInt(KEY_DEX_NUMBER, 1);
 
         for (int secondaryNumber = 2; secondaryNumber <= totalDexNumber; secondaryNumber++) {
             //for each dex file, ie: test.classes2.zip, test.classes3.zip...
@@ -73,14 +81,13 @@ private static SharedPreferences getMultiDexPreferences(Context context) {
     /**
      * get all the classes name in "classes.dex", "classes2.dex", ....
      *
-     * @param context the application context
      * @return all the classes name
      * @throws PackageManager.NameNotFoundException
      * @throws IOException
      */
-    public static List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
-        List<String> classNames = new ArrayList<String>();
-        for (String path : getSourcePaths(context)) {
+    public static List<String> getAllClasses() throws PackageManager.NameNotFoundException, IOException {
+        List<String> classNames = new ArrayList<>();
+        for (String path : getSourcePaths()) {
             try {
                 DexFile dexfile;
                 if (path.endsWith(EXTRACTED_SUFFIX)) {
@@ -94,10 +101,9 @@ private static SharedPreferences getMultiDexPreferences(Context context) {
                     classNames.add(dexEntries.nextElement());
                 }
             } catch (IOException e) {
-                throw new IOException("Error at loading dex file '" +
-                        path + "'");
+                throw new IOException("Error at loading dex file '" + path + "'");
             }
         }
         return classNames;
     }
-}
\ No newline at end of file
+}
diff --git a/library/src/main/java/com/orm/util/NamingHelper.java b/library/src/main/java/com/orm/util/NamingHelper.java
index 8bdd2475..6c3ff95c 100644
--- a/library/src/main/java/com/orm/util/NamingHelper.java
+++ b/library/src/main/java/com/orm/util/NamingHelper.java
@@ -69,7 +69,7 @@ public static String toSQLName(Field field) {
     /**
      * Maps a Java Class to the name of the class.
      *
-     * @param table  the generic {@link Class<T>} that defines a database table
+     * @param table  the generic {@link java.lang.Class} that defines a database table
      * @return if the given class is annotated with {@link com.orm.dsl.Table} then the value for
      *         {@link com.orm.dsl.Table#name()} will be returned. Else, the class' simple name will 
      *         be converted from CamelCase to UNDER_SCORE notation
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 94e5797c..74a9fe43 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
 import com.google.common.collect.ListMultimap;
@@ -16,21 +15,21 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.lang.Exception;
-import java.lang.Object;
-import java.lang.RuntimeException;
-import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.math.BigDecimal;
 import java.net.URL;
 import java.sql.Timestamp;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Collection;
-import java.util.HashSet;
-
-import dalvik.system.DexFile;
+import java.util.Collections;
+import java.util.Date;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 public class ReflectionUtil {
 
@@ -157,11 +156,11 @@
         if (fieldList != null) return fieldList;
 
         Log.d("Sugar", "Fetching properties");
-        List<Field> typeFields = new ArrayList<Field>();
+        List<Field> typeFields = new ArrayList<>();
 
         getAllFields(typeFields, table);
 
-        List<Field> toStore = new ArrayList<Field>();
+        List<Field> toStore = new ArrayList<>();
         for (Field field : typeFields) {
             if (!field.isAnnotationPresent(Ignore.class) && !Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
                 toStore.add(field);
@@ -360,7 +359,7 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
 
             if (colName.equalsIgnoreCase("id") || field.isAnnotationPresent(Id.class)) {
                 long cid = cursor.getLong(columnIndex);
-                field.set(object, Long.valueOf(cid));
+                field.set(object, cid);
             } else if (fieldType.equals(long.class) || fieldType.equals(Long.class)) {
                 field.set(object,
                         cursor.getLong(columnIndex));
@@ -414,22 +413,18 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 }
             } else
                 Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + field.getType().getName() + ")");
-        } catch (IllegalArgumentException e) {
-            Log.e("field set error", e.getMessage());
-        } catch (IllegalAccessException e) {
+        } catch (IllegalArgumentException | IllegalAccessException e) {
             Log.e("field set error", e.getMessage());
         }
     }
 
     private static Field getDeepField(String fieldName, Class<?> type) throws NoSuchFieldException {
         try {
-            Field field = type.getDeclaredField(fieldName);
-            return field;
+            return type.getDeclaredField(fieldName);
         } catch (NoSuchFieldException e) {
             Class superclass = type.getSuperclass();
             if (superclass != null) {
-                Field field = getDeepField(fieldName, superclass);
-                return field;
+                return getDeepField(fieldName, superclass);
             } else {
                 throw e;
             }
@@ -442,38 +437,30 @@ public static void setFieldValueForId(Object object, Long value) {
             Field field = getDeepField("id", object.getClass());
             field.setAccessible(true);
             field.set(object, value);
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        } catch (NoSuchFieldException e) {
+        } catch (Exception e) {
             e.printStackTrace();
         }
     }*/
 
-    public static List<Class> getDomainClasses(Context context) {
-        List<Class> domainClasses = new ArrayList<Class>();
+    public static List<Class> getDomainClasses() {
+        List<Class> domainClasses = new ArrayList<>();
         try {
-            for (String className : getAllClasses(context)) {
-                Class domainClass = getDomainClass(className, context);
+            for (String className : getAllClasses()) {
+                Class domainClass = getDomainClass(className);
                 if (domainClass != null) domainClasses.add(domainClass);
             }
-        } catch (IOException e) {
-            if(e != null && e.getMessage() != null) {
-                Log.e("Sugar", e.getMessage());
-            }
-        } catch (PackageManager.NameNotFoundException e) {
-            if(e != null && e.getMessage() != null) {
-                Log.e("Sugar", e.getMessage());
-            }
+        } catch (IOException | PackageManager.NameNotFoundException  e) {
+            Log.e("Sugar", e.getMessage());
         }
 
         return domainClasses;
     }
 
 
-    private static Class getDomainClass(String className, Context context) {
+    private static Class getDomainClass(String className) {
         Class<?> discoveredClass = null;
         try {
-            discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
+            discoveredClass = Class.forName(className, true, Thread.currentThread().getContextClassLoader());
         } catch (Throwable e) {
             String error = (e.getMessage() == null) ? "getDomainClass " + className + " error" : e.getMessage();
             Log.e("Sugar", error);
@@ -494,23 +481,19 @@ private static Class getDomainClass(String className, Context context) {
     }
 
 
-    private static List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
-        String packageName = ManifestHelper.getDomainPackageName(context);
-        String path = getSourcePath(context);
-        List<String> classNames = new ArrayList<String>();
-        DexFile dexfile = null;
+    private static List<String> getAllClasses() throws PackageManager.NameNotFoundException, IOException {
+        String packageName = ManifestHelper.getDomainPackageName();
+        List<String> classNames = new ArrayList<>();
         try {
-            dexfile = new DexFile(path);
-            Enumeration<String> dexEntries = dexfile.entries();
-            while (dexEntries.hasMoreElements()) {
-                String className = dexEntries.nextElement();
-                if (className.startsWith(packageName)) classNames.add(className);
+            List<String> allClasses = MultiDexHelper.getAllClasses();
+            for (String classString : allClasses) {
+                if (classString.startsWith(packageName)) classNames.add(classString);
             }
         } catch (NullPointerException e) {
             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
             Enumeration<URL> urls = classLoader.getResources("");
             while (urls.hasMoreElements()) {
-                List<String> fileNames = new ArrayList<String>();
+                List<String> fileNames = new ArrayList<>();
                 String classDirectoryName = urls.nextElement().getFile();
                 if (classDirectoryName.contains("bin") || classDirectoryName.contains("classes")
                         || classDirectoryName.contains("retrolambda")) {
@@ -523,9 +506,10 @@ private static Class getDomainClass(String className, Context context) {
                     }
                 }
             }
-        } finally {
-//            if (null != dexfile) dexfile.close();
         }
+//        } finally {
+//            if (null != dexfile) dexfile.close();
+//        }
 
         return classNames;
     }
diff --git a/library/src/main/java/com/orm/util/SugarConfig.java b/library/src/main/java/com/orm/util/SugarConfig.java
index c8cf3868..9328c82f 100644
--- a/library/src/main/java/com/orm/util/SugarConfig.java
+++ b/library/src/main/java/com/orm/util/SugarConfig.java
@@ -6,10 +6,9 @@
 import java.util.List;
 import java.util.Map;
 
-
 public class SugarConfig {
 
-    static Map<Class<?>, List<Field>> fields = new HashMap<Class<?>, List<Field>>();
+    static Map<Class<?>, List<Field>> fields = new HashMap<>();
 
     public static void setFields(Class<?> clazz, List<Field> fieldz) {
          fields.put(clazz, fieldz);
@@ -26,7 +25,7 @@ public static void setFields(Class<?> clazz, List<Field> fieldz) {
 
     public static void clearCache() {
         fields.clear();
-        fields = new HashMap<Class<?>, List<Field>>();
+        fields = new HashMap<>();
     }
 
 }
diff --git a/library/src/main/java/com/orm/util/SugarCursor.java b/library/src/main/java/com/orm/util/SugarCursor.java
index e326f49b..d058c5c1 100644
--- a/library/src/main/java/com/orm/util/SugarCursor.java
+++ b/library/src/main/java/com/orm/util/SugarCursor.java
@@ -4,6 +4,7 @@
 import android.database.CursorWrapper;
 
 public class SugarCursor extends CursorWrapper {
+
     public SugarCursor(Cursor cursor) {
         super(cursor);
     }
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/library/src/main/java/com/orm/util/SugarCursorFactory.java
index 12706516..3274fccc 100644
--- a/library/src/main/java/com/orm/util/SugarCursorFactory.java
+++ b/library/src/main/java/com/orm/util/SugarCursorFactory.java
@@ -16,7 +16,6 @@ public SugarCursorFactory() {
     }
 
     public SugarCursorFactory(boolean debugEnabled) {
-
         this.debugEnabled = debugEnabled;
     }
 
diff --git a/library/src/test/java/com/orm/SchemaGeneratorTest.java b/library/src/test/java/com/orm/SchemaGeneratorTest.java
index ddef0e3f..de9615b9 100644
--- a/library/src/test/java/com/orm/SchemaGeneratorTest.java
+++ b/library/src/test/java/com/orm/SchemaGeneratorTest.java
@@ -1,6 +1,5 @@
 package com.orm;
 
-import com.orm.dsl.Table;
 import com.orm.models.EmptyModel;
 import com.orm.models.IntUniqueModel;
 import com.orm.models.MultiColumnUniqueModel;
@@ -8,6 +7,7 @@
 import com.orm.models.StringFieldExtendedModel;
 import com.orm.models.StringFieldExtendedModelAnnotatedColumn;
 import com.orm.query.DummyContext;
+import com.orm.util.ContextUtil;
 import com.orm.util.NamingHelper;
 
 import org.junit.Test;
@@ -15,10 +15,12 @@
 import static junit.framework.Assert.assertEquals;
 
 public class SchemaGeneratorTest {
+
     @Test
     public void testEmptyTableCreation() throws Exception {
-        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
-        String createSQL = schemaGenerator.createTableSQL(EmptyModel.class);
+        ContextUtil.init(new DummyContext());
+        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+        String createSQL = schemaGenerator.createTableSQL(EmptyModel.class, SugarDb.getInstance().getWritableDatabase());
         assertEquals(
                 "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(EmptyModel.class) +
                     " ( ID INTEGER PRIMARY KEY AUTOINCREMENT  ) ",
@@ -27,15 +29,16 @@ public void testEmptyTableCreation() throws Exception {
 
     @Test
     public void testSimpleColumnTableCreation() throws Exception {
-        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
-        String createSQL = schemaGenerator.createTableSQL(StringFieldExtendedModel.class);
+        ContextUtil.init(new DummyContext());
+        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+        String createSQL = schemaGenerator.createTableSQL(StringFieldExtendedModel.class, SugarDb.getInstance().getWritableDatabase());
         assertEquals(
                 "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(StringFieldExtendedModel.class) +
                         " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
                         "NAME TEXT ) ",
                 createSQL);
 
-        String createSQL2 = schemaGenerator.createTableSQL(StringFieldAnnotatedModel.class);
+        String createSQL2 = schemaGenerator.createTableSQL(StringFieldAnnotatedModel.class, SugarDb.getInstance().getWritableDatabase());
 
         assertEquals(
                 "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(StringFieldAnnotatedModel.class) +
@@ -43,7 +46,7 @@ public void testSimpleColumnTableCreation() throws Exception {
                         "NAME TEXT ) ",
                 createSQL2);
 
-        String createSQL3 = schemaGenerator.createTableSQL(StringFieldExtendedModelAnnotatedColumn.class);
+        String createSQL3 = schemaGenerator.createTableSQL(StringFieldExtendedModelAnnotatedColumn.class, SugarDb.getInstance().getWritableDatabase());
 
         assertEquals(
                 "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(StringFieldExtendedModelAnnotatedColumn.class) +
@@ -54,8 +57,9 @@ public void testSimpleColumnTableCreation() throws Exception {
 
     @Test
     public void testUniqueTableCreation() {
-        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
-        String createSQL = schemaGenerator.createTableSQL(IntUniqueModel.class);
+        ContextUtil.init(new DummyContext());
+        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+        String createSQL = schemaGenerator.createTableSQL(IntUniqueModel.class, SugarDb.getInstance().getWritableDatabase());
         assertEquals(
                 "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(IntUniqueModel.class) +
                         " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
@@ -65,8 +69,9 @@ public void testUniqueTableCreation() {
 
     @Test
     public void testMultiColumnUniqueTableCreation() {
-        SchemaGenerator schemaGenerator = new SchemaGenerator(new DummyContext());
-        String createSQL = schemaGenerator.createTableSQL(MultiColumnUniqueModel.class);
+        ContextUtil.init(new DummyContext());
+        SchemaGenerator schemaGenerator = SchemaGenerator.getInstance();
+        String createSQL = schemaGenerator.createTableSQL(MultiColumnUniqueModel.class, SugarDb.getInstance().getWritableDatabase());
         assertEquals(
                 "CREATE TABLE IF NOT EXISTS " + NamingHelper.toSQLName(MultiColumnUniqueModel.class) +
                         " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , " +
diff --git a/library/src/test/java/com/orm/models/EmptyModel.java b/library/src/test/java/com/orm/models/EmptyModel.java
index 8efb9dd4..73459b51 100644
--- a/library/src/test/java/com/orm/models/EmptyModel.java
+++ b/library/src/test/java/com/orm/models/EmptyModel.java
@@ -6,7 +6,5 @@
  * Created by sibelius on 02/12/15.
  */
 public class EmptyModel extends SugarRecord {
-    public EmptyModel() {
-
-    }
+    public EmptyModel() { }
 }
diff --git a/library/src/test/java/com/orm/models/IntUniqueModel.java b/library/src/test/java/com/orm/models/IntUniqueModel.java
index e73e8968..d7b88d3f 100644
--- a/library/src/test/java/com/orm/models/IntUniqueModel.java
+++ b/library/src/test/java/com/orm/models/IntUniqueModel.java
@@ -7,12 +7,11 @@
  * Created by sibelius on 02/12/15.
  */
 public class IntUniqueModel extends SugarRecord {
+
     @Unique
     private int value;
 
-    public IntUniqueModel() {
-
-    }
+    public IntUniqueModel() { }
 
     public IntUniqueModel(int value) {
         this.value = value;
diff --git a/library/src/test/java/com/orm/models/MultiColumnUniqueModel.java b/library/src/test/java/com/orm/models/MultiColumnUniqueModel.java
index 73ab5d8e..eea5ec55 100644
--- a/library/src/test/java/com/orm/models/MultiColumnUniqueModel.java
+++ b/library/src/test/java/com/orm/models/MultiColumnUniqueModel.java
@@ -13,8 +13,7 @@
     private int a;
     private int b;
 
-    public MultiColumnUniqueModel() {
-    }
+    public MultiColumnUniqueModel() { }
 
     public MultiColumnUniqueModel(int a, int b) {
         this.a = a;
diff --git a/library/src/test/java/com/orm/models/StringFieldAnnotatedModel.java b/library/src/test/java/com/orm/models/StringFieldAnnotatedModel.java
index 1203db01..2f732b42 100644
--- a/library/src/test/java/com/orm/models/StringFieldAnnotatedModel.java
+++ b/library/src/test/java/com/orm/models/StringFieldAnnotatedModel.java
@@ -11,9 +11,7 @@
 public class StringFieldAnnotatedModel extends SugarRecord {
     public String name;
 
-    public StringFieldAnnotatedModel() {
-
-    }
+    public StringFieldAnnotatedModel() { }
 
     public StringFieldAnnotatedModel(String name) {
         this.name = name;
diff --git a/library/src/test/java/com/orm/models/StringFieldExtendedModel.java b/library/src/test/java/com/orm/models/StringFieldExtendedModel.java
index ee781632..2aff85d7 100644
--- a/library/src/test/java/com/orm/models/StringFieldExtendedModel.java
+++ b/library/src/test/java/com/orm/models/StringFieldExtendedModel.java
@@ -8,9 +8,7 @@
 public class StringFieldExtendedModel extends SugarRecord {
     public String name;
 
-    public StringFieldExtendedModel() {
-
-    }
+    public StringFieldExtendedModel() { }
 
     public StringFieldExtendedModel(String name) {
         this.name = name;
diff --git a/library/src/test/java/com/orm/models/StringFieldExtendedModelAnnotatedColumn.java b/library/src/test/java/com/orm/models/StringFieldExtendedModelAnnotatedColumn.java
index 9f2b43cd..b2117926 100644
--- a/library/src/test/java/com/orm/models/StringFieldExtendedModelAnnotatedColumn.java
+++ b/library/src/test/java/com/orm/models/StringFieldExtendedModelAnnotatedColumn.java
@@ -10,9 +10,7 @@
     @Column(name="anyName")
     public String name;
 
-    public StringFieldExtendedModelAnnotatedColumn() {
-
-    }
+    public StringFieldExtendedModelAnnotatedColumn() { }
 
     public StringFieldExtendedModelAnnotatedColumn(String name) {
         this.name = name;
diff --git a/library/src/test/java/com/orm/query/QueryBuilderTests.java b/library/src/test/java/com/orm/query/QueryBuilderTests.java
index 96e3c79f..d43ca5ee 100644
--- a/library/src/test/java/com/orm/query/QueryBuilderTests.java
+++ b/library/src/test/java/com/orm/query/QueryBuilderTests.java
@@ -7,6 +7,7 @@
 import static junit.framework.Assert.assertEquals;
 
 public class QueryBuilderTests {
+
     @Test(expected=RuntimeException.class)
     public void noArgumentsTest() {
         QueryBuilder.generatePlaceholders(0);
diff --git a/library/src/test/java/com/orm/query/TestRecord.java b/library/src/test/java/com/orm/query/TestRecord.java
index 50997205..383a5234 100644
--- a/library/src/test/java/com/orm/query/TestRecord.java
+++ b/library/src/test/java/com/orm/query/TestRecord.java
@@ -1,13 +1,12 @@
 package com.orm.query;
 
-import android.content.Context;
 import com.orm.SugarRecord;
 
 public class TestRecord extends SugarRecord {
 
     private String name;
 
-    public TestRecord(Context context) {
+    public TestRecord() {
         super();
     }
 }
diff --git a/library/src/test/java/com/orm/util/ContextUtilTest.java b/library/src/test/java/com/orm/util/ContextUtilTest.java
new file mode 100644
index 00000000..fc627076
--- /dev/null
+++ b/library/src/test/java/com/orm/util/ContextUtilTest.java
@@ -0,0 +1,59 @@
+package com.orm.util;
+
+import android.content.Context;
+
+import com.orm.query.DummyContext;
+
+import org.junit.Test;
+
+
+import static junit.framework.Assert.assertNotNull;
+import static junit.framework.Assert.assertNull;
+import static com.orm.util.ContextUtil.*;
+
+/**
+ * @author jonatan.salas
+ */
+public class ContextUtilTest {
+
+    public void initContextUtil() {
+        init(new DummyContext());
+    }
+
+    @Test
+    public void testInitContext() {
+        initContextUtil();
+        assertNotNull(getContext());
+    }
+
+    @Test
+    public void testGetAssets() {
+        initContextUtil();
+        assertNull(getAssets());
+    }
+
+    @Test
+    public void testGetPackageManager() {
+        initContextUtil();
+        assertNull(getPackageManager());
+    }
+
+    @Test
+    public void testGetPackageName() {
+        initContextUtil();
+        assertNull(getPackageName());
+    }
+
+    @Test
+    public void testGetPreferences() {
+        initContextUtil();
+        assertNull(getSharedPreferences("lala", Context.MODE_PRIVATE));
+    }
+
+    @Test
+    public void testTerminateContext() {
+        initContextUtil();
+        terminate();
+        assertNull(getContext());
+    }
+}
diff --git a/library/src/test/java/com/orm/util/KeyWordUtilTest.java b/library/src/test/java/com/orm/util/KeyWordUtilTest.java
new file mode 100644
index 00000000..0f132e3a
--- /dev/null
+++ b/library/src/test/java/com/orm/util/KeyWordUtilTest.java
@@ -0,0 +1,29 @@
+package com.orm.util;
+
+import org.junit.Test;
+
+import static junit.framework.Assert.assertEquals;
+
+/**
+ * @author jonatan.salas
+ */
+public class KeyWordUtilTest {
+
+    @Test
+    public void testKeyWord() {
+        assertEquals(true, KeyWordUtil.isKeyword("SELECT"));
+        assertEquals(true, KeyWordUtil.isKeyword("TRANSACTION"));
+        assertEquals(true, KeyWordUtil.isKeyword("MATCH"));
+        assertEquals(true, KeyWordUtil.isKeyword("AS"));
+        assertEquals(true, KeyWordUtil.isKeyword("NOTNULL"));
+        assertEquals(true, KeyWordUtil.isKeyword("NOT"));
+        assertEquals(false, KeyWordUtil.isKeyword("PERSONS"));
+        assertEquals(false, KeyWordUtil.isKeyword("NAME"));
+        assertEquals(false, KeyWordUtil.isKeyword("LOCATION"));
+    }
+
+    @Test
+    public void testNullKeyword() {
+        assertEquals(false, KeyWordUtil.isKeyword(null));
+    }
+}
diff --git a/library/src/test/java/com/orm/util/ManifestHelperTest.java b/library/src/test/java/com/orm/util/ManifestHelperTest.java
new file mode 100644
index 00000000..2ec32a47
--- /dev/null
+++ b/library/src/test/java/com/orm/util/ManifestHelperTest.java
@@ -0,0 +1,49 @@
+package com.orm.util;
+
+import com.orm.query.DummyContext;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static com.orm.util.ManifestHelper.*;
+import static com.orm.util.ContextUtil.init;
+
+/**
+ * @author jonatan.salas
+ */
+public class ManifestHelperTest {
+
+    public void initContext() {
+        init(new DummyContext());
+    }
+
+    @Test
+    public void testGetDbName() {
+        initContext();
+        assertEquals(DATABASE_DEFAULT_NAME, getDatabaseName());
+    }
+
+    @Test
+    public void testGetDatabaseName() {
+        initContext();
+        assertEquals(DATABASE_DEFAULT_NAME, getDatabaseName());
+    }
+
+    @Test
+    public void testGetDatabaseVersion() {
+        initContext();
+        assertEquals(1, getDatabaseVersion());
+    }
+
+    @Test
+    public void testGetDomainPackageName() {
+        initContext();
+        assertNotNull(getDomainPackageName());
+    }
+
+    @Test
+    public void testGetDebugEnabled() {
+        initContext();
+        assertEquals(false, isDebugEnabled());
+    }
+}
diff --git a/library/src/test/java/com/orm/util/MigrationFileParserTest.java b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
index 536af4cb..72b9f9ca 100644
--- a/library/src/test/java/com/orm/util/MigrationFileParserTest.java
+++ b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
@@ -1,20 +1,15 @@
 package com.orm.util;
 
-import com.orm.util.MigrationFileParser;
-
 import org.junit.Test;
-import org.junit.Before;
 
 import java.lang.String;
 
 import static junit.framework.Assert.assertEquals;
 
-public class MigrationFileParserTest{
-    MigrationFileParser emptyFile;
+public class MigrationFileParserTest {
 
     @Test
-    public void testSingleLineStatement()
-    {
+    public void testSingleLineStatement() {
         MigrationFileParser singleLineComment = new MigrationFileParser("insert into table--comment");
 
         String statements[] = singleLineComment.getStatements();
@@ -27,8 +22,9 @@ public void testSingleLineStatement()
         assertEquals("Testing single line statement size",1,statements.length);
         assertEquals("Testing single line statement content","insert into table",statements[0]);
     }
+
     @Test
-    public void testMultiLineComment(){
+    public void testMultiLineComment() {
         MigrationFileParser multiLineComment = new MigrationFileParser("insert into table /**comment \n new line 2 \n new line 3 */hello");
 
         String statements[] = multiLineComment.getStatements();
@@ -37,7 +33,7 @@ public void testMultiLineComment(){
     }
 
     @Test
-    public void testMixedComment(){
+    public void testMixedComment() {
         MigrationFileParser mixedComment = new MigrationFileParser("insert into/*multiline\n **comment*/--comment");
 
         String statements[] = mixedComment.getStatements();
