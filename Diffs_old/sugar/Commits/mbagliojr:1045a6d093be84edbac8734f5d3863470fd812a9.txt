diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000..8cfcff0b
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,45 @@
+.DS_Store
+
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# generated files
+bin/
+gen/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Eclipse project files
+.classpath
+.project
+
+*.a
+*.dylib
+*.log
+*.o
+*.pot
+*.pyc
+*.pydevproject
+*.so
+*.suo
+*.xcworkspace
+*_ReSharper*
+
+.DS_Store
+._.DS_Store
+
+project.properties
+
+.settings
+build/
+.gradle/
+.idea
+*.iml
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 00000000..f6784c11
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,14 @@
+language: android
+
+android:
+  components:
+    - sys-img-armeabi-v7a-android-21
+    - build-tools-21.1.2
+    - android-21
+
+script:
+  - gradle clean build connectedCheck coveralls
+
+cache:
+  directories:
+    - $HOME/.m2
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 00000000..6e177a5b
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,19 @@
+Copyright (C) 2012 by Satya Narayan
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
diff --git a/README.md b/README.md
new file mode 100644
index 00000000..98db9394
--- /dev/null
+++ b/README.md
@@ -0,0 +1,91 @@
+# Sugar ORM [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master)
+
+Insanely easy way to work with Android databases.
+
+Official documentation can be found [here](http://satyan.github.io/sugar). The example application is provided in the **example** folder in the source.
+
+## Features
+
+Sugar ORM was built in contrast to other ORM's to have:
+
+- A simple, concise, and clean integration process with minimal configuration.
+- Automatic table and column naming through reflection.
+- Support for migrations between different schema versions.
+
+## Installing
+
+There are four ways to install Sugar:
+
+#### As a Gradle dependency
+
+This is the preferred way. Simply add:
+
+```groovy
+compile 'com.github.satyan:sugar:1.3.1'
+```
+
+to your project dependencies and run `gradle build` or `gradle assemble`.
+
+#### As a Maven dependency
+
+Declare the dependency in Maven:
+
+```xml
+<dependency>
+    <groupId>com.github.satyan</groupId>
+    <artifactId>sugar</artifactId>
+    <version>1.3</version>
+</dependency>
+```
+
+#### As a library project
+
+Download the source code and import it as a library project in Eclipse. The project is available in the folder **library**. For more information on how to do this, read [here](http://developer.android.com/tools/projects/index.html#LibraryProjects).
+
+#### As a jar
+
+Visit the [releases](https://github.com/satyan/sugar/releases) page to download jars directly. You can drop them into your `libs` folder and configure the Java build path to include the library. See this [tutorial](http://www.vogella.com/tutorials/AndroidLibraryProjects/article.html) for an excellent guide on how to do this.
+
+===================
+
+After installing, check out how to set up your first database and models [here](http://satyan.github.io/sugar/getting-started.html).
+
+## Contributing
+
+Please fork this repository and contribute back using [pull requests](https://github.com/satyan/sugar/pulls). Features can be requested using [issues](https://github.com/satyan/sugar/issues). All code, comments, and critiques are greatly appreciated.
+
+## Changelog
+
+#### v1.3 [[jar](https://github.com/satyan/sugar/releases/download/v1.3/sugar-1.3.jar)]
+
+- Transaction Support
+- Bulk Insert of records 
+- Encrypted datastore (branch : sugar-cipher using sqlcipher)
+- Removed Constructor with context parameter. Needs default constructor now.
+- Enhancements to QueryBuilder
+- Bug fixes and other improvements.
+
+#### v1.2 [[jar](https://github.com/satyan/sugar/releases/download/v1.2/sugar-1.2.jar)]
+
+- package restriction for domain classes.
+- metadata caching
+- QueryBuilder v1
+- Database Migrations
+- Provision for Raw queries
+- Better and more organized api guide and usage instructions.
+
+#### v1.1 [[jar](https://github.com/satyan/sugar/releases/download/v1.1/sugar-1.1.jar)]
+
+- Static api doesn't take context anymore. Hence
+
+```java
+Book.findById(context, Book.class, 1);
+```
+
+becomes
+
+```java
+Book.findById(Book.class, 1);
+```
+
+- Some cleanup in the code.
diff --git a/example/build.gradle b/example/build.gradle
new file mode 100644
index 00000000..dad72cd7
--- /dev/null
+++ b/example/build.gradle
@@ -0,0 +1,46 @@
+apply plugin: 'com.android.application'
+apply plugin: 'org.robolectric'
+
+android {
+    compileSdkVersion 21
+    buildToolsVersion "21.1.2"
+
+    defaultConfig {
+        applicationId "com.example"
+        minSdkVersion 9
+        targetSdkVersion 21
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+        }
+    }
+}
+
+dependencies {
+    compile project (':library')
+    compile 'com.android.support:support-v4:21.0.3'
+    testCompile 'org.robolectric:robolectric:2.4'
+    testCompile 'junit:junit:4.12'
+}
+
+robolectric {
+    // Configure includes / excludes
+    include '**/*Tests.class'
+    exclude '**/espresso/**/*.class'
+
+    // Configure max heap size of the test JVM
+    maxHeapSize = '2048m'
+
+    // Configure the test JVM arguments - Does not apply to Java 8
+    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
+
+    // configure whether failing tests should fail the build
+    ignoreFailures true
+
+    // use afterTest to listen to the test execution results
+    afterTest { descriptor, result ->
+        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
+    }
+}
diff --git a/example/build.properties b/example/build.properties
new file mode 100644
index 00000000..ee52d86d
--- /dev/null
+++ b/example/build.properties
@@ -0,0 +1,17 @@
+# This file is used to override default values used by the Ant build system.
+#
+# This file must be checked in Version Control Systems, as it is
+# integral to the build system of your project.
+
+# This file is only used by the Ant script.
+
+# You can use this to override default values such as
+#  'source.dir' for the location of your java source folder and
+#  'out.dir' for the location of your output folder.
+
+# You can also use it define how the release builds are signed by declaring
+# the following properties:
+#  'key.store' for the location of your keystore and
+#  'key.alias' for the name of the key to use.
+# The password will be asked during the build when you use the 'release' target.
+
diff --git a/example/build.xml b/example/build.xml
new file mode 100644
index 00000000..3d352f3a
--- /dev/null
+++ b/example/build.xml
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="SugarExample" default="help">
+
+<!-- The local.properties file is created and updated by the 'android'
+     tool.
+     It contains the path to the SDK. It should *NOT* be checked into
+     Version Control Systems. -->
+    <property file="local.properties" />
+
+    <!-- The build.properties file can be created by you and is never touched
+         by the 'android' tool. This is the place to change some of the
+         default property values used by the Ant rules.
+         Here are some properties you may want to change/update:
+
+         source.dir
+             The name of the source directory. Default is 'src'.
+         out.dir
+             The name of the output directory. Default is 'bin'.
+
+         Properties related to the SDK location or the project target should
+         be updated using the 'android' tool with the 'update' action.
+
+         This file is an integral part of the build system for your
+         application and should be checked into Version Control Systems.
+
+         -->
+    <property file="build.properties" />
+
+    <!-- The default.properties file is created and updated by the 'android'
+         tool, as well as ADT.
+         This file is an integral part of the build system for your
+         application and should be checked into Version Control Systems. -->
+    <property file="default.properties" />
+
+
+    <!-- Required pre-setup import -->
+    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />
+
+
+<!-- extension targets. Uncomment the ones where you want to do custom work
+     in between standard targets -->
+<!--
+    <target name="-pre-build">
+    </target>
+    <target name="-pre-compile">
+    </target>
+
+    [This is typically used for code obfuscation.
+     Compiled code location: ${out.classes.absolute.dir}
+     If this is not done in place, override ${out.dex.input.absolute.dir}]
+    <target name="-post-compile">
+    </target>
+-->
+
+    <!-- Execute the Android Setup task that will setup some properties
+         specific to the target, and import the build rules files.
+
+         The rules file is imported from
+            <SDK>/tools/ant/
+         Depending on the project type it can be either:
+         - main_rules.xml
+         - lib_rules.xml
+         - test_rules.xml
+
+         To customize existing targets, there are two options:
+         - Customize only one target:
+             - copy/paste the target into this file, *before* the
+               <setup> task.
+             - customize it to your needs.
+         - Customize the whole script.
+             - copy/paste the content of the rules files (minus the top node)
+               into this file, *after* the <setup> task
+             - disable the import of the rules by changing the setup task
+               below to <setup import="false" />.
+             - customize to your needs.
+    -->
+    <setup />
+
+</project>
diff --git a/example/src/main/AndroidManifest.xml b/example/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..eb802533
--- /dev/null
+++ b/example/src/main/AndroidManifest.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="com.example"
+      android:versionCode="1"
+      android:versionName="1.0">
+    <application android:label="@string/app_name" android:icon="@drawable/icon" android:name="ClientApp">
+        <activity android:name=".activities.SugarActivity" android:label="@string/app_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <meta-data android:name="DATABASE" android:value="sugar_example.db" />
+        <meta-data android:name="VERSION" android:value="3" />
+        <meta-data android:name="QUERY_LOG" android:value="true" />
+    </application>
+</manifest> 
diff --git a/example/src/main/assets/sugar_upgrades/3.sql b/example/src/main/assets/sugar_upgrades/3.sql
new file mode 100644
index 00000000..5aea346a
--- /dev/null
+++ b/example/src/main/assets/sugar_upgrades/3.sql
@@ -0,0 +1 @@
+alter table NOTE add NAME TEXT;
\ No newline at end of file
diff --git a/example/src/main/java/com/example/ClientApp.java b/example/src/main/java/com/example/ClientApp.java
new file mode 100644
index 00000000..e546e11d
--- /dev/null
+++ b/example/src/main/java/com/example/ClientApp.java
@@ -0,0 +1,19 @@
+package com.example;
+
+import android.app.Application;
+
+import com.orm.SugarContext;
+
+public class ClientApp extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        SugarContext.init(this);
+    }
+
+    @Override
+    public void onTerminate() {
+        super.onTerminate();
+        SugarContext.terminate();
+    }
+}
diff --git a/example/src/main/java/com/example/activities/SugarActivity.java b/example/src/main/java/com/example/activities/SugarActivity.java
new file mode 100644
index 00000000..197314a0
--- /dev/null
+++ b/example/src/main/java/com/example/activities/SugarActivity.java
@@ -0,0 +1,19 @@
+package com.example.activities;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.example.R;
+
+
+public class SugarActivity extends Activity
+{
+    /** Called when the activity is first created. */
+    @Override
+    public void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.main);
+    }
+}
diff --git a/example/src/main/java/com/example/models/BigDecimalFieldAnnotatedModel.java b/example/src/main/java/com/example/models/BigDecimalFieldAnnotatedModel.java
new file mode 100644
index 00000000..b3b60e98
--- /dev/null
+++ b/example/src/main/java/com/example/models/BigDecimalFieldAnnotatedModel.java
@@ -0,0 +1,25 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+import java.math.BigDecimal;
+
+@Table
+public class BigDecimalFieldAnnotatedModel {
+    private BigDecimal decimal;
+    private Long id;
+
+    public BigDecimalFieldAnnotatedModel() {}
+
+    public BigDecimalFieldAnnotatedModel(BigDecimal decimal) {
+        this.decimal = decimal;
+    }
+
+    public BigDecimal getBigDecimal() {
+        return decimal;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/BigDecimalFieldExtendedModel.java b/example/src/main/java/com/example/models/BigDecimalFieldExtendedModel.java
new file mode 100644
index 00000000..e258cf32
--- /dev/null
+++ b/example/src/main/java/com/example/models/BigDecimalFieldExtendedModel.java
@@ -0,0 +1,19 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+import java.math.BigDecimal;
+
+public class BigDecimalFieldExtendedModel extends SugarRecord {
+    private BigDecimal decimal;
+
+    public BigDecimalFieldExtendedModel() {}
+
+    public BigDecimalFieldExtendedModel(BigDecimal decimal) {
+        this.decimal = decimal;
+    }
+
+    public BigDecimal getBigDecimal() {
+        return decimal;
+    }
+}
diff --git a/example/src/main/java/com/example/models/BooleanFieldAnnotatedModel.java b/example/src/main/java/com/example/models/BooleanFieldAnnotatedModel.java
new file mode 100644
index 00000000..d3a63edc
--- /dev/null
+++ b/example/src/main/java/com/example/models/BooleanFieldAnnotatedModel.java
@@ -0,0 +1,28 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class BooleanFieldAnnotatedModel {
+    private Boolean objectBoolean;
+    private boolean rawBoolean;
+    private Long id;
+
+    public BooleanFieldAnnotatedModel() {}
+
+    public BooleanFieldAnnotatedModel(Boolean objectBoolean) {
+        this.objectBoolean = objectBoolean;
+    }
+
+    public BooleanFieldAnnotatedModel(boolean rawBoolean) {
+        this.rawBoolean = rawBoolean;
+    }
+
+    public Boolean getBoolean() {
+        return objectBoolean;
+    }
+
+    public boolean getRawBoolean() {
+        return rawBoolean;
+    }
+}
diff --git a/example/src/main/java/com/example/models/BooleanFieldExtendedModel.java b/example/src/main/java/com/example/models/BooleanFieldExtendedModel.java
new file mode 100644
index 00000000..972855cd
--- /dev/null
+++ b/example/src/main/java/com/example/models/BooleanFieldExtendedModel.java
@@ -0,0 +1,26 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class BooleanFieldExtendedModel extends SugarRecord {
+    private Boolean objectBoolean;
+    private boolean rawBoolean;
+
+    public BooleanFieldExtendedModel() {}
+
+    public BooleanFieldExtendedModel(Boolean objectBoolean) {
+        this.objectBoolean = objectBoolean;
+    }
+
+    public BooleanFieldExtendedModel(boolean rawBoolean) {
+        this.rawBoolean = rawBoolean;
+    }
+
+    public Boolean getBoolean() {
+        return objectBoolean;
+    }
+
+    public boolean getRawBoolean() {
+        return rawBoolean;
+    }
+}
diff --git a/example/src/main/java/com/example/models/ByteArrayAnnotatedModel.java b/example/src/main/java/com/example/models/ByteArrayAnnotatedModel.java
new file mode 100644
index 00000000..da0b3ece
--- /dev/null
+++ b/example/src/main/java/com/example/models/ByteArrayAnnotatedModel.java
@@ -0,0 +1,23 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class ByteArrayAnnotatedModel {
+    private byte[] byteArray;
+    private Long id;
+
+    public ByteArrayAnnotatedModel() {}
+
+    public ByteArrayAnnotatedModel(byte[] byteArray) {
+        this.byteArray = byteArray;
+    }
+
+    public byte[] getByteArray() {
+        return byteArray;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/ByteArrayExtendedModel.java b/example/src/main/java/com/example/models/ByteArrayExtendedModel.java
new file mode 100644
index 00000000..7808c514
--- /dev/null
+++ b/example/src/main/java/com/example/models/ByteArrayExtendedModel.java
@@ -0,0 +1,17 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class ByteArrayExtendedModel extends SugarRecord {
+    private byte[] byteArray;
+
+    public ByteArrayExtendedModel() {}
+
+    public ByteArrayExtendedModel(byte[] byteArray) {
+        this.byteArray = byteArray;
+    }
+
+    public byte[] getByteArray() {
+        return byteArray;
+    }
+}
diff --git a/example/src/main/java/com/example/models/DoubleFieldAnnotatedModel.java b/example/src/main/java/com/example/models/DoubleFieldAnnotatedModel.java
new file mode 100644
index 00000000..2f5fd428
--- /dev/null
+++ b/example/src/main/java/com/example/models/DoubleFieldAnnotatedModel.java
@@ -0,0 +1,28 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class DoubleFieldAnnotatedModel {
+    private Double objectDouble;
+    private double rawDouble;
+    private Long id;
+
+    public DoubleFieldAnnotatedModel() {}
+
+    public DoubleFieldAnnotatedModel(Double objectDouble) {
+        this.objectDouble = objectDouble;
+    }
+
+    public DoubleFieldAnnotatedModel(double rawDouble) {
+        this.rawDouble = rawDouble;
+    }
+
+    public Double getDouble() {
+        return objectDouble;
+    }
+
+    public double getRawDouble() {
+        return rawDouble;
+    }
+}
diff --git a/example/src/main/java/com/example/models/DoubleFieldExtendedModel.java b/example/src/main/java/com/example/models/DoubleFieldExtendedModel.java
new file mode 100644
index 00000000..b0708b7c
--- /dev/null
+++ b/example/src/main/java/com/example/models/DoubleFieldExtendedModel.java
@@ -0,0 +1,26 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class DoubleFieldExtendedModel extends SugarRecord {
+    private Double objectDouble;
+    private double rawDouble;
+
+    public DoubleFieldExtendedModel() {}
+
+    public DoubleFieldExtendedModel(Double objectDouble) {
+        this.objectDouble = objectDouble;
+    }
+
+    public DoubleFieldExtendedModel(double rawDouble) {
+        this.rawDouble = rawDouble;
+    }
+
+    public Double getDouble() {
+        return objectDouble;
+    }
+
+    public double getRawDouble() {
+        return rawDouble;
+    }
+}
diff --git a/example/src/main/java/com/example/models/EnumFieldAnnotatedModel.java b/example/src/main/java/com/example/models/EnumFieldAnnotatedModel.java
new file mode 100644
index 00000000..34bf2f7e
--- /dev/null
+++ b/example/src/main/java/com/example/models/EnumFieldAnnotatedModel.java
@@ -0,0 +1,52 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class EnumFieldAnnotatedModel {
+    public static enum DefaultEnum {
+        ONE, TWO
+    }
+
+    public static enum OverrideEnum {
+        ONE, TWO;
+
+        @Override
+        public String toString() {
+            return super.toString().toLowerCase();
+        }
+    }
+
+    private OverrideEnum overrideEnum;
+    private DefaultEnum defaultEnum;
+    private Long id;
+
+    public EnumFieldAnnotatedModel() {
+
+    }
+
+    public EnumFieldAnnotatedModel(OverrideEnum e1, DefaultEnum d1) {
+        overrideEnum = e1;
+        defaultEnum = d1;
+    }
+
+    public DefaultEnum getDefaultEnum() {
+        return defaultEnum;
+    }
+
+    public void setDefaultEnum(DefaultEnum defaultEnum) {
+        this.defaultEnum = defaultEnum;
+    }
+
+    public void setOverrideEnum(OverrideEnum overrideEnum) {
+        this.overrideEnum = overrideEnum;
+    }
+
+    public OverrideEnum getOverrideEnum() {
+        return overrideEnum;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/EnumFieldExtendedModel.java b/example/src/main/java/com/example/models/EnumFieldExtendedModel.java
new file mode 100644
index 00000000..df3a093b
--- /dev/null
+++ b/example/src/main/java/com/example/models/EnumFieldExtendedModel.java
@@ -0,0 +1,46 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class EnumFieldExtendedModel extends SugarRecord {
+    public static enum DefaultEnum {
+        ONE, TWO
+    }
+
+    public static enum OverrideEnum {
+        ONE, TWO;
+
+        @Override
+        public String toString() {
+            return super.toString().toLowerCase();
+        }
+    }
+
+    private OverrideEnum overrideEnum;
+    private DefaultEnum defaultEnum;
+
+    public EnumFieldExtendedModel() {
+
+    }
+
+    public EnumFieldExtendedModel(OverrideEnum e1, DefaultEnum d1) {
+        overrideEnum = e1;
+        defaultEnum = d1;
+    }
+
+    public DefaultEnum getDefaultEnum() {
+        return defaultEnum;
+    }
+
+    public void setDefaultEnum(DefaultEnum defaultEnum) {
+        this.defaultEnum = defaultEnum;
+    }
+
+    public void setOverrideEnum(OverrideEnum overrideEnum) {
+        this.overrideEnum = overrideEnum;
+    }
+
+    public OverrideEnum getOverrideEnum() {
+        return overrideEnum;
+    }
+}
diff --git a/example/src/main/java/com/example/models/FloatFieldAnnotatedModel.java b/example/src/main/java/com/example/models/FloatFieldAnnotatedModel.java
new file mode 100644
index 00000000..6d7f5e42
--- /dev/null
+++ b/example/src/main/java/com/example/models/FloatFieldAnnotatedModel.java
@@ -0,0 +1,28 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class FloatFieldAnnotatedModel {
+    private Float objectFloat;
+    private float rawFloat;
+    private Long id;
+
+    public FloatFieldAnnotatedModel() {}
+
+    public FloatFieldAnnotatedModel(Float objectFloat) {
+        this.objectFloat = objectFloat;
+    }
+
+    public FloatFieldAnnotatedModel(float rawFloat) {
+        this.rawFloat = rawFloat;
+    }
+
+    public Float getFloat() {
+        return objectFloat;
+    }
+
+    public float getRawFloat() {
+        return rawFloat;
+    }
+}
diff --git a/example/src/main/java/com/example/models/FloatFieldExtendedModel.java b/example/src/main/java/com/example/models/FloatFieldExtendedModel.java
new file mode 100644
index 00000000..0abf904b
--- /dev/null
+++ b/example/src/main/java/com/example/models/FloatFieldExtendedModel.java
@@ -0,0 +1,26 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class FloatFieldExtendedModel extends SugarRecord {
+    private Float objectFloat;
+    private float rawFloat;
+
+    public FloatFieldExtendedModel() {}
+
+    public FloatFieldExtendedModel(Float objectFloat) {
+        this.objectFloat = objectFloat;
+    }
+
+    public FloatFieldExtendedModel(float rawFloat) {
+        this.rawFloat = rawFloat;
+    }
+
+    public Float getFloat() {
+        return objectFloat;
+    }
+
+    public float getRawFloat() {
+        return rawFloat;
+    }
+}
diff --git a/example/src/main/java/com/example/models/IncompleteAnnotatedModel.java b/example/src/main/java/com/example/models/IncompleteAnnotatedModel.java
new file mode 100644
index 00000000..e524d22f
--- /dev/null
+++ b/example/src/main/java/com/example/models/IncompleteAnnotatedModel.java
@@ -0,0 +1,9 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class IncompleteAnnotatedModel {
+    // An annotated model must provide a Long id field. A setter or getter is optional
+    public IncompleteAnnotatedModel() {}
+}
diff --git a/example/src/main/java/com/example/models/IntegerFieldAnnotatedModel.java b/example/src/main/java/com/example/models/IntegerFieldAnnotatedModel.java
new file mode 100644
index 00000000..1b860ce1
--- /dev/null
+++ b/example/src/main/java/com/example/models/IntegerFieldAnnotatedModel.java
@@ -0,0 +1,28 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class IntegerFieldAnnotatedModel {
+    private Integer integer;
+    private int rawInteger;
+    public Long id;
+
+    public IntegerFieldAnnotatedModel() {}
+
+    public IntegerFieldAnnotatedModel(Integer integer) {
+        this.integer = integer;
+    }
+
+    public IntegerFieldAnnotatedModel(int rawInteger) {
+        this.rawInteger = rawInteger;
+    }
+
+    public Integer getInteger() {
+        return integer;
+    }
+
+    public int getInt() {
+        return rawInteger;
+    }
+}
diff --git a/example/src/main/java/com/example/models/IntegerFieldExtendedModel.java b/example/src/main/java/com/example/models/IntegerFieldExtendedModel.java
new file mode 100644
index 00000000..b05df191
--- /dev/null
+++ b/example/src/main/java/com/example/models/IntegerFieldExtendedModel.java
@@ -0,0 +1,26 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class IntegerFieldExtendedModel extends SugarRecord {
+    private Integer integer;
+    private int rawInteger;
+
+    public IntegerFieldExtendedModel() {}
+
+    public IntegerFieldExtendedModel(Integer integer) {
+        this.integer = integer;
+    }
+
+    public IntegerFieldExtendedModel(int rawInteger) {
+        this.rawInteger = rawInteger;
+    }
+
+    public Integer getInteger() {
+        return integer;
+    }
+
+    public int getInt() {
+        return rawInteger;
+    }
+}
diff --git a/example/src/main/java/com/example/models/LongFieldAnnotatedModel.java b/example/src/main/java/com/example/models/LongFieldAnnotatedModel.java
new file mode 100644
index 00000000..c3986576
--- /dev/null
+++ b/example/src/main/java/com/example/models/LongFieldAnnotatedModel.java
@@ -0,0 +1,28 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class LongFieldAnnotatedModel {
+    private Long objectLong;
+    private long rawLong;
+    private Long id;
+
+    public LongFieldAnnotatedModel() {}
+
+    public LongFieldAnnotatedModel(Long objectLong) {
+        this.objectLong = objectLong;
+    }
+
+    public LongFieldAnnotatedModel(long rawLong) {
+        this.rawLong = rawLong;
+    }
+
+    public Long getLong() {
+        return objectLong;
+    }
+
+    public long getRawLong() {
+        return rawLong;
+    }
+}
diff --git a/example/src/main/java/com/example/models/LongFieldExtendedModel.java b/example/src/main/java/com/example/models/LongFieldExtendedModel.java
new file mode 100644
index 00000000..19ccdaa5
--- /dev/null
+++ b/example/src/main/java/com/example/models/LongFieldExtendedModel.java
@@ -0,0 +1,26 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class LongFieldExtendedModel extends SugarRecord {
+    private Long objectLong;
+    private long rawLong;
+
+    public LongFieldExtendedModel() {}
+
+    public LongFieldExtendedModel(Long objectLong) {
+        this.objectLong = objectLong;
+    }
+
+    public LongFieldExtendedModel(long rawLong) {
+        this.rawLong = rawLong;
+    }
+
+    public Long getLong() {
+        return objectLong;
+    }
+
+    public long getRawLong() {
+        return rawLong;
+    }
+}
diff --git a/example/src/main/java/com/example/models/NestedAnnotatedModel.java b/example/src/main/java/com/example/models/NestedAnnotatedModel.java
new file mode 100644
index 00000000..8e834486
--- /dev/null
+++ b/example/src/main/java/com/example/models/NestedAnnotatedModel.java
@@ -0,0 +1,23 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class NestedAnnotatedModel {
+    private RelationshipAnnotatedModel nested;
+    private Long id;
+
+    public NestedAnnotatedModel() {}
+
+    public NestedAnnotatedModel(RelationshipAnnotatedModel nested) {
+        this.nested = nested;
+    }
+
+    public RelationshipAnnotatedModel getNested() {
+        return nested;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/NestedExtendedModel.java b/example/src/main/java/com/example/models/NestedExtendedModel.java
new file mode 100644
index 00000000..369107c5
--- /dev/null
+++ b/example/src/main/java/com/example/models/NestedExtendedModel.java
@@ -0,0 +1,18 @@
+package com.example.models;
+
+
+import com.orm.SugarRecord;
+
+public class NestedExtendedModel extends SugarRecord {
+    private RelationshipExtendedModel nested;
+
+    public NestedExtendedModel() {}
+
+    public NestedExtendedModel(RelationshipExtendedModel nested) {
+        this.nested = nested;
+    }
+
+    public RelationshipExtendedModel getNested() {
+        return nested;
+    }
+}
diff --git a/example/src/main/java/com/example/models/NestedMixedAAModel.java b/example/src/main/java/com/example/models/NestedMixedAAModel.java
new file mode 100644
index 00000000..f5f70753
--- /dev/null
+++ b/example/src/main/java/com/example/models/NestedMixedAAModel.java
@@ -0,0 +1,18 @@
+package com.example.models;
+
+
+import com.orm.SugarRecord;
+
+public class NestedMixedAAModel extends SugarRecord {
+    private RelationshipMixedAModel nested;
+
+    public NestedMixedAAModel() {}
+
+    public NestedMixedAAModel(RelationshipMixedAModel nested) {
+        this.nested = nested;
+    }
+
+    public RelationshipMixedAModel getNested() {
+        return nested;
+    }
+}
diff --git a/example/src/main/java/com/example/models/NestedMixedABModel.java b/example/src/main/java/com/example/models/NestedMixedABModel.java
new file mode 100644
index 00000000..045de69f
--- /dev/null
+++ b/example/src/main/java/com/example/models/NestedMixedABModel.java
@@ -0,0 +1,18 @@
+package com.example.models;
+
+
+import com.orm.SugarRecord;
+
+public class NestedMixedABModel extends SugarRecord {
+    private RelationshipMixedBModel nested;
+
+    public NestedMixedABModel() {}
+
+    public NestedMixedABModel(RelationshipMixedBModel nested) {
+        this.nested = nested;
+    }
+
+    public RelationshipMixedBModel getNested() {
+        return nested;
+    }
+}
diff --git a/example/src/main/java/com/example/models/NestedMixedBAModel.java b/example/src/main/java/com/example/models/NestedMixedBAModel.java
new file mode 100644
index 00000000..55a1e63b
--- /dev/null
+++ b/example/src/main/java/com/example/models/NestedMixedBAModel.java
@@ -0,0 +1,24 @@
+package com.example.models;
+
+
+import com.orm.dsl.Table;
+
+@Table
+public class NestedMixedBAModel {
+    private RelationshipMixedAModel nested;
+    private Long id;
+
+    public NestedMixedBAModel() {}
+
+    public NestedMixedBAModel(RelationshipMixedAModel nested) {
+        this.nested = nested;
+    }
+
+    public RelationshipMixedAModel getNested() {
+        return nested;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/NestedMixedBBModel.java b/example/src/main/java/com/example/models/NestedMixedBBModel.java
new file mode 100644
index 00000000..b784f407
--- /dev/null
+++ b/example/src/main/java/com/example/models/NestedMixedBBModel.java
@@ -0,0 +1,24 @@
+package com.example.models;
+
+
+import com.orm.dsl.Table;
+
+@Table
+public class NestedMixedBBModel {
+    private RelationshipMixedBModel nested;
+    private Long id;
+
+    public NestedMixedBBModel() {}
+
+    public NestedMixedBBModel(RelationshipMixedBModel nested) {
+        this.nested = nested;
+    }
+
+    public RelationshipMixedBModel getNested() {
+        return nested;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/NoSugarModel.java b/example/src/main/java/com/example/models/NoSugarModel.java
new file mode 100644
index 00000000..0e2d55e8
--- /dev/null
+++ b/example/src/main/java/com/example/models/NoSugarModel.java
@@ -0,0 +1,7 @@
+package com.example.models;
+
+
+public class NoSugarModel {
+    public NoSugarModel() {
+    }
+}
\ No newline at end of file
diff --git a/example/src/main/java/com/example/models/RelationshipAnnotatedModel.java b/example/src/main/java/com/example/models/RelationshipAnnotatedModel.java
new file mode 100644
index 00000000..aa0fff9c
--- /dev/null
+++ b/example/src/main/java/com/example/models/RelationshipAnnotatedModel.java
@@ -0,0 +1,23 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class RelationshipAnnotatedModel {
+    private SimpleAnnotatedModel simple;
+    private Long id;
+
+    public RelationshipAnnotatedModel() {}
+
+    public RelationshipAnnotatedModel(SimpleAnnotatedModel simple) {
+        this.simple = simple;
+    }
+
+    public SimpleAnnotatedModel getSimple() {
+        return simple;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/RelationshipExtendedModel.java b/example/src/main/java/com/example/models/RelationshipExtendedModel.java
new file mode 100644
index 00000000..afa2d105
--- /dev/null
+++ b/example/src/main/java/com/example/models/RelationshipExtendedModel.java
@@ -0,0 +1,18 @@
+package com.example.models;
+
+
+import com.orm.SugarRecord;
+
+public class RelationshipExtendedModel extends SugarRecord {
+    private SimpleExtendedModel simple;
+
+    public RelationshipExtendedModel() {}
+
+    public RelationshipExtendedModel(SimpleExtendedModel simple) {
+        this.simple = simple;
+    }
+
+    public SimpleExtendedModel getSimple() {
+        return simple;
+    }
+}
diff --git a/example/src/main/java/com/example/models/RelationshipMixedAModel.java b/example/src/main/java/com/example/models/RelationshipMixedAModel.java
new file mode 100644
index 00000000..f09dd5c0
--- /dev/null
+++ b/example/src/main/java/com/example/models/RelationshipMixedAModel.java
@@ -0,0 +1,18 @@
+package com.example.models;
+
+
+import com.orm.SugarRecord;
+
+public class RelationshipMixedAModel extends SugarRecord {
+    private SimpleAnnotatedModel simple;
+
+    public RelationshipMixedAModel() {}
+
+    public RelationshipMixedAModel(SimpleAnnotatedModel simple) {
+        this.simple = simple;
+    }
+
+    public SimpleAnnotatedModel getSimple() {
+        return simple;
+    }
+}
diff --git a/example/src/main/java/com/example/models/RelationshipMixedBModel.java b/example/src/main/java/com/example/models/RelationshipMixedBModel.java
new file mode 100644
index 00000000..9c9d2771
--- /dev/null
+++ b/example/src/main/java/com/example/models/RelationshipMixedBModel.java
@@ -0,0 +1,24 @@
+package com.example.models;
+
+
+import com.orm.dsl.Table;
+
+@Table
+public class RelationshipMixedBModel {
+    private SimpleExtendedModel simple;
+    private Long id;
+
+    public RelationshipMixedBModel() {}
+
+    public RelationshipMixedBModel(SimpleExtendedModel simple) {
+        this.simple = simple;
+    }
+
+    public SimpleExtendedModel getSimple() {
+        return simple;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/ShortFieldAnnotatedModel.java b/example/src/main/java/com/example/models/ShortFieldAnnotatedModel.java
new file mode 100644
index 00000000..8393974b
--- /dev/null
+++ b/example/src/main/java/com/example/models/ShortFieldAnnotatedModel.java
@@ -0,0 +1,28 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class ShortFieldAnnotatedModel {
+    private Short objectShort;
+    private short rawShort;
+    private Long id;
+
+    public ShortFieldAnnotatedModel() {}
+
+    public ShortFieldAnnotatedModel(Short objectShort) {
+        this.objectShort = objectShort;
+    }
+
+    public ShortFieldAnnotatedModel(short rawShort) {
+        this.rawShort = rawShort;
+    }
+
+    public Short getShort() {
+        return objectShort;
+    }
+
+    public short getRawShort() {
+        return rawShort;
+    }
+}
diff --git a/example/src/main/java/com/example/models/ShortFieldExtendedModel.java b/example/src/main/java/com/example/models/ShortFieldExtendedModel.java
new file mode 100644
index 00000000..5373bb23
--- /dev/null
+++ b/example/src/main/java/com/example/models/ShortFieldExtendedModel.java
@@ -0,0 +1,26 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class ShortFieldExtendedModel extends SugarRecord {
+    private Short objectShort;
+    private short rawShort;
+
+    public ShortFieldExtendedModel() {}
+
+    public ShortFieldExtendedModel(Short objectShort) {
+        this.objectShort = objectShort;
+    }
+
+    public ShortFieldExtendedModel(short rawShort) {
+        this.rawShort = rawShort;
+    }
+
+    public Short getShort() {
+        return objectShort;
+    }
+
+    public short getRawShort() {
+        return rawShort;
+    }
+}
diff --git a/example/src/main/java/com/example/models/SimpleAnnotatedModel.java b/example/src/main/java/com/example/models/SimpleAnnotatedModel.java
new file mode 100644
index 00000000..08d3b0fd
--- /dev/null
+++ b/example/src/main/java/com/example/models/SimpleAnnotatedModel.java
@@ -0,0 +1,15 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+
+@Table
+public class SimpleAnnotatedModel {
+    private Long id;
+
+    public SimpleAnnotatedModel() {}
+
+    public Long getId() {
+        return id;
+    }
+}
diff --git a/example/src/main/java/com/example/models/SimpleExtendedModel.java b/example/src/main/java/com/example/models/SimpleExtendedModel.java
new file mode 100644
index 00000000..77f75b63
--- /dev/null
+++ b/example/src/main/java/com/example/models/SimpleExtendedModel.java
@@ -0,0 +1,8 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+
+public class SimpleExtendedModel extends SugarRecord {
+    public SimpleExtendedModel() {}
+}
diff --git a/example/src/main/java/com/example/models/StringFieldAnnotatedModel.java b/example/src/main/java/com/example/models/StringFieldAnnotatedModel.java
new file mode 100644
index 00000000..05420d44
--- /dev/null
+++ b/example/src/main/java/com/example/models/StringFieldAnnotatedModel.java
@@ -0,0 +1,23 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class StringFieldAnnotatedModel {
+    private String string;
+    private Long id;
+
+    public StringFieldAnnotatedModel() {}
+
+    public StringFieldAnnotatedModel(String string) {
+        this.string = string;
+    }
+
+    public String getString() {
+        return string;
+    }
+
+    public void setString(String string) {
+        this.string = string;
+    }
+}
diff --git a/example/src/main/java/com/example/models/StringFieldAnnotatedNoIdModel.java b/example/src/main/java/com/example/models/StringFieldAnnotatedNoIdModel.java
new file mode 100644
index 00000000..1c12d581
--- /dev/null
+++ b/example/src/main/java/com/example/models/StringFieldAnnotatedNoIdModel.java
@@ -0,0 +1,22 @@
+package com.example.models;
+
+import com.orm.dsl.Table;
+
+@Table
+public class StringFieldAnnotatedNoIdModel {
+    private String string;
+
+    public StringFieldAnnotatedNoIdModel() {}
+
+    public StringFieldAnnotatedNoIdModel(String string) {
+        this.string = string;
+    }
+
+    public String getString() {
+        return string;
+    }
+
+    public void setString(String string) {
+        this.string = string;
+    }
+}
diff --git a/example/src/main/java/com/example/models/StringFieldExtendedModel.java b/example/src/main/java/com/example/models/StringFieldExtendedModel.java
new file mode 100644
index 00000000..33bab4e9
--- /dev/null
+++ b/example/src/main/java/com/example/models/StringFieldExtendedModel.java
@@ -0,0 +1,21 @@
+package com.example.models;
+
+import com.orm.SugarRecord;
+
+public class StringFieldExtendedModel extends SugarRecord {
+    private String string;
+
+    public StringFieldExtendedModel() {}
+
+    public StringFieldExtendedModel(String string) {
+        this.string = string;
+    }
+
+    public String getString() {
+        return string;
+    }
+
+    public void setString(String string) {
+        this.string = string;
+    }
+}
diff --git a/example/src/main/res/drawable-hdpi/icon.png b/example/src/main/res/drawable-hdpi/icon.png
new file mode 100755
index 00000000..8074c4c5
Binary files /dev/null and b/example/src/main/res/drawable-hdpi/icon.png differ
diff --git a/example/src/main/res/drawable-ldpi/icon.png b/example/src/main/res/drawable-ldpi/icon.png
new file mode 100755
index 00000000..1095584e
Binary files /dev/null and b/example/src/main/res/drawable-ldpi/icon.png differ
diff --git a/example/src/main/res/drawable-mdpi/icon.png b/example/src/main/res/drawable-mdpi/icon.png
new file mode 100755
index 00000000..a07c69fa
Binary files /dev/null and b/example/src/main/res/drawable-mdpi/icon.png differ
diff --git a/example/src/main/res/layout/main.xml b/example/src/main/res/layout/main.xml
new file mode 100755
index 00000000..92667838
--- /dev/null
+++ b/example/src/main/res/layout/main.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:id="@+id/layout"
+    >
+</LinearLayout>
+
diff --git a/example/src/main/res/values/strings.xml b/example/src/main/res/values/strings.xml
new file mode 100755
index 00000000..f805877a
--- /dev/null
+++ b/example/src/main/res/values/strings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">SugarExample</string>
+</resources>
diff --git a/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java b/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
new file mode 100644
index 00000000..f50550ab
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
@@ -0,0 +1,53 @@
+package com.example.sugartest;
+
+
+import com.example.models.BigDecimalFieldAnnotatedModel;
+import com.example.models.BigDecimalFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.math.BigDecimal;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class BigDecimalFieldTests {
+    @Test
+    public void nullBigDecimalExtendedTest() {
+        save(new BigDecimalFieldExtendedModel());
+        BigDecimalFieldExtendedModel model =
+                SugarRecord.findById(BigDecimalFieldExtendedModel.class, 1);
+        assertNull(model.getBigDecimal());
+    }
+
+    @Test
+    public void nullBigDecimalAnnotatedTest() {
+        save(new BigDecimalFieldAnnotatedModel());
+        BigDecimalFieldAnnotatedModel model =
+                SugarRecord.findById(BigDecimalFieldAnnotatedModel.class, 1);
+        assertNull(model.getBigDecimal());
+    }
+
+    @Test
+    public void bigDecimalExtendedTest() {
+        BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
+        save(new BigDecimalFieldExtendedModel(decimal));
+        BigDecimalFieldExtendedModel model = SugarRecord.findById(BigDecimalFieldExtendedModel.class, 1);
+        assertEquals(decimal, model.getBigDecimal());
+    }
+
+    @Test
+    public void bigDecimalAnnotatedTest() {
+        BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
+        save(new BigDecimalFieldAnnotatedModel(decimal));
+        BigDecimalFieldAnnotatedModel model =
+                SugarRecord.findById(BigDecimalFieldAnnotatedModel.class, 1);
+        assertEquals(decimal, model.getBigDecimal());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/BooleanFieldTests.java b/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
new file mode 100644
index 00000000..849f5520
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
@@ -0,0 +1,76 @@
+package com.example.sugartest;
+
+
+import com.example.models.BooleanFieldAnnotatedModel;
+import com.example.models.BooleanFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class BooleanFieldTests {
+    @Test
+    public void nullBooleanExtendedTest() {
+        save(new BooleanFieldExtendedModel());
+        BooleanFieldExtendedModel model = SugarRecord.findById(BooleanFieldExtendedModel.class, 1);
+        assertNull(model.getBoolean());
+    }
+
+    @Test
+    public void nullRawBooleanExtendedTest() {
+        save(new BooleanFieldExtendedModel());
+        BooleanFieldExtendedModel model = SugarRecord.findById(BooleanFieldExtendedModel.class, 1);
+        assertEquals(false, model.getRawBoolean());
+    }
+
+    @Test
+    public void nullBooleanAnnotatedTest() {
+        save(new BooleanFieldAnnotatedModel());
+        BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
+        assertNull(model.getBoolean());
+    }
+
+    @Test
+    public void nullRawBooleanAnnotatedTest() {
+        save(new BooleanFieldAnnotatedModel());
+        BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
+        assertEquals(false, model.getRawBoolean());
+    }
+
+    @Test
+    public void objectBooleanExtendedTest() {
+        Boolean objectBoolean = new Boolean(true);
+        save(new BooleanFieldExtendedModel(objectBoolean));
+        BooleanFieldExtendedModel model = SugarRecord.findById(BooleanFieldExtendedModel.class, 1);
+        assertEquals(objectBoolean, model.getBoolean());
+    }
+
+    @Test
+    public void rawBooleanExtendedTest() {
+        save(new BooleanFieldExtendedModel(true));
+        BooleanFieldExtendedModel model = SugarRecord.findById(BooleanFieldExtendedModel.class, 1);
+        assertEquals(true, model.getRawBoolean());
+    }
+
+    @Test
+    public void objectBooleanAnnotatedTest() {
+        Boolean objectBoolean = new Boolean(true);
+        save(new BooleanFieldAnnotatedModel(objectBoolean));
+        BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
+        assertEquals(objectBoolean, model.getBoolean());
+    }
+
+    @Test
+    public void rawBooleanAnnotatedTest() {
+        save(new BooleanFieldAnnotatedModel(true));
+        BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
+        assertEquals(true, model.getRawBoolean());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/ByteArrayFieldTests.java b/example/src/test/java/com/example/sugartest/ByteArrayFieldTests.java
new file mode 100644
index 00000000..b8ae0cfd
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/ByteArrayFieldTests.java
@@ -0,0 +1,54 @@
+package com.example.sugartest;
+
+
+import com.example.models.ByteArrayAnnotatedModel;
+import com.example.models.ByteArrayExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class ByteArrayFieldTests {
+    @Test
+    public void nullByteArrayExtendedTest() {
+        byte[] array = "".getBytes();
+        save(new ByteArrayExtendedModel());
+        ByteArrayExtendedModel model = SugarRecord.findById(ByteArrayExtendedModel.class, 1);
+        assertEquals(new String(array), new String(model.getByteArray()));
+        assertArrayEquals(array, model.getByteArray());
+    }
+
+    @Test
+    public void nullByteArrayAnnotatedTest() {
+        byte[] array = "".getBytes();
+        save(new ByteArrayAnnotatedModel());
+        ByteArrayAnnotatedModel model = SugarRecord.findById(ByteArrayAnnotatedModel.class, 1);
+        assertEquals(new String(array), new String(model.getByteArray()));
+        assertArrayEquals(array, model.getByteArray());
+    }
+
+    @Test
+    public void byteArrayExtendedTest() {
+        byte[] array = "hello".getBytes();
+        save(new ByteArrayExtendedModel(array));
+        ByteArrayExtendedModel model = SugarRecord.findById(ByteArrayExtendedModel.class, 1);
+        assertEquals(new String(array), new String(model.getByteArray()));
+        assertArrayEquals(array, model.getByteArray());
+    }
+
+    @Test
+    public void byteArrayAnnotatedTest() {
+        byte[] array = "hello".getBytes();
+        save(new ByteArrayAnnotatedModel(array));
+        ByteArrayAnnotatedModel model = SugarRecord.findById(ByteArrayAnnotatedModel.class, 1);
+        assertEquals(new String(array), new String(model.getByteArray()));
+        assertArrayEquals(array, model.getByteArray());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/DoubleFieldTests.java b/example/src/test/java/com/example/sugartest/DoubleFieldTests.java
new file mode 100644
index 00000000..86f5bfde
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/DoubleFieldTests.java
@@ -0,0 +1,76 @@
+package com.example.sugartest;
+
+
+import com.example.models.DoubleFieldAnnotatedModel;
+import com.example.models.DoubleFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class DoubleFieldTests {
+    @Test
+    public void nullDoubleExtendedTest() {
+        save(new DoubleFieldExtendedModel());
+        DoubleFieldExtendedModel model = SugarRecord.findById(DoubleFieldExtendedModel.class, 1);
+        assertNull(model.getDouble());
+    }
+
+    @Test
+    public void nullRawDoubleExtendedTest() {
+        save(new DoubleFieldExtendedModel());
+        DoubleFieldExtendedModel model = SugarRecord.findById(DoubleFieldExtendedModel.class, 1);
+        assertEquals(0.0, model.getRawDouble(), 0.0000000001);
+    }
+
+    @Test
+    public void nullDoubleAnnotatedTest() {
+        save(new DoubleFieldAnnotatedModel());
+        DoubleFieldAnnotatedModel model = SugarRecord.findById(DoubleFieldAnnotatedModel.class, 1);
+        assertNull(model.getDouble());
+    }
+
+    @Test
+    public void nullRawDoubleAnnotatedTest() {
+        save(new DoubleFieldAnnotatedModel());
+        DoubleFieldAnnotatedModel model = SugarRecord.findById(DoubleFieldAnnotatedModel.class, 1);
+        assertEquals(0.0, model.getRawDouble(), 0.0000000001);
+    }
+
+    @Test
+    public void objectDoubleExtendedTest() {
+        Double objectDouble = new Double(25.0);
+        save(new DoubleFieldExtendedModel(objectDouble));
+        DoubleFieldExtendedModel model = SugarRecord.findById(DoubleFieldExtendedModel.class, 1);
+        assertEquals(objectDouble, model.getDouble());
+    }
+
+    @Test
+    public void rawDoubleExtendedTest() {
+        save(new DoubleFieldExtendedModel(25.0));
+        DoubleFieldExtendedModel model = SugarRecord.findById(DoubleFieldExtendedModel.class, 1);
+        assertEquals(25.0, model.getRawDouble(), 0.0000000001);
+    }
+
+    @Test
+    public void objectDoubleAnnotatedTest() {
+        Double objectDouble = new Double(25.0);
+        save(new DoubleFieldAnnotatedModel(objectDouble));
+        DoubleFieldAnnotatedModel model = SugarRecord.findById(DoubleFieldAnnotatedModel.class, 1);
+        assertEquals(objectDouble, model.getDouble());
+    }
+
+    @Test
+    public void rawDoubleAnnotatedTest() {
+        save(new DoubleFieldAnnotatedModel(25.0));
+        DoubleFieldAnnotatedModel model = SugarRecord.findById(DoubleFieldAnnotatedModel.class, 1);
+        assertEquals(25.0, model.getRawDouble(), 0.0000000001);
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/EnumFieldTests.java b/example/src/test/java/com/example/sugartest/EnumFieldTests.java
new file mode 100644
index 00000000..7ce17380
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/EnumFieldTests.java
@@ -0,0 +1,81 @@
+package com.example.sugartest;
+
+import com.example.models.EnumFieldAnnotatedModel;
+import com.example.models.EnumFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk = 18)
+public class EnumFieldTests {
+    @Test
+    public void nullDefaultEnumExtendedTest() {
+        save(new EnumFieldExtendedModel());
+        EnumFieldExtendedModel model = SugarRecord.findById(EnumFieldExtendedModel.class, 1);
+        assertNull(model.getDefaultEnum());
+    }
+
+    @Test
+    public void nullOverriddenEnumExtendedTest() {
+        save(new EnumFieldExtendedModel());
+        EnumFieldExtendedModel model = SugarRecord.findById(EnumFieldExtendedModel.class, 1);
+        assertNull(model.getOverrideEnum());
+    }
+    @Test
+    public void nullDefaultEnumAnnotatedTest() {
+        save(new EnumFieldAnnotatedModel());
+        EnumFieldAnnotatedModel model = SugarRecord.findById(EnumFieldAnnotatedModel.class, 1);
+        assertNull(model.getDefaultEnum());
+    }
+
+    @Test
+    public void nullOverriddenEnumAnnotatedTest() {
+        save(new EnumFieldAnnotatedModel());
+        EnumFieldAnnotatedModel model = SugarRecord.findById(EnumFieldAnnotatedModel.class, 1);
+        assertNull(model.getOverrideEnum());
+    }
+
+    @Test
+    public void defaultEnumExtendedTest() {
+        save(new EnumFieldExtendedModel(EnumFieldExtendedModel.OverrideEnum.ONE,
+                EnumFieldExtendedModel.DefaultEnum.TWO));
+        EnumFieldExtendedModel model = SugarRecord.findById(EnumFieldExtendedModel.class, 1);
+        assertNotNull(model);
+        assertEquals(model.getDefaultEnum(), EnumFieldExtendedModel.DefaultEnum.TWO);
+    }
+
+    @Test
+    public void overriddenEnumExtendedTest() {
+        save(new EnumFieldExtendedModel(EnumFieldExtendedModel.OverrideEnum.ONE,
+                EnumFieldExtendedModel.DefaultEnum.TWO));
+        EnumFieldExtendedModel model = SugarRecord.findById(EnumFieldExtendedModel.class, 1);
+        assertNotNull(model);
+        assertEquals(model.getOverrideEnum(), EnumFieldExtendedModel.OverrideEnum.ONE);
+    }
+
+    @Test
+    public void defaultEnumAnnotatedTest() {
+        save(new EnumFieldAnnotatedModel(EnumFieldAnnotatedModel.OverrideEnum.ONE,
+                EnumFieldAnnotatedModel.DefaultEnum.TWO));
+        EnumFieldAnnotatedModel model = SugarRecord.findById(EnumFieldAnnotatedModel.class, 1);
+        assertNotNull(model);
+        assertEquals(model.getDefaultEnum(), EnumFieldAnnotatedModel.DefaultEnum.TWO);
+    }
+
+    @Test
+    public void overriddenEnumAnnotatedTest() {
+        save(new EnumFieldAnnotatedModel(EnumFieldAnnotatedModel.OverrideEnum.ONE,
+                EnumFieldAnnotatedModel.DefaultEnum.TWO));
+        EnumFieldAnnotatedModel model = SugarRecord.findById(EnumFieldAnnotatedModel.class, 1);
+        assertNotNull(model);
+        assertEquals(model.getOverrideEnum(), EnumFieldAnnotatedModel.OverrideEnum.ONE);
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/FirstAndLastTests.java b/example/src/test/java/com/example/sugartest/FirstAndLastTests.java
new file mode 100644
index 00000000..75108b83
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/FirstAndLastTests.java
@@ -0,0 +1,158 @@
+package com.example.sugartest;
+
+
+import com.example.models.FloatFieldAnnotatedModel;
+import com.example.models.FloatFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class FirstAndLastTests {
+    @Test
+    public void firstExtendedTest() {
+        Float firstObjectFloat = new Float(25F);
+        Float lastObjectFloat = new Float(50F);
+        save(new FloatFieldExtendedModel(firstObjectFloat));
+        save(new FloatFieldExtendedModel(lastObjectFloat));
+        FloatFieldExtendedModel model = SugarRecord.first(FloatFieldExtendedModel.class);
+        assertEquals(firstObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void firstDeletedRecordExtendedTest() {
+        Float firstObjectFloat = new Float(15F);
+        Float secondObjectFloat = new Float(25F);
+        Float thirdObjectFloat = new Float(35F);
+        Float fourthObjectFloat = new Float(45F);
+        save(new FloatFieldExtendedModel(firstObjectFloat));
+        save(new FloatFieldExtendedModel(secondObjectFloat));
+        save(new FloatFieldExtendedModel(thirdObjectFloat));
+        save(new FloatFieldExtendedModel(fourthObjectFloat));
+        FloatFieldExtendedModel firstRecord = SugarRecord.findById(FloatFieldExtendedModel.class, 1);
+        firstRecord.delete();
+        FloatFieldExtendedModel model = SugarRecord.first(FloatFieldExtendedModel.class);
+        assertEquals(secondObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void lastExtendedTest() {
+        Float firstObjectFloat = new Float(25F);
+        Float lastObjectFloat = new Float(50F);
+        save(new FloatFieldExtendedModel(firstObjectFloat));
+        save(new FloatFieldExtendedModel(lastObjectFloat));
+        FloatFieldExtendedModel model = SugarRecord.last(FloatFieldExtendedModel.class);
+        assertEquals(lastObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void lastDeletedRecordExtendedTest() {
+        Float firstObjectFloat = new Float(15F);
+        Float secondObjectFloat = new Float(25F);
+        Float thirdObjectFloat = new Float(35F);
+        Float fourthObjectFloat = new Float(45F);
+        save(new FloatFieldExtendedModel(firstObjectFloat));
+        save(new FloatFieldExtendedModel(secondObjectFloat));
+        save(new FloatFieldExtendedModel(thirdObjectFloat));
+        save(new FloatFieldExtendedModel(fourthObjectFloat));
+        FloatFieldExtendedModel lastRecord = SugarRecord.findById(FloatFieldExtendedModel.class, 4);
+        lastRecord.delete();
+        FloatFieldExtendedModel model = SugarRecord.last(FloatFieldExtendedModel.class);
+        assertEquals(thirdObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void nullFirstExtendedTest() {
+        assertNull(SugarRecord.first(FloatFieldExtendedModel.class));
+    }
+
+    @Test
+    public void nullLastExtendedTest() {
+        assertNull(SugarRecord.last(FloatFieldExtendedModel.class));
+    }
+
+    @Test
+    public void oneItemExtendedTest() {
+        save(new FloatFieldExtendedModel(new Float(25F)));
+        FloatFieldExtendedModel firstModel = SugarRecord.first(FloatFieldExtendedModel.class);
+        FloatFieldExtendedModel lastModel = SugarRecord.last(FloatFieldExtendedModel.class);
+        assertEquals(firstModel.getFloat(), lastModel.getFloat());
+    }
+
+    @Test
+    public void firstAnnotatedTest() {
+        Float firstObjectFloat = new Float(25F);
+        Float lastObjectFloat = new Float(50F);
+        save(new FloatFieldAnnotatedModel(firstObjectFloat));
+        save(new FloatFieldAnnotatedModel(lastObjectFloat));
+        FloatFieldAnnotatedModel model = SugarRecord.first(FloatFieldAnnotatedModel.class);
+        assertEquals(firstObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void firstDeletedRecordAnnotatedTest() {
+        Float firstObjectFloat = new Float(15F);
+        Float secondObjectFloat = new Float(25F);
+        Float thirdObjectFloat = new Float(35F);
+        Float fourthObjectFloat = new Float(45F);
+        save(new FloatFieldAnnotatedModel(firstObjectFloat));
+        save(new FloatFieldAnnotatedModel(secondObjectFloat));
+        save(new FloatFieldAnnotatedModel(thirdObjectFloat));
+        save(new FloatFieldAnnotatedModel(fourthObjectFloat));
+        FloatFieldAnnotatedModel firstRecord = SugarRecord.findById(FloatFieldAnnotatedModel.class, 1);
+        SugarRecord.delete(firstRecord);
+        FloatFieldAnnotatedModel model = SugarRecord.first(FloatFieldAnnotatedModel.class);
+        assertEquals(secondObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void lastAnnotatedTest() {
+        Float firstObjectFloat = new Float(25F);
+        Float lastObjectFloat = new Float(50F);
+        save(new FloatFieldAnnotatedModel(firstObjectFloat));
+        save(new FloatFieldAnnotatedModel(lastObjectFloat));
+        FloatFieldAnnotatedModel model = SugarRecord.last(FloatFieldAnnotatedModel.class);
+        assertEquals(lastObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void lastDeletedRecordAnnotatedTest() {
+        Float firstObjectFloat = new Float(15F);
+        Float secondObjectFloat = new Float(25F);
+        Float thirdObjectFloat = new Float(35F);
+        Float fourthObjectFloat = new Float(45F);
+        save(new FloatFieldAnnotatedModel(firstObjectFloat));
+        save(new FloatFieldAnnotatedModel(secondObjectFloat));
+        save(new FloatFieldAnnotatedModel(thirdObjectFloat));
+        save(new FloatFieldAnnotatedModel(fourthObjectFloat));
+        FloatFieldAnnotatedModel lastRecord = SugarRecord.findById(FloatFieldAnnotatedModel.class, 4);
+        SugarRecord.delete(lastRecord);
+        FloatFieldAnnotatedModel model = SugarRecord.last(FloatFieldAnnotatedModel.class);
+        assertEquals(thirdObjectFloat, model.getFloat());
+    }
+
+    @Test
+    public void nullFirstAnnotatedTest() {
+        assertNull(SugarRecord.first(FloatFieldAnnotatedModel.class));
+    }
+
+    @Test
+    public void nullLastAnnotatedTest() {
+        assertNull(SugarRecord.last(FloatFieldAnnotatedModel.class));
+    }
+
+    @Test
+    public void oneItemAnnotatedTest() {
+        save(new FloatFieldAnnotatedModel(new Float(25F)));
+        FloatFieldAnnotatedModel firstModel = SugarRecord.first(FloatFieldAnnotatedModel.class);
+        FloatFieldAnnotatedModel lastModel = SugarRecord.last(FloatFieldAnnotatedModel.class);
+        assertEquals(firstModel.getFloat(), lastModel.getFloat());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/FloatFieldTests.java b/example/src/test/java/com/example/sugartest/FloatFieldTests.java
new file mode 100644
index 00000000..669f2703
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/FloatFieldTests.java
@@ -0,0 +1,76 @@
+package com.example.sugartest;
+
+
+import com.example.models.FloatFieldAnnotatedModel;
+import com.example.models.FloatFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class FloatFieldTests {
+    @Test
+    public void nullFloatExtendedTest() {
+        save(new FloatFieldExtendedModel());
+        FloatFieldExtendedModel model = SugarRecord.findById(FloatFieldExtendedModel.class, 1);
+        assertNull(model.getFloat());
+    }
+
+    @Test
+    public void nullRawFloatExtendedTest() {
+        save(new FloatFieldExtendedModel());
+        FloatFieldExtendedModel model = SugarRecord.findById(FloatFieldExtendedModel.class, 1);
+        assertEquals(0F, model.getRawFloat(), 0.0000000001F);
+    }
+
+    @Test
+    public void nullFloatAnnotatedTest() {
+        save(new FloatFieldAnnotatedModel());
+        FloatFieldAnnotatedModel model = SugarRecord.findById(FloatFieldAnnotatedModel.class, 1);
+        assertNull(model.getFloat());
+    }
+
+    @Test
+    public void nullRawFloatAnnotatedTest() {
+        save(new FloatFieldAnnotatedModel());
+        FloatFieldAnnotatedModel model = SugarRecord.findById(FloatFieldAnnotatedModel.class, 1);
+        assertEquals(0F, model.getRawFloat(), 0.0000000001F);
+    }
+
+    @Test
+    public void objectFloatExtendedTest() {
+        Float objectFloat = new Float(25F);
+        save(new FloatFieldExtendedModel(objectFloat));
+        FloatFieldExtendedModel model = SugarRecord.findById(FloatFieldExtendedModel.class, 1);
+        assertEquals(objectFloat, model.getFloat());
+    }
+
+    @Test
+    public void rawFloatExtendedTest() {
+        save(new FloatFieldExtendedModel(25F));
+        FloatFieldExtendedModel model = SugarRecord.findById(FloatFieldExtendedModel.class, 1);
+        assertEquals(25F, model.getRawFloat(), 0.0000000001F);
+    }
+
+    @Test
+    public void objectFloatAnnotatedTest() {
+        Float objectFloat = new Float(25F);
+        save(new FloatFieldAnnotatedModel(objectFloat));
+        FloatFieldAnnotatedModel model = SugarRecord.findById(FloatFieldAnnotatedModel.class, 1);
+        assertEquals(objectFloat, model.getFloat());
+    }
+
+    @Test
+    public void rawFloatAnnotatedTest() {
+        save(new FloatFieldAnnotatedModel(25F));
+        FloatFieldAnnotatedModel model = SugarRecord.findById(FloatFieldAnnotatedModel.class, 1);
+        assertEquals(25F, model.getRawFloat(), 0.0000000001F);
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/IncompleteAnnotatedModelTests.java b/example/src/test/java/com/example/sugartest/IncompleteAnnotatedModelTests.java
new file mode 100644
index 00000000..4959f757
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/IncompleteAnnotatedModelTests.java
@@ -0,0 +1,28 @@
+package com.example.sugartest;
+
+
+import android.database.sqlite.SQLiteException;
+
+import com.example.models.IncompleteAnnotatedModel;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.delete;
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertFalse;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class IncompleteAnnotatedModelTests {
+    @Test(expected=SQLiteException.class)
+    public void saveNoIdFieldTest() {
+        save(new IncompleteAnnotatedModel());
+    }
+
+    @Test
+    public void deleteNoIdFieldTest() {
+        assertFalse(delete(new IncompleteAnnotatedModel()));
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/IntegerFieldTests.java b/example/src/test/java/com/example/sugartest/IntegerFieldTests.java
new file mode 100644
index 00000000..badb29dd
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/IntegerFieldTests.java
@@ -0,0 +1,76 @@
+package com.example.sugartest;
+
+
+import com.example.models.IntegerFieldAnnotatedModel;
+import com.example.models.IntegerFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class IntegerFieldTests {
+    @Test
+    public void nullIntegerExtendedTest() {
+        save(new IntegerFieldExtendedModel());
+        IntegerFieldExtendedModel model = SugarRecord.findById(IntegerFieldExtendedModel.class, 1);
+        assertNull(model.getInteger());
+    }
+
+    @Test
+    public void nullIntExtendedTest() {
+        save(new IntegerFieldExtendedModel());
+        IntegerFieldExtendedModel model = SugarRecord.findById(IntegerFieldExtendedModel.class, 1);
+        assertEquals(0, model.getInt());
+    }
+
+    @Test
+    public void nullIntegerAnnotatedTest() {
+        save(new IntegerFieldAnnotatedModel());
+        IntegerFieldAnnotatedModel model = SugarRecord.findById(IntegerFieldAnnotatedModel.class, 1);
+        assertNull(model.getInteger());
+    }
+
+    @Test
+    public void nullIntAnnotatedTest() {
+        save(new IntegerFieldAnnotatedModel());
+        IntegerFieldAnnotatedModel model = SugarRecord.findById(IntegerFieldAnnotatedModel.class, 1);
+        assertEquals(0, model.getInt());
+    }
+
+    @Test
+    public void integerExtendedTest() {
+        Integer integer = new Integer(25);
+        save(new IntegerFieldExtendedModel(integer));
+        IntegerFieldExtendedModel model = SugarRecord.findById(IntegerFieldExtendedModel.class, 1);
+        assertEquals(integer, model.getInteger());
+    }
+
+    @Test
+    public void intExtendedTest() {
+        save(new IntegerFieldExtendedModel(25));
+        IntegerFieldExtendedModel model = SugarRecord.findById(IntegerFieldExtendedModel.class, 1);
+        assertEquals(25, model.getInt());
+    }
+
+    @Test
+    public void integerAnnotatedTest() {
+        Integer integer = new Integer(25);
+        save(new IntegerFieldAnnotatedModel(integer));
+        IntegerFieldAnnotatedModel model = SugarRecord.findById(IntegerFieldAnnotatedModel.class, 1);
+        assertEquals(integer, model.getInteger());
+    }
+
+    @Test
+    public void intAnnotatedTest() {
+        save(new IntegerFieldAnnotatedModel(25));
+        IntegerFieldAnnotatedModel model = SugarRecord.findById(IntegerFieldAnnotatedModel.class, 1);
+        assertEquals(25, model.getInt());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java b/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java
new file mode 100644
index 00000000..e6dfb8e3
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/ListAllOrderByTests.java
@@ -0,0 +1,53 @@
+package com.example.sugartest;
+
+
+import com.example.models.IntegerFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class ListAllOrderByTests {
+    @Test
+    public void listAllOrderByEmptyTest() {
+        assertEquals(0L, SugarRecord.listAll(IntegerFieldExtendedModel.class, "id").size());
+    }
+
+    @Test
+    public void listAllOrderByIdTest() {
+        for(int i = 1; i <= 100; i++) {
+            save(new IntegerFieldExtendedModel(i));
+        }
+        List<IntegerFieldExtendedModel> models =
+                SugarRecord.listAll(IntegerFieldExtendedModel.class, "id");
+        assertEquals(100L, models.size());
+        Long id = models.get(0).getId();
+        for(int i = 1; i < 100; i++) {
+            assertTrue(id <models.get(i).getId());
+        }
+    }
+
+    @Test
+    public void listAllOrderByFieldTest() {
+        for(int i = 1; i <= 100; i++) {
+            save(new IntegerFieldExtendedModel(i));
+        }
+        List<IntegerFieldExtendedModel> models =
+                SugarRecord.listAll(IntegerFieldExtendedModel.class, "raw_integer");
+        assertEquals(100L, models.size());
+        int raw = models.get(0).getInt();
+        for(int i = 1; i < 100; i++) {
+            assertTrue(raw < models.get(i).getInt());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/LongFieldTests.java b/example/src/test/java/com/example/sugartest/LongFieldTests.java
new file mode 100644
index 00000000..5f3f8998
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/LongFieldTests.java
@@ -0,0 +1,76 @@
+package com.example.sugartest;
+
+
+import com.example.models.LongFieldAnnotatedModel;
+import com.example.models.LongFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class LongFieldTests {
+    @Test
+    public void nullLongExtendedTest() {
+        save(new LongFieldExtendedModel());
+        LongFieldExtendedModel model = SugarRecord.findById(LongFieldExtendedModel.class, 1);
+        assertNull(model.getLong());
+    }
+
+    @Test
+    public void nullRawLongExtendedTest() {
+        save(new LongFieldExtendedModel());
+        LongFieldExtendedModel model = SugarRecord.findById(LongFieldExtendedModel.class, 1);
+        assertEquals(0L, model.getRawLong());
+    }
+
+    @Test
+    public void nullLongAnnotatedTest() {
+        save(new LongFieldAnnotatedModel());
+        LongFieldAnnotatedModel model = SugarRecord.findById(LongFieldAnnotatedModel.class, 1);
+        assertNull(model.getLong());
+    }
+
+    @Test
+    public void nullRawLongAnnotatedTest() {
+        save(new LongFieldAnnotatedModel());
+        LongFieldAnnotatedModel model = SugarRecord.findById(LongFieldAnnotatedModel.class, 1);
+        assertEquals(0L, model.getRawLong());
+    }
+
+    @Test
+    public void objectLongExtendedTest() {
+        Long objectLong = new Long(25L);
+        save(new LongFieldExtendedModel(objectLong));
+        LongFieldExtendedModel model = SugarRecord.findById(LongFieldExtendedModel.class, 1);
+        assertEquals(objectLong, model.getLong());
+    }
+
+    @Test
+    public void rawLongExtendedTest() {
+        save(new LongFieldExtendedModel(25L));
+        LongFieldExtendedModel model = SugarRecord.findById(LongFieldExtendedModel.class, 1);
+        assertEquals(25L, model.getRawLong());
+    }
+
+    @Test
+    public void objectLongAnnotatedTest() {
+        Long objectLong = new Long(25L);
+        save(new LongFieldAnnotatedModel(objectLong));
+        LongFieldAnnotatedModel model = SugarRecord.findById(LongFieldAnnotatedModel.class, 1);
+        assertEquals(objectLong, model.getLong());
+    }
+
+    @Test
+    public void rawLongAnnotatedTest() {
+        save(new LongFieldAnnotatedModel(25L));
+        LongFieldAnnotatedModel model = SugarRecord.findById(LongFieldAnnotatedModel.class, 1);
+        assertEquals(25L, model.getRawLong());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/MultipleSaveTests.java b/example/src/test/java/com/example/sugartest/MultipleSaveTests.java
new file mode 100644
index 00000000..05dc4939
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/MultipleSaveTests.java
@@ -0,0 +1,93 @@
+package com.example.sugartest;
+
+
+import com.example.models.StringFieldAnnotatedModel;
+import com.example.models.StringFieldAnnotatedNoIdModel;
+import com.example.models.StringFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class MultipleSaveTests {
+    @Test
+    public void stringMultipleSaveOriginalExtendedTest() {
+        String string = "Test String";
+        StringFieldExtendedModel model = new StringFieldExtendedModel(string);
+        long id = save(model);
+        StringFieldExtendedModel query = SugarRecord.findById(StringFieldExtendedModel.class, id);
+        assertEquals(string, query.getString());
+        model.setString("Another test");
+        assertEquals(id, save(model));
+        assertNull(SugarRecord.findById(StringFieldExtendedModel.class, 2));
+    }
+
+    @Test
+    public void stringMultipleSaveQueriedExtendedTest() {
+        String string = "Test String";
+        StringFieldExtendedModel model = new StringFieldExtendedModel(string);
+        long id = save(model);
+        StringFieldExtendedModel query = SugarRecord.findById(StringFieldExtendedModel.class, id);
+        assertEquals(string, query.getString());
+        query.setString("Another test");
+        assertEquals(id, save(query));
+        assertNull(SugarRecord.findById(StringFieldExtendedModel.class, 2));
+    }
+
+    @Test
+    public void stringMultipleSaveOriginalAnnotatedTest() {
+        String string = "Test String";
+        StringFieldAnnotatedModel model = new StringFieldAnnotatedModel(string);
+        long id = save(model);
+        StringFieldAnnotatedModel query = SugarRecord.findById(StringFieldAnnotatedModel.class, id);
+        assertEquals(string, query.getString());
+        model.setString("Another test");
+        assertEquals(id, save(model));
+        assertNull(SugarRecord.findById(StringFieldAnnotatedModel.class, 2));
+    }
+
+    @Test
+    public void stringMultipleSaveQueriedAnnotatedTest() {
+        String string = "Test String";
+        StringFieldAnnotatedModel model = new StringFieldAnnotatedModel(string);
+        long id = save(model);
+        StringFieldAnnotatedModel query = SugarRecord.findById(StringFieldAnnotatedModel.class, id);
+        assertEquals(string, query.getString());
+        query.setString("Another test");
+        assertEquals(id, save(query));
+        assertNull(SugarRecord.findById(StringFieldAnnotatedModel.class, 2));
+    }
+
+    @Test
+    public void stringMultipleSaveOriginalAnnotatedNoIdTest() {
+        String string = "Test String";
+        StringFieldAnnotatedNoIdModel model = new StringFieldAnnotatedNoIdModel(string);
+        long id = save(model);
+        StringFieldAnnotatedNoIdModel query =
+                SugarRecord.findById(StringFieldAnnotatedNoIdModel.class, id);
+        assertEquals(string, query.getString());
+        model.setString("Another test");
+        assertEquals(id, save(model));
+        assertNull(SugarRecord.findById(StringFieldAnnotatedNoIdModel.class, 2));
+    }
+
+    @Test
+    public void stringMultipleSaveQueriedAnnotatedNoIdTest() {
+        String string = "Test String";
+        StringFieldAnnotatedNoIdModel model = new StringFieldAnnotatedNoIdModel(string);
+        long id = save(model);
+        StringFieldAnnotatedNoIdModel query =
+                SugarRecord.findById(StringFieldAnnotatedNoIdModel.class, id);
+        assertEquals(string, query.getString());
+        query.setString("Another test");
+        assertEquals(id, save(query));
+        assertNull(SugarRecord.findById(StringFieldAnnotatedNoIdModel.class, 2));
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/NestedAnnotatedTests.java b/example/src/test/java/com/example/sugartest/NestedAnnotatedTests.java
new file mode 100644
index 00000000..267441ad
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/NestedAnnotatedTests.java
@@ -0,0 +1,131 @@
+package com.example.sugartest;
+
+import com.example.models.NestedAnnotatedModel;
+import com.example.models.RelationshipAnnotatedModel;
+import com.example.models.SimpleAnnotatedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class NestedAnnotatedTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(NestedAnnotatedModel.class));
+        assertEquals(0L, SugarRecord.count(RelationshipAnnotatedModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
+        save(nested);
+        save(new NestedAnnotatedModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(NestedAnnotatedModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
+        save(nested);
+        save(new NestedAnnotatedModel(nested));
+        save(new NestedAnnotatedModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(NestedAnnotatedModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        SimpleAnnotatedModel another_simple = new SimpleAnnotatedModel();
+        save(another_simple);
+        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
+        save(nested);
+        RelationshipAnnotatedModel another_nested = new RelationshipAnnotatedModel(another_simple);
+        save(another_nested);
+        save(new NestedAnnotatedModel(nested));
+        save(new NestedAnnotatedModel(another_nested));
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(NestedAnnotatedModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedAnnotatedModel(nested));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(NestedAnnotatedModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
+            save(nested);
+            save(new NestedAnnotatedModel(nested));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(NestedAnnotatedModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedAnnotatedModel(nested));
+        }
+        List<NestedAnnotatedModel> models = SugarRecord.listAll(NestedAnnotatedModel.class);
+        assertEquals(100, models.size());
+        for (NestedAnnotatedModel model : models) {
+            assertEquals(nested.getId(), model.getNested().getId());
+            assertEquals(simple.getId(), model.getNested().getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            RelationshipAnnotatedModel nested = new RelationshipAnnotatedModel(simple);
+            save(nested);
+            save(new NestedAnnotatedModel(nested));
+        }
+        List<NestedAnnotatedModel> models = SugarRecord.listAll(NestedAnnotatedModel.class);
+        assertEquals(100, models.size());
+        for (NestedAnnotatedModel model : models) {
+            assertEquals(model.getId(), model.getNested().getId());
+            assertEquals(model.getId(), model.getNested().getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/NestedExtendedTests.java b/example/src/test/java/com/example/sugartest/NestedExtendedTests.java
new file mode 100644
index 00000000..1c4171f6
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/NestedExtendedTests.java
@@ -0,0 +1,131 @@
+package com.example.sugartest;
+
+import com.example.models.NestedExtendedModel;
+import com.example.models.RelationshipExtendedModel;
+import com.example.models.SimpleExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class NestedExtendedTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(NestedExtendedModel.class));
+        assertEquals(0L, SugarRecord.count(RelationshipExtendedModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
+        save(nested);
+        save(new NestedExtendedModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(NestedExtendedModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
+        save(nested);
+        save(new NestedExtendedModel(nested));
+        save(new NestedExtendedModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(NestedExtendedModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        SimpleExtendedModel another_simple = new SimpleExtendedModel();
+        save(another_simple);
+        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
+        save(nested);
+        RelationshipExtendedModel another_nested = new RelationshipExtendedModel(another_simple);
+        save(another_nested);
+        save(new NestedExtendedModel(nested));
+        save(new NestedExtendedModel(another_nested));
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(NestedExtendedModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedExtendedModel(nested));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(NestedExtendedModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
+            save(nested);
+            save(new NestedExtendedModel(nested));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(NestedExtendedModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedExtendedModel(nested));
+        }
+        List<NestedExtendedModel> models = SugarRecord.listAll(NestedExtendedModel.class);
+        assertEquals(100, models.size());
+        for (NestedExtendedModel model : models) {
+            assertEquals(nested.getId(), model.getNested().getId());
+            assertEquals(simple.getId(), model.getNested().getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            RelationshipExtendedModel nested = new RelationshipExtendedModel(simple);
+            save(nested);
+            save(new NestedExtendedModel(nested));
+        }
+        List<NestedExtendedModel> models = SugarRecord.listAll(NestedExtendedModel.class);
+        assertEquals(100, models.size());
+        for (NestedExtendedModel model : models) {
+            assertEquals(model.getId(), model.getNested().getId());
+            assertEquals(model.getId(), model.getNested().getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedAATests.java b/example/src/test/java/com/example/sugartest/NestedMixedAATests.java
new file mode 100644
index 00000000..7d25a88c
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/NestedMixedAATests.java
@@ -0,0 +1,131 @@
+package com.example.sugartest;
+
+import com.example.models.NestedMixedAAModel;
+import com.example.models.RelationshipMixedAModel;
+import com.example.models.SimpleAnnotatedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class NestedMixedAATests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(NestedMixedAAModel.class));
+        assertEquals(0L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        save(new NestedMixedAAModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(1L, SugarRecord.count(NestedMixedAAModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        save(new NestedMixedAAModel(nested));
+        save(new NestedMixedAAModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedAAModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        SimpleAnnotatedModel another_simple = new SimpleAnnotatedModel();
+        save(another_simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        RelationshipMixedAModel another_nested = new RelationshipMixedAModel(another_simple);
+        save(another_nested);
+        save(new NestedMixedAAModel(nested));
+        save(new NestedMixedAAModel(another_nested));
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedAAModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedAAModel(nested));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedAAModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+            save(nested);
+            save(new NestedMixedAAModel(nested));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedAAModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedAAModel(nested));
+        }
+        List<NestedMixedAAModel> models = SugarRecord.listAll(NestedMixedAAModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedAAModel model : models) {
+            assertEquals(nested.getId(), model.getNested().getId());
+            assertEquals(simple.getId(), model.getNested().getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+            save(nested);
+            save(new NestedMixedAAModel(nested));
+        }
+        List<NestedMixedAAModel> models = SugarRecord.listAll(NestedMixedAAModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedAAModel model : models) {
+            assertEquals(model.getId(), model.getNested().getId());
+            assertEquals(model.getId(), model.getNested().getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedABTests.java b/example/src/test/java/com/example/sugartest/NestedMixedABTests.java
new file mode 100644
index 00000000..78de85ef
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/NestedMixedABTests.java
@@ -0,0 +1,131 @@
+package com.example.sugartest;
+
+import com.example.models.NestedMixedABModel;
+import com.example.models.RelationshipMixedBModel;
+import com.example.models.SimpleExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class NestedMixedABTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(NestedMixedABModel.class));
+        assertEquals(0L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        save(new NestedMixedABModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(1L, SugarRecord.count(NestedMixedABModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        save(new NestedMixedABModel(nested));
+        save(new NestedMixedABModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedABModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        SimpleExtendedModel another_simple = new SimpleExtendedModel();
+        save(another_simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        RelationshipMixedBModel another_nested = new RelationshipMixedBModel(another_simple);
+        save(another_nested);
+        save(new NestedMixedABModel(nested));
+        save(new NestedMixedABModel(another_nested));
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedABModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedABModel(nested));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedABModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+            save(nested);
+            save(new NestedMixedABModel(nested));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedABModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedABModel(nested));
+        }
+        List<NestedMixedABModel> models = SugarRecord.listAll(NestedMixedABModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedABModel model : models) {
+            assertEquals(nested.getId(), model.getNested().getId());
+            assertEquals(simple.getId(), model.getNested().getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+            save(nested);
+            save(new NestedMixedABModel(nested));
+        }
+        List<NestedMixedABModel> models = SugarRecord.listAll(NestedMixedABModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedABModel model : models) {
+            assertEquals(model.getId(), model.getNested().getId());
+            assertEquals(model.getId(), model.getNested().getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedBATests.java b/example/src/test/java/com/example/sugartest/NestedMixedBATests.java
new file mode 100644
index 00000000..23d2d14b
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/NestedMixedBATests.java
@@ -0,0 +1,131 @@
+package com.example.sugartest;
+
+import com.example.models.NestedMixedBAModel;
+import com.example.models.RelationshipMixedAModel;
+import com.example.models.SimpleAnnotatedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class NestedMixedBATests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(NestedMixedBAModel.class));
+        assertEquals(0L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        save(new NestedMixedBAModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(1L, SugarRecord.count(NestedMixedBAModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        save(new NestedMixedBAModel(nested));
+        save(new NestedMixedBAModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedBAModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        SimpleAnnotatedModel another_simple = new SimpleAnnotatedModel();
+        save(another_simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        RelationshipMixedAModel another_nested = new RelationshipMixedAModel(another_simple);
+        save(another_nested);
+        save(new NestedMixedBAModel(nested));
+        save(new NestedMixedBAModel(another_nested));
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedBAModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedBAModel(nested));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedBAModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+            save(nested);
+            save(new NestedMixedBAModel(nested));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedBAModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedBAModel(nested));
+        }
+        List<NestedMixedBAModel> models = SugarRecord.listAll(NestedMixedBAModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedBAModel model : models) {
+            assertEquals(nested.getId(), model.getNested().getId());
+            assertEquals(simple.getId(), model.getNested().getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            RelationshipMixedAModel nested = new RelationshipMixedAModel(simple);
+            save(nested);
+            save(new NestedMixedBAModel(nested));
+        }
+        List<NestedMixedBAModel> models = SugarRecord.listAll(NestedMixedBAModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedBAModel model : models) {
+            assertEquals(model.getId(), model.getNested().getId());
+            assertEquals(model.getId(), model.getNested().getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/NestedMixedBBTests.java b/example/src/test/java/com/example/sugartest/NestedMixedBBTests.java
new file mode 100644
index 00000000..dc325a90
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/NestedMixedBBTests.java
@@ -0,0 +1,131 @@
+package com.example.sugartest;
+
+import com.example.models.NestedMixedBBModel;
+import com.example.models.RelationshipMixedBModel;
+import com.example.models.SimpleExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class NestedMixedBBTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(NestedMixedBBModel.class));
+        assertEquals(0L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        save(new NestedMixedBBModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(1L, SugarRecord.count(NestedMixedBBModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        save(new NestedMixedBBModel(nested));
+        save(new NestedMixedBBModel(nested));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedBBModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        SimpleExtendedModel another_simple = new SimpleExtendedModel();
+        save(another_simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        RelationshipMixedBModel another_nested = new RelationshipMixedBModel(another_simple);
+        save(another_nested);
+        save(new NestedMixedBBModel(nested));
+        save(new NestedMixedBBModel(another_nested));
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(2L, SugarRecord.count(NestedMixedBBModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedBBModel(nested));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedBBModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+            save(nested);
+            save(new NestedMixedBBModel(nested));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(100L, SugarRecord.count(NestedMixedBBModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+        save(nested);
+        for (int i = 1; i <= 100; i++) {
+            save(new NestedMixedBBModel(nested));
+        }
+        List<NestedMixedBBModel> models = SugarRecord.listAll(NestedMixedBBModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedBBModel model : models) {
+            assertEquals(nested.getId(), model.getNested().getId());
+            assertEquals(simple.getId(), model.getNested().getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            RelationshipMixedBModel nested = new RelationshipMixedBModel(simple);
+            save(nested);
+            save(new NestedMixedBBModel(nested));
+        }
+        List<NestedMixedBBModel> models = SugarRecord.listAll(NestedMixedBBModel.class);
+        assertEquals(100, models.size());
+        for (NestedMixedBBModel model : models) {
+            assertEquals(model.getId(), model.getNested().getId());
+            assertEquals(model.getId(), model.getNested().getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/NoSugarModelTests.java b/example/src/test/java/com/example/sugartest/NoSugarModelTests.java
new file mode 100644
index 00000000..f638d56b
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/NoSugarModelTests.java
@@ -0,0 +1,28 @@
+package com.example.sugartest;
+
+import com.example.models.NoSugarModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class NoSugarModelTests {
+    @Test
+    public void deleteTest() throws Exception {
+        NoSugarModel model = new NoSugarModel();
+        assertFalse(SugarRecord.delete(model));
+    }
+
+    @Test
+    public void saveInTransactionTest() throws Exception {
+        SugarRecord.saveInTx(new NoSugarModel(), new NoSugarModel());
+        assertEquals(-1L, SugarRecord.count(NoSugarModel.class));
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/RelationshipAnnotatedTests.java b/example/src/test/java/com/example/sugartest/RelationshipAnnotatedTests.java
new file mode 100644
index 00000000..83326c0c
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/RelationshipAnnotatedTests.java
@@ -0,0 +1,108 @@
+package com.example.sugartest;
+
+import com.example.models.RelationshipAnnotatedModel;
+import com.example.models.SimpleAnnotatedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class RelationshipAnnotatedTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(RelationshipAnnotatedModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        save(new RelationshipAnnotatedModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipAnnotatedModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        save(new RelationshipAnnotatedModel(simple));
+        save(new RelationshipAnnotatedModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipAnnotatedModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        SimpleAnnotatedModel another_simple = new SimpleAnnotatedModel();
+        save(another_simple);
+        save(new RelationshipAnnotatedModel(simple));
+        save(new RelationshipAnnotatedModel(another_simple));
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipAnnotatedModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipAnnotatedModel(simple));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipAnnotatedModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            save(new RelationshipAnnotatedModel(simple));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipAnnotatedModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipAnnotatedModel(simple));
+        }
+        List<RelationshipAnnotatedModel> models =
+                SugarRecord.listAll(RelationshipAnnotatedModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipAnnotatedModel model : models) {
+            assertEquals(simple.getId(), model.getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            save(new RelationshipAnnotatedModel(simple));
+        }
+        List<RelationshipAnnotatedModel> models =
+                SugarRecord.listAll(RelationshipAnnotatedModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipAnnotatedModel model : models) {
+            assertEquals(model.getId(), model.getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/RelationshipExtendedTests.java b/example/src/test/java/com/example/sugartest/RelationshipExtendedTests.java
new file mode 100644
index 00000000..f3ba1355
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/RelationshipExtendedTests.java
@@ -0,0 +1,108 @@
+package com.example.sugartest;
+
+import com.example.models.RelationshipExtendedModel;
+import com.example.models.SimpleExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class RelationshipExtendedTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(RelationshipExtendedModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        save(new RelationshipExtendedModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipExtendedModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        save(new RelationshipExtendedModel(simple));
+        save(new RelationshipExtendedModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipExtendedModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        SimpleExtendedModel another_simple = new SimpleExtendedModel();
+        save(another_simple);
+        save(new RelationshipExtendedModel(simple));
+        save(new RelationshipExtendedModel(another_simple));
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipExtendedModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipExtendedModel(simple));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipExtendedModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            save(new RelationshipExtendedModel(simple));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipExtendedModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipExtendedModel(simple));
+        }
+        List<RelationshipExtendedModel> models =
+                SugarRecord.listAll(RelationshipExtendedModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipExtendedModel model : models) {
+            assertEquals(simple.getId(), model.getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            save(new RelationshipExtendedModel(simple));
+        }
+        List<RelationshipExtendedModel> models =
+                SugarRecord.listAll(RelationshipExtendedModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipExtendedModel model : models) {
+            assertEquals(model.getId(), model.getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/RelationshipMixedATests.java b/example/src/test/java/com/example/sugartest/RelationshipMixedATests.java
new file mode 100644
index 00000000..2793d247
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/RelationshipMixedATests.java
@@ -0,0 +1,108 @@
+package com.example.sugartest;
+
+import com.example.models.RelationshipMixedAModel;
+import com.example.models.SimpleAnnotatedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class RelationshipMixedATests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(RelationshipMixedAModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        save(new RelationshipMixedAModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedAModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        save(new RelationshipMixedAModel(simple));
+        save(new RelationshipMixedAModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedAModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        SimpleAnnotatedModel another_simple = new SimpleAnnotatedModel();
+        save(another_simple);
+        save(new RelationshipMixedAModel(simple));
+        save(new RelationshipMixedAModel(another_simple));
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedAModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipMixedAModel(simple));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedAModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            save(new RelationshipMixedAModel(simple));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedAModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipMixedAModel(simple));
+        }
+        List<RelationshipMixedAModel> models =
+                SugarRecord.listAll(RelationshipMixedAModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipMixedAModel model : models) {
+            assertEquals(simple.getId(), model.getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleAnnotatedModel simple = new SimpleAnnotatedModel();
+            save(simple);
+            save(new RelationshipMixedAModel(simple));
+        }
+        List<RelationshipMixedAModel> models =
+                SugarRecord.listAll(RelationshipMixedAModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipMixedAModel model : models) {
+            assertEquals(model.getId(), model.getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/RelationshipMixedBTests.java b/example/src/test/java/com/example/sugartest/RelationshipMixedBTests.java
new file mode 100644
index 00000000..408ffefe
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/RelationshipMixedBTests.java
@@ -0,0 +1,108 @@
+package com.example.sugartest;
+
+import com.example.models.RelationshipMixedBModel;
+import com.example.models.SimpleExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class RelationshipMixedBTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(RelationshipMixedBModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        save(new RelationshipMixedBModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(1L, SugarRecord.count(RelationshipMixedBModel.class));
+    }
+
+    @Test
+    public void twoSameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        save(new RelationshipMixedBModel(simple));
+        save(new RelationshipMixedBModel(simple));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedBModel.class));
+    }
+
+    @Test
+    public void twoDifferentSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        SimpleExtendedModel another_simple = new SimpleExtendedModel();
+        save(another_simple);
+        save(new RelationshipMixedBModel(simple));
+        save(new RelationshipMixedBModel(another_simple));
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2L, SugarRecord.count(RelationshipMixedBModel.class));
+    }
+
+    @Test
+    public void manySameSaveTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipMixedBModel(simple));
+        }
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedBModel.class));
+    }
+
+    @Test
+    public void manyDifferentSaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            save(new RelationshipMixedBModel(simple));
+        }
+        assertEquals(100L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(100L, SugarRecord.count(RelationshipMixedBModel.class));
+    }
+
+    @Test
+    public void listAllSameTest() throws Exception {
+        SimpleExtendedModel simple = new SimpleExtendedModel();
+        save(simple);
+        for (int i = 1; i <= 100; i++) {
+            save(new RelationshipMixedBModel(simple));
+        }
+        List<RelationshipMixedBModel> models =
+                SugarRecord.listAll(RelationshipMixedBModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipMixedBModel model : models) {
+            assertEquals(simple.getId(), model.getSimple().getId());
+        }
+    }
+
+    @Test
+    public void listAllDifferentTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            SimpleExtendedModel simple = new SimpleExtendedModel();
+            save(simple);
+            save(new RelationshipMixedBModel(simple));
+        }
+        List<RelationshipMixedBModel> models =
+                SugarRecord.listAll(RelationshipMixedBModel.class);
+        assertEquals(100, models.size());
+        for (RelationshipMixedBModel model : models) {
+            assertEquals(model.getId(), model.getSimple().getId());
+        }
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/RobolectricGradleTestRunner.java b/example/src/test/java/com/example/sugartest/RobolectricGradleTestRunner.java
new file mode 100644
index 00000000..765df649
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/RobolectricGradleTestRunner.java
@@ -0,0 +1,23 @@
+package com.example.sugartest;
+
+import com.example.ClientApp;
+
+import org.junit.runners.model.InitializationError;
+import org.robolectric.AndroidManifest;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+import org.robolectric.res.Fs;
+
+public class RobolectricGradleTestRunner extends RobolectricTestRunner {
+    public RobolectricGradleTestRunner(Class<?> testClass) throws InitializationError {
+        super(testClass);
+    }
+
+    @Override protected AndroidManifest getAppManifest(Config config) {
+        String myAppPath = ClientApp.class.getProtectionDomain().getCodeSource().getLocation().getPath();
+        String manifestPath = myAppPath + "../../../../src/main/AndroidManifest.xml";
+        String resPath = myAppPath + "../../../../src/main/res";
+        String assetPath = myAppPath + "../../../../src/main/assets";
+        return createAppManifest(Fs.fileFromPath(manifestPath), Fs.fileFromPath(resPath), Fs.fileFromPath(assetPath));
+    }
+}
\ No newline at end of file
diff --git a/example/src/test/java/com/example/sugartest/ShortFieldTests.java b/example/src/test/java/com/example/sugartest/ShortFieldTests.java
new file mode 100644
index 00000000..dd22b662
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/ShortFieldTests.java
@@ -0,0 +1,76 @@
+package com.example.sugartest;
+
+
+import com.example.models.ShortFieldAnnotatedModel;
+import com.example.models.ShortFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class ShortFieldTests {
+    @Test
+    public void nullShortExtendedTest() {
+        save(new ShortFieldExtendedModel());
+        ShortFieldExtendedModel model = SugarRecord.findById(ShortFieldExtendedModel.class, 1);
+        assertNull(model.getShort());
+    }
+
+    @Test
+    public void nullRawShortExtendedTest() {
+        save(new ShortFieldExtendedModel());
+        ShortFieldExtendedModel model = SugarRecord.findById(ShortFieldExtendedModel.class, 1);
+        assertEquals((short) 0, model.getRawShort());
+    }
+
+    @Test
+    public void nullShortAnnotatedTest() {
+        save(new ShortFieldAnnotatedModel());
+        ShortFieldAnnotatedModel model = SugarRecord.findById(ShortFieldAnnotatedModel.class, 1);
+        assertNull(model.getShort());
+    }
+
+    @Test
+    public void nullRawShortAnnotatedTest() {
+        save(new ShortFieldAnnotatedModel());
+        ShortFieldAnnotatedModel model = SugarRecord.findById(ShortFieldAnnotatedModel.class, 1);
+        assertEquals((short) 0, model.getRawShort());
+    }
+
+    @Test
+    public void objectShortExtendedTest() {
+        Short objectShort = new Short((short) 25);
+        save(new ShortFieldExtendedModel(objectShort));
+        ShortFieldExtendedModel model = SugarRecord.findById(ShortFieldExtendedModel.class, 1);
+        assertEquals(objectShort, model.getShort());
+    }
+
+    @Test
+    public void rawShortExtendedTest() {
+        save(new ShortFieldExtendedModel((short) 25));
+        ShortFieldExtendedModel model = SugarRecord.findById(ShortFieldExtendedModel.class, 1);
+        assertEquals((short) 25, model.getRawShort());
+    }
+
+    @Test
+    public void objectShortAnnotatedTest() {
+        Short objectShort = new Short((short) 25);
+        save(new ShortFieldAnnotatedModel(objectShort));
+        ShortFieldAnnotatedModel model = SugarRecord.findById(ShortFieldAnnotatedModel.class, 1);
+        assertEquals(objectShort, model.getShort());
+    }
+
+    @Test
+    public void rawShortAnnotatedTest() {
+        save(new ShortFieldAnnotatedModel((short) 25));
+        ShortFieldAnnotatedModel model = SugarRecord.findById(ShortFieldAnnotatedModel.class, 1);
+        assertEquals((short) 25, model.getRawShort());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java b/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
new file mode 100644
index 00000000..77a14677
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/SimpleAnnotatedModelTests.java
@@ -0,0 +1,356 @@
+package com.example.sugartest;
+
+import com.example.models.SimpleAnnotatedModel;
+import com.orm.SugarRecord;
+import com.orm.util.NamingHelper;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class SimpleAnnotatedModelTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void twoSaveTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void manySaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        assertEquals(100L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void defaultIdTest() throws Exception {
+        assertEquals(1L, save(new SimpleAnnotatedModel()));
+    }
+
+    @Test
+    public void whereCountTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class, "id = ?", new String[]{"1"}));
+    }
+
+    @Test
+    public void whereNoCountTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class, "id = ?", new String[]{"1"}));
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class, "id = ?", new String[]{"3"}));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class, "id = ?", new String[]{"a"}));
+    }
+
+    @Test
+    public void whereBrokenCountTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        assertEquals(-1L, SugarRecord.count(SimpleAnnotatedModel.class, "di = ?", new String[]{"1"}));
+    }
+
+    @Test
+    public void deleteTest() throws Exception {
+        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
+        save(model);
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertTrue(SugarRecord.delete(model));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteUnsavedTest() throws Exception {
+        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertFalse(SugarRecord.delete(model));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteWrongTest() throws Exception {
+        SimpleAnnotatedModel model = new SimpleAnnotatedModel();
+        save(model);
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+        Field idField = model.getClass().getDeclaredField("id");
+        idField.setAccessible(true);
+        idField.set(model, Long.MAX_VALUE);
+        assertFalse(SugarRecord.delete(model));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteAllTest() throws Exception {
+        int elementNumber = 100;
+        for (int i = 1; i <= elementNumber; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        assertEquals(elementNumber, SugarRecord.deleteAll(SimpleAnnotatedModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteAllWhereTest() throws Exception {
+        int elementNumber = 100;
+        for (int i = 1; i <= elementNumber; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        assertEquals(elementNumber - 1, SugarRecord.deleteAll(SimpleAnnotatedModel.class,
+                                                              "id > ?",
+                                                              new String[]{"1"}));
+        assertEquals(1L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteInTransactionFewTest() throws Exception {
+        SimpleAnnotatedModel first = new SimpleAnnotatedModel();
+        SimpleAnnotatedModel second = new SimpleAnnotatedModel();
+        SimpleAnnotatedModel third = new SimpleAnnotatedModel();
+        save(first);
+        save(second);
+        // Not saving last model
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(2, SugarRecord.deleteInTx(first, second, third));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void deleteInTransactionManyTest() throws Exception {
+        long elementNumber = 100;
+        List<SimpleAnnotatedModel> models = new ArrayList<>();
+        for (int i = 1; i <= elementNumber; i++) {
+            SimpleAnnotatedModel model = new SimpleAnnotatedModel();
+            models.add(model);
+            // Not saving last model
+            if (i < elementNumber) {
+                save(model);
+            }
+        }
+        assertEquals(elementNumber - 1, SugarRecord.count(SimpleAnnotatedModel.class));
+        assertEquals(elementNumber - 1, SugarRecord.deleteInTx(models));
+        assertEquals(0L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void saveInTransactionTest() throws Exception {
+        SugarRecord.saveInTx(new SimpleAnnotatedModel(), new SimpleAnnotatedModel());
+        assertEquals(2L, SugarRecord.count(SimpleAnnotatedModel.class));
+    }
+
+    @Test
+    public void listAllTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        List<SimpleAnnotatedModel> models = SugarRecord.listAll(SimpleAnnotatedModel.class);
+        assertEquals(100, models.size());
+        for (long i = 1; i <= 100; i++) {
+            assertEquals(new Long(i), models.get((int) i - 1).getId());
+        }
+    }
+
+    @Test
+    public void findTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.find(SimpleAnnotatedModel.class, "id = ?", "2");
+        assertEquals(1, models.size());
+        assertEquals(new Long(2L), models.get(0).getId());
+    }
+
+    @Test
+    public void findWithQueryTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findWithQuery(SimpleAnnotatedModel.class, "Select * from " +
+                        NamingHelper.toSQLName(SimpleAnnotatedModel.class) +
+                        " where id >= ? ", "50");
+        for (SimpleAnnotatedModel model : models) {
+            assertEquals(new Long(75), model.getId(), 25L);
+        }
+    }
+
+    @Test
+    public void findByIdTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        assertEquals(new Long(1L), SugarRecord.findById(SimpleAnnotatedModel.class, 1L).getId());
+    }
+
+    @Test
+    public void findByIdIntegerTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        assertEquals(new Long(1L), SugarRecord.findById(SimpleAnnotatedModel.class, 1).getId());
+    }
+
+    @Test
+    public void findByIdStringsNullTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        assertEquals(0, SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{""}).size());
+    }
+
+    @Test
+    public void findByIdStringsOneTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"1"});
+        assertEquals(1, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+    }
+
+    @Test
+    public void findByIdStringsTwoTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        save(new SimpleAnnotatedModel());
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"1", "3"});
+        assertEquals(2, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+    }
+
+    @Test
+    public void findByIdStringsManyTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"1", "3", "6", "10"});
+        assertEquals(4, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
+    @Test
+    public void findByIdStringsOrderTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        List<SimpleAnnotatedModel> models =
+                SugarRecord.findById(SimpleAnnotatedModel.class, new String[]{"10", "6", "3", "1"});
+        assertEquals(4, models.size());
+        // The order of the query doesn't matter
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
+    @Test
+    public void findByIdNullTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        assertNull(SugarRecord.findById(SimpleAnnotatedModel.class, 2L));
+    }
+
+    @Test
+    public void findAllTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        Iterator<SimpleAnnotatedModel> cursor = SugarRecord.findAll(SimpleAnnotatedModel.class);
+        for (int i = 1; i <= 100; i++) {
+            assertTrue(cursor.hasNext());
+            SimpleAnnotatedModel model = cursor.next();
+            assertNotNull(model);
+            assertEquals(new Long(i), model.getId());
+        }
+    }
+
+    @Test
+    public void findAsIteratorTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        Iterator<SimpleAnnotatedModel> cursor = SugarRecord.findAsIterator(SimpleAnnotatedModel.class,
+                "id >= ?", "50");
+        for (int i = 50; i <= 100; i++) {
+            assertTrue(cursor.hasNext());
+            SimpleAnnotatedModel model = cursor.next();
+            assertNotNull(model);
+            assertEquals(new Long(i), model.getId());
+        }
+    }
+
+    @Test
+    public void findWithQueryAsIteratorTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleAnnotatedModel());
+        }
+        Iterator<SimpleAnnotatedModel> cursor =
+                SugarRecord.findWithQueryAsIterator(SimpleAnnotatedModel.class,
+                        "Select * from " +
+                                NamingHelper.toSQLName(SimpleAnnotatedModel.class) +
+                                " where id >= ? ", "50");
+        for (int i = 50; i <= 100; i++) {
+            assertTrue(cursor.hasNext());
+            SimpleAnnotatedModel model = cursor.next();
+            assertNotNull(model);
+            assertEquals(new Long(i), model.getId());
+        }
+    }
+
+    @Test(expected=NoSuchElementException.class)
+    public void findAsIteratorOutOfBoundsTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        Iterator<SimpleAnnotatedModel> cursor = SugarRecord.findAsIterator(SimpleAnnotatedModel.class,
+                "id = ?", "1");
+        assertTrue(cursor.hasNext());
+        SimpleAnnotatedModel model = cursor.next();
+        assertNotNull(model);
+        assertEquals(new Long(1), model.getId());
+        // This should throw a NoSuchElementException
+        cursor.next();
+    }
+
+    @Test(expected=UnsupportedOperationException.class)
+    public void disallowRemoveCursorTest() throws Exception {
+        save(new SimpleAnnotatedModel());
+        Iterator<SimpleAnnotatedModel> cursor = SugarRecord.findAsIterator(SimpleAnnotatedModel.class,
+                "id = ?", "1");
+        assertTrue(cursor.hasNext());
+        SimpleAnnotatedModel model = cursor.next();
+        assertNotNull(model);
+        assertEquals(new Long(1), model.getId());
+        // This should throw a UnsupportedOperationException
+        cursor.remove();
+    }
+
+    @Test
+    public void vacuumTest() throws Exception {
+        SugarRecord.executeQuery("Vacuum");
+    }
+}
\ No newline at end of file
diff --git a/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java b/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
new file mode 100644
index 00000000..704ea5c3
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/SimpleExtendedModelTests.java
@@ -0,0 +1,363 @@
+package com.example.sugartest;
+
+import com.example.models.SimpleExtendedModel;
+import com.orm.SugarRecord;
+import com.orm.util.NamingHelper;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class SimpleExtendedModelTests {
+    @Test
+    public void emptyDatabaseTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void oneSaveTest() throws Exception {
+        save(new SimpleExtendedModel());
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void twoSaveTest() throws Exception {
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void manySaveTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleExtendedModel());
+        }
+        assertEquals(100L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void defaultIdTest() throws Exception {
+        assertEquals(1L, save(new SimpleExtendedModel()));
+    }
+
+    @Test
+    public void whereCountTest() throws Exception {
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class, "id = ?", new String[]{"1"}));
+    }
+
+    @Test
+    public void whereNoCountTest() throws Exception {
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class, "id = ?", new String[]{"1"}));
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class, "id = ?", new String[]{"3"}));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class, "id = ?", new String[]{"a"}));
+    }
+
+    @Test
+    public void whereBrokenCountTest() throws Exception {
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        assertEquals(-1L, SugarRecord.count(SimpleExtendedModel.class, "di = ?", new String[]{"1"}));
+    }
+
+    @Test
+    public void saveMethodTest() throws Exception {
+        SimpleExtendedModel model = new SimpleExtendedModel();
+        model.save();
+        assertEquals(-1L, SugarRecord.count(SimpleExtendedModel.class, "di = ?", new String[]{"1"}));
+    }
+
+    @Test
+    public void deleteTest() throws Exception {
+        SimpleExtendedModel model = new SimpleExtendedModel();
+        save(model);
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        assertTrue(SugarRecord.delete(model));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteUnsavedTest() throws Exception {
+        SimpleExtendedModel model = new SimpleExtendedModel();
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+        assertFalse(SugarRecord.delete(model));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteWrongTest() throws Exception {
+        SimpleExtendedModel model = new SimpleExtendedModel();
+        save(model);
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+        Field idField = model.getClass().getSuperclass().getDeclaredField("id");
+        idField.setAccessible(true);
+        idField.set(model, Long.MAX_VALUE);
+        assertFalse(SugarRecord.delete(model));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteAllTest() throws Exception {
+        int elementNumber = 100;
+        for (int i = 1; i <= elementNumber; i++) {
+            save(new SimpleExtendedModel());
+        }
+        assertEquals(elementNumber, SugarRecord.deleteAll(SimpleExtendedModel.class));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteAllWhereTest() throws Exception {
+        int elementNumber = 100;
+        for (int i = 1; i <= elementNumber; i++) {
+            save(new SimpleExtendedModel());
+        }
+        assertEquals(elementNumber - 1, SugarRecord.deleteAll(SimpleExtendedModel.class,
+                                                              "id > ?",
+                                                              new String[]{"1"}));
+        assertEquals(1L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteInTransactionFewTest() throws Exception {
+        SimpleExtendedModel first = new SimpleExtendedModel();
+        SimpleExtendedModel second = new SimpleExtendedModel();
+        SimpleExtendedModel third = new SimpleExtendedModel();
+        save(first);
+        save(second);
+        // Not saving last model
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(2, SugarRecord.deleteInTx(first, second, third));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void deleteInTransactionManyTest() throws Exception {
+        long elementNumber = 100;
+        List<SimpleExtendedModel> models = new ArrayList<>();
+        for (int i = 1; i <= elementNumber; i++) {
+            SimpleExtendedModel model = new SimpleExtendedModel();
+            models.add(model);
+            // Not saving last model
+            if (i < elementNumber) {
+                save(model);
+            }
+        }
+        assertEquals(elementNumber - 1, SugarRecord.count(SimpleExtendedModel.class));
+        assertEquals(elementNumber - 1, SugarRecord.deleteInTx(models));
+        assertEquals(0L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void saveInTransactionTest() throws Exception {
+        SugarRecord.saveInTx(new SimpleExtendedModel(), new SimpleExtendedModel());
+        assertEquals(2L, SugarRecord.count(SimpleExtendedModel.class));
+    }
+
+    @Test
+    public void listAllTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleExtendedModel());
+        }
+        List<SimpleExtendedModel> models = SugarRecord.listAll(SimpleExtendedModel.class);
+        assertEquals(100, models.size());
+        for (long i = 1; i <= 100; i++) {
+            assertEquals(new Long(i), models.get((int) i - 1).getId());
+        }
+    }
+
+    @Test
+    public void findTest() throws Exception {
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        List<SimpleExtendedModel> models =
+                SugarRecord.find(SimpleExtendedModel.class, "id = ?", "2");
+        assertEquals(1, models.size());
+        assertEquals(new Long(2L), models.get(0).getId());
+    }
+
+    @Test
+    public void findWithQueryTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleExtendedModel());
+        }
+        List<SimpleExtendedModel> models =
+                SugarRecord.findWithQuery(SimpleExtendedModel.class, "Select * from " +
+                                          NamingHelper.toSQLName(SimpleExtendedModel.class) +
+                                          " where id >= ? ", "50");
+        for (SimpleExtendedModel model : models) {
+            assertEquals(new Long(75), model.getId(), 25L);
+        }
+    }
+
+    @Test
+    public void findByIdTest() throws Exception {
+        save(new SimpleExtendedModel());
+        assertEquals(new Long(1L), SugarRecord.findById(SimpleExtendedModel.class, 1L).getId());
+    }
+
+    @Test
+    public void findByIdIntegerTest() throws Exception {
+        save(new SimpleExtendedModel());
+        assertEquals(new Long(1L), SugarRecord.findById(SimpleExtendedModel.class, 1).getId());
+    }
+
+    @Test
+    public void findByIdStringsNullTest() throws Exception {
+        save(new SimpleExtendedModel());
+        assertEquals(0, SugarRecord.findById(SimpleExtendedModel.class, new String[]{""}).size());
+    }
+
+    @Test
+    public void findByIdStringsOneTest() throws Exception {
+        save(new SimpleExtendedModel());
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"1"});
+        assertEquals(1, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+    }
+
+    @Test
+    public void findByIdStringsTwoTest() throws Exception {
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        save(new SimpleExtendedModel());
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"1", "3"});
+        assertEquals(2, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+    }
+
+    @Test
+    public void findByIdStringsManyTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleExtendedModel());
+        }
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"1", "3", "6", "10"});
+        assertEquals(4, models.size());
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
+    @Test
+    public void findByIdStringsOrderTest() throws Exception {
+        for (int i = 1; i <= 10; i++) {
+            save(new SimpleExtendedModel());
+        }
+        List<SimpleExtendedModel> models =
+                SugarRecord.findById(SimpleExtendedModel.class, new String[]{"10", "6", "3", "1"});
+        assertEquals(4, models.size());
+        // The order of the query doesn't matter
+        assertEquals(new Long(1L), models.get(0).getId());
+        assertEquals(new Long(3L), models.get(1).getId());
+        assertEquals(new Long(6L), models.get(2).getId());
+        assertEquals(new Long(10L), models.get(3).getId());
+    }
+
+    @Test
+    public void findByIdNullTest() throws Exception {
+        save(new SimpleExtendedModel());
+        assertNull(SugarRecord.findById(SimpleExtendedModel.class, 2L));
+    }
+
+    @Test
+    public void findAllTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleExtendedModel());
+        }
+        Iterator<SimpleExtendedModel> cursor = SugarRecord.findAll(SimpleExtendedModel.class);
+        for (int i = 1; i <= 100; i++) {
+            assertTrue(cursor.hasNext());
+            SimpleExtendedModel model = cursor.next();
+            assertNotNull(model);
+            assertEquals(new Long(i), model.getId());
+        }
+    }
+
+    @Test
+    public void findAsIteratorTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleExtendedModel());
+        }
+        Iterator<SimpleExtendedModel> cursor = SugarRecord.findAsIterator(SimpleExtendedModel.class,
+                "id >= ?", "50");
+        for (int i = 50; i <= 100; i++) {
+            assertTrue(cursor.hasNext());
+            SimpleExtendedModel model = cursor.next();
+            assertNotNull(model);
+            assertEquals(new Long(i), model.getId());
+        }
+    }
+
+    @Test
+    public void findWithQueryAsIteratorTest() throws Exception {
+        for (int i = 1; i <= 100; i++) {
+            save(new SimpleExtendedModel());
+        }
+        Iterator<SimpleExtendedModel> cursor =
+                SugarRecord.findWithQueryAsIterator(SimpleExtendedModel.class,
+                                                    "Select * from " +
+                                                    NamingHelper.toSQLName(SimpleExtendedModel.class) +
+                                                    " where id >= ? ", "50");
+        for (int i = 50; i <= 100; i++) {
+            assertTrue(cursor.hasNext());
+            SimpleExtendedModel model = cursor.next();
+            assertNotNull(model);
+            assertEquals(new Long(i), model.getId());
+        }
+    }
+
+    @Test(expected=NoSuchElementException.class)
+    public void findAsIteratorOutOfBoundsTest() throws Exception {
+        save(new SimpleExtendedModel());
+        Iterator<SimpleExtendedModel> cursor = SugarRecord.findAsIterator(SimpleExtendedModel.class,
+                "id = ?", "1");
+        assertTrue(cursor.hasNext());
+        SimpleExtendedModel model = cursor.next();
+        assertNotNull(model);
+        assertEquals(new Long(1), model.getId());
+        // This should throw a NoSuchElementException
+        cursor.next();
+    }
+
+    @Test(expected=UnsupportedOperationException.class)
+    public void disallowRemoveCursorTest() throws Exception {
+        save(new SimpleExtendedModel());
+        Iterator<SimpleExtendedModel> cursor = SugarRecord.findAsIterator(SimpleExtendedModel.class,
+                "id = ?", "1");
+        assertTrue(cursor.hasNext());
+        SimpleExtendedModel model = cursor.next();
+        assertNotNull(model);
+        assertEquals(new Long(1), model.getId());
+        // This should throw a UnsupportedOperationException
+        cursor.remove();
+    }
+
+    @Test
+    public void vacuumTest() throws Exception {
+        SugarRecord.executeQuery("Vacuum");
+    }
+}
\ No newline at end of file
diff --git a/example/src/test/java/com/example/sugartest/StringFieldTests.java b/example/src/test/java/com/example/sugartest/StringFieldTests.java
new file mode 100644
index 00000000..c37446e4
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/StringFieldTests.java
@@ -0,0 +1,48 @@
+package com.example.sugartest;
+
+
+import com.example.models.StringFieldAnnotatedModel;
+import com.example.models.StringFieldExtendedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(emulateSdk=18)
+public class StringFieldTests {
+    @Test
+    public void nullStringExtendedTest() {
+        save(new StringFieldExtendedModel());
+        StringFieldExtendedModel model = SugarRecord.findById(StringFieldExtendedModel.class, 1);
+        assertNull(model.getString());
+    }
+
+    @Test
+    public void nullStringAnnotatedTest() {
+        save(new StringFieldAnnotatedModel());
+        StringFieldAnnotatedModel model = SugarRecord.findById(StringFieldAnnotatedModel.class, 1);
+        assertNull(model.getString());
+    }
+
+    @Test
+    public void stringExtendedTest() {
+        String string = "Test String";
+        save(new StringFieldExtendedModel(string));
+        StringFieldExtendedModel model = SugarRecord.findById(StringFieldExtendedModel.class, 1);
+        assertEquals(string, model.getString());
+    }
+
+    @Test
+    public void stringAnnotatedTest() {
+        String string = "Test String";
+        save(new StringFieldAnnotatedModel(string));
+        StringFieldAnnotatedModel model = SugarRecord.findById(StringFieldAnnotatedModel.class, 1);
+        assertEquals(string, model.getString());
+    }
+}
diff --git a/gradle.properties b/gradle.properties
index 07fe1d15..672f5287 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,37 @@
 POM_NAME=Sugar ORM
 POM_ARTIFACT_ID=sugar
-POM_PACKAGING=aar
\ No newline at end of file
+POM_PACKAGING=aar
+=======
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Settings specified in this file will override any Gradle settings
+# configured through the IDE.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+
+VERSION_NAME=1.4
+VERSION_CODE=1
+GROUP=com.github.satyan
+
+POM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database
+POM_URL=https://github.com/satyan/sugar
+POM_SCM_URL=https://github.com/satyan/sugar
+POM_SCM_CONNECTION=scm:git@github.com:satyan/sugar.git
+POM_SCM_DEV_CONNECTION=scm:git@github.com:satyan/sugar.git
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+POM_DEVELOPER_ID=satyan
+POM_DEVELOPER_NAME=Satya Narayan
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..8c0fb64a
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..0c71e760
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Apr 10 15:27:10 PDT 2013
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 00000000..91a7e269
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100755
index 00000000..aec99730
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/library/build.gradle b/library/build.gradle
new file mode 100644
index 00000000..9251b0d8
--- /dev/null
+++ b/library/build.gradle
@@ -0,0 +1,32 @@
+apply plugin: 'com.android.library'
+apply from: '../maven_push.gradle'
+
+android {
+    compileSdkVersion 21
+    buildToolsVersion "21.1.2"
+
+    defaultConfig {
+        minSdkVersion 9
+        targetSdkVersion 21
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+        }
+    }
+}
+
+dependencies {
+    compile 'com.android.support:support-v4:21.0.3'
+    compile 'com.google.guava:guava:18.0'
+    testCompile 'junit:junit:4.12'
+}
+
+task libraryJar(type: Jar) {
+    dependsOn assembleRelease
+    from android.sourceSets.main.java.srcDirs,
+         ['build/intermediates/classes/release/'] // Add the release classes into the jar
+    baseName 'sugar'
+}
+
diff --git a/library/build.properties b/library/build.properties
new file mode 100644
index 00000000..b5b95df0
--- /dev/null
+++ b/library/build.properties
@@ -0,0 +1,3 @@
+jdk.home.1.6=$JAVA_HOME
+android.home=/Users/ADMIN/Downloads/android-sdk-macosx/platforms/android-17/android.jar
+android.travis.home=/usr/local/android-sdk/platforms/android-17/android.jar
diff --git a/library/build.xml b/library/build.xml
new file mode 100644
index 00000000..927b3904
--- /dev/null
+++ b/library/build.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="sugar" default="all">
+
+  <property file="build.properties"/>
+
+  <patternset id="ignored.files">
+    <exclude name="**/.git/**"/>
+    <exclude name="**/*~/**"/>
+  </patternset>
+  <patternset id="library.patterns">
+    <include name="*.jar"/>
+  </patternset>
+
+  <property name="jdk.bin.1.6" value="${jdk.home.1.6}/bin"/>
+  <dirname property="module.sugar.basedir" file="${ant.file}"/>
+
+  <property name="sugar.output.dir" value="${module.sugar.basedir}/out/"/>
+
+  <path id="sugar.classpath">
+    <pathelement location="${android.home}"/>
+  </path>
+
+  <path id="sugar.travis.classpath">
+    <pathelement location="${android.travis.home}"/>
+  </path>
+
+  <patternset id="excluded.from.compilation.sugar">
+    <patternset refid="ignored.files"/>
+  </patternset>
+
+  <path id="sugar.module.sourcepath">
+    <dirset dir="${module.sugar.basedir}">
+      <include name="src"/>
+    </dirset>
+  </path>
+ 
+  <target name="compile" description="Compile module sugar; production classes">
+    <mkdir dir="${sugar.output.dir}"/>
+    <javac destdir="${sugar.output.dir}" fork="false" executable="${jdk.bin.1.6}/javac">
+      <classpath refid="sugar.classpath"/>
+      <src refid="sugar.module.sourcepath"/>
+      <patternset refid="excluded.from.compilation.sugar"/>
+    </javac>
+
+      <jar destfile="${sugar.output.dir}/sugar.jar" basedir="${sugar.output.dir}"/>
+
+  </target>
+
+  <target name="compile-travis" description="Compile module sugar for travis-cl">
+
+    <mkdir dir="${sugar.output.dir}"/>
+    <javac destdir="${sugar.output.dir}" fork="false" executable="${jdk.bin.1.6}/javac">
+      <classpath refid="sugar.travis.classpath"/>
+      <src refid="sugar.module.sourcepath"/>
+      <patternset refid="excluded.from.compilation.sugar"/>
+    </javac>
+
+      <jar destfile="${sugar.output.dir}/sugar.jar" basedir="${sugar.output.dir}"/>
+
+  </target>
+
+  <target name="clean" description="cleanup module">
+    <delete dir="${sugar.output.dir}"/>
+  </target>
+      <patternset refid="excluded.from.compilation.sugar"/>
+  <target name="all" depends="clean, compile" description="build all modules"/>
+  <target name="travis-all" depends="clean, compile-travis" description="build all modules for travis"/>
+  
+</project>
diff --git a/library/gradle.properties b/library/gradle.properties
new file mode 100644
index 00000000..07fe1d15
--- /dev/null
+++ b/library/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Sugar ORM
+POM_ARTIFACT_ID=sugar
+POM_PACKAGING=aar
\ No newline at end of file
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..849de626
--- /dev/null
+++ b/library/src/main/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.orm.dsl"
+          android:versionCode="1"
+          android:versionName="1.3.1">
+
+</manifest>
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
new file mode 100644
index 00000000..590e259e
--- /dev/null
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -0,0 +1,168 @@
+package com.orm;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+import com.orm.dsl.Column;
+import com.orm.dsl.NotNull;
+import com.orm.dsl.Unique;
+import com.orm.util.NamingHelper;
+import com.orm.util.NumberComparator;
+import com.orm.util.QueryBuilder;
+import com.orm.util.ReflectionUtil;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import static com.orm.util.ReflectionUtil.getDomainClasses;
+
+public class SchemaGenerator {
+
+    private Context context;
+
+    public SchemaGenerator(Context context) {
+        this.context = context;
+    }
+
+    public void createDatabase(SQLiteDatabase sqLiteDatabase) {
+        List<Class> domainClasses = getDomainClasses(context);
+        for (Class domain : domainClasses) {
+            createTable(domain, sqLiteDatabase);
+        }
+    }
+
+    public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
+        List<Class> domainClasses = getDomainClasses(context);
+        String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
+        for (Class domain : domainClasses) {
+            Cursor c = sqLiteDatabase.rawQuery(String.format(sql, NamingHelper.toSQLName(domain)), null);
+            if (c.moveToFirst() && c.getInt(0) == 0) {
+            	createTable(domain, sqLiteDatabase);
+            }
+        }
+        executeSugarUpgrade(sqLiteDatabase, oldVersion, newVersion);
+    }
+
+    public void deleteTables(SQLiteDatabase sqLiteDatabase) {
+        List<Class> tables = getDomainClasses(context);
+        for (Class table : tables) {
+            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + NamingHelper.toSQLName(table));
+        }
+    }
+
+    private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        boolean isSuccess = false;
+
+        try {
+            List<String> files = Arrays.asList(this.context.getAssets().list("sugar_upgrades"));
+            Collections.sort(files, new NumberComparator());
+            for (String file : files) {
+                Log.i("Sugar", "filename : " + file);
+
+                try {
+                    int version = Integer.valueOf(file.replace(".sql", ""));
+
+                    if ((version > oldVersion) && (version <= newVersion)) {
+                        executeScript(db, file);
+                        isSuccess = true;
+                    }
+                } catch (NumberFormatException e) {
+                    Log.i("Sugar", "not a sugar script. ignored." + file);
+                }
+
+            }
+        } catch (IOException e) {
+            Log.e("Sugar", e.getMessage());
+        }
+
+        return isSuccess;
+    }
+
+    private void executeScript(SQLiteDatabase db, String file) {
+        try {
+            InputStream is = this.context.getAssets().open("sugar_upgrades/" + file);
+            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
+            String line;
+            while ((line = reader.readLine()) != null) {
+                Log.i("Sugar script", line);
+                db.execSQL(line.toString());
+            }
+        } catch (IOException e) {
+            Log.e("Sugar", e.getMessage());
+        }
+
+        Log.i("Sugar", "Script executed");
+    }
+
+    private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
+        Log.i("Sugar", "Create table");
+        List<Field> fields = ReflectionUtil.getTableFields(table);
+        String tableName = NamingHelper.toSQLName(table);
+        StringBuilder sb = new StringBuilder("CREATE TABLE ");
+        sb.append(tableName).append(" ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
+
+        for (Field column : fields) {
+            String columnName = NamingHelper.toSQLName(column);
+            String columnType = QueryBuilder.getColumnType(column.getType());
+
+            if (columnType != null) {
+                if (columnName.equalsIgnoreCase("Id")) {
+                    continue;
+                }
+
+                if (column.isAnnotationPresent(Column.class)) {
+                    Column columnAnnotation = column.getAnnotation(Column.class);
+                    columnName = columnAnnotation.name();
+
+                    sb.append(", ").append(columnName).append(" ").append(columnType);
+
+                    if (columnAnnotation.notNull()) {
+                        if (columnType.endsWith(" NULL")) {
+                            sb.delete(sb.length() - 5, sb.length());
+                        }
+                        sb.append(" NOT NULL");
+                    }
+
+                    if (columnAnnotation.unique()) {
+                        sb.append(" UNIQUE");
+                    }
+
+                } else {
+                    sb.append(", ").append(columnName).append(" ").append(columnType);
+
+                    if (column.isAnnotationPresent(NotNull.class)) {
+                        if (columnType.endsWith(" NULL")) {
+                            sb.delete(sb.length() - 5, sb.length());
+                        }
+                        sb.append(" NOT NULL");
+                    }
+
+                    if (column.isAnnotationPresent(Unique.class)) {
+                        sb.append(" UNIQUE");
+                    }
+                }
+            }
+        }
+
+        sb.append(" ) ");
+        Log.i("Sugar", "Creating table " + tableName);
+
+        if (!"".equals(sb.toString())) {
+            try {
+                sqLiteDatabase.execSQL(sb.toString());
+            } catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+}
diff --git a/library/src/main/java/com/orm/SugarApp.java b/library/src/main/java/com/orm/SugarApp.java
new file mode 100644
index 00000000..5140e1ee
--- /dev/null
+++ b/library/src/main/java/com/orm/SugarApp.java
@@ -0,0 +1,21 @@
+package com.orm;
+
+import com.orm.SugarContext;
+
+import android.app.Application;
+
+public class SugarApp extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        SugarContext.init(this);
+    }
+
+    @Override
+    public void onTerminate() {
+        super.onTerminate();
+        SugarContext.terminate();
+    }
+
+}
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
new file mode 100644
index 00000000..61acf813
--- /dev/null
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -0,0 +1,59 @@
+package com.orm;
+
+import android.content.Context;
+
+import com.google.common.collect.MapMaker;
+
+import java.util.concurrent.ConcurrentMap;
+
+public class SugarContext {
+
+    private static SugarContext instance = null;
+    private SugarDb sugarDb;
+    private Context context;
+    private ConcurrentMap<Object, Long> entitiesMap;
+
+    private SugarContext(Context context) {
+        this.context = context;
+        this.sugarDb = new SugarDb(context);
+        this.entitiesMap = new MapMaker().weakKeys().makeMap();
+    }
+    
+    public static SugarContext getSugarContext() {
+        if (instance == null) {
+            throw new NullPointerException("SugarContext has not been initialized properly. Call SugarContext.init(Context) in your Application.onCreate() method and SugarContext.terminate() in your Application.onTerminate() method.");
+        }
+        return instance;
+    }
+
+    public static void init(Context context) {
+        instance = new SugarContext(context);
+    }
+
+    public static void terminate() {
+        if (instance == null) {
+            return;
+        }
+        instance.doTerminate();
+    }
+
+    /*
+     * Per issue #106 on Github, this method won't be called in
+     * any real Android device. This method is used purely in
+     * emulated process environments such as an emulator or
+     * Robolectric Android mock.
+     */
+    private void doTerminate() {
+        if (this.sugarDb != null) {
+            this.sugarDb.getDB().close();
+        }
+    }
+
+    protected SugarDb getSugarDb() {
+        return sugarDb;
+    }
+
+    ConcurrentMap<Object, Long> getEntitiesMap() {
+        return entitiesMap;
+    }
+}
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
new file mode 100644
index 00000000..a15110a3
--- /dev/null
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -0,0 +1,42 @@
+package com.orm;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+import com.orm.util.ManifestHelper;
+import com.orm.util.SugarCursorFactory;
+
+import static com.orm.util.ManifestHelper.getDatabaseVersion;
+import static com.orm.util.ManifestHelper.getDebugEnabled;
+
+public class SugarDb extends SQLiteOpenHelper {
+
+    private final SchemaGenerator schemaGenerator;
+    private SQLiteDatabase sqLiteDatabase;
+
+    public SugarDb(Context context) {
+        super(context, ManifestHelper.getDatabaseName(context),
+                new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
+        schemaGenerator = new SchemaGenerator(context);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase sqLiteDatabase) {
+        schemaGenerator.createDatabase(sqLiteDatabase);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
+        schemaGenerator.doUpgrade(sqLiteDatabase, oldVersion, newVersion);
+    }
+
+    public synchronized SQLiteDatabase getDB() {
+        if (this.sqLiteDatabase == null) {
+            this.sqLiteDatabase = getWritableDatabase();
+        }
+
+        return this.sqLiteDatabase;
+    }
+
+}
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
new file mode 100644
index 00000000..85353fee
--- /dev/null
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -0,0 +1,435 @@
+package com.orm;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteException;
+import android.database.sqlite.SQLiteStatement;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.orm.dsl.Table;
+import com.orm.util.NamingHelper;
+import com.orm.util.ReflectionUtil;
+import com.orm.util.QueryBuilder;
+
+import java.lang.String;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.NoSuchElementException;
+
+import static com.orm.SugarContext.getSugarContext;
+
+public class SugarRecord {
+
+    private Long id = null;
+
+    public static <T> int deleteAll(Class<T> type) {
+        return deleteAll(type, null);
+    }
+
+    public static <T> int deleteAll(Class<T> type, String whereClause, String... whereArgs) {
+        SugarDb db = getSugarContext().getSugarDb();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+        return sqLiteDatabase.delete(NamingHelper.toSQLName(type), whereClause, whereArgs);
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void saveInTx(T... objects) {
+        saveInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> void saveInTx(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarContext().getSugarDb().getDB();
+        try {
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for (T object: objects) {
+                save(object);
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            Log.i("Sugar", "Error in saving in transaction " + e.getMessage());
+        } finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> int deleteInTx(T... objects) {
+        return deleteInTx(Arrays.asList(objects));
+    }
+
+    @SuppressWarnings("deprecation")
+    public static <T> int deleteInTx(Collection<T> objects) {
+        SQLiteDatabase sqLiteDatabase = getSugarContext().getSugarDb().getDB();
+        int deletedRows = 0;
+        try {
+            sqLiteDatabase.beginTransaction();
+            sqLiteDatabase.setLockingEnabled(false);
+            for (T object : objects) {
+                if (delete(object)) {
+                    ++deletedRows;
+                }
+            }
+            sqLiteDatabase.setTransactionSuccessful();
+        } catch (Exception e) {
+            deletedRows = 0;
+            Log.i("Sugar", "Error in deleting in transaction " + e.getMessage());
+        } finally {
+            sqLiteDatabase.endTransaction();
+            sqLiteDatabase.setLockingEnabled(true);
+        }
+        return deletedRows;
+    }
+
+    public static <T> List<T> listAll(Class<T> type) {
+        return find(type, null, null, null, null, null);
+    }
+    
+    public static <T> List<T> listAll(Class<T> type, String orderBy) {
+        return find(type, null, null, null, orderBy, null);
+    }
+
+    public static <T> T findById(Class<T> type, Long id) {
+        List<T> list = find(type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
+        if (list.isEmpty()) return null;
+        return list.get(0);
+    }
+
+    public static <T> T findById(Class<T> type, Integer id) {
+        return findById(type, Long.valueOf(id));
+    }
+
+    public static <T> List<T> findById(Class<T> type, String[] ids) {
+        String whereClause = "id IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
+        return find(type, whereClause, ids);
+    }
+
+    public static <T> T first(Class<T>type) {
+        List<T> list = findWithQuery(type,
+                "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ID ASC LIMIT 1");
+        if (list.isEmpty()) {
+            return null;
+        }
+        return list.get(0);
+    }
+
+    public static <T> T last(Class<T>type) {
+        List<T> list = findWithQuery(type,
+                "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ID DESC LIMIT 1");
+        if (list.isEmpty()) {
+            return null;
+        }
+        return list.get(0);
+    }
+
+    public static <T> Iterator<T> findAll(Class<T> type) {
+        return findAsIterator(type, null, null, null, null, null);
+    }
+
+    public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String... whereArgs) {
+        return findAsIterator(type, whereClause, whereArgs, null, null, null);
+    }
+
+    public static <T> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
+        SugarDb db = getSugarContext().getSugarDb();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+        Cursor c = sqLiteDatabase.rawQuery(query, arguments);
+        return new CursorIterator<T>(type, c);
+    }
+
+    public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        SugarDb db = getSugarContext().getSugarDb();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+        Cursor c = sqLiteDatabase.query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
+                groupBy, null, orderBy, limit);
+        return new CursorIterator<T>(type, c);
+    }
+
+    public static <T> List<T> find(Class<T> type, String whereClause, String... whereArgs) {
+        return find(type, whereClause, whereArgs, null, null, null);
+    }
+
+    public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
+        SugarDb db = getSugarContext().getSugarDb();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+        T entity;
+        List<T> toRet = new ArrayList<T>();
+        Cursor c = sqLiteDatabase.rawQuery(query, arguments);
+
+        try {
+            while (c.moveToNext()) {
+                entity = type.getDeclaredConstructor().newInstance();
+                inflate(c, entity, getSugarContext().getEntitiesMap());
+                toRet.add(entity);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            c.close();
+        }
+
+        return toRet;
+    }
+
+    public static void executeQuery(String query, String... arguments) {
+        getSugarContext().getSugarDb().getDB().execSQL(query, arguments);
+    }
+
+    public static <T> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        SugarDb db = getSugarContext().getSugarDb();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+        T entity;
+        List<T> toRet = new ArrayList<T>();
+        Cursor c = sqLiteDatabase.query(NamingHelper.toSQLName(type), null, whereClause, whereArgs,
+                groupBy, null, orderBy, limit);
+        try {
+            while (c.moveToNext()) {
+                entity = type.getDeclaredConstructor().newInstance();
+                inflate(c, entity, getSugarContext().getEntitiesMap());
+                toRet.add(entity);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            c.close();
+        }
+        return toRet;
+    }
+
+    public static <T> long count(Class<?> type) {
+        return count(type, null, null, null, null, null);
+    }
+
+    public static <T> long count(Class<?> type, String whereClause, String[] whereArgs) {
+    	return count(type, whereClause, whereArgs, null, null, null);
+    }
+
+    public static <T> long count(Class<?> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+        SugarDb db = getSugarContext().getSugarDb();
+        SQLiteDatabase sqLiteDatabase = db.getDB();
+
+        long toRet = -1;
+        String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
+        SQLiteStatement sqliteStatement;
+        try {
+            sqliteStatement = sqLiteDatabase.compileStatement("SELECT count(*) FROM " + NamingHelper.toSQLName(type) + filter);
+        } catch (SQLiteException e) {
+            e.printStackTrace();
+            return toRet;
+        }
+
+        if (whereArgs != null) {
+            for (int i = whereArgs.length; i != 0; i--) {
+                sqliteStatement.bindString(i, whereArgs[i - 1]);
+            }
+        }
+
+        try {
+            toRet = sqliteStatement.simpleQueryForLong();
+        } finally {
+            sqliteStatement.close();
+        }
+
+        return toRet;
+    }
+
+    public static long save(Object object) {
+        return save(getSugarContext().getSugarDb().getDB(), object);
+    }
+
+    static long save(SQLiteDatabase db, Object object) {
+        Map<Object, Long> entitiesMap = getSugarContext().getEntitiesMap();
+        List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+        ContentValues values = new ContentValues(columns.size());
+        Field idField = null;
+        for (Field column : columns) {
+            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+            if (column.getName().equals("id")) {
+                idField = column;
+            }
+        }
+
+        boolean isSugarEntity = isSugarEntity(object.getClass());
+        if (isSugarEntity && entitiesMap.containsKey(object)) {
+                values.put("id", entitiesMap.get(object));
+        }
+
+        long id = db.insertWithOnConflict(NamingHelper.toSQLName(object.getClass()), null, values,
+                SQLiteDatabase.CONFLICT_REPLACE);
+
+        if (object.getClass().isAnnotationPresent(Table.class)) {
+            if (idField != null) {
+                idField.setAccessible(true);
+                try {
+                    idField.set(object, new Long(id));
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            } else {
+                entitiesMap.put(object, id);
+            }
+        } else if (SugarRecord.class.isAssignableFrom(object.getClass())) {
+            ((SugarRecord) object).setId(id);
+        }
+
+        Log.i("Sugar", object.getClass().getSimpleName() + " saved : " + id);
+
+        return id;
+    }
+
+    public static boolean isSugarEntity(Class<?> objectClass) {
+        return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
+    }
+
+    private static void inflate(Cursor cursor, Object object, Map<Object, Long> entitiesMap) {
+        List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
+        if (!entitiesMap.containsKey(object)) {
+            entitiesMap.put(object, cursor.getLong(cursor.getColumnIndex(("ID"))));
+        }
+
+        for (Field field : columns) {
+        	field.setAccessible(true);
+            Class<?> fieldType = field.getType();
+            if (isSugarEntity(fieldType)) {
+                try {
+                    long id = cursor.getLong(cursor.getColumnIndex(NamingHelper.toSQLName(field)));
+                    field.set(object, (id > 0) ? findById(fieldType, id) : null);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            } else {
+                ReflectionUtil.setFieldValueFromCursor(cursor, field, object);
+            }
+        }
+    }
+
+    public boolean delete() {
+        Long id = getId();
+        Class<?> type = getClass();
+        if (id != null && id > 0L) {
+            SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
+            Log.i("Sugar", type.getSimpleName() + " deleted : " + id);
+            return db.delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()}) == 1;
+        } else {
+            Log.i("Sugar", "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
+            return false;
+        }
+    }
+    
+    public static boolean delete(Object object) {
+        Class<?> type = object.getClass();
+        if (type.isAnnotationPresent(Table.class)) {
+            try {
+                Field field = type.getDeclaredField("id");
+                field.setAccessible(true);
+                Long id = (Long) field.get(object);
+                if (id != null && id > 0L) {
+                    SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
+                    boolean deleted = db.delete(NamingHelper.toSQLName(type), "Id=?", new String[]{id.toString()}) == 1;
+                    Log.i("Sugar", type.getSimpleName() + " deleted : " + id);
+                    return deleted;
+                } else {
+                    Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
+                    return false;
+                }
+            } catch (NoSuchFieldException e) {
+                Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
+                return false;
+            } catch (IllegalAccessException e) {
+                Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
+                return false;
+            }
+        } else if (SugarRecord.class.isAssignableFrom(type)) {
+            return ((SugarRecord) object).delete();
+        } else {
+            Log.i("Sugar", "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
+            return false;
+        }
+    }
+
+    public long save() {
+        return save(getSugarContext().getSugarDb().getDB(), this);
+    }
+
+    @SuppressWarnings("unchecked")
+    void inflate(Cursor cursor) {
+        inflate(cursor, this, getSugarContext().getEntitiesMap());
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public static class CursorIterator<E> implements Iterator<E> {
+        Class<E> type;
+        Cursor cursor;
+
+        public CursorIterator(Class<E> type, Cursor cursor) {
+            this.type = type;
+            this.cursor = cursor;
+        }
+
+        @Override
+        public boolean hasNext() {
+            return cursor != null && !cursor.isClosed() && !cursor.isAfterLast();
+        }
+
+        @Override
+        public E next() {
+            E entity = null;
+            if (cursor == null || cursor.isAfterLast()) {
+                throw new NoSuchElementException();
+            }
+
+            if (cursor.isBeforeFirst()) {
+                cursor.moveToFirst();
+            }
+
+            try {
+                entity = type.getDeclaredConstructor().newInstance();
+                inflate(cursor, entity, getSugarContext().getEntitiesMap());
+            } catch (Exception e) {
+                e.printStackTrace();
+            } finally {
+                cursor.moveToNext();
+                if (cursor.isAfterLast()) {
+                    cursor.close();
+                }
+            }
+
+            return entity;
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+        
+        @Override
+        public E getItemAtPosition(int position) {
+            if(cursor.moveToPosition(position)) {
+                return this.next();
+            } else {
+                return null;
+            }
+        }
+        
+        public Cursor getCursor() {
+            return cursor;
+        }
+    }
+    
+}
diff --git a/library/src/main/java/com/orm/SugarTransactionHelper.java b/library/src/main/java/com/orm/SugarTransactionHelper.java
new file mode 100644
index 00000000..73440635
--- /dev/null
+++ b/library/src/main/java/com/orm/SugarTransactionHelper.java
@@ -0,0 +1,30 @@
+package com.orm;
+
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+public class SugarTransactionHelper {
+
+    public static void doInTransaction(SugarTransactionHelper.Callback callback) {
+        SQLiteDatabase database = SugarContext.getSugarContext().getSugarDb().getDB();
+        database.beginTransaction();
+
+        try {
+            Log.d(SugarTransactionHelper.class.getSimpleName(),
+                    "Callback executing within transaction");
+            callback.manipulateInTransaction();
+            database.setTransactionSuccessful();
+            Log.d(SugarTransactionHelper.class.getSimpleName(),
+                    "Callback successfully executed within transaction");
+        } catch (Throwable e) {
+            Log.d(SugarTransactionHelper.class.getSimpleName(),
+                    "Could execute callback within transaction", e);
+        } finally {
+            database.endTransaction();
+        }
+    }
+
+    public static interface Callback {
+        void manipulateInTransaction();
+    }
+}
diff --git a/library/src/main/java/com/orm/dsl/Column.java b/library/src/main/java/com/orm/dsl/Column.java
new file mode 100644
index 00000000..2c47e3c0
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Column.java
@@ -0,0 +1,11 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Column {
+    String name();
+    boolean unique() default false;
+    boolean notNull() default false;
+}
diff --git a/library/src/main/java/com/orm/dsl/Ignore.java b/library/src/main/java/com/orm/dsl/Ignore.java
new file mode 100644
index 00000000..9678d33a
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Ignore.java
@@ -0,0 +1,8 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Ignore {
+}
diff --git a/library/src/main/java/com/orm/dsl/NotNull.java b/library/src/main/java/com/orm/dsl/NotNull.java
new file mode 100644
index 00000000..b2361851
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/NotNull.java
@@ -0,0 +1,8 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface NotNull {
+}
diff --git a/library/src/main/java/com/orm/dsl/Table.java b/library/src/main/java/com/orm/dsl/Table.java
new file mode 100644
index 00000000..0dfaa18b
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Table.java
@@ -0,0 +1,9 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Table {
+    String name() default "";
+}
diff --git a/library/src/main/java/com/orm/dsl/Unique.java b/library/src/main/java/com/orm/dsl/Unique.java
new file mode 100644
index 00000000..7384b749
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Unique.java
@@ -0,0 +1,8 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Unique {
+}
diff --git a/library/src/main/java/com/orm/query/Condition.java b/library/src/main/java/com/orm/query/Condition.java
new file mode 100644
index 00000000..52ae052c
--- /dev/null
+++ b/library/src/main/java/com/orm/query/Condition.java
@@ -0,0 +1,124 @@
+package com.orm.query;
+
+import com.orm.SugarRecord;
+
+public class Condition {
+
+    private String property;
+    private Object value;
+    private Check check;
+
+    enum Check {
+        EQUALS(" = "),
+        GREATER_THAN(" > "),
+        LESSER_THAN(" < "),
+        NOT_EQUALS (" != "),
+        LIKE(" LIKE "),
+        NOT_LIKE(" NOT LIKE "),
+        IS_NULL(" IS NULL "),
+        IS_NOT_NULL(" IS NOT NULL ");
+
+        private String symbol;
+
+        Check(String symbol) {
+            this.symbol = symbol;
+        }
+
+        public String getSymbol() {
+            return symbol;
+        }
+    }
+
+    enum Type {
+        AND,
+        OR,
+        NOT
+    }
+
+    public Condition(String property) {
+        this.property = property;
+    }
+
+    public static Condition prop(String property) {
+        return new Condition(property);
+    }
+
+    public Condition eq(Object value) {
+        if (value == null) {
+            return isNull();
+        }
+        setValue(value);
+        check = Check.EQUALS;
+        return this;
+    }
+
+    public Condition like(Object value) {
+        setValue(value);
+        check = Check.LIKE;
+        return this;
+    }
+
+    public Condition notLike(Object value) {
+        setValue(value);
+        check = Check.NOT_LIKE;
+        return this;
+    }
+
+    public Condition notEq(Object value) {
+        if (value == null) {
+            return isNotNull();
+        }
+        setValue(value);
+        check = Check.NOT_EQUALS;
+        return this;
+    }
+
+    public Condition gt(Object value) {
+        setValue(value);
+        check = Check.GREATER_THAN;
+        return this;
+    }
+
+    public Condition lt(Object value) {
+        setValue(value);
+        check = Check.LESSER_THAN;
+        return this;
+    }
+
+    public Condition isNull() {
+        setValue(null);
+        check = Check.IS_NULL;
+        return this;
+    }
+
+    public Condition isNotNull() {
+        setValue(null);
+        check = Check.IS_NOT_NULL;
+        return this;
+    }
+
+    public String getProperty() {
+        return property;
+    }
+
+    public Object getValue() {
+        return value;
+    }
+
+    public Check getCheck() {
+        return check;
+    }
+
+    public String getCheckSymbol() {
+        return check.getSymbol();
+    }
+
+    private void setValue(Object value) {
+        if (value instanceof SugarRecord) {
+            this.value = ((SugarRecord)value).getId();
+        } else {
+            this.value = value;
+        }
+    }
+
+}
diff --git a/library/src/main/java/com/orm/query/Select.java b/library/src/main/java/com/orm/query/Select.java
new file mode 100644
index 00000000..9c52a9b4
--- /dev/null
+++ b/library/src/main/java/com/orm/query/Select.java
@@ -0,0 +1,188 @@
+package com.orm.query;
+
+import com.orm.SugarRecord;
+import com.orm.util.NamingHelper;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class Select<T> implements Iterable {
+
+    private Class<T> record;
+    private String[] arguments;
+    private String whereClause = "";
+    private String orderBy;
+    private String groupBy;
+    private String limit;
+    private String offset;
+    private List<Object> args = new ArrayList<Object>();
+
+    public Select(Class<T> record) {
+        this.record = record;
+    }
+
+    public static <T> Select<T> from(Class<T> record) {
+        return new Select<T>(record);
+    }
+
+    public Select<T> orderBy(String prop) {
+        this.orderBy = prop;
+        return this;
+    }
+
+    public Select<T> groupBy(String prop) {
+        this.groupBy = prop;
+        return this;
+    }
+
+    public Select<T> limit(String limit) {
+        this.limit = limit;
+        return this;
+    }
+
+    public Select<T> where(String whereClause) {
+        this.whereClause = whereClause;
+        return this;
+    }
+
+    public Select<T> where(Condition... condition) {
+
+        mergeConditions(condition, Condition.Type.AND);
+
+        return this;
+    }
+
+    private void mergeConditions(Condition[] conditions, Condition.Type type) {
+        StringBuilder toAppend = new StringBuilder("");
+        for (Condition condition : conditions) {
+            if (toAppend.length() != 0) {
+                toAppend.append(" ").append(type.name()).append(" ");
+            }
+
+            if (Condition.Check.LIKE.equals(condition.getCheck()) ||
+                    Condition.Check.NOT_LIKE.equals(condition.getCheck())) {
+                toAppend
+                    .append(condition.getProperty())
+                    .append(condition.getCheckSymbol())
+                    .append("'")
+                    .append(condition.getValue().toString())
+                    .append("'");
+            } else if (Condition.Check.IS_NULL.equals(condition.getCheck()) ||
+                    Condition.Check.IS_NOT_NULL.equals(condition.getCheck())) {
+                toAppend
+                    .append(condition.getProperty())
+                    .append(condition.getCheckSymbol());
+            } else {
+                toAppend
+                    .append(condition.getProperty())
+                    .append(condition.getCheckSymbol())
+                    .append("? ");
+                args.add(condition.getValue());
+            }
+        }
+        
+        if (!"".equals(whereClause)) {
+            whereClause += " " + type.name() + " ";
+        }
+
+        whereClause += "(" + toAppend + ")";
+    }
+
+    public Select<T> whereOr(Condition... args) {
+        mergeConditions(args, Condition.Type.OR);
+        return this;
+    }
+
+    public Select<T> and(Condition... args) {
+        mergeConditions(args, Condition.Type.AND);
+        return this;
+    }
+
+    public Select<T> or(Condition... args) {
+        mergeConditions(args, Condition.Type.OR);
+        return this;
+    }
+
+    public Select<T> where(String whereClause, String[] args) {
+        this.whereClause = whereClause;
+        this.arguments = args;
+        return this;
+    }
+
+    public List<T> list() {
+        if (arguments == null) {
+            arguments = convertArgs(args);
+        }
+
+        return SugarRecord.find(record, whereClause, arguments, groupBy, orderBy, limit);
+    }
+    
+    public long count() {
+        if (arguments == null) {
+            arguments = convertArgs(args);
+        }
+    	
+        return SugarRecord.count(record, whereClause, arguments, groupBy, orderBy, limit);
+    }
+
+    public T first() {
+        if (arguments == null) {
+            arguments = convertArgs(args);
+        }
+
+        List<T> list = SugarRecord.find(record, whereClause, arguments, groupBy, orderBy, "1");
+        return list.size() > 0 ? list.get(0) : null;
+    }
+    
+    String toSql() {
+        StringBuilder sql = new StringBuilder();
+        sql.append("SELECT * FROM ").append(NamingHelper.toSQLName(this.record)).append(" ");
+
+        if (whereClause != null) {
+            sql.append("WHERE ").append(whereClause).append(" ");
+        }
+
+        if (orderBy != null) {
+            sql.append("ORDER BY ").append(orderBy).append(" ");
+        }
+
+        if (limit != null) {
+            sql.append("LIMIT ").append(limit).append(" ");
+        }
+
+        if (offset != null) {
+            sql.append("OFFSET ").append(offset).append(" ");
+        }
+
+        return sql.toString();
+    }
+
+    String getWhereCond() {
+        return whereClause;
+    }
+
+    String[] getArgs() {
+        return convertArgs(args);
+    }
+
+    private String[] convertArgs(List<Object> argsList) {
+        String[] argsArray = new String[argsList.size()];
+
+        for (int i = 0; i < argsList.size(); i++) {
+             argsArray[i] = argsList.get(i).toString();
+        }
+
+        return argsArray;
+    }
+
+    @Override
+    public Iterator<T> iterator() {
+        if (arguments == null) {
+            arguments = convertArgs(args);
+        }
+
+        return SugarRecord.findAsIterator(record, whereClause, arguments, groupBy, orderBy, limit);
+    }
+
+}
diff --git a/library/src/main/java/com/orm/util/Collection.java b/library/src/main/java/com/orm/util/Collection.java
new file mode 100644
index 00000000..fe7a7e63
--- /dev/null
+++ b/library/src/main/java/com/orm/util/Collection.java
@@ -0,0 +1,40 @@
+package com.orm.util;
+import java.util.*;
+
+public class Collection {
+
+    public static <T> List<T> list(T... args) {
+        return Arrays.asList(args);
+    }
+
+    public static <T> Set<T> set(T... args) {
+        Set<T> result = new HashSet<T>(args.length);
+        result.addAll(Arrays.asList(args));
+        return result;
+    }
+
+    public static <K, V> Map<K, V> map(Entry<? extends K, ? extends V>... entries) {
+        Map<K, V> result = new HashMap<K, V>(entries.length);
+
+        for (Entry<? extends K, ? extends V> entry : entries)
+            if (entry.value != null)
+                result.put(entry.key, entry.value);
+
+        return result;
+    }
+
+    public static <K, V> Entry<K, V> entry(K key, V value) {
+        return new Entry<K, V>(key, value);
+    }
+
+    public static class Entry<K, V> {
+        K key;
+        V value;
+
+        public Entry(K key, V value) {
+            this.key = key;
+            this.value = value;
+        }
+    }
+
+}
diff --git a/library/src/main/java/com/orm/util/ManifestHelper.java b/library/src/main/java/com/orm/util/ManifestHelper.java
new file mode 100644
index 00000000..fb65724c
--- /dev/null
+++ b/library/src/main/java/com/orm/util/ManifestHelper.java
@@ -0,0 +1,133 @@
+package com.orm.util;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.util.Log;
+
+/**
+ * Helper class for accessing properties in the AndroidManifest
+ */
+public class ManifestHelper {
+
+    /**
+     * Key for the database name meta data.
+     */
+    public final static String METADATA_DATABASE = "DATABASE";
+    /**
+     * Key for the database verison meta data.
+     */
+    public final static String METADATA_VERSION = "VERSION";
+    public final static String METADATA_DOMAIN_PACKAGE_NAME = "DOMAIN_PACKAGE_NAME";
+    public final static String METADATA_QUERY_LOG = "QUERY_LOG";
+    /**
+     * The default name for the database unless specified in the AndroidManifest.
+     */
+    public final static String DATABASE_DEFAULT_NAME = "Sugar.db";
+
+    /**
+     * Grabs the database version from the manifest.
+     *
+     * @param context  the {@link android.content.Context} of the Android application
+     * @return the database version as specified by the {@link #METADATA_VERSION} version or 1 of
+     *         not present
+     */
+    public static int getDatabaseVersion(Context context) {
+        Integer databaseVersion = getMetaDataInteger(context, METADATA_VERSION);
+
+        if ((databaseVersion == null) || (databaseVersion == 0)) {
+            databaseVersion = 1;
+        }
+
+        return databaseVersion;
+    }
+
+    /**
+     * Grabs the domain name of the model classes from the manifest. 
+     *
+     * @param context  the {@link android.content.Context} of the Android application
+     * @return the package String that Sugar uses to search for model classes
+     */
+    public static String getDomainPackageName(Context context){
+        String domainPackageName = getMetaDataString(context, METADATA_DOMAIN_PACKAGE_NAME);
+
+        if (domainPackageName == null) {
+            domainPackageName = "";
+        }
+
+        return domainPackageName;
+    }
+
+    /**
+     * Grabs the name of the database file specified in the manifest.
+     *
+     * @param context  the {@link android.content.Context} of the Android application
+     * @return the value for the {@value #METADATA_DATABASE} meta data in the AndroidManifest or
+     *         {@link #DATABASE_DEFAULT_NAME} if not present
+     */
+    public static String getDatabaseName(Context context) {
+        String databaseName = getMetaDataString(context, METADATA_DATABASE);
+
+        if (databaseName == null) {
+            databaseName = DATABASE_DEFAULT_NAME;
+        }
+
+        return databaseName;
+    }
+
+    /**
+     * Grabs the debug flag from the manifest.
+     *
+     * @param context  the {@link android.content.Context} of the Android application
+     * @return true if the debug flag is enabled
+     */
+    public static boolean getDebugEnabled(Context context) {
+        return getMetaDataBoolean(context, METADATA_QUERY_LOG);
+    }
+
+    private static String getMetaDataString(Context context, String name) {
+        String value = null;
+
+        PackageManager pm = context.getPackageManager();
+        try {
+            ApplicationInfo ai = pm.getApplicationInfo(context.getPackageName(),
+                    PackageManager.GET_META_DATA);
+            value = ai.metaData.getString(name);
+        } catch (Exception e) {
+            Log.d("sugar", "Couldn't find config value: " + name);
+        }
+
+        return value;
+    }
+
+    private static Integer getMetaDataInteger(Context context, String name) {
+        Integer value = null;
+
+        PackageManager pm = context.getPackageManager();
+        try {
+            ApplicationInfo ai = pm.getApplicationInfo(context.getPackageName(),
+                    PackageManager.GET_META_DATA);
+            value = ai.metaData.getInt(name);
+        } catch (Exception e) {
+            Log.d("sugar", "Couldn't find config value: " + name);
+        }
+
+        return value;
+    }
+
+    private static Boolean getMetaDataBoolean(Context context, String name) {
+        Boolean value = false;
+
+        PackageManager pm = context.getPackageManager();
+        try {
+            ApplicationInfo ai = pm.getApplicationInfo(context.getPackageName(),
+                    PackageManager.GET_META_DATA);
+            value = ai.metaData.getBoolean(name);
+        } catch (Exception e) {
+            Log.d("sugar", "Couldn't find config value: " + name);
+        }
+
+        return value;
+    }
+
+}
diff --git a/library/src/main/java/com/orm/util/NamingHelper.java b/library/src/main/java/com/orm/util/NamingHelper.java
new file mode 100644
index 00000000..734b4a56
--- /dev/null
+++ b/library/src/main/java/com/orm/util/NamingHelper.java
@@ -0,0 +1,94 @@
+package com.orm.util;
+
+import android.text.TextUtils;
+
+import com.orm.dsl.Column;
+import com.orm.dsl.Table;
+
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.LinkedList;
+import java.util.List;
+
+public class NamingHelper {
+
+    /**
+     * Converts a given CamelCasedString to UPPER_CASE_UNDER_SCORE.
+     *
+     * @param camelCased  a non empty camelCased string
+     * @return the equivalent string converted to UPPER_CASE_UNDER_SCORE unless camelCased equals
+     *         "_id" (not case sensitive) in which case "_id" is returned
+     */
+    public static String toSQLNameDefault(String camelCased) {
+        if (camelCased.equalsIgnoreCase("_id")) {
+            return "_id";
+        }
+
+        StringBuilder sb = new StringBuilder();
+        char[] buf = camelCased.toCharArray();
+
+        for (int i = 0; i < buf.length; i++) {
+            char prevChar = (i > 0) ? buf[i - 1] : 0;
+            char c = buf[i];
+            char nextChar = (i < buf.length - 1) ? buf[i + 1] : 0;
+            boolean isFirstChar = (i == 0);
+
+            if (isFirstChar || Character.isLowerCase(c) || Character.isDigit(c)) {
+                sb.append(Character.toUpperCase(c));
+            } else if (Character.isUpperCase(c)) {
+                if (Character.isLetterOrDigit(prevChar)) {
+                    if (Character.isLowerCase(prevChar)) {
+                        sb.append('_').append(c);
+                    } else if (nextChar > 0 && Character.isLowerCase(nextChar)) {
+                        sb.append('_').append(c);
+                    } else {
+                        sb.append(c);
+                    }
+                } else {
+                    sb.append(c);
+                }
+            }
+        }
+
+        return sb.toString();
+    }
+
+    /**
+     * Maps a Java Field object to the database's column name.
+     *
+     * @param field  the {@link java.lang.reflect.Field} that will be mapped
+     * @return the name of the given Field as represented in the database. If the Field is annotated
+     *         with {@link com.orm.dsl.Column} then the {@link com.orm.dsl.Column#name()} will be
+     *         returned. Else, the Field's {@link java.lang.reflect.Field#getName()} will be
+     *         converted from CamelCase to UNDER_SCORE notation
+     */
+    public static String toSQLName(Field field) {
+        if (field.isAnnotationPresent(Column.class)) {
+            Column annotation = field.getAnnotation(Column.class);
+            return annotation.name();
+        }
+
+        return toSQLNameDefault(field.getName());
+    }
+
+    /**
+     * Maps a Java Class to the name of the class.
+     *
+     * @param table  the generic {@link java.lang.Class<T>} that defines a database table
+     * @return if the given class is annotated with {@link com.orm.dsl.Table} then the value for
+     *         {@link com.orm.dsl.Table#name()} will be returned. Else, the class' simple name will 
+     *         be converted from CamelCase to UNDER_SCORE notation
+     */
+    public static String toSQLName(Class<?> table) {
+        if (table.isAnnotationPresent(Table.class)) {
+            Table annotation = table.getAnnotation(Table.class);
+            if ("".equals(annotation.name())) {
+                return NamingHelper.toSQLNameDefault(table.getSimpleName());
+            }
+            return annotation.name();
+        }
+
+        return NamingHelper.toSQLNameDefault(table.getSimpleName());
+    }
+
+}
diff --git a/library/src/main/java/com/orm/util/NumberComparator.java b/library/src/main/java/com/orm/util/NumberComparator.java
new file mode 100644
index 00000000..b39ca9c9
--- /dev/null
+++ b/library/src/main/java/com/orm/util/NumberComparator.java
@@ -0,0 +1,101 @@
+package com.orm.util;
+
+import java.util.Comparator;
+
+public class NumberComparator implements Comparator<Object> {
+
+    private static char charAt(String s, int i) {
+        if (i >= s.length()) {
+            return '\000';
+        }
+
+        return s.charAt(i);
+    }
+
+    private int compareRight(String a, String b) {
+        int bias = 0;
+        int ia = 0;
+        int ib = 0;
+        while (true) {
+            char ca = charAt(a, ia);
+            char cb = charAt(b, ib);
+
+            if ((!Character.isDigit(ca)) && (!Character.isDigit(cb))) {
+                return bias;
+            }
+            if (!Character.isDigit(ca)) {
+                return -1;
+            }
+            if (!Character.isDigit(cb)) {
+                return 1;
+            }
+            if (ca < cb) {
+                if (bias == 0) {
+                    bias = -1;
+                }
+            } else if (ca > cb) {
+                if (bias == 0)
+                    bias = 1;
+            } else if ((ca == 0) && (cb == 0))
+                return bias;
+            ia++;
+            ib++;
+        }
+    }
+
+    public int compare(Object o1, Object o2) {
+        String a = o1.toString();
+        String b = o2.toString();
+
+        int ia = 0;
+        int ib = 0;
+        int nza = 0;
+        int nzb = 0;
+        while (true) {
+            nza = nzb = 0;
+
+            char ca = charAt(a, ia);
+            char cb = charAt(b, ib);
+
+            while ((Character.isSpaceChar(ca)) || (ca == '0')) {
+                if (ca == '0') {
+                    nza++;
+                } else {
+                    nza = 0;
+                }
+
+                ca = charAt(a, ++ia);
+            }
+
+            while ((Character.isSpaceChar(cb)) || (cb == '0')) {
+                if (cb == '0') {
+                    nzb++;
+                } else {
+                    nzb = 0;
+                }
+
+                cb = charAt(b, ++ib);
+            }
+            int result;
+            if ((Character.isDigit(ca)) && (Character.isDigit(cb)) &&
+                    ((result = compareRight(a.substring(ia), b.substring(ib))) != 0)) {
+                return result;
+            }
+
+            if ((ca == 0) && (cb == 0)) {
+                return nza - nzb;
+            }
+
+            if (ca < cb) {
+                return -1;
+            }
+            if (ca > cb) {
+                return 1;
+            }
+
+            ia++;
+            ib++;
+        }
+    }
+
+}
diff --git a/library/src/main/java/com/orm/util/QueryBuilder.java b/library/src/main/java/com/orm/util/QueryBuilder.java
new file mode 100644
index 00000000..e1c3557f
--- /dev/null
+++ b/library/src/main/java/com/orm/util/QueryBuilder.java
@@ -0,0 +1,58 @@
+package com.orm.util;
+
+import com.orm.SugarRecord;
+
+import java.lang.RuntimeException;
+import java.lang.StringBuilder;
+import java.math.BigDecimal;
+
+public class QueryBuilder {
+
+    public static String getColumnType(Class<?> type) {
+        if ((type.equals(Boolean.class)) ||
+                (type.equals(Boolean.TYPE)) ||
+                (type.equals(Integer.class)) ||
+                (type.equals(Integer.TYPE)) ||
+                (type.equals(Long.class)) ||
+                (type.equals(Long.TYPE)) || (
+                (!type.isPrimitive()) &&
+                        (SugarRecord.class.isAssignableFrom(type))))  {
+            return "INTEGER";
+        }
+
+        if ((type.equals(java.util.Date.class)) ||
+                (type.equals(java.sql.Date.class)) ||
+                (type.equals(java.util.Calendar.class))) {
+            return "INTEGER NULL";
+        }
+
+        if (type.getName().equals("[B")) {
+            return "BLOB";
+        }
+
+        if ((type.equals(Double.class)) || (type.equals(Double.TYPE)) || (type.equals(Float.class)) ||
+                (type.equals(Float.TYPE))) {
+            return "FLOAT";
+        }
+
+        if ((type.equals(String.class)) || (type.equals(Character.TYPE)) ||
+                (type.equals(BigDecimal.class))) {
+            return "TEXT";
+        }
+
+        return "";
+    }
+
+    public static String generatePlaceholders(int numberOfArgs) {
+        if (numberOfArgs < 1) {
+            throw new RuntimeException("The number of arguments must be greater than or equal to 1.");
+        }
+
+        StringBuilder stringBuilder = new StringBuilder(numberOfArgs * 2 - 1);
+        stringBuilder.append("?");
+        for (int i = 1; i < numberOfArgs; i++) {
+            stringBuilder.append(",?");
+        }
+        return stringBuilder.toString();
+    }
+}
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
new file mode 100644
index 00000000..a740b42d
--- /dev/null
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -0,0 +1,349 @@
+package com.orm.util;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.database.Cursor;
+import android.util.Log;
+
+import com.orm.SugarRecord;
+import com.orm.dsl.Ignore;
+import com.orm.dsl.Table;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.math.BigDecimal;
+import java.net.URL;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Collections;
+import java.util.Date;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.Map;
+
+import dalvik.system.DexFile;
+
+public class ReflectionUtil {
+
+    public static List<Field> getTableFields(Class table) {
+        List<Field> fieldList = SugarConfig.getFields(table);
+        if (fieldList != null) return fieldList;
+
+        Log.d("Sugar", "Fetching properties");
+        List<Field> typeFields = new ArrayList<Field>();
+
+        getAllFields(typeFields, table);
+
+        List<Field> toStore = new ArrayList<Field>();
+        for (Field field : typeFields) {
+            if (!field.isAnnotationPresent(Ignore.class) && !Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
+                toStore.add(field);
+            }
+        }
+
+        SugarConfig.setFields(table, toStore);
+        return toStore;
+    }
+
+    private static List<Field> getAllFields(List<Field> fields, Class<?> type) {
+        Collections.addAll(fields, type.getDeclaredFields());
+
+        if (type.getSuperclass() != null) {
+            fields = getAllFields(fields, type.getSuperclass());
+        }
+
+        return fields;
+    }
+
+    public static void addFieldValueToColumn(ContentValues values, Field column, Object object,
+                                             Map<Object, Long> entitiesMap) {
+        column.setAccessible(true);
+        Class<?> columnType = column.getType();
+        try {
+            String columnName = NamingHelper.toSQLName(column);
+            Object columnValue = column.get(object);
+
+            if (columnType.isAnnotationPresent(Table.class)) {
+                Field field = null;
+                try {
+                    field = columnType.getDeclaredField("id");
+                    field.setAccessible(true);
+                    values.put(columnName,
+                            (field != null)
+                                    ? String.valueOf(field.get(columnValue)) : "0");
+                } catch (NoSuchFieldException e) {
+                    if (entitiesMap.containsKey(columnValue)) {
+                        values.put(columnName, entitiesMap.get(columnValue));
+                    }
+                }
+            } else if (SugarRecord.class.isAssignableFrom(columnType)) {
+                values.put(columnName,
+                        (columnValue != null)
+                                ? String.valueOf(((SugarRecord) columnValue).getId())
+                                : "0");
+            } else {
+                if (columnType.equals(Short.class) || columnType.equals(short.class)) {
+                    values.put(columnName, (Short) columnValue);
+                } else if (columnType.equals(Integer.class) || columnType.equals(int.class)) {
+                    values.put(columnName, (Integer) columnValue);
+                } else if (columnType.equals(Long.class) || columnType.equals(long.class)) {
+                    values.put(columnName, (Long) columnValue);
+                } else if (columnType.equals(Float.class) || columnType.equals(float.class)) {
+                    values.put(columnName, (Float) columnValue);
+                } else if (columnType.equals(Double.class) || columnType.equals(double.class)) {
+                    values.put(columnName, (Double) columnValue);
+                } else if (columnType.equals(Boolean.class) || columnType.equals(boolean.class)) {
+                    values.put(columnName, (Boolean) columnValue);
+                } else if (columnType.equals(BigDecimal.class)) {
+                    try {
+                        values.put(columnName, column.get(object).toString());
+                    } catch (NullPointerException e) {
+                        values.putNull(columnName);
+                    }
+                } else if (Timestamp.class.equals(columnType)) {
+                    try {
+                        values.put(columnName, ((Timestamp) column.get(object)).getTime());
+                    } catch (NullPointerException e) {
+                        values.put(columnName, (Long) null);
+                    }
+                } else if (Date.class.equals(columnType)) {
+                    try {
+                        values.put(columnName, ((Date) column.get(object)).getTime());
+                    } catch (NullPointerException e) {
+                        values.put(columnName, (Long) null);
+                    }
+                } else if (Calendar.class.equals(columnType)) {
+                    try {
+                        values.put(columnName, ((Calendar) column.get(object)).getTimeInMillis());
+                    } catch (NullPointerException e) {
+                        values.put(columnName, (Long) null);
+                    }
+                } else if (columnType.equals(byte[].class)) {
+                    if (columnValue == null) {
+                        values.put(columnName, "".getBytes());
+                    } else {
+                        values.put(columnName, (byte[]) columnValue);
+                    }
+                } else {
+                    if (columnValue == null) {
+                        values.putNull(columnName);
+                    } else if (columnType.isEnum()) {
+                        values.put(columnName, ((Enum) columnValue).name());
+                    } else {
+                        values.put(columnName, String.valueOf(columnValue));
+                    }
+                }
+            }
+
+        } catch (IllegalAccessException e) {
+            Log.e("Sugar", e.getMessage());
+        }
+    }
+
+    public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object) {
+        field.setAccessible(true);
+        try {
+            Class fieldType = field.getType();
+            String colName = NamingHelper.toSQLName(field);
+
+            int columnIndex = cursor.getColumnIndex(colName);
+
+            if (cursor.isNull(columnIndex)) {
+                return;
+            }
+
+            if (colName.equalsIgnoreCase("id")) {
+                long cid = cursor.getLong(columnIndex);
+                field.set(object, Long.valueOf(cid));
+            } else if (fieldType.equals(long.class) || fieldType.equals(Long.class)) {
+                field.set(object,
+                        cursor.getLong(columnIndex));
+            } else if (fieldType.equals(String.class)) {
+                String val = cursor.getString(columnIndex);
+                field.set(object, val != null && val.equals("null") ? null : val);
+            } else if (fieldType.equals(double.class) || fieldType.equals(Double.class)) {
+                field.set(object,
+                        cursor.getDouble(columnIndex));
+            } else if (fieldType.equals(boolean.class) || fieldType.equals(Boolean.class)) {
+                field.set(object,
+                        cursor.getString(columnIndex).equals("1"));
+            } else if (fieldType.equals(int.class) || fieldType.equals(Integer.class)) {
+                field.set(object,
+                        cursor.getInt(columnIndex));
+            } else if (fieldType.equals(float.class) || fieldType.equals(Float.class)) {
+                field.set(object,
+                        cursor.getFloat(columnIndex));
+            } else if (fieldType.equals(short.class) || fieldType.equals(Short.class)) {
+                field.set(object,
+                        cursor.getShort(columnIndex));
+            } else if (fieldType.equals(BigDecimal.class)) {
+                String val = cursor.getString(columnIndex);
+                field.set(object, val != null && val.equals("null") ? null : new BigDecimal(val));
+            } else if (fieldType.equals(Timestamp.class)) {
+                long l = cursor.getLong(columnIndex);
+                field.set(object, new Timestamp(l));
+            } else if (fieldType.equals(Date.class)) {
+                long l = cursor.getLong(columnIndex);
+                field.set(object, new Date(l));
+            } else if (fieldType.equals(Calendar.class)) {
+                long l = cursor.getLong(columnIndex);
+                Calendar c = Calendar.getInstance();
+                c.setTimeInMillis(l);
+                field.set(object, c);
+            } else if (fieldType.equals(byte[].class)) {
+                byte[] bytes = cursor.getBlob(columnIndex);
+                if (bytes == null) {
+                    field.set(object, "".getBytes());
+                } else {
+                    field.set(object, cursor.getBlob(columnIndex));
+                }
+            } else if (Enum.class.isAssignableFrom(fieldType)) {
+                try {
+                    Method valueOf = field.getType().getMethod("valueOf", String.class);
+                    String strVal = cursor.getString(columnIndex);
+                    Object enumVal = valueOf.invoke(field.getType(), strVal);
+                    field.set(object, enumVal);
+                } catch (Exception e) {
+                    Log.e("Sugar", "Enum cannot be read from Sqlite3 database. Please check the type of field " + field.getName());
+                }
+            } else
+                Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + field.getType().getName() + ")");
+        } catch (IllegalArgumentException e) {
+            Log.e("field set error", e.getMessage());
+        } catch (IllegalAccessException e) {
+            Log.e("field set error", e.getMessage());
+        }
+    }
+
+    private static Field getDeepField(String fieldName, Class<?> type) throws NoSuchFieldException {
+        try {
+            Field field = type.getDeclaredField(fieldName);
+            return field;
+        } catch (NoSuchFieldException e) {
+            Class superclass = type.getSuperclass();
+            if (superclass != null) {
+                Field field = getDeepField(fieldName, superclass);
+                return field;
+            } else {
+                throw e;
+            }
+        }
+    }
+
+    public static void setFieldValueForId(Object object, Long value) {
+        try {
+            Field field = getDeepField("id", object.getClass());
+            field.setAccessible(true);
+            field.set(object, value);
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static List<Class> getDomainClasses(Context context) {
+        List<Class> domainClasses = new ArrayList<Class>();
+        try {
+            for (String className : getAllClasses(context)) {
+                Class domainClass = getDomainClass(className, context);
+                if (domainClass != null) domainClasses.add(domainClass);
+            }
+        } catch (IOException e) {
+            Log.e("Sugar", e.getMessage());
+        } catch (PackageManager.NameNotFoundException e) {
+            Log.e("Sugar", e.getMessage());
+        }
+
+        return domainClasses;
+    }
+
+
+    private static Class getDomainClass(String className, Context context) {
+        Class<?> discoveredClass = null;
+        try {
+            discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
+        } catch (ClassNotFoundException e) {
+            Log.e("Sugar", e.getMessage());
+        }
+
+        if ((discoveredClass != null) &&
+                ((SugarRecord.class.isAssignableFrom(discoveredClass) &&
+                        !SugarRecord.class.equals(discoveredClass)) ||
+                        discoveredClass.isAnnotationPresent(Table.class)) &&
+                !Modifier.isAbstract(discoveredClass.getModifiers())) {
+
+            Log.i("Sugar", "domain class : " + discoveredClass.getSimpleName());
+            return discoveredClass;
+
+        } else {
+            return null;
+        }
+    }
+
+
+    private static List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
+        String packageName = ManifestHelper.getDomainPackageName(context);
+        String path = getSourcePath(context);
+        List<String> classNames = new ArrayList<String>();
+        DexFile dexfile = null;
+        try {
+            dexfile = new DexFile(path);
+            Enumeration<String> dexEntries = dexfile.entries();
+            while (dexEntries.hasMoreElements()) {
+                String className = dexEntries.nextElement();
+                if (className.startsWith(packageName)) classNames.add(className);
+            }
+        } catch (NullPointerException e) {
+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+            Enumeration<URL> urls = classLoader.getResources("");
+            while (urls.hasMoreElements()) {
+                List<String> fileNames = new ArrayList<String>();
+                String classDirectoryName = urls.nextElement().getFile();
+                if (classDirectoryName.contains("bin") || classDirectoryName.contains("classes")) {
+                    File classDirectory = new File(classDirectoryName);
+                    for (File filePath : classDirectory.listFiles()) {
+                        populateFiles(filePath, fileNames, "");
+                    }
+                    for (String fileName : fileNames) {
+                        if (fileName.startsWith(packageName)) classNames.add(fileName);
+                    }
+                }
+            }
+        } finally {
+            if (null != dexfile) dexfile.close();
+        }
+        return classNames;
+    }
+
+    private static void populateFiles(File path, List<String> fileNames, String parent) {
+        if (path.isDirectory()) {
+            for (File newPath : path.listFiles()) {
+                if ("".equals(parent)) {
+                    populateFiles(newPath, fileNames, path.getName());
+                } else {
+                    populateFiles(newPath, fileNames, parent + "." + path.getName());
+                }
+            }
+        } else {
+            String pathName = path.getName();
+            String classSuffix = ".class";
+            pathName = pathName.endsWith(classSuffix) ?
+                    pathName.substring(0, pathName.length() - classSuffix.length()) : pathName;
+            if ("".equals(parent)) {
+                fileNames.add(pathName);
+            } else {
+                fileNames.add(parent + "." + pathName);
+            }
+        }
+    }
+
+    private static String getSourcePath(Context context) throws PackageManager.NameNotFoundException {
+        return context.getPackageManager().getApplicationInfo(context.getPackageName(), 0).sourceDir;
+    }
+}
diff --git a/library/src/main/java/com/orm/util/SugarConfig.java b/library/src/main/java/com/orm/util/SugarConfig.java
new file mode 100644
index 00000000..b93da25e
--- /dev/null
+++ b/library/src/main/java/com/orm/util/SugarConfig.java
@@ -0,0 +1,37 @@
+package com.orm.util;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.util.Log;
+
+import java.lang.reflect.Field;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+
+public class SugarConfig {
+
+    static Map<Class<?>, List<Field>> fields = new HashMap<Class<?>, List<Field>>();
+
+    public static void setFields(Class<?> clazz, List<Field> fieldz) {
+         fields.put(clazz, fieldz);
+    }
+
+    public static List<Field> getFields(Class<?> clazz) {
+        if (fields.containsKey(clazz)) {
+            List<Field> list = fields.get(clazz);
+            return Collections.synchronizedList(list);
+        }
+
+        return null;
+    }
+
+    public static void clearCache() {
+        fields.clear();
+        fields = new HashMap<Class<?>, List<Field>>();
+    }
+
+}
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/library/src/main/java/com/orm/util/SugarCursorFactory.java
new file mode 100644
index 00000000..12706516
--- /dev/null
+++ b/library/src/main/java/com/orm/util/SugarCursorFactory.java
@@ -0,0 +1,36 @@
+package com.orm.util;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteCursor;
+import android.database.sqlite.SQLiteCursorDriver;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteQuery;
+import android.util.Log;
+
+public class SugarCursorFactory implements SQLiteDatabase.CursorFactory {
+
+    private boolean debugEnabled;
+
+    public SugarCursorFactory() {
+        this.debugEnabled = false;
+    }
+
+    public SugarCursorFactory(boolean debugEnabled) {
+
+        this.debugEnabled = debugEnabled;
+    }
+
+    @SuppressWarnings("deprecation")
+    public Cursor newCursor(SQLiteDatabase sqLiteDatabase,
+            SQLiteCursorDriver sqLiteCursorDriver,
+            String editTable,
+            SQLiteQuery sqLiteQuery) {
+
+        if (debugEnabled) {
+            Log.d("SQL Log", sqLiteQuery.toString());
+        }
+
+        return new SQLiteCursor(sqLiteDatabase, sqLiteCursorDriver, editTable, sqLiteQuery);
+    }
+
+}
diff --git a/library/src/test/java/com/orm/NamingHelperTest.java b/library/src/test/java/com/orm/NamingHelperTest.java
new file mode 100644
index 00000000..3166a107
--- /dev/null
+++ b/library/src/test/java/com/orm/NamingHelperTest.java
@@ -0,0 +1,37 @@
+package com.orm;
+
+import com.orm.util.NamingHelper;
+
+import org.junit.Test;
+
+import static junit.framework.Assert.assertEquals;
+
+public class NamingHelperTest {
+    @Test
+    public void testToSQLNameCaseConversion() throws Exception {
+        assertToSqlNameEquals("TESTLOWERCASE", "testlowercase");
+        assertToSqlNameEquals("TESTUPPERCASE", "TESTUPPERCASE");
+    }
+
+    @Test
+    public void testToSQLNameUnderscore() {
+        assertToSqlNameEquals("TEST_UNDERSCORE", "testUnderscore");
+        assertToSqlNameEquals("AB_CD", "AbCd");
+        assertToSqlNameEquals("AB_CD", "ABCd");
+        assertToSqlNameEquals("AB_CD", "AbCD");
+        assertToSqlNameEquals("SOME_DETAILS_OBJECT", "SomeDetailsObject");
+        assertToSqlNameEquals("H_OL_A","hOlA");
+        assertToSqlNameEquals("A","a");
+    }
+
+    /**
+     * Helper method that asserts a CamelCaseString is converted to UPPER_CASE_UNDER_SCORE.
+     *
+     * @param expected  a CamelCaseString
+     * @param actual    the expected UPPER_CASE_UNDER_SCORE string
+     */
+    private static void assertToSqlNameEquals(String expected, String actual) {
+        assertEquals(expected, NamingHelper.toSQLNameDefault(actual));
+    }
+
+}
diff --git a/library/src/test/java/com/orm/query/DummyContext.java b/library/src/test/java/com/orm/query/DummyContext.java
new file mode 100644
index 00000000..5505b37f
--- /dev/null
+++ b/library/src/test/java/com/orm/query/DummyContext.java
@@ -0,0 +1,474 @@
+package com.orm.query;
+
+import android.content.*;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.res.AssetManager;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.database.DatabaseErrorHandler;
+import android.database.sqlite.SQLiteDatabase;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.UserHandle;
+import android.view.Display;
+
+import java.io.*;
+
+public class DummyContext extends Context {
+    @Override
+    public File getCodeCacheDir() {
+        return null;
+    }
+
+    @Override
+    public File[] getExternalFilesDirs(String type) {
+        return null;
+    }
+
+    @Override
+    public File[] getExternalCacheDirs() {
+        return null;
+    }
+
+    @Override
+    public File getNoBackupFilesDir() {
+        return null;
+    }
+
+    @Override
+    public File[] getObbDirs() {
+        return null;
+    }
+
+    @Override
+    public File[] getExternalMediaDirs() {
+        return null;
+    }
+
+    @Override
+    public AssetManager getAssets() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Resources getResources() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public PackageManager getPackageManager() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public ContentResolver getContentResolver() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Looper getMainLooper() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Context getApplicationContext() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void setTheme(int i) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Resources.Theme getTheme() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public ClassLoader getClassLoader() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public String getPackageName() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public ApplicationInfo getApplicationInfo() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public String getPackageResourcePath() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public String getPackageCodePath() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public SharedPreferences getSharedPreferences(String s, int i) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public FileInputStream openFileInput(String s) throws FileNotFoundException {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public FileOutputStream openFileOutput(String s, int i) throws FileNotFoundException {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public boolean deleteFile(String s) {
+        return false;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getFileStreamPath(String s) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getFilesDir() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getExternalFilesDir(String s) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getObbDir() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getCacheDir() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getExternalCacheDir() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public String[] fileList() {
+        return new String[0];  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getDir(String s, int i) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public SQLiteDatabase openOrCreateDatabase(String s, int i, SQLiteDatabase.CursorFactory cursorFactory) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public SQLiteDatabase openOrCreateDatabase(String s, int i, SQLiteDatabase.CursorFactory cursorFactory, DatabaseErrorHandler databaseErrorHandler) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public boolean deleteDatabase(String s) {
+        return false;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public File getDatabasePath(String s) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public String[] databaseList() {
+        return new String[0];  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Drawable getWallpaper() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Drawable peekWallpaper() {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int getWallpaperDesiredMinimumWidth() {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int getWallpaperDesiredMinimumHeight() {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void setWallpaper(Bitmap bitmap) throws IOException {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void setWallpaper(InputStream inputStream) throws IOException {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void clearWallpaper() throws IOException {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void startActivity(Intent intent) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void startActivity(Intent intent, Bundle options) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+
+    @Override
+    public void startActivities(Intent[] intents) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void startActivities(Intent[] intents, Bundle options) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+
+    @Override
+    public void startIntentSender(IntentSender intentSender, Intent intent, int i, int i1, int i2) throws IntentSender.SendIntentException {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendBroadcast(Intent intent) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendBroadcast(Intent intent, String s) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendOrderedBroadcast(Intent intent, String s) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendOrderedBroadcast(Intent intent, String s, BroadcastReceiver broadcastReceiver, Handler handler, int i, String s1, Bundle bundle) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendStickyBroadcast(Intent intent) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver broadcastReceiver, Handler handler, int i, String s, Bundle bundle) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void removeStickyBroadcast(Intent intent) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Intent registerReceiver(BroadcastReceiver broadcastReceiver, IntentFilter intentFilter) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Intent registerReceiver(BroadcastReceiver broadcastReceiver, IntentFilter intentFilter, String s, Handler handler) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void unregisterReceiver(BroadcastReceiver broadcastReceiver) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public ComponentName startService(Intent intent) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public boolean stopService(Intent intent) {
+        return false;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public boolean bindService(Intent intent, ServiceConnection serviceConnection, int i) {
+        return false;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void unbindService(ServiceConnection serviceConnection) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public boolean startInstrumentation(ComponentName componentName, String s, Bundle bundle) {
+        return false;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Object getSystemService(String s) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkPermission(String s, int i, int i1) {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkCallingPermission(String s) {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkCallingOrSelfPermission(String s) {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void enforcePermission(String s, int i, int i1, String s1) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void enforceCallingPermission(String s, String s1) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void enforceCallingOrSelfPermission(String s, String s1) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void grantUriPermission(String s, Uri uri, int i) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void revokeUriPermission(Uri uri, int i) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkUriPermission(Uri uri, int i, int i1, int i2) {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkCallingUriPermission(Uri uri, int i) {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkCallingOrSelfUriPermission(Uri uri, int i) {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public int checkUriPermission(Uri uri, String s, String s1, int i, int i1, int i2) {
+        return 0;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void enforceUriPermission(Uri uri, int i, int i1, int i2, String s) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void enforceCallingUriPermission(Uri uri, int i, String s) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void enforceCallingOrSelfUriPermission(Uri uri, int i, String s) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public void enforceUriPermission(Uri uri, String s, String s1, int i, int i1, int i2, String s2) {
+        //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Context createPackageContext(String s, int i) throws PackageManager.NameNotFoundException {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Context createConfigurationContext(Configuration overrideConfiguration) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+
+    @Override
+    public Context createDisplayContext(Display display) {
+        return null;  //To change body of implemented methods use File | Settings | File Templates.
+    }
+}
diff --git a/library/src/test/java/com/orm/query/QueryBuilderTests.java b/library/src/test/java/com/orm/query/QueryBuilderTests.java
new file mode 100644
index 00000000..96e3c79f
--- /dev/null
+++ b/library/src/test/java/com/orm/query/QueryBuilderTests.java
@@ -0,0 +1,29 @@
+package com.orm.query;
+
+import com.orm.util.QueryBuilder;
+
+import org.junit.Test;
+
+import static junit.framework.Assert.assertEquals;
+
+public class QueryBuilderTests {
+    @Test(expected=RuntimeException.class)
+    public void noArgumentsTest() {
+        QueryBuilder.generatePlaceholders(0);
+    }
+
+    @Test()
+    public void oneArgumentsTest() {
+        assertEquals("?", QueryBuilder.generatePlaceholders(1));
+    }
+
+    @Test
+    public void twoArgumentsTest() {
+        assertEquals("?,?", QueryBuilder.generatePlaceholders(2));
+    }
+
+    @Test
+    public void manyArgumentsTest() {
+        assertEquals("?,?,?,?,?,?,?,?,?,?", QueryBuilder.generatePlaceholders(10));
+    }
+}
diff --git a/library/src/test/java/com/orm/query/SelectTest.java b/library/src/test/java/com/orm/query/SelectTest.java
new file mode 100644
index 00000000..3ab345ae
--- /dev/null
+++ b/library/src/test/java/com/orm/query/SelectTest.java
@@ -0,0 +1,104 @@
+package com.orm.query;
+
+import org.junit.Test;
+
+import static junit.framework.Assert.assertEquals;
+
+public class SelectTest {
+
+    @Test
+    public void testMergeCondition(){
+        Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
+        assertEquals("(test = ? )", where.getWhereCond());
+        assertEquals(1, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+
+        where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
+        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
+        assertEquals(2, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+        assertEquals("2", where.getArgs()[1]);
+    }
+
+
+    @Test
+    public void testWhere(){
+        Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
+        assertEquals("(test = ? )", where.getWhereCond());
+        assertEquals(1, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+
+        where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
+        assertEquals("(test = ?  AND prop = ? )", where.getWhereCond());
+        assertEquals(2, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+        assertEquals("2", where.getArgs()[1]);
+    }
+
+
+    @Test
+    public void testWhereOr(){
+        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
+        assertEquals("(test = ? )", where.getWhereCond());
+        assertEquals(1, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+
+        where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"), Condition.prop("prop").eq(2));
+        assertEquals("(test = ?  OR prop = ? )", where.getWhereCond());
+        assertEquals(2, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+        assertEquals("2", where.getArgs()[1]);
+    }
+
+    @Test
+    public void testAnd(){
+        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
+        assertEquals("(test = ? )", where.getWhereCond());
+        assertEquals(1, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+
+        where.and(Condition.prop("prop").eq(2));
+
+        assertEquals("(test = ? ) AND (prop = ? )", where.getWhereCond());
+        assertEquals(2, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+        assertEquals("2", where.getArgs()[1]);
+    }
+
+    @Test
+    public void testOr(){
+        Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
+        assertEquals("(test = ? )", where.getWhereCond());
+        assertEquals(1, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+
+        where.or(Condition.prop("prop").eq(2));
+
+        assertEquals("(test = ? ) OR (prop = ? )", where.getWhereCond());
+        assertEquals(2, where.getArgs().length);
+        assertEquals("satya", where.getArgs()[0]);
+        assertEquals("2", where.getArgs()[1]);
+    }
+
+    @Test
+    public void testIsNull() {
+        Select where = Select.from(TestRecord.class).where(Condition.prop("test").isNull());
+        assertEquals("(test IS NULL )", where.getWhereCond());
+        assertEquals(0, where.getArgs().length);
+
+        where = Select.from(TestRecord.class).where(Condition.prop("test").eq(null));
+        assertEquals("(test IS NULL )", where.getWhereCond());
+        assertEquals(0, where.getArgs().length);
+    }
+
+    @Test
+    public void testIsNotNull() {
+        Select where = Select.from(TestRecord.class).where(Condition.prop("test").isNotNull());
+        assertEquals("(test IS NOT NULL )", where.getWhereCond());
+        assertEquals(0, where.getArgs().length);
+
+        where = Select.from(TestRecord.class).where(Condition.prop("test").notEq(null));
+        assertEquals("(test IS NOT NULL )", where.getWhereCond());
+        assertEquals(0, where.getArgs().length);
+    }
+}
diff --git a/library/src/test/java/com/orm/query/TestRecord.java b/library/src/test/java/com/orm/query/TestRecord.java
new file mode 100644
index 00000000..50997205
--- /dev/null
+++ b/library/src/test/java/com/orm/query/TestRecord.java
@@ -0,0 +1,13 @@
+package com.orm.query;
+
+import android.content.Context;
+import com.orm.SugarRecord;
+
+public class TestRecord extends SugarRecord {
+
+    private String name;
+
+    public TestRecord(Context context) {
+        super();
+    }
+}
diff --git a/maven_push.gradle b/maven_push.gradle
new file mode 100644
index 00000000..b741e61b
--- /dev/null
+++ b/maven_push.gradle
@@ -0,0 +1,92 @@
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def sonatypeRepositoryUrl
+if (isReleaseBuild()) {
+    println 'RELEASE BUILD'
+    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+} else {
+    println 'DEBUG BUILD'
+    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+            : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+    return hasProperty('nexusUsername') ? nexusUsername : ""
+}
+
+def getRepositoryPassword() {
+    return hasProperty('nexusPassword') ? nexusPassword : ""
+}
+
+afterEvaluate { project ->
+    uploadArchives {
+        repositories {
+            mavenDeployer {
+                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+                pom.artifactId = POM_ARTIFACT_ID
+
+                repository(url: sonatypeRepositoryUrl) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+
+                pom.project {
+                    name POM_NAME
+                    packaging POM_PACKAGING
+                    description POM_DESCRIPTION
+                    url POM_URL
+
+                    scm {
+                        url POM_SCM_URL
+                        connection POM_SCM_CONNECTION
+                        developerConnection POM_SCM_DEV_CONNECTION
+                    }
+
+                    licenses {
+                        license {
+                            name POM_LICENCE_NAME
+                            url POM_LICENCE_URL
+                            distribution POM_LICENCE_DIST
+                        }
+                    }
+
+                    developers {
+                        developer {
+                            id POM_DEVELOPER_ID
+                            name POM_DEVELOPER_NAME
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    signing {
+        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+        sign configurations.archives
+    }
+
+    task androidJavadocs(type: Javadoc) {
+        source = android.sourceSets.main.java.sourceFiles
+    }
+
+    task androidJavadocsJar(type: Jar) {
+        classifier = 'javadoc'
+        //basename = artifact_id
+        from androidJavadocs.destinationDir
+    }
+
+    task androidSourcesJar(type: Jar) {
+        classifier = 'sources'
+        //basename = artifact_id
+        from android.sourceSets.main.java.sourceFiles
+    }
+
+    artifacts {
+        //archives packageReleaseJar
+        archives androidSourcesJar
+        archives androidJavadocsJar
+    }
+}
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 00000000..507c9f4a
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,2 @@
+include ':library'
+include ':example'
diff --git a/sugar.iml b/sugar.iml
new file mode 100644
index 00000000..e19b5594
--- /dev/null
+++ b/sugar.iml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.id="sugar" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="java-gradle" name="Java-Gradle">
+      <configuration>
+        <option name="BUILD_FOLDER_PATH" value="$MODULE_DIR$/build" />
+        <option name="BUILDABLE" value="false" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
+    </content>
+    <orderEntry type="jdk" jdkName="1.7" jdkType="JavaSDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
