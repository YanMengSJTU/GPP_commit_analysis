diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index f6be113d..a21a5567 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -6,6 +6,7 @@
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
+import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
 import com.orm.dsl.Ignore;
 
@@ -26,7 +27,9 @@
     private SugarApp application;
     private Database database;
     String tableName = getSqlName();
-
+    
+    static HashMap<Class, SQLiteStatement> compiledStatement = new HashMap<Class, SQLiteStatement>();
+    
     public SugarRecord(Context context) {
         this.context = context;
         this.application = (SugarApp) context.getApplicationContext();
@@ -53,47 +56,136 @@ public void delete() {
     }
 
     public void save() {
+    	
+    	
+    	
         SQLiteDatabase sqLiteDatabase = database.openDB();
         List<Field> columns = getTableFields();
-        ContentValues values = new ContentValues(columns.size());
+   
+        
+        if(compiledStatement.get(this.getClass()) == null) {
+    		String sql = "INSERT OR REPLACE INTO "+ getSqlName()  + " (";
+    		
+    		int i = 0;
+    		for (Field column : columns) {
+    			
+    			i++;
+    			if(columns.size() == i) {
+    				sql+=StringUtil.toSQLName(column.getName());
+    			} else {
+    				sql+=StringUtil.toSQLName(column.getName()) + ",";
+    			}	
+    			
+    			
+    		}
+    		sql+=") VALUES (";
+    		
+    		i = 0;
+    		for (Field column : columns) {
+    			
+    			i++;
+    			if(columns.size() == i) {
+    				sql+="?";
+    			} else {
+    				sql+="?,";
+    			}
+
+    		}
+    		sql+=")";
+    		System.out.println(sql);
+    		compiledStatement.put(this.getClass(), sqLiteDatabase.compileStatement(sql));
+    	}
+        
+        SQLiteStatement statment = compiledStatement.get(this.getClass());
+        int index = 0;
         for (Field column : columns) {
+
+        	
+        	index++;
             column.setAccessible(true);
             try {
+            	
                 if (column.getType().getSuperclass() == SugarRecord.class) {
-                    values.put(StringUtil.toSQLName(column.getName()),
-                            (column.get(this) != null)
-                                    ? String.valueOf(((SugarRecord) column.get(this)).id)
-                                    : "0");
+                	
+                	SugarRecord record = (SugarRecord) column.get(this);
+                	if(record == null || record.id == null) {
+                		statment.bindLong(index, 0);
+                	} else {
+                		statment.bindLong(index, record.id);
+                		
+                	}
+            
                 } else {
                     if (!"id".equalsIgnoreCase(column.getName())) {
                     	
                     	if (column.getType().getName().equals("java.sql.Timestamp")) {
+                    		
 							Timestamp timestamp = (Timestamp) column.get(this);
 							if(timestamp != null) {
-								values.put(StringUtil.toSQLName(column.getName()),
-										String.valueOf(timestamp.getTime()));
+								statment.bindString(index, String.valueOf(timestamp.getTime()));
 							}
 							
 						} else {
-							values.put(StringUtil.toSQLName(column.getName()),
-									String.valueOf(column.get(this)));
+							if(column.getType().getName().equals("boolean") || column.getType().getName().equals("int") || column.getType().getName().equals("long")) {
+								if(column.get(this) == null) {
+									statment.bindLong(index, 0);
+								} else {
+									String valueString = String.valueOf(column.get(this));
+									if(valueString.equals("true")) {
+										statment.bindLong(index, 1);
+									} else if(valueString.equals("false")) {
+										statment.bindLong(index, 0);
+									} else {
+										statment.bindLong(index, Long.parseLong(valueString));
+									}
+								}
+
+							} else if(column.getType().getName().equals("float") || column.getType().getName().equals("double")) {
+								if(column.get(this) == null) {
+									statment.bindDouble(index, 0);
+								} else {
+									statment.bindDouble(index, Double.parseDouble(String.valueOf(column.get(this))));
+								}
+								
+							} else if(column.getType().getName().equals("java.lang.String")) {
+								String valueString = (String) column.get(this);
+								if(valueString ==  null) {
+									statment.bindString(index, "");
+								} else {
+									statment.bindString(index, (String) column.get(this));
+								}
+								
+								
+							}
+							
+				
 						}
                         
+                    } else {
+                    	if(id != null) {
+                    		statment.bindLong(index, id);
+                    	} else {
+                    		statment.bindNull(index);
+                    	}
                     }
                 }
 
             } catch (IllegalAccessException e) {
                 Log.e("Sugar", e.getMessage());
-            }
+            } catch (Exception e) {
+            	Log.e("Sugar", e.getMessage());
+			}
         }
+        
+      
+        if(this.id == null) {
+        	this.id = statment.executeInsert();
+        } else {
+        	statment.execute();
+        } 
 
-        if (id == null)
-                id = sqLiteDatabase.insert(getSqlName(), null, values);
-        else
-                sqLiteDatabase.update(getSqlName(), values, "ID = ?", new String[]{String.valueOf(id)});
-
-        Log.i("Sugar", getClass().getSimpleName() + " saved : " + id);
         database.closeDB();
+        
     }
 
     public static <T extends SugarRecord> List<T> listAll(Class<T> type) {
@@ -179,14 +271,17 @@ public void inflate(Cursor cursor) {
                 } else if (typeString.equals("java.lang.String")) {
                     String val = cursor.getString(cursor
                             .getColumnIndex(colName));
-                    field.set(this, val.equals("null") ? null : val);
+                    if(val == null) {
+                    	field.set(this, null);
+                    } else {
+                    	field.set(this, val.equals("null") ? null : val);
+                    }
+                    
                 } else if (typeString.equals("double")) {
                     field.setDouble(this,
                             cursor.getDouble(cursor.getColumnIndex(colName)));
                 } else if (typeString.equals("boolean")) {
-                    field.setBoolean(this,
-                            cursor.getString(cursor.getColumnIndex(colName))
-                                    .equals("true"));
+                    field.setBoolean(this, (cursor.getInt(cursor.getColumnIndex(colName)) == 1) ? true : false);
                 } else if (typeString.equals("[B")) {
                     field.set(this,
                             cursor.getBlob(cursor.getColumnIndex(colName)));
