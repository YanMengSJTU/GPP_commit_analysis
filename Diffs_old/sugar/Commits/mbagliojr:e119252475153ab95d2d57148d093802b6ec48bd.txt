diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index b4b63e06..c1328448 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -11,6 +11,7 @@
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.ListMultimap;
 
+import com.orm.dsl.Id;
 import com.orm.dsl.Relationship;
 import com.orm.dsl.Table;
 import com.orm.util.NamingHelper;
@@ -196,10 +197,14 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> List<T> findByRelationship(Class<T> type, Relationship relationship, String where, String groupBy, String orderBy, String limit) {
-        return findByRelationship(type, relationship.joinTable(), relationship.refObjectIdName(), where, groupBy, orderBy, limit);
+        return findByRelationship(type, relationship.joinTable(), relationship.refObjectIdName(), relationship.joinColumnName(), where, groupBy, orderBy, limit);
     }
 
     public static <T> List<T> findByRelationship(Class<T> type, String joinTable, String objectIdName, String where, String groupBy, String orderBy, String limit) {
+        return findByRelationship(type, joinTable, objectIdName, "ID", where, groupBy, orderBy, limit);
+    }
+
+    public static <T> List<T> findByRelationship(Class<T> type, String joinTable, String objectIdName, String joinColumnName, String where, String groupBy, String orderBy, String limit) {
         SugarDb db = getSugarContext().getSugarDb();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         T entity;
@@ -207,7 +212,8 @@ public static void executeQuery(String query, String... arguments) {
 
         StringBuilder sb = new StringBuilder();
         sb.append("SELECT * FROM ").append(NamingHelper.toSQLName(type))
-                .append(" a INNER JOIN ").append(joinTable).append(" b ON a.ID")
+                .append(" a INNER JOIN ").append(joinTable).append(" b ON a.")
+                .append(joinColumnName)
                 .append("=b.").append(objectIdName);
         appendClause(sb, " WHERE ", where);
         appendClause(sb, " GROUP BY ", groupBy);
@@ -361,18 +367,46 @@ static long save(SQLiteDatabase db, Object object) {
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
         Field idField = null;
+        boolean isIdAnnotationPresent = false;
         for (Field column : columns) {
             List<SugarRecord> children = new ArrayList<SugarRecord>();
-            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
-            if (column.getName().equals("id")) {
+            if(column.isAnnotationPresent(Id.class)) {
+
+                if(isIdAnnotationPresent) {
+                    throw new IllegalStateException("Multiple Id annotations present on " + object.getClass().getSimpleName() + ". Only one field can have this annotation.");
+                }
+
                 idField = column;
+                isIdAnnotationPresent = true;
+            }
+
+            //Check for null to make sure we don't squash a declared annotated ID field
+            else if (column.getName().equals("id") && idField == null) {
+                idField = column;
+            }
+
+            if(!column.getName().equals("id")) {
+                ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
             }
 
         }
 
+        ReflectionUtil.addFieldValueToColumn(values, idField, object, entitiesMap);
+
         boolean isSugarEntity = isSugarEntity(object.getClass());
-        if (isSugarEntity && entitiesMap.containsKey(object)) {
+        if (isSugarEntity && entitiesMap.containsKey(object) && !isIdAnnotationPresent) {
                 values.put("id", entitiesMap.get(object));
+        } else if(isSugarEntity && isIdAnnotationPresent && idField != null) {
+            idField.setAccessible(true);
+            try {
+                Object id = idField.get(object);
+                if(id != null && (Long.class.equals(id.getClass()) || long.class.equals(id.getClass()))) {
+                    values.put("id", (Long) id);
+                }
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            }
+
         }
 
         long id = db.insertWithOnConflict(NamingHelper.toSQLName(object.getClass()), null, values,
@@ -441,7 +475,10 @@ public static boolean delete(Object object) {
         Class<?> type = object.getClass();
         if (type.isAnnotationPresent(Table.class)) {
             try {
-                Field field = type.getDeclaredField("id");
+
+                Table table = type.getAnnotation(Table.class);
+
+                Field field = type.getDeclaredField(table.primaryKeyField());
                 field.setAccessible(true);
                 Long id = (Long) field.get(object);
                 if (id != null && id > 0L) {
diff --git a/library/src/main/java/com/orm/dsl/Id.java b/library/src/main/java/com/orm/dsl/Id.java
new file mode 100644
index 00000000..23834142
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Id.java
@@ -0,0 +1,8 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Id {
+}
diff --git a/library/src/main/java/com/orm/dsl/Relationship.java b/library/src/main/java/com/orm/dsl/Relationship.java
index 23ab20b7..5817ddfc 100644
--- a/library/src/main/java/com/orm/dsl/Relationship.java
+++ b/library/src/main/java/com/orm/dsl/Relationship.java
@@ -18,5 +18,6 @@
     String objectIdName();
     String refObjectIdName();
     boolean cascade() default true;
+    String joinColumnName() default "id";
 
 }
diff --git a/library/src/main/java/com/orm/dsl/Table.java b/library/src/main/java/com/orm/dsl/Table.java
index 0dfaa18b..33dfa2e8 100644
--- a/library/src/main/java/com/orm/dsl/Table.java
+++ b/library/src/main/java/com/orm/dsl/Table.java
@@ -6,4 +6,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Table {
     String name() default "";
+    String primaryKeyField() default "id";
 }
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index b0b19bc7..ef80b61d 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -8,6 +8,7 @@
 import android.util.Log;
 
 import com.orm.SugarRecord;
+import com.orm.dsl.Id;
 import com.orm.dsl.Ignore;
 import com.orm.dsl.Relationship;
 import com.orm.dsl.Table;
@@ -186,8 +187,9 @@
 
             if (columnType.isAnnotationPresent(Table.class)) {
                 Field field = null;
+                Table table = columnType.getAnnotation(Table.class);
                 try {
-                    field = columnType.getDeclaredField("id");
+                    field = columnType.getDeclaredField(table.primaryKeyField());
                     field.setAccessible(true);
                     values.put(columnName,
                             (field != null)
@@ -342,7 +344,7 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 return;
             }
 
-            if (colName.equalsIgnoreCase("id")) {
+            if (colName.equalsIgnoreCase("id") || field.isAnnotationPresent(Id.class)) {
                 long cid = cursor.getLong(columnIndex);
                 field.set(object, Long.valueOf(cid));
             } else if (fieldType.equals(long.class) || fieldType.equals(Long.class)) {
@@ -420,6 +422,7 @@ private static Field getDeepField(String fieldName, Class<?> type) throws NoSuch
         }
     }
 
+    /*
     public static void setFieldValueForId(Object object, Long value) {
         try {
             Field field = getDeepField("id", object.getClass());
@@ -430,7 +433,7 @@ public static void setFieldValueForId(Object object, Long value) {
         } catch (NoSuchFieldException e) {
             e.printStackTrace();
         }
-    }
+    }*/
 
     public static List<Class> getDomainClasses(Context context) {
         List<Class> domainClasses = new ArrayList<Class>();
