diff --git a/facebook-core/src/main/java/com/facebook/AccessToken.java b/facebook-core/src/main/java/com/facebook/AccessToken.java
index 302319ac8..81832db78 100644
--- a/facebook-core/src/main/java/com/facebook/AccessToken.java
+++ b/facebook-core/src/main/java/com/facebook/AccessToken.java
@@ -587,7 +587,8 @@ static AccessToken createFromJSONObject(JSONObject jsonObject) throws JSONExcept
         AccessTokenSource source = AccessTokenSource.valueOf(jsonObject.getString(SOURCE_KEY));
         String applicationId = jsonObject.getString(APPLICATION_ID_KEY);
         String userId = jsonObject.getString(USER_ID_KEY);
-        Date dataAccessExpirationTime = new Date(jsonObject.getLong(DATA_ACCESS_EXPIRATION_TIME));
+        Date dataAccessExpirationTime = new Date(
+                jsonObject.optLong(DATA_ACCESS_EXPIRATION_TIME, 0));
 
         return new AccessToken(
                 token,
diff --git a/facebook/src/test/java/com/facebook/AccessTokenTest.java b/facebook/src/test/java/com/facebook/AccessTokenTest.java
index e0b469ad1..31b8ff45f 100644
--- a/facebook/src/test/java/com/facebook/AccessTokenTest.java
+++ b/facebook/src/test/java/com/facebook/AccessTokenTest.java
@@ -274,6 +274,27 @@ public void testRoundtripJSONObject() throws JSONException {
         assertEquals(accessToken, deserializedAccessToken);
     }
 
+    @Test
+    public void testJSONObjectWithoutDataAccess() throws JSONException {
+        AccessToken accessToken = new AccessToken(
+                "a token",
+                "1234",
+                "1000",
+                Arrays.asList("permission_1", "permission_2"),
+                Arrays.asList("declined permission_1", "declined permission_2"),
+                AccessTokenSource.WEB_VIEW,
+                new Date(2015, 3, 3),
+                new Date(2015, 1, 1),
+                new Date(0));
+
+        JSONObject jsonObject = accessToken.toJSONObject();
+        jsonObject.remove("data_access_expiration_time");
+
+        AccessToken deserializedAccessToken = AccessToken.createFromJSONObject(jsonObject);
+
+        assertEquals(accessToken, deserializedAccessToken);
+    }
+
     @Test
     public void testParceling() throws IOException {
         String token = "a token";
