diff --git a/facebook/src/io/openkit/facebook/widget/FacebookFragment.java b/facebook/src/io/openkit/facebook/widget/FacebookFragment.java
index 4eb1b2eef..0365647a2 100644
--- a/facebook/src/io/openkit/facebook/widget/FacebookFragment.java
+++ b/facebook/src/io/openkit/facebook/widget/FacebookFragment.java
@@ -29,17 +29,17 @@
 import java.util.List;
 
 /**
- * <p>Basic implementation of a Fragment that uses a Session to perform 
+ * <p>Basic implementation of a Fragment that uses a Session to perform
  * Single Sign On (SSO). This class is package private, and is not intended
  * to be consumed by external applications.</p>
- * 
+ *
  * <p>The method {@link android.support.v4.app.Fragment#onActivityResult} is
- * used to manage the session information, so if you override it in a subclass, 
+ * used to manage the session information, so if you override it in a subclass,
  * be sure to call {@code super.onActivityResult}.</p>
- * 
+ *
  * <p>The methods in this class are not thread-safe.</p>
  */
-class FacebookFragment extends Fragment {
+public class FacebookFragment extends Fragment {
 
     private SessionTracker sessionTracker;
 
@@ -48,7 +48,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         sessionTracker = new SessionTracker(getActivity(), new DefaultSessionStatusCallback());
     }
-    
+
     /**
      * Called when the activity that was launched exits. This method manages session
      * information when a session is opened. If this method is overridden in subclasses,
@@ -78,11 +78,11 @@ public void setSession(Session newSession) {
     }
 
     // METHOD TO BE OVERRIDDEN
-    
+
     /**
      * Called when the session state changes. Override this method to take action
      * on session state changes.
-     * 
+     *
      * @param state the new state
      * @param exception any exceptions that occurred during the state change
      */
@@ -90,10 +90,10 @@ protected void onSessionStateChange(SessionState state, Exception exception) {
     }
 
     // ACCESSORS (CANNOT BE OVERRIDDEN)
-    
+
     /**
      * Gets the current Session.
-     * 
+     *
      * @return the current Session object.
      */
     protected final Session getSession() {
@@ -105,7 +105,7 @@ protected final Session getSession() {
 
     /**
      * Determines whether the current session is open.
-     * 
+     *
      * @return true if the current session is open
      */
     protected final boolean isSessionOpen() {
@@ -114,10 +114,10 @@ protected final boolean isSessionOpen() {
         }
         return false;
     }
-    
+
     /**
      * Gets the current state of the session or null if no session has been created.
-     * 
+     *
      * @return the current state of the session
      */
     protected final SessionState getSessionState() {
@@ -127,11 +127,11 @@ protected final SessionState getSessionState() {
         }
         return null;
     }
-    
+
     /**
-     * Gets the access token associated with the current session or null if no 
+     * Gets the access token associated with the current session or null if no
      * session has been created.
-     * 
+     *
      * @return the access token
      */
     protected final String getAccessToken() {
@@ -143,9 +143,9 @@ protected final String getAccessToken() {
     }
 
     /**
-     * Gets the date at which the current session will expire or null if no session 
+     * Gets the date at which the current session will expire or null if no session
      * has been created.
-     * 
+     *
      * @return the date at which the current session will expire
      */
     protected final Date getExpirationDate() {
@@ -155,7 +155,7 @@ protected final Date getExpirationDate() {
         }
         return null;
     }
-    
+
     /**
      * Closes the current session.
      */
@@ -167,7 +167,7 @@ protected final void closeSession() {
             }
         }
     }
-    
+
     /**
      * Closes the current session as well as clearing the token cache.
      */
@@ -179,11 +179,11 @@ protected final void closeSessionAndClearTokenInformation() {
             }
         }
     }
-    
+
     /**
-     * Gets the permissions associated with the current session or null if no session 
+     * Gets the permissions associated with the current session or null if no session
      * has been created.
-     * 
+     *
      * @return the permissions associated with the current session
      */
     protected final List<String> getSessionPermissions() {
@@ -287,11 +287,11 @@ private void openSession(String applicationId, List<String> permissions,
     private class DefaultSessionStatusCallback implements Session.StatusCallback {
 
         @Override
-        public void call(Session session, 
+        public void call(Session session,
                          SessionState state,
                          Exception exception) {
             FacebookFragment.this.onSessionStateChange(state, exception);
         }
-        
+
     }
 }
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
index feaf44f80..cf12d2839 100644
Binary files a/libs/android-support-v4.jar and b/libs/android-support-v4.jar differ
