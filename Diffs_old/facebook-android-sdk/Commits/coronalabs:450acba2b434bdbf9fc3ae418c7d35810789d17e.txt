diff --git a/PULL_REQUEST_TEMPLATE b/PULL_REQUEST_TEMPLATE
new file mode 100644
index 000000000..21bd8ebe9
--- /dev/null
+++ b/PULL_REQUEST_TEMPLATE
@@ -0,0 +1,6 @@
+Thanks for proposing a pull request.
+
+To help us review the request, please complete the following:
+- [ ] sign contributor license agreement: https://developers.facebook.com/opensource/cla
+- [ ] submit against our `:dev` branch, not `master`.
+- [ ] describe the change (for example, what happens before the change, and after the change)
diff --git a/build.gradle b/build.gradle
index 3cc25de13..e435642ee 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.0'
+        classpath 'com.android.tools.build:gradle:2.1.2'
     }
 }
 
diff --git a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
index da6bc7eaa..fce764fe1 100644
--- a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
@@ -25,6 +25,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.internal.BundleJSONConverter;
 import com.facebook.share.internal.ShareInternalUtility;
@@ -108,7 +109,7 @@ public void testExecuteSingleGet() {
         parameters.putString("fields", "location");
         GraphRequest request = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                RequestTests.TEST_PAGE_ID,
                 parameters,
                 null,
                 new ExpectSuccessCallback() {
@@ -117,7 +118,7 @@ protected void performAsserts(GraphResponse response) {
                         assertNotNull(response);
                         JSONObject graphPlace = response.getJSONObject();
                         assertEquals(
-                                "Paris",
+                                "Seattle",
                                 graphPlace.optJSONObject("location").optString("city"));
                     }
                 });
@@ -138,7 +139,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() {
         parameters.putString("fields", "location");
         GraphRequest request = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                "910055289103294",
                 parameters,
                 null,
                 new ExpectSuccessCallback() {
@@ -147,7 +148,7 @@ protected void performAsserts(GraphResponse response) {
                         assertNotNull(response);
                         JSONObject graphPlace = response.getJSONObject();
                         assertEquals(
-                                "Paris",
+                                "Seattle",
                                 graphPlace.optJSONObject("location").optString("city"));
                     }
                 });
diff --git a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
index 135225b40..9e0347775 100644
--- a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
@@ -23,6 +23,7 @@
 import android.graphics.Bitmap;
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.share.internal.ShareInternalUtility;
 
@@ -76,14 +77,14 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
 
         GraphRequest request1 = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                RequestTests.TEST_PAGE_ID,
                 parameters,
                 null);
-        request1.setBatchEntryName("eiffel");
+        request1.setBatchEntryName("seattle");
         request1.setBatchEntryOmitResultOnSuccess(false);
         GraphRequest request2 = new GraphRequest(
                 accessToken,
-                "{result=eiffel:$.id}",
+                "{result=seattle:$.id}",
                 parameters,
                 null);
 
@@ -92,13 +93,13 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
         assertTrue(responses.get(0).getError() == null);
         assertTrue(responses.get(1).getError() == null);
 
-        JSONObject eiffelTower1 = responses.get(0).getJSONObject();
-        JSONObject eiffelTower2 = responses.get(1).getJSONObject();
-        assertTrue(eiffelTower1 != null);
-        assertTrue(eiffelTower2 != null);
+        JSONObject seattle1 = responses.get(0).getJSONObject();
+        JSONObject seattle2 = responses.get(1).getJSONObject();
+        assertTrue(seattle1 != null);
+        assertTrue(seattle2 != null);
 
-        assertEquals("Paris", eiffelTower1.optJSONObject("location").optString("city"));
-        assertEquals("Paris", eiffelTower2.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", seattle1.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", seattle2.optJSONObject("location").optString("city"));
     }
 
     @LargeTest
@@ -110,12 +111,12 @@ public void testExecuteBatchedGets() throws IOException {
 
         GraphRequest request1 = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                RequestTests.TEST_PAGE_ID,
                 parameters,
                 null);
         GraphRequest request2 = new GraphRequest(
                 accessToken,
-                "SpaceNeedle",
+                RequestTests.TEST_PAGE_ID_2,
                 parameters,
                 null);
 
@@ -124,13 +125,13 @@ public void testExecuteBatchedGets() throws IOException {
         assertTrue(responses.get(0).getError() == null);
         assertTrue(responses.get(1).getError() == null);
 
-        JSONObject eiffelTower = responses.get(0).getJSONObject();
-        JSONObject spaceNeedle = responses.get(1).getJSONObject();
-        assertTrue(eiffelTower != null);
-        assertTrue(spaceNeedle != null);
+        JSONObject seattle = responses.get(0).getJSONObject();
+        JSONObject paris = responses.get(1).getJSONObject();
+        assertTrue(seattle != null);
+        assertTrue(paris != null);
 
-        assertEquals("Paris", eiffelTower.optJSONObject("location").optString("city"));
-        assertEquals("Seattle", spaceNeedle.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", seattle.optJSONObject("location").optString("city"));
+        assertEquals("Paris", paris.optJSONObject("location").optString("city"));
     }
 
     @LargeTest
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
index 3042f889d..06a01f5ad 100644
--- a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
+++ b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
@@ -22,6 +22,7 @@
 
 import android.net.Uri;
 import android.os.Handler;
+import android.test.FlakyTest;
 
 import com.facebook.applinks.FacebookAppLinkResolver;
 
@@ -98,6 +99,7 @@ public void testUrlWithNoAppLinkData() {
         }
     }
 
+    @FlakyTest
     public void testCachedAppLinkData() {
         String testUrlString = "https://fb.me/732873156764191";
         Uri testUrl = Uri.parse(testUrlString);
diff --git a/facebook/src/androidTest/java/com/facebook/RequestTests.java b/facebook/src/androidTest/java/com/facebook/RequestTests.java
index 61f0c5547..addb33e42 100644
--- a/facebook/src/androidTest/java/com/facebook/RequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/RequestTests.java
@@ -25,6 +25,7 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.internal.GraphUtil;
 import com.facebook.share.ShareApi;
@@ -58,6 +59,9 @@
     private static final String TEST_OG_ACTION_TYPE = "facebooksdktests:run";
     private static final long REQUEST_TIMEOUT_MILLIS = 10000;
 
+    public static final String TEST_PAGE_ID = "910055289103294";
+    public static final String TEST_PAGE_ID_2 = "110774245616525";
+
     protected String[] getDefaultPermissions()
     {
         return new String[] {
@@ -87,7 +91,7 @@ public void testExecuteSingleGet() {
 
         GraphRequest request = new GraphRequest(
                 AccessToken.getCurrentAccessToken(),
-                "TourEiffel",
+                TEST_PAGE_ID,
                 parameters,
                 null);
         GraphResponse response = request.executeAndWait();
@@ -98,7 +102,7 @@ public void testExecuteSingleGet() {
         assertNotNull(response.getRawResponse());
 
         JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", graphPlace.optJSONObject("location").optString("city"));
     }
 
     @LargeTest
@@ -126,7 +130,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
 
         GraphRequest request = new GraphRequest(
                 AccessToken.getCurrentAccessToken(),
-                "TourEiffel",
+                TEST_PAGE_ID,
                 parameters,
                 null);
         HttpURLConnection connection = GraphRequest.toHttpConnection(request);
@@ -150,7 +154,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
         assertNotNull(response.getRawResponse());
 
         JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", graphPlace.optJSONObject("location").optString("city"));
 
         // Make sure calling code can still access HTTP headers and call disconnect themselves.
         int code = connection.getResponseCode();
@@ -988,7 +992,7 @@ public void testPaging() {
                 .newPlacesSearchRequest(
                         AccessToken.getCurrentAccessToken(),
                         SEATTLE_LOCATION,
-                        1000,
+                        100000,
                         3,
                         null,
                         new GraphRequest.GraphJSONArrayCallback() {
@@ -1018,7 +1022,6 @@ public void onCompleted(JSONArray places, GraphResponse response) {
 
         assertNull(response.getError());
         assertNotNull(response.getJSONObject());
-        assertNotSame(0, returnedPlaces.size());
 
         returnedPlaces.clear();
 
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
index 3b5e0be09..60bfc5882 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.13.2";
+    public static final String BUILD = "4.14.0";
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEvent.java b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
index a2d9d4c0d..266b09e41 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEvent.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
@@ -20,6 +20,7 @@
 
 package com.facebook.appevents;
 
+import android.content.Context;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 
@@ -27,6 +28,7 @@
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.internal.Constants;
 import com.facebook.internal.Logger;
+import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -39,10 +41,11 @@
 class AppEvent implements Serializable {
     private static final long serialVersionUID = 1L;
 
-    private JSONObject jsonObject;
-    private boolean isImplicit;
     private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
-    private String name;
+
+    private final JSONObject jsonObject;
+    private final boolean isImplicit;
+    private final String name;
 
     public AppEvent(
             String contextName,
@@ -51,66 +54,16 @@ public AppEvent(
             Bundle parameters,
             boolean isImplicitlyLogged,
             @Nullable final UUID currentSessionId
-    ) {
-        try {
-            validateIdentifier(eventName);
-
-            this.name = eventName;
-            isImplicit = isImplicitlyLogged;
-            jsonObject = new JSONObject();
-
-            jsonObject.put("_eventName", eventName);
-            jsonObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
-            jsonObject.put("_ui", contextName);
-            if (currentSessionId != null) {
-                jsonObject.put("_session_id", currentSessionId);
-            }
-
-            if (valueToSum != null) {
-                jsonObject.put("_valueToSum", valueToSum.doubleValue());
-            }
-
-            if (isImplicit) {
-                jsonObject.put("_implicitlyLogged", "1");
-            }
-
-            if (parameters != null) {
-                for (String key : parameters.keySet()) {
-
-                    validateIdentifier(key);
-
-                    Object value = parameters.get(key);
-                    if (!(value instanceof String) && !(value instanceof Number)) {
-                        throw new FacebookException(
-                                String.format(
-                                        "Parameter value '%s' for key '%s' should be a string" +
-                                                " or a numeric type.",
-                                        value,
-                                        key)
-                        );
-                    }
-
-                    jsonObject.put(key, value.toString());
-                }
-            }
-
-            if (!isImplicit) {
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "Created app event '%s'", jsonObject.toString());
-            }
-        } catch (JSONException jsonException) {
-
-            // If any of the above failed, just consider this an illegal event.
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "JSON encoding for app event failed: '%s'", jsonException.toString());
-            jsonObject = null;
-
-        } catch (FacebookException e) {
-            // If any of the above failed, just consider this an illegal event.
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "Invalid app event name or parameter:", e.toString());
-            jsonObject = null;
-        }
+    ) throws JSONException, FacebookException {
+        jsonObject = getJSONObjectForAppEvent(
+                contextName,
+                eventName,
+                valueToSum,
+                parameters,
+                isImplicitlyLogged,
+                currentSessionId);
+        isImplicit = isImplicitlyLogged;
+        name = eventName;
     }
 
     public String getName() {
@@ -120,6 +73,7 @@ public String getName() {
     private AppEvent(String jsonString, boolean isImplicit) throws JSONException {
         jsonObject = new JSONObject(jsonString);
         this.isImplicit = isImplicit;
+        this.name = jsonObject.optString(Constants.EVENT_NAME_EVENT_KEY);
     }
 
     public boolean getIsImplicit() {
@@ -131,7 +85,7 @@ public JSONObject getJSONObject() {
     }
 
     // throw exception if not valid.
-    private void validateIdentifier(String identifier) throws FacebookException {
+    private static void validateIdentifier(String identifier) throws FacebookException {
 
         // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen,
         // and space (but no hyphen or space in the first position).
@@ -176,6 +130,61 @@ private void validateIdentifier(String identifier) throws FacebookException {
         }
     }
 
+    private static JSONObject getJSONObjectForAppEvent(
+            String contextName,
+            String eventName,
+            Double valueToSum,
+            Bundle parameters,
+            boolean isImplicitlyLogged,
+            @Nullable final UUID currentSessionId
+    ) throws FacebookException, JSONException{
+        validateIdentifier(eventName);
+
+        JSONObject eventObject = new JSONObject();
+
+        eventObject.put(Constants.EVENT_NAME_EVENT_KEY, eventName);
+        eventObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
+        eventObject.put("_ui", contextName);
+        if (currentSessionId != null) {
+            eventObject.put("_session_id", currentSessionId);
+        }
+
+        if (valueToSum != null) {
+            eventObject.put("_valueToSum", valueToSum.doubleValue());
+        }
+
+        if (isImplicitlyLogged) {
+            eventObject.put("_implicitlyLogged", "1");
+        }
+
+        if (parameters != null) {
+            for (String key : parameters.keySet()) {
+
+                validateIdentifier(key);
+
+                Object value = parameters.get(key);
+                if (!(value instanceof String) && !(value instanceof Number)) {
+                    throw new FacebookException(
+                            String.format(
+                                    "Parameter value '%s' for key '%s' should be a string" +
+                                            " or a numeric type.",
+                                    value,
+                                    key)
+                    );
+                }
+
+                eventObject.put(key, value.toString());
+            }
+        }
+
+        if (!isImplicitlyLogged) {
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "Created app event '%s'", eventObject.toString());
+        }
+
+        return eventObject;
+    }
+
     static class SerializationProxyV1 implements Serializable {
         private static final long serialVersionUID = -2488473066578201069L;
         private final String jsonString;
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
index d687efa1c..75cc72504 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
@@ -120,14 +120,19 @@ public static synchronized PersistedEvents readAndClearStore() {
     private static void saveEventsToDisk(
             PersistedEvents eventsToPersist) {
         ObjectOutputStream oos = null;
+        Context context = FacebookSdk.getApplicationContext();
         try {
-            Context context = FacebookSdk.getApplicationContext();
             oos = new ObjectOutputStream(
                     new BufferedOutputStream(
                             context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
             oos.writeObject(eventsToPersist);
         } catch (Exception e) {
             Log.w(TAG, "Got unexpected exception while persisting events: ", e);
+            try {
+                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
+            } catch (Exception innerException) {
+                // ignore
+            }
         } finally {
             Utility.closeQuietly(oos);
         }
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
index 35e8fc945..090186847 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -802,14 +802,26 @@ private void logEvent(
             Bundle parameters,
             boolean isImplicitlyLogged,
             @Nullable final UUID currentSessionId) {
-        AppEvent event = new AppEvent(
-                this.contextName,
-                eventName,
-                valueToSum,
-                parameters,
-                isImplicitlyLogged,
-                currentSessionId);
-        logEvent(FacebookSdk.getApplicationContext(), event, accessTokenAppId);
+        try {
+            AppEvent event = new AppEvent(
+                    this.contextName,
+                    eventName,
+                    valueToSum,
+                    parameters,
+                    isImplicitlyLogged,
+                    currentSessionId);
+            logEvent(FacebookSdk.getApplicationContext(), event, accessTokenAppId);
+        } catch (JSONException jsonException) {
+            // If any of the above failed, just consider this an illegal event.
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "JSON encoding for app event failed: '%s'", jsonException.toString());
+
+        } catch (FacebookException e) {
+            // If any of the above failed, just consider this an illegal event.
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "Invalid app event: %s", e.toString());
+        }
+
     }
 
     private static void logEvent(final Context context,
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
index 9b0ef4fb1..8a6035365 100644
--- a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
@@ -22,6 +22,7 @@
 
 public class Constants {
     public static final String LOG_TIME_APP_EVENT_KEY = "_logTime";
+    public static final String EVENT_NAME_EVENT_KEY = "_eventName";
 
     public static int getDefaultAppEventsSessionTimeoutInSeconds() {
         return 60;
diff --git a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
index 374075a18..3625a3479 100644
--- a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
@@ -230,6 +230,7 @@
 
     private static abstract class NativeAppInfo {
         abstract protected String getPackage();
+        abstract protected String getLoginActivity();
 
         private static final String FBI_HASH = "a4b7452e2ed8f5f191058ca7bbfd26b0d3214bfc";
         private static final String FBL_HASH = "5e8f16062ea3cd2c4a0d547876baa6f38cabf625";
@@ -300,6 +301,11 @@ private synchronized void fetchAvailableVersions(boolean force) {
         protected String getPackage() {
             return KATANA_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_PROXY_AUTH_ACTIVITY;
+        }
     }
 
     private static class MessengerAppInfo extends NativeAppInfo {
@@ -309,6 +315,11 @@ protected String getPackage() {
         protected String getPackage() {
             return MESSENGER_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return null;
+        }
     }
 
     private static class WakizashiAppInfo extends NativeAppInfo {
@@ -318,6 +329,27 @@ protected String getPackage() {
         protected String getPackage() {
             return WAKIZASHI_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_PROXY_AUTH_ACTIVITY;
+        }
+    }
+
+    private static class FBLiteAppInfo extends NativeAppInfo {
+        static final String FBLITE_PACKAGE = "com.facebook.lite";
+        static final String FACEBOOK_LITE_ACTIVITY =
+                "com.facebook.lite.platform.LoginGDPDialogActivity";
+
+        @Override
+        protected String getPackage() {
+            return FBLITE_PACKAGE;
+        }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_LITE_ACTIVITY;
+        }
     }
 
     private static List<NativeAppInfo> facebookAppInfoList = buildFacebookAppList();
@@ -386,7 +418,7 @@ static Intent validateServiceIntent(Context context, Intent intent, NativeAppInf
         return intent;
     }
 
-    public static Intent createProxyAuthIntent(
+    public static Intent createFacebookLiteIntent(
             Context context,
             String applicationId,
             Collection<String> permissions,
@@ -394,45 +426,94 @@ public static Intent createProxyAuthIntent(
             boolean isRerequest,
             boolean isForPublish,
             DefaultAudience defaultAudience,
-            String clientState) {
-        for (NativeAppInfo appInfo : facebookAppInfoList) {
-            Intent intent = new Intent()
-                    .setClassName(appInfo.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
-                    .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+            String clientState
+    ) {
+        NativeAppInfo appInfo = new FBLiteAppInfo();
+        Intent intent = createNativeAppIntent(
+                appInfo,
+                applicationId,
+                permissions,
+                e2e,
+                isRerequest,
+                isForPublish,
+                defaultAudience,
+                clientState);
+        intent = validateActivityIntent(context, intent, appInfo);
 
-            if (!Utility.isNullOrEmpty(permissions)) {
-                intent.putExtra(
-                        FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-            }
-            if (!Utility.isNullOrEmpty(e2e)) {
-                intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
-            }
+        return intent;
+    }
 
-            intent.putExtra(ServerProtocol.DIALOG_PARAM_STATE, clientState);
-            intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
-                    ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+    private static Intent createNativeAppIntent(
+            NativeAppInfo appInfo,
+            String applicationId,
+            Collection<String> permissions,
+            String e2e,
+            boolean isRerequest,
+            boolean isForPublish,
+            DefaultAudience defaultAudience,
+            String clientState
+    ) {
+        String activityName = appInfo.getLoginActivity();
+        // the NativeApp doesn't have a login activity
+        if (activityName == null) {
+            return null;
+        }
+
+        Intent intent = new Intent()
+                .setClassName(appInfo.getPackage(), activityName)
+                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+
+        if (!Utility.isNullOrEmpty(permissions)) {
             intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
-                    ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-            if (isForPublish) {
-                intent.putExtra(
-                        ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE,
-                        defaultAudience.getNativeProtocolAudience());
-            }
+                    FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
+        }
+        if (!Utility.isNullOrEmpty(e2e)) {
+            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
+        }
 
-            // Override the API Version for Auth
+        intent.putExtra(ServerProtocol.DIALOG_PARAM_STATE, clientState);
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
+                ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
+                ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+        if (isForPublish) {
             intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
-                    ServerProtocol.GRAPH_API_VERSION);
-
-            // Set the re-request auth type for requests
-            if (isRerequest) {
-                intent.putExtra(
-                        ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
-                        ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-            }
+                    ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE,
+                    defaultAudience.getNativeProtocolAudience());
+        }
 
+        // Override the API Version for Auth
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
+                ServerProtocol.GRAPH_API_VERSION);
+
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
+                ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+        return intent;
+    }
+
+    public static Intent createProxyAuthIntent(
+            Context context,
+            String applicationId,
+            Collection<String> permissions,
+            String e2e,
+            boolean isRerequest,
+            boolean isForPublish,
+            DefaultAudience defaultAudience,
+            String clientState) {
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = createNativeAppIntent(
+                    appInfo,
+                    applicationId,
+                    permissions,
+                    e2e,
+                    isRerequest,
+                    isForPublish,
+                    defaultAudience,
+                    clientState);
             intent = validateActivityIntent(context, intent, appInfo);
 
             if (intent != null) {
diff --git a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
index b7e8747b7..160ab7439 100644
--- a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
@@ -76,7 +76,7 @@
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    public static final String GRAPH_API_VERSION = "v2.6";
+    public static final String GRAPH_API_VERSION = "v2.7";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
diff --git a/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
new file mode 100644
index 000000000..a39406278
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
@@ -0,0 +1,94 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookException;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+
+
+class FacebookLiteLoginMethodHandler extends NativeAppLoginMethodHandler {
+
+    FacebookLiteLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    @Override
+    String getNameForLogging() {
+        return "fb_lite_login";
+    }
+
+    @Override
+    boolean tryAuthorize(LoginClient.Request request) {
+        String e2e = LoginClient.getE2E();
+        Intent intent = NativeProtocol.createFacebookLiteIntent(
+                loginClient.getActivity(),
+                request.getApplicationId(),
+                request.getPermissions(),
+                e2e,
+                request.isRerequest(),
+                request.hasPublishPermission(),
+                request.getDefaultAudience(),
+                getClientState(request.getAuthId()));
+
+        addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
+
+        return tryIntent(intent, LoginClient.getLoginRequestCode());
+    }
+
+    FacebookLiteLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+    }
+
+    public static final Parcelable.Creator<FacebookLiteLoginMethodHandler> CREATOR =
+            new Parcelable.Creator() {
+
+                @Override
+                public FacebookLiteLoginMethodHandler createFromParcel(Parcel source) {
+                    return new FacebookLiteLoginMethodHandler(source);
+                }
+
+                @Override
+                public FacebookLiteLoginMethodHandler[] newArray(int size) {
+                    return new FacebookLiteLoginMethodHandler[size];
+                }
+            };
+}
diff --git a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
index 9fb8c5b7d..0651b1c9a 100644
--- a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
@@ -30,12 +30,11 @@
 import com.facebook.AccessToken;
 import com.facebook.AccessTokenSource;
 import com.facebook.FacebookException;
-import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 
-class KatanaProxyLoginMethodHandler extends LoginMethodHandler {
+class KatanaProxyLoginMethodHandler extends NativeAppLoginMethodHandler {
 
     KatanaProxyLoginMethodHandler(LoginClient loginClient) {
         super(loginClient);
@@ -64,111 +63,6 @@ boolean tryAuthorize(LoginClient.Request request) {
         return tryIntent(intent, LoginClient.getLoginRequestCode());
     }
 
-    @Override
-    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        // Handle stuff
-        LoginClient.Result outcome;
-
-        LoginClient.Request request = loginClient.getPendingRequest();
-
-        if (data == null) {
-            // This happens if the user presses 'Back'.
-            outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
-        } else if (resultCode == Activity.RESULT_CANCELED) {
-            outcome = handleResultCancel(request, data);
-        } else if (resultCode != Activity.RESULT_OK) {
-            outcome = LoginClient.Result.createErrorResult(request,
-                    "Unexpected resultCode from authorization.", null);
-        } else {
-            outcome = handleResultOk(request, data);
-        }
-
-        if (outcome != null) {
-            loginClient.completeAndValidate(outcome);
-        } else {
-            loginClient.tryNextHandler();
-        }
-        return true;
-    }
-
-    private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-        String errorMessage = getErrorMessage(extras);
-
-        String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
-        if (!Utility.isNullOrEmpty(e2e)) {
-            logWebLoginCompleted(e2e);
-        }
-
-        if (error == null && errorCode == null && errorMessage == null) {
-            try {
-                AccessToken token = createAccessTokenFromWebBundle(request.getPermissions(),
-                        extras, AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                        request.getApplicationId());
-                return LoginClient.Result.createTokenResult(request, token);
-            } catch (FacebookException ex) {
-                return LoginClient.Result.createErrorResult(request, null, ex.getMessage());
-            }
-        } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
-            return null;
-        } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
-            return LoginClient.Result.createCancelResult(request, null);
-        } else {
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-    }
-
-    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-
-        // If the device has lost network, the result will be a cancel with a connection failure
-        // error. We want our consumers to be notified of this as an error so they can tell their
-        // users to "reconnect and try again".
-        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
-            String errorMessage = getErrorMessage(extras);
-
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-
-        return LoginClient.Result.createCancelResult(request, error);
-    }
-
-    private String getError(Bundle extras) {
-        String error = extras.getString("error");
-        if (error == null) {
-            error = extras.getString("error_type");
-        }
-        return error;
-    }
-
-    private String getErrorMessage(Bundle extras) {
-        String errorMessage = extras.getString("error_message");
-        if (errorMessage == null) {
-            errorMessage = extras.getString("error_description");
-        }
-        return errorMessage;
-    }
-
-    protected boolean tryIntent(Intent intent, int requestCode) {
-        if (intent == null) {
-            return false;
-        }
-
-        try {
-            loginClient.getFragment().startActivityForResult(intent, requestCode);
-        } catch (ActivityNotFoundException e) {
-            // We don't expect this to happen, since we've already validated the intent and bailed
-            // out before now if it couldn't be resolved.
-            return false;
-        }
-
-        return true;
-    }
-
     KatanaProxyLoginMethodHandler(Parcel source) {
         super(source);
     }
diff --git a/facebook/src/main/java/com/facebook/login/LoginBehavior.java b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
index 79900ee2c..f7e0e005b 100644
--- a/facebook/src/main/java/com/facebook/login/LoginBehavior.java
+++ b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
@@ -28,45 +28,48 @@
      * Specifies that login should attempt login in using the Facebook App, and if that
      * does not work fall back to web dialog auth. This is the default behavior.
      */
-    NATIVE_WITH_FALLBACK(true, true, false, true),
+    NATIVE_WITH_FALLBACK(true, true, false, true, true),
 
     /**
      * Specifies that login should only attempt to login using the Facebook App.
      * If the Facebook App cannot be used then the login fails.
      */
-    NATIVE_ONLY(true, false, false, false),
+    NATIVE_ONLY(true, false, false, false, true),
 
     /**
      * Specifies that only the web dialog auth should be used.
      */
-    WEB_ONLY(false, true, false, true),
+    WEB_ONLY(false, true, false, true, false),
 
     /**
      * Specifies that only the web view dialog auth should be used.
      */
-    WEB_VIEW_ONLY(false, true, false, false),
+    WEB_VIEW_ONLY(false, true, false, false, false),
 
     /**
      * Specifies that device login authentication flow should be used.
      * Use it via ({@link com.facebook.login.widget.DeviceLoginButton DeviceLoginButton}
      * or ({@link com.facebook.login.DeviceLoginManager DeviceLoginManager} to authenticate.
      */
-    DEVICE_AUTH(false, false, true, false);
+    DEVICE_AUTH(false, false, true, false, false);
 
     private final boolean allowsKatanaAuth;
     private final boolean allowsWebViewAuth;
     private final boolean allowsDeviceAuth;
     private final boolean allowsCustomTabAuth;
+    private final boolean allowsFacebookLiteAuth;
 
     private LoginBehavior(
             boolean allowsKatanaAuth,
             boolean allowsWebViewAuth,
             boolean allowsDeviceAuth,
-            boolean allowsCustomTabAuth) {
+            boolean allowsCustomTabAuth,
+            boolean allowsFacebookLiteAuth) {
         this.allowsKatanaAuth = allowsKatanaAuth;
         this.allowsWebViewAuth = allowsWebViewAuth;
         this.allowsDeviceAuth = allowsDeviceAuth;
         this.allowsCustomTabAuth = allowsCustomTabAuth;
+        this.allowsFacebookLiteAuth = allowsFacebookLiteAuth;
     }
 
     boolean allowsKatanaAuth() {
@@ -84,4 +87,8 @@ boolean allowsDeviceAuth() {
     boolean allowsCustomTabAuth() {
         return allowsCustomTabAuth;
     }
+
+    boolean allowsFacebookLiteAuth() {
+        return allowsFacebookLiteAuth;
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/login/LoginClient.java b/facebook/src/main/java/com/facebook/login/LoginClient.java
index d7ecf3a55..eb4f08e23 100644
--- a/facebook/src/main/java/com/facebook/login/LoginClient.java
+++ b/facebook/src/main/java/com/facebook/login/LoginClient.java
@@ -164,6 +164,10 @@ public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
             handlers.add(new KatanaProxyLoginMethodHandler(this));
         }
 
+        if (behavior.allowsFacebookLiteAuth()) {
+            handlers.add(new FacebookLiteLoginMethodHandler(this));
+        }
+
         if (behavior.allowsCustomTabAuth()) {
             handlers.add(new CustomTabLoginMethodHandler(this));
         }
diff --git a/facebook/src/main/java/com/facebook/login/LoginFragment.java b/facebook/src/main/java/com/facebook/login/LoginFragment.java
index 60342afb0..0a7e50c8f 100644
--- a/facebook/src/main/java/com/facebook/login/LoginFragment.java
+++ b/facebook/src/main/java/com/facebook/login/LoginFragment.java
@@ -49,6 +49,7 @@
 
 public class LoginFragment extends Fragment {
     static final String RESULT_KEY = "com.facebook.LoginFragment:Result";
+    static final String REQUEST_KEY = "com.facebook.LoginFragment:Request";
     static final String EXTRA_REQUEST = "request";
 
     private static final String TAG = "LoginFragment";
@@ -95,11 +96,8 @@ public void onCompleted(LoginClient.Result outcome) {
         initializeCallingPackage(activity);
         if (activity.getIntent() != null) {
             Intent intent = activity.getIntent();
-            // Set the class loader explicitly to avoid a possible issue where the wrong
-            // class loader is used by android for unmarshalling LoginClient.Request on
-            // Samsung devices
-            intent.setExtrasClassLoader(LoginClient.Request.class.getClassLoader());
-            request = (LoginClient.Request)intent.getParcelableExtra(EXTRA_REQUEST);
+            Bundle bundle = intent.getBundleExtra(REQUEST_KEY);
+            request = (LoginClient.Request)bundle.getParcelable(EXTRA_REQUEST);
         }
     }
 
diff --git a/facebook/src/main/java/com/facebook/login/LoginManager.java b/facebook/src/main/java/com/facebook/login/LoginManager.java
index 21ddb39fd..053d77c4e 100644
--- a/facebook/src/main/java/com/facebook/login/LoginManager.java
+++ b/facebook/src/main/java/com/facebook/login/LoginManager.java
@@ -533,7 +533,7 @@ private Intent getFacebookActivityIntent(LoginClient.Request request) {
         LoginClient.Request authClientRequest = request;
         Bundle extras = new Bundle();
         extras.putParcelable(LoginFragment.EXTRA_REQUEST, request);
-        intent.putExtras(extras);
+        intent.putExtra(LoginFragment.REQUEST_KEY, extras);
 
         return intent;
     }
@@ -585,7 +585,9 @@ private void finishLogin(
     }
 
     public static void setSuccessResult(Intent intent, Bundle values) {
-        LoginClient.Request request = intent.getExtras().getParcelable(LoginFragment.EXTRA_REQUEST);
+        Bundle bundle = intent.getBundleExtra(LoginFragment.REQUEST_KEY);
+        LoginClient.Request request =
+                (LoginClient.Request) bundle.getParcelable(LoginFragment.EXTRA_REQUEST);
         AccessToken token = LoginMethodHandler.createAccessTokenFromWebBundle(
                 request.getPermissions(),
                 values,
diff --git a/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
new file mode 100644
index 000000000..be86941ad
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
@@ -0,0 +1,152 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcel;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookException;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+
+abstract class NativeAppLoginMethodHandler extends LoginMethodHandler {
+
+    NativeAppLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    NativeAppLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    abstract boolean tryAuthorize(LoginClient.Request request);
+
+    @Override
+    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
+        // Handle stuff
+        LoginClient.Result outcome;
+
+        LoginClient.Request request = loginClient.getPendingRequest();
+
+        if (data == null) {
+            // This happens if the user presses 'Back'.
+            outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
+        } else if (resultCode == Activity.RESULT_CANCELED) {
+            outcome = handleResultCancel(request, data);
+        } else if (resultCode != Activity.RESULT_OK) {
+            outcome = LoginClient.Result.createErrorResult(request,
+                    "Unexpected resultCode from authorization.", null);
+        } else {
+            outcome = handleResultOk(request, data);
+        }
+
+        if (outcome != null) {
+            loginClient.completeAndValidate(outcome);
+        } else {
+            loginClient.tryNextHandler();
+        }
+        return true;
+    }
+
+    private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
+        Bundle extras = data.getExtras();
+        String error = getError(extras);
+        String errorCode = extras.getString("error_code");
+        String errorMessage = getErrorMessage(extras);
+
+        String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
+        if (!Utility.isNullOrEmpty(e2e)) {
+            logWebLoginCompleted(e2e);
+        }
+
+        if (error == null && errorCode == null && errorMessage == null) {
+            try {
+                AccessToken token = createAccessTokenFromWebBundle(request.getPermissions(),
+                        extras, AccessTokenSource.FACEBOOK_APPLICATION_WEB,
+                        request.getApplicationId());
+                return LoginClient.Result.createTokenResult(request, token);
+            } catch (FacebookException ex) {
+                return LoginClient.Result.createErrorResult(request, null, ex.getMessage());
+            }
+        } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
+            return null;
+        } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
+            return LoginClient.Result.createCancelResult(request, null);
+        } else {
+            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
+        }
+    }
+
+    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
+        Bundle extras = data.getExtras();
+        String error = getError(extras);
+        String errorCode = extras.getString("error_code");
+
+        // If the device has lost network, the result will be a cancel with a connection failure
+        // error. We want our consumers to be notified of this as an error so they can tell their
+        // users to "reconnect and try again".
+        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
+            String errorMessage = getErrorMessage(extras);
+
+            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
+        }
+
+        return LoginClient.Result.createCancelResult(request, error);
+    }
+
+    private String getError(Bundle extras) {
+        String error = extras.getString("error");
+        if (error == null) {
+            error = extras.getString("error_type");
+        }
+        return error;
+    }
+
+    private String getErrorMessage(Bundle extras) {
+        String errorMessage = extras.getString("error_message");
+        if (errorMessage == null) {
+            errorMessage = extras.getString("error_description");
+        }
+        return errorMessage;
+    }
+
+    protected boolean tryIntent(Intent intent, int requestCode) {
+        if (intent == null) {
+            return false;
+        }
+
+        try {
+            loginClient.getFragment().startActivityForResult(intent, requestCode);
+        } catch (ActivityNotFoundException e) {
+            // We don't expect this to happen, since we've already validated the intent and bailed
+            // out before now if it couldn't be resolved.
+            return false;
+        }
+
+        return true;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
index c5f3f44b7..149f7b635 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
@@ -111,6 +111,7 @@
     public static final String PROMO_CODE = "promo_code";
     public static final String PROMO_TEXT = "promo_text";
     public static final String DEEPLINK_CONTEXT = "deeplink_context";
+    public static final String DESTINATION = "destination";
 
     // Extras supported for MESSAGE_GET_LIKE_STATUS_REQUEST:
     public static final String EXTRA_OBJECT_ID = "com.facebook.platform.extra.OBJECT_ID";
diff --git a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
index 00bd93361..c9b690cf5 100644
--- a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
@@ -31,12 +31,14 @@
     private final String previewImageUrl;
     private final String promoCode;
     private final String promoText;
+    private final Builder.Destination destination;
 
     private AppInviteContent(final Builder builder) {
         this.applinkUrl = builder.applinkUrl;
         this.previewImageUrl = builder.previewImageUrl;
         this.promoCode = builder.promoCode;
         this.promoText = builder.promoText;
+        this.destination = builder.destination;
     }
 
     AppInviteContent(final Parcel in) {
@@ -44,6 +46,14 @@ private AppInviteContent(final Builder builder) {
         this.previewImageUrl = in.readString();
         this.promoText = in.readString();
         this.promoCode = in.readString();
+
+        String destinationString = in.readString();
+        if (destinationString.length() > 0) {
+            this.destination = Builder.Destination.valueOf(destinationString);
+        }
+        else {
+            this.destination = Builder.Destination.FACEBOOK;
+        }
     }
 
     /**
@@ -78,6 +88,18 @@ public String getPromotionText() {
         return promoText;
     }
 
+    /**
+     * Gets the destination for the invite.
+     * @return The destination for the invite.
+     */
+    public Builder.Destination getDestination() {
+        if (destination != null) {
+            return destination;
+        } else {
+            return Builder.Destination.FACEBOOK;
+        }
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -87,6 +109,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(this.previewImageUrl);
         out.writeString(this.promoText);
         out.writeString(this.promoCode);
+        out.writeString(this.destination.toString());
     }
 
     @SuppressWarnings("unused")
@@ -110,6 +133,27 @@ public AppInviteContent createFromParcel(final Parcel in) {
         private String previewImageUrl;
         private String promoCode;
         private String promoText;
+        private Destination destination;
+
+
+        public enum Destination {
+            FACEBOOK ("facebook"),
+            MESSENGER ("messenger");
+
+            private final String name;
+
+            private Destination(String s) {
+                name = s;
+            }
+
+            public boolean equalsName(String otherName) {
+                return (otherName == null) ? false : name.equals(otherName);
+            }
+
+            public String toString() {
+                return this.name;
+            }
+        }
 
         /**
          * Sets the applink url that will be used for deep-linking
@@ -183,6 +227,12 @@ public Builder setPromotionDetails(final String promotionText, final String prom
             return this;
         }
 
+        public Builder setDestination(Destination destination) {
+            this.destination = destination;
+            return this;
+        }
+
+
         @Override
         public AppInviteContent build() {
             return new AppInviteContent(this);
@@ -197,7 +247,8 @@ public Builder readFrom(final AppInviteContent content) {
             return this
                     .setApplinkUrl(content.getApplinkUrl())
                     .setPreviewImageUrl(content.getPreviewImageUrl())
-                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode());
+                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode())
+                    .setDestination(content.getDestination());
         }
 
         private boolean isAlphanumericWithSpaces(String str) {
diff --git a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
index f8065c351..d65bdcbd0 100644
--- a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
@@ -277,6 +277,10 @@ private static Bundle createParameters(final AppInviteContent content) {
         Bundle params = new Bundle();
         params.putString(ShareConstants.APPLINK_URL, content.getApplinkUrl());
         params.putString(ShareConstants.PREVIEW_IMAGE_URL, content.getPreviewImageUrl());
+        params.putString(
+                ShareConstants.DESTINATION,
+                content.getDestination().toString()
+        );
 
         String promoCode = content.getPromotionCode();
         promoCode = promoCode != null ? promoCode : "";
diff --git a/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
new file mode 100644
index 000000000..d8ee20708
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
@@ -0,0 +1,171 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookSdk;
+import com.facebook.TestUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.robolectric.RuntimeEnvironment;
+
+import java.util.Date;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@PrepareForTest( { LoginClient.class })
+public class FacebookLiteLoginMethodHandlerTest extends LoginHandlerTestCase {
+    private static final String CANCEL_MESSAGE = "Permissions error";
+    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
+            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
+
+    @Before
+    @Override
+    public void before() throws Exception {
+        super.before();
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+    }
+
+    @Test
+    public void testFacebookLiteHandlesSuccess() {
+        Bundle bundle = new Bundle();
+        bundle.putLong("expires_in", EXPIRES_IN_DELTA);
+        bundle.putString("access_token", ACCESS_TOKEN);
+        bundle.putString("signed_request", SIGNED_REQUEST_STR);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        when(mockLoginClient.getPendingRequest()).thenReturn(request);
+
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_OK, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
+
+        AccessToken token = result.token;
+        assertNotNull(token);
+        assertEquals(ACCESS_TOKEN, token.getToken());
+        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
+        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
+    }
+
+    @Test
+    public void testFacebookLiteHandlesBack() {
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, null);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+
+        assertNull(result.token);
+        assertEquals(result.errorMessage, "Operation canceled");
+    }
+
+    @Test
+    public void testFacebookLiteHandlesCancel() {
+        Bundle bundle = new Bundle();
+        bundle.putString("error", CANCEL_MESSAGE);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+    }
+
+    @Test
+    public void testFacebookLiteHandlesErrorMessage() {
+        Bundle bundle = new Bundle();
+        bundle.putString("error", ERROR_MESSAGE);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+
+        assertNull(result.token);
+        assertNotNull(result.errorMessage);
+        assertTrue(result.errorMessage.contains(ERROR_MESSAGE));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java b/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
index f029fe5b0..c3b14805e 100644
--- a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
+++ b/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
@@ -27,6 +27,7 @@
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
+import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 
@@ -266,8 +267,9 @@ public void implTestLogInCreatesPendingRequestWithCorrectValues(
             @Override
             public boolean matches(Object argument) {
                 Intent orig = (Intent)argument;
+                Bundle bundle = orig.getBundleExtra(LoginFragment.REQUEST_KEY);
                 LoginClient.Request request =
-                        (LoginClient.Request)orig.getParcelableExtra(LoginFragment.EXTRA_REQUEST);
+                        (LoginClient.Request)bundle.getParcelable(LoginFragment.EXTRA_REQUEST);
                 assertEquals(MOCK_APP_ID, request.getApplicationId());
                 assertEquals(LoginBehavior.NATIVE_ONLY, request.getLoginBehavior());
                 assertEquals(DefaultAudience.EVERYONE, request.getDefaultAudience());
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 13372aef5..ca78035ef 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b5273f08d..1e6849d48 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri May 13 11:07:42 PDT 2016
+#Mon Jun 27 13:02:47 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-bin.zip
diff --git a/gradlew b/gradlew
index 9d82f7891..27309d923 100755
--- a/gradlew
+++ b/gradlew
@@ -6,12 +6,30 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,26 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -85,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
diff --git a/gradlew.bat b/gradlew.bat
index aec99730b..f6d5974e7 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,7 +46,7 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
 if "%@eval[2+2]" == "4" goto 4NT_args
diff --git a/settings.gradle b/settings.gradle
index 9b8e32a98..baa056346 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -11,9 +11,9 @@ include ':samples:SwitchUserSample'
 include ':samples:ShareIt'
 
 if (file('internal/internal-settings.gradle').exists()) {
-  apply from: 'internal/internal-settings.gradle'
+    apply from: 'internal/internal-settings.gradle'
 }
 
 if (file('local.gradle').exists()) {
-  apply from: 'local.gradle'
+    apply from: 'local.gradle'
 }
