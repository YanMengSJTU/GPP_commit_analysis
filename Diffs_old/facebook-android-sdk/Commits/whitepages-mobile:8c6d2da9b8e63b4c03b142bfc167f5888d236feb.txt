diff --git a/facebook/tests/.classpath b/facebook/tests/.classpath
deleted file mode 100644
index 90ce10bab..000000000
--- a/facebook/tests/.classpath
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/facebook/tests/.project b/facebook/tests/.project
deleted file mode 100644
index 82993b5a8..000000000
--- a/facebook/tests/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>SDKTests</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/facebook/tests/AndroidManifest.xml b/facebook/tests/AndroidManifest.xml
deleted file mode 100644
index 1509af65d..000000000
--- a/facebook/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- package name must be unique so suffix with "tests" so package loader doesn't ignore us -->
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.sdk.tests"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="7"/>
-    <!-- We add an application tag here just so that we can indicate that
-         this package needs to link against the android.test library,
-         which is needed when building test cases. -->
-    <application>
-        <uses-library android:name="android.test.runner"/>
-        <activity android:name="com.facebook.FacebookTestCase$FacebookTestActivity"/>
-        <activity android:name="com.facebook.widget.FriendPickerFragmentTests$TestActivity"/>
-        <activity android:name="com.facebook.widget.PlacePickerFragmentTests$TestActivity"/>
-        <activity android:name="com.facebook.widget.GraphObjectPagingLoaderTests$TestActivity"/>
-        <activity android:name="com.facebook.widget.UserSettingsFragmentTests$TestActivity"/>
-        <activity android:name="com.facebook.LoginActivity" />
-        <activity android:name="com.facebook.FacebookActivityTests$FacebookTestActivity" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-    <!--
-    This declares that this application uses the instrumentation test runner targeting
-    the package of com.facebook.sdk.  To run the tests use the command:
-    "adb shell am instrument -w com.facebook.sdk.tests/android.test.InstrumentationTestRunner"
-    -->
-    <instrumentation android:name="android.test.InstrumentationTestRunner"
-                     android:targetPackage="com.facebook.sdk.tests"
-                     android:label="Tests for com.facebook.sdk.tests"/>
-</manifest>
diff --git a/facebook/tests/SdkTests.eml b/facebook/tests/SdkTests.eml
deleted file mode 100644
index 3bbc2f8d5..000000000
--- a/facebook/tests/SdkTests.eml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-	<module name="SdkTestApp" scope="PROVIDED"/>
-</component>
diff --git a/facebook/tests/SdkTests.iml b/facebook/tests/SdkTests.iml
deleted file mode 100644
index 2e7f31a2f..000000000
--- a/facebook/tests/SdkTests.iml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="1">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="1" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="2" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="PACK_TEST_CODE" value="true" />
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/assets" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="module" module-name="SdkTestApp" scope="PROVIDED" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/tests/ant.properties b/facebook/tests/ant.properties
deleted file mode 100644
index 928de2ff9..000000000
--- a/facebook/tests/ant.properties
+++ /dev/null
@@ -1,20 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-# Removed based on advice at code.google.com/p/android/issues/detail?id=21108#c2
-# and the comment that follows.
-# tested.project.dir=../TestApp
diff --git a/facebook/tests/assets/DarkScreen.mov b/facebook/tests/assets/DarkScreen.mov
deleted file mode 100644
index 2e86e5c49..000000000
Binary files a/facebook/tests/assets/DarkScreen.mov and /dev/null differ
diff --git a/facebook/tests/build.xml b/facebook/tests/build.xml
deleted file mode 100644
index 34c89faa8..000000000
--- a/facebook/tests/build.xml
+++ /dev/null
@@ -1,101 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="FacebookSdkTests" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-    <!-- SDK Tools r15 workaround -->
-    <property name="tested.manifest.package" value="com.facebook.sdk.tests" />
-
-    <!-- This seems to have no effect.  The value remains android.test.AndroidTestRunner -->
-    <!-- <property name="test.runner" value="android.test.InstrumentationTestRunner" /> -->
-
-    <target name="run-tests">
-      <echo>Running tests...</echo>
-      <exec executable="${adb}" failonerror="true">
-        <arg line="${adb.device.arg}" />
-        <arg value="shell" />
-        <arg value="am" />
-        <arg value="instrument" />
-        <arg value="-w" />
-        <!-- was <arg value="${tested.manifest.package}/${test.runner}" /> -->
-        <arg value="${tested.manifest.package}/android.test.InstrumentationTestRunner" />
-      </exec>
-    </target>
-</project>
diff --git a/facebook/tests/proguard-project.txt b/facebook/tests/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/facebook/tests/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/facebook/tests/project.properties b/facebook/tests/project.properties
deleted file mode 100644
index 705d57d8d..000000000
--- a/facebook/tests/project.properties
+++ /dev/null
@@ -1,16 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-test.runner=android.test.AndroidTestRunner
-android.library.reference.1=../../facebook
diff --git a/facebook/tests/res/layout/friend_picker_test_layout_1.xml b/facebook/tests/res/layout/friend_picker_test_layout_1.xml
deleted file mode 100644
index 4cffc58e7..000000000
--- a/facebook/tests/res/layout/friend_picker_test_layout_1.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:app="http://schemas.android.com/apk/res-auto"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <fragment
-            android:id="@+id/friend_picker_fragment"
-            android:name="com.facebook.widget.FriendPickerFragment"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            app:show_pictures="false"
-            app:multi_select="false"
-            app:extra_fields="middle_name,link"
-            />
-</LinearLayout>
diff --git a/facebook/tests/res/layout/place_picker_test_layout_1.xml b/facebook/tests/res/layout/place_picker_test_layout_1.xml
deleted file mode 100644
index ec77493cb..000000000
--- a/facebook/tests/res/layout/place_picker_test_layout_1.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:app="http://schemas.android.com/apk/res-auto"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <fragment
-            android:id="@+id/place_picker_fragment"
-            android:name="com.facebook.widget.PlacePickerFragment"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            app:show_pictures="false"
-            app:radius_in_meters="75"
-            app:results_limit="5"
-            app:search_text="coffee"
-            app:extra_fields="checkins,general_info"
-            />
-</LinearLayout>
diff --git a/facebook/tests/res/values/strings.xml b/facebook/tests/res/values/strings.xml
deleted file mode 100644
index 05dacbbfd..000000000
--- a/facebook/tests/res/values/strings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_id">1234567890</string>
-</resources>
diff --git a/facebook/tests/src/com/facebook/AccessTokenTests.java b/facebook/tests/src/com/facebook/AccessTokenTests.java
deleted file mode 100644
index 09220b0f9..000000000
--- a/facebook/tests/src/com/facebook/AccessTokenTests.java
+++ /dev/null
@@ -1,280 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-public final class AccessTokenTests extends AndroidTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyToken() {
-        List<String> permissions = Utility.arrayList();
-        AccessToken token = AccessToken.createEmptyToken(permissions);
-        TestUtils.assertSamePermissions(permissions, token);
-        assertEquals("", token.getToken());
-        assertTrue(token.isInvalid());
-        assertTrue(token.getExpires().before(new Date()));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyTokenWithPermissions() {
-        List<String> permissions = Utility.arrayList("stream_publish");
-        AccessToken token = AccessToken.createEmptyToken(permissions);
-        TestUtils.assertSamePermissions(permissions, token);
-        assertEquals("", token.getToken());
-        assertTrue(token.isInvalid());
-        assertTrue(token.getExpires().before(new Date()));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFromDialog() {
-        List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Bundle bundle = new Bundle();
-        bundle.putString("access_token", token);
-        bundle.putString("expires_in", "60");
-
-        AccessToken accessToken = AccessToken.createFromWebBundle(permissions, bundle, AccessTokenSource.WEB_VIEW);
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.WEB_VIEW, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFromSSOWithExpiresString() {
-        List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Intent intent = new Intent();
-        intent.putExtra("access_token", token);
-        intent.putExtra("expires_in", "60");
-        intent.putExtra("extra_extra", "Something unrelated");
-
-        AccessToken accessToken = AccessToken
-                .createFromWebBundle(permissions, intent.getExtras(), AccessTokenSource.FACEBOOK_APPLICATION_WEB);
-
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFromSSOWithExpiresLong() {
-        List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Intent intent = new Intent();
-        intent.putExtra("access_token", token);
-        intent.putExtra("expires_in", 60L);
-        intent.putExtra("extra_extra", "Something unrelated");
-
-        AccessToken accessToken = AccessToken
-                .createFromWebBundle(permissions, intent.getExtras(), AccessTokenSource.FACEBOOK_APPLICATION_WEB);
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFromNativeLogin() {
-        ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        long nowSeconds = new Date().getTime() / 1000;
-        Intent intent = new Intent();
-        intent.putExtra(NativeProtocol.EXTRA_ACCESS_TOKEN, token);
-        intent.putExtra(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, nowSeconds + 60L);
-        intent.putExtra(NativeProtocol.EXTRA_PERMISSIONS, permissions);
-
-        AccessToken accessToken = AccessToken.createFromNativeLogin(
-                intent.getExtras(), AccessTokenSource.FACEBOOK_APPLICATION_NATIVE);
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_NATIVE, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCacheRoundtrip() {
-        ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-        Date later = TestUtils.nowPlusSeconds(60);
-        Date earlier = TestUtils.nowPlusSeconds(-60);
-
-        Bundle bundle = new Bundle();
-        TokenCachingStrategy.putToken(bundle, token);
-        TokenCachingStrategy.putExpirationDate(bundle, later);
-        TokenCachingStrategy.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION_WEB);
-        TokenCachingStrategy.putLastRefreshDate(bundle, earlier);
-        TokenCachingStrategy.putPermissions(bundle, permissions);
-
-        AccessToken accessToken = AccessToken.createFromCache(bundle);
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-
-        Bundle cache = accessToken.toCacheBundle();
-        TestUtils.assertEqualContents(bundle, cache);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCachePutGet() {
-        Bundle bundle = new Bundle();
-
-        for (String token : new String[] { "", "A completely random token value" }) {
-            TokenCachingStrategy.putToken(bundle, token);
-            assertEquals(token, TokenCachingStrategy.getToken(bundle));
-        }
-
-        for (Date date : new Date[] { new Date(42), new Date() }) {
-            TokenCachingStrategy.putExpirationDate(bundle, date);
-            assertEquals(date, TokenCachingStrategy.getExpirationDate(bundle));
-
-            TokenCachingStrategy.putLastRefreshDate(bundle, date);
-            assertEquals(date, TokenCachingStrategy.getLastRefreshDate(bundle));
-        }
-
-        for (long milliseconds : new long[] { 0, -1, System.currentTimeMillis() }) {
-            TokenCachingStrategy.putExpirationMilliseconds(bundle, milliseconds);
-            assertEquals(milliseconds, TokenCachingStrategy.getExpirationMilliseconds(bundle));
-
-            TokenCachingStrategy.putLastRefreshMilliseconds(bundle, milliseconds);
-            assertEquals(milliseconds, TokenCachingStrategy.getLastRefreshMilliseconds(bundle));
-        }
-
-        for (AccessTokenSource source : AccessTokenSource.values()) {
-            TokenCachingStrategy.putSource(bundle, source);
-            assertEquals(source, TokenCachingStrategy.getSource(bundle));
-        }
-
-        List<String> normalList = Arrays.asList("", "Another completely random token value");
-        List<String> emptyList = Arrays.asList();
-        ArrayList<String> normalArrayList = new ArrayList<String>(normalList);
-        ArrayList<String> emptyArrayList = new ArrayList<String>();
-        @SuppressWarnings("unchecked")
-        List<List<String>> permissionLists = Arrays
-                .asList(normalList, emptyList, normalArrayList, emptyArrayList);
-        for (List<String> list : permissionLists) {
-            TokenCachingStrategy.putPermissions(bundle, list);
-            TestUtils.assertSamePermissions(list, TokenCachingStrategy.getPermissions(bundle));
-        }
-        normalArrayList.add(null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testBasicSerialization() throws IOException {
-        AccessToken accessToken = AccessToken.createFromString("a token",
-                Arrays.asList("permission_1", "permission_2"), AccessTokenSource.WEB_VIEW);
-        AccessToken res = TestUtils.serializeAndUnserialize(accessToken);
-        
-        // if one field got serialized most likely all other non transient fields
-        // got serialized correctly.
-        assertEquals(accessToken.getPermissions(), res.getPermissions());
-        assertEquals(accessToken.getToken(), res.getToken());
-        assertEquals(accessToken.getSource(), res.getSource());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testPermissionsAreImmutable() {
-        List<String> permissions = Arrays.asList("go to Jail", "do not pass Go");
-        AccessToken accessToken = new AccessToken("some token", new Date(), permissions,
-                AccessTokenSource.FACEBOOK_APPLICATION_WEB, new Date());
-
-        permissions = accessToken.getPermissions();
-
-        try {
-            permissions.add("can't touch this");
-            fail();
-        } catch (UnsupportedOperationException ex) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateFromExistingTokenDefaults() {
-        final String token = "A token of my esteem";
-
-        AccessToken accessToken = AccessToken.createFromExistingAccessToken(token, null, null, null, null);
-
-        assertEquals(token, accessToken.getToken());
-        assertEquals(new Date(Long.MAX_VALUE), accessToken.getExpires());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertEquals(0, accessToken.getPermissions().size());
-        // Allow slight variation for test execution time
-        long delta = accessToken.getLastRefresh().getTime() - new Date().getTime();
-        assertTrue(delta < 1000);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateFromExistingToken() {
-        final String token = "A token of my esteem";
-        final List<String> permissions = Arrays.asList("walk", "chew gum");
-        final Date expires = new Date(2025, 5, 3);
-        final Date lastRefresh = new Date(2023, 8, 15);
-        final AccessTokenSource source = AccessTokenSource.WEB_VIEW;
-
-        AccessToken accessToken = AccessToken
-                .createFromExistingAccessToken(token, expires, lastRefresh, source, permissions);
-
-        assertEquals(token, accessToken.getToken());
-        assertEquals(expires, accessToken.getExpires());
-        assertEquals(lastRefresh, accessToken.getLastRefresh());
-        assertEquals(source, accessToken.getSource());
-        assertEquals(permissions, accessToken.getPermissions());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
deleted file mode 100644
index 6085d2345..000000000
--- a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.util.HashMap;
-import java.util.List;
-
-public class AppEventsLoggerTests extends FacebookTestCase {
-    public void testSimpleCall() throws InterruptedException {
-        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
-
-        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
-        TestSession session2 = TestSession.createSessionWithSharedUser(getActivity(), null, SECOND_TEST_USER_TAG);
-
-        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
-        AppEventsLogger logger2 = AppEventsLogger.newLogger(getActivity(), session2);
-
-        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
-        waitForBroadcastReceiver.incrementExpectCount();
-
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
-
-        logger1.logEvent("an_event");
-        logger2.logEvent("another_event");
-
-        logger1.flush();
-
-        waitForBroadcastReceiver.waitForExpectedCalls();
-
-        closeBlockerAndAssertSuccess();
-
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
-    }
-
-    public void testPersistedEvents() throws IOException, ClassNotFoundException {
-        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
-
-        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
-
-        getActivity().getFileStreamPath(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME).delete();
-
-        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
-        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
-
-        logger1.logEvent("an_event");
-
-        logger1.onContextStop();
-
-        FileInputStream fis = getActivity().openFileInput(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME);
-        assertNotNull(fis);
-
-        ObjectInputStream ois = new ObjectInputStream(fis);
-        Object obj = ois.readObject();
-        ois.close();
-
-        assertTrue(obj instanceof HashMap);
-
-        logger1.flush();
-
-        logger1.logEvent("another_event");
-
-        waitForBroadcastReceiver.incrementExpectCount();
-        logger1.flush();
-
-        waitForBroadcastReceiver.waitForExpectedCalls();
-        List<Intent> receivedIntents = waitForBroadcastReceiver.getReceivedIntents();
-        assertEquals(1, receivedIntents.size());
-
-        Intent intent = receivedIntents.get(0);
-        assertNotNull(intent);
-
-        assertEquals(2, intent.getIntExtra(AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, 0));
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
-    }
-
-    public void testInsightsLoggerCompatibility() throws InterruptedException {
-        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.AUTO);
-
-        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
-
-        InsightsLogger logger1 = InsightsLogger.newLogger(getActivity(), null, null, session1);
-
-        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
-        waitForBroadcastReceiver.incrementExpectCount();
-
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
-
-        logger1.logConversionPixel("foo", 1.0);
-
-        waitForBroadcastReceiver.waitForExpectedCalls();
-
-        closeBlockerAndAssertSuccess();
-
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
-    }
-}
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
deleted file mode 100644
index 28f23adae..000000000
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ /dev/null
@@ -1,312 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphPlace;
-import com.facebook.model.GraphUser;
-
-import java.net.HttpURLConnection;
-import java.util.Arrays;
-import java.util.List;
-
-public class AsyncRequestTests extends FacebookTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanLaunchAsyncRequestFromUiThread() {
-        Request request = Request.newPostRequest(null, "me/feeds", null, null);
-        try {
-            TestRequestAsyncTask task = createAsyncTaskOnUiThread(request);
-            assertNotNull(task);
-        } catch (Throwable throwable) {
-            assertNull(throwable);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteWithNullRequestsThrows() throws Exception {
-        try {
-            TestRequestAsyncTask task = new TestRequestAsyncTask((Request[]) null);
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithZeroRequestsThrows() throws Exception {
-        try {
-            TestRequestAsyncTask task = new TestRequestAsyncTask(new Request[] {});
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithNullRequestThrows() throws Exception {
-        try {
-            TestRequestAsyncTask task = new TestRequestAsyncTask(new Request[] { null });
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
-            @Override
-            protected void performAsserts(Response response) {
-                assertNotNull(response);
-                GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-                assertEquals("Paris", graphPlace.getLocation().getCity());
-            }
-        });
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
-            @Override
-            protected void performAsserts(Response response) {
-                assertNotNull(response);
-                GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-                assertEquals("Paris", graphPlace.getLocation().getCity());
-            }
-        });
-        HttpURLConnection connection = Request.toHttpConnection(request);
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(connection, Arrays.asList(new Request[] { request }));
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetFailureCase() {
-        Request request = new Request(null, "-1", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testBatchWithoutAppIDIsError() throws Throwable {
-        Request request1 = new Request(null, "TourEiffel", null, null, new ExpectFailureCallback());
-        Request request2 = new Request(null, "SpaceNeedle", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request1, request2);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 3 signals: request1, request2, and task will all signal.
-        waitAndAssertSuccessOrRethrow(3);
-    }
-
-    @LargeTest
-    public void testMixedSuccessAndFailure() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        final int NUM_REQUESTS = 8;
-        Request[] requests = new Request[NUM_REQUESTS];
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-            if (shouldSucceed) {
-                requests[i] = new Request(session, "me", null, null, new ExpectSuccessCallback());
-            } else {
-                requests[i] = new Request(session, "-1", null, null, new ExpectFailureCallback());
-            }
-        }
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(requests);
-
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(NUM_REQUESTS + 1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testStaticExecuteMeAsync() {
-        final TestSession session = openTestSessionWithSharedUser();
-
-        class MeCallback extends ExpectSuccessCallback implements Request.GraphUserCallback {
-            @Override
-            public void onCompleted(GraphUser me, Response response) {
-                assertNotNull(me);
-                assertEquals(session.getTestUserId(), me.getId());
-                RequestTests.validateMeResponse(session, response);
-                onCompleted(response);
-            }
-        }
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                Request.executeMeRequestAsync(session, new MeCallback());
-            }
-        }, false);
-        waitAndAssertSuccess(1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testStaticExecuteMyFriendsAsync() {
-        final TestSession session = openTestSessionWithSharedUser();
-
-        class FriendsCallback extends ExpectSuccessCallback implements Request.GraphUserListCallback {
-            @Override
-            public void onCompleted(List<GraphUser> friends, Response response) {
-                assertNotNull(friends);
-                RequestTests.validateMyFriendsResponse(session, response);
-                onCompleted(response);
-            }
-        }
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                Request.executeMyFriendsRequestAsync(session, new FriendsCallback());
-            }
-        }, false);
-        waitAndAssertSuccess(1);
-    }
-
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Request uploadRequest1 = Request.newUploadPhotoRequest(session, bitmap1, null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        Request uploadRequest2 = Request.newUploadPhotoRequest(session, bitmap2, null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        Request getRequest1 = new Request(session, "{result=uploadRequest1:$.id}", null, null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(Response response) {
-                        assertNotNull(response);
-                        GraphObject retrievedPhoto = response.getGraphObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image1Size, retrievedPhoto.getProperty("width"));
-                    }
-                });
-        Request getRequest2 = new Request(session, "{result=uploadRequest2:$.id}", null, null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(Response response) {
-                        assertNotNull(response);
-                        GraphObject retrievedPhoto = response.getGraphObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image2Size, retrievedPhoto.getProperty("width"));
-                    }
-                });
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(uploadRequest1, uploadRequest2, getRequest1, getRequest2);
-        task.executeOnBlockerThread();
-
-        // Wait on 3 signals: getRequest1, getRequest2, and task will all signal.
-        waitAndAssertSuccess(3);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testShortTimeoutCausesFailure() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = new Request(session, "me/likes", null, null, new ExpectFailureCallback());
-
-        RequestBatch requestBatch = new RequestBatch(request);
-
-        // 1 millisecond timeout should be too short for response from server.
-        requestBatch.setTimeout(1);
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(requestBatch);
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(2);
-    }
-
-    @LargeTest
-    public void testLongTimeoutAllowsSuccess() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = new Request(session, "me", null, null, new ExpectSuccessCallback());
-
-        RequestBatch requestBatch = new RequestBatch(request);
-
-        // 10 second timeout should be long enough for successful response from server.
-        requestBatch.setTimeout(10000);
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(requestBatch);
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(2);
-    }
-}
diff --git a/facebook/tests/src/com/facebook/AuthorizationClientTests.java b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
deleted file mode 100644
index 0a96adf35..000000000
--- a/facebook/tests/src/com/facebook/AuthorizationClientTests.java
+++ /dev/null
@@ -1,684 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.model.GraphMultiResult;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphObjectList;
-import com.facebook.model.GraphUser;
-
-import java.io.*;
-import java.util.*;
-
-public class AuthorizationClientTests extends FacebookTestCase {
-    private static final String ACCESS_TOKEN = "An access token";
-    private static final long EXPIRES_IN_DELTA = 3600 * 24 * 60;
-    private static final ArrayList<String> PERMISSIONS = new ArrayList<String>(
-            Arrays.asList("go outside", "come back in"));
-    private static final String ERROR_MESSAGE = "This is bad!";
-
-    class MockAuthorizationClient extends AuthorizationClient {
-        Result result;
-        boolean triedNextHandler = false;
-
-        MockAuthorizationClient() {
-            setContext(getActivity());
-        }
-
-        AuthorizationClient.AuthorizationRequest getRequest() {
-            return pendingRequest;
-        }
-
-        void setRequest(AuthorizationClient.AuthorizationRequest request) {
-            pendingRequest = request;
-        }
-
-        @Override
-        void complete(Result result) {
-            this.result = result;
-        }
-
-        @Override
-        void tryNextHandler() {
-            triedNextHandler = true;
-        }
-    }
-
-    // WebViewAuthHandler tests
-
-    AuthorizationClient.AuthorizationRequest createRequest() {
-        Session.AuthorizationRequest request = new Session.AuthorizationRequest(getActivity());
-        request.setPermissions(PERMISSIONS);
-        return request.getAuthorizationClientRequest();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testWebViewHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putString("access_token", ACCESS_TOKEN);
-        bundle.putString("expires_in", String.format("%d", EXPIRES_IN_DELTA));
-        bundle.putString("code", "Something else");
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.WebViewAuthHandler handler = client.new WebViewAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onWebDialogComplete(request, bundle, null);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        assertEquals(PERMISSIONS, token.getPermissions());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testWebViewHandlesCancel() {
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.WebViewAuthHandler handler = client.new WebViewAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onWebDialogComplete(request, null, new FacebookOperationCanceledException());
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.CANCEL, client.result.code);
-        assertNull(client.result.token);
-        assertNotNull(client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testWebViewHandlesError() {
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.WebViewAuthHandler handler = client.new WebViewAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onWebDialogComplete(request, null, new FacebookException(ERROR_MESSAGE));
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.ERROR, client.result.code);
-        assertNull(client.result.token);
-        assertNotNull(client.result.errorMessage);
-        assertEquals(ERROR_MESSAGE, client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testWebViewChecksInternetPermission() {
-        MockAuthorizationClient client = new MockAuthorizationClient() {
-            @Override
-            int checkPermission(String permission) {
-                return PackageManager.PERMISSION_DENIED;
-            }
-        };
-        AuthorizationClient.WebViewAuthHandler handler = client.new WebViewAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onWebDialogComplete(request, null, new FacebookException(ERROR_MESSAGE));
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.ERROR, client.result.code);
-        assertNull(client.result.token);
-        assertNotNull(client.result.errorMessage);
-    }
-
-    // GetTokenAuthHandler tests
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetTokenHandlesSuccessWithAllPermissions() {
-        Bundle bundle = new Bundle();
-        bundle.putStringArrayList(NativeProtocol.EXTRA_PERMISSIONS, PERMISSIONS);
-        bundle.putLong(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, new Date().getTime() / 1000 + EXPIRES_IN_DELTA);
-        bundle.putString(NativeProtocol.EXTRA_ACCESS_TOKEN, ACCESS_TOKEN);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.GetTokenAuthHandler handler = client.new GetTokenAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.getTokenCompleted(request, bundle);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        assertEquals(PERMISSIONS, token.getPermissions());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetTokenHandlesSuccessWithSomePermissions() {
-        Bundle bundle = new Bundle();
-        bundle.putStringArrayList(NativeProtocol.EXTRA_PERMISSIONS, new ArrayList<String>(Arrays.asList("go outside")));
-        bundle.putLong(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, new Date().getTime() / 1000 + EXPIRES_IN_DELTA);
-        bundle.putString(NativeProtocol.EXTRA_ACCESS_TOKEN, ACCESS_TOKEN);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.GetTokenAuthHandler handler = client.new GetTokenAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        assertEquals(PERMISSIONS.size(), request.getPermissions().size());
-
-        client.setRequest(request);
-        handler.getTokenCompleted(request, bundle);
-
-        assertNull(client.result);
-        assertTrue(client.triedNextHandler);
-
-        assertEquals(1, request.getPermissions().size());
-        assertTrue(request.getPermissions().contains("come back in"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetTokenHandlesNoResult() {
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.GetTokenAuthHandler handler = client.new GetTokenAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        assertEquals(PERMISSIONS.size(), request.getPermissions().size());
-
-        client.setRequest(request);
-        handler.getTokenCompleted(request, null);
-
-        assertNull(client.result);
-        assertTrue(client.triedNextHandler);
-
-        assertEquals(PERMISSIONS.size(), request.getPermissions().size());
-    }
-
-    // KatanaLoginDialogAuthHandler tests
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putStringArrayList(NativeProtocol.EXTRA_PERMISSIONS, PERMISSIONS);
-        bundle.putLong(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, new Date().getTime() / 1000 + EXPIRES_IN_DELTA);
-        bundle.putString(NativeProtocol.EXTRA_ACCESS_TOKEN, ACCESS_TOKEN);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        assertEquals(PERMISSIONS, token.getPermissions());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesCancel() {
-        Bundle bundle = new Bundle();
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_USER_CANCELED);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.CANCEL, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNull(token);
-        assertNull(client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesError() {
-        Bundle bundle = new Bundle();
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, ERROR_MESSAGE);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.ERROR, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNull(token);
-        assertNotNull(client.result.errorMessage);
-        assertEquals(ERROR_MESSAGE, client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesDisabled() {
-        Bundle bundle = new Bundle();
-        bundle.putInt(NativeProtocol.EXTRA_PROTOCOL_VERSION, NativeProtocol.PROTOCOL_VERSION_20121101);
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_SERVICE_DISABLED);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNull(client.result);
-        assertTrue(client.triedNextHandler);
-    }
-
-    // KatanaProxyAuthHandler tests
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testProxyAuthHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putLong(AccessToken.EXPIRES_IN_KEY, EXPIRES_IN_DELTA);
-        bundle.putString(AccessToken.ACCESS_TOKEN_KEY, ACCESS_TOKEN);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaProxyAuthHandler handler = client.new KatanaProxyAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        assertEquals(PERMISSIONS, token.getPermissions());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testProxyAuthHandlesCancel() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", ERROR_MESSAGE);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaProxyAuthHandler handler = client.new KatanaProxyAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.CANCEL, client.result.code);
-
-        assertNull(client.result.token);
-        assertNotNull(client.result.errorMessage);
-        assertTrue(client.result.errorMessage.contains(ERROR_MESSAGE));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testProxyAuthHandlesCancelErrorMessage() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", "access_denied");
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaProxyAuthHandler handler = client.new KatanaProxyAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.CANCEL, client.result.code);
-
-        assertNull(client.result.token);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testProxyAuthHandlesDisabled() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", "service_disabled");
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaProxyAuthHandler handler = client.new KatanaProxyAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNull(client.result);
-        assertTrue(client.triedNextHandler);
-    }
-
-    // Reauthorization validation tests
-
-    class MockValidatingAuthorizationClient extends MockAuthorizationClient {
-        private final HashMap<String, String> mapAccessTokenToFbid = new HashMap<String, String>();
-        private List<String> permissionsToReport = Arrays.asList();
-        private TestBlocker blocker;
-
-        public MockValidatingAuthorizationClient(TestBlocker blocker) {
-            this.blocker = blocker;
-        }
-
-        public void addAccessTokenToFbidMapping(String accessToken, String fbid) {
-            mapAccessTokenToFbid.put(accessToken, fbid);
-        }
-
-        public void addAccessTokenToFbidMapping(AccessToken accessToken, String fbid) {
-            mapAccessTokenToFbid.put(accessToken.getToken(), fbid);
-        }
-
-        public void setPermissionsToReport(List<String> permissionsToReport) {
-            this.permissionsToReport = permissionsToReport;
-        }
-
-        @Override
-        void complete(Result result) {
-            super.complete(result);
-            blocker.signal();
-        }
-
-        @Override
-        Request createGetProfileIdRequest(final String accessToken) {
-            return new MockRequest() {
-                @Override
-                public Response createResponse() {
-                    String fbid = mapAccessTokenToFbid.get(accessToken);
-                    GraphUser user = GraphObject.Factory.create(GraphUser.class);
-                    user.setId(fbid);
-                    return new Response(this, null, user, false);
-                }
-            };
-        }
-
-        @Override
-        Request createGetPermissionsRequest(String accessToken) {
-            final List<String> permissions = permissionsToReport;
-            return new MockRequest() {
-                @Override
-                public Response createResponse() {
-                    GraphObject permissionsObject = GraphObject.Factory.create();
-                    if (permissions != null) {
-                        for (String permission : permissions) {
-                            permissionsObject.setProperty(permission, 1);
-                        }
-                    }
-                    GraphObjectList<GraphObject> data = GraphObject.Factory.createList(GraphObject.class);
-                    data.add(permissionsObject);
-
-                    GraphMultiResult result = GraphObject.Factory.create(GraphMultiResult.class);
-                    result.setProperty("data", data);
-
-                    return new Response(this, null, result, false);
-                }
-            };
-        }
-
-        @Override
-        RequestBatch createReauthValidationBatch(final Result pendingResult) {
-            RequestBatch batch = super.createReauthValidationBatch(pendingResult);
-
-            batch.setCallbackHandler(blocker.getHandler());
-            // Turn it into a MockRequestBatch.
-            return new MockRequestBatch(batch);
-        }
-    }
-
-    static final String USER_1_FBID = "user1";
-    static final String USER_1_ACCESS_TOKEN = "An access token for user 1";
-    static final String USER_2_FBID = "user2";
-    static final String USER_2_ACCESS_TOKEN = "An access token for user 2";
-
-    AuthorizationClient.AuthorizationRequest createNewPermissionRequest(String accessToken) {
-        Session.NewPermissionsRequest request = new Session.NewPermissionsRequest(getActivity(), PERMISSIONS);
-        request.setValidateSameFbidAsToken(accessToken);
-        return request.getAuthorizationClientRequest();
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testReauthorizationWithSameFbidSucceeds() throws Exception {
-        TestBlocker blocker = getTestBlocker();
-
-        MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient(blocker);
-        client.addAccessTokenToFbidMapping(USER_1_ACCESS_TOKEN, USER_1_FBID);
-        client.addAccessTokenToFbidMapping(USER_2_ACCESS_TOKEN, USER_2_FBID);
-        client.setPermissionsToReport(PERMISSIONS);
-
-        AuthorizationClient.AuthorizationRequest request = createNewPermissionRequest(USER_1_ACCESS_TOKEN);
-        client.setRequest(request);
-
-        AccessToken token = AccessToken.createFromExistingAccessToken(USER_1_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
-
-        client.completeAndValidate(result);
-
-        blocker.waitForSignals(1);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken resultToken = client.result.token;
-        assertNotNull(resultToken);
-        assertEquals(USER_1_ACCESS_TOKEN, resultToken.getToken());
-        assertEquals(PERMISSIONS, resultToken.getPermissions());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testReauthorizationWithFewerPermissionsSucceeds() throws Exception {
-        TestBlocker blocker = getTestBlocker();
-
-        MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient(blocker);
-        client.addAccessTokenToFbidMapping(USER_1_ACCESS_TOKEN, USER_1_FBID);
-        client.addAccessTokenToFbidMapping(USER_2_ACCESS_TOKEN, USER_2_FBID);
-        client.setPermissionsToReport(Arrays.asList("go outside"));
-
-        AuthorizationClient.AuthorizationRequest request = createNewPermissionRequest(USER_1_ACCESS_TOKEN);
-        client.setRequest(request);
-
-        AccessToken token = AccessToken.createFromExistingAccessToken(USER_1_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
-
-        client.completeAndValidate(result);
-
-        blocker.waitForSignals(1);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken resultToken = client.result.token;
-        assertNotNull(resultToken);
-        assertEquals(USER_1_ACCESS_TOKEN, resultToken.getToken());
-        assertEquals(Arrays.asList("go outside"), resultToken.getPermissions());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testReauthorizationWithDifferentFbidsFails() throws Exception {
-        TestBlocker blocker = getTestBlocker();
-
-        MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient(blocker);
-        client.addAccessTokenToFbidMapping(USER_1_ACCESS_TOKEN, USER_1_FBID);
-        client.addAccessTokenToFbidMapping(USER_2_ACCESS_TOKEN, USER_2_FBID);
-        client.setPermissionsToReport(PERMISSIONS);
-
-        AuthorizationClient.AuthorizationRequest request = createNewPermissionRequest(USER_1_ACCESS_TOKEN);
-        client.setRequest(request);
-
-        AccessToken token = AccessToken.createFromExistingAccessToken(USER_2_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
-
-        client.completeAndValidate(result);
-
-        blocker.waitForSignals(1);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.ERROR, client.result.code);
-
-        assertNull(client.result.token);
-        assertNotNull(client.result.errorMessage);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testLegacyReauthDoesntValidate() throws Exception {
-        TestBlocker blocker = getTestBlocker();
-
-        MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient(blocker);
-        AuthorizationClient.AuthorizationRequest request = createNewPermissionRequest(USER_1_ACCESS_TOKEN);
-        request.setIsLegacy(true);
-        client.setRequest(request);
-
-        AccessToken token = AccessToken.createFromExistingAccessToken(USER_2_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
-
-        client.completeAndValidate(result);
-
-        AccessToken resultToken = client.result.token;
-        assertNotNull(resultToken);
-        assertEquals(USER_2_ACCESS_TOKEN, resultToken.getToken());
-        assertEquals(PERMISSIONS, resultToken.getPermissions());
-    }
-
-    // Serialization tests
-
-    static class DoNothingAuthorizationClient extends AuthorizationClient {
-        // Don't actually do anything.
-        @Override
-        boolean tryCurrentHandler() {
-            return true;
-        }
-    }
-
-    public void testSerialization() throws IOException, ClassNotFoundException {
-        AuthorizationClient client = new DoNothingAuthorizationClient();
-
-        // Call this to set up some state.
-        client.setContext(getActivity());
-        client.setOnCompletedListener(new AuthorizationClient.OnCompletedListener() {
-            @Override
-            public void onCompleted(AuthorizationClient.Result result) {
-            }
-        });
-        client.setBackgroundProcessingListener(new AuthorizationClient.BackgroundProcessingListener() {
-            @Override
-            public void onBackgroundProcessingStarted() {
-            }
-
-            @Override
-            public void onBackgroundProcessingStopped() {
-            }
-        });
-        client.authorize(createRequest());
-
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream);
-        outputStream.writeObject(client);
-        outputStream.close();
-
-        byte [] byteArray = byteArrayOutputStream.toByteArray();
-
-        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
-        ObjectInputStream inputStream = new ObjectInputStream(byteArrayInputStream);
-
-        Object obj = inputStream.readObject();
-        assertNotNull(obj);
-        assertTrue(obj instanceof AuthorizationClient);
-
-        AuthorizationClient resultClient = (AuthorizationClient)obj;
-        assertNull(resultClient.startActivityDelegate);
-        assertNull(resultClient.onCompletedListener);
-        assertNull(resultClient.backgroundProcessingListener);
-        assertNull(resultClient.context);
-        assertNotNull(resultClient.currentHandler);
-        assertTrue(resultClient.currentHandler instanceof AuthorizationClient.GetTokenAuthHandler);
-        assertNotNull(resultClient.handlersToTry);
-        assertTrue(resultClient.handlersToTry.size() > 0);
-        assertNotNull(resultClient.pendingRequest);
-        assertEquals(PERMISSIONS, resultClient.pendingRequest.getPermissions());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
deleted file mode 100644
index 99bbebd19..000000000
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ /dev/null
@@ -1,537 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphPlace;
-import com.facebook.model.GraphUser;
-import com.facebook.internal.CacheableRequestBatch;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicInteger;
-
-public class BatchRequestTests extends FacebookTestCase {
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        // Tests that need this set should explicitly set it.
-        Request.setDefaultBatchApplicationId(null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateEmptyRequestBatch() {
-        CacheableRequestBatch batch = new CacheableRequestBatch();
-
-        Request meRequest = Request.newMeRequest(null, null);
-        assertEquals(0, batch.size());
-        batch.add(meRequest);
-        assertEquals(1, batch.size());
-        assertEquals(meRequest, batch.get(0));
-
-        String key = "The Key";
-        assertNull(batch.getCacheKeyOverride());
-        batch.setCacheKeyOverride(key);
-        assertEquals(key, batch.getCacheKeyOverride());
-
-        assertTrue(!batch.getForceRoundTrip());
-        batch.setForceRoundTrip(true);
-        assertTrue(batch.getForceRoundTrip());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateNonemptyRequestBatch() {
-        Request meRequest = Request.newMeRequest(null, null);
-
-        RequestBatch batch = new RequestBatch(new Request[] { meRequest, meRequest });
-        assertEquals(2, batch.size());
-        assertEquals(meRequest, batch.get(0));
-        assertEquals(meRequest, batch.get(1));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testBatchWithoutAppIDIsError() {
-        Request request1 = new Request(null, "TourEiffel", null, null, new ExpectFailureCallback());
-        Request request2 = new Request(null, "SpaceNeedle", null, null, new ExpectFailureCallback());
-        Request.executeBatchAndWait(request1, request2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchedGets() throws IOException {
-        setBatchApplicationIdForTestApp();
-
-        Request request1 = new Request(null, "TourEiffel");
-        Request request2 = new Request(null, "SpaceNeedle");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() == null);
-        assertTrue(responses.get(1).getError() == null);
-
-        GraphPlace eiffelTower = responses.get(0).getGraphObjectAs(GraphPlace.class);
-        GraphPlace spaceNeedle = responses.get(1).getGraphObjectAs(GraphPlace.class);
-        assertTrue(eiffelTower != null);
-        assertTrue(spaceNeedle != null);
-
-        assertEquals("Paris", eiffelTower.getLocation().getCity());
-        assertEquals("Seattle", spaceNeedle.getLocation().getCity());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testFacebookErrorResponsesCreateErrors() {
-        setBatchApplicationIdForTestApp();
-
-        Request request1 = new Request(null, "somestringthatshouldneverbeavalidfobjectid");
-        Request request2 = new Request(null, "someotherstringthatshouldneverbeavalidfobjectid");
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() != null);
-        assertTrue(responses.get(1).getError() != null);
-
-        FacebookRequestError error = responses.get(0).getError();
-        assertTrue(error.getException() instanceof FacebookServiceException);
-        assertTrue(error.getErrorType() != null);
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-    }
-
-    @LargeTest
-    public void testBatchPostStatusUpdate() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        GraphObject statusUpdate1 = createStatusUpdate("1");
-        GraphObject statusUpdate2 = createStatusUpdate("2");
-
-        Request postRequest1 = Request.newPostRequest(session, "me/feed", statusUpdate1, null);
-        postRequest1.setBatchEntryName("postRequest1");
-        Request postRequest2 = Request.newPostRequest(session, "me/feed", statusUpdate2, null);
-        postRequest2.setBatchEntryName("postRequest2");
-        Request getRequest1 = new Request(session, "{result=postRequest1:$.id}");
-        Request getRequest2 = new Request(session, "{result=postRequest2:$.id}");
-
-        List<Response> responses = Request.executeBatchAndWait(postRequest1, postRequest2, getRequest1, getRequest2);
-        assertNotNull(responses);
-        assertEquals(4, responses.size());
-        assertNoErrors(responses);
-
-        GraphObject retrievedStatusUpdate1 = responses.get(2).getGraphObject();
-        GraphObject retrievedStatusUpdate2 = responses.get(3).getGraphObject();
-        assertNotNull(retrievedStatusUpdate1);
-        assertNotNull(retrievedStatusUpdate2);
-
-        assertEquals(statusUpdate1.getProperty("message"), retrievedStatusUpdate1.getProperty("message"));
-        assertEquals(statusUpdate2.getProperty("message"), retrievedStatusUpdate2.getProperty("message"));
-    }
-
-    @LargeTest
-    public void testTwoDifferentAccessTokens() {
-        TestSession session1 = openTestSessionWithSharedUser();
-        TestSession session2 = openTestSessionWithSharedUser(SECOND_TEST_USER_TAG);
-
-        Request request1 = Request.newMeRequest(session1, null);
-        Request request2 = Request.newMeRequest(session2, null);
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals(session1.getTestUserId(), user1.getId());
-        assertEquals(session2.getTestUserId(), user2.getId());
-    }
-
-    @LargeTest
-    public void testBatchWithValidSessionAndNoSession() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request1 = new Request(session, "me");
-        Request request2 = new Request(null, "zuck");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals(session.getTestUserId(), user1.getId());
-        assertEquals("4", user2.getId());
-    }
-
-    @LargeTest
-    public void testBatchWithNoSessionAndValidSession() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request1 = new Request(null, "zuck");
-        Request request2 = new Request(session, "me");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals("4", user1.getId());
-        assertEquals(session.getTestUserId(), user2.getId());
-    }
-
-    @LargeTest
-    public void testBatchWithTwoSessionlessRequestsAndDefaultAppID() {
-        TestSession session = getTestSessionWithSharedUser(null);
-        String appId = session.getApplicationId();
-        Request.setDefaultBatchApplicationId(appId);
-
-        Request request1 = new Request(null, "zuck");
-        Request request2 = new Request(null, "zuck");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertEquals("4", user1.getId());
-        assertEquals("4", user2.getId());
-    }
-
-    @LargeTest
-    public void testMixedSuccessAndFailure() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        final int NUM_REQUESTS = 8;
-        Request[] requests = new Request[NUM_REQUESTS];
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-            requests[i] = new Request(session, shouldSucceed ? "me" : "-1");
-        }
-
-        List<Response> responses = Request.executeBatchAndWait(requests);
-        assertNotNull(responses);
-        assertEquals(NUM_REQUESTS, responses.size());
-
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-
-            Response response = responses.get(i);
-            assertNotNull(response);
-            if (shouldSucceed) {
-                assertNull(response.getError());
-                assertNotNull(response.getGraphObject());
-            } else {
-                assertNotNull(response.getError());
-                assertNull(response.getGraphObject());
-            }
-        }
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testClosedSessionDoesntAppendAccessToken() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.close();
-        Request request1 = new Request(session, "me", null, null, new ExpectFailureCallback());
-        Request request2 = new Request(session, "me", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request1, request2);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(2);
-    }
-
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Request uploadRequest1 = Request.newUploadPhotoRequest(session, bitmap1, null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        Request uploadRequest2 = Request.newUploadPhotoRequest(session, bitmap2, null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        Request getRequest1 = new Request(session, "{result=uploadRequest1:$.id}");
-        Request getRequest2 = new Request(session, "{result=uploadRequest2:$.id}");
-
-        List<Response> responses = Request.executeBatchAndWait(uploadRequest1, uploadRequest2, getRequest1, getRequest2);
-        assertNotNull(responses);
-        assertEquals(4, responses.size());
-        assertNoErrors(responses);
-
-        GraphObject retrievedPhoto1 = responses.get(2).getGraphObject();
-        GraphObject retrievedPhoto2 = responses.get(3).getGraphObject();
-        assertNotNull(retrievedPhoto1);
-        assertNotNull(retrievedPhoto2);
-
-        assertEquals(image1Size, retrievedPhoto1.getProperty("width"));
-        assertEquals(image2Size, retrievedPhoto2.getProperty("width"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCallbacksAreCalled() {
-        setBatchApplicationIdForTestApp();
-
-        ArrayList<Request> requests = new ArrayList<Request>();
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-
-        final int NUM_REQUESTS = 4;
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            Request request = new Request(null, "4");
-
-            request.setCallback(new Request.Callback() {
-                @Override
-                public void onCompleted(Response response) {
-                    calledBack.add(true);
-                }
-            });
-
-            requests.add(request);
-        }
-
-        List<Response> responses = Request.executeBatchAndWait(requests);
-        assertNotNull(responses);
-        assertTrue(calledBack.size() == NUM_REQUESTS);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCacheMyFriendsRequest() throws Exception {
-        TestUtils.clearFileLruCache(Response.getResponseCache());
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newMyFriendsRequest(session, null);
-
-        CacheableRequestBatch batch = new CacheableRequestBatch(request);
-        batch.setCacheKeyOverride("MyFriends");
-
-        // Running the request with empty cache should hit the server.
-        List<Response> responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        Response response = responses.get(0);
-        assertNotNull(response);
-        assertNull(response.getError());
-        assertTrue(!response.getIsFromCache());
-
-        // Running again should hit the cache.
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        response = responses.get(0);
-        assertNotNull(response);
-        assertNull(response.getError());
-        assertTrue(response.getIsFromCache());
-
-        // Forcing roundtrip should hit the server again.
-        batch.setForceRoundTrip(true);
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        response = responses.get(0);
-        assertNotNull(response);
-        assertNull(response.getError());
-        assertTrue(!response.getIsFromCache());
-
-        TestUtils.clearFileLruCache(Response.getResponseCache());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCacheMeAndMyFriendsRequest() throws Exception {
-        TestUtils.clearFileLruCache(Response.getResponseCache());
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request requestMe = Request.newMeRequest(session, null);
-        Request requestMyFriends = Request.newMyFriendsRequest(session, null);
-
-        CacheableRequestBatch batch = new CacheableRequestBatch(new Request[] { requestMyFriends, requestMe });
-        batch.setCacheKeyOverride("MyFriends");
-
-        // Running the request with empty cache should hit the server.
-        List<Response> responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        for (Response response : responses) {
-            assertNotNull(response);
-            assertNull(response.getError());
-            assertTrue(!response.getIsFromCache());
-        }
-
-        // Running again should hit the cache.
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        for (Response response : responses) {
-            assertNotNull(response);
-            assertNull(response.getError());
-            assertTrue(response.getIsFromCache());
-        }
-
-        // Forcing roundtrip should hit the server again.
-        batch.setForceRoundTrip(true);
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        for (Response response : responses) {
-            assertNotNull(response);
-            assertNull(response.getError());
-            assertTrue(!response.getIsFromCache());
-        }
-
-        TestUtils.clearFileLruCache(Response.getResponseCache());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExplicitDependencyDefaultsToOmitFirstResponse() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request requestMe = Request.newMeRequest(session, null);
-        requestMe.setBatchEntryName("me_request");
-
-        Request requestMyFriends = Request.newMyFriendsRequest(session, null);
-        requestMyFriends.setBatchEntryDependsOn("me_request");
-
-        List<Response> responses = Request.executeBatchAndWait(requestMe, requestMyFriends);
-
-        Response meResponse = responses.get(0);
-        Response myFriendsResponse = responses.get(1);
-
-        assertNull(meResponse.getGraphObject());
-        assertNotNull(myFriendsResponse.getGraphObject());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExplicitDependencyCanIncludeFirstResponse() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request requestMe = Request.newMeRequest(session, null);
-        requestMe.setBatchEntryName("me_request");
-        requestMe.setBatchEntryOmitResultOnSuccess(false);
-
-        Request requestMyFriends = Request.newMyFriendsRequest(session, null);
-        requestMyFriends.setBatchEntryDependsOn("me_request");
-
-        List<Response> responses = Request.executeBatchAndWait(requestMe, requestMyFriends);
-
-        Response meResponse = responses.get(0);
-        Response myFriendsResponse = responses.get(1);
-
-        assertNotNull(meResponse.getGraphObject());
-        assertNotNull(myFriendsResponse.getGraphObject());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testAddAndRemoveBatchCallbacks() {
-        RequestBatch batch = new RequestBatch();
-
-        RequestBatch.Callback callback1 = new RequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(RequestBatch batch) {
-            }
-        };
-
-        RequestBatch.Callback callback2 = new RequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(RequestBatch batch) {
-            }
-        };
-
-        batch.addCallback(callback1);
-        batch.addCallback(callback2);
-
-        assertEquals(2, batch.getCallbacks().size());
-
-        batch.removeCallback(callback1);
-        batch.removeCallback(callback2);
-
-        assertEquals(0, batch.getCallbacks().size());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testBatchCallbackIsCalled() {
-        final AtomicInteger count = new AtomicInteger();
-        Request request1 = Request.newGraphPathRequest(null, "4", new Request.Callback() {
-            @Override
-            public void onCompleted(Response response) {
-                count.incrementAndGet();
-            }
-        });
-        Request request2 = Request.newGraphPathRequest(null, "4", new Request.Callback() {
-            @Override
-            public void onCompleted(Response response) {
-                count.incrementAndGet();
-            }
-        });
-
-        RequestBatch batch = new RequestBatch(request1, request2);
-        batch.addCallback(new RequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(RequestBatch batch) {
-                count.incrementAndGet();
-            }
-        });
-
-        batch.executeAndWait();
-        assertEquals(3, count.get());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
deleted file mode 100644
index ad2753abe..000000000
--- a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
+++ /dev/null
@@ -1,686 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-import android.content.res.AssetManager;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.os.ConditionVariable;
-import android.os.Handler;
-import android.test.ActivityInstrumentationTestCase2;
-import android.util.Log;
-import com.facebook.model.GraphObject;
-import com.facebook.internal.Utility;
-import junit.framework.AssertionFailedError;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.*;
-import java.net.HttpURLConnection;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class FacebookActivityTestCase<T extends Activity> extends ActivityInstrumentationTestCase2<T> {
-    private static final String TAG = FacebookActivityTestCase.class.getSimpleName();
-
-    private static String applicationId;
-    private static String applicationSecret;
-
-    public final static String SECOND_TEST_USER_TAG = "Second";
-    public final static String THIRD_TEST_USER_TAG = "Third";
-
-    private TestBlocker testBlocker;
-
-    protected synchronized TestBlocker getTestBlocker() {
-        if (testBlocker == null) {
-            testBlocker = TestBlocker.createTestBlocker();
-        }
-        return testBlocker;
-    }
-
-    public FacebookActivityTestCase(Class<T> activityClass) {
-        super("", activityClass);
-    }
-
-    // Returns an un-opened TestSession
-    protected TestSession getTestSessionWithSharedUser() {
-        return getTestSessionWithSharedUser(null);
-    }
-
-    // Returns an un-opened TestSession
-    protected TestSession getTestSessionWithSharedUser(String sessionUniqueUserTag) {
-        return getTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, new ArrayList<String>());
-    }
-
-    protected TestSession getTestSessionWithSharedUserAndPermissions(String sessionUniqueUserTag,
-            List<String> permissions) {
-        return TestSession.createSessionWithSharedUser(getActivity(), permissions, sessionUniqueUserTag);
-    }
-
-    // Returns an un-opened TestSession
-    protected TestSession getTestSessionWithPrivateUser(TestBlocker testBlocker) {
-        return TestSession.createSessionWithPrivateUser(getActivity(), null);
-    }
-
-    protected TestSession openTestSessionWithSharedUser(final TestBlocker blocker) {
-        return openTestSessionWithSharedUser(blocker, null);
-    }
-
-    protected TestSession openTestSessionWithSharedUser(final TestBlocker blocker, String sessionUniqueUserTag) {
-        TestSession session = getTestSessionWithSharedUser();
-        openSession(getActivity(), session, blocker);
-        return session;
-    }
-
-    protected TestSession openTestSessionWithSharedUser() {
-        return openTestSessionWithSharedUser((String) null);
-    }
-
-    protected TestSession openTestSessionWithSharedUser(String sessionUniqueUserTag) {
-        return openTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, (String[]) null);
-    }
-
-    protected TestSession openTestSessionWithSharedUserAndPermissions(String sessionUniqueUserTag,
-            String... permissions) {
-        List<String> permissionList = (permissions != null) ? Arrays.asList(permissions) : null;
-        return openTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, permissionList);
-    }
-
-    protected TestSession openTestSessionWithSharedUserAndPermissions(String sessionUniqueUserTag,
-            List<String> permissions) {
-        final TestBlocker blocker = getTestBlocker();
-        TestSession session = getTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, permissions);
-        openSession(getActivity(), session, blocker);
-        return session;
-    }
-
-    // Turns exceptions from the TestBlocker into JUnit assertions
-    protected void waitAndAssertSuccess(TestBlocker testBlocker, int numSignals) {
-        try {
-            testBlocker.waitForSignalsAndAssertSuccess(numSignals);
-        } catch (AssertionFailedError e) {
-            throw e;
-        } catch (Exception e) {
-            fail("Got exception: " + e.getMessage());
-        }
-    }
-
-    protected void waitAndAssertSuccess(int numSignals) {
-        waitAndAssertSuccess(getTestBlocker(), numSignals);
-    }
-
-    protected void waitAndAssertSuccessOrRethrow(int numSignals) throws Exception {
-        getTestBlocker().waitForSignalsAndAssertSuccess(numSignals);
-    }
-
-    protected void runAndBlockOnUiThread(final int expectedSignals, final Runnable runnable) throws Throwable {
-        final TestBlocker blocker = getTestBlocker();
-        runTestOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                runnable.run();
-                blocker.signal();
-            }
-        });
-        // We wait for the operation to complete; wait for as many other signals as we expect.
-        blocker.waitForSignals(1 + expectedSignals);
-        // Wait for the UI thread to become idle so any UI updates the runnable triggered have a chance
-        // to finish before we return.
-        getInstrumentation().waitForIdleSync();
-    }
-
-    protected synchronized void readApplicationIdAndSecret() {
-        synchronized (FacebookTestCase.class) {
-            if (applicationId != null && applicationSecret != null) {
-                return;
-            }
-
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
-            InputStream stream = null;
-            final String errorMessage = "could not read applicationId and applicationSecret from config.json; ensure "
-                    + "you have run 'configure_unit_tests.sh'. Error: ";
-            try {
-                stream = assets.open("config.json");
-                String string = Utility.readStreamToString(stream);
-
-                JSONTokener tokener = new JSONTokener(string);
-                Object obj = tokener.nextValue();
-                if (!(obj instanceof JSONObject)) {
-                    fail(errorMessage + "could not deserialize a JSONObject");
-                }
-                JSONObject jsonObject = (JSONObject) obj;
-
-                applicationId = jsonObject.optString("applicationId");
-                applicationSecret = jsonObject.optString("applicationSecret");
-
-                if (Utility.isNullOrEmpty(applicationId) || Utility.isNullOrEmpty(applicationSecret)) {
-                    fail(errorMessage + "one or both config values are missing");
-                }
-
-                TestSession.setTestApplicationId(applicationId);
-                TestSession.setTestApplicationSecret(applicationSecret);
-            } catch (IOException e) {
-                fail(errorMessage + e.toString());
-            } catch (JSONException e) {
-                fail(errorMessage + e.toString());
-            } finally {
-                if (stream != null) {
-                    try {
-                        stream.close();
-                    } catch (IOException e) {
-                        fail(errorMessage + e.toString());
-                    }
-                }
-            }
-        }
-    }
-
-    protected void openSession(Activity activity, TestSession session) {
-        final TestBlocker blocker = getTestBlocker();
-        openSession(activity, session, blocker);
-    }
-
-    protected void openSession(Activity activity, TestSession session, final TestBlocker blocker) {
-        Session.OpenRequest openRequest = new Session.OpenRequest(activity).
-                setCallback(new Session.StatusCallback() {
-                    boolean signaled = false;
-
-                    @Override
-                    public void call(Session session, SessionState state, Exception exception) {
-                        if (exception != null) {
-                            Log.w(TAG,
-                                    "openSession: received an error opening session: " + exception.toString());
-                        }
-                        assertTrue(exception == null);
-                        // Only signal once, or we might screw up the count on the blocker.
-                        if (!signaled) {
-                            blocker.signal();
-                            signaled = true;
-                        }
-                    }
-                });
-
-        session.openForRead(openRequest);
-        waitAndAssertSuccess(blocker, 1);
-    }
-
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        // Make sure we have read application ID and secret.
-        readApplicationIdAndSecret();
-
-        // These are useful for debugging unit test failures.
-        Settings.addLoggingBehavior(LoggingBehavior.REQUESTS);
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        // We want the UI thread to be in StrictMode to catch any violations.
-        turnOnStrictModeForUiThread();
-    }
-
-    protected void tearDown() throws Exception {
-        super.tearDown();
-
-        synchronized (this) {
-            if (testBlocker != null) {
-                testBlocker.quit();
-            }
-        }
-    }
-
-    protected Bundle getNativeLinkingExtras(String token) {
-        Bundle extras = new Bundle();
-        String extraLaunchUriString = String
-                .format("fbrpc://facebook/nativethirdparty?app_id=%s&package_name=com.facebook.sdk.tests&class_name=com.facebook.FacebookActivityTests$FacebookTestActivity&access_token=%s",
-                        TestSession.getTestApplicationId(), token);
-        extras.putString("extra_launch_uri", extraLaunchUriString);
-        extras.putString("expires_in", "3600");
-        extras.putLong("app_id", Long.parseLong(TestSession.getTestApplicationId()));
-        extras.putString("access_token", token);
-
-        return extras;
-    }
-
-    interface GraphObjectPostResult extends GraphObject {
-        String getId();
-    }
-
-    protected GraphObject getAndAssert(Session session, String id) {
-        Request request = new Request(session, id);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObject result = response.getGraphObject();
-        assertNotNull(result);
-
-        return result;
-    }
-
-    protected GraphObject postGetAndAssert(Session session, String path, GraphObject graphObject) {
-        Request request = Request.newPostRequest(session, path, graphObject, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObjectPostResult result = response.getGraphObjectAs(GraphObjectPostResult.class);
-        assertNotNull(result);
-        assertNotNull(result.getId());
-
-        return getAndAssert(session, result.getId());
-    }
-
-    protected void setBatchApplicationIdForTestApp() {
-        String appId = TestSession.getTestApplicationId();
-        Request.setDefaultBatchApplicationId(appId);
-    }
-
-    protected <U extends GraphObject> U batchCreateAndGet(Session session, String graphPath, GraphObject graphObject,
-            String fields, Class<U> resultClass) {
-        Request create = Request.newPostRequest(session, graphPath, graphObject, new ExpectSuccessCallback());
-        create.setBatchEntryName("create");
-        Request get = Request.newGraphPathRequest(session, "{result=create:$.id}", new ExpectSuccessCallback());
-        if (fields != null) {
-            Bundle parameters = new Bundle();
-            parameters.putString("fields", fields);
-            get.setParameters(parameters);
-        }
-
-        return batchPostAndGet(create, get, resultClass);
-    }
-
-    protected <U extends GraphObject> U batchUpdateAndGet(Session session, String graphPath, GraphObject graphObject,
-            String fields, Class<U> resultClass) {
-        Request update = Request.newPostRequest(session, graphPath, graphObject, new ExpectSuccessCallback());
-        Request get = Request.newGraphPathRequest(session, graphPath, new ExpectSuccessCallback());
-        if (fields != null) {
-            Bundle parameters = new Bundle();
-            parameters.putString("fields", fields);
-            get.setParameters(parameters);
-        }
-
-        return batchPostAndGet(update, get, resultClass);
-    }
-
-    protected <U extends GraphObject> U batchPostAndGet(Request post, Request get, Class<U> resultClass) {
-        List<Response> responses = Request.executeBatchAndWait(post, get);
-        assertEquals(2, responses.size());
-
-        U resultGraphObject = responses.get(1).getGraphObjectAs(resultClass);
-        assertNotNull(resultGraphObject);
-        return resultGraphObject;
-    }
-
-    protected GraphObject createStatusUpdate(String unique) {
-        GraphObject statusUpdate = GraphObject.Factory.create();
-        String message = String.format(
-                "Check out my awesome new status update posted at: %s. Some chars for you: +\"[]:,%s", new Date(),
-                unique);
-        statusUpdate.setProperty("message", message);
-        return statusUpdate;
-    }
-
-    protected Bitmap createTestBitmap(int size) {
-        Bitmap image = Bitmap.createBitmap(size, size, Bitmap.Config.RGB_565);
-        image.eraseColor(Color.BLUE);
-        return image;
-    }
-
-    protected void issueFriendRequest(TestSession session, String targetUserId) {
-        String graphPath = "me/friends/" + targetUserId;
-        Request request = Request.newPostRequest(session, graphPath, null, null);
-        Response response = request.executeAndWait();
-        // We will get a 400 error if the users are already friends.
-        FacebookRequestError error = response.getError();
-        assertTrue(error == null || error.getRequestStatusCode() == 400);
-    }
-
-    protected void makeTestUsersFriends(TestSession session1, TestSession session2) {
-        issueFriendRequest(session1, session2.getTestUserId());
-        issueFriendRequest(session2, session1.getTestUserId());
-    }
-
-    protected void assertDateEqualsWithinDelta(Date expected, Date actual, long deltaInMsec) {
-        long delta = Math.abs(expected.getTime() - actual.getTime());
-        assertTrue(delta < deltaInMsec);
-    }
-
-    protected void assertDateDiffersWithinDelta(Date expected, Date actual, long expectedDifference, long deltaInMsec) {
-        long delta = Math.abs(expected.getTime() - actual.getTime()) - expectedDifference;
-        assertTrue(delta < deltaInMsec);
-    }
-
-    protected void assertNoErrors(List<Response> responses) {
-        for (int i = 0; i < responses.size(); ++i) {
-            Response response = responses.get(i);
-            assertNotNull(response);
-            assertNull(response.getError());
-        }
-    }
-
-    protected File createTempFileFromAsset(String assetPath) throws IOException {
-        InputStream inputStream = null;
-        FileOutputStream outStream = null;
-
-        try {
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
-            inputStream = assets.open(assetPath);
-
-            File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
-            File outputFile = File.createTempFile("prefix", assetPath, outputDir);
-            outStream = new FileOutputStream(outputFile);
-
-            final int bufferSize = 1024 * 2;
-            byte[] buffer = new byte[bufferSize];
-            int n = 0;
-            while ((n = inputStream.read(buffer)) != -1) {
-                outStream.write(buffer, 0, n);
-            }
-
-            return outputFile;
-        } finally {
-            Utility.closeQuietly(outStream);
-            Utility.closeQuietly(inputStream);
-        }
-    }
-
-    protected void runOnBlockerThread(final Runnable runnable, boolean waitForCompletion) {
-        Runnable runnableToPost = runnable;
-        final ConditionVariable condition = waitForCompletion ? new ConditionVariable(!waitForCompletion) : null;
-
-        if (waitForCompletion) {
-            runnableToPost = new Runnable() {
-                @Override
-                public void run() {
-                    runnable.run();
-                    condition.open();
-                }
-            };
-        }
-
-        TestBlocker blocker = getTestBlocker();
-        Handler handler = blocker.getHandler();
-        handler.post(runnableToPost);
-
-        if (waitForCompletion) {
-            boolean success = condition.block(10000);
-            assertTrue(success);
-        }
-    }
-
-    protected void closeBlockerAndAssertSuccess() {
-        TestBlocker blocker;
-        synchronized (this) {
-            blocker = getTestBlocker();
-            testBlocker = null;
-        }
-
-        blocker.quit();
-
-        boolean joined = false;
-        while (!joined) {
-            try {
-                blocker.join();
-                joined = true;
-            } catch (InterruptedException e) {
-            }
-        }
-
-        try {
-            blocker.assertSuccess();
-        } catch (Exception e) {
-            fail(e.toString());
-        }
-    }
-
-    protected TestRequestAsyncTask createAsyncTaskOnUiThread(final Request... requests) throws Throwable {
-        final ArrayList<TestRequestAsyncTask> result = new ArrayList<TestRequestAsyncTask>();
-        runTestOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                result.add(new TestRequestAsyncTask(requests));
-            }
-        });
-        return result.isEmpty() ? null : result.get(0);
-    }
-
-
-    /*
-     * Classes and helpers related to asynchronous requests.
-     */
-
-    // A subclass of RequestAsyncTask that knows how to interact with TestBlocker to ensure that tests can wait
-    // on and assert success of async tasks.
-    protected class TestRequestAsyncTask extends RequestAsyncTask {
-        private final TestBlocker blocker = FacebookActivityTestCase.this.getTestBlocker();
-
-        public TestRequestAsyncTask(Request... requests) {
-            super(requests);
-        }
-
-        public TestRequestAsyncTask(List<Request> requests) {
-            super(requests);
-        }
-
-        public TestRequestAsyncTask(RequestBatch requests) {
-            super(requests);
-        }
-
-        public TestRequestAsyncTask(HttpURLConnection connection, Request... requests) {
-            super(connection, requests);
-        }
-
-        public TestRequestAsyncTask(HttpURLConnection connection, List<Request> requests) {
-            super(connection, requests);
-        }
-
-        public TestRequestAsyncTask(HttpURLConnection connection, RequestBatch requests) {
-            super(connection, requests);
-        }
-
-        public final TestBlocker getBlocker() {
-            return blocker;
-        }
-
-        public final Exception getThrowable() {
-            return getException();
-        }
-
-        protected void onPostExecute(List<Response> result) {
-            try {
-                super.onPostExecute(result);
-
-                if (getException() != null) {
-                    blocker.setException(getException());
-                }
-            } finally {
-                Log.d("TestRequestAsyncTask", "signaling blocker");
-                blocker.signal();
-            }
-        }
-
-        // In order to be able to block and accumulate exceptions, we want to ensure the async task is really
-        // being started on the blocker's thread, rather than the test's thread. Use this instead of calling
-        // execute directly in unit tests.
-        public void executeOnBlockerThread() {
-            ensureAsyncTaskLoaded();
-
-            Runnable runnable = new Runnable() {
-                public void run() {
-                    execute();
-                }
-            };
-            Handler handler = new Handler(blocker.getLooper());
-            handler.post(runnable);
-        }
-
-        private void ensureAsyncTaskLoaded() {
-            // Work around this issue on earlier frameworks: http://stackoverflow.com/a/7818839/782044
-            try {
-                runAndBlockOnUiThread(0, new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            Class.forName("android.os.AsyncTask");
-                        } catch (ClassNotFoundException e) {
-                        }
-                    }
-                });
-            } catch (Throwable throwable) {
-            }
-        }
-    }
-
-    // Provides an implementation of Request.Callback that will assert either success (no error) or failure (error)
-    // of a request, and allow derived classes to perform additional asserts.
-    protected class TestCallback implements Request.Callback {
-        private final TestBlocker blocker;
-        private final boolean expectSuccess;
-
-        public TestCallback(TestBlocker blocker, boolean expectSuccess) {
-            this.blocker = blocker;
-            this.expectSuccess = expectSuccess;
-        }
-
-        public TestCallback(boolean expectSuccess) {
-            this(FacebookActivityTestCase.this.getTestBlocker(), expectSuccess);
-        }
-
-        @Override
-        public void onCompleted(Response response) {
-            try {
-                // We expect to be called on the right thread.
-                if (Thread.currentThread() != blocker) {
-                    throw new FacebookException("Invalid thread " + Thread.currentThread().getId()
-                            + "; expected to be called on thread " + blocker.getId());
-                }
-
-                // We expect either success or failure.
-                if (expectSuccess && response.getError() != null) {
-                    throw response.getError().getException();
-                } else if (!expectSuccess && response.getError() == null) {
-                    throw new FacebookException("Expected failure case, received no error");
-                }
-
-                // Some tests may want more fine-grained control and assert additional conditions.
-                performAsserts(response);
-            } catch (Exception e) {
-                blocker.setException(e);
-            } finally {
-                // Tell anyone waiting on us that this callback was called.
-                blocker.signal();
-            }
-        }
-
-        protected void performAsserts(Response response) {
-        }
-    }
-
-    // A callback that will assert if the request resulted in an error.
-    protected class ExpectSuccessCallback extends TestCallback {
-        public ExpectSuccessCallback() {
-            super(true);
-        }
-    }
-
-    // A callback that will assert if the request did NOT result in an error.
-    protected class ExpectFailureCallback extends TestCallback {
-        public ExpectFailureCallback() {
-            super(false);
-        }
-    }
-
-    public static abstract class MockRequest extends Request {
-        public abstract Response createResponse();
-    }
-
-    public static class MockRequestBatch extends RequestBatch {
-        public MockRequestBatch(MockRequest... requests) {
-            super(requests);
-        }
-
-        // Caller must ensure that all the requests in the batch are, in fact, MockRequests.
-        public MockRequestBatch(RequestBatch requests) {
-            super(requests);
-        }
-
-        @Override
-        List<Response> executeAndWaitImpl() {
-            List<Request> requests = getRequests();
-
-            List<Response> responses = new ArrayList<Response>();
-            for (Request request : requests) {
-                MockRequest mockRequest = (MockRequest) request;
-                responses.add(mockRequest.createResponse());
-            }
-
-            Request.runCallbacks(this, responses);
-
-            return responses;
-        }
-    }
-
-    private AtomicBoolean strictModeOnForUiThread = new AtomicBoolean();
-
-    protected void turnOnStrictModeForUiThread() {
-        // We only ever need to do this once. If the boolean is true, we know that the next runnable
-        // posted to the UI thread will have strict mode on.
-        if (strictModeOnForUiThread.get() == false) {
-            try {
-                runTestOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        // Double-check whether we really need to still do this on the UI thread.
-                        if (strictModeOnForUiThread.compareAndSet(false, true)) {
-                            turnOnStrictModeForThisThread();
-                        }
-                    }
-                });
-            } catch (Throwable throwable) {
-            }
-        }
-    }
-
-    protected void turnOnStrictModeForThisThread() {
-        // We use reflection, because Instrumentation will complain about any references to StrictMode in API versions < 9
-        // when attempting to run the unit tests. No particular effort has been made to make this efficient, since we
-        // expect to call it just once.
-        try {
-            ClassLoader loader = Thread.currentThread().getContextClassLoader();
-            Class<?> strictModeClass = Class.forName("android.os.StrictMode", true, loader);
-            Class<?> threadPolicyClass = Class.forName("android.os.StrictMode$ThreadPolicy", true, loader);
-            Class<?> threadPolicyBuilderClass = Class.forName("android.os.StrictMode$ThreadPolicy$Builder", true,
-                    loader);
-
-            Object threadPolicyBuilder = threadPolicyBuilderClass.getConstructor().newInstance();
-            threadPolicyBuilder = threadPolicyBuilderClass.getMethod("detectAll").invoke(threadPolicyBuilder);
-            threadPolicyBuilder = threadPolicyBuilderClass.getMethod("penaltyDeath").invoke(threadPolicyBuilder);
-
-            Object threadPolicy = threadPolicyBuilderClass.getMethod("build").invoke(threadPolicyBuilder);
-            strictModeClass.getMethod("setThreadPolicy", threadPolicyClass).invoke(strictModeClass, threadPolicy);
-        } catch (Exception ex) {
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTests.java b/facebook/tests/src/com/facebook/FacebookActivityTests.java
deleted file mode 100644
index cbb187582..000000000
--- a/facebook/tests/src/com/facebook/FacebookActivityTests.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-
-public class FacebookActivityTests extends FacebookActivityTestCase<FacebookActivityTests.FacebookTestActivity> {
-    public FacebookActivityTests() {
-        super(FacebookActivityTests.FacebookTestActivity.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        Session activeSession = Session.getActiveSession();
-        if (activeSession != null) {
-            activeSession.closeAndClearTokenInformation();
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLaunchingWithEmptyIntent() {
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        setActivityIntent(intent);
-        FacebookTestActivity activity = getActivity();
-
-        assertNull(Session.getActiveSession());
-        assertFalse(activity.hasNativeLinkIntentForTesting());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLaunchingWithValidNativeLinkingIntent() {
-        final String token = "A token less unique than most";
-
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.putExtras(getNativeLinkingExtras(token));
-        setActivityIntent(intent);
-
-        assertNull(Session.getActiveSession());
-
-        FacebookTestActivity activity = getActivity();
-        Session activeSession = Session.getActiveSession();
-        assertNull(activeSession);
-        assertTrue(activity.hasNativeLinkIntentForTesting());
-    }
-
-    public static class FacebookTestActivity extends Activity {
-        public boolean hasNativeLinkIntentForTesting() {
-            return AccessToken.createFromNativeLinkingIntent(getIntent()) != null;
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/FacebookRequestErrorTests.java b/facebook/tests/src/com/facebook/FacebookRequestErrorTests.java
deleted file mode 100644
index 63377e889..000000000
--- a/facebook/tests/src/com/facebook/FacebookRequestErrorTests.java
+++ /dev/null
@@ -1,321 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import com.facebook.sdk.tests.R;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-public class FacebookRequestErrorTests extends FacebookTestCase {
-    public static final String ERROR_SINGLE_RESPONSE =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"Unknown path components: /unknown\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 2500\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_BATCH_RESPONSE =
-            "[\n" +
-            "  {\n" +
-            "    \"headers\": [\n" +
-            "      {\n" +
-            "        \"value\": \"*\",\n" +
-            "        \"name\": \"Access-Control-Allow-Origin\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-store\",\n" +
-            "        \"name\": \"Cache-Control\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"close\",\n" +
-            "        \"name\": \"Connection\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"text\\/javascript; charset=UTF-8\",\n" +
-            "        \"name\": \"Content-Type\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" +
-            "        \"name\": \"Expires\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-cache\",\n" +
-            "        \"name\": \"Pragma\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" +
-            "        \"name\": \"WWW-Authenticate\"\n" +
-            "      }\n" +
-            "    ],\n" +
-            "    \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" +
-            "    \"code\": 400\n" +
-            "  },\n" +
-            "  {\n" +
-            "    \"headers\": [\n" +
-            "      {\n" +
-            "        \"value\": \"*\",\n" +
-            "        \"name\": \"Access-Control-Allow-Origin\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-store\",\n" +
-            "        \"name\": \"Cache-Control\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"close\",\n" +
-            "        \"name\": \"Connection\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"text\\/javascript; charset=UTF-8\",\n" +
-            "        \"name\": \"Content-Type\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" +
-            "        \"name\": \"Expires\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-cache\",\n" +
-            "        \"name\": \"Pragma\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" +
-            "        \"name\": \"WWW-Authenticate\"\n" +
-            "      }\n" +
-            "    ],\n" +
-            "    \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" +
-            "    \"code\": 400\n" +
-            "  }\n" +
-            "]";
-
-
-    public static final String ERROR_SINGLE_RESPONSE_THROTTLE =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"Application request limit reached\",\n" +
-            "    \"code\": 4\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_SERVER =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"Some Server Error\",\n" +
-            "    \"code\": 2\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_PERMISSION =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"message\": \"(#200) Requires extended permission: publish_actions\",\n" +
-            "    \"code\": 200\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_WEB_LOGIN =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"User need to login\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 102,\n" +
-            "    \"error_subcode\": 459\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_RELOGIN =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"User need to relogin\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 102\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_RELOGIN_DELETED_APP =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"User need to relogin\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 190,\n" +
-            "    \"error_subcode\": 458\n" +
-            "  }\n" +
-            "}";
-
-    public void testClientException() {
-        final String errorMsg = "some error happened";
-        FacebookRequestError error = new FacebookRequestError(null, new FacebookException(errorMsg));
-        assertEquals(errorMsg, error.getErrorMessage());
-        assertEquals(FacebookRequestError.Category.CLIENT, error.getCategory());
-        assertEquals(FacebookRequestError.INVALID_ERROR_CODE, error.getErrorCode());
-        assertEquals(FacebookRequestError.INVALID_HTTP_STATUS_CODE, error.getRequestStatusCode());
-        assertEquals(0, error.getUserActionMessageId());
-    }
-
-    public void testSingleRequestWithoutBody() throws JSONException {
-        JSONObject withStatusCode = new JSONObject();
-        withStatusCode.put("code", 400);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCode, withStatusCode, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals(FacebookRequestError.Category.BAD_REQUEST, error.getCategory());
-        assertEquals(0, error.getUserActionMessageId());
-    }
-
-    public void testSingleErrorWithBody() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("Unknown path components: /unknown", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(2500, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.BAD_REQUEST, error.getCategory());
-        assertEquals(0, error.getUserActionMessageId());
-    }
-
-    public void testBatchRequest() throws JSONException {
-        JSONArray batchResponse = new JSONArray(ERROR_BATCH_RESPONSE);
-        assertEquals(2, batchResponse.length());
-        JSONObject firstResponse = (JSONObject) batchResponse.get(0);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(firstResponse, batchResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("An active access token must be used to query information about the current user.",
-                error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(2500, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof  JSONArray);
-        assertEquals(FacebookRequestError.Category.BAD_REQUEST, error.getCategory());
-        assertEquals(0, error.getUserActionMessageId());
-    }
-
-    public void testSingleThrottledError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_THROTTLE);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 403);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(403, error.getRequestStatusCode());
-        assertEquals("Application request limit reached", error.getErrorMessage());
-        assertNull(error.getErrorType());
-        assertEquals(4, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.THROTTLING, error.getCategory());
-        assertEquals(0, error.getUserActionMessageId());
-    }
-
-    public void testSingleServerError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_SERVER);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 500);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(500, error.getRequestStatusCode());
-        assertEquals("Some Server Error", error.getErrorMessage());
-        assertNull(error.getErrorType());
-        assertEquals(2, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.SERVER, error.getCategory());
-        assertEquals(0, error.getUserActionMessageId());
-    }
-
-    public void testSinglePermissionError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_PERMISSION);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("(#200) Requires extended permission: publish_actions", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(200, error.getErrorCode());
-        assertEquals(FacebookRequestError.INVALID_ERROR_CODE, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.PERMISSION, error.getCategory());
-        assertEquals(R.string.com_facebook_requesterror_permissions, error.getUserActionMessageId());
-    }
-
-    public void testSingleWebLoginError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_WEB_LOGIN);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("User need to login", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(102, error.getErrorCode());
-        assertEquals(459, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.AUTHENTICATION_RETRY, error.getCategory());
-        assertEquals(R.string.com_facebook_requesterror_web_login, error.getUserActionMessageId());
-    }
-
-    public void testSingleReloginError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_RELOGIN);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("User need to relogin", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(102, error.getErrorCode());
-        assertEquals(FacebookRequestError.INVALID_ERROR_CODE, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.AUTHENTICATION_REOPEN_SESSION, error.getCategory());
-        assertEquals(R.string.com_facebook_requesterror_reconnect, error.getUserActionMessageId());
-    }
-
-    public void testSingleReloginDeletedAppError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_RELOGIN_DELETED_APP);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("User need to relogin", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(190, error.getErrorCode());
-        assertEquals(458, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.AUTHENTICATION_REOPEN_SESSION, error.getCategory());
-        assertEquals(R.string.com_facebook_requesterror_relogin, error.getUserActionMessageId());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/FacebookTestCase.java b/facebook/tests/src/com/facebook/FacebookTestCase.java
deleted file mode 100644
index 37f892f05..000000000
--- a/facebook/tests/src/com/facebook/FacebookTestCase.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-
-public class FacebookTestCase extends FacebookActivityTestCase<FacebookTestCase.FacebookTestActivity> {
-    public FacebookTestCase() {
-        super(FacebookTestCase.FacebookTestActivity.class);
-        Settings.addLoggingBehavior(LoggingBehavior.REQUESTS);
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_RAW_RESPONSES);
-    }
-
-    public static class FacebookTestActivity extends Activity {
-    }
-}
-
diff --git a/facebook/tests/src/com/facebook/GraphRequestTests.java b/facebook/tests/src/com/facebook/GraphRequestTests.java
deleted file mode 100644
index 5ff2a975d..000000000
--- a/facebook/tests/src/com/facebook/GraphRequestTests.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import com.facebook.model.GraphObject;
-
-import java.util.Date;
-
-// These tests relate to serialization/de-serialization of graph objects in a variety of scenarios, rather than
-// to the underlying request/batch plumbing.
-public class GraphRequestTests extends FacebookTestCase {
-
-    @LargeTest
-    public void testCommentRoundTrip() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        GraphObject status = createStatusUpdate("");
-        GraphObject createdStatus = batchCreateAndGet(session, "me/feed", status, null, GraphObject.class);
-        String statusID = (String) createdStatus.getProperty("id");
-
-        GraphObject comment = GraphObject.Factory.create();
-        final String commentMessage = "It truly is a wonderful status update.";
-        comment.setProperty("message", commentMessage);
-
-        GraphObject createdComment1 = batchCreateAndGet(session, statusID + "/comments", comment, null,
-                GraphObject.class);
-        assertNotNull(createdComment1);
-
-        String comment1ID = (String) createdComment1.getProperty("id");
-        String comment1Message = (String) createdComment1.getProperty("message");
-        assertNotNull(comment1ID);
-        assertNotNull(comment1Message);
-        assertEquals(commentMessage, comment1Message);
-
-        // Try posting the same comment to the same status update. We need to clear its ID first.
-        createdComment1.removeProperty("id");
-        GraphObject createdComment2 = batchCreateAndGet(session, statusID + "/comments", createdComment1, null,
-                GraphObject.class);
-        assertNotNull(createdComment2);
-
-        String comment2ID = (String) createdComment2.getProperty("id");
-        String comment2Message = (String) createdComment2.getProperty("message");
-        assertNotNull(comment2ID);
-        assertFalse(comment1ID.equals(comment2ID));
-        assertNotNull(comment2Message);
-        assertEquals(commentMessage, comment2Message);
-    }
-
-    @LargeTest
-    public void testEventRoundTrip() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "create_event");
-
-        GraphObject event = GraphObject.Factory.create();
-        // Android emulators tend to not have the right date/time. To avoid issues with posting events in the past
-        // or too far in the future, we use a constant year. This test will break in 2030, angering our robot overlords.
-        Date startTime = new Date(130, 2, 17, 12, 34, 56);
-        event.setProperty("name", "My awesome St. Patrick's Day party on " + startTime.toString());
-        final String eventDescription = "This is a great event. You should all come.";
-        event.setProperty("description", eventDescription);
-        Date endTime = new Date(startTime.getTime() + 3600 * 1000);
-        event.setProperty("start_time", startTime);
-        event.setProperty("end_time", endTime);
-        event.setProperty("location", "My house");
-
-        GraphObject event1 = batchCreateAndGet(session, "me/events", event, null, GraphObject.class);
-        assertNotNull(event1);
-        assertEquals(eventDescription, event1.getProperty("description"));
-
-        event1.removeProperty("id");
-        GraphObject event2 = batchCreateAndGet(session, "me/events", event1, null, GraphObject.class);
-        assertNotNull(event2);
-        assertEquals(eventDescription, event2.getProperty("description"));
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java b/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java
deleted file mode 100644
index 90a688fd3..000000000
--- a/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package com.facebook;
-
-import android.graphics.Bitmap;
-
-import java.io.File;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.UUID;
-
-public class NativeAppCallAttachmentStoreTest extends FacebookTestCase {
-    private static final UUID CALL_ID = UUID.randomUUID();
-    private static final String ATTACHMENT_NAME = "hello";
-
-    private NativeAppCallAttachmentStore storeUnderTest;
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        storeUnderTest = new NativeAppCallAttachmentStore();
-    }
-
-    private Bitmap createBitmap() {
-        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
-        return bitmap;
-    }
-
-    private Map<String, Bitmap> createValidAttachment() {
-        String attachmentId = UUID.randomUUID().toString();
-        Bitmap bitmap = createBitmap();
-
-        Map<String, Bitmap> bitmaps = new HashMap<String, Bitmap>();
-        bitmaps.put(attachmentId, bitmap);
-
-        return bitmaps;
-    }
-
-    public void testAddAttachmentsForCallWithNullContext() throws Exception {
-        try {
-            Map<String, Bitmap> attachments = createValidAttachment();
-            storeUnderTest.addAttachmentsForCall(null, CALL_ID, attachments);
-            fail("expected exception");
-        } catch (NullPointerException ex) {
-            assertTrue(ex.getMessage().contains("context"));
-        }
-    }
-
-    public void testAddAttachmentsForCallWithNullCallId() throws Exception {
-        try {
-            Map<String, Bitmap> attachments = createValidAttachment();
-            storeUnderTest.addAttachmentsForCall(getActivity(), null, attachments);
-            fail("expected exception");
-        } catch (NullPointerException ex) {
-            assertTrue(ex.getMessage().contains("callId"));
-        }
-    }
-
-    public void testAddAttachmentsForCallWithNullBitmap() throws Exception {
-        try {
-            Map<String, Bitmap> attachments = new HashMap<String, Bitmap>();
-            attachments.put(ATTACHMENT_NAME, null);
-
-            storeUnderTest.addAttachmentsForCall(getActivity(), CALL_ID, attachments);
-            fail("expected exception");
-        } catch (NullPointerException ex) {
-            assertTrue(ex.getMessage().contains("imageAttachments"));
-        }
-    }
-
-    public void testAddAttachmentsForCallWithEmptyAttachmentName() throws Exception {
-        try {
-            Map<String, Bitmap> attachments = new HashMap<String, Bitmap>();
-            attachments.put("", createBitmap());
-
-            storeUnderTest.addAttachmentsForCall(getActivity(), CALL_ID, attachments);
-            fail("expected exception");
-        } catch (IllegalArgumentException ex) {
-            assertTrue(ex.getMessage().contains("imageAttachments"));
-        }
-    }
-
-    public void testAddAttachmentsForCall() throws Exception {
-
-    }
-
-    public void testCleanupAttachmentsForCall() throws Exception {
-
-    }
-
-    public void testGetAttachmentsDirectory() throws Exception {
-        File dir = storeUnderTest.getAttachmentsDirectory(getActivity());
-        assertNotNull(dir);
-        assertTrue(dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
-    }
-
-    public void testGetAttachmentsDirectoryForCall() throws Exception {
-        storeUnderTest.ensureAttachmentsDirectoryExists(getActivity());
-        File dir = storeUnderTest.getAttachmentsDirectoryForCall(CALL_ID, false);
-        assertNotNull(dir);
-        assertTrue(dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
-        assertTrue(dir.getAbsolutePath().contains(CALL_ID.toString()));
-    }
-
-    public void testGetAttachmentFile() throws Exception {
-        storeUnderTest.ensureAttachmentsDirectoryExists(getActivity());
-        File dir = storeUnderTest.getAttachmentFile(CALL_ID, ATTACHMENT_NAME, false);
-        assertNotNull(dir);
-        assertTrue(dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
-        assertTrue(dir.getAbsolutePath().contains(CALL_ID.toString()));
-        assertTrue(dir.getAbsolutePath().contains(ATTACHMENT_NAME.toString()));
-    }
-}
diff --git a/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java b/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java
deleted file mode 100644
index ddd51646e..000000000
--- a/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.net.Uri;
-import android.os.ParcelFileDescriptor;
-import android.util.Pair;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-public class NativeAppCallContentProviderTest extends FacebookTestCase {
-    private static final String APP_ID = "12345";
-    private static final UUID CALL_ID = UUID.randomUUID();
-
-    private NativeAppCallContentProvider providerUnderTest;
-    private StubAttachmentStore stubAttachmentStore;
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        stubAttachmentStore = new StubAttachmentStore();
-        providerUnderTest = new NativeAppCallContentProvider(stubAttachmentStore);
-    }
-
-    public void testGetAttachmentUrl() {
-        String url = NativeAppCallContentProvider.getAttachmentUrl(APP_ID, CALL_ID, "foo");
-        assertEquals("content://com.facebook.app.NativeAppCallContentProvider" + APP_ID + "/" + CALL_ID + "/foo", url);
-    }
-
-    public void testOnCreate() throws Exception {
-        assertTrue(providerUnderTest.onCreate());
-    }
-
-    public void testQuery() throws Exception {
-        assertNull(providerUnderTest.query(null, null, null, null, null));
-    }
-
-    public void testGetType() throws Exception {
-        assertNull(providerUnderTest.getType(null));
-    }
-
-    public void testInsert() throws Exception {
-        assertNull(providerUnderTest.insert(null, null));
-    }
-
-    public void testDelete() throws Exception {
-        assertEquals(0, providerUnderTest.delete(null, null, null));
-    }
-
-    public void testUpdate() throws Exception {
-        assertEquals(0, providerUnderTest.update(null, null, null, null));
-    }
-
-    public void testOpenFileWithNullUri() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(null, "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    public void testOpenFileWithBadPath() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/"), "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    public void testOpenFileWithoutCallIdAndAttachment() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo"), "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    public void testOpenFileWithBadCallID() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo/bar"), "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    public void testOpenFileWithUnknownUri() throws Exception {
-        try {
-            String callId = UUID.randomUUID().toString();
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/" + callId + "/bar"), "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    public void testOpenFileWithKnownUri() throws Exception {
-        String attachmentName = "hi";
-
-        stubAttachmentStore.addAttachment(CALL_ID, attachmentName);
-        Uri uri = Uri.parse(NativeAppCallContentProvider.getAttachmentUrl(APP_ID, CALL_ID, attachmentName));
-
-        ParcelFileDescriptor pfd = providerUnderTest.openFile(uri, "r");
-
-        assertNotNull(pfd);
-        pfd.close();
-    }
-
-    class StubAttachmentStore implements NativeAppCallContentProvider.AttachmentDataSource {
-        private List<Pair<UUID, String>> attachments = new ArrayList<Pair<UUID, String>>();
-        private static final String DUMMY_FILE_NAME = "dummyfile";
-
-        public void addAttachment(UUID callId, String attachmentName) {
-            attachments.add(new Pair<UUID, String>(callId, attachmentName));
-        }
-
-        @Override
-        public File openAttachment(UUID callId, String attachmentName) throws FileNotFoundException {
-            if (attachments.contains(new Pair<UUID, String>(callId, attachmentName))) {
-                File cacheDir = getActivity().getCacheDir();
-                File dummyFile = new File(cacheDir, DUMMY_FILE_NAME);
-                if (!dummyFile.exists()) {
-                    try {
-                        dummyFile.createNewFile();
-                    } catch (IOException e) {
-                    }
-                }
-
-                return dummyFile;
-            }
-            throw new FileNotFoundException();
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
deleted file mode 100644
index 937e1e089..000000000
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ /dev/null
@@ -1,746 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.location.Location;
-import android.net.Uri;
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.model.*;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-public class RequestTests extends FacebookTestCase {
-    private final static String TEST_OG_TYPE = "facebooksdktests:test";
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateRequest() {
-        Request request = new Request();
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePostRequest() {
-        GraphObject graphObject = GraphObject.Factory.create();
-        Request request = Request.newPostRequest(null, "me/statuses", graphObject, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.POST, request.getHttpMethod());
-        assertEquals("me/statuses", request.getGraphPath());
-        assertEquals(graphObject, request.getGraphObject());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateMeRequest() {
-        Request request = Request.newMeRequest(null, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("me", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateMyFriendsRequest() {
-        Request request = Request.newMyFriendsRequest(null, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("me/friends", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateUploadPhotoRequest() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
-
-        Request request = Request.newUploadPhotoRequest(null, image, null);
-        assertTrue(request != null);
-
-        Bundle parameters = request.getParameters();
-        assertTrue(parameters != null);
-
-        assertTrue(parameters.containsKey("picture"));
-        assertEquals(image, parameters.getParcelable("picture"));
-        assertEquals("me/photos", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePlacesSearchRequestWithLocation() {
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        Request request = Request.newPlacesSearchRequest(null, location, 1000, 50, null, null);
-
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("search", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePlacesSearchRequestWithSearchText() {
-        Request request = Request.newPlacesSearchRequest(null, null, 1000, 50, "Starbucks", null);
-
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("search", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePlacesSearchRequestRequiresLocationOrSearchText() {
-        try {
-            Request.newPlacesSearchRequest(null, null, 1000, 50, null, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetHttpMethodToNilGivesDefault() {
-        Request request = new Request();
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-
-        request.setHttpMethod(null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithNullRequestsThrows() {
-        try {
-            Request.executeBatchAndWait((Request[]) null);
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithZeroRequestsThrows() {
-        try {
-            Request.executeBatchAndWait(new Request[]{});
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithNullRequestThrows() {
-        try {
-            Request.executeBatchAndWait(new Request[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testToHttpConnectionWithNullRequestsThrows() {
-        try {
-            Request.toHttpConnection((Request[]) null);
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testToHttpConnectionWithZeroRequestsThrows() {
-        try {
-            Request.toHttpConnection(new Request[]{});
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testToHttpConnectionWithNullRequestThrows() {
-        try {
-            Request.toHttpConnection(new Request[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSingleGetToHttpRequest() throws Exception {
-        Request requestMe = new Request(null, "TourEiffel");
-        HttpURLConnection connection = Request.toHttpConnection(requestMe);
-
-        assertTrue(connection != null);
-
-        assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/TourEiffel", connection.getURL().getPath());
-
-        assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
-
-        Uri uri = Uri.parse(connection.getURL().toString());
-        assertEquals("android", uri.getQueryParameter("sdk"));
-        assertEquals("json", uri.getQueryParameter("format"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel");
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertTrue(response.getGraphObject() != null);
-
-        GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-        assertEquals("Paris", graphPlace.getLocation().getCity());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
-        Request request = new Request(null, "TourEiffel");
-        HttpURLConnection connection = Request.toHttpConnection(request);
-
-        List<Response> responses = Request.executeConnectionAndWait(connection, Arrays.asList(new Request[]{request}));
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        Response response = responses.get(0);
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertTrue(response.getGraphObject() != null);
-
-        GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-        assertEquals("Paris", graphPlace.getLocation().getCity());
-
-        // Make sure calling code can still access HTTP headers and call disconnect themselves.
-        int code = connection.getResponseCode();
-        assertEquals(200, code);
-        assertTrue(connection.getHeaderFields().keySet().contains("Content-Length"));
-        connection.disconnect();
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testFacebookErrorResponseCreatesError() {
-        Request request = new Request(null, "somestringthatshouldneverbeavalidfobjectid");
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-        FacebookException exception = error.getException();
-        assertNotNull(exception);
-
-        assertTrue(exception instanceof FacebookServiceException);
-        assertNotNull(error.getErrorType());
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-        assertNotNull(error.getRequestResultBody());
-    }
-
-    @LargeTest
-    public void testFacebookSuccessResponseWithErrorCodeCreatesError() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newRestRequest(session, "auth.extendSSOAccessToken", null, null);
-        assertNotNull(request);
-
-        // Because TestSession access tokens were not created via SSO, we expect to get an error from the service,
-        // but with a 200 (success) code.
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-
-        assertTrue(error.getException() instanceof FacebookServiceException);
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-        assertNotNull(error.getRequestResultBody());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testRequestWithUnopenedSessionFails() {
-        TestSession session = getTestSessionWithSharedUser(null);
-        Request request = new Request(session, "me");
-        Response response = request.executeAndWait();
-
-        assertNotNull(response.getError());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteRequestMe() {
-        TestSession session = openTestSessionWithSharedUser();
-        Request request = Request.newMeRequest(session, null);
-        Response response = request.executeAndWait();
-
-        validateMeResponse(session, response);
-    }
-
-    static void validateMeResponse(TestSession session, Response response) {
-        assertNull(response.getError());
-
-        GraphUser me = response.getGraphObjectAs(GraphUser.class);
-        assertNotNull(me);
-        assertEquals(session.getTestUserId(), me.getId());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteMyFriendsRequest() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newMyFriendsRequest(session, null);
-        Response response = request.executeAndWait();
-
-        validateMyFriendsResponse(session, response);
-    }
-
-    static void validateMyFriendsResponse(TestSession session, Response response) {
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphMultiResult graphResult = response.getGraphObjectAs(GraphMultiResult.class);
-        assertNotNull(graphResult);
-
-        List<GraphObject> results = graphResult.getData();
-        assertNotNull(results);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecutePlaceRequestWithLocation() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        Request request = Request.newPlacesSearchRequest(session, location, 5, 5, null, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphMultiResult graphResult = response.getGraphObjectAs(GraphMultiResult.class);
-        assertNotNull(graphResult);
-
-        List<GraphObject> results = graphResult.getData();
-        assertNotNull(results);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecutePlaceRequestWithSearchText() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        // Pass a distance without a location to ensure it is correctly ignored.
-        Request request = Request.newPlacesSearchRequest(session, null, 1000, 5, "Starbucks", null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphMultiResult graphResult = response.getGraphObjectAs(GraphMultiResult.class);
-        assertNotNull(graphResult);
-
-        List<GraphObject> results = graphResult.getData();
-        assertNotNull(results);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecutePlaceRequestWithLocationAndSearchText() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        Request request = Request.newPlacesSearchRequest(session, location, 1000, 5, "Starbucks", null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphMultiResult graphResult = response.getGraphObjectAs(GraphMultiResult.class);
-        assertNotNull(graphResult);
-
-        List<GraphObject> results = graphResult.getData();
-        assertNotNull(results);
-    }
-
-    private String executePostOpenGraphRequest() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        GraphObject data = GraphObject.Factory.create();
-        data.setProperty("a_property", "hello");
-
-        Request request = Request.newPostOpenGraphObjectRequest(session, TEST_OG_TYPE, "a title",
-                "http://www.facebook.com", "http://www.facebook.com/zzzzzzzzzzzzzzzzzzz", "a description", data, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObject graphResult = response.getGraphObject();
-        assertNotNull(graphResult);
-        assertNotNull(graphResult.getProperty("id"));
-
-        return (String) graphResult.getProperty("id");
-    }
-
-    @LargeTest
-    public void testExecutePostOpenGraphRequest() {
-        executePostOpenGraphRequest();
-    }
-
-    @LargeTest
-    public void testDeleteObjectRequest() {
-        String id = executePostOpenGraphRequest();
-
-        TestSession session = openTestSessionWithSharedUser();
-        Request request = Request.newDeleteObjectRequest(session, id, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObject result = response.getGraphObject();
-        assertNotNull(result);
-
-        assertTrue((Boolean) result.getProperty(Response.NON_JSON_RESPONSE_PROPERTY));
-    }
-
-    @LargeTest
-    public void testUpdateOpenGraphObjectRequest() {
-        String id = executePostOpenGraphRequest();
-
-        GraphObject data = GraphObject.Factory.create();
-        data.setProperty("a_property", "goodbye");
-
-        TestSession session = openTestSessionWithSharedUser();
-        Request request = Request.newUpdateOpenGraphObjectRequest(session, id, "another title", null,
-                "http://www.facebook.com/aaaaaaaaaaaaaaaaa", "another description", data, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObject result = response.getGraphObject();
-        assertNotNull(result);
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUser();
-        Bitmap image = createTestBitmap(128);
-
-        Request request = Request.newUploadPhotoRequest(session, image, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObject result = response.getGraphObject();
-        assertNotNull(result);
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhotoViaFile() throws IOException {
-        File outputFile = null;
-        FileOutputStream outStream = null;
-
-        try {
-            TestSession session = openTestSessionWithSharedUser();
-            Bitmap image = createTestBitmap(128);
-
-            File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
-            outputFile = File.createTempFile("prefix", "extension", outputDir);
-
-            outStream = new FileOutputStream(outputFile);
-            image.compress(Bitmap.CompressFormat.PNG, 100, outStream);
-            outStream.close();
-            outStream = null;
-
-            Request request = Request.newUploadPhotoRequest(session, outputFile, null);
-            Response response = request.executeAndWait();
-            assertNotNull(response);
-
-            assertNull(response.getError());
-
-            GraphObject result = response.getGraphObject();
-            assertNotNull(result);
-        } finally {
-            if (outStream != null) {
-                outStream.close();
-            }
-            if (outputFile != null) {
-                outputFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testUploadVideoFile() throws IOException, URISyntaxException {
-        File tempFile = null;
-        try {
-            TestSession session = openTestSessionWithSharedUser();
-            tempFile = createTempFileFromAsset("DarkScreen.mov");
-
-            Request request = Request.newUploadVideoRequest(session, tempFile, null);
-            Response response = request.executeAndWait();
-            assertNotNull(response);
-
-            assertNull(response.getError());
-
-            GraphObject result = response.getGraphObject();
-            assertNotNull(result);
-        } catch (Exception ex) {
-            return;
-        } finally {
-            if (tempFile != null) {
-                tempFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testPostStatusUpdate() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        GraphObject statusUpdate = createStatusUpdate("");
-
-        GraphObject retrievedStatusUpdate = postGetAndAssert(session, "me/feed", statusUpdate);
-
-        assertEquals(statusUpdate.getProperty("message"), retrievedStatusUpdate.getProperty("message"));
-    }
-
-    @LargeTest
-    public void testRestMethodGetUser() {
-        TestSession session = openTestSessionWithSharedUser();
-        String testUserId = session.getTestUserId();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("uids", testUserId);
-        parameters.putString("fields", "uid,name");
-
-        Request request = Request.newRestRequest(session, "users.getInfo", parameters, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        GraphObjectList<GraphObject> graphObjects = response.getGraphObjectList();
-        assertNotNull(graphObjects);
-        assertEquals(1, graphObjects.size());
-
-        GraphObject user = graphObjects.get(0);
-        assertNotNull(user);
-        assertEquals(testUserId, user.getProperty("uid").toString());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCallbackIsCalled() {
-        Request request = new Request(null, "4");
-
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new Request.Callback() {
-            @Override
-            public void onCompleted(Response response) {
-                calledBack.add(true);
-            }
-        });
-
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-        assertTrue(calledBack.size() == 1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testBatchTimeoutIsApplied() {
-        Request request = new Request(null, "me");
-        RequestBatch batch = new RequestBatch(request);
-
-        // We assume 1 ms is short enough to fail
-        batch.setTimeout(1);
-
-        List<Response> responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertTrue(responses.size() == 1);
-        Response response = responses.get(0);
-        assertNotNull(response);
-        assertNotNull(response.getError());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testBatchTimeoutCantBeNegative() {
-        try {
-            RequestBatch batch = new RequestBatch();
-            batch.setTimeout(-1);
-            fail();
-        } catch (IllegalArgumentException ex) {
-        }
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCantSetBothGraphPathAndRestMethod() {
-        Request request = new Request();
-        request.setGraphPath("me");
-        request.setRestMethod("amethod");
-        request.setCallback(new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testClosedSessionDoesntAppendAccessToken() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.close();
-        Request request = new Request(session, "me", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCantUseComplexParameterInGetRequest() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Bundle parameters = new Bundle();
-        parameters.putShortArray("foo", new short[1]);
-
-        Request request = new Request(session, "me", parameters, HttpMethod.GET, new ExpectFailureCallback());
-        Response response = request.executeAndWait();
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-        FacebookException exception = error.getException();
-        assertNotNull(exception);
-        assertTrue(exception.getMessage().contains("short[]"));
-    }
-
-    private final Location SEATTLE_LOCATION = new Location("") {
-        {
-            setLatitude(47.6097);
-            setLongitude(-122.3331);
-        }
-    };
-
-    @LargeTest
-    public void testPaging() {
-        TestSession session = openTestSessionWithSharedUser();
-        final List<GraphPlace> returnedPlaces = new ArrayList<GraphPlace>();
-        Request request = Request
-                .newPlacesSearchRequest(session, SEATTLE_LOCATION, 1000, 5, null, new Request.GraphPlaceListCallback() {
-                    @Override
-                    public void onCompleted(List<GraphPlace> places, Response response) {
-                        returnedPlaces.addAll(places);
-                    }
-                });
-        Response response = request.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getGraphObject());
-        assertNotSame(0, returnedPlaces.size());
-
-        returnedPlaces.clear();
-
-        Request nextRequest = response.getRequestForPagedResults(Response.PagingDirection.NEXT);
-        assertNotNull(nextRequest);
-
-        nextRequest.setCallback(request.getCallback());
-        response = nextRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getGraphObject());
-        assertNotSame(0, returnedPlaces.size());
-
-        returnedPlaces.clear();
-
-        Request previousRequest = response.getRequestForPagedResults(Response.PagingDirection.PREVIOUS);
-        assertNotNull(previousRequest);
-
-        previousRequest.setCallback(request.getCallback());
-        response = previousRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getGraphObject());
-        assertNotSame(0, returnedPlaces.size());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRequestWithClosedSessionThrowsException() {
-        TestSession session = getTestSessionWithSharedUser();
-        assertFalse(session.isOpened());
-
-        Request request = new Request(session, "4");
-        Response response = request.executeAndWait();
-
-        assertNotNull(response.getError());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/SessionTests.java b/facebook/tests/src/com/facebook/SessionTests.java
deleted file mode 100644
index 3f5a9f6a6..000000000
--- a/facebook/tests/src/com/facebook/SessionTests.java
+++ /dev/null
@@ -1,815 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.internal.Utility;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-public class SessionTests extends SessionTestsBase {
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        new SharedPreferencesTokenCachingStrategy(getActivity()).clear();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFailNullArguments() {
-        try {
-            new Session(null);
-
-            // Should not get here
-            assertFalse(true);
-        } catch (NullPointerException e) {
-            // got expected exception
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testActiveSessionChangeRegistration() {
-        final WaitForBroadcastReceiver receiver0 = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiver1 = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiver2 = new WaitForBroadcastReceiver();
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        try {
-            // Register these on the blocker thread so they will send
-            // notifications there as well. The notifications need to be on a
-            // different thread than the progress.
-            Runnable initialize0 = new Runnable() {
-                @Override
-                public void run() {
-                    broadcastManager.registerReceiver(receiver0, getActiveSessionAllFilter());
-
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_SET));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED));
-
-                    broadcastManager.registerReceiver(receiver2,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver2,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED));
-                }
-            };
-            runOnBlockerThread(initialize0, true);
-
-            // Verify all actions show up where they are expected
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver1, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_OPENED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver1, receiver2);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver1, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_CLOSED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver1, receiver2);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver1);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_SET);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver1);
-
-            receiver0.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_UNSET);
-            receiver0.waitForExpectedCalls();
-
-            // Remove receiver1 and verify actions continue to show up where
-            // expected
-            broadcastManager.unregisterReceiver(receiver1);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_OPENED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver2);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_CLOSED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver2);
-
-            receiver0.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_SET);
-            receiver0.waitForExpectedCalls();
-
-            receiver0.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_UNSET);
-            receiver0.waitForExpectedCalls();
-
-            // Remove receiver0 and register receiver1 multiple times for one
-            // action
-            broadcastManager.unregisterReceiver(receiver0);
-
-            Runnable initialize1 = new Runnable() {
-                @Override
-                public void run() {
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                }
-            };
-            runOnBlockerThread(initialize1, true);
-
-            receiver1.incrementExpectCount(3);
-            receiver2.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_OPENED);
-            receiver1.waitForExpectedCalls();
-            receiver2.waitForExpectedCalls();
-
-            receiver2.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_CLOSED);
-            receiver2.waitForExpectedCalls();
-
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_SET);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_UNSET);
-
-            closeBlockerAndAssertSuccess();
-        } finally {
-            broadcastManager.unregisterReceiver(receiver0);
-            broadcastManager.unregisterReceiver(receiver1);
-            broadcastManager.unregisterReceiver(receiver2);
-            Session.setActiveSession(null);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetActiveSession() {
-        Session.setActiveSession(null);
-
-        final WaitForBroadcastReceiver receiverOpened = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiverClosed = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiverSet = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiverUnset = new WaitForBroadcastReceiver();
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        try {
-            Runnable initializeOnBlockerThread = new Runnable() {
-                @Override
-                public void run() {
-                    broadcastManager.registerReceiver(receiverOpened,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiverClosed,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED));
-                    broadcastManager.registerReceiver(receiverSet,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_SET));
-                    broadcastManager.registerReceiver(receiverUnset,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_UNSET));
-                }
-            };
-            runOnBlockerThread(initializeOnBlockerThread, true);
-
-            // null -> null should not fire events
-            assertEquals(null, Session.getActiveSession());
-            Session.setActiveSession(null);
-            assertEquals(null, Session.getActiveSession());
-
-            Session session0 = new Session.Builder(getActivity()).
-                    setApplicationId("FakeAppId").
-                    setTokenCachingStrategy(new MockTokenCachingStrategy()).
-                    build();
-            assertEquals(SessionState.CREATED_TOKEN_LOADED, session0.getState());
-
-            // For unopened session, we should only see the Set event.
-            receiverSet.incrementExpectCount();
-            Session.setActiveSession(session0);
-            assertEquals(session0, Session.getActiveSession());
-            receiverSet.waitForExpectedCalls();
-
-            // When we open it, then we should see the Opened event.
-            receiverOpened.incrementExpectCount();
-            session0.openForRead(null);
-            receiverOpened.waitForExpectedCalls();
-
-            // Setting to itself should not fire events
-            Session.setActiveSession(session0);
-            assertEquals(session0, Session.getActiveSession());
-
-            // Setting from one opened session to another should deliver a full
-            // cycle of events
-            WaitForBroadcastReceiver.incrementExpectCounts(receiverClosed, receiverUnset, receiverSet, receiverOpened);
-            Session session1 = new Session.Builder(getActivity()).
-                    setApplicationId("FakeAppId").
-                    setTokenCachingStrategy(new MockTokenCachingStrategy()).
-                    build();
-            assertEquals(SessionState.CREATED_TOKEN_LOADED, session1.getState());
-            session1.openForRead(null);
-            assertEquals(SessionState.OPENED, session1.getState());
-            Session.setActiveSession(session1);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiverClosed, receiverUnset, receiverSet, receiverOpened);
-            assertEquals(SessionState.CLOSED, session0.getState());
-            assertEquals(session1, Session.getActiveSession());
-
-            closeBlockerAndAssertSuccess();
-        } finally {
-            broadcastManager.unregisterReceiver(receiverOpened);
-            broadcastManager.unregisterReceiver(receiverClosed);
-            broadcastManager.unregisterReceiver(receiverSet);
-            broadcastManager.unregisterReceiver(receiverUnset);
-            Session.setActiveSession(null);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        AccessToken openToken = AccessToken
-                .createFromString("A token of thanks", permissions, AccessTokenSource.TEST_USER);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        session.addAuthorizeResult(openToken);
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenForPublishSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        AccessToken openToken = AccessToken
-                .createFromString("A token of thanks", permissions, AccessTokenSource.TEST_USER);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        session.addAuthorizeResult(openToken);
-        session.openForPublish(new Session.OpenRequest(getActivity()).setCallback(statusRecorder).
-                setPermissions(Arrays.asList(new String[]{
-                        "publish_something",
-                        "manage_something",
-                        "ads_management",
-                        "create_event",
-                        "rsvp_event"
-                })));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenForPublishSuccessWithReadPermissions() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        AccessToken openToken = AccessToken
-                .createFromString("A token of thanks", permissions, AccessTokenSource.TEST_USER);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        session.addAuthorizeResult(openToken);
-        session.openForPublish(new Session.OpenRequest(getActivity()).setCallback(statusRecorder).
-                setPermissions(Arrays.asList(new String[]{
-                        "publish_something",
-                        "manage_something",
-                        "ads_management",
-                        "create_event",
-                        "rsvp_event",
-                        "read_something"
-                })));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenFromTokenCache() {
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        String token = "A token less unique than most";
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(token, DEFAULT_TIMEOUT_MILLISECONDS);
-        ScriptedSession session = createScriptedSessionOnBlockerThread("app-id", cache);
-
-        // Verify state when we have a token in cache.
-        assertEquals(SessionState.CREATED_TOKEN_LOADED, session.getState());
-
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-
-        // Verify we open with no authorize call.
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify no token information is saved.
-        assertTrue(cache.getSavedState() == null);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenActiveFromEmptyTokenCache() {
-        new SharedPreferencesTokenCachingStrategy(getActivity()).clear();
-
-        assertNull(Session.openActiveSessionFromCache(getActivity()));
-    }
-
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenFailure() {
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        Exception openException = new Exception();
-
-        session.addAuthorizeResult(openException);
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-
-        // Verify we get the expected exception and no saved state.
-        statusRecorder.waitForCall(session, SessionState.CLOSED_LOGIN_FAILED, openException);
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenForReadFailure() {
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        try {
-            session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder).
-                    setPermissions(Arrays.asList(new String[]{"publish_something"})));
-            fail("should not reach here without an exception");
-        } catch (FacebookException e) {
-            assertTrue(e.getMessage().contains("Cannot pass a publish or manage permission"));
-        } finally {
-            stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-            statusRecorder.close();
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRequestNewReadPermissionsSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Session.open
-        final AccessToken openToken = AccessToken
-                .createFromString("Allows playing outside", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("play_outside");
-
-        session.addAuthorizeResult(openToken, "play_outside");
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Successful Session.reauthorize with new permissions
-        final AccessToken reauthorizeToken = AccessToken.createFromString(
-                "Allows playing outside and eating ice cream", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("eat_ice_cream");
-
-        session.addAuthorizeResult(reauthorizeToken, "play_outside", "eat_ice_cream");
-        session.requestNewReadPermissions(new Session.NewPermissionsRequest(getActivity(), permissions));
-        statusRecorder.waitForCall(session, SessionState.OPENED_TOKEN_UPDATED, null);
-
-        verifySessionHasToken(session, reauthorizeToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(reauthorizeToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Failing reauthorization with new permissions
-        final Exception reauthorizeException = new Exception("Don't run with scissors");
-        permissions.add("run_with_scissors");
-
-        session.addAuthorizeResult(reauthorizeException);
-        session.requestNewReadPermissions(new Session.NewPermissionsRequest(getActivity(), permissions));
-        statusRecorder.waitForCall(session, SessionState.OPENED_TOKEN_UPDATED, reauthorizeException);
-
-        // Verify we do not overwrite cache if reauthorize fails
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(reauthorizeToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorders.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRequestNewPublishPermissionsSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Session.open
-        final AccessToken openToken = AccessToken
-                .createFromString("Allows playing outside", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("play_outside");
-
-        session.addAuthorizeResult(openToken, "play_outside");
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Successful Session.reauthorize with new permissions
-        final AccessToken reauthorizeToken = AccessToken.createFromString(
-                "Allows playing outside and publish eating ice cream", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("publish_eat_ice_cream");
-
-        session.addAuthorizeResult(reauthorizeToken, "play_outside", "publish_eat_ice_cream");
-        session.requestNewPublishPermissions(new Session.NewPermissionsRequest(getActivity(), permissions));
-        statusRecorder.waitForCall(session, SessionState.OPENED_TOKEN_UPDATED, null);
-
-        verifySessionHasToken(session, reauthorizeToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(reauthorizeToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Failing reauthorization with publish permissions on a read request
-        permissions.add("publish_run_with_scissors");
-
-        try {
-            session.requestNewReadPermissions(new Session.NewPermissionsRequest(getActivity(), permissions));
-            fail("Should not reach here without an exception");
-        } catch (FacebookException e) {
-            assertTrue(e.getMessage().contains("Cannot pass a publish or manage permission"));
-        } finally {
-            stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-            statusRecorder.close();
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenWithAccessToken() {
-        String token = "This is a fake token.";
-        Date expirationDate = new Date(new Date().getTime() + 3600 * 1000);
-        Date lastRefreshDate = new Date();
-        List<String> permissions = Arrays.asList(new String[]{"email", "publish_stream"});
-
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        AccessToken accessToken = AccessToken.createFromExistingAccessToken(token, expirationDate, lastRefreshDate,
-                AccessTokenSource.FACEBOOK_APPLICATION_WEB, permissions);
-        session.open(accessToken, statusRecorder);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions,
-                AccessTokenSource.FACEBOOK_APPLICATION_WEB, lastRefreshDate);
-        verifySessionHasToken(session, expectedToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(expectedToken.getToken(), TokenCachingStrategy.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenWithAccessTokenWithDefaults() {
-        String token = "This is a fake token.";
-
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        AccessToken accessToken = AccessToken.createFromExistingAccessToken(token, null, null, null, null);
-        session.open(accessToken, statusRecorder);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        assertEquals(token, session.getAccessToken());
-        assertEquals(new Date(Long.MAX_VALUE), session.getExpirationDate());
-        assertEquals(0, session.getPermissions().size());
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testSessionWillExtendTokenIfNeeded() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.forceExtendAccessToken(true);
-
-        Request request = Request.newMeRequest(session, null);
-        request.executeAndWait();
-
-        assertTrue(session.getWasAskedToExtendAccessToken());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testSessionWillNotExtendTokenIfCurrentlyAttempting() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.forceExtendAccessToken(true);
-        session.fakeTokenRefreshAttempt();
-
-        Request request = Request.newMeRequest(session, null);
-        request.executeAndWait();
-        assertFalse(session.getWasAskedToExtendAccessToken());
-    }
-
-
-    @LargeTest
-    public void testBasicSerialization() throws IOException, ClassNotFoundException {
-        // Try to test the happy path, that there are no unserializable fields
-        // in the session.
-        Session session0 = new Session.Builder(getActivity()).setApplicationId("fakeID").build();
-        Session session1 = TestUtils.serializeAndUnserialize(session0);
-
-        // do some basic assertions
-        assertNotNull(session0.getAccessToken());
-        assertEquals(session0, session1);
-
-        Session.AuthorizationRequest authRequest0 =
-                new Session.OpenRequest(getActivity()).
-                        setRequestCode(123).
-                        setLoginBehavior(SessionLoginBehavior.SSO_ONLY);
-        Session.AuthorizationRequest authRequest1 = TestUtils.serializeAndUnserialize(authRequest0);
-
-        assertEquals(authRequest0.getLoginBehavior(), authRequest1.getLoginBehavior());
-        assertEquals(authRequest0.getRequestCode(), authRequest1.getRequestCode());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenSessionWithNativeLinkingIntent() {
-        String token = "A token less unique than most";
-
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.putExtras(getNativeLinkingExtras(token));
-
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, DEFAULT_TIMEOUT_MILLISECONDS);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        assertEquals(SessionState.CREATED, session.getState());
-
-        AccessToken accessToken = AccessToken.createFromNativeLinkingIntent(intent);
-        assertNotNull(accessToken);
-        session.open(accessToken, statusRecorder);
-
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        assertEquals(token, session.getAccessToken());
-        // Expiration time should be 3600s after now (allow 5s variation for test execution time)
-        long delta = session.getExpirationDate().getTime() - new Date().getTime();
-        assertTrue(Math.abs(delta - 3600 * 1000) < 5000);
-        assertEquals(0, session.getPermissions().size());
-        assertEquals(Utility.getMetadataApplicationId(getActivity()), session.getApplicationId());
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        assertFalse(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenActiveSessionWithNativeLinkingIntent() {
-        Session activeSession = Session.getActiveSession();
-        if (activeSession != null) {
-            activeSession.closeAndClearTokenInformation();
-        }
-
-        SharedPreferencesTokenCachingStrategy tokenCache = new SharedPreferencesTokenCachingStrategy(getActivity());
-        assertEquals(0, tokenCache.load().size());
-
-        String token = "A token less unique than most";
-
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.putExtras(getNativeLinkingExtras(token));
-
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-
-        AccessToken accessToken = AccessToken.createFromNativeLinkingIntent(intent);
-        assertNotNull(accessToken);
-        Session session = Session.openActiveSessionWithAccessToken(getActivity(), accessToken, statusRecorder);
-        assertEquals(session, Session.getActiveSession());
-
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        assertNotSame(0, tokenCache.load().size());
-
-        assertEquals(token, session.getAccessToken());
-        // Expiration time should be 3600s after now (allow 5s variation for test execution time)
-        long delta = session.getExpirationDate().getTime() - new Date().getTime();
-        assertTrue(Math.abs(delta - 3600 * 1000) < 5000);
-        assertEquals(0, session.getPermissions().size());
-        assertEquals(Utility.getMetadataApplicationId(getActivity()), session.getApplicationId());
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpeningSessionWithPendingRequestResultsInExceptionCallback() {
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-        session.addPendingAuthorizeResult();
-
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENING, new UnsupportedOperationException());
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    static IntentFilter getActiveSessionFilter(String... actions) {
-        IntentFilter filter = new IntentFilter();
-
-        for (String action : actions) {
-            filter.addAction(action);
-        }
-
-        return filter;
-    }
-
-    static IntentFilter getActiveSessionAllFilter() {
-        return getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED, Session.ACTION_ACTIVE_SESSION_OPENED,
-                Session.ACTION_ACTIVE_SESSION_SET, Session.ACTION_ACTIVE_SESSION_UNSET);
-    }
-
-    private void verifySessionHasToken(Session session, AccessToken token) {
-        assertEquals(token.getToken(), session.getAccessToken());
-        assertEquals(token.getExpires(), session.getExpirationDate());
-        TestUtils.assertAtLeastExpectedPermissions(token.getPermissions(), session.getPermissions());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/SessionTestsBase.java b/facebook/tests/src/com/facebook/SessionTestsBase.java
deleted file mode 100644
index c7b673594..000000000
--- a/facebook/tests/src/com/facebook/SessionTestsBase.java
+++ /dev/null
@@ -1,265 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.ConditionVariable;
-import android.os.Looper;
-import com.facebook.internal.Utility;
-
-import java.util.*;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.TimeUnit;
-
-public class SessionTestsBase extends FacebookTestCase {
-    public static final int DEFAULT_TIMEOUT_MILLISECONDS = 10 * 1000;
-    static final int SIMULATED_WORKING_MILLISECONDS = 20;
-    public static final int STRAY_CALLBACK_WAIT_MILLISECONDS = 50;
-
-    public ScriptedSession createScriptedSessionOnBlockerThread(TokenCachingStrategy cachingStrategy) {
-        return createScriptedSessionOnBlockerThread(Utility.getMetadataApplicationId(getActivity()), cachingStrategy);
-    }
-
-    ScriptedSession createScriptedSessionOnBlockerThread(final String applicationId,
-            final TokenCachingStrategy cachingStrategy) {
-        class MutableState {
-            ScriptedSession session;
-        }
-        ;
-        final MutableState mutable = new MutableState();
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                mutable.session = new ScriptedSession(getActivity(), applicationId, cachingStrategy);
-            }
-        }, true);
-
-        return mutable.session;
-    }
-
-    public static void stall(int stallMsec) {
-        try {
-            Thread.sleep(stallMsec);
-        } catch (InterruptedException e) {
-            fail("InterruptedException while stalling");
-        }
-    }
-
-    public class ScriptedSession extends Session {
-        private static final long serialVersionUID = 1L;
-        private final LinkedList<AuthorizeResult> pendingAuthorizations = new LinkedList<AuthorizeResult>();
-        private AuthorizationRequest lastRequest;
-        private AuthorizeResult currentAuthorization = null;
-
-        public ScriptedSession(Context currentContext, String applicationId, TokenCachingStrategy tokenCachingStrategy) {
-            super(currentContext, applicationId, tokenCachingStrategy);
-        }
-
-        public void addAuthorizeResult(String token, List<String> permissions, AccessTokenSource source) {
-            addAuthorizeResult(AccessToken.createFromString(token, permissions, source));
-        }
-
-        public void addAuthorizeResult(AccessToken token) {
-            pendingAuthorizations.add(new AuthorizeResult(token));
-        }
-
-        public void addAuthorizeResult(AccessToken token, List<String> permissions) {
-            pendingAuthorizations.add(new AuthorizeResult(token, permissions));
-        }
-
-        public void addAuthorizeResult(AccessToken token, String... permissions) {
-            pendingAuthorizations.add(new AuthorizeResult(token, Arrays.asList(permissions)));
-        }
-
-        public void addAuthorizeResult(Exception exception) {
-            pendingAuthorizations.add(new AuthorizeResult(exception));
-        }
-
-        public void addPendingAuthorizeResult() {
-            pendingAuthorizations.add(new AuthorizeResult());
-        }
-
-        public AuthorizationRequest getLastRequest() {
-            return lastRequest;
-        }
-
-        public SessionDefaultAudience getLastRequestAudience() {
-            return lastRequest.getDefaultAudience();
-        }
-
-        // Overrides authorize to return the next AuthorizeResult we added.
-        @Override
-        void authorize(final AuthorizationRequest request) {
-            lastRequest = request;
-            getActivity().runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    stall(SIMULATED_WORKING_MILLISECONDS);
-                    currentAuthorization = pendingAuthorizations.poll();
-
-                    if (currentAuthorization == null) {
-                        fail("Missing call to addScriptedAuthorization");
-                    }
-                    if (!currentAuthorization.leaveAsPending) {
-                        finishAuthOrReauth(currentAuthorization.token, currentAuthorization.exception);
-                    }
-                }
-            });
-        }
-
-        private class AuthorizeResult {
-            final AccessToken token;
-            final Exception exception;
-            final List<String> resultingPermissions;
-            final boolean leaveAsPending;
-
-            private AuthorizeResult(AccessToken token, Exception exception, List<String> permissions) {
-                this.token = token;
-                this.exception = exception;
-                this.resultingPermissions = permissions;
-                this.leaveAsPending = false;
-            }
-
-            private AuthorizeResult() {
-                this.token = null;
-                this.exception = null;
-                this.resultingPermissions = null;
-                this.leaveAsPending = true;
-            }
-
-            AuthorizeResult(AccessToken token, List<String> permissions) {
-                this(token, null, permissions);
-            }
-
-            AuthorizeResult(AccessToken token) {
-                this(token, null, null);
-            }
-
-            AuthorizeResult(Exception exception) {
-                this(null, exception, null);
-            }
-        }
-    }
-
-    public static class SessionStatusCallbackRecorder implements Session.StatusCallback {
-        private final BlockingQueue<Call> calls = new LinkedBlockingQueue<Call>();
-        volatile boolean isClosed = false;
-
-        public void waitForCall(Session session, SessionState state, Exception exception) {
-            Call call = null;
-
-            try {
-                call = calls.poll(DEFAULT_TIMEOUT_MILLISECONDS, TimeUnit.MILLISECONDS);
-                if (call == null) {
-                    fail("Did not get a status callback within timeout.");
-                }
-            } catch (InterruptedException e) {
-                fail("InterruptedException while waiting for status callback: " + e);
-            }
-
-            assertEquals(session, call.session);
-            assertEquals(state, call.state);
-            if (exception != null && call.exception != null) {
-                assertEquals(exception.getClass(), call.exception.getClass());
-            } else {
-                // They should both be null if either of them is.
-                assertTrue(exception == call.exception);
-            }
-        }
-
-        public void close() {
-            isClosed = true;
-            assertEquals(0, calls.size());
-        }
-
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            Call call = new Call(session, state, exception);
-            if (!calls.offer(call)) {
-                fail("Test Error: Blocking queue ran out of capacity");
-            }
-            if (isClosed) {
-                fail("Reauthorize callback called after closed");
-            }
-            assertEquals("Callback should run on main UI thread", Thread.currentThread(),
-                    Looper.getMainLooper().getThread());
-        }
-
-        private static class Call {
-            final Session session;
-            final SessionState state;
-            final Exception exception;
-
-            Call(Session session, SessionState state, Exception exception) {
-                this.session = session;
-                this.state = state;
-                this.exception = exception;
-            }
-        }
-
-    }
-
-    public static class MockTokenCachingStrategy extends TokenCachingStrategy {
-        private final String token;
-        private final long expires_in;
-        private Bundle saved;
-
-        MockTokenCachingStrategy() {
-            this("FakeToken", DEFAULT_TIMEOUT_MILLISECONDS);
-        }
-
-        public MockTokenCachingStrategy(String token, long expires_in) {
-            this.token = token;
-            this.expires_in = expires_in;
-            this.saved = null;
-        }
-
-        public Bundle getSavedState() {
-            return saved;
-        }
-
-        @Override
-        public Bundle load() {
-            Bundle bundle = null;
-
-            if (token != null) {
-                bundle = new Bundle();
-
-                TokenCachingStrategy.putToken(bundle, token);
-                TokenCachingStrategy.putExpirationMilliseconds(bundle, System.currentTimeMillis() + expires_in);
-            }
-
-            return bundle;
-        }
-
-        @Override
-        public void save(Bundle bundle) {
-            this.saved = bundle;
-        }
-
-        @Override
-        public void clear() {
-            this.saved = null;
-        }
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/SettingsTests.java b/facebook/tests/src/com/facebook/SettingsTests.java
deleted file mode 100644
index 2638f4ef3..000000000
--- a/facebook/tests/src/com/facebook/SettingsTests.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.ConditionVariable;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-
-import java.io.IOException;
-import java.util.concurrent.Executor;
-
-public final class SettingsTests extends AndroidTestCase {
-
-    @SmallTest @MediumTest @LargeTest
-    public void testGetExecutor() {
-        final ConditionVariable condition = new ConditionVariable();
-
-        Settings.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                condition.open();
-            }
-        });
-
-        boolean success = condition.block(5000);
-        assertTrue(success);
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testSetExecutor() {
-        final ConditionVariable condition = new ConditionVariable();
-
-        final Runnable runnable = new Runnable() {
-            @Override
-            public void run() { }
-        };
-
-        final Executor executor = new Executor() {
-            @Override
-            public void execute(Runnable command) {
-                assertEquals(runnable, command);
-                command.run();
-
-                condition.open();
-            }
-        };
-
-        Executor original = Settings.getExecutor();
-        try {
-            Settings.setExecutor(executor);
-            Settings.getExecutor().execute(runnable);
-
-            boolean success = condition.block(5000);
-            assertTrue(success);
-        } finally {
-            Settings.setExecutor(original);
-        }
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testLogdException() {
-        try {
-            throw new IOException("Simulated error");
-        } catch (IOException e) {
-            Utility.logd("SettingsTest", e);
-        }
-
-        try {
-            throw new IOException(null);
-        } catch (IOException e) {
-            Utility.logd("SettingsTest", e);
-        }
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testFacebookDomain() {
-        Settings.setFacebookDomain("beta.facebook.com");
-
-        String graphUrlBase = ServerProtocol.getGraphUrlBase();
-        assertEquals("https://graph.beta.facebook.com", graphUrlBase);
-
-        Settings.setFacebookDomain("facebook.com");
-    }
-}
diff --git a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java b/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
deleted file mode 100644
index bab3fb38f..000000000
--- a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
+++ /dev/null
@@ -1,349 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.internal.Utility;
-import junit.framework.Assert;
-
-import java.lang.reflect.Array;
-import java.util.*;
-
-
-public final class SharedPreferencesTokenCacheTests extends AndroidTestCase {
-
-    private static final String BOOLEAN_KEY = "booleanKey";
-    private static final String BOOLEAN_ARRAY_KEY = "booleanArrayKey";
-    private static final String BYTE_KEY = "byteKey";
-    private static final String BYTE_ARRAY_KEY = "byteArrayKey";
-    private static final String SHORT_KEY = "shortKey";
-    private static final String SHORT_ARRAY_KEY = "shortArrayKey";
-    private static final String INT_KEY = "intKey";
-    private static final String INT_ARRAY_KEY = "intArrayKey";
-    private static final String LONG_KEY = "longKey";
-    private static final String LONG_ARRAY_KEY = "longArrayKey";
-    private static final String FLOAT_ARRAY_KEY = "floatKey";
-    private static final String FLOAT_KEY = "floatArrayKey";
-    private static final String DOUBLE_KEY = "doubleKey";
-    private static final String DOUBLE_ARRAY_KEY = "doubleArrayKey";
-    private static final String CHAR_KEY = "charKey";
-    private static final String CHAR_ARRAY_KEY = "charArrayKey";
-    private static final String STRING_KEY = "stringKey";
-    private static final String STRING_LIST_KEY = "stringListKey";
-    private static final String SERIALIZABLE_KEY = "serializableKey";
-
-    private static Random random = new Random((new Date()).getTime());
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testAllTypes() {
-        Bundle originalBundle = new Bundle();
-
-        putBoolean(BOOLEAN_KEY, originalBundle);
-        putBooleanArray(BOOLEAN_ARRAY_KEY, originalBundle);
-        putByte(BYTE_KEY, originalBundle);
-        putByteArray(BYTE_ARRAY_KEY, originalBundle);
-        putShort(SHORT_KEY, originalBundle);
-        putShortArray(SHORT_ARRAY_KEY, originalBundle);
-        putInt(INT_KEY, originalBundle);
-        putIntArray(INT_ARRAY_KEY, originalBundle);
-        putLong(LONG_KEY, originalBundle);
-        putLongArray(LONG_ARRAY_KEY, originalBundle);
-        putFloat(FLOAT_KEY, originalBundle);
-        putFloatArray(FLOAT_ARRAY_KEY, originalBundle);
-        putDouble(DOUBLE_KEY, originalBundle);
-        putDoubleArray(DOUBLE_ARRAY_KEY, originalBundle);
-        putChar(CHAR_KEY, originalBundle);
-        putCharArray(CHAR_ARRAY_KEY, originalBundle);
-        putString(STRING_KEY, originalBundle);
-        putStringList(STRING_LIST_KEY, originalBundle);
-        originalBundle.putSerializable(SERIALIZABLE_KEY, AccessTokenSource.FACEBOOK_APPLICATION_WEB);
-
-        ensureApplicationContext();
-
-        SharedPreferencesTokenCachingStrategy cache = new SharedPreferencesTokenCachingStrategy(getContext());
-        cache.save(originalBundle);
-
-        SharedPreferencesTokenCachingStrategy cache2 = new SharedPreferencesTokenCachingStrategy(getContext());
-        Bundle cachedBundle = cache2.load();
-
-        Assert.assertEquals(originalBundle.getBoolean(BOOLEAN_KEY), cachedBundle.getBoolean(BOOLEAN_KEY));
-        assertArrayEquals(originalBundle.getBooleanArray(BOOLEAN_ARRAY_KEY), cachedBundle.getBooleanArray(BOOLEAN_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getByte(BYTE_KEY), cachedBundle.getByte(BYTE_KEY));
-        assertArrayEquals(originalBundle.getByteArray(BYTE_ARRAY_KEY), cachedBundle.getByteArray(BYTE_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getShort(SHORT_KEY), cachedBundle.getShort(SHORT_KEY));
-        assertArrayEquals(originalBundle.getShortArray(SHORT_ARRAY_KEY), cachedBundle.getShortArray(SHORT_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getInt(INT_KEY), cachedBundle.getInt(INT_KEY));
-        assertArrayEquals(originalBundle.getIntArray(INT_ARRAY_KEY), cachedBundle.getIntArray(INT_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getLong(LONG_KEY), cachedBundle.getLong(LONG_KEY));
-        assertArrayEquals(originalBundle.getLongArray(LONG_ARRAY_KEY), cachedBundle.getLongArray(LONG_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getFloat(FLOAT_KEY), cachedBundle.getFloat(FLOAT_KEY));
-        assertArrayEquals(originalBundle.getFloatArray(FLOAT_ARRAY_KEY), cachedBundle.getFloatArray(FLOAT_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getDouble(DOUBLE_KEY), cachedBundle.getDouble(DOUBLE_KEY));
-        assertArrayEquals(originalBundle.getDoubleArray(DOUBLE_ARRAY_KEY), cachedBundle.getDoubleArray(DOUBLE_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getChar(CHAR_KEY), cachedBundle.getChar(CHAR_KEY));
-        assertArrayEquals(originalBundle.getCharArray(CHAR_ARRAY_KEY), cachedBundle.getCharArray(CHAR_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getString(STRING_KEY), cachedBundle.getString(STRING_KEY));
-        assertListEquals(originalBundle.getStringArrayList(STRING_LIST_KEY), cachedBundle.getStringArrayList(
-                STRING_LIST_KEY));
-        Assert.assertEquals(originalBundle.getSerializable(SERIALIZABLE_KEY),
-                cachedBundle.getSerializable(SERIALIZABLE_KEY));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMultipleCaches() {
-        Bundle bundle1 = new Bundle(), bundle2 = new Bundle();
-
-        bundle1.putInt(INT_KEY, 10);
-        bundle1.putString(STRING_KEY, "ABC");
-        bundle2.putInt(INT_KEY, 100);
-        bundle2.putString(STRING_KEY, "xyz");
-
-        ensureApplicationContext();
-
-        SharedPreferencesTokenCachingStrategy cache1 = new SharedPreferencesTokenCachingStrategy(getContext());
-        SharedPreferencesTokenCachingStrategy cache2 = new SharedPreferencesTokenCachingStrategy(getContext(), "CustomCache");
-
-        cache1.save(bundle1);
-        cache2.save(bundle2);
-
-        // Get new references to make sure we are getting persisted data.
-        // Reverse the cache references for fun.
-        cache1 = new SharedPreferencesTokenCachingStrategy(getContext(), "CustomCache");
-        cache2 = new SharedPreferencesTokenCachingStrategy(getContext());
-
-        Bundle newBundle1 = cache1.load(), newBundle2 = cache2.load();
-
-        Assert.assertEquals(bundle2.getInt(INT_KEY), newBundle1.getInt(INT_KEY));
-        Assert.assertEquals(bundle2.getString(STRING_KEY), newBundle1.getString(STRING_KEY));
-        Assert.assertEquals(bundle1.getInt(INT_KEY), newBundle2.getInt(INT_KEY));
-        Assert.assertEquals(bundle1.getString(STRING_KEY), newBundle2.getString(STRING_KEY));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCacheRoundtrip() {
-        ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-        Date later = TestUtils.nowPlusSeconds(60);
-        Date earlier = TestUtils.nowPlusSeconds(-60);
-
-        SharedPreferencesTokenCachingStrategy cache = new SharedPreferencesTokenCachingStrategy(getContext());
-        cache.clear();
-
-        Bundle bundle = new Bundle();
-        TokenCachingStrategy.putToken(bundle, token);
-        TokenCachingStrategy.putExpirationDate(bundle, later);
-        TokenCachingStrategy.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION_NATIVE);
-        TokenCachingStrategy.putLastRefreshDate(bundle, earlier);
-        TokenCachingStrategy.putPermissions(bundle, permissions);
-
-        cache.save(bundle);
-        bundle = cache.load();
-
-        AccessToken accessToken = AccessToken.createFromCache(bundle);
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_NATIVE, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-
-        Bundle cachedBundle = accessToken.toCacheBundle();
-        TestUtils.assertEqualContents(bundle, cachedBundle);
-    }
-
-    private static void assertArrayEquals(Object a1, Object a2) {
-        Assert.assertNotNull(a1);
-        Assert.assertNotNull(a2);
-        Assert.assertEquals(a1.getClass(), a2.getClass());
-        Assert.assertTrue("Not an array", a1.getClass().isArray());
-
-        int length = Array.getLength(a1);
-        Assert.assertEquals(length, Array.getLength(a2));
-        for (int i = 0; i < length; i++) {
-            Object a1Value = Array.get(a1, i);
-            Object a2Value = Array.get(a2, i);
-
-            Assert.assertEquals(a1Value, a2Value);
-        }
-    }
-
-    private static void assertListEquals(List<?> l1, List<?> l2) {
-        Assert.assertNotNull(l1);
-        Assert.assertNotNull(l2);
-
-        Iterator<?> i1 = l1.iterator(), i2 = l2.iterator();
-        while (i1.hasNext() && i2.hasNext()) {
-            Assert.assertEquals(i1.next(), i2.next());
-        }
-
-        Assert.assertTrue("Lists not of the same length", !i1.hasNext());
-        Assert.assertTrue("Lists not of the same length", !i2.hasNext());
-    }
-
-    private static void putInt(String key, Bundle bundle) {
-        bundle.putInt(key, random.nextInt());
-    }
-
-    private static void putIntArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        int[] array = new int[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextInt();
-        }
-        bundle.putIntArray(key, array);
-    }
-
-    private static void putShort(String key, Bundle bundle) {
-        bundle.putShort(key, (short)random.nextInt());
-    }
-
-    private static void putShortArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        short[] array = new short[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = (short)random.nextInt();
-        }
-        bundle.putShortArray(key, array);
-    }
-
-    private static void putByte(String key, Bundle bundle) {
-        bundle.putByte(key, (byte)random.nextInt());
-    }
-
-    private static void putByteArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        byte[] array = new byte[length];
-        random.nextBytes(array);
-        bundle.putByteArray(key, array);
-    }
-
-    private static void putBoolean(String key, Bundle bundle) {
-        bundle.putBoolean(key, random.nextBoolean());
-    }
-
-    private static void putBooleanArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        boolean[] array = new boolean[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextBoolean();
-        }
-        bundle.putBooleanArray(key, array);
-    }
-
-    private static void putLong(String key, Bundle bundle) {
-        bundle.putLong(key, random.nextLong());
-    }
-
-    private static void putLongArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        long[] array = new long[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextLong();
-        }
-        bundle.putLongArray(key, array);
-    }
-
-    private static void putFloat(String key, Bundle bundle) {
-        bundle.putFloat(key, random.nextFloat());
-    }
-
-    private static void putFloatArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        float[] array = new float[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextFloat();
-        }
-        bundle.putFloatArray(key, array);
-    }
-
-    private static void putDouble(String key, Bundle bundle) {
-        bundle.putDouble(key, random.nextDouble());
-    }
-
-    private static void putDoubleArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        double[] array = new double[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextDouble();
-        }
-        bundle.putDoubleArray(key, array);
-    }
-
-    private static void putChar(String key, Bundle bundle) {
-        bundle.putChar(key, getChar());
-    }
-
-    private static void putCharArray(String key, Bundle bundle) {
-        bundle.putCharArray(key, getCharArray());
-    }
-
-    private static void putString(String key, Bundle bundle) {
-        bundle.putString(key, new String(getCharArray()));
-    }
-
-    private static void putStringList(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        ArrayList<String> stringList = new ArrayList<String>(length);
-        while (0 < length--) {
-            if (length == 0) {
-                stringList.add(null);
-            } else {
-                stringList.add(new String(getCharArray()));
-            }
-        }
-
-        bundle.putStringArrayList(key, stringList);
-    }
-
-    private static char[] getCharArray() {
-        int length = random.nextInt(50);
-        char[] array = new char[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = getChar();
-        }
-
-        return array;
-    }
-
-    private static char getChar() {
-        return (char)random.nextInt(255);
-    }
-
-    private void ensureApplicationContext() {
-        // Since the test case is not running on the UI thread, the applicationContext might
-        // not be ready (i.e. it might be null). Wait for a bit to resolve this.
-        long waitedFor = 0;
-        try {
-            // Don't hold up execution for too long.
-            while (getContext().getApplicationContext() == null && waitedFor <= 2000) {
-                Thread.sleep(50);
-                waitedFor += 50;
-            }
-        }
-        catch (InterruptedException e) {
-        }
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/TestBlocker.java b/facebook/tests/src/com/facebook/TestBlocker.java
deleted file mode 100644
index 93801de3c..000000000
--- a/facebook/tests/src/com/facebook/TestBlocker.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-import android.os.HandlerThread;
-
-public class TestBlocker extends HandlerThread {
-    private Exception exception;
-    public int signals;
-    private volatile Handler handler;
-
-    private TestBlocker() {
-        super("TestBlocker");
-    }
-
-    public synchronized static TestBlocker createTestBlocker() {
-        TestBlocker blocker = new TestBlocker();
-        blocker.start();
-
-        // Wait until we have a Looper and Handler.
-        synchronized (blocker) {
-            while (blocker.handler == null) {
-                try {
-                    blocker.wait();
-                } catch (InterruptedException e) {
-                }
-            }
-        }
-
-        return blocker;
-    }
-
-    @Override
-    public void run() {
-        try {
-            super.run();
-        } catch (Exception e) {
-            setException(e);
-        }
-        synchronized (this) {
-            notifyAll();
-        }
-    }
-
-    public Handler getHandler() {
-        return handler;
-    }
-
-    public void assertSuccess() throws Exception {
-        Exception e = getException();
-        if (e != null) {
-            throw e;
-        }
-    }
-
-    public synchronized void signal() {
-        ++signals;
-        notifyAll();
-    }
-
-    public void waitForSignals(int numSignals) throws Exception {
-        // Make sure we aren't sitting on an unhandled exception before we even start, because that means our
-        // thread isn't around anymore.
-        assertSuccess();
-
-        setException(null);
-
-        synchronized (this) {
-            while (getException() == null && signals < numSignals) {
-                try {
-                    wait();
-                } catch (InterruptedException e) {
-                }
-            }
-            signals = 0;
-        }
-    }
-
-    public void waitForSignalsAndAssertSuccess(int numSignals) throws Exception {
-        waitForSignals(numSignals);
-        assertSuccess();
-    }
-
-    public synchronized Exception getException() {
-        return exception;
-    }
-
-    public synchronized void setException(Exception e) {
-        exception = e;
-        notifyAll();
-    }
-
-    @Override
-    protected void onLooperPrepared() {
-        synchronized (this) {
-            handler = new Handler(getLooper());
-            notifyAll();
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/TestSessionTests.java b/facebook/tests/src/com/facebook/TestSessionTests.java
deleted file mode 100644
index 8c72f4567..000000000
--- a/facebook/tests/src/com/facebook/TestSessionTests.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import org.json.JSONArray;
-
-// Because TestSession is the component under test here, be careful in calling methods on FacebookTestCase that
-// assume TestSession works correctly.
-public class TestSessionTests extends FacebookTestCase {
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCreateWithPrivateUser() {
-        TestSession session = TestSession.createSessionWithPrivateUser(getActivity(), null);
-        assertTrue(session != null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCreateWithSharedUser() {
-        TestSession session = TestSession.createSessionWithSharedUser(getActivity(), null);
-        assertTrue(session != null);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanOpenWithSharedUser() throws Throwable {
-        final TestBlocker blocker = getTestBlocker();
-        TestSession session = getTestSessionWithSharedUser();
-
-        Session.OpenRequest openRequest = new Session.OpenRequest(getActivity()).
-                setCallback(
-                        new Session.StatusCallback() {
-                            @Override
-                            public void call(Session session, SessionState state, Exception exception) {
-                                assertTrue(exception == null);
-                                blocker.signal();
-                            }
-                        });
-        session.openForRead(openRequest);
-
-        waitAndAssertSuccess(blocker, 1);
-
-        assertTrue(session.getState().isOpened());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testSharedUserDoesntCreateUnnecessaryUsers() throws Throwable {
-        TestSession session = getTestSessionWithSharedUser();
-        openSession(getActivity(), session);
-
-        // Note that this test is somewhat brittle in that the count of test users could change for
-        // external reasons while the test is running. For that reason it may not be appropriate for an
-        // automated test suite, and could be run only when testing changes to TestSession.
-        int startingUserCount = countTestUsers();
-
-        session = getTestSessionWithSharedUser();
-        openSession(getActivity(), session);
-
-        int endingUserCount = countTestUsers();
-
-        assertEquals(startingUserCount, endingUserCount);
-    }
-
-    // This test is currently unreliable, I believe due to timing/replication issues that cause the
-    // counts to occasionally be off. Taking out of test runs for now until a more robust test can be added.
-    @LargeTest
-    public void failing_testPrivateUserIsDeletedOnSessionClose() throws Throwable {
-        final TestBlocker blocker = getTestBlocker();
-
-        // See comment above regarding test user count.
-        int startingUserCount = countTestUsers();
-
-        TestSession session = getTestSessionWithPrivateUser(blocker);
-        openSession(getActivity(), session);
-
-        int sessionOpenUserCount = countTestUsers();
-
-        assertEquals(startingUserCount + 1, sessionOpenUserCount);
-
-        session.close();
-
-        int endingUserCount = countTestUsers();
-
-        assertEquals(startingUserCount, endingUserCount);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCannotChangeTestApplicationIdOnceSet() {
-        try {
-            TestSession.setTestApplicationId("hello");
-            TestSession.setTestApplicationId("world");
-            fail("expected exception");
-        } catch (FacebookException e) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCannotChangeTestApplicationSecretOnceSet() {
-        try {
-            TestSession.setTestApplicationSecret("hello");
-            TestSession.setTestApplicationSecret("world");
-            fail("expected exception");
-        } catch (FacebookException e) {
-        }
-    }
-
-    private int countTestUsers() {
-        TestSession session = getTestSessionWithSharedUser(null);
-
-        String appAccessToken = TestSession.getAppAccessToken();
-        assertNotNull(appAccessToken);
-        String applicationId = session.getApplicationId();
-        assertNotNull(applicationId);
-
-        String fqlQuery = String.format("SELECT id FROM test_account WHERE app_id = %s", applicationId);
-        Bundle parameters = new Bundle();
-        parameters.putString("q", fqlQuery);
-        parameters.putString("access_token", appAccessToken);
-
-        Request request = new Request(null, "fql", parameters, null);
-        Response response = request.executeAndWait();
-
-        JSONArray data = (JSONArray) response.getGraphObject().getProperty("data");
-        return data.length();
-    }
-}
diff --git a/facebook/tests/src/com/facebook/TestUtils.java b/facebook/tests/src/com/facebook/TestUtils.java
deleted file mode 100644
index 4a67e9d4a..000000000
--- a/facebook/tests/src/com/facebook/TestUtils.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import com.facebook.internal.FileLruCache;
-import junit.framework.Assert;
-
-import java.io.*;
-import java.util.Date;
-import java.util.List;
-
-public class TestUtils {
-    private static long CACHE_CLEAR_TIMEOUT = 3000;
-
-    public static <T extends Serializable> T serializeAndUnserialize(T t) {
-        try {
-            ByteArrayOutputStream os = new ByteArrayOutputStream();
-            new ObjectOutputStream(os).writeObject(t);
-            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());
-
-            @SuppressWarnings("unchecked")
-            T ret = (T) (new ObjectInputStream(is)).readObject();
-
-            return ret;
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } catch (ClassNotFoundException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    static Date nowPlusSeconds(long offset) {
-        return new Date(new Date().getTime() + (offset * 1000L));
-    }
-
-    static void assertSamePermissions(List<String> expected, AccessToken actual) {
-        if (expected == null) {
-            Assert.assertEquals(null, actual.getPermissions());
-        } else {
-            for (String p : expected) {
-                Assert.assertTrue(actual.getPermissions().contains(p));
-            }
-            for (String p : actual.getPermissions()) {
-                Assert.assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    static void assertSamePermissions(List<String> expected, List<String> actual) {
-        if (expected == null) {
-            Assert.assertEquals(null, actual);
-        } else {
-            for (String p : expected) {
-                Assert.assertTrue(actual.contains(p));
-            }
-            for (String p : actual) {
-                Assert.assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    static void assertAtLeastExpectedPermissions(List<String> expected, List<String> actual) {
-        if (expected != null) {
-            for (String p : expected) {
-                Assert.assertTrue(actual.contains(p));
-            }
-        }
-    }
-
-    static void assertEqualContents(Bundle a, Bundle b) {
-        for (String key : a.keySet()) {
-            if (!b.containsKey(key)) {
-                Assert.fail("bundle does not include key " + key);
-            }
-            Assert.assertEquals(a.get(key), b.get(key));
-        }
-        for (String key : b.keySet()) {
-            if (!a.containsKey(key)) {
-                Assert.fail("bundle does not include key " + key);
-            }
-        }
-    }
-
-    public static void clearFileLruCache(final FileLruCache cache) throws InterruptedException {
-        // since the cache clearing happens in a separate thread, we need to wait until
-        // the clear is complete before we can check for the existence of the old files
-        synchronized (cache) {
-            cache.clearCache();
-            Settings.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    synchronized (cache) {
-                        cache.notifyAll();
-                    }
-                }
-            });
-            cache.wait(CACHE_CLEAR_TIMEOUT);
-        }
-        // sleep a little more just to make sure all the files are deleted.
-        Thread.sleep(CACHE_CLEAR_TIMEOUT);
-    }
-}
diff --git a/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java b/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
deleted file mode 100644
index 4055df6bb..000000000
--- a/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.os.ConditionVariable;
-import android.os.Looper;
-import junit.framework.Assert;
-
-import java.util.ArrayList;
-import java.util.List;
-
-class WaitForBroadcastReceiver extends BroadcastReceiver {
-    static int idGenerator = 0;
-    final int id = idGenerator++;
-
-    ConditionVariable condition = new ConditionVariable(true);
-    int expectCount;
-    int actualCount;
-    List<Intent> receivedIntents = new ArrayList<Intent>();
-
-    public void incrementExpectCount() {
-        incrementExpectCount(1);
-    }
-
-    public void incrementExpectCount(int n) {
-        expectCount += n;
-        if (actualCount < expectCount) {
-            condition.close();
-        }
-    }
-
-    public void waitForExpectedCalls() {
-        if (!condition.block(SessionTestsBase.DEFAULT_TIMEOUT_MILLISECONDS)) {
-            Assert.assertTrue(false);
-        }
-    }
-
-    public List<Intent> getReceivedIntents() {
-        return receivedIntents;
-    }
-
-    public static void incrementExpectCounts(WaitForBroadcastReceiver... receivers) {
-        for (WaitForBroadcastReceiver receiver : receivers) {
-            receiver.incrementExpectCount();
-        }
-    }
-
-    public static void waitForExpectedCalls(WaitForBroadcastReceiver... receivers) {
-        for (WaitForBroadcastReceiver receiver : receivers) {
-            receiver.waitForExpectedCalls();
-        }
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        if (++actualCount == expectCount) {
-            condition.open();
-        }
-        receivedIntents.add(intent);
-        Assert.assertTrue(actualCount <= expectCount);
-        Assert.assertEquals("BroadcastReceiver should receive on main UI thread",
-                Thread.currentThread(), Looper.getMainLooper().getThread());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
deleted file mode 100644
index 47e92bc36..000000000
--- a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
+++ /dev/null
@@ -1,386 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.TestUtils;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Random;
-
-public final class FileLruCacheTests extends AndroidTestCase {
-    private static final Random random = new Random();
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCacheOutputStream() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheOutputStream", limitCacheSize(2*dataSize));
-
-        put(cache, key, data);
-        checkValue(cache, key, data);
-        TestUtils.clearFileLruCache(cache);
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCacheInputStream() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-        InputStream stream = new ByteArrayInputStream(data);
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheInputStream", limitCacheSize(2*dataSize));
-        TestUtils.clearFileLruCache(cache);
-
-        InputStream wrapped = cache.interceptAndPut(key, stream);
-        consumeAndClose(wrapped);
-        checkValue(cache, key, data);
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCacheClear() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheClear", limitCacheSize(2*dataSize));
-        TestUtils.clearFileLruCache(cache);
-
-        put(cache, key, data);
-        checkValue(cache, key, data);
-
-        TestUtils.clearFileLruCache(cache);
-        assertEquals(false, hasValue(cache, key));
-        assertEquals(0, cache.sizeInBytesForTest());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCacheClearMidBuffer() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-        String key2 = "b";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheClear", limitCacheSize(2*dataSize));
-        TestUtils.clearFileLruCache(cache);
-
-        put(cache, key, data);
-        checkValue(cache, key, data);
-        OutputStream stream = cache.openPutStream(key2);
-        Thread.sleep(1000);
-
-        TestUtils.clearFileLruCache(cache);
-
-        stream.write(data);
-        stream.close();
-
-        assertEquals(false, hasValue(cache, key));
-        assertEquals(false, hasValue(cache, key2));
-        assertEquals(0, cache.sizeInBytesForTest());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testSizeInBytes() throws Exception {
-        int count = 17;
-        int dataSize = 53;
-        int cacheSize = count * dataSize;
-        byte[] data = generateBytes(dataSize);
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testSizeInBytes", limitCacheSize(2*cacheSize));
-        TestUtils.clearFileLruCache(cache);
-
-        for (int i = 0; i < count; i++) {
-            put(cache, i, data);
-
-            // The size reported by sizeInBytes includes a version/size token as well
-            // as a JSON blob that records the name.  Verify that the cache size is larger
-            // than the data content but not more than twice as large.  This guarantees
-            // that sizeInBytes is doing at least approximately the right thing.
-            int totalDataSize = (i + 1) * dataSize;
-            assertTrue(cache.sizeInBytesForTest() > totalDataSize);
-            assertTrue(cache.sizeInBytesForTest() < 2 * totalDataSize);
-        }
-        for (int i = 0; i < count; i++) {
-            String key = Integer.valueOf(i).toString();
-            checkValue(cache, key, data);
-        }
-    }
-
-    @MediumTest @LargeTest
-    public void testCacheSizeLimit() throws Exception {
-        int count = 64;
-        int dataSize = 32;
-        int cacheSize = count * dataSize / 2;
-        byte[] data = generateBytes(dataSize);
-
-        // Here we do not set the limit to 2x to make sure we hit the limit well before we have
-        // added all the data.
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheSizeLimit", limitCacheSize(cacheSize));
-        TestUtils.clearFileLruCache(cache);
-
-        for (int i = 0; i < count; i++) {
-            put(cache, i, data);
-
-            // See comment in testSizeInBytes for why this is not an exact calculation.
-            //
-            // This changes verification such that the final cache size lands somewhere
-            // between half and full quota.
-            int totalDataSize = (i + 1) * dataSize;
-            assertTrue(cache.sizeInBytesForTest() > Math.min(totalDataSize, cacheSize/2));
-            assertTrue(cache.sizeInBytesForTest() < Math.min(2 * totalDataSize, cacheSize));
-        }
-
-        // Verify that some keys exist and others do not
-        boolean hasValueExists = false;
-        boolean hasNoValueExists = false;
-
-        for (int i = 0; i < count; i++) {
-            String key = Integer.valueOf(i).toString();
-            if (hasValue(cache, key)) {
-                hasValueExists = true;
-                checkValue(cache, key, data);
-            } else {
-                hasNoValueExists = true;
-            }
-        }
-
-        assertEquals(true, hasValueExists);
-        assertEquals(true, hasNoValueExists);
-    }
-
-    @MediumTest @LargeTest
-    public void testCacheCountLimit() throws Exception {
-        int count = 64;
-        int dataSize = 32;
-        int cacheCount = count / 2;
-        byte[] data = generateBytes(dataSize);
-
-        // Here we only limit by count, and we allow half of the entries.
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheCountLimit", limitCacheCount(cacheCount));
-        TestUtils.clearFileLruCache(cache);
-
-        for (int i = 0; i < count; i++) {
-            put(cache, i, data);
-        }
-
-        // Verify that some keys exist and others do not
-        boolean hasValueExists = false;
-        boolean hasNoValueExists = false;
-
-        for (int i = 0; i < count; i++) {
-            if (hasValue(cache, i)) {
-                hasValueExists = true;
-                checkValue(cache, i, data);
-            } else {
-                hasNoValueExists = true;
-            }
-        }
-
-        assertEquals(true, hasValueExists);
-        assertEquals(true, hasNoValueExists);
-    }
-
-    @LargeTest
-    public void testCacheLru() throws IOException, InterruptedException {
-        int keepCount = 10;
-        int otherCount = 5;
-        int dataSize = 64;
-        byte[] data = generateBytes(dataSize);
-
-        // Limit by count, and allow all the keep keys plus one other.
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheLru", limitCacheCount(keepCount + 1));
-        TestUtils.clearFileLruCache(cache);
-
-        for (int i = 0; i < keepCount; i++) {
-            put(cache, i, data);
-        }
-
-        // Make sure operations are separated by enough time that the file timestamps are all different.
-        // On the test device, it looks like lastModified has 1-second resolution, so we have to wait at
-        // least a second to guarantee that updated timestamps will come later.
-        Thread.sleep(1000);
-        for (int i = 0; i < otherCount; i++) {
-            put(cache, keepCount + i, data);
-            Thread.sleep(1000);
-
-            // By verifying all the keep keys, they should be LRU and survive while the others do not.
-            for (int keepIndex = 0; keepIndex < keepCount; keepIndex++) {
-                checkValue(cache, keepIndex, data);
-            }
-            Thread.sleep(1000);
-        }
-
-        // All but the last other key should have been pushed out
-        for (int i = 0; i < (otherCount - 1); i++) {
-            String key = Integer.valueOf(keepCount + i).toString();
-            assertEquals(false, hasValue(cache, key));
-        }
-    }
-
-    @LargeTest
-    public void testConcurrentWritesToSameKey() throws IOException, InterruptedException {
-        final int count = 5;
-        final int dataSize = 81;
-        final int threadCount = 31;
-        final int iterationCount = 10;
-        final byte[] data = generateBytes(dataSize);
-
-        final FileLruCache cache = new FileLruCache(
-                getContext(), "testConcurrentWritesToSameKey", limitCacheCount(count+1));
-        TestUtils.clearFileLruCache(cache);
-
-        Runnable run = new Runnable() {
-            @Override
-            public void run() {
-                for (int iterations = 0; iterations < iterationCount; iterations++) {
-                    for (int i = 0; i < count; i++) {
-                        put(cache, i, data);
-                    }
-                }
-            }
-        };
-
-        // Create a bunch of threads to write a set of keys repeatedly
-        Thread[] threads = new Thread[threadCount];
-        for (int i = 0; i < threads.length; i++) {
-            threads[i] = new Thread(run);
-        }
-
-        for (Thread thread : threads) {
-            thread.start();
-        }
-
-        for (Thread thread : threads) {
-            thread.join(10 * 1000, 0);
-        }
-
-        // Verify that the file state ended up consistent in the end
-        for (int i = 0; i < count; i++) {
-            checkValue(cache, i, data);
-        }
-    }
-
-    byte[] generateBytes(int n) {
-        byte[] bytes = new byte[n];
-        random.nextBytes(bytes);
-        return bytes;
-    }
-
-    FileLruCache.Limits limitCacheSize(int n) {
-        FileLruCache.Limits limits = new FileLruCache.Limits();
-        limits.setByteCount(n);
-        return limits;
-    }
-
-    FileLruCache.Limits limitCacheCount(int n) {
-        FileLruCache.Limits limits = new FileLruCache.Limits();
-        limits.setFileCount(n);
-        return limits;
-    }
-
-    void put(FileLruCache cache, int i, byte[] data) {
-        put(cache, Integer.valueOf(i).toString(), data);
-    }
-
-    void put(FileLruCache cache, String key, byte[] data) {
-        try {
-            OutputStream stream = cache.openPutStream(key);
-            assertNotNull(stream);
-
-            stream.write(data);
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    void checkValue(FileLruCache cache, int i, byte[] expected) {
-        checkValue(cache, Integer.valueOf(i).toString(), expected);
-    }
-
-    void checkValue(FileLruCache cache, String key, byte[] expected) {
-        try {
-            InputStream stream = cache.get(key);
-            assertNotNull(stream);
-
-            checkInputStream(expected, stream);
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    boolean hasValue(FileLruCache cache, int i) {
-        return hasValue(cache, Integer.valueOf(i).toString());
-    }
-
-    boolean hasValue(FileLruCache cache, String key) {
-        InputStream stream = null;
-
-        try {
-            stream = cache.get(key);
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-
-        return stream != null;
-    }
-
-    void checkInputStream(byte[] expected, InputStream actual) {
-        try {
-            for (int i = 0; i < expected.length; i++) {
-                int b = actual.read();
-                assertEquals(((int)expected[i]) & 0xff, b);
-            }
-
-            int eof = actual.read();
-            assertEquals(-1, eof);
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    void consumeAndClose(InputStream stream) {
-        try {
-            byte[] buffer = new byte[1024];
-            while (stream.read(buffer) > -1) {
-                // these bytes intentionally ignored
-            }
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java b/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
deleted file mode 100644
index 6cd705cf2..000000000
--- a/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import com.facebook.TestUtils;
-import com.facebook.internal.Utility;
-import com.facebook.internal.ImageResponseCache;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.URI;
-import java.nio.ByteBuffer;
-import java.util.Arrays;
-
-public final class ImageResponseCacheTests extends AndroidTestCase {
-
-    @MediumTest @LargeTest
-    public void testImageCaching() throws Exception {
-        // In unit test, since we need verify first access the image is not in cache
-        // we need clear the cache first
-        TestUtils.clearFileLruCache(ImageResponseCache.getCache(safeGetContext()));
-        String imgUrl = "http://profile.ak.fbcdn.net/hprofile-ak-frc1/369438_100003049100322_615834658_n.jpg";
-        
-        Bitmap bmp1 = readImage(imgUrl, false);
-        Bitmap bmp2 = readImage(imgUrl, true);
-        compareImages(bmp1, bmp2);
-    }
-    
-    @MediumTest @LargeTest
-    public void testImageNotCaching() throws IOException {
-        
-        String imgUrl = "http://graph.facebook.com/ryanseacrest/picture?type=large";
-        
-        Bitmap bmp1 = readImage(imgUrl, false);
-        Bitmap bmp2 = readImage(imgUrl, false);
-        compareImages(bmp1, bmp2);
-    }
-
-    private Bitmap readImage(String uri, boolean expectedFromCache) {
-        Bitmap bmp = null;
-        InputStream istream = null;
-        try
-        {
-            URI url = new URI(uri);
-            // Check if the cache contains value for this url
-            boolean isInCache = (ImageResponseCache.getCache(safeGetContext()).get(url.toString()) != null);
-            assertTrue(isInCache == expectedFromCache);
-            // Read the image
-            istream = ImageResponseCache.getCachedImageStream(url, safeGetContext());
-            if (istream == null) {
-                HttpURLConnection connection = (HttpURLConnection)url.toURL().openConnection();
-                istream = ImageResponseCache.interceptAndCacheImageStream(safeGetContext(), connection);
-            }
-            assertTrue(istream != null);
-            bmp = BitmapFactory.decodeStream(istream);
-            assertTrue(bmp != null);
-        } catch (Exception e) {
-             assertNull(e);
-        } finally {
-            Utility.closeQuietly(istream);
-        }
-        return bmp;
-    }
-    
-    private static void compareImages(Bitmap bmp1, Bitmap bmp2) {
-        assertTrue(bmp1.getHeight() == bmp2.getHeight());
-        assertTrue(bmp1.getWidth() == bmp1.getWidth());
-        ByteBuffer buffer1 = ByteBuffer.allocate(bmp1.getHeight() * bmp1.getRowBytes());
-        bmp1.copyPixelsToBuffer(buffer1);
-
-        ByteBuffer buffer2 = ByteBuffer.allocate(bmp2.getHeight() * bmp2.getRowBytes());
-        bmp2.copyPixelsToBuffer(buffer2);
-
-        assertTrue(Arrays.equals(buffer1.array(), buffer2.array()));
-    }
-
-    private Context safeGetContext() {
-        for (;;) {
-            if ((getContext() != null) && (getContext().getApplicationContext() != null)) {
-                return getContext();
-            }
-            try {
-                Thread.sleep(25);
-            } catch (InterruptedException e) {
-            }
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/SessionTrackerTests.java b/facebook/tests/src/com/facebook/internal/SessionTrackerTests.java
deleted file mode 100644
index 1646009f3..000000000
--- a/facebook/tests/src/com/facebook/internal/SessionTrackerTests.java
+++ /dev/null
@@ -1,183 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.*;
-import com.facebook.internal.SessionTracker;
-
-import java.util.Collections;
-
-public class SessionTrackerTests extends SessionTestsBase {
-
-    private static final String TOKEN_STR = "A token of thanks";
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking the active session
-    public void testDelegateWithActiveSession() throws Exception {
-        Session.setActiveSession(null);
-        final SessionStatusCallbackRecorder statusRecorder =
-                new SessionStatusCallbackRecorder();
-        final MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        final ScriptedSession session =
-                createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        final SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder);
-        Session.setActiveSession(session);
-
-        session.openForRead(new Session.OpenRequest(getActivity()));
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking a passed in session from the constructor
-    public void testDelegateWithSessionInConstructor() throws Exception {
-        final SessionStatusCallbackRecorder statusRecorder =
-                new SessionStatusCallbackRecorder();
-        final MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        final ScriptedSession session =
-                createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder, session);
-
-        session.openForRead(new Session.OpenRequest(getActivity()));
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking the active session and then a new session
-    public void testDelegateWithActiveSessionThenNewSession() throws Exception {
-        Session.setActiveSession(null);
-        final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        final MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        final ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder);
-        Session.setActiveSession(session);
-
-        session.openForRead(new Session.OpenRequest(getActivity()));
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        final ScriptedSession newSession = createScriptedSessionOnBlockerThread(cache);
-        newSession.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        tracker.setSession(newSession);
-        assertNull("Session should not be open", tracker.getOpenSession());
-        newSession.openForRead(new Session.OpenRequest(getActivity()));
-
-        statusRecorder.waitForCall(newSession, SessionState.OPENING, null);
-        statusRecorder.waitForCall(newSession, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(newSession, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking a new session and then an active session
-    public void testDelegateWithSessionThenActiveSession() throws Exception {
-        Session.setActiveSession(null);
-        final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        final MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        final ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        final SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder, session);
-
-        session.openForRead(new Session.OpenRequest(getActivity()));
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        final ScriptedSession newSession = createScriptedSessionOnBlockerThread(cache);
-        newSession.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        // need to run on the blocker thread so that when we register the 
-        // BroadcastReceivers, the handler gets run on the right thread
-        runOnBlockerThread(new Runnable() {
-            public void run() {
-                tracker.setSession(null);
-                Session.setActiveSession(newSession);
-            }
-        }, true);
-
-        assertNull("Session should not be open", tracker.getOpenSession());
-        newSession.openForRead(new Session.OpenRequest(getActivity()));
-
-        statusRecorder.waitForCall(newSession, SessionState.OPENING, null);
-        statusRecorder.waitForCall(newSession, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(newSession, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/ValidateTests.java b/facebook/tests/src/com/facebook/internal/ValidateTests.java
deleted file mode 100644
index 54d164b6e..000000000
--- a/facebook/tests/src/com/facebook/internal/ValidateTests.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.internal.Validate;
-
-import java.util.Arrays;
-
-public class ValidateTests extends AndroidTestCase {
-    
-    @SmallTest
-    public void testNotNullOnNonNull() {
-        Validate.notNull("A string", "name");
-    }
-
-    @SmallTest
-    public void testNotNullOnNull() {
-        try {
-            Validate.notNull(null, "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testNotEmptyOnNonEmpty() {
-        Validate.notEmpty(Arrays.asList(new String[] { "hi" }), "name");
-    }
-
-    @SmallTest
-    public void testNotEmptylOnEmpty() {
-        try {
-            Validate.notEmpty(Arrays.asList(new String[] {}), "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testNotNullOrEmptyOnNonEmpty() {
-        Validate.notNullOrEmpty("hi", "name");
-    }
-
-    @SmallTest
-    public void testNotNullOrEmptyOnEmpty() {
-        try {
-            Validate.notNullOrEmpty("", "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testNotNullOrEmptyOnNull() {
-        try {
-            Validate.notNullOrEmpty(null, "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testOneOfOnValid() {
-        Validate.oneOf("hi", "name", "hi", "there");
-    }
-
-    @SmallTest
-    public void testOneOfOnInvalid() {
-        try {
-            Validate.oneOf("hit", "name", "hi", "there");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testOneOfOnValidNull() {
-        Validate.oneOf(null, "name", "hi", "there", null);
-    }
-
-    @SmallTest
-    public void testOneOfOnInvalidNull() {
-        try {
-            Validate.oneOf(null, "name", "hi", "there");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/WorkQueueTests.java b/facebook/tests/src/com/facebook/internal/WorkQueueTests.java
deleted file mode 100644
index 793911245..000000000
--- a/facebook/tests/src/com/facebook/internal/WorkQueueTests.java
+++ /dev/null
@@ -1,345 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.FacebookTestCase;
-import com.facebook.internal.WorkQueue;
-
-import java.util.ArrayList;
-import java.util.concurrent.Executor;
-import java.security.SecureRandom;
-
-public class WorkQueueTests extends FacebookTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyValidate() {
-        WorkQueue manager = new WorkQueue();
-        manager.validate();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRunSomething() {
-        CountingRunnable run = new CountingRunnable();
-        assertEquals(0, run.getRunCount());
-
-        ScriptableExecutor executor = new ScriptableExecutor();
-        assertEquals(0, executor.getPendingCount());
-
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        addActiveWorkItem(manager, run);
-        assertEquals(1, executor.getPendingCount());
-        assertEquals(0, run.getRunCount());
-
-        executeNext(manager, executor);
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(1, run.getRunCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRunSequence() {
-        final int workTotal = 100;
-
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        for (int i = 0; i < workTotal; i++) {
-            addActiveWorkItem(manager, run);
-            assertEquals(1, executor.getPendingCount());
-        }
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(1, executor.getPendingCount());
-            assertEquals(i, run.getRunCount());
-            executeNext(manager, executor);
-        }
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(workTotal, run.getRunCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRunParallel() {
-        final int workTotal = 100;
-
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(workTotal, executor);
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(i, executor.getPendingCount());
-            addActiveWorkItem(manager, run);
-        }
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(workTotal - i, executor.getPendingCount());
-            assertEquals(i, run.getRunCount());
-            executeNext(manager, executor);
-        }
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(workTotal, run.getRunCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSimpleCancel() {
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        addActiveWorkItem(manager, run);
-        WorkQueue.WorkItem work1 = addActiveWorkItem(manager, run);
-        cancelWork(manager, work1);
-
-        assertEquals(1, executor.getPendingCount());
-        executeNext(manager, executor);
-        assertEquals(0, executor.getPendingCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMoveToFront() {
-        final int firstCount = 8;
-        final int highCount = 17;
-
-        ArrayList<WorkQueue.WorkItem> highWorkItems = new ArrayList<WorkQueue.WorkItem>();
-        CountingRunnable highRun = new CountingRunnable();
-        CountingRunnable firstRun = new CountingRunnable();
-        CountingRunnable lowRun = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(firstCount, executor);
-
-        for (int i = 0; i < firstCount; i++) {
-            addActiveWorkItem(manager, firstRun);
-        }
-
-        int lowCount = 0;
-        for (int h = 0; h < highCount; h++) {
-            highWorkItems.add(addActiveWorkItem(manager, highRun));
-            for (int l = 0; l < h; l++) {
-                addActiveWorkItem(manager, lowRun);
-                lowCount++;
-            }
-        }
-
-        assertEquals(firstCount, executor.getPendingCount());
-        for (WorkQueue.WorkItem highItem : highWorkItems) {
-            prioritizeWork(manager, highItem);
-        }
-
-        for (int i = 0; i < firstCount; i++) {
-            assertEquals(i, firstRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        for (int i = 0; i < highCount; i++) {
-            assertEquals(i, highRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        for (int i = 0; i < lowCount; i++) {
-            assertEquals(i, lowRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        assertEquals(firstCount, firstRun.getRunCount());
-        assertEquals(highCount, highRun.getRunCount());
-        assertEquals(lowCount, lowRun.getRunCount());
-    }
-
-    // Test cancelling running work item, completed work item
-
-    @LargeTest
-    public void testThreadStress() {
-        WorkQueue manager = new WorkQueue();
-        ArrayList<StressRunnable> runnables = new ArrayList<StressRunnable>();
-        final int threadCount = 20;
-
-        for (int i = 0; i < threadCount; i++) {
-            runnables.add(new StressRunnable(manager, 20));
-        }
-
-        for (int i = 0; i < threadCount; i++) {
-            manager.addActiveWorkItem(runnables.get(i));
-        }
-
-        for (int i = 0; i < threadCount; i++) {
-            runnables.get(i).waitForDone();
-        }
-    }
-
-    private WorkQueue.WorkItem addActiveWorkItem(WorkQueue manager, Runnable runnable) {
-        manager.validate();
-        WorkQueue.WorkItem workItem = manager.addActiveWorkItem(runnable);
-        manager.validate();
-        return workItem;
-    }
-
-    private void executeNext(WorkQueue manager, ScriptableExecutor executor) {
-        manager.validate();
-        executor.runNext();
-        manager.validate();
-    }
-
-    private void cancelWork(WorkQueue manager, WorkQueue.WorkItem workItem) {
-        manager.validate();
-        workItem.cancel();
-        manager.validate();
-    }
-
-    private void prioritizeWork(WorkQueue manager, WorkQueue.WorkItem workItem) {
-        manager.validate();
-        workItem.moveToFront();
-        manager.validate();
-    }
-
-    static class StressRunnable implements Runnable {
-        static ArrayList<WorkQueue.WorkItem> tracked = new ArrayList<WorkQueue.WorkItem>();
-
-        final WorkQueue manager;
-        final SecureRandom random = new SecureRandom();
-        final int iterationCount;
-        int iterationIndex = 0;
-        boolean isDone = false;
-
-        StressRunnable(WorkQueue manager, int iterationCount) {
-            this.manager = manager;
-            this.iterationCount = iterationCount;
-        }
-
-        @Override
-        public void run() {
-            // Each iteration runs a random action against the WorkQueue.
-            if (iterationIndex++ < iterationCount) {
-                final int sleepWeight = 80;
-                final int trackThisWeight = 10;
-                final int prioritizeTrackedWeight = 6;
-                final int validateWeight = 2;
-                int weight = 0;
-                final int n = random.nextInt(sleepWeight + trackThisWeight + prioritizeTrackedWeight + validateWeight);
-                WorkQueue.WorkItem workItem = manager.addActiveWorkItem(this);
-
-                if (n < (weight += sleepWeight)) {
-                    // Sleep
-                    try {
-                        Thread.sleep(n/4);
-                    } catch (InterruptedException e) {
-                    }
-                } else if (n < (weight += trackThisWeight)) {
-                    // Track this work item to activate later
-                    synchronized (tracked) {
-                        tracked.add(workItem);
-                    }
-                } else if (n < (weight += prioritizeTrackedWeight)) {
-                    // Background all pending items, prioritize tracked items, and clear tracked list
-                    ArrayList<WorkQueue.WorkItem> items = new ArrayList<WorkQueue.WorkItem>();
-
-                    synchronized (tracked) {
-                        items.addAll(tracked);
-                        tracked.clear();
-                    }
-
-                    for (WorkQueue.WorkItem item : items) {
-                        item.moveToFront();
-                    }
-                } else {
-                    // Validate
-                    manager.validate();
-                }
-            } else {
-                // Also have all threads validate once they are done.
-                manager.validate();
-                synchronized (this) {
-                    isDone = true;
-                    this.notifyAll();
-                }
-            }
-        }
-
-        void waitForDone() {
-            synchronized (this) {
-                while (!isDone) {
-                    try {
-                        this.wait();
-                    } catch (InterruptedException e) {
-                    }
-                }
-            }
-        }
-    }
-
-    static class ScriptableExecutor implements Executor {
-        private final ArrayList<Runnable> runnables = new ArrayList<Runnable>();
-
-        int getPendingCount() {
-            return runnables.size();
-        }
-
-        void runNext() {
-            assertTrue(runnables.size() > 0);
-            runnables.get(0).run();
-            runnables.remove(0);
-        }
-
-        void runLast() {
-            assertTrue(runnables.size() > 0);
-            int index = runnables.size() - 1;
-            runnables.get(index).run();
-            runnables.remove(index);
-        }
-
-        @Override
-        public void execute(Runnable runnable) {
-            synchronized (this) {
-                runnables.add(runnable);
-            }
-        }
-    }
-
-    static class CountingRunnable implements Runnable {
-        private int runCount = 0;
-
-        synchronized int getRunCount() {
-            return runCount;
-        }
-
-        @Override
-        public void run() {
-            synchronized (this) {
-                runCount++;
-            }
-
-            try {
-                Thread.sleep(1);
-            } catch (InterruptedException e) {
-            }
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
deleted file mode 100644
index 801b1d5cb..000000000
--- a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
+++ /dev/null
@@ -1,1368 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.model;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.FacebookGraphObjectException;
-import junit.framework.Assert;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-import java.util.Map.Entry;
-
-public final class GraphObjectFactoryTests extends AndroidTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateEmptyGraphObject() {
-        GraphObject graphObject = GraphObject.Factory.create();
-        assertTrue(graphObject != null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanTreatAsMap() {
-        GraphObject graphObject = GraphObject.Factory.create();
-
-        graphObject.setProperty("hello", "world");
-        assertEquals("world", (String) graphObject.asMap().get("hello"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanTreatAsGraphPlace() {
-        GraphPlace graphPlace = GraphObject.Factory.create(GraphPlace.class);
-
-        graphPlace.setName("hello");
-        assertEquals("hello", graphPlace.getName());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanTreatAsGraphUser() {
-        GraphUser graphUser = GraphObject.Factory.create(GraphUser.class);
-
-        graphUser.setFirstName("Michael");
-        assertEquals("Michael", graphUser.getFirstName());
-        assertEquals("Michael", graphUser.getProperty("first_name"));
-        assertEquals("Michael", graphUser.asMap().get("first_name"));
-
-        graphUser.setProperty("last_name", "Scott");
-        assertEquals("Scott", graphUser.getProperty("last_name"));
-        assertEquals("Scott", graphUser.getLastName());
-        assertEquals("Scott", graphUser.asMap().get("last_name"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCastBetweenGraphObjectTypes() {
-        GraphObject graphObject = GraphObject.Factory.create();
-
-        graphObject.setProperty("first_name", "Mickey");
-
-        GraphUser graphUser = graphObject.cast(GraphUser.class);
-        assertTrue(graphUser != null);
-        // Should see the name we set earlier as a GraphObject.
-        assertEquals("Mickey", graphUser.getFirstName());
-
-        // Changes to GraphUser should be reflected in GraphObject version.
-        graphUser.setLastName("Mouse");
-        assertEquals("Mouse", graphObject.getProperty("last_name"));
-    }
-
-    interface Base extends GraphObject {
-    }
-
-    interface Derived extends Base {
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingToSameTypeGivesSameObject() {
-        Base base = GraphObject.Factory.create(Base.class);
-
-        Base cast = base.cast(Base.class);
-
-        assertTrue(base == cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingToBaseTypeGivesSameObject() {
-        Derived derived = GraphObject.Factory.create(Derived.class);
-
-        Base cast = derived.cast(Base.class);
-        assertTrue(derived == cast);
-
-        cast = cast.cast(Derived.class);
-        assertTrue(derived == cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanSetComplexTypes() {
-        GraphLocation graphLocation = GraphObject.Factory.create(GraphLocation.class);
-        graphLocation.setCity("Seattle");
-
-        GraphPlace graphPlace = GraphObject.Factory.create(GraphPlace.class);
-        graphPlace.setLocation(graphLocation);
-
-        assertEquals(graphLocation, graphPlace.getLocation());
-        assertEquals("Seattle", graphPlace.getLocation().getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanConvertFromJSON() throws JSONException {
-        JSONObject jsonLocation = new JSONObject();
-        jsonLocation.put("city", "Paris");
-        jsonLocation.put("country", "France");
-
-        JSONObject jsonPlace = new JSONObject();
-        jsonPlace.put("location", jsonLocation);
-        jsonPlace.put("name", "Eiffel Tower");
-
-        GraphPlace graphPlace = GraphObject.Factory.create(jsonPlace, GraphPlace.class);
-        GraphLocation graphLocation = graphPlace.getLocation();
-        assertEquals("Paris", graphLocation.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanConvertFromGraphObject() throws JSONException {
-        GraphObject graphObject = GraphObject.Factory.create();
-        graphObject.setProperty("city", "Paris");
-        graphObject.setProperty("country", "France");
-
-        JSONObject jsonPlace = new JSONObject();
-        jsonPlace.put("location", graphObject);
-        jsonPlace.put("name", "Eiffel Tower");
-
-        GraphPlace graphPlace = GraphObject.Factory.create(jsonPlace, GraphPlace.class);
-        GraphLocation graphLocation = graphPlace.getLocation();
-        assertEquals("Paris", graphLocation.getCity());
-    }
-
-    private abstract class GraphObjectClass implements GraphObject {
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanConvertNumbers() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("double_as_string", 3.14159);
-        jsonObject.put("int_as_string", 42);
-
-        GraphMetric metric = GraphObject.Factory.create(jsonObject, GraphMetric.class);
-        assertEquals("42", metric.getIntAsString());
-        assertNotNull(metric.getDoubleAsString());
-        assertTrue(metric.getDoubleAsString().startsWith("3.14159"));
-    }
-
-    private interface GraphMetric extends GraphObject {
-        String getIntAsString();
-        String getDoubleAsString();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapNonInterface() {
-        try {
-            GraphObject.Factory.create(GraphObjectClass.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadNoParameterMethodNameGraphObject extends GraphObject {
-        Object floppityFlee();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadZeroParameterMethodName() {
-        try {
-            GraphObject.Factory.create(BadNoParameterMethodNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSingleParameterMethodNameGraphObject extends GraphObject {
-        void floppityFlee(Object obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSingleParameterMethodName() {
-        try {
-            GraphObject.Factory.create(BadSingleParameterMethodNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadGetterNameGraphObject extends GraphObject {
-        void get();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadGetterName() {
-        try {
-            GraphObject.Factory.create(BadGetterNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadGetterParamsGraphObject extends GraphObject {
-        Object getFoo(Object obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadGetterParams() {
-        try {
-            GraphObject.Factory.create(BadGetterParamsGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadGetterReturnTypeGraphObject extends GraphObject {
-        void getFoo();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadGetterReturnType() {
-        try {
-            GraphObject.Factory.create(BadGetterReturnTypeGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSetterNameGraphObject extends GraphObject {
-        void set();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSetterName() {
-        try {
-            GraphObject.Factory.create(BadSetterNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSetterParamsGraphObject extends GraphObject {
-        void setFoo();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSetterParams() {
-        try {
-            GraphObject.Factory.create(BadSetterParamsGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSetterReturnTypeGraphObject extends GraphObject {
-        Object setFoo(Object obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSetterReturnType() {
-        try {
-            GraphObject.Factory.create(BadSetterReturnTypeGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadBaseInterfaceGraphObject extends BadSetterReturnTypeGraphObject {
-        void setBar(Object obj);
-
-        Object getBar();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadBaseInterface() {
-        try {
-            GraphObject.Factory.create(BadBaseInterfaceGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface GoodPropertyOverrideInterfaceGraphObject extends GraphObject {
-        void setDefaultName(String s);
-
-        // No annotation to ensure that the right property is being set.
-        String getAnotherDefaultName();
-
-        @PropertyName("another_default_name")
-        void putSomething(String s);
-
-        @PropertyName("default_name")
-        String retrieveSomething();
-
-        @PropertyName("MixedCase")
-        void setMixedCase(String s);
-
-        @PropertyName("MixedCase")
-        String getMixedCase();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanOverrideGraphPropertyNames() {
-        GoodPropertyOverrideInterfaceGraphObject graphObject =
-                GraphObject.Factory.create(GoodPropertyOverrideInterfaceGraphObject.class);
-
-        String testValue = "flu-blah";
-        graphObject.setDefaultName(testValue);
-        Assert.assertEquals(testValue, graphObject.retrieveSomething());
-
-        testValue = testValue + "1";
-        graphObject.putSomething(testValue);
-        Assert.assertEquals(testValue, graphObject.getAnotherDefaultName());
-
-        testValue = testValue + "2";
-        graphObject.setMixedCase(testValue);
-        Assert.assertEquals(testValue, graphObject.getMixedCase());
-    }
-
-    private interface BadPropertyOverrideInterfaceGraphObject extends GraphObject {
-        @PropertyName("")
-        void setMissingProperty(Object value);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadPropertyNameOverrides() {
-        try {
-            GraphObject.Factory.create(BadPropertyOverrideInterfaceGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testObjectEquals() {
-        GraphObject graphObject = GraphObject.Factory.create();
-        graphObject.setProperty("aKey", "aValue");
-
-        assertTrue(graphObject.equals(graphObject));
-
-        GraphPlace graphPlace = graphObject.cast(GraphPlace.class);
-        assertTrue(graphObject.equals(graphPlace));
-        assertTrue(graphPlace.equals(graphObject));
-
-        GraphObject aDifferentGraphObject = GraphObject.Factory.create();
-        aDifferentGraphObject.setProperty("aKey", "aDifferentValue");
-        assertFalse(graphObject.equals(aDifferentGraphObject));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetProperty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        assertEquals("world", graphObject.getProperty("hello"));
-        assertTrue(graphObject.getProperty("fred") == null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetProperty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("don't imagine", "purple elephants");
-
-        assertEquals("world", jsonObject.getString("hello"));
-        assertEquals("purple elephants", jsonObject.getString("don't imagine"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetPropertyWithGraphObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        GraphObject nestedObject = GraphObject.Factory.create();
-        graphObject.setProperty("foo", nestedObject);
-
-        JSONObject nestedJsonObject = jsonObject.getJSONObject("foo");
-        assertNotNull(nestedJsonObject);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetPropertyWithGraphObjectList() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        GraphObjectList nestedList = GraphObject.Factory.createList(GraphObject.class);
-        graphObject.setProperty("foo", nestedList);
-
-        JSONArray nestedJsonArray = jsonObject.getJSONArray("foo");
-        assertNotNull(nestedJsonArray);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetPropertyWithList() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        List<GraphObject> nestedList = new ArrayList<GraphObject>();
-        graphObject.setProperty("foo", nestedList);
-
-        JSONArray nestedJsonArray = jsonObject.getJSONArray("foo");
-        assertNotNull(nestedJsonArray);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRemoveProperty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("whirled", "peas");
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("don't imagine", "purple elephants");
-
-        assertEquals("world", jsonObject.getString("hello"));
-        assertEquals("purple elephants", jsonObject.getString("don't imagine"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapClear() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertEquals(1, jsonObject.length());
-
-        graphObject.asMap().clear();
-
-        assertEquals(0, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapContainsKey() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertTrue(graphObject.asMap().containsKey("hello"));
-        assertFalse(graphObject.asMap().containsKey("hocus"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapContainsValue() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertTrue(graphObject.asMap().containsValue("world"));
-        assertFalse(graphObject.asMap().containsValue("pocus"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapEntrySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        Set<Entry<String, Object>> entrySet = graphObject.asMap().entrySet();
-        assertEquals(2, entrySet.size());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapGet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        assertEquals("world", graphObject.asMap().get("hello"));
-        assertTrue(graphObject.getProperty("fred") == null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapGetReturnsNullForMissingProperty() throws JSONException {
-        GraphUser graphUser = GraphObject.Factory.create(GraphUser.class);
-        assertNull(graphUser.getBirthday());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapIsEmpty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        assertTrue(graphObject.asMap().isEmpty());
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-        assertFalse(graphObject.asMap().isEmpty());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapKeySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        Set<String> keySet = graphObject.asMap().keySet();
-        assertEquals(2, keySet.size());
-        assertTrue(keySet.contains("hello"));
-        assertTrue(keySet.contains("hocus"));
-        assertFalse(keySet.contains("world"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPut() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("hocus", "pocus");
-
-        assertEquals("pocus", jsonObject.get("hocus"));
-        assertEquals(2, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPutOfWrapperPutsJSONObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("hocus", "pocus");
-
-        GraphObject parentObject = GraphObject.Factory.create();
-        parentObject.setProperty("key", graphObject);
-
-        JSONObject jsonParent = parentObject.getInnerJSONObject();
-        Object obj = jsonParent.opt("key");
-
-        assertNotNull(obj);
-        assertEquals(jsonObject, obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPutOfWrapperPutsJSONArray() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-
-        GraphObjectList<String> graphObjectList = GraphObject.Factory
-                .createList(jsonArray, String.class);
-        graphObjectList.add("hello");
-        graphObjectList.add("world");
-
-        GraphObject parentObject = GraphObject.Factory.create();
-        parentObject.setProperty("key", graphObjectList);
-
-        JSONObject jsonParent = parentObject.getInnerJSONObject();
-        Object obj = jsonParent.opt("key");
-
-        assertNotNull(obj);
-        assertEquals(jsonArray, obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPutAll() throws JSONException {
-        HashMap<String, Object> map = new HashMap<String, Object>();
-        map.put("hello", "world");
-        map.put("hocus", "pocus");
-
-        JSONObject jsonObject = new JSONObject();
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        graphObject.asMap().putAll(map);
-        assertEquals("pocus", jsonObject.get("hocus"));
-        assertEquals(2, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapRemove() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.removeProperty("hello");
-
-        assertEquals(1, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapSize() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertEquals(2, graphObject.asMap().size());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapValues() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        Collection<Object> values = graphObject.asMap().values();
-
-        assertEquals(2, values.size());
-        assertTrue(values.contains("world"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetInnerJSONObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertEquals(jsonObject, graphObject.getInnerJSONObject());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSettingGraphObjectProxyStoresJSONObject() throws JSONException {
-        GraphPlace graphPlace = GraphObject.Factory.create(GraphPlace.class);
-        GraphLocation graphLocation = GraphObject.Factory.create(GraphLocation.class);
-
-        graphPlace.setLocation(graphLocation);
-
-        assertEquals(graphLocation.getInnerJSONObject(), graphPlace.getInnerJSONObject().get("location"));
-
-    }
-
-    private interface DateGraphObject extends GraphObject {
-        Date getDate1();
-
-        Date getDate2();
-
-        Date getDate3();
-
-        Date getDate4();
-        void setDate4(Date date);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetStringsAsDates() {
-        DateGraphObject dates = GraphObject.Factory.create(DateGraphObject.class);
-        dates.setProperty("date1", "2012-07-04");
-        dates.setProperty("date2", "2012-07-04T19:30:50");
-        dates.setProperty("date3", "2012-07-04T19:20:40-0400");
-
-        // Dates without a time zone should be assumed to be in the current timezone.
-        Calendar cal = new GregorianCalendar();
-        cal.set(Calendar.MILLISECOND, 0);
-
-        cal.set(2012, 6, 4, 0, 0, 0);
-        Date expectedDate1 = cal.getTime();
-        Date date1 = dates.getDate1();
-        assertEquals(expectedDate1, date1);
-
-        cal.set(2012, 6, 4, 19, 30, 50);
-        Date expectedDate2 = cal.getTime();
-        Date date2 = dates.getDate2();
-        assertEquals(expectedDate2, date2);
-
-        // Dates with an explicit time zone should take that timezone into account.
-        cal = new GregorianCalendar(TimeZone.getTimeZone("GMT"));
-        cal.set(Calendar.MILLISECOND, 0);
-        cal.set(2012, 6, 4, 23, 20, 40);
-
-        Date expectedDate3 = cal.getTime();
-        Date date3 = dates.getDate3();
-        assertEquals(expectedDate3, date3);
-
-        cal.set(2012, 9, 28, 9, 53, 0);
-        Date expectedDate4 = cal.getTime();
-        dates.setDate4(expectedDate4);
-        Date date4 = dates.getDate4();
-        assertEquals(expectedDate4, date4);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionAdd() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        collection.add(5);
-
-        assertTrue(array.length() == 1);
-        assertTrue(array.optInt(0) == 5);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionAddAll() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collectionToAdd = Arrays.asList(5, -1);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        collection.addAll(collectionToAdd);
-
-        assertTrue(array.length() == 2);
-        assertTrue(array.optInt(0) == 5);
-        assertTrue(array.optInt(1) == -1);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionContains() throws JSONException {
-        JSONArray array = new JSONArray();
-        array.put(5);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertTrue(collection.contains(5));
-        assertFalse(collection.contains(6));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionContainsAll() throws JSONException {
-        JSONArray array = new JSONArray();
-        array.put(5);
-        array.put(-1);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertTrue(collection.containsAll(Arrays.asList(5)));
-        assertTrue(collection.containsAll(Arrays.asList(5, -1)));
-        assertFalse(collection.containsAll(Arrays.asList(5, -1, 2)));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionIsEmpty() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertTrue(collection.isEmpty());
-
-        array.put(5);
-        assertFalse(collection.isEmpty());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionIterator() throws JSONException {
-        JSONArray array = new JSONArray();
-        array.put(5);
-        array.put(-1);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        Iterator<Integer> iter = collection.iterator();
-        assertTrue(iter.hasNext());
-        assertTrue(iter.next() == 5);
-        assertTrue(iter.hasNext());
-        assertTrue(iter.next() == -1);
-        assertFalse(iter.hasNext());
-
-        for (Integer i : collection) {
-            assertNotSame(0, i);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionIteratorOfGraphObject() throws JSONException {
-        Collection<GraphLocation> collection = GraphObject.Factory.createList(GraphLocation.class);
-
-        GraphLocation seattle = GraphObject.Factory.create(GraphLocation.class);
-        seattle.setCity("Seattle");
-        collection.add(seattle);
-        GraphLocation paris = GraphObject.Factory.create(GraphLocation.class);
-        paris.setCity("Paris");
-        collection.add(paris);
-
-        Iterator<GraphLocation> iter = collection.iterator();
-        assertTrue(iter.hasNext());
-        assertEquals(seattle, iter.next());
-        assertTrue(iter.hasNext());
-        assertEquals(paris, iter.next());
-        assertFalse(iter.hasNext());
-
-        for (GraphLocation location : collection) {
-            assertTrue(location != null);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionSize() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertEquals(0, collection.size());
-
-        array.put(5);
-        assertEquals(1, collection.size());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionClearThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.clear();
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionRemoveThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.remove(5);
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionRemoveAllThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.removeAll(Arrays.asList());
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionRetainAllThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.retainAll(Arrays.asList());
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    private interface Locations extends GraphObject {
-        Collection<GraphLocation> getLocations();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testObjectWrapsJSONCollection() throws JSONException {
-        JSONObject jsonLocation = new JSONObject();
-        jsonLocation.put("city", "Seattle");
-
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put(jsonLocation);
-
-        JSONObject jsonLocations = new JSONObject();
-        jsonLocations.put("locations", jsonArray);
-
-        Locations locations = GraphObject.Factory.create(jsonLocations, Locations.class);
-        Collection<GraphLocation> locationsGraphObjectCollection = locations.getLocations();
-        assertTrue(locationsGraphObjectCollection != null);
-
-        GraphLocation graphLocation = locationsGraphObjectCollection.iterator().next();
-        assertTrue(graphLocation != null);
-        assertEquals("Seattle", graphLocation.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testObjectWrapsIterable() throws JSONException {
-        GraphUser user = GraphObject.Factory.create(GraphUser.class);
-        user.setFirstName("Foo");
-        user.setLastName("Bar");
-
-        List<GraphUser> users = new ArrayList<GraphUser>();
-        users.add(user);
-
-        OpenGraphAction action = GraphObject.Factory.create(OpenGraphAction.class);
-        action.setTags(users);
-
-        String json = action.getInnerJSONObject().toString();
-
-        assertTrue("JSON string should contain last_name", json.contains("last_name"));
-
-        Object tags = action.getInnerJSONObject().get("tags");
-        assertNotNull("tags should not be null", tags);
-        assertTrue("tags should be JSONArray", tags instanceof JSONArray);
-
-        List<GraphObject> retrievedUsers = action.getTags();
-        assertEquals("Size should be 1", 1, retrievedUsers.size());
-        GraphUser retrievedUser = retrievedUsers.get(0).cast(GraphUser.class);
-        assertEquals("First name should be Foo", "Foo", retrievedUser.getFirstName());
-        assertEquals("Last name should be Bar", "Bar", retrievedUser.getLastName());
-
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionWrapsJSONObject() throws JSONException {
-        JSONObject jsonLocation = new JSONObject();
-        jsonLocation.put("city", "Seattle");
-
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put(jsonLocation);
-        Collection<GraphLocation> locationsGraphObjectCollection = GraphObject.Factory
-                .createList(jsonArray,
-                        GraphLocation.class);
-        assertTrue(locationsGraphObjectCollection != null);
-
-        GraphLocation graphLocation = locationsGraphObjectCollection.iterator().next();
-        assertTrue(graphLocation != null);
-        assertEquals("Seattle", graphLocation.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCannotCastCollectionOfNonGraphObjects() throws JSONException {
-        try {
-            GraphObjectList<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.castToListOf(GraphLocation.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCastCollectionOfGraphObjects() throws JSONException {
-        JSONObject jsonSeattle = new JSONObject();
-        jsonSeattle.put("city", "Seattle");
-
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put(jsonSeattle);
-
-        GraphObjectList<GraphObject> collection = GraphObject.Factory
-                .createList(jsonArray, GraphObject.class);
-
-        GraphObjectList<GraphLocation> locationCollection = collection.castToListOf(GraphLocation.class);
-        assertTrue(locationCollection != null);
-
-        GraphLocation seattle = locationCollection.iterator().next();
-        assertTrue(seattle != null);
-        assertEquals("Seattle", seattle.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingCollectionToSameTypeGivesSameObject() {
-        GraphObjectList<Base> base = GraphObject.Factory.createList(Base.class);
-
-        GraphObjectList<Base> cast = base.castToListOf(Base.class);
-
-        assertTrue(base == cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingCollectionToBaseTypeGivesSameObject() {
-        GraphObjectList<Derived> derived = GraphObject.Factory.createList(Derived.class);
-
-        GraphObjectList<Base> cast = derived.castToListOf(Base.class);
-
-        assertTrue((GraphObjectList<?>)derived == (GraphObjectList<?>)cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanGetInnerJSONArray() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-
-        GraphObjectList<GraphObject> collection = GraphObject.Factory
-                .createList(jsonArray, GraphObject.class);
-
-        assertEquals(jsonArray, collection.getInnerJSONArray());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanGetRandomAccess() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put("Seattle");
-        jsonArray.put("Menlo Park");
-
-        GraphObjectList<String> collection = GraphObject.Factory
-                .createList(jsonArray, String.class);
-
-        assertEquals("Menlo Park", collection.get(1));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanSetRandomAccess() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-
-        GraphObjectList<String> collection = GraphObject.Factory
-                .createList(jsonArray, String.class);
-
-        collection.add("Seattle");
-        collection.add("Menlo Park");
-
-        collection.set(1, "Ann Arbor");
-        assertEquals("Ann Arbor", collection.get(1));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionPutOfWrapperPutsJSONObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("hocus", "pocus");
-
-        GraphObjectList<GraphObject> parentList = GraphObject.Factory
-                .createList(GraphObject.class);
-        parentList.add(graphObject);
-
-        JSONArray jsonArray = parentList.getInnerJSONArray();
-
-        Object obj = jsonArray.opt(0);
-
-        assertNotNull(obj);
-        assertEquals(jsonObject, obj);
-
-        parentList.set(0, graphObject);
-
-        obj = jsonArray.opt(0);
-
-        assertNotNull(obj);
-        assertEquals(jsonObject, obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCamelCaseToLowercase() {
-        assertEquals("hello_world", GraphObject.Factory
-                .convertCamelCaseToLowercaseWithUnderscores("HelloWorld"));
-        assertEquals("hello_world", GraphObject.Factory
-                .convertCamelCaseToLowercaseWithUnderscores("helloWorld"));
-    }
-
-    interface NestedObject extends GraphObject {
-        String getId();
-        void setId(String id);
-
-        String getUrl();
-        void setUrl(String url);
-    }
-
-    interface ObjectWithNestedObject extends GraphObject {
-        // Single-object version
-        NestedObject getNestedObject();
-        void setNestedObject(NestedObject nestedObject);
-
-        @PropertyName("nested_object")
-        @CreateGraphObject("id")
-        void setNestedObjectById(String id);
-        @PropertyName("nested_object")
-        @CreateGraphObject("url")
-        void setNestedObjectByUrl(String url);
-
-        // Test overloaded name
-        @CreateGraphObject("id")
-        void setNestedObject(String id);
-
-        // List version
-        GraphObjectList<NestedObject> getNestedObjects();
-        void setNestedObjects(List<NestedObject> nestedObjects);
-
-        @PropertyName("nested_objects")
-        @CreateGraphObject("id")
-        void setNestedObjectsById(List<String> id);
-        @PropertyName("nested_objects")
-        @CreateGraphObject("url")
-        void setNestedObjectsByUrl(List<String> url);
-
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetPropertyAs() throws JSONException {
-        JSONObject nestedObject = new JSONObject();
-        nestedObject.put("id", "55");
-
-        GraphObject containingObject = GraphObject.Factory.create();
-        containingObject.setProperty("nested", nestedObject);
-
-        NestedObject nestedGraphObject = containingObject.getPropertyAs("nested", NestedObject.class);
-        assertNotNull(nestedGraphObject);
-        assertEquals("55", nestedGraphObject.getId());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetPropertyAsList() throws JSONException {
-        JSONObject nestedObject = new JSONObject();
-        nestedObject.put("id", "55");
-
-        JSONArray nestedArray = new JSONArray(Arrays.asList(new JSONObject[]{nestedObject}));
-        GraphObject containingObject = GraphObject.Factory.create();
-        containingObject.setProperty("nested", nestedArray);
-
-        GraphObjectList<NestedObject> nestedGraphObjects = containingObject.getPropertyAsList("nested",
-                NestedObject.class);
-        assertNotNull(nestedGraphObjects);
-        assertEquals("55", nestedGraphObjects.get(0).getId());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetNestedObject() {
-        ObjectWithNestedObject object = GraphObject.Factory.create(ObjectWithNestedObject.class);
-        object.setNestedObjectById("77");
-
-        NestedObject nestedObject = object.getNestedObject();
-        assertNotNull(nestedObject);
-        assertEquals("77", nestedObject.getId());
-
-        object.setNestedObjectByUrl("http://www.example.com");
-
-        nestedObject = object.getNestedObject();
-        assertNotNull(nestedObject);
-        assertEquals("http://www.example.com", nestedObject.getUrl());
-
-        // Overloaded method
-        object.setNestedObject("77");
-
-        nestedObject = object.getNestedObject();
-        assertNotNull(nestedObject);
-        assertEquals("77", nestedObject.getId());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetNestedObjects() {
-        ObjectWithNestedObject object = GraphObject.Factory.create(ObjectWithNestedObject.class);
-        object.setNestedObjectsById(Arrays.asList("77", "88"));
-
-        GraphObjectList<NestedObject> nestedObjects = object.getNestedObjects();
-        assertNotNull(nestedObjects);
-        assertEquals("77", nestedObjects.get(0).getId());
-        assertEquals("88", nestedObjects.get(1).getId());
-
-        object.setNestedObjectsByUrl(Arrays.asList("http://www.example.com/1", "http://www.example.com/2"));
-
-        nestedObjects = object.getNestedObjects();
-        assertNotNull(nestedObjects);
-        assertEquals("http://www.example.com/1", nestedObjects.get(0).getUrl());
-        assertEquals("http://www.example.com/2", nestedObjects.get(1).getUrl());
-    }
-
-    interface GraphObjectWithPrimitives extends GraphObject {
-        boolean getBoolean();
-        void setBoolean(boolean value);
-
-        int getInt();
-        void setInt(int value);
-
-        char getChar();
-        void setChar(char value);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetBooleanProperty() {
-        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
-
-        graphObject.setBoolean(true);
-        assertEquals(true, graphObject.getBoolean());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testBooleanPropertyDefaultsToFalse() {
-        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
-
-        assertEquals(false, graphObject.getBoolean());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetNumericProperty() {
-        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
-
-        graphObject.setInt(5);
-        assertEquals(5, graphObject.getInt());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testNumericPropertyDefaultsToZero() {
-        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
-
-        assertEquals(0, graphObject.getInt());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetCharProperty() {
-        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
-
-        graphObject.setChar('z');
-        assertEquals('z', graphObject.getChar());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCharPropertyDefaultsToZero() {
-        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
-
-        assertEquals(0, graphObject.getChar());
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/model/JsonUtilTests.java b/facebook/tests/src/com/facebook/model/JsonUtilTests.java
deleted file mode 100644
index 8f6b60b34..000000000
--- a/facebook/tests/src/com/facebook/model/JsonUtilTests.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.model;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map.Entry;
-import java.util.Set;
-
-public final class JsonUtilTests extends AndroidTestCase {
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectClear() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        JsonUtil.jsonObjectClear(jsonObject);
-        assertEquals(0, jsonObject.length());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectContainsValue() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        assertTrue(JsonUtil.jsonObjectContainsValue(jsonObject, "pocus"));
-        assertFalse(JsonUtil.jsonObjectContainsValue(jsonObject, "Fred"));
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectEntrySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Set<Entry<String, Object>> entrySet = JsonUtil.jsonObjectEntrySet(jsonObject);
-        assertEquals(2, entrySet.size());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectKeySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Set<String> keySet = JsonUtil.jsonObjectKeySet(jsonObject);
-        assertEquals(2, keySet.size());
-        assertTrue(keySet.contains("hello"));
-        assertFalse(keySet.contains("world"));
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectPutAll() throws JSONException {
-        HashMap<String, Object> map = new HashMap<String, Object>();
-        map.put("hello", "world");
-        map.put("hocus", "pocus");
-
-        JSONObject jsonObject = new JSONObject();
-        JsonUtil.jsonObjectPutAll(jsonObject, map);
-
-        assertEquals("pocus", jsonObject.get("hocus"));
-        assertEquals(2, jsonObject.length());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectValues() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Collection<Object> values = JsonUtil.jsonObjectValues(jsonObject);
-
-        assertEquals(2, values.size());
-        assertTrue(values.contains("world"));
-    }
-}
diff --git a/facebook/tests/src/com/facebook/model/OpenGraphActionTests.java b/facebook/tests/src/com/facebook/model/OpenGraphActionTests.java
deleted file mode 100644
index 611fa09e7..000000000
--- a/facebook/tests/src/com/facebook/model/OpenGraphActionTests.java
+++ /dev/null
@@ -1,264 +0,0 @@
-package com.facebook.model;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-public class OpenGraphActionTests extends AndroidTestCase {
-    private static String ACTION_JSON = "{" +
-            "  \"id\": \"99\", " +
-            "  \"from\": {" +
-            "    \"name\": \"A User\", " +
-            "    \"id\": \"42\"" +
-            "  }, " +
-            "  \"start_time\": \"2013-04-11T02:05:17+0000\", " +
-            "  \"end_time\": \"2013-04-11T03:05:17+0000\", " +
-            "  \"publish_time\": \"2013-04-11T02:05:17+0000\", " +
-            "  \"ref\": \"hello!\", " +
-            "  \"message\": \"a message!\", " +
-            "  \"place\": {" +
-            "    \"id\": \"9999\", " +
-            "    \"name\": \"Some Place\", " +
-            "    \"location\": {" +
-            "      \"latitude\": 37.786130951058, " +
-            "      \"longitude\": -122.40886171765, " +
-            "      \"city\": \"San Francisco\", " +
-            "      \"country\": \"United States\", " +
-            "      \"id\": \"2421836\", " +
-            "      \"zip\": \"94102-2118\", " +
-            "      \"address\": \"5 Any Street\", " +
-            "      \"region\": \"CA\"" +
-            "    } " +
-            "  }, " +
-            "  \"tags\": [" +
-            "    {" +
-            "      \"id\": \"4321\", " +
-            "      \"name\": \"Jim Bob\"" +
-            "    }" +
-            "  ], " +
-            "  \"application\": {" +
-            "    \"name\": \"Awesome App\", " +
-            "    \"namespace\": \"awesome\", " +
-            "    \"id\": \"55\"" +
-            "  }, " +
-            "  \"data\": {" +
-            "    \"thing\": {" +
-            "      \"id\": \"509\", " +
-            "      \"url\": \"http://www.example.com/100\", " +
-            "      \"type\": \"awesome:thing\", " +
-            "      \"title\": \"A thing!\"" +
-            "    }" +
-            "  }, " +
-            "  \"type\": \"awesome:action\", " +
-            "  \"likes\": {" +
-            "    \"count\": 7, " +
-            "    \"can_like\": true, " +
-            "    \"user_likes\": false" +
-            "  }, " +
-            "  \"comments\": {" +
-            "    \"data\": [" +
-            "      {" +
-            "        \"id\": \"2_3\", " +
-            "        \"from\": {" +
-            "          \"name\": \"A Yooser\", " +
-            "          \"id\": \"1001\"" +
-            "        }, " +
-            "        \"message\": \"Here's a comment.\", " +
-            "        \"can_remove\": true, " +
-            "        \"created_time\": \"2013-04-26T23:38:19+0000\", " +
-            "        \"like_count\": 3, " +
-            "        \"user_likes\": false" +
-            "      }" +
-            "    ], " +
-            "    \"paging\": {" +
-            "      \"cursors\": {" +
-            "        \"after\": \"x\", " +
-            "        \"before\": \"x\"" +
-            "      }" +
-            "    }, " +
-            "    \"count\": 1, " +
-            "    \"can_comment\": true, " +
-            "    \"comment_order\": \"chronological\"" +
-            "  }," +
-            "  \"likes\": {" +
-            "    \"data\": [" +
-            "      {" +
-            "        \"id\": \"422\", " +
-            "        \"name\": \"Another User\"" +
-            "      }" +
-            "    ], " +
-            "    \"paging\": {" +
-            "      \"next\": \"https://graph.facebook.com/blah\"" +
-            "    }, " +
-            "    \"count\": 1, " +
-            "    \"can_like\": true, " +
-            "    \"user_likes\": true" +
-            "  }" +
-            "}";
-
-    interface TestOpenGraphActionData extends GraphObject {
-        GraphObject getThing();
-    }
-
-    interface TestOpenGraphAction extends OpenGraphAction {
-        TestOpenGraphActionData getData();
-    }
-
-    private OpenGraphAction parsedAction;
-
-    public void setUp() throws JSONException {
-        JSONObject jsonObject = new JSONObject(ACTION_JSON);
-        parsedAction = GraphObject.Factory.create(jsonObject, OpenGraphAction.class);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedId() {
-        assertEquals("99", parsedAction.getId());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedType() {
-        assertEquals("awesome:action", parsedAction.getType());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedDates() {
-        assertEquals(new Date(1365645917000L), parsedAction.getStartTime());
-        assertEquals(new Date(1365649517000L), parsedAction.getEndTime());
-        assertEquals(new Date(1365645917000L), parsedAction.getPublishTime());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedRef() {
-        assertEquals("hello!", parsedAction.getRef());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedMessage() {
-        assertEquals("a message!", parsedAction.getMessage());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedPlace() {
-        GraphPlace place = parsedAction.getPlace();
-        assertEquals("9999", place.getId());
-        assertEquals("94102-2118", place.getLocation().getZip());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedTags() {
-        List<GraphObject> tags = parsedAction.getTags();
-        assertEquals(1, tags.size());
-        GraphUser tag = tags.get(0).cast(GraphUser.class);
-        assertEquals("4321", tag.getId());
-        assertEquals("Jim Bob", tag.getName());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedFrom() {
-        GraphUser from = parsedAction.getFrom();
-        assertEquals("42", from.getId());
-        assertEquals("A User", from.getName());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedLikes() {
-        JSONObject likes = parsedAction.getLikes();
-        assertEquals(1, likes.optInt("count"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedApplication() {
-        GraphObject application = parsedAction.getApplication();
-        assertEquals("Awesome App", application.getProperty("name"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedComments() {
-        JSONObject comments = parsedAction.getComments();
-        assertEquals(1, comments.optInt("count"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedData() {
-        GraphObject data = parsedAction.getData();
-        assertNotNull(data);
-
-        GraphObject thing = data.getPropertyAs("thing", GraphObject.class);
-        assertNotNull(thing);
-        assertEquals("509", thing.getProperty("id"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedTypedData() {
-        TestOpenGraphActionData data = parsedAction.getPropertyAs("data", TestOpenGraphActionData.class);
-        assertNotNull(data);
-
-        GraphObject thing = data.getThing();
-        assertNotNull(thing);
-        assertEquals("509", thing.getProperty("id"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedDataWithTypedAction() {
-        TestOpenGraphAction typedAction = parsedAction.cast(TestOpenGraphAction.class);
-        TestOpenGraphActionData data = typedAction.getData();
-        assertNotNull(data);
-
-        GraphObject thing = data.getThing();
-        assertNotNull(thing);
-        assertEquals("509", thing.getProperty("id"));
-    }
-
-    public void testSetGetTags() {
-        OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-
-        GraphObject tag = GraphObject.Factory.create();
-        tag.setProperty("id", "123");
-
-        List<GraphObject> tags = new ArrayList<GraphObject>();
-        tags.add(tag);
-
-        action.setTags(tags);
-
-        GraphObjectList<GraphObject> retrievedTags = action.getTags();
-        assertNotNull(retrievedTags);
-        assertEquals(1, retrievedTags.size());
-        assertEquals("123", retrievedTags.get(0).getProperty("id"));
-    }
-}
diff --git a/facebook/tests/src/com/facebook/model/OpenGraphObjectTests.java b/facebook/tests/src/com/facebook/model/OpenGraphObjectTests.java
deleted file mode 100644
index 42882cb5d..000000000
--- a/facebook/tests/src/com/facebook/model/OpenGraphObjectTests.java
+++ /dev/null
@@ -1,217 +0,0 @@
-package com.facebook.model;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Arrays;
-import java.util.Date;
-
-public final class OpenGraphObjectTests extends AndroidTestCase {
-    private static String OBJECT_JSON = "{" +
-            "  \"id\": \"509\"," +
-            "  \"url\": \"http://www.example.com/100\"," +
-            "  \"type\": \"awesome:thing\"," +
-            "  \"title\": \"awesome title\"," +
-            "  \"data\": {" +
-            "    \"color\": \"blue\"" +
-            "  }," +
-            "  \"image\": [" +
-            "    {" +
-            "      \"url\": \"http://www.example.com/images/81\"" +
-            "    }" +
-            "  ]," +
-            "  \"video\": [" +
-            "    {" +
-            "      \"url\": \"http://www.example.com/videos/18\"" +
-            "    }" +
-            "  ]," +
-            "  \"audio\": [" +
-            "    {" +
-            "      \"url\": \"http://www.example.com/audio/98\"" +
-            "    }" +
-            "  ]," +
-            "  \"description\": \"a description\"," +
-            "  \"see_also\": [" +
-            "    \"http://www.example.com/101\"" +
-            "  ]," +
-            "  \"site_name\": \"Awesome Site\"," +
-            "  \"updated_time\": \"2013-04-30T18:18:17+0000\"," +
-            "  \"created_time\": \"2013-04-30T18:18:17+0000\"," +
-            "  \"application\": {" +
-            "    \"id\": \"55\"," +
-            "    \"name\": \"Awesome App\"," +
-            "    \"url\": \"https://www.facebook.com/apps/application.php?id=55\"" +
-            "  }," +
-            "  \"is_scraped\": false," +
-            "  \"post_action_id\": \"1234\"" +
-            "}";
-
-    interface TestOpenGraphObjectData extends GraphObject {
-        String getColor();
-    }
-
-    interface TestOpenGraphObject extends GraphObject {
-        TestOpenGraphObjectData getData();
-    }
-
-    public OpenGraphObject getParsedObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject(OBJECT_JSON);
-        return GraphObject.Factory.create(jsonObject, OpenGraphObject.class);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedId() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("509", parsedObject.getId());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedType() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("awesome:thing", parsedObject.getType());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedUrl() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("http://www.example.com/100", parsedObject.getUrl());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedTitle() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("awesome title", parsedObject.getTitle());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedDescription() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("a description", parsedObject.getDescription());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedImage() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        GraphObjectList<GraphObject> images = parsedObject.getImage();
-        assertEquals("http://www.example.com/images/81", images.get(0).getProperty("url"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedVideo() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        GraphObjectList<GraphObject> videos = parsedObject.getVideo();
-        assertEquals("http://www.example.com/videos/18", videos.get(0).getProperty("url"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedAudio() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        GraphObjectList<GraphObject> audios = parsedObject.getAudio();
-        assertEquals("http://www.example.com/audio/98", audios.get(0).getProperty("url"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedSeeAlso() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("http://www.example.com/101", parsedObject.getSeeAlso().get(0));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedSiteName() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("Awesome Site", parsedObject.getSiteName());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedTimes() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals(new Date(1367345897000L), parsedObject.getCreatedTime());
-        assertEquals(new Date(1367345897000L), parsedObject.getUpdatedTime());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedApplication() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        GraphObject application = parsedObject.getApplication();
-        assertEquals("Awesome App", application.getProperty("name"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedIsScraped() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals(false, parsedObject.getIsScraped());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedPostActionId() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        assertEquals("1234", parsedObject.getPostActionId());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedData() throws JSONException {
-        OpenGraphObject parsedObject = getParsedObject();
-        GraphObject data = parsedObject.getData();
-
-        assertEquals("blue", data.getProperty("color"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testParsedDataWithTypedObject() throws JSONException {
-        TestOpenGraphObject parsedObject = getParsedObject().cast(TestOpenGraphObject.class);
-        TestOpenGraphObjectData data = parsedObject.getData();
-
-        assertEquals("blue", data.getColor());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetImagesByUrl() throws JSONException {
-        OpenGraphObject object = GraphObject.Factory.create(OpenGraphObject.class);
-
-        object.setImageUrls(Arrays.asList("http://www.example.com/1", "http://www.example.com/2"));
-
-        GraphObjectList<GraphObject> images = object.getImage();
-        assertNotNull(images);
-        assertEquals(2, images.size());
-        assertEquals("http://www.example.com/1", images.get(0).getProperty("url"));
-        assertEquals("http://www.example.com/2", images.get(1).getProperty("url"));
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
deleted file mode 100644
index 1f2667c60..000000000
--- a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
+++ /dev/null
@@ -1,230 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.os.Bundle;
-import com.facebook.FacebookTestCase;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.model.GraphObject;
-import com.facebook.model.OpenGraphAction;
-import com.facebook.model.OpenGraphObject;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-public class FacebookDialogTests extends FacebookTestCase {
-
-    private String getAttachmentNameFromContentUri(String contentUri) {
-        int lastSlash = contentUri.lastIndexOf("/");
-        return contentUri.substring(lastSlash + 1);
-    }
-
-    public void testCantSetAttachmentsWithNullBitmaps() {
-        try {
-            OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-            action.setProperty("foo", "bar");
-
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo", "foo");
-
-            builder.setImageAttachmentsForAction(Arrays.asList((Bitmap)null));
-            fail("expected exception");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    public void testOpenGraphActionImageAttachments() throws JSONException {
-        OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-        action.setProperty("foo", "bar");
-
-        FacebookDialog.OpenGraphActionDialogBuilder builder =
-                new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo", "foo");
-
-        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
-
-        builder.setImageAttachmentsForAction(Arrays.asList(bitmap));
-
-        List<JSONObject> images = action.getImage();
-        assertNotNull(images);
-        assertTrue(images.size() == 1);
-
-        List<String> attachmentNames = builder.getImageAttachmentNames();
-        assertNotNull(attachmentNames);
-        assertTrue(attachmentNames.size() == 1);
-
-        String attachmentName = getAttachmentNameFromContentUri(images.get(0).getString("url"));
-        assertEquals(attachmentNames.get(0), attachmentName);
-    }
-
-    public void testCantSetObjectAttachmentsWithoutAction() {
-        try {
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), null, "foo", "foo");
-            builder.setImageAttachmentsForObject("foo", new ArrayList<Bitmap>());
-            fail("expected exception");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    public void testCantSetObjectAttachmentsWithoutObjectProperty() {
-        try {
-            OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo", "foo");
-
-            builder.setImageAttachmentsForObject("foo", new ArrayList<Bitmap>());
-            fail("expected exception");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    public void testCantSetObjectAttachmentsWithNonGraphObjectProperty() {
-        try {
-            OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo", "foo");
-
-            action.setProperty("foo", "bar");
-
-            builder.setImageAttachmentsForObject("foo", new ArrayList<Bitmap>());
-            fail("expected exception");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    public void testCantSetObjectAttachmentsWithNullBitmaps() {
-        try {
-            OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-            action.setProperty("foo", OpenGraphObject.Factory.createForPost("bar"));
-
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo", "foo");
-
-            builder.setImageAttachmentsForObject("foo", Arrays.asList((Bitmap)null));
-            fail("expected exception");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    public void testOpenGraphObjectImageAttachments() throws JSONException {
-        OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-        OpenGraphObject object = OpenGraphObject.Factory.createForPost("bar");
-        action.setProperty("foo", object);
-
-        FacebookDialog.OpenGraphActionDialogBuilder builder =
-                new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo", "foo");
-
-        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
-
-        builder.setImageAttachmentsForObject("foo", Arrays.asList(bitmap));
-
-        List<GraphObject> images = object.getImage();
-        assertNotNull(images);
-        assertTrue(images.size() == 1);
-
-        List<String> attachmentNames = builder.getImageAttachmentNames();
-        assertNotNull(attachmentNames);
-        assertTrue(attachmentNames.size() == 1);
-
-        String attachmentName = getAttachmentNameFromContentUri((String) images.get(0).getProperty("url"));
-        assertEquals(attachmentNames.get(0), attachmentName);
-    }
-
-    public void testOpenGraphActionAndObjectImageAttachments() throws JSONException {
-        OpenGraphAction action = OpenGraphAction.Factory.createForPost();
-        OpenGraphObject object = OpenGraphObject.Factory.createForPost("bar");
-        action.setProperty("foo", object);
-
-        FacebookDialog.OpenGraphActionDialogBuilder builder =
-                new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo", "foo");
-
-        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
-
-        builder.setImageAttachmentsForAction(Arrays.asList(bitmap));
-        builder.setImageAttachmentsForObject("foo", Arrays.asList(bitmap));
-
-        List<String> attachmentNames = builder.getImageAttachmentNames();
-        assertNotNull(attachmentNames);
-        assertTrue(attachmentNames.size() == 2);
-
-        List<GraphObject> objectImages = object.getImage();
-        assertNotNull(objectImages);
-        assertTrue(objectImages.size() == 1);
-
-        String attachmentName = getAttachmentNameFromContentUri((String) objectImages.get(0).getProperty("url"));
-        assertTrue(attachmentNames.contains(attachmentName));
-
-        List<JSONObject> actionImages = action.getImage();
-        assertNotNull(actionImages);
-        assertTrue(actionImages.size() == 1);
-
-        attachmentName = getAttachmentNameFromContentUri((String) actionImages.get(0).getString("url"));
-        assertTrue(attachmentNames.contains(attachmentName));
-    }
-
-    public void testOpenGraphDialogBuilderRequiresAction() {
-        try {
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), null, "foo", "foo");
-
-            builder.build();
-            fail("expected exception");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    public void testOpenGraphDialogBuilderRequiresActionType() {
-        try {
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(),
-                            OpenGraphAction.Factory.createForPost(), null, "foo");
-
-            builder.build();
-            fail("expected exception");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    public void testOpenGraphDialogBuilderRequiresPreviewPropertyName() {
-        try {
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(),
-                            OpenGraphAction.Factory.createForPost(), "foo", null);
-
-            builder.build();
-            fail("expected exception");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    public void testOpenGraphDialogBuilderRequiresPreviewPropertyToExist() {
-        try {
-            FacebookDialog.OpenGraphActionDialogBuilder builder =
-                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(),
-                            OpenGraphAction.Factory.createForPost(), "foo", "nosuchproperty");
-
-            builder.build();
-            fail("expected exception");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/FragmentTestCase.java b/facebook/tests/src/com/facebook/widget/FragmentTestCase.java
deleted file mode 100644
index 2fbdfa08f..000000000
--- a/facebook/tests/src/com/facebook/widget/FragmentTestCase.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.widget.LinearLayout;
-import com.facebook.FacebookActivityTestCase;
-
-public class FragmentTestCase<T extends FragmentTestCase.TestFragmentActivity<?>> extends FacebookActivityTestCase<T> {
-    public FragmentTestCase(Class<T> activityClass) {
-        super(activityClass);
-    }
-
-    protected T getTestActivity() {
-        return (T) getActivity();
-    }
-
-    public static class TestFragmentActivity<T extends Fragment> extends FragmentActivity {
-        public static final int FRAGMENT_ID = 0xFACE;
-
-        private Class<T> fragmentClass;
-        private int fragmentId;
-
-        protected TestFragmentActivity(Class<T> fragmentClass) {
-            this.fragmentClass = fragmentClass;
-        }
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            if (getAutoCreateUI()) {
-                setContentToFragment(null);
-            }
-        }
-
-        protected boolean getAutoCreateUI() {
-            return true;
-        }
-
-        void setContentToFragment(T fragment) {
-            if (fragment == null) {
-                try {
-                    fragment = createFragment();
-                } catch (InstantiationException e) {
-                    return;
-                } catch (IllegalAccessException e) {
-                    return;
-                }
-            }
-
-            LinearLayout layout = new LinearLayout(this);
-            layout.setOrientation(LinearLayout.VERTICAL);
-            layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
-                    LinearLayout.LayoutParams.FILL_PARENT));
-            layout.setId(FRAGMENT_ID);
-
-            getSupportFragmentManager().beginTransaction()
-                    .add(FRAGMENT_ID, fragment)
-                    .commit();
-
-            fragmentId = FRAGMENT_ID;
-
-            setContentView(layout);
-        }
-
-        void setContentToLayout(int i, int fragmentId) {
-            this.fragmentId = fragmentId;
-            setContentView(i);
-        }
-
-        protected T createFragment() throws InstantiationException, IllegalAccessException {
-            return fragmentClass.newInstance();
-        }
-
-        T getFragment() {
-            @SuppressWarnings("unchecked")
-            T fragment = (T) getSupportFragmentManager().findFragmentById(fragmentId);
-            return fragment;
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/FriendPickerFragmentTests.java b/facebook/tests/src/com/facebook/widget/FriendPickerFragmentTests.java
deleted file mode 100644
index aa3c0a57d..000000000
--- a/facebook/tests/src/com/facebook/widget/FriendPickerFragmentTests.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.os.Bundle;
-import android.test.TouchUtils;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.view.View;
-import android.widget.CheckBox;
-import android.widget.ListView;
-import com.facebook.TestBlocker;
-import com.facebook.TestSession;
-import com.facebook.sdk.tests.R;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-public class FriendPickerFragmentTests extends FragmentTestCase<FriendPickerFragmentTests.TestActivity> {
-    public FriendPickerFragmentTests() {
-        super(TestActivity.class);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersProgrammatically() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                Bundle bundle = new Bundle();
-                // We deliberately set these to non-defaults to ensure they are set correctly.
-                bundle.putString(FriendPickerFragment.USER_ID_BUNDLE_KEY, "4");
-                bundle.putBoolean(FriendPickerFragment.MULTI_SELECT_BUNDLE_KEY, false);
-                bundle.putBoolean(FriendPickerFragment.SHOW_PICTURES_BUNDLE_KEY, false);
-                bundle.putString(FriendPickerFragment.EXTRA_FIELDS_BUNDLE_KEY, "middle_name,link");
-                FriendPickerFragment fragment = new FriendPickerFragment(bundle);
-                getActivity().setContentToFragment(fragment);
-            }
-        });
-
-        // We don't just test the fragment we created directly above, because we want it to go through the
-        // activity lifecycle and ensure the settings are still correct.
-        final FriendPickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals("4", fragment.getUserId());
-        assertEquals(false, fragment.getMultiSelect());
-        assertEquals(false, fragment.getShowPictures());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("middle_name"));
-        assertTrue(extraFields.contains("link"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersViaLayout() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToLayout(R.layout.friend_picker_test_layout_1, R.id.friend_picker_fragment);
-            }
-        });
-
-        final FriendPickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals(false, fragment.getShowPictures());
-        assertEquals(false, fragment.getMultiSelect());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("middle_name"));
-        assertTrue(extraFields.contains("link"));
-        // It doesn't make sense to specify user id via layout, so we don't support it.
-    }
-
-    @LargeTest
-    public void testFriendsLoad() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        // We don't auto-create any UI, so do it now. Needs to run on the UI thread.
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToFragment(null);
-            }
-        });
-
-        final FriendPickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        // Ensure our test user has at least one friend.
-        final TestSession session1 = openTestSessionWithSharedUser();
-        TestSession session2 = openTestSessionWithSharedUser(SECOND_TEST_USER_TAG);
-        makeTestUsersFriends(session1, session2);
-
-        // Trigger a data load (on the UI thread).
-        final TestBlocker blocker = getTestBlocker();
-        // We expect to get called twice -- once with results, once to indicate we are done paging.
-        runAndBlockOnUiThread(2, new Runnable() {
-            @Override
-            public void run() {
-                fragment.setSession(session1);
-                fragment.setOnDataChangedListener(new PickerFragment.OnDataChangedListener() {
-                    @Override
-                    public void onDataChanged(PickerFragment<?> fragment) {
-                        blocker.signal();
-                    }
-                });
-                fragment.setExtraFields(Arrays.asList("first_name"));
-                fragment.loadData(true);
-            }
-        });
-
-        // We should have at least one item in the list by now.
-        ListView listView = (ListView) fragment.getView().findViewById(R.id.com_facebook_picker_list_view);
-        assertNotNull(listView);
-        View firstChild = listView.getChildAt(0);
-        assertNotNull(firstChild);
-
-        // Assert our state before we touch anything.
-        CheckBox checkBox = (CheckBox)listView.findViewById(R.id.com_facebook_picker_checkbox);
-        assertNotNull(checkBox);
-        assertFalse(checkBox.isChecked());
-        assertEquals(0, fragment.getSelection().size());
-
-        // Click on the first item in the list view.
-        TouchUtils.clickView(this, firstChild);
-
-        // We should have a selection (it might not be the user we made a friend up above, if the
-        // test user has more than one friend).
-        assertEquals(1, fragment.getSelection().size());
-
-        // We should have gotten the extra field we wanted.
-        assertNotNull(fragment.getSelection().iterator().next().getFirstName());
-
-        // And the checkbox should be checked.
-        assertTrue(checkBox.isChecked());
-
-        // Touch the item again. We should go back to no selection.
-        TouchUtils.clickView(this, firstChild);
-        assertEquals(0, fragment.getSelection().size());
-        assertFalse(checkBox.isChecked());
-    }
-
-    public static class TestActivity extends FragmentTestCase.TestFragmentActivity<FriendPickerFragment> {
-        public TestActivity() {
-            super(FriendPickerFragment.class);
-        }
-
-        @Override
-        protected boolean getAutoCreateUI() {
-            return false;
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/GraphObjectPagingLoaderTests.java b/facebook/tests/src/com/facebook/widget/GraphObjectPagingLoaderTests.java
deleted file mode 100644
index 1ac0a3f69..000000000
--- a/facebook/tests/src/com/facebook/widget/GraphObjectPagingLoaderTests.java
+++ /dev/null
@@ -1,162 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.location.Location;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.LoaderManager;
-import android.support.v4.content.Loader;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import com.facebook.*;
-import com.facebook.model.GraphPlace;
-
-public class GraphObjectPagingLoaderTests extends FragmentTestCase<GraphObjectPagingLoaderTests.TestActivity> {
-    public GraphObjectPagingLoaderTests() {
-        super(TestActivity.class);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testLoaderLoadsAndFollowsNextLinks() throws Exception {
-        CountingCallback callback = new CountingCallback();
-        final GraphObjectPagingLoader<GraphPlace> loader = (GraphObjectPagingLoader<GraphPlace>)
-                getActivity().getSupportLoaderManager().initLoader(0, null, callback);
-
-        TestSession session = openTestSessionWithSharedUser();
-
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        final Request request = Request.newPlacesSearchRequest(session, location, 1000, 5, null, null);
-
-        // Need to run this on blocker thread so callbacks are made there.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                loader.startLoading(request, false);
-            }
-        }, false);
-
-        getTestBlocker().waitForSignals(1);
-        assertEquals(1, callback.onLoadFinishedCount);
-        assertEquals(0, callback.onErrorCount);
-        assertEquals(0, callback.onLoadResetCount);
-        // We might not get back the exact number we requested because of privacy or other rules on
-        // the service side.
-        assertNotNull(callback.results);
-        assertTrue(callback.results.getCount() > 0);
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                loader.followNextLink();
-            }
-        }, false);
-        getTestBlocker().waitForSignals(1);
-        assertEquals(2, callback.onLoadFinishedCount);
-        assertEquals(0, callback.onErrorCount);
-        assertEquals(0, callback.onLoadResetCount);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testLoaderFinishesImmediatelyOnNoResults() throws Exception {
-        CountingCallback callback = new CountingCallback();
-        final GraphObjectPagingLoader<GraphPlace> loader = (GraphObjectPagingLoader<GraphPlace>)
-                getActivity().getSupportLoaderManager().initLoader(0, null, callback);
-
-        TestSession session = openTestSessionWithSharedUser();
-
-        // Unlikely to ever be a Place here.
-        Location location = new Location("");
-        location.setLatitude(-1.0);
-        location.setLongitude(-1.0);
-
-        final Request request = Request.newPlacesSearchRequest(session, location, 10, 5, null, null);
-
-        // Need to run this on blocker thread so callbacks are made there.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                loader.startLoading(request, false);
-            }
-        }, false);
-
-        getTestBlocker().waitForSignals(1);
-        assertEquals(1, callback.onLoadFinishedCount);
-        assertEquals(0, callback.onErrorCount);
-        assertEquals(0, callback.onLoadResetCount);
-        assertNotNull(callback.results);
-        assertEquals(0, callback.results.getCount());
-    }
-
-    private class CountingCallback implements
-            GraphObjectPagingLoader.OnErrorListener, LoaderManager.LoaderCallbacks<SimpleGraphObjectCursor<GraphPlace>> {
-        public int onLoadFinishedCount;
-        public int onLoadResetCount;
-        public int onErrorCount;
-        public SimpleGraphObjectCursor<GraphPlace> results;
-
-        private TestBlocker testBlocker = getTestBlocker();
-
-        @Override
-        public void onError(FacebookException error, GraphObjectPagingLoader<?> loader) {
-            ++onErrorCount;
-            testBlocker.signal();
-        }
-
-        @Override
-        public Loader<SimpleGraphObjectCursor<GraphPlace>> onCreateLoader(int id, Bundle args) {
-            GraphObjectPagingLoader<GraphPlace> loader = new GraphObjectPagingLoader<GraphPlace>(getActivity(),
-                    GraphPlace.class);
-            loader.setOnErrorListener(this);
-            return loader;
-        }
-
-        @Override
-        public void onLoadFinished(Loader<SimpleGraphObjectCursor<GraphPlace>> loader,
-                SimpleGraphObjectCursor<GraphPlace> data) {
-            results = data;
-            ++onLoadFinishedCount;
-            testBlocker.signal();
-        }
-
-        @Override
-        public void onLoaderReset(Loader<SimpleGraphObjectCursor<GraphPlace>> loader) {
-            ++onLoadResetCount;
-            testBlocker.signal();
-        }
-    }
-
-    public static class DummyFragment extends Fragment  {
-    }
-
-    public static class TestActivity extends FragmentTestCase.TestFragmentActivity<DummyFragment> {
-        public TestActivity() {
-            super(DummyFragment.class);
-        }
-
-        @Override
-        protected boolean getAutoCreateUI() {
-            return false;
-        }
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/widget/LoginButtonTest.java b/facebook/tests/src/com/facebook/widget/LoginButtonTest.java
deleted file mode 100644
index 11f8f6033..000000000
--- a/facebook/tests/src/com/facebook/widget/LoginButtonTest.java
+++ /dev/null
@@ -1,369 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.*;
-import com.facebook.widget.LoginButton;
-import junit.framework.Assert;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class LoginButtonTest extends SessionTestsBase {
-
-    static final int STRAY_CALLBACK_WAIT_MILLISECONDS = 50;
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginButton() throws Throwable {
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        final ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder = new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        // Verify state with no token in cache
-        Assert.assertEquals(SessionState.CREATED, session.getState());
-
-        // Add another status recorder to ensure that the callback we hand to LoginButton
-        // also gets called as expected. We expect to get the same order of calls as statusRecorder does.
-        final SessionStatusCallbackRecorder loginButtonStatusRecorder = new SessionStatusCallbackRecorder();
-
-        // Create the button. To get session status updates, we need to actually attach the
-        // button to a window, which must be done on the UI thread.
-        final LoginButton button = new LoginButton(getActivity());
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentView(button);
-                button.setSession(session);
-                button.setSessionStatusCallback(loginButtonStatusRecorder);
-                button.performClick();
-            }
-        });
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        loginButtonStatusRecorder.waitForCall(session, SessionState.OPENING, null);
-
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        loginButtonStatusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-        loginButtonStatusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests that the onErrorListener gets called if there's an error
-    public void testLoginFail() {
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        final Exception openException = new Exception("Open failed!");
-        final AtomicBoolean clicked = new AtomicBoolean(false);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        LoginButton.OnErrorListener listener = new LoginButton.OnErrorListener() {
-            @Override
-            public void onError(FacebookException exception) {
-                synchronized (this) {
-                    assertEquals(exception.getCause().getMessage(), openException.getMessage());
-                    clicked.set(true);
-                    this.notifyAll();
-                }
-            }
-        };
-        button.setOnErrorListener(listener);
-        button.setSession(session);
-        session.addAuthorizeResult(openException);
-
-        button.onAttachedToWindow();
-        button.performClick();
-
-        try {
-            synchronized (listener) {
-                listener.wait(DEFAULT_TIMEOUT_MILLISECONDS);
-            }
-        } catch (InterruptedException e) {
-            fail("Interrupted during open");
-        }
-
-        if (!clicked.get()) {
-            fail("Did not get exception");
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests that the onErrorListener does NOT get called if there's a callback set.
-    public void testLoginFail2() {
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        final Exception openException = new Exception("Open failed!");
-        final AtomicBoolean clicked = new AtomicBoolean(false);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        Session.StatusCallback callback = new Session.StatusCallback() {
-            @Override
-            public void call(Session session, SessionState state, Exception exception) {
-                if (exception != null) {
-                    synchronized (this) {
-                        assertEquals(exception.getMessage(), openException.getMessage());
-                        clicked.set(true);
-                        this.notifyAll();
-                    }
-                }
-            }
-        };
-        button.setSessionStatusCallback(callback);
-        button.setOnErrorListener(new LoginButton.OnErrorListener() {
-            @Override
-            public void onError(FacebookException exception) {
-                synchronized (this) {
-                    fail("Should not be in here");
-                    this.notifyAll();
-                }
-            }
-        });
-        button.setSession(session);
-        session.addAuthorizeResult(openException);
-
-        button.onAttachedToWindow();
-        button.performClick();
-
-        try {
-            synchronized (callback) {
-                callback.wait(DEFAULT_TIMEOUT_MILLISECONDS);
-            }
-        } catch (InterruptedException e) {
-            fail("Interrupted during open");
-        }
-
-        if (!clicked.get()) {
-            fail("Did not get exception");
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanAddReadPermissions() {
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder = new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        button.setSession(session);
-        button.setReadPermissions("read_permission", "read_another");
-        session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        button.performClick();
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanAddPublishPermissions() {
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder =
-                new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        button.setSession(session);
-        button.setPublishPermissions("publish_permission", "publish_another");
-        session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        button.performClick();
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantAddReadThenPublishPermissions() {
-        final LoginButton button = new LoginButton(getActivity());
-        button.setReadPermissions("read_permission", "read_another");
-        try {
-            button.setPublishPermissions("read_permission", "read_a_third");
-            fail("Should not be able to reach here");
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantAddPublishThenReadPermissions() {
-        final LoginButton button = new LoginButton(getActivity());
-        button.setPublishPermissions("publish_permission", "publish_another");
-        try {
-            button.setReadPermissions("publish_permission", "publish_a_third");
-            fail("Should not be able to reach here");
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanAddReadThenPublishPermissionsWithClear() {
-        final LoginButton button = new LoginButton(getActivity());
-        button.setReadPermissions("read_permission", "read_another");
-        button.clearPermissions();
-        button.setPublishPermissions("publish_permission", "publish_another");
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantAddMorePermissionsToOpenSession() {
-        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder =
-                new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        button.setSession(session);
-        session.addAuthorizeResult("A token of thanks",
-                Arrays.asList(new String[] {"read_permission", "read_another"}), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        button.performClick();
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // this should be fine
-        button.setReadPermissions("read_permission", "read_another");
-
-        button.setReadPermissions("read_permission", "read_a_third");
-        List<String> permissions = button.getPermissions();
-        assertTrue(permissions.contains("read_permission"));
-        assertTrue(permissions.contains("read_another"));
-        assertFalse(permissions.contains("read_a_third"));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanSetDefaultAudience() {
-        SessionTestsBase.MockTokenCachingStrategy cache = new SessionTestsBase.MockTokenCachingStrategy(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder =
-                new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        button.setSession(session);
-        button.setPublishPermissions("publish_permission", "publish_another");
-        button.setDefaultAudience(SessionDefaultAudience.FRIENDS);
-        session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        button.performClick();
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        assertNotNull(session.getLastRequest());
-        assertEquals(SessionDefaultAudience.FRIENDS, session.getLastRequestAudience());
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java b/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java
deleted file mode 100644
index f8cc79a74..000000000
--- a/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java
+++ /dev/null
@@ -1,287 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.location.Location;
-import android.os.Bundle;
-import android.test.TouchUtils;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.view.View;
-import android.widget.ListView;
-import com.facebook.*;
-import com.facebook.sdk.tests.R;
-
-import java.util.Collection;
-
-public class PlacePickerFragmentTests extends FragmentTestCase<PlacePickerFragmentTests.TestActivity> {
-    public PlacePickerFragmentTests() {
-        super(TestActivity.class);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersProgrammatically() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        final Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                Bundle bundle = new Bundle();
-                // We deliberately set these to non-defaults to ensure they are set correctly.
-                bundle.putBoolean(PlacePickerFragment.SHOW_PICTURES_BUNDLE_KEY, false);
-                bundle.putInt(PlacePickerFragment.RADIUS_IN_METERS_BUNDLE_KEY, 75);
-                bundle.putInt(PlacePickerFragment.RESULTS_LIMIT_BUNDLE_KEY, 5);
-                bundle.putString(PlacePickerFragment.SEARCH_TEXT_BUNDLE_KEY, "coffee");
-                bundle.putParcelable(PlacePickerFragment.LOCATION_BUNDLE_KEY, location);
-                bundle.putString(FriendPickerFragment.EXTRA_FIELDS_BUNDLE_KEY, "checkins,general_info");
-
-                PlacePickerFragment fragment = new PlacePickerFragment(bundle);
-                getActivity().setContentToFragment(fragment);
-            }
-        });
-
-        // We don't just test the fragment we created directly above, because we want it to go through the
-        // activity lifecycle and ensure the settings are still correct.
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals(false, fragment.getShowPictures());
-        assertEquals(75, fragment.getRadiusInMeters());
-        assertEquals(5, fragment.getResultsLimit());
-        assertEquals("coffee", fragment.getSearchText());
-        assertEquals(location, fragment.getLocation());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("checkins"));
-        assertTrue(extraFields.contains("general_info"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersViaLayout() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToLayout(R.layout.place_picker_test_layout_1, R.id.place_picker_fragment);
-            }
-        });
-
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals(false, fragment.getShowPictures());
-        assertEquals(75, fragment.getRadiusInMeters());
-        assertEquals(5, fragment.getResultsLimit());
-        assertEquals("coffee", fragment.getSearchText());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("checkins"));
-        assertTrue(extraFields.contains("general_info"));
-        // It doesn't make sense to specify location via layout, so we don't support it.
-    }
-
-    @LargeTest
-    public void testPlacesLoad() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        // We don't auto-create any UI, so do it now. Needs to run on the UI thread.
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToFragment(null);
-            }
-        });
-        getInstrumentation().waitForIdleSync();
-
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        final TestSession session = openTestSessionWithSharedUser();
-
-        // Trigger a data load (on the UI thread).
-        final TestBlocker blocker = getTestBlocker();
-        runAndBlockOnUiThread(1, new Runnable() {
-            @Override
-            public void run() {
-                fragment.setSession(session);
-
-                Location location = new Location("");
-                location.setLatitude(47.6204);
-                location.setLongitude(-122.3491);
-                fragment.setLocation(location);
-
-                fragment.setOnDataChangedListener(new PickerFragment.OnDataChangedListener() {
-                    @Override
-                    public void onDataChanged(PickerFragment<?> fragment) {
-                        blocker.signal();
-                    }
-                });
-                fragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-                    @Override
-                    public void onError(PickerFragment<?> fragment, FacebookException error) {
-                        fail("Got unexpected error: " + error.toString());
-                    }
-                });
-                fragment.loadData(true);
-            }
-        });
-
-        // We should have at least one item in the list by now.
-        ListView listView = (ListView) fragment.getView().findViewById(R.id.com_facebook_picker_list_view);
-        assertNotNull(listView);
-        View firstChild = listView.getChildAt(0);
-        assertNotNull(firstChild);
-
-        // Assert our state before we touch anything.
-        assertNull(fragment.getSelection());
-
-        // Click on the first item in the list view.
-        TouchUtils.clickView(this, firstChild);
-
-        // We should have a selection.
-        assertNotNull(fragment.getSelection());
-
-        // Touch the item again. We should go back to no selection.
-        TouchUtils.clickView(this, firstChild);
-        assertNull(fragment.getSelection());
-    }
-
-    @LargeTest
-    public void testClearsResultsWhenSessionClosed() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        // We don't auto-create any UI, so do it now. Needs to run on the UI thread.
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToFragment(null);
-            }
-        });
-        getInstrumentation().waitForIdleSync();
-
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        final TestSession session = openTestSessionWithSharedUser();
-
-        // Trigger a data load (on the UI thread).
-        // We use multiple test blockers to keep the counts from getting confused if other events
-        // cause our listeners to fire.
-        final TestBlocker blocker1 = TestBlocker.createTestBlocker();
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                fragment.setSession(session);
-
-                Location location = new Location("");
-                location.setLatitude(47.6204);
-                location.setLongitude(-122.3491);
-                fragment.setLocation(location);
-
-                fragment.setOnDataChangedListener(new PickerFragment.OnDataChangedListener() {
-                    @Override
-                    public void onDataChanged(PickerFragment<?> fragment) {
-                        blocker1.signal();
-                    }
-                });
-                fragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-                    @Override
-                    public void onError(PickerFragment<?> fragment, FacebookException error) {
-                        fail("Got unexpected error: " + error.getMessage());
-                    }
-                });
-                fragment.loadData(true);
-            }
-        });
-        blocker1.waitForSignals(1);
-
-        // We should have at least one item in the list by now.
-        ListView listView = (ListView) fragment.getView().findViewById(R.id.com_facebook_picker_list_view);
-        assertNotNull(listView);
-
-        Thread.sleep(500);
-
-        int lastPosition = listView.getLastVisiblePosition();
-        assertTrue(lastPosition > -1);
-
-        View firstChild = listView.getChildAt(0);
-        assertNotNull(firstChild);
-
-        // Assert our state before we touch anything.
-        assertNull(fragment.getSelection());
-
-        // Click on the first item in the list view.
-        TouchUtils.clickView(this, firstChild);
-
-        // We should have a selection.
-        assertNotNull(fragment.getSelection());
-
-        // To validate the behavior, we need to wait until the session state notifications have been processed.
-        // We run this on the UI thread but don't wait on the blocker until we've closed the session.
-        final TestBlocker blocker2 = TestBlocker.createTestBlocker();
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                session.addCallback(new Session.StatusCallback() {
-                    @Override
-                    public void call(Session session, SessionState state, Exception exception) {
-                        blocker2.signal();
-                    }
-                });
-            }
-        });
-        session.close();
-        // Wait for the notification and for any UI activity to stop.
-        blocker2.waitForSignals(1);
-        getInstrumentation().waitForIdleSync();
-
-        Thread.sleep(500);
-        // The list and the selection should have been cleared.
-        lastPosition = listView.getLastVisiblePosition();
-        assertTrue(lastPosition == -1);
-        assertNull(fragment.getSelection());
-    }
-
-    public static class TestActivity extends FragmentTestCase.TestFragmentActivity<PlacePickerFragment> {
-        public TestActivity() {
-            super(PlacePickerFragment.class);
-        }
-
-        @Override
-        protected boolean getAutoCreateUI() {
-            return false;
-        }
-
-        protected PlacePickerFragment createFragment() throws InstantiationException, IllegalAccessException {
-            Bundle bundle = new Bundle();
-            bundle.putBoolean(PlacePickerFragment.SHOW_SEARCH_BOX_BUNDLE_KEY, false);
-
-            return new PlacePickerFragment(bundle);
-        }
-
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java b/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
deleted file mode 100644
index 386a8e191..000000000
--- a/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import com.facebook.SessionDefaultAudience;
-import com.facebook.SessionLoginBehavior;
-
-import java.util.Arrays;
-import java.util.List;
-
-public class UserSettingsFragmentTests extends FragmentTestCase<UserSettingsFragmentTests.TestActivity> {
-
-    public UserSettingsFragmentTests() {
-        super(TestActivity.class);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersViaLayout() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        final UserSettingsFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals(SessionLoginBehavior.SUPPRESS_SSO, fragment.getLoginBehavior());
-        assertEquals(SessionDefaultAudience.EVERYONE, fragment.getDefaultAudience());
-        List<String> permissions = fragment.getPermissions();
-        assertEquals(2, permissions.size());
-        assertEquals("read_1", permissions.get(0));
-    }
-
-    public static class TestActivity extends FragmentTestCase.TestFragmentActivity<UserSettingsFragment> {
-        public TestActivity() {
-            super(UserSettingsFragment.class);
-        }
-
-        @Override
-        public void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            getSupportFragmentManager().executePendingTransactions();
-            UserSettingsFragment fragment = getFragment();
-            fragment.setLoginBehavior(SessionLoginBehavior.SUPPRESS_SSO);
-            fragment.setReadPermissions("read_1", "read_2");
-            fragment.setDefaultAudience(SessionDefaultAudience.EVERYONE);
-        }
-    }
-}
diff --git a/samples/FriendPickerSample/.classpath b/samples/FriendPickerSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/FriendPickerSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/FriendPickerSample/.project b/samples/FriendPickerSample/.project
deleted file mode 100644
index eb8d8732f..000000000
--- a/samples/FriendPickerSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>FriendPickerSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/FriendPickerSample/AndroidManifest.xml b/samples/FriendPickerSample/AndroidManifest.xml
deleted file mode 100644
index d8f1911cd..000000000
--- a/samples/FriendPickerSample/AndroidManifest.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.friendpicker"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.NoTitleBar"
-                 android:name=".FriendPickerApplication"
-            >
-        <activity android:name="FriendPickerSampleActivity"
-                  android:label="@string/app_name"
-                  android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <activity android:name="PickFriendsActivity"
-                  android:label="Pick Friends">
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-</manifest>
diff --git a/samples/FriendPickerSample/FriendPickerSample.iml b/samples/FriendPickerSample/FriendPickerSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/FriendPickerSample/FriendPickerSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/FriendPickerSample/ant.properties b/samples/FriendPickerSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/FriendPickerSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/FriendPickerSample/build.xml b/samples/FriendPickerSample/build.xml
deleted file mode 100644
index 92f485560..000000000
--- a/samples/FriendPickerSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="FriendPickerSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/FriendPickerSample/proguard-project.txt b/samples/FriendPickerSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/FriendPickerSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/FriendPickerSample/project.properties b/samples/FriendPickerSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/FriendPickerSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/FriendPickerSample/res/drawable-hdpi/icon.png b/samples/FriendPickerSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 6a930c6c6..000000000
Binary files a/samples/FriendPickerSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/FriendPickerSample/res/drawable-mdpi/icon.png b/samples/FriendPickerSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 33b418b7a..000000000
Binary files a/samples/FriendPickerSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/FriendPickerSample/res/drawable-xhdpi/icon.png b/samples/FriendPickerSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 494e37a8d..000000000
Binary files a/samples/FriendPickerSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/FriendPickerSample/res/drawable/icon.png b/samples/FriendPickerSample/res/drawable/icon.png
deleted file mode 100644
index 33b418b7a..000000000
Binary files a/samples/FriendPickerSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/FriendPickerSample/res/layout/main.xml b/samples/FriendPickerSample/res/layout/main.xml
deleted file mode 100644
index 88d6f01df..000000000
--- a/samples/FriendPickerSample/res/layout/main.xml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-        >
-    <Button
-            android:id="@+id/pickFriendsButton"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:text="Pick Friends"
-            />
-    <TextView
-            android:id="@+id/resultsTextView"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:textColor="#FFFFFF"
-            />
-
-</LinearLayout>
-
diff --git a/samples/FriendPickerSample/res/layout/pick_friends_activity.xml b/samples/FriendPickerSample/res/layout/pick_friends_activity.xml
deleted file mode 100644
index b995978da..000000000
--- a/samples/FriendPickerSample/res/layout/pick_friends_activity.xml
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-        >
-    <FrameLayout
-            android:id="@+id/friend_picker_fragment"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            />
-</LinearLayout>
-
diff --git a/samples/FriendPickerSample/res/values/strings.xml b/samples/FriendPickerSample/res/values/strings.xml
deleted file mode 100644
index 747f98078..000000000
--- a/samples/FriendPickerSample/res/values/strings.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">FriendPickerSample</string>
-    <string name="app_id">370546396320150</string>
-    <string name="exception">Exception: %1$s</string>
-    <string name="ok_button">OK</string>
-</resources>
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
deleted file mode 100644
index e6563d2d2..000000000
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.friendpicker;
-
-import android.app.Application;
-import com.facebook.model.GraphUser;
-
-import java.util.Collection;
-
-// We use a custom Application class to store our minimal state data (which users have been selected).
-// A real-world application will likely require a more robust data model.
-public class FriendPickerApplication extends Application {
-    private Collection<GraphUser> selectedUsers;
-
-    public Collection<GraphUser> getSelectedUsers() {
-        return selectedUsers;
-    }
-
-    public void setSelectedUsers(Collection<GraphUser> selectedUsers) {
-        this.selectedUsers = selectedUsers;
-    }
-}
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
deleted file mode 100644
index 18634f13c..000000000
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.friendpicker;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.text.TextUtils;
-import android.view.View;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.SessionState;
-import com.facebook.UiLifecycleHelper;
-import com.facebook.model.GraphUser;
-import com.facebook.Session;
-
-import java.util.ArrayList;
-import java.util.Collection;
-
-public class FriendPickerSampleActivity extends FragmentActivity {
-    private static final int PICK_FRIENDS_ACTIVITY = 1;
-    private Button pickFriendsButton;
-    private TextView resultsTextView;
-    private UiLifecycleHelper lifecycleHelper;
-    boolean pickFriendsWhenSessionOpened;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-
-        resultsTextView = (TextView) findViewById(R.id.resultsTextView);
-        pickFriendsButton = (Button) findViewById(R.id.pickFriendsButton);
-        pickFriendsButton.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickPickFriends();
-            }
-        });
-
-        lifecycleHelper = new UiLifecycleHelper(this, new Session.StatusCallback() {
-            @Override
-            public void call(Session session, SessionState state, Exception exception) {
-                onSessionStateChanged(session, state, exception);
-            }
-        });
-        lifecycleHelper.onCreate(savedInstanceState);
-
-        ensureOpenSession();
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-
-        // Update the display every time we are started.
-        displaySelectedFriends(RESULT_OK);
-    }
-
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        switch (requestCode) {
-            case PICK_FRIENDS_ACTIVITY:
-                displaySelectedFriends(resultCode);
-                break;
-            default:
-                Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
-                break;
-        }
-    }
-
-    private boolean ensureOpenSession() {
-        if (Session.getActiveSession() == null ||
-                !Session.getActiveSession().isOpened()) {
-            Session.openActiveSession(this, true, new Session.StatusCallback() {
-                @Override
-                public void call(Session session, SessionState state, Exception exception) {
-                    onSessionStateChanged(session, state, exception);
-                }
-            });
-            return false;
-        }
-        return true;
-    }
-
-    private void onSessionStateChanged(Session session, SessionState state, Exception exception) {
-        if (pickFriendsWhenSessionOpened && state.isOpened()) {
-            pickFriendsWhenSessionOpened = false;
-
-            startPickFriendsActivity();
-        }
-    }
-
-    private void displaySelectedFriends(int resultCode) {
-        String results = "";
-        FriendPickerApplication application = (FriendPickerApplication) getApplication();
-
-        Collection<GraphUser> selection = application.getSelectedUsers();
-        if (selection != null && selection.size() > 0) {
-            ArrayList<String> names = new ArrayList<String>();
-            for (GraphUser user : selection) {
-                names.add(user.getName());
-            }
-            results = TextUtils.join(", ", names);
-        } else {
-            results = "<No friends selected>";
-        }
-
-        resultsTextView.setText(results);
-    }
-
-    private void onClickPickFriends() {
-        startPickFriendsActivity();
-    }
-
-    private void startPickFriendsActivity() {
-        if (ensureOpenSession()) {
-            FriendPickerApplication application = (FriendPickerApplication) getApplication();
-            application.setSelectedUsers(null);
-
-            Intent intent = new Intent(this, PickFriendsActivity.class);
-            // Note: The following line is optional, as multi-select behavior is the default for
-            // FriendPickerFragment. It is here to demonstrate how parameters could be passed to the
-            // friend picker if single-select functionality was desired, or if a different user ID was
-            // desired (for instance, to see friends of a friend).
-            PickFriendsActivity.populateParameters(intent, null, true, true);
-            startActivityForResult(intent, PICK_FRIENDS_ACTIVITY);
-        } else {
-            pickFriendsWhenSessionOpened = true;
-        }
-    }
-}
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
deleted file mode 100644
index 720706315..000000000
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.friendpicker;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.widget.Toast;
-import com.facebook.FacebookException;
-import com.facebook.widget.FriendPickerFragment;
-import com.facebook.widget.PickerFragment;
-
-// This class provides an example of an Activity that uses FriendPickerFragment to display a list of
-// the user's friends. It takes a programmatic approach to creating the FriendPickerFragment with the
-// desired parameters -- see PickPlaceActivity in the PlacePickerSample project for an example of an
-// Activity creating a fragment (in this case a PlacePickerFragment) via XML layout rather than
-// programmatically.
-public class PickFriendsActivity extends FragmentActivity {
-    FriendPickerFragment friendPickerFragment;
-
-    // A helper to simplify life for callers who want to populate a Bundle with the necessary
-    // parameters. A more sophisticated Activity might define its own set of parameters; our needs
-    // are simple, so we just populate what we want to pass to the FriendPickerFragment.
-    public static void populateParameters(Intent intent, String userId, boolean multiSelect, boolean showTitleBar) {
-        intent.putExtra(FriendPickerFragment.USER_ID_BUNDLE_KEY, userId);
-        intent.putExtra(FriendPickerFragment.MULTI_SELECT_BUNDLE_KEY, multiSelect);
-        intent.putExtra(FriendPickerFragment.SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.pick_friends_activity);
-
-        FragmentManager fm = getSupportFragmentManager();
-
-        if (savedInstanceState == null) {
-            // First time through, we create our fragment programmatically.
-            final Bundle args = getIntent().getExtras();
-            friendPickerFragment = new FriendPickerFragment(args);
-            fm.beginTransaction()
-                    .add(R.id.friend_picker_fragment, friendPickerFragment)
-                    .commit();
-        } else {
-            // Subsequent times, our fragment is recreated by the framework and already has saved and
-            // restored its state, so we don't need to specify args again. (In fact, this might be
-            // incorrect if the fragment was modified programmatically since it was created.)
-            friendPickerFragment = (FriendPickerFragment) fm.findFragmentById(R.id.friend_picker_fragment);
-        }
-
-        friendPickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-            @Override
-            public void onError(PickerFragment<?> fragment, FacebookException error) {
-                PickFriendsActivity.this.onError(error);
-            }
-        });
-
-        friendPickerFragment.setOnDoneButtonClickedListener(new PickerFragment.OnDoneButtonClickedListener() {
-            @Override
-            public void onDoneButtonClicked(PickerFragment<?> fragment) {
-                // We just store our selection in the Application for other activities to look at.
-                FriendPickerApplication application = (FriendPickerApplication) getApplication();
-                application.setSelectedUsers(friendPickerFragment.getSelection());
-
-                setResult(RESULT_OK, null);
-                finish();
-            }
-        });
-    }
-
-    private void onError(Exception error) {
-        String text = getString(R.string.exception, error.getMessage());
-        Toast toast = Toast.makeText(this, text, Toast.LENGTH_SHORT);
-        toast.show();
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        try {
-            // Load data, unless a query has already taken place.
-            friendPickerFragment.loadData(false);
-        } catch (Exception ex) {
-            onError(ex);
-        }
-    }
-}
diff --git a/samples/GraphApiSample/.classpath b/samples/GraphApiSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/GraphApiSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/GraphApiSample/.project b/samples/GraphApiSample/.project
deleted file mode 100644
index ff735cf87..000000000
--- a/samples/GraphApiSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>GraphApiSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/GraphApiSample/AndroidManifest.xml b/samples/GraphApiSample/AndroidManifest.xml
deleted file mode 100644
index 3647ce9a0..000000000
--- a/samples/GraphApiSample/AndroidManifest.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.samples.graphapi"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-
-    <application
-        android:icon="@drawable/icon"
-        android:label="@string/app_name" >
-        <activity
-            android:name=".GraphApiSampleActivity"
-            android:label="@string/app_name"
-            android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-    </application>
-
-</manifest>
diff --git a/samples/GraphApiSample/GraphApiSample.iml b/samples/GraphApiSample/GraphApiSample.iml
deleted file mode 100644
index 7a46ab734..000000000
--- a/samples/GraphApiSample/GraphApiSample.iml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/GraphApiSample/ant.properties b/samples/GraphApiSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/GraphApiSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/GraphApiSample/build.xml b/samples/GraphApiSample/build.xml
deleted file mode 100644
index b2456a58c..000000000
--- a/samples/GraphApiSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="GraphApiSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env" />
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME" />
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/samples/GraphApiSample/proguard-project.txt b/samples/GraphApiSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/GraphApiSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/GraphApiSample/project.properties b/samples/GraphApiSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/GraphApiSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/GraphApiSample/res/drawable-hdpi/icon.png b/samples/GraphApiSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index a888af1c6..000000000
Binary files a/samples/GraphApiSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable-mdpi/icon.png b/samples/GraphApiSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 2275c8571..000000000
Binary files a/samples/GraphApiSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable-xhdpi/icon.png b/samples/GraphApiSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 31201f160..000000000
Binary files a/samples/GraphApiSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable/icon.png b/samples/GraphApiSample/res/drawable/icon.png
deleted file mode 100644
index 2275c8571..000000000
Binary files a/samples/GraphApiSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/layout/main.xml b/samples/GraphApiSample/res/layout/main.xml
deleted file mode 100644
index 8ebf7e229..000000000
--- a/samples/GraphApiSample/res/layout/main.xml
+++ /dev/null
@@ -1,44 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <EditText
-        android:id="@+id/editRequests"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:ems="10" >
-
-        <requestFocus />
-    </EditText>
-
-    <Button
-        android:id="@+id/buttonRequest"
-        android:layout_width="122dp"
-        android:layout_height="wrap_content"
-        android:text="@string/request" />
-
-    <TextView
-        android:id="@+id/textViewResults"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textAppearance="?android:attr/textAppearanceLarge" />
-
-</LinearLayout>
diff --git a/samples/GraphApiSample/res/values/strings.xml b/samples/GraphApiSample/res/values/strings.xml
deleted file mode 100644
index 025d17499..000000000
--- a/samples/GraphApiSample/res/values/strings.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-
-    <string name="hello">Hello World, GraphApiSampleActivity!</string>
-    <string name="app_name">GraphApiSample</string>
-    <string name="request">Request</string>
-    <string name="instructions">Login to create a link to fetch account data</string>
-    <string name="logout">Log out</string>
-    <string name="login_failed_dialog_title">Login failed</string>
-    <string name="ok_button">OK</string>
-
-</resources>
diff --git a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java b/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
deleted file mode 100644
index bcd1e36eb..000000000
--- a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.graphapi;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import com.facebook.*;
-import com.facebook.Session.StatusCallback;
-import com.facebook.model.GraphObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class GraphApiSampleActivity extends Activity {
-    static final String appId = "307234779396415";
-    static final String PENDING_REQUEST_BUNDLE_KEY = "com.facebook.samples.graphapi:PendingRequest";
-
-    Button buttonRequest;
-    EditText editRequests;
-    TextView textViewResults;
-    Session session;
-    boolean pendingRequest;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        this.buttonRequest = (Button) findViewById(R.id.buttonRequest);
-        this.buttonRequest.setOnClickListener(new OnClickListener() {
-            public void onClick(View view) {
-                onClickRequest();
-            }
-        });
-        this.editRequests = (EditText) findViewById(R.id.editRequests);
-        this.textViewResults = (TextView) findViewById(R.id.textViewResults);
-
-        this.session = createSession();
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-    }
-
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (this.session.onActivityResult(this, requestCode, resultCode, data) &&
-                pendingRequest &&
-                this.session.getState().isOpened()) {
-            sendRequests();
-        }
-    }
-
-    @Override
-    protected void onRestoreInstanceState(Bundle savedInstanceState) {
-        super.onRestoreInstanceState(savedInstanceState);
-
-        pendingRequest = savedInstanceState.getBoolean(PENDING_REQUEST_BUNDLE_KEY, pendingRequest);
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        outState.putBoolean(PENDING_REQUEST_BUNDLE_KEY, pendingRequest);
-    }
-
-    private void onClickRequest() {
-        if (this.session.isOpened()) {
-            sendRequests();
-        } else {
-            StatusCallback callback = new StatusCallback() {
-                public void call(Session session, SessionState state, Exception exception) {
-                    if (exception != null) {
-                        new AlertDialog.Builder(GraphApiSampleActivity.this)
-                                .setTitle(R.string.login_failed_dialog_title)
-                                .setMessage(exception.getMessage())
-                                .setPositiveButton(R.string.ok_button, null)
-                                .show();
-                        GraphApiSampleActivity.this.session = createSession();
-                    }
-                }
-            };
-            pendingRequest = true;
-            this.session.openForRead(new Session.OpenRequest(this).setCallback(callback));
-        }
-    }
-
-    private void sendRequests() {
-        textViewResults.setText("");
-
-        String requestIdsText = editRequests.getText().toString();
-        String[] requestIds = requestIdsText.split(",");
-
-        List<Request> requests = new ArrayList<Request>();
-        for (final String requestId : requestIds) {
-            requests.add(new Request(session, requestId, null, null, new Request.Callback() {
-                public void onCompleted(Response response) {
-                    GraphObject graphObject = response.getGraphObject();
-                    FacebookRequestError error = response.getError();
-                    String s = textViewResults.getText().toString();
-                    if (graphObject != null) {
-                        if (graphObject.getProperty("id") != null) {
-                            s = s + String.format("%s: %s\n", graphObject.getProperty("id"), graphObject.getProperty(
-                                    "name"));
-                        } else {
-                            s = s + String.format("%s: <no such id>\n", requestId);
-                        }
-                    } else if (error != null) {
-                        s = s + String.format("Error: %s", error.getErrorMessage());
-                    }
-                    textViewResults.setText(s);
-                }
-            }));
-        }
-        pendingRequest = false;
-        Request.executeBatchAndWait(requests);
-    }
-
-    private Session createSession() {
-        Session activeSession = Session.getActiveSession();
-        if (activeSession == null || activeSession.getState().isClosed()) {
-            activeSession = new Session.Builder(this).setApplicationId(appId).build();
-            Session.setActiveSession(activeSession);
-        }
-        return activeSession;
-    }
-}
diff --git a/samples/HelloFacebookSample/.classpath b/samples/HelloFacebookSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/HelloFacebookSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/HelloFacebookSample/.project b/samples/HelloFacebookSample/.project
deleted file mode 100644
index d2609b030..000000000
--- a/samples/HelloFacebookSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>HelloFacebookSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
deleted file mode 100644
index 246d0de24..000000000
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.hellofacebook"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.NoTitleBar"
-            >
-        <activity android:name=".HelloFacebookSampleActivity"
-                  android:label="@string/app_name"
-                  android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-</manifest>
diff --git a/samples/HelloFacebookSample/HelloFacebookSample.iml b/samples/HelloFacebookSample/HelloFacebookSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/HelloFacebookSample/HelloFacebookSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/HelloFacebookSample/ant.properties b/samples/HelloFacebookSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/HelloFacebookSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/HelloFacebookSample/build.xml b/samples/HelloFacebookSample/build.xml
deleted file mode 100644
index 3c65e4a79..000000000
--- a/samples/HelloFacebookSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="HelloFacebookSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/HelloFacebookSample/proguard-project.txt b/samples/HelloFacebookSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/HelloFacebookSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/HelloFacebookSample/project.properties b/samples/HelloFacebookSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/HelloFacebookSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/HelloFacebookSample/res/drawable-hdpi/icon.png b/samples/HelloFacebookSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index e603120e1..000000000
Binary files a/samples/HelloFacebookSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/HelloFacebookSample/res/drawable-mdpi/icon.png b/samples/HelloFacebookSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index f2fc84fb6..000000000
Binary files a/samples/HelloFacebookSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png b/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 143a69f21..000000000
Binary files a/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/HelloFacebookSample/res/drawable/icon.png b/samples/HelloFacebookSample/res/drawable/icon.png
deleted file mode 100644
index f2fc84fb6..000000000
Binary files a/samples/HelloFacebookSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/HelloFacebookSample/res/layout/main.xml b/samples/HelloFacebookSample/res/layout/main.xml
deleted file mode 100644
index eec36fcb0..000000000
--- a/samples/HelloFacebookSample/res/layout/main.xml
+++ /dev/null
@@ -1,91 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:facebook="http://schemas.android.com/apk/res-auto"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-              android:background="#FFF"
-        >
-    <LinearLayout android:orientation="vertical"
-                  android:layout_width="fill_parent"
-                  android:layout_height="fill_parent"
-                  android:background="#FFF"
-                  android:id="@+id/main_ui_container">
-        <com.facebook.widget.LoginButton
-                android:id="@+id/login_button"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="5dp"
-                facebook:confirm_logout="false"
-                facebook:fetch_user_info="true"
-                />
-        <LinearLayout
-                android:layout_width="150dp"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center_horizontal"
-                android:gravity="center_horizontal"
-                android:orientation="vertical">
-            <TextView
-                    android:id="@+id/greeting"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_marginLeft="10dp"
-                    android:layout_gravity="center"
-                    android:textColor="#333"
-                    android:textSize="18sp"/>
-            <com.facebook.widget.ProfilePictureView
-                    android:id="@+id/profilePicture"
-                    android:layout_height="wrap_content"
-                    android:layout_width="wrap_content"
-                    android:gravity="center_horizontal"
-                    android:layout_marginBottom="10dp"
-                    facebook:preset_size="normal"/>
-            <Button
-                    android:id="@+id/postStatusUpdateButton"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content"
-                    android:text="Post Status Update"
-                    />
-            <Button
-                    android:id="@+id/postPhotoButton"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content"
-                    android:text="Post Photo"
-                    />
-            <Button
-                    android:id="@+id/pickFriendsButton"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content"
-                    android:text="Pick Some Friends"
-                    />
-            <Button
-                    android:id="@+id/pickPlaceButton"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content"
-                    android:text="Pick Place"
-                    />
-        </LinearLayout>
-    </LinearLayout>
-    <FrameLayout
-            android:id="@+id/fragment_container"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-</LinearLayout>
-
diff --git a/samples/HelloFacebookSample/res/values/strings.xml b/samples/HelloFacebookSample/res/values/strings.xml
deleted file mode 100644
index ccacbf600..000000000
--- a/samples/HelloFacebookSample/res/values/strings.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">HelloFacebookSample</string>
-    <string name="cancelled">Cancelled</string>
-    <string name="permission_not_granted">Unable to perform selected action because permissions were not granted.</string>
-    <string name="ok">OK</string>
-    <string name="hello_user">Hello %1$s!</string>
-    <string name="success">Success</string>
-    <string name="successfully_posted_post">Successfully posted \'%1$s\'.\nPost ID: %2$s</string>
-    <string name="error">Error</string>
-    <string name="status_update">Updating status for %1$s at %2$s</string>
-    <string name="photo_post">Photo Post</string>
-    <string name="you_picked">You picked:</string>
-    <string name="no_friends_selected">&lt;No friends selected&gt;</string>
-    <string name="no_place_selected">&lt;No place selected&gt;</string>
-    <string name="pick_seattle_place">Pick a Seattle Place</string>
-    <string name="app_id">355198514515820</string>
-    <string name="exception">Exception: %1$s</string>
-</resources>
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
deleted file mode 100644
index f012f7ef9..000000000
--- a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
+++ /dev/null
@@ -1,479 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.hellofacebook;
-
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.location.Location;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.TextView;
-import android.widget.Toast;
-import com.facebook.*;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphPlace;
-import com.facebook.model.GraphUser;
-import com.facebook.widget.*;
-
-import java.util.*;
-
-public class HelloFacebookSampleActivity extends FragmentActivity {
-
-    private static final String PERMISSION = "publish_actions";
-    private static final Location SEATTLE_LOCATION = new Location("") {
-        {
-            setLatitude(47.6097);
-            setLongitude(-122.3331);
-        }
-    };
-
-    private final String PENDING_ACTION_BUNDLE_KEY = "com.facebook.samples.hellofacebook:PendingAction";
-
-    private Button postStatusUpdateButton;
-    private Button postPhotoButton;
-    private Button pickFriendsButton;
-    private Button pickPlaceButton;
-    private LoginButton loginButton;
-    private ProfilePictureView profilePictureView;
-    private TextView greeting;
-    private PendingAction pendingAction = PendingAction.NONE;
-    private ViewGroup controlsContainer;
-    private GraphUser user;
-    private GraphPlace place;
-    private List<GraphUser> tags;
-    private boolean canPresentShareDialog;
-
-    private enum PendingAction {
-        NONE,
-        POST_PHOTO,
-        POST_STATUS_UPDATE
-    }
-    private UiLifecycleHelper uiHelper;
-
-    private Session.StatusCallback callback = new Session.StatusCallback() {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            onSessionStateChange(session, state, exception);
-        }
-    };
-
-    private FacebookDialog.Callback dialogCallback = new FacebookDialog.Callback() {
-        @Override
-        public void onError(FacebookDialog.PendingCall pendingCall, Exception error, Bundle data) {
-            Log.d("HelloFacebook", String.format("Error: %s", error.toString()));
-        }
-
-        @Override
-        public void onComplete(FacebookDialog.PendingCall pendingCall, Bundle data) {
-            Log.d("HelloFacebook", "Success!");
-        }
-    };
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        uiHelper = new UiLifecycleHelper(this, callback);
-        uiHelper.onCreate(savedInstanceState);
-
-        if (savedInstanceState != null) {
-            String name = savedInstanceState.getString(PENDING_ACTION_BUNDLE_KEY);
-            pendingAction = PendingAction.valueOf(name);
-        }
-
-        setContentView(R.layout.main);
-
-        loginButton = (LoginButton) findViewById(R.id.login_button);
-        loginButton.setUserInfoChangedCallback(new LoginButton.UserInfoChangedCallback() {
-            @Override
-            public void onUserInfoFetched(GraphUser user) {
-                HelloFacebookSampleActivity.this.user = user;
-                updateUI();
-                // It's possible that we were waiting for this.user to be populated in order to post a
-                // status update.
-                handlePendingAction();
-            }
-        });
-
-        profilePictureView = (ProfilePictureView) findViewById(R.id.profilePicture);
-        greeting = (TextView) findViewById(R.id.greeting);
-
-        postStatusUpdateButton = (Button) findViewById(R.id.postStatusUpdateButton);
-        postStatusUpdateButton.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickPostStatusUpdate();
-            }
-        });
-
-        postPhotoButton = (Button) findViewById(R.id.postPhotoButton);
-        postPhotoButton.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickPostPhoto();
-            }
-        });
-
-        pickFriendsButton = (Button) findViewById(R.id.pickFriendsButton);
-        pickFriendsButton.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickPickFriends();
-            }
-        });
-
-        pickPlaceButton = (Button) findViewById(R.id.pickPlaceButton);
-        pickPlaceButton.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickPickPlace();
-            }
-        });
-
-        controlsContainer = (ViewGroup) findViewById(R.id.main_ui_container);
-
-        final FragmentManager fm = getSupportFragmentManager();
-        Fragment fragment = fm.findFragmentById(R.id.fragment_container);
-        if (fragment != null) {
-            // If we're being re-created and have a fragment, we need to a) hide the main UI controls and
-            // b) hook up its listeners again.
-            controlsContainer.setVisibility(View.GONE);
-            if (fragment instanceof FriendPickerFragment) {
-                setFriendPickerListeners((FriendPickerFragment) fragment);
-            } else if (fragment instanceof PlacePickerFragment) {
-                setPlacePickerListeners((PlacePickerFragment) fragment);
-            }
-        }
-
-        // Listen for changes in the back stack so we know if a fragment got popped off because the user
-        // clicked the back button.
-        fm.addOnBackStackChangedListener(new FragmentManager.OnBackStackChangedListener() {
-            @Override
-            public void onBackStackChanged() {
-                if (fm.getBackStackEntryCount() == 0) {
-                    // We need to re-show our UI.
-                    controlsContainer.setVisibility(View.VISIBLE);
-                }
-            }
-        });
-
-        canPresentShareDialog = FacebookDialog.canPresentShareDialog(this,
-                FacebookDialog.ShareDialogFeature.SHARE_DIALOG);
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        uiHelper.onResume();
-
-        updateUI();
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        uiHelper.onSaveInstanceState(outState);
-
-        outState.putString(PENDING_ACTION_BUNDLE_KEY, pendingAction.name());
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        uiHelper.onActivityResult(requestCode, resultCode, data, dialogCallback);
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        uiHelper.onPause();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        uiHelper.onDestroy();
-    }
-
-    private void onSessionStateChange(Session session, SessionState state, Exception exception) {
-        if (pendingAction != PendingAction.NONE &&
-                (exception instanceof FacebookOperationCanceledException ||
-                exception instanceof FacebookAuthorizationException)) {
-                new AlertDialog.Builder(HelloFacebookSampleActivity.this)
-                    .setTitle(R.string.cancelled)
-                    .setMessage(R.string.permission_not_granted)
-                    .setPositiveButton(R.string.ok, null)
-                    .show();
-            pendingAction = PendingAction.NONE;
-        } else if (state == SessionState.OPENED_TOKEN_UPDATED) {
-            handlePendingAction();
-        }
-        updateUI();
-    }
-
-    private void updateUI() {
-        Session session = Session.getActiveSession();
-        boolean enableButtons = (session != null && session.isOpened());
-
-        postStatusUpdateButton.setEnabled(enableButtons || canPresentShareDialog);
-        postPhotoButton.setEnabled(enableButtons);
-        pickFriendsButton.setEnabled(enableButtons);
-        pickPlaceButton.setEnabled(enableButtons);
-
-        if (enableButtons && user != null) {
-            profilePictureView.setProfileId(user.getId());
-            greeting.setText(getString(R.string.hello_user, user.getFirstName()));
-        } else {
-            profilePictureView.setProfileId(null);
-            greeting.setText(null);
-        }
-    }
-
-    @SuppressWarnings("incomplete-switch")
-    private void handlePendingAction() {
-        PendingAction previouslyPendingAction = pendingAction;
-        // These actions may re-set pendingAction if they are still pending, but we assume they
-        // will succeed.
-        pendingAction = PendingAction.NONE;
-
-        switch (previouslyPendingAction) {
-            case POST_PHOTO:
-                postPhoto();
-                break;
-            case POST_STATUS_UPDATE:
-                postStatusUpdate();
-                break;
-        }
-    }
-
-    private interface GraphObjectWithId extends GraphObject {
-        String getId();
-    }
-
-    private void showPublishResult(String message, GraphObject result, FacebookRequestError error) {
-        String title = null;
-        String alertMessage = null;
-        if (error == null) {
-            title = getString(R.string.success);
-            String id = result.cast(GraphObjectWithId.class).getId();
-            alertMessage = getString(R.string.successfully_posted_post, message, id);
-        } else {
-            title = getString(R.string.error);
-            alertMessage = error.getErrorMessage();
-        }
-
-        new AlertDialog.Builder(this)
-                .setTitle(title)
-                .setMessage(alertMessage)
-                .setPositiveButton(R.string.ok, null)
-                .show();
-    }
-
-    private void onClickPostStatusUpdate() {
-        performPublish(PendingAction.POST_STATUS_UPDATE, canPresentShareDialog);
-    }
-
-    private FacebookDialog.ShareDialogBuilder createShareDialogBuilder() {
-        return new FacebookDialog.ShareDialogBuilder(this)
-                .setName("Hello Facebook")
-                .setDescription("The 'Hello Facebook' sample application showcases simple Facebook integration")
-                .setLink("http://developers.facebook.com/android");
-    }
-
-    private void postStatusUpdate() {
-        if (canPresentShareDialog) {
-            FacebookDialog shareDialog = createShareDialogBuilder().build();
-            uiHelper.trackPendingDialogCall(shareDialog.present());
-        } else if (user != null && hasPublishPermission()) {
-            final String message = getString(R.string.status_update, user.getFirstName(), (new Date().toString()));
-            Request request = Request
-                    .newStatusUpdateRequest(Session.getActiveSession(), message, place, tags, new Request.Callback() {
-                        @Override
-                        public void onCompleted(Response response) {
-                            showPublishResult(message, response.getGraphObject(), response.getError());
-                        }
-                    });
-            request.executeAsync();
-        } else {
-            pendingAction = PendingAction.POST_STATUS_UPDATE;
-        }
-    }
-
-    private void onClickPostPhoto() {
-        performPublish(PendingAction.POST_PHOTO, false);
-    }
-
-    private void postPhoto() {
-        if (hasPublishPermission()) {
-            Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
-            Request request = Request.newUploadPhotoRequest(Session.getActiveSession(), image, new Request.Callback() {
-                @Override
-                public void onCompleted(Response response) {
-                    showPublishResult(getString(R.string.photo_post), response.getGraphObject(), response.getError());
-                }
-            });
-            request.executeAsync();
-        } else {
-            pendingAction = PendingAction.POST_PHOTO;
-        }
-    }
-
-    private void showPickerFragment(PickerFragment<?> fragment) {
-        fragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-            @Override
-            public void onError(PickerFragment<?> pickerFragment, FacebookException error) {
-                String text = getString(R.string.exception, error.getMessage());
-                Toast toast = Toast.makeText(HelloFacebookSampleActivity.this, text, Toast.LENGTH_SHORT);
-                toast.show();
-            }
-        });
-
-        FragmentManager fm = getSupportFragmentManager();
-        fm.beginTransaction()
-                .replace(R.id.fragment_container, fragment)
-                .addToBackStack(null)
-                .commit();
-
-        controlsContainer.setVisibility(View.GONE);
-
-        // We want the fragment fully created so we can use it immediately.
-        fm.executePendingTransactions();
-
-        fragment.loadData(false);
-    }
-
-    private void onClickPickFriends() {
-        final FriendPickerFragment fragment = new FriendPickerFragment();
-
-        setFriendPickerListeners(fragment);
-
-        showPickerFragment(fragment);
-    }
-
-    private void setFriendPickerListeners(final FriendPickerFragment fragment) {
-        fragment.setOnDoneButtonClickedListener(new FriendPickerFragment.OnDoneButtonClickedListener() {
-            @Override
-            public void onDoneButtonClicked(PickerFragment<?> pickerFragment) {
-                onFriendPickerDone(fragment);
-            }
-        });
-    }
-
-    private void onFriendPickerDone(FriendPickerFragment fragment) {
-        FragmentManager fm = getSupportFragmentManager();
-        fm.popBackStack();
-
-        String results = "";
-
-        List<GraphUser> selection = fragment.getSelection();
-        tags = selection;
-        if (selection != null && selection.size() > 0) {
-            ArrayList<String> names = new ArrayList<String>();
-            for (GraphUser user : selection) {
-                names.add(user.getName());
-            }
-            results = TextUtils.join(", ", names);
-        } else {
-            results = getString(R.string.no_friends_selected);
-        }
-
-        showAlert(getString(R.string.you_picked), results);
-    }
-
-    private void onPlacePickerDone(PlacePickerFragment fragment) {
-        FragmentManager fm = getSupportFragmentManager();
-        fm.popBackStack();
-
-        String result = "";
-
-        GraphPlace selection = fragment.getSelection();
-        if (selection != null) {
-            result = selection.getName();
-        } else {
-            result = getString(R.string.no_place_selected);
-        }
-
-        place = selection;
-
-        showAlert(getString(R.string.you_picked), result);
-    }
-
-    private void onClickPickPlace() {
-        final PlacePickerFragment fragment = new PlacePickerFragment();
-        fragment.setLocation(SEATTLE_LOCATION);
-        fragment.setTitleText(getString(R.string.pick_seattle_place));
-
-        setPlacePickerListeners(fragment);
-
-        showPickerFragment(fragment);
-    }
-
-    private void setPlacePickerListeners(final PlacePickerFragment fragment) {
-        fragment.setOnDoneButtonClickedListener(new PlacePickerFragment.OnDoneButtonClickedListener() {
-            @Override
-            public void onDoneButtonClicked(PickerFragment<?> pickerFragment) {
-                onPlacePickerDone(fragment);
-            }
-        });
-        fragment.setOnSelectionChangedListener(new PlacePickerFragment.OnSelectionChangedListener() {
-            @Override
-            public void onSelectionChanged(PickerFragment<?> pickerFragment) {
-                if (fragment.getSelection() != null) {
-                    onPlacePickerDone(fragment);
-                }
-            }
-        });
-    }
-
-    private void showAlert(String title, String message) {
-        new AlertDialog.Builder(this)
-                .setTitle(title)
-                .setMessage(message)
-                .setPositiveButton(R.string.ok, null)
-                .show();
-    }
-
-    private boolean hasPublishPermission() {
-        Session session = Session.getActiveSession();
-        return session != null && session.getPermissions().contains("publish_actions");
-    }
-
-    private void performPublish(PendingAction action, boolean allowNoSession) {
-        Session session = Session.getActiveSession();
-        if (session != null) {
-            pendingAction = action;
-            if (hasPublishPermission()) {
-                // We can do the action right away.
-                handlePendingAction();
-                return;
-            } else if (session.isOpened()) {
-                // We need to get new permissions, then complete the action when we get called back.
-                session.requestNewPublishPermissions(new Session.NewPermissionsRequest(this, PERMISSION));
-                return;
-            }
-        }
-
-        if (allowNoSession) {
-            pendingAction = action;
-            handlePendingAction();
-        }
-    }
-}
diff --git a/samples/PlacePickerSample/.classpath b/samples/PlacePickerSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/PlacePickerSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/PlacePickerSample/.project b/samples/PlacePickerSample/.project
deleted file mode 100644
index 06b88d35e..000000000
--- a/samples/PlacePickerSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>PlacePickerSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/PlacePickerSample/AndroidManifest.xml b/samples/PlacePickerSample/AndroidManifest.xml
deleted file mode 100644
index b0697ff65..000000000
--- a/samples/PlacePickerSample/AndroidManifest.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.placepicker"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.Black"
-                 android:name=".PlacePickerApplication"
-            >
-        <activity android:name="PlacePickerSampleActivity"
-                  android:label="@string/app_name"
-                  android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <activity android:name="PickPlaceActivity"
-                  android:label="Pick Place">
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-</manifest> 
diff --git a/samples/PlacePickerSample/PlacePickerSample.iml b/samples/PlacePickerSample/PlacePickerSample.iml
deleted file mode 100644
index 2e07730b5..000000000
--- a/samples/PlacePickerSample/PlacePickerSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/PlacePickerSample/ant.properties b/samples/PlacePickerSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/PlacePickerSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/PlacePickerSample/build.xml b/samples/PlacePickerSample/build.xml
deleted file mode 100644
index a80f395cd..000000000
--- a/samples/PlacePickerSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="PlacePickerSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/PlacePickerSample/proguard-project.txt b/samples/PlacePickerSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/PlacePickerSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/PlacePickerSample/project.properties b/samples/PlacePickerSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/PlacePickerSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/PlacePickerSample/res/drawable-hdpi/icon.png b/samples/PlacePickerSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 4059334b5..000000000
Binary files a/samples/PlacePickerSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/PlacePickerSample/res/drawable-mdpi/icon.png b/samples/PlacePickerSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 1fa3834d0..000000000
Binary files a/samples/PlacePickerSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/PlacePickerSample/res/drawable-xhdpi/icon.png b/samples/PlacePickerSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 2b3083d44..000000000
Binary files a/samples/PlacePickerSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/PlacePickerSample/res/drawable/icon.png b/samples/PlacePickerSample/res/drawable/icon.png
deleted file mode 100644
index 1fa3834d0..000000000
Binary files a/samples/PlacePickerSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/PlacePickerSample/res/layout/main.xml b/samples/PlacePickerSample/res/layout/main.xml
deleted file mode 100644
index a6a270f91..000000000
--- a/samples/PlacePickerSample/res/layout/main.xml
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-        >
-    <LinearLayout android:layout_width="fill_parent"
-                  android:layout_height="wrap_content"
-                  android:orientation="horizontal"
-            >
-        <Button
-                android:id="@+id/seattleButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="Seattle"
-                android:layout_weight="1"
-                />
-        <Button
-                android:id="@+id/sanFranciscoButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="San Francisco"
-                android:layout_weight="1"
-                />
-        <Button
-                android:id="@+id/gpsButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="GPS"
-                android:layout_weight="1"
-                />
-    </LinearLayout>
-    <TextView
-            android:id="@+id/resultsTextView"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:textColor="#FFFFFF"
-            />
-</LinearLayout>
-
diff --git a/samples/PlacePickerSample/res/layout/pick_place_activity.xml b/samples/PlacePickerSample/res/layout/pick_place_activity.xml
deleted file mode 100644
index 357bf5a99..000000000
--- a/samples/PlacePickerSample/res/layout/pick_place_activity.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:app="http://schemas.android.com/apk/res-auto"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-        >
-    <fragment
-            android:id="@+id/place_picker_fragment"
-            android:name="com.facebook.widget.PlacePickerFragment"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            app:show_pictures="true"
-            app:show_title_bar="true"
-            app:show_search_box="true"
-            />
-</LinearLayout>
-
diff --git a/samples/PlacePickerSample/res/values/strings.xml b/samples/PlacePickerSample/res/values/strings.xml
deleted file mode 100644
index 8cb17be6b..000000000
--- a/samples/PlacePickerSample/res/values/strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">PlacePickerSample</string>
-    <string name="app_id">378281678861098</string>
-    <string name="exception">Exception: %1$s</string>
-    <string name="ok_button">OK</string>
-    <string name="no_location">Could not obtain your current location.</string>
-</resources>
diff --git a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PickPlaceActivity.java b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PickPlaceActivity.java
deleted file mode 100644
index 4e1f2ed18..000000000
--- a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PickPlaceActivity.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.placepicker;
-
-import android.content.Intent;
-import android.location.Location;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.widget.Toast;
-import com.facebook.FacebookException;
-import com.facebook.widget.PickerFragment;
-import com.facebook.widget.PlacePickerFragment;
-
-// This class provides an example of an Activity that uses PlacePickerFragment to display a list of
-// the places. It takes a layout-based approach to creating the PlacePickerFragment with the
-// desired parameters -- see PickFriendActivity in the FriendPickerSample project for an example of an
-// Activity creating a fragment (in this case a FriendPickerFragment) programmatically rather than
-// via XML layout.
-public class PickPlaceActivity extends FragmentActivity {
-    PlacePickerFragment placePickerFragment;
-
-    // A helper to simplify life for callers who want to populate a Bundle with the necessary
-    // parameters. A more sophisticated Activity might define its own set of parameters; our needs
-    // are simple, so we just populate what we want to pass to the PlacePickerFragment.
-    public static void populateParameters(Intent intent, Location location, String searchText) {
-        intent.putExtra(PlacePickerFragment.LOCATION_BUNDLE_KEY, location);
-        intent.putExtra(PlacePickerFragment.SEARCH_TEXT_BUNDLE_KEY, searchText);
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.pick_place_activity);
-
-        FragmentManager fm = getSupportFragmentManager();
-        placePickerFragment = (PlacePickerFragment) fm.findFragmentById(R.id.place_picker_fragment);
-        if (savedInstanceState == null) {
-            // If this is the first time we have created the fragment, update its properties based on
-            // any parameters we received via our Intent.
-            placePickerFragment.setSettingsFromBundle(getIntent().getExtras());
-        }
-
-        placePickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-            @Override
-            public void onError(PickerFragment<?> fragment, FacebookException error) {
-                PickPlaceActivity.this.onError(error);
-            }
-        });
-
-        // We finish the activity when either the Done button is pressed or when a place is
-        // selected (since only a single place can be selected).
-        placePickerFragment.setOnSelectionChangedListener(new PickerFragment.OnSelectionChangedListener() {
-            @Override
-            public void onSelectionChanged(PickerFragment<?> fragment) {
-                if (placePickerFragment.getSelection() != null) {
-                    finishActivity();
-                }
-            }
-        });
-        placePickerFragment.setOnDoneButtonClickedListener(new PickerFragment.OnDoneButtonClickedListener() {
-            @Override
-            public void onDoneButtonClicked(PickerFragment<?> fragment) {
-                finishActivity();
-            }
-        });
-    }
-
-    private void finishActivity() {
-        // We just store our selection in the Application for other activities to look at.
-        PlacePickerApplication application = (PlacePickerApplication) getApplication();
-        application.setSelectedPlace(placePickerFragment.getSelection());
-
-        setResult(RESULT_OK, null);
-        finish();
-    }
-
-    private void onError(Exception error) {
-        String text = getString(R.string.exception, error.getMessage());
-        Toast toast = Toast.makeText(this, text, Toast.LENGTH_SHORT);
-        toast.show();
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        try {
-            // Load data, unless a query has already taken place.
-            placePickerFragment.loadData(false);
-        } catch (Exception ex) {
-            onError(ex);
-        }
-    }
-}
diff --git a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerApplication.java b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerApplication.java
deleted file mode 100644
index bf3d3514a..000000000
--- a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerApplication.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.placepicker;
-
-import android.app.Application;
-import com.facebook.model.GraphPlace;
-
-// We use a custom Application class to store our minimal state data (which users have been selected).
-// A real-world application will likely require a more robust data model.
-public class PlacePickerApplication extends Application {
-    public GraphPlace getSelectedPlace() {
-        return selectedPlace;
-    }
-
-    public void setSelectedPlace(GraphPlace selectedPlace) {
-        this.selectedPlace = selectedPlace;
-    }
-
-    private GraphPlace selectedPlace;
-
-}
diff --git a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
deleted file mode 100644
index 185280771..000000000
--- a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
+++ /dev/null
@@ -1,265 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.placepicker;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.view.View;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.SessionState;
-import com.facebook.UiLifecycleHelper;
-import com.facebook.model.GraphLocation;
-import com.facebook.model.GraphPlace;
-import com.facebook.Session;
-
-public class PlacePickerSampleActivity extends FragmentActivity implements LocationListener {
-    private static final int PLACE_ACTIVITY = 1;
-    private static final Location SEATTLE_LOCATION = new Location("") {
-        {
-            setLatitude(47.6097);
-            setLongitude(-122.3331);
-        }
-    };
-    private static final Location SAN_FRANCISCO_LOCATION = new Location("") {
-        {
-            setLatitude(37.7750);
-            setLongitude(-122.4183);
-        }
-    };
-    private static final Location PARIS_LOCATION = new Location("") {
-        {
-            setLatitude(48.857875);
-            setLongitude(2.294635);
-        }
-    };
-
-    private TextView resultsTextView;
-    private LocationManager locationManager;
-    private Location lastKnownLocation;
-    private UiLifecycleHelper lifecycleHelper;
-    private Location pickPlaceForLocationWhenSessionOpened = null;
-
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-
-        resultsTextView = (TextView) findViewById(R.id.resultsTextView);
-        Button button = (Button) findViewById(R.id.seattleButton);
-        button.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickSeattle();
-            }
-        });
-
-        button = (Button) findViewById(R.id.sanFranciscoButton);
-        button.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickSanFrancisco();
-            }
-        });
-
-        button = (Button) findViewById(R.id.gpsButton);
-        button.setOnClickListener(new View.OnClickListener() {
-            public void onClick(View view) {
-                onClickGPS();
-            }
-        });
-
-        lifecycleHelper = new UiLifecycleHelper(this, new Session.StatusCallback() {
-            @Override
-            public void call(Session session, SessionState state, Exception exception) {
-                onSessionStateChanged(session, state, exception);
-            }
-        });
-        lifecycleHelper.onCreate(savedInstanceState);
-
-        ensureOpenSession();
-
-        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
-    }
-
-    private boolean ensureOpenSession() {
-        if (Session.getActiveSession() == null ||
-                !Session.getActiveSession().isOpened()) {
-            Session.openActiveSession(this, true, new Session.StatusCallback() {
-                @Override
-                public void call(Session session, SessionState state, Exception exception) {
-                    onSessionStateChanged(session, state, exception);
-                }
-            });
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-
-        // Update the display every time we are started (this will be "no place selected" on first
-        // run, or possibly details of a place if the activity is being re-created).
-        displaySelectedPlace(RESULT_OK);
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        lifecycleHelper.onDestroy();
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        lifecycleHelper.onPause();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        lifecycleHelper.onResume();
-    }
-
-    private void onError(Exception exception) {
-        AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        builder.setTitle("Error").setMessage(exception.getMessage()).setPositiveButton("OK", null);
-        builder.show();
-    }
-
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        lifecycleHelper.onActivityResult(requestCode, resultCode, data);
-
-        switch (requestCode) {
-            case PLACE_ACTIVITY:
-                displaySelectedPlace(resultCode);
-                break;
-            default:
-                break;
-        }
-    }
-
-    private void onSessionStateChanged(Session session, SessionState state, Exception exception) {
-        if (pickPlaceForLocationWhenSessionOpened != null && state.isOpened()) {
-            Location location = pickPlaceForLocationWhenSessionOpened;
-            pickPlaceForLocationWhenSessionOpened = null;
-            startPickPlaceActivity(location);
-        }
-    }
-
-    private void displaySelectedPlace(int resultCode) {
-        String results = "";
-        PlacePickerApplication application = (PlacePickerApplication) getApplication();
-
-        GraphPlace selection = application.getSelectedPlace();
-        if (selection != null) {
-            GraphLocation location = selection.getLocation();
-
-            results = String.format("Name: %s\nCategory: %s\nLocation: (%f,%f)\nStreet: %s, %s, %s, %s, %s",
-                    selection.getName(), selection.getCategory(),
-                    location.getLatitude(), location.getLongitude(),
-                    location.getStreet(), location.getCity(), location.getState(), location.getZip(),
-                    location.getCountry());
-        } else {
-            results = "<No place selected>";
-        }
-
-        resultsTextView.setText(results);
-    }
-
-    public void onLocationChanged(Location location) {
-        lastKnownLocation = location;
-    }
-
-    @Override
-    public void onStatusChanged(String provider, int status, Bundle extras) {
-    }
-
-    @Override
-    public void onProviderEnabled(String provider) {
-    }
-
-    @Override
-    public void onProviderDisabled(String provider) {
-    }
-
-    private void startPickPlaceActivity(Location location) {
-        if (ensureOpenSession()) {
-            PlacePickerApplication application = (PlacePickerApplication) getApplication();
-            application.setSelectedPlace(null);
-
-            Intent intent = new Intent(this, PickPlaceActivity.class);
-            PickPlaceActivity.populateParameters(intent, location, null);
-
-            startActivityForResult(intent, PLACE_ACTIVITY);
-        } else {
-            pickPlaceForLocationWhenSessionOpened = location;
-        }
-    }
-
-    private void onClickSeattle() {
-        try {
-            startPickPlaceActivity(SEATTLE_LOCATION);
-        } catch (Exception ex) {
-            onError(ex);
-        }
-    }
-
-    private void onClickSanFrancisco() {
-        try {
-            startPickPlaceActivity(SAN_FRANCISCO_LOCATION);
-        } catch (Exception ex) {
-            onError(ex);
-        }
-    }
-
-    private void onClickGPS() {
-        try {
-            if (lastKnownLocation == null) {
-                Criteria criteria = new Criteria();
-                String bestProvider = locationManager.getBestProvider(criteria, false);
-                if (bestProvider != null) {
-                    lastKnownLocation = locationManager.getLastKnownLocation(bestProvider);
-                }
-            }
-            if (lastKnownLocation == null) {
-                String model = android.os.Build.MODEL;
-                if (model.equals("sdk") || model.equals("google_sdk") || model.contains("x86")) {
-                    // Looks like they are on an emulator, pretend we're in Paris if we don't have a
-                    // location set.
-                    lastKnownLocation = PARIS_LOCATION;
-                } else {
-                    onError(new Exception(getString(R.string.no_location)));
-                    return;
-                }
-            }
-            startPickPlaceActivity(lastKnownLocation);
-        } catch (Exception ex) {
-            onError(ex);
-        }
-    }
-
-}
diff --git a/samples/ProfilePictureSample/.classpath b/samples/ProfilePictureSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/ProfilePictureSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/ProfilePictureSample/.project b/samples/ProfilePictureSample/.project
deleted file mode 100644
index 2b2339321..000000000
--- a/samples/ProfilePictureSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>ProfilePictureSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/ProfilePictureSample/AndroidManifest.xml b/samples/ProfilePictureSample/AndroidManifest.xml
deleted file mode 100644
index 907d05754..000000000
--- a/samples/ProfilePictureSample/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.profilepicture"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon" >
-        <activity
-                android:name=".ProfilePictureSampleActivity"
-                android:label="@string/app_name"
-                android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-</manifest> 
diff --git a/samples/ProfilePictureSample/ProfilePictureSample.iml b/samples/ProfilePictureSample/ProfilePictureSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/ProfilePictureSample/ProfilePictureSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/ProfilePictureSample/ant.properties b/samples/ProfilePictureSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/ProfilePictureSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/ProfilePictureSample/build.xml b/samples/ProfilePictureSample/build.xml
deleted file mode 100644
index 3454adc93..000000000
--- a/samples/ProfilePictureSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="ProfilePictureSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/ProfilePictureSample/proguard-project.txt b/samples/ProfilePictureSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/ProfilePictureSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/ProfilePictureSample/project.properties b/samples/ProfilePictureSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/ProfilePictureSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/ProfilePictureSample/res/drawable-hdpi/icon.png b/samples/ProfilePictureSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 1bc72b1bf..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable-mdpi/icon.png b/samples/ProfilePictureSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index e0de1a4ba..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png b/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 1bc4b231d..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable/icon.png b/samples/ProfilePictureSample/res/drawable/icon.png
deleted file mode 100644
index e0de1a4ba..000000000
Binary files a/samples/ProfilePictureSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml b/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml
deleted file mode 100644
index 8797e28be..000000000
--- a/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<fragment xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@+id/profilePictureSampleFragment"
-          android:layout_width="match_parent"
-          android:layout_height="match_parent"
-          android:name="com.facebook.samples.profilepicture.ProfilePictureSampleFragment"
-        />
diff --git a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml b/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
deleted file mode 100644
index 8bb4921c5..000000000
--- a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
+++ /dev/null
@@ -1,152 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-            xmlns:app="http://schemas.android.com/apk/res-auto"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        >
-<LinearLayout
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-        >
-    <TextView
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/description"
-            android:layout_marginBottom="15dp"
-            />
-    <LinearLayout
-            android:layout_height="wrap_content"
-            android:layout_width="match_parent"
-            android:layout_marginBottom="15dp"
-            android:orientation="horizontal">
-        <LinearLayout
-                android:id="@+id/presetSizeView"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                android:orientation="horizontal"
-                >
-            <Button
-                    android:id="@+id/smallerButton"
-                    android:layout_height="40dp"
-                    android:layout_width="40dp"
-                    android:layout_weight="0"
-                    android:text="@string/smaller_button_text"
-                    android:textSize="18dp"
-                    />
-            <Button
-                    android:id="@+id/largerButton"
-                    android:layout_height="40dp"
-                    android:layout_width="40dp"
-                    android:layout_weight="0"
-                    android:text="@string/larger_button_text"
-                    android:textSize="18dp"
-                    android:enabled="false"
-                    />
-            <TextView
-                    android:id="@+id/sizeLabel"
-                    android:layout_height="40dp"
-                    android:layout_width="0dp"
-                    android:layout_weight="1"
-                    android:paddingLeft="10dp"
-                    android:text="@string/large_image_size"
-                    android:textSize="18dp"
-                    />
-        </LinearLayout>
-        <SeekBar
-                android:id="@+id/customSizeView"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                android:orientation="horizontal"
-                android:visibility="gone"
-                />
-        <Button
-                android:id="@+id/sizeToggle"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="10dp"
-                android:text="@string/custom_size_button_text"
-                />
-    </LinearLayout>
-    <LinearLayout
-            android:orientation="horizontal"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="10dp"
-            android:layout_marginBottom="10dp"
-            >
-        <com.facebook.widget.ProfilePictureView
-                android:id="@+id/profilepic"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                app:preset_size="large"
-                app:is_cropped="true"
-                />
-        <LinearLayout
-                android:id="@+id/userbuttoncontainer"
-                android:orientation="vertical"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="right"
-                >
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_chris_name"
-                    android:tag="chris.lang.92123"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_ming_name"
-                    android:tag="mingfli"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_karthik_name"
-                    android:tag="ksubraman"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_random_name"
-                    />
-
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_none_name"
-                    android:tag=""
-                    />
-        </LinearLayout>
-    </LinearLayout>
-
-    <CheckBox
-            android:id="@+id/squareCropToggle"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/cropping_label"
-            android:checked="true"
-            />
-</LinearLayout>
-</ScrollView>
diff --git a/samples/ProfilePictureSample/res/values/strings.xml b/samples/ProfilePictureSample/res/values/strings.xml
deleted file mode 100644
index bde7903ad..000000000
--- a/samples/ProfilePictureSample/res/values/strings.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">ProfilePictureSample</string>
-    <string name="description">Sample app demonstrating the use of ProfilePictureView</string>
-    <string name="cropping_label">Show cropped version</string>
-    <string name="crop_original_button_text">Original</string>
-    <string name="crop_square_button_text">Square</string>
-    <string name="user_chris_name">Chris</string>
-    <string name="user_ming_name">Ming</string>
-    <string name="user_karthik_name">Karthik</string>
-    <string name="user_random_name">Random</string>
-    <string name="user_none_name">None</string>
-    <string name="smaller_button_text">-</string>
-    <string name="larger_button_text">+</string>
-    <string name="large_image_size">Large</string>
-    <string name="normal_image_size">Normal</string>
-    <string name="small_image_size">Small</string>
-    <string name="preset_size_button_text">Use preset size</string>
-    <string name="custom_size_button_text">Use custom size</string>
-</resources>
diff --git a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java b/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java
deleted file mode 100644
index dc2b12efa..000000000
--- a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.profilepicture;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-
-public class ProfilePictureSampleActivity extends FragmentActivity {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_profile_picture_sample);
-    }
-}
diff --git a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java b/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java
deleted file mode 100644
index b80ca2eff..000000000
--- a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java
+++ /dev/null
@@ -1,314 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.profilepicture;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import com.facebook.widget.ProfilePictureView;
-
-import java.util.Date;
-import java.util.Random;
-
-public class ProfilePictureSampleFragment extends Fragment {
-
-    // Keeping the number of custom sizes low to prevent excessive network chatter.
-    private static final int MAX_CUSTOM_SIZES = 6;
-    private static final int DEFAULT_SIZE_INCREMENT = MAX_CUSTOM_SIZES / 2;
-    private static final String PICTURE_SIZE_TYPE_KEY = "PictureSizeType";
-
-    private static final String[] INTERESTING_IDS = {
-        "zuck",
-        // Recent Presidents and nominees
-        "barackobama",
-        "mittromney",
-        "johnmccain",
-        "johnkerry",
-        "georgewbush",
-        "algore",
-        // Places too!
-        "Disneyland",
-        "SpaceNeedle",
-        "TourEiffel",
-        "sydneyoperahouse",
-        // A selection of 1986 Mets
-        "166020963458360",
-        "108084865880237",
-        "140447466087679",
-        "111825495501392",
-        // The cast of Saved by the Bell
-        "108168249210849",
-        "TiffaniThiessen",
-        "108126672542534",
-        "112886105391693",
-        "MarioLopezExtra",
-        "108504145837165",
-        "dennishaskins",
-        // Eighties bands that have been to Moscow
-        "7220821999",
-        "31938132882",
-        "108023262558391",
-        "209263392372",
-        "104132506290482",
-        "9721897972",
-        "5461947317",
-        "57084011597",
-        // Three people that have never been in my kitchen
-        "24408579964",
-        "111980872152571",
-        "112427772106500",
-        // Trusted anchormen
-        "113415525338717",
-        "105628452803615",
-        "105533779480538",
-    };
-
-    private int pictureSizeType = ProfilePictureView.CUSTOM;
-    private String firstUserId;
-    private Random randomGenerator;
-
-    private ProfilePictureView profilePic;
-    private Button smallerButton;
-    private Button largerButton;
-    private TextView sizeLabel;
-    private View presetSizeView;
-    private SeekBar customSizeView;
-    private CheckBox cropToggle;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {
-        View fragmentView = inflater.inflate(R.layout.fragment_profile_picture_sample, parent, false);
-
-        randomGenerator = new Random((new Date()).getTime());
-
-        profilePic = (ProfilePictureView) fragmentView.findViewById(R.id.profilepic);
-        smallerButton = (Button) fragmentView.findViewById(R.id.smallerButton);
-        largerButton = (Button) fragmentView.findViewById(R.id.largerButton);
-        sizeLabel = (TextView) fragmentView.findViewById(R.id.sizeLabel);
-        presetSizeView = fragmentView.findViewById(R.id.presetSizeView);
-        customSizeView = (SeekBar) fragmentView.findViewById(R.id.customSizeView);
-        cropToggle = (CheckBox) fragmentView.findViewById(R.id.squareCropToggle);
-
-        LinearLayout container = (LinearLayout) fragmentView.findViewById(R.id.userbuttoncontainer);
-        int numChildren = container.getChildCount();
-        for (int i = 0; i < numChildren; i++) {
-            View childView = container.getChildAt(i);
-            Object tag = childView.getTag();
-            if (childView instanceof Button) {
-                setupUserButton((Button)childView);
-                if (i == 0) {
-                    // Initialize the image to the first user
-                    firstUserId = tag.toString();
-                }
-            }
-        }
-
-        cropToggle.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {
-            @Override
-            public void onCheckedChanged(CompoundButton checkbox, boolean checked) {
-                profilePic.setCropped(checked);
-            }
-        });
-
-        final Button sizeToggle = (Button) fragmentView.findViewById(R.id.sizeToggle);
-        sizeToggle.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (pictureSizeType != ProfilePictureView.CUSTOM) {
-                    sizeToggle.setText(R.string.preset_size_button_text);
-                    switchToCustomSize();
-                } else {
-                    sizeToggle.setText(R.string.custom_size_button_text);
-                    switchToPresetSize(ProfilePictureView.LARGE);
-                }
-            }
-        });
-
-        smallerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                switch(profilePic.getPresetSize()) {
-                    case ProfilePictureView.LARGE:
-                        switchToPresetSize(ProfilePictureView.NORMAL);
-                        break;
-                    case ProfilePictureView.NORMAL:
-                        switchToPresetSize(ProfilePictureView.SMALL);
-                        break;
-                }
-            }
-        });
-
-        largerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                switch(profilePic.getPresetSize()) {
-                    case ProfilePictureView.NORMAL:
-                        switchToPresetSize(ProfilePictureView.LARGE);
-                        break;
-                    case ProfilePictureView.SMALL:
-                        switchToPresetSize(ProfilePictureView.NORMAL);
-                        break;
-                }
-            }
-        });
-
-        // We will fetch a new image for each change in the SeekBar. So keeping the count low
-        // to prevent too much network chatter. SeekBar reports 0-max, so we will get max+1
-        // notifications of change.
-        customSizeView.setMax(MAX_CUSTOM_SIZES);
-        customSizeView.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
-            @Override
-            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
-                updateProfilePicForCustomSizeIncrement(i);
-            }
-
-            @Override
-            public void onStartTrackingTouch(SeekBar seekBar) {
-                // NO-OP
-            }
-
-            @Override
-            public void onStopTrackingTouch(SeekBar seekBar) {
-                // NO-OP
-            }
-        });
-
-        restoreState(savedInstanceState);
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        // Store the size type since we will use that to switch the Fragment's UI
-        // between CUSTOM & PRESET modes
-        // Other state (userId & isCropped) will be saved/restored directly by
-        // ProfilePictureView
-        outState.putInt(PICTURE_SIZE_TYPE_KEY, pictureSizeType);
-    }
-
-    private void restoreState(Bundle savedInstanceState) {
-        if (savedInstanceState != null) {
-            // Is we have saved state, restore the Fragment to it.
-            // UserId & isCropped will be restored directly by ProfilePictureView
-            pictureSizeType = savedInstanceState.getInt(
-                    PICTURE_SIZE_TYPE_KEY, ProfilePictureView.LARGE);
-
-            if (pictureSizeType == ProfilePictureView.CUSTOM) {
-                switchToCustomSize();
-            } else {
-                switchToPresetSize(pictureSizeType);
-            }
-        } else {
-            // No saved state. Let's go to a default state
-            switchToPresetSize(ProfilePictureView.LARGE);
-            profilePic.setCropped(cropToggle.isChecked());
-
-            // Setting userId last so that only one network request is sent
-            profilePic.setProfileId(firstUserId);
-        }
-    }
-
-    private void setupUserButton(Button b) {
-        b.setOnClickListener(new Button.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Object tag = v.getTag();
-                String userId = null;
-                if (tag != null) {
-                    userId = tag.toString();
-                } else {
-                    // Random id.
-                    userId = INTERESTING_IDS[randomGenerator.nextInt(INTERESTING_IDS.length)];
-                }
-                profilePic.setProfileId(userId);
-            }
-        });
-    }
-
-    private void switchToCustomSize() {
-        pictureSizeType = ProfilePictureView.CUSTOM;
-        presetSizeView.setVisibility(View.GONE);
-        customSizeView.setVisibility(View.VISIBLE);
-
-        profilePic.setPresetSize(pictureSizeType);
-
-        customSizeView.setProgress(DEFAULT_SIZE_INCREMENT);
-        updateProfilePicForCustomSizeIncrement(DEFAULT_SIZE_INCREMENT);
-    }
-
-    private void switchToPresetSize(int sizeType) {
-        customSizeView.setVisibility(View.GONE);
-        presetSizeView.setVisibility(View.VISIBLE);
-
-        switch(sizeType) {
-            case ProfilePictureView.SMALL:
-                largerButton.setEnabled(true);
-                smallerButton.setEnabled(false);
-                sizeLabel.setText(R.string.small_image_size);
-                pictureSizeType = sizeType;
-                break;
-            case ProfilePictureView.NORMAL:
-                largerButton.setEnabled(true);
-                smallerButton.setEnabled(true);
-                sizeLabel.setText(R.string.normal_image_size);
-                pictureSizeType = sizeType;
-                break;
-            case ProfilePictureView.LARGE:
-            default:
-                largerButton.setEnabled(false);
-                smallerButton.setEnabled(true);
-                sizeLabel.setText(R.string.large_image_size);
-                pictureSizeType = ProfilePictureView.LARGE;
-                break;
-        }
-
-        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                0,
-                ViewGroup.LayoutParams.WRAP_CONTENT,
-                1
-        );
-
-        profilePic.setLayoutParams(params);
-        profilePic.setPresetSize(pictureSizeType);
-    }
-
-    private void updateProfilePicForCustomSizeIncrement(int i) {
-        if (pictureSizeType != ProfilePictureView.CUSTOM) {
-            return;
-        }
-
-        // This will ensure a minimum size of 51x68 and will scale the image at
-        // a ratio of 3:4 (w:h) as the SeekBar is moved.
-        //
-        // Completely arbitrary
-        //
-        // NOTE: The numbers are in dips.
-        float width = (i * 21) + 51;
-        float height = (i * 28) + 68;
-
-        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                (int)(width * getResources().getDisplayMetrics().density),
-                (int)(height * getResources().getDisplayMetrics().density));
-        profilePic.setLayoutParams(params);
-    }
-}
diff --git a/samples/RPSSample/.classpath b/samples/RPSSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/RPSSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/RPSSample/.project b/samples/RPSSample/.project
deleted file mode 100644
index 48ef59ca8..000000000
--- a/samples/RPSSample/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>RPSSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
deleted file mode 100644
index ed5066d49..000000000
--- a/samples/RPSSample/AndroidManifest.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.rps"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.NoTitleBar"
-            >
-        <activity android:name="MainActivity"
-                  android:label="@string/app_name"
-                  android:screenOrientation="portrait"
-                  android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <activity android:name="FriendActivity"
-                  android:label="@string/app_name" />
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <provider android:authorities="com.facebook.app.NativeAppCallContentProvider157578437735213"
-                  android:name="com.facebook.NativeAppCallContentProvider" />
-    </application>
-</manifest>
diff --git a/samples/RPSSample/RPSSample.iml b/samples/RPSSample/RPSSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/RPSSample/RPSSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/RPSSample/ant.properties b/samples/RPSSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/RPSSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/RPSSample/build.xml b/samples/RPSSample/build.xml
deleted file mode 100644
index ce90427bf..000000000
--- a/samples/RPSSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="RPSSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/RPSSample/post_app_objects.sh b/samples/RPSSample/post_app_objects.sh
deleted file mode 100755
index bda156e45..000000000
--- a/samples/RPSSample/post_app_objects.sh
+++ /dev/null
@@ -1,123 +0,0 @@
-#!/bin/sh
-#
-# Copyright 2010-present Facebook.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-# 
-#    http://www.apache.org/licenses/LICENSE-2.0
-# 
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-# Note: Use of this script requires Perl
-
-#
-# step 1 - confirm we have an app id and app secret to work with
-#
-
-if [ -z "$APPID" ]
-then
-  echo '$APPID must be exported and set to the application id for the sample before running this script'
-  exit 1
-fi
-
-if [ -z "$APPSECRET" ]
-then
-  echo '$APPSECRET must be exported set to the app secret for the sample before running this script'
-  exit 1
-fi
-
-#
-# step 2 - stage images and capture their URIs in variables
-#
-
-echo curling...
-
-ROCK_IMAGE_URI=` \
-  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_rock.png;type=image/png' \
-  | perl -ne '/"uri":"(.*)"}/ && print $1' `
-
-PAPER_IMAGE_URI=` \
-  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_paper.png;type=image/png' \
-  | perl -ne '/"uri":"(.*)"}/ && print $1' `
-
-SCISSORS_IMAGE_URI=` \
-  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_scissors.png;type=image/png' \
-  | perl -ne '/"uri":"(.*)"}/ && print $1' `
-
-echo "created staged resources..."
-echo "  rock=$ROCK_IMAGE_URI"
-echo "  paper=$PAPER_IMAGE_URI"
-echo "  scissors=$SCISSORS_IMAGE_URI"
-
-#
-# step 3 - create objects and capture their IDs in variables
-#
-
-# rock
-ROCK_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Rock\",\"description\":\"Breaks scissors, alas is covered by paper.\",\"image\":\"$ROCK_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
-  | perl -ne '/"id":"(.*)"}/ && print $1' `
-
-# paper
-PAPER_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Paper\",\"description\":\"Covers rock, sadly scissors cut it.\",\"image\":\"$PAPER_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
-  | perl -ne '/"id":"(.*)"}/ && print $1' `
-
-# scissors
-SCISSORS_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Scissors\",\"description\":\"Cuts paper, broken by rock -- bother.\",\"image\":\"$SCISSORS_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
-  | perl -ne '/"id":"(.*)"}/ && print $1' `
-
-#
-# step 4 - echo progress
-#
-
-echo "created application objects..."
-echo "  rock=$ROCK_OBJID"
-echo "  paper=$PAPER_OBJID"
-echo "  scissors=$SCISSORS_OBJID"
-
-#
-# step 5 - write .java file for common objects
-#
-
-MFILE=src/com/facebook/samples/rps/CommonObjects.java
-
-cat > $MFILE << EOF
-/*
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.rps;
-
-public class CommonObjects {
-    public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
-            "$ROCK_OBJID", // rock
-            "$PAPER_OBJID", // paper
-            "$SCISSORS_OBJID"  // scissors
-    };
-}
-
-EOF
-
-echo "created $MFILE ..."
-echo done.
diff --git a/samples/RPSSample/proguard-project.txt b/samples/RPSSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/RPSSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/RPSSample/project.properties b/samples/RPSSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/RPSSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/RPSSample/res/drawable-hdpi/icon.png b/samples/RPSSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 5bc5b2cea..000000000
Binary files a/samples/RPSSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable-mdpi/icon.png b/samples/RPSSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index f621e908c..000000000
Binary files a/samples/RPSSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable-xhdpi/icon.png b/samples/RPSSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 1adb6bfa3..000000000
Binary files a/samples/RPSSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/app_background.xml b/samples/RPSSample/res/drawable/app_background.xml
deleted file mode 100644
index af7a20a63..000000000
--- a/samples/RPSSample/res/drawable/app_background.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-Copyright 2010-present Facebook.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
--->
-
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
-    <item>
-        <shape xmlns:android="http://schemas.android.com/apk/res/android"
-                android:shape="rectangle">
-            <solid android:color="#ccc" />
-        </shape>
-    </item>
-    <item android:top="390dp">
-        <shape android:shape="rectangle">
-            <solid android:color="#999" />
-        </shape>
-    </item>
-</layer-list>
\ No newline at end of file
diff --git a/samples/RPSSample/res/drawable/fb_logo.png b/samples/RPSSample/res/drawable/fb_logo.png
deleted file mode 100755
index b4b29948c..000000000
Binary files a/samples/RPSSample/res/drawable/fb_logo.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/icon.png b/samples/RPSSample/res/drawable/icon.png
deleted file mode 100644
index f621e908c..000000000
Binary files a/samples/RPSSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/icon_border.xml b/samples/RPSSample/res/drawable/icon_border.xml
deleted file mode 100644
index 89eedd647..000000000
--- a/samples/RPSSample/res/drawable/icon_border.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
-    <solid android:color="#FFF" />
-    <corners android:radius="10dp" />
-    <padding android:bottom="2dp" android:left="2dp" android:right="2dp" android:top="2dp" />
-    <stroke android:width="2px" android:color="@color/text_color" />
-</shape>
\ No newline at end of file
diff --git a/samples/RPSSample/res/drawable/left_paper.png b/samples/RPSSample/res/drawable/left_paper.png
deleted file mode 100755
index 7336fd246..000000000
Binary files a/samples/RPSSample/res/drawable/left_paper.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/left_rock.png b/samples/RPSSample/res/drawable/left_rock.png
deleted file mode 100755
index bee7abe89..000000000
Binary files a/samples/RPSSample/res/drawable/left_rock.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/left_scissors.png b/samples/RPSSample/res/drawable/left_scissors.png
deleted file mode 100755
index dac525200..000000000
Binary files a/samples/RPSSample/res/drawable/left_scissors.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/right_paper.png b/samples/RPSSample/res/drawable/right_paper.png
deleted file mode 100755
index d243567a9..000000000
Binary files a/samples/RPSSample/res/drawable/right_paper.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/right_rock.png b/samples/RPSSample/res/drawable/right_rock.png
deleted file mode 100755
index 9168b4b74..000000000
Binary files a/samples/RPSSample/res/drawable/right_rock.png and /dev/null differ
diff --git a/samples/RPSSample/res/drawable/right_scissors.png b/samples/RPSSample/res/drawable/right_scissors.png
deleted file mode 100755
index 083c47590..000000000
Binary files a/samples/RPSSample/res/drawable/right_scissors.png and /dev/null differ
diff --git a/samples/RPSSample/res/layout/content_fragment.xml b/samples/RPSSample/res/layout/content_fragment.xml
deleted file mode 100644
index 43e8e3662..000000000
--- a/samples/RPSSample/res/layout/content_fragment.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:id="@+id/content_group"
-              android:layout_height="match_parent"
-              android:layout_width="match_parent"
-              android:background="#FFF"
-              android:orientation="vertical">
-
-    <TextView android:id="@+id/content_title"
-              android:layout_height="wrap_content"
-              android:layout_width="wrap_content"
-              android:layout_gravity="center_horizontal"
-              android:paddingTop="20dp"
-              android:textColor="@color/text_color"
-              android:textSize="@dimen/text_size"/>
-
-    <ImageView android:id="@+id/content_image"
-               android:layout_height="wrap_content"
-               android:layout_width="wrap_content"
-               android:layout_gravity="center_horizontal"
-               android:padding="20dp" />
-
-
-    <Button android:id="@+id/content_play_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:text="@string/play"
-            android:background="@drawable/icon_border"
-            style="@style/again_button_style" />
-</LinearLayout>
diff --git a/samples/RPSSample/res/layout/friend_activity_row.xml b/samples/RPSSample/res/layout/friend_activity_row.xml
deleted file mode 100644
index 26b3b2daa..000000000
--- a/samples/RPSSample/res/layout/friend_activity_row.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="horizontal"
-              android:background="#fff">
-
-    <TextView android:id="@+id/friend_action_date"
-              android:layout_height="wrap_content"
-              android:layout_width="match_parent"
-              android:layout_weight="1"
-              android:textSize="12sp"
-              android:textColor="#000"/>
-
-    <TextView android:id="@+id/friend_game_result"
-              android:layout_height="wrap_content"
-              android:layout_width="match_parent"
-              android:layout_weight="1"
-              android:textSize="12sp"
-              android:textColor="#000"/>
-
-</LinearLayout>
diff --git a/samples/RPSSample/res/layout/friends_activity.xml b/samples/RPSSample/res/layout/friends_activity.xml
deleted file mode 100644
index 5efcb34f9..000000000
--- a/samples/RPSSample/res/layout/friends_activity.xml
+++ /dev/null
@@ -1,82 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:id="@+id/friends_group"
-              android:layout_height="match_parent"
-              android:layout_width="match_parent"
-              android:background="#FFF"
-              android:orientation="vertical">
-
-    <TextView android:layout_height="wrap_content"
-              android:layout_width="match_parent"
-              android:textColor="#000"
-              android:textSize="20sp"
-              android:text="@string/friends_using_rps"/>
-
-    <View android:id="@+id/friend_separator"
-          android:layout_width="match_parent"
-          android:layout_height="1dp"
-          android:background="#000"/>
-
-    <fragment android:name="com.facebook.widget.FriendPickerFragment"
-              android:id="@+id/friend_fragment"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:layout_weight="1"/>
-
-    <TextView android:layout_height="wrap_content"
-              android:layout_width="match_parent"
-              android:textColor="#000"
-              android:textSize="20sp"
-              android:text="@string/friend_activity"/>
-
-    <View android:id="@+id/friend_activity_separator"
-          android:layout_width="match_parent"
-          android:layout_height="1dp"
-          android:background="#000"/>
-
-    <FrameLayout android:layout_height="match_parent"
-                 android:layout_width="match_parent"
-                 android:layout_weight="1">
-
-        <ListView android:id="@+id/friend_activity_list"
-                  android:layout_height="match_parent"
-                  android:layout_width="match_parent"/>
-
-        <ProgressBar android:id="@+id/friend_activity_progress_bar"
-                     android:layout_width="wrap_content"
-                     android:layout_height="wrap_content"
-                     android:layout_gravity="center"
-                     android:indeterminate="true"
-                     style="@android:style/Widget.ProgressBar"
-                     android:layout_centerInParent="true"
-                     android:visibility="gone"/>
-
-    </FrameLayout>
-
-    <Button android:id="@+id/invite_button"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:padding="10dp"
-            android:layout_margin="20dp"
-            android:text="@string/invite_friends"
-            android:background="@drawable/icon_border" />
-
-
-</LinearLayout>
diff --git a/samples/RPSSample/res/layout/main.xml b/samples/RPSSample/res/layout/main.xml
deleted file mode 100644
index 475b06051..000000000
--- a/samples/RPSSample/res/layout/main.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        android:orientation="vertical"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
-
-    <fragment android:name="com.facebook.samples.rps.RpsFragment"
-              android:id="@+id/rps_fragment"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent" />
-    <fragment android:name="com.facebook.widget.UserSettingsFragment"
-              android:id="@+id/settings_fragment"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent" />
-    <fragment android:name="com.facebook.samples.rps.ContentFragment"
-              android:id="@+id/content_fragment"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent" />
-
-</LinearLayout>
-
diff --git a/samples/RPSSample/res/layout/rps_fragment.xml b/samples/RPSSample/res/layout/rps_fragment.xml
deleted file mode 100644
index 491e9fe66..000000000
--- a/samples/RPSSample/res/layout/rps_fragment.xml
+++ /dev/null
@@ -1,209 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:id="@+id/game_group"
-              android:orientation="vertical"
-              android:layout_height="match_parent"
-              android:layout_width="match_parent"
-              android:background="@drawable/app_background">
-
-
-    <TextView android:layout_height="wrap_content"
-              android:layout_width="wrap_content"
-              android:id="@+id/text_rock"
-              android:textColor="@color/text_color"
-              android:textSize="@dimen/text_size"
-              android:layout_gravity="left"
-              android:layout_marginLeft="@dimen/margin_left"
-              android:layout_marginTop="20dp"
-              android:text="@string/rock" />
-
-    <TextView android:layout_height="wrap_content"
-              android:layout_width="wrap_content"
-              android:id="@+id/text_paper"
-              android:textColor="@color/text_color"
-              android:textSize="@dimen/text_size"
-              android:layout_gravity="center"
-              android:text="@string/paper"/>
-
-    <TextView android:layout_height="wrap_content"
-              android:layout_width="wrap_content"
-              android:id="@+id/text_scissors"
-              android:textColor="@color/text_color"
-              android:textSize="@dimen/text_size"
-              android:layout_gravity="right"
-              android:layout_marginRight="@dimen/margin_right"
-              android:layout_marginBottom="20dp"
-              android:text="@string/scissors"/>
-
-    <FrameLayout
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="@dimen/margin_left"
-            android:layout_marginRight="@dimen/margin_right"
-            android:layout_marginTop="10dp"
-            android:layout_marginBottom="10dp"
-            android:layout_gravity="center_horizontal|center_vertical">
-        <RelativeLayout
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:id="@+id/shoot_display_group">
-            <TextView android:id="@+id/shoot"
-                      android:layout_height="wrap_content"
-                      android:layout_width="wrap_content"
-                      android:layout_gravity="left"
-                      android:textColor="@color/text_color"
-                      android:textSize="@dimen/text_size"
-                      android:text="@string/shoot"
-                      android:layout_alignParentLeft="true"
-                      android:layout_centerVertical="true" />
-            <ViewFlipper
-                    android:layout_width="@dimen/image_width"
-                    android:layout_height="@dimen/image_height"
-                    android:id="@+id/rps_flipper"
-                    android:layout_alignParentLeft="false"
-                    android:layout_alignParentRight="true"
-                    android:layout_centerVertical="true"
-                    android:layout_alignParentBottom="false"
-                    android:flipInterval="150"
-                    android:autoStart="true">
-                <ImageView
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:id="@+id/flipper_view1"
-                        android:scaleType="fitCenter"
-                        android:src="@drawable/right_rock"/>
-                <ImageView
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:id="@+id/flipper_view2"
-                        android:scaleType="fitCenter"
-                        android:src="@drawable/right_paper"/>
-                <ImageView
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:id="@+id/flipper_view3"
-                        android:scaleType="fitCenter"
-                        android:src="@drawable/right_scissors"/>
-            </ViewFlipper>
-        </RelativeLayout>
-        <RelativeLayout
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:id="@+id/result_display_group">
-            <ImageView
-                    android:layout_width="@dimen/image_width"
-                    android:layout_height="@dimen/image_height"
-                    android:id="@+id/player_choice"
-                    android:scaleType="fitCenter"
-                    android:layout_alignParentLeft="true"
-                    android:layout_centerVertical="true"
-                    android:src="@drawable/right_paper"/>
-            <TextView android:id="@+id/who_won"
-                      android:layout_height="wrap_content"
-                      android:layout_width="wrap_content"
-                      android:layout_gravity="left"
-                      android:textColor="@color/text_color"
-                      android:textSize="@dimen/text_size"
-                      android:text=""
-                      android:layout_centerHorizontal="true"
-                      android:layout_centerVertical="true" />
-            <ImageView
-                    android:layout_width="@dimen/image_width"
-                    android:layout_height="@dimen/image_height"
-                    android:id="@+id/computer_choice"
-                    android:scaleType="fitCenter"
-                    android:layout_alignParentRight="true"
-                    android:layout_centerVertical="true"
-                    android:src="@drawable/right_rock"/>
-        </RelativeLayout>
-    </FrameLayout>
-
-    <FrameLayout
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="@dimen/margin_left"
-            android:layout_marginRight="@dimen/margin_right"
-            android:layout_marginTop="10dp"
-            android:layout_marginBottom="10dp"
-            android:layout_gravity="center_horizontal|center_vertical">
-        <RelativeLayout
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:id="@+id/player_choice_display_group">
-            <ImageButton
-                    android:layout_width="@dimen/image_width"
-                    android:layout_height="@dimen/image_height"
-                    android:id="@+id/player_rock"
-                    android:scaleType="fitCenter"
-                    android:layout_alignParentLeft="true"
-                    android:layout_centerVertical="true"
-                    android:background="@drawable/left_rock" />
-            <ImageButton
-                    android:layout_width="@dimen/image_width"
-                    android:layout_height="@dimen/image_height"
-                    android:id="@+id/player_paper"
-                    android:scaleType="fitCenter"
-                    android:layout_centerHorizontal="true"
-                    android:layout_centerVertical="true"
-                    android:background="@drawable/left_paper" />
-            <ImageButton
-                    android:layout_width="@dimen/image_width"
-                    android:layout_height="@dimen/image_height"
-                    android:id="@+id/player_scissors"
-                    android:layout_alignParentRight="true"
-                    android:layout_centerVertical="true"
-                    android:background="@drawable/left_scissors" />
-        </RelativeLayout>
-        <Button android:id="@+id/again_button"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:text="@string/again"
-                android:background="@drawable/icon_border"
-                style="@style/again_button_style" />
-    </FrameLayout>
-
-    <RelativeLayout
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="@dimen/margin_left"
-            android:layout_marginRight="@dimen/margin_right"
-            android:layout_marginTop="10dp"
-            android:layout_marginBottom="10dp">
-        <TextView android:id="@+id/stats"
-                  android:layout_height="wrap_content"
-                  android:layout_width="wrap_content"
-                  android:layout_gravity="left"
-                  android:textColor="#000"
-                  android:textSize="20sp"
-                  android:layout_alignParentLeft="true"
-                  android:layout_centerVertical="true" />
-
-        <ImageButton
-                android:layout_gravity="right"
-                android:gravity="right"
-                android:layout_width="50dp"
-                android:layout_height="50dp"
-                android:layout_alignParentRight="true"
-                android:layout_centerVertical="true"
-                android:id="@+id/facebook_button"
-                android:background="@drawable/fb_logo" />
-    </RelativeLayout>
-
-</LinearLayout>
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
deleted file mode 100644
index 42fb88e64..000000000
--- a/samples/RPSSample/res/values/strings.xml
+++ /dev/null
@@ -1,55 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">RPSSample</string>
-    <string name="app_id">157578437735213</string>
-    <string name="rock">Rock</string>
-    <string name="paper">Paper</string>
-    <string name="scissors">Scissors</string>
-    <string name="shoot">Shoot!</string>
-    <string name="win">Win!</string>
-    <string name="loss">Loss</string>
-    <string name="tie">Tie</string>
-    <string name="again">Again!</string>
-    <string name="play">Play!</string>
-    <string name="result_won">won</string>
-    <string name="result_lost">lost</string>
-    <string name="result_tied">tied</string>
-    <string name="share_on_facebook">Share on Facebook</string>
-    <string name="see_friends">See Friends</string>
-    <string name="check_settings">Check Facebook Settings</string>
-    <string name="friends_using_rps">Friends Rockin\' RPS</string>
-    <string name="friend_activity">Friend\'s Activity</string>
-    <string name="invite_friends">Invite Friends</string>
-    <string name="invite_dialog_title">Invite a Friend</string>
-    <string name="invite_dialog_message">Please come play RPS with me!</string>
-    <string name="stats_format">W = %1$d  L = %2$d  T = %3$d</string>
-    <string name="action_display_format">%1$s vs %2$s</string>
-    <string name="feature_requires_login_title">Social Features Disabled</string>
-    <string name="feature_requires_login_message">
-        You have not logged in with Facebook.
-        Please use the menu and check your Facebook settings.
-    </string>
-    <string name="share_with_friends_title">Share on Facebook</string>
-    <string name="share_with_friends_message">Share game activity with friends?</string>
-    <string name="share_with_friends_yes">Yes</string>
-    <string name="share_with_friends_no">Maybe Later</string>
-    <string name="error_ok_button">OK</string>
-    <string name="error_dialog_title">Error!</string>
-    <string name="login_error">An error occurred during login. Please try again.</string>
-</resources>
diff --git a/samples/RPSSample/res/values/styles.xml b/samples/RPSSample/res/values/styles.xml
deleted file mode 100644
index f019c244b..000000000
--- a/samples/RPSSample/res/values/styles.xml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
-    <color name="facebook_blue">#3B5998</color>
-    
-    <color name="text_color">#303040</color>
-    <dimen name="text_size">50sp</dimen>
-    <dimen name="margin_left">30dp</dimen>
-    <dimen name="margin_right">30dp</dimen>
-    
-    <dimen name="image_height">80dp</dimen>
-    <dimen name="image_width">80dp</dimen>
-
-    <style name="again_button_style" parent="@android:style/Widget.Button">
-        <item name="android:width">200dp</item>
-        <item name="android:height">75dp</item>
-        <item name="android:background">@drawable/com_facebook_loginbutton_silver</item>
-        <item name="android:textSize">@dimen/text_size</item>
-        <item name="android:textColor">@color/text_color</item>
-        <item name="android:gravity">center</item>
-    </style>
-</resources>
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java b/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
deleted file mode 100644
index 3551eaff2..000000000
--- a/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.rps;
-
-public class CommonObjects {
-    public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
-            "349677488467004", // rock
-            "231845580291424", // paper
-            "120373648159839"  // scissors
-    };
-}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/ContentFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/ContentFragment.java
deleted file mode 100644
index f31e24f20..000000000
--- a/samples/RPSSample/src/com/facebook/samples/rps/ContentFragment.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.rps;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-public class ContentFragment extends Fragment {
-    public static final String CONTENT_INDEX_KEY = "content";
-
-    private TextView title;
-    private ImageView image;
-    private Button playButton;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.content_fragment, container, false);
-        title = (TextView) view.findViewById(R.id.content_title);
-        image = (ImageView) view.findViewById(R.id.content_image);
-        playButton = (Button) view.findViewById(R.id.content_play_button);
-
-        playButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                MainActivity activity = (MainActivity) getActivity();
-                activity.showFragment(MainActivity.RPS, false);
-            }
-        });
-        return view;
-    }
-
-    public void setContentIndex(int index) {
-        title.setText(RpsGameUtils.STRINGS_TITLES[index]);
-        image.setImageResource(RpsGameUtils.DRAWABLES_HUMAN[index]);
-    }
-}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
deleted file mode 100644
index 0a14d072b..000000000
--- a/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
+++ /dev/null
@@ -1,303 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.rps;
-
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.database.MatrixCursor;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.ListView;
-import android.widget.ProgressBar;
-import android.widget.SimpleCursorAdapter;
-import com.facebook.*;
-import com.facebook.model.GraphMultiResult;
-import com.facebook.model.GraphUser;
-import static com.facebook.samples.rps.OpenGraphUtils.*;
-import com.facebook.widget.FriendPickerFragment;
-import com.facebook.widget.PickerFragment;
-import com.facebook.widget.WebDialog;
-
-import java.text.SimpleDateFormat;
-import java.util.*;
-
-public class FriendActivity extends FragmentActivity {
-    private static final String TAG = FriendActivity.class.getName();
-    private static final String INSTALLED = "installed";
-
-    private FriendPickerFragment friendPickerFragment;
-    private SimpleCursorAdapter friendActivityAdapter;
-    private ProgressBar friendActivityProgressBar;
-    private List<ActionRow> friendActionList;
-    private Request pendingRequest;
-    private String friendId;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.friends_activity);
-
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        friendPickerFragment = (FriendPickerFragment) fragmentManager.findFragmentById(R.id.friend_fragment);
-        friendPickerFragment.setShowTitleBar(false);
-
-        ListView friendActivityList = (ListView) findViewById(R.id.friend_activity_list);
-        String[] mapColumnNames = {"date", "action"};
-        int[] mapViewIds = {R.id.friend_action_date, R.id.friend_game_result};
-        friendActivityAdapter = new SimpleCursorAdapter(this, R.layout.friend_activity_row,
-                createEmptyCursor(), mapColumnNames, mapViewIds);
-        friendActivityList.setAdapter(friendActivityAdapter);
-        friendActivityProgressBar = (ProgressBar) findViewById(R.id.friend_activity_progress_bar);
-
-        friendPickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-            @Override
-            public void onError(PickerFragment<?> fragment, FacebookException error) {
-                FriendActivity.this.onError(error);
-            }
-        });
-        friendPickerFragment.setUserId("me");
-        friendPickerFragment.setMultiSelect(false);
-        friendPickerFragment.setOnSelectionChangedListener(new PickerFragment.OnSelectionChangedListener() {
-            @Override
-            public void onSelectionChanged(PickerFragment<?> fragment) {
-                FriendActivity.this.onFriendSelectionChanged();
-            }
-        });
-        friendPickerFragment.setExtraFields(Arrays.asList(INSTALLED));
-        friendPickerFragment.setFilter(new PickerFragment.GraphObjectFilter<GraphUser>() {
-            @Override
-            public boolean includeItem(GraphUser graphObject) {
-                Boolean installed = graphObject.cast(GraphUserWithInstalled.class).getInstalled();
-                return (installed != null) && installed.booleanValue();
-            }
-        });
-
-        Button inviteButton = (Button) findViewById(R.id.invite_button);
-        inviteButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                WebDialog.RequestsDialogBuilder builder =
-                        new WebDialog.RequestsDialogBuilder(FriendActivity.this, Session.getActiveSession())
-                                .setTitle(getString(R.string.invite_dialog_title))
-                                .setMessage(getString(R.string.invite_dialog_message))
-                                .setOnCompleteListener(new WebDialog.OnCompleteListener() {
-                                    @Override
-                                    public void onComplete(Bundle values, FacebookException error) {
-                                        if (error != null) {
-                                            Log.w(TAG, "Web dialog encountered an error.", error);
-                                        } else {
-                                            Log.i(TAG, "Web dialog complete: " + values);
-                                        }
-                                    }
-                                });
-                if (friendId != null) {
-                    builder.setTo(friendId);
-                }
-                builder.build().show();
-            }
-        });
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        Session activeSession = Session.getActiveSession();
-        if (activeSession == null || !activeSession.isOpened()) {
-            new AlertDialog.Builder(this)
-                    .setTitle(R.string.feature_requires_login_title)
-                    .setMessage(R.string.feature_requires_login_message)
-                    .setPositiveButton(R.string.error_ok_button, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            finish();
-                        }
-                    })
-                    .show();
-        } else {
-            friendPickerFragment.loadData(false);
-        }
-    }
-
-    private void onError(Exception error) {
-        new AlertDialog.Builder(this)
-                .setTitle(R.string.error_dialog_title)
-                .setMessage(error.getLocalizedMessage())
-                .setPositiveButton(R.string.error_ok_button, null)
-                .show();
-    }
-
-    private <T> T chooseOne(List<T> ts) {
-        for (T t : ts) {
-            return t;
-        }
-
-        return null;
-    }
-
-    private void onFriendSelectionChanged() {
-        GraphUser user = chooseOne(friendPickerFragment.getSelection());
-        if (user != null) {
-            friendId = user.getId();
-            onChooseFriend();
-        } else {
-            friendActivityAdapter.changeCursor(createEmptyCursor());
-        }
-    }
-
-    private void onChooseFriend() {
-        friendActivityProgressBar.setVisibility(View.VISIBLE);
-
-        String throwPath = String.format("%s/%s", friendId, ThrowAction.TYPE);
-        pendingRequest = new Request(Session.getActiveSession(),
-                throwPath,
-                null,
-                HttpMethod.GET,
-                new Request.Callback() {
-                    @Override
-                    public void onCompleted(Response response) {
-                        if (response.getRequest().equals(pendingRequest)) {
-                            FriendActivity.this.onPostExecute(response);
-                        }
-                    }
-                });
-        pendingRequest.executeAsync();
-    }
-
-    private void onPostExecute(Response response) {
-        friendActivityProgressBar.setVisibility(View.GONE);
-
-        friendActionList = createActionRows(response);
-        updateCursor(friendActionList);
-    }
-
-    private List<ActionRow> createActionRows(Response response) {
-        ArrayList<ActionRow> publishedItems = new ArrayList<ActionRow>();
-
-        if (response.getError() != null) {
-            return Collections.emptyList();
-        }
-
-        GraphMultiResult list = response.getGraphObjectAs(GraphMultiResult.class);
-        List<PublishedThrowAction> listData = list.getData().castToListOf(PublishedThrowAction.class);
-
-        for (PublishedThrowAction action : listData) {
-            publishedItems.add(createActionRow(action));
-        }
-
-        Collections.sort(publishedItems);
-        return publishedItems;
-    }
-
-    private void updateCursor(Iterable<ActionRow> publishedItems) {
-        MatrixCursor cursor = createEmptyCursor();
-        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
-
-        int id = 0;
-        for (ActionRow item : publishedItems) {
-            Object[] row = new Object[3];
-            row[0] = id++;
-            row[1] = dateFormat.format(item.publishDate);
-            row[2] = item.actionText;
-            cursor.addRow(row);
-        }
-
-        friendActivityAdapter.changeCursor(cursor);
-        friendActivityAdapter.notifyDataSetChanged();
-    }
-
-    private MatrixCursor createEmptyCursor() {
-        String[] cursorColumns = {"_ID", "date", "action"};
-        return new MatrixCursor(cursorColumns);
-    }
-
-    private ActionRow createActionRow(PublishedThrowAction action) {
-        String actionText = getActionText(action);
-        Date publishDate = action.getPublishTime();
-
-        return new ActionRow(actionText, publishDate);
-    }
-
-    private String getActionText(PublishedThrowAction action) {
-        ThrowAction actionData = action.getData();
-        if (actionData == null) {
-            return "";
-        }
-
-        GestureGraphObject playerGesture = actionData.getGesture();
-        GestureGraphObject opponentGesture = actionData.getOpposingGesture();
-
-        if ((playerGesture == null) || (opponentGesture == null)) {
-            return "";
-        }
-
-        String format = getString(R.string.action_display_format);
-        return String.format(format, playerGesture.getTitle(), opponentGesture.getTitle());
-    }
-
-    private static class ActionRow implements Comparable<ActionRow>, Parcelable {
-        final String actionText;
-        final Date publishDate;
-
-        ActionRow(String actionText, Date publishDate) {
-            this.actionText = actionText;
-            this.publishDate = publishDate;
-        }
-
-        @Override
-        public int compareTo(ActionRow other) {
-            if (other == null) {
-                return 1;
-            } else {
-                return publishDate.compareTo(other.publishDate);
-            }
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeString(actionText);
-            parcel.writeLong(publishDate.getTime());
-        }
-
-        @SuppressWarnings("unused")
-        public final Creator<ActionRow> CREATOR = new Creator<ActionRow>() {
-            @Override
-            public ActionRow createFromParcel(Parcel parcel) {
-                String actionText = parcel.readString();
-                Date publishDate = new Date(parcel.readLong());
-                return new ActionRow(actionText, publishDate);
-            }
-
-            @Override
-            public ActionRow[] newArray(int size) {
-                return new ActionRow[size];
-            }
-        };
-    }
-
-
-}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
deleted file mode 100644
index c1f05d74d..000000000
--- a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
+++ /dev/null
@@ -1,236 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.rps;
-
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.widget.Toast;
-import com.facebook.*;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import static com.facebook.samples.rps.RpsGameUtils.*;
-
-public class MainActivity extends FragmentActivity {
-    static final int RPS = 0;
-    static final int SETTINGS = 1;
-    static final int CONTENT = 2;
-    static final int FRAGMENT_COUNT = CONTENT +1;
-
-    private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];
-    private MenuItem settings;
-    private MenuItem friends;
-    private MenuItem share;
-    private boolean isResumed = false;
-    private UiLifecycleHelper uiHelper;
-    private Session.StatusCallback callback = new Session.StatusCallback() {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            onSessionStateChange(session, state, exception);
-        }
-    };
-    private boolean hasNativeLink = false;
-
-    // the deep link url should be of the form http://some.path?fb_object_id=xxxxxxxxxx
-    private Pattern deepLinkPattern = Pattern.compile(".*fb_object_id=(\\d*)");
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        uiHelper = new UiLifecycleHelper(this, callback);
-        uiHelper.onCreate(savedInstanceState);
-
-        setContentView(R.layout.main);
-
-        FragmentManager fm = getSupportFragmentManager();
-        fragments[RPS] = fm.findFragmentById(R.id.rps_fragment);
-        fragments[SETTINGS] = fm.findFragmentById(R.id.settings_fragment);
-        fragments[CONTENT] = fm.findFragmentById(R.id.content_fragment);
-
-        FragmentTransaction transaction = fm.beginTransaction();
-        for(int i = 0; i < fragments.length; i++) {
-            transaction.hide(fragments[i]);
-        }
-        transaction.commit();
-
-        hasNativeLink = handleNativeLink();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        uiHelper.onResume();
-        isResumed = true;
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        uiHelper.onPause();
-        isResumed = false;
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        uiHelper.onActivityResult(requestCode, resultCode, data);
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        uiHelper.onDestroy();
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        uiHelper.onSaveInstanceState(outState);
-    }
-
-    @Override
-    protected void onResumeFragments() {
-        super.onResumeFragments();
-
-        if (hasNativeLink) {
-            showFragment(CONTENT, false);
-            hasNativeLink = false;
-        } else {
-            showFragment(RPS, false);
-        }
-    }
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        // only add the menu when the selection fragment is showing
-        if (fragments[RPS].isVisible()) {
-            if (menu.size() == 0) {
-                share = menu.add(R.string.share_on_facebook);
-                friends = menu.add(R.string.see_friends);
-                settings = menu.add(R.string.check_settings);
-            }
-            return true;
-        } else {
-            menu.clear();
-            settings = null;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.equals(settings)) {
-            showFragment(SETTINGS, true);
-            return true;
-        } else if (item.equals(friends)) {
-            Intent intent = new Intent();
-            intent.setClass(this, FriendActivity.class);
-            startActivity(intent);
-            return true;
-        } else if (item.equals(share)) {
-            RpsFragment fragment = (RpsFragment) fragments[RPS];
-            fragment.shareUsingNativeDialog();
-            return true;
-        }
-        return false;
-    }
-
-    private boolean handleNativeLink() {
-        Session existingSession = Session.getActiveSession();
-        // If we have a valid existing session, we'll use it; if not, open one using the provided Intent
-        // but do not cache the token (we don't want to use the same user identity the next time the
-        // app is run).
-        if (existingSession == null || !existingSession.isOpened()) {
-            AccessToken accessToken = AccessToken.createFromNativeLinkingIntent(getIntent());
-            if (accessToken != null) {
-                Session newSession = new Session.Builder(this).setTokenCachingStrategy(new NonCachingTokenCachingStrategy())
-                        .build();
-                newSession.open(accessToken, null);
-
-                Session.setActiveSession(newSession);
-            }
-        }
-        // See if we have a deep link in addition.
-        int deepLinkContent = getDeepLinkContent(getIntent().getData());
-        if (deepLinkContent != INVALID_CHOICE) {
-            ContentFragment fragment = (ContentFragment) fragments[CONTENT];
-            fragment.setContentIndex(deepLinkContent);
-            return true;
-        }
-        return false;
-    }
-
-    private int getDeepLinkContent(Uri deepLinkUri) {
-        if (deepLinkUri != null) {
-            String deepLink = deepLinkUri.toString();
-
-            Matcher matcher = deepLinkPattern.matcher(deepLink);
-            if (matcher.matches()) {
-                String objectId = matcher.group(1);
-                for (int i = 0; i < CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS.length; i++) {
-                    if (CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[i].equals(objectId)) {
-                        return i;
-                    }
-                }
-            }
-        }
-        return INVALID_CHOICE;
-    }
-
-    private void onSessionStateChange(Session session, SessionState state, Exception exception) {
-        if (isResumed) {
-            if (exception != null && !(exception instanceof FacebookOperationCanceledException)) {
-                Toast.makeText(this, R.string.login_error, Toast.LENGTH_SHORT).show();
-                return;
-            }
-
-            if (session.isClosed()) {
-                showFragment(RPS, false);
-            }
-        }
-    }
-
-    void showFragment(int fragmentIndex, boolean addToBackStack) {
-        FragmentManager fm = getSupportFragmentManager();
-        FragmentTransaction transaction = fm.beginTransaction();
-        if (addToBackStack) {
-            transaction.addToBackStack(null);
-        } else {
-            int backStackSize = fm.getBackStackEntryCount();
-            for (int i = 0; i < backStackSize; i++) {
-                fm.popBackStack();
-            }
-        }
-        for (int i = 0; i < fragments.length; i++) {
-            if (i == fragmentIndex) {
-                transaction.show(fragments[i]);
-            } else {
-                transaction.hide(fragments[i]);
-            }
-        }
-        transaction.commit();
-    }
-}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/OpenGraphUtils.java b/samples/RPSSample/src/com/facebook/samples/rps/OpenGraphUtils.java
deleted file mode 100644
index ff030d4b7..000000000
--- a/samples/RPSSample/src/com/facebook/samples/rps/OpenGraphUtils.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package com.facebook.samples.rps;
-
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphUser;
-import com.facebook.model.OpenGraphAction;
-import com.facebook.model.OpenGraphObject;
-
-public class OpenGraphUtils {
-
-    /**
-     * Used to consume GraphUser objects with an installed field
-     */
-    public interface GraphUserWithInstalled extends GraphUser {
-        Boolean getInstalled();
-    }
-
-    /**
-     * Used to create and consume Gesture open graph objects
-     */
-    public interface GestureGraphObject extends OpenGraphObject {
-        String getTitle();
-    }
-
-    /**
-     * Used to create and consume Game open graph objects.
-     */
-    public interface GameGraphObject extends OpenGraphObject {
-        public static final String TYPE = "fb_sample_rps:game";
-
-        GestureGraphObject getPlayerGesture();
-        void setPlayerGesture(GestureGraphObject gesture);
-
-        GestureGraphObject getOpponentGesture();
-        void setOpponentGesture(GestureGraphObject gesture);
-
-        String getResult();
-        void setResult(String result);
-    }
-
-    /**
-     * Used to create and consume Play open graph actions
-     */
-    public interface PlayAction extends OpenGraphAction {
-        public static final String TYPE = "fb_sample_rps:play";
-        public static final String PATH = "me/" + TYPE;
-        public static final String PREVIEW_PROPERTY_NAME = "game";
-
-        GameGraphObject getGame();
-
-        void setGame(GameGraphObject game);
-    }
-
-    /**
-     * Used to create and consume Throw open graph actions
-     */
-    public interface ThrowAction extends OpenGraphAction {
-        public static final String TYPE = "fb_sample_rps:throw";
-        public static final String PREVIEW_PROPERTY_NAME = "gesture";
-
-        GestureGraphObject getGesture();
-        void setGesture(GestureGraphObject playerGesture);
-
-        GestureGraphObject getOpposingGesture();
-        void setOpposingGesture(GestureGraphObject opposingGesture);
-    }
-
-    /**
-     * Used to consume published Play open graph actions.
-     */
-    public interface PublishedPlayAction extends OpenGraphAction {
-        PlayAction getData();
-
-        String getType();
-    }
-
-    /**
-     * Used to consume published Throw open graph actions.
-     */
-    public interface PublishedThrowAction extends OpenGraphAction {
-        ThrowAction getData();
-
-        String getType();
-    }
-
-    /**
-     * Used to inspect the response from posting an action
-     */
-    public interface PostResponse extends GraphObject {
-        String getId();
-    }
-}
\ No newline at end of file
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
deleted file mode 100644
index f2f6a0ee0..000000000
--- a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
+++ /dev/null
@@ -1,525 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.rps;
-
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.drawable.BitmapDrawable;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import com.facebook.*;
-import com.facebook.model.GraphObject;
-import static com.facebook.samples.rps.OpenGraphUtils.*;
-import static com.facebook.samples.rps.RpsGameUtils.*;
-
-import com.facebook.model.OpenGraphObject;
-import com.facebook.widget.FacebookDialog;
-
-import java.util.Arrays;
-import java.util.Random;
-
-public class RpsFragment extends Fragment {
-
-    private static final String SHARE_GAME_LINK = "https://developers.facebook.com/android";
-    private static final String SHARE_GAME_NAME = "Rock, Papers, Scissors Sample Application";
-    private static final String DEFAULT_GAME_OBJECT_TITLE = "an awesome game of Rock, Paper, Scissors";
-    private static final String WIN_KEY = "wins";
-    private static final String LOSS_KEY = "losses";
-    private static final String TIE_KEY = "ties";
-    private static final String PLAYER_CHOICE_KEY = "player_choice";
-    private static final String COMPUTER_CHOICE_KEY = "computer_choice";
-    private static final String STATE_KEY = "state";
-    private static final String RESULT_KEY = "result";
-    private static final String PENDING_PUBLISH_KEY = "pending_publish";
-    private static final String IMPLICIT_PUBLISH_KEY = "implicitly_publish";
-    private static final String ADDITIONAL_PERMISSIONS = "publish_actions";
-    private static final String PHOTO_REQUEST_NAME = "photorequest";
-    private static final String PHOTO_REQUEST_RESULT = "{result=photorequest:$.uri}";
-    private static final String GAME_REQUEST_NAME = "gamerequest";
-    private static final String GAME_REQUEST_RESULT = "{result=gamerequest:$.id}";
-    private static final int INITIAL_DELAY_MILLIS = 500;
-    private static final int DEFAULT_DELAY_MILLIS = 1000;
-    private static final String TAG = RpsFragment.class.getName();
-
-    private static String[] PHOTO_URIS = { null, null, null };
-
-    private TextView [] gestureTextViews = new TextView[3];
-    private TextView shootTextView;
-    private ImageView playerChoiceView;
-    private ImageView computerChoiceView;
-    private TextView resultTextView;
-    private ViewGroup shootGroup;
-    private ViewGroup resultGroup;
-    private ViewGroup playerChoiceGroup;
-    private Button againButton;
-    private ImageButton [] gestureImages = new ImageButton[3];
-    private ImageButton fbButton;
-    private TextView statsTextView;
-    private ViewFlipper rpsFlipper;
-
-    private int wins = 0;
-    private int losses = 0;
-    private int ties = 0;
-    private int playerChoice = INVALID_CHOICE;
-    private int computerChoice = INVALID_CHOICE;
-    private RpsState currentState = RpsState.INIT;
-    private RpsResult result = RpsResult.INVALID;
-    private InitHandler handler = new InitHandler();
-    private Random random = new Random(System.currentTimeMillis());
-    private boolean pendingPublish;
-    private boolean shouldImplicitlyPublish = true;
-
-    private Session.StatusCallback newPermissionsCallback = new Session.StatusCallback() {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            if (exception != null ||
-                    !session.isOpened() ||
-                    !session.getPermissions().contains(ADDITIONAL_PERMISSIONS)) {
-                // this means the user did not grant us write permissions, so
-                // we don't do implicit publishes
-                shouldImplicitlyPublish = false;
-                pendingPublish = false;
-            } else {
-                publishResult();
-            }
-        }
-    };
-
-    private DialogInterface.OnClickListener canPublishClickListener = new DialogInterface.OnClickListener() {
-        @Override
-        public void onClick(DialogInterface dialogInterface, int i) {
-            final Session session = Session.getActiveSession();
-            if (session != null && session.isOpened()) {
-                // if they choose to publish, then we request for publish permissions
-                shouldImplicitlyPublish = true;
-                pendingPublish = true;
-                Session.NewPermissionsRequest newPermissionsRequest =
-                        new Session.NewPermissionsRequest(RpsFragment.this, ADDITIONAL_PERMISSIONS)
-                                .setDefaultAudience(SessionDefaultAudience.FRIENDS)
-                                .setCallback(newPermissionsCallback);
-                session.requestNewPublishPermissions(newPermissionsRequest);
-            }
-        }
-    };
-
-    private DialogInterface.OnClickListener dontPublishClickListener = new DialogInterface.OnClickListener() {
-        @Override
-        public void onClick(DialogInterface dialogInterface, int i) {
-            // if they choose not to publish, then we save that choice, and don't prompt them
-            // until they restart the app
-            pendingPublish = false;
-            shouldImplicitlyPublish = false;
-        }
-    };
-
-    private class InitHandler extends Handler {
-        @Override
-        public void handleMessage(Message msg) {
-            if (!isResumed()) {
-                // if we're not in between onResume and onPause, don't do animation transitions
-                return;
-            }
-            switch (msg.what) {
-                case ROCK:
-                    showViews(gestureTextViews[ROCK], gestureImages[ROCK]);
-                    sendNextMessage(PAPER);
-                    break;
-                case PAPER:
-                    showViews(gestureTextViews[PAPER], gestureImages[PAPER]);
-                    sendNextMessage(SCISSORS);
-                    break;
-                case SCISSORS:
-                    showViews(gestureTextViews[SCISSORS], gestureImages[SCISSORS]);
-                    sendNextMessage(SHOOT);
-                    break;
-                case SHOOT:
-                    showViews(shootTextView);
-                    switchState(RpsState.PLAYING, false);
-                    break;
-                default:
-                    Log.e(TAG, "Unexpected message received: " + msg.toString());
-                    break;
-            }
-        }
-
-        private void sendNextMessage(int what) {
-            Message newMsg = new Message();
-            newMsg.what = what;
-            sendMessageDelayed(newMsg, DEFAULT_DELAY_MILLIS);
-        }
-    }
-
-    private void switchState(RpsState newState, boolean isOnResume) {
-        if (!isResumed()) {
-            // if we're not in between onResume and onPause, don't transition states
-            return;
-        }
-        switch (newState) {
-            case INIT:
-                playerChoice = INVALID_CHOICE;
-                computerChoice = INVALID_CHOICE;
-                result = RpsResult.INVALID;
-                showViews(shootGroup, playerChoiceGroup, rpsFlipper);
-                rpsFlipper.startFlipping();
-                hideViews(gestureImages);
-                hideViews(gestureTextViews);
-                hideViews(resultGroup, shootTextView, againButton);
-                enableViews(false, gestureImages);
-                enableViews(false, againButton);
-                Message initMessage = new Message();
-                initMessage.what = ROCK;
-                handler.sendMessageDelayed(initMessage, INITIAL_DELAY_MILLIS);
-                break;
-            case PLAYING:
-                enableViews(true, gestureImages);
-                showViews(rpsFlipper);
-                rpsFlipper.startFlipping();
-                break;
-            case RESULT:
-                hideViews(shootGroup, playerChoiceGroup);
-                playerChoiceView.setImageResource(DRAWABLES_HUMAN[playerChoice]);
-                computerChoiceView.setImageResource(DRAWABLES_COMPUTER[computerChoice]);
-                resultTextView.setText(result.getStringId());
-                showViews(resultGroup, againButton);
-                enableViews(true, againButton);
-                if (!isOnResume) {
-                    // don't publish if we're switching states because onResumed is being called
-                    publishResult();
-                }
-                break;
-            default:
-                Log.e(TAG, "Unexpected state reached: " + newState.toString());
-                break;
-        }
-
-        String statsFormat = getResources().getString(R.string.stats_format);
-        statsTextView.setText(String.format(statsFormat, wins, losses, ties));
-
-        currentState = newState;
-    }
-
-    private void hideViews(View ... views) {
-        for (View view : views) {
-            view.setVisibility(View.INVISIBLE);
-        }
-    }
-
-    private void showViews(View ... views) {
-        for (View view : views) {
-            view.setVisibility(View.VISIBLE);
-        }
-    }
-
-    private void enableViews(boolean enabled, View ... views) {
-        for (View view : views) {
-            view.setEnabled(enabled);
-        }
-    }
-
-    private void playerPlayed(int choice) {
-        playerChoice = choice;
-        computerChoice = getComputerChoice();
-        result = RESULTS[playerChoice][computerChoice];
-        switch (result) {
-            case WIN:
-                wins++;
-                break;
-            case LOSS:
-                losses++;
-                break;
-            case TIE:
-                ties++;
-                break;
-            default:
-                Log.e(TAG, "Unexpected result: " + result.toString());
-                break;
-        }
-        switchState(RpsState.RESULT, false);
-    }
-
-    private int getComputerChoice() {
-        return random.nextInt(3);
-    }
-
-    private boolean canPublish() {
-        final Session session = Session.getActiveSession();
-        if (session != null && session.isOpened()) {
-            if (session.getPermissions().contains(ADDITIONAL_PERMISSIONS)) {
-                // if we already have publish permissions, then go ahead and publish
-                return true;
-            } else {
-                // otherwise we ask the user if they'd like to publish to facebook
-                new AlertDialog.Builder(getActivity())
-                        .setTitle(R.string.share_with_friends_title)
-                        .setMessage(R.string.share_with_friends_message)
-                        .setPositiveButton(R.string.share_with_friends_yes, canPublishClickListener)
-                        .setNegativeButton(R.string.share_with_friends_no, dontPublishClickListener)
-                        .show();
-                return false;
-            }
-        }
-        return false;
-    }
-
-    private Request publishPlayerPhoto(final int choice) {
-        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), DRAWABLES_HUMAN[choice]);
-        Request request = Request.newUploadStagingResourceWithImageRequest(
-                Session.getActiveSession(),
-                bitmap,
-                new Request.Callback() {
-                    @Override
-                    public void onCompleted(Response response) {
-                        if (response.getError() != null) {
-                            Log.e(TAG, "photo staging upload failed: " + response.getError());
-                        } else {
-                            PHOTO_URIS[choice] = response.getGraphObject().getProperty("uri").toString();
-                        }
-                    }
-                });
-        request.setBatchEntryName(PHOTO_REQUEST_NAME);
-        request.setBatchEntryOmitResultOnSuccess(false);
-        return request;
-    }
-
-    private void publishResult() {
-        if (shouldImplicitlyPublish && canPublish()) {
-            RequestBatch batch = new RequestBatch();
-            String photoUri = PHOTO_URIS[playerChoice];
-            if (photoUri == null) {
-                batch.add(publishPlayerPhoto(playerChoice));
-                photoUri = PHOTO_REQUEST_RESULT;
-            }
-
-            GameGraphObject gameObject = createGameObject();
-            gameObject.setImageUrls(Arrays.asList(photoUri));
-
-            Request gameRequest = Request.newPostOpenGraphObjectRequest(Session.getActiveSession(), gameObject,
-                    new Request.Callback() {
-                        @Override
-                        public void onCompleted(Response response) {
-                            if (response.getError() != null) {
-                                Log.e(TAG, "game object creation failed: " + response.getError());
-                            }
-                        }
-                    });
-            gameRequest.setBatchEntryName(GAME_REQUEST_NAME);
-
-            batch.add(gameRequest);
-
-            PlayAction playAction = createPlayActionWithGame(GAME_REQUEST_RESULT);
-            Request playRequest = new Request(Session.getActiveSession(),
-                    PlayAction.PATH,
-                    null,
-                    HttpMethod.POST,
-                    new Request.Callback() {
-                        @Override
-                        public void onCompleted(Response response) {
-                            if (response.getError() != null) {
-                                Log.e(TAG, "Play action creation failed: " + response.getError());
-                            } else {
-                                PostResponse postResponse = response.getGraphObjectAs(PostResponse.class);
-                                Log.i(TAG, "Posted OG Action with id: " + postResponse.getId());
-                            }
-                        }
-                    });
-            playRequest.setGraphObject(playAction);
-
-            batch.add(playRequest);
-            batch.executeAsync();
-        }
-    }
-
-    private GameGraphObject createGameObject() {
-        GameGraphObject gameGraphObject =
-                OpenGraphObject.Factory.createForPost(GameGraphObject.class, GameGraphObject.TYPE);
-        gameGraphObject.setTitle(DEFAULT_GAME_OBJECT_TITLE);
-        GraphObject dataObject = GraphObject.Factory.create();
-        dataObject.setProperty("player_gesture", CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[playerChoice]);
-        dataObject.setProperty("opponent_gesture", CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[computerChoice]);
-        dataObject.setProperty("result", getString(result.getResultStringId()));
-        gameGraphObject.setData(dataObject);
-        return gameGraphObject;
-    }
-
-    private PlayAction createPlayActionWithGame(String game) {
-        PlayAction playAction = GraphObject.Factory.create(PlayAction.class);
-        playAction.setProperty("game", game);
-        return playAction;
-    }
-
-    private GestureGraphObject getBuiltInGesture(int choice) {
-        if (choice < 0 || choice >= CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS.length) {
-            throw new IllegalArgumentException("Invalid choice");
-        }
-        GestureGraphObject gesture =
-                GraphObject.Factory.create(GestureGraphObject.class);
-        gesture.setId(CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[choice]);
-        return gesture;
-    }
-
-    public void shareUsingNativeDialog() {
-        if (playerChoice == INVALID_CHOICE || computerChoice == INVALID_CHOICE) {
-            FacebookDialog.ShareDialogBuilder builder = new FacebookDialog.ShareDialogBuilder(getActivity())
-                    .setLink(SHARE_GAME_LINK)
-                    .setName(SHARE_GAME_NAME)
-                    .setFragment(this);
-            // share the app
-            if (builder.canPresent()) {
-                builder.build().present();
-            }
-        } else {
-            ThrowAction throwAction = GraphObject.Factory.create(ThrowAction.class);
-            throwAction.setGesture(getBuiltInGesture(playerChoice));
-            throwAction.setOpposingGesture(getBuiltInGesture(computerChoice));
-
-            // The OG objects have their own bitmaps we could rely on, but in order to demonstrate attaching
-            // an in-memory bitmap (e.g., a game screencap) we'll send the bitmap explicitly ourselves.
-            ImageButton view = gestureImages[playerChoice];
-            BitmapDrawable drawable = (BitmapDrawable) view.getBackground();
-            Bitmap bitmap = drawable.getBitmap();
-
-            FacebookDialog.OpenGraphActionDialogBuilder builder = new FacebookDialog.OpenGraphActionDialogBuilder(
-                    getActivity(),
-                    throwAction,
-                    ThrowAction.TYPE,
-                    ThrowAction.PREVIEW_PROPERTY_NAME)
-                    .setFragment(this)
-                    .setImageAttachmentsForAction(Arrays.asList(bitmap));
-
-            // share the game play
-            if (builder.canPresent()) {
-                builder.build().present();
-            }
-        }
-    }
-
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-        View view = inflater.inflate(R.layout.rps_fragment, container, false);
-
-        gestureTextViews[ROCK] = (TextView) view.findViewById(R.id.text_rock);
-        gestureTextViews[PAPER] = (TextView) view.findViewById(R.id.text_paper);
-        gestureTextViews[SCISSORS] = (TextView) view.findViewById(R.id.text_scissors);
-        shootTextView = (TextView) view.findViewById(R.id.shoot);
-        playerChoiceView = (ImageView) view.findViewById(R.id.player_choice);
-        computerChoiceView = (ImageView) view.findViewById(R.id.computer_choice);
-        resultTextView = (TextView) view.findViewById(R.id.who_won);
-        shootGroup = (ViewGroup) view.findViewById(R.id.shoot_display_group);
-        resultGroup = (ViewGroup) view.findViewById(R.id.result_display_group);
-        playerChoiceGroup = (ViewGroup) view.findViewById(R.id.player_choice_display_group);
-        againButton = (Button) view.findViewById(R.id.again_button);
-        gestureImages[ROCK] = (ImageButton) view.findViewById(R.id.player_rock);
-        gestureImages[PAPER] = (ImageButton) view.findViewById(R.id.player_paper);
-        gestureImages[SCISSORS] = (ImageButton) view.findViewById(R.id.player_scissors);
-        fbButton = (ImageButton) view.findViewById(R.id.facebook_button);
-        statsTextView = (TextView) view.findViewById(R.id.stats);
-        rpsFlipper = (ViewFlipper) view.findViewById(R.id.rps_flipper);
-
-        gestureImages[ROCK].setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                playerPlayed(ROCK);
-            }
-        });
-
-        gestureImages[PAPER].setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                playerPlayed(PAPER);
-            }
-        });
-
-        gestureImages[SCISSORS].setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                playerPlayed(SCISSORS);
-            }
-        });
-
-        againButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                switchState(RpsState.INIT, false);
-            }
-        });
-
-        fbButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                getActivity().openOptionsMenu();
-            }
-        });
-
-        return view;
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        if (savedInstanceState != null) {
-            wins = savedInstanceState.getInt(WIN_KEY);
-            losses = savedInstanceState.getInt(LOSS_KEY);
-            ties = savedInstanceState.getInt(TIE_KEY);
-            computerChoice = savedInstanceState.getInt(COMPUTER_CHOICE_KEY);
-            playerChoice = savedInstanceState.getInt(PLAYER_CHOICE_KEY);
-            currentState = (RpsState) savedInstanceState.getSerializable(STATE_KEY);
-            result = (RpsResult) savedInstanceState.getSerializable(RESULT_KEY);
-            pendingPublish = savedInstanceState.getBoolean(PENDING_PUBLISH_KEY);
-            shouldImplicitlyPublish = savedInstanceState.getBoolean(IMPLICIT_PUBLISH_KEY);
-        }
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (Session.getActiveSession() != null) {
-            Session.getActiveSession().onActivityResult(getActivity(), requestCode, resultCode, data);
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        switchState(currentState, true);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle bundle) {
-        super.onSaveInstanceState(bundle);
-        bundle.putInt(WIN_KEY, wins);
-        bundle.putInt(LOSS_KEY, losses);
-        bundle.putInt(TIE_KEY, ties);
-        bundle.putInt(COMPUTER_CHOICE_KEY, computerChoice);
-        bundle.putInt(PLAYER_CHOICE_KEY, playerChoice);
-        bundle.putSerializable(STATE_KEY, currentState);
-        bundle.putSerializable(RESULT_KEY, result);
-        bundle.putBoolean(PENDING_PUBLISH_KEY, pendingPublish);
-        bundle.putBoolean(IMPLICIT_PUBLISH_KEY, shouldImplicitlyPublish);
-    }
-
-}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsGameUtils.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsGameUtils.java
deleted file mode 100644
index 5cf35dac6..000000000
--- a/samples/RPSSample/src/com/facebook/samples/rps/RpsGameUtils.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.facebook.samples.rps;
-
-public class RpsGameUtils {
-    public enum RpsState {
-        INIT,
-        PLAYING,
-        RESULT
-    };
-
-    public enum RpsResult {
-        WIN(R.string.win, R.string.result_won),
-        LOSS(R.string.loss, R.string.result_lost),
-        TIE(R.string.tie, R.string.result_tied),
-        INVALID(0, 0);
-
-        private int id;
-        private int resultId;
-
-        private RpsResult(int stringId, int resultStringId) {
-            id = stringId;
-            resultId = resultStringId;
-        }
-
-        public int getStringId() {
-            return id;
-        }
-
-        public int getResultStringId() {
-            return resultId;
-        }
-    };
-
-    public static final int ROCK = 0;
-    public static final int PAPER = 1;
-    public static final int SCISSORS = 2;
-    public static final int INVALID_CHOICE = -1;
-    public static final int SHOOT = 100;
-    public static final int[] DRAWABLES_HUMAN =
-            { R.drawable.left_rock, R.drawable.left_paper, R.drawable.left_scissors };
-    public static final int[] DRAWABLES_COMPUTER =
-            { R.drawable.right_rock, R.drawable.right_paper, R.drawable.right_scissors };
-    public static final int[] STRINGS_TITLES =
-            { R.string.rock, R.string.paper, R.string.scissors };
-    public static final RpsResult[][] RESULTS =
-            {
-                    {RpsResult.TIE, RpsResult.LOSS, RpsResult.WIN},
-                    {RpsResult.WIN, RpsResult.TIE, RpsResult.LOSS},
-                    {RpsResult.LOSS, RpsResult.WIN, RpsResult.TIE}
-            };
-}
diff --git a/samples/Scrumptious/.classpath b/samples/Scrumptious/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/Scrumptious/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/Scrumptious/.project b/samples/Scrumptious/.project
deleted file mode 100644
index a8c700a8a..000000000
--- a/samples/Scrumptious/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>Scrumptious</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
deleted file mode 100644
index 5bfc2b6a0..000000000
--- a/samples/Scrumptious/AndroidManifest.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.scrumptious"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
-    <uses-permission android:name="android.permission.CAMERA"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <uses-feature android:name="android.hardware.camera"/>
-    <uses-feature android:name="android.hardware.camera.autofocus"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:name=".ScrumptiousApplication">
-        <activity android:name="MainActivity"
-                  android:label="@string/app_name"
-                  android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <activity android:name="PickerActivity"
-                  android:label="@string/app_name" />
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-</manifest> 
diff --git a/samples/Scrumptious/Scrumptious.iml b/samples/Scrumptious/Scrumptious.iml
deleted file mode 100644
index 1cbea4d2f..000000000
--- a/samples/Scrumptious/Scrumptious.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="library" exported="" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/Scrumptious/ant.properties b/samples/Scrumptious/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/Scrumptious/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/Scrumptious/build.xml b/samples/Scrumptious/build.xml
deleted file mode 100644
index 7f943468f..000000000
--- a/samples/Scrumptious/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="Scrumptious" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/Scrumptious/proguard-project.txt b/samples/Scrumptious/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/Scrumptious/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/Scrumptious/project.properties b/samples/Scrumptious/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/Scrumptious/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/Scrumptious/res/drawable-hdpi/icon.png b/samples/Scrumptious/res/drawable-hdpi/icon.png
deleted file mode 100644
index 0320aeb54..000000000
Binary files a/samples/Scrumptious/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/icon.png b/samples/Scrumptious/res/drawable-mdpi/icon.png
deleted file mode 100644
index 5c4b0095f..000000000
Binary files a/samples/Scrumptious/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/icon.png b/samples/Scrumptious/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 796e14ec2..000000000
Binary files a/samples/Scrumptious/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_eating.png b/samples/Scrumptious/res/drawable/action_eating.png
deleted file mode 100644
index 7b951edf0..000000000
Binary files a/samples/Scrumptious/res/drawable/action_eating.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_location.png b/samples/Scrumptious/res/drawable/action_location.png
deleted file mode 100644
index 13dfe86ff..000000000
Binary files a/samples/Scrumptious/res/drawable/action_location.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_people.png b/samples/Scrumptious/res/drawable/action_people.png
deleted file mode 100644
index 19546267c..000000000
Binary files a/samples/Scrumptious/res/drawable/action_people.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_photo.png b/samples/Scrumptious/res/drawable/action_photo.png
deleted file mode 100644
index 46533cc70..000000000
Binary files a/samples/Scrumptious/res/drawable/action_photo.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/button_border.xml b/samples/Scrumptious/res/drawable/button_border.xml
deleted file mode 100644
index 7d05c1fe2..000000000
--- a/samples/Scrumptious/res/drawable/button_border.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<shape xmlns:android="http://schemas.android.com/apk/res/android"
-       android:shape="rectangle">
-    <solid android:color="#FFF" />
-    <corners android:radius="10dp" />
-    <padding android:bottom="10dp" android:left="10dp" android:right="10dp" android:top="10dp" />
-    <stroke android:width="1px" android:color="#222" />
-</shape>
diff --git a/samples/Scrumptious/res/drawable/facebook.png b/samples/Scrumptious/res/drawable/facebook.png
deleted file mode 100755
index daf8097b1..000000000
Binary files a/samples/Scrumptious/res/drawable/facebook.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/icon.png b/samples/Scrumptious/res/drawable/icon.png
deleted file mode 100644
index 5c4b0095f..000000000
Binary files a/samples/Scrumptious/res/drawable/icon.png and /dev/null differ
diff --git a/samples/Scrumptious/res/layout/listitem.xml b/samples/Scrumptious/res/layout/listitem.xml
deleted file mode 100644
index 293ef0c7e..000000000
--- a/samples/Scrumptious/res/layout/listitem.xml
+++ /dev/null
@@ -1,50 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="wrap_content"
-              android:layout_gravity="center_horizontal"
-              android:orientation="horizontal">
-
-    <ImageView
-            android:id="@+id/icon"
-            android:src="@drawable/action_eating"
-            android:layout_width="60dp"
-            android:layout_height="60dp" />
-    <LinearLayout
-            android:orientation="vertical"
-            android:layout_gravity="center_vertical"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="15dp" >
-        <TextView
-                android:id="@+id/text1"
-                android:text="test"
-                android:textColor="#333"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:textSize="18sp" />
-        <TextView
-                android:id="@+id/text2"
-                android:text="test2"
-                android:textColor="#6699CC"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:textSize="14sp" />
-    </LinearLayout>
-</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/main.xml b/samples/Scrumptious/res/layout/main.xml
deleted file mode 100644
index 9e4f89cfd..000000000
--- a/samples/Scrumptious/res/layout/main.xml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        android:orientation="vertical"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent">
-
-    <fragment android:name="com.facebook.scrumptious.SelectionFragment"
-              android:id="@+id/selectionFragment"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent" />
-    <fragment android:name="com.facebook.scrumptious.SplashFragment"
-              android:id="@+id/splashFragment"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent" />
-    <fragment android:name="com.facebook.widget.UserSettingsFragment"
-              android:id="@+id/userSettingsFragment"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent" />
-</LinearLayout>
-
diff --git a/samples/Scrumptious/res/layout/pickers.xml b/samples/Scrumptious/res/layout/pickers.xml
deleted file mode 100644
index ef5a12619..000000000
--- a/samples/Scrumptious/res/layout/pickers.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-        >
-    <FrameLayout
-            android:id="@+id/picker_fragment"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            />
-</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/selection.xml b/samples/Scrumptious/res/layout/selection.xml
deleted file mode 100644
index 3367e4840..000000000
--- a/samples/Scrumptious/res/layout/selection.xml
+++ /dev/null
@@ -1,71 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<ScrollView
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:facebook="http://schemas.android.com/apk/res-auto"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:background="#FFF">
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:orientation="vertical">
-
-        <LinearLayout
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="20dp"
-            android:gravity="center_horizontal"
-            android:orientation="horizontal" >
-            <com.facebook.widget.ProfilePictureView
-                android:id="@+id/selection_profile_pic"
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:layout_gravity="center"
-                android:gravity="center_horizontal"
-                facebook:preset_size="small" />
-            <TextView
-                android:id="@+id/selection_user_name"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="10dp"
-                android:layout_gravity="center"
-                android:textColor="#333"
-                android:textSize="18sp" />
-        </LinearLayout>
-
-        <com.facebook.scrumptious.FullListView
-            android:id="@+id/selection_list"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_margin="20dp"
-            android:background="@drawable/button_border"/>
-
-        <Button
-            android:id="@+id/announce_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:textStyle="bold"
-            android:background="@drawable/button_border"
-            android:layout_marginBottom="20dp"
-            android:text="@string/announce"
-            android:gravity="center" />
-
-    </LinearLayout>
-</ScrollView>
diff --git a/samples/Scrumptious/res/layout/splash.xml b/samples/Scrumptious/res/layout/splash.xml
deleted file mode 100644
index b84d8e58f..000000000
--- a/samples/Scrumptious/res/layout/splash.xml
+++ /dev/null
@@ -1,90 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<ScrollView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="#303040" >
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:orientation="vertical">
-
-        <LinearLayout
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="30dp"
-            android:gravity="center_horizontal"
-            android:orientation="horizontal" >
-            <ImageView
-                android:id="@+id/splash_icon"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:layout_marginRight="10dp"
-                android:gravity="center"
-                android:src="@drawable/icon" />
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:gravity="center"
-                android:textColor="#AFDEFE"
-                android:textSize="28sp"
-                android:typeface="serif"
-                android:textStyle="italic"
-                android:text="@string/app_name" />
-        </LinearLayout>
-
-
-        <TextView
-            android:id="@+id/profile_name"
-            android:layout_width="174dp"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="35dp"
-            android:lines="2"
-            android:textSize="17sp"
-            android:text="@string/get_started"
-            android:layout_gravity="center_horizontal"
-            android:gravity="center_horizontal"/>
-
-        <com.facebook.widget.LoginButton
-            android:id="@+id/login_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:layout_marginTop="30dp"
-            android:layout_marginBottom="30dp" />
-
-        <Button
-            android:id="@+id/skip_login_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:text="@string/skip_login"
-            android:background="@drawable/com_facebook_loginbutton_silver"
-            android:textSize="@dimen/com_facebook_loginview_text_size"
-            android:textColor="@color/com_facebook_blue"
-            android:paddingLeft="20dp"
-            android:paddingRight="20dp"
-            android:layout_marginTop="30dp"
-            android:layout_marginBottom="30dp" />
-
-    </LinearLayout>
-</ScrollView>
diff --git a/samples/Scrumptious/res/values/strings.xml b/samples/Scrumptious/res/values/strings.xml
deleted file mode 100644
index c28e8df63..000000000
--- a/samples/Scrumptious/res/values/strings.xml
+++ /dev/null
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">Scrumptious</string>
-    <string name="app_id">233936543368280</string>
-    <string name="get_started">To get started, login using Facebook</string>
-    <string name="skip_login">Skip Login</string>
-    <string name="action_eating">What are you eating?</string>
-    <string name="action_location">Where are you?</string>
-    <string name="action_people">With whom?</string>
-    <string name="action_photo">Got a picture?</string>
-    <string name="action_eating_default">Select a meal</string>
-    <string name="action_location_default">Select a place</string>
-    <string name="action_people_default">Select friends</string>
-    <string name="action_photo_default">Take one</string>
-    <string name="action_photo_ready">Ready</string>
-    <string name="action_photo_camera">Take Photo</string>
-    <string name="action_photo_gallery">Choose Existing</string>
-    <string name="announce">Announce</string>
-    <string name="login">Login</string>
-    <string name="settings">Settings</string>
-    <string name="select_meal">Select a meal</string>
-    <string name="enter_meal">Enter meal</string>
-    <string name="result_dialog_title">Result</string>
-    <string name="result_dialog_button_text">Thanks!</string>
-    <string name="result_dialog_text_with_id">Posted Open Graph action, id: %1$s</string>
-    <string name="result_dialog_text_default">Post action complete.</string>
-    <string name="result_dialog_text_canceled">Post canceled.</string>
-    <string name="progress_dialog_text">Announcing, please wait...</string>
-    <string name="single_user_selected">%1$s</string>
-    <string name="two_users_selected">%1$s and %2$s</string>
-    <string name="multiple_users_selected">%1$s and %2$s others</string>
-    <string name="error_dialog_title">Something Went Wrong</string>
-    <string name="error_dialog_button_text">OK</string>
-    <string name="error_dialog_default_text">No response from server.</string>
-    <string name="no_location_error">Could not obtain your current location</string>
-    <string name="select_picture">Select Picture</string>
-    <string name="error_authentication_retry">An error occurred that requires your attention. %1$s</string>
-    <string name="error_authentication_reopen">An error occurred, please re-login.</string>
-    <string name="error_permission">Please allow us to post on your behalf.</string>
-    <string name="error_server">The server is busy, please retry later.</string>
-    <string name="error_bad_request">An error occurred, please contact the developer with the following message: %1$s</string>
-    <string name="error_unknown">An unknown error occurred, please contact the developer with the following message: %1$s</string>
-    <string name="exception">Exception: %1$s</string>
-    <string name="ok">OK</string>
-    <string name="cancel">Cancel</string>
-
-    <string-array name="food_types">
-        <item>Cheeseburger</item>
-        <item>Pizza</item>
-        <item>Hotdog</item>
-        <item>Italian</item>
-        <item>French</item>
-        <item>Chinese</item>
-        <item>Thai</item>
-        <item>Indian</item>
-        <item>&lt;Other&gt;</item>
-    </string-array>
-
-    <string-array name="food_og_urls">
-        <item>http://samples.ogp.me/314483151980285</item> <!-- Cheeseburger -->
-        <item>http://samples.ogp.me/314483221980278</item> <!-- Pizza -->
-        <item>http://samples.ogp.me/314483265313607</item> <!-- Hotdog -->
-        <item>http://samples.ogp.me/314483348646932</item> <!-- Italian -->
-        <item>http://samples.ogp.me/314483375313596</item> <!-- French -->
-        <item>http://samples.ogp.me/314483421980258</item> <!-- Chinese -->
-        <item>http://samples.ogp.me/314483451980255</item> <!-- Thai -->
-        <item>http://samples.ogp.me/314483491980251</item> <!-- Indian -->
-        <item></item>
-    </string-array>
-</resources>
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/BaseListElement.java b/samples/Scrumptious/src/com/facebook/scrumptious/BaseListElement.java
deleted file mode 100644
index 735d73976..000000000
--- a/samples/Scrumptious/src/com/facebook/scrumptious/BaseListElement.java
+++ /dev/null
@@ -1,170 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.scrumptious;
-
-import android.content.Intent;
-import android.graphics.drawable.Drawable;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.BaseAdapter;
-import com.facebook.model.OpenGraphAction;
-
-/**
- * Base class for a list element in the Scrumptious main display, consisting of an
- * icon to the left, and a two line display to the right.
- */
-public abstract class BaseListElement {
-
-    private Drawable icon;
-    private String text1;
-    private String text2;
-    private BaseAdapter adapter;
-    private int requestCode;
-
-    /**
-     * Constructs a new list element.
-     *
-     * @param icon the drawable for the icon
-     * @param text1 the first row of text
-     * @param text2 the second row of text
-     * @param requestCode the requestCode to start new Activities with
-     */
-    public BaseListElement(Drawable icon, String text1, String text2, int requestCode) {
-        this.icon = icon;
-        this.text1 = text1;
-        this.text2 = text2;
-        this.requestCode = requestCode;
-    }
-
-    /**
-     * The Adapter associated with this list element (used for notifying that the
-     * underlying dataset has changed).
-     * @param adapter the adapter associated with this element
-     */
-    public void setAdapter(BaseAdapter adapter) {
-        this.adapter = adapter;
-    }
-
-    /**
-     * Returns the icon.
-     *
-     * @return the icon
-     */
-    public Drawable getIcon() {
-        return icon;
-    }
-
-    /**
-     * Returns the first row of text.
-     *
-     * @return the first row of text
-     */
-    public String getText1() {
-        return text1;
-    }
-
-    /**
-     * Returns the second row of text.
-     *
-     * @return the second row of text
-     */
-    public String getText2() {
-        return text2;
-    }
-
-    /**
-     * Returns the requestCode for starting new Activities.
-     *
-     * @return the requestCode
-     */
-    public int getRequestCode() {
-        return requestCode;
-    }
-
-    /**
-     * Sets the first row of text.
-     *
-     * @param text1 text to set on the first row
-     */
-    public void setText1(String text1) {
-        this.text1 = text1;
-        if (adapter != null) {
-            adapter.notifyDataSetChanged();
-        }
-    }
-
-    /**
-     * Sets the second row of text.
-     *
-     * @param text2 text to set on the second row
-     */
-    public void setText2(String text2) {
-        this.text2 = text2;
-        if (adapter != null) {
-            adapter.notifyDataSetChanged();
-        }
-    }
-
-    /**
-     * Returns the OnClickListener associated with this list element. To be
-     * overridden by the subclasses.
-     *
-     * @return the OnClickListener associated with this list element
-     */
-    protected abstract View.OnClickListener getOnClickListener();
-
-    /**
-     * Populate an OpenGraphAction with the results of this list element.
-     *
-     * @param action the action to populate with data
-     */
-    protected abstract void populateOGAction(OpenGraphAction action);
-
-    /**
-     * Callback if the OnClickListener happens to launch a new Activity.
-     *
-     * @param data the data associated with the result
-     */
-    protected void onActivityResult(Intent data) {}
-
-    /**
-     * Save the state of the current element.
-     *
-     * @param bundle the bundle to save to
-     */
-    protected void onSaveInstanceState(Bundle bundle) {}
-
-    /**
-     * Restore the state from the saved bundle. Returns true if the
-     * state was restored.
-     *
-     * @param savedState the bundle to restore from
-     * @return true if state was restored
-     */
-    protected boolean restoreState(Bundle savedState) {
-        return false;
-    }
-
-    /**
-     * Notifies the associated Adapter that the underlying data has changed,
-     * and to re-layout the view.
-     */
-    protected void notifyDataChanged() {
-        adapter.notifyDataSetChanged();
-    }
-
-}
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java b/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
deleted file mode 100644
index 66c1f83b9..000000000
--- a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.scrumptious;
-
-import android.content.Context;
-import android.graphics.Rect;
-import android.util.AttributeSet;
-import android.view.View;
-import android.widget.ListAdapter;
-import android.widget.ListView;
-
-/**
- * A subclass of ListView that will always show the full list of elements.
- * This allows a ListView to be embedded inside a ScrollView.
- */
-public class FullListView extends ListView {
-
-    public FullListView(Context context) {
-        super(context);
-    }
-
-    public FullListView(Context context, AttributeSet attributeSet) {
-        super(context, attributeSet);
-    }
-
-    public FullListView(Context context, AttributeSet attributeSet, int defStyle) {
-        super(context, attributeSet, defStyle);
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-        int width = getMeasuredWidth();
-        int height = 0;
-        ListAdapter adapter = getAdapter();
-        int count = adapter.getCount();
-        for (int i = 0; i < count; i++) {
-            View childView = adapter.getView(i, null, this);
-            childView.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED),
-                    MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
-            height += childView.getMeasuredHeight();
-        }
-        Rect bgPadding = new Rect();
-        getBackground().getPadding(bgPadding);
-        height += (count - 1) * getDividerHeight() + bgPadding.top + bgPadding.bottom;
-        setMeasuredDimension(width, height);
-    }
-}
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java b/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
deleted file mode 100644
index 31927b442..000000000
--- a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
+++ /dev/null
@@ -1,196 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.scrumptious;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.view.Menu;
-import android.view.MenuItem;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.UiLifecycleHelper;
-
-public class MainActivity extends FragmentActivity {
-
-    private static final String USER_SKIPPED_LOGIN_KEY = "user_skipped_login";
-
-    private static final int SPLASH = 0;
-    private static final int SELECTION = 1;
-    private static final int SETTINGS = 2;
-    private static final int FRAGMENT_COUNT = SETTINGS +1;
-
-    private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];
-    private MenuItem settings;
-    private boolean isResumed = false;
-    private boolean userSkippedLogin = false;
-    private UiLifecycleHelper uiHelper;
-    private Session.StatusCallback callback = new Session.StatusCallback() {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            onSessionStateChange(session, state, exception);
-        }
-    };
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (savedInstanceState != null) {
-            userSkippedLogin = savedInstanceState.getBoolean(USER_SKIPPED_LOGIN_KEY);
-        }
-        uiHelper = new UiLifecycleHelper(this, callback);
-        uiHelper.onCreate(savedInstanceState);
-
-        setContentView(R.layout.main);
-
-        FragmentManager fm = getSupportFragmentManager();
-        SplashFragment splashFragment = (SplashFragment) fm.findFragmentById(R.id.splashFragment);
-        fragments[SPLASH] = splashFragment;
-        fragments[SELECTION] = fm.findFragmentById(R.id.selectionFragment);
-        fragments[SETTINGS] = fm.findFragmentById(R.id.userSettingsFragment);
-
-        FragmentTransaction transaction = fm.beginTransaction();
-        for(int i = 0; i < fragments.length; i++) {
-            transaction.hide(fragments[i]);
-        }
-        transaction.commit();
-
-        splashFragment.setSkipLoginCallback(new SplashFragment.SkipLoginCallback() {
-            @Override
-            public void onSkipLoginPressed() {
-                userSkippedLogin = true;
-                showFragment(SELECTION, false);
-            }
-        });
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        uiHelper.onResume();
-        isResumed = true;
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        uiHelper.onPause();
-        isResumed = false;
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        uiHelper.onActivityResult(requestCode, resultCode, data);
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        uiHelper.onDestroy();
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        uiHelper.onSaveInstanceState(outState);
-
-        outState.putBoolean(USER_SKIPPED_LOGIN_KEY, userSkippedLogin);
-    }
-
-    @Override
-    protected void onResumeFragments() {
-        super.onResumeFragments();
-        Session session = Session.getActiveSession();
-
-        if (session != null && session.isOpened()) {
-            // if the session is already open, try to show the selection fragment
-            showFragment(SELECTION, false);
-            userSkippedLogin = false;
-        } else if (userSkippedLogin) {
-            showFragment(SELECTION, false);
-        } else {
-            // otherwise present the splash screen and ask the user to login, unless the user explicitly skipped.
-            showFragment(SPLASH, false);
-        }
-    }
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        // only add the menu when the selection fragment is showing
-        if (fragments[SELECTION].isVisible()) {
-            if (menu.size() == 0) {
-                settings = menu.add(R.string.settings);
-            }
-            return true;
-        } else {
-            menu.clear();
-            settings = null;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.equals(settings)) {
-            showSettingsFragment();
-            return true;
-        }
-        return false;
-    }
-
-    public void showSettingsFragment() {
-        showFragment(SETTINGS, true);
-    }
-
-    private void onSessionStateChange(Session session, SessionState state, Exception exception) {
-        if (isResumed) {
-            FragmentManager manager = getSupportFragmentManager();
-            int backStackSize = manager.getBackStackEntryCount();
-            for (int i = 0; i < backStackSize; i++) {
-                manager.popBackStack();
-            }
-            // check for the OPENED state instead of session.isOpened() since for the
-            // OPENED_TOKEN_UPDATED state, the selection fragment should already be showing.
-            if (state.equals(SessionState.OPENED)) {
-                showFragment(SELECTION, false);
-            } else if (state.isClosed()) {
-                showFragment(SPLASH, false);
-            }
-        }
-    }
-
-    private void showFragment(int fragmentIndex, boolean addToBackStack) {
-        FragmentManager fm = getSupportFragmentManager();
-        FragmentTransaction transaction = fm.beginTransaction();
-        for (int i = 0; i < fragments.length; i++) {
-            if (i == fragmentIndex) {
-                transaction.show(fragments[i]);
-            } else {
-                transaction.hide(fragments[i]);
-            }
-        }
-        if (addToBackStack) {
-            transaction.addToBackStack(null);
-        }
-        transaction.commit();
-    }
-}
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java b/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
deleted file mode 100644
index f4e2d48d4..000000000
--- a/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
+++ /dev/null
@@ -1,236 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.scrumptious;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Looper;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.widget.Toast;
-import com.facebook.FacebookException;
-import com.facebook.widget.FriendPickerFragment;
-import com.facebook.widget.PickerFragment;
-import com.facebook.widget.PlacePickerFragment;
-
-/**
- * The PickerActivity enhances the Friend or Place Picker by adding a title
- * and a Done button. The selection results are saved in the ScrumptiousApplication
- * instance.
- */
-public class PickerActivity extends FragmentActivity {
-    public static final Uri FRIEND_PICKER = Uri.parse("picker://friend");
-    public static final Uri PLACE_PICKER = Uri.parse("picker://place");
-
-    private static final int SEARCH_RADIUS_METERS = 1000;
-    private static final int SEARCH_RESULT_LIMIT = 50;
-    private static final String SEARCH_TEXT = "Restaurant";
-    private static final int LOCATION_CHANGE_THRESHOLD = 50; // meters
-
-    private static final Location SAN_FRANCISCO_LOCATION = new Location("") {{
-            setLatitude(37.7750);
-            setLongitude(-122.4183);
-    }};
-
-    private FriendPickerFragment friendPickerFragment;
-    private PlacePickerFragment placePickerFragment;
-    private LocationListener locationListener;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.pickers);
-
-        Bundle args = getIntent().getExtras();
-        FragmentManager manager = getSupportFragmentManager();
-        Fragment fragmentToShow = null;
-        Uri intentUri = getIntent().getData();
-
-        if (FRIEND_PICKER.equals(intentUri)) {
-            if (savedInstanceState == null) {
-                friendPickerFragment = new FriendPickerFragment(args);
-            } else {
-                friendPickerFragment = (FriendPickerFragment) manager.findFragmentById(R.id.picker_fragment);;
-            }
-
-            friendPickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-                @Override
-                public void onError(PickerFragment<?> fragment, FacebookException error) {
-                    PickerActivity.this.onError(error);
-                }
-            });
-            friendPickerFragment.setOnDoneButtonClickedListener(new PickerFragment.OnDoneButtonClickedListener() {
-                @Override
-                public void onDoneButtonClicked(PickerFragment<?> fragment) {
-                    finishActivity();
-                }
-            });
-            fragmentToShow = friendPickerFragment;
-
-        } else if (PLACE_PICKER.equals(intentUri)) {
-            if (savedInstanceState == null) {
-                placePickerFragment = new PlacePickerFragment(args);
-            } else {
-                placePickerFragment = (PlacePickerFragment) manager.findFragmentById(R.id.picker_fragment);
-            }
-            placePickerFragment.setOnSelectionChangedListener(new PickerFragment.OnSelectionChangedListener() {
-                @Override
-                public void onSelectionChanged(PickerFragment<?> fragment) {
-                    finishActivity(); // call finish since you can only pick one place
-                }
-            });
-            placePickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-                @Override
-                public void onError(PickerFragment<?> fragment, FacebookException error) {
-                    PickerActivity.this.onError(error);
-                }
-            });
-            placePickerFragment.setOnDoneButtonClickedListener(new PickerFragment.OnDoneButtonClickedListener() {
-                @Override
-                public void onDoneButtonClicked(PickerFragment<?> fragment) {
-                    finishActivity();
-                }
-            });
-            fragmentToShow = placePickerFragment;
-        } else {
-            // Nothing to do, finish
-            setResult(RESULT_CANCELED);
-            finish();
-            return;
-        }
-
-        manager.beginTransaction().replace(R.id.picker_fragment, fragmentToShow).commit();
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        if (FRIEND_PICKER.equals(getIntent().getData())) {
-            try {
-                friendPickerFragment.loadData(false);
-            } catch (Exception ex) {
-                onError(ex);
-            }
-        } else if (PLACE_PICKER.equals(getIntent().getData())) {
-            try {
-                Location location = null;
-                Criteria criteria = new Criteria();
-                LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
-                String bestProvider = locationManager.getBestProvider(criteria, false);
-                if (bestProvider != null) {
-                    location = locationManager.getLastKnownLocation(bestProvider);
-                    if (locationManager.isProviderEnabled(bestProvider) && locationListener == null) {
-                        locationListener = new LocationListener() {
-                            @Override
-                            public void onLocationChanged(Location location) {
-                                float distance = location.distanceTo(placePickerFragment.getLocation());
-                                if (distance >= LOCATION_CHANGE_THRESHOLD) {
-                                    placePickerFragment.setLocation(location);
-                                    placePickerFragment.loadData(true);
-                                }
-                            }
-                            @Override
-                            public void onStatusChanged(String s, int i, Bundle bundle) {
-                            }
-                            @Override
-                            public void onProviderEnabled(String s) {
-                            }
-                            @Override
-                            public void onProviderDisabled(String s) {
-                            }
-                        };
-                        locationManager.requestLocationUpdates(bestProvider, 1, LOCATION_CHANGE_THRESHOLD,
-                                locationListener, Looper.getMainLooper());
-                    }
-                }
-                if (location == null) {
-                    String model = Build.MODEL;
-                    if (model.equals("sdk") || model.equals("google_sdk") || model.contains("x86")) {
-                        // this may be the emulator, pretend we're in an exotic place
-                        location = SAN_FRANCISCO_LOCATION;
-                    }
-                }
-                if (location != null) {
-                    placePickerFragment.setLocation(location);
-                    placePickerFragment.setRadiusInMeters(SEARCH_RADIUS_METERS);
-                    placePickerFragment.setSearchText(SEARCH_TEXT);
-                    placePickerFragment.setResultsLimit(SEARCH_RESULT_LIMIT);
-                    placePickerFragment.loadData(false);
-                } else {
-                    onError(getResources().getString(R.string.no_location_error), true);
-                }
-            } catch (Exception ex) {
-                onError(ex);
-            }
-        }
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        if (locationListener != null) {
-            LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
-            locationManager.removeUpdates(locationListener);
-            locationListener = null;
-        }
-    }
-
-    private void onError(Exception error) {
-        String text = getString(R.string.exception, error.getMessage());
-        Toast toast = Toast.makeText(this, text, Toast.LENGTH_SHORT);
-        toast.show();
-    }
-
-    private void onError(String error, final boolean finishActivity) {
-        AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        builder.setTitle(R.string.error_dialog_title).
-                setMessage(error).
-                setPositiveButton(R.string.error_dialog_button_text, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        if (finishActivity) {
-                            finishActivity();
-                        }
-                    }
-                });
-        builder.show();
-    }
-
-    private void finishActivity() {
-        ScrumptiousApplication app = (ScrumptiousApplication) getApplication();
-        if (FRIEND_PICKER.equals(getIntent().getData())) {
-            if (friendPickerFragment != null) {
-                app.setSelectedUsers(friendPickerFragment.getSelection());
-            }
-        } else if (PLACE_PICKER.equals(getIntent().getData())) {
-            if (placePickerFragment != null) {
-                app.setSelectedPlace(placePickerFragment.getSelection());
-            }
-        }
-        setResult(RESULT_OK, null);
-        finish();
-    }
-}
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/ScrumptiousApplication.java b/samples/Scrumptious/src/com/facebook/scrumptious/ScrumptiousApplication.java
deleted file mode 100644
index ee4a4dd3e..000000000
--- a/samples/Scrumptious/src/com/facebook/scrumptious/ScrumptiousApplication.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.scrumptious;
-
-import android.app.Application;
-import com.facebook.model.GraphPlace;
-import com.facebook.model.GraphUser;
-
-import java.util.List;
-
-/**
- * Use a custom Application class to pass state data between Activities.
- */
-public class ScrumptiousApplication extends Application {
-
-    private List<GraphUser> selectedUsers;
-    private GraphPlace selectedPlace;
-
-    public List<GraphUser> getSelectedUsers() {
-        return selectedUsers;
-    }
-
-    public void setSelectedUsers(List<GraphUser> users) {
-        selectedUsers = users;
-    }
-
-    public GraphPlace getSelectedPlace() {
-        return selectedPlace;
-    }
-
-    public void setSelectedPlace(GraphPlace place) {
-        this.selectedPlace = place;
-    }
-}
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
deleted file mode 100644
index 40bcf33e1..000000000
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
+++ /dev/null
@@ -1,1057 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.scrumptious;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.database.Cursor;
-import android.graphics.BitmapFactory;
-import android.net.Uri;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.provider.MediaStore;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-import android.util.Pair;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.WindowManager;
-import android.widget.*;
-import com.facebook.*;
-import com.facebook.internal.Utility;
-import com.facebook.model.*;
-import com.facebook.widget.FacebookDialog;
-import com.facebook.widget.ProfilePictureView;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.*;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Fragment that represents the main selection screen for Scrumptious.
- */
-public class SelectionFragment extends Fragment {
-
-    private static final String TAG = "SelectionFragment";
-    private static final String MEAL_OBJECT_TYPE = "fb_sample_scrumps:meal";
-    private static final String EAT_ACTION_TYPE = "fb_sample_scrumps:eat";
-
-    private static final String EAT_POST_ACTION_PATH = "me/" + EAT_ACTION_TYPE;
-    private static final String PENDING_ANNOUNCE_KEY = "pendingAnnounce";
-    private static final Uri M_FACEBOOK_URL = Uri.parse("http://m.facebook.com");
-    private static final int USER_GENERATED_MIN_SIZE = 480;
-
-    private static final int REAUTH_ACTIVITY_CODE = 100;
-    private static final String PERMISSION = "publish_actions";
-
-    private Button announceButton;
-    private ListView listView;
-    private ProgressDialog progressDialog;
-    private List<BaseListElement> listElements;
-    private ProfilePictureView profilePictureView;
-    private TextView userNameView;
-    private boolean pendingAnnounce;
-    private MainActivity activity;
-    private Uri photoUri;
-
-    private UiLifecycleHelper uiHelper;
-    private Session.StatusCallback sessionCallback = new Session.StatusCallback() {
-        @Override
-        public void call(final Session session, final SessionState state, final Exception exception) {
-            onSessionStateChange(session, state, exception);
-        }
-    };
-    private FacebookDialog.Callback nativeDialogCallback = new FacebookDialog.Callback() {
-        @Override
-        public void onComplete(FacebookDialog.PendingCall pendingCall, Bundle data) {
-            boolean resetSelections = true;
-            if (FacebookDialog.getNativeDialogDidComplete(data)) {
-                if (FacebookDialog.COMPLETION_GESTURE_CANCEL
-                        .equals(FacebookDialog.getNativeDialogCompletionGesture(data))) {
-                    // Leave selections alone if user canceled.
-                    resetSelections = false;
-                    showCancelResponse();
-                } else {
-                    showSuccessResponse(FacebookDialog.getNativeDialogPostId(data));
-                }
-            }
-
-            if (resetSelections) {
-                init(null);
-            }
-        }
-
-        @Override
-        public void onError(FacebookDialog.PendingCall pendingCall, Exception error, Bundle data) {
-            new AlertDialog.Builder(getActivity())
-                    .setPositiveButton(R.string.error_dialog_button_text, null)
-                    .setTitle(R.string.error_dialog_title)
-                    .setMessage(error.getLocalizedMessage())
-                    .show();
-        }
-    };
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        activity = (MainActivity) getActivity();
-        uiHelper = new UiLifecycleHelper(getActivity(), sessionCallback);
-        uiHelper.onCreate(savedInstanceState);
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        uiHelper.onResume();
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-        View view = inflater.inflate(R.layout.selection, container, false);
-
-        profilePictureView = (ProfilePictureView) view.findViewById(R.id.selection_profile_pic);
-        profilePictureView.setCropped(true);
-        userNameView = (TextView) view.findViewById(R.id.selection_user_name);
-        announceButton = (Button) view.findViewById(R.id.announce_button);
-        listView = (ListView) view.findViewById(R.id.selection_list);
-
-        announceButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                handleAnnounce();
-            }
-        });
-
-        init(savedInstanceState);
-
-        return view;
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        if (resultCode == Activity.RESULT_OK && requestCode >= 0 && requestCode < listElements.size()) {
-            listElements.get(requestCode).onActivityResult(data);
-        } else {
-            uiHelper.onActivityResult(requestCode, resultCode, data, nativeDialogCallback);
-        }
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle bundle) {
-        super.onSaveInstanceState(bundle);
-        for (BaseListElement listElement : listElements) {
-            listElement.onSaveInstanceState(bundle);
-        }
-        bundle.putBoolean(PENDING_ANNOUNCE_KEY, pendingAnnounce);
-        uiHelper.onSaveInstanceState(bundle);
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        uiHelper.onPause();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        uiHelper.onDestroy();
-        activity = null;
-    }
-
-    /**
-     * Notifies that the session token has been updated.
-     */
-    private void tokenUpdated() {
-        if (pendingAnnounce) {
-            handleAnnounce();
-        }
-    }
-
-    private void onSessionStateChange(final Session session, SessionState state, Exception exception) {
-        if (session != null && session.isOpened()) {
-            if (state.equals(SessionState.OPENED_TOKEN_UPDATED)) {
-                tokenUpdated();
-            } else {
-                makeMeRequest(session);
-            }
-        } else {
-            profilePictureView.setProfileId(null);
-            userNameView.setText("");
-        }
-    }
-
-    private void makeMeRequest(final Session session) {
-        Request request = Request.newMeRequest(session, new Request.GraphUserCallback() {
-            @Override
-            public void onCompleted(GraphUser user, Response response) {
-                if (session == Session.getActiveSession()) {
-                    if (user != null) {
-                        profilePictureView.setProfileId(user.getId());
-                        userNameView.setText(user.getName());
-                    }
-                }
-                if (response.getError() != null) {
-                    handleError(response.getError());
-                }
-            }
-        });
-        request.executeAsync();
-
-    }
-
-    /**
-     * Resets the view to the initial defaults.
-     */
-    private void init(Bundle savedInstanceState) {
-        announceButton.setEnabled(false);
-
-        listElements = new ArrayList<BaseListElement>();
-
-        listElements.add(new EatListElement(0));
-        listElements.add(new LocationListElement(1));
-        listElements.add(new PeopleListElement(2));
-        listElements.add(new PhotoListElement(3));
-
-        if (savedInstanceState != null) {
-            for (BaseListElement listElement : listElements) {
-                listElement.restoreState(savedInstanceState);
-            }
-            pendingAnnounce = savedInstanceState.getBoolean(PENDING_ANNOUNCE_KEY, false);
-        }
-
-        listView.setAdapter(new ActionListAdapter(getActivity(), R.id.selection_list, listElements));
-
-        Session session = Session.getActiveSession();
-        if (session != null && session.isOpened()) {
-            makeMeRequest(session);
-        }
-    }
-
-    private void handleAnnounce() {
-        pendingAnnounce = false;
-        Session session = Session.getActiveSession();
-
-        // if we have a session, then use the graph API to directly publish, otherwise use
-        // the native open graph share dialog.
-        if (session != null && session.isOpened()) {
-            handleGraphApiAnnounce();
-        } else {
-            handleNativeShareAnnounce();
-        }
-    }
-
-    private void handleGraphApiAnnounce() {
-        Session session = Session.getActiveSession();
-
-        List<String> permissions = session.getPermissions();
-        if (!permissions.contains(PERMISSION)) {
-            pendingAnnounce = true;
-            requestPublishPermissions(session);
-            return;
-        }
-
-        // Show a progress dialog because sometimes the requests can take a while.
-        progressDialog = ProgressDialog.show(getActivity(), "",
-                getActivity().getResources().getString(R.string.progress_dialog_text), true);
-
-        // Run this in a background thread so we can process the list of responses and extract errors.
-        AsyncTask<Void, Void, List<Response>> task = new AsyncTask<Void, Void, List<Response>>() {
-
-            @Override
-            protected List<Response> doInBackground(Void... voids) {
-                EatAction eatAction = createEatAction();
-
-                RequestBatch requestBatch = new RequestBatch();
-
-                String photoStagingUri = null;
-
-                if (photoUri != null) {
-                    try {
-                        Pair<File, Integer> fileAndMinDimemsion = getImageFileAndMinDimension();
-                        if (fileAndMinDimemsion != null) {
-                            Request photoStagingRequest =
-                                    Request.newUploadStagingResourceWithImageRequest(Session.getActiveSession(),
-                                            fileAndMinDimemsion.first, null);
-                            photoStagingRequest.setBatchEntryName("photoStaging");
-                            requestBatch.add(photoStagingRequest);
-                            // Facebook SDK * pro-tip *
-                            // We can use the result from one request in the batch as the input to another request.
-                            // In this case, the result from the staging upload is "uri", which we will use as the
-                            // input into the "url" field for images on the open graph action below.
-                            photoStagingUri = "{result=photoStaging:$.uri}";
-                            eatAction.setImage(getImageListForAction(photoStagingUri,
-                                    fileAndMinDimemsion.second >= USER_GENERATED_MIN_SIZE));
-                        }
-                    } catch (FileNotFoundException e) {
-                        // NOOP - if we can't upload the image, just skip it for now
-                    }
-                }
-                MealGraphObject meal = eatAction.getMeal();
-                if (meal.getCreateObject()) {
-                    Request createObjectRequest =
-                            Request.newPostOpenGraphObjectRequest(Session.getActiveSession(), meal, null);
-                    createObjectRequest.setBatchEntryName("createObject");
-                    requestBatch.add(createObjectRequest);
-                    eatAction.setProperty("meal", "{result=createObject:$.id}");
-                }
-
-                Request request = new Request(Session.getActiveSession(),
-                        EAT_POST_ACTION_PATH, null, HttpMethod.POST);
-                request.setGraphObject(eatAction);
-                requestBatch.add(request);
-
-                return requestBatch.executeAndWait();
-            }
-
-            @Override
-            protected void onPostExecute(List<Response> responses) {
-                // We only care about the last response, or the first one with an error.
-                Response finalResponse = null;
-                for (Response response : responses) {
-                    finalResponse = response;
-                    if (response != null && response.getError() != null) {
-                        break;
-                    }
-                }
-                onPostActionResponse(finalResponse);
-             }
-        };
-
-        task.execute();
-    }
-
-    private void handleNativeShareAnnounce() {
-        FacebookDialog.OpenGraphActionDialogBuilder builder = createDialogBuilder();
-        if (builder.canPresent()) {
-            uiHelper.trackPendingDialogCall(builder.build().present());
-        } else {
-            // If we can't show the native open graph share dialog because the Facebook app
-            // does not support it, then show then settings fragment so the user can log in.
-            activity.showSettingsFragment();
-        }
-    }
-
-    private FacebookDialog.OpenGraphActionDialogBuilder createDialogBuilder() {
-        EatAction eatAction = createEatAction();
-
-        if (photoUri != null) {
-            String photoUriString = photoUri.toString();
-            Pair<File, Integer> fileAndMinDimemsion = getImageFileAndMinDimension();
-            if (fileAndMinDimemsion != null) {
-                eatAction.setImage(getImageListForAction(photoUriString,
-                        fileAndMinDimemsion.second >= USER_GENERATED_MIN_SIZE));
-            }
-        }
-
-        return new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(),
-                eatAction, EAT_ACTION_TYPE, "meal")
-                .setFragment(SelectionFragment.this);
-    }
-
-    private Pair<File, Integer> getImageFileAndMinDimension() {
-        String [] filePath = { MediaStore.Images.Media.DATA };
-        Cursor cursor = getActivity().getContentResolver().query(photoUri, filePath, null, null, null);
-        if (cursor != null) {
-            cursor.moveToFirst();
-            int columnIndex = cursor.getColumnIndex(filePath[0]);
-            String photoFile = cursor.getString(columnIndex);
-            cursor.close();
-
-            File file = new File(photoFile);
-
-            InputStream is = null;
-            try {
-                is = new FileInputStream(file);
-
-                BitmapFactory.Options options = new BitmapFactory.Options();
-                options.inJustDecodeBounds = true;
-                BitmapFactory.decodeStream(is, null, options);
-
-                return new Pair<File, Integer>(file, Math.min(options.outWidth, options.outHeight));
-            } catch (Exception e) {
-                return null;
-            } finally {
-                Utility.closeQuietly(is);
-            }
-        }
-        return null;
-    }
-
-    /**
-     * Creates a GraphObject with the following format:
-     * {
-     *     url: ${uri},
-     *     user_generated: true
-     * }
-     */
-    private GraphObject getImageObject(String uri, boolean userGenerated) {
-        GraphObject imageObject = GraphObject.Factory.create();
-        imageObject.setProperty("url", uri);
-        if (userGenerated) {
-            imageObject.setProperty("user_generated", "true");
-        }
-        return imageObject;
-    }
-
-    private List<JSONObject> getImageListForAction(String uri, boolean userGenerated) {
-        return Arrays.asList(getImageObject(uri, userGenerated).getInnerJSONObject());
-    }
-
-    private EatAction createEatAction() {
-        EatAction eatAction = GraphObject.Factory.create(EatAction.class);
-        for (BaseListElement element : listElements) {
-            element.populateOGAction(eatAction);
-        }
-        return eatAction;
-    }
-
-    private void requestPublishPermissions(Session session) {
-        if (session != null) {
-            Session.NewPermissionsRequest newPermissionsRequest = new Session.NewPermissionsRequest(this, PERMISSION)
-                    // demonstrate how to set an audience for the publish permissions,
-                    // if none are set, this defaults to FRIENDS
-                    .setDefaultAudience(SessionDefaultAudience.FRIENDS)
-                    .setRequestCode(REAUTH_ACTIVITY_CODE);
-            session.requestNewPublishPermissions(newPermissionsRequest);
-        }
-    }
-
-    private void onPostActionResponse(Response response) {
-        if (progressDialog != null) {
-            progressDialog.dismiss();
-            progressDialog = null;
-        }
-        if (getActivity() == null) {
-            // if the user removes the app from the website, then a request will
-            // have caused the session to close (since the token is no longer valid),
-            // which means the splash fragment will be shown rather than this one,
-            // causing activity to be null. If the activity is null, then we cannot
-            // show any dialogs, so we return.
-            return;
-        }
-
-        PostResponse postResponse = response.getGraphObjectAs(PostResponse.class);
-
-        if (postResponse != null && postResponse.getId() != null) {
-            showSuccessResponse(postResponse.getId());
-            init(null);
-        } else {
-            handleError(response.getError());
-        }
-    }
-
-    private void showSuccessResponse(String postId) {
-        String dialogBody;
-        if (postId != null) {
-            dialogBody = String.format(getString(R.string.result_dialog_text_with_id), postId);
-        } else {
-            dialogBody = getString(R.string.result_dialog_text_default);
-        }
-        showResultDialog(dialogBody);
-    }
-
-    private void showCancelResponse() {
-        showResultDialog(getString(R.string.result_dialog_text_canceled));
-    }
-
-    private void showResultDialog(String dialogBody) {
-        new AlertDialog.Builder(getActivity())
-                .setPositiveButton(R.string.result_dialog_button_text, null)
-                .setTitle(R.string.result_dialog_title)
-                .setMessage(dialogBody)
-                .show();
-    }
-
-    private void handleError(FacebookRequestError error) {
-        DialogInterface.OnClickListener listener = null;
-        String dialogBody = null;
-
-        if (error == null) {
-            dialogBody = getString(R.string.error_dialog_default_text);
-        } else {
-            switch (error.getCategory()) {
-                case AUTHENTICATION_RETRY:
-                    // tell the user what happened by getting the message id, and
-                    // retry the operation later
-                    String userAction = (error.shouldNotifyUser()) ? "" :
-                            getString(error.getUserActionMessageId());
-                    dialogBody = getString(R.string.error_authentication_retry, userAction);
-                    listener = new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            Intent intent = new Intent(Intent.ACTION_VIEW, M_FACEBOOK_URL);
-                            startActivity(intent);
-                        }
-                    };
-                    break;
-
-                case AUTHENTICATION_REOPEN_SESSION:
-                    // close the session and reopen it.
-                    dialogBody = getString(R.string.error_authentication_reopen);
-                    listener = new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            Session session = Session.getActiveSession();
-                            if (session != null && !session.isClosed()) {
-                                session.closeAndClearTokenInformation();
-                            }
-                        }
-                    };
-                    break;
-
-                case PERMISSION:
-                    // request the publish permission
-                    dialogBody = getString(R.string.error_permission);
-                    listener = new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            pendingAnnounce = true;
-                            requestPublishPermissions(Session.getActiveSession());
-                        }
-                    };
-                    break;
-
-                case SERVER:
-                case THROTTLING:
-                    // this is usually temporary, don't clear the fields, and
-                    // ask the user to try again
-                    dialogBody = getString(R.string.error_server);
-                    break;
-
-                case BAD_REQUEST:
-                    // this is likely a coding error, ask the user to file a bug
-                    dialogBody = getString(R.string.error_bad_request, error.getErrorMessage());
-                    break;
-
-                case OTHER:
-                case CLIENT:
-                default:
-                    // an unknown issue occurred, this could be a code error, or
-                    // a server side issue, log the issue, and either ask the
-                    // user to retry, or file a bug
-                    dialogBody = getString(R.string.error_unknown, error.getErrorMessage());
-                    break;
-            }
-        }
-
-        new AlertDialog.Builder(getActivity())
-                .setPositiveButton(R.string.error_dialog_button_text, listener)
-                .setTitle(R.string.error_dialog_title)
-                .setMessage(dialogBody)
-                .show();
-    }
-
-    private void startPickerActivity(Uri data, int requestCode) {
-        Intent intent = new Intent();
-        intent.setData(data);
-        intent.setClass(getActivity(), PickerActivity.class);
-        startActivityForResult(intent, requestCode);
-    }
-
-    /**
-     * Interface representing the Meal Open Graph object.
-     */
-    private interface MealGraphObject extends OpenGraphObject {
-        public String getUrl();
-        public void setUrl(String url);
-
-        public String getId();
-        public void setId(String id);
-    }
-
-    /**
-     * Interface representing the Eat action.
-     */
-    private interface EatAction extends OpenGraphAction {
-        public MealGraphObject getMeal();
-        public void setMeal(MealGraphObject meal);
-    }
-
-    /**
-     * Used to inspect the response from posting an action
-     */
-    private interface PostResponse extends GraphObject {
-        String getId();
-    }
-
-    private class EatListElement extends BaseListElement {
-
-        private static final String FOOD_KEY = "food";
-        private static final String FOOD_URL_KEY = "food_url";
-
-        private final String[] foodChoices;
-        private final String[] foodUrls;
-        private String foodChoiceUrl = null;
-        private String foodChoice = null;
-
-        public EatListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_eating),
-                  getActivity().getResources().getString(R.string.action_eating),
-                  getActivity().getResources().getString(R.string.action_eating_default),
-                  requestCode);
-            foodChoices = getActivity().getResources().getStringArray(R.array.food_types);
-            foodUrls = getActivity().getResources().getStringArray(R.array.food_og_urls);
-        }
-
-        @Override
-        protected View.OnClickListener getOnClickListener() {
-            return new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    showMealOptions();
-                }
-            };
-        }
-
-        @Override
-        protected void populateOGAction(OpenGraphAction action) {
-            if (foodChoice != null && foodChoice.length() > 0) {
-                EatAction eatAction = action.cast(EatAction.class);
-                if (foodChoiceUrl != null && foodChoiceUrl.length() > 0) {
-                    MealGraphObject meal = GraphObject.Factory.create(MealGraphObject.class);
-                    meal.setUrl(foodChoiceUrl);
-                    eatAction.setMeal(meal);
-                } else {
-                    MealGraphObject meal = OpenGraphObject.Factory.createForPost(MealGraphObject.class,
-                            MEAL_OBJECT_TYPE);
-                    meal.setTitle(foodChoice);
-                    meal.setImageUrls(Arrays.asList(
-                            "https://fbcdn-photos-a.akamaihd.net/photos-ak-snc7/v85005/200/233936543368280/app_1_233936543368280_595563194.gif"));
-                    eatAction.setMeal(meal);
-                }
-            }
-        }
-
-        @Override
-        protected void onSaveInstanceState(Bundle bundle) {
-            if (foodChoice != null && foodChoiceUrl != null) {
-                bundle.putString(FOOD_KEY, foodChoice);
-                bundle.putString(FOOD_URL_KEY, foodChoiceUrl);
-            }
-        }
-
-        @Override
-        protected boolean restoreState(Bundle savedState) {
-            String food = savedState.getString(FOOD_KEY);
-            String foodUrl = savedState.getString(FOOD_URL_KEY);
-            if (food != null && foodUrl != null) {
-                foodChoice = food;
-                foodChoiceUrl = foodUrl;
-                setFoodText();
-                return true;
-            }
-            return false;
-        }
-
-        private void showMealOptions() {
-            String title = getActivity().getResources().getString(R.string.select_meal);
-            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-            builder.setTitle(title).
-                    setCancelable(true).
-                    setItems(foodChoices, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            foodChoiceUrl = foodUrls[i];
-                            if (foodChoiceUrl.length() == 0) {
-                                getCustomFood();
-                            } else {
-                                foodChoice = foodChoices[i];
-                                setFoodText();
-                                notifyDataChanged();
-                            }
-                        }
-                    });
-            builder.show();
-        }
-
-        private void getCustomFood() {
-            String title = getActivity().getResources().getString(R.string.enter_meal);
-            final EditText input = new EditText(getActivity());
-
-            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-            builder.setTitle(title)
-                    .setCancelable(true)
-                    .setView(input)
-                    .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            foodChoice = input.getText().toString();
-                            setFoodText();
-                            notifyDataChanged();
-                        }
-                    })
-                    .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                        }
-                    });
-            AlertDialog dialog = builder.create();
-            // always popup the keyboard when the alert dialog shows
-            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-            dialog.show();
-        }
-
-        private void setFoodText() {
-            if (foodChoice != null && foodChoice.length() > 0) {
-                setText2(foodChoice);
-                announceButton.setEnabled(true);
-            } else {
-                setText2(getActivity().getResources().getString(R.string.action_eating_default));
-                announceButton.setEnabled(false);
-            }
-        }
-    }
-
-    private class PeopleListElement extends BaseListElement {
-
-        private static final String FRIENDS_KEY = "friends";
-
-        private List<GraphUser> selectedUsers;
-
-        public PeopleListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_people),
-                  getActivity().getResources().getString(R.string.action_people),
-                  getActivity().getResources().getString(R.string.action_people_default),
-                  requestCode);
-        }
-
-        @Override
-        protected View.OnClickListener getOnClickListener() {
-            return new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (Session.getActiveSession() != null &&
-                            Session.getActiveSession().isOpened()) {
-                        startPickerActivity(PickerActivity.FRIEND_PICKER, getRequestCode());
-                    } else {
-                        activity.showSettingsFragment();
-                    }
-                }
-            };
-        }
-
-        @Override
-        protected void onActivityResult(Intent data) {
-            selectedUsers = ((ScrumptiousApplication) getActivity().getApplication()).getSelectedUsers();
-            setUsersText();
-            notifyDataChanged();
-        }
-
-        @Override
-        protected void populateOGAction(OpenGraphAction action) {
-            if (selectedUsers != null) {
-                action.setTags(selectedUsers);
-            }
-        }
-
-        @Override
-        protected void onSaveInstanceState(Bundle bundle) {
-            if (selectedUsers != null) {
-                bundle.putByteArray(FRIENDS_KEY, getByteArray(selectedUsers));
-            }
-        }
-
-        @Override
-        protected boolean restoreState(Bundle savedState) {
-            byte[] bytes = savedState.getByteArray(FRIENDS_KEY);
-            if (bytes != null) {
-                selectedUsers = restoreByteArray(bytes);
-                setUsersText();
-                return true;
-            }
-            return false;
-        }
-
-        private void setUsersText() {
-            String text = null;
-            if (selectedUsers != null) {
-                if (selectedUsers.size() == 1) {
-                    text = String.format(getResources().getString(R.string.single_user_selected),
-                            selectedUsers.get(0).getName());
-                } else if (selectedUsers.size() == 2) {
-                    text = String.format(getResources().getString(R.string.two_users_selected),
-                            selectedUsers.get(0).getName(), selectedUsers.get(1).getName());
-                } else if (selectedUsers.size() > 2) {
-                    text = String.format(getResources().getString(R.string.multiple_users_selected),
-                            selectedUsers.get(0).getName(), (selectedUsers.size() - 1));
-                }
-            }
-            if (text == null) {
-                text = getResources().getString(R.string.action_people_default);
-            }
-            setText2(text);
-        }
-
-        private byte[] getByteArray(List<GraphUser> users) {
-            // convert the list of GraphUsers to a list of String where each element is
-            // the JSON representation of the GraphUser so it can be stored in a Bundle
-            List<String> usersAsString = new ArrayList<String>(users.size());
-
-            for (GraphUser user : users) {
-                usersAsString.add(user.getInnerJSONObject().toString());
-            }
-            try {
-                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-                new ObjectOutputStream(outputStream).writeObject(usersAsString);
-                return outputStream.toByteArray();
-            } catch (IOException e) {
-                Log.e(TAG, "Unable to serialize users.", e);
-            }
-            return null;
-        }
-
-        private List<GraphUser> restoreByteArray(byte[] bytes) {
-            try {
-                @SuppressWarnings("unchecked")
-                List<String> usersAsString =
-                        (List<String>) (new ObjectInputStream(new ByteArrayInputStream(bytes))).readObject();
-                if (usersAsString != null) {
-                    List<GraphUser> users = new ArrayList<GraphUser>(usersAsString.size());
-                    for (String user : usersAsString) {
-                        GraphUser graphUser = GraphObject.Factory
-                                .create(new JSONObject(user), GraphUser.class);
-                        users.add(graphUser);
-                    }
-                    return users;
-                }
-            } catch (ClassNotFoundException e) {
-                Log.e(TAG, "Unable to deserialize users.", e);
-            } catch (IOException e) {
-                Log.e(TAG, "Unable to deserialize users.", e);
-            } catch (JSONException e) {
-                Log.e(TAG, "Unable to deserialize users.", e);
-            }
-            return null;
-        }
-    }
-
-    private class LocationListElement extends BaseListElement {
-
-        private static final String PLACE_KEY = "place";
-
-        private GraphPlace selectedPlace = null;
-
-        public LocationListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_location),
-                  getActivity().getResources().getString(R.string.action_location),
-                  getActivity().getResources().getString(R.string.action_location_default),
-                  requestCode);
-        }
-
-        @Override
-        protected View.OnClickListener getOnClickListener() {
-            return new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (Session.getActiveSession() != null &&
-                            Session.getActiveSession().isOpened()) {
-                        startPickerActivity(PickerActivity.PLACE_PICKER, getRequestCode());
-                    } else {
-                        activity.showSettingsFragment();
-                    }
-                }
-            };
-        }
-
-        @Override
-        protected void onActivityResult(Intent data) {
-            selectedPlace = ((ScrumptiousApplication) getActivity().getApplication()).getSelectedPlace();
-            setPlaceText();
-            notifyDataChanged();
-        }
-
-        @Override
-        protected void populateOGAction(OpenGraphAction action) {
-            if (selectedPlace != null) {
-                action.setPlace(selectedPlace);
-            }
-        }
-
-        @Override
-        protected void onSaveInstanceState(Bundle bundle) {
-            if (selectedPlace != null) {
-                bundle.putString(PLACE_KEY, selectedPlace.getInnerJSONObject().toString());
-            }
-        }
-
-        @Override
-        protected boolean restoreState(Bundle savedState) {
-            String place = savedState.getString(PLACE_KEY);
-            if (place != null) {
-                try {
-                    selectedPlace = GraphObject.Factory
-                            .create(new JSONObject(place), GraphPlace.class);
-                    setPlaceText();
-                    return true;
-                } catch (JSONException e) {
-                    Log.e(TAG, "Unable to deserialize place.", e);
-                }
-            }
-            return false;
-        }
-
-        private void setPlaceText() {
-            String text = null;
-            if (selectedPlace != null) {
-                text = selectedPlace.getName();
-            }
-            if (text == null) {
-                text = getResources().getString(R.string.action_location_default);
-            }
-            setText2(text);
-        }
-
-    }
-
-    private class PhotoListElement extends BaseListElement {
-        private static final int CAMERA = 0;
-        private static final int GALLERY = 1;
-        private static final String PHOTO_URI_KEY = "photo_uri";
-
-        public PhotoListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_photo),
-                    getActivity().getResources().getString(R.string.action_photo),
-                    getActivity().getResources().getString(R.string.action_photo_default),
-                    requestCode);
-            photoUri = null;
-        }
-
-        @Override
-        protected View.OnClickListener getOnClickListener() {
-            return new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    showPhotoChoice();
-                }
-            };
-        }
-
-        @Override
-        protected void onActivityResult(Intent data) {
-            photoUri = data.getData();
-            setPhotoText();
-        }
-
-        @Override
-        protected void populateOGAction(OpenGraphAction action) {
-        }
-
-        @Override
-        protected void onSaveInstanceState(Bundle bundle) {
-            if (photoUri != null) {
-                bundle.putParcelable(PHOTO_URI_KEY, photoUri);
-            }
-        }
-
-        @Override
-        protected boolean restoreState(Bundle savedState) {
-            photoUri = savedState.getParcelable(PHOTO_URI_KEY);
-            setPhotoText();
-            return true;
-        }
-
-        private void showPhotoChoice() {
-            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-            CharSequence camera = getResources().getString(R.string.action_photo_camera);
-            CharSequence gallery = getResources().getString(R.string.action_photo_gallery);
-            builder.setCancelable(true).
-                    setItems(new CharSequence[] {camera, gallery}, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (i == CAMERA) {
-                                startCameraActivity();
-                            } else if (i == GALLERY) {
-                                startGalleryActivity();
-                            }
-                        }
-                    });
-            builder.show();
-        }
-
-        private void setPhotoText() {
-            if (photoUri == null) {
-                setText2(getResources().getString(R.string.action_photo_default));
-            } else {
-                setText2(getResources().getString(R.string.action_photo_ready));
-            }
-        }
-
-        private void startCameraActivity() {
-            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-            startActivityForResult(intent, getRequestCode());
-        }
-
-        private void startGalleryActivity() {
-            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
-            intent.setType("image/*");
-            String selectPicture = getResources().getString(R.string.select_picture);
-            startActivityForResult(Intent.createChooser(intent, selectPicture), getRequestCode());
-        }
-    }
-
-    private class ActionListAdapter extends ArrayAdapter<BaseListElement> {
-        private List<BaseListElement> listElements;
-
-        public ActionListAdapter(Context context, int resourceId, List<BaseListElement> listElements) {
-            super(context, resourceId, listElements);
-            this.listElements = listElements;
-            for (int i = 0; i < listElements.size(); i++) {
-                listElements.get(i).setAdapter(this);
-            }
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            View view = convertView;
-            if (view == null) {
-                LayoutInflater inflater =
-                        (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = inflater.inflate(R.layout.listitem, null);
-            }
-
-            BaseListElement listElement = listElements.get(position);
-            if (listElement != null) {
-                view.setOnClickListener(listElement.getOnClickListener());
-                ImageView icon = (ImageView) view.findViewById(R.id.icon);
-                TextView text1 = (TextView) view.findViewById(R.id.text1);
-                TextView text2 = (TextView) view.findViewById(R.id.text2);
-                if (icon != null) {
-                    icon.setImageDrawable(listElement.getIcon());
-                }
-                if (text1 != null) {
-                    text1.setText(listElement.getText1());
-                }
-                if (text2 != null) {
-                    text2.setText(listElement.getText2());
-                }
-            }
-            return view;
-        }
-
-    }
-}
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
deleted file mode 100644
index f85fb29df..000000000
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.scrumptious;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-
-public class SplashFragment extends Fragment {
-
-    private Button skipLoginButton;
-    private SkipLoginCallback skipLoginCallback;
-
-    public interface SkipLoginCallback {
-        void onSkipLoginPressed();
-    }
-
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.splash, container, false);
-
-        skipLoginButton = (Button) view.findViewById(R.id.skip_login_button);
-        skipLoginButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (skipLoginCallback != null) {
-                    skipLoginCallback.onSkipLoginPressed();
-                }
-            }
-        });
-
-        return view;
-    }
-
-    public void setSkipLoginCallback(SkipLoginCallback callback) {
-        skipLoginCallback = callback;
-    }
-}
diff --git a/samples/SessionLoginSample/.classpath b/samples/SessionLoginSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/SessionLoginSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/SessionLoginSample/.project b/samples/SessionLoginSample/.project
deleted file mode 100644
index a6c125972..000000000
--- a/samples/SessionLoginSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>SessionLoginSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/SessionLoginSample/AndroidManifest.xml b/samples/SessionLoginSample/AndroidManifest.xml
deleted file mode 100644
index be2beb9be..000000000
--- a/samples/SessionLoginSample/AndroidManifest.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.samples.sessionlogin"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-
-    <application
-        android:icon="@drawable/icon"
-        android:label="@string/app_name" >
-        <activity
-            android:name=".SessionLoginSampleActivity"
-            android:label="@string/app_name"
-            android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity
-                android:name=".LoginUsingActivityActivity">
-        </activity>
-        <activity
-                android:name=".LoginUsingCustomFragmentActivity">
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <activity android:name=".LoginUsingLoginFragmentActivity"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id" />
-    </application>
-
-</manifest>
diff --git a/samples/SessionLoginSample/SessionLoginSample.iml b/samples/SessionLoginSample/SessionLoginSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/SessionLoginSample/SessionLoginSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SessionLoginSample/ant.properties b/samples/SessionLoginSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/SessionLoginSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/SessionLoginSample/build.xml b/samples/SessionLoginSample/build.xml
deleted file mode 100644
index 4f044bbee..000000000
--- a/samples/SessionLoginSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="SessionLoginSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env" />
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME" />
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/samples/SessionLoginSample/proguard-project.txt b/samples/SessionLoginSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/SessionLoginSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/SessionLoginSample/project.properties b/samples/SessionLoginSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/SessionLoginSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/SessionLoginSample/res/drawable-hdpi/icon.png b/samples/SessionLoginSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 78d41ad5f..000000000
Binary files a/samples/SessionLoginSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable-mdpi/icon.png b/samples/SessionLoginSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 22598aa33..000000000
Binary files a/samples/SessionLoginSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable-xhdpi/icon.png b/samples/SessionLoginSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index a2c3cb4b2..000000000
Binary files a/samples/SessionLoginSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable/icon.png b/samples/SessionLoginSample/res/drawable/icon.png
deleted file mode 100644
index 22598aa33..000000000
Binary files a/samples/SessionLoginSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/layout/activity.xml b/samples/SessionLoginSample/res/layout/activity.xml
deleted file mode 100644
index 52ca3daf9..000000000
--- a/samples/SessionLoginSample/res/layout/activity.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <TextView
-        android:id="@+id/instructionsOrLink"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/instructions"
-        android:autoLink="web"
-        android:linksClickable="true"
-        android:textAppearance="?android:attr/textAppearanceMedium" />
-
-    <Button
-        android:id="@+id/buttonLoginLogout"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/login" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml b/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml
deleted file mode 100644
index 09e8eb440..000000000
--- a/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <fragment android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:id="@+id/fragment"
-              android:name="com.facebook.samples.sessionlogin.SessionLoginFragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/fragment.xml b/samples/SessionLoginSample/res/layout/fragment.xml
deleted file mode 100644
index 8b3bbf7db..000000000
--- a/samples/SessionLoginSample/res/layout/fragment.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-              android:orientation="vertical">
-
-<TextView
-            android:id="@+id/instructionsOrLink"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/instructions"
-            android:autoLink="web"
-            android:linksClickable="true"
-            android:textAppearance="?android:attr/textAppearanceMedium" />
-
-    <Button
-            android:id="@+id/buttonLoginLogout"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/login_fragment_activity.xml b/samples/SessionLoginSample/res/layout/login_fragment_activity.xml
deleted file mode 100644
index 8ad44a93c..000000000
--- a/samples/SessionLoginSample/res/layout/login_fragment_activity.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <fragment android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:id="@+id/login_fragment"
-              android:name="com.facebook.widget.UserSettingsFragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/main.xml b/samples/SessionLoginSample/res/layout/main.xml
deleted file mode 100644
index a8042a2c1..000000000
--- a/samples/SessionLoginSample/res/layout/main.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <Button
-        android:id="@+id/buttonLoginActivity"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/login_using_activity" />
-
-    <Button
-            android:id="@+id/buttonLoginCustomFragment"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login_using_custom_fragment" />
-
-    <Button
-            android:id="@+id/buttonLoginFragment"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login_using_usersettingsfragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/values/strings.xml b/samples/SessionLoginSample/res/values/strings.xml
deleted file mode 100644
index bcece0ad1..000000000
--- a/samples/SessionLoginSample/res/values/strings.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-
-    <string name="login_using_activity">Login using Activity</string>
-    <string name="login_using_custom_fragment">Login using Custom Fragment</string>
-    <string name="login_using_usersettingsfragment">Login using UserSettingsFragment</string>
-    <string name="hello">Hello World, SessionLoginSampleActivity!</string>
-    <string name="app_name">SessionLoginSample</string>
-    <string name="login">Login</string>
-    <string name="instructions">Login to create a link to fetch account data</string>
-    <string name="logout">Log out</string>
-    <string name="app_id">380615018626574</string>
-
-</resources>
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
deleted file mode 100644
index df4049f65..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.LoggingBehavior;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.Settings;
-
-public class LoginUsingActivityActivity extends Activity {
-    private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";
-
-    private TextView textInstructionsOrLink;
-    private Button buttonLoginLogout;
-    private Session.StatusCallback statusCallback = new SessionStatusCallback();
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity);
-        buttonLoginLogout = (Button)findViewById(R.id.buttonLoginLogout);
-        textInstructionsOrLink = (TextView)findViewById(R.id.instructionsOrLink);
-
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        Session session = Session.getActiveSession();
-        if (session == null) {
-            if (savedInstanceState != null) {
-                session = Session.restoreSession(this, null, statusCallback, savedInstanceState);
-            }
-            if (session == null) {
-                session = new Session(this);
-            }
-            Session.setActiveSession(session);
-            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
-                session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-            }
-        }
-
-        updateView();
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Session.getActiveSession().addCallback(statusCallback);
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-        Session.getActiveSession().removeCallback(statusCallback);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        Session session = Session.getActiveSession();
-        Session.saveSession(session, outState);
-    }
-
-    private void updateView() {
-        Session session = Session.getActiveSession();
-        if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
-            buttonLoginLogout.setText(R.string.logout);
-            buttonLoginLogout.setOnClickListener(new OnClickListener() {
-                public void onClick(View view) { onClickLogout(); }
-            });
-        } else {
-            textInstructionsOrLink.setText(R.string.instructions);
-            buttonLoginLogout.setText(R.string.login);
-            buttonLoginLogout.setOnClickListener(new OnClickListener() {
-                public void onClick(View view) { onClickLogin(); }
-            });
-        }
-    }
-
-    private void onClickLogin() {
-        Session session = Session.getActiveSession();
-        if (!session.isOpened() && !session.isClosed()) {
-            session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-        } else {
-            Session.openActiveSession(this, true, statusCallback);
-        }
-    }
-
-    private void onClickLogout() {
-        Session session = Session.getActiveSession();
-        if (!session.isClosed()) {
-            session.closeAndClearTokenInformation();
-        }
-    }
-
-    private class SessionStatusCallback implements Session.StatusCallback {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            updateView();
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java
deleted file mode 100644
index 1e06f6999..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-
-public class LoginUsingCustomFragmentActivity extends FragmentActivity {
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.custom_fragment_activity);
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java
deleted file mode 100644
index 59f54c603..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.util.Log;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.widget.UserSettingsFragment;
-
-public class LoginUsingLoginFragmentActivity extends FragmentActivity {
-    private UserSettingsFragment userSettingsFragment;
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.login_fragment_activity);
-
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        userSettingsFragment = (UserSettingsFragment) fragmentManager.findFragmentById(R.id.login_fragment);
-        userSettingsFragment.setSessionStatusCallback(new Session.StatusCallback() {
-            @Override
-            public void call(Session session, SessionState state, Exception exception) {
-                Log.d("LoginUsingLoginFragmentActivity", String.format("New session state: %s", state.toString()));
-            }
-        });
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        userSettingsFragment.onActivityResult(requestCode, resultCode, data);
-        super.onActivityResult(requestCode, resultCode, data);
-    }
-
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java
deleted file mode 100644
index 18ec1b098..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.LoggingBehavior;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.Settings;
-
-public class SessionLoginFragment extends Fragment {
-    private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";
-
-    private TextView textInstructionsOrLink;
-    private Button buttonLoginLogout;
-    private Session.StatusCallback statusCallback = new SessionStatusCallback();
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment, container, false);
-
-        buttonLoginLogout = (Button) view.findViewById(R.id.buttonLoginLogout);
-        textInstructionsOrLink = (TextView) view.findViewById(R.id.instructionsOrLink);
-
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        Session session = Session.getActiveSession();
-        if (session == null) {
-            if (savedInstanceState != null) {
-                session = Session.restoreSession(getActivity(), null, statusCallback, savedInstanceState);
-            }
-            if (session == null) {
-                session = new Session(getActivity());
-            }
-            Session.setActiveSession(session);
-            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
-                session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-            }
-        }
-
-        updateView();
-
-        return view;
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Session.getActiveSession().addCallback(statusCallback);
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-        Session.getActiveSession().removeCallback(statusCallback);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        Session.getActiveSession().onActivityResult(getActivity(), requestCode, resultCode, data);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        Session session = Session.getActiveSession();
-        Session.saveSession(session, outState);
-    }
-
-    private void updateView() {
-        Session session = Session.getActiveSession();
-        if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
-            buttonLoginLogout.setText(R.string.logout);
-            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View view) { onClickLogout(); }
-            });
-        } else {
-            textInstructionsOrLink.setText(R.string.instructions);
-            buttonLoginLogout.setText(R.string.login);
-            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View view) { onClickLogin(); }
-            });
-        }
-    }
-
-    private void onClickLogin() {
-        Session session = Session.getActiveSession();
-        if (!session.isOpened() && !session.isClosed()) {
-            session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-        } else {
-            Session.openActiveSession(getActivity(), this, true, statusCallback);
-        }
-    }
-
-    private void onClickLogout() {
-        Session session = Session.getActiveSession();
-        if (!session.isClosed()) {
-            session.closeAndClearTokenInformation();
-        }
-    }
-
-    private class SessionStatusCallback implements Session.StatusCallback {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            updateView();
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
deleted file mode 100644
index 87dea2181..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-
-public class SessionLoginSampleActivity extends Activity {
-
-    private Button buttonLoginActivity;
-    private Button buttonCustomFragment;
-    private Button buttonLoginFragment;
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.main);
-
-        // We demonstrate three different ways of managing session login/logout behavior:
-        // 1) LoginUsingActivityActivity implements an Activity that handles all of its own
-        //    session management.
-        // 2) LoginUsingCustomFragmentActivity uses a Fragment that handles session management;
-        //    this Fragment could be composed as part of a more complex Activity, although in this
-        //    case it is the only UI that the Activity displays.
-        // 3) LoginUsingLoginFragmentActivity is similar to LoginUsingCustomFragmentActivity, but
-        //    uses the UserSettingsFragment class provided by the SDK to handle session management. As
-        //    in (2), this Fragment could be composed as part of a more complex Activity in a real app.
-        buttonLoginActivity = (Button) findViewById(R.id.buttonLoginActivity);
-        buttonLoginActivity.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingActivityActivity.class);
-                startActivity(intent);
-            }
-        });
-
-        buttonCustomFragment = (Button) findViewById(R.id.buttonLoginCustomFragment);
-        buttonCustomFragment.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingCustomFragmentActivity.class);
-                startActivity(intent);
-            }
-        });
-
-        buttonLoginFragment = (Button) findViewById(R.id.buttonLoginFragment);
-        buttonLoginFragment.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingLoginFragmentActivity.class);
-                startActivity(intent);
-            }
-        });
-    }
-}
diff --git a/samples/SwitchUserSample/.classpath b/samples/SwitchUserSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/SwitchUserSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/SwitchUserSample/.project b/samples/SwitchUserSample/.project
deleted file mode 100644
index 9dc13d0d4..000000000
--- a/samples/SwitchUserSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>SwitchUserSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
deleted file mode 100644
index 8107b8d41..000000000
--- a/samples/SwitchUserSample/AndroidManifest.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.switchuser"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon" >
-        <activity android:name=".MainActivity"
-                  android:label="@string/app_name"
-                  android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-</manifest> 
diff --git a/samples/SwitchUserSample/SwitchUserSample.iml b/samples/SwitchUserSample/SwitchUserSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/SwitchUserSample/SwitchUserSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SwitchUserSample/ant.properties b/samples/SwitchUserSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/SwitchUserSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/SwitchUserSample/build.xml b/samples/SwitchUserSample/build.xml
deleted file mode 100644
index ee88101d7..000000000
--- a/samples/SwitchUserSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="SwitchUserSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/SwitchUserSample/proguard-project.txt b/samples/SwitchUserSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/SwitchUserSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/SwitchUserSample/project.properties b/samples/SwitchUserSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/SwitchUserSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/SwitchUserSample/res/drawable-hdpi/icon.png b/samples/SwitchUserSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index cda826b7f..000000000
Binary files a/samples/SwitchUserSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/SwitchUserSample/res/drawable-mdpi/icon.png b/samples/SwitchUserSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index ffd35f432..000000000
Binary files a/samples/SwitchUserSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/SwitchUserSample/res/drawable-xhdpi/icon.png b/samples/SwitchUserSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index be63ade0b..000000000
Binary files a/samples/SwitchUserSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/SwitchUserSample/res/drawable/icon.png b/samples/SwitchUserSample/res/drawable/icon.png
deleted file mode 100644
index ffd35f432..000000000
Binary files a/samples/SwitchUserSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/SwitchUserSample/res/layout/fragment_profile.xml b/samples/SwitchUserSample/res/layout/fragment_profile.xml
deleted file mode 100644
index 58fd5b4b6..000000000
--- a/samples/SwitchUserSample/res/layout/fragment_profile.xml
+++ /dev/null
@@ -1,39 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:app="http://schemas.android.com/apk/res-auto"
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-        >
-    <TextView
-            android:id="@+id/profileUserName"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginBottom="20dp"
-            android:text="@string/greeting_no_user"
-            android:freezesText="true"
-            />
-    <com.facebook.widget.ProfilePictureView
-            android:id="@+id/profilePic"
-            android:layout_height="wrap_content"
-            android:layout_width="wrap_content"
-            app:preset_size="large"
-            />
-</LinearLayout>
-
diff --git a/samples/SwitchUserSample/res/layout/list_item_user.xml b/samples/SwitchUserSample/res/layout/list_item_user.xml
deleted file mode 100644
index 9ae2b333d..000000000
--- a/samples/SwitchUserSample/res/layout/list_item_user.xml
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:app="http://schemas.android.com/apk/res-auto"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        >
-
-    <com.facebook.widget.ProfilePictureView
-            android:id="@+id/slotPic"
-            android:layout_height="wrap_content"
-            android:layout_width="wrap_content"
-            android:layout_weight="0"
-            android:layout_margin="10dp"
-            app:preset_size="small"
-            />
-
-    <TextView
-            android:id="@+id/slotUserName"
-            android:layout_height="wrap_content"
-            android:layout_width="0dp"
-            android:layout_weight="1"
-            android:layout_gravity="center_vertical"
-            />
-
-    <CheckBox
-            android:id="@+id/currentUserIndicator"
-            android:layout_height="wrap_content"
-            android:layout_width="wrap_content"
-            android:layout_weight="0"
-            android:layout_gravity="center_vertical"
-            android:focusable="false"
-            android:enabled="false"
-            />
-
-</LinearLayout>
diff --git a/samples/SwitchUserSample/res/layout/main.xml b/samples/SwitchUserSample/res/layout/main.xml
deleted file mode 100644
index 25bca4440..000000000
--- a/samples/SwitchUserSample/res/layout/main.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-             android:id="@+id/fragmentContainer"
-             android:layout_width="match_parent"
-             android:layout_height="match_parent"
-        />
diff --git a/samples/SwitchUserSample/res/menu/context_settings.xml b/samples/SwitchUserSample/res/menu/context_settings.xml
deleted file mode 100644
index e10fdc7ba..000000000
--- a/samples/SwitchUserSample/res/menu/context_settings.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<menu xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:id="@+id/menu_item_clear_slot"
-          android:title="@string/menu_item_clear_slot"
-          />
-</menu>
diff --git a/samples/SwitchUserSample/res/menu/options_profile.xml b/samples/SwitchUserSample/res/menu/options_profile.xml
deleted file mode 100644
index 972e131bf..000000000
--- a/samples/SwitchUserSample/res/menu/options_profile.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<menu xmlns:android="http://schemas.android.com/apk/res/android">
-    <item
-            android:id="@+id/menu_item_switch"
-            android:title="@string/menu_item_switch_user"
-            />
-</menu>
diff --git a/samples/SwitchUserSample/res/values/strings.xml b/samples/SwitchUserSample/res/values/strings.xml
deleted file mode 100644
index ab1edfefa..000000000
--- a/samples/SwitchUserSample/res/values/strings.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">SwitchUserSample</string>
-    <string name="empty_slot">Empty Slot</string>
-    <string name="greeting_format">Hello, %s!</string>
-    <string name="greeting_no_user">Please select a user via the options menu</string>
-    <string name="menu_item_switch_user">Select User</string>
-    <string name="menu_item_clear_slot">Clear this slot</string>
-    <string name="app_id">327842977278179</string>
-</resources>
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
deleted file mode 100644
index 94e6e150a..000000000
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
+++ /dev/null
@@ -1,251 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.switchuser;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.view.MenuItem;
-import com.facebook.*;
-import com.facebook.model.GraphUser;
-
-public class MainActivity extends FragmentActivity {
-
-    private static final String SHOWING_SETTINGS_KEY = "Showing settings";
-    private static final String TOKEN_CACHE_NAME_KEY = "TokenCacheName";
-
-    private ProfileFragment profileFragment;
-    private SettingsFragment settingsFragment;
-    private boolean isShowingSettings;
-    private Slot currentSlot;
-    private Session currentSession;
-    private Session.StatusCallback sessionStatusCallback;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-
-        restoreFragments(savedInstanceState);
-
-        sessionStatusCallback = new Session.StatusCallback() {
-            @Override
-            public void call(Session session, SessionState state, Exception exception) {
-                onSessionStateChange(session, state, exception);
-            }
-        };
-
-        if (savedInstanceState != null) {
-            if (savedInstanceState.getBoolean(SHOWING_SETTINGS_KEY)) {
-                showSettings();
-            } else {
-                showProfile();
-            }
-
-            SharedPreferencesTokenCachingStrategy restoredCache = new SharedPreferencesTokenCachingStrategy(
-                    this,
-                    savedInstanceState.getString(TOKEN_CACHE_NAME_KEY));
-            currentSession = Session.restoreSession(
-                    this,
-                    restoredCache,
-                    sessionStatusCallback,
-                    savedInstanceState);
-        } else {
-            showProfile();
-        }
-    }
-
-    @Override
-    public void onBackPressed() {
-        if (isShowingSettings()) {
-            // This back is from the settings fragment
-            showProfile();
-        } else {
-            // Allow the user to back out of the app as well.
-            super.onBackPressed();
-        }
-    }
-
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        outState.putBoolean(SHOWING_SETTINGS_KEY, isShowingSettings());
-        if (currentSlot != null) {
-            outState.putString(TOKEN_CACHE_NAME_KEY, currentSlot.getTokenCacheName());
-        }
-
-        FragmentManager manager = getSupportFragmentManager();
-        manager.putFragment(outState, SettingsFragment.TAG, settingsFragment);
-        manager.putFragment(outState, ProfileFragment.TAG, profileFragment);
-
-        Session.saveSession(currentSession, outState);
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        settingsFragment.setSlotChangedListener(new SettingsFragment.OnSlotChangedListener() {
-            @Override
-            public void onSlotChanged(Slot newSlot) {
-                handleSlotChange(newSlot);
-            }
-        });
-
-        profileFragment.setOnOptionsItemSelectedListener(new ProfileFragment.OnOptionsItemSelectedListener() {
-            @Override
-            public boolean onOptionsItemSelected(MenuItem item) {
-                return handleOptionsItemSelected(item);
-            }
-        });
-
-        if (currentSession != null) {
-            currentSession.addCallback(sessionStatusCallback);
-        }
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-
-        settingsFragment.setSlotChangedListener(null);
-        profileFragment.setOnOptionsItemSelectedListener(null);
-
-        if (currentSession != null) {
-            currentSession.removeCallback(sessionStatusCallback);
-        }
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        if (currentSession != null) {
-            currentSession.onActivityResult(this, requestCode, resultCode, data);
-        }
-    }
-
-    private void onSessionStateChange(Session session, SessionState state, Exception exception) {
-        if (session != currentSession) {
-            return;
-        }
-
-        if (state.isOpened()) {
-            // Log in just happened.
-            fetchUserInfo();
-            showProfile();
-        } else if (state.isClosed()) {
-            // Log out just happened. Update the UI.
-            updateFragments(null);
-        }
-    }
-
-    private void restoreFragments(Bundle savedInstanceState) {
-        FragmentManager manager = getSupportFragmentManager();
-        FragmentTransaction transaction = manager.beginTransaction();
-
-        if (savedInstanceState != null) {
-            profileFragment = (ProfileFragment)manager.getFragment(savedInstanceState, ProfileFragment.TAG);
-            settingsFragment = (SettingsFragment)manager.getFragment(savedInstanceState, SettingsFragment.TAG);
-        }
-
-        if (profileFragment == null) {
-            profileFragment = new ProfileFragment();
-            transaction.add(R.id.fragmentContainer, profileFragment, ProfileFragment.TAG);
-        }
-
-        if (settingsFragment == null) {
-            settingsFragment = new SettingsFragment();
-            transaction.add(R.id.fragmentContainer, settingsFragment, SettingsFragment.TAG);
-        }
-
-        transaction.commit();
-    }
-
-    private void showSettings() {
-        isShowingSettings = true;
-
-        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
-        transaction.hide(profileFragment)
-                .show(settingsFragment)
-                .commit();
-    }
-
-    private boolean isShowingSettings() {
-        return isShowingSettings;
-    }
-
-    private void showProfile() {
-        isShowingSettings = false;
-
-        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
-        transaction.hide(settingsFragment)
-                .show(profileFragment)
-                .commit();
-    }
-
-    private void fetchUserInfo() {
-        if (currentSession != null && currentSession.isOpened()) {
-            Request request = Request.newMeRequest(currentSession, new Request.GraphUserCallback() {
-                @Override
-                public void onCompleted(GraphUser me, Response response) {
-                    if (response.getRequest().getSession() == currentSession) {
-                        updateFragments(me);
-                    }
-                }
-            });
-            request.executeAsync();
-        }
-    }
-
-    private void handleSlotChange(Slot newSlot) {
-        if (currentSession != null) {
-            currentSession.close();
-            currentSession = null;
-        }
-
-        if (newSlot != null) {
-            currentSlot = newSlot;
-            currentSession = new Session.Builder(this)
-                    .setTokenCachingStrategy(currentSlot.getTokenCache())
-                    .build();
-            currentSession.addCallback(sessionStatusCallback);
-
-            Session.OpenRequest openRequest = new Session.OpenRequest(this);
-            openRequest.setLoginBehavior(newSlot.getLoginBehavior());
-            openRequest.setRequestCode(Session.DEFAULT_AUTHORIZE_ACTIVITY_CODE);
-            currentSession.openForRead(openRequest);
-        }
-    }
-
-    private boolean handleOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.menu_item_switch:
-                showSettings();
-                return true;
-            default:
-                return false;
-        }
-    }
-
-    private void updateFragments(GraphUser user) {
-        settingsFragment.updateViewForUser(user);
-        profileFragment.updateViewForUser(user);
-    }
-}
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/ProfileFragment.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/ProfileFragment.java
deleted file mode 100644
index 7dde4de74..000000000
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/ProfileFragment.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.switchuser;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.*;
-import android.widget.TextView;
-import com.facebook.model.GraphUser;
-import com.facebook.widget.ProfilePictureView;
-
-public class ProfileFragment extends Fragment {
-
-    public static final String TAG = "ProfileFragment";
-
-    private TextView userNameView;
-    private ProfilePictureView profilePictureView;
-    private OnOptionsItemSelectedListener onOptionsItemSelectedListener;
-
-    private GraphUser pendingUpdateForUser;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setHasOptionsMenu(true);
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        super.onCreateOptionsMenu(menu, inflater);
-        inflater.inflate(R.menu.options_profile, menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        boolean handled = false;
-        OnOptionsItemSelectedListener listener = onOptionsItemSelectedListener;
-        if (listener != null) {
-            handled = listener.onOptionsItemSelected(item);
-        }
-
-        if (!handled) {
-            handled = super.onOptionsItemSelected(item);
-        }
-
-        return handled;
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {
-        View v = inflater.inflate(R.layout.fragment_profile, parent, false);
-
-        userNameView = (TextView)v.findViewById(R.id.profileUserName);
-        profilePictureView = (ProfilePictureView)v.findViewById(R.id.profilePic);
-
-        if (pendingUpdateForUser != null) {
-            updateViewForUser(pendingUpdateForUser);
-            pendingUpdateForUser = null;
-        }
-
-        return v;
-    }
-
-    public void setOnOptionsItemSelectedListener(OnOptionsItemSelectedListener listener) {
-        this.onOptionsItemSelectedListener = listener;
-    }
-
-    public void updateViewForUser(GraphUser user) {
-        if (userNameView == null || profilePictureView == null || !isAdded()) {
-            // Fragment not yet added to the view. So let's store which user was intended
-            // for display.
-            pendingUpdateForUser = user;
-            return;
-        }
-
-        if (user == null) {
-            profilePictureView.setProfileId(null);
-            userNameView.setText(R.string.greeting_no_user);
-        } else {
-            profilePictureView.setProfileId(user.getId());
-            userNameView.setText(
-                    String.format(getString(R.string.greeting_format), user.getFirstName()));
-        }
-    }
-
-    public interface OnOptionsItemSelectedListener {
-        boolean onOptionsItemSelected(MenuItem item);
-    }
-}
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
deleted file mode 100644
index dd1b1bc77..000000000
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
+++ /dev/null
@@ -1,283 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.switchuser;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.support.v4.app.ListFragment;
-import android.view.*;
-import android.widget.*;
-import com.facebook.model.GraphUser;
-import com.facebook.widget.ProfilePictureView;
-import com.facebook.SessionLoginBehavior;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-
-public class SettingsFragment extends ListFragment {
-
-    public static final String TAG = "SettingsFragment";
-
-    private static final String CURRENT_SLOT_KEY = "CurrentSlot";
-
-    private SlotManager slotManager;
-    private OnSlotChangedListener slotChangedListener;
-    private boolean hasPendingNotifySlotChanged;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        slotManager = new SlotManager();
-        slotManager.restore(
-                getActivity(),
-                savedInstanceState != null ?
-                        savedInstanceState.getInt(CURRENT_SLOT_KEY, SlotManager.NO_SLOT) :
-                        SlotManager.NO_SLOT);
-        ArrayList<Slot> slotList = new ArrayList<Slot>(
-                Arrays.asList(slotManager.getAllSlots()));
-
-        setListAdapter(new SlotAdapter(slotList));
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {
-        View view = super.onCreateView(inflater, parent, savedInstanceState);
-        registerForContextMenu(view.findViewById(android.R.id.list));
-
-        return view;
-    }
-
-    @Override
-    public void onCreateContextMenu(ContextMenu menu, View view, ContextMenu.ContextMenuInfo menuInfo) {
-        super.onCreateContextMenu(menu, view, menuInfo);
-        getActivity().getMenuInflater().inflate(R.menu.context_settings, menu);
-    }
-
-    @Override
-    public void onListItemClick(ListView l, View view, int position, long id) {
-        slotManager.toggleSlot(position);
-    }
-
-    @Override
-    public boolean onContextItemSelected(MenuItem item) {
-        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
-        SlotAdapter adapter = (SlotAdapter) getListAdapter();
-        Slot slot = adapter.getItem(info.position);
-
-        switch (item.getItemId()) {
-            case R.id.menu_item_clear_slot:
-                if (slot.getUserId() != null) {
-                    // Clear out data that this app stored in the cache
-                    // Not calling Session.closeAndClearTokenInformation() because we have additional
-                    // data stored in the cache.
-                    slot.clear();
-                    if (slot == slotManager.getSelectedSlot()) {
-                        slotManager.toggleSlot(info.position);
-                    }
-
-                    updateListView();
-                }
-                return true;
-        }
-
-        return super.onContextItemSelected(item);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        outState.putInt(CURRENT_SLOT_KEY, slotManager.getSelectedSlotNumber());
-    }
-
-    public void setSlotChangedListener(OnSlotChangedListener listener) {
-        slotChangedListener = listener;
-        if (listener != null && hasPendingNotifySlotChanged) {
-            notifySlotChanged();
-            hasPendingNotifySlotChanged = false;
-        }
-    }
-
-    public void updateViewForUser(GraphUser user) {
-        if (slotManager == null) {
-            // Fragment has not had onCreate called yet.
-            return;
-        }
-
-        if (user != null) {
-            Slot s = slotManager.getSelectedSlot();
-            if (s != null) {
-                s.update(user);
-            }
-        } else {
-            // If the user is null, then there isn't an actively selected
-            // user. This can happen if the user cancelled a login. So make sure that
-            // SlotManager is updated properly.
-            slotManager.setSelectedSlotNumber(SlotManager.NO_SLOT);
-        }
-
-        updateListView();
-    }
-
-    private void notifySlotChanged() {
-        OnSlotChangedListener listener = slotChangedListener;
-        if (listener != null) {
-            Slot newSlot = slotManager.getSelectedSlot();
-            listener.onSlotChanged(newSlot);
-        } else {
-            hasPendingNotifySlotChanged = true;
-        }
-    }
-
-    private void updateListView() {
-        SlotAdapter adapter = (SlotAdapter) getListAdapter();
-        adapter.notifyDataSetChanged();
-    }
-
-    public interface OnSlotChangedListener {
-        void onSlotChanged(Slot newSlot);
-    }
-
-    private class SlotAdapter extends ArrayAdapter<Slot> {
-
-        public SlotAdapter(ArrayList<Slot> slots) {
-            super(getActivity(), android.R.layout.simple_list_item_1, slots);
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            if (null == convertView) {
-                convertView = getActivity().getLayoutInflater()
-                        .inflate(R.layout.list_item_user, null);
-            }
-
-            Slot slot = getItem(position);
-            String userName = slot.getUserName();
-            if (userName == null) {
-                userName = getString(R.string.empty_slot);
-            }
-
-            ProfilePictureView profilePictureView = (ProfilePictureView) convertView.findViewById(
-                    R.id.slotPic);
-            profilePictureView.setCropped(true);
-            profilePictureView.setProfileId(slot.getUserId());
-
-            TextView userNameTextView = (TextView) convertView.findViewById(
-                    R.id.slotUserName);
-            userNameTextView.setText(userName);
-
-            CheckBox currentUserCheckBox = (CheckBox) convertView.findViewById(
-                    R.id.currentUserIndicator);
-            currentUserCheckBox.setChecked(slotManager.getSelectedSlot() == slot);
-
-            return convertView;
-        }
-
-    }
-
-    private class SlotManager {
-        static final int NO_SLOT = -1;
-
-        private final static int MAX_SLOTS = 4;
-
-        private static final String SETTINGS_CURRENT_SLOT_KEY = "CurrentSlot";
-        private static final String SETTINGS_NAME = "UserManagerSettings";
-
-        private SharedPreferences settings;
-        private int selectedSlotNumber = NO_SLOT;
-
-        private Slot[] slots;
-
-        void restore(Context context, int oldSelectedSlot) {
-            if (context == null) {
-                throw new IllegalArgumentException("context cannot be null");
-            }
-
-            Context applicationContext = context.getApplicationContext();
-            applicationContext = (applicationContext == null) ? context : applicationContext;
-
-            slots = new Slot[MAX_SLOTS];
-            for (int i = 0; i < MAX_SLOTS; i++) {
-                SessionLoginBehavior loginBehavior = (i == 0) ?
-                        SessionLoginBehavior.SSO_WITH_FALLBACK :
-                        SessionLoginBehavior.SUPPRESS_SSO;
-                slots[i] = new Slot(applicationContext, i, loginBehavior);
-            }
-
-            // Restore the last known state from when the app ran last.
-            settings = applicationContext.getSharedPreferences(SETTINGS_NAME, Context.MODE_PRIVATE);
-            int savedSlotNumber = settings.getInt(SETTINGS_CURRENT_SLOT_KEY, NO_SLOT);
-            if (savedSlotNumber != NO_SLOT && savedSlotNumber != oldSelectedSlot) {
-                // This will trigger the full flow of creating and opening the right session
-                toggleSlot(savedSlotNumber);
-            } else {
-                // We already knew which slot was selected. So don't notify that a new slot was
-                // selected since that will close out the old session and recreate a new one. And
-                // doing so will have the effect of clearing out state like the profile pic.
-                setSelectedSlotNumber(savedSlotNumber);
-            }
-        }
-
-        void toggleSlot(int slot) {
-            validateSlot(slot);
-
-            if (slot == selectedSlotNumber) {
-                setSelectedSlotNumber(NO_SLOT);
-            } else {
-                setSelectedSlotNumber(slot);
-            }
-
-            notifySlotChanged();
-        }
-
-        Slot getSelectedSlot() {
-            if (selectedSlotNumber == NO_SLOT) {
-                return null;
-            } else {
-                return getSlot(selectedSlotNumber);
-            }
-        }
-
-        int getSelectedSlotNumber() {
-            return selectedSlotNumber;
-        }
-
-        Slot[] getAllSlots() {
-            return slots;
-        }
-
-        Slot getSlot(int slot) {
-            validateSlot(slot);
-
-            return slots[slot];
-        }
-
-        private void setSelectedSlotNumber(int slot) {
-            // Store the selected slot number for when the app is closed and restarted
-            settings.edit().putInt(SETTINGS_CURRENT_SLOT_KEY, slot).commit();
-            selectedSlotNumber = slot;
-        }
-
-        private void validateSlot(int slot) {
-            if (slot <= NO_SLOT || slot >= MAX_SLOTS) {
-                throw new IllegalArgumentException(
-                        String.format("Choose a slot between 0 and %d inclusively", MAX_SLOTS-1));
-            }
-        }
-    }
-}
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
deleted file mode 100644
index 479deb273..000000000
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.switchuser;
-
-import android.content.Context;
-import android.os.Bundle;
-import com.facebook.*;
-import com.facebook.model.GraphUser;
-
-public class Slot {
-
-    private static final String CACHE_NAME_FORMAT = "TokenCache%d";
-    private static final String CACHE_USER_ID_KEY = "SwitchUserSampleUserId";
-    private static final String CACHE_USER_NAME_KEY = "SwitchUserSampleUserName";
-
-    private String tokenCacheName;
-    private String userName;
-    private String userId;
-    private SharedPreferencesTokenCachingStrategy tokenCache;
-    private SessionLoginBehavior loginBehavior;
-
-    public Slot(Context context, int slotNumber, SessionLoginBehavior loginBehavior) {
-        this.loginBehavior = loginBehavior;
-        this.tokenCacheName = String.format(CACHE_NAME_FORMAT, slotNumber);
-        this.tokenCache = new SharedPreferencesTokenCachingStrategy(
-                context,
-                tokenCacheName);
-
-        restore();
-    }
-
-    public String getTokenCacheName() {
-        return tokenCacheName;
-    }
-
-    public String getUserName() {
-        return userName;
-    }
-
-    public String getUserId() {
-        return userId;
-    }
-
-    public SessionLoginBehavior getLoginBehavior() {
-        return loginBehavior;
-    }
-
-    public SharedPreferencesTokenCachingStrategy getTokenCache() {
-        return tokenCache;
-    }
-
-    public void update(GraphUser user) {
-        if (user == null) {
-            return;
-        }
-
-        userId = user.getId();
-        userName = user.getName();
-
-        Bundle userInfo = tokenCache.load();
-        userInfo.putString(CACHE_USER_ID_KEY, userId);
-        userInfo.putString(CACHE_USER_NAME_KEY, userName);
-
-        tokenCache.save(userInfo);
-    }
-
-    public void clear() {
-        tokenCache.clear();
-        restore();
-    }
-
-    private void restore() {
-        Bundle userInfo = tokenCache.load();
-        userId = userInfo.getString(CACHE_USER_ID_KEY);
-        userName = userInfo.getString(CACHE_USER_NAME_KEY);
-    }
-}
diff --git a/tests/AndroidManifest.xml b/tests/AndroidManifest.xml
deleted file mode 100644
index c0e209de6..000000000
--- a/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook.android.tests"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <application android:icon="@drawable/icon" android:label="@string/app_name">
-        <activity android:name=".Tests"
-                  android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-    </application>
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="3" />
-</manifest> 
diff --git a/tests/res/drawable/icon.png b/tests/res/drawable/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/tests/res/drawable/icon.png and /dev/null differ
diff --git a/tests/res/layout/main.xml b/tests/res/layout/main.xml
deleted file mode 100644
index 7134549a8..000000000
--- a/tests/res/layout/main.xml
+++ /dev/null
@@ -1,89 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="fill_parent"
-    android:layout_height="fill_parent" android:background="@drawable/black"
-    android:gravity="center_horizontal">
-
-    <TextView android:id="@+id/publicTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/publicErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <Button android:id="@+id/login" 
-        android:text="@string/login"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/authenticatedTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/authenticatedErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />  
-    <Button android:id="@+id/post" 
-        android:text="@string/post"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/wallPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/deletedPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        /> 
-    <Button android:id="@+id/logout" 
-        android:text="@string/logout"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/logoutTest" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-</LinearLayout>
diff --git a/tests/res/values/colors.xml b/tests/res/values/colors.xml
deleted file mode 100644
index 43a557808..000000000
--- a/tests/res/values/colors.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <drawable name="white">#ffffff</drawable>
-    <drawable name="black">#000000</drawable>
-</resources>
diff --git a/tests/res/values/strings.xml b/tests/res/values/strings.xml
deleted file mode 100644
index a61bf4d4c..000000000
--- a/tests/res/values/strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="hello">Hello World, Tests!</string>
-    <string name="login">Test Login</string>
-    <string name="post">Test UI Server</string>
-    <string name="logout">Test Logout</string>
-    <string name="app_name">Functional Tests</string>
-</resources>
diff --git a/tests/src/com/facebook/android/tests/Tests.java b/tests/src/com/facebook/android/tests/Tests.java
deleted file mode 100644
index e3116289e..000000000
--- a/tests/src/com/facebook/android/tests/Tests.java
+++ /dev/null
@@ -1,595 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android.tests;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import org.json.JSONObject;
-
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.DialogError;
-import com.facebook.android.Facebook;
-import com.facebook.android.FacebookError;
-import com.facebook.android.Util;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-import com.facebook.android.Facebook.DialogListener;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-
-public class Tests extends Activity {
-    
-    // Your Facebook Application ID must be set before running this example
-    // See http://www.facebook.com/developers/createapp.php
-    public static final String APP_ID = "110862205611506";
-    
-    private static final String[] PERMISSIONS =
-        new String[] {"publish_stream", "read_stream", "offline_access"};
-    
-    TextView publicTestsText;
-    TextView publicErrorsText;
-    Button loginButton;
-    TextView authenticatedTestsText;
-    TextView authenticatedErrorsText;
-    Button postButton;
-    TextView wallPostText;
-    TextView deletedPostText;
-    Button logoutButton;
-    TextView logoutText;
-    
-    Facebook authenticatedFacebook = new Facebook(APP_ID);
-    
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        
-        publicTestsText = (TextView) findViewById(R.id.publicTests);
-        publicErrorsText = (TextView) findViewById(R.id.publicErrors);
-        loginButton = (Button) findViewById(R.id.login);
-        authenticatedTestsText = (TextView) findViewById(
-                R.id.authenticatedTests);
-        authenticatedErrorsText = (TextView) findViewById(
-                R.id.authenticatedErrors);
-        postButton = (Button) findViewById(R.id.post);
-        wallPostText = (TextView) findViewById(R.id.wallPost);
-        deletedPostText = (TextView) findViewById(R.id.deletedPost);
-        logoutButton = (Button) findViewById(R.id.logout);
-        logoutText = (TextView) findViewById(R.id.logoutTest);
-               
-        // button to test UI Server login method
-        loginButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.authorize(Tests.this, PERMISSIONS,
-                        new TestLoginListener());
-            }
-        });
-        
-        // button for testing UI server publish stream dialog
-        postButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.dialog(Tests.this, "stream.publish", 
-                        new TestUiServerListener());
-            }
-        });
-        
-        // enable logout test button
-        logoutButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                runTestLogout();
-            }
-        });
-        
-        runTestPublicApi();
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        authenticatedFacebook.authorizeCallback(requestCode, resultCode, data);
-    }
-
-    public void runTestPublicApi() {
-        if (testPublicApi()) {
-            publicTestsText.setText("Public API tests passed");
-            publicTestsText.setTextColor(Color.GREEN);
-        } else {
-            publicTestsText.setText("Public API tests failed");
-            publicTestsText.setTextColor(Color.RED);
-        }
-        
-        if (testPublicErrors()) {
-            publicErrorsText.setText("Public API errors passed");
-            publicErrorsText.setTextColor(Color.GREEN);
-        } else {
-            publicErrorsText.setText("Public API errors failed");
-            publicErrorsText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testPublicApi() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Log.d("Tests", "Testing standard API call");
-            JSONObject response = Util.parseJson(fb.request("4"));
-            if (!response.getString("name").equals("Mark Zuckerberg")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing an API call with a specific method");
-            response = Util.parseJson(
-                    fb.request("soneff", new Bundle(), "GET"));
-            if (!response.getString("name").equals("Steven Soneff")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing a public search query");
-            Bundle params = new Bundle();
-            params.putString("q", "facebook");
-            response = Util.parseJson(fb.request("search", params));
-            if (response.getJSONArray("data").length() == 0) return false;
-            
-            Log.d("Tests", "Public API Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testPublicErrors() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Bundle params = new Bundle();
-            
-            Log.d("Tests", "Testing illegal post");
-            params.putString("message", "Hello World");
-            try {
-                Util.parseJson(fb.request("4", params, "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported post request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal delete");
-            try {
-                Util.parseJson(fb.request("4", new Bundle(), "DELETE"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An access token is required to request this " +
-                        "resource.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal post to Zuck's feed");
-            try {
-                Util.parseJson(fb.request("4/feed", new Bundle(), "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("(#200) The user hasn't " +
-                		"authorized the application to perform this action")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalidly specified parameters");
-            try {
-                Util.parseJson(fb.request("bgolub?fields=id,name,picture"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().startsWith("Unknown fields: picture?")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing request for 'me' is rejected without " +
-            		"access_token");
-            try {
-                Util.parseJson(fb.request("me"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An active access token must be used to " +
-                        "query information about the current user.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing empty request");
-            try {
-                Util.parseJson(fb.request(""));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported get request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing an invalid path");
-            try {
-                Util.parseJson(fb.request("invalidinvalidinvalidinvalid"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "(#803) Some of the aliases you requested do not " +
-                        "exist: invalidinvalidinvalidinvalid")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing missing query parameter");
-            try {
-                Util.parseJson(fb.request("search", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("No node specified")) return false;
-            }
-            
-            Log.d("Tests", "Testing that API method is specified");
-            try {
-                fb.request(new Bundle());
-                return false;
-            } catch (IllegalArgumentException e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "API method must be specified. " +
-                        "(parameters must contain key \"method\" " +
-                        "and value). See http://developers.facebook." +
-                        "com/docs/reference/rest/")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing that old API request cannot be made " +
-                           "without access token");
-            params.putString("method", "stream.publish");
-            try {
-                Util.parseJson(fb.request(params));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalid access token");
-            try {
-                fb.setAccessToken("invalid");
-                Util.parseJson(fb.request("me", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Invalid OAuth access token.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Public API Error Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public class TestLoginListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            if (testAuthenticatedApi()) {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests passed");
-                authenticatedTestsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests failed");
-                authenticatedTestsText.setTextColor(Color.RED);
-            }
-            if (testAuthenticatedErrors()) {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors passed");
-                authenticatedErrorsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors failed");
-                authenticatedErrorsText.setTextColor(Color.RED);
-            }
-        }
-
-        public void onCancel() {
-        }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testAuthenticatedApi() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        try {
-            Log.d("Tests", "Testing request for 'me'");
-            String response = authenticatedFacebook.request("me");
-            JSONObject obj = Util.parseJson(response);
-            if (obj.getString("name") == null || 
-                    obj.getString("name").equals("")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API wall post");
-            Bundle parameters = new Bundle();
-            parameters.putString("message", "hello world");
-            parameters.putString("description", "test test test");
-            response = authenticatedFacebook.request("me/feed", parameters, 
-                    "POST");
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API delete");
-            response = response.replaceAll("\\{\"id\":\"", "");
-            response = response.replaceAll("\"\\}", "");
-            response = authenticatedFacebook.request(response, new Bundle(), 
-                    "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "Testing old API wall post");
-            parameters = new Bundle();
-            parameters.putString("method", "stream.publish");
-            parameters.putString("attachment", 
-                "{\"name\":\"Name=Title\"," +
-                "\"href\":\"http://www.google.fr/\",\"" +
-                "caption\":\"Caption\",\"description\":\"Description" +
-                "\",\"media\":[{\"type\":\"image\",\"src\":" +
-                "\"http://www.kratiroff.com/logo-facebook.jpg\"," +
-                "\"href\":\"http://developers.facebook.com/\"}]," +
-                "\"properties\":{\"another link\":{\"text\":\"" +
-                "Facebook homepage\",\"href\":\"http://www.facebook." +
-                "com\"}}}");;
-            response = authenticatedFacebook.request(parameters);
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing wall post delete");
-            response = response.replaceAll("\"", "");
-            response = authenticatedFacebook.request(
-                    response, new Bundle(), "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "All Authenticated Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testAuthenticatedErrors() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        
-        Log.d("Tests", "Testing that request for 'me/invalid' is rejected");
-        try {
-            Util.parseJson(authenticatedFacebook.request("me/invalid"));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown path components: /invalid")) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "Testing that old API call with invalid method fails");
-        Bundle params = new Bundle();
-        params.putString("method", "something_invalid");
-        try {
-            Util.parseJson(authenticatedFacebook.request(params));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown method") ) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "All Authenticated Error Tests Passed");
-        return true;
-    }
-    
-    public class TestUiServerListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                Log.d("Facebook-Example", "Dialog Success! post_id=" + postId);
-                new AsyncFacebookRunner(authenticatedFacebook).request(postId, 
-                        new TestPostRequestListener());
-            } else {
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onCancel() { }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public class TestPostRequestListener implements RequestListener {
-        
-        public void onComplete(final String response, final Object state) {
-            Log.d("Tests", "Got response: " + response);
-            try {
-                JSONObject json = Util.parseJson(response);
-                //final String message = json.getString("message");
-                String postId = json.getString("id");
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Success");
-                        wallPostText.setTextColor(Color.GREEN);
-                    }
-                });
-                
-                Log.d("Tests", "Testing wall post delete");
-                if (testPostDelete(postId)) {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Success");
-                            deletedPostText.setTextColor(Color.GREEN);
-                        }
-                    });
-                } else {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Failure");
-                            deletedPostText.setTextColor(Color.RED);
-                        }
-                    });
-                }
-            } catch (Throwable e) {
-                e.printStackTrace();
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onFacebookError(FacebookError e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onFileNotFoundException(FileNotFoundException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onIOException(IOException e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onMalformedURLException(MalformedURLException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testPostDelete(String postId) {
-        try {
-            String deleteResponse = 
-                authenticatedFacebook.request(postId, new Bundle(), "DELETE");
-            return deleteResponse.equals("true");
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public void runTestLogout() {
-        if (testLogout()) {
-            logoutText.setText("Logout Tests Passed");
-            logoutText.setTextColor(Color.GREEN);
-        } else {
-            logoutText.setText("Logout Tests Failed");
-            logoutText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testLogout() {
-        try {
-            Log.d("Tests", "Testing logout");
-            String response = authenticatedFacebook.logout(this);
-            Log.d("Tests", "Got logout response: *" + response + "*");
-            if (!response.equals("true")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing logout on logged out facebook session");
-            try {
-                Util.parseJson(authenticatedFacebook.logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing logout on unauthenticated object");
-            try {
-                Util.parseJson(new Facebook(APP_ID).logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "All Logout Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    // test bad UI server method?
-    
-    // test invalid permission? <-- UI server test
-}
