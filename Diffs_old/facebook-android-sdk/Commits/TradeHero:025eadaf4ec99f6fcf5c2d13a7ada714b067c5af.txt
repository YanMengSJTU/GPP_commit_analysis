diff --git a/README.mdown b/README.mdown
index 3d3f3495b..c9fcc23fb 100644
--- a/README.mdown
+++ b/README.mdown
@@ -8,7 +8,7 @@ Learn more about about the provided samples, documentation, integrating the SDK
 TRY IT OUT
 ----------
 1. Check-out the tutorials available online at https://developers.facebook.com/docs/getting-started/facebook-sdk-for-android/3.0/
-2. Start coding! Visit https://developers.facebook.com/docs/android for tutorials and reference documentation.
+2. Start coding! Visit https://developers.facebook.com/docs/android/ for tutorials and reference documentation.
 
 FEATURES
 --------
diff --git a/facebook/build.gradle b/facebook/build.gradle
index 4db4550b7..f42ec0929 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -7,9 +7,9 @@ repositories {
 project.group = 'com.facebook.android'
 
 dependencies {
-  compile 'com.android.support:support-v4:[21,22)'
+    compile 'com.android.support:support-v4:[21,22)'
     //compile 'com.android.support:support-v4:21.0.3'
-    compile 'com.parse.bolts:bolts-android:1.1.2'
+    compile 'com.parse.bolts:bolts-android:1.1.4'
 }
 
 android {
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 82398e7a7..e77a27a77 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,5 +17,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.21.1";
+    public static final String BUILD = "3.22.0";
 }
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 6711b8837..b293b588b 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -1745,6 +1745,12 @@ public void handleMessage(Message msg) {
      * @see Session#open open
      */
     public interface StatusCallback {
+        /**
+         * The function that is called when status of the session changes.
+         * @param session   The session that was updated.
+         * @param state     The new state of the session.
+         * @param exception The exception that is related to state change, may be null.
+         */
         public void call(Session session, SessionState state, Exception exception);
     }
 
diff --git a/facebook/src/com/facebook/internal/LikeActionController.java b/facebook/src/com/facebook/internal/LikeActionController.java
index 70e9fecfc..308a2db07 100644
--- a/facebook/src/com/facebook/internal/LikeActionController.java
+++ b/facebook/src/com/facebook/internal/LikeActionController.java
@@ -167,7 +167,7 @@ public void onComplete(LikeActionController likeActionController) {
      * Called by the LikeView when an object-id is set on it.
      * @param context context
      * @param objectId Object Id
-     * @return A LikeActionController for the specified object id
+     * @param callback Callback to be invoked when the LikeActionController has been created.
      */
     public static void getControllerForObjectId(
             Context context,
@@ -562,7 +562,7 @@ public void toggleLike(Activity activity, Bundle analyticsParameters) {
         appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_TAP, null, analyticsParameters);
 
         boolean shouldLikeObject = !this.isObjectLiked;
-        if (canUseOGPublish(shouldLikeObject)) {
+        if (canUseOGPublish()) {
             // Update UI state optimistically
             updateState(shouldLikeObject,
                     this.likeCountStringWithLike,
@@ -583,17 +583,41 @@ public void toggleLike(Activity activity, Bundle analyticsParameters) {
     }
 
     private void performLikeOrUnlike(Activity activity, boolean shouldLikeObject, Bundle analyticsParameters) {
-        if (canUseOGPublish(shouldLikeObject)) {
+        if (canUseOGPublish()) {
             if (shouldLikeObject) {
                 publishLikeAsync(activity, analyticsParameters);
             } else {
-                publishUnlikeAsync(activity, analyticsParameters);
+                if (!Utility.isNullOrEmpty(this.unlikeToken)) {
+                    publishUnlikeAsync(activity, analyticsParameters);
+                } else {
+                    // If we don't have an unlikeToken, we must fall back to the dialog.
+                    fallbackToDialog(activity, analyticsParameters, true);
+                }
             }
         } else {
             presentLikeDialog(activity, analyticsParameters);
         }
     }
 
+    /**
+     * Only to be called after an OG-publish was attempted and something went wrong. The Button state is reverted
+     * and the dialog is presented.
+     */
+    private void fallbackToDialog(
+            Activity activity,
+            Bundle analyticsParameters,
+            boolean oldLikeState) {
+        updateState(
+                oldLikeState,
+                this.likeCountStringWithLike,
+                this.likeCountStringWithoutLike,
+                this.socialSentenceWithLike,
+                this.socialSentenceWithoutLike,
+                this.unlikeToken);
+
+        presentLikeDialog(activity, analyticsParameters);
+    }
+
     private void updateState(boolean isObjectLiked,
                              String likeCountStringWithLike,
                              String likeCountStringWithoutLike,
@@ -768,15 +792,14 @@ private void storeObjectIdForPendingController(String objectId) {
                 .apply();
     }
 
-    private boolean canUseOGPublish(boolean willPerformLike) {
+    private boolean canUseOGPublish() {
         // Verify that the object isn't a Page, that we have permissions and that, if we're unliking, then
         // we have an unlike token.
         return !objectIsPage &&
                 verifiedObjectId != null &&
                 session != null &&
                 session.getPermissions() != null &&
-                session.getPermissions().contains("publish_actions") &&
-                (willPerformLike || !Utility.isNullOrEmpty(unlikeToken));
+                session.getPermissions().contains("publish_actions");
     }
 
     private void publishLikeAsync(final Activity activity, final Bundle analyticsParameters) {
@@ -808,15 +831,7 @@ public void onBatchCompleted(RequestBatch batch) {
                             // revert back to the Unliked state and show the dialog. We need to do this because the
                             // dialog-flow expects the button to only be updated once the dialog returns
 
-                            updateState(
-                                    false,
-                                    likeCountStringWithLike,
-                                    likeCountStringWithoutLike,
-                                    socialSentenceWithLike,
-                                    socialSentenceWithoutLike,
-                                    unlikeToken);
-
-                            presentLikeDialog(activity, analyticsParameters);
+                            fallbackToDialog(activity, analyticsParameters, false);
                         } else {
                             unlikeToken = Utility.coerceValueIfNullOrEmpty(likeRequest.unlikeToken, null);
                             isObjectLikedOnServer = true;
@@ -850,15 +865,7 @@ public void onBatchCompleted(RequestBatch batch) {
                     // revert back to the Liked state and show the dialog. We need to do this because the
                     // dialog-flow expects the button to only be updated once the dialog returns
 
-                    updateState(
-                            true,
-                            likeCountStringWithLike,
-                            likeCountStringWithoutLike,
-                            socialSentenceWithLike,
-                            socialSentenceWithoutLike,
-                            unlikeToken);
-
-                    presentLikeDialog(activity, analyticsParameters);
+                    fallbackToDialog(activity, analyticsParameters, true);
                 } else {
                     unlikeToken = null;
                     isObjectLikedOnServer = false;
@@ -880,6 +887,12 @@ private void refreshStatusAsync() {
             // to make sure we get the correct like state.
             refreshStatusViaService();
             return;
+        } else if (!session.isOpened()) {
+            // The session might be OPENING. In this case, we don't have an access token yet and
+            // cannot make server requests. We hit this code path during login when the
+            // Session.ACTION_ACTIVE_SESSION_UNSET broadcast fires, which LikeActionController
+            // responds to by resetting.
+            return;
         }
 
         fetchVerifiedObjectId(new RequestCompletionCallback() {
diff --git a/facebook/src/com/facebook/internal/NativeProtocol.java b/facebook/src/com/facebook/internal/NativeProtocol.java
index 66795855a..e0e22f70a 100644
--- a/facebook/src/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/com/facebook/internal/NativeProtocol.java
@@ -64,6 +64,7 @@
     public static final int PROTOCOL_VERSION_20141001 = 20141001;
     public static final int PROTOCOL_VERSION_20141028 = 20141028;
     public static final int PROTOCOL_VERSION_20141107 = 20141107; // Bucketed Result Intents
+    public static final int PROTOCOL_VERSION_20141218 = 20141218;
 
     public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION";
     public static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION";
@@ -442,6 +443,7 @@ public static final int getLatestKnownVersion() {
     // Note: be sure this stays sorted in descending order; add new versions at the beginning
     private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
             Arrays.asList(
+                    PROTOCOL_VERSION_20141218,
                     PROTOCOL_VERSION_20141107,
                     PROTOCOL_VERSION_20141028,
                     PROTOCOL_VERSION_20141001,
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
index ee6a5950b..19bec3402 100644
--- a/facebook/src/com/facebook/widget/FacebookDialog.java
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -173,6 +173,10 @@ public int getMinVersion() {
          * Indicates whether the native Message dialog supports sharing of photo images.
          */
         PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140324),
+        /**
+         * Indicates whether the native Message dialog supports sharing of videos.
+         */
+        VIDEO(NativeProtocol.PROTOCOL_VERSION_20141218),
         ;
 
         private int minVersion;
@@ -1273,6 +1277,21 @@ public CONCRETE addVideoFile(File video) {
             return result;
         }
 
+        /**
+         * Sets the video url to display in the native Share dialog, by specifying the content:// or file:/// uri.
+         * The dialog's callback will be called once the user has shared the video, but the video may be uploaded
+         * in the background by the Facebook app; apps wishing to be notified when the video upload has succeeded
+         * or failed should extend the FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.
+         * @param videoUrl a url of the video in the form of content:// or file:///
+         * @return this instance of the builder
+         */
+        public CONCRETE setVideoUrl(String videoUrl) {
+            this.videoAttachmentUrl = videoUrl;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
         @Override
         void validate() {
             super.validate();
@@ -1313,6 +1332,39 @@ public VideoShareDialogBuilder(Activity activity) {
         }
     }
 
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Message dialog for sharing videos. This builder will throw an exception if the Messenger application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)} indicates the capability is available.
+     */
+    public static class VideoMessageDialogBuilder extends VideoDialogBuilderBase<VideoMessageDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Message dialog; must not be null
+         */
+        public VideoMessageDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        protected EnumSet<MessageDialogFeature> getDialogFeatures() {
+            return EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG, MessageDialogFeature.VIDEO);
+        }
+
+        /**
+         * setPlace is not supported for the photo message dialog, setting this method will have no effect.
+         *
+         * @param place will be ignored
+         * @return this instance of the builder
+         */
+        @Override
+        public VideoMessageDialogBuilder setPlace(String place) {
+            return this;
+        }
+    }
+
     /**
      * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
      * Message dialog. This builder will throw an exception if the Facebook Messenger application is not installed, so it
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
index 458689f19..5b39b43e7 100644
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ b/facebook/tests/src/com/facebook/RequestTests.java
@@ -853,7 +853,7 @@ public void testPaging() {
         TestSession session = openTestSessionWithSharedUser();
         final List<GraphPlace> returnedPlaces = new ArrayList<GraphPlace>();
         Request request = Request
-                .newPlacesSearchRequest(session, SEATTLE_LOCATION, 1000, 5, null, new Request.GraphPlaceListCallback() {
+                .newPlacesSearchRequest(session, SEATTLE_LOCATION, 1000, 3, null, new Request.GraphPlaceListCallback() {
                     @Override
                     public void onCompleted(List<GraphPlace> places, Response response) {
                         returnedPlaces.addAll(places);
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 0f4d3263e..53bda0123 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,4 @@
-#Tue Dec 16 23:27:08 IST 2014
+#Fri Dec 12 09:32:22 PST 2014
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
