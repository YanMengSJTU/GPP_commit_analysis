diff --git a/facebook/src/androidTest/AndroidManifest.xml b/facebook/src/androidTest/AndroidManifest.xml
deleted file mode 100644
index dc23b3931..000000000
--- a/facebook/src/androidTest/AndroidManifest.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<!-- package name must be unique so suffix with "tests" so package loader doesn't ignore us -->
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook"
-    android:versionCode="1"
-    android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="19"/>
-    <!-- We add an application tag here just so that we can indicate that
-         this package needs to link against the android.test library,
-         which is needed when building test cases. -->
-    <application>
-        <uses-library android:name="android.test.runner"/>
-        <activity android:name="com.facebook.FacebookTestCase$FacebookTestActivity"/>
-        <activity android:name="com.facebook.FacebookActivity" />
-        <activity android:name="com.facebook.FacebookActivityTests$FacebookTestActivity" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <meta-data android:name="com.facebook.sdk.ClientToken" android:value="@string/client_token"/>
-    </application>
-</manifest>
diff --git a/facebook/src/androidTest/assets/DarkScreen.mov b/facebook/src/androidTest/assets/DarkScreen.mov
deleted file mode 100644
index 2e86e5c49..000000000
Binary files a/facebook/src/androidTest/assets/DarkScreen.mov and /dev/null differ
diff --git a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
deleted file mode 100644
index fce764fe1..000000000
--- a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
+++ /dev/null
@@ -1,377 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import android.test.suitebuilder.annotation.Suppress;
-
-import com.facebook.internal.BundleJSONConverter;
-import com.facebook.share.internal.ShareInternalUtility;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.net.HttpURLConnection;
-import java.util.Arrays;
-
-public class AsyncRequestTests extends FacebookTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanLaunchAsyncRequestFromUiThread() {
-        GraphRequest request = GraphRequest.newPostRequest(null, "me/feeds", null, null);
-        try {
-            TestGraphRequestAsyncTask task = createAsyncTaskOnUiThread(request);
-            assertNotNull(task);
-        } catch (Throwable throwable) {
-            assertNull(throwable);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteWithNullRequestsThrows() throws Exception {
-        try {
-            TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask((GraphRequest[]) null);
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithZeroRequestsThrows() throws Exception {
-        try {
-            TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(new GraphRequest[] {});
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithNullRequestThrows() throws Exception {
-        try {
-            TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(
-                    new GraphRequest[] { null });
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGet() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-        GraphRequest request = new GraphRequest(
-                accessToken,
-                RequestTests.TEST_PAGE_ID,
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject graphPlace = response.getJSONObject();
-                        assertEquals(
-                                "Seattle",
-                                graphPlace.optJSONObject("location").optString("city"));
-                    }
-                });
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(request);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-        GraphRequest request = new GraphRequest(
-                accessToken,
-                "910055289103294",
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject graphPlace = response.getJSONObject();
-                        assertEquals(
-                                "Seattle",
-                                graphPlace.optJSONObject("location").optString("city"));
-                    }
-                });
-        HttpURLConnection connection = GraphRequest.toHttpConnection(request);
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(
-                connection,
-                Arrays.asList(new GraphRequest[] { request }));
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetFailureCase() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-        GraphRequest request = new GraphRequest(accessToken, "-1", null, null,
-                new ExpectFailureCallback());
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(request);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testBatchWithoutAppIDIsError() throws Throwable {
-        GraphRequest request1 = new GraphRequest(null, "TourEiffel", null, null, new ExpectFailureCallback());
-        GraphRequest request2 = new GraphRequest(null, "SpaceNeedle", null, null, new ExpectFailureCallback());
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(request1, request2);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 3 signals: request1, request2, and task will all signal.
-        waitAndAssertSuccessOrRethrow(3);
-    }
-
-    @LargeTest
-    public void testMixedSuccessAndFailure() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        final int NUM_REQUESTS = 8;
-        GraphRequest[] requests = new GraphRequest[NUM_REQUESTS];
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-            if (shouldSucceed) {
-                requests[i] = new GraphRequest(accessToken, "me", null, null,
-                        new ExpectSuccessCallback());
-            } else {
-                requests[i] = new GraphRequest(accessToken, "-1", null, null,
-                        new ExpectFailureCallback());
-            }
-        }
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(requests);
-
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(NUM_REQUESTS + 1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testStaticExecuteMeAsync() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        class MeCallback extends ExpectSuccessCallback implements GraphRequest.GraphJSONObjectCallback {
-            @Override
-            public void onCompleted(JSONObject me, GraphResponse response) {
-                assertNotNull(me);
-                assertEquals(accessToken.getUserId(), me.optString("id"));
-                RequestTests.validateMeResponse(accessToken, response);
-                onCompleted(response);
-            }
-        }
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                GraphRequest.newMeRequest(accessToken, new MeCallback()).executeAsync();
-            }
-        }, false);
-        waitAndAssertSuccess(1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testStaticExecuteMyFriendsAsync() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        class FriendsCallback extends ExpectSuccessCallback implements GraphRequest.GraphJSONArrayCallback {
-            @Override
-            public void onCompleted(JSONArray friends, GraphResponse response) {
-                assertNotNull(friends);
-                RequestTests.validateMyFriendsResponse(response);
-                onCompleted(response);
-            }
-        }
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                GraphRequest.newMyFriendsRequest(accessToken, new FriendsCallback()).executeAsync();
-            }
-        }, false);
-        waitAndAssertSuccess(1);
-    }
-
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        final AccessToken accessToken = getAccessTokenForSharedUserWithPermissions(null,
-                "user_photos", "publish_actions");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "width");
-
-        GraphRequest uploadRequest1 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap1,
-                null,
-                null,
-                null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        GraphRequest uploadRequest2 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap2,
-                null,
-                null,
-                null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        GraphRequest getRequest1 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest1:$.id}",
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject retrievedPhoto = response.getJSONObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image1Size, retrievedPhoto.optInt("width"));
-                    }
-                });
-        GraphRequest getRequest2 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest2:$.id}",
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject retrievedPhoto = response.getJSONObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image2Size, retrievedPhoto.optInt("width"));
-                    }
-                });
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(
-                uploadRequest1,
-                uploadRequest2,
-                getRequest1,
-                getRequest2);
-        task.executeOnBlockerThread();
-
-        // Wait on 3 signals: getRequest1, getRequest2, and task will all signal.
-        waitAndAssertSuccess(3);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testShortTimeoutCausesFailure() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        GraphRequest request = new GraphRequest(accessToken, "me/likes", null, null,
-                new ExpectFailureCallback());
-
-        GraphRequestBatch requestBatch = new GraphRequestBatch(request);
-
-        // 1 millisecond timeout should be too short for response from server.
-        requestBatch.setTimeout(1);
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(requestBatch);
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(2);
-    }
-
-    @LargeTest
-    public void testLongTimeoutAllowsSuccess() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        GraphRequest request = new GraphRequest(accessToken, "me", null, null,
-                new ExpectSuccessCallback());
-
-        GraphRequestBatch requestBatch = new GraphRequestBatch(request);
-
-        // 10 second timeout should be long enough for successful response from server.
-        requestBatch.setTimeout(10000);
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(requestBatch);
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(2);
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
deleted file mode 100644
index 9e0347775..000000000
--- a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
+++ /dev/null
@@ -1,601 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.Suppress;
-
-import com.facebook.share.internal.ShareInternalUtility;
-
-import org.json.JSONObject;
-
-import java.io.IOException;
-import java.lang.Override;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicInteger;
-
-public class BatchRequestTests extends FacebookTestCase {
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        // Tests that need this set should explicitly set it.
-        GraphRequest.setDefaultBatchApplicationId(null);
-    }
-
-    protected String[] getDefaultPermissions()
-    {
-        return new String[] { "email", "publish_actions", "user_posts" };
-    };
-
-    @LargeTest
-    public void testCreateNonemptyRequestBatch() {
-        GraphRequest meRequest = GraphRequest.newMeRequest(null, null);
-
-        GraphRequestBatch batch = new GraphRequestBatch(new GraphRequest[] { meRequest, meRequest });
-        assertEquals(2, batch.size());
-        assertEquals(meRequest, batch.get(0));
-        assertEquals(meRequest, batch.get(1));
-    }
-
-    @LargeTest
-    public void testBatchWithoutAppIDIsError() {
-        GraphRequest request1 = new GraphRequest(null, "TourEiffel", null, null, new ExpectFailureCallback());
-        GraphRequest request2 = new GraphRequest(null, "SpaceNeedle", null, null, new ExpectFailureCallback());
-        GraphRequest.executeBatchAndWait(request1, request2);
-    }
-
-    @LargeTest
-    public void testExecuteBatchRequestsPathEncoding() throws IOException {
-        // ensures that paths passed to batch requests are encoded properly before
-        // we send it up to the server
-
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request1 = new GraphRequest(
-                accessToken,
-                RequestTests.TEST_PAGE_ID,
-                parameters,
-                null);
-        request1.setBatchEntryName("seattle");
-        request1.setBatchEntryOmitResultOnSuccess(false);
-        GraphRequest request2 = new GraphRequest(
-                accessToken,
-                "{result=seattle:$.id}",
-                parameters,
-                null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() == null);
-        assertTrue(responses.get(1).getError() == null);
-
-        JSONObject seattle1 = responses.get(0).getJSONObject();
-        JSONObject seattle2 = responses.get(1).getJSONObject();
-        assertTrue(seattle1 != null);
-        assertTrue(seattle2 != null);
-
-        assertEquals("Seattle", seattle1.optJSONObject("location").optString("city"));
-        assertEquals("Seattle", seattle2.optJSONObject("location").optString("city"));
-    }
-
-    @LargeTest
-    public void testExecuteBatchedGets() throws IOException {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request1 = new GraphRequest(
-                accessToken,
-                RequestTests.TEST_PAGE_ID,
-                parameters,
-                null);
-        GraphRequest request2 = new GraphRequest(
-                accessToken,
-                RequestTests.TEST_PAGE_ID_2,
-                parameters,
-                null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() == null);
-        assertTrue(responses.get(1).getError() == null);
-
-        JSONObject seattle = responses.get(0).getJSONObject();
-        JSONObject paris = responses.get(1).getJSONObject();
-        assertTrue(seattle != null);
-        assertTrue(paris != null);
-
-        assertEquals("Seattle", seattle.optJSONObject("location").optString("city"));
-        assertEquals("Paris", paris.optJSONObject("location").optString("city"));
-    }
-
-    @LargeTest
-    public void testFacebookErrorResponsesCreateErrors() {
-        setBatchApplicationIdForTestApp();
-
-        GraphRequest request1 = new GraphRequest(null, "somestringthatshouldneverbeavalidfobjectid");
-        GraphRequest request2 = new GraphRequest(null, "someotherstringthatshouldneverbeavalidfobjectid");
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() != null);
-        assertTrue(responses.get(1).getError() != null);
-
-        FacebookRequestError error = responses.get(0).getError();
-        assertTrue(error.getException() instanceof FacebookServiceException);
-        assertTrue(error.getErrorType() != null);
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-    }
-
-    @LargeTest
-    public void testBatchPostStatusUpdate() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "message");
-
-        JSONObject statusUpdate1 = createStatusUpdate("1");
-        JSONObject statusUpdate2 = createStatusUpdate("2");
-
-        GraphRequest postRequest1 = GraphRequest.newPostRequest(
-                accessToken,
-                "me/feed",
-                statusUpdate1,
-                null);
-        postRequest1.setBatchEntryName("postRequest1");
-        postRequest1.setBatchEntryOmitResultOnSuccess(false);
-        GraphRequest postRequest2 = GraphRequest.newPostRequest(
-                accessToken,
-                "me/feed",
-                statusUpdate2,
-                null);
-        postRequest2.setBatchEntryName("postRequest2");
-        postRequest2.setBatchEntryOmitResultOnSuccess(false);
-        GraphRequest getRequest1 = new GraphRequest(
-                accessToken,
-                "{result=postRequest1:$.id}",
-                parameters,
-                null);
-        GraphRequest getRequest2 = new GraphRequest(
-                accessToken,
-                "{result=postRequest2:$.id}",
-                parameters,
-                null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(postRequest1, postRequest2, getRequest1, getRequest2);
-        assertNotNull(responses);
-        assertEquals(4, responses.size());
-        assertNoErrors(responses);
-
-        JSONObject retrievedStatusUpdate1 = responses.get(2).getJSONObject();
-        JSONObject retrievedStatusUpdate2 = responses.get(3).getJSONObject();
-        assertNotNull(retrievedStatusUpdate1);
-        assertNotNull(retrievedStatusUpdate2);
-
-        assertEquals(statusUpdate1.optString("message"), retrievedStatusUpdate1.optString("message"));
-        assertEquals(statusUpdate2.optString("message"), retrievedStatusUpdate2.optString("message"));
-    }
-
-    @LargeTest
-    public void testTwoDifferentAccessTokens() {
-        final AccessToken accessToken1 = getAccessTokenForSharedUser();
-        final AccessToken accessToken2 = getAccessTokenForSharedUser(SECOND_TEST_USER_TAG);
-
-        GraphRequest request1 = GraphRequest.newMeRequest(accessToken1, null);
-        GraphRequest request2 = GraphRequest.newMeRequest(accessToken2, null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        JSONObject user1 = responses.get(0).getJSONObject();
-        JSONObject user2 = responses.get(1).getJSONObject();
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertFalse(user1.optString("id").equals(user2.optString("id")));
-        assertEquals(accessToken1.getUserId(), user1.optString("id"));
-        assertEquals(accessToken2.getUserId(), user2.optString("id"));
-    }
-
-    @LargeTest
-    public void testBatchWithValidSessionAndNoSession() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        GraphRequest request1 = new GraphRequest(accessToken, "me");
-        GraphRequest request2 = new GraphRequest(null, "me");
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        JSONObject user1 = responses.get(0).getJSONObject();
-        JSONObject user2 = responses.get(1).getJSONObject();
-
-        assertNotNull(user1);
-        assertNull(user2);
-
-        assertEquals(accessToken.getUserId(), user1.optString("id"));
-    }
-
-    @LargeTest
-    public void testBatchWithNoSessionAndValidSession() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        GraphRequest request1 = new GraphRequest(null, "me");
-        GraphRequest request2 = new GraphRequest(accessToken, "me");
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        JSONObject user1 = responses.get(0).getJSONObject();
-        JSONObject user2 = responses.get(1).getJSONObject();
-
-        assertNull(user1);
-        assertNotNull(user2);
-
-        assertEquals(accessToken.getUserId(), user2.optString("id"));
-    }
-
-    @LargeTest
-    public void testMixedSuccessAndFailure() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        final int NUM_REQUESTS = 8;
-        GraphRequest[] requests = new GraphRequest[NUM_REQUESTS];
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-            requests[i] = new GraphRequest(accessToken, shouldSucceed ? "me" : "-1");
-        }
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(requests);
-        assertNotNull(responses);
-        assertEquals(NUM_REQUESTS, responses.size());
-
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-
-            GraphResponse response = responses.get(i);
-            assertNotNull(response);
-            if (shouldSucceed) {
-                assertNull(response.getError());
-                assertNotNull(response.getJSONObject());
-            } else {
-                assertNotNull(response.getError());
-                assertNull(response.getJSONObject());
-            }
-        }
-    }
-
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        final AccessToken accessToken = getAccessTokenForSharedUserWithPermissions(null,
-                "user_photos", "publish_actions");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "width");
-
-        GraphRequest uploadRequest1 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap1,
-                null,
-                null,
-                null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        GraphRequest uploadRequest2 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap2,
-                null,
-                null,
-                null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        GraphRequest getRequest1 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest1:$.id}",
-                parameters,
-                null);
-        GraphRequest getRequest2 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest2:$.id}",
-                parameters,
-                null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(
-                uploadRequest1,
-                uploadRequest2,
-                getRequest1,
-                getRequest2);
-        assertNotNull(responses);
-        assertEquals(4, responses.size());
-        assertNoErrors(responses);
-
-        JSONObject retrievedPhoto1 = responses.get(2).getJSONObject();
-        JSONObject retrievedPhoto2 = responses.get(3).getJSONObject();
-        assertNotNull(retrievedPhoto1);
-        assertNotNull(retrievedPhoto2);
-
-        assertEquals(image1Size, retrievedPhoto1.optInt("width"));
-        assertEquals(image2Size, retrievedPhoto2.optInt("width"));
-    }
-
-    @LargeTest
-    public void testCallbacksAreCalled() {
-        setBatchApplicationIdForTestApp();
-
-        ArrayList<GraphRequest> requests = new ArrayList<GraphRequest>();
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-
-        final int NUM_REQUESTS = 4;
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            GraphRequest request = new GraphRequest(null, "4");
-
-            request.setCallback(new GraphRequest.Callback() {
-                @Override
-                public void onCompleted(GraphResponse response) {
-                    calledBack.add(true);
-                }
-            });
-
-            requests.add(request);
-        }
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(requests);
-        assertNotNull(responses);
-        assertTrue(calledBack.size() == NUM_REQUESTS);
-    }
-
-
-    @LargeTest
-    public void testExplicitDependencyDefaultsToOmitFirstResponse() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        GraphRequest requestMe = GraphRequest.newMeRequest(accessToken, null);
-        requestMe.setBatchEntryName("me_request");
-
-        GraphRequest requestMyFriends = GraphRequest.newMyFriendsRequest(accessToken, null);
-        requestMyFriends.setBatchEntryDependsOn("me_request");
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(requestMe, requestMyFriends);
-
-        GraphResponse meResponse = responses.get(0);
-        GraphResponse myFriendsResponse = responses.get(1);
-
-        assertNull(meResponse.getJSONObject());
-        assertNotNull(myFriendsResponse.getJSONObject());
-    }
-
-    @LargeTest
-    public void testExplicitDependencyCanIncludeFirstResponse() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        GraphRequest requestMe = GraphRequest.newMeRequest(accessToken, null);
-        requestMe.setBatchEntryName("me_request");
-        requestMe.setBatchEntryOmitResultOnSuccess(false);
-
-        GraphRequest requestMyFriends = GraphRequest.newMyFriendsRequest(accessToken, null);
-        requestMyFriends.setBatchEntryDependsOn("me_request");
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(requestMe, requestMyFriends);
-
-        GraphResponse meResponse = responses.get(0);
-        GraphResponse myFriendsResponse = responses.get(1);
-
-        assertNotNull(meResponse.getJSONObject());
-        assertNotNull(myFriendsResponse.getJSONObject());
-    }
-
-    @LargeTest
-    public void testAddAndRemoveBatchCallbacks() {
-        GraphRequestBatch batch = new GraphRequestBatch();
-
-        GraphRequestBatch.Callback callback1 = new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-            }
-        };
-
-        GraphRequestBatch.Callback callback2 = new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-            }
-        };
-
-        batch.addCallback(callback1);
-        batch.addCallback(callback2);
-
-        assertEquals(2, batch.getCallbacks().size());
-
-        batch.removeCallback(callback1);
-        batch.removeCallback(callback2);
-
-        assertEquals(0, batch.getCallbacks().size());
-    }
-
-    @LargeTest
-    public void testBatchCallbackIsCalled() {
-        final AtomicInteger count = new AtomicInteger();
-        GraphRequest request1 = GraphRequest.newGraphPathRequest(null, "4", new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                count.incrementAndGet();
-            }
-        });
-        GraphRequest request2 = GraphRequest.newGraphPathRequest(null, "4", new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                count.incrementAndGet();
-            }
-        });
-
-        GraphRequestBatch batch = new GraphRequestBatch(request1, request2);
-        batch.addCallback(new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-                count.incrementAndGet();
-            }
-        });
-
-        batch.executeAndWait();
-        assertEquals(3, count.get());
-    }
-
-    @LargeTest
-    public void testBatchOnProgressCallbackIsCalled() {
-        final AtomicInteger count = new AtomicInteger();
-
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        String appId = getApplicationId();
-        GraphRequest.setDefaultBatchApplicationId(appId);
-
-        GraphRequest request1 = GraphRequest.newGraphPathRequest(accessToken, "4", null);
-        assertNotNull(request1);
-        GraphRequest request2 = GraphRequest.newGraphPathRequest(accessToken, "4", null);
-        assertNotNull(request2);
-
-        GraphRequestBatch batch = new GraphRequestBatch(request1, request2);
-        batch.addCallback(new GraphRequestBatch.OnProgressCallback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-            }
-
-            @Override
-            public void onBatchProgress(GraphRequestBatch batch, long current, long max) {
-                count.incrementAndGet();
-            }
-        });
-
-        batch.executeAndWait();
-        assertEquals(1, count.get());
-    }
-
-    @LargeTest
-    public void testBatchLastOnProgressCallbackIsCalledOnce() {
-        final AtomicInteger count = new AtomicInteger();
-
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        String appId = getApplicationId();
-        GraphRequest.setDefaultBatchApplicationId(appId);
-
-        GraphRequest request1 = GraphRequest.newGraphPathRequest(accessToken, "4", null);
-        assertNotNull(request1);
-        GraphRequest request2 = GraphRequest.newGraphPathRequest(accessToken, "4", null);
-        assertNotNull(request2);
-
-        GraphRequestBatch batch = new GraphRequestBatch(request1, request2);
-        batch.addCallback(new GraphRequestBatch.OnProgressCallback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-            }
-
-            @Override
-            public void onBatchProgress(GraphRequestBatch batch, long current, long max) {
-                if (current == max) {
-                    count.incrementAndGet();
-                }
-                else if (current > max) {
-                    count.set(0);
-                }
-            }
-        });
-
-        batch.executeAndWait();
-        assertEquals(1, count.get());
-    }
-
-
-    @LargeTest
-    public void testMixedBatchCallbacks() {
-        final AtomicInteger requestProgressCount = new AtomicInteger();
-        final AtomicInteger requestCompletedCount = new AtomicInteger();
-        final AtomicInteger batchProgressCount = new AtomicInteger();
-        final AtomicInteger batchCompletedCount = new AtomicInteger();
-
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        String appId = getApplicationId();
-        GraphRequest.setDefaultBatchApplicationId(appId);
-
-        GraphRequest request1 = GraphRequest.newGraphPathRequest(
-                null, "4", new GraphRequest.OnProgressCallback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                requestCompletedCount.incrementAndGet();
-            }
-
-            @Override
-            public void onProgress(long current, long max) {
-                if (current == max) {
-                    requestProgressCount.incrementAndGet();
-                }
-                else if (current > max) {
-                    requestProgressCount.set(0);
-                }
-            }
-        });
-        assertNotNull(request1);
-
-        GraphRequest request2 = GraphRequest.newGraphPathRequest(null, "4", null);
-        assertNotNull(request2);
-
-        GraphRequestBatch batch = new GraphRequestBatch(request1, request2);
-        batch.addCallback(new GraphRequestBatch.OnProgressCallback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-                batchCompletedCount.incrementAndGet();
-            }
-
-            @Override
-            public void onBatchProgress(GraphRequestBatch batch, long current, long max) {
-                if (current == max) {
-                    batchProgressCount.incrementAndGet();
-                } else if (current > max) {
-                    batchProgressCount.set(0);
-                }
-            }
-        });
-
-        batch.executeAndWait();
-        
-        assertEquals(1, requestProgressCount.get());
-        assertEquals(1, requestCompletedCount.get());
-        assertEquals(1, batchProgressCount.get());
-        assertEquals(1, batchCompletedCount.get());
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookActivityTestCase.java b/facebook/src/androidTest/java/com/facebook/FacebookActivityTestCase.java
deleted file mode 100644
index bd0d83e61..000000000
--- a/facebook/src/androidTest/java/com/facebook/FacebookActivityTestCase.java
+++ /dev/null
@@ -1,675 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-import android.content.res.AssetManager;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.os.ConditionVariable;
-import android.os.Handler;
-import android.test.ActivityInstrumentationTestCase2;
-import android.util.Log;
-import com.facebook.internal.Utility;
-import junit.framework.AssertionFailedError;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class FacebookActivityTestCase<T extends Activity> extends ActivityInstrumentationTestCase2<T> {
-    private static final String TAG = FacebookActivityTestCase.class.getSimpleName();
-
-    private static String applicationId;
-    private static String applicationSecret;
-    private static String clientToken;
-    private static TestUserManager testUserManager;
-
-    public final static String SECOND_TEST_USER_TAG = "Second";
-    public final static String THIRD_TEST_USER_TAG = "Third";
-
-    private TestBlocker testBlocker;
-
-    protected synchronized TestBlocker getTestBlocker() {
-        if (testBlocker == null) {
-            testBlocker = TestBlocker.createTestBlocker();
-        }
-        return testBlocker;
-    }
-
-    public FacebookActivityTestCase(Class<T> activityClass) {
-        super("", activityClass);
-    }
-
-    protected String[] getDefaultPermissions() { return null; };
-
-    protected AccessToken getAccessTokenForSharedUser() {
-        return getAccessTokenForSharedUser(null);
-    }
-
-    protected AccessToken getAccessTokenForSharedUser(String sessionUniqueUserTag) {
-        return getAccessTokenForSharedUserWithPermissions(sessionUniqueUserTag,
-                getDefaultPermissions());
-    }
-
-    protected AccessToken getAccessTokenForSharedUserWithPermissions(String sessionUniqueUserTag,
-        List<String> permissions) {
-        return getTestUserManager().getAccessTokenForSharedUser(permissions, sessionUniqueUserTag);
-    }
-
-    protected AccessToken getAccessTokenForSharedUserWithPermissions(String sessionUniqueUserTag,
-                                                                      String... permissions) {
-        List<String> permissionList = (permissions != null) ? Arrays.asList(permissions) : null;
-        return getAccessTokenForSharedUserWithPermissions(sessionUniqueUserTag, permissionList);
-    }
-
-    protected TestUserManager getTestUserManager() {
-        if (testUserManager == null) {
-            synchronized (FacebookActivityTestCase.class) {
-                if (testUserManager == null) {
-                    readApplicationIdAndSecret();
-                    testUserManager = new TestUserManager(applicationSecret, applicationId);
-                }
-            }
-        }
-
-        return testUserManager;
-    }
-
-    // Turns exceptions from the TestBlocker into JUnit assertions
-    protected void waitAndAssertSuccess(TestBlocker testBlocker, int numSignals) {
-        try {
-            testBlocker.waitForSignalsAndAssertSuccess(numSignals);
-        } catch (AssertionFailedError e) {
-            throw e;
-        } catch (Exception e) {
-            fail("Got exception: " + e.getMessage());
-        }
-    }
-
-    protected void waitAndAssertSuccess(int numSignals) {
-        waitAndAssertSuccess(getTestBlocker(), numSignals);
-    }
-
-    protected void waitAndAssertSuccessOrRethrow(int numSignals) throws Exception {
-        getTestBlocker().waitForSignalsAndAssertSuccess(numSignals);
-    }
-
-    protected void runAndBlockOnUiThread(final int expectedSignals, final Runnable runnable) throws Throwable {
-        final TestBlocker blocker = getTestBlocker();
-        runTestOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                runnable.run();
-                blocker.signal();
-            }
-        });
-        // We wait for the operation to complete; wait for as many other signals as we expect.
-        blocker.waitForSignals(1 + expectedSignals);
-        // Wait for the UI thread to become idle so any UI updates the runnable triggered have a chance
-        // to finish before we return.
-        getInstrumentation().waitForIdleSync();
-    }
-
-    protected synchronized void readApplicationIdAndSecret() {
-        synchronized (FacebookTestCase.class) {
-            if (applicationId != null && applicationSecret != null && clientToken != null) {
-                return;
-            }
-
-            AssetManager assets = getInstrumentation().getTargetContext().getResources().getAssets();
-            InputStream stream = null;
-            final String errorMessage = "could not read applicationId and applicationSecret from config.json; ensure "
-                    + "you have run 'configure_unit_tests.sh'. Error: ";
-            try {
-                stream = assets.open("config.json");
-                String string = Utility.readStreamToString(stream);
-
-                JSONTokener tokener = new JSONTokener(string);
-                Object obj = tokener.nextValue();
-                if (!(obj instanceof JSONObject)) {
-                    fail(errorMessage + "could not deserialize a JSONObject");
-                }
-                JSONObject jsonObject = (JSONObject) obj;
-
-                applicationId = jsonObject.optString("applicationId");
-                applicationSecret = jsonObject.optString("applicationSecret");
-                clientToken = jsonObject.optString("clientToken");
-
-                if (Utility.isNullOrEmpty(applicationId) || Utility.isNullOrEmpty(applicationSecret) ||
-                        Utility.isNullOrEmpty(clientToken)) {
-                    fail(errorMessage + "config values are missing");
-                }
-            } catch (IOException e) {
-                fail(errorMessage + e.toString());
-            } catch (JSONException e) {
-                fail(errorMessage + e.toString());
-            } finally {
-                if (stream != null) {
-                    try {
-                        stream.close();
-                    } catch (IOException e) {
-                        fail(errorMessage + e.toString());
-                    }
-                }
-            }
-        }
-    }
-
-    protected static String getApplicationId() {
-        return applicationId;
-    }
-
-    protected static String getApplicationSecret() {
-        return applicationSecret;
-    }
-
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        // Make sure the logging is turned on.
-        FacebookSdk.setIsDebugEnabled(true);
-
-        // Make sure we have read application ID and secret.
-        readApplicationIdAndSecret();
-
-        FacebookSdk.sdkInitialize(getInstrumentation().getTargetContext());
-        FacebookSdk.setApplicationId(applicationId);
-        FacebookSdk.setClientToken(clientToken);
-
-        // These are useful for debugging unit test failures.
-        FacebookSdk.addLoggingBehavior(LoggingBehavior.REQUESTS);
-        FacebookSdk.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        // We want the UI thread to be in StrictMode to catch any violations.
-        // TODO: reenable this
-        // turnOnStrictModeForUiThread();
-
-        // Needed to bypass a dexmaker bug for mockito
-        System.setProperty("dexmaker.dexcache",
-                getInstrumentation().getTargetContext().getCacheDir().getPath());
-    }
-
-    protected void tearDown() throws Exception {
-        super.tearDown();
-
-        synchronized (this) {
-            if (testBlocker != null) {
-                testBlocker.quit();
-            }
-        }
-    }
-
-    protected Bundle getNativeLinkingExtras(String token, String userId) {
-        readApplicationIdAndSecret();
-
-        Bundle extras = new Bundle();
-        String extraLaunchUriString = String
-                .format("fbrpc://facebook/nativethirdparty?app_id=%s&package_name=com.facebook.sdk.tests&class_name=com.facebook.FacebookActivityTests$FacebookTestActivity&access_token=%s",
-                        applicationId, token);
-        extras.putString("extra_launch_uri", extraLaunchUriString);
-        extras.putString("expires_in", "3600");
-        extras.putLong("app_id", Long.parseLong(applicationId));
-        extras.putString("access_token", token);
-        if(userId != null && !userId.isEmpty()) {
-            extras.putString("user_id", userId);
-        }
-
-        return extras;
-    }
-
-    protected JSONObject getAndAssert(AccessToken accessToken, String id) {
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "message");
-
-        GraphRequest request = new GraphRequest(accessToken, id, parameters, null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject result = response.getJSONObject();
-        assertNotNull(result);
-
-        return result;
-    }
-
-    protected JSONObject postGetAndAssert(AccessToken accessToken, String path,
-                                          JSONObject graphObject) {
-        GraphRequest request = GraphRequest.newPostRequest(accessToken, path, graphObject, null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject result = response.getJSONObject();
-        assertNotNull(result);
-        assertNotNull(result.optString("id"));
-
-        return getAndAssert(accessToken, result.optString("id"));
-    }
-
-    protected void setBatchApplicationIdForTestApp() {
-        readApplicationIdAndSecret();
-        GraphRequest.setDefaultBatchApplicationId(applicationId);
-    }
-
-    protected JSONObject batchCreateAndGet(AccessToken accessToken, String graphPath,
-                                           JSONObject graphObject, String fields) {
-        GraphRequest create = GraphRequest.newPostRequest(accessToken, graphPath, graphObject,
-                new ExpectSuccessCallback());
-        create.setBatchEntryName("create");
-        GraphRequest get = GraphRequest.newGraphPathRequest(accessToken, "{result=create:$.id}",
-                new ExpectSuccessCallback());
-        if (fields != null) {
-            Bundle parameters = new Bundle();
-            parameters.putString("fields", fields);
-            get.setParameters(parameters);
-        }
-
-        return batchPostAndGet(create, get);
-    }
-
-    protected JSONObject batchUpdateAndGet(AccessToken accessToken, String graphPath,
-                                           JSONObject graphObject, String fields) {
-        GraphRequest update = GraphRequest.newPostRequest(accessToken, graphPath, graphObject,
-                new ExpectSuccessCallback());
-        GraphRequest get = GraphRequest.newGraphPathRequest(accessToken, graphPath,
-                new ExpectSuccessCallback());
-        if (fields != null) {
-            Bundle parameters = new Bundle();
-            parameters.putString("fields", fields);
-            get.setParameters(parameters);
-        }
-
-        return batchPostAndGet(update, get);
-    }
-
-    protected JSONObject batchPostAndGet(GraphRequest post, GraphRequest get) {
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(post, get);
-        assertEquals(2, responses.size());
-
-        JSONObject resultGraphObject = responses.get(1).getJSONObject();
-        assertNotNull(resultGraphObject);
-        return resultGraphObject;
-    }
-
-    protected JSONObject createStatusUpdate(String unique) {
-        JSONObject statusUpdate = new JSONObject();
-        String message = String.format(
-                "Check out my awesome new status update posted at: %s. Some chars for you: +\"[]:,%s", new Date(),
-                unique);
-        try {
-            statusUpdate.put("message", message);
-        } catch (JSONException e) {
-            throw new RuntimeException(e);
-        }
-        return statusUpdate;
-    }
-
-    protected Bitmap createTestBitmap(int size) {
-        Bitmap image = Bitmap.createBitmap(size, size, Bitmap.Config.RGB_565);
-        image.eraseColor(Color.BLUE);
-        return image;
-    }
-
-    protected void assertDateEqualsWithinDelta(Date expected, Date actual, long deltaInMsec) {
-        long delta = Math.abs(expected.getTime() - actual.getTime());
-        assertTrue(delta < deltaInMsec);
-    }
-
-    protected void assertDateDiffersWithinDelta(Date expected, Date actual, long expectedDifference, long deltaInMsec) {
-        long delta = Math.abs(expected.getTime() - actual.getTime()) - expectedDifference;
-        assertTrue(delta < deltaInMsec);
-    }
-
-    protected void assertNoErrors(List<GraphResponse> responses) {
-        for (int i = 0; i < responses.size(); ++i) {
-            GraphResponse response = responses.get(i);
-            assertNotNull(response);
-            assertNull(response.getError());
-        }
-    }
-
-    protected File createTempFileFromAsset(String assetPath) throws IOException {
-        InputStream inputStream = null;
-        FileOutputStream outStream = null;
-
-        try {
-            AssetManager assets = getActivity().getResources().getAssets();
-            inputStream = assets.open(assetPath);
-
-            File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
-            File outputFile = File.createTempFile("prefix", assetPath, outputDir);
-            outStream = new FileOutputStream(outputFile);
-
-            final int bufferSize = 1024 * 2;
-            byte[] buffer = new byte[bufferSize];
-            int n = 0;
-            while ((n = inputStream.read(buffer)) != -1) {
-                outStream.write(buffer, 0, n);
-            }
-
-            return outputFile;
-        } finally {
-            Utility.closeQuietly(outStream);
-            Utility.closeQuietly(inputStream);
-        }
-    }
-
-    protected void runOnBlockerThread(final Runnable runnable, boolean waitForCompletion) {
-        Runnable runnableToPost = runnable;
-        final ConditionVariable condition = waitForCompletion ? new ConditionVariable(!waitForCompletion) : null;
-
-        if (waitForCompletion) {
-            runnableToPost = new Runnable() {
-                @Override
-                public void run() {
-                    runnable.run();
-                    condition.open();
-                }
-            };
-        }
-
-        TestBlocker blocker = getTestBlocker();
-        Handler handler = blocker.getHandler();
-        handler.post(runnableToPost);
-
-        if (waitForCompletion) {
-            boolean success = condition.block(10000);
-            assertTrue(success);
-        }
-    }
-
-    protected void closeBlockerAndAssertSuccess() {
-        TestBlocker blocker;
-        synchronized (this) {
-            blocker = getTestBlocker();
-            testBlocker = null;
-        }
-
-        blocker.quit();
-
-        boolean joined = false;
-        while (!joined) {
-            try {
-                blocker.join();
-                joined = true;
-            } catch (InterruptedException e) {
-            }
-        }
-
-        try {
-            blocker.assertSuccess();
-        } catch (Exception e) {
-            fail(e.toString());
-        }
-    }
-
-    protected TestGraphRequestAsyncTask createAsyncTaskOnUiThread(final GraphRequest... requests) throws Throwable {
-        final ArrayList<TestGraphRequestAsyncTask> result = new ArrayList<TestGraphRequestAsyncTask>();
-        runTestOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                result.add(new TestGraphRequestAsyncTask(requests));
-            }
-        });
-        return result.isEmpty() ? null : result.get(0);
-    }
-
-    /*
-     * Classes and helpers related to asynchronous requests.
-     */
-
-    // A subclass of RequestAsyncTask that knows how to interact with TestBlocker to ensure that tests can wait
-    // on and assert success of async tasks.
-    protected class TestGraphRequestAsyncTask extends GraphRequestAsyncTask {
-        private final TestBlocker blocker = FacebookActivityTestCase.this.getTestBlocker();
-
-        public TestGraphRequestAsyncTask(GraphRequest... requests) {
-            super(requests);
-        }
-
-        public TestGraphRequestAsyncTask(List<GraphRequest> requests) {
-            super(requests);
-        }
-
-        public TestGraphRequestAsyncTask(GraphRequestBatch requests) {
-            super(requests);
-        }
-
-        public TestGraphRequestAsyncTask(HttpURLConnection connection, GraphRequest... requests) {
-            super(connection, requests);
-        }
-
-        public TestGraphRequestAsyncTask(HttpURLConnection connection, List<GraphRequest> requests) {
-            super(connection, requests);
-        }
-
-        public TestGraphRequestAsyncTask(HttpURLConnection connection, GraphRequestBatch requests) {
-            super(connection, requests);
-        }
-
-        public final TestBlocker getBlocker() {
-            return blocker;
-        }
-
-        public final Exception getThrowable() {
-            return getException();
-        }
-
-        protected void onPostExecute(List<GraphResponse> result) {
-            try {
-                super.onPostExecute(result);
-
-                if (getException() != null) {
-                    blocker.setException(getException());
-                }
-            } finally {
-                Log.d("TestRequestAsyncTask", "signaling blocker");
-                blocker.signal();
-            }
-        }
-
-        // In order to be able to block and accumulate exceptions, we want to ensure the async task is really
-        // being started on the blocker's thread, rather than the test's thread. Use this instead of calling
-        // execute directly in unit tests.
-        public void executeOnBlockerThread() {
-            ensureAsyncTaskLoaded();
-
-            Runnable runnable = new Runnable() {
-                public void run() {
-                    execute();
-                }
-            };
-            Handler handler = new Handler(blocker.getLooper());
-            handler.post(runnable);
-        }
-
-        private void ensureAsyncTaskLoaded() {
-            // Work around this issue on earlier frameworks: http://stackoverflow.com/a/7818839/782044
-            try {
-                runAndBlockOnUiThread(0, new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            Class.forName("android.os.AsyncTask");
-                        } catch (ClassNotFoundException e) {
-                        }
-                    }
-                });
-            } catch (Throwable throwable) {
-            }
-        }
-    }
-
-    // Provides an implementation of Request.Callback that will assert either success (no error) or failure (error)
-    // of a request, and allow derived classes to perform additional asserts.
-    protected class TestCallback implements GraphRequest.Callback {
-        private final TestBlocker blocker;
-        private final boolean expectSuccess;
-
-        public TestCallback(TestBlocker blocker, boolean expectSuccess) {
-            this.blocker = blocker;
-            this.expectSuccess = expectSuccess;
-        }
-
-        public TestCallback(boolean expectSuccess) {
-            this(FacebookActivityTestCase.this.getTestBlocker(), expectSuccess);
-        }
-
-        @Override
-        public void onCompleted(GraphResponse response) {
-            try {
-                // We expect to be called on the right thread.
-                if (Thread.currentThread() != blocker) {
-                    throw new FacebookException("Invalid thread " + Thread.currentThread().getId()
-                            + "; expected to be called on thread " + blocker.getId());
-                }
-
-                // We expect either success or failure.
-                if (expectSuccess && response.getError() != null) {
-                    throw response.getError().getException();
-                } else if (!expectSuccess && response.getError() == null) {
-                    throw new FacebookException("Expected failure case, received no error");
-                }
-
-                // Some tests may want more fine-grained control and assert additional conditions.
-                performAsserts(response);
-            } catch (Exception e) {
-                blocker.setException(e);
-            } finally {
-                // Tell anyone waiting on us that this callback was called.
-                blocker.signal();
-            }
-        }
-
-        protected void performAsserts(GraphResponse response) {
-        }
-    }
-
-    // A callback that will assert if the request resulted in an error.
-    protected class ExpectSuccessCallback extends TestCallback {
-        public ExpectSuccessCallback() {
-            super(true);
-        }
-    }
-
-    // A callback that will assert if the request did NOT result in an error.
-    protected class ExpectFailureCallback extends TestCallback {
-        public ExpectFailureCallback() {
-            super(false);
-        }
-    }
-
-    public static abstract class MockGraphRequest extends GraphRequest {
-        public abstract GraphResponse createResponse();
-    }
-
-    public static class MockGraphRequestBatch extends GraphRequestBatch {
-        public MockGraphRequestBatch(MockGraphRequest... requests) {
-            super(requests);
-        }
-
-        // Caller must ensure that all the requests in the batch are, in fact, MockRequests.
-        public MockGraphRequestBatch(GraphRequestBatch requests) {
-            super(requests);
-        }
-
-        @Override
-        List<GraphResponse> executeAndWaitImpl() {
-            List<GraphRequest> requests = getRequests();
-
-            List<GraphResponse> responses = new ArrayList<GraphResponse>();
-            for (GraphRequest request : requests) {
-                MockGraphRequest mockRequest = (MockGraphRequest) request;
-                responses.add(mockRequest.createResponse());
-            }
-
-            GraphRequest.runCallbacks(this, responses);
-
-            return responses;
-        }
-    }
-
-    private AtomicBoolean strictModeOnForUiThread = new AtomicBoolean();
-
-    protected void turnOnStrictModeForUiThread() {
-        // We only ever need to do this once. If the boolean is true, we know that the next runnable
-        // posted to the UI thread will have strict mode on.
-        if (strictModeOnForUiThread.get() == false) {
-            try {
-                runTestOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        // Double-check whether we really need to still do this on the UI thread.
-                        if (strictModeOnForUiThread.compareAndSet(false, true)) {
-                            turnOnStrictModeForThisThread();
-                        }
-                    }
-                });
-            } catch (Throwable throwable) {
-            }
-        }
-    }
-
-    protected void turnOnStrictModeForThisThread() {
-        // We use reflection, because Instrumentation will complain about any references to
-        // StrictMode in API versions < 9 when attempting to run the unit tests. No particular
-        // effort has been made to make this efficient, since we expect to call it just once.
-        try {
-            ClassLoader loader = Thread.currentThread().getContextClassLoader();
-            Class<?> strictModeClass = Class.forName("android.os.StrictMode", true, loader);
-            Class<?> threadPolicyClass = Class.forName(
-                    "android.os.StrictMode$ThreadPolicy",
-                    true,
-                    loader);
-            Class<?> threadPolicyBuilderClass = Class.forName(
-                    "android.os.StrictMode$ThreadPolicy$Builder",
-                    true,
-                    loader);
-
-            Object threadPolicyBuilder = threadPolicyBuilderClass.getConstructor().newInstance();
-            threadPolicyBuilder = threadPolicyBuilderClass.getMethod("detectAll").invoke(
-                    threadPolicyBuilder);
-            threadPolicyBuilder = threadPolicyBuilderClass.getMethod("penaltyDeath").invoke(
-                    threadPolicyBuilder);
-
-            Object threadPolicy = threadPolicyBuilderClass.getMethod("build").invoke(
-                    threadPolicyBuilder);
-            strictModeClass.getMethod("setThreadPolicy", threadPolicyClass).invoke(
-                    strictModeClass,
-                    threadPolicy);
-        } catch (Exception ex) {
-        }
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookActivityTests.java b/facebook/src/androidTest/java/com/facebook/FacebookActivityTests.java
deleted file mode 100644
index 1090c968a..000000000
--- a/facebook/src/androidTest/java/com/facebook/FacebookActivityTests.java
+++ /dev/null
@@ -1,174 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Handler;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-
-import com.facebook.applinks.FacebookAppLinkResolver;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-import bolts.Continuation;
-import bolts.Task;
-
-public class FacebookActivityTests
-        extends FacebookActivityTestCase<FacebookActivityTests.FacebookTestActivity> {
-    public FacebookActivityTests() {
-        super(FacebookActivityTests.FacebookTestActivity.class);
-    }
-
-    @SmallTest
-    public void testLaunchingWithEmptyIntent() throws Exception {
-        final TestBlocker blocker = getTestBlocker();
-        Runnable runnable = new Runnable() {
-            public void run() {
-                try {
-                    Intent intent = new Intent(Intent.ACTION_MAIN);
-                    setActivityIntent(intent);
-                    FacebookTestActivity activity = getActivity();
-
-                    AccessToken.createFromNativeLinkingIntent(
-                            activity.getIntent(),
-                            getApplicationId(),
-                            new AccessToken.AccessTokenCreationCallback() {
-                                @Override
-                                public void onSuccess(AccessToken token) {
-                                    fail();
-                                    blocker.signal();
-
-                                }
-
-                                @Override
-                                public void onError(FacebookException error) {
-                                    blocker.signal();
-                                }
-                            });
-                } catch (Exception e) {
-                    fail(e.getMessage());
-                    blocker.signal();
-                }
-            }
-        };
-        RunTestWithBlocker(blocker, runnable);
-    }
-
-    @SmallTest
-    public void testLaunchingWithValidNativeLinkingIntent() {
-        final TestBlocker blocker = getTestBlocker();
-        Runnable runnable = new Runnable() {
-            public void run() {
-                try {
-                    final String token = "A token less unique than most";
-                    final String userId = "1000";
-
-                    Intent intent = new Intent(Intent.ACTION_MAIN);
-                    intent.putExtras(getNativeLinkingExtras(token, userId));
-                    setActivityIntent(intent);
-                    FacebookTestActivity activity = getActivity();
-
-                    AccessToken.createFromNativeLinkingIntent(
-                            activity.getIntent(),
-                            getApplicationId(),
-                            new AccessToken.AccessTokenCreationCallback() {
-                                @Override
-                                public void onSuccess(AccessToken token) {
-                                    assertNotNull(token);
-                                    blocker.signal();
-                                }
-
-                                @Override
-                                public void onError(FacebookException error) {
-                                    fail();
-                                    blocker.signal();
-                                }
-                            });
-                } catch (Exception e) {
-                    fail(e.getMessage());
-                    blocker.signal();
-                }
-            }
-        };
-        RunTestWithBlocker(blocker, runnable);
-    }
-
-    @MediumTest
-    public void testLaunchingWithValidNativeLinkingNoUserIntent() throws Exception {
-        final TestBlocker blocker = getTestBlocker();
-        Runnable runnable = new Runnable() {
-            public void run() {
-                try {
-                    TestUserManager manager = new TestUserManager(
-                            getApplicationSecret(),
-                            getApplicationId());
-                    AccessToken token = manager.getAccessTokenForSharedUser(null);
-
-                    Intent intent = new Intent(Intent.ACTION_MAIN);
-                    intent.putExtras(getNativeLinkingExtras(token.getToken(), null));
-                    setActivityIntent(intent);
-                    FacebookTestActivity activity = getActivity();
-                    AccessToken.createFromNativeLinkingIntent(
-                            activity.getIntent(),
-                            getApplicationId(),
-                            new AccessToken.AccessTokenCreationCallback() {
-                                @Override
-                                public void onSuccess(AccessToken token) {
-                                    assertNotNull(token);
-                                    blocker.signal();
-                                }
-
-                                @Override
-                                public void onError(FacebookException error) {
-                                    fail();
-                                    blocker.signal();
-                                }
-                            });
-                } catch (Exception e) {
-                    // Get back to the test case if there was an uncaught exception
-                    fail(e.getMessage());
-                    blocker.signal();
-                }
-            }
-        };
-
-        RunTestWithBlocker(blocker, runnable);
-    }
-
-    public static class FacebookTestActivity extends Activity {
-    }
-
-    private void RunTestWithBlocker(final TestBlocker blocker, Runnable runnable) {
-        try {
-            Handler handler = new Handler(blocker.getLooper());
-            handler.post(runnable);
-
-            blocker.waitForSignals(1);
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
deleted file mode 100644
index 06a01f5ad..000000000
--- a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.net.Uri;
-import android.os.Handler;
-import android.test.FlakyTest;
-
-import com.facebook.applinks.FacebookAppLinkResolver;
-
-import bolts.AppLink;
-import bolts.Continuation;
-import bolts.Task;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class FacebookAppLinkResolverTests extends FacebookTestCase {
-    private Task resolveTask;
-
-    public void testSingleUrl() {
-        String testUrlString = "https://fb.me/732873156764191";
-        Uri testUrl = Uri.parse(testUrlString);
-        Uri testWebUri = Uri.parse("http://www.facebook.com/");
-        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
-        testTargets.add(new AppLink.Target(
-                "com.myapp",
-                null,
-                Uri.parse("myapp://3"),
-                "my app"));
-        testTargets.add(new AppLink.Target(
-                "com.myapp-test",
-                null,
-                Uri.parse("myapp-test://4"),
-                "my test app"));
-        try {
-            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testUrl);
-
-            getTestBlocker().waitForSignals(1);
-
-            assertNotNull(resolveTask);
-
-            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
-
-            assertTrue(singleUrlResolveTask.isCompleted() &&
-                    !singleUrlResolveTask.isCancelled() &&
-                    !singleUrlResolveTask.isFaulted());
-
-            AppLink appLink = singleUrlResolveTask.getResult();
-
-            assertEquals(appLink.getSourceUrl(), testUrl);
-            assertEquals(appLink.getWebUrl(), testWebUri);
-            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
-    public void testUrlWithNoAppLinkData() {
-        String testNoAppLinkUrlString = "https://fb.me/732873156764191_no_app_link";
-        Uri testNoAppLinkUrl = Uri.parse(testNoAppLinkUrlString);
-        try {
-            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testNoAppLinkUrl);
-
-            getTestBlocker().waitForSignals(1);
-
-            assertNotNull(resolveTask);
-
-            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
-
-            assertTrue(singleUrlResolveTask.isCompleted() &&
-                    !singleUrlResolveTask.isCancelled() &&
-                    !singleUrlResolveTask.isFaulted());
-
-            AppLink appLink = singleUrlResolveTask.getResult();
-            assertNull(appLink);
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
-    @FlakyTest
-    public void testCachedAppLinkData() {
-        String testUrlString = "https://fb.me/732873156764191";
-        Uri testUrl = Uri.parse(testUrlString);
-        Uri testWebUri = Uri.parse("http://www.facebook.com/");
-        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
-        testTargets.add(new AppLink.Target(
-                "com.myapp",
-                null,
-                Uri.parse("myapp://3"),
-                "my app"));
-        testTargets.add(new AppLink.Target(
-                "com.myapp-test",
-                null,
-                Uri.parse("myapp-test://4"),
-                "my test app"));
-
-        try {
-            FacebookAppLinkResolver resolver = new FacebookAppLinkResolver();
-
-            // This will prefetch the app link
-            executeResolverOnBlockerThread(resolver, testUrl);
-            getTestBlocker().waitForSignals(1);
-            assertNotNull(resolveTask);
-
-            // Now let's fetch it again. This should complete the task synchronously.
-            Task<AppLink> cachedUrlResolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
-
-            assertTrue(cachedUrlResolveTask.isCompleted() &&
-                    !cachedUrlResolveTask.isCancelled() &&
-                    !cachedUrlResolveTask.isFaulted());
-
-            AppLink appLink = cachedUrlResolveTask.getResult();
-
-            assertEquals(appLink.getSourceUrl(), testUrl);
-            assertEquals(appLink.getWebUrl(), testWebUri);
-            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
-    public void executeResolverOnBlockerThread(final FacebookAppLinkResolver resolver, final Uri testUrl) {
-        final TestBlocker blocker = getTestBlocker();
-        Runnable runnable = new Runnable() {
-            public void run() {
-                try {
-                    resolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
-                    resolveTask.continueWith(new Continuation() {
-                        @Override
-                        public Object then(Task task) throws Exception {
-                            // Once the task is complete, unblock the test thread, so it can inspect for errors/results.
-                            blocker.signal();
-                            return null;
-                        }
-                    });
-                } catch (Exception e) {
-                    // Get back to the test case if there was an uncaught exception
-                    blocker.signal();
-                }
-            }
-        };
-
-        Handler handler = new Handler(blocker.getLooper());
-        handler.post(runnable);
-    }
-
-    private static boolean targetListsAreEqual(List<AppLink.Target> list1, List<AppLink.Target> list2) {
-        if (list1 == null) {
-            return list2 == null;
-        } else if (list2 == null || list1.size() != list2.size()) {
-            return false;
-        }
-
-        ArrayList<AppLink.Target> list2Copy = new ArrayList<AppLink.Target>(list2);
-
-        for(int i = 0; i < list1.size(); i++) {
-            int j;
-            for (j = 0; j < list2Copy.size(); j++) {
-                if (targetsAreEqual(list1.get(i), list2Copy.get(j))) {
-                    break;
-                }
-            }
-
-            if (j < list2Copy.size()) {
-                // Found a match. Remove from the copy to make sure the same target isn't matched twice.
-                list2Copy.remove(j);
-            } else {
-                // Match not found
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private static boolean targetsAreEqual(AppLink.Target target1, AppLink.Target target2) {
-        boolean isEqual =
-                objectsAreEqual(target1.getPackageName(), target2.getPackageName()) &&
-                objectsAreEqual(target1.getClassName(), target2.getClassName()) &&
-                objectsAreEqual(target1.getAppName(), target2.getAppName()) &&
-                objectsAreEqual(target1.getUrl(), target2.getUrl()) ;
-
-        return isEqual;
-    }
-
-    private static boolean objectsAreEqual(Object s1, Object s2) {
-        return s1 == null
-                ? s2 == null
-                : s1.equals(s2);
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/FragmentTestCase.java b/facebook/src/androidTest/java/com/facebook/FragmentTestCase.java
deleted file mode 100644
index b421196ee..000000000
--- a/facebook/src/androidTest/java/com/facebook/FragmentTestCase.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.widget.LinearLayout;
-
-public class FragmentTestCase<T extends FragmentTestCase.TestFragmentActivity<?>> extends FacebookActivityTestCase<T> {
-    public FragmentTestCase(Class<T> activityClass) {
-        super(activityClass);
-    }
-
-    protected T getTestActivity() {
-        return (T) getActivity();
-    }
-
-    public static class TestFragmentActivity<T extends Fragment> extends FragmentActivity {
-        public static final int FRAGMENT_ID = 0xFACE;
-
-        private Class<T> fragmentClass;
-        private int fragmentId;
-
-        protected TestFragmentActivity(Class<T> fragmentClass) {
-            this.fragmentClass = fragmentClass;
-        }
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            if (getAutoCreateUI()) {
-                setContentToFragment(null);
-            }
-        }
-
-        protected boolean getAutoCreateUI() {
-            return true;
-        }
-
-        void setContentToFragment(T fragment) {
-            if (fragment == null) {
-                try {
-                    fragment = createFragment();
-                } catch (InstantiationException e) {
-                    return;
-                } catch (IllegalAccessException e) {
-                    return;
-                }
-            }
-
-            LinearLayout layout = new LinearLayout(this);
-            layout.setOrientation(LinearLayout.VERTICAL);
-            layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
-                    LinearLayout.LayoutParams.FILL_PARENT));
-            layout.setId(FRAGMENT_ID);
-
-            getSupportFragmentManager().beginTransaction()
-                    .add(FRAGMENT_ID, fragment)
-                    .commit();
-
-            fragmentId = FRAGMENT_ID;
-
-            setContentView(layout);
-        }
-
-        void setContentToLayout(int i, int fragmentId) {
-            this.fragmentId = fragmentId;
-            setContentView(i);
-        }
-
-        protected T createFragment() throws InstantiationException, IllegalAccessException {
-            return fragmentClass.newInstance();
-        }
-
-        T getFragment() {
-            @SuppressWarnings("unchecked")
-            T fragment = (T) getSupportFragmentManager().findFragmentById(fragmentId);
-            return fragment;
-        }
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/GraphRequestBatchBridge.java b/facebook/src/androidTest/java/com/facebook/GraphRequestBatchBridge.java
deleted file mode 100644
index 0ffa3b495..000000000
--- a/facebook/src/androidTest/java/com/facebook/GraphRequestBatchBridge.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-
-public final class GraphRequestBatchBridge {
-
-    public static void setCallbackHandler(GraphRequestBatch batch, Handler callbackHandler) {
-        batch.setCallbackHandler(callbackHandler);
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java b/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
deleted file mode 100644
index 6745a0fab..000000000
--- a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Date;
-
-// These tests relate to serialization/de-serialization of graph objects in a variety of scenarios, rather than
-// to the underlying request/batch plumbing.
-public class GraphRequestTests extends FacebookTestCase {
-
-    protected String[] getDefaultPermissions()
-    {
-        return new String[] { "email", "publish_actions", "user_posts" };
-    };
-
-    @LargeTest
-    public void testCommentRoundTrip() throws JSONException {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        JSONObject status = createStatusUpdate("");
-        JSONObject createdStatus = batchCreateAndGet(accessToken, "me/feed", status, null);
-        String statusID = createdStatus.optString("id");
-
-        JSONObject comment = new JSONObject();
-        final String commentMessage = "It truly is a wonderful status update.";
-        comment.put("message", commentMessage);
-
-        JSONObject createdComment1 = batchCreateAndGet(accessToken, statusID + "/comments", comment, null);
-        assertNotNull(createdComment1);
-
-        String comment1ID = createdComment1.optString("id");
-        String comment1Message = createdComment1.optString("message");
-        assertNotNull(comment1ID);
-        assertNotNull(comment1Message);
-        assertEquals(commentMessage, comment1Message);
-
-        // Try posting the same comment to the same status update. We need to clear its ID first.
-        createdComment1.remove("id");
-        JSONObject createdComment2 = batchCreateAndGet(accessToken, statusID + "/comments", createdComment1, null);
-        assertNotNull(createdComment2);
-
-        String comment2ID = createdComment2.optString("id");
-        String comment2Message = createdComment2.optString("message");
-        assertNotNull(comment2ID);
-        assertFalse(comment1ID.equals(comment2ID));
-        assertNotNull(comment2Message);
-        assertEquals(commentMessage, comment2Message);
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/GraphResponseBridge.java b/facebook/src/androidTest/java/com/facebook/GraphResponseBridge.java
deleted file mode 100644
index c0bfd59d6..000000000
--- a/facebook/src/androidTest/java/com/facebook/GraphResponseBridge.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import org.json.JSONObject;
-
-import java.net.HttpURLConnection;
-
-public class GraphResponseBridge {
-    public static GraphResponse createGraphResponse(
-            GraphRequest request,
-            HttpURLConnection connection,
-            String rawResponse,
-            JSONObject graphObject) {
-        return new GraphResponse(request, connection, rawResponse, graphObject, null, null);
-    }
-
-}
diff --git a/facebook/src/androidTest/java/com/facebook/GraphUtilTests.java b/facebook/src/androidTest/java/com/facebook/GraphUtilTests.java
deleted file mode 100644
index 568bc04a7..000000000
--- a/facebook/src/androidTest/java/com/facebook/GraphUtilTests.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import com.facebook.internal.GraphUtil;
-import com.facebook.internal.NativeProtocol;
-
-import org.json.JSONObject;
-
-import static org.mockito.Mockito.*;
-
-public class GraphUtilTests extends FacebookTestCase {
-
-    public void testIsOpenGraphObjectForPost() {
-        JSONObject jsonObject = mock(JSONObject.class);
-        when(jsonObject.optBoolean(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)).thenReturn(true);
-        assertTrue(GraphUtil.isOpenGraphObjectForPost(jsonObject));
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/ProfileManagerTest.java b/facebook/src/androidTest/java/com/facebook/ProfileManagerTest.java
deleted file mode 100644
index 53c3386df..000000000
--- a/facebook/src/androidTest/java/com/facebook/ProfileManagerTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.test.suitebuilder.annotation.LargeTest;
-
-public class ProfileManagerTest extends FacebookTestCase {
-
-    @LargeTest
-    public void testExecuteSingleGet() throws Throwable {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-        AccessToken.setCurrentAccessToken(accessToken);
-        Profile.setCurrentProfile(null);
-        ProfileTracker tracker = null;
-        try {
-            tracker = new ProfileTracker() {
-                @Override
-                protected void onCurrentProfileChanged(Profile oldProfile, Profile currentProfile) {
-                    getTestBlocker().signal();
-                }
-            };
-            assertNull(Profile.getCurrentProfile());
-            runAndBlockOnUiThread(1, new Runnable() {
-                @Override
-                public void run() {
-                    Profile.fetchProfileForCurrentAccessToken();
-                }
-            });
-        } catch(Exception e) {
-            fail();
-        } finally {
-            if (tracker != null) {
-                tracker.stopTracking();
-            }
-        }
-        Profile profile = Profile.getCurrentProfile();
-        assertNotNull(profile);
-        assertEquals("Shared", profile.getFirstName());
-        assertEquals("Testuser", profile.getLastName());
-    }
-
-}
diff --git a/facebook/src/androidTest/java/com/facebook/RequestTests.java b/facebook/src/androidTest/java/com/facebook/RequestTests.java
deleted file mode 100644
index addb33e42..000000000
--- a/facebook/src/androidTest/java/com/facebook/RequestTests.java
+++ /dev/null
@@ -1,1038 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.location.Location;
-import android.net.Uri;
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.Suppress;
-
-import com.facebook.internal.GraphUtil;
-import com.facebook.share.ShareApi;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicReference;
-
-public class RequestTests extends FacebookTestCase {
-    private static final String TEST_OG_OBJECT_TYPE = "facebooksdktests:test";
-    private static final String TEST_OG_ACTION_TYPE = "facebooksdktests:run";
-    private static final long REQUEST_TIMEOUT_MILLIS = 10000;
-
-    public static final String TEST_PAGE_ID = "910055289103294";
-    public static final String TEST_PAGE_ID_2 = "110774245616525";
-
-    protected String[] getDefaultPermissions()
-    {
-        return new String[] {
-                "email",
-                "publish_actions",
-                "user_posts",
-                "user_photos",
-                "user_videos" };
-    };
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        AccessToken.setCurrentAccessToken(getAccessTokenForSharedUser());
-    }
-
-    @Override
-    public void tearDown() throws Exception {
-        AccessToken.setCurrentAccessToken(null);
-        super.tearDown();
-    }
-
-    @LargeTest
-    public void testExecuteSingleGet() {
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request = new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                TEST_PAGE_ID,
-                parameters,
-                null);
-        GraphResponse response = request.executeAndWait();
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertNotNull(response.getJSONObject());
-        assertNotNull(response.getRawResponse());
-
-        JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Seattle", graphPlace.optJSONObject("location").optString("city"));
-    }
-
-    @LargeTest
-    public void testBuildsUploadPhotoHttpURLConnection() throws Exception {
-        Bitmap image = createTestBitmap(128);
-
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                AccessToken.getCurrentAccessToken(),
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                "Test photo messsage",
-                null,
-                null);
-        HttpURLConnection connection = GraphRequest.toHttpConnection(request);
-
-        assertTrue(connection != null);
-        assertNotSame("gzip", connection.getRequestProperty("Content-Encoding"));
-        assertNotSame("application/x-www-form-urlencoded", connection.getRequestProperty("Content-Type"));
-    }
-
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request = new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                TEST_PAGE_ID,
-                parameters,
-                null);
-        HttpURLConnection connection = GraphRequest.toHttpConnection(request);
-
-        assertEquals("gzip", connection.getRequestProperty("Content-Encoding"));
-        assertEquals(
-                "application/x-www-form-urlencoded",
-                connection.getRequestProperty("Content-Type"));
-
-        List<GraphResponse> responses = GraphRequest.executeConnectionAndWait(
-                connection,
-                Arrays.asList(new GraphRequest[]{request}));
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        GraphResponse response = responses.get(0);
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertNotNull(response.getJSONObject());
-        assertNotNull(response.getRawResponse());
-
-        JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Seattle", graphPlace.optJSONObject("location").optString("city"));
-
-        // Make sure calling code can still access HTTP headers and call disconnect themselves.
-        int code = connection.getResponseCode();
-        assertEquals(200, code);
-        assertTrue(connection.getHeaderFields().keySet().contains("Content-Type"));
-        connection.disconnect();
-    }
-
-    @LargeTest
-    public void testFacebookErrorResponseCreatesError() {
-        GraphRequest request = new GraphRequest(null, "somestringthatshouldneverbeavalidfobjectid");
-        GraphResponse response = request.executeAndWait();
-
-        assertTrue(response != null);
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-        FacebookException exception = error.getException();
-        assertNotNull(exception);
-
-        assertTrue(exception instanceof FacebookServiceException);
-        assertNotNull(error.getErrorType());
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-        assertNotNull(error.getRequestResultBody());
-    }
-
-    @LargeTest
-    public void testRequestWithNoTokenFails() {
-        GraphRequest request = new GraphRequest(null, "me");
-        GraphResponse response = request.executeAndWait();
-
-        assertNotNull(response.getError());
-    }
-
-    @LargeTest
-    public void testExecuteRequestMe() {
-        GraphRequest request = GraphRequest.newMeRequest(AccessToken.getCurrentAccessToken(), null);
-        GraphResponse response = request.executeAndWait();
-
-        validateMeResponse(AccessToken.getCurrentAccessToken(), response);
-    }
-
-    static void validateMeResponse(AccessToken accessToken, GraphResponse response) {
-        assertNull(response.getError());
-
-        JSONObject me = response.getJSONObject();
-        assertNotNull(me);
-        assertEquals(accessToken.getUserId(), me.optString("id"));
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testExecuteMyFriendsRequest() {
-        GraphRequest request =
-                GraphRequest.newMyFriendsRequest(AccessToken.getCurrentAccessToken(), null);
-        GraphResponse response = request.executeAndWait();
-
-        validateMyFriendsResponse(response);
-    }
-
-    static void validateMyFriendsResponse(GraphResponse response) {
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject graphResult = response.getJSONObject();
-        assertNotNull(graphResult);
-
-        JSONArray results = graphResult.optJSONArray("data");
-        assertNotNull(results);
-
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testExecutePlaceRequestWithLocation() {
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        GraphRequest request = GraphRequest.newPlacesSearchRequest(
-                AccessToken.getCurrentAccessToken(),
-                location,
-                5,
-                5,
-                null,
-                null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject graphResult = response.getJSONObject();
-        assertNotNull(graphResult);
-
-        JSONArray results = graphResult.optJSONArray("data");
-        assertNotNull(results);
-
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testExecutePlaceRequestWithSearchText() {
-        // Pass a distance without a location to ensure it is correctly ignored.
-        GraphRequest request = GraphRequest.newPlacesSearchRequest(
-                AccessToken.getCurrentAccessToken(),
-                null,
-                1000,
-                5,
-                "Starbucks",
-                null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject graphResult = response.getJSONObject();
-        assertNotNull(graphResult);
-
-        JSONArray results = graphResult.optJSONArray("data");
-        assertNotNull(results);
-
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testExecutePlaceRequestWithLocationAndSearchText() {
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        GraphRequest request = GraphRequest.newPlacesSearchRequest(
-                AccessToken.getCurrentAccessToken(),
-                location,
-                1000,
-                5,
-                "Starbucks",
-                null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject graphResult = response.getJSONObject();
-        assertNotNull(graphResult);
-
-        JSONArray results = graphResult.optJSONArray("data");
-        assertNotNull(results);
-
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testShareOpenGraphContent() throws Exception {
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .build();
-
-        ShareOpenGraphAction ogAction = new ShareOpenGraphAction.Builder()
-                .setActionType(TEST_OG_ACTION_TYPE)
-                .putObject("test", ogObject)
-                .build();
-
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(ogAction)
-                .setPreviewPropertyName("test")
-                .build();
-
-        final ShareApi shareApi = new ShareApi(content);
-        final AtomicReference<String> actionId = new AtomicReference<>(null);
-
-        getActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                shareApi.share(new FacebookCallback<Sharer.Result>() {
-                    @Override
-                    public void onSuccess(Sharer.Result result) {
-                        actionId.set(result.getPostId());
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onCancel() {
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onError(FacebookException error) {
-                        notifyShareFinished();
-                    }
-
-                    private void notifyShareFinished() {
-                        synchronized (shareApi) {
-                            shareApi.notifyAll();
-                        }
-                    }
-                });
-            }
-        });
-
-        synchronized (shareApi) {
-            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-        }
-        assertNotNull(actionId.get());
-    }
-
-    @LargeTest
-    public void testShareOpenGraphContentWithBadType() throws Exception {
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .build();
-
-        ShareOpenGraphAction ogAction = new ShareOpenGraphAction.Builder()
-                .setActionType(TEST_OG_ACTION_TYPE+"bad")
-                .putObject("test", ogObject)
-                .build();
-
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(ogAction)
-                .setPreviewPropertyName("test")
-                .build();
-
-        final ShareApi shareApi = new ShareApi(content);
-        final AtomicReference<String> actionId = new AtomicReference<>(null);
-        final AtomicBoolean errorOccurred = new AtomicBoolean(false);
-
-        getActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                shareApi.share(new FacebookCallback<Sharer.Result>() {
-                    @Override
-                    public void onSuccess(Sharer.Result result) {
-                        actionId.set(result.getPostId());
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onCancel() {
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onError(FacebookException error) {
-                        errorOccurred.set(true);
-                        notifyShareFinished();
-                    }
-
-                    private void notifyShareFinished() {
-                        synchronized (shareApi) {
-                            shareApi.notifyAll();
-                        }
-                    }
-                });
-            }
-        });
-
-        synchronized (shareApi) {
-            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-        }
-        assertNull(actionId.get());
-        assertTrue(errorOccurred.get());
-    }
-
-    private String executePostOpenGraphRequest() {
-        JSONObject data = new JSONObject();
-        try {
-            data.put("a_property", "hello");
-        } catch (JSONException e) {
-            throw new RuntimeException(e);
-        }
-
-        JSONObject ogObject = GraphUtil.createOpenGraphObjectForPost(
-                TEST_OG_OBJECT_TYPE,
-                "a title",
-                "http://www.facebook.com",
-                "http://www.facebook.com/zzzzzzzzzzzzzzzzzzz",
-                "a description",
-                data,
-                null);
-
-        Bundle bundle = new Bundle();
-        bundle.putString("object", ogObject.toString());
-        GraphRequest request = new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                "/me/objects/" + TEST_OG_OBJECT_TYPE,
-                bundle,
-                HttpMethod.POST,
-                null);
-
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject graphResult = response.getJSONObject();
-        assertNotNull(graphResult);
-        assertNotNull(graphResult.optString("id"));
-
-        assertNotNull(response.getRawResponse());
-
-        return graphResult.optString("id");
-    }
-
-    @LargeTest
-    public void testExecutePostOpenGraphRequest() {
-        executePostOpenGraphRequest();
-    }
-
-    @LargeTest
-    public void testCreateOpenGraphObjectWithBadImageType() throws InterruptedException {
-        //only image urls are accepted for createOpenGraphObject
-        Bitmap image = createTestBitmap(128);
-        SharePhoto photo = new SharePhoto.Builder()
-                .setBitmap(image)
-                .setUserGenerated(true)
-                .build();
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .putPhoto("og:image", photo)
-                .build();
-
-        try {
-            GraphRequest request = GraphRequest.createOpenGraphObject(ogObject);
-            GraphResponse response = request.executeAndWait();
-            //should fail because do not accept images without imageurl
-            fail();
-        }
-        catch (Exception e){
-            if(!(e instanceof FacebookException
-                    && e.getMessage().equals("Unable to attach images"))){
-                fail();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testCreateOpenGraphObject() throws InterruptedException {
-        Uri testImage = Uri.parse("http://i.imgur.com/Diyvl7q.jpg");
-        SharePhoto photo = new SharePhoto.Builder()
-                .setImageUrl(testImage)
-                .setUserGenerated(true)
-                .build();
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .putPhoto("og:image", photo)
-                .build();
-
-        try {
-            GraphRequest request = GraphRequest.createOpenGraphObject(ogObject);
-            GraphResponse response = request.executeAndWait();
-
-            assertNotNull(response);
-            assertNull(response.getError());
-
-            JSONObject graphResult = response.getJSONObject();
-
-            assertNotNull(graphResult);
-            assertNotNull(graphResult.optString("id"));
-            assertNotNull(response.getRawResponse());
-        }
-        catch (Exception e){
-            fail();
-        }
-    }
-
-    @LargeTest
-    public void testDeleteObjectRequest() {
-        String id = executePostOpenGraphRequest();
-
-        GraphRequest request = GraphRequest.newDeleteObjectRequest(
-                AccessToken.getCurrentAccessToken(),
-                id,
-                null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject result = response.getJSONObject();
-        assertNotNull(result);
-
-        assertTrue(result.optBoolean(GraphResponse.SUCCESS_KEY));
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testUpdateOpenGraphObjectRequest() throws JSONException {
-        String id = executePostOpenGraphRequest();
-
-        JSONObject data = new JSONObject();
-        data.put("a_property", "goodbye");
-
-        JSONObject ogObject = GraphUtil.createOpenGraphObjectForPost(
-                TEST_OG_OBJECT_TYPE,
-                "another title",
-                null,
-                "http://www.facebook.com/aaaaaaaaaaaaaaaaa",
-                "another description",
-                data,
-                null);
-        Bundle bundle = new Bundle();
-        bundle.putString("object", ogObject.toString());
-        GraphRequest request = new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                id,
-                bundle,
-                HttpMethod.POST,
-                null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject result = response.getJSONObject();
-        assertNotNull(result);
-        assertEquals("another title", result.optString("title"));
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhoto() {
-        Bitmap image = createTestBitmap(128);
-
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                AccessToken.getCurrentAccessToken(),
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                "Test photo message",
-                null,
-                null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject result = response.getJSONObject();
-        assertNotNull(result);
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhotoViaFile() throws IOException {
-        File outputFile = null;
-        FileOutputStream outStream = null;
-
-        try {
-            Bitmap image = createTestBitmap(128);
-
-            File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
-            outputFile = File.createTempFile("prefix", "extension", outputDir);
-
-            outStream = new FileOutputStream(outputFile);
-            image.compress(Bitmap.CompressFormat.PNG, 100, outStream);
-            outStream.close();
-            outStream = null;
-
-            GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    ShareInternalUtility.MY_PHOTOS,
-                    outputFile,
-                    "Test photo message",
-                    null,
-                    null);
-            GraphResponse response = request.executeAndWait();
-            assertNotNull(response);
-
-            assertNull(response.getError());
-
-            JSONObject result = response.getJSONObject();
-            assertNotNull(result);
-            assertNotNull(response.getRawResponse());
-        } finally {
-            if (outStream != null) {
-                outStream.close();
-            }
-            if (outputFile != null) {
-                outputFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhotoToAlbum() throws InterruptedException, JSONException {
-        // first create an album
-        Bundle params = new Bundle();
-        params.putString("name", "Foo");
-        GraphRequest request =
-                new GraphRequest(
-                        AccessToken.getCurrentAccessToken(),
-                        "me/albums",
-                        params,
-                        HttpMethod.POST);
-
-        GraphResponse response = request.executeAndWait();
-        JSONObject jsonResponse = response.getJSONObject();
-        assertNotNull(jsonResponse);
-        String albumId = jsonResponse.optString("id");
-        assertNotNull(albumId);
-
-        // upload an image to the album
-        Bitmap image = createTestBitmap(128);
-        SharePhoto photo = new SharePhoto.Builder()
-                .setBitmap(image)
-                .setUserGenerated(true)
-                .build();
-        SharePhotoContent content = new SharePhotoContent.Builder().addPhoto(photo).build();
-        final ShareApi shareApi = new ShareApi(content);
-        shareApi.setGraphNode(albumId);
-        final AtomicReference<String> imageId = new AtomicReference<>(null);
-        getActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                shareApi.share(new FacebookCallback<Sharer.Result>() {
-                    @Override
-                    public void onSuccess(Sharer.Result result) {
-                        imageId.set(result.getPostId());
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onCancel() {
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onError(FacebookException error) {
-                        notifyShareFinished();
-                    }
-
-                    private void notifyShareFinished() {
-                        synchronized (shareApi) {
-                            shareApi.notifyAll();
-                        }
-                    }
-                });
-            }
-        });
-
-        synchronized (shareApi) {
-            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-        }
-        assertNotNull(imageId.get());
-
-        // now check to see if the image is in the album
-        GraphRequest listRequest =
-                new GraphRequest(AccessToken.getCurrentAccessToken(), albumId + "/photos");
-
-        GraphResponse listResponse = listRequest.executeAndWait();
-        JSONObject listObject = listResponse.getJSONObject();
-        assertNotNull(listObject);
-        JSONArray jsonList = listObject.optJSONArray("data");
-        assertNotNull(jsonList);
-
-        boolean found = false;
-        for (int i = 0; i < jsonList.length(); i++) {
-            JSONObject imageObject = jsonList.getJSONObject(i);
-            if (imageId.get().equals(imageObject.optString("id"))) {
-                found = true;
-            }
-        }
-        assertTrue(found);
-    }
-
-    @LargeTest
-    public void testUploadVideoFile() throws IOException, URISyntaxException {
-        File tempFile = null;
-        try {
-            tempFile = createTempFileFromAsset("DarkScreen.mov");
-            ShareVideo video = new ShareVideo.Builder()
-                    .setLocalUrl(Uri.fromFile(tempFile))
-                    .build();
-            ShareVideoContent content = new ShareVideoContent.Builder().setVideo(video).build();
-            final ShareApi shareApi = new ShareApi(content);
-            final AtomicReference<String> videoId = new AtomicReference<>(null);
-            getActivity().runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    shareApi.share(new FacebookCallback<Sharer.Result>() {
-                        @Override
-                        public void onSuccess(Sharer.Result result) {
-                            videoId.set(result.getPostId());
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onCancel() {
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onError(FacebookException error) {
-                            notifyShareFinished();
-                        }
-
-                        private void notifyShareFinished() {
-                            synchronized (shareApi) {
-                                shareApi.notifyAll();
-                            }
-                        }
-                    });
-                }
-            });
-
-            synchronized (shareApi) {
-                shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-            }
-            assertNotNull(videoId.get());
-        } catch (Exception ex) {
-            fail();
-        } finally {
-            if (tempFile != null) {
-                tempFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testUploadVideoFileToUserId() throws IOException, URISyntaxException {
-        File tempFile = null;
-        try {
-            GraphRequest meRequest =
-                    GraphRequest.newMeRequest(AccessToken.getCurrentAccessToken(), null);
-            GraphResponse meResponse = meRequest.executeAndWait();
-            JSONObject meJson = meResponse.getJSONObject();
-            assertNotNull(meJson);
-
-            String userId = meJson.optString("id");
-            assertNotNull(userId);
-
-            tempFile = createTempFileFromAsset("DarkScreen.mov");
-            ShareVideo video = new ShareVideo.Builder()
-                    .setLocalUrl(Uri.fromFile(tempFile))
-                    .build();
-            ShareVideoContent content = new ShareVideoContent.Builder().setVideo(video).build();
-            final ShareApi shareApi = new ShareApi(content);
-            shareApi.setGraphNode(userId);
-            final AtomicReference<String> videoId = new AtomicReference<>(null);
-            getActivity().runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    shareApi.share(new FacebookCallback<Sharer.Result>() {
-                        @Override
-                        public void onSuccess(Sharer.Result result) {
-                            videoId.set(result.getPostId());
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onCancel() {
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onError(FacebookException error) {
-                            notifyShareFinished();
-                        }
-
-                        private void notifyShareFinished() {
-                            synchronized (shareApi) {
-                                shareApi.notifyAll();
-                            }
-                        }
-                    });
-                }
-            });
-
-            synchronized (shareApi) {
-                shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-            }
-            assertNotNull(videoId.get());
-        } catch (Exception ex) {
-            fail();
-        } finally {
-            if (tempFile != null) {
-                tempFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testPostStatusUpdate() {
-        JSONObject statusUpdate = createStatusUpdate("");
-
-        JSONObject retrievedStatusUpdate = postGetAndAssert(
-                AccessToken.getCurrentAccessToken(),
-                "me/feed",
-                statusUpdate);
-
-        assertEquals(statusUpdate.optString("message"), retrievedStatusUpdate.optString("message"));
-    }
-
-    @LargeTest
-    public void testCallbackIsCalled() {
-        GraphRequest request = new GraphRequest(null, "4");
-
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                calledBack.add(true);
-            }
-        });
-
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-        assertTrue(calledBack.size() == 1);
-    }
-
-    @LargeTest
-    public void testOnProgressCallbackIsCalled() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
-
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                null,
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                null,
-                null,
-                null);
-        assertTrue(request != null);
-
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new GraphRequest.OnProgressCallback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-            }
-
-            @Override
-            public void onProgress(long current, long max) {
-                calledBack.add(true);
-            }
-        });
-
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-        assertFalse(calledBack.isEmpty());
-    }
-
-    @LargeTest
-    public void testLastOnProgressCallbackIsCalledOnce() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
-
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                null,
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                null,
-                null,
-                null);
-        assertTrue(request != null);
-
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new GraphRequest.OnProgressCallback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-            }
-
-            @Override
-            public void onProgress(long current, long max) {
-                if (current == max) calledBack.add(true);
-                else if (current > max) calledBack.clear();
-            }
-        });
-
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-        assertEquals(1, calledBack.size());
-    }
-
-    @LargeTest
-    public void testBatchTimeoutIsApplied() {
-        GraphRequest request = new GraphRequest(null, "me");
-        GraphRequestBatch batch = new GraphRequestBatch(request);
-
-        // We assume 5 ms is short enough to fail
-        batch.setTimeout(1);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertTrue(responses.size() == 1);
-        GraphResponse response = responses.get(0);
-        assertNotNull(response);
-        assertNotNull(response.getError());
-    }
-
-    @LargeTest
-    public void testBatchTimeoutCantBeNegative() {
-        try {
-            GraphRequestBatch batch = new GraphRequestBatch();
-            batch.setTimeout(-1);
-            fail();
-        } catch (IllegalArgumentException ex) {
-        }
-    }
-
-    @LargeTest
-    public void testCantUseComplexParameterInGetRequest() {
-        Bundle parameters = new Bundle();
-        parameters.putShortArray("foo", new short[1]);
-
-        GraphRequest request = new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                "me",
-                parameters,
-                HttpMethod.GET,
-                new ExpectFailureCallback());
-        GraphResponse response = request.executeAndWait();
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-        FacebookException exception = error.getException();
-        assertNotNull(exception);
-        assertTrue(exception.getMessage().contains("short[]"));
-    }
-
-    private final Location SEATTLE_LOCATION = new Location("") {
-        {
-            setLatitude(47.6097);
-            setLongitude(-122.3331);
-        }
-    };
-
-    @LargeTest
-    public void testPaging() {
-        final List<JSONObject> returnedPlaces = new ArrayList<JSONObject>();
-        GraphRequest request = GraphRequest
-                .newPlacesSearchRequest(
-                        AccessToken.getCurrentAccessToken(),
-                        SEATTLE_LOCATION,
-                        100000,
-                        3,
-                        null,
-                        new GraphRequest.GraphJSONArrayCallback() {
-                            @Override
-                            public void onCompleted(JSONArray places, GraphResponse response) {
-                                if (places == null) {
-                                    assertNotNull(places);
-                                }
-                                for (int i = 0; i < places.length(); ++i) {
-                                    returnedPlaces.add(places.optJSONObject(i));
-                                }
-                            }
-                        });
-        GraphResponse response = request.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getJSONObject());
-        assertNotSame(0, returnedPlaces.size());
-
-        returnedPlaces.clear();
-
-        GraphRequest nextRequest = response.getRequestForPagedResults(GraphResponse.PagingDirection.NEXT);
-        assertNotNull(nextRequest);
-
-        nextRequest.setCallback(request.getCallback());
-        response = nextRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getJSONObject());
-
-        returnedPlaces.clear();
-
-        GraphRequest previousRequest = response.getRequestForPagedResults(GraphResponse.PagingDirection.PREVIOUS);
-        assertNotNull(previousRequest);
-
-        previousRequest.setCallback(request.getCallback());
-        response = previousRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getJSONObject());
-        assertNotSame(0, returnedPlaces.size());
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/TestBlocker.java b/facebook/src/androidTest/java/com/facebook/TestBlocker.java
deleted file mode 100644
index 5e61e05e4..000000000
--- a/facebook/src/androidTest/java/com/facebook/TestBlocker.java
+++ /dev/null
@@ -1,119 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-import android.os.HandlerThread;
-
-public class TestBlocker extends HandlerThread {
-    private Exception exception;
-    public int signals;
-    private volatile Handler handler;
-
-    private TestBlocker() {
-        super("TestBlocker");
-    }
-
-    public synchronized static TestBlocker createTestBlocker() {
-        TestBlocker blocker = new TestBlocker();
-        blocker.start();
-
-        // Wait until we have a Looper and Handler.
-        synchronized (blocker) {
-            while (blocker.handler == null) {
-                try {
-                    blocker.wait();
-                } catch (InterruptedException e) {
-                }
-            }
-        }
-
-        return blocker;
-    }
-
-    @Override
-    public void run() {
-        try {
-            super.run();
-        } catch (Exception e) {
-            setException(e);
-        }
-        synchronized (this) {
-            notifyAll();
-        }
-    }
-
-    public Handler getHandler() {
-        return handler;
-    }
-
-    public void assertSuccess() throws Exception {
-        Exception e = getException();
-        if (e != null) {
-            throw e;
-        }
-    }
-
-    public synchronized void signal() {
-        ++signals;
-        notifyAll();
-    }
-
-    public void waitForSignals(int numSignals) throws Exception {
-        // Make sure we aren't sitting on an unhandled exception before we even start, because that means our
-        // thread isn't around anymore.
-        assertSuccess();
-
-        setException(null);
-
-        synchronized (this) {
-            while (getException() == null && signals < numSignals) {
-                try {
-                    wait();
-                } catch (InterruptedException e) {
-                }
-            }
-            signals = 0;
-        }
-    }
-
-    public void waitForSignalsAndAssertSuccess(int numSignals) throws Exception {
-        waitForSignals(numSignals);
-        assertSuccess();
-    }
-
-    public synchronized Exception getException() {
-        return exception;
-    }
-
-    public synchronized void setException(Exception e) {
-        exception = e;
-        notifyAll();
-    }
-
-    @Override
-    protected void onLooperPrepared() {
-        synchronized (this) {
-            handler = new Handler(getLooper());
-            notifyAll();
-        }
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/TestUserManagerTests.java b/facebook/src/androidTest/java/com/facebook/TestUserManagerTests.java
deleted file mode 100644
index de86d03ad..000000000
--- a/facebook/src/androidTest/java/com/facebook/TestUserManagerTests.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-
-import org.json.JSONArray;
-
-// Because TestUserManager is the component under test here, be careful in calling methods on
-// FacebookTestCase that assume TestUserManager works correctly.
-public class TestUserManagerTests extends FacebookTestCase {
-
-    private TestUserManager createTestUserManager() {
-        return new TestUserManager(getApplicationSecret(), getApplicationId());
-    }
-
-    @LargeTest
-    public void testCanGetAccessTokenForPrivateUser() {
-        TestUserManager testUserManager = createTestUserManager();
-        AccessToken accessToken = testUserManager.getAccessTokenForPrivateUser(null);
-        assertNotNull(accessToken);
-    }
-
-    @LargeTest
-    public void testCanGetAccessTokenForSharedUser() {
-        TestUserManager testUserManager = createTestUserManager();
-        AccessToken accessToken = testUserManager.getAccessTokenForSharedUser(null);
-        assertNotNull(accessToken);
-    }
-
-    @LargeTest
-    public void testSharedUserDoesntCreateUnnecessaryUsers() throws Throwable {
-
-        TestUserManager testUserManager = createTestUserManager();
-        AccessToken accessToken = testUserManager.getAccessTokenForSharedUser(null);
-        assertNotNull(accessToken);
-
-        // Note that this test is somewhat brittle in that the count of test users could change for
-        // external reasons while the test is running. For that reason it may not be appropriate for
-        // an automated test suite, and could be run only when testing changes to TestSession.
-        int startingUserCount = countTestUsers();
-
-        accessToken = testUserManager.getAccessTokenForSharedUser(null);
-        assertNotNull(accessToken);
-
-        int endingUserCount = countTestUsers();
-
-        assertEquals(startingUserCount, endingUserCount);
-    }
-
-    private int countTestUsers() {
-        TestUserManager testUserManager = createTestUserManager();
-
-        String appAccessToken = testUserManager.getAppAccessToken();
-        assertNotNull(appAccessToken);
-
-        Bundle parameters = new Bundle();
-
-        parameters.putString("access_token", appAccessToken);
-        parameters.putString("fields", "id");
-
-        GraphRequest requestTestUsers =
-                new GraphRequest(null, "app/accounts/test-users", parameters, null);
-
-        GraphResponse response = requestTestUsers.executeAndWait();
-
-        JSONArray data = response.getJSONObject().optJSONArray("data");
-        return data.length();
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/TestUtils.java b/facebook/src/androidTest/java/com/facebook/TestUtils.java
deleted file mode 100644
index c0d89c49b..000000000
--- a/facebook/src/androidTest/java/com/facebook/TestUtils.java
+++ /dev/null
@@ -1,244 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.content.res.AssetManager;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import com.facebook.internal.FileLruCache;
-import com.facebook.internal.Utility;
-import junit.framework.Assert;
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.io.*;
-import java.util.*;
-
-public class TestUtils {
-    private static long CACHE_CLEAR_TIMEOUT = 3000;
-
-    public static <T extends Serializable> T serializeAndUnserialize(final T t) {
-        try {
-            ByteArrayOutputStream os = new ByteArrayOutputStream();
-            new ObjectOutputStream(os).writeObject(t);
-            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());
-
-            @SuppressWarnings("unchecked")
-            T ret = (T) (new ObjectInputStream(is)).readObject();
-
-            return ret;
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } catch (ClassNotFoundException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public static <E extends Parcelable> E parcelAndUnparcel(final E object) {
-        final Parcel writeParcel = Parcel.obtain();
-        final Parcel readParcel = Parcel.obtain();
-        try {
-            writeParcel.writeParcelable(object, 0);
-            final byte[] bytes = writeParcel.marshall();
-            readParcel.unmarshall(bytes, 0, bytes.length);
-            readParcel.setDataPosition(0);
-            return readParcel.readParcelable(object.getClass().getClassLoader());
-        } finally {
-            writeParcel.recycle();
-            readParcel.recycle();
-        }
-    }
-
-    public static Date nowPlusSeconds(final long offset) {
-        return new Date(new Date().getTime() + (offset * 1000L));
-    }
-
-    public static void assertSamePermissions(final Collection<String> expected, final AccessToken actual) {
-        if (expected == null) {
-            Assert.assertEquals(null, actual.getPermissions());
-        } else {
-            for (String p : expected) {
-                Assert.assertTrue(actual.getPermissions().contains(p));
-            }
-            for (String p : actual.getPermissions()) {
-                Assert.assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    public static void assertSamePermissions(final Collection<String> expected, final Collection<String> actual) {
-        if (expected == null) {
-            Assert.assertEquals(null, actual);
-        } else {
-            for (String p : expected) {
-                Assert.assertTrue(actual.contains(p));
-            }
-            for (String p : actual) {
-                Assert.assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    public static void assertAtLeastExpectedPermissions(final Collection<String> expected, final Collection<String> actual) {
-        if (expected != null) {
-            for (String p : expected) {
-                Assert.assertTrue(actual.contains(p));
-            }
-        }
-    }
-
-    public static void assertEqualContents(final Bundle a, final Bundle b) {
-        for (String key : a.keySet()) {
-            if (!b.containsKey(key)) {
-                Assert.fail("bundle does not include key " + key);
-            }
-            Assert.assertEquals(a.get(key), b.get(key));
-        }
-        for (String key : b.keySet()) {
-            if (!a.containsKey(key)) {
-                Assert.fail("bundle does not include key " + key);
-            }
-        }
-    }
-
-    @TargetApi(16)
-    public static void assertEquals(final JSONObject expected, final JSONObject actual) {
-        // JSONObject.equals does not do an order-independent comparison, so let's roll our own  :(
-        if (areEqual(expected, actual)) {
-            return;
-        }
-        Assert.failNotEquals("", expected, actual);
-    }
-
-    @TargetApi(16)
-    public static void assertEquals(final JSONArray expected, final JSONArray actual) {
-        // JSONObject.equals does not do an order-independent comparison, so let's roll our own  :(
-        if (areEqual(expected, actual)) {
-            return;
-        }
-        Assert.failNotEquals("", expected, actual);
-    }
-
-    private static boolean areEqual(final JSONObject expected, final JSONObject actual) {
-        // JSONObject.equals does not do an order-independent comparison, so let's roll our own  :(
-        if (expected == actual) {
-            return true;
-        }
-        if ((expected == null) || (actual == null)) {
-            return false;
-        }
-
-        final Iterator<String> expectedKeysIterator = expected.keys();
-        final HashSet<String> expectedKeys = new HashSet<String>();
-        while (expectedKeysIterator.hasNext()) {
-            expectedKeys.add(expectedKeysIterator.next());
-        }
-
-        final Iterator<String> actualKeysIterator = actual.keys();
-        while (actualKeysIterator.hasNext()) {
-            final String key = actualKeysIterator.next();
-            if (!areEqual(expected.opt(key), actual.opt(key))) {
-                return false;
-            }
-            expectedKeys.remove(key);
-        }
-        return expectedKeys.size() == 0;
-    }
-
-    private static boolean areEqual(final JSONArray expected, final JSONArray actual) {
-        // JSONObject.equals does not do an order-independent comparison, so we need to check values that are JSONObject
-        // manually
-        if (expected == actual) {
-            return true;
-        }
-        if ((expected == null) || (actual == null)) {
-            return false;
-        }
-        if (expected.length() != actual.length()) {
-            return false;
-        }
-
-        final int length = expected.length();
-        for (int i = 0; i < length; ++i) {
-            if (!areEqual(expected.opt(i), actual.opt(i))) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private static boolean areEqual(final Object expected, final Object actual) {
-        if (expected == actual) {
-            return true;
-        }
-        if ((expected == null) || (actual == null)) {
-            return false;
-        }
-        if ((expected instanceof JSONObject) && (actual instanceof JSONObject)) {
-            return areEqual((JSONObject)expected, (JSONObject)actual);
-        }
-        if ((expected instanceof JSONArray) && (actual instanceof JSONArray)) {
-            return areEqual((JSONArray)expected, (JSONArray)actual);
-        }
-        return expected.equals(actual);
-    }
-
-    public static void clearFileLruCache(final FileLruCache cache) throws InterruptedException {
-        // since the cache clearing happens in a separate thread, we need to wait until
-        // the clear is complete before we can check for the existence of the old files
-        synchronized (cache) {
-            cache.clearCache();
-            FacebookSdk.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    synchronized (cache) {
-                        cache.notifyAll();
-                    }
-                }
-            });
-            cache.wait(CACHE_CLEAR_TIMEOUT);
-        }
-        // sleep a little more just to make sure all the files are deleted.
-        Thread.sleep(CACHE_CLEAR_TIMEOUT);
-    }
-
-    public static String getAssetFileStringContents(final Context context, final String assetPath) throws IOException {
-        InputStream inputStream = null;
-        BufferedReader reader = null;
-        try {
-            final AssetManager assets = context.getResources().getAssets();
-            inputStream = assets.open(assetPath);
-            reader = new BufferedReader(new InputStreamReader(inputStream));
-            final StringBuilder sb = new StringBuilder();
-            String line;
-            while ((line = reader.readLine()) != null) {
-                sb.append(line).append("\n");
-            }
-            return sb.toString();
-        } finally {
-            Utility.closeQuietly(inputStream);
-            Utility.closeQuietly(reader);
-        }
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/WaitForBroadcastReceiver.java b/facebook/src/androidTest/java/com/facebook/WaitForBroadcastReceiver.java
deleted file mode 100644
index b2f0da775..000000000
--- a/facebook/src/androidTest/java/com/facebook/WaitForBroadcastReceiver.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.os.ConditionVariable;
-import android.os.Looper;
-
-import junit.framework.Assert;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-public final class WaitForBroadcastReceiver extends BroadcastReceiver {
-    static final int DEFAULT_TIMEOUT_MILLISECONDS = 10 * 1000;
-    static int idGenerator = 0;
-    final int id = idGenerator++;
-
-    ConditionVariable condition = new ConditionVariable(true);
-    int expectCount;
-    int actualCount;
-    List<Intent> receivedIntents = new ArrayList<Intent>();
-    List<String> expectedActions = new ArrayList<String>();
-    List<Intent> unexpectedIntents = new ArrayList<Intent>();
-
-    public WaitForBroadcastReceiver() {
-    }
-
-    public WaitForBroadcastReceiver(String... expectedActions) {
-        this.expectedActions = Arrays.asList(expectedActions);
-    }
-
-    public void incrementExpectCount() {
-        incrementExpectCount(1);
-    }
-
-    public void incrementExpectCount(int n) {
-        expectCount += n;
-        if (actualCount < expectCount) {
-            condition.close();
-        }
-    }
-
-    public void waitForExpectedCalls() {
-        this.waitForExpectedCalls(DEFAULT_TIMEOUT_MILLISECONDS);
-    }
-
-    public void waitForExpectedCalls(long timeoutMillis) {
-        if (!condition.block(timeoutMillis)) {
-            Assert.assertTrue(false);
-        }
-    }
-
-    public List<Intent> getReceivedIntents() {
-        return receivedIntents;
-    }
-
-    public List<Intent> getUnexpectedIntents() {
-        return unexpectedIntents;
-    }
-
-    public static void incrementExpectCounts(WaitForBroadcastReceiver... receivers) {
-        for (WaitForBroadcastReceiver receiver : receivers) {
-            receiver.incrementExpectCount();
-        }
-    }
-
-    public static void waitForExpectedCalls(WaitForBroadcastReceiver... receivers) {
-        for (WaitForBroadcastReceiver receiver : receivers) {
-            receiver.waitForExpectedCalls();
-        }
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        receivedIntents.add(intent);
-
-        if (!expectedActions.isEmpty()) {
-            String action = intent.getAction();
-            if (!expectedActions.contains(action)) {
-                unexpectedIntents.add(intent);
-                return;
-            }
-        }
-
-        if (++actualCount == expectCount) {
-            condition.open();
-        }
-
-        Assert.assertTrue("expecting " + expectCount + "broadcasts, but received " + actualCount,
-                actualCount <= expectCount);
-        Assert.assertEquals("BroadcastReceiver should receive on main UI thread",
-                Thread.currentThread(), Looper.getMainLooper().getThread());
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java b/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
deleted file mode 100644
index e3bf4d6c7..000000000
--- a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookTestCase;
-import com.facebook.WaitForBroadcastReceiver;
-import com.facebook.appevents.AppEventsLogger;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.util.HashMap;
-import java.util.List;
-
-public class AppEventsLoggerTests extends FacebookTestCase {
-    public void testSimpleCall() throws InterruptedException {
-        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
-
-        AccessToken accessToken1 = getAccessTokenForSharedUser();
-        AccessToken accessToken2 = getAccessTokenForSharedUser(SECOND_TEST_USER_TAG);
-
-        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), accessToken1);
-        AppEventsLogger logger2 = AppEventsLogger.newLogger(getActivity(), accessToken2);
-
-        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
-        waitForBroadcastReceiver.incrementExpectCount();
-
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        try {
-            // Need to get notifications on another thread so we can wait for them.
-            runOnBlockerThread(new Runnable() {
-                @Override
-                public void run() {
-                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-                }
-            }, true);
-
-            logger1.logEvent("an_event");
-            logger2.logEvent("another_event");
-
-            // test illegal event name and event key, should not crash in non-debug environment.
-            logger1.logEvent("$illegal_event_name");
-            Bundle params = new Bundle();
-            params.putString("illegal%key", "good_value");
-            logger1.logEvent("legal_event_name", params);
-            char[] val = {'b', 'a', 'd'};
-            params.putCharArray("legal_key", val);
-            logger1.logEvent("legal_event",params);
-
-            logger1.flush();
-
-            waitForBroadcastReceiver.waitForExpectedCalls();
-
-            closeBlockerAndAssertSuccess();
-        } finally {
-            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
-        }
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java b/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
deleted file mode 100644
index ae67aead5..000000000
--- a/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.net.Uri;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import com.facebook.TestUtils;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URL;
-import java.nio.ByteBuffer;
-import java.util.Arrays;
-
-public final class ImageResponseCacheTest extends AndroidTestCase {
-
-    @LargeTest
-    public void testImageCaching() throws Exception {
-        // In unit test, since we need verify first access the image is not in cache
-        // we need clear the cache first
-        TestUtils.clearFileLruCache(ImageResponseCache.getCache(safeGetContext()));
-        String imgUrl = "http://profile.ak.fbcdn.net/hprofile-ak-frc1/369438_100003049100322_615834658_n.jpg";
-
-        Bitmap bmp1 = readImage(imgUrl, false);
-        Bitmap bmp2 = readImage(imgUrl, true);
-        compareImages(bmp1, bmp2);
-    }
-
-    @LargeTest
-    public void testImageNotCaching() throws IOException {
-
-        String imgUrl = "https://graph.facebook.com/ryanseacrest/picture?type=large";
-
-        Bitmap bmp1 = readImage(imgUrl, false);
-        Bitmap bmp2 = readImage(imgUrl, false);
-        compareImages(bmp1, bmp2);
-    }
-
-    private Bitmap readImage(String uri, boolean expectedFromCache) {
-        Bitmap bmp = null;
-        InputStream istream = null;
-        try
-        {
-            Uri url = Uri.parse(uri);
-            // Check if the cache contains value for this url
-            boolean isInCache =
-                    (ImageResponseCache.getCache(safeGetContext()).get(url.toString()) != null);
-            assertTrue(isInCache == expectedFromCache);
-            // Read the image
-            istream = ImageResponseCache.getCachedImageStream(url, safeGetContext());
-            if (istream == null) {
-                HttpURLConnection connection =
-                        (HttpURLConnection) (new URL(uri)).openConnection();
-                istream = ImageResponseCache.interceptAndCacheImageStream(
-                        safeGetContext(),
-                        connection);
-            }
-
-            assertTrue(istream != null);
-            bmp = BitmapFactory.decodeStream(istream);
-            assertTrue(bmp != null);
-        } catch (Exception e) {
-            assertNull(e);
-        } finally {
-            Utility.closeQuietly(istream);
-        }
-        return bmp;
-    }
-
-    private static void compareImages(Bitmap bmp1, Bitmap bmp2) {
-        assertTrue(bmp1.getHeight() == bmp2.getHeight());
-        assertTrue(bmp1.getWidth() == bmp1.getWidth());
-        ByteBuffer buffer1 = ByteBuffer.allocate(bmp1.getHeight() * bmp1.getRowBytes());
-        bmp1.copyPixelsToBuffer(buffer1);
-
-        ByteBuffer buffer2 = ByteBuffer.allocate(bmp2.getHeight() * bmp2.getRowBytes());
-        bmp2.copyPixelsToBuffer(buffer2);
-
-        assertTrue(Arrays.equals(buffer1.array(), buffer2.array()));
-    }
-
-    private Context safeGetContext() {
-        for (;;) {
-            if ((getContext() != null) && (getContext().getApplicationContext() != null)) {
-                return getContext();
-            }
-            try {
-                Thread.sleep(25);
-            } catch (InterruptedException e) {
-            }
-        }
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java b/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
deleted file mode 100644
index 464531a21..000000000
--- a/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.test.suitebuilder.annotation.LargeTest;
-
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookTestCase;
-
-public class UtilityTest extends FacebookTestCase {
-
-    @LargeTest
-    public void testFetchedAppSettingsErrorClassification() throws Exception {
-        Utility.FetchedAppSettings fetchedAppSettings =
-                Utility.queryAppSettings(getApplicationId(), false);
-        FacebookRequestErrorClassification errorClassification = fetchedAppSettings
-                .getErrorClassification();
-        assertNotNull(errorClassification);
-
-        assertNull(errorClassification.getRecoveryMessage(FacebookRequestError.Category.OTHER));
-        assertNull(errorClassification.getRecoveryMessage(FacebookRequestError.Category.TRANSIENT));
-        assertNotNull(errorClassification.getRecoveryMessage(
-                FacebookRequestError.Category.LOGIN_RECOVERABLE));
-
-        assertNull(errorClassification.getOtherErrors());
-        assertEquals(2, errorClassification.getLoginRecoverableErrors().size());
-        assertNull(errorClassification.getTransientErrors());
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java b/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
deleted file mode 100644
index e780e860c..000000000
--- a/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
+++ /dev/null
@@ -1,200 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.annotation.SuppressLint;
-import android.support.v4.app.Fragment;
-import android.test.suitebuilder.annotation.LargeTest;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookTestCase;
-import com.facebook.TestBlocker;
-
-import java.util.*;
-
-public class LoginClientTests extends FacebookTestCase {
-    private static final Set<String> PERMISSIONS = new HashSet<String>(
-            Arrays.asList("go outside", "come back in"));
-
-    @SuppressLint("ParcelCreator")
-    class MockLoginClient extends LoginClient {
-        Result result;
-        boolean triedNextHandler = false;
-
-        MockLoginClient(Fragment fragment) {
-            super(fragment);
-        }
-
-        Request getRequest() {
-            return pendingRequest;
-        }
-
-        void setRequest(Request request) {
-            pendingRequest = request;
-        }
-
-        @Override
-        void complete(Result result) {
-            this.result = result;
-        }
-
-        @Override
-        void tryNextHandler() {
-            triedNextHandler = true;
-        }
-    }
-
-    LoginClient.Request createRequest() {
-        return new LoginClient.Request(
-                LoginBehavior.NATIVE_WITH_FALLBACK,
-                PERMISSIONS,
-                DefaultAudience.FRIENDS,
-                "1234",
-                null
-        );
-    }
-
-    @SuppressLint("ParcelCreator")
-    class MockValidatingLoginClient extends MockLoginClient {
-        private final HashMap<String, String> mapAccessTokenToFbid = new HashMap<String, String>();
-        private Set<String> permissionsToReport = new HashSet<String>();
-        private TestBlocker blocker;
-
-        public MockValidatingLoginClient(Fragment fragment, TestBlocker blocker) {
-            super(fragment);
-            this.blocker = blocker;
-        }
-
-        public void addAccessTokenToFbidMapping(String accessToken, String fbid) {
-            mapAccessTokenToFbid.put(accessToken, fbid);
-        }
-
-        public void setPermissionsToReport(Set<String> permissionsToReport) {
-            this.permissionsToReport = permissionsToReport;
-        }
-
-        @Override
-        void complete(Result result) {
-            super.complete(result);
-            blocker.signal();
-        }
-    }
-
-    static final String USER_1_FBID = "user1";
-    static final String USER_1_ACCESS_TOKEN = "An access token for user 1";
-    static final String USER_2_FBID = "user2";
-    static final String USER_2_ACCESS_TOKEN = "An access token for user 2";
-    static final String APP_ID = "1234";
-
-    LoginClient.Request createNewPermissionRequest() {
-        return new LoginClient.Request(
-                LoginBehavior.NATIVE_WITH_FALLBACK,
-                PERMISSIONS,
-                DefaultAudience.FRIENDS,
-                "1234",
-                null
-        );
-    }
-
-    @LargeTest
-    public void testReauthorizationWithSameFbidSucceeds() throws Exception {
-        TestBlocker blocker = getTestBlocker();
-
-        MockValidatingLoginClient client = new MockValidatingLoginClient(null, blocker);
-        client.addAccessTokenToFbidMapping(USER_1_ACCESS_TOKEN, USER_1_FBID);
-        client.addAccessTokenToFbidMapping(USER_2_ACCESS_TOKEN, USER_2_FBID);
-        client.setPermissionsToReport(PERMISSIONS);
-
-        LoginClient.Request request = createNewPermissionRequest();
-        client.setRequest(request);
-
-        AccessToken token = new AccessToken(
-                USER_1_ACCESS_TOKEN,
-                APP_ID,
-                USER_1_FBID,
-                PERMISSIONS,
-                null,
-                null,
-                null,
-                null);
-        AccessToken.setCurrentAccessToken(token);
-        LoginClient.Result result = LoginClient.Result.createTokenResult(request, token);
-
-        client.completeAndValidate(result);
-
-        blocker.waitForSignals(1);
-
-        assertNotNull(client.result);
-        assertEquals(LoginClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken resultToken = client.result.token;
-        assertNotNull(resultToken);
-        assertEquals(USER_1_ACCESS_TOKEN, resultToken.getToken());
-
-        // We don't care about ordering.
-        assertEquals(new HashSet<String>(PERMISSIONS), new HashSet<String>(resultToken.getPermissions()));
-    }
-
-    @LargeTest
-    public void testReauthorizationWithDifferentFbidsFails() throws Exception {
-        TestBlocker blocker = getTestBlocker();
-
-        MockValidatingLoginClient client = new MockValidatingLoginClient(null, blocker);
-        client.addAccessTokenToFbidMapping(USER_1_ACCESS_TOKEN, USER_1_FBID);
-        client.addAccessTokenToFbidMapping(USER_2_ACCESS_TOKEN, USER_2_FBID);
-        client.setPermissionsToReport(PERMISSIONS);
-
-        LoginClient.Request request = createNewPermissionRequest();
-        client.setRequest(request);
-
-        AccessToken userOneToken = new AccessToken(
-                USER_1_ACCESS_TOKEN,
-                APP_ID,
-                USER_1_FBID,
-                PERMISSIONS,
-                null,
-                null,
-                null,
-                null);
-        AccessToken.setCurrentAccessToken(userOneToken);
-
-        AccessToken userTwoToken = new AccessToken(
-                USER_2_ACCESS_TOKEN,
-                APP_ID,
-                USER_2_FBID,
-                PERMISSIONS,
-                null,
-                null,
-                null,
-                null);
-        LoginClient.Result result = LoginClient.Result.createTokenResult(request, userTwoToken);
-
-        client.completeAndValidate(result);
-
-        blocker.waitForSignals(1);
-
-        assertNotNull(client.result);
-        assertEquals(LoginClient.Result.Code.ERROR, client.result.code);
-
-        assertNull(client.result.token);
-        assertNotNull(client.result.errorMessage);
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/widget/FacebookDialogTests.java b/facebook/src/androidTest/java/com/facebook/widget/FacebookDialogTests.java
deleted file mode 100644
index 7b972739a..000000000
--- a/facebook/src/androidTest/java/com/facebook/widget/FacebookDialogTests.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.widget;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.widget.ShareDialog;
-
-public class FacebookDialogTests extends FacebookTestCase {
-
-    private String getAttachmentNameFromContentUri(String contentUri) {
-        int lastSlash = contentUri.lastIndexOf("/");
-        return contentUri.substring(lastSlash + 1);
-    }
-
-    //
-    // TODO(v4) - Fix and uncomment these
-    //
-//    public void testCantSetAttachmentsWithNullBitmaps() throws JSONException {
-//        try {
-//            ArrayList<SharePhoto> photos = new ArrayList<>();
-//            photos.add(new SharePhotoBuilder().setBitmap(null).build());
-//
-//            ShareOpenGraphContent ogContent = new ShareOpenGraphContentBuilder()
-//                    .setAction(
-//                            new ShareOpenGraphActionBuilder()
-//                                    .setActionType("foo")
-//                                    .putString("foo", "bar")
-//                                    .putPhotoArrayList("image", photos)
-//                                    .build())
-//                    .setPreviewPropertyName("foo")
-//                    .build();
-//
-//            ShareDialog.share(getActivity(), ogContent);
-//
-//            fail("expected exception");
-//        } catch (NullPointerException exception) {
-//        }
-//    }
-//
-//    public void testCantSetObjectAttachmentsWithNullBitmaps() throws JSONException {
-//        try {
-//            ArrayList<SharePhoto> photos = new ArrayList<>();
-//            photos.add(new SharePhotoBuilder().setBitmap(null).build());
-//
-//            ShareOpenGraphObject ogObject = new ShareOpenGraphObjectBuilder()
-//                    .putString("type", "bar")
-//                    .putPhotoArrayList("image", photos)
-//                    .build();
-//
-//            ShareOpenGraphContent ogContent = new ShareOpenGraphContentBuilder()
-//                    .setAction(
-//                            new ShareOpenGraphActionBuilder()
-//                                    .setActionType("foo")
-//                                    .putObject("foo", ogObject)
-//                                    .build())
-//                    .setPreviewPropertyName("foo")
-//                    .build();
-//
-//            ShareDialog.share(getActivity(), ogContent);
-//
-//            fail("expected exception");
-//        } catch (NullPointerException exception) {
-//        }
-//    }
-}
diff --git a/facebook/src/androidTest/res/values/strings.xml b/facebook/src/androidTest/res/values/strings.xml
deleted file mode 100644
index 7d06d60df..000000000
--- a/facebook/src/androidTest/res/values/strings.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="app_id">1234567890</string>
-    <string name="client_token">abcdef123456</string>
-</resources>
diff --git a/facebook/src/main/AndroidManifest.xml b/facebook/src/main/AndroidManifest.xml
deleted file mode 100644
index 2ed4f2ae7..000000000
--- a/facebook/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook">
-    <application>
-        <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
-        </activity>
-        <activity android:name="com.facebook.CustomTabMainActivity" />
-    </application>
-</manifest>
diff --git a/facebook/src/main/java/com/facebook/AccessToken.java b/facebook/src/main/java/com/facebook/AccessToken.java
deleted file mode 100644
index 523b34c6f..000000000
--- a/facebook/src/main/java/com/facebook/AccessToken.java
+++ /dev/null
@@ -1,614 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.annotation.SuppressLint;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-
-/**
- * This class represents an immutable access token for using Facebook APIs. It also includes
- * associated metadata such as expiration date and permissions.
- * <p/>
- * For more information on access tokens, see
- * <a href="https://developers.facebook.com/docs/facebook-login/access-tokens/">Access Tokens</a>.
- */
-public final class AccessToken implements Parcelable {
-    public static final String ACCESS_TOKEN_KEY = "access_token";
-    public static final String EXPIRES_IN_KEY = "expires_in";
-    public static final String USER_ID_KEY = "user_id";
-
-    private static final Date MAX_DATE = new Date(Long.MAX_VALUE);
-    private static final Date DEFAULT_EXPIRATION_TIME = MAX_DATE;
-    private static final Date DEFAULT_LAST_REFRESH_TIME = new Date();
-    private static final AccessTokenSource DEFAULT_ACCESS_TOKEN_SOURCE =
-            AccessTokenSource.FACEBOOK_APPLICATION_WEB;
-
-    // Constants related to JSON serialization.
-    private static final int CURRENT_JSON_FORMAT = 1;
-    private static final String VERSION_KEY = "version";
-    private static final String EXPIRES_AT_KEY = "expires_at";
-    private static final String PERMISSIONS_KEY = "permissions";
-    private static final String DECLINED_PERMISSIONS_KEY = "declined_permissions";
-    private static final String TOKEN_KEY = "token";
-    private static final String SOURCE_KEY = "source";
-    private static final String LAST_REFRESH_KEY = "last_refresh";
-    private static final String APPLICATION_ID_KEY = "application_id";
-
-    private final Date expires;
-    private final Set<String> permissions;
-    private final Set<String> declinedPermissions;
-    private final String token;
-    private final AccessTokenSource source;
-    private final Date lastRefresh;
-    private final String applicationId;
-    private final String userId;
-
-    /**
-     * Creates a new AccessToken using the supplied information from a previously-obtained access
-     * token (for instance, from an already-cached access token obtained prior to integration with
-     * the Facebook SDK). Note that the caller is asserting that all parameters provided are correct
-     * with respect to the access token string; no validation is done to verify they are correct.
-     *
-     * @param accessToken         the access token string obtained from Facebook
-     * @param applicationId       the ID of the Facebook Application associated with this access
-     *                            token
-     * @param userId              the id of the user
-     * @param permissions         the permissions that were requested when the token was obtained
-     *                            (or when it was last reauthorized); may be null if permission set
-     *                            is unknown
-     * @param declinedPermissions the permissions that were declined when the token was obtained;
-     *                            may be null if permission set is unknown
-     * @param accessTokenSource   an enum indicating how the token was originally obtained (in most
-     *                            cases, this will be either AccessTokenSource.FACEBOOK_APPLICATION
-     *                            or AccessTokenSource.WEB_VIEW); if null, FACEBOOK_APPLICATION is
-     *                            assumed.
-     * @param expirationTime      the expiration date associated with the token; if null, an
-     *                            infinite expiration time is assumed (but will become correct when
-     *                            the token is refreshed)
-     * @param lastRefreshTime     the last time the token was refreshed (or when it was first
-     *                            obtained); if null, the current time is used.
-     */
-    public AccessToken(
-            final String accessToken,
-            final String applicationId,
-            final String userId,
-            @Nullable
-            final Collection<String> permissions,
-            @Nullable
-            final Collection<String> declinedPermissions,
-            @Nullable
-            final AccessTokenSource accessTokenSource,
-            @Nullable
-            final Date expirationTime,
-            @Nullable
-            final Date lastRefreshTime
-    ) {
-        Validate.notNullOrEmpty(accessToken, "accessToken");
-        Validate.notNullOrEmpty(applicationId, "applicationId");
-        Validate.notNullOrEmpty(userId, "userId");
-
-        this.expires = expirationTime != null ? expirationTime : DEFAULT_EXPIRATION_TIME;
-        this.permissions = Collections.unmodifiableSet(
-                permissions != null ? new HashSet<String>(permissions) : new HashSet<String>());
-        this.declinedPermissions = Collections.unmodifiableSet(
-                declinedPermissions != null
-                        ? new HashSet<String>(declinedPermissions)
-                        : new HashSet<String>());
-        this.token = accessToken;
-        this.source = accessTokenSource != null ? accessTokenSource : DEFAULT_ACCESS_TOKEN_SOURCE;
-        this.lastRefresh = lastRefreshTime != null ? lastRefreshTime : DEFAULT_LAST_REFRESH_TIME;
-        this.applicationId = applicationId;
-        this.userId = userId;
-    }
-
-    /**
-     * Getter for the access token that is current for the application.
-     *
-     * @return The access token that is current for the application.
-     */
-    public static AccessToken getCurrentAccessToken() {
-        return AccessTokenManager.getInstance().getCurrentAccessToken();
-    }
-
-    /**
-     * Setter for the access token that is current for the application.
-     *
-     * @param accessToken The access token to set.
-     */
-    public static void setCurrentAccessToken(AccessToken accessToken) {
-        AccessTokenManager.getInstance().setCurrentAccessToken(accessToken);
-    }
-
-    /**
-     * Updates the current access token with up to date permissions,
-     * and extends the expiration date, if extension is possible.
-     */
-    public static void refreshCurrentAccessTokenAsync() {
-        AccessTokenManager.getInstance().refreshCurrentAccessToken(null);
-    }
-
-    /**
-     * Updates the current access token with up to date permissions,
-     * and extends the expiration date, if extension is possible.
-     * @param callback
-     */
-    public static void refreshCurrentAccessTokenAsync(AccessTokenRefreshCallback callback) {
-        AccessTokenManager.getInstance().refreshCurrentAccessToken(callback);
-    }
-
-    public interface AccessTokenRefreshCallback {
-        void OnTokenRefreshed(AccessToken accessToken);
-        void OnTokenRefreshFailed(FacebookException exception);
-    }
-
-    /**
-     * Gets the string representing the access token.
-     *
-     * @return the string representing the access token
-     */
-    public String getToken() {
-        return this.token;
-    }
-
-    /**
-     * Gets the date at which the access token expires.
-     *
-     * @return the expiration date of the token
-     */
-    public Date getExpires() {
-        return this.expires;
-    }
-
-    /**
-     * Gets the list of permissions associated with this access token. Note that the most up-to-date
-     * list of permissions is maintained by Facebook, so this list may be outdated if
-     * permissions have been added or removed since the time the AccessToken object was created. For
-     * more information on permissions, see
-     * https://developers.facebook.com/docs/reference/login/#permissions.
-     *
-     * @return a read-only list of strings representing the permissions granted via this access
-     * token
-     */
-    public Set<String> getPermissions() {
-        return this.permissions;
-    }
-
-    /**
-     * Gets the list of permissions declined by the user with this access token.  It represents the
-     * entire set of permissions that have been requested and declined.  Note that the most
-     * up-to-date list of permissions is maintained by Facebook, so this list may be
-     * outdated if permissions have been granted or declined since the last time an AccessToken
-     * object was created.
-     *
-     * @return a read-only list of strings representing the permissions declined by the user
-     */
-    public Set<String> getDeclinedPermissions() {
-        return this.declinedPermissions;
-    }
-
-    /**
-     * Gets the {@link AccessTokenSource} indicating how this access token was obtained.
-     *
-     * @return the enum indicating how the access token was obtained
-     */
-    public AccessTokenSource getSource() {
-        return source;
-    }
-
-    /**
-     * Gets the date at which the token was last refreshed. Since tokens expire, the Facebook SDK
-     * will attempt to renew them periodically.
-     *
-     * @return the date at which this token was last refreshed
-     */
-    public Date getLastRefresh() {
-        return this.lastRefresh;
-    }
-
-    /**
-     * Gets the ID of the Facebook Application associated with this access token.
-     *
-     * @return the application ID
-     */
-    public String getApplicationId() {
-        return applicationId;
-    }
-
-    /**
-     * Returns the user id for this access token.
-     *
-     * @return The user id for this access token.
-     */
-    public String getUserId() {
-        return userId;
-    }
-
-    /**
-     * A callback for creating an access token from a NativeLinkingIntent
-     */
-    public interface AccessTokenCreationCallback {
-        /**
-         * The method called on a successful creation of an AccessToken.
-         *
-         * @param token the access token created from the native link intent.
-         */
-        public void onSuccess(AccessToken token);
-
-        public void onError(FacebookException error);
-    }
-
-    /**
-     * Creates a new AccessToken using the information contained in an Intent populated by the
-     * Facebook application in order to launch a native link. For more information on native
-     * linking, please see https://developers.facebook.com/docs/mobile/android/deep_linking/.
-     *
-     * @param intent        the Intent that was used to start an Activity; must not be null
-     * @param applicationId the ID of the Facebook Application associated with this access token
-     */
-    public static void createFromNativeLinkingIntent(
-            Intent intent,
-            final String applicationId,
-            final AccessTokenCreationCallback accessTokenCallback) {
-        Validate.notNull(intent, "intent");
-        if (intent.getExtras() == null) {
-            accessTokenCallback.onError(
-                    new FacebookException("No extras found on intent"));
-            return;
-        }
-        final Bundle extras = new Bundle(intent.getExtras());
-
-        String accessToken = extras.getString(ACCESS_TOKEN_KEY);
-        if (accessToken == null || accessToken.isEmpty()) {
-            accessTokenCallback.onError(new FacebookException("No access token found on intent"));
-            return;
-        }
-
-        String userId = extras.getString(USER_ID_KEY);
-        // Old versions of facebook for android don't provide the UserId. Obtain the id if missing
-        if (userId == null || userId.isEmpty()) {
-            Utility.getGraphMeRequestWithCacheAsync(accessToken,
-                new Utility.GraphMeRequestWithCacheCallback() {
-                    @Override
-                    public void onSuccess(JSONObject userInfo) {
-                        try {
-                            String userId = userInfo.getString("id");
-                            extras.putString(USER_ID_KEY, userId);
-                            accessTokenCallback.onSuccess(createFromBundle(
-                                    null,
-                                    extras,
-                                    AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                                    new Date(),
-                                    applicationId));
-                        } catch (JSONException ex) {
-                            accessTokenCallback.onError(
-                                    new FacebookException(
-                                        "Unable to generate access token due to missing user id"));
-                        }
-
-                    }
-
-                    @Override
-                    public void onFailure(FacebookException error) {
-                        accessTokenCallback.onError(error);
-                    }
-                });
-        } else {
-            accessTokenCallback.onSuccess(createFromBundle(
-                    null,
-                    extras,
-                    AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                    new Date(),
-                    applicationId));
-        }
-    }
-
-    @Override
-    public String toString() {
-        StringBuilder builder = new StringBuilder();
-
-        builder.append("{AccessToken");
-        builder.append(" token:").append(tokenToString());
-        appendPermissions(builder);
-        builder.append("}");
-
-        return builder.toString();
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        if (this == other) {
-            return true;
-        }
-
-        if (!(other instanceof AccessToken)) {
-            return false;
-        }
-
-        AccessToken o = (AccessToken) other;
-
-        return expires.equals(o.expires) &&
-                permissions.equals(o.permissions) &&
-                declinedPermissions.equals(o.declinedPermissions) &&
-                token.equals(o.token) &&
-                source == o.source &&
-                lastRefresh.equals(o.lastRefresh) &&
-                (applicationId == null ?
-                        o.applicationId == null :
-                        applicationId.equals(o.applicationId)) &&
-                userId.equals(o.userId);
-    }
-
-    @Override
-    public int hashCode() {
-        int result = 17;
-
-        result = result * 31 + expires.hashCode();
-        result = result * 31 + permissions.hashCode();
-        result = result * 31 + declinedPermissions.hashCode();
-        result = result * 31 + token.hashCode();
-        result = result * 31 + source.hashCode();
-        result = result * 31 + lastRefresh.hashCode();
-        result = result * 31 + (applicationId == null ? 0 : applicationId.hashCode());
-        result = result * 31 + userId.hashCode();
-
-        return result;
-    }
-
-    @SuppressLint("FieldGetter")
-    static AccessToken createFromRefresh(AccessToken current, Bundle bundle) {
-        // Only tokens obtained via SSO support refresh. Token refresh returns the expiration date
-        // in seconds from the epoch rather than seconds from now.
-        if (current.source != AccessTokenSource.FACEBOOK_APPLICATION_WEB &&
-                current.source != AccessTokenSource.FACEBOOK_APPLICATION_NATIVE &&
-                current.source != AccessTokenSource.FACEBOOK_APPLICATION_SERVICE) {
-            throw new FacebookException("Invalid token source: " + current.source);
-        }
-
-        Date expires = Utility.getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date(0));
-        String token = bundle.getString(ACCESS_TOKEN_KEY);
-
-        if (Utility.isNullOrEmpty(token)) {
-            return null;
-        }
-        return new AccessToken(
-                token,
-                current.applicationId,
-                current.getUserId(),
-                current.getPermissions(),
-                current.getDeclinedPermissions(),
-                current.source,
-                expires,
-                new Date());
-    }
-
-    static AccessToken createFromLegacyCache(Bundle bundle) {
-        List<String> permissions = getPermissionsFromBundle(
-                bundle,
-                LegacyTokenHelper.PERMISSIONS_KEY);
-        List<String> declinedPermissions = getPermissionsFromBundle(
-                bundle,
-                LegacyTokenHelper.DECLINED_PERMISSIONS_KEY);
-
-        String applicationId = LegacyTokenHelper.getApplicationId(bundle);
-        if (Utility.isNullOrEmpty(applicationId)) {
-            applicationId = FacebookSdk.getApplicationId();
-        }
-
-        String tokenString = LegacyTokenHelper.getToken(bundle);
-        String userId;
-        JSONObject userInfo = Utility.awaitGetGraphMeRequestWithCache(tokenString);
-        try {
-            userId = userInfo.getString("id");
-        } catch (JSONException ex) {
-            // This code is only used by AccessTokenCache. If we for any reason fail to get the
-            // user id just return null.
-            return null;
-        }
-
-        return new AccessToken(
-                tokenString,
-                applicationId,
-                userId,
-                permissions,
-                declinedPermissions,
-                LegacyTokenHelper.getSource(bundle),
-                LegacyTokenHelper.getDate(
-                        bundle,
-                        LegacyTokenHelper.EXPIRATION_DATE_KEY),
-                LegacyTokenHelper.getDate(
-                        bundle,
-                        LegacyTokenHelper.LAST_REFRESH_DATE_KEY)
-        );
-    }
-
-    static List<String> getPermissionsFromBundle(Bundle bundle, String key) {
-        // Copy the list so we can guarantee immutable
-        List<String> originalPermissions = bundle.getStringArrayList(key);
-        List<String> permissions;
-        if (originalPermissions == null) {
-            permissions = Collections.emptyList();
-        } else {
-            permissions = Collections.unmodifiableList(new ArrayList<String>(originalPermissions));
-        }
-        return permissions;
-    }
-
-    /**
-     * Shows if the token is expired.
-     *
-     * @return true if the token is expired.
-     */
-    public boolean isExpired() {
-        return new Date().after(this.expires);
-    }
-
-    JSONObject toJSONObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put(VERSION_KEY, CURRENT_JSON_FORMAT);
-        jsonObject.put(TOKEN_KEY, token);
-        jsonObject.put(EXPIRES_AT_KEY, expires.getTime());
-        JSONArray permissionsArray = new JSONArray(permissions);
-        jsonObject.put(PERMISSIONS_KEY, permissionsArray);
-        JSONArray declinedPermissionsArray = new JSONArray(declinedPermissions);
-        jsonObject.put(DECLINED_PERMISSIONS_KEY, declinedPermissionsArray);
-        jsonObject.put(LAST_REFRESH_KEY, lastRefresh.getTime());
-        jsonObject.put(SOURCE_KEY, source.name());
-        jsonObject.put(APPLICATION_ID_KEY, applicationId);
-        jsonObject.put(USER_ID_KEY, userId);
-
-        return jsonObject;
-    }
-
-    static AccessToken createFromJSONObject(JSONObject jsonObject) throws JSONException {
-        int version = jsonObject.getInt(VERSION_KEY);
-        if (version > CURRENT_JSON_FORMAT) {
-            throw new FacebookException("Unknown AccessToken serialization format.");
-        }
-
-        String token = jsonObject.getString(TOKEN_KEY);
-        Date expiresAt = new Date(jsonObject.getLong(EXPIRES_AT_KEY));
-        JSONArray permissionsArray = jsonObject.getJSONArray(PERMISSIONS_KEY);
-        JSONArray declinedPermissionsArray = jsonObject.getJSONArray(DECLINED_PERMISSIONS_KEY);
-        Date lastRefresh = new Date(jsonObject.getLong(LAST_REFRESH_KEY));
-        AccessTokenSource source = AccessTokenSource.valueOf(jsonObject.getString(SOURCE_KEY));
-        String applicationId = jsonObject.getString(APPLICATION_ID_KEY);
-        String userId = jsonObject.getString(USER_ID_KEY);
-
-        return new AccessToken(
-                token,
-                applicationId,
-                userId,
-                Utility.jsonArrayToStringList(permissionsArray),
-                Utility.jsonArrayToStringList(declinedPermissionsArray),
-                source,
-                expiresAt,
-                lastRefresh);
-    }
-
-    private static AccessToken createFromBundle(
-            List<String> requestedPermissions,
-            Bundle bundle,
-            AccessTokenSource source,
-            Date expirationBase,
-            String applicationId) {
-        String token = bundle.getString(ACCESS_TOKEN_KEY);
-        Date expires = Utility.getBundleLongAsDate(bundle, EXPIRES_IN_KEY, expirationBase);
-        String userId = bundle.getString(USER_ID_KEY);
-
-        if (Utility.isNullOrEmpty(token) || (expires == null)) {
-            return null;
-        }
-
-        return new AccessToken(
-                token,
-                applicationId,
-                userId,
-                requestedPermissions,
-                null,
-                source,
-                expires,
-                new Date());
-    }
-
-    private String tokenToString() {
-        if (this.token == null) {
-            return "null";
-        } else if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.INCLUDE_ACCESS_TOKENS)) {
-            return this.token;
-        } else {
-            return "ACCESS_TOKEN_REMOVED";
-        }
-    }
-
-    private void appendPermissions(StringBuilder builder) {
-        builder.append(" permissions:");
-        if (this.permissions == null) {
-            builder.append("null");
-        } else {
-            builder.append("[");
-            builder.append(TextUtils.join(", ", permissions));
-            builder.append("]");
-        }
-    }
-
-    AccessToken(Parcel parcel) {
-        this.expires = new Date(parcel.readLong());
-        ArrayList<String> permissionsList = new ArrayList<>();
-        parcel.readStringList(permissionsList);
-        this.permissions = Collections.unmodifiableSet(new HashSet<String>(permissionsList));
-        permissionsList.clear();
-        parcel.readStringList(permissionsList);
-        this.declinedPermissions = Collections.unmodifiableSet(
-                new HashSet<String>(permissionsList));
-        this.token = parcel.readString();
-        this.source = AccessTokenSource.valueOf(parcel.readString());
-        this.lastRefresh = new Date(parcel.readLong());
-        this.applicationId = parcel.readString();
-        this.userId = parcel.readString();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeLong(expires.getTime());
-        dest.writeStringList(new ArrayList<String>(permissions));
-        dest.writeStringList(new ArrayList<String>(declinedPermissions));
-        dest.writeString(token);
-        dest.writeString(source.name());
-        dest.writeLong(lastRefresh.getTime());
-        dest.writeString(applicationId);
-        dest.writeString(userId);
-    }
-
-    public static final Parcelable.Creator<AccessToken> CREATOR = new Parcelable.Creator() {
-
-        @Override
-        public AccessToken createFromParcel(Parcel source) {
-            return new AccessToken(source);
-        }
-
-        @Override
-        public AccessToken[] newArray(int size) {
-            return new AccessToken[size];
-        }
-    };
-}
diff --git a/facebook/src/main/java/com/facebook/AccessTokenCache.java b/facebook/src/main/java/com/facebook/AccessTokenCache.java
deleted file mode 100644
index 2b3ccf49c..000000000
--- a/facebook/src/main/java/com/facebook/AccessTokenCache.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-
-import com.facebook.internal.Validate;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-class AccessTokenCache {
-    static final String CACHED_ACCESS_TOKEN_KEY
-            = "com.facebook.AccessTokenManager.CachedAccessToken";
-
-    private final SharedPreferences sharedPreferences;
-    private final SharedPreferencesTokenCachingStrategyFactory tokenCachingStrategyFactory;
-    private LegacyTokenHelper tokenCachingStrategy;
-
-    AccessTokenCache(SharedPreferences sharedPreferences,
-                     SharedPreferencesTokenCachingStrategyFactory tokenCachingStrategyFactory) {
-        this.sharedPreferences = sharedPreferences;
-        this.tokenCachingStrategyFactory = tokenCachingStrategyFactory;
-    }
-
-    public AccessTokenCache() {
-        this(
-                FacebookSdk.getApplicationContext().getSharedPreferences(
-                        AccessTokenManager.SHARED_PREFERENCES_NAME,
-                        Context.MODE_PRIVATE),
-                new SharedPreferencesTokenCachingStrategyFactory()
-        );
-    }
-
-    public AccessToken load() {
-        AccessToken accessToken = null;
-        if (hasCachedAccessToken()) {
-            // If we have something cached, we try to use it; even if it is invalid, do not fall
-            // back to a legacy caching strategy.
-            accessToken = getCachedAccessToken();
-        } else if (shouldCheckLegacyToken()) {
-            accessToken = getLegacyAccessToken();
-
-            if (accessToken != null) {
-                save(accessToken);
-                getTokenCachingStrategy().clear();
-            }
-        }
-
-        return accessToken;
-    }
-
-    public void save(AccessToken accessToken) {
-        Validate.notNull(accessToken, "accessToken");
-
-        JSONObject jsonObject = null;
-        try {
-            jsonObject = accessToken.toJSONObject();
-            sharedPreferences.edit().putString(CACHED_ACCESS_TOKEN_KEY, jsonObject.toString())
-                    .apply();
-        } catch (JSONException e) {
-            // Can't recover
-        }
-    }
-
-    public void clear() {
-        sharedPreferences.edit().remove(CACHED_ACCESS_TOKEN_KEY).apply();
-        if (shouldCheckLegacyToken()) {
-            getTokenCachingStrategy().clear();
-        }
-    }
-
-    private boolean hasCachedAccessToken() {
-        return sharedPreferences.contains(CACHED_ACCESS_TOKEN_KEY);
-    }
-
-    private AccessToken getCachedAccessToken() {
-        String jsonString = sharedPreferences.getString(CACHED_ACCESS_TOKEN_KEY, null);
-        if (jsonString != null) {
-            try {
-                JSONObject jsonObject = new JSONObject(jsonString);
-                return AccessToken.createFromJSONObject(jsonObject);
-            } catch (JSONException e) {
-                return null;
-            }
-        }
-        return null;
-    }
-
-    private boolean shouldCheckLegacyToken() {
-        return FacebookSdk.isLegacyTokenUpgradeSupported();
-    }
-
-    private AccessToken getLegacyAccessToken() {
-        AccessToken accessToken = null;
-        Bundle bundle = getTokenCachingStrategy().load();
-
-        if (bundle != null && LegacyTokenHelper.hasTokenInformation(bundle)) {
-            accessToken = AccessToken.createFromLegacyCache(bundle);
-        }
-        return accessToken;
-    }
-
-    private LegacyTokenHelper getTokenCachingStrategy() {
-        if (tokenCachingStrategy == null) {
-            synchronized (this) {
-                if (tokenCachingStrategy == null) {
-                    tokenCachingStrategy = tokenCachingStrategyFactory.create();
-                }
-            }
-        }
-        return tokenCachingStrategy;
-    }
-
-    static class SharedPreferencesTokenCachingStrategyFactory {
-        public LegacyTokenHelper create() {
-            return new LegacyTokenHelper(FacebookSdk.getApplicationContext());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/AccessTokenManager.java b/facebook/src/main/java/com/facebook/AccessTokenManager.java
deleted file mode 100644
index 6171527d7..000000000
--- a/facebook/src/main/java/com/facebook/AccessTokenManager.java
+++ /dev/null
@@ -1,332 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.util.Date;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-final class AccessTokenManager {
-    static final String TAG = "AccessTokenManager";
-
-    static final String ACTION_CURRENT_ACCESS_TOKEN_CHANGED =
-            "com.facebook.sdk.ACTION_CURRENT_ACCESS_TOKEN_CHANGED";
-    static final String EXTRA_OLD_ACCESS_TOKEN =
-            "com.facebook.sdk.EXTRA_OLD_ACCESS_TOKEN";
-    static final String EXTRA_NEW_ACCESS_TOKEN =
-            "com.facebook.sdk.EXTRA_NEW_ACCESS_TOKEN";
-    static final String SHARED_PREFERENCES_NAME =
-            "com.facebook.AccessTokenManager.SharedPreferences";
-
-    // Token extension constants
-    private static final int TOKEN_EXTEND_THRESHOLD_SECONDS = 24 * 60 * 60; // 1 day
-    private static final int TOKEN_EXTEND_RETRY_SECONDS = 60 * 60; // 1 hour
-
-    private static final String TOKEN_EXTEND_GRAPH_PATH = "oauth/access_token";
-    private static final String ME_PERMISSIONS_GRAPH_PATH = "me/permissions";
-
-    private static volatile AccessTokenManager instance;
-
-    private final LocalBroadcastManager localBroadcastManager;
-    private final AccessTokenCache accessTokenCache;
-    private AccessToken currentAccessToken;
-    private AtomicBoolean tokenRefreshInProgress = new AtomicBoolean(false);
-    private Date lastAttemptedTokenExtendDate = new Date(0);
-
-    AccessTokenManager(LocalBroadcastManager localBroadcastManager,
-                       AccessTokenCache accessTokenCache) {
-
-        Validate.notNull(localBroadcastManager, "localBroadcastManager");
-        Validate.notNull(accessTokenCache, "accessTokenCache");
-
-        this.localBroadcastManager = localBroadcastManager;
-        this.accessTokenCache = accessTokenCache;
-    }
-
-    static AccessTokenManager getInstance() {
-        if (instance == null) {
-            synchronized (AccessTokenManager.class) {
-                if (instance == null) {
-                    Context applicationContext = FacebookSdk.getApplicationContext();
-                    LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(
-                            applicationContext);
-                    AccessTokenCache accessTokenCache = new AccessTokenCache();
-
-                    instance = new AccessTokenManager(localBroadcastManager, accessTokenCache);
-                }
-            }
-        }
-
-        return instance;
-    }
-
-    AccessToken getCurrentAccessToken() {
-        return currentAccessToken;
-    }
-
-    boolean loadCurrentAccessToken() {
-        AccessToken accessToken = accessTokenCache.load();
-
-        if (accessToken != null) {
-            setCurrentAccessToken(accessToken, false);
-            return true;
-        }
-
-        return false;
-    }
-
-    void setCurrentAccessToken(AccessToken currentAccessToken) {
-        setCurrentAccessToken(currentAccessToken, true);
-    }
-
-    private void setCurrentAccessToken(AccessToken currentAccessToken, boolean saveToCache) {
-        AccessToken oldAccessToken = this.currentAccessToken;
-        this.currentAccessToken = currentAccessToken;
-        tokenRefreshInProgress.set(false);
-        this.lastAttemptedTokenExtendDate = new Date(0);
-
-        if (saveToCache) {
-            if (currentAccessToken != null) {
-                accessTokenCache.save(currentAccessToken);
-            } else {
-                accessTokenCache.clear();
-                Utility.clearFacebookCookies(FacebookSdk.getApplicationContext());
-            }
-        }
-
-        if (!Utility.areObjectsEqual(oldAccessToken, currentAccessToken)) {
-            sendCurrentAccessTokenChangedBroadcast(oldAccessToken, currentAccessToken);
-        }
-    }
-
-    private void sendCurrentAccessTokenChangedBroadcast(AccessToken oldAccessToken,
-        AccessToken currentAccessToken) {
-        Intent intent = new Intent(ACTION_CURRENT_ACCESS_TOKEN_CHANGED);
-
-        intent.putExtra(EXTRA_OLD_ACCESS_TOKEN, oldAccessToken);
-        intent.putExtra(EXTRA_NEW_ACCESS_TOKEN, currentAccessToken);
-
-        localBroadcastManager.sendBroadcast(intent);
-    }
-
-    void extendAccessTokenIfNeeded() {
-        if (!shouldExtendAccessToken()) {
-            return;
-        }
-        refreshCurrentAccessToken(null);
-    }
-
-    private boolean shouldExtendAccessToken() {
-        if (currentAccessToken == null) {
-            return false;
-        }
-        Long now = new Date().getTime();
-
-        return currentAccessToken.getSource().canExtendToken()
-                && now - lastAttemptedTokenExtendDate.getTime() > TOKEN_EXTEND_RETRY_SECONDS * 1000
-                && now - currentAccessToken.getLastRefresh().getTime() >
-                    TOKEN_EXTEND_THRESHOLD_SECONDS * 1000;
-    }
-
-    private static GraphRequest createGrantedPermissionsRequest(
-            AccessToken accessToken,
-            GraphRequest.Callback callback
-    ) {
-        Bundle parameters = new Bundle();
-        return new GraphRequest(
-                accessToken,
-                ME_PERMISSIONS_GRAPH_PATH,
-                parameters,
-                HttpMethod.GET,
-                callback);
-    }
-
-    private static GraphRequest createExtendAccessTokenRequest(
-            AccessToken accessToken,
-            GraphRequest.Callback callback
-    ) {
-        Bundle parameters = new Bundle();
-        parameters.putString("grant_type", "fb_extend_sso_token");
-        return new GraphRequest(
-                accessToken,
-                TOKEN_EXTEND_GRAPH_PATH,
-                parameters,
-                HttpMethod.GET,
-                callback);
-    }
-
-    private static class RefreshResult {
-        public String accessToken;
-        public int expiresAt;
-    }
-
-    void refreshCurrentAccessToken(final AccessToken.AccessTokenRefreshCallback callback) {
-        if (Looper.getMainLooper().equals(Looper.myLooper())) {
-            refreshCurrentAccessTokenImpl(callback);
-        } else {
-            Handler mainHandler = new Handler(Looper.getMainLooper());
-            mainHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    refreshCurrentAccessTokenImpl(callback);
-                }
-            });
-        }
-    }
-
-    private void refreshCurrentAccessTokenImpl(
-            final AccessToken.AccessTokenRefreshCallback callback) {
-        final AccessToken accessToken = currentAccessToken;
-        if (accessToken == null) {
-            if (callback != null) {
-                callback.OnTokenRefreshFailed(
-                        new FacebookException("No current access token to refresh"));
-            }
-            return;
-        }
-        if (!tokenRefreshInProgress.compareAndSet(false, true)) {
-            if (callback != null) {
-                callback.OnTokenRefreshFailed(
-                        new FacebookException("Refresh already in progress"));
-            }
-            return;
-        }
-
-        lastAttemptedTokenExtendDate = new Date();
-
-        final Set<String> permissions = new HashSet<>();
-        final Set<String> declinedPermissions = new HashSet<>();
-        final AtomicBoolean permissionsCallSucceeded = new AtomicBoolean(false);
-        final RefreshResult refreshResult = new RefreshResult();
-
-        GraphRequestBatch batch = new GraphRequestBatch(
-                createGrantedPermissionsRequest(accessToken, new GraphRequest.Callback() {
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        JSONObject result = response.getJSONObject();
-                        if (result == null) {
-                            return;
-                        }
-                        JSONArray permissionsArray = result.optJSONArray("data");
-                        if (permissionsArray == null) {
-                            return;
-                        }
-                        permissionsCallSucceeded.set(true);
-                        for (int i = 0; i < permissionsArray.length(); i++) {
-                            JSONObject permissionEntry = permissionsArray.optJSONObject(i);
-                            if (permissionEntry == null) {
-                                continue;
-                            }
-                            String permission = permissionEntry.optString("permission");
-                            String status = permissionEntry.optString("status");
-                            if (!Utility.isNullOrEmpty(permission) &&
-                                    !Utility.isNullOrEmpty(status)) {
-                                status = status.toLowerCase(Locale.US);
-                                if (status.equals("granted")) {
-                                    permissions.add(permission);
-                                } else if (status.equals("declined")) {
-                                    declinedPermissions.add(permission);
-                                } else {
-                                    Log.w(TAG, "Unexpected status: " + status);
-                                }
-                            }
-                        }
-                    }
-                }),
-                createExtendAccessTokenRequest(accessToken, new GraphRequest.Callback() {
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        JSONObject data = response.getJSONObject();
-                        if (data == null) {
-                            return;
-                        }
-                        refreshResult.accessToken = data.optString("access_token");
-                        refreshResult.expiresAt = data.optInt("expires_at");
-                    }
-                })
-        );
-
-        batch.addCallback(new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-                AccessToken newAccessToken = null;
-                try {
-                    if (getInstance().getCurrentAccessToken() == null ||
-                            getInstance().getCurrentAccessToken().getUserId()
-                                    != accessToken.getUserId()) {
-                        if (callback != null) {
-                            callback.OnTokenRefreshFailed(
-                                    new FacebookException("No current access token to refresh"));
-                        }
-                        return;
-                    }
-                    if (permissionsCallSucceeded.get() == false &&
-                            refreshResult.accessToken == null &&
-                            refreshResult.expiresAt == 0) {
-                        if (callback != null) {
-                            callback.OnTokenRefreshFailed(
-                                    new FacebookException("Failed to refresh access token"));
-                        }
-                        return;
-                    }
-                    newAccessToken = new AccessToken(
-                            refreshResult.accessToken != null ? refreshResult.accessToken :
-                                    accessToken.getToken(),
-                            accessToken.getApplicationId(),
-                            accessToken.getUserId(),
-                            permissionsCallSucceeded.get()
-                                    ? permissions : accessToken.getPermissions(),
-                            permissionsCallSucceeded.get()
-                                    ? declinedPermissions : accessToken.getDeclinedPermissions(),
-                            accessToken.getSource(),
-                            refreshResult.expiresAt != 0
-                                    ? new Date(refreshResult.expiresAt * 1000l)
-                                    : accessToken.getExpires(),
-                            new Date()
-                    );
-                    getInstance().setCurrentAccessToken(newAccessToken);
-                } finally {
-                    tokenRefreshInProgress.set(false);
-                    if (callback != null && newAccessToken != null) {
-                        callback.OnTokenRefreshed(newAccessToken);
-                    }
-                }
-            }
-        });
-        batch.executeAsync();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/AccessTokenSource.java b/facebook/src/main/java/com/facebook/AccessTokenSource.java
deleted file mode 100644
index 547627a3b..000000000
--- a/facebook/src/main/java/com/facebook/AccessTokenSource.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Indicates where a Facebook access token was obtained from.
- */
-public enum AccessTokenSource {
-    /**
-     * Indicates an access token has not been obtained, or is otherwise invalid.
-     */
-    NONE(false),
-    /**
-     * Indicates an access token was obtained by the user logging in through the
-     * Facebook app for Android using the web login dialog.
-     */
-    FACEBOOK_APPLICATION_WEB(true),
-    /**
-     * Indicates an access token was obtained by the user logging in through the
-     * Facebook app for Android using the native login dialog.
-     */
-    FACEBOOK_APPLICATION_NATIVE(true),
-    /**
-     * Indicates an access token was obtained by asking the Facebook app for the
-     * current token based on permissions the user has already granted to the app.
-     * No dialog was shown to the user in this case.
-     */
-    FACEBOOK_APPLICATION_SERVICE(true),
-    /**
-     * Indicates an access token was obtained by the user logging in through the
-     * Web-based dialog.
-     */
-    WEB_VIEW(true),
-    /**
-     * Indicates an access token was obtained by the user logging in through the
-     * Web-based dialog on a Chrome Custom Tab.
-     */
-    CHROME_CUSTOM_TAB(true),
-    /**
-     * Indicates an access token is for a test user rather than an actual
-     * Facebook user.
-     */
-    TEST_USER(true),
-    /**
-     * Indicates an access token constructed with a Client Token.
-     */
-    CLIENT_TOKEN(true),
-    /**
-     * Indicates an access token constructed from facebook.com/device
-     */
-    DEVICE_AUTH(true);
-
-    private final boolean canExtendToken;
-
-    AccessTokenSource(boolean canExtendToken) {
-        this.canExtendToken = canExtendToken;
-    }
-
-    boolean canExtendToken() {
-        return canExtendToken;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/AccessTokenTracker.java b/facebook/src/main/java/com/facebook/AccessTokenTracker.java
deleted file mode 100644
index b25b6e4f6..000000000
--- a/facebook/src/main/java/com/facebook/AccessTokenTracker.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.facebook.internal.Validate;
-
-
-/**
- * This class can be extended to receive notifications of access token changes. The {@link
- * #stopTracking()} method should be called in the onDestroy() method of the receiving Activity or
- * Fragment.
- */
-public abstract class AccessTokenTracker {
-
-    private final BroadcastReceiver receiver;
-    private final LocalBroadcastManager broadcastManager;
-    private boolean isTracking = false;
-
-    /**
-     * The method that will be called with the access token changes.
-     * @param oldAccessToken The access token before the change.
-     * @param currentAccessToken The new access token.
-     */
-    protected abstract void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
-                                                        AccessToken currentAccessToken);
-
-    /**
-     * The constructor.
-     */
-    public AccessTokenTracker() {
-        Validate.sdkInitialized();
-
-        this.receiver = new CurrentAccessTokenBroadcastReceiver();
-        this.broadcastManager = LocalBroadcastManager.getInstance(
-                FacebookSdk.getApplicationContext());
-
-        startTracking();
-    }
-
-    /**
-     * Starts tracking the current access token
-     */
-    public void startTracking() {
-        if (isTracking) {
-            return;
-        }
-
-        addBroadcastReceiver();
-
-        isTracking = true;
-    }
-
-    /**
-     * Stops tracking the current access token.
-     */
-    public void stopTracking() {
-        if (!isTracking) {
-            return;
-        }
-
-        broadcastManager.unregisterReceiver(receiver);
-        isTracking = false;
-    }
-
-    /**
-     * Gets whether the tracker is tracking the current access token.
-     * @return true if the tracker is tracking the current access token, false if not
-     */
-    public boolean isTracking() {
-        return isTracking;
-    }
-
-    private class CurrentAccessTokenBroadcastReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (AccessTokenManager.ACTION_CURRENT_ACCESS_TOKEN_CHANGED.equals(intent.getAction())) {
-
-                AccessToken oldAccessToken = (AccessToken) intent
-                        .getParcelableExtra(AccessTokenManager.EXTRA_OLD_ACCESS_TOKEN);
-                AccessToken newAccessToken = (AccessToken) intent
-                        .getParcelableExtra(AccessTokenManager.EXTRA_NEW_ACCESS_TOKEN);
-
-                onCurrentAccessTokenChanged(oldAccessToken, newAccessToken);
-            }
-        }
-    }
-
-    private void addBroadcastReceiver() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(AccessTokenManager.ACTION_CURRENT_ACCESS_TOKEN_CHANGED);
-
-        broadcastManager.registerReceiver(receiver, filter);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/CallbackManager.java b/facebook/src/main/java/com/facebook/CallbackManager.java
deleted file mode 100644
index 12c02c8f4..000000000
--- a/facebook/src/main/java/com/facebook/CallbackManager.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-
-import com.facebook.internal.CallbackManagerImpl;
-
-/**
- * The CallbackManager manages the callbacks into the FacebookSdk from an Activity's or
- * Fragment's onActivityResult() method.
- */
-public interface CallbackManager {
-
-    /**
-     * The method that should be called from the Activity's or Fragment's onActivityResult method.
-     * @param requestCode The request code that's received by the Activity or Fragment.
-     * @param resultCode  The result code that's received by the Activity or Fragment.
-     * @param data        The result data that's received by the Activity or Fragment.
-     * @return true If the result could be handled.
-     */
-    public boolean onActivityResult(int requestCode, int resultCode, Intent data);
-
-    /**
-     * The factory class for the {@link com.facebook.CallbackManager}.
-     */
-    public static class Factory {
-        /**
-         * Creates an instance of {@link com.facebook.CallbackManager}.
-         * @return an instance of {@link com.facebook.CallbackManager}.
-         */
-        public static CallbackManager create() {
-            return new CallbackManagerImpl();
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/CustomTabActivity.java b/facebook/src/main/java/com/facebook/CustomTabActivity.java
deleted file mode 100644
index bd4769cbf..000000000
--- a/facebook/src/main/java/com/facebook/CustomTabActivity.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
-
-/*
- * Login from a custom tab redirects here. Pass the url on to CustomTabMainActivity so it can return
- * the result.
- */
-public class CustomTabActivity extends Activity {
-    private static final int CUSTOM_TAB_REDIRECT_REQUEST_CODE = 2;
-    public static final String CUSTOM_TAB_REDIRECT_ACTION =
-            CustomTabActivity.class.getSimpleName() + ".action_customTabRedirect";
-    public static final String DESTROY_ACTION =
-            CustomTabActivity.class.getSimpleName() + ".action_destroy";
-
-    private BroadcastReceiver closeReceiver;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        Intent intent = new Intent(this, CustomTabMainActivity.class);
-        intent.setAction(CUSTOM_TAB_REDIRECT_ACTION);
-        intent.putExtra(CustomTabMainActivity.EXTRA_URL, getIntent().getDataString());
-
-        // these flags will open CustomTabMainActivity from the back stack as well as closing this
-        // activity and the custom tab opened by CustomTabMainActivity.
-        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-
-        startActivityForResult(intent, CUSTOM_TAB_REDIRECT_REQUEST_CODE);
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-
-        if (resultCode == RESULT_CANCELED) {
-            // We weren't able to open CustomTabMainActivity from the back stack. Send a broadcast
-            // instead.
-            Intent broadcast = new Intent(CUSTOM_TAB_REDIRECT_ACTION);
-            broadcast.putExtra(CustomTabMainActivity.EXTRA_URL, getIntent().getDataString());
-            LocalBroadcastManager.getInstance(this).sendBroadcast(broadcast);
-
-            // Wait for the custom tab to be removed from the back stack before finishing.
-            closeReceiver = new BroadcastReceiver() {
-                @Override
-                public void onReceive(Context context, Intent intent) {
-                    CustomTabActivity.this.finish();
-                }
-            };
-            LocalBroadcastManager.getInstance(this).registerReceiver(
-                    closeReceiver,
-                    new IntentFilter(CustomTabActivity.DESTROY_ACTION)
-            );
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        LocalBroadcastManager.getInstance(this).unregisterReceiver(closeReceiver);
-        super.onDestroy();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/CustomTabMainActivity.java b/facebook/src/main/java/com/facebook/CustomTabMainActivity.java
deleted file mode 100644
index f29c027fb..000000000
--- a/facebook/src/main/java/com/facebook/CustomTabMainActivity.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.facebook.internal.CustomTab;
-
-public class CustomTabMainActivity extends Activity {
-    public static final String EXTRA_PARAMS =
-            CustomTabMainActivity.class.getSimpleName() + ".extra_params";
-    public static final String EXTRA_CHROME_PACKAGE =
-            CustomTabMainActivity.class.getSimpleName() + ".extra_chromePackage";
-    public static final String EXTRA_URL =
-            CustomTabMainActivity.class.getSimpleName() + ".extra_url";
-    public static final String REFRESH_ACTION =
-            CustomTabMainActivity.class.getSimpleName() + ".action_refresh";
-    public static final String getRedirectUrl() {
-        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
-    }
-    private static final String OAUTH_DIALOG = "oauth";
-
-    private boolean shouldCloseCustomTab = true;
-    private BroadcastReceiver redirectReceiver;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        // Custom Tab Redirects should not be creating a new instance of this activity
-        if (CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION.equals(getIntent().getAction())) {
-            setResult(RESULT_CANCELED);
-            finish();
-            return;
-        }
-
-        if (savedInstanceState == null) {
-            Bundle parameters = getIntent().getBundleExtra(EXTRA_PARAMS);
-            String chromePackage = getIntent().getStringExtra(EXTRA_CHROME_PACKAGE);
-
-            CustomTab customTab = new CustomTab(OAUTH_DIALOG, parameters);
-            customTab.openCustomTab(this, chromePackage);
-
-            shouldCloseCustomTab = false;
-
-            // This activity will receive a broadcast if it can't be opened from the back stack
-            redirectReceiver = new BroadcastReceiver() {
-                @Override
-                public void onReceive(Context context, Intent intent) {
-                    // Remove the custom tab on top of this activity.
-                    Intent newIntent =
-                            new Intent(CustomTabMainActivity.this, CustomTabMainActivity.class);
-                    newIntent.setAction(REFRESH_ACTION);
-                    newIntent.putExtra(EXTRA_URL, intent.getStringExtra(EXTRA_URL));
-                    newIntent.addFlags(
-                            Intent.FLAG_ACTIVITY_CLEAR_TOP |
-                            Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                    startActivity(newIntent);
-                }
-            };
-            LocalBroadcastManager.getInstance(this).registerReceiver(
-                    redirectReceiver,
-                    new IntentFilter(CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION)
-            );
-        }
-    }
-
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-        if (REFRESH_ACTION.equals(intent.getAction())) {
-            // The custom tab is now destroyed so we can finish the redirect activity
-            Intent broadcast = new Intent(CustomTabActivity.DESTROY_ACTION);
-            LocalBroadcastManager.getInstance(this).sendBroadcast(broadcast);
-            sendResult(RESULT_OK, intent);
-        } else if (CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION.equals(intent.getAction())) {
-            // We have successfully redirected back to this activity. Return the result and close.
-            sendResult(RESULT_OK, intent);
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (shouldCloseCustomTab) {
-            // The custom tab was closed without getting a result.
-            sendResult(RESULT_CANCELED, null);
-        }
-        shouldCloseCustomTab = true;
-    }
-
-    private void sendResult(int resultCode, Intent resultIntent) {
-        LocalBroadcastManager.getInstance(this).unregisterReceiver(redirectReceiver);
-        if (resultIntent != null) {
-            setResult(resultCode, resultIntent);
-        } else {
-            setResult(resultCode);
-        }
-        finish();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookActivity.java b/facebook/src/main/java/com/facebook/FacebookActivity.java
deleted file mode 100644
index 4ca38c146..000000000
--- a/facebook/src/main/java/com/facebook/FacebookActivity.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.util.Log;
-
-import com.facebook.internal.FacebookDialogFragment;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.login.LoginFragment;
-import com.facebook.share.internal.DeviceShareDialogFragment;
-import com.facebook.share.model.ShareContent;
-
-/**
- * This Activity is a necessary part of the overall Facebook SDK,
- * but is not meant to be used directly. Add this Activity to your
- * AndroidManifest.xml to ensure proper handling of Facebook SDK features.
- * <pre>
- * {@code
- * <activity android:name="com.facebook.FacebookActivity"
- *           android:theme="@android:style/Theme.Translucent.NoTitleBar"
- *           android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
- *           android:label="@string/app_name" />
- * }
- * </pre>
- * Do not start this activity directly.
- */
-public class FacebookActivity extends FragmentActivity {
-
-    public static String PASS_THROUGH_CANCEL_ACTION = "PassThrough";
-    private static String FRAGMENT_TAG = "SingleFragment";
-    private static final String TAG = FacebookActivity.class.getName();
-
-    private Fragment singleFragment;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        Intent intent = getIntent();
-
-        // Some apps using this sdk don't put the sdk initialize code in the application
-        // on create method. This can cause issues when opening this activity after an application
-        // has been killed since the sdk won't be initialized. Attempt to initialize the sdk
-        // here if it hasn't already been initialized.
-        if (!FacebookSdk.isInitialized()) {
-            Log.d(
-                TAG,
-                "Facebook SDK not initialized. Make sure you call sdkInitialize inside " +
-                        "your Application's onCreate method.");
-            FacebookSdk.sdkInitialize(getApplicationContext());
-        }
-
-        setContentView(R.layout.com_facebook_activity_layout);
-
-        if (PASS_THROUGH_CANCEL_ACTION.equals(intent.getAction())) {
-            handlePassThroughError();
-            return;
-        }
-
-        FragmentManager manager = getSupportFragmentManager();
-        Fragment fragment = manager.findFragmentByTag(FRAGMENT_TAG);
-
-        if (fragment == null) {
-            if (FacebookDialogFragment.TAG.equals(intent.getAction())) {
-                FacebookDialogFragment dialogFragment = new FacebookDialogFragment();
-                dialogFragment.setRetainInstance(true);
-                dialogFragment.show(manager, FRAGMENT_TAG);
-
-                fragment = dialogFragment;
-            } else if (DeviceShareDialogFragment.TAG.equals(intent.getAction())) {
-                DeviceShareDialogFragment dialogFragment = new DeviceShareDialogFragment();
-                dialogFragment.setRetainInstance(true);
-                dialogFragment.setShareContent((ShareContent) intent.getParcelableExtra("content"));
-                dialogFragment.show(manager, FRAGMENT_TAG);
-                fragment = dialogFragment;
-            } else {
-                fragment = new LoginFragment();
-                fragment.setRetainInstance(true);
-                manager.beginTransaction()
-                        .add(R.id.com_facebook_fragment_container, fragment, FRAGMENT_TAG)
-                        .commit();
-            }
-        }
-
-        singleFragment = fragment;
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-
-        if (singleFragment != null) {
-            singleFragment.onConfigurationChanged(newConfig);
-        }
-    }
-
-    public Fragment getCurrentFragment() {
-        return singleFragment;
-    }
-
-    private void handlePassThroughError() {
-        Intent requestIntent = getIntent();
-
-        // The error we need to respond with is passed to us as method arguments.
-        Bundle errorResults = NativeProtocol.getMethodArgumentsFromIntent(requestIntent);
-        FacebookException exception = NativeProtocol.getExceptionFromErrorData(errorResults);
-
-        Intent resultIntent = NativeProtocol.createProtocolResultIntent(
-                getIntent(),
-                null,
-                exception);
-        setResult(RESULT_CANCELED, resultIntent);
-        finish();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookAuthorizationException.java b/facebook/src/main/java/com/facebook/FacebookAuthorizationException.java
deleted file mode 100644
index 1997e8057..000000000
--- a/facebook/src/main/java/com/facebook/FacebookAuthorizationException.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * An Exception indicating that Login failed.
- */
-public class FacebookAuthorizationException extends FacebookException {
-    static final long serialVersionUID = 1;
-
-    /**
-     * Constructs a FacebookAuthorizationException with no additional
-     * information.
-     */
-    public FacebookAuthorizationException() {
-        super();
-    }
-
-    /**
-     * Constructs a FacebookAuthorizationException with a message.
-     * 
-     * @param message
-     *            A String to be returned from getMessage.
-     */
-    public FacebookAuthorizationException(String message) {
-        super(message);
-    }
-
-    /**
-     * Constructs a FacebookAuthorizationException with a message and inner
-     * error.
-     * 
-     * @param message
-     *            A String to be returned from getMessage.
-     * @param throwable
-     *            A Throwable to be returned from getCause.
-     */
-    public FacebookAuthorizationException(String message, Throwable throwable) {
-        super(message, throwable);
-    }
-
-    /**
-     * Constructs a FacebookAuthorizationException with an inner error.
-     * 
-     * @param throwable
-     *            A Throwable to be returned from getCause.
-     */
-    public FacebookAuthorizationException(Throwable throwable) {
-        super(throwable);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookBroadcastReceiver.java b/facebook/src/main/java/com/facebook/FacebookBroadcastReceiver.java
deleted file mode 100644
index 31ecb67d6..000000000
--- a/facebook/src/main/java/com/facebook/FacebookBroadcastReceiver.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * This class implements a simple BroadcastReceiver designed to listen for broadcast notifications
- * from the Facebook app. At present, these notifications consistent of success/failure
- * notifications for photo upload operations that happen in the background.
- * <p/>
- * Applications may subclass this class and register it in their AndroidManifest.xml. The receiver
- * is listening the com.facebook.platform.AppCallResultBroadcast action.
- */
-public class FacebookBroadcastReceiver extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        String appCallId = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
-        String action = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION);
-        if (appCallId != null && action != null) {
-            Bundle extras = intent.getExtras();
-
-            if (NativeProtocol.isErrorResult(intent)) {
-                onFailedAppCall(appCallId, action, extras);
-            } else {
-                onSuccessfulAppCall(appCallId, action, extras);
-            }
-        }
-    }
-
-    /**
-     * Invoked when the operation was completed successfully.
-     *
-     * @param appCallId The App Call ID.
-     * @param action The action performed.
-     * @param extras Any extra information.
-     */
-    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
-        // Default does nothing.
-    }
-
-    /**
-     * Invoked when the operation failed to complete.
-     *
-     * @param appCallId The App Call ID.
-     * @param action The action performed.
-     * @param extras Any extra information.
-     */
-    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
-        // Default does nothing.
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookButtonBase.java b/facebook/src/main/java/com/facebook/FacebookButtonBase.java
deleted file mode 100644
index fedb3a94f..000000000
--- a/facebook/src/main/java/com/facebook/FacebookButtonBase.java
+++ /dev/null
@@ -1,392 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.res.TypedArray;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.Typeface;
-import android.support.v4.app.Fragment;
-import android.support.v4.content.ContextCompat;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.Button;
-import android.util.Log;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.R;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.FragmentWrapper;
-
-/**
- * A base class for a facebook button.
- */
-public abstract class FacebookButtonBase extends Button {
-    private String analyticsButtonCreatedEventName;
-    private String analyticsButtonTappedEventName;
-    private OnClickListener externalOnClickListener;
-    private OnClickListener internalOnClickListener;
-    private boolean overrideCompoundPadding;
-    private int overrideCompoundPaddingLeft;
-    private int overrideCompoundPaddingRight;
-    private FragmentWrapper parentFragment;
-
-    protected FacebookButtonBase(
-            final Context context,
-            final AttributeSet attrs,
-            int defStyleAttr,
-            int defStyleRes,
-            final String analyticsButtonCreatedEventName,
-            final String analyticsButtonTappedEventName) {
-        super(context, attrs, 0);
-        defStyleRes = (defStyleRes == 0 ? this.getDefaultStyleResource() : defStyleRes);
-        defStyleRes = (defStyleRes == 0 ? R.style.com_facebook_button : defStyleRes);
-        configureButton(context, attrs, defStyleAttr, defStyleRes);
-        this.analyticsButtonCreatedEventName = analyticsButtonCreatedEventName;
-        this.analyticsButtonTappedEventName = analyticsButtonTappedEventName;
-        setClickable(true);
-        setFocusable(true);
-    }
-
-    protected abstract int getDefaultRequestCode();
-
-    /**
-     * Sets the fragment that contains this control. This allows the button to be embedded inside a
-     * Fragment, and will allow the fragment to receive the
-     * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
-     * call rather than the Activity.
-     *
-     * @param fragment the android.support.v4.app.Fragment that contains this control
-     */
-    public void setFragment(final Fragment fragment) {
-        parentFragment = new FragmentWrapper(fragment);
-    }
-
-    /**
-     * Sets the fragment that contains this control. This allows the button to be embedded inside a
-     * Fragment, and will allow the fragment to receive the
-     * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
-     * call rather than the Activity.
-     *
-     * @param fragment the android.app.Fragment that contains this control
-     */
-    public void setFragment(final android.app.Fragment fragment) {
-        parentFragment = new FragmentWrapper(fragment);
-    }
-
-    /**
-     * Gets the fragment that contains this control.
-     * @return The android.support.v4.app.Fragment that contains this control.
-     */
-    public Fragment getFragment() {
-        return (parentFragment != null) ? parentFragment.getSupportFragment() : null;
-    }
-
-    /**
-     * Gets the fragment that contains this control.
-     * @return The android.app.Fragment that contains this control.
-     */
-    public android.app.Fragment getNativeFragment() {
-        return (parentFragment != null) ? parentFragment.getNativeFragment() : null;
-    }
-
-    @Override
-    public void setOnClickListener(final OnClickListener l) {
-        this.externalOnClickListener = l;
-    }
-
-    /**
-     * Returns the request code used for this Button.
-     *
-     * @return the request code.
-     */
-    public int getRequestCode() {
-        return getDefaultRequestCode();
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        if (!isInEditMode()) {
-            logButtonCreated(getContext());
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        boolean centered = (this.getGravity() & Gravity.CENTER_HORIZONTAL) != 0;
-        if (centered) {
-            // if the text is centered, we need to adjust the frame for the titleLabel based on the
-            // size of the text in order to keep the text centered in the button without adding
-            // extra blank space to the right when unnecessary
-            // 1. the text fits centered within the button without colliding with the image
-            //    (imagePaddingWidth)
-            // 2. the text would run into the image, so adjust the insets to effectively left align
-            //    it (textPaddingWidth)
-            final int compoundPaddingLeft = getCompoundPaddingLeft();
-            final int compoundPaddingRight = getCompoundPaddingRight();
-            final int compoundDrawablePadding = getCompoundDrawablePadding();
-            final int textX = compoundPaddingLeft + compoundDrawablePadding;
-            final int textContentWidth = getWidth() - textX - compoundPaddingRight;
-            final int textWidth = measureTextWidth(getText().toString());
-            final int textPaddingWidth = (textContentWidth - textWidth) / 2;
-            final int imagePaddingWidth = (compoundPaddingLeft - getPaddingLeft()) / 2;
-            final int inset = Math.min(textPaddingWidth, imagePaddingWidth);
-            this.overrideCompoundPaddingLeft = compoundPaddingLeft - inset;
-            this.overrideCompoundPaddingRight = compoundPaddingRight + inset;
-            this.overrideCompoundPadding = true;
-        }
-        super.onDraw(canvas);
-        this.overrideCompoundPadding = false;
-    }
-
-    @Override
-    public int getCompoundPaddingLeft() {
-        return (this.overrideCompoundPadding ?
-                this.overrideCompoundPaddingLeft :
-                super.getCompoundPaddingLeft());
-    }
-
-    @Override
-    public int getCompoundPaddingRight() {
-        return (this.overrideCompoundPadding ?
-                this.overrideCompoundPaddingRight :
-                super.getCompoundPaddingRight());
-    }
-
-    protected Activity getActivity() {
-        Context context = getContext();
-        while (!(context instanceof Activity) && context instanceof ContextWrapper) {
-            context = ((ContextWrapper) context).getBaseContext();
-        }
-
-        if (context instanceof Activity) {
-            return (Activity) context;
-        }
-        throw new FacebookException("Unable to get Activity.");
-    }
-
-    protected int getDefaultStyleResource() {
-        return 0;
-    }
-
-    protected int measureTextWidth(final String text) {
-        return (int)Math.ceil(getPaint().measureText(text));
-    }
-
-    protected void configureButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        parseBackgroundAttributes(context, attrs, defStyleAttr, defStyleRes);
-        parseCompoundDrawableAttributes(context, attrs, defStyleAttr, defStyleRes);
-        parseContentAttributes(context, attrs, defStyleAttr, defStyleRes);
-        parseTextAttributes(context, attrs, defStyleAttr, defStyleRes);
-        setupOnClickListener();
-    }
-
-    protected void callExternalOnClickListener(final View v) {
-        if (externalOnClickListener != null) {
-            externalOnClickListener.onClick(v);
-        }
-    }
-
-    protected void setInternalOnClickListener(final OnClickListener l) {
-        internalOnClickListener = l;
-    }
-
-    private void logButtonCreated(final Context context) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        logger.logSdkEvent(analyticsButtonCreatedEventName, null, null);
-    }
-
-    private void logButtonTapped(final Context context) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        logger.logSdkEvent(analyticsButtonTappedEventName, null, null);
-    }
-
-    private void parseBackgroundAttributes(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        // TODO, figure out why com_facebook_button_like_background.xml doesn't work in designers
-        if (isInEditMode()) {
-            return;
-        }
-
-        final int attrsResources[] = {
-                android.R.attr.background,
-        };
-        final TypedArray a = context.getTheme().obtainStyledAttributes(
-                attrs,
-                attrsResources,
-                defStyleAttr,
-                defStyleRes);
-        try {
-            if (a.hasValue(0)) {
-                int backgroundResource = a.getResourceId(0, 0);
-                if (backgroundResource != 0) {
-                    setBackgroundResource(backgroundResource);
-                } else {
-                    setBackgroundColor(a.getColor(0, 0));
-                }
-            } else {
-                // fallback, if no background specified, fill with Facebook blue
-                setBackgroundColor(ContextCompat.getColor(context, R.color.com_facebook_blue));
-            }
-        } finally {
-            a.recycle();
-        }
-    }
-
-    @SuppressLint("ResourceType")
-    private void parseCompoundDrawableAttributes(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        final int attrsResources[] = {
-                android.R.attr.drawableLeft,
-                android.R.attr.drawableTop,
-                android.R.attr.drawableRight,
-                android.R.attr.drawableBottom,
-                android.R.attr.drawablePadding,
-        };
-        final TypedArray a = context.getTheme().obtainStyledAttributes(
-                attrs,
-                attrsResources,
-                defStyleAttr,
-                defStyleRes);
-        try {
-            setCompoundDrawablesWithIntrinsicBounds(
-                    a.getResourceId(0, 0),
-                    a.getResourceId(1, 0),
-                    a.getResourceId(2, 0),
-                    a.getResourceId(3, 0));
-            setCompoundDrawablePadding(a.getDimensionPixelSize(4, 0));
-
-        } finally {
-            a.recycle();
-        }
-    }
-
-    private void parseContentAttributes(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        final int attrsResources[] = {
-                android.R.attr.paddingLeft,
-                android.R.attr.paddingTop,
-                android.R.attr.paddingRight,
-                android.R.attr.paddingBottom,
-        };
-        final TypedArray a = context.getTheme().obtainStyledAttributes(
-                attrs,
-                attrsResources,
-                defStyleAttr,
-                defStyleRes);
-        try {
-            setPadding(
-                    a.getDimensionPixelSize(0, 0),
-                    a.getDimensionPixelSize(1, 0),
-                    a.getDimensionPixelSize(2, 0),
-                    a.getDimensionPixelSize(3, 0));
-        } finally {
-            a.recycle();
-        }
-    }
-
-    private void parseTextAttributes(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        final int colorResources[] = {
-                android.R.attr.textColor,
-        };
-        final TypedArray colorAttrs = context.getTheme().obtainStyledAttributes(
-                attrs,
-                colorResources,
-                defStyleAttr,
-                defStyleRes);
-        try {
-            setTextColor(colorAttrs.getColorStateList(0));
-        } finally {
-            colorAttrs.recycle();
-        }
-        final int gravityResources[] = {
-                android.R.attr.gravity,
-        };
-        final TypedArray gravityAttrs = context.getTheme().obtainStyledAttributes(
-                attrs,
-                gravityResources,
-                defStyleAttr,
-                defStyleRes);
-        try {
-            setGravity(gravityAttrs.getInt(0, Gravity.CENTER));
-        } finally {
-            gravityAttrs.recycle();
-        }
-        final int attrsResources[] = {
-                android.R.attr.textSize,
-                android.R.attr.textStyle,
-                android.R.attr.text,
-        };
-        final TypedArray a = context.getTheme().obtainStyledAttributes(
-                attrs,
-                attrsResources,
-                defStyleAttr,
-                defStyleRes);
-        try {
-            setTextSize(TypedValue.COMPLEX_UNIT_PX, a.getDimensionPixelSize(0, 0));
-            setTypeface(Typeface.defaultFromStyle(a.getInt(1, Typeface.BOLD)));
-            setText(a.getString(2));
-        } finally {
-            a.recycle();
-        }
-    }
-
-    private void setupOnClickListener() {
-        // set the listener on super so that consumers can set another listener that this will
-        // forward to
-        super.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(final View v) {
-                logButtonTapped(getContext());
-                if (FacebookButtonBase.this.internalOnClickListener != null) {
-                    FacebookButtonBase.this.internalOnClickListener.onClick(v);
-                } else if (FacebookButtonBase.this.externalOnClickListener != null) {
-                    FacebookButtonBase.this.externalOnClickListener.onClick(v);
-                }
-            }
-        });
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookCallback.java b/facebook/src/main/java/com/facebook/FacebookCallback.java
deleted file mode 100644
index b25092c1d..000000000
--- a/facebook/src/main/java/com/facebook/FacebookCallback.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * A callback class for the Facebook SDK.
- */
-public interface FacebookCallback<RESULT> {
-    /**
-     * Called when the dialog completes without error.
-     * <p/>
-     * Note: This will be called instead of {@link #onCancel()} if any of the following conditions
-     * are true.
-     * <ul>
-     * <li>
-     * {@link com.facebook.share.widget.MessageDialog} is used.
-     * </li>
-     * <li>
-     * The logged in Facebook user has not authorized the app that has initiated the dialog.
-     * </li>
-     * </ul>
-     *
-     * @param result Result from the dialog
-     */
-    public void onSuccess(RESULT result);
-
-    /**
-     * Called when the dialog is canceled.
-     * <p/>
-     * Note: {@link #onSuccess(Object)} will be called instead if any of the following conditions
-     * are true.
-     * <ul>
-     * <li>
-     * {@link com.facebook.share.widget.MessageDialog} is used.
-     * </li>
-     * <li>
-     * The logged in Facebook user has not authorized the app that has initiated the dialog.
-     * </li>
-     * </ul>
-     */
-    public void onCancel();
-
-    /**
-     * Called when the dialog finishes with an error.
-     *
-     * @param error The error that occurred
-     */
-    public void onError(FacebookException error);
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookContentProvider.java b/facebook/src/main/java/com/facebook/FacebookContentProvider.java
deleted file mode 100644
index 9b061d3e2..000000000
--- a/facebook/src/main/java/com/facebook/FacebookContentProvider.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.ContentProvider;
-import android.content.ContentValues;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.ParcelFileDescriptor;
-import android.util.Log;
-import android.util.Pair;
-
-import com.facebook.internal.NativeAppCallAttachmentStore;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.util.UUID;
-
-/**
- * <p>Implements a
- * <a href="http://developer.android.com/reference/android/content/ContentProvider.html">
- * ContentProvider</a> that can be used to provide binary attachments (e.g., images) to calls made
- * via {@link com.facebook.FacebookDialog}.
- * <p/>
- * <p>Note that this ContentProvider is only necessary if an application wishes to attach images,
- * etc., that are stored in memory and do not have another way to be referenced by a content URI.
- * For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated
- * with them, use of this class is not necessary.
- * </p>
- * <p>If an application wishes to attach images that are stored in-memory within the application,
- * this content provider must be listed in the application's AndroidManifest.xml, and it should be
- * named according to the pattern
- * <code>"com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"</code>.
- * See the {@link FacebookContentProvider#getAttachmentUrl getContentProviderName} method.
- * </p>
- */
-public class FacebookContentProvider extends ContentProvider {
-    private static final String TAG = FacebookContentProvider.class.getName();
-    private static final String ATTACHMENT_URL_BASE =
-            "content://com.facebook.app.FacebookContentProvider";
-
-    public FacebookContentProvider() {
-    }
-
-    /**
-     * Returns the name of the content provider formatted correctly for constructing URLs.
-     * @param applicationId the Facebook application ID of the application
-     * @return the String to use as the authority portion of a content URI.
-     */
-    public static String getAttachmentUrl(
-            String applicationId,
-            UUID callId,
-            String attachmentName) {
-        return String.format(
-                "%s%s/%s/%s",
-                ATTACHMENT_URL_BASE,
-                applicationId,
-                callId.toString(),
-                attachmentName);
-    }
-
-    @Override
-    public boolean onCreate() {
-        return true;
-    }
-
-    @Override
-    public Cursor query(Uri uri, String[] strings, String s, String[] strings2, String s2) {
-        return null;
-    }
-
-    @Override
-    public String getType(Uri uri) {
-        return null;
-    }
-
-    @Override
-    public Uri insert(Uri uri, ContentValues contentValues) {
-        return null;
-    }
-
-    @Override
-    public int delete(Uri uri, String s, String[] strings) {
-        return 0;
-    }
-
-    @Override
-    public int update(Uri uri, ContentValues contentValues, String s, String[] strings) {
-        return 0;
-    }
-
-    @Override
-    public android.os.ParcelFileDescriptor openFile(android.net.Uri uri, java.lang.String mode)
-            throws java.io.FileNotFoundException {
-
-        Pair<UUID, String> callIdAndAttachmentName = parseCallIdAndAttachmentName(uri);
-        if (callIdAndAttachmentName == null) {
-            throw new FileNotFoundException();
-        }
-
-        try {
-            File file = NativeAppCallAttachmentStore.openAttachment(
-                    callIdAndAttachmentName.first,
-                    callIdAndAttachmentName.second);
-
-            return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
-        } catch (FileNotFoundException exception) {
-            Log.e(TAG, "Got unexpected exception:" + exception);
-            throw exception;
-        }
-    }
-
-    Pair<UUID, String> parseCallIdAndAttachmentName(Uri uri) {
-        try {
-            // We don't do explicit format checking here. Malformed URIs may generate
-            // NullPointerExceptions or array bounds exceptions, which we'll catch and return null.
-            // All of these will result in a FileNotFoundException being thrown in openFile.
-            String callIdAndAttachmentName = uri.getPath().substring(1);
-            String [] parts = callIdAndAttachmentName.split("/");
-
-            String callIdString = parts[0];
-            String attachmentName = parts[1];
-            UUID callId = UUID.fromString(callIdString);
-
-            return new Pair<UUID, String>(callId, attachmentName);
-        } catch (Exception exception) {
-            return null;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookDialog.java b/facebook/src/main/java/com/facebook/FacebookDialog.java
deleted file mode 100644
index 5af094bc6..000000000
--- a/facebook/src/main/java/com/facebook/FacebookDialog.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Represents dialogs provided by Facebook
- */
-public interface FacebookDialog<CONTENT, RESULT> {
-
-    /**
-     * Indicates whether the dialog can be shown for the content passed in.
-     * @param content the content to check
-     *
-     * @return true if the dialog can be shown
-     */
-    public boolean canShow(CONTENT content);
-
-    /**
-     * Shows the dialog for the content passed in.
-     * @param content the content to show
-     */
-    public void show(CONTENT content);
-
-    /**
-     * Allows the registration of a callback that will be executed once the dialog is closed, with
-     * success, cancel or error details. This should be called in the
-     * {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager CallbackManager instance that will handle the onActivityResult
-     * @param callback Callback to be called upon dialog completion
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<RESULT> callback);
-
-    /**
-     * Allows the registration of a callback that will be executed once the dialog is closed, with
-     * success, cancel or error details. This should be called in the
-     * {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager CallbackManager instance that will handle the Activity Result
-     * @param callback Callback to be called upon dialog completion
-     * @param requestCode  The request code to use, this should be outside of the range of those
-     *                     reserved for the Facebook SDK
-     *                     {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<RESULT> callback,
-            final int requestCode);
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookDialogException.java b/facebook/src/main/java/com/facebook/FacebookDialogException.java
deleted file mode 100644
index 4a336fa28..000000000
--- a/facebook/src/main/java/com/facebook/FacebookDialogException.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Represents an error condition relating to displaying a Facebook Web dialog.
- */
-public class FacebookDialogException extends FacebookException {
-    static final long serialVersionUID = 1;
-    private int errorCode;
-    private String failingUrl;
-
-    /**
-     * Constructs a new FacebookException.
-     */
-    public FacebookDialogException(String message, int errorCode, String failingUrl) {
-        super(message);
-        this.errorCode = errorCode;
-        this.failingUrl = failingUrl;
-    }
-
-    /**
-     * Gets the error code received by the WebView. See:
-     * http://developer.android.com/reference/android/webkit/WebViewClient.html
-     *
-     * @return the error code
-     */
-    public int getErrorCode() {
-        return errorCode;
-    }
-
-    /**
-     * Gets the URL that the dialog was trying to load.
-     * @return the URL
-     */
-    public String getFailingUrl() {
-        return failingUrl;
-    }
-
-    @Override
-    public final String toString() {
-        return new StringBuilder()
-                .append("{FacebookDialogException: ")
-                .append("errorCode: ")
-                .append(getErrorCode())
-                .append(", message: ")
-                .append(getMessage())
-                .append(", url: ")
-                .append(getFailingUrl())
-                .append("}")
-                .toString();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookException.java b/facebook/src/main/java/com/facebook/FacebookException.java
deleted file mode 100644
index adbf1c8f4..000000000
--- a/facebook/src/main/java/com/facebook/FacebookException.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Represents an error condition specific to the Facebook SDK for Android.
- */
-public class FacebookException extends RuntimeException {
-    static final long serialVersionUID = 1;
-
-    /**
-     * Constructs a new FacebookException.
-     */
-    public FacebookException() {
-        super();
-    }
-
-    /**
-     * Constructs a new FacebookException.
-     *
-     * @param message the detail message of this exception
-     */
-    public FacebookException(String message) {
-        super(message);
-    }
-
-    /**
-     * Constructs a new FacebookException.
-     *
-     * @param format the format string (see {@link java.util.Formatter#format})
-     * @param args   the list of arguments passed to the formatter.
-     */
-    public FacebookException(String format, Object... args) {
-        this(String.format(format, args));
-    }
-
-    /**
-     * Constructs a new FacebookException.
-     *
-     * @param message   the detail message of this exception
-     * @param throwable the cause of this exception
-     */
-    public FacebookException(String message, Throwable throwable) {
-        super(message, throwable);
-    }
-
-    /**
-     * Constructs a new FacebookException.
-     *
-     * @param throwable the cause of this exception
-     */
-    public FacebookException(Throwable throwable) {
-        super(throwable);
-    }
-
-    @Override
-    public String toString() {
-        // Throwable.toString() returns "FacebookException:{message}". Returning just "{message}"
-        // should be fine here.
-        return getMessage();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookGraphResponseException.java b/facebook/src/main/java/com/facebook/FacebookGraphResponseException.java
deleted file mode 100644
index 354b62bda..000000000
--- a/facebook/src/main/java/com/facebook/FacebookGraphResponseException.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Represents an issue that's returned by the Graph API.
- */
-public class FacebookGraphResponseException extends FacebookException {
-
-    private final GraphResponse graphResponse;
-
-    /**
-     * Constructs a new FacebookGraphResponseException.
-     *
-     * @param graphResponse The graph response with issue.
-     * @param errorMessage The error message.
-     */
-    public FacebookGraphResponseException(GraphResponse graphResponse, String errorMessage) {
-        super(errorMessage);
-        this.graphResponse = graphResponse;
-    }
-
-    /**
-     * Getter for the graph response with the issue.
-     * @return the graph response with the issue.
-     */
-    public final GraphResponse getGraphResponse() {
-        return graphResponse;
-    }
-
-    @Override
-    public final String toString() {
-        FacebookRequestError requestError = graphResponse != null ? graphResponse.getError() : null;
-        StringBuilder errorStringBuilder = new StringBuilder()
-                .append("{FacebookGraphResponseException: ");
-        String message = getMessage();
-        if (message != null) {
-            errorStringBuilder.append(message);
-            errorStringBuilder.append(" ");
-        }
-        if (requestError != null) {
-            errorStringBuilder.append("httpResponseCode: ")
-                    .append(requestError.getRequestStatusCode())
-                    .append(", facebookErrorCode: ")
-                    .append(requestError.getErrorCode())
-                    .append(", facebookErrorType: ")
-                    .append(requestError.getErrorType())
-                    .append(", message: ")
-                    .append(requestError.getErrorMessage())
-                    .append("}");
-        }
-
-        return errorStringBuilder.toString();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookOperationCanceledException.java b/facebook/src/main/java/com/facebook/FacebookOperationCanceledException.java
deleted file mode 100644
index 09e08889e..000000000
--- a/facebook/src/main/java/com/facebook/FacebookOperationCanceledException.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * An Exception indicating that an operation was canceled before it completed.
- */
-public class FacebookOperationCanceledException extends FacebookException {
-    static final long serialVersionUID = 1;
-
-    /**
-     * Constructs a FacebookOperationCanceledException with no additional information.
-     */
-    public FacebookOperationCanceledException() {
-        super();
-    }
-
-    /**
-     * Constructs a FacebookOperationCanceledException with a message.
-     *
-     * @param message A String to be returned from getMessage.
-     */
-    public FacebookOperationCanceledException(String message) {
-        super(message);
-    }
-
-    /**
-     * Constructs a FacebookOperationCanceledException with a message and inner error.
-     *
-     * @param message   A String to be returned from getMessage.
-     * @param throwable A Throwable to be returned from getCause.
-     */
-    public FacebookOperationCanceledException(String message, Throwable throwable) {
-        super(message, throwable);
-    }
-
-    /**
-     * Constructs a FacebookOperationCanceledException with an inner error.
-     *
-     * @param throwable A Throwable to be returned from getCause.
-     */
-    public FacebookOperationCanceledException(Throwable throwable) {
-        super(throwable);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookRequestError.java b/facebook/src/main/java/com/facebook/FacebookRequestError.java
deleted file mode 100644
index 562ac169b..000000000
--- a/facebook/src/main/java/com/facebook/FacebookRequestError.java
+++ /dev/null
@@ -1,502 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.internal.FacebookRequestErrorClassification;
-import com.facebook.internal.Utility;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.net.HttpURLConnection;
-
-/**
- * This class represents an error that occurred during a Facebook request.
- * <p/>
- * In general, one would call {@link #getCategory()} to determine the type
- * of error that occurred, and act accordingly. For more information on error
- * handling, see <a href="https://developers.facebook.com/docs/reference/api/errors/">
- * https://developers.facebook.com/docs/reference/api/errors/</a>
- */
-public final class FacebookRequestError implements Parcelable {
-
-    /** Represents an invalid or unknown error code from the server. */
-    public static final int INVALID_ERROR_CODE = -1;
-
-    /**
-     * Indicates that there was no valid HTTP status code returned, indicating
-     * that either the error occurred locally, before the request was sent, or
-     * that something went wrong with the HTTP connection. Check the exception
-     * from {@link #getException()};
-     */
-    public static final int INVALID_HTTP_STATUS_CODE = -1;
-
-    private static final String CODE_KEY = "code";
-    private static final String BODY_KEY = "body";
-    private static final String ERROR_KEY = "error";
-    private static final String ERROR_TYPE_FIELD_KEY = "type";
-    private static final String ERROR_CODE_FIELD_KEY = "code";
-    private static final String ERROR_MESSAGE_FIELD_KEY = "message";
-    private static final String ERROR_CODE_KEY = "error_code";
-    private static final String ERROR_SUB_CODE_KEY = "error_subcode";
-    private static final String ERROR_MSG_KEY = "error_msg";
-    private static final String ERROR_REASON_KEY = "error_reason";
-    private static final String ERROR_USER_TITLE_KEY = "error_user_title";
-    private static final String ERROR_USER_MSG_KEY = "error_user_msg";
-    private static final String ERROR_IS_TRANSIENT_KEY = "is_transient";
-
-    private static class Range {
-        private final int start, end;
-
-        private Range(int start, int end) {
-            this.start = start;
-            this.end = end;
-        }
-
-        boolean contains(int value) {
-            return start <= value && value <= end;
-        }
-    }
-
-    static final Range HTTP_RANGE_SUCCESS = new Range(200, 299);
-
-    private final Category category;
-    private final int requestStatusCode;
-    private final int errorCode;
-    private final int subErrorCode;
-    private final String errorType;
-    private final String errorMessage;
-    private final String errorUserTitle;
-    private final String errorUserMessage;
-    private final String errorRecoveryMessage;
-    private final JSONObject requestResult;
-    private final JSONObject requestResultBody;
-    private final Object batchRequestResult;
-    private final HttpURLConnection connection;
-    private final FacebookException exception;
-
-    private FacebookRequestError(
-            int requestStatusCode,
-            int errorCode,
-            int subErrorCode,
-            String errorType,
-            String errorMessage,
-            String errorUserTitle,
-            String errorUserMessage,
-            boolean errorIsTransient,
-            JSONObject requestResultBody,
-            JSONObject requestResult,
-            Object batchRequestResult,
-            HttpURLConnection connection,
-            FacebookException exception) {
-        this.requestStatusCode = requestStatusCode;
-        this.errorCode = errorCode;
-        this.subErrorCode = subErrorCode;
-        this.errorType = errorType;
-        this.errorMessage = errorMessage;
-        this.requestResultBody = requestResultBody;
-        this.requestResult = requestResult;
-        this.batchRequestResult = batchRequestResult;
-        this.connection = connection;
-        this.errorUserTitle = errorUserTitle;
-        this.errorUserMessage = errorUserMessage;
-
-        boolean isLocalException = false;
-        if (exception != null) {
-            this.exception = exception;
-            isLocalException =  true;
-        } else {
-            this.exception = new FacebookServiceException(this, errorMessage);
-        }
-
-        FacebookRequestErrorClassification errorClassification = getErrorClassification();
-        this.category = isLocalException
-                ? Category.OTHER
-                : errorClassification.classify(errorCode, subErrorCode, errorIsTransient);
-        this.errorRecoveryMessage = errorClassification.getRecoveryMessage(this.category);
-    }
-
-    FacebookRequestError(HttpURLConnection connection, Exception exception) {
-        this(
-                INVALID_HTTP_STATUS_CODE,
-                INVALID_ERROR_CODE,
-                INVALID_ERROR_CODE,
-                null,
-                null,
-                null,
-                null,
-                false,
-                null,
-                null,
-                null,
-                connection,
-                (exception instanceof FacebookException) ?
-                        (FacebookException) exception : new FacebookException(exception));
-    }
-
-    public FacebookRequestError(int errorCode, String errorType, String errorMessage) {
-        this(
-                INVALID_HTTP_STATUS_CODE,
-                errorCode,
-                INVALID_ERROR_CODE,
-                errorType,
-                errorMessage,
-                null,
-                null,
-                false,
-                null,
-                null,
-                null,
-                null,
-                null);
-    }
-
-    /**
-     * Returns the category in which the error belongs. Applications can use the category
-     * to determine how best to handle the errors (e.g. exponential backoff for retries if
-     * being throttled).
-     *
-     * @return the category in which the error belong
-     */
-    public Category getCategory() {
-        return category;
-    }
-
-    /**
-     * Returns the HTTP status code for this particular request.
-     *
-     * @return the HTTP status code for the request
-     */
-    public int getRequestStatusCode() {
-        return requestStatusCode;
-    }
-
-    /**
-     * Returns the error code returned from Facebook.
-     *
-     * @return the error code returned from Facebook
-     */
-    public int getErrorCode() {
-        return errorCode;
-    }
-
-    /**
-     * Returns the sub-error code returned from Facebook.
-     *
-     * @return the sub-error code returned from Facebook
-     */
-    public int getSubErrorCode() {
-        return subErrorCode;
-    }
-
-    /**
-     * Returns the type of error as a raw string. This is generally less useful
-     * than using the {@link #getCategory()} method, but can provide further details
-     * on the error.
-     *
-     * @return the type of error as a raw string
-     */
-    public String getErrorType() {
-        return errorType;
-    }
-
-    /**
-     * Returns the error message returned from Facebook.
-     *
-     * @return the error message returned from Facebook
-     */
-    public String getErrorMessage() {
-        if (errorMessage != null) {
-            return errorMessage;
-        } else {
-            return exception.getLocalizedMessage();
-        }
-    }
-
-    /**
-     * Returns the message that can be displayed to the user before attempting error recovery.
-     * @return the message that can be displayed to the user before attempting error recovery
-     */
-    public String getErrorRecoveryMessage() {
-        return this.errorRecoveryMessage;
-    }
-
-    /**
-     * Returns a message suitable for display to the user, describing a user action necessary to
-     * enable Facebook functionality. Not all Facebook errors yield a message suitable for user
-     * display; however in all cases where shouldNotifyUser() returns true, this method returns a
-     * non-null message suitable for display.
-     *
-     * @return the error message returned from Facebook
-     */
-    public String getErrorUserMessage() {
-        return errorUserMessage;
-    }
-
-    /**
-     * Returns a short summary of the error suitable for display to the user. Not all Facebook
-     * errors yield a title/message suitable for user display; however in all cases where
-     * getErrorUserTitle() returns valid String - user should be notified.
-     *
-     * @return the error message returned from Facebook
-     */
-    public String getErrorUserTitle() {
-        return errorUserTitle;
-    }
-
-    /**
-     * Returns the body portion of the response corresponding to the request from Facebook.
-     *
-     * @return the body of the response for the request
-     */
-    public JSONObject getRequestResultBody() {
-        return requestResultBody;
-    }
-
-    /**
-     * Returns the full JSON response for the corresponding request. In a non-batch request,
-     * this would be the raw response in the form of a JSON object. In a batch request, this
-     * result will contain the body of the response as well as the HTTP headers that pertain
-     * to the specific request (in the form of a "headers" JSONArray).
-     *
-     * @return the full JSON response for the request
-     */
-    public JSONObject getRequestResult() {
-        return requestResult;
-    }
-
-    /**
-     * Returns the full JSON response for the batch request. If the request was not a batch
-     * request, then the result from this method is the same as {@link #getRequestResult()}.
-     * In case of a batch request, the result will be a JSONArray where the elements
-     * correspond to the requests in the batch. Callers should check the return type against
-     * either JSONObject or JSONArray and cast accordingly.
-     *
-     * @return the full JSON response for the batch
-     */
-    public Object getBatchRequestResult() {
-        return batchRequestResult;
-    }
-
-    /**
-     * Returns the HTTP connection that was used to make the request.
-     *
-     * @return the HTTP connection used to make the request
-     */
-    public HttpURLConnection getConnection() {
-        return connection;
-    }
-
-    /**
-     * Returns the exception associated with this request, if any.
-     *
-     * @return the exception associated with this request
-     */
-    public FacebookException getException() {
-        return exception;
-    }
-
-    @Override
-    public String toString() {
-        return new StringBuilder("{HttpStatus: ")
-                .append(requestStatusCode)
-                .append(", errorCode: ")
-                .append(errorCode)
-                .append(", errorType: ")
-                .append(errorType)
-                .append(", errorMessage: ")
-                .append(getErrorMessage())
-                .append("}")
-                .toString();
-    }
-
-    static FacebookRequestError checkResponseAndCreateError(
-            JSONObject singleResult,
-            Object batchResult,
-            HttpURLConnection connection) {
-        try {
-            if (singleResult.has(CODE_KEY)) {
-                int responseCode = singleResult.getInt(CODE_KEY);
-                Object body = Utility.getStringPropertyAsJSON(singleResult, BODY_KEY,
-                        GraphResponse.NON_JSON_RESPONSE_PROPERTY);
-
-                if (body != null && body instanceof JSONObject) {
-                    JSONObject jsonBody = (JSONObject) body;
-                    // Does this response represent an error from the service? We might get either
-                    // an "error" with several sub-properties, or else one or more top-level fields
-                    // containing error info.
-                    String errorType = null;
-                    String errorMessage = null;
-                    String errorUserMessage = null;
-                    String errorUserTitle = null;
-                    boolean errorIsTransient = false;
-                    int errorCode = INVALID_ERROR_CODE;
-                    int errorSubCode = INVALID_ERROR_CODE;
-
-                    boolean hasError = false;
-                    if (jsonBody.has(ERROR_KEY)) {
-                        // We assume the error object is correctly formatted.
-                        JSONObject error = (JSONObject)
-                                Utility.getStringPropertyAsJSON(jsonBody, ERROR_KEY, null);
-
-                        errorType = error.optString(ERROR_TYPE_FIELD_KEY, null);
-                        errorMessage = error.optString(ERROR_MESSAGE_FIELD_KEY, null);
-                        errorCode = error.optInt(ERROR_CODE_FIELD_KEY, INVALID_ERROR_CODE);
-                        errorSubCode = error.optInt(ERROR_SUB_CODE_KEY, INVALID_ERROR_CODE);
-                        errorUserMessage =  error.optString(ERROR_USER_MSG_KEY, null);
-                        errorUserTitle =  error.optString(ERROR_USER_TITLE_KEY, null);
-                        errorIsTransient = error.optBoolean(ERROR_IS_TRANSIENT_KEY, false);
-                        hasError = true;
-                    } else if (jsonBody.has(ERROR_CODE_KEY) || jsonBody.has(ERROR_MSG_KEY)
-                            || jsonBody.has(ERROR_REASON_KEY)) {
-                        errorType = jsonBody.optString(ERROR_REASON_KEY, null);
-                        errorMessage = jsonBody.optString(ERROR_MSG_KEY, null);
-                        errorCode = jsonBody.optInt(ERROR_CODE_KEY, INVALID_ERROR_CODE);
-                        errorSubCode = jsonBody.optInt(ERROR_SUB_CODE_KEY, INVALID_ERROR_CODE);
-                        hasError = true;
-                    }
-
-                    if (hasError) {
-                        return new FacebookRequestError(
-                                responseCode,
-                                errorCode,
-                                errorSubCode,
-                                errorType,
-                                errorMessage,
-                                errorUserTitle,
-                                errorUserMessage,
-                                errorIsTransient,
-                                jsonBody,
-                                singleResult,
-                                batchResult,
-                                connection,
-                                null);
-                    }
-                }
-
-                // If we didn't get error details, but we did get a failure response code, report
-                // it.
-                if (!HTTP_RANGE_SUCCESS.contains(responseCode)) {
-                    return new FacebookRequestError(
-                            responseCode,
-                            INVALID_ERROR_CODE,
-                            INVALID_ERROR_CODE,
-                            null,
-                            null,
-                            null,
-                            null,
-                            false,
-                            singleResult.has(BODY_KEY) ?
-                                    (JSONObject) Utility.getStringPropertyAsJSON(
-                                            singleResult,
-                                            BODY_KEY,
-                                            GraphResponse.NON_JSON_RESPONSE_PROPERTY
-                                    ) : null,
-                            singleResult,
-                            batchResult,
-                            connection,
-                            null);
-                }
-            }
-        } catch (JSONException e) {
-        }
-        return null;
-    }
-
-    static synchronized FacebookRequestErrorClassification getErrorClassification() {
-        FacebookRequestErrorClassification errorClassification;
-        Utility.FetchedAppSettings appSettings =
-                Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
-        if (appSettings == null) {
-            return FacebookRequestErrorClassification.getDefaultErrorClassification();
-        }
-        return appSettings.getErrorClassification();
-    }
-
-    public void writeToParcel(Parcel out, int flags) {
-        out.writeInt(this.requestStatusCode);
-        out.writeInt(this.errorCode);
-        out.writeInt(this.subErrorCode);
-        out.writeString(this.errorType);
-        out.writeString(this.errorMessage);
-        out.writeString(this.errorUserTitle);
-        out.writeString(this.errorUserMessage);
-    }
-
-    public static final Parcelable.Creator<FacebookRequestError> CREATOR
-            = new Parcelable.Creator<FacebookRequestError>() {
-        public FacebookRequestError createFromParcel(Parcel in) {
-            return new FacebookRequestError(in);
-        }
-
-        public FacebookRequestError[] newArray(int size) {
-            return new FacebookRequestError[size];
-        }
-    };
-
-    private FacebookRequestError(Parcel in) {
-        this(
-            in.readInt(), //requestStatusCode
-            in.readInt(), //errorCode
-            in.readInt(), //subErrorCode
-            in.readString(), //errorType
-            in.readString(), //errorMessage
-            in.readString(), //errorUserTitle
-            in.readString(), //errorUserMessage
-            false, //errorIsTransient
-            null, //requestResultBody
-            null, //requestResult
-            null, //batchRequestResult
-            null, //connection
-            null //exception)
-        );
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    /**
-     * An enum that represents the Facebook SDK classification for the error that occurred.
-     */
-    public enum Category {
-        /**
-         * Indicates that the error is authentication related. The {@link
-         * com.facebook.login.LoginManager#resolveError(android.app.Activity, GraphResponse)} method
-         * or {@link com.facebook.login.LoginManager#resolveError(android.support.v4.app.Fragment,
-         * GraphResponse)} method can be called to recover from this error.
-         */
-        LOGIN_RECOVERABLE,
-
-        /**
-         * Indicates that the error is not transient or recoverable by the Facebook SDK.
-         */
-        OTHER,
-
-        /**
-         * Indicates that the error is transient, the request can be attempted again.
-         */
-        TRANSIENT,
-    };
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookSdk.java b/facebook/src/main/java/com/facebook/FacebookSdk.java
deleted file mode 100644
index 7ac235abd..000000000
--- a/facebook/src/main/java/com/facebook/FacebookSdk.java
+++ /dev/null
@@ -1,796 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.Signature;
-import android.os.AsyncTask;
-import android.util.Base64;
-import android.util.Log;
-
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AppEventsLoggerUtility;
-import com.facebook.internal.LockOnGetVariable;
-import com.facebook.internal.BoltsMeasurementEventListener;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.internal.WebDialog;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Set;
-import java.util.concurrent.*;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-
-/**
- * This class allows some customization of Facebook SDK behavior.
- */
-public final class FacebookSdk {
-    private static final String TAG = FacebookSdk.class.getCanonicalName();
-    private static final HashSet<LoggingBehavior> loggingBehaviors =
-            new HashSet<LoggingBehavior>(Arrays.asList(LoggingBehavior.DEVELOPER_ERRORS));
-    private static volatile Executor executor;
-    private static volatile String applicationId;
-    private static volatile String applicationName;
-    private static volatile String appClientToken;
-    private static volatile int webDialogTheme;
-    private static final String FACEBOOK_COM = "facebook.com";
-    private static volatile String facebookDomain = FACEBOOK_COM;
-    private static AtomicLong onProgressThreshold = new AtomicLong(65536);
-    private static volatile boolean isDebugEnabled = BuildConfig.DEBUG;
-    private static boolean isLegacyTokenUpgradeSupported = false;
-    private static LockOnGetVariable<File> cacheDir;
-    private static Context applicationContext;
-    private static final int DEFAULT_CORE_POOL_SIZE = 5;
-    private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
-    private static final int DEFAULT_KEEP_ALIVE = 1;
-    private static int callbackRequestCodeOffset = 0xface;
-    private static final Object LOCK = new Object();
-
-    private static final int MAX_REQUEST_CODE_RANGE = 100;
-
-    private static final String ATTRIBUTION_PREFERENCES = "com.facebook.sdk.attributionTracking";
-    private static final String PUBLISH_ACTIVITY_PATH = "%s/activities";
-
-    private static final BlockingQueue<Runnable> DEFAULT_WORK_QUEUE =
-            new LinkedBlockingQueue<Runnable>(10);
-
-    private static final ThreadFactory DEFAULT_THREAD_FACTORY = new ThreadFactory() {
-        private final AtomicInteger counter = new AtomicInteger(0);
-
-        public Thread newThread(Runnable runnable) {
-            return new Thread(runnable, "FacebookSdk #" + counter.incrementAndGet());
-        }
-    };
-
-    static final String CALLBACK_OFFSET_CHANGED_AFTER_INIT =
-            "The callback request code offset can't be updated once the SDK is initialized.";
-
-    static final String CALLBACK_OFFSET_NEGATIVE =
-            "The callback request code offset can't be negative.";
-
-
-    /**
-     * The key for the application ID in the Android manifest.
-     */
-    public static final String APPLICATION_ID_PROPERTY = "com.facebook.sdk.ApplicationId";
-
-    /**
-     * The key for the application name in the Android manifest.
-     */
-    public static final String APPLICATION_NAME_PROPERTY = "com.facebook.sdk.ApplicationName";
-
-    /**
-     * The key for the client token in the Android manifest.
-     */
-    public static final String CLIENT_TOKEN_PROPERTY = "com.facebook.sdk.ClientToken";
-
-    /**
-     * The key for the web dialog theme in the Android manifest.
-     */
-    public static final String WEB_DIALOG_THEME = "com.facebook.sdk.WebDialogTheme";
-
-    private static Boolean sdkInitialized = false;
-
-    /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
-     * @param applicationContext The application context
-     * @param callbackRequestCodeOffset The request code offset that Facebook activities will be
-     *                                  called with. Please do not use the range between the
-     *                                  value you set and another 100 entries after it in your
-     *                                  other requests.
-     */
-    public static synchronized void sdkInitialize(
-            Context applicationContext,
-            int callbackRequestCodeOffset) {
-        sdkInitialize(applicationContext, callbackRequestCodeOffset, null);
-    }
-
-    /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
-     * @param applicationContext The application context
-     * @param callbackRequestCodeOffset The request code offset that Facebook activities will be
-     *                                  called with. Please do not use the range between the
-     *                                  value you set and another 100 entries after it in your
-     *                                  other requests.
-     * @param callback A callback called when initialize finishes. This will be called even if the
-     *                 sdk is already initialized.
-     */
-    public static synchronized void sdkInitialize(
-            Context applicationContext,
-            int callbackRequestCodeOffset,
-            final InitializeCallback callback) {
-        if (sdkInitialized && callbackRequestCodeOffset != FacebookSdk.callbackRequestCodeOffset) {
-            throw new FacebookException(CALLBACK_OFFSET_CHANGED_AFTER_INIT);
-        }
-        if (callbackRequestCodeOffset < 0) {
-            throw new FacebookException(CALLBACK_OFFSET_NEGATIVE);
-        }
-        FacebookSdk.callbackRequestCodeOffset = callbackRequestCodeOffset;
-        sdkInitialize(applicationContext, callback);
-    }
-
-    /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
-     * @param applicationContext The application context
-     */
-    public static synchronized void sdkInitialize(Context applicationContext) {
-        FacebookSdk.sdkInitialize(applicationContext, null);
-    }
-
-    /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
-     * @param applicationContext The application context
-     * @param callback A callback called when initialize finishes. This will be called even if the
-     *                 sdk is already initialized.
-     */
-    public static synchronized void sdkInitialize(
-            final Context applicationContext,
-            final InitializeCallback callback) {
-        if (sdkInitialized) {
-            if (callback != null) {
-                callback.onInitialized();
-            }
-            return;
-        }
-
-        Validate.notNull(applicationContext, "applicationContext");
-
-        // Don't throw for these validations here, just log an error. We'll throw when we actually
-        // need them
-        Validate.hasFacebookActivity(applicationContext, false);
-        Validate.hasInternetPermissions(applicationContext, false);
-
-        FacebookSdk.applicationContext = applicationContext.getApplicationContext();
-
-        // Make sure we've loaded default settings if we haven't already.
-        FacebookSdk.loadDefaultsFromMetadata(FacebookSdk.applicationContext);
-
-        // Set sdkInitialized to true now so the bellow async tasks don't throw not initialized
-        // exceptions.
-        sdkInitialized = true;
-
-        // Load app settings from network so that dialog configs are available
-        Utility.loadAppSettingsAsync(FacebookSdk.applicationContext, applicationId);
-        // Fetch available protocol versions from the apps on the device
-        NativeProtocol.updateAllAvailableProtocolVersionsAsync();
-
-        BoltsMeasurementEventListener.getInstance(FacebookSdk.applicationContext);
-
-        cacheDir = new LockOnGetVariable<File>(
-                new Callable<File>() {
-                    @Override
-                    public File call() throws Exception {
-                        return FacebookSdk.applicationContext.getCacheDir();
-                    }
-                });
-
-        FutureTask<Void> futureTask =
-                new FutureTask<>(new Callable<Void>() {
-                    @Override
-                    public Void call() throws Exception {
-                        AccessTokenManager.getInstance().loadCurrentAccessToken();
-                        ProfileManager.getInstance().loadCurrentProfile();
-                        if (AccessToken.getCurrentAccessToken() != null &&
-                                Profile.getCurrentProfile() == null) {
-                            // Access token and profile went out of sync due to a network or caching
-                            // issue, retry
-                            Profile.fetchProfileForCurrentAccessToken();
-                        }
-
-                        if (callback != null) {
-                            callback.onInitialized();
-                        }
-
-                        // Flush any app events that might have been persisted during last run.
-                        AppEventsLogger.newLogger(
-                                applicationContext.getApplicationContext()).flush();
-
-                        return null;
-                    }
-                });
-        getExecutor().execute(futureTask);
-    }
-
-    /**
-     * Indicates whether the Facebook SDK has been initialized.
-     * @return true if initialized, false if not
-     */
-    public static synchronized boolean isInitialized() {
-        return sdkInitialized;
-    }
-
-    /**
-     * Certain logging behaviors are available for debugging beyond those that should be
-     * enabled in production.
-     *
-     * Returns the types of extended logging that are currently enabled.
-     *
-     * @return a set containing enabled logging behaviors
-     */
-    public static Set<LoggingBehavior> getLoggingBehaviors() {
-        synchronized (loggingBehaviors) {
-            return Collections.unmodifiableSet(new HashSet<LoggingBehavior>(loggingBehaviors));
-        }
-    }
-
-    /**
-     * Certain logging behaviors are available for debugging beyond those that should be
-     * enabled in production.
-     *
-     * Enables a particular extended logging in the SDK.
-     *
-     * @param behavior
-     *          The LoggingBehavior to enable
-     */
-    public static void addLoggingBehavior(LoggingBehavior behavior) {
-        synchronized (loggingBehaviors) {
-            loggingBehaviors.add(behavior);
-            updateGraphDebugBehavior();
-        }
-    }
-
-    /**
-     * Certain logging behaviors are available for debugging beyond those that should be
-     * enabled in production.
-     *
-     * Disables a particular extended logging behavior in the SDK.
-     *
-     * @param behavior
-     *          The LoggingBehavior to disable
-     */
-    public static void removeLoggingBehavior(LoggingBehavior behavior) {
-        synchronized (loggingBehaviors) {
-            loggingBehaviors.remove(behavior);
-        }
-    }
-
-    /**
-     * Certain logging behaviors are available for debugging beyond those that should be
-     * enabled in production.
-     *
-     * Disables all extended logging behaviors.
-     */
-    public static void clearLoggingBehaviors() {
-        synchronized (loggingBehaviors) {
-            loggingBehaviors.clear();
-        }
-    }
-
-    /**
-     * Certain logging behaviors are available for debugging beyond those that should be
-     * enabled in production.
-     *
-     * Checks if a particular extended logging behavior is enabled.
-     *
-     * @param behavior
-     *          The LoggingBehavior to check
-     * @return whether behavior is enabled
-     */
-    public static boolean isLoggingBehaviorEnabled(LoggingBehavior behavior) {
-        synchronized (loggingBehaviors) {
-            return FacebookSdk.isDebugEnabled() && loggingBehaviors.contains(behavior);
-        }
-    }
-
-    /**
-     * Indicates if we are in debug mode.
-     */
-    public static boolean isDebugEnabled() {
-        return isDebugEnabled;
-    }
-
-    /**
-     * Used to enable or disable logging, and other debug features. Defaults to BuildConfig.DEBUG.
-     * @param enabled Debug features (like logging) are enabled if true, disabled if false.
-     */
-    public static void setIsDebugEnabled(boolean enabled) {
-        isDebugEnabled = enabled;
-    }
-
-    /**
-     * Indicates if the SDK should fallback and read the legacy token. This is turned off by default
-     * for performance.
-     * @return if the legacy token upgrade is supported.
-     */
-    public static boolean isLegacyTokenUpgradeSupported() {
-        return isLegacyTokenUpgradeSupported;
-    }
-
-    private static void updateGraphDebugBehavior() {
-        if (loggingBehaviors.contains(LoggingBehavior.GRAPH_API_DEBUG_INFO)
-           && !loggingBehaviors.contains(LoggingBehavior.GRAPH_API_DEBUG_WARNING)) {
-            loggingBehaviors.add(LoggingBehavior.GRAPH_API_DEBUG_WARNING);
-        }
-    }
-
-    /**
-     * Setter for legacy token upgrade.
-     * @param supported True if upgrade should be supported.
-     */
-    public static void setLegacyTokenUpgradeSupported(boolean supported) {
-        isLegacyTokenUpgradeSupported = supported;
-    }
-
-    /**
-     * Returns the Executor used by the SDK for non-AsyncTask background work.
-     *
-     * By default this uses AsyncTask Executor via reflection if the API level is high enough.
-     * Otherwise this creates a new Executor with defaults similar to those used in AsyncTask.
-     *
-     * @return an Executor used by the SDK.  This will never be null.
-     */
-    public static Executor getExecutor() {
-        synchronized (LOCK) {
-            if (FacebookSdk.executor == null) {
-                FacebookSdk.executor = AsyncTask.THREAD_POOL_EXECUTOR;
-            }
-        }
-        return FacebookSdk.executor;
-    }
-
-    /**
-     * Sets the Executor used by the SDK for non-AsyncTask background work.
-     *
-     * @param executor
-     *          the Executor to use; must not be null.
-     */
-    public static void setExecutor(Executor executor) {
-        Validate.notNull(executor, "executor");
-        synchronized (LOCK) {
-            FacebookSdk.executor = executor;
-        }
-    }
-
-    /**
-     * Gets the base Facebook domain to use when making Web requests; in production code this will
-     * always be "facebook.com".
-     *
-     * @return the Facebook domain
-     */
-    public static String getFacebookDomain() {
-        return facebookDomain;
-    }
-
-    /**
-     * Sets the base Facebook domain to use when making Web requests. This defaults to
-     * "facebook.com", but may be overridden to, e.g., "beta.facebook.com" to direct requests at a
-     * different domain. This method should never be called from production code.
-     *
-     * @param facebookDomain the base domain to use instead of "facebook.com"
-     */
-    public static void setFacebookDomain(String facebookDomain) {
-        if (!BuildConfig.DEBUG) {
-            Log.w(TAG, "WARNING: Calling setFacebookDomain from non-DEBUG code.");
-        }
-
-        FacebookSdk.facebookDomain = facebookDomain;
-    }
-
-    /**
-     * The getter for the context of the current application.
-     * @return The context of the current application.
-     */
-    public static Context getApplicationContext() {
-        Validate.sdkInitialized();
-        return applicationContext;
-    }
-
-    /**
-     * This method is public in order to be used by app events, please don't use directly.
-     * @param context       The application context.
-     * @param applicationId The application id.
-     */
-    public static void publishInstallAsync(final Context context, final String applicationId) {
-        // grab the application context ahead of time, since we will return to the caller
-        // immediately.
-        final Context applicationContext = context.getApplicationContext();
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                FacebookSdk.publishInstallAndWaitForResponse(applicationContext, applicationId);
-            }
-        });
-    }
-
-    static GraphResponse publishInstallAndWaitForResponse(
-            final Context context,
-            final String applicationId) {
-        try {
-            if (context == null || applicationId == null) {
-                throw new IllegalArgumentException("Both context and applicationId must be non-null");
-            }
-            AttributionIdentifiers identifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
-            SharedPreferences preferences = context.getSharedPreferences(ATTRIBUTION_PREFERENCES, Context.MODE_PRIVATE);
-            String pingKey = applicationId+"ping";
-            String jsonKey = applicationId+"json";
-            long lastPing = preferences.getLong(pingKey, 0);
-            String lastResponseJSON = preferences.getString(jsonKey, null);
-
-            JSONObject publishParams;
-            try {
-                publishParams = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(
-                        AppEventsLoggerUtility.GraphAPIActivityType.MOBILE_INSTALL_EVENT,
-                        identifiers,
-                        AppEventsLogger.getAnonymousAppDeviceGUID(context),
-                        getLimitEventAndDataUsage(context),
-                        context);
-            } catch (JSONException e) {
-                throw new FacebookException("An error occurred while publishing install.", e);
-            }
-
-            String publishUrl = String.format(PUBLISH_ACTIVITY_PATH, applicationId);
-            GraphRequest publishRequest = GraphRequest.newPostRequest(null, publishUrl, publishParams, null);
-
-            if (lastPing != 0) {
-                JSONObject graphObject = null;
-                try {
-                    if (lastResponseJSON != null) {
-                        graphObject = new JSONObject(lastResponseJSON);
-                    }
-                }
-                catch (JSONException je) {
-                    // return the default graph object if there is any problem reading the data.
-                }
-                if (graphObject == null) {
-                    return GraphResponse.createResponsesFromString(
-                            "true",
-                            null,
-                            new GraphRequestBatch(publishRequest)
-                    ).get(0);
-                } else {
-                    return new GraphResponse(null, null, null, graphObject);
-                }
-
-            } else {
-
-                GraphResponse publishResponse = publishRequest.executeAndWait();
-
-                // denote success since no error threw from the post.
-                SharedPreferences.Editor editor = preferences.edit();
-                lastPing = System.currentTimeMillis();
-                editor.putLong(pingKey, lastPing);
-
-                // if we got an object response back, cache the string of the JSON.
-                if (publishResponse.getJSONObject() != null) {
-                    editor.putString(jsonKey, publishResponse.getJSONObject().toString());
-                }
-                editor.apply();
-
-                return publishResponse;
-            }
-        } catch (Exception e) {
-            // if there was an error, fall through to the failure case.
-            Utility.logd("Facebook-publish", e);
-            return new GraphResponse(null, null, new FacebookRequestError(null, e));
-        }
-    }
-
-    /**
-     * Returns the current version of the Facebook SDK for Android as a string.
-     *
-     * @return the current version of the SDK
-     */
-    public static String getSdkVersion() {
-        return FacebookSdkVersion.BUILD;
-    }
-
-    /**
-     * Returns whether data such as those generated through AppEventsLogger and sent to Facebook
-     * should be restricted from being used for purposes other than analytics and conversions, such
-     * as targeting ads to this user.  Defaults to false.  This value is stored on the device and
-     * persists across app launches.
-     *
-     * @param context  Used to read the value.
-     */
-    public static boolean getLimitEventAndDataUsage(Context context) {
-        Validate.sdkInitialized();
-        SharedPreferences preferences = context.getSharedPreferences(
-                AppEventsLogger.APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
-        return preferences.getBoolean("limitEventUsage", false);
-    }
-
-    /**
-     * Sets whether data such as those generated through AppEventsLogger and sent to Facebook should
-     * be restricted from being used for purposes other than analytics and conversions, such as
-     * targeting ads to this user.  Defaults to false.  This value is stored on the device and
-     * persists across app launches.  Changes to this setting will apply to app events currently
-     * queued to be flushed.
-     *
-     * @param context Used to persist this value across app runs.
-     */
-    public static void setLimitEventAndDataUsage(Context context, boolean limitEventUsage) {
-        context.getSharedPreferences(AppEventsLogger.APP_EVENT_PREFERENCES, Context.MODE_PRIVATE)
-            .edit()
-            .putBoolean("limitEventUsage", limitEventUsage)
-            .apply();
-    }
-
-    /**
-     * Gets the threshold used to report progress on requests.
-     */
-    public static long getOnProgressThreshold() {
-        Validate.sdkInitialized();
-        return onProgressThreshold.get();
-    }
-
-    /**
-     * Sets the threshold used to report progress on requests. Note that the value will be read when
-     * the request is started and cannot be changed during a request (or batch) execution.
-     *
-     * @param threshold The number of bytes progressed to force a callback.
-     */
-    public static void setOnProgressThreshold(long threshold) {
-        onProgressThreshold.set(threshold);
-    }
-
-    // Package private for testing only
-    static void loadDefaultsFromMetadata(Context context) {
-        if (context == null) {
-            return;
-        }
-
-        ApplicationInfo ai = null;
-        try {
-            ai = context.getPackageManager().getApplicationInfo(
-                    context.getPackageName(), PackageManager.GET_META_DATA);
-        } catch (PackageManager.NameNotFoundException e) {
-            return;
-        }
-
-        if (ai == null || ai.metaData == null) {
-            return;
-        }
-
-        if (applicationId == null) {
-            Object appId = ai.metaData.get(APPLICATION_ID_PROPERTY);
-            if (appId instanceof String) {
-                String appIdString = (String) appId;
-                if (appIdString.toLowerCase(Locale.ROOT).startsWith("fb")) {
-                    applicationId = appIdString.substring(2);
-                } else {
-                    applicationId = appIdString;
-                }
-            } else if (appId instanceof Integer) {
-                throw new FacebookException(
-                        "App Ids cannot be directly placed in the manifest." +
-                        "They must be prefixed by 'fb' or be placed in the string resource file.");
-            }
-        }
-
-        if (applicationName == null) {
-            applicationName = ai.metaData.getString(APPLICATION_NAME_PROPERTY);
-        }
-
-        if (appClientToken == null) {
-            appClientToken = ai.metaData.getString(CLIENT_TOKEN_PROPERTY);
-        }
-
-        if (webDialogTheme == 0) {
-            setWebDialogTheme(ai.metaData.getInt(WEB_DIALOG_THEME));
-        }
-    }
-
-    /**
-     * Internal call please don't use directly.
-     * @param context The application context.
-     * @return The application signature.
-     */
-    public static String getApplicationSignature(Context context) {
-        Validate.sdkInitialized();
-        if (context == null) {
-            return null;
-        }
-        PackageManager packageManager = context.getPackageManager();
-        if (packageManager == null) {
-            return null;
-        }
-
-        String packageName = context.getPackageName();
-        PackageInfo pInfo;
-        try {
-            pInfo = packageManager.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
-        } catch (PackageManager.NameNotFoundException e) {
-            return null;
-        }
-
-        Signature[] signatures = pInfo.signatures;
-        if (signatures == null || signatures.length == 0) {
-            return null;
-        }
-
-        MessageDigest md;
-        try {
-            md = MessageDigest.getInstance("SHA-1");
-        } catch (NoSuchAlgorithmException e) {
-            return null;
-        }
-
-        md.update(pInfo.signatures[0].toByteArray());
-        return Base64.encodeToString(md.digest(),  Base64.URL_SAFE | Base64.NO_PADDING);
-    }
-
-    /**
-     * Gets the Facebook application ID for the current app. This should only be called after the
-     * SDK has been initialized by calling FacebookSdk.sdkInitialize().
-     *
-     * @return the application ID
-     */
-    public static String getApplicationId() {
-        Validate.sdkInitialized();
-        return applicationId;
-    }
-
-    /**
-     * Sets the Facebook application ID for the current app.
-     * @param applicationId the application ID
-     */
-    public static void setApplicationId(String applicationId) {
-        FacebookSdk.applicationId = applicationId;
-    }
-
-    /**
-     * Gets the Facebook application name of the current app. This should only be called after the
-     * SDK has been initialized by calling FacebookSdk.sdkInitialize().
-     *
-     * @return the application name
-     */
-    public static String getApplicationName() {
-        Validate.sdkInitialized();
-        return applicationName;
-    }
-
-    /**
-     * Sets the Facebook application name for the current app.
-     * @param applicationName the application name
-     */
-    public static void setApplicationName(String applicationName) {
-        FacebookSdk.applicationName = applicationName;
-    }
-
-    /**
-     * Gets the client token for the current app. This will be null unless explicitly set or unless
-     * loadDefaultsFromMetadata has been called.
-     * @return the client token
-     */
-    public static String getClientToken() {
-        Validate.sdkInitialized();
-        return appClientToken;
-    }
-
-    /**
-     * Sets the Facebook client token for the current app.
-     * @param clientToken the client token
-     */
-    public static void setClientToken(String clientToken) {
-        appClientToken = clientToken;
-    }
-
-    /**
-     * Gets the theme used by {@link com.facebook.internal.WebDialog}
-     * @return the theme
-     */
-    public static int getWebDialogTheme() {
-        Validate.sdkInitialized();
-        return webDialogTheme;
-    }
-
-    /**
-     * Sets the theme used by {@link com.facebook.internal.WebDialog}
-     * @param theme A theme to use
-     */
-    public static void setWebDialogTheme(int theme) {
-        webDialogTheme = (theme != 0) ? theme : WebDialog.DEFAULT_THEME;
-    }
-
-    /**
-     * Gets the cache directory to use for caching responses, etc. The default will be the value
-     * returned by Context.getCacheDir() when the SDK was initialized, but it can be overridden.
-     *
-     * @return the cache directory
-     */
-    public static File getCacheDir() {
-        Validate.sdkInitialized();
-        return cacheDir.getValue();
-    }
-
-    /**
-     * Sets the cache directory to use for caching responses, etc.
-     * @param cacheDir the cache directory
-     */
-    public static void setCacheDir(File cacheDir) {
-        FacebookSdk.cacheDir = new LockOnGetVariable<File>(cacheDir);
-    }
-
-    /**
-     * Getter for the callback request code offset. The request codes starting at this offset and
-     * the next 100 values are used by the Facebook SDK.
-     *
-     * @return The callback request code offset.
-     */
-    public static int getCallbackRequestCodeOffset() {
-        Validate.sdkInitialized();
-        return callbackRequestCodeOffset;
-    }
-
-    /**
-     * Returns true if the request code is within the range used by Facebook SDK requests. This does
-     * not include request codes that you explicitly set on the dialogs, buttons or LoginManager.
-     * The range of request codes that the SDK uses starts at the callbackRequestCodeOffset and
-     * continues for the next 100 values.
-     *
-     * @param requestCode the request code to check.
-     * @return true if the request code is within the range used by the Facebook SDK.
-     */
-    public static boolean isFacebookRequestCode(int requestCode) {
-        return requestCode >= callbackRequestCodeOffset
-                && requestCode < callbackRequestCodeOffset + MAX_REQUEST_CODE_RANGE;
-    }
-
-    /**
-     * Callback passed to the sdkInitialize function.
-     */
-    public interface InitializeCallback {
-        /**
-         * Called when the sdk has been initialized.
-         */
-        void onInitialized();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkNotInitializedException.java b/facebook/src/main/java/com/facebook/FacebookSdkNotInitializedException.java
deleted file mode 100644
index 14e0c9176..000000000
--- a/facebook/src/main/java/com/facebook/FacebookSdkNotInitializedException.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * An Exception indicating that the Facebook SDK has not been correctly initialized.
- */
-public class FacebookSdkNotInitializedException extends FacebookException {
-    static final long serialVersionUID = 1;
-
-    /**
-     * Constructs a FacebookSdkNotInitializedException with no additional information.
-     */
-    public FacebookSdkNotInitializedException() {
-        super();
-    }
-
-    /**
-     * Constructs a FacebookSdkNotInitializedException with a message.
-     *
-     * @param message A String to be returned from getMessage.
-     */
-    public FacebookSdkNotInitializedException(String message) {
-        super(message);
-    }
-
-    /**
-     * Constructs a FacebookSdkNotInitializedException with a message and inner error.
-     *
-     * @param message   A String to be returned from getMessage.
-     * @param throwable A Throwable to be returned from getCause.
-     */
-    public FacebookSdkNotInitializedException(String message, Throwable throwable) {
-        super(message, throwable);
-    }
-
-    /**
-     * Constructs a FacebookSdkNotInitializedException with an inner error.
-     *
-     * @param throwable A Throwable to be returned from getCause.
-     */
-    public FacebookSdkNotInitializedException(Throwable throwable) {
-        super(throwable);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
deleted file mode 100644
index 9ce152301..000000000
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-final class FacebookSdkVersion {
-    public static final String BUILD = "4.15.0";
-}
diff --git a/facebook/src/main/java/com/facebook/FacebookServiceException.java b/facebook/src/main/java/com/facebook/FacebookServiceException.java
deleted file mode 100644
index 709b15fe2..000000000
--- a/facebook/src/main/java/com/facebook/FacebookServiceException.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Represents an error returned from the Facebook service in response to a request.
- */
-public class FacebookServiceException extends FacebookException {
-
-    private final FacebookRequestError error;
-
-    private static final long serialVersionUID = 1;
-
-    /**
-     * Constructs a new FacebookServiceException.
-     *
-     * @param error the error from the request
-     */
-    public FacebookServiceException(FacebookRequestError error, String errorMessage) {
-        super(errorMessage);
-        this.error = error;
-    }
-
-    /**
-     * Returns an object that encapsulates complete information representing the error returned by Facebook.
-     *
-     * @return complete information representing the error.
-     */
-    public final FacebookRequestError getRequestError() {
-        return error;
-    }
-
-    @Override
-    public final String toString() {
-        return new StringBuilder()
-                .append("{FacebookServiceException: ")
-                .append("httpResponseCode: ")
-                .append(error.getRequestStatusCode())
-                .append(", facebookErrorCode: ")
-                .append(error.getErrorCode())
-                .append(", facebookErrorType: ")
-                .append(error.getErrorType())
-                .append(", message: ")
-                .append(error.getErrorMessage())
-                .append("}")
-                .toString();
-    }
-
-}
diff --git a/facebook/src/main/java/com/facebook/GraphRequest.java b/facebook/src/main/java/com/facebook/GraphRequest.java
deleted file mode 100644
index fb837c983..000000000
--- a/facebook/src/main/java/com/facebook/GraphRequest.java
+++ /dev/null
@@ -1,2408 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.location.Location;
-import android.net.Uri;
-import android.os.*;
-import android.text.TextUtils;
-import android.util.Log;
-import android.util.Pair;
-
-import com.facebook.internal.*;
-import com.facebook.share.internal.OpenGraphJSONUtility;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.SharePhoto;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.*;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.net.URLEncoder;
-import java.text.SimpleDateFormat;
-import java.util.*;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.zip.GZIPOutputStream;
-
-/**
- * <p>
- * A single request to be sent to the Facebook Platform through the <a
- * href="https://developers.facebook.com/docs/reference/api/">Graph API</a>. The Request class
- * provides functionality relating to serializing and deserializing requests and responses, making
- * calls in batches (with a single round-trip to the service) and making calls asynchronously.
- * </p>
- * <p>
- * The particular service endpoint that a request targets is determined by a graph path (see the
- * {@link #setGraphPath(String) setGraphPath} method).
- * </p>
- * <p>
- * A Request can be executed either anonymously or representing an authenticated user. In the former
- * case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided.
- * If requests are executed in a batch, a Facebook application ID must be associated with the batch,
- * either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling
- * the {@link #setDefaultBatchApplicationId(String) setDefaultBatchApplicationId} method.
- * </p>
- * <p>
- * After completion of a request, the AccessToken, if not null and taken from AccessTokenManager,
- * will be checked to determine if its Facebook access token needs to be extended; if so, a request
- * to extend it will be issued in the background.
- * </p>
- */
-public class GraphRequest {
-    /**
-     * The maximum number of requests that can be submitted in a single batch. This limit is
-     * enforced on the service side by the Facebook platform, not by the Request class.
-     */
-    public static final int MAXIMUM_BATCH_SIZE = 50;
-
-    public static final String TAG = GraphRequest.class.getSimpleName();
-
-    private static final String VIDEOS_SUFFIX = "/videos";
-    private static final String ME = "me";
-    private static final String MY_FRIENDS = "me/friends";
-    private static final String MY_PHOTOS = "me/photos";
-    private static final String SEARCH = "search";
-    private static final String USER_AGENT_BASE = "FBAndroidSDK";
-    private static final String USER_AGENT_HEADER = "User-Agent";
-    private static final String CONTENT_TYPE_HEADER = "Content-Type";
-    private static final String ACCEPT_LANGUAGE_HEADER = "Accept-Language";
-    private static final String CONTENT_ENCODING_HEADER = "Content-Encoding";
-
-    // Parameter names/values
-    private static final String FORMAT_PARAM = "format";
-    private static final String FORMAT_JSON = "json";
-    private static final String SDK_PARAM = "sdk";
-    private static final String SDK_ANDROID = "android";
-    public static final String ACCESS_TOKEN_PARAM = "access_token";
-    private static final String BATCH_ENTRY_NAME_PARAM = "name";
-    private static final String BATCH_ENTRY_OMIT_RESPONSE_ON_SUCCESS_PARAM =
-            "omit_response_on_success";
-    private static final String BATCH_ENTRY_DEPENDS_ON_PARAM = "depends_on";
-    private static final String BATCH_APP_ID_PARAM = "batch_app_id";
-    private static final String BATCH_RELATIVE_URL_PARAM = "relative_url";
-    private static final String BATCH_BODY_PARAM = "body";
-    private static final String BATCH_METHOD_PARAM = "method";
-    private static final String BATCH_PARAM = "batch";
-    private static final String ATTACHMENT_FILENAME_PREFIX = "file";
-    private static final String ATTACHED_FILES_PARAM = "attached_files";
-    private static final String ISO_8601_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ssZ";
-    private static final String DEBUG_PARAM = "debug";
-    private static final String DEBUG_SEVERITY_INFO = "info";
-    private static final String DEBUG_SEVERITY_WARNING = "warning";
-    private static final String DEBUG_KEY = "__debug__";
-    private static final String DEBUG_MESSAGES_KEY = "messages";
-    private static final String DEBUG_MESSAGE_KEY = "message";
-    private static final String DEBUG_MESSAGE_TYPE_KEY = "type";
-    private static final String DEBUG_MESSAGE_LINK_KEY = "link";
-    private static final String PICTURE_PARAM = "picture";
-    private static final String CAPTION_PARAM = "caption";
-
-    public static final String FIELDS_PARAM = "fields";
-
-    private static final String MIME_BOUNDARY = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";
-    private static final String GRAPH_PATH_FORMAT = "%s/%s";
-
-    private static String defaultBatchApplicationId;
-
-    // Group 1 in the pattern is the path without the version info
-    private static Pattern versionPattern = Pattern.compile("^/?v\\d+\\.\\d+/(.*)");
-
-    private AccessToken accessToken;
-    private HttpMethod httpMethod;
-    private String graphPath;
-    private JSONObject graphObject;
-    private String batchEntryName;
-    private String batchEntryDependsOn;
-    private boolean batchEntryOmitResultOnSuccess = true;
-    private Bundle parameters;
-    private Callback callback;
-    private String overriddenURL;
-    private Object tag;
-    private String version;
-    private boolean skipClientToken = false;
-
-    /**
-     * Constructs a request without an access token, graph path, or any other parameters.
-     */
-    public GraphRequest() {
-        this(null, null, null, null, null);
-    }
-
-    /**
-     * Constructs a request with an access token to retrieve a particular graph path.
-     * An access token need not be provided, in which case the request is sent without an access
-     * token and thus is not executed in the context of any particular user. Only certain graph
-     * requests can be expected to succeed in this case.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to retrieve
-     */
-    public GraphRequest(AccessToken accessToken, String graphPath) {
-        this(accessToken, graphPath, null, null, null);
-    }
-
-    /**
-     * Constructs a request with a specific AccessToken, graph path, parameters, and HTTP method. An
-     * access token need not be provided, in which case the request is sent without an access token
-     * and thus is not executed in the context of any particular user. Only certain graph requests
-     * can be expected to succeed in this case.
-     * <p/>
-     * Depending on the httpMethod parameter, the object at the graph path may be retrieved,
-     * created, or deleted.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to retrieve, create, or delete
-     * @param parameters  additional parameters to pass along with the Graph API request; parameters
-     *                    must be Strings, Numbers, Bitmaps, Dates, or Byte arrays.
-     * @param httpMethod  the {@link HttpMethod} to use for the request, or null for default
-     *                    (HttpMethod.GET)
-     */
-    public GraphRequest(
-            AccessToken accessToken,
-            String graphPath,
-            Bundle parameters,
-            HttpMethod httpMethod) {
-        this(accessToken, graphPath, parameters, httpMethod, null);
-    }
-
-    /**
-     * Constructs a request with a specific access token, graph path, parameters, and HTTP method.
-     * An access token need not be provided, in which case the request is sent without an access
-     * token and thus is not executed in the context of any particular user. Only certain graph
-     * requests can be expected to succeed in this case.
-     * <p/>
-     * Depending on the httpMethod parameter, the object at the graph path may be retrieved,
-     * created, or deleted.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to retrieve, create, or delete
-     * @param parameters  additional parameters to pass along with the Graph API request; parameters
-     *                    must be Strings, Numbers, Bitmaps, Dates, or Byte arrays.
-     * @param httpMethod  the {@link HttpMethod} to use for the request, or null for default
-     *                    (HttpMethod.GET)
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     */
-    public GraphRequest(
-            AccessToken accessToken,
-            String graphPath,
-            Bundle parameters,
-            HttpMethod httpMethod,
-            Callback callback) {
-        this(accessToken, graphPath, parameters, httpMethod, callback, null);
-    }
-
-    /**
-     * Constructs a request with a specific access token, graph path, parameters, and HTTP method.
-     * An access token need not be provided, in which case the request is sent without an access
-     * token and thus is not executed in the context of any particular user. Only certain graph
-     * requests can be expected to succeed in this case.
-     * <p/>
-     * Depending on the httpMethod parameter, the object at the graph path may be retrieved,
-     * created, or deleted.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to retrieve, create, or delete
-     * @param parameters  additional parameters to pass along with the Graph API request; parameters
-     *                    must be Strings, Numbers, Bitmaps, Dates, or Byte arrays.
-     * @param httpMethod  the {@link HttpMethod} to use for the request, or null for default
-     *                    (HttpMethod.GET)
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @param version     the version of the Graph API
-     */
-    public GraphRequest(
-            AccessToken accessToken,
-            String graphPath,
-            Bundle parameters,
-            HttpMethod httpMethod,
-            Callback callback,
-            String version) {
-        this.accessToken = accessToken;
-        this.graphPath = graphPath;
-        this.version = version;
-
-        setCallback(callback);
-        setHttpMethod(httpMethod);
-
-        if (parameters != null) {
-            this.parameters = new Bundle(parameters);
-        } else {
-            this.parameters = new Bundle();
-        }
-
-        if (this.version == null) {
-            this.version = ServerProtocol.getAPIVersion();
-        }
-    }
-
-    GraphRequest(AccessToken accessToken, URL overriddenURL) {
-        this.accessToken = accessToken;
-        this.overriddenURL = overriddenURL.toString();
-
-        setHttpMethod(HttpMethod.GET);
-
-        this.parameters = new Bundle();
-    }
-
-    /**
-     * Creates a new Request configured to delete a resource through the Graph API.
-     *
-     * @param accessToken the access token to use, or null
-     * @param id          the id of the object to delete
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newDeleteObjectRequest(
-            AccessToken accessToken,
-            String id,
-            Callback callback) {
-        return new GraphRequest(accessToken, id, null, HttpMethod.DELETE, callback);
-    }
-
-    /**
-     * Creates a new Request configured to retrieve a user's own profile.
-     *
-     * @param accessToken the access token to use, or null
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newMeRequest(
-            AccessToken accessToken,
-            final GraphJSONObjectCallback callback) {
-        Callback wrapper = new Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                if (callback != null) {
-                    callback.onCompleted(response.getJSONObject(), response);
-                }
-            }
-        };
-        return new GraphRequest(accessToken, ME, null, null, wrapper);
-    }
-
-    /**
-     * Creates a new Request configured to post a GraphObject to a particular graph path, to either
-     * create or update the object at that path.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to retrieve, create, or delete
-     * @param graphObject the graph object to create or update
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newPostRequest(
-            AccessToken accessToken,
-            String graphPath,
-            JSONObject graphObject,
-            Callback callback) {
-        GraphRequest request = new GraphRequest(
-                accessToken,
-                graphPath,
-                null,
-                HttpMethod.POST,
-                callback);
-        request.setGraphObject(graphObject);
-        return request;
-    }
-
-    /**
-     * Creates a new Request configured to retrieve a user's friend list.
-     *
-     * @param accessToken the access token to use, or null
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newMyFriendsRequest(
-            AccessToken accessToken,
-            final GraphJSONArrayCallback callback) {
-        Callback wrapper = new Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                if (callback != null) {
-                    JSONObject result = response.getJSONObject();
-                    JSONArray data = result != null ? result.optJSONArray("data") : null;
-                    callback.onCompleted(data, response);
-                }
-            }
-        };
-        return new GraphRequest(accessToken, MY_FRIENDS, null, null, wrapper);
-    }
-
-    /**
-     * Creates a new Request configured to retrieve a particular graph path.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to retrieve
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newGraphPathRequest(
-            AccessToken accessToken,
-            String graphPath,
-            Callback callback) {
-        return new GraphRequest(accessToken, graphPath, null, null, callback);
-    }
-
-    /**
-     * Creates a new Request that is configured to perform a search for places near a specified
-     * location via the Graph API. At least one of location or searchText must be specified.
-     *
-     * @param accessToken    the access token to use, or null
-     * @param location       the location around which to search; only the latitude and longitude
-     *                       components of the location are meaningful
-     * @param radiusInMeters the radius around the location to search, specified in meters; this is
-     *                       ignored if no location is specified
-     * @param resultsLimit   the maximum number of results to return
-     * @param searchText     optional text to search for as part of the name or type of an object
-     * @param callback       a callback that will be called when the request is completed to handle
-     *                       success or error conditions
-     * @return a Request that is ready to execute
-     * @throws FacebookException If neither location nor searchText is specified
-     */
-    public static GraphRequest newPlacesSearchRequest(
-            AccessToken accessToken,
-            Location location,
-            int radiusInMeters,
-            int resultsLimit,
-            String searchText,
-            final GraphJSONArrayCallback callback) {
-        if (location == null && Utility.isNullOrEmpty(searchText)) {
-            throw new FacebookException("Either location or searchText must be specified.");
-        }
-
-        Bundle parameters = new Bundle(5);
-        parameters.putString("type", "place");
-        parameters.putInt("limit", resultsLimit);
-        if (location != null) {
-            parameters.putString("center",
-                    String.format(
-                            Locale.US,
-                            "%f,%f",
-                            location.getLatitude(),
-                            location.getLongitude()));
-            parameters.putInt("distance", radiusInMeters);
-        }
-        if (!Utility.isNullOrEmpty(searchText)) {
-            parameters.putString("q", searchText);
-        }
-
-        Callback wrapper = new Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                if (callback != null) {
-                    JSONObject result = response.getJSONObject();
-                    JSONArray data = result != null ? result.optJSONArray("data") : null;
-                    callback.onCompleted(data, response);
-                }
-            }
-        };
-
-        return new GraphRequest(accessToken, SEARCH, parameters, HttpMethod.GET, wrapper);
-    }
-
-
-    /**
-     * Creates a new Request configured to upload a photo to the specified graph path.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to use, defaults to me/photos
-     * @param image       the bitmap image to upload
-     * @param caption     the user generated caption for the photo, can be null
-     * @param params      the parameters, can be null
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions, can be null
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newUploadPhotoRequest(
-            AccessToken accessToken,
-            String graphPath,
-            Bitmap image,
-            String caption,
-            Bundle params,
-            Callback callback) {
-        graphPath = getDefaultPhotoPathIfNull(graphPath);
-        Bundle parameters = new Bundle();
-        if (params != null) {
-            parameters.putAll(params);
-        }
-        parameters.putParcelable(PICTURE_PARAM, image);
-        if (caption != null && !caption.isEmpty()) {
-            parameters.putString(CAPTION_PARAM, caption);
-        }
-
-        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload a photo to the specified graph path. The
-     * photo will be read from the specified file.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to use, defaults to me/photos
-     * @param file        the file containing the photo to upload
-     * @param caption     the user generated caption for the photo, can be null
-     * @param params      the parameters, can be null
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions, can be null
-     * @return a Request that is ready to execute
-     * @throws java.io.FileNotFoundException if the file doesn't exist
-     */
-    public static GraphRequest newUploadPhotoRequest(
-            AccessToken accessToken,
-            String graphPath,
-            File file,
-            String caption,
-            Bundle params,
-            Callback callback
-    ) throws FileNotFoundException {
-        graphPath = getDefaultPhotoPathIfNull(graphPath);
-        ParcelFileDescriptor descriptor =
-                ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
-        Bundle parameters = new Bundle();
-        if (params != null) {
-            parameters.putAll(params);
-        }
-        parameters.putParcelable(PICTURE_PARAM, descriptor);
-        if (caption != null && !caption.isEmpty()) {
-            parameters.putString(CAPTION_PARAM, caption);
-        }
-
-        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload a photo to the specified graph path. The
-     * photo will be read from the specified Uri.
-     *
-     * @param accessToken the access token to use, or null
-     * @param graphPath   the graph path to use, defaults to me/photos
-     * @param photoUri    the file:// or content:// Uri to the photo on device
-     * @param caption     the user generated caption for the photo, can be null
-     * @param params      the parameters, can be null
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions, can be null
-     * @return a Request that is ready to execute
-     * @throws FileNotFoundException if the Uri does not exist
-     */
-    public static GraphRequest newUploadPhotoRequest(
-            AccessToken accessToken,
-            String graphPath,
-            Uri photoUri,
-            String caption,
-            Bundle params,
-            Callback callback)
-            throws FileNotFoundException {
-        graphPath = getDefaultPhotoPathIfNull(graphPath);
-        if (Utility.isFileUri(photoUri)) {
-            return newUploadPhotoRequest(
-                    accessToken,
-                    graphPath,
-                    new File(photoUri.getPath()),
-                    caption,
-                    params,
-                    callback);
-        } else if (!Utility.isContentUri(photoUri)) {
-            throw new FacebookException("The photo Uri must be either a file:// or content:// Uri");
-        }
-
-        Bundle parameters = new Bundle();
-        if (params != null) {
-            parameters.putAll(params);
-        }
-        parameters.putParcelable(PICTURE_PARAM, photoUri);
-
-        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
-    }
-
-
-    /**
-     * Creates a new Request configured to retrieve an App User ID for the app's Facebook user.
-     * Callers will send this ID back to their own servers, collect up a set to create a Facebook
-     * Custom Audience with, and then use the resultant Custom Audience to target ads.
-     * <p/>
-     * The GraphObject in the response will include a "custom_audience_third_party_id" property,
-     * with the value being the ID retrieved.  This ID is an encrypted encoding of the Facebook
-     * user's ID and the invoking Facebook app ID.  Multiple calls with the same user will return
-     * different IDs, thus these IDs cannot be used to correlate behavior across devices or
-     * applications, and are only meaningful when sent back to Facebook for creating Custom
-     * Audiences.
-     * <p/>
-     * The ID retrieved represents the Facebook user identified in the following way: if the
-     * specified access token (or active access token if `null`) is valid, the ID will represent the
-     * user associated with the active access token; otherwise the ID will represent the user logged
-     * into the native Facebook app on the device. A `null` ID will be provided into the callback if
-     * a) there is no native Facebook app, b) no one is logged into it, or c) the app has previously
-     * called {@link FacebookSdk#setLimitEventAndDataUsage(android.content.Context, boolean)} ;}
-     * with `true` for this user. <b>You must call this method from a background thread for it to
-     * work properly.</b>
-     *
-     * @param accessToken   the access token to issue the Request on, or null If there is no
-     *                      logged-in Facebook user, null is the expected choice.
-     * @param context       the Application context from which the app ID will be pulled, and from
-     *                      which the 'attribution ID' for the Facebook user is determined.  If
-     *                      there has been no app ID set, an exception will be thrown.
-     * @param applicationId explicitly specified Facebook App ID.  If null, the application ID from
-     *                      the access token will be used, if any; if not, the application ID from
-     *                      metadata will be used.
-     * @param callback      a callback that will be called when the request is completed to handle
-     *                      success or error conditions. The GraphObject in the Response will
-     *                      contain a "custom_audience_third_party_id" property that represents the
-     *                      user as described above.
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newCustomAudienceThirdPartyIdRequest(AccessToken accessToken,
-                                                                    Context context,
-                                                                    String applicationId,
-                                                                    Callback callback) {
-
-        if (applicationId == null && accessToken != null) {
-            applicationId = accessToken.getApplicationId();
-        }
-
-        if (applicationId == null) {
-            applicationId = Utility.getMetadataApplicationId(context);
-        }
-
-        if (applicationId == null) {
-            throw new FacebookException("Facebook App ID cannot be determined");
-        }
-
-        String endpoint = applicationId + "/custom_audience_third_party_id";
-        AttributionIdentifiers attributionIdentifiers =
-                AttributionIdentifiers.getAttributionIdentifiers(context);
-        Bundle parameters = new Bundle();
-
-        if (accessToken == null) {
-            if (attributionIdentifiers == null) {
-                throw new FacebookException(
-                        "There is no access token and attribution identifiers could not be " +
-                                "retrieved");
-            }
-
-            // Only use the attributionID if we don't have an access token.  If we do, then the user
-            // token will be used to identify the user, and is more reliable than the attributionID.
-            String udid = attributionIdentifiers.getAttributionId() != null
-                    ? attributionIdentifiers.getAttributionId()
-                    : attributionIdentifiers.getAndroidAdvertiserId();
-            if (attributionIdentifiers.getAttributionId() != null) {
-                parameters.putString("udid", udid);
-            }
-        }
-
-        // Server will choose to not provide the App User ID in the event that event usage has been
-        // limited for this user for this app.
-        if (FacebookSdk.getLimitEventAndDataUsage(context)
-                || (attributionIdentifiers != null && attributionIdentifiers.isTrackingLimited())) {
-            parameters.putString("limit_event_usage", "1");
-        }
-
-        return new GraphRequest(accessToken, endpoint, parameters, HttpMethod.GET, callback);
-    }
-
-    /**
-     * Creates a new Request configured to retrieve an App User ID for the app's Facebook user.
-     * Callers will send this ID back to their own servers, collect up a set to create a Facebook
-     * Custom Audience with, and then use the resultant Custom Audience to target ads.
-     * <p/>
-     * The GraphObject in the response will include a "custom_audience_third_party_id" property,
-     * with the value being the ID retrieved.  This ID is an encrypted encoding of the Facebook
-     * user's ID and the invoking Facebook app ID.  Multiple calls with the same user will return
-     * different IDs, thus these IDs cannot be used to correlate behavior across devices or
-     * applications, and are only meaningful when sent back to Facebook for creating Custom
-     * Audiences.
-     * <p/>
-     * The ID retrieved represents the Facebook user identified in the following way: if the
-     * specified access token (or active access token if `null`) is valid, the ID will represent the
-     * user associated with the active access token; otherwise the ID will represent the user logged
-     * into the native Facebook app on the device. A `null` ID will be provided into the callback if
-     * a) there is no native Facebook app, b) no one is logged into it, or c) the app has previously
-     * called {@link FacebookSdk#setLimitEventAndDataUsage(android.content.Context, boolean)} with
-     * `true` for this user. <b>You must call this method from a background thread for it to work
-     * properly.</b>
-     *
-     * @param accessToken the access token to issue the Request on, or null If there is no logged-in
-     *                    Facebook user, null is the expected choice.
-     * @param context     the Application context from which the app ID will be pulled, and from
-     *                    which the 'attribution ID' for the Facebook user is determined.  If there
-     *                    has been no app ID set, an exception will be thrown.
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions. The GraphObject in the Response will contain
-     *                    a "custom_audience_third_party_id" property that represents the user as
-     *                    described above.
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newCustomAudienceThirdPartyIdRequest(
-            AccessToken accessToken,
-            Context context,
-            Callback callback) {
-        return newCustomAudienceThirdPartyIdRequest(accessToken, context, null, callback);
-    }
-
-    /**
-     * Returns the GraphObject, if any, associated with this request.
-     *
-     * @return the GraphObject associated with this request, or null if there is none
-     */
-    public final JSONObject getGraphObject() {
-        return this.graphObject;
-    }
-
-    /**
-     * Sets the GraphObject associated with this request. This is meaningful only for POST
-     * requests.
-     *
-     * @param graphObject the GraphObject to upload along with this request
-     */
-    public final void setGraphObject(JSONObject graphObject) {
-        this.graphObject = graphObject;
-    }
-
-    /**
-     * Returns the graph path of this request, if any.
-     *
-     * @return the graph path of this request, or null if there is none
-     */
-    public final String getGraphPath() {
-        return this.graphPath;
-    }
-
-    /**
-     * Sets the graph path of this request.
-     *
-     * @param graphPath the graph path for this request
-     */
-    public final void setGraphPath(String graphPath) {
-        this.graphPath = graphPath;
-    }
-
-    /**
-     * Returns the {@link HttpMethod} to use for this request.
-     *
-     * @return the HttpMethod
-     */
-    public final HttpMethod getHttpMethod() {
-        return this.httpMethod;
-    }
-
-    /**
-     * Sets the {@link HttpMethod} to use for this request.
-     *
-     * @param httpMethod the HttpMethod, or null for the default (HttpMethod.GET).
-     */
-    public final void setHttpMethod(HttpMethod httpMethod) {
-        if (overriddenURL != null && httpMethod != HttpMethod.GET) {
-            throw new FacebookException("Can't change HTTP method on request with overridden URL.");
-        }
-        this.httpMethod = (httpMethod != null) ? httpMethod : HttpMethod.GET;
-    }
-
-    /**
-     * Returns the version of the API that this request will use.  By default this is the current
-     * API at the time the SDK is released.
-     *
-     * @return the version that this request will use
-     */
-    public final String getVersion() {
-        return this.version;
-    }
-
-    /**
-     * Set the version to use for this request.  By default the version will be the current API at
-     * the time the SDK is released.  Only use this if you need to explicitly override.
-     *
-     * @param version The version to use.  Should look like "v2.0"
-     */
-    public final void setVersion(String version) {
-        this.version = version;
-    }
-
-    /**
-     * This is an internal function that is not meant to be used by developers.
-     */
-    public final void setSkipClientToken(boolean skipClientToken) {
-        this.skipClientToken = skipClientToken;
-    }
-
-    /**
-     * Returns the parameters for this request.
-     *
-     * @return the parameters
-     */
-    public final Bundle getParameters() {
-        return this.parameters;
-    }
-
-    /**
-     * Sets the parameters for this request.
-     *
-     * @param parameters the parameters
-     */
-    public final void setParameters(Bundle parameters) {
-        this.parameters = parameters;
-    }
-
-    /**
-     * Returns the access token associated with this request.
-     *
-     * @return the access token associated with this request, or null if none has been specified
-     */
-    public final AccessToken getAccessToken() {
-        return this.accessToken;
-    }
-
-    /**
-     * Sets the access token to use for this request.
-     *
-     * @param accessToken the access token to use for this request
-     */
-    public final void setAccessToken(AccessToken accessToken) {
-        this.accessToken = accessToken;
-    }
-
-    /**
-     * Returns the name of this requests entry in a batched request.
-     *
-     * @return the name of this requests batch entry, or null if none has been specified
-     */
-    public final String getBatchEntryName() {
-        return this.batchEntryName;
-    }
-
-    /**
-     * Sets the name of this request's entry in a batched request. This value is only used if this
-     * request is submitted as part of a batched request. It can be used to specified dependencies
-     * between requests.
-     * See <a href="https://developers.facebook.com/docs/reference/api/batch/">Batch Requests</a> in
-     * the Graph API documentation for more details.
-     *
-     * @param batchEntryName the name of this requests entry in a batched request, which must be
-     *                       unique within a particular batch of requests
-     */
-    public final void setBatchEntryName(String batchEntryName) {
-        this.batchEntryName = batchEntryName;
-    }
-
-    /**
-     * Returns the name of the request that this request entry explicitly depends on in a batched
-     * request.
-     *
-     * @return the name of this requests dependency, or null if none has been specified
-     */
-    public final String getBatchEntryDependsOn() {
-        return this.batchEntryDependsOn;
-    }
-
-    /**
-     * Sets the name of the request entry that this request explicitly depends on in a batched
-     * request. This value is only used if this request is submitted as part of a batched request.
-     * It can be used to specified dependencies between requests. See <a
-     * href="https://developers.facebook.com/docs/reference/api/batch/">Batch Requests</a> in the
-     * Graph API documentation for more details.
-     *
-     * @param batchEntryDependsOn the name of the request entry that this entry depends on in a
-     *                            batched request
-     */
-    public final void setBatchEntryDependsOn(String batchEntryDependsOn) {
-        this.batchEntryDependsOn = batchEntryDependsOn;
-    }
-
-
-    /**
-     * Returns whether or not this batch entry will return a response if it is successful. Only
-     * applies if another request entry in the batch specifies this entry as a dependency.
-     *
-     * @return the name of this requests dependency, or null if none has been specified
-     */
-    public final boolean getBatchEntryOmitResultOnSuccess() {
-        return this.batchEntryOmitResultOnSuccess;
-    }
-
-    /**
-     * Sets whether or not this batch entry will return a response if it is successful. Only applies
-     * if another request entry in the batch specifies this entry as a dependency. See <a
-     * href="https://developers.facebook.com/docs/reference/api/batch/">Batch Requests</a> in the
-     * Graph API documentation for more details.
-     *
-     * @param batchEntryOmitResultOnSuccess the name of the request entry that this entry depends on
-     *                                      in a batched request
-     */
-    public final void setBatchEntryOmitResultOnSuccess(boolean batchEntryOmitResultOnSuccess) {
-        this.batchEntryOmitResultOnSuccess = batchEntryOmitResultOnSuccess;
-    }
-
-    /**
-     * Gets the default Facebook application ID that will be used to submit batched requests.
-     * Batched requests require an application ID, so either at least one request in a batch must
-     * provide an access token or the application ID must be specified explicitly.
-     *
-     * @return the Facebook application ID to use for batched requests if none can be determined
-     */
-    public static final String getDefaultBatchApplicationId() {
-        return GraphRequest.defaultBatchApplicationId;
-    }
-
-    /**
-     * Sets the default application ID that will be used to submit batched requests if none of those
-     * requests specifies an access token. Batched requests require an application ID, so either at
-     * least one request in a batch must specify an access token or the application ID must be
-     * specified explicitly.
-     *
-     * @param applicationId the Facebook application ID to use for batched requests if none can
-     *                      be determined
-     */
-    public static final void setDefaultBatchApplicationId(String applicationId) {
-        defaultBatchApplicationId = applicationId;
-    }
-
-    /**
-     * Returns the callback which will be called when the request finishes.
-     *
-     * @return the callback
-     */
-    public final Callback getCallback() {
-        return callback;
-    }
-
-    /**
-     * Sets the callback which will be called when the request finishes.
-     *
-     * @param callback the callback
-     */
-    public final void setCallback(final Callback callback) {
-        // Wrap callback to parse debug response if Graph Debug Mode is Enabled.
-        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.GRAPH_API_DEBUG_INFO)
-                || FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.GRAPH_API_DEBUG_WARNING)) {
-            Callback wrapper = new Callback() {
-                @Override
-                public void onCompleted(GraphResponse response) {
-                    JSONObject responseObject = response.getJSONObject();
-                    JSONObject debug =
-                            responseObject != null ? responseObject.optJSONObject(DEBUG_KEY) : null;
-                    JSONArray debugMessages =
-                            debug != null ? debug.optJSONArray(DEBUG_MESSAGES_KEY) : null;
-                    if (debugMessages != null) {
-                        for (int i = 0; i < debugMessages.length(); ++i) {
-                            JSONObject debugMessageObject = debugMessages.optJSONObject(i);
-                            String debugMessage = debugMessageObject != null
-                                    ? debugMessageObject.optString(DEBUG_MESSAGE_KEY)
-                                    : null;
-                            String debugMessageType = debugMessageObject != null
-                                    ? debugMessageObject.optString(DEBUG_MESSAGE_TYPE_KEY)
-                                    : null;
-                            String debugMessageLink = debugMessageObject != null
-                                    ? debugMessageObject.optString(DEBUG_MESSAGE_LINK_KEY)
-                                    : null;
-                            if (debugMessage != null && debugMessageType != null) {
-                                LoggingBehavior behavior = LoggingBehavior.GRAPH_API_DEBUG_INFO;
-                                if (debugMessageType.equals("warning")) {
-                                    behavior = LoggingBehavior.GRAPH_API_DEBUG_WARNING;
-                                }
-                                if (!Utility.isNullOrEmpty(debugMessageLink)) {
-                                    debugMessage += " Link: " + debugMessageLink;
-                                }
-                                Logger.log(behavior, TAG, debugMessage);
-                            }
-                        }
-                    }
-                    if (callback != null) {
-                        callback.onCompleted(response);
-                    }
-                }
-            };
-            this.callback = wrapper;
-        } else {
-            this.callback = callback;
-        }
-
-    }
-
-    /**
-     * Sets the tag on the request; this is an application-defined object that can be used to
-     * distinguish between different requests. Its value has no effect on the execution of the
-     * request.
-     *
-     * @param tag an object to serve as a tag, or null
-     */
-    public final void setTag(Object tag) {
-        this.tag = tag;
-    }
-
-    /**
-     * Gets the tag on the request; this is an application-defined object that can be used to
-     * distinguish between different requests. Its value has no effect on the execution of the
-     * request.
-     *
-     * @return an object that serves as a tag, or null
-     */
-    public final Object getTag() {
-        return tag;
-    }
-
-    /**
-     * Executes this request on the current thread and blocks while waiting for the response.
-     * <p/>
-     * This should only be called if you have transitioned off the UI thread.
-     *
-     * @return the Response object representing the results of the request
-     * @throws FacebookException        If there was an error in the protocol used to communicate
-     * with the service
-     * @throws IllegalArgumentException
-     */
-    public final GraphResponse executeAndWait() {
-        return GraphRequest.executeAndWait(this);
-    }
-
-    /**
-     * Executes the request asynchronously. This function will return immediately,
-     * and the request will be processed on a separate thread. In order to process result of a
-     * request, or determine whether a request succeeded or failed, a callback must be specified
-     * (see the {@link #setCallback(Callback) setCallback} method).
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * @return a RequestAsyncTask that is executing the request
-     * @throws IllegalArgumentException
-     */
-    public final GraphRequestAsyncTask executeAsync() {
-        return GraphRequest.executeBatchAsync(this);
-    }
-
-    /**
-     * Serializes one or more requests but does not execute them. The resulting HttpURLConnection
-     * can be executed explicitly by the caller.
-     *
-     * @param requests one or more Requests to serialize
-     * @return an HttpURLConnection which is ready to execute
-     * @throws FacebookException        If any of the requests in the batch are badly constructed or
-     *                                  if there are problems contacting the service
-     * @throws IllegalArgumentException if the passed in array is zero-length
-     * @throws NullPointerException     if the passed in array or any of its contents are null
-     */
-    public static HttpURLConnection toHttpConnection(GraphRequest... requests) {
-        return toHttpConnection(Arrays.asList(requests));
-    }
-
-    /**
-     * Serializes one or more requests but does not execute them. The resulting HttpURLConnection
-     * can be executed explicitly by the caller.
-     *
-     * @param requests one or more Requests to serialize
-     * @return an HttpURLConnection which is ready to execute
-     * @throws FacebookException        If any of the requests in the batch are badly constructed or
-     *                                  if there are problems contacting the service
-     * @throws IllegalArgumentException if the passed in collection is empty
-     * @throws NullPointerException     if the passed in collection or any of its contents are null
-     */
-    public static HttpURLConnection toHttpConnection(Collection<GraphRequest> requests) {
-        Validate.notEmptyAndContainsNoNulls(requests, "requests");
-
-        return toHttpConnection(new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Serializes one or more requests but does not execute them. The resulting HttpURLConnection
-     * can be executed explicitly by the caller.
-     *
-     * @param requests a RequestBatch to serialize
-     * @return an HttpURLConnection which is ready to execute
-     * @throws FacebookException        If any of the requests in the batch are badly constructed or
-     *                                  if there are problems contacting the service
-     * @throws IllegalArgumentException
-     */
-    public static HttpURLConnection toHttpConnection(GraphRequestBatch requests) {
-
-        validateFieldsParamForGetRequests(requests);
-
-        URL url;
-        try {
-            if (requests.size() == 1) {
-                // Single request case.
-                GraphRequest request = requests.get(0);
-                // In the non-batch case, the URL we use really is the same one returned by
-                // getUrlForSingleRequest.
-                url = new URL(request.getUrlForSingleRequest());
-            } else {
-                // Batch case -- URL is just the graph API base, individual request URLs are
-                // serialized as relative_url parameters within each batch entry.
-                url = new URL(ServerProtocol.getGraphUrlBase());
-            }
-        } catch (MalformedURLException e) {
-            throw new FacebookException("could not construct URL for request", e);
-        }
-
-        HttpURLConnection connection = null;
-        try {
-            connection = createConnection(url);
-
-            serializeToUrlConnection(requests, connection);
-        } catch (IOException | JSONException e) {
-            Utility.disconnectQuietly(connection);
-
-            throw new FacebookException("could not construct request body", e);
-        }
-
-        return connection;
-    }
-
-    /**
-     * Executes a single request on the current thread and blocks while waiting for the response.
-     * <p/>
-     * This should only be used if you have transitioned off the UI thread.
-     *
-     * @param request the Request to execute
-     * @return the Response object representing the results of the request
-     * @throws FacebookException If there was an error in the protocol used to communicate with the
-     *                           service
-     */
-    public static GraphResponse executeAndWait(GraphRequest request) {
-        List<GraphResponse> responses = executeBatchAndWait(request);
-
-        if (responses == null || responses.size() != 1) {
-            throw new FacebookException("invalid state: expected a single response");
-        }
-
-        return responses.get(0);
-    }
-
-    /**
-     * Executes requests on the current thread as a single batch and blocks while waiting for the
-     * response.
-     * <p/>
-     * This should only be used if you have transitioned off the UI thread.
-     *
-     * @param requests the Requests to execute
-     * @return a list of Response objects representing the results of the requests; responses are
-     * returned in the same order as the requests were specified.
-     * @throws NullPointerException In case of a null request
-     * @throws FacebookException    If there was an error in the protocol used to communicate with
-     *                              the service
-     */
-    public static List<GraphResponse> executeBatchAndWait(GraphRequest... requests) {
-        Validate.notNull(requests, "requests");
-
-        return executeBatchAndWait(Arrays.asList(requests));
-    }
-
-    /**
-     * Executes requests as a single batch on the current thread and blocks while waiting for the
-     * responses.
-     * <p/>
-     * This should only be used if you have transitioned off the UI thread.
-     *
-     * @param requests the Requests to execute
-     * @return a list of Response objects representing the results of the requests; responses are
-     * returned in the same order as the requests were specified.
-     * @throws FacebookException If there was an error in the protocol used to communicate with the
-     *                           service
-     */
-    public static List<GraphResponse> executeBatchAndWait(Collection<GraphRequest> requests) {
-        return executeBatchAndWait(new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Executes requests on the current thread as a single batch and blocks while waiting for the
-     * responses.
-     * <p/>
-     * This should only be used if you have transitioned off the UI thread.
-     *
-     * @param requests the batch of Requests to execute
-     * @return a list of Response objects representing the results of the requests; responses are
-     * returned in the same order as the requests were specified.
-     * @throws FacebookException        If there was an error in the protocol used to communicate
-     *                                  with the service
-     * @throws IllegalArgumentException if the passed in RequestBatch is empty
-     * @throws NullPointerException     if the passed in RequestBatch or any of its contents are
-     *                                  null
-     */
-    public static List<GraphResponse> executeBatchAndWait(GraphRequestBatch requests) {
-        Validate.notEmptyAndContainsNoNulls(requests, "requests");
-
-        HttpURLConnection connection = null;
-        try {
-            try {
-                connection = toHttpConnection(requests);
-            } catch (Exception ex) {
-                List<GraphResponse> responses = GraphResponse.constructErrorResponses(
-                        requests.getRequests(),
-                        null,
-                        new FacebookException(ex));
-                runCallbacks(requests, responses);
-                return responses;
-            }
-
-            List<GraphResponse> responses = executeConnectionAndWait(connection, requests);
-
-            return responses;
-        } finally {
-            Utility.disconnectQuietly(connection);
-        }
-    }
-
-    /**
-     * Executes requests as a single batch asynchronously. This function will return immediately,
-     * and the requests will be processed on a separate thread. In order to process results of a
-     * request, or determine whether a request succeeded or failed, a callback must be specified
-     * (see the {@link #setCallback(Callback) setCallback} method).
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * @param requests the Requests to execute
-     * @return a RequestAsyncTask that is executing the request
-     * @throws NullPointerException If a null request is passed in
-     */
-    public static GraphRequestAsyncTask executeBatchAsync(GraphRequest... requests) {
-        Validate.notNull(requests, "requests");
-
-        return executeBatchAsync(Arrays.asList(requests));
-    }
-
-    /**
-     * Executes requests as a single batch asynchronously. This function will return immediately,
-     * and the requests will be processed on a separate thread. In order to process results of a
-     * request, or determine whether a request succeeded or failed, a callback must be specified
-     * (see the {@link #setCallback(Callback) setCallback} method).
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * @param requests the Requests to execute
-     * @return a RequestAsyncTask that is executing the request
-     * @throws IllegalArgumentException if the passed in collection is empty
-     * @throws NullPointerException     if the passed in collection or any of its contents are null
-     */
-    public static GraphRequestAsyncTask executeBatchAsync(Collection<GraphRequest> requests) {
-        return executeBatchAsync(new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Executes requests as a single batch asynchronously. This function will return immediately,
-     * and the requests will be processed on a separate thread. In order to process results of a
-     * request, or determine whether a request succeeded or failed, a callback must be specified
-     * (see the {@link #setCallback(Callback) setCallback} method).
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * @param requests the RequestBatch to execute
-     * @return a RequestAsyncTask that is executing the request
-     * @throws IllegalArgumentException if the passed in RequestBatch is empty
-     * @throws NullPointerException     if the passed in RequestBatch or any of its contents are
-     *                                  null
-     */
-    public static GraphRequestAsyncTask executeBatchAsync(GraphRequestBatch requests) {
-        Validate.notEmptyAndContainsNoNulls(requests, "requests");
-
-        GraphRequestAsyncTask asyncTask = new GraphRequestAsyncTask(requests);
-        asyncTask.executeOnExecutor(FacebookSdk.getExecutor());
-        return asyncTask;
-    }
-
-    /**
-     * Executes requests that have already been serialized into an HttpURLConnection. No validation
-     * is done that the contents of the connection actually reflect the serialized requests, so it
-     * is the caller's responsibility to ensure that it will correctly generate the desired
-     * responses.
-     * <p/>
-     * This should only be called if you have transitioned off the UI thread.
-     *
-     * @param connection the HttpURLConnection that the requests were serialized into
-     * @param requests   the requests represented by the HttpURLConnection
-     * @return a list of Responses corresponding to the requests
-     * @throws FacebookException If there was an error in the protocol used to communicate with the
-     *                           service
-     */
-    public static List<GraphResponse> executeConnectionAndWait(
-            HttpURLConnection connection,
-            Collection<GraphRequest> requests) {
-        return executeConnectionAndWait(connection, new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Executes requests that have already been serialized into an HttpURLConnection. No validation
-     * is done that the contents of the connection actually reflect the serialized requests, so it
-     * is the caller's responsibility to ensure that it will correctly generate the desired
-     * responses.
-     * <p/>
-     * This should only be called if you have transitioned off the UI thread.
-     *
-     * @param connection the HttpURLConnection that the requests were serialized into
-     * @param requests   the RequestBatch represented by the HttpURLConnection
-     * @return a list of Responses corresponding to the requests
-     * @throws FacebookException If there was an error in the protocol used to communicate with the
-     *                           service
-     */
-    public static List<GraphResponse> executeConnectionAndWait(
-            HttpURLConnection connection,
-            GraphRequestBatch requests) {
-        List<GraphResponse> responses = GraphResponse.fromHttpConnection(connection, requests);
-
-        Utility.disconnectQuietly(connection);
-
-        int numRequests = requests.size();
-        if (numRequests != responses.size()) {
-            throw new FacebookException(
-                    String.format(Locale.US,
-                            "Received %d responses while expecting %d",
-                            responses.size(),
-                            numRequests));
-        }
-
-        runCallbacks(requests, responses);
-
-        // Try extending the current access token in case it's needed.
-        AccessTokenManager.getInstance().extendAccessTokenIfNeeded();
-
-        return responses;
-    }
-
-    /**
-     * Asynchronously executes requests that have already been serialized into an HttpURLConnection.
-     * No validation is done that the contents of the connection actually reflect the serialized
-     * requests, so it is the caller's responsibility to ensure that it will correctly generate the
-     * desired responses. This function will return immediately, and the requests will be processed
-     * on a separate thread. In order to process results of a request, or determine whether a
-     * request succeeded or failed, a callback must be specified (see the {@link
-     * #setCallback(Callback) setCallback} method).
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * @param connection the HttpURLConnection that the requests were serialized into
-     * @param requests   the requests represented by the HttpURLConnection
-     * @return a RequestAsyncTask that is executing the request
-     */
-    public static GraphRequestAsyncTask executeConnectionAsync(
-            HttpURLConnection connection,
-            GraphRequestBatch requests) {
-        return executeConnectionAsync(null, connection, requests);
-    }
-
-    /**
-     * Asynchronously executes requests that have already been serialized into an HttpURLConnection.
-     * No validation is done that the contents of the connection actually reflect the serialized
-     * requests, so it is the caller's responsibility to ensure that it will correctly generate the
-     * desired responses. This function will return immediately, and the requests will be processed
-     * on a separate thread. In order to process results of a request, or determine whether a
-     * request succeeded or failed, a callback must be specified (see the {@link
-     * #setCallback(Callback) setCallback} method)
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * @param callbackHandler a Handler that will be used to post calls to the callback for each
-     *                        request; if null, a Handler will be instantiated on the calling
-     *                        thread
-     * @param connection the HttpURLConnection that the requests were serialized into
-     * @param requests        the requests represented by the HttpURLConnection
-     * @return a RequestAsyncTask that is executing the request
-     */
-    public static GraphRequestAsyncTask executeConnectionAsync(
-            Handler callbackHandler,
-            HttpURLConnection connection,
-            GraphRequestBatch requests) {
-        Validate.notNull(connection, "connection");
-
-        GraphRequestAsyncTask asyncTask = new GraphRequestAsyncTask(connection, requests);
-        requests.setCallbackHandler(callbackHandler);
-        asyncTask.executeOnExecutor(FacebookSdk.getExecutor());
-        return asyncTask;
-    }
-
-    /**
-     * Returns a string representation of this Request, useful for debugging.
-     *
-     * @return the debugging information
-     */
-    @Override
-    public String toString() {
-        return new StringBuilder()
-                .append("{Request: ")
-                .append(" accessToken: ")
-                .append(accessToken == null ? "null" : accessToken)
-                .append(", graphPath: ")
-                .append(graphPath)
-                .append(", graphObject: ")
-                .append(graphObject)
-                .append(", httpMethod: ")
-                .append(httpMethod)
-                .append(", parameters: ")
-                .append(parameters)
-                .append("}")
-                .toString();
-    }
-
-    static void runCallbacks(final GraphRequestBatch requests, List<GraphResponse> responses) {
-        int numRequests = requests.size();
-
-        // Compile the list of callbacks to call and then run them either on this thread or via the
-        // Handler we received
-        final ArrayList<Pair<Callback, GraphResponse>> callbacks = new ArrayList<Pair<Callback, GraphResponse>>();
-        for (int i = 0; i < numRequests; ++i) {
-            GraphRequest request = requests.get(i);
-            if (request.callback != null) {
-                callbacks.add(
-                        new Pair<Callback, GraphResponse>(request.callback, responses.get(i)));
-            }
-        }
-
-        if (callbacks.size() > 0) {
-            Runnable runnable = new Runnable() {
-                public void run() {
-                    for (Pair<Callback, GraphResponse> pair : callbacks) {
-                        pair.first.onCompleted(pair.second);
-                    }
-
-                    List<GraphRequestBatch.Callback> batchCallbacks = requests.getCallbacks();
-                    for (GraphRequestBatch.Callback batchCallback : batchCallbacks) {
-                        batchCallback.onBatchCompleted(requests);
-                    }
-                }
-            };
-
-            Handler callbackHandler = requests.getCallbackHandler();
-            if (callbackHandler == null) {
-                // Run on this thread.
-                runnable.run();
-            } else {
-                // Post to the handler.
-                callbackHandler.post(runnable);
-            }
-        }
-    }
-
-    private static String getDefaultPhotoPathIfNull(String graphPath) {
-        return graphPath == null ? MY_PHOTOS : graphPath;
-    }
-
-    private static HttpURLConnection createConnection(URL url) throws IOException {
-        HttpURLConnection connection;
-        connection = (HttpURLConnection) url.openConnection();
-
-        connection.setRequestProperty(USER_AGENT_HEADER, getUserAgent());
-        connection.setRequestProperty(ACCEPT_LANGUAGE_HEADER, Locale.getDefault().toString());
-
-        connection.setChunkedStreamingMode(0);
-        return connection;
-    }
-
-
-    private void addCommonParameters() {
-        if (this.accessToken != null) {
-            if (!this.parameters.containsKey(ACCESS_TOKEN_PARAM)) {
-                String token = accessToken.getToken();
-                Logger.registerAccessToken(token);
-                this.parameters.putString(ACCESS_TOKEN_PARAM, token);
-            }
-        } else if (!skipClientToken && !this.parameters.containsKey(ACCESS_TOKEN_PARAM)) {
-            String appID = FacebookSdk.getApplicationId();
-            String clientToken = FacebookSdk.getClientToken();
-            if (!Utility.isNullOrEmpty(appID) && !Utility.isNullOrEmpty(clientToken)) {
-                String accessToken = appID + "|" + clientToken;
-                this.parameters.putString(ACCESS_TOKEN_PARAM, accessToken);
-            } else {
-                Log.d(TAG, "Warning: Request without access token missing application ID or" +
-                        " client token.");
-            }
-        }
-        this.parameters.putString(SDK_PARAM, SDK_ANDROID);
-        this.parameters.putString(FORMAT_PARAM, FORMAT_JSON);
-
-        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.GRAPH_API_DEBUG_INFO)) {
-            this.parameters.putString(DEBUG_PARAM, DEBUG_SEVERITY_INFO);
-        } else if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.GRAPH_API_DEBUG_WARNING)) {
-            this.parameters.putString(DEBUG_PARAM, DEBUG_SEVERITY_WARNING);
-        }
-    }
-
-    private String appendParametersToBaseUrl(String baseUrl) {
-        Uri.Builder uriBuilder = Uri.parse(baseUrl).buildUpon();
-
-        Set<String> keys = this.parameters.keySet();
-        for (String key : keys) {
-            Object value = this.parameters.get(key);
-
-            if (value == null) {
-                value = "";
-            }
-
-            if (isSupportedParameterType(value)) {
-                value = parameterToString(value);
-            } else {
-                if (httpMethod == HttpMethod.GET) {
-                    throw new IllegalArgumentException(
-                            String.format(
-                                    Locale.US,
-                                    "Unsupported parameter type for GET request: %s",
-                                    value.getClass().getSimpleName()));
-                }
-                continue;
-            }
-
-            uriBuilder.appendQueryParameter(key, value.toString());
-        }
-
-        return uriBuilder.toString();
-    }
-
-    final String getRelativeUrlForBatchedRequest() {
-        if (overriddenURL != null) {
-            throw new FacebookException("Can't override URL for a batch request");
-        }
-
-        String baseUrl =
-                String.format("%s/%s", ServerProtocol.getGraphUrlBase(), getGraphPathWithVersion());
-        addCommonParameters();
-        String fullUrl = appendParametersToBaseUrl(baseUrl);
-        Uri uri = Uri.parse(fullUrl);
-        String relativeUrl = String.format("%s?%s", uri.getPath(), uri.getQuery());
-        return relativeUrl;
-    }
-
-    final String getUrlForSingleRequest() {
-        if (overriddenURL != null) {
-            return overriddenURL.toString();
-        }
-
-        String graphBaseUrlBase;
-        if (this.getHttpMethod() == HttpMethod.POST
-                && graphPath != null
-                && graphPath.endsWith(VIDEOS_SUFFIX)) {
-            graphBaseUrlBase = ServerProtocol.getGraphVideoUrlBase();
-        } else {
-            graphBaseUrlBase = ServerProtocol.getGraphUrlBase();
-        }
-        String baseUrl = String.format("%s/%s", graphBaseUrlBase, getGraphPathWithVersion());
-
-        addCommonParameters();
-        return appendParametersToBaseUrl(baseUrl);
-    }
-
-    private String getGraphPathWithVersion() {
-        Matcher matcher = versionPattern.matcher(this.graphPath);
-        if (matcher.matches()) {
-            return this.graphPath;
-        }
-        return String.format("%s/%s", this.version, this.graphPath);
-    }
-
-    private static class Attachment {
-        private final GraphRequest request;
-        private final Object value;
-
-        public Attachment(GraphRequest request, Object value) {
-            this.request = request;
-            this.value = value;
-        }
-
-        public GraphRequest getRequest() {
-            return request;
-        }
-
-        public Object getValue() {
-            return value;
-        }
-    }
-
-    private void serializeToBatch(
-            JSONArray batch,
-            Map<String, Attachment> attachments
-    ) throws JSONException, IOException {
-        JSONObject batchEntry = new JSONObject();
-
-        if (this.batchEntryName != null) {
-            batchEntry.put(BATCH_ENTRY_NAME_PARAM, this.batchEntryName);
-            batchEntry.put(
-                    BATCH_ENTRY_OMIT_RESPONSE_ON_SUCCESS_PARAM,
-                    this.batchEntryOmitResultOnSuccess);
-        }
-        if (this.batchEntryDependsOn != null) {
-            batchEntry.put(BATCH_ENTRY_DEPENDS_ON_PARAM, this.batchEntryDependsOn);
-        }
-
-        String relativeURL = getRelativeUrlForBatchedRequest();
-        batchEntry.put(BATCH_RELATIVE_URL_PARAM, relativeURL);
-        batchEntry.put(BATCH_METHOD_PARAM, httpMethod);
-        if (this.accessToken != null) {
-            String token = this.accessToken.getToken();
-            Logger.registerAccessToken(token);
-        }
-
-        // Find all of our attachments. Remember their names and put them in the attachment map.
-        ArrayList<String> attachmentNames = new ArrayList<String>();
-        Set<String> keys = this.parameters.keySet();
-        for (String key : keys) {
-            Object value = this.parameters.get(key);
-            if (isSupportedAttachmentType(value)) {
-                // Make the name unique across this entire batch.
-                String name = String.format(
-                        Locale.ROOT,
-                        "%s%d",
-                        ATTACHMENT_FILENAME_PREFIX,
-                        attachments.size());
-                attachmentNames.add(name);
-                attachments.put(name, new Attachment(this, value));
-            }
-        }
-
-        if (!attachmentNames.isEmpty()) {
-            String attachmentNamesString = TextUtils.join(",", attachmentNames);
-            batchEntry.put(ATTACHED_FILES_PARAM, attachmentNamesString);
-        }
-
-        if (this.graphObject != null) {
-            // Serialize the graph object into the "body" parameter.
-            final ArrayList<String> keysAndValues = new ArrayList<String>();
-            processGraphObject(this.graphObject, relativeURL, new KeyValueSerializer() {
-                @Override
-                public void writeString(String key, String value) throws IOException {
-                    keysAndValues.add(String.format(
-                            Locale.US,
-                            "%s=%s",
-                            key,
-                            URLEncoder.encode(value, "UTF-8")));
-                }
-            });
-            String bodyValue = TextUtils.join("&", keysAndValues);
-            batchEntry.put(BATCH_BODY_PARAM, bodyValue);
-        }
-
-        batch.put(batchEntry);
-    }
-
-    private static boolean hasOnProgressCallbacks(GraphRequestBatch requests) {
-        for (GraphRequestBatch.Callback callback : requests.getCallbacks()) {
-            if (callback instanceof GraphRequestBatch.OnProgressCallback) {
-                return true;
-            }
-        }
-
-        for (GraphRequest request : requests) {
-            if (request.getCallback() instanceof OnProgressCallback) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    private static void setConnectionContentType(
-            HttpURLConnection connection,
-            boolean shouldUseGzip) {
-        if (shouldUseGzip) {
-            connection.setRequestProperty(CONTENT_TYPE_HEADER, "application/x-www-form-urlencoded");
-            connection.setRequestProperty(CONTENT_ENCODING_HEADER, "gzip");
-        } else {
-            connection.setRequestProperty(CONTENT_TYPE_HEADER, getMimeContentType());
-        }
-    }
-
-    private static boolean isGzipCompressible(GraphRequestBatch requests) {
-        for (GraphRequest request : requests) {
-            for (String key : request.parameters.keySet()) {
-                Object value = request.parameters.get(key);
-                if (isSupportedAttachmentType(value)) {
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
-
-    final static boolean shouldWarnOnMissingFieldsParam(GraphRequest request) {
-        String version = request.getVersion();
-        if (Utility.isNullOrEmpty(version)) {
-            // null implies latest version
-            return true;
-        }
-        if (version.startsWith("v")) {
-            version = version.substring(1);
-        }
-        String [] versionParts = version.split("\\.");
-        // We should warn on missing "fields" params for API 2.4 and above
-        return versionParts.length >= 2
-                && Integer.parseInt(versionParts[0]) > 2
-                || (Integer.parseInt(versionParts[0]) >= 2
-                    && Integer.parseInt(versionParts[1]) >= 4);
-    }
-
-    final static void validateFieldsParamForGetRequests(GraphRequestBatch requests) {
-        // validate that the GET requests all have a "fields" param
-        for (GraphRequest request : requests) {
-            if (HttpMethod.GET.equals(request.getHttpMethod())
-                    && shouldWarnOnMissingFieldsParam(request)) {
-                Bundle params = request.getParameters();
-                if (!params.containsKey(FIELDS_PARAM)
-                        || Utility.isNullOrEmpty(params.getString(FIELDS_PARAM))) {
-                    Logger.log(
-                            LoggingBehavior.DEVELOPER_ERRORS,
-                            Log.WARN,
-                            "Request",
-                            "starting with Graph API v2.4, GET requests for /%s should contain an" +
-                            " explicit \"fields\" parameter.",
-                            request.getGraphPath()
-                    );
-                }
-            }
-        }
-    }
-
-    final static void serializeToUrlConnection(
-            GraphRequestBatch requests,
-            HttpURLConnection connection
-    ) throws IOException, JSONException {
-        Logger logger = new Logger(LoggingBehavior.REQUESTS, "Request");
-
-        int numRequests = requests.size();
-        boolean shouldUseGzip = isGzipCompressible(requests);
-
-        HttpMethod connectionHttpMethod =
-                (numRequests == 1) ? requests.get(0).httpMethod : HttpMethod.POST;
-        connection.setRequestMethod(connectionHttpMethod.name());
-        setConnectionContentType(connection, shouldUseGzip);
-
-        URL url = connection.getURL();
-        logger.append("Request:\n");
-        logger.appendKeyValue("Id", requests.getId());
-        logger.appendKeyValue("URL", url);
-        logger.appendKeyValue("Method", connection.getRequestMethod());
-        logger.appendKeyValue("User-Agent", connection.getRequestProperty("User-Agent"));
-        logger.appendKeyValue("Content-Type", connection.getRequestProperty("Content-Type"));
-
-        connection.setConnectTimeout(requests.getTimeout());
-        connection.setReadTimeout(requests.getTimeout());
-
-        // If we have a single non-POST request, don't try to serialize anything or
-        // HttpURLConnection will turn it into a POST.
-        boolean isPost = (connectionHttpMethod == HttpMethod.POST);
-        if (!isPost) {
-            logger.log();
-            return;
-        }
-
-        connection.setDoOutput(true);
-
-        OutputStream outputStream = null;
-        try {
-            outputStream = new BufferedOutputStream(connection.getOutputStream());
-            if (shouldUseGzip) {
-                outputStream = new GZIPOutputStream(outputStream);
-            }
-
-            if (hasOnProgressCallbacks(requests)) {
-                ProgressNoopOutputStream countingStream = null;
-                countingStream = new ProgressNoopOutputStream(requests.getCallbackHandler());
-                processRequest(requests, null, numRequests, url, countingStream, shouldUseGzip);
-
-                int max = countingStream.getMaxProgress();
-                Map<GraphRequest, RequestProgress> progressMap = countingStream.getProgressMap();
-
-                outputStream = new ProgressOutputStream(outputStream, requests, progressMap, max);
-            }
-
-            processRequest(requests, logger, numRequests, url, outputStream, shouldUseGzip);
-        } finally {
-            if (outputStream != null) {
-                outputStream.close();
-            }
-        }
-
-        logger.log();
-    }
-
-    private static void processRequest(GraphRequestBatch requests, Logger logger, int numRequests,
-                                       URL url, OutputStream outputStream, boolean shouldUseGzip)
-            throws IOException, JSONException {
-        Serializer serializer = new Serializer(outputStream, logger, shouldUseGzip);
-
-        if (numRequests == 1) {
-            GraphRequest request = requests.get(0);
-
-            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
-            for (String key : request.parameters.keySet()) {
-                Object value = request.parameters.get(key);
-                if (isSupportedAttachmentType(value)) {
-                    attachments.put(key, new Attachment(request, value));
-                }
-            }
-
-            if (logger != null) {
-                logger.append("  Parameters:\n");
-            }
-            serializeParameters(request.parameters, serializer, request);
-
-            if (logger != null) {
-                logger.append("  Attachments:\n");
-            }
-            serializeAttachments(attachments, serializer);
-
-            if (request.graphObject != null) {
-                processGraphObject(request.graphObject, url.getPath(), serializer);
-            }
-        } else {
-            String batchAppID = getBatchAppId(requests);
-            if (Utility.isNullOrEmpty(batchAppID)) {
-                throw new FacebookException(
-                        "App ID was not specified at the request or Settings.");
-            }
-
-            serializer.writeString(BATCH_APP_ID_PARAM, batchAppID);
-
-            // We write out all the requests as JSON, remembering which file attachments they have,
-            // then write out the attachments.
-            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
-            serializeRequestsAsJSON(serializer, requests, attachments);
-
-            if (logger != null) {
-                logger.append("  Attachments:\n");
-            }
-            serializeAttachments(attachments, serializer);
-        }
-    }
-
-    private static boolean isMeRequest(String path) {
-        Matcher matcher = versionPattern.matcher(path);
-        if (matcher.matches()) {
-            // Group 1 contains the path aside from version
-            path = matcher.group(1);
-        }
-        if (path.startsWith("me/") || path.startsWith("/me/")) {
-            return true;
-        }
-        return false;
-    }
-
-    private static void processGraphObject(
-            JSONObject graphObject,
-            String path,
-            KeyValueSerializer serializer
-    ) throws IOException {
-        // In general, graph objects are passed by reference (ID/URL). But if this is an OG Action,
-        // we need to pass the entire values of the contents of the 'image' property, as they
-        // contain important metadata beyond just a URL. We don't have a 100% foolproof way of
-        // knowing if we are posting an OG Action, given that batched requests can have parameter
-        // substitution, but passing the OG Action type as a substituted parameter is unlikely.
-        // It looks like an OG Action if it's posted to me/namespace:action[?other=stuff].
-        boolean isOGAction = false;
-        if (isMeRequest(path)) {
-            int colonLocation = path.indexOf(":");
-            int questionMarkLocation = path.indexOf("?");
-            isOGAction = colonLocation > 3
-                    && (questionMarkLocation == -1 || colonLocation < questionMarkLocation);
-        }
-
-        Iterator<String> keyIterator = graphObject.keys();
-        while (keyIterator.hasNext()) {
-            String key = keyIterator.next();
-            Object value = graphObject.opt(key);
-            boolean passByValue = isOGAction && key.equalsIgnoreCase("image");
-            processGraphObjectProperty(key, value, serializer, passByValue);
-        }
-    }
-
-    /**
-     * Create an User Owned Open Graph object
-     *
-     * Use this method to create an open graph object, which can then be posted utilizing the same
-     * GraphRequest methods as other GraphRequests.
-     *
-     * @param openGraphObject The open graph object to create. Only SharePhotos with the imageUrl
-     *                        set are accepted through this helper method.
-     * @return GraphRequest for creating the given openGraphObject
-     * @throws FacebookException thrown in the case of a JSONException or in the case of invalid
-     *                           format for SharePhoto (missing imageUrl)
-     */
-
-    public static GraphRequest createOpenGraphObject(final ShareOpenGraphObject openGraphObject)
-            throws FacebookException {
-        String type = openGraphObject.getString("type");
-        if (type == null) {
-            type = openGraphObject.getString("og:type");
-        }
-
-        if (type == null) {
-            throw new FacebookException("Open graph object type cannot be null");
-        }
-        try {
-            JSONObject stagedObject = (JSONObject) OpenGraphJSONUtility.toJSONValue(
-                    openGraphObject,
-                    new OpenGraphJSONUtility.PhotoJSONProcessor() {
-                        @Override
-                        public JSONObject toJSONObject(SharePhoto photo) {
-                            Uri photoUri = photo.getImageUrl();
-                            JSONObject photoJSONObject = new JSONObject();
-                            try {
-                                photoJSONObject.put(
-                                        NativeProtocol.IMAGE_URL_KEY, photoUri.toString());
-                            } catch (Exception e) {
-                                throw new FacebookException("Unable to attach images", e);
-                            }
-                            return photoJSONObject;
-                        }
-                    });
-            String ogType = type;
-            Bundle parameters = new Bundle();
-            parameters.putString("object", stagedObject.toString());
-
-            String graphPath = String.format(
-                    Locale.ROOT, GRAPH_PATH_FORMAT,
-                    ME,
-                    "objects/" + ogType);
-            return new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    graphPath,
-                    parameters,
-                    HttpMethod.POST);
-        }
-        catch(JSONException e){
-            throw new FacebookException(e.getMessage());
-        }
-    }
-
-    private static void processGraphObjectProperty(
-            String key,
-            Object value,
-            KeyValueSerializer serializer,
-            boolean passByValue
-    ) throws IOException {
-        Class<?> valueClass = value.getClass();
-
-        if (JSONObject.class.isAssignableFrom(valueClass)) {
-            JSONObject jsonObject = (JSONObject) value;
-            if (passByValue) {
-                // We need to pass all properties of this object in key[propertyName] format.
-                @SuppressWarnings("unchecked")
-                Iterator<String> keys = jsonObject.keys();
-                while (keys.hasNext()) {
-                    String propertyName = keys.next();
-                    String subKey = String.format("%s[%s]", key, propertyName);
-                    processGraphObjectProperty(
-                            subKey,
-                            jsonObject.opt(propertyName),
-                            serializer,
-                            passByValue);
-                }
-            } else {
-                // Normal case is passing objects by reference, so just pass the ID or URL, if any,
-                // as the value for "key"
-                if (jsonObject.has("id")) {
-                    processGraphObjectProperty(
-                            key,
-                            jsonObject.optString("id"),
-                            serializer,
-                            passByValue);
-                } else if (jsonObject.has("url")) {
-                    processGraphObjectProperty(
-                            key,
-                            jsonObject.optString("url"),
-                            serializer,
-                            passByValue);
-                } else if (jsonObject.has(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)) {
-                    processGraphObjectProperty(key, jsonObject.toString(), serializer, passByValue);
-                }
-            }
-        } else if (JSONArray.class.isAssignableFrom(valueClass)) {
-            JSONArray jsonArray = (JSONArray) value;
-            int length = jsonArray.length();
-            for (int i = 0; i < length; ++i) {
-                String subKey = String.format(Locale.ROOT, "%s[%d]", key, i);
-                processGraphObjectProperty(subKey, jsonArray.opt(i), serializer, passByValue);
-            }
-        } else if (String.class.isAssignableFrom(valueClass) ||
-                Number.class.isAssignableFrom(valueClass) ||
-                Boolean.class.isAssignableFrom(valueClass)) {
-            serializer.writeString(key, value.toString());
-        } else if (Date.class.isAssignableFrom(valueClass)) {
-            Date date = (Date) value;
-            // The "Events Timezone" platform migration affects what date/time formats Facebook
-            // accepts and returns. Apps created after 8/1/12 (or apps that have explicitly enabled
-            // the migration) should send/receive dates in ISO-8601 format. Pre-migration apps can
-            // send as Unix timestamps. Since the future is ISO-8601, that is what we support here.
-            // Apps that need pre-migration behavior can explicitly send these as integer timestamps
-            // rather than Dates.
-            final SimpleDateFormat iso8601DateFormat = new SimpleDateFormat(
-                    ISO_8601_FORMAT_STRING,
-                    Locale.US);
-            serializer.writeString(key, iso8601DateFormat.format(date));
-        }
-    }
-
-    private static void serializeParameters(
-            Bundle bundle,
-            Serializer serializer,
-            GraphRequest request
-    ) throws IOException {
-        Set<String> keys = bundle.keySet();
-
-        for (String key : keys) {
-            Object value = bundle.get(key);
-            if (isSupportedParameterType(value)) {
-                serializer.writeObject(key, value, request);
-            }
-        }
-    }
-
-    private static void serializeAttachments(
-            Map<String, Attachment> attachments,
-            Serializer serializer
-    ) throws IOException {
-        Set<String> keys = attachments.keySet();
-
-        for (String key : keys) {
-            Attachment attachment = attachments.get(key);
-            if (isSupportedAttachmentType(attachment.getValue())) {
-                serializer.writeObject(key, attachment.getValue(), attachment.getRequest());
-            }
-        }
-    }
-
-    private static void serializeRequestsAsJSON(
-            Serializer serializer,
-            Collection<GraphRequest> requests,
-            Map<String, Attachment> attachments
-    ) throws JSONException, IOException {
-        JSONArray batch = new JSONArray();
-        for (GraphRequest request : requests) {
-            request.serializeToBatch(batch, attachments);
-        }
-
-        serializer.writeRequestsAsJson(BATCH_PARAM, batch, requests);
-    }
-
-    private static String getMimeContentType() {
-        return String.format("multipart/form-data; boundary=%s", MIME_BOUNDARY);
-    }
-
-    private static volatile String userAgent;
-
-    private static String getUserAgent() {
-        if (userAgent == null) {
-            userAgent = String.format("%s.%s", USER_AGENT_BASE, FacebookSdkVersion.BUILD);
-
-            // For the unity sdk we need to append the unity user agent
-            String customUserAgent = InternalSettings.getCustomUserAgent();
-            if (!Utility.isNullOrEmpty(customUserAgent)) {
-                userAgent = String.format(
-                        Locale.ROOT,
-                        "%s/%s",
-                        userAgent,
-                        customUserAgent);
-            }
-        }
-
-        return userAgent;
-    }
-
-    private static String getBatchAppId(GraphRequestBatch batch) {
-        if (!Utility.isNullOrEmpty(batch.getBatchApplicationId())) {
-            return batch.getBatchApplicationId();
-        }
-
-        for (GraphRequest request : batch) {
-            AccessToken accessToken = request.accessToken;
-            if (accessToken != null) {
-                String applicationId = accessToken.getApplicationId();
-                if (applicationId != null) {
-                    return applicationId;
-                }
-            }
-        }
-        if (!Utility.isNullOrEmpty(GraphRequest.defaultBatchApplicationId)) {
-            return GraphRequest.defaultBatchApplicationId;
-        }
-        return FacebookSdk.getApplicationId();
-    }
-
-    private static boolean isSupportedAttachmentType(Object value) {
-        return value instanceof Bitmap ||
-                value instanceof byte[] ||
-                value instanceof Uri ||
-                value instanceof ParcelFileDescriptor ||
-                value instanceof ParcelableResourceWithMimeType;
-    }
-
-    private static boolean isSupportedParameterType(Object value) {
-        return value instanceof String || value instanceof Boolean || value instanceof Number ||
-                value instanceof Date;
-    }
-
-    private static String parameterToString(Object value) {
-        if (value instanceof String) {
-            return (String) value;
-        } else if (value instanceof Boolean || value instanceof Number) {
-            return value.toString();
-        } else if (value instanceof Date) {
-            final SimpleDateFormat iso8601DateFormat = new SimpleDateFormat(
-                    ISO_8601_FORMAT_STRING, Locale.US);
-            return iso8601DateFormat.format(value);
-        }
-        throw new IllegalArgumentException("Unsupported parameter type.");
-    }
-
-    private interface KeyValueSerializer {
-        void writeString(String key, String value) throws IOException;
-    }
-
-    private static class Serializer implements KeyValueSerializer {
-        private final OutputStream outputStream;
-        private final Logger logger;
-        private boolean firstWrite = true;
-        private boolean useUrlEncode = false;
-
-        public Serializer(OutputStream outputStream, Logger logger, boolean useUrlEncode) {
-            this.outputStream = outputStream;
-            this.logger = logger;
-            this.useUrlEncode = useUrlEncode;
-        }
-
-        public void writeObject(String key, Object value, GraphRequest request) throws IOException {
-            if (outputStream instanceof RequestOutputStream) {
-                ((RequestOutputStream) outputStream).setCurrentRequest(request);
-            }
-
-            if (isSupportedParameterType(value)) {
-                writeString(key, parameterToString(value));
-            } else if (value instanceof Bitmap) {
-                writeBitmap(key, (Bitmap) value);
-            } else if (value instanceof byte[]) {
-                writeBytes(key, (byte[]) value);
-            } else if (value instanceof Uri) {
-                writeContentUri(key, (Uri) value, null);
-            } else if (value instanceof ParcelFileDescriptor) {
-                writeFile(key, (ParcelFileDescriptor) value, null);
-            } else if (value instanceof ParcelableResourceWithMimeType) {
-                ParcelableResourceWithMimeType resourceWithMimeType =
-                        (ParcelableResourceWithMimeType) value;
-                Parcelable resource = resourceWithMimeType.getResource();
-                String mimeType = resourceWithMimeType.getMimeType();
-                if (resource instanceof ParcelFileDescriptor) {
-                    writeFile(key, (ParcelFileDescriptor) resource, mimeType);
-                } else if (resource instanceof Uri) {
-                    writeContentUri(key, (Uri) resource, mimeType);
-                } else {
-                    throw getInvalidTypeError();
-                }
-            } else {
-                throw getInvalidTypeError();
-            }
-        }
-
-        private RuntimeException getInvalidTypeError() {
-            return new IllegalArgumentException("value is not a supported type.");
-        }
-
-        public void writeRequestsAsJson(
-                String key,
-                JSONArray requestJsonArray,
-                Collection<GraphRequest> requests
-        ) throws IOException, JSONException {
-            if (!(outputStream instanceof RequestOutputStream)) {
-                writeString(key, requestJsonArray.toString());
-                return;
-            }
-
-            RequestOutputStream requestOutputStream = (RequestOutputStream) outputStream;
-            writeContentDisposition(key, null, null);
-            write("[");
-            int i = 0;
-            for (GraphRequest request : requests) {
-                JSONObject requestJson = requestJsonArray.getJSONObject(i);
-                requestOutputStream.setCurrentRequest(request);
-                if (i > 0) {
-                    write(",%s", requestJson.toString());
-                } else {
-                    write("%s", requestJson.toString());
-                }
-                i++;
-            }
-            write("]");
-            if (logger != null) {
-                logger.appendKeyValue("    " + key, requestJsonArray.toString());
-            }
-        }
-
-        public void writeString(String key, String value) throws IOException {
-            writeContentDisposition(key, null, null);
-            writeLine("%s", value);
-            writeRecordBoundary();
-            if (logger != null) {
-                logger.appendKeyValue("    " + key, value);
-            }
-        }
-
-        public void writeBitmap(String key, Bitmap bitmap) throws IOException {
-            writeContentDisposition(key, key, "image/png");
-            // Note: quality parameter is ignored for PNG
-            bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
-            writeLine("");
-            writeRecordBoundary();
-            if (logger != null) {
-                logger.appendKeyValue("    " + key, "<Image>");
-            }
-        }
-
-        public void writeBytes(String key, byte[] bytes) throws IOException {
-            writeContentDisposition(key, key, "content/unknown");
-            this.outputStream.write(bytes);
-            writeLine("");
-            writeRecordBoundary();
-            if (logger != null) {
-                logger.appendKeyValue(
-                        "    " + key,
-                        String.format(Locale.ROOT, "<Data: %d>", bytes.length));
-            }
-        }
-
-        public void writeContentUri(String key, Uri contentUri, String mimeType)
-                throws IOException {
-            if (mimeType == null) {
-                mimeType = "content/unknown";
-            }
-            writeContentDisposition(key, key, mimeType);
-
-            int totalBytes = 0;
-            if (outputStream instanceof ProgressNoopOutputStream) {
-                // If we are only counting bytes then skip reading the file
-                long contentSize = Utility.getContentSize(contentUri);
-
-                ((ProgressNoopOutputStream) outputStream).addProgress(contentSize);
-            } else {
-                InputStream inputStream = FacebookSdk
-                        .getApplicationContext()
-                        .getContentResolver()
-                        .openInputStream(contentUri);
-                totalBytes += Utility.copyAndCloseInputStream(inputStream, outputStream);
-            }
-
-            writeLine("");
-            writeRecordBoundary();
-            if (logger != null) {
-                logger.appendKeyValue(
-                        "    " + key,
-                        String.format(Locale.ROOT, "<Data: %d>", totalBytes));
-            }
-        }
-
-        public void writeFile(
-                String key,
-                ParcelFileDescriptor descriptor,
-                String mimeType
-        ) throws IOException {
-            if (mimeType == null) {
-                mimeType = "content/unknown";
-            }
-            writeContentDisposition(key, key, mimeType);
-
-            int totalBytes = 0;
-
-            if (outputStream instanceof ProgressNoopOutputStream) {
-                // If we are only counting bytes then skip reading the file
-                ((ProgressNoopOutputStream) outputStream).addProgress(descriptor.getStatSize());
-            } else {
-                ParcelFileDescriptor.AutoCloseInputStream inputStream =
-                        new ParcelFileDescriptor.AutoCloseInputStream(descriptor);
-                totalBytes += Utility.copyAndCloseInputStream(inputStream, outputStream);
-            }
-            writeLine("");
-            writeRecordBoundary();
-            if (logger != null) {
-                logger.appendKeyValue(
-                        "    " + key,
-                        String.format(Locale.ROOT, "<Data: %d>", totalBytes));
-            }
-        }
-
-        public void writeRecordBoundary() throws IOException {
-            if (!useUrlEncode) {
-                writeLine("--%s", MIME_BOUNDARY);
-            } else {
-                this.outputStream.write("&".getBytes());
-            }
-        }
-
-        public void writeContentDisposition(
-                String name,
-                String filename,
-                String contentType
-        ) throws IOException {
-            if (!useUrlEncode) {
-                write("Content-Disposition: form-data; name=\"%s\"", name);
-                if (filename != null) {
-                    write("; filename=\"%s\"", filename);
-                }
-                writeLine(""); // newline after Content-Disposition
-                if (contentType != null) {
-                    writeLine("%s: %s", CONTENT_TYPE_HEADER, contentType);
-                }
-                writeLine(""); // blank line before content
-            } else {
-                this.outputStream.write(String.format("%s=", name).getBytes());
-            }
-        }
-
-        public void write(String format, Object... args) throws IOException {
-            if (!useUrlEncode) {
-                if (firstWrite) {
-                    // Prepend all of our output with a boundary string.
-                    this.outputStream.write("--".getBytes());
-                    this.outputStream.write(MIME_BOUNDARY.getBytes());
-                    this.outputStream.write("\r\n".getBytes());
-                    firstWrite = false;
-                }
-                this.outputStream.write(String.format(format, args).getBytes());
-            } else {
-                this.outputStream.write(
-                        URLEncoder.encode(
-                                String.format(Locale.US, format, args), "UTF-8").getBytes());
-            }
-        }
-
-        public void writeLine(String format, Object... args) throws IOException {
-            write(format, args);
-            if (!useUrlEncode) {
-                write("\r\n");
-            }
-        }
-
-    }
-
-    /**
-     * Specifies the interface that consumers of the Request class can implement in order to be
-     * notified when a particular request completes, either successfully or with an error.
-     */
-    public interface Callback {
-        /**
-         * The method that will be called when a request completes.
-         *
-         * @param response the Response of this request, which may include error information if the
-         *                 request was unsuccessful
-         */
-        void onCompleted(GraphResponse response);
-    }
-
-    /**
-     * Specifies the interface that consumers of the Request class can implement in order to be
-     * notified when a progress is made on a particular request. The frequency of the callbacks can
-     * be controlled using {@link FacebookSdk#setOnProgressThreshold(long)}
-     */
-    public interface OnProgressCallback extends Callback {
-        /**
-         * The method that will be called when progress is made.
-         *
-         * @param current the current value of the progress of the request.
-         * @param max     the maximum value (target) value that the progress will have.
-         */
-        void onProgress(long current, long max);
-    }
-
-    /**
-     * Callback for requests that result in an array of JSONObjects.
-     */
-    public interface GraphJSONArrayCallback {
-        /**
-         * The method that will be called when the request completes.
-         *
-         * @param objects  the list of GraphObjects representing the returned objects, or null
-         * @param response the Response of this request, which may include error information if the
-         *                 request was unsuccessful
-         */
-        void onCompleted(JSONArray objects, GraphResponse response);
-    }
-
-    /**
-     * Callback for requests that result in a JSONObject.
-     */
-    public interface GraphJSONObjectCallback {
-        /**
-         * The method that will be called when the request completes.
-         *
-         * @param object   the GraphObject representing the returned object, or null
-         * @param response the Response of this request, which may include error information if the
-         *                 request was unsuccessful
-         */
-        void onCompleted(JSONObject object, GraphResponse response);
-    }
-
-    /**
-     * Used during serialization for the graph request.
-     * @param <RESOURCE> The Parcelable type parameter.
-     */
-    public static class ParcelableResourceWithMimeType<RESOURCE extends Parcelable>
-            implements Parcelable {
-        private final String mimeType;
-        private final RESOURCE resource;
-
-        public String getMimeType() {
-            return mimeType;
-        }
-
-        public RESOURCE getResource() {
-            return resource;
-        }
-
-        public int describeContents() {
-            return CONTENTS_FILE_DESCRIPTOR;
-        }
-
-        public void writeToParcel(Parcel out, int flags) {
-            out.writeString(mimeType);
-            out.writeParcelable(resource, flags);
-        }
-
-        @SuppressWarnings("unused")
-        public static final Parcelable.Creator<ParcelableResourceWithMimeType> CREATOR
-                = new Parcelable.Creator<ParcelableResourceWithMimeType>() {
-            public ParcelableResourceWithMimeType createFromParcel(Parcel in) {
-                return new ParcelableResourceWithMimeType(in);
-            }
-
-            public ParcelableResourceWithMimeType[] newArray(int size) {
-                return new ParcelableResourceWithMimeType[size];
-            }
-        };
-
-        /**
-         * The constructor.
-         * @param resource The resource to parcel.
-         * @param mimeType The mime type.
-         */
-        public ParcelableResourceWithMimeType(
-                RESOURCE resource,
-                String mimeType
-        ) {
-            this.mimeType = mimeType;
-            this.resource = resource;
-        }
-
-        private ParcelableResourceWithMimeType(Parcel in) {
-            mimeType = in.readString();
-            resource = in.readParcelable(FacebookSdk.getApplicationContext().getClassLoader());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/GraphRequestAsyncTask.java b/facebook/src/main/java/com/facebook/GraphRequestAsyncTask.java
deleted file mode 100644
index 3164318ca..000000000
--- a/facebook/src/main/java/com/facebook/GraphRequestAsyncTask.java
+++ /dev/null
@@ -1,178 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.AsyncTask;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.util.Log;
-
-import java.net.HttpURLConnection;
-import java.util.Collection;
-import java.util.List;
-
-/**
- * Defines an AsyncTask suitable for executing a Request in the background. May be subclassed
- * by applications having unique threading model needs.
- */
-public class GraphRequestAsyncTask extends AsyncTask<Void, Void, List<GraphResponse>> {
-    private static final String TAG = GraphRequestAsyncTask.class.getCanonicalName();
-
-    private final HttpURLConnection connection;
-    private final GraphRequestBatch requests;
-
-    private Exception exception;
-
-    /**
-     * Constructor. Serialization of the requests will be done in the background, so any
-     * serialization- related errors will be returned via the Response.getException() method.
-     *
-     * @param requests the requests to execute
-     */
-    public GraphRequestAsyncTask(GraphRequest... requests) {
-        this(null, new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Constructor. Serialization of the requests will be done in the background, so any
-     * serialization- related errors will be returned via the Response.getException() method.
-     *
-     * @param requests the requests to execute
-     */
-    public GraphRequestAsyncTask(Collection<GraphRequest> requests) {
-        this(null, new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Constructor. Serialization of the requests will be done in the background, so any
-     * serialization- related errors will be returned via the Response.getException() method.
-     *
-     * @param requests the requests to execute
-     */
-    public GraphRequestAsyncTask(GraphRequestBatch requests) {
-        this(null, requests);
-    }
-
-    /**
-     * Constructor that allows specification of an HTTP connection to use for executing
-     * the requests. No validation is done that the contents of the connection actually
-     * reflect the serialized requests, so it is the caller's responsibility to ensure
-     * that it will correctly generate the desired responses.
-     *
-     * @param connection the HTTP connection to use to execute the requests
-     * @param requests   the requests to execute
-     */
-    public GraphRequestAsyncTask(HttpURLConnection connection, GraphRequest... requests) {
-        this(connection, new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Constructor that allows specification of an HTTP connection to use for executing
-     * the requests. No validation is done that the contents of the connection actually
-     * reflect the serialized requests, so it is the caller's responsibility to ensure
-     * that it will correctly generate the desired responses.
-     *
-     * @param connection the HTTP connection to use to execute the requests
-     * @param requests   the requests to execute
-     */
-    public GraphRequestAsyncTask(HttpURLConnection connection, Collection<GraphRequest> requests) {
-        this(connection, new GraphRequestBatch(requests));
-    }
-
-    /**
-     * Constructor that allows specification of an HTTP connection to use for executing
-     * the requests. No validation is done that the contents of the connection actually
-     * reflect the serialized requests, so it is the caller's responsibility to ensure
-     * that it will correctly generate the desired responses.
-     *
-     * @param connection the HTTP connection to use to execute the requests
-     * @param requests   the requests to execute
-     */
-    public GraphRequestAsyncTask(HttpURLConnection connection, GraphRequestBatch requests) {
-        this.requests = requests;
-        this.connection = connection;
-    }
-
-    protected final Exception getException() {
-        return exception;
-    }
-
-    protected final GraphRequestBatch getRequests() {
-        return requests;
-    }
-
-    @Override
-    public String toString() {
-        return new StringBuilder()
-                .append("{RequestAsyncTask: ")
-                .append(" connection: ")
-                .append(connection)
-                .append(", requests: ")
-                .append(requests)
-                .append("}")
-                .toString();
-    }
-
-    @Override
-    protected void onPreExecute() {
-        super.onPreExecute();
-        if (FacebookSdk.isDebugEnabled()) {
-            Log.d(TAG, String.format("execute async task: %s", this));
-        }
-        if (requests.getCallbackHandler() == null) {
-            // We want any callbacks to go to a handler on this thread unless a handler has already
-            // been specified or we are not running on a thread without a looper.
-            Handler handler;
-            if (Thread.currentThread() instanceof HandlerThread) {
-                handler = new Handler();
-            } else {
-                handler = new Handler(Looper.getMainLooper());
-            }
-            requests.setCallbackHandler(handler);
-        }
-    }
-
-    @Override
-    protected void onPostExecute(List<GraphResponse> result) {
-        super.onPostExecute(result);
-
-        if (exception != null) {
-            Log.d(TAG, String.format(
-                    "onPostExecute: exception encountered during request: %s",
-                    exception.getMessage()));
-        }
-    }
-
-    @Override
-    protected List<GraphResponse> doInBackground(Void... params) {
-        try {
-            if (connection == null) {
-                return requests.executeAndWait();
-            } else {
-                return GraphRequest.executeConnectionAndWait(connection, requests);
-            }
-        } catch (Exception e) {
-            exception = e;
-            return null;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/GraphRequestBatch.java b/facebook/src/main/java/com/facebook/GraphRequestBatch.java
deleted file mode 100644
index ff4d7a05e..000000000
--- a/facebook/src/main/java/com/facebook/GraphRequestBatch.java
+++ /dev/null
@@ -1,258 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-
-import java.util.*;
-import java.util.concurrent.atomic.AtomicInteger;
-
-/**
- * RequestBatch contains a list of Request objects that can be sent to Facebook in a single
- * round-trip.
- */
-public class GraphRequestBatch extends AbstractList<GraphRequest> {
-    private static AtomicInteger idGenerator = new AtomicInteger();
-
-    private Handler callbackHandler;
-    private List<GraphRequest> requests = new ArrayList<GraphRequest>();
-    private int timeoutInMilliseconds = 0;
-    private final String id = Integer.valueOf(idGenerator.incrementAndGet()).toString();
-    private List<Callback> callbacks = new ArrayList<Callback>();
-    private String batchApplicationId;
-
-    /**
-     * Constructor. Creates an empty batch.
-     */
-    public GraphRequestBatch() {
-        this.requests = new ArrayList<GraphRequest>();
-    }
-
-    /**
-     * Constructor.
-     * @param requests the requests to add to the batch
-     */
-    public GraphRequestBatch(Collection<GraphRequest> requests) {
-        this.requests = new ArrayList<GraphRequest>(requests);
-    }
-
-    /**
-     * Constructor.
-     * @param requests the requests to add to the batch
-     */
-    public GraphRequestBatch(GraphRequest... requests) {
-        this.requests = Arrays.asList(requests);
-    }
-
-    /**
-     * Constructor.
-     * @param requests the requests to add to the batch
-     */
-    public GraphRequestBatch(GraphRequestBatch requests) {
-        this.requests = new ArrayList<GraphRequest>(requests);
-        this.callbackHandler = requests.callbackHandler;
-        this.timeoutInMilliseconds = requests.timeoutInMilliseconds;
-        this.callbacks = new ArrayList<Callback>(requests.callbacks);
-    }
-
-    /**
-     * Gets the timeout to wait for responses from the server before a timeout error occurs.
-     * @return the timeout, in milliseconds; 0 (the default) means do not timeout
-     */
-    public int getTimeout() {
-        return timeoutInMilliseconds;
-    }
-
-    /**
-     * Sets the timeout to wait for responses from the server before a timeout error occurs.
-     * @param timeoutInMilliseconds the timeout, in milliseconds; 0 means do not timeout
-     */
-    public void setTimeout(int timeoutInMilliseconds) {
-        if (timeoutInMilliseconds < 0) {
-            throw new IllegalArgumentException("Argument timeoutInMilliseconds must be >= 0.");
-        }
-        this.timeoutInMilliseconds = timeoutInMilliseconds;
-    }
-
-    /**
-     * Adds a batch-level callback which will be called when the entire batch has finished
-     * executing.
-     *
-     * @param callback the callback
-     */
-    public void addCallback(Callback callback) {
-        if (!callbacks.contains(callback)) {
-            callbacks.add(callback);
-        }
-    }
-
-    /**
-     * Removes a batch-level callback.
-     *
-     * @param callback the callback
-     */
-    public void removeCallback(Callback callback) {
-        callbacks.remove(callback);
-    }
-
-    @Override
-    public final boolean add(GraphRequest request) {
-        return requests.add(request);
-    }
-
-    @Override
-    public final void add(int location, GraphRequest request) {
-        requests.add(location, request);
-    }
-
-    @Override
-    public final void clear() {
-        requests.clear();
-    }
-
-    @Override
-    public final GraphRequest get(int i) {
-        return requests.get(i);
-    }
-
-    @Override
-    public final GraphRequest remove(int location) {
-        return requests.remove(location);
-    }
-
-    @Override
-    public final GraphRequest set(int location, GraphRequest request) {
-        return requests.set(location, request);
-    }
-
-    @Override
-    public final int size() {
-        return requests.size();
-    }
-
-    final String getId() {
-        return id;
-    }
-
-    final Handler getCallbackHandler() {
-        return callbackHandler;
-    }
-
-    final void setCallbackHandler(Handler callbackHandler) {
-        this.callbackHandler = callbackHandler;
-    }
-
-    final List<GraphRequest> getRequests() {
-        return requests;
-    }
-
-    final List<Callback> getCallbacks() {
-        return callbacks;
-    }
-
-    /**
-     * Getter for the batch application id.
-     * @return the batch application id.
-     */
-    final public String getBatchApplicationId() {
-        return batchApplicationId;
-    }
-
-    /**
-     * Setter for the batch application id.
-     * @param batchApplicationId The batch application id.
-     */
-    final public void setBatchApplicationId(String batchApplicationId) {
-        this.batchApplicationId = batchApplicationId;
-    }
-
-    /**
-     * Executes this batch on the current thread and returns the responses.
-     * <p/>
-     * This should only be used if you have transitioned off the UI thread.
-     *
-     * @return a list of Response objects representing the results of the requests; responses are
-     * returned in the same order as the requests were specified.
-     * @throws FacebookException        If there was an error in the protocol used to communicate
-     *                                  with the service
-     * @throws IllegalArgumentException if the passed in RequestBatch is empty
-     * @throws NullPointerException     if the passed in RequestBatch or any of its contents are
-     *                                  null
-     */
-    public final List<GraphResponse> executeAndWait() {
-        return executeAndWaitImpl();
-    }
-
-    /**
-     * Executes this batch asynchronously. This function will return immediately, and the batch will
-     * be processed on a separate thread. In order to process results of a request, or determine
-     * whether a request succeeded or failed, a callback must be specified (see
-     * {@link GraphRequest#setCallback(GraphRequest.Callback)})
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * @return a RequestAsyncTask that is executing the request
-     *
-     * @throws IllegalArgumentException if this batch is empty
-     * @throws NullPointerException if any of the contents of this batch are null
-     */
-    public final GraphRequestAsyncTask executeAsync() {
-        return executeAsyncImpl();
-    }
-
-    /**
-     * Specifies the interface that consumers of the RequestBatch class can implement in order to be
-     * notified when the entire batch completes execution. It will be called after all per-Request
-     * callbacks are called.
-     */
-    public interface Callback {
-        /**
-         * The method that will be called when a batch completes.
-         *
-         * @param batch     the RequestBatch containing the Requests which were executed
-         */
-        void onBatchCompleted(GraphRequestBatch batch);
-    }
-
-    /**
-     * Specifies the interface that consumers of the RequestBatch class can implement in order to be
-     * notified when the batch makes progress. The frequency of the callbacks can be controlled
-     * using {@link FacebookSdk#setOnProgressThreshold(long)}.
-     */
-    public interface OnProgressCallback extends Callback {
-        /**
-         * The method that will be called when a batch makes progress.
-         *
-         * @param batch     the RequestBatch containing the Requests which were executed
-         * @param current   the current value of the progress
-         * @param max       the max (target) value of the progress
-         */
-        void onBatchProgress(GraphRequestBatch batch, long current, long max);
-    }
-
-    List<GraphResponse> executeAndWaitImpl() {
-        return GraphRequest.executeBatchAndWait(this);
-    }
-
-    GraphRequestAsyncTask executeAsyncImpl() {
-        return GraphRequest.executeBatchAsync(this);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/GraphResponse.java b/facebook/src/main/java/com/facebook/GraphResponse.java
deleted file mode 100644
index 34868efb4..000000000
--- a/facebook/src/main/java/com/facebook/GraphResponse.java
+++ /dev/null
@@ -1,455 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import com.facebook.internal.FacebookRequestErrorClassification;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-
-/**
- * Encapsulates the response, successful or otherwise, of a call to the Facebook platform.
- */
-public class GraphResponse {
-    private final HttpURLConnection connection;
-    private final JSONObject graphObject;
-    private final JSONArray graphObjectArray;
-    private final FacebookRequestError error;
-    private final String rawResponse;
-    private final GraphRequest request;
-
-    /**
-     * Property name of non-JSON results in the GraphObject. Certain calls to Facebook result in a
-     * non-JSON response (e.g., the string literal "true" or "false"). To present a consistent way
-     * of accessing results, these are represented as a GraphObject with a single string property
-     * with this name.
-     */
-    public static final String NON_JSON_RESPONSE_PROPERTY = "FACEBOOK_NON_JSON_RESULT";
-
-    // From v2.1 of the Graph API, write endpoints will now return valid JSON with the result as the
-    // value for the "success" key
-    public static final String SUCCESS_KEY = "success";
-
-    private static final String CODE_KEY = "code";
-    private static final String BODY_KEY = "body";
-
-    private static final String RESPONSE_LOG_TAG = "Response";
-
-    GraphResponse(
-            GraphRequest request,
-            HttpURLConnection connection,
-            String rawResponse,
-            JSONObject graphObject) {
-        this(request, connection, rawResponse, graphObject, null, null);
-    }
-
-    GraphResponse(
-            GraphRequest request,
-            HttpURLConnection connection,
-            String rawResponse,
-            JSONArray graphObjects) {
-        this(request, connection, rawResponse, null, graphObjects, null);
-    }
-
-    GraphResponse(
-            GraphRequest request,
-            HttpURLConnection connection,
-            FacebookRequestError error) {
-        this(request, connection, null, null, null, error);
-    }
-
-    GraphResponse(
-            GraphRequest request,
-            HttpURLConnection connection,
-            String rawResponse,
-            JSONObject graphObject,
-            JSONArray graphObjects,
-            FacebookRequestError error) {
-        this.request = request;
-        this.connection = connection;
-        this.rawResponse = rawResponse;
-        this.graphObject = graphObject;
-        this.graphObjectArray = graphObjects;
-        this.error = error;
-    }
-
-    /**
-     * Returns information about any errors that may have occurred during the request.
-     *
-     * @return the error from the server, or null if there was no server error
-     */
-    public final FacebookRequestError getError() {
-        return error;
-    }
-
-    /**
-     * The response returned for this request, if it's in object form.
-     *
-     * @return the returned JSON object, or null if none was returned (or if the result was a JSON
-     * array)
-     */
-    public final JSONObject getJSONObject() {
-        return graphObject;
-    }
-
-
-    /**
-     * The response returned for this request, if it's in array form.
-     *
-     * @return the returned JSON array, or null if none was returned (or if the result was a JSON
-     * object)
-     */
-    public final JSONArray getJSONArray() {
-        return graphObjectArray;
-    }
-
-    /**
-     * Returns the HttpURLConnection that this response was generated from. If the response was
-     * retrieved from the cache, this will be null.
-     *
-     * @return the connection, or null
-     */
-    public final HttpURLConnection getConnection() {
-        return connection;
-    }
-
-    /**
-     * Returns the request that this response is for.
-     *
-     * @return the request that this response is for
-     */
-    public GraphRequest getRequest() {
-        return request;
-    }
-
-    /**
-     * Returns the server response as a String that this response is for.
-     *
-     * @return A String representation of the actual response from the server
-     */
-    public String getRawResponse() {
-        return rawResponse;
-    }
-
-    /**
-     * Indicates whether paging is being done forward or backward.
-     */
-    public enum PagingDirection {
-        /**
-         * Indicates that paging is being performed in the forward direction.
-         */
-        NEXT,
-        /**
-         * Indicates that paging is being performed in the backward direction.
-         */
-        PREVIOUS
-    }
-
-    /**
-     * If a Response contains results that contain paging information, returns a new
-     * Request that will retrieve the next page of results, in whichever direction
-     * is desired. If no paging information is available, returns null.
-     *
-     * @param direction enum indicating whether to page forward or backward
-     * @return a Request that will retrieve the next page of results in the desired
-     *         direction, or null if no paging information is available
-     */
-    public GraphRequest getRequestForPagedResults(PagingDirection direction) {
-        String link = null;
-        if (graphObject != null) {
-            JSONObject pagingInfo = graphObject.optJSONObject("paging");
-            if (pagingInfo != null) {
-                if (direction == PagingDirection.NEXT) {
-                    link = pagingInfo.optString("next");
-                } else {
-                    link = pagingInfo.optString("previous");
-                }
-            }
-        }
-        if (Utility.isNullOrEmpty(link)) {
-            return null;
-        }
-
-        if (link != null && link.equals(request.getUrlForSingleRequest())) {
-            // We got the same "next" link as we just tried to retrieve. This could happen if cached
-            // data is invalid. All we can do in this case is pretend we have finished.
-            return null;
-        }
-
-        GraphRequest pagingRequest;
-        try {
-            pagingRequest = new GraphRequest(request.getAccessToken(), new URL(link));
-        } catch (MalformedURLException e) {
-            return null;
-        }
-
-        return pagingRequest;
-    }
-
-    /**
-     * Provides a debugging string for this response.
-     */
-    @Override
-    public String toString() {
-        String responseCode;
-        try {
-            responseCode = String.format(
-                    Locale.US,
-                    "%d",
-                    (connection != null) ? connection.getResponseCode() : 200);
-        } catch (IOException e) {
-            responseCode = "unknown";
-        }
-
-        return new StringBuilder()
-                .append("{Response: ")
-                .append(" responseCode: ")
-                .append(responseCode)
-                .append(", graphObject: ")
-                .append(graphObject)
-                .append(", error: ")
-                .append(error)
-                .append("}")
-                .toString();
-    }
-
-    @SuppressWarnings("resource")
-    static List<GraphResponse> fromHttpConnection(
-            HttpURLConnection connection,
-            GraphRequestBatch requests) {
-        InputStream stream = null;
-
-        try {
-            if (connection.getResponseCode() >= 400) {
-                stream = connection.getErrorStream();
-            } else {
-                stream = connection.getInputStream();
-            }
-
-            return createResponsesFromStream(stream, connection, requests);
-        } catch (FacebookException facebookException) {
-            Logger.log(
-                    LoggingBehavior.REQUESTS,
-                    RESPONSE_LOG_TAG,
-                    "Response <Error>: %s",
-                    facebookException);
-            return constructErrorResponses(requests, connection, facebookException);
-        } catch (Exception exception) {
-            // Note due to bugs various android devices some devices can throw a
-            // SecurityException or NoSuchAlgorithmException. Make sure to handle these
-            // exceptions here.
-
-            Logger.log(
-                    LoggingBehavior.REQUESTS,
-                    RESPONSE_LOG_TAG,
-                    "Response <Error>: %s",
-                    exception);
-            return constructErrorResponses(requests, connection, new FacebookException(exception));
-        } finally {
-            Utility.closeQuietly(stream);
-        }
-    }
-
-    static List<GraphResponse> createResponsesFromStream(
-            InputStream stream,
-            HttpURLConnection connection,
-            GraphRequestBatch requests
-    ) throws FacebookException, JSONException, IOException {
-
-        String responseString = Utility.readStreamToString(stream);
-        Logger.log(LoggingBehavior.INCLUDE_RAW_RESPONSES, RESPONSE_LOG_TAG,
-                "Response (raw)\n  Size: %d\n  Response:\n%s\n", responseString.length(),
-                responseString);
-
-        return createResponsesFromString(responseString, connection, requests);
-    }
-
-    static List<GraphResponse> createResponsesFromString(
-            String responseString,
-            HttpURLConnection connection,
-            GraphRequestBatch requests
-    ) throws FacebookException, JSONException, IOException {
-        JSONTokener tokener = new JSONTokener(responseString);
-        Object resultObject = tokener.nextValue();
-
-        List<GraphResponse> responses = createResponsesFromObject(
-                connection,
-                requests,
-                resultObject);
-        Logger.log(
-                LoggingBehavior.REQUESTS,
-                RESPONSE_LOG_TAG,
-                "Response\n  Id: %s\n  Size: %d\n  Responses:\n%s\n",
-                requests.getId(),
-                responseString.length(),
-                responses);
-
-        return responses;
-    }
-
-    private static List<GraphResponse> createResponsesFromObject(
-            HttpURLConnection connection,
-            List<GraphRequest> requests,
-            Object object
-    ) throws FacebookException, JSONException {
-        int numRequests = requests.size();
-        List<GraphResponse> responses = new ArrayList<GraphResponse>(numRequests);
-        Object originalResult = object;
-
-        if (numRequests == 1) {
-            GraphRequest request = requests.get(0);
-            try {
-                // Single request case -- the entire response is the result, wrap it as "body" so we
-                // can handle it the same as we do in the batched case. We get the response code
-                // from the actual HTTP response, as opposed to the batched case where it is
-                // returned as a "code" element.
-                JSONObject jsonObject = new JSONObject();
-                jsonObject.put(BODY_KEY, object);
-                int responseCode = (connection != null) ? connection.getResponseCode() : 200;
-                jsonObject.put(CODE_KEY, responseCode);
-
-                JSONArray jsonArray = new JSONArray();
-                jsonArray.put(jsonObject);
-
-                // Pretend we got an array of 1 back.
-                object = jsonArray;
-            } catch (JSONException e) {
-                responses.add(
-                        new GraphResponse(
-                                request,
-                                connection,
-                                new FacebookRequestError(connection, e)));
-            } catch (IOException e) {
-                responses.add(
-                        new GraphResponse(
-                                request,
-                                connection,
-                                new FacebookRequestError(connection, e)));
-            }
-        }
-
-        if (!(object instanceof JSONArray) || ((JSONArray) object).length() != numRequests) {
-            FacebookException exception = new FacebookException("Unexpected number of results");
-            throw exception;
-        }
-
-        JSONArray jsonArray = (JSONArray) object;
-
-        for (int i = 0; i < jsonArray.length(); ++i) {
-            GraphRequest request = requests.get(i);
-            try {
-                Object obj = jsonArray.get(i);
-                responses.add(
-                        createResponseFromObject(
-                                request,
-                                connection,
-                                obj,
-                                originalResult));
-            } catch (JSONException e) {
-                responses.add(
-                        new GraphResponse(
-                                request,
-                                connection,
-                                new FacebookRequestError(connection, e)));
-            } catch (FacebookException e) {
-                responses.add(
-                        new GraphResponse(
-                                request,
-                                connection,
-                                new FacebookRequestError(connection, e)));
-            }
-        }
-
-        return responses;
-    }
-
-    private static GraphResponse createResponseFromObject(
-            GraphRequest request,
-            HttpURLConnection connection,
-            Object object,
-            Object originalResult
-    ) throws JSONException {
-        if (object instanceof JSONObject) {
-            JSONObject jsonObject = (JSONObject) object;
-
-            FacebookRequestError error =
-                    FacebookRequestError.checkResponseAndCreateError(
-                            jsonObject,
-                            originalResult,
-                            connection);
-            if (error != null) {
-                if (error.getErrorCode() == FacebookRequestErrorClassification.EC_INVALID_TOKEN
-                        && Utility.isCurrentAccessToken(request.getAccessToken())) {
-                    AccessToken.setCurrentAccessToken(null);
-                }
-                return new GraphResponse(request, connection, error);
-            }
-
-            Object body = Utility.getStringPropertyAsJSON(
-                    jsonObject,
-                    BODY_KEY,
-                    NON_JSON_RESPONSE_PROPERTY);
-
-            if (body instanceof JSONObject) {
-                return new GraphResponse(request, connection, body.toString(), (JSONObject)body);
-            } else if (body instanceof JSONArray) {
-                return new GraphResponse(request, connection, body.toString(), (JSONArray)body);
-            }
-            // We didn't get a body we understand how to handle, so pretend we got nothing.
-            object = JSONObject.NULL;
-        }
-
-        if (object == JSONObject.NULL) {
-            return new GraphResponse(request, connection, object.toString(), (JSONObject)null);
-        } else {
-            throw new FacebookException("Got unexpected object type in response, class: "
-                    + object.getClass().getSimpleName());
-        }
-    }
-
-    static List<GraphResponse> constructErrorResponses(
-            List<GraphRequest> requests,
-            HttpURLConnection connection,
-            FacebookException error) {
-        int count = requests.size();
-        List<GraphResponse> responses = new ArrayList<GraphResponse>(count);
-        for (int i = 0; i < count; ++i) {
-            GraphResponse response = new GraphResponse(
-                    requests.get(i),
-                    connection,
-                    new FacebookRequestError(connection, error));
-            responses.add(response);
-        }
-        return responses;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/HttpMethod.java b/facebook/src/main/java/com/facebook/HttpMethod.java
deleted file mode 100644
index 63b287106..000000000
--- a/facebook/src/main/java/com/facebook/HttpMethod.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Enumeration of HTTP methods supported by Request
- */
-public enum HttpMethod {
-    /**
-     * Use HTTP method "GET" for the request
-     */
-    GET,
-
-    /**
-     * Use HTTP method "POST" for the request
-     */
-    POST,
-
-    /**
-     * Use HTTP method "DELETE" for the request
-     */
-    DELETE,
-}
diff --git a/facebook/src/main/java/com/facebook/LegacyTokenHelper.java b/facebook/src/main/java/com/facebook/LegacyTokenHelper.java
deleted file mode 100644
index 723955891..000000000
--- a/facebook/src/main/java/com/facebook/LegacyTokenHelper.java
+++ /dev/null
@@ -1,550 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.util.Log;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-final class LegacyTokenHelper {
-    /**
-     * The key used by AccessTokenCache to store the token value in the Bundle during
-     * load and save.
-     */
-    public static final String TOKEN_KEY = "com.facebook.TokenCachingStrategy.Token";
-
-    /**
-     * The key used by AccessTokenCache to store the expiration date value in the Bundle
-     * during load and save.
-     */
-    public static final String EXPIRATION_DATE_KEY =
-            "com.facebook.TokenCachingStrategy.ExpirationDate";
-
-    /**
-     * The key used by AccessTokenCache to store the last refresh date value in the
-     * Bundle during load and save.
-     */
-    public static final String LAST_REFRESH_DATE_KEY =
-            "com.facebook.TokenCachingStrategy.LastRefreshDate";
-
-    /**
-     * The key used by AccessTokenCache to store an enum indicating the source of the token
-     * in the Bundle during load and save.
-     */
-    public static final String TOKEN_SOURCE_KEY =
-            "com.facebook.TokenCachingStrategy.AccessTokenSource";
-
-    /**
-     * The key used by AccessTokenCache to store the list of permissions granted by the
-     * token in the Bundle during load and save.
-     */
-    public static final String PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.Permissions";
-
-    /**
-     * The key used by AccessTokenCache to store the list of permissions declined by the user in the token in
-     * the Bundle during load and save.
-     */
-    public static final String DECLINED_PERMISSIONS_KEY =
-            "com.facebook.TokenCachingStrategy.DeclinedPermissions";
-
-    public static final String APPLICATION_ID_KEY =
-            "com.facebook.TokenCachingStrategy.ApplicationId";
-
-    private static final long INVALID_BUNDLE_MILLISECONDS = Long.MIN_VALUE;
-    private static final String IS_SSO_KEY = "com.facebook.TokenCachingStrategy.IsSSO";
-
-    public static final String DEFAULT_CACHE_KEY =
-            "com.facebook.SharedPreferencesTokenCachingStrategy.DEFAULT_KEY";
-    private static final String TAG = LegacyTokenHelper.class.getSimpleName();
-
-    private static final String JSON_VALUE_TYPE = "valueType";
-    private static final String JSON_VALUE = "value";
-    private static final String JSON_VALUE_ENUM_TYPE = "enumType";
-
-    private static final String TYPE_BOOLEAN = "bool";
-    private static final String TYPE_BOOLEAN_ARRAY = "bool[]";
-    private static final String TYPE_BYTE = "byte";
-    private static final String TYPE_BYTE_ARRAY = "byte[]";
-    private static final String TYPE_SHORT = "short";
-    private static final String TYPE_SHORT_ARRAY = "short[]";
-    private static final String TYPE_INTEGER = "int";
-    private static final String TYPE_INTEGER_ARRAY = "int[]";
-    private static final String TYPE_LONG = "long";
-    private static final String TYPE_LONG_ARRAY = "long[]";
-    private static final String TYPE_FLOAT = "float";
-    private static final String TYPE_FLOAT_ARRAY = "float[]";
-    private static final String TYPE_DOUBLE = "double";
-    private static final String TYPE_DOUBLE_ARRAY = "double[]";
-    private static final String TYPE_CHAR = "char";
-    private static final String TYPE_CHAR_ARRAY = "char[]";
-    private static final String TYPE_STRING = "string";
-    private static final String TYPE_STRING_LIST = "stringList";
-    private static final String TYPE_ENUM = "enum";
-
-    private String cacheKey;
-    private SharedPreferences cache;
-
-    public LegacyTokenHelper(Context context) {
-        this(context, null);
-    }
-
-    public LegacyTokenHelper(Context context, String cacheKey) {
-        Validate.notNull(context, "context");
-
-        this.cacheKey = Utility.isNullOrEmpty(cacheKey) ? DEFAULT_CACHE_KEY : cacheKey;
-
-        // If the application context is available, use that. However, if it isn't
-        // available (possibly because of a context that was created manually), use
-        // the passed in context directly.
-        Context applicationContext = context.getApplicationContext();
-        context = applicationContext != null ? applicationContext : context;
-
-        this.cache = context.getSharedPreferences(
-                this.cacheKey,
-                Context.MODE_PRIVATE);
-    }
-
-    public Bundle load() {
-        Bundle settings = new Bundle();
-
-        Map<String, ?> allCachedEntries = cache.getAll();
-
-        for (String key : allCachedEntries.keySet()) {
-            try {
-                deserializeKey(key, settings);
-            } catch (JSONException e) {
-                // Error in the cache. So consider it corrupted and return null
-                Logger.log(LoggingBehavior.CACHE, Log.WARN, TAG,
-                        "Error reading cached value for key: '" + key + "' -- " + e);
-                return null;
-            }
-        }
-
-        return settings;
-    }
-
-    public void save(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-
-        SharedPreferences.Editor editor = cache.edit();
-
-        for (String key : bundle.keySet()) {
-            try {
-                serializeKey(key, bundle, editor);
-            } catch (JSONException e) {
-                // Error in the bundle. Don't store a partial cache.
-                Logger.log(
-                        LoggingBehavior.CACHE,
-                        Log.WARN,
-                        TAG,
-                        "Error processing value for key: '" + key + "' -- " + e);
-
-                // Bypass the commit and just return. This cancels the entire edit transaction
-                return;
-            }
-        }
-        editor.apply();
-    }
-
-    /**
-     * Clears out all token information stored in this cache.
-     */
-    public void clear() {
-        cache.edit().clear().apply();
-    }
-
-    public static boolean hasTokenInformation(Bundle bundle) {
-        if (bundle == null) {
-            return false;
-        }
-
-        String token = bundle.getString(TOKEN_KEY);
-        if ((token == null) || (token.length() == 0)) {
-            return false;
-        }
-
-        long expiresMilliseconds = bundle.getLong(EXPIRATION_DATE_KEY, 0L);
-        if (expiresMilliseconds == 0L) {
-            return false;
-        }
-
-        return true;
-    }
-
-    public static String getToken(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        return bundle.getString(TOKEN_KEY);
-    }
-
-    public static void putToken(Bundle bundle, String value) {
-        Validate.notNull(bundle, "bundle");
-        Validate.notNull(value, "value");
-        bundle.putString(TOKEN_KEY, value);
-    }
-
-    public static Date getExpirationDate(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        return getDate(bundle, EXPIRATION_DATE_KEY);
-    }
-
-    public static void putExpirationDate(Bundle bundle, Date value) {
-        Validate.notNull(bundle, "bundle");
-        Validate.notNull(value, "value");
-        putDate(bundle, EXPIRATION_DATE_KEY, value);
-    }
-
-    public static long getExpirationMilliseconds(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        return bundle.getLong(EXPIRATION_DATE_KEY);
-    }
-
-    public static void putExpirationMilliseconds(Bundle bundle, long value) {
-        Validate.notNull(bundle, "bundle");
-        bundle.putLong(EXPIRATION_DATE_KEY, value);
-    }
-
-    public static Set<String> getPermissions(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        ArrayList<String> arrayList = bundle.getStringArrayList(PERMISSIONS_KEY);
-        if (arrayList == null) {
-            return null;
-        }
-        return new HashSet<String>(arrayList);
-    }
-
-    public static void putPermissions(Bundle bundle, Collection<String> value) {
-        Validate.notNull(bundle, "bundle");
-        Validate.notNull(value, "value");
-
-        bundle.putStringArrayList(PERMISSIONS_KEY, new ArrayList<String>(value));
-    }
-
-    public static void putDeclinedPermissions(Bundle bundle, Collection<String> value) {
-        Validate.notNull(bundle, "bundle");
-        Validate.notNull(value, "value");
-
-        bundle.putStringArrayList(DECLINED_PERMISSIONS_KEY, new ArrayList<String>(value));
-    }
-
-    public static AccessTokenSource getSource(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        if (bundle.containsKey(TOKEN_SOURCE_KEY)) {
-            return (AccessTokenSource) bundle.getSerializable(TOKEN_SOURCE_KEY);
-        } else {
-            boolean isSSO = bundle.getBoolean(IS_SSO_KEY);
-            return isSSO ? AccessTokenSource.FACEBOOK_APPLICATION_WEB : AccessTokenSource.WEB_VIEW;
-        }
-    }
-
-    public static void putSource(Bundle bundle, AccessTokenSource value) {
-        Validate.notNull(bundle, "bundle");
-        bundle.putSerializable(TOKEN_SOURCE_KEY, value);
-    }
-
-    public static Date getLastRefreshDate(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        return getDate(bundle, LAST_REFRESH_DATE_KEY);
-    }
-
-    public static void putLastRefreshDate(Bundle bundle, Date value) {
-        Validate.notNull(bundle, "bundle");
-        Validate.notNull(value, "value");
-        putDate(bundle, LAST_REFRESH_DATE_KEY, value);
-    }
-
-    public static long getLastRefreshMilliseconds(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        return bundle.getLong(LAST_REFRESH_DATE_KEY);
-    }
-
-    public static void putLastRefreshMilliseconds(Bundle bundle, long value) {
-        Validate.notNull(bundle, "bundle");
-        bundle.putLong(LAST_REFRESH_DATE_KEY, value);
-    }
-
-    public static String getApplicationId(Bundle bundle) {
-        Validate.notNull(bundle, "bundle");
-        return bundle.getString(APPLICATION_ID_KEY);
-    }
-
-    public static void putApplicationId(Bundle bundle, String value) {
-        Validate.notNull(bundle, "bundle");
-        bundle.putString(APPLICATION_ID_KEY, value);
-    }
-
-    static Date getDate(Bundle bundle, String key) {
-        if (bundle == null) {
-            return null;
-        }
-
-        long n = bundle.getLong(key, INVALID_BUNDLE_MILLISECONDS);
-        if (n == INVALID_BUNDLE_MILLISECONDS) {
-            return null;
-        }
-
-        return new Date(n);
-    }
-
-    static void putDate(Bundle bundle, String key, Date date) {
-        bundle.putLong(key, date.getTime());
-    }
-
-    private void serializeKey(String key, Bundle bundle, SharedPreferences.Editor editor)
-        throws JSONException {
-        Object value = bundle.get(key);
-        if (value == null) {
-            // Cannot serialize null values.
-            return;
-        }
-
-        String supportedType = null;
-        JSONArray jsonArray = null;
-        JSONObject json = new JSONObject();
-
-        if (value instanceof Byte) {
-            supportedType = TYPE_BYTE;
-            json.put(JSON_VALUE, ((Byte)value).intValue());
-        } else if (value instanceof Short) {
-            supportedType = TYPE_SHORT;
-            json.put(JSON_VALUE, ((Short)value).intValue());
-        } else if (value instanceof Integer) {
-            supportedType = TYPE_INTEGER;
-            json.put(JSON_VALUE, ((Integer)value).intValue());
-        } else if (value instanceof Long) {
-            supportedType = TYPE_LONG;
-            json.put(JSON_VALUE, ((Long)value).longValue());
-        } else if (value instanceof Float) {
-            supportedType = TYPE_FLOAT;
-            json.put(JSON_VALUE, ((Float)value).doubleValue());
-        } else if (value instanceof Double) {
-            supportedType = TYPE_DOUBLE;
-            json.put(JSON_VALUE, ((Double)value).doubleValue());
-        } else if (value instanceof Boolean) {
-            supportedType = TYPE_BOOLEAN;
-            json.put(JSON_VALUE, ((Boolean)value).booleanValue());
-        } else if (value instanceof Character) {
-            supportedType = TYPE_CHAR;
-            json.put(JSON_VALUE, value.toString());
-        } else if (value instanceof String) {
-            supportedType = TYPE_STRING;
-            json.put(JSON_VALUE, (String)value);
-        } else if (value instanceof Enum<?>) {
-            supportedType = TYPE_ENUM;
-            json.put(JSON_VALUE, value.toString());
-            json.put(JSON_VALUE_ENUM_TYPE, value.getClass().getName());
-        } else {
-            // Optimistically create a JSONArray. If not an array type, we can null
-            // it out later
-            jsonArray = new JSONArray();
-            if (value instanceof byte[]) {
-                supportedType = TYPE_BYTE_ARRAY;
-                for (byte v : (byte[])value) {
-                    jsonArray.put((int)v);
-                }
-            } else if (value instanceof short[]) {
-                supportedType = TYPE_SHORT_ARRAY;
-                for (short v : (short[])value) {
-                    jsonArray.put((int)v);
-                }
-            } else if (value instanceof int[]) {
-                supportedType = TYPE_INTEGER_ARRAY;
-                for (int v : (int[])value) {
-                    jsonArray.put(v);
-                }
-            } else if (value instanceof long[]) {
-                supportedType = TYPE_LONG_ARRAY;
-                for (long v : (long[])value) {
-                    jsonArray.put(v);
-                }
-            } else if (value instanceof float[]) {
-                supportedType = TYPE_FLOAT_ARRAY;
-                for (float v : (float[])value) {
-                    jsonArray.put((double)v);
-                }
-            } else if (value instanceof double[]) {
-                supportedType = TYPE_DOUBLE_ARRAY;
-                for (double v : (double[])value) {
-                    jsonArray.put(v);
-                }
-            } else if (value instanceof boolean[]) {
-                supportedType = TYPE_BOOLEAN_ARRAY;
-                for (boolean v : (boolean[])value) {
-                    jsonArray.put(v);
-                }
-            } else if (value instanceof char[]) {
-                supportedType = TYPE_CHAR_ARRAY;
-                for (char v : (char[])value) {
-                    jsonArray.put(String.valueOf(v));
-                }
-            } else if (value instanceof List<?>) {
-                supportedType = TYPE_STRING_LIST;
-                @SuppressWarnings("unchecked")
-                List<String> stringList = (List<String>)value;
-                for (String v : stringList) {
-                    jsonArray.put((v == null) ? JSONObject.NULL : v);
-                }
-            } else {
-                // Unsupported type. Clear out the array as a precaution even though
-                // it is redundant with the null supportedType.
-                jsonArray = null;
-            }
-        }
-
-        if (supportedType != null) {
-            json.put(JSON_VALUE_TYPE, supportedType);
-            if (jsonArray != null) {
-                // If we have an array, it has already been converted to JSON. So use
-                // that instead.
-                json.putOpt(JSON_VALUE, jsonArray);
-            }
-
-            String jsonString = json.toString();
-            editor.putString(key, jsonString);
-        }
-    }
-
-    private void deserializeKey(String key, Bundle bundle)
-            throws JSONException {
-        String jsonString = cache.getString(key, "{}");
-        JSONObject json = new JSONObject(jsonString);
-
-        String valueType = json.getString(JSON_VALUE_TYPE);
-
-        if (valueType.equals(TYPE_BOOLEAN)) {
-            bundle.putBoolean(key, json.getBoolean(JSON_VALUE));
-        } else if (valueType.equals(TYPE_BOOLEAN_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            boolean[] array = new boolean[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                array[i] = jsonArray.getBoolean(i);
-            }
-            bundle.putBooleanArray(key, array);
-        } else if (valueType.equals(TYPE_BYTE)) {
-            bundle.putByte(key, (byte)json.getInt(JSON_VALUE));
-        } else if (valueType.equals(TYPE_BYTE_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            byte[] array = new byte[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                array[i] = (byte)jsonArray.getInt(i);
-            }
-            bundle.putByteArray(key, array);
-        } else if (valueType.equals(TYPE_SHORT)) {
-            bundle.putShort(key, (short)json.getInt(JSON_VALUE));
-        } else if (valueType.equals(TYPE_SHORT_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            short[] array = new short[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                array[i] = (short)jsonArray.getInt(i);
-            }
-            bundle.putShortArray(key, array);
-        } else if (valueType.equals(TYPE_INTEGER)) {
-            bundle.putInt(key, json.getInt(JSON_VALUE));
-        } else if (valueType.equals(TYPE_INTEGER_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            int[] array = new int[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                array[i] = jsonArray.getInt(i);
-            }
-            bundle.putIntArray(key, array);
-        } else if (valueType.equals(TYPE_LONG)) {
-            bundle.putLong(key, json.getLong(JSON_VALUE));
-        } else if (valueType.equals(TYPE_LONG_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            long[] array = new long[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                array[i] = jsonArray.getLong(i);
-            }
-            bundle.putLongArray(key, array);
-        } else if (valueType.equals(TYPE_FLOAT)) {
-            bundle.putFloat(key, (float)json.getDouble(JSON_VALUE));
-        } else if (valueType.equals(TYPE_FLOAT_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            float[] array = new float[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                array[i] = (float)jsonArray.getDouble(i);
-            }
-            bundle.putFloatArray(key, array);
-        } else if (valueType.equals(TYPE_DOUBLE)) {
-            bundle.putDouble(key, json.getDouble(JSON_VALUE));
-        } else if (valueType.equals(TYPE_DOUBLE_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            double[] array = new double[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                array[i] = jsonArray.getDouble(i);
-            }
-            bundle.putDoubleArray(key, array);
-        } else if (valueType.equals(TYPE_CHAR)) {
-            String charString = json.getString(JSON_VALUE);
-            if (charString != null && charString.length() == 1) {
-                bundle.putChar(key, charString.charAt(0));
-            }
-        } else if (valueType.equals(TYPE_CHAR_ARRAY)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            char[] array = new char[jsonArray.length()];
-            for (int i = 0; i < array.length; i++) {
-                String charString = jsonArray.getString(i);
-                if (charString != null && charString.length() == 1) {
-                    array[i] = charString.charAt(0);
-                }
-            }
-            bundle.putCharArray(key, array);
-        } else if (valueType.equals(TYPE_STRING)) {
-            bundle.putString(key, json.getString(JSON_VALUE));
-        } else if (valueType.equals(TYPE_STRING_LIST)) {
-            JSONArray jsonArray = json.getJSONArray(JSON_VALUE);
-            int numStrings = jsonArray.length();
-            ArrayList<String> stringList = new ArrayList<String>(numStrings);
-            for (int i = 0; i < numStrings; i++) {
-                Object jsonStringValue = jsonArray.get(i);
-                stringList.add(
-                        i,
-                        jsonStringValue == JSONObject.NULL ? null : (String)jsonStringValue);
-            }
-            bundle.putStringArrayList(key, stringList);
-        } else if (valueType.equals(TYPE_ENUM)) {
-            try {
-                String enumType = json.getString(JSON_VALUE_ENUM_TYPE);
-                @SuppressWarnings({ "unchecked", "rawtypes" })
-                Class<? extends Enum> enumClass = (Class<? extends Enum>) Class.forName(enumType);
-                @SuppressWarnings("unchecked")
-                Enum<?> enumValue = Enum.valueOf(enumClass, json.getString(JSON_VALUE));
-                bundle.putSerializable(key, enumValue);
-            } catch (ClassNotFoundException e) {
-            } catch (IllegalArgumentException e) {
-            }
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/LoggingBehavior.java b/facebook/src/main/java/com/facebook/LoggingBehavior.java
deleted file mode 100644
index 768a8b944..000000000
--- a/facebook/src/main/java/com/facebook/LoggingBehavior.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-/**
- * Specifies different categories of logging messages that can be generated.
- *
- * @see FacebookSdk#addLoggingBehavior(LoggingBehavior)
- */
-public enum LoggingBehavior {
-    /**
-     * Indicates that HTTP requests and a summary of responses should be logged.
-     */
-    REQUESTS,
-    /**
-     * Indicates that access tokens should be logged as part of the request logging; normally they
-     * are not.
-     */
-    INCLUDE_ACCESS_TOKENS,
-    /**
-     * Indicates that the entire raw HTTP response for each request should be logged.
-     */
-    INCLUDE_RAW_RESPONSES,
-    /**
-     * Indicates that cache operations should be logged.
-     */
-    CACHE,
-    /**
-     * Indicates the App Events-related operations should be logged.
-     */
-    APP_EVENTS,
-    /**
-     * Indicates that likely developer errors should be logged.  (This is set by default in
-     * LoggingBehavior.)
-     */
-    DEVELOPER_ERRORS,
-
-    /**
-     * Log debug warnings from API response, e.g. when friends fields requested, but user_friends
-     * permission isn't granted.
-     */
-    GRAPH_API_DEBUG_WARNING,
-
-    /**
-     * Log warnings from API response, e.g. when requested feature will be deprecated in next
-     * version of API. Info is the lowest level of severity, using it will result in logging all
-     * GRAPH_API_DEBUG levels.
-     */
-    GRAPH_API_DEBUG_INFO
-    ;
-}
diff --git a/facebook/src/main/java/com/facebook/Profile.java b/facebook/src/main/java/com/facebook/Profile.java
deleted file mode 100644
index 919ba1686..000000000
--- a/facebook/src/main/java/com/facebook/Profile.java
+++ /dev/null
@@ -1,313 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-
-import com.facebook.internal.ImageRequest;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-/**
- * This class represents a basic Facebook profile.
- */
-public final class Profile implements Parcelable {
-    private static final String ID_KEY = "id";
-    private static final String FIRST_NAME_KEY = "first_name";
-    private static final String MIDDLE_NAME_KEY = "middle_name";
-    private static final String LAST_NAME_KEY = "last_name";
-    private static final String NAME_KEY = "name";
-    private static final String LINK_URI_KEY = "link_uri";
-
-    private final String id;
-    private final String firstName;
-    private final String middleName;
-    private final String lastName;
-    private final String name;
-    private final Uri linkUri;
-
-    /**
-     * Getter for the profile that is currently logged in to the application.
-     * @return The profile that is currently logged in to the application.
-     */
-    public static Profile getCurrentProfile()
-    {
-        return ProfileManager.getInstance().getCurrentProfile();
-    }
-
-    /**
-     * Setter for the profile that is currently logged in to the application. If the access token is
-     * invalidated, the current profile will not be updated. It's only updated when there is an
-     * explicit logout, login or when permissions change via the
-     * {@link com.facebook.login.LoginManager}.
-     * @param profile The profile that is currently logged in to the application.
-     */
-    public static void setCurrentProfile(Profile profile) {
-        ProfileManager.getInstance().setCurrentProfile(profile);
-    }
-
-    /**
-     * Fetches and sets the current profile from the current access token.
-     * <p/>
-     * This should only be called from the UI thread.
-     */
-    public static void fetchProfileForCurrentAccessToken() {
-        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        if (accessToken == null) {
-            Profile.setCurrentProfile(null);
-            return;
-        }
-
-        Utility.getGraphMeRequestWithCacheAsync(accessToken.getToken(),
-                new Utility.GraphMeRequestWithCacheCallback() {
-                    @Override
-                    public void onSuccess(JSONObject userInfo) {
-                        String id = userInfo.optString("id");
-                        if (id == null) {
-                            return;
-                        }
-                        String link = userInfo.optString("link");
-                        Profile profile = new Profile(
-                                id,
-                                userInfo.optString("first_name"),
-                                userInfo.optString("middle_name"),
-                                userInfo.optString("last_name"),
-                                userInfo.optString("name"),
-                                link != null ? Uri.parse(link) : null
-                        );
-                        Profile.setCurrentProfile(profile);
-                    }
-
-                    @Override
-                    public void onFailure(FacebookException error) {
-                        return;
-                    }
-                });
-    }
-
-    /**
-     * Contructor.
-     * @param id         The id of the profile.
-     * @param firstName  The first name of the profile. Can be null.
-     * @param middleName The middle name of the profile. Can be null.
-     * @param lastName   The last name of the profile. Can be null.
-     * @param name       The name of the profile. Can be null.
-     * @param linkUri    The link for this profile. Can be null.
-     */
-    public Profile(
-            final String id,
-            @Nullable
-            final String firstName,
-            @Nullable
-            final String middleName,
-            @Nullable
-            final String lastName,
-            @Nullable
-            final String name,
-            @Nullable
-            final Uri linkUri) {
-        Validate.notNullOrEmpty(id, "id");
-
-        this.id = id;
-        this.firstName = firstName;
-        this.middleName = middleName;
-        this.lastName = lastName;
-        this.name = name;
-        this.linkUri = linkUri;
-    }
-
-    /**
-     * Getter for the Uri of the profile picture.
-     *
-     * @param width  The desired width for the profile picture.
-     * @param height The desired height for the profile picture.
-     * @return The Uri of the profile picture.
-     */
-    public Uri getProfilePictureUri(
-            int width,
-            int height) {
-        return ImageRequest.getProfilePictureUri(this.id, width, height);
-    }
-
-    /**
-     * Getter for the id of the profile.
-     * @return id of the profile.
-     */
-    public String getId() {
-        return id;
-    }
-
-    /**
-     * Getter for the first name of the profile.
-     * @return the first name of the profile.
-     */
-    public String getFirstName() {
-        return firstName;
-    }
-
-    /**
-     * Getter for the middle name of the profile.
-     * @return the middle name of the profile.
-     */
-    public String getMiddleName() {
-        return middleName;
-    }
-
-    /**
-     * Getter for the last name of the profile.
-     * @return the last name of the profile.
-     */
-    public String getLastName() {
-        return lastName;
-    }
-
-    /**
-     * Getter for the name of the profile.
-     * @return the name of the profile.
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Getter for the link of the profile.
-     * @return the link of the profile.
-     */
-    public Uri getLinkUri() {
-        return linkUri;
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        if (this == other) {
-            return true;
-        }
-
-        if (!(other instanceof Profile)) {
-            return false;
-        }
-
-        Profile o = (Profile) other;
-
-        return id.equals(o.id) &&
-                firstName == null ? o.firstName == null : firstName.equals(o.firstName) &&
-                middleName == null ? o.middleName == null : middleName.equals(o.middleName) &&
-                lastName == null ? o.lastName == null : lastName.equals(o.lastName) &&
-                name == null ? o.name == null : name.equals(o.name) &&
-                linkUri == null ? o.linkUri == null : linkUri.equals(o.linkUri);
-    }
-
-    @Override
-    public int hashCode() {
-        int result = 17;
-
-        result = result * 31 + id.hashCode();
-        if (firstName != null) {
-            result = result * 31 + firstName.hashCode();
-        }
-        if (middleName != null) {
-            result = result * 31 + middleName.hashCode();
-        }
-        if (lastName != null) {
-            result = result * 31 + lastName.hashCode();
-        }
-        if (name != null) {
-            result = result * 31 + name.hashCode();
-        }
-        if (linkUri != null) {
-            result = result * 31 + linkUri.hashCode();
-        }
-
-        return result;
-    }
-
-    JSONObject toJSONObject() {
-        JSONObject jsonObject = new JSONObject();
-        try {
-            jsonObject.put(ID_KEY, id);
-            jsonObject.put(FIRST_NAME_KEY, firstName);
-            jsonObject.put(MIDDLE_NAME_KEY, middleName);
-            jsonObject.put(LAST_NAME_KEY, lastName);
-            jsonObject.put(NAME_KEY, name);
-            if (linkUri != null) {
-                jsonObject.put(LINK_URI_KEY, linkUri.toString());
-            }
-        } catch (JSONException object) {
-            jsonObject = null;
-        }
-        return jsonObject;
-    }
-
-    Profile(JSONObject jsonObject) {
-        id = jsonObject.optString(ID_KEY, null);
-        firstName = jsonObject.optString(FIRST_NAME_KEY, null);
-        middleName = jsonObject.optString(MIDDLE_NAME_KEY, null);
-        lastName = jsonObject.optString(LAST_NAME_KEY, null);
-        name = jsonObject.optString(NAME_KEY, null);
-        String linkUriString = jsonObject.optString(LINK_URI_KEY, null);
-        linkUri = linkUriString == null ? null : Uri.parse(linkUriString);
-    }
-
-    private Profile(Parcel source) {
-        id = source.readString();
-        firstName = source.readString();
-        middleName = source.readString();
-        lastName = source.readString();
-        name = source.readString();
-        String linkUriString = source.readString();
-        linkUri = linkUriString == null ? null : Uri.parse(linkUriString);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(id);
-        dest.writeString(firstName);
-        dest.writeString(middleName);
-        dest.writeString(lastName);
-        dest.writeString(name);
-        dest.writeString(linkUri == null ? null : linkUri.toString());
-    }
-
-    public static final Parcelable.Creator<Profile> CREATOR = new Parcelable.Creator() {
-
-        @Override
-        public Profile createFromParcel(Parcel source) {
-            return new Profile(source);
-        }
-
-        @Override
-        public Profile[] newArray(int size) {
-            return new Profile[size];
-        }
-    };
-}
diff --git a/facebook/src/main/java/com/facebook/ProfileCache.java b/facebook/src/main/java/com/facebook/ProfileCache.java
deleted file mode 100644
index 3569bab37..000000000
--- a/facebook/src/main/java/com/facebook/ProfileCache.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-
-import com.facebook.internal.Validate;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-final class ProfileCache {
-    static final String CACHED_PROFILE_KEY = "com.facebook.ProfileManager.CachedProfile";
-    static final String SHARED_PREFERENCES_NAME =
-            "com.facebook.AccessTokenManager.SharedPreferences";
-
-    private final SharedPreferences sharedPreferences;
-
-    ProfileCache() {
-        sharedPreferences = FacebookSdk.getApplicationContext().getSharedPreferences(
-                SHARED_PREFERENCES_NAME,
-                Context.MODE_PRIVATE);
-    }
-
-    Profile load() {
-        String jsonString = sharedPreferences.getString(CACHED_PROFILE_KEY, null);
-        if (jsonString != null) {
-            try {
-                JSONObject jsonObject = new JSONObject(jsonString);
-                return new Profile(jsonObject);
-            } catch (JSONException e) {
-                // Can't recover
-            }
-        }
-        return null;
-    }
-
-    void save(Profile profile) {
-        Validate.notNull(profile, "profile");
-        JSONObject jsonObject = profile.toJSONObject();
-        if (jsonObject != null) {
-            sharedPreferences
-                    .edit()
-                    .putString(CACHED_PROFILE_KEY, jsonObject.toString())
-                    .apply();
-        }
-    }
-
-    void clear() {
-        sharedPreferences
-                .edit()
-                .remove(CACHED_PROFILE_KEY)
-                .apply();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/ProfileManager.java b/facebook/src/main/java/com/facebook/ProfileManager.java
deleted file mode 100644
index 1f14b2554..000000000
--- a/facebook/src/main/java/com/facebook/ProfileManager.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.Intent;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-final class ProfileManager {
-    static final String ACTION_CURRENT_PROFILE_CHANGED =
-            "com.facebook.sdk.ACTION_CURRENT_PROFILE_CHANGED";
-    static final String EXTRA_OLD_PROFILE =
-            "com.facebook.sdk.EXTRA_OLD_PROFILE";
-    static final String EXTRA_NEW_PROFILE =
-            "com.facebook.sdk.EXTRA_NEW_PROFILE";
-
-    private static volatile ProfileManager instance;
-
-    private final LocalBroadcastManager localBroadcastManager;
-    private final ProfileCache profileCache;
-    private Profile currentProfile;
-
-
-    ProfileManager(
-            LocalBroadcastManager localBroadcastManager,
-            ProfileCache profileCache) {
-        Validate.notNull(localBroadcastManager, "localBroadcastManager");
-        Validate.notNull(profileCache, "profileCache");
-        this.localBroadcastManager = localBroadcastManager;
-        this.profileCache = profileCache;
-    }
-
-    static ProfileManager getInstance() {
-        if (instance == null) {
-            synchronized (ProfileManager.class) {
-                if (instance == null) {
-                    Context applicationContext = FacebookSdk.getApplicationContext();
-                    LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(
-                            applicationContext);
-
-                    instance = new ProfileManager(localBroadcastManager, new ProfileCache());
-                }
-            }
-        }
-        return instance;
-    }
-
-    Profile getCurrentProfile() {
-        return currentProfile;
-    }
-
-    boolean loadCurrentProfile() {
-        Profile profile = profileCache.load();
-
-        if (profile != null) {
-            setCurrentProfile(profile, false);
-            return true;
-        }
-
-        return false;
-    }
-
-    void setCurrentProfile(Profile currentProfile) {
-        setCurrentProfile(currentProfile, true);
-    }
-
-    private void setCurrentProfile(Profile currentProfile, boolean writeToCache) {
-        Profile oldProfile = this.currentProfile;
-        this.currentProfile = currentProfile;
-
-        if (writeToCache) {
-            if (currentProfile != null) {
-                profileCache.save(currentProfile);
-            } else {
-                profileCache.clear();
-            }
-        }
-
-        if (!Utility.areObjectsEqual(oldProfile, currentProfile)) {
-            sendCurrentProfileChangedBroadcast(oldProfile, currentProfile);
-        }
-    }
-
-    private void sendCurrentProfileChangedBroadcast(
-            Profile oldProfile,
-            Profile currentProfile) {
-        Intent intent = new Intent(ACTION_CURRENT_PROFILE_CHANGED);
-
-        intent.putExtra(EXTRA_OLD_PROFILE, oldProfile);
-        intent.putExtra(EXTRA_NEW_PROFILE, currentProfile);
-
-        localBroadcastManager.sendBroadcast(intent);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/ProfileTracker.java b/facebook/src/main/java/com/facebook/ProfileTracker.java
deleted file mode 100644
index 8ee010c8e..000000000
--- a/facebook/src/main/java/com/facebook/ProfileTracker.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.facebook.internal.Validate;
-
-/**
- * This class can be extended to receive notifications of profile changes. The {@link
- * #stopTracking()} method should be called in the onDestroy() method of the receiving Activity or
- * Fragment.
- */
-abstract public class ProfileTracker {
-
-    private final BroadcastReceiver receiver;
-    private final LocalBroadcastManager broadcastManager;
-    private boolean isTracking = false;
-
-    /**
-     * The method that will be called when the profile changes.
-     * @param oldProfile The profile before the change.
-     * @param currentProfile The new profile.
-     */
-    protected abstract void onCurrentProfileChanged(
-            Profile oldProfile,
-            Profile currentProfile);
-
-    /**
-     * Constructor.
-     */
-    public ProfileTracker() {
-        Validate.sdkInitialized();
-        this.receiver = new ProfileBroadcastReceiver();
-        this.broadcastManager = LocalBroadcastManager.getInstance(
-                FacebookSdk.getApplicationContext());
-        startTracking();
-    }
-
-    /**
-     * Starts tracking the current profile.
-     */
-    public void startTracking() {
-        if (isTracking) {
-            return;
-        }
-
-        addBroadcastReceiver();
-
-        isTracking = true;
-    }
-
-    /**
-     * Stops tracking the current profile.
-     */
-    public void stopTracking() {
-        if (!isTracking) {
-            return;
-        }
-
-        broadcastManager.unregisterReceiver(receiver);
-        isTracking = false;
-    }
-
-    /**
-     * Gets whether the tracker is tracking the current access token.
-     * @return true if the tracker is the tracking the current access token, false if not
-     */
-    public boolean isTracking() {
-        return isTracking;
-    }
-
-    private class ProfileBroadcastReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (ProfileManager.ACTION_CURRENT_PROFILE_CHANGED.equals(intent.getAction())) {
-
-                Profile oldProfile = (Profile) intent
-                        .getParcelableExtra(ProfileManager.EXTRA_OLD_PROFILE);
-                Profile newProfile = (Profile) intent
-                        .getParcelableExtra(ProfileManager.EXTRA_NEW_PROFILE);
-
-                onCurrentProfileChanged(oldProfile, newProfile);
-            }
-        }
-    }
-
-    private void addBroadcastReceiver() {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(ProfileManager.ACTION_CURRENT_PROFILE_CHANGED);
-
-        broadcastManager.registerReceiver(receiver, filter);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/ProgressNoopOutputStream.java b/facebook/src/main/java/com/facebook/ProgressNoopOutputStream.java
deleted file mode 100644
index 71f7bb45d..000000000
--- a/facebook/src/main/java/com/facebook/ProgressNoopOutputStream.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-
-import java.io.OutputStream;
-import java.util.HashMap;
-import java.util.Map;
-
-class ProgressNoopOutputStream extends OutputStream implements RequestOutputStream {
-    private final Map<GraphRequest, RequestProgress> progressMap = new HashMap<GraphRequest, RequestProgress>();
-    private final Handler callbackHandler;
-
-    private GraphRequest currentRequest;
-    private RequestProgress currentRequestProgress;
-    private int batchMax;
-
-    ProgressNoopOutputStream(Handler callbackHandler) {
-        this.callbackHandler = callbackHandler;
-    }
-
-    public void setCurrentRequest(GraphRequest currentRequest) {
-        this.currentRequest = currentRequest;
-        this.currentRequestProgress =
-                currentRequest != null? progressMap.get(currentRequest) : null;
-    }
-
-    int getMaxProgress() {
-        return batchMax;
-    }
-
-    Map<GraphRequest,RequestProgress> getProgressMap() {
-        return progressMap;
-    }
-
-    void addProgress(long size) {
-        if (currentRequestProgress == null) {
-            currentRequestProgress = new RequestProgress(callbackHandler, currentRequest);
-            progressMap.put(currentRequest, currentRequestProgress);
-        }
-
-        currentRequestProgress.addToMax(size);
-        batchMax += size;
-    }
-
-    @Override
-    public void write(byte[] buffer) {
-        addProgress(buffer.length);
-    }
-
-    @Override
-    public void write(byte[] buffer, int offset, int length) {
-        addProgress(length);
-    }
-
-    @Override
-    public void write(int oneByte) {
-        addProgress(1);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/ProgressOutputStream.java b/facebook/src/main/java/com/facebook/ProgressOutputStream.java
deleted file mode 100644
index 8a650e678..000000000
--- a/facebook/src/main/java/com/facebook/ProgressOutputStream.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-
-import java.io.FilterOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.util.Map;
-
-class ProgressOutputStream extends FilterOutputStream implements RequestOutputStream {
-    private final Map<GraphRequest, RequestProgress> progressMap;
-    private final GraphRequestBatch requests;
-    private final long threshold;
-
-    private long batchProgress, lastReportedProgress, maxProgress;
-    private RequestProgress currentRequestProgress;
-
-    ProgressOutputStream(
-            OutputStream out,
-            GraphRequestBatch requests,
-            Map<GraphRequest, RequestProgress> progressMap,
-            long maxProgress) {
-        super(out);
-        this.requests = requests;
-        this.progressMap = progressMap;
-        this.maxProgress = maxProgress;
-
-        this.threshold = FacebookSdk.getOnProgressThreshold();
-    }
-
-    private void addProgress(long size) {
-        if (currentRequestProgress != null) {
-            currentRequestProgress.addProgress(size);
-        }
-
-        batchProgress += size;
-
-        if (batchProgress >= lastReportedProgress + threshold || batchProgress >= maxProgress) {
-            reportBatchProgress();
-        }
-    }
-
-    private void reportBatchProgress() {
-        if (batchProgress > lastReportedProgress) {
-            for (GraphRequestBatch.Callback callback : requests.getCallbacks()) {
-                if (callback instanceof GraphRequestBatch.OnProgressCallback) {
-                    final Handler callbackHandler = requests.getCallbackHandler();
-
-                    // Keep copies to avoid threading issues
-                    final GraphRequestBatch.OnProgressCallback progressCallback =
-                            (GraphRequestBatch.OnProgressCallback) callback;
-                    if (callbackHandler == null) {
-                        progressCallback.onBatchProgress(requests, batchProgress, maxProgress);
-                    }
-                    else {
-                        callbackHandler.post(new Runnable() {
-                            @Override
-                            public void run() {
-                                progressCallback.onBatchProgress(
-                                        requests,
-                                        batchProgress,
-                                        maxProgress);
-                            }
-                        });
-                    }
-                }
-            }
-
-            lastReportedProgress = batchProgress;
-        }
-    }
-
-    public void setCurrentRequest(GraphRequest request) {
-        currentRequestProgress = request != null? progressMap.get(request) : null;
-    }
-
-    long getBatchProgress() {
-        return batchProgress;
-    }
-
-    long getMaxProgress() {
-        return maxProgress;
-    }
-
-    @Override
-    public void write(byte[] buffer) throws IOException {
-        out.write(buffer);
-        addProgress(buffer.length);
-    }
-
-    @Override
-    public void write(byte[] buffer, int offset, int length) throws IOException {
-        out.write(buffer, offset, length);
-        addProgress(length);
-    }
-
-    @Override
-    public void write(int oneByte) throws IOException {
-        out.write(oneByte);
-        addProgress(1);
-    }
-
-    @Override
-    public void close() throws IOException {
-        super.close();
-
-        for (RequestProgress p : progressMap.values()) {
-            p.reportProgress();
-        }
-
-        reportBatchProgress();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/RequestOutputStream.java b/facebook/src/main/java/com/facebook/RequestOutputStream.java
deleted file mode 100644
index 71383b9c3..000000000
--- a/facebook/src/main/java/com/facebook/RequestOutputStream.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-interface RequestOutputStream {
-    void setCurrentRequest(GraphRequest r);
-}
diff --git a/facebook/src/main/java/com/facebook/RequestProgress.java b/facebook/src/main/java/com/facebook/RequestProgress.java
deleted file mode 100644
index b167abd9f..000000000
--- a/facebook/src/main/java/com/facebook/RequestProgress.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-
-class RequestProgress {
-    private final GraphRequest request;
-    private final Handler callbackHandler;
-    private final long threshold;
-
-    private long progress, lastReportedProgress, maxProgress;
-
-    RequestProgress(Handler callbackHandler, GraphRequest request) {
-        this.request = request;
-        this.callbackHandler = callbackHandler;
-
-        this.threshold = FacebookSdk.getOnProgressThreshold();
-    }
-
-    long getProgress() {
-        return progress;
-    }
-
-    long getMaxProgress() {
-        return maxProgress;
-    }
-
-    void addProgress(long size) {
-        progress += size;
-
-        if (progress >= lastReportedProgress + threshold || progress >= maxProgress) {
-            reportProgress();
-        }
-    }
-
-    void addToMax(long size) {
-        maxProgress += size;
-    }
-
-    void reportProgress() {
-        if (progress > lastReportedProgress) {
-            GraphRequest.Callback callback = request.getCallback();
-            if (maxProgress > 0 && callback instanceof GraphRequest.OnProgressCallback) {
-                // Keep copies to avoid threading issues
-                final long currentCopy = progress;
-                final long maxProgressCopy = maxProgress;
-                final GraphRequest.OnProgressCallback callbackCopy =
-                        (GraphRequest.OnProgressCallback) callback;
-                if (callbackHandler == null) {
-                    callbackCopy.onProgress(currentCopy, maxProgressCopy);
-                }
-                else {
-                    callbackHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            callbackCopy.onProgress(currentCopy, maxProgressCopy);
-                        }
-                    });
-                }
-                lastReportedProgress = progress;
-            }
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/TestUserManager.java b/facebook/src/main/java/com/facebook/TestUserManager.java
deleted file mode 100644
index 4f3cdf729..000000000
--- a/facebook/src/main/java/com/facebook/TestUserManager.java
+++ /dev/null
@@ -1,322 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.internal.Utility;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * This class manages Facebook test users.
- */
-public class TestUserManager {
-
-    private static final String LOG_TAG = "TestUserManager";
-
-    private enum Mode {
-        PRIVATE,
-        SHARED,
-    }
-
-    private String testApplicationSecret;
-    private String testApplicationId;
-    private Map<String, JSONObject> appTestAccounts;
-
-    /**
-     * Constructor.
-     *
-     * @param testApplicationSecret The application secret.
-     * @param testApplicationId     The application id.
-     */
-    public TestUserManager(String testApplicationSecret, String testApplicationId) {
-        if (Utility.isNullOrEmpty(testApplicationId)
-                || Utility.isNullOrEmpty(testApplicationSecret)) {
-            throw new FacebookException("Must provide app ID and secret");
-        }
-
-        this.testApplicationSecret = testApplicationSecret;
-        this.testApplicationId = testApplicationId;
-    }
-
-    /**
-     * Gets the access token of the private test user for the application with the requested
-     * permissions.
-     *
-     * @param permissions The requested permissions.
-     * @return The access token of the private test user for the application.
-     */
-    public AccessToken getAccessTokenForPrivateUser(List<String> permissions) {
-        return getAccessTokenForUser(permissions, Mode.PRIVATE, null);
-    }
-
-    /**
-     * Gets the access token of the shared test user for the application with the requested
-     * permissions.
-     *
-     * @param permissions The requested permissions.
-     * @return The access token of the shared test user for the application.
-     */
-    public AccessToken getAccessTokenForSharedUser(List<String> permissions) {
-        return getAccessTokenForSharedUser(permissions, null);
-    }
-
-    /**
-     * Gets the access token of the shared test user with the tag for the application with the
-     * requested permissions.
-     *
-     * @param permissions   The requested permissions.
-     * @param uniqueUserTag The user tag.
-     * @return The requested shared user.
-     */
-    public AccessToken getAccessTokenForSharedUser(
-            List<String> permissions,
-            String uniqueUserTag) {
-        return getAccessTokenForUser(permissions, Mode.SHARED, uniqueUserTag);
-    }
-
-    /**
-     * Getter for the test application id.
-     *
-     * @return The test application id.
-     */
-    public synchronized String getTestApplicationId() {
-        return testApplicationId;
-    }
-
-    /**
-     * Getter for the test application secret.
-     *
-     * @return The test application secret.
-     */
-    public synchronized String getTestApplicationSecret() {
-        return testApplicationSecret;
-    }
-
-    private AccessToken getAccessTokenForUser(
-            List<String> permissions,
-            Mode mode,
-            String uniqueUserTag) {
-
-        retrieveTestAccountsForAppIfNeeded();
-
-        if (Utility.isNullOrEmpty(permissions)) {
-            permissions = Arrays.asList("email", "publish_actions");
-        }
-
-        JSONObject testAccount = null;
-        if (mode == Mode.PRIVATE) {
-            testAccount = createTestAccount(permissions, mode, uniqueUserTag);
-        } else {
-            testAccount = findOrCreateSharedTestAccount(permissions, mode, uniqueUserTag);
-        }
-
-        return new AccessToken(
-                testAccount.optString("access_token"),
-                testApplicationId,
-                testAccount.optString("id"),
-                permissions,
-                null,
-                AccessTokenSource.TEST_USER,
-                null,
-                null);
-    }
-
-    private synchronized void retrieveTestAccountsForAppIfNeeded() {
-        if (appTestAccounts != null) {
-            return;
-        }
-
-        appTestAccounts = new HashMap<String, JSONObject>();
-
-        // The data we need is split across two different graph API queries. We construct two
-        // queries, submit them together (the second one depends on the first one), then
-        // cross-reference the results.
-
-        GraphRequest.setDefaultBatchApplicationId(testApplicationId);
-
-        Bundle parameters = new Bundle();
-        parameters.putString("access_token", getAppAccessToken());
-
-        GraphRequest requestTestUsers =
-                new GraphRequest(null, "app/accounts/test-users", parameters, null);
-        requestTestUsers.setBatchEntryName("testUsers");
-        requestTestUsers.setBatchEntryOmitResultOnSuccess(false);
-
-        Bundle testUserNamesParam = new Bundle();
-        testUserNamesParam.putString("access_token", getAppAccessToken());
-        testUserNamesParam.putString("ids", "{result=testUsers:$.data.*.id}");
-        testUserNamesParam.putString("fields", "name");
-
-        GraphRequest requestTestUserNames = new GraphRequest(null, "", testUserNamesParam, null);
-        requestTestUserNames.setBatchEntryDependsOn("testUsers");
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(requestTestUsers,
-                requestTestUserNames);
-        if (responses == null || responses.size() != 2) {
-            throw new FacebookException("Unexpected number of results from TestUsers batch query");
-        }
-
-        JSONObject testAccountsResponse = responses.get(0).getJSONObject();
-        JSONArray testAccounts = testAccountsResponse.optJSONArray("data");
-
-        // Response should contain a map of test accounts: { id's => { user } }
-        JSONObject userAccountsMap = responses.get(1).getJSONObject();
-
-        populateTestAccounts(testAccounts, userAccountsMap);
-    }
-
-    private synchronized void populateTestAccounts(JSONArray testAccounts,
-                                                   JSONObject userAccountsMap) {
-
-        for (int i = 0; i < testAccounts.length(); ++i) {
-            JSONObject testAccount = testAccounts.optJSONObject(i);
-            JSONObject testUser = userAccountsMap.optJSONObject(testAccount.optString("id"));
-            try {
-                testAccount.put("name", testUser.optString("name"));
-            } catch (JSONException e) {
-                Log.e(LOG_TAG, "Could not set name", e);
-            }
-            storeTestAccount(testAccount);
-        }
-    }
-
-    private synchronized void storeTestAccount(JSONObject testAccount) {
-        appTestAccounts.put(testAccount.optString("id"), testAccount);
-    }
-
-    private synchronized JSONObject findTestAccountMatchingIdentifier(String identifier) {
-        for (JSONObject testAccount : appTestAccounts.values()) {
-            if (testAccount.optString("name").contains(identifier)) {
-                return testAccount;
-            }
-        }
-        return null;
-    }
-
-    final String getAppAccessToken() {
-        return testApplicationId + "|" + testApplicationSecret;
-    }
-
-    private JSONObject findOrCreateSharedTestAccount(List<String> permissions, Mode mode,
-                                                     String uniqueUserTag) {
-
-        JSONObject testAccount = findTestAccountMatchingIdentifier(
-                getSharedTestAccountIdentifier(permissions, uniqueUserTag));
-        if (testAccount != null) {
-            return testAccount;
-        } else {
-            return createTestAccount(permissions, mode, uniqueUserTag);
-        }
-    }
-
-    private String getSharedTestAccountIdentifier(List<String> permissions,
-                                                  String uniqueUserTag) {
-
-        // We use long even though hashes are ints to avoid sign issues.
-        long permissionsHash = getPermissionsString(permissions).hashCode() & 0xffffffffL;
-        long userTagHash = (uniqueUserTag != null)
-                ? uniqueUserTag.hashCode() & 0xffffffffL
-                : 0;
-
-        long combinedHash = permissionsHash ^ userTagHash;
-        return validNameStringFromInteger(combinedHash);
-    }
-
-    private String validNameStringFromInteger(long i) {
-        String s = Long.toString(i);
-        StringBuilder result = new StringBuilder("Perm");
-
-        // We know each character is a digit. Convert it into a letter 'a'-'j'. Avoid repeated
-        //  characters that might make Facebook reject the name by converting every other repeated
-        //  character into one 10 higher ('k'-'t').
-        char lastChar = 0;
-        for (char c : s.toCharArray()) {
-            if (c == lastChar) {
-                c += 10;
-            }
-            result.append((char) (c + 'a' - '0'));
-            lastChar = c;
-        }
-
-        return result.toString();
-    }
-
-    private JSONObject createTestAccount(
-            List<String> permissions,
-            Mode mode,
-            String uniqueUserTag) {
-        Bundle parameters = new Bundle();
-        parameters.putString("installed", "true");
-        parameters.putString("permissions", getPermissionsString(permissions));
-        parameters.putString("access_token", getAppAccessToken());
-
-        // If we're in shared mode, we want to rename this user to encode its permissions, so we can
-        // find it later. If we're in private mode, don't bother renaming it since we're just going
-        // to delete it at the end.
-        if (mode == Mode.SHARED) {
-            parameters.putString("name", String.format("Shared %s Testuser",
-                    getSharedTestAccountIdentifier(permissions, uniqueUserTag)));
-        }
-
-        String graphPath = String.format("%s/accounts/test-users", testApplicationId);
-        GraphRequest createUserRequest =
-                new GraphRequest(null, graphPath, parameters, HttpMethod.POST);
-        GraphResponse response = createUserRequest.executeAndWait();
-
-        FacebookRequestError error = response.getError();
-        JSONObject testAccount = response.getJSONObject();
-        if (error != null) {
-            return null;
-        } else {
-            assert testAccount != null;
-
-            // If we are in shared mode, store this new account in the dictionary so we can re-use
-            // it later.
-            if (mode == Mode.SHARED) {
-                // Remember the new name we gave it, since we didn't get it back in the results of
-                // the create request.
-                try {
-                    testAccount.put("name", parameters.getString("name"));
-                } catch (JSONException e) {
-                    Log.e(LOG_TAG, "Could not set name", e);
-                }
-                storeTestAccount(testAccount);
-            }
-
-            return testAccount;
-        }
-    }
-
-    private String getPermissionsString(List<String> permissions) {
-        return TextUtils.join(",", permissions);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java b/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
deleted file mode 100644
index 5888b96ed..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Utility;
-
-import java.io.Serializable;
-
-class AccessTokenAppIdPair implements Serializable {
-    private static final long serialVersionUID = 1L;
-    private final String accessTokenString;
-    private final String applicationId;
-
-    public AccessTokenAppIdPair(AccessToken accessToken) {
-        this(accessToken.getToken(), FacebookSdk.getApplicationId());
-    }
-
-    public AccessTokenAppIdPair(String accessTokenString, String applicationId) {
-        this.accessTokenString = Utility.isNullOrEmpty(accessTokenString)
-                ? null
-                : accessTokenString;
-        this.applicationId = applicationId;
-    }
-
-    public String getAccessTokenString() {
-        return accessTokenString;
-    }
-
-    public String getApplicationId() {
-        return applicationId;
-    }
-
-    @Override
-    public int hashCode() {
-        return (accessTokenString == null ? 0 : accessTokenString.hashCode()) ^
-                (applicationId == null ? 0 : applicationId.hashCode());
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (!(o instanceof AccessTokenAppIdPair)) {
-            return false;
-        }
-        AccessTokenAppIdPair p = (AccessTokenAppIdPair) o;
-        return Utility.areObjectsEqual(p.accessTokenString, accessTokenString) &&
-                Utility.areObjectsEqual(p.applicationId, applicationId);
-    }
-
-    static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = -2488473066578201069L;
-        private final String accessTokenString;
-        private final String appId;
-
-        private SerializationProxyV1(String accessTokenString, String appId) {
-            this.accessTokenString = accessTokenString;
-            this.appId = appId;
-        }
-
-        private Object readResolve() {
-            return new AccessTokenAppIdPair(accessTokenString, appId);
-        }
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV1(accessTokenString, applicationId);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEvent.java b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
deleted file mode 100644
index 84702399b..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEvent.java
+++ /dev/null
@@ -1,288 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-
-import com.facebook.FacebookException;
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.internal.Constants;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.UUID;
-
-class AppEvent implements Serializable {
-    private static final long serialVersionUID = 1L;
-
-    private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
-
-    private final JSONObject jsonObject;
-    private final boolean isImplicit;
-    private final String name;
-    private final String checksum;
-
-    public AppEvent(
-            String contextName,
-            String eventName,
-            Double valueToSum,
-            Bundle parameters,
-            boolean isImplicitlyLogged,
-            @Nullable final UUID currentSessionId
-    ) throws JSONException, FacebookException {
-        jsonObject = getJSONObjectForAppEvent(
-                contextName,
-                eventName,
-                valueToSum,
-                parameters,
-                isImplicitlyLogged,
-                currentSessionId);
-        isImplicit = isImplicitlyLogged;
-        name = eventName;
-        checksum = calculateChecksum();
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    private AppEvent(
-            String jsonString,
-            boolean isImplicit,
-            String checksum) throws JSONException {
-        jsonObject = new JSONObject(jsonString);
-        this.isImplicit = isImplicit;
-        this.name = jsonObject.optString(Constants.EVENT_NAME_EVENT_KEY);
-        this.checksum = checksum;
-    }
-
-    public boolean getIsImplicit() {
-        return isImplicit;
-    }
-
-    public JSONObject getJSONObject() {
-        return jsonObject;
-    }
-
-    public boolean isChecksumValid() {
-        if (this.checksum == null) {
-            // for old events we don't have a checksum
-            return true;
-        }
-
-        return calculateChecksum().equals(checksum);
-    }
-
-    // throw exception if not valid.
-    private static void validateIdentifier(String identifier) throws FacebookException {
-
-        // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen,
-        // and space (but no hyphen or space in the first position).
-        final String regex = "^[0-9a-zA-Z_]+[0-9a-zA-Z _-]*$";
-
-        final int MAX_IDENTIFIER_LENGTH = 40;
-        if (identifier == null
-                || identifier.length() == 0
-                || identifier.length() > MAX_IDENTIFIER_LENGTH) {
-            if (identifier == null) {
-                identifier = "<None Provided>";
-            }
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Identifier '%s' must be less than %d characters",
-                            identifier,
-                            MAX_IDENTIFIER_LENGTH)
-            );
-        }
-
-        boolean alreadyValidated = false;
-        synchronized (validatedIdentifiers) {
-            alreadyValidated = validatedIdentifiers.contains(identifier);
-        }
-
-        if (!alreadyValidated) {
-            if (identifier.matches(regex)) {
-                synchronized (validatedIdentifiers) {
-                    validatedIdentifiers.add(identifier);
-                }
-            } else {
-                throw new FacebookException(
-                        String.format(
-                                "Skipping event named '%s' due to illegal name - must be " +
-                                        "under 40 chars and alphanumeric, _, - or space, and " +
-                                        "not start with a space or hyphen.",
-                                identifier
-                        )
-                );
-            }
-        }
-    }
-
-    private static JSONObject getJSONObjectForAppEvent(
-            String contextName,
-            String eventName,
-            Double valueToSum,
-            Bundle parameters,
-            boolean isImplicitlyLogged,
-            @Nullable final UUID currentSessionId
-    ) throws FacebookException, JSONException{
-        validateIdentifier(eventName);
-
-        JSONObject eventObject = new JSONObject();
-
-        eventObject.put(Constants.EVENT_NAME_EVENT_KEY, eventName);
-        eventObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
-        eventObject.put("_ui", contextName);
-        if (currentSessionId != null) {
-            eventObject.put("_session_id", currentSessionId);
-        }
-
-        if (valueToSum != null) {
-            eventObject.put("_valueToSum", valueToSum.doubleValue());
-        }
-
-        if (isImplicitlyLogged) {
-            eventObject.put("_implicitlyLogged", "1");
-        }
-
-        if (parameters != null) {
-            for (String key : parameters.keySet()) {
-
-                validateIdentifier(key);
-
-                Object value = parameters.get(key);
-                if (!(value instanceof String) && !(value instanceof Number)) {
-                    throw new FacebookException(
-                            String.format(
-                                    "Parameter value '%s' for key '%s' should be a string" +
-                                            " or a numeric type.",
-                                    value,
-                                    key)
-                    );
-                }
-
-                eventObject.put(key, value.toString());
-            }
-        }
-
-        if (!isImplicitlyLogged) {
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "Created app event '%s'", eventObject.toString());
-        }
-
-        return eventObject;
-    }
-
-    // OLD VERSION DO NOT USE
-    static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = -2488473066578201069L;
-        private final String jsonString;
-        private final boolean isImplicit;
-
-        private SerializationProxyV1(String jsonString, boolean isImplicit) {
-            this.jsonString = jsonString;
-            this.isImplicit = isImplicit;
-        }
-
-        private Object readResolve() throws JSONException {
-            return new AppEvent(jsonString, isImplicit, null);
-        }
-    }
-
-    static class SerializationProxyV2 implements Serializable {
-        private static final long serialVersionUID = 2016_08_03_001L;
-        private final String jsonString;
-        private final boolean isImplicit;
-        private final String checksum;
-
-        private SerializationProxyV2(String jsonString, boolean isImplicit, String checksum) {
-            this.jsonString = jsonString;
-            this.isImplicit = isImplicit;
-            this.checksum = checksum;
-        }
-
-        private Object readResolve() throws JSONException {
-            return new AppEvent(jsonString, isImplicit, checksum);
-        }
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV2(jsonObject.toString(), isImplicit, checksum);
-    }
-
-    @Override
-    public String toString() {
-        return String.format(
-                "\"%s\", implicit: %b, json: %s",
-                jsonObject.optString("_eventName"),
-                isImplicit,
-                jsonObject.toString());
-    }
-
-    private String calculateChecksum() {
-        return md5Checksum(jsonObject.toString());
-    }
-
-    private static String md5Checksum(String toHash )
-    {
-        String hash = null;
-        try
-        {
-            MessageDigest digest = MessageDigest.getInstance("MD5");
-            byte[] bytes = toHash.getBytes("UTF-8");
-            digest.update(bytes, 0, bytes.length);
-            bytes = digest.digest();
-            hash = bytesToHex( bytes );
-        }
-        catch(NoSuchAlgorithmException e )
-        {
-            Utility.logd("Failed to generate checksum: ", e);
-            return "0";
-        }
-        catch(UnsupportedEncodingException e )
-        {
-            Utility.logd("Failed to generate checksum: ", e);
-            return "1";
-        }
-        return hash;
-    }
-
-    private static String bytesToHex(byte[] bytes) {
-        StringBuffer sb = new StringBuffer();
-        for (byte b : bytes) {
-            sb.append(String.format("%02x", b));
-        }
-        return sb.toString();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java b/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
deleted file mode 100644
index 8e7aa5b46..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-
-import com.facebook.FacebookSdk;
-import com.facebook.internal.AttributionIdentifiers;
-
-import java.util.HashMap;
-import java.util.Set;
-
-class AppEventCollection {
-    private final HashMap<AccessTokenAppIdPair, SessionEventsState> stateMap;
-
-    public AppEventCollection() {
-        stateMap = new HashMap<>();
-    }
-
-    public synchronized void addPersistedEvents(PersistedEvents persistedEvents) {
-        if (persistedEvents == null) {
-            return;
-        }
-
-        for (AccessTokenAppIdPair accessTokenAppIdPair : persistedEvents.keySet()) {
-            SessionEventsState sessionEventsState = getSessionEventsState(accessTokenAppIdPair);
-
-            for (AppEvent appEvent : persistedEvents.get(accessTokenAppIdPair)) {
-                sessionEventsState.addEvent(appEvent);
-            }
-        }
-    }
-
-    public synchronized void addEvent(
-            AccessTokenAppIdPair accessTokenAppIdPair,
-            AppEvent appEvent) {
-        SessionEventsState eventsState = getSessionEventsState(accessTokenAppIdPair);
-        eventsState.addEvent(appEvent);
-    }
-
-    public synchronized Set<AccessTokenAppIdPair> keySet() {
-        return stateMap.keySet();
-    }
-
-    public synchronized SessionEventsState get(AccessTokenAppIdPair accessTokenAppIdPair) {
-        return stateMap.get(accessTokenAppIdPair);
-    }
-
-    public synchronized int getEventCount() {
-        int count = 0;
-        for (SessionEventsState sessionEventsState : stateMap.values()) {
-            count += sessionEventsState.getAccumulatedEventCount();
-        }
-
-        return count;
-    }
-
-    private synchronized SessionEventsState getSessionEventsState(
-            AccessTokenAppIdPair accessTokenAppId) {
-        SessionEventsState eventsState = stateMap.get(accessTokenAppId);
-        if (eventsState == null) {
-            Context context = FacebookSdk.getApplicationContext();
-
-            // Retrieve attributionId, but we will only send it if attribution is supported for the
-            // app.
-            eventsState = new SessionEventsState(
-                    AttributionIdentifiers.getAttributionIdentifiers(context),
-                    AppEventsLogger.getAnonymousAppDeviceGUID(context));
-        }
-
-        stateMap.put(accessTokenAppId, eventsState);
-
-        return eventsState;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
deleted file mode 100644
index 690611996..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
+++ /dev/null
@@ -1,315 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.LoggingBehavior;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-
-class AppEventQueue {
-    private static final String TAG = AppEventQueue.class.getName();
-
-    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
-    private static final int FLUSH_PERIOD_IN_SECONDS = 15;
-
-    private static volatile AppEventCollection appEventCollection = new AppEventCollection();
-    private static final ScheduledExecutorService singleThreadExecutor =
-            Executors.newSingleThreadScheduledExecutor();
-    private static ScheduledFuture scheduledFuture;
-
-    // Only call for the singleThreadExecutor
-    private static final Runnable flushRunnable = new Runnable() {
-        @Override
-        public void run() {
-            scheduledFuture = null;
-
-            if (AppEventsLogger.getFlushBehavior() !=
-                    AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
-                flushAndWait(FlushReason.TIMER);
-            }
-        }
-    };
-
-    public static void persistToDisk() {
-        singleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                AppEventStore.persistEvents(appEventCollection);
-                appEventCollection = new AppEventCollection();
-            }
-        });
-    }
-
-    public static void flush(
-            final FlushReason reason) {
-        singleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                flushAndWait(reason);
-            }
-        });
-    }
-
-    public static void add(
-            final AccessTokenAppIdPair accessTokenAppId,
-            final AppEvent appEvent) {
-        singleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                appEventCollection.addEvent(accessTokenAppId, appEvent);
-
-                if (AppEventsLogger.getFlushBehavior() !=
-                        AppEventsLogger.FlushBehavior.EXPLICIT_ONLY
-                        && appEventCollection.getEventCount() >
-                        NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER) {
-                    flushAndWait(FlushReason.EVENT_THRESHOLD);
-                } else if (scheduledFuture == null) {
-                    scheduledFuture = singleThreadExecutor.schedule(
-                            flushRunnable,
-                            FLUSH_PERIOD_IN_SECONDS,
-                            TimeUnit.SECONDS
-                    );
-                }
-            }
-        });
-    }
-
-    public static Set<AccessTokenAppIdPair> getKeySet() {
-        // This is safe to call outside of the singleThreadExecutor since
-        // the appEventCollection is volatile and the modifying methods within the
-        // class are synchronized.
-        return appEventCollection.keySet();
-    }
-
-    static void flushAndWait(FlushReason reason) {
-        // Read and send any persisted events
-        PersistedEvents result = AppEventStore.readAndClearStore();
-        // Add any of the persisted app events to our list of events to send
-        appEventCollection.addPersistedEvents(result);
-
-        FlushStatistics flushResults;
-
-        try {
-            flushResults = sendEventsToServer(
-                    reason,
-                    appEventCollection);
-        } catch (Exception e) {
-            Log.w(TAG, "Caught unexpected exception while flushing app events: ", e);
-            return;
-        }
-
-        if (flushResults != null) {
-            final Intent intent = new Intent(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED);
-            intent.putExtra(
-                    AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED,
-                    flushResults.numEvents);
-            intent.putExtra(
-                    AppEventsLogger.APP_EVENTS_EXTRA_FLUSH_RESULT,
-                    flushResults.result);
-            Context context = FacebookSdk.getApplicationContext();
-            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-        }
-    }
-
-    private static FlushStatistics sendEventsToServer(
-            FlushReason reason,
-            AppEventCollection appEventCollection) {
-        FlushStatistics flushResults = new FlushStatistics();
-
-        Context context = FacebookSdk.getApplicationContext();
-        boolean limitEventUsage = FacebookSdk.getLimitEventAndDataUsage(context);
-
-        List<GraphRequest> requestsToExecute = new ArrayList<>();
-        for (AccessTokenAppIdPair accessTokenAppId : appEventCollection.keySet()) {
-            GraphRequest request = buildRequestForSession(
-                    accessTokenAppId,
-                    appEventCollection.get(accessTokenAppId),
-                    limitEventUsage,
-                    flushResults);
-            if (request != null) {
-                requestsToExecute.add(request);
-            }
-        }
-
-        if (requestsToExecute.size() > 0) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Flushing %d events due to %s.",
-                    flushResults.numEvents,
-                    reason.toString());
-
-            for (GraphRequest request : requestsToExecute) {
-                // Execute the request synchronously. Callbacks will take care of handling errors
-                // and updating our final overall result.
-                request.executeAndWait();
-            }
-            return flushResults;
-        }
-
-        return null;
-    }
-
-    private static GraphRequest buildRequestForSession(
-            final AccessTokenAppIdPair accessTokenAppId,
-            final SessionEventsState appEvents,
-            final boolean limitEventUsage,
-            final FlushStatistics flushState) {
-        String applicationId = accessTokenAppId.getApplicationId();
-
-        Utility.FetchedAppSettings fetchedAppSettings =
-                Utility.queryAppSettings(applicationId, false);
-
-        final GraphRequest postRequest = GraphRequest.newPostRequest(
-                null,
-                String.format("%s/activities", applicationId),
-                null,
-                null);
-
-        Bundle requestParameters = postRequest.getParameters();
-        if (requestParameters == null) {
-            requestParameters = new Bundle();
-        }
-        requestParameters.putString("access_token", accessTokenAppId.getAccessTokenString());
-        String pushNotificationsRegistrationId =
-                AppEventsLogger.getPushNotificationsRegistrationId();
-        if (pushNotificationsRegistrationId != null) {
-            requestParameters.putString("device_token", pushNotificationsRegistrationId);
-        }
-
-        postRequest.setParameters(requestParameters);
-
-        if (fetchedAppSettings == null) {
-            return null;
-        }
-
-        int numEvents = appEvents.populateRequest(
-                postRequest,
-                FacebookSdk.getApplicationContext(),
-                fetchedAppSettings.supportsImplicitLogging(),
-                limitEventUsage);
-
-        if (numEvents == 0) {
-            return null;
-        }
-
-        flushState.numEvents += numEvents;
-
-        postRequest.setCallback(new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                handleResponse(
-                        accessTokenAppId,
-                        postRequest,
-                        response,
-                        appEvents,
-                        flushState);
-            }
-        });
-
-        return postRequest;
-    }
-
-    private static void handleResponse(
-            final AccessTokenAppIdPair accessTokenAppId,
-            GraphRequest request,
-            GraphResponse response,
-            final SessionEventsState appEvents,
-            FlushStatistics flushState) {
-        FacebookRequestError error = response.getError();
-        String resultDescription = "Success";
-
-        FlushResult flushResult = FlushResult.SUCCESS;
-
-        if (error != null) {
-            final int NO_CONNECTIVITY_ERROR_CODE = -1;
-            if (error.getErrorCode() == NO_CONNECTIVITY_ERROR_CODE) {
-                resultDescription = "Failed: No Connectivity";
-                flushResult = FlushResult.NO_CONNECTIVITY;
-            } else {
-                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
-                        response.toString(),
-                        error.toString());
-                flushResult = FlushResult.SERVER_ERROR;
-            }
-        }
-
-        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.APP_EVENTS)) {
-            String eventsJsonString = (String) request.getTag();
-            String prettyPrintedEvents;
-
-            try {
-                JSONArray jsonArray = new JSONArray(eventsJsonString);
-                prettyPrintedEvents = jsonArray.toString(2);
-            } catch (JSONException exc) {
-                prettyPrintedEvents = "<Can't encode events for debug logging>";
-            }
-
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG,
-                    "Flush completed\nParams: %s\n  Result: %s\n  Events JSON: %s",
-                    request.getGraphObject().toString(),
-                    resultDescription,
-                    prettyPrintedEvents);
-        }
-
-        appEvents.clearInFlightAndStats(error != null);
-
-        if (flushResult == FlushResult.NO_CONNECTIVITY) {
-            // We may call this for multiple requests in a batch, which is slightly inefficient
-            // since in principle we could call it once for all failed requests, but the impact is
-            // likely to be minimal. We don't call this for other server errors, because if an event
-            // failed because it was malformed, etc., continually retrying it will cause subsequent
-            // events to not be logged either.
-            FacebookSdk.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    AppEventStore.persistEvents(accessTokenAppId, appEvents);
-                }
-            });
-        }
-
-        if (flushResult != FlushResult.SUCCESS) {
-            // We assume that connectivity issues are more significant to report than server issues.
-            if (flushState.result != FlushResult.NO_CONNECTIVITY) {
-                flushState.result = flushResult;
-            }
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
deleted file mode 100644
index 75cc72504..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
+++ /dev/null
@@ -1,178 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-import android.os.Looper;
-import android.util.Log;
-
-import com.facebook.BuildConfig;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Utility;
-
-import junit.framework.Assert;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.ObjectStreamClass;
-import java.util.HashMap;
-import java.util.List;
-
-class AppEventStore {
-    private static final String TAG = AppEventStore.class.getName();
-    private static final String PERSISTED_EVENTS_FILENAME = "AppEventsLogger.persistedevents";
-
-    public static synchronized void persistEvents(
-            final AccessTokenAppIdPair accessTokenAppIdPair,
-            final SessionEventsState appEvents) {
-        assertIsNotMainThread();
-        PersistedEvents persistedEvents = readAndClearStore();
-
-        if (persistedEvents.containsKey(accessTokenAppIdPair)) {
-            persistedEvents
-                    .get(accessTokenAppIdPair)
-                    .addAll(appEvents.getEventsToPersist());
-        } else {
-            persistedEvents.addEvents(accessTokenAppIdPair, appEvents.getEventsToPersist());
-        }
-
-        saveEventsToDisk(persistedEvents);
-    }
-
-    public static synchronized void persistEvents(
-            final AppEventCollection eventsToPersist) {
-        assertIsNotMainThread();
-        PersistedEvents persistedEvents = readAndClearStore();
-        for (AccessTokenAppIdPair accessTokenAppIdPair : eventsToPersist.keySet()) {
-            SessionEventsState sessionEventsState = eventsToPersist.get(
-                    accessTokenAppIdPair);
-            persistedEvents.addEvents(
-                    accessTokenAppIdPair,
-                    sessionEventsState.getEventsToPersist());
-        }
-
-        saveEventsToDisk(persistedEvents);
-    }
-
-    // Only call from singleThreadExecutor
-    public static synchronized PersistedEvents readAndClearStore() {
-        assertIsNotMainThread();
-
-        MovedClassObjectInputStream ois = null;
-        PersistedEvents persistedEvents = null;
-        Context context = FacebookSdk.getApplicationContext();
-        try {
-            InputStream is = context.openFileInput(PERSISTED_EVENTS_FILENAME);
-            ois = new MovedClassObjectInputStream(new BufferedInputStream(is));
-
-            persistedEvents = (PersistedEvents) ois.readObject();
-        } catch (FileNotFoundException e) {
-            // Expected if we never persisted any events.
-        } catch (Exception e) {
-            Log.w(TAG, "Got unexpected exception while reading events: ", e);
-        } finally {
-            Utility.closeQuietly(ois);
-
-
-            try {
-                // Note: We delete the store before we store the events; this means we'd
-                // prefer to lose some events in the case of exception rather than
-                // potentially log them twice.
-                // Always delete this file after the above try catch to recover from read
-                // errors.
-                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
-            } catch (Exception ex) {
-                Log.w(TAG, "Got unexpected exception when removing events file: ", ex);
-            }
-        }
-
-        if (persistedEvents == null) {
-            persistedEvents = new PersistedEvents();
-        }
-
-        return persistedEvents;
-    }
-
-    // Only call from singleThreadExecutor
-    private static void saveEventsToDisk(
-            PersistedEvents eventsToPersist) {
-        ObjectOutputStream oos = null;
-        Context context = FacebookSdk.getApplicationContext();
-        try {
-            oos = new ObjectOutputStream(
-                    new BufferedOutputStream(
-                            context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
-            oos.writeObject(eventsToPersist);
-        } catch (Exception e) {
-            Log.w(TAG, "Got unexpected exception while persisting events: ", e);
-            try {
-                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
-            } catch (Exception innerException) {
-                // ignore
-            }
-        } finally {
-            Utility.closeQuietly(oos);
-        }
-    }
-
-    private static void assertIsNotMainThread() {
-        if (BuildConfig.DEBUG){
-            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
-            Assert.assertFalse(
-                    "Call cannot be made on the main thread",
-                    isMainThread);
-        }
-    }
-
-    private static class MovedClassObjectInputStream extends ObjectInputStream {
-        private static final String ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME =
-                "com.facebook.appevents.AppEventsLogger$AccessTokenAppIdPair$SerializationProxyV1";
-        private static final String APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME =
-                "com.facebook.appevents.AppEventsLogger$AppEvent$SerializationProxyV1";
-
-        public MovedClassObjectInputStream(InputStream in) throws IOException {
-            super(in);
-        }
-
-        @Override
-        protected ObjectStreamClass readClassDescriptor()
-                throws IOException, ClassNotFoundException {
-            ObjectStreamClass resultClassDescriptor = super.readClassDescriptor();
-
-            if (resultClassDescriptor.getName().equals(
-                    ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
-                resultClassDescriptor = ObjectStreamClass.lookup(
-                        com.facebook.appevents.AccessTokenAppIdPair.SerializationProxyV1.class);
-            } else if (resultClassDescriptor.getName().equals(
-                    APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
-                resultClassDescriptor = ObjectStreamClass.lookup(
-                        com.facebook.appevents.AppEvent.SerializationProxyV1.class);
-            }
-
-            return resultClassDescriptor;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java b/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
deleted file mode 100644
index 060b05964..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
+++ /dev/null
@@ -1,185 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-/**
- * Predefined event and parameter names for logging events common to many apps. Logging occurs
- * through the {@link AppEventsLogger#logEvent(String, android.os.Bundle)} family of methods.
- */
-public class AppEventsConstants {
-    // Event names
-
-    // General purpose
-
-    /** Log this event when an app is being activated. */
-    public static final String EVENT_NAME_ACTIVATED_APP = "fb_mobile_activate_app";
-
-    public static final String EVENT_NAME_DEACTIVATED_APP = "fb_mobile_deactivate_app";
-
-    public static final String EVENT_NAME_SESSION_INTERRUPTIONS = "fb_mobile_app_interruptions";
-
-    public static final String EVENT_NAME_TIME_BETWEEN_SESSIONS = "fb_mobile_time_between_sessions";
-
-    /** Log this event when the user has completed registration with the app. */
-    public static final String EVENT_NAME_COMPLETED_REGISTRATION =
-            "fb_mobile_complete_registration";
-
-    /** Log this event when the user has viewed a form of content in the app. */
-    public static final String EVENT_NAME_VIEWED_CONTENT = "fb_mobile_content_view";
-
-    /** Log this event when the user has performed a search within the app. */
-    public static final String EVENT_NAME_SEARCHED = "fb_mobile_search";
-
-    /**
-     * Log this event when the user has rated an item in the app.
-     * The valueToSum passed to logEvent should be the numeric rating.
-     */
-    public static final String EVENT_NAME_RATED = "fb_mobile_rate";
-
-    /** Log this event when the user has completed a tutorial in the app. */
-    public static final String EVENT_NAME_COMPLETED_TUTORIAL = "fb_mobile_tutorial_completion";
-
-    // Ecommerce related
-
-    /**
-     * Log this event when the user has added an item to their cart.
-     * The valueToSum passed to logEvent should be the item's price.
-     */
-    public static final String EVENT_NAME_ADDED_TO_CART = "fb_mobile_add_to_cart";
-
-    /**
-     * Log this event when the user has added an item to their wishlist.
-     * The valueToSum passed to logEvent should be the item's price.
-     */
-    public static final String EVENT_NAME_ADDED_TO_WISHLIST = "fb_mobile_add_to_wishlist";
-
-    /**
-     * Log this event when the user has entered the checkout process.
-     * The valueToSum passed to logEvent should be the total price in the cart.
-     */
-    public static final String EVENT_NAME_INITIATED_CHECKOUT = "fb_mobile_initiated_checkout";
-
-    /** Log this event when the user has entered their payment info. */
-    public static final String EVENT_NAME_ADDED_PAYMENT_INFO = "fb_mobile_add_payment_info";
-
-    /**
-     *  @deprecated Use {@link
-     *  AppEventsLogger#logPurchase(java.math.BigDecimal, java.util.Currency)} instead.
-     *  Log this event when the user has completed a purchase. The {@link
-     *  AppEventsLogger#logPurchase(java.math.BigDecimal, java.util.Currency)} method is a shortcut
-     *  for logging this event.
-     */
-    @Deprecated
-    public static final String EVENT_NAME_PURCHASED = "fb_mobile_purchase";
-
-    // Gaming related
-
-    /** Log this event when the user has achieved a level in the app. */
-    public static final String EVENT_NAME_ACHIEVED_LEVEL = "fb_mobile_level_achieved";
-
-    /** Log this event when the user has unlocked an achievement in the app. */
-    public static final String EVENT_NAME_UNLOCKED_ACHIEVEMENT = "fb_mobile_achievement_unlocked";
-
-    /**
-     * Log this event when the user has spent app credits.
-     * The valueToSum passed to logEvent should be the number of credits spent.
-     */
-    public static final String EVENT_NAME_SPENT_CREDITS = "fb_mobile_spent_credits";
-
-    // Event parameters
-
-    /**
-     * Parameter key used to specify currency used with logged event.  E.g. "USD", "EUR", "GBP". See
-     * <a href="http://en.wikipedia.org/wiki/ISO_4217">ISO-4217</a>
-     * for specific values.
-     */
-    public static final String EVENT_PARAM_CURRENCY = "fb_currency";
-
-    /**
-     * Parameter key used to specify the method the user has used to register for the app, e.g.,
-     * "Facebook", "email", "Twitter", etc.
-     */
-    public static final String EVENT_PARAM_REGISTRATION_METHOD = "fb_registration_method";
-
-    /**
-     * Parameter key used to specify a generic content type/family for the logged event, e.g.
-     * "music", "photo", "video".  Options to use will vary depending on the nature of the app.
-     */
-    public static final String EVENT_PARAM_CONTENT_TYPE = "fb_content_type";
-
-    /**
-     * Parameter key used to specify an ID for the specific piece of content being logged about.
-     * This could be an EAN, article identifier, etc., depending on the nature of the app.
-     */
-    public static final String EVENT_PARAM_CONTENT_ID = "fb_content_id";
-
-    /** Parameter key used to specify the string provided by the user for a search operation. */
-    public static final String EVENT_PARAM_SEARCH_STRING = "fb_search_string";
-
-    /**
-     * Parameter key used to specify whether the activity being logged about was successful or not.
-     * EVENT_PARAM_VALUE_YES and EVENT_PARAM_VALUE_NO are good canonical values to use for this
-     * parameter.
-     */
-    public static final String EVENT_PARAM_SUCCESS = "fb_success";
-
-    /**
-     * Parameter key used to specify the maximum rating available for the EVENT_NAME_RATE event.
-     * E.g., "5" or "10".
-     */
-    public static final String EVENT_PARAM_MAX_RATING_VALUE = "fb_max_rating_value";
-
-    /**
-     * Parameter key used to specify whether payment info is available for the
-     * EVENT_NAME_INITIATED_CHECKOUT event. EVENT_PARAM_VALUE_YES and EVENT_PARAM_VALUE_NO are good
-     * canonical values to use for this parameter.
-     */
-    public static final String EVENT_PARAM_PAYMENT_INFO_AVAILABLE = "fb_payment_info_available";
-
-    /**
-     * Parameter key used to specify how many items are being processed for an
-     * EVENT_NAME_INITIATED_CHECKOUT or EVENT_NAME_PURCHASE event.
-     */
-    public static final String EVENT_PARAM_NUM_ITEMS = "fb_num_items";
-
-    /** Parameter key used to specify the level achieved in an EVENT_NAME_LEVEL_ACHIEVED event. */
-    public static final String EVENT_PARAM_LEVEL = "fb_level";
-
-    /**
-     * Parameter key used to specify a description appropriate to the event being logged.
-     * E.g., the name of the achievement unlocked in the EVENT_NAME_ACHIEVEMENT_UNLOCKED event.
-     */
-    public static final String EVENT_PARAM_DESCRIPTION = "fb_description";
-
-
-    /**
-     * Parameter key used to specify source application package.
-     */
-    public static final String EVENT_PARAM_SOURCE_APPLICATION = "fb_mobile_launch_source";
-
-    // Parameter values
-
-    /** Yes-valued parameter value to be used with parameter keys that need a Yes/No value */
-    public static final String EVENT_PARAM_VALUE_YES = "1";
-
-    /** No-valued parameter value to be used with parameter keys that need a Yes/No value */
-    public static final String EVENT_PARAM_VALUE_NO = "0";
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
deleted file mode 100644
index 090186847..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ /dev/null
@@ -1,1113 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-import bolts.AppLinks;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.internal.ActivityLifecycleTracker;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.internal.Constants;
-import com.facebook.internal.AppEventsLoggerUtility;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.ObjectStreamClass;
-import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
-import java.math.BigDecimal;
-import java.util.ArrayList;
-import java.util.Currency;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-
-/**
- * <p>
- * The AppEventsLogger class allows the developer to log various types of events back to Facebook.  In order to log
- * events, the app must create an instance of this class via a {@link #newLogger newLogger} method, and then call
- * the various "log" methods off of that.
- * </p>
- * <p>
- * This client-side event logging is then available through Facebook App Insights
- * and for use with Facebook Ads conversion tracking and optimization.
- * </p>
- * <p>
- * The AppEventsLogger class has a few related roles:
- * </p>
- * <ul>
- * <li>
- * Logging predefined and application-defined events to Facebook App Insights with a
- * numeric value to sum across a large number of events, and an optional set of key/value
- * parameters that define "segments" for this event (e.g., 'purchaserStatus' : 'frequent', or
- * 'gamerLevel' : 'intermediate').  These events may also be used for ads conversion tracking,
- * optimization, and other ads related targeting in the future.
- * </li>
- * <li>
- * Methods that control the way in which events are flushed out to the Facebook servers.
- * </li>
- * </ul>
- * <p>
- * Here are some important characteristics of the logging mechanism provided by AppEventsLogger:
- * <ul>
- * <li>
- * Events are not sent immediately when logged.  They're cached and flushed out to the
- * Facebook servers in a number of situations:
- * <ul>
- * <li>when an event count threshold is passed (currently 100 logged events).</li>
- * <li>when a time threshold is passed (currently 15 seconds).</li>
- * <li>when an app has gone to background and is then brought back to the foreground.</li>
- * </ul>
- * <li>
- * Events will be accumulated when the app is in a disconnected state, and sent when the connection
- * is restored and one of the above 'flush' conditions are met.
- * </li>
- * <li>
- * The AppEventsLogger class is intended to be used from the thread it was created on.  Multiple
- * AppEventsLoggers may be created on other threads if desired.
- * </li>
- * <li>
- * The developer can call the setFlushBehavior method to force the flushing of events to only
- * occur on an explicit call to the `flush` method.
- * </li>
- * <li>
- * The developer can turn on console debug output for event logging and flushing to the server by
- * calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);
- * </li>
- * </ul>
- * </p>
- * <p>
- * Some things to note when logging events:
- * <ul>
- * <li>
- * There is a limit on the number of unique event names an app can use, on the order of 1000.
- * </li>
- * <li>
- * There is a limit to the number of unique parameter names in the provided parameters that can
- * be used per event, on the order of 25.  This is not just for an individual call, but for all
- * invocations for that eventName.
- * </li>
- * <li>
- * Event names and parameter names must be between 2 and 40
- * characters, and must consist of alphanumeric characters, _, -, or spaces.
- * </li>
- * <li>
- * The length of each parameter value can be no more than on the order of 100 characters.
- * </li>
- * </ul>
- * </p>
- */
-public class AppEventsLogger {
-    // Enums
-
-    /**
-     * Controls when an AppEventsLogger sends log events to the server
-     */
-    public enum FlushBehavior {
-        /**
-         * Flush automatically: periodically (every 15 seconds or after every 100 events), and
-         * always at app reactivation. This is the default value.
-         */
-        AUTO,
-
-        /**
-         * Only flush when AppEventsLogger.flush() is explicitly invoked.
-         */
-        EXPLICIT_ONLY,
-    }
-
-    // Constants
-    private static final String TAG = AppEventsLogger.class.getCanonicalName();
-
-    private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
-    private static final int FLUSH_APP_SESSION_INFO_IN_SECONDS = 30;
-
-    public static final String APP_EVENT_PREFERENCES = "com.facebook.sdk.appEventPreferences";
-
-    private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT =
-            "_fbSourceApplicationHasBeenSet";
-
-    private static final String PUSH_PAYLOAD_KEY = "fb_push_payload";
-    private static final String PUSH_PAYLOAD_CAMPAIGN_KEY = "campaign";
-
-    private static final String APP_EVENT_NAME_PUSH_OPENED = "fb_mobile_push_opened";
-    private static final String APP_EVENT_PUSH_PARAMETER_CAMPAIGN = "fb_push_campaign";
-    private static final String APP_EVENT_PUSH_PARAMETER_ACTION = "fb_push_action";
-
-    // Instance member variables
-    private final String contextName;
-    private final AccessTokenAppIdPair accessTokenAppId;
-
-    private static ScheduledThreadPoolExecutor backgroundExecutor;
-    private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
-    private static Object staticLock = new Object();
-    private static String anonymousAppDeviceGUID;
-    private static String sourceApplication;
-    private static boolean isOpenedByApplink;
-    private static boolean isActivateAppEventRequested;
-    private static String pushNotificationsRegistrationId;
-
-    /**
-     * Notifies the events system that the app has launched and activate and deactivate events
-     * should start being logged automatically. This should be called from the OnCreate method
-     * of you application.
-     *
-     * @param application The running application
-     */
-    public static void activateApp(Application application) {
-        activateApp(application, null);
-    }
-
-    /**
-     * Notifies the events system that the app has launched and activate and deactivate events
-     * should start being logged automatically. This should be called from the OnCreate method
-     * of you application.
-     *
-     * Call this if you wish to use a different Application ID then the one specified in the
-     * Facebook SDK.
-     *
-     * @param application The running application
-     * @param applicationId The application id used to log activate/deactivate events.
-     */
-    public static void activateApp(Application application, String applicationId) {
-        if (!FacebookSdk.isInitialized()) {
-            throw new FacebookException("The Facebook sdk must be initialized before calling " +
-                    "activateApp");
-        }
-
-        if (applicationId == null) {
-            applicationId = FacebookSdk.getApplicationId();
-        }
-
-        // activateApp supersedes publishInstall in the public API, so we need to explicitly invoke
-        // it, since the server can't reliably infer install state for all conditions of an app
-        // activate.
-        FacebookSdk.publishInstallAsync(application, applicationId);
-
-        ActivityLifecycleTracker.startTracking(application, applicationId);
-    }
-
-    /**
-     * Notifies the events system that the app has launched & logs an activatedApp event.  Should be
-     * called whenever your app becomes active, typically in the onResume() method of each
-     * long-running Activity of your app.
-     * <p/>
-     * Use this method if your application ID is stored in application metadata, otherwise see
-     * {@link AppEventsLogger#activateApp(android.content.Context, String)}.
-     *
-     * @param context Used to access the applicationId and the attributionId for non-authenticated
-     *                users.
-     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
-     */
-    @Deprecated
-    @SuppressWarnings("deprecation")
-    public static void activateApp(Context context) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "activateApp events are being logged automatically. " +
-                    "There's no need to call activateApp explicitly, this is safe to remove.");
-            return;
-        }
-
-        FacebookSdk.sdkInitialize(context);
-        activateApp(context, Utility.getMetadataApplicationId(context));
-    }
-
-    /**
-     * Notifies the events system that the app has launched & logs an activatedApp event.  Should be
-     * called whenever your app becomes active, typically in the onResume() method of each
-     * long-running Activity of your app.
-     *
-     * @param context       Used to access the attributionId for non-authenticated users.
-     * @param applicationId The specific applicationId to report the activation for.
-     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
-     */
-    @Deprecated
-    public static void activateApp(Context context, String applicationId) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "activateApp events are being logged automatically. " +
-                    "There's no need to call activateApp explicitly, this is safe to remove.");
-            return;
-        }
-
-        if (context == null || applicationId == null) {
-            throw new IllegalArgumentException("Both context and applicationId must be non-null");
-        }
-
-        if ((context instanceof Activity)) {
-            setSourceApplication((Activity) context);
-        } else {
-          // If context is not an Activity, we cannot get intent nor calling activity.
-          resetSourceApplication();
-          Log.d(AppEventsLogger.class.getName(),
-              "To set source application the context of activateApp must be an instance of" +
-                      " Activity");
-        }
-
-        // activateApp supersedes publishInstall in the public API, so we need to explicitly invoke
-        // it, since the server can't reliably infer install state for all conditions of an app
-        // activate.
-        FacebookSdk.publishInstallAsync(context, applicationId);
-
-        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
-        final long eventTime = System.currentTimeMillis();
-        final String sourceApplicationInfo = getSourceApplication();
-        backgroundExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                logger.logAppSessionResumeEvent(eventTime, sourceApplicationInfo);
-            }
-        });
-    }
-
-    /**
-     * Notifies the events system that the app has been deactivated (put in the background) and
-     * tracks the application session information. Should be called whenever your app becomes
-     * inactive, typically in the onPause() method of each long-running Activity of your app.
-     *
-     * Use this method if your application ID is stored in application metadata, otherwise see
-     * {@link AppEventsLogger#deactivateApp(android.content.Context, String)}.
-     *
-     * @param context Used to access the applicationId and the attributionId for non-authenticated
-     *                users.
-     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
-     * be logged automatically.
-     */
-    @Deprecated
-    @SuppressWarnings("deprecation")
-    public static void deactivateApp(Context context) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "deactivateApp events are being logged automatically. " +
-                    "There's no need to call deactivateApp, this is safe to remove.");
-            return;
-        }
-
-        deactivateApp(context, Utility.getMetadataApplicationId(context));
-    }
-
-    /**
-     * Notifies the events system that the app has been deactivated (put in the background) and
-     * tracks the application session information. Should be called whenever your app becomes
-     * inactive, typically in the onPause() method of each long-running Activity of your app.
-     *
-     * @param context       Used to access the attributionId for non-authenticated users.
-     * @param applicationId The specific applicationId to track session information for.
-     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
-     * be logged automatically.
-     */
-    @Deprecated
-    public static void deactivateApp(Context context, String applicationId) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "deactivateApp events are being logged automatically. " +
-                    "There's no need to call deactivateApp, this is safe to remove.");
-            return;
-        }
-
-        if (context == null || applicationId == null) {
-            throw new IllegalArgumentException("Both context and applicationId must be non-null");
-        }
-
-        resetSourceApplication();
-
-        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
-        final long eventTime = System.currentTimeMillis();
-        backgroundExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                logger.logAppSessionSuspendEvent(eventTime);
-            }
-        });
-    }
-
-    private void logAppSessionResumeEvent(long eventTime, String sourceApplicationInfo) {
-        PersistedAppSessionInfo.onResume(
-                FacebookSdk.getApplicationContext(),
-                accessTokenAppId,
-                this,
-                eventTime,
-                sourceApplicationInfo);
-    }
-
-    private void logAppSessionSuspendEvent(long eventTime) {
-        PersistedAppSessionInfo.onSuspend(
-                FacebookSdk.getApplicationContext(),
-                accessTokenAppId,
-                this,
-                eventTime);
-    }
-
-    /**
-     * Build an AppEventsLogger instance to log events through.  The Facebook app that these events
-     * are targeted at comes from this application's metadata. The application ID used to log events
-     * will be determined from the app ID specified in the package metadata.
-     *
-     * @param context Used to access the applicationId and the attributionId for non-authenticated
-     *                users.
-     * @return AppEventsLogger instance to invoke log* methods on.
-     */
-    public static AppEventsLogger newLogger(Context context) {
-        return new AppEventsLogger(context, null, null);
-    }
-
-    /**
-     * Build an AppEventsLogger instance to log events through.
-     *
-     * @param context Used to access the attributionId for non-authenticated users.
-     * @param accessToken Access token to use for logging events. If null, the active access token
-     *                    will be used, if any; if not the logging will happen against the default
-     *                    app ID specified in the package metadata.
-     */
-    public static AppEventsLogger newLogger(Context context, AccessToken accessToken) {
-        return new AppEventsLogger(context, null, accessToken);
-    }
-
-    /**
-     * Build an AppEventsLogger instance to log events through.
-     *
-     * @param context       Used to access the attributionId for non-authenticated users.
-     * @param applicationId Explicitly specified Facebook applicationId to log events against.  If
-     *                      null, the default app ID specified in the package metadata will be
-     *                      used.
-     * @param accessToken   Access token to use for logging events. If null, the active access token
-     *                      will be used, if any; if not the logging will happen against the default
-     *                      app ID specified in the package metadata.
-     * @return AppEventsLogger instance to invoke log* methods on.
-     */
-    public static AppEventsLogger newLogger(
-            Context context,
-            String applicationId,
-            AccessToken accessToken) {
-        return new AppEventsLogger(context, applicationId, accessToken);
-    }
-
-    /**
-     * Build an AppEventsLogger instance to log events that are attributed to the application but
-     * not to any particular Session.
-     *
-     * @param context       Used to access the attributionId for non-authenticated users.
-     * @param applicationId Explicitly specified Facebook applicationId to log events against.  If
-     *                      null, the default app ID specified in the package metadata will be
-     *                      used.
-     * @return AppEventsLogger instance to invoke log* methods on.
-     */
-    public static AppEventsLogger newLogger(Context context, String applicationId) {
-        return new AppEventsLogger(context, applicationId, null);
-    }
-
-    /**
-     * The action used to indicate that a flush of app events has occurred. This should
-     * be used as an action in an IntentFilter and BroadcastReceiver registered with
-     * the {@link android.support.v4.content.LocalBroadcastManager}.
-     */
-    public static final String ACTION_APP_EVENTS_FLUSHED = "com.facebook.sdk.APP_EVENTS_FLUSHED";
-
-    public static final String APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED =
-            "com.facebook.sdk.APP_EVENTS_NUM_EVENTS_FLUSHED";
-    public static final String APP_EVENTS_EXTRA_FLUSH_RESULT =
-            "com.facebook.sdk.APP_EVENTS_FLUSH_RESULT";
-
-    /**
-     * Access the behavior that AppEventsLogger uses to determine when to flush logged events to the
-     * server. This setting applies to all instances of AppEventsLogger.
-     *
-     * @return Specified flush behavior.
-     */
-    public static FlushBehavior getFlushBehavior() {
-        synchronized (staticLock) {
-            return flushBehavior;
-        }
-    }
-
-    /**
-     * Set the behavior that this AppEventsLogger uses to determine when to flush logged events to
-     * the server. This setting applies to all instances of AppEventsLogger.
-     *
-     * @param flushBehavior the desired behavior.
-     */
-    public static void setFlushBehavior(FlushBehavior flushBehavior) {
-        synchronized (staticLock) {
-            AppEventsLogger.flushBehavior = flushBehavior;
-        }
-    }
-
-    /**
-     * Log an app event with the specified name.
-     *
-     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                  constants in {@link AppEventsConstants} when possible.  Or create your own
-     *                  if none of the EVENT_NAME_* constants are applicable. Event names should be
-     *                  40 characters or less, alphanumeric, and can include spaces, underscores or
-     *                  hyphens, but must not have a space or hyphen as the first character.  Any
-     *                  given app should have no more than 1000 distinct event names.
-     */
-    public void logEvent(String eventName) {
-        logEvent(eventName, null);
-    }
-
-    /**
-     * Log an app event with the specified name and the supplied value.
-     *
-     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                   constants in {@link AppEventsConstants} when possible.  Or create your own
-     *                   if none of the EVENT_NAME_* constants are applicable. Event names should be
-     *                   40 characters or less, alphanumeric, and can include spaces, underscores or
-     *                   hyphens, but must not have a space or hyphen as the first character.  Any
-     *                   given app should have no more than 1000 distinct event names. * @param
-     *                   eventName
-     * @param valueToSum a value to associate with the event which will be summed up in Insights for
-     *                   across all instances of the event, so that average values can be
-     *                   determined, etc.
-     */
-    public void logEvent(String eventName, double valueToSum) {
-        logEvent(eventName, valueToSum, null);
-    }
-
-    /**
-     * Log an app event with the specified name and set of parameters.
-     *
-     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                   constants in {@link AppEventsConstants} when possible.  Or create your own
-     *                   if none of the EVENT_NAME_* constants are applicable. Event names should be
-     *                   40 characters or less, alphanumeric, and can include spaces, underscores or
-     *                   hyphens, but must not have a space or hyphen as the first character.  Any
-     *                   given app should have no more than 1000 distinct event names.
-     * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking
-     *                   at the logs of these events via different parameter values.  You can log on
-     *                   the order of 25 parameters with each distinct eventName.  It's advisable to
-     *                   limit the number of unique values provided for each parameter in the
-     *                   thousands.  As an example, don't attempt to provide a unique
-     *                   parameter value for each unique user in your app.  You won't get meaningful
-     *                   aggregate reporting on so many parameter values.  The values in the bundles
-     *                   should be Strings or numeric values.
-     */
-    public void logEvent(String eventName, Bundle parameters) {
-        logEvent(
-            eventName,
-            null,
-            parameters,
-            false,
-            ActivityLifecycleTracker.getCurrentSessionGuid());
-    }
-
-    /**
-     * Log an app event with the specified name, supplied value, and set of parameters.
-     *
-     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                   constants in {@link AppEventsConstants} when possible.  Or create your own
-     *                   if none of the EVENT_NAME_* constants are applicable. Event names should be
-     *                   40 characters or less, alphanumeric, and can include spaces, underscores or
-     *                   hyphens, but must not have a space or hyphen as the first character.  Any
-     *                   given app should have no more than 1000 distinct event names.
-     * @param valueToSum a value to associate with the event which will be summed up in Insights for
-     *                   across all instances of the event, so that average values can be
-     *                   determined, etc.
-     * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking
-     *                   at the logs of these events via different parameter values.  You can log on
-     *                   the order of 25 parameters with each distinct eventName.  It's advisable to
-     *                   limit the number of unique values provided for each parameter in the
-     *                   thousands.  As an example, don't attempt to provide a unique
-     *                   parameter value for each unique user in your app.  You won't get meaningful
-     *                   aggregate reporting on so many parameter values.  The values in the bundles
-     *                   should be Strings or numeric values.
-     */
-    public void logEvent(String eventName, double valueToSum, Bundle parameters) {
-        logEvent(
-            eventName,
-            valueToSum,
-            parameters,
-            false,
-            ActivityLifecycleTracker.getCurrentSessionGuid());
-    }
-
-    /**
-     * Logs a purchase event with Facebook, in the specified amount and with the specified
-     * currency.
-     *
-     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency'
-     *                       parameter. This value will be rounded to the thousandths place (e.g.,
-     *                       12.34567 becomes 12.346).
-     * @param currency       Currency used to specify the amount.
-     */
-    public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
-        logPurchase(purchaseAmount, currency, null);
-    }
-
-    /**
-     * Logs a purchase event with Facebook, in the specified amount and with the specified currency.
-     * Additional detail about the purchase can be passed in through the parameters bundle.
-     *
-     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency'
-     *                       parameter. This value will be rounded to the thousandths place (e.g.,
-     *                       12.34567 becomes 12.346).
-     * @param currency       Currency used to specify the amount.
-     * @param parameters     Arbitrary additional information for describing this event. This should
-     *                       have no more than 24 entries, and keys should be mostly consistent from
-     *                       one purchase event to the next.
-     */
-    @SuppressWarnings("deprecation")
-    public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
-
-        if (purchaseAmount == null) {
-            notifyDeveloperError("purchaseAmount cannot be null");
-            return;
-        } else if (currency == null) {
-            notifyDeveloperError("currency cannot be null");
-            return;
-        }
-
-        if (parameters == null) {
-            parameters = new Bundle();
-        }
-        parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY, currency.getCurrencyCode());
-
-        logEvent(AppEventsConstants.EVENT_NAME_PURCHASED, purchaseAmount.doubleValue(), parameters);
-        eagerFlush();
-    }
-
-    /**
-     * Logs an app event that tracks that the application was open via Push Notification.
-     * @param payload Notification payload received.
-     */
-    public void logPushNotificationOpen(Bundle payload) {
-        logPushNotificationOpen(payload, null);
-    }
-
-    /**
-     * Logs an app event that tracks that the application was open via Push Notification.
-     * @param payload Notification payload received.
-     */
-    public void logPushNotificationOpen(Bundle payload, String action) {
-        String campaignId = null;
-        try {
-            String payloadString = payload.getString(PUSH_PAYLOAD_KEY);
-            if (Utility.isNullOrEmpty(payloadString)) {
-                return; // Ignore the payload if no fb push payload is present.
-            }
-
-            JSONObject facebookPayload = new JSONObject(payloadString);
-            campaignId = facebookPayload.getString(PUSH_PAYLOAD_CAMPAIGN_KEY);
-        } catch (JSONException je) {
-            // ignore
-        }
-        if (campaignId == null) {
-            Logger.log(LoggingBehavior.DEVELOPER_ERRORS, TAG,
-                "Malformed payload specified for logging a push notification open.");
-            return;
-        }
-
-        Bundle parameters = new Bundle();
-        parameters.putString(APP_EVENT_PUSH_PARAMETER_CAMPAIGN, campaignId);
-        if (action != null) {
-            parameters.putString(APP_EVENT_PUSH_PARAMETER_ACTION, action);
-        }
-        logEvent(APP_EVENT_NAME_PUSH_OPENED, parameters);
-    }
-
-    /**
-     * Explicitly flush any stored events to the server.  Implicit flushes may happen depending on
-     * the value of getFlushBehavior.  This method allows for explicit, app invoked flushing.
-     */
-    public void flush() {
-        AppEventQueue.flush(FlushReason.EXPLICIT);
-    }
-
-    /**
-     * Call this when the consuming Activity/Fragment receives an onStop() callback in order to
-     * persist any outstanding events to disk so they may be flushed at a later time. The next
-     * flush (explicit or not) will check for any outstanding events and if present, include them
-     * in that flush. Note that this call may trigger an I/O operation on the calling thread.
-     * Explicit use of this method is necessary.
-     */
-    public static void onContextStop() {
-        // TODO: (v4) add onContextStop() to samples that use the logger.
-        AppEventQueue.persistToDisk();
-    }
-
-    /**
-     * Determines if the logger is valid for the given access token.
-     * @param accessToken The access token to check.
-     * @return True if the access token is valid for this logger.
-     */
-    public boolean isValidForAccessToken(AccessToken accessToken) {
-        AccessTokenAppIdPair other = new AccessTokenAppIdPair(accessToken);
-        return accessTokenAppId.equals(other);
-    }
-
-    /**
-     * Sets a registration id to register the current app installation for push notifications.
-     * @param registrationId RegistrationId received from GCM.
-     */
-    public static void setPushNotificationsRegistrationId(String registrationId) {
-        synchronized (staticLock) {
-            pushNotificationsRegistrationId = registrationId;
-        }
-    }
-
-    static String getPushNotificationsRegistrationId() {
-        synchronized (staticLock) {
-            return pushNotificationsRegistrationId;
-        }
-    }
-    /**
-     * This method is intended only for internal use by the Facebook SDK and other use is
-     * unsupported.
-     */
-    public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters) {
-        logEvent(
-            eventName,
-            valueToSum,
-            parameters,
-            true,
-            ActivityLifecycleTracker.getCurrentSessionGuid());
-    }
-
-    /**
-     * Returns the app ID this logger was configured to log to.
-     *
-     * @return the Facebook app ID
-     */
-    public String getApplicationId() {
-        return accessTokenAppId.getApplicationId();
-    }
-
-    //
-    // Private implementation
-    //
-
-    /**
-     * Constructor is private, newLogger() methods should be used to build an instance.
-     */
-    private AppEventsLogger(Context context, String applicationId, AccessToken accessToken) {
-        this(
-                Utility.getActivityName(context),
-                applicationId,
-                accessToken);
-    }
-
-    protected AppEventsLogger(
-            String activityName,
-            String applicationId,
-            AccessToken accessToken) {
-        Validate.sdkInitialized();
-        this.contextName = activityName;
-
-        if (accessToken == null) {
-            accessToken = AccessToken.getCurrentAccessToken();
-        }
-
-        // If we have a session and the appId passed is null or matches the session's app ID:
-        if (accessToken != null &&
-                (applicationId == null || applicationId.equals(accessToken.getApplicationId()))
-                ) {
-            accessTokenAppId = new AccessTokenAppIdPair(accessToken);
-        } else {
-            // If no app ID passed, get it from the manifest:
-            if (applicationId == null) {
-                applicationId = Utility.getMetadataApplicationId(
-                        FacebookSdk.getApplicationContext());
-            }
-            accessTokenAppId = new AccessTokenAppIdPair(null, applicationId);
-        }
-
-        initializeTimersIfNeeded();
-    }
-
-    private static void initializeTimersIfNeeded() {
-        synchronized (staticLock) {
-            if (backgroundExecutor != null) {
-                return;
-            }
-            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
-        }
-
-        final Runnable attributionRecheckRunnable = new Runnable() {
-            @Override
-            public void run() {
-                Set<String> applicationIds = new HashSet<>();
-                for (AccessTokenAppIdPair accessTokenAppId : AppEventQueue.getKeySet()) {
-                    applicationIds.add(accessTokenAppId.getApplicationId());
-                }
-
-                for (String applicationId : applicationIds) {
-                    Utility.queryAppSettings(applicationId, true);
-                }
-            }
-        };
-
-        backgroundExecutor.scheduleAtFixedRate(
-                attributionRecheckRunnable,
-                0,
-                APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS,
-                TimeUnit.SECONDS
-        );
-    }
-
-    private void logEvent(
-            String eventName,
-            Double valueToSum,
-            Bundle parameters,
-            boolean isImplicitlyLogged,
-            @Nullable final UUID currentSessionId) {
-        try {
-            AppEvent event = new AppEvent(
-                    this.contextName,
-                    eventName,
-                    valueToSum,
-                    parameters,
-                    isImplicitlyLogged,
-                    currentSessionId);
-            logEvent(FacebookSdk.getApplicationContext(), event, accessTokenAppId);
-        } catch (JSONException jsonException) {
-            // If any of the above failed, just consider this an illegal event.
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "JSON encoding for app event failed: '%s'", jsonException.toString());
-
-        } catch (FacebookException e) {
-            // If any of the above failed, just consider this an illegal event.
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "Invalid app event: %s", e.toString());
-        }
-
-    }
-
-    private static void logEvent(final Context context,
-                                 final AppEvent event,
-                                 final AccessTokenAppIdPair accessTokenAppId) {
-        AppEventQueue.add(accessTokenAppId, event);
-
-        // Make sure Activated_App is always before other app events
-        if (!event.getIsImplicit() && !isActivateAppEventRequested) {
-            if (event.getName() == AppEventsConstants.EVENT_NAME_ACTIVATED_APP) {
-                isActivateAppEventRequested = true;
-            } else {
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "Warning: Please call AppEventsLogger.activateApp(...)" +
-                                "from the long-lived activity's onResume() method" +
-                                "before logging other app events."
-                );
-            }
-        }
-    }
-
-    static void eagerFlush() {
-        if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-            AppEventQueue.flush(FlushReason.EAGER_FLUSHING_EVENT);
-        }
-    }
-
-    /**
-     * Invoke this method, rather than throwing an Exception, for situations where user/server input
-     * might reasonably cause this to occur, and thus don't want an exception thrown at production
-     * time, but do want logging notification.
-     */
-    private static void notifyDeveloperError(String message) {
-        Logger.log(LoggingBehavior.DEVELOPER_ERRORS, "AppEvents", message);
-    }
-
-    /**
-     * Source Application setters and getters
-     */
-    private static void setSourceApplication(Activity activity) {
-
-        ComponentName callingApplication = activity.getCallingActivity();
-        if (callingApplication != null) {
-            String callingApplicationPackage = callingApplication.getPackageName();
-            if (callingApplicationPackage.equals(activity.getPackageName())) {
-                // open by own app.
-                resetSourceApplication();
-                return;
-            }
-            sourceApplication = callingApplicationPackage;
-        }
-
-        // Tap icon to open an app will still get the old intent if the activity was opened by an
-        // intent before. Introduce an extra field in the intent to force clear the
-        // sourceApplication.
-        Intent openIntent = activity.getIntent();
-        if (openIntent == null ||
-                openIntent.getBooleanExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, false)) {
-            resetSourceApplication();
-            return;
-        }
-
-        Bundle applinkData = AppLinks.getAppLinkData(openIntent);
-
-        if (applinkData == null) {
-            resetSourceApplication();
-            return;
-        }
-
-        isOpenedByApplink = true;
-
-        Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
-
-        if (applinkReferrerData == null) {
-            sourceApplication = null;
-            return;
-        }
-
-        String applinkReferrerPackage = applinkReferrerData.getString("package");
-        sourceApplication = applinkReferrerPackage;
-
-        // Mark this intent has been used to avoid use this intent again and again.
-        openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
-
-        return;
-    }
-
-    static void setSourceApplication(String applicationPackage, boolean openByAppLink) {
-        sourceApplication = applicationPackage;
-        isOpenedByApplink = openByAppLink;
-    }
-
-    static String getSourceApplication() {
-        String openType = "Unclassified";
-        if (isOpenedByApplink) {
-            openType = "Applink";
-        }
-        if (sourceApplication != null) {
-            return openType + "(" + sourceApplication + ")";
-        }
-        return openType;
-    }
-
-    static void resetSourceApplication() {
-        sourceApplication = null;
-        isOpenedByApplink = false;
-    }
-
-    /**
-     * Each app/device pair gets an GUID that is sent back with App Events and persisted with this
-     * app/device pair.
-     * @param context The application context.
-     * @return The GUID for this app/device pair.
-     */
-    public static String getAnonymousAppDeviceGUID(Context context) {
-
-        if (anonymousAppDeviceGUID == null) {
-            synchronized (staticLock) {
-                if (anonymousAppDeviceGUID == null) {
-
-                    SharedPreferences preferences = context.getSharedPreferences(
-                            APP_EVENT_PREFERENCES,
-                            Context.MODE_PRIVATE);
-                    anonymousAppDeviceGUID = preferences.getString("anonymousAppDeviceGUID", null);
-                    if (anonymousAppDeviceGUID == null) {
-                        // Arbitrarily prepend XZ to distinguish from device supplied identifiers.
-                        anonymousAppDeviceGUID = "XZ" + UUID.randomUUID().toString();
-
-                        context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE)
-                                .edit()
-                                .putString("anonymousAppDeviceGUID", anonymousAppDeviceGUID)
-                                .apply();
-                    }
-                }
-            }
-        }
-
-        return anonymousAppDeviceGUID;
-    }
-
-    //
-    // Deprecated Stuff
-    //
-
-    // Since we moved some private classes to internal classes outside the AppEventsLogger class
-    // for backwards compatibility we can override the classDescriptor to resolve to the correct
-    // class
-
-
-    static class PersistedAppSessionInfo {
-        private static final String PERSISTED_SESSION_INFO_FILENAME =
-                "AppEventsLogger.persistedsessioninfo";
-
-        private static final Object staticLock = new Object();
-        private static boolean hasChanges = false;
-        private static boolean isLoaded = false;
-        private static Map<AccessTokenAppIdPair, FacebookTimeSpentData> appSessionInfoMap;
-
-        private static final Runnable appSessionInfoFlushRunnable = new Runnable() {
-            @Override
-            public void run() {
-                PersistedAppSessionInfo.saveAppSessionInformation(
-                        FacebookSdk.getApplicationContext());
-            }
-        };
-
-        @SuppressWarnings("unchecked")
-        private static void restoreAppSessionInformation(Context context) {
-            ObjectInputStream ois = null;
-
-            synchronized (staticLock) {
-                if (!isLoaded) {
-                    try {
-                        ois = new ObjectInputStream(
-                            context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
-                        appSessionInfoMap = (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>)
-                                ois.readObject();
-                        Logger.log(
-                                LoggingBehavior.APP_EVENTS,
-                                "AppEvents",
-                                "App session info loaded");
-                    } catch (FileNotFoundException fex) {
-                    } catch (Exception e) {
-                        Log.w(
-                                TAG,
-                                "Got unexpected exception restoring app session info: "
-                                        + e.toString());
-                    } finally {
-                        Utility.closeQuietly(ois);
-                        context.deleteFile(PERSISTED_SESSION_INFO_FILENAME);
-                        if (appSessionInfoMap == null) {
-                            appSessionInfoMap =
-                                    new HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>();
-                        }
-                        // Regardless of the outcome of the load, the session information cache
-                        // is always deleted. Therefore, always treat the session information cache
-                        // as loaded
-                        isLoaded = true;
-                        hasChanges = false;
-                    }
-                }
-            }
-        }
-
-        static void saveAppSessionInformation(Context context) {
-            ObjectOutputStream oos = null;
-
-            synchronized (staticLock) {
-                if (hasChanges) {
-                    try {
-                        oos = new ObjectOutputStream(
-                                new BufferedOutputStream(
-                                        context.openFileOutput(
-                                                PERSISTED_SESSION_INFO_FILENAME,
-                                                Context.MODE_PRIVATE)
-                                )
-                        );
-                        oos.writeObject(appSessionInfoMap);
-                        hasChanges = false;
-                        Logger.log(
-                                LoggingBehavior.APP_EVENTS,
-                                "AppEvents",
-                                "App session info saved");
-                    } catch (Exception e) {
-                        Log.w(
-                                TAG,
-                                "Got unexpected exception while writing app session info: "
-                                        + e.toString());
-                    } finally {
-                        Utility.closeQuietly(oos);
-                    }
-                }
-            }
-        }
-
-        static void onResume(
-                Context context,
-                AccessTokenAppIdPair accessTokenAppId,
-                AppEventsLogger logger,
-                long eventTime,
-                String sourceApplicationInfo
-        ) {
-            synchronized (staticLock) {
-                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
-                timeSpentData.onResume(logger, eventTime, sourceApplicationInfo);
-                onTimeSpentDataUpdate();
-            }
-        }
-
-        static void onSuspend(
-                Context context,
-                AccessTokenAppIdPair accessTokenAppId,
-                AppEventsLogger logger,
-                long eventTime
-        ) {
-            synchronized (staticLock) {
-                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
-                timeSpentData.onSuspend(logger, eventTime);
-                onTimeSpentDataUpdate();
-            }
-        }
-
-        private static FacebookTimeSpentData getTimeSpentData(
-                Context context,
-                AccessTokenAppIdPair accessTokenAppId
-        ) {
-            restoreAppSessionInformation(context);
-            FacebookTimeSpentData result = null;
-
-            result = appSessionInfoMap.get(accessTokenAppId);
-            if (result == null) {
-                result = new FacebookTimeSpentData();
-                appSessionInfoMap.put(accessTokenAppId, result);
-            }
-
-            return result;
-        }
-
-        private static void onTimeSpentDataUpdate() {
-            if (!hasChanges) {
-                hasChanges = true;
-                backgroundExecutor.schedule(
-                        appSessionInfoFlushRunnable,
-                        FLUSH_APP_SESSION_INFO_IN_SECONDS,
-                        TimeUnit.SECONDS);
-            }
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
deleted file mode 100644
index 4dd7cc254..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
+++ /dev/null
@@ -1,327 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.os.Bundle;
-import android.text.format.DateUtils;
-
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.internal.Logger;
-
-import java.util.Locale;
-import java.io.Serializable;
-
-class FacebookTimeSpentData implements Serializable {
-    // Constants
-    private static final long serialVersionUID = 1L;
-    private static final String TAG = FacebookTimeSpentData.class.getCanonicalName();
-    private static final long FIRST_TIME_LOAD_RESUME_TIME = -1;
-    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
-    private static final long NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION =
-            60 * DateUtils.SECOND_IN_MILLIS;
-    private static final long APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS =
-            5 * DateUtils.MINUTE_IN_MILLIS;
-
-    // Should be kept in sync with the iOS sdk
-    private static final long[] INACTIVE_SECONDS_QUANTA =
-        new long[] {
-            5 * DateUtils.MINUTE_IN_MILLIS,
-            15 * DateUtils.MINUTE_IN_MILLIS,
-            30 * DateUtils.MINUTE_IN_MILLIS,
-            1 * DateUtils.HOUR_IN_MILLIS,
-            6 * DateUtils.HOUR_IN_MILLIS,
-            12 * DateUtils.HOUR_IN_MILLIS,
-            1 * DateUtils.DAY_IN_MILLIS,
-            2 * DateUtils.DAY_IN_MILLIS,
-            3 * DateUtils.DAY_IN_MILLIS,
-            7 * DateUtils.DAY_IN_MILLIS,
-            14 * DateUtils.DAY_IN_MILLIS,
-            21 * DateUtils.DAY_IN_MILLIS,
-            28 * DateUtils.DAY_IN_MILLIS,
-            60 * DateUtils.DAY_IN_MILLIS,
-            90 * DateUtils.DAY_IN_MILLIS,
-            120 * DateUtils.DAY_IN_MILLIS,
-            150 * DateUtils.DAY_IN_MILLIS,
-            180 * DateUtils.DAY_IN_MILLIS,
-            365 * DateUtils.DAY_IN_MILLIS,
-        };
-
-    private boolean isWarmLaunch;
-    private boolean isAppActive;
-    private long lastActivateEventLoggedTime;
-
-    // Member data that's persisted to disk
-    private long lastResumeTime;
-    private long lastSuspendTime;
-    private long millisecondsSpentInSession;
-    private int interruptionCount;
-    private String firstOpenSourceApplication;
-
-    /**
-     * Serialization proxy for the FacebookTimeSpentData class. This is version 1 of
-     * serialization. Future serializations may differ in format. This
-     * class should not be modified. If serializations formats change,
-     * create a new class SerializationProxyVx.
-     */
-    private static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = 6L;
-
-        private final long lastResumeTime;
-        private final long lastSuspendTime;
-        private final long millisecondsSpentInSession;
-        private final int interruptionCount;
-
-        SerializationProxyV1(
-            long lastResumeTime,
-            long lastSuspendTime,
-            long millisecondsSpentInSession,
-            int interruptionCount
-        ) {
-            this.lastResumeTime = lastResumeTime;
-            this.lastSuspendTime = lastSuspendTime;
-            this.millisecondsSpentInSession = millisecondsSpentInSession;
-            this.interruptionCount = interruptionCount;
-        }
-
-        private Object readResolve() {
-            return new FacebookTimeSpentData(
-                lastResumeTime,
-                lastSuspendTime,
-                millisecondsSpentInSession,
-                interruptionCount);
-        }
-    }
-
-
-    /**
-     * Constructor to be used for V1 serialization only, DO NOT CHANGE.
-     */
-    private FacebookTimeSpentData(
-            long lastResumeTime,
-            long lastSuspendTime,
-            long millisecondsSpentInSession,
-            int interruptionCount
-
-    ) {
-        resetSession();
-        this.lastResumeTime = lastResumeTime;
-        this.lastSuspendTime = lastSuspendTime;
-        this.millisecondsSpentInSession = millisecondsSpentInSession;
-        this.interruptionCount = interruptionCount;
-    }
-
-    /**
-     * Serialization proxy for the FacebookTimeSpentData class. This is version 2 of
-     * serialization. Future serializations may differ in format. This
-     * class should not be modified. If serializations formats change,
-     * create a new class SerializationProxyVx.
-     */
-    private static class SerializationProxyV2 implements Serializable {
-        private static final long serialVersionUID = 6L;
-
-        private final long lastResumeTime;
-        private final long lastSuspendTime;
-        private final long millisecondsSpentInSession;
-        private final int interruptionCount;
-        private final String firstOpenSourceApplication;
-
-        SerializationProxyV2(
-                long lastResumeTime,
-                long lastSuspendTime,
-                long millisecondsSpentInSession,
-                int interruptionCount,
-                String firstOpenSourceApplication
-
-        ) {
-            this.lastResumeTime = lastResumeTime;
-            this.lastSuspendTime = lastSuspendTime;
-            this.millisecondsSpentInSession = millisecondsSpentInSession;
-            this.interruptionCount = interruptionCount;
-            this.firstOpenSourceApplication = firstOpenSourceApplication;
-        }
-
-        private Object readResolve() {
-            return new FacebookTimeSpentData(
-                    lastResumeTime,
-                    lastSuspendTime,
-                    millisecondsSpentInSession,
-                    interruptionCount,
-                    firstOpenSourceApplication);
-        }
-    }
-
-    FacebookTimeSpentData() {
-        resetSession();
-    }
-
-    /**
-     * Constructor to be used for V2 serialization only, DO NOT CHANGE.
-     */
-    private FacebookTimeSpentData(
-        long lastResumeTime,
-        long lastSuspendTime,
-        long millisecondsSpentInSession,
-        int interruptionCount,
-        String firstOpenSourceApplication
-    ) {
-        resetSession();
-        this.lastResumeTime = lastResumeTime;
-        this.lastSuspendTime = lastSuspendTime;
-        this.millisecondsSpentInSession = millisecondsSpentInSession;
-        this.interruptionCount = interruptionCount;
-        this.firstOpenSourceApplication = firstOpenSourceApplication;
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV2(
-                lastResumeTime,
-                lastSuspendTime,
-                millisecondsSpentInSession,
-                interruptionCount,
-                firstOpenSourceApplication
-        );
-    }
-
-    void onSuspend(AppEventsLogger logger, long eventTime) {
-        if (!isAppActive) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Suspend for inactive app");
-            return;
-        }
-
-        long now = eventTime;
-        long delta = (now - lastResumeTime);
-        if (delta < 0) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
-            delta = 0;
-        }
-        millisecondsSpentInSession += delta;
-        lastSuspendTime = now;
-        isAppActive = false;
-    }
-
-    void onResume(AppEventsLogger logger, long eventTime, String sourceApplicationInfo) {
-        long now = eventTime;
-
-        // Retain old behavior for activated app event - log the event if the event hasn't
-        // been logged in the previous suppression interval or this is a cold launch.
-        // If this is a cold launch, always log the event. Otherwise, use the last
-        // event log time to determine if the app activate should be suppressed or not.
-        if (isColdLaunch() || ((now - lastActivateEventLoggedTime) >
-                APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS)) {
-            Bundle eventParams = new Bundle();
-            eventParams.putString(
-                    AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                    sourceApplicationInfo);
-            logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
-            lastActivateEventLoggedTime = now;
-        }
-
-        // If this is an application that's not calling onSuspend yet, log and return. We can't
-        // track time spent for this application as there are no calls to onSuspend.
-        if (isAppActive) {
-          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Resume for active app");
-          return;
-        }
-
-        long interruptionDurationMillis = wasSuspendedEver() ? now - lastSuspendTime : 0;
-        if (interruptionDurationMillis < 0) {
-          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
-          interruptionDurationMillis = 0;
-        }
-
-        // If interruption duration is > new session threshold, then log old session
-        // event and start a new session.
-        if (interruptionDurationMillis > NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION) {
-            logAppDeactivatedEvent(logger, interruptionDurationMillis);
-        } else {
-            // We're not logging this resume event - check to see if this should count
-            // as an interruption
-            if (interruptionDurationMillis > INTERRUPTION_THRESHOLD_MILLISECONDS) {
-                interruptionCount++;
-            }
-        }
-
-        // Set source application only for the first resume of the timespent session.
-        if (interruptionCount == 0) {
-            firstOpenSourceApplication = sourceApplicationInfo;
-        }
-
-        lastResumeTime = now;
-        isAppActive = true;
-    }
-
-    private void logAppDeactivatedEvent(AppEventsLogger logger,
-                                        long interruptionDurationMillis) {
-        // Log the old session information and clear the data
-        Bundle eventParams = new Bundle();
-        eventParams.putInt(
-                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
-                interruptionCount);
-        eventParams.putString(
-                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
-                String.format(
-                        Locale.ROOT,
-                        "session_quanta_%d",
-                        getQuantaIndex(interruptionDurationMillis)));
-        eventParams.putString(
-                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                firstOpenSourceApplication);
-        logger.logEvent(
-                AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
-                (millisecondsSpentInSession/DateUtils.SECOND_IN_MILLIS),
-                eventParams);
-        resetSession();
-    }
-
-    private static int getQuantaIndex(long timeBetweenSessions) {
-        int quantaIndex = 0;
-
-        while (
-            quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
-            INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
-        ) {
-            ++quantaIndex;
-        }
-
-        return quantaIndex;
-    }
-
-    private void resetSession() {
-        isAppActive = false;
-        lastResumeTime = FIRST_TIME_LOAD_RESUME_TIME;
-        lastSuspendTime = FIRST_TIME_LOAD_RESUME_TIME;
-        interruptionCount = 0;
-        millisecondsSpentInSession = 0;
-    }
-
-    private boolean wasSuspendedEver() {
-        return lastSuspendTime != FIRST_TIME_LOAD_RESUME_TIME;
-    }
-
-    private boolean isColdLaunch() {
-        // On the very first call in the process lifecycle, this will always
-        // return true. After that, it will always return false.
-        boolean result = !isWarmLaunch;
-        isWarmLaunch = true;
-        return result;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushReason.java b/facebook/src/main/java/com/facebook/appevents/FlushReason.java
deleted file mode 100644
index 48e4ed827..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FlushReason.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-enum FlushReason {
-    EXPLICIT,
-    TIMER,
-    SESSION_CHANGE,
-    PERSISTED_EVENTS,
-    EVENT_THRESHOLD,
-    EAGER_FLUSHING_EVENT,
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushResult.java b/facebook/src/main/java/com/facebook/appevents/FlushResult.java
deleted file mode 100644
index 064dc3190..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FlushResult.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-public enum FlushResult {
-    SUCCESS,
-    SERVER_ERROR,
-    NO_CONNECTIVITY,
-    UNKNOWN_ERROR
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java b/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
deleted file mode 100644
index 5e8e6efe0..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-class FlushStatistics {
-    public int numEvents = 0;
-    public FlushResult result = FlushResult.SUCCESS;
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
deleted file mode 100644
index df47a7ac8..000000000
--- a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import java.io.Serializable;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Set;
-
-class PersistedEvents implements Serializable {
-    private static final long serialVersionUID = 2016_06_29_001L;
-
-    private HashMap<AccessTokenAppIdPair, List<AppEvent>> events = new HashMap<>();
-
-    public PersistedEvents() {
-    }
-
-    public PersistedEvents(HashMap<AccessTokenAppIdPair, List<AppEvent>> appEventMap) {
-        events.putAll(appEventMap);
-    }
-
-    public Set<AccessTokenAppIdPair> keySet() {
-        return events.keySet();
-    }
-
-    public List<AppEvent> get(AccessTokenAppIdPair accessTokenAppIdPair) {
-        return events.get(accessTokenAppIdPair);
-    }
-
-    public boolean containsKey(AccessTokenAppIdPair accessTokenAppIdPair) {
-        return events.containsKey(accessTokenAppIdPair);
-    }
-
-    public void addEvents(AccessTokenAppIdPair accessTokenAppIdPair, List<AppEvent> appEvents) {
-        if (!events.containsKey(accessTokenAppIdPair)) {
-            events.put(accessTokenAppIdPair, appEvents);
-            return;
-        }
-
-        events.get(accessTokenAppIdPair).addAll(appEvents);
-    }
-
-    static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = 2016_06_29_001L;;
-        private final HashMap<AccessTokenAppIdPair, List<AppEvent>> proxyEvents;
-
-        private SerializationProxyV1(HashMap<AccessTokenAppIdPair, List<AppEvent>> events) {
-            this.proxyEvents = events;
-        }
-
-        private Object readResolve() {
-            return new PersistedEvents(proxyEvents);
-        }
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV1(events);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java b/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
deleted file mode 100644
index 665ed4306..000000000
--- a/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
+++ /dev/null
@@ -1,182 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-import android.os.Bundle;
-
-import com.facebook.GraphRequest;
-import com.facebook.internal.AppEventsLoggerUtility;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.Utility;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.UnsupportedEncodingException;
-import java.util.ArrayList;
-import java.util.List;
-
-class SessionEventsState {
-    private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
-    private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
-    private int numSkippedEventsDueToFullBuffer;
-    private AttributionIdentifiers attributionIdentifiers;
-    private String anonymousAppDeviceGUID;
-
-    private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
-
-    public SessionEventsState(
-            AttributionIdentifiers identifiers,
-            String anonymousGUID) {
-        this.attributionIdentifiers = identifiers;
-        this.anonymousAppDeviceGUID = anonymousGUID;
-    }
-
-    // Synchronize here and in other methods on this class, because could be coming in from
-    // different AppEventsLoggers on different threads pointing at the same session.
-    public synchronized void addEvent(AppEvent event) {
-        if (accumulatedEvents.size() + inFlightEvents.size() >= MAX_ACCUMULATED_LOG_EVENTS) {
-            numSkippedEventsDueToFullBuffer++;
-        } else {
-            accumulatedEvents.add(event);
-        }
-    }
-
-    public synchronized int getAccumulatedEventCount() {
-        return accumulatedEvents.size();
-    }
-
-    public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
-        if (moveToAccumulated) {
-            accumulatedEvents.addAll(inFlightEvents);
-        }
-        inFlightEvents.clear();
-        numSkippedEventsDueToFullBuffer = 0;
-    }
-
-    public int populateRequest(
-            GraphRequest request,
-            Context applicationContext,
-            boolean includeImplicitEvents,
-            boolean limitEventUsage) {
-
-        int numSkipped;
-        JSONArray jsonArray;
-        synchronized (this) {
-            numSkipped = numSkippedEventsDueToFullBuffer;
-
-            // move all accumulated events to inFlight.
-            inFlightEvents.addAll(accumulatedEvents);
-            accumulatedEvents.clear();
-
-            jsonArray = new JSONArray();
-            for (AppEvent event : inFlightEvents) {
-                if (event.isChecksumValid()) {
-                    if (includeImplicitEvents || !event.getIsImplicit()) {
-                        jsonArray.put(event.getJSONObject());
-                    }
-                } else {
-                    Utility.logd("Event with invalid checksum: %s", event.toString());
-                }
-            }
-
-            if (jsonArray.length() == 0) {
-                return 0;
-            }
-        }
-
-        populateRequest(
-                request,
-                applicationContext,
-                numSkipped,
-                jsonArray,
-                limitEventUsage);
-        return jsonArray.length();
-    }
-
-    public synchronized List<AppEvent> getEventsToPersist() {
-        // We will only persist accumulated events, not ones currently in-flight. This means if
-        // an in-flight request fails, those requests will not be persisted and thus might be
-        // lost if the process terminates while the flush is in progress.
-        List<AppEvent> result = accumulatedEvents;
-        accumulatedEvents = new ArrayList<AppEvent>();
-        return result;
-    }
-
-    public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
-        // We won't skip events due to a full buffer, since we already accumulated them once and
-        // persisted them. But they will count against the buffer size when further events are
-        // accumulated.
-        accumulatedEvents.addAll(events);
-    }
-
-    private void populateRequest(
-            GraphRequest request,
-            Context applicationContext,
-            int numSkipped,
-            JSONArray events,
-            boolean limitEventUsage) {
-        JSONObject publishParams = null;
-        try {
-            publishParams = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(
-                    AppEventsLoggerUtility.GraphAPIActivityType.CUSTOM_APP_EVENTS,
-                    attributionIdentifiers,
-                    anonymousAppDeviceGUID,
-                    limitEventUsage,
-                    applicationContext);
-
-            if (numSkippedEventsDueToFullBuffer > 0) {
-                publishParams.put("num_skipped_events", numSkipped);
-            }
-        } catch (JSONException e) {
-            // Swallow
-            publishParams = new JSONObject();
-        }
-        request.setGraphObject(publishParams);
-
-        Bundle requestParameters = request.getParameters();
-        if (requestParameters == null) {
-            requestParameters = new Bundle();
-        }
-
-        String jsonString = events.toString();
-        if (jsonString != null) {
-            requestParameters.putByteArray(
-                    "custom_events_file",
-                    getStringAsByteArray(jsonString));
-            request.setTag(jsonString);
-        }
-        request.setParameters(requestParameters);
-    }
-
-    private byte[] getStringAsByteArray(String jsonString) {
-        byte[] jsonUtf8 = null;
-        try {
-            jsonUtf8 = jsonString.getBytes("UTF-8");
-        } catch (UnsupportedEncodingException e) {
-            // shouldn't happen, but just in case:
-            Utility.logd("Encoding exception: ", e);
-        }
-        return jsonUtf8;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
deleted file mode 100644
index a7a2e74b5..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
+++ /dev/null
@@ -1,284 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.Context;
-import android.os.Bundle;
-import android.os.Looper;
-import android.util.Log;
-
-import com.facebook.BuildConfig;
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.Utility;
-
-import junit.framework.Assert;
-
-import java.util.UUID;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
-public class ActivityLifecycleTracker {
-    private static final String TAG = ActivityLifecycleTracker.class.getCanonicalName();
-    private static final String INCORRECT_IMPL_WARNING = "Unexpected activity pause without a " +
-            "matching activity resume. Logging data may be incorrect. Make sure you call " +
-            "activateApp from your Application's onCreate method";
-    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
-    private static final ScheduledExecutorService singleThreadExecutor =
-            Executors.newSingleThreadScheduledExecutor();
-    private static volatile ScheduledFuture currentFuture;
-    private static AtomicInteger foregroundActivityCount = new AtomicInteger(0);
-    // This member should only be changed or updated when executing on the singleThreadExecutor.
-    private static volatile SessionInfo currentSession;
-    private static AtomicBoolean tracking = new AtomicBoolean(false);
-    private static String appId;
-
-    public static void startTracking(Application application, final String appId) {
-        if (!tracking.compareAndSet(false, true)) {
-            return;
-        }
-
-        ActivityLifecycleTracker.appId = appId;
-
-        application.registerActivityLifecycleCallbacks(
-                new Application.ActivityLifecycleCallbacks() {
-                    @Override
-                    public void onActivityCreated(
-                            final Activity activity,
-                            Bundle savedInstanceState) {
-                        assertIsMainThread();
-                        ActivityLifecycleTracker.onActivityCreated(activity);
-                    }
-
-                    @Override
-                    public void onActivityStarted(Activity activity) {}
-
-                    @Override
-                    public void onActivityResumed(final Activity activity) {
-                        assertIsMainThread();
-                        ActivityLifecycleTracker.onActivityResumed(activity);
-                    }
-
-                    @Override
-                    public void onActivityPaused(final Activity activity) {
-                        assertIsMainThread();
-                        ActivityLifecycleTracker.onActivityPaused(activity);
-                    }
-
-                    @Override
-                    public void onActivityStopped(Activity activity) {
-                        AppEventsLogger.onContextStop();
-                    }
-
-                    @Override
-                    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
-                    }
-
-                    @Override
-                    public void onActivityDestroyed(Activity activity) {
-                    }
-                });
-    }
-
-    public static boolean isTracking() {
-        return tracking.get();
-    }
-
-    public static UUID getCurrentSessionGuid() {
-        return currentSession != null ? currentSession.getSessionId() : null;
-    }
-
-    // Public in order to allow unity sdk to correctly log app events
-    public static void onActivityCreated(final Activity activity) {
-        final long currentTime = System.currentTimeMillis();
-        Runnable handleActivityCreate = new Runnable() {
-            @Override
-            public void run() {
-                if (currentSession == null) {
-                    Context applicationContext = activity.getApplicationContext();
-                    String activityName = Utility.getActivityName(activity);
-
-                    SessionInfo lastSession =
-                            SessionInfo.getStoredSessionInfo();
-                    if (lastSession != null) {
-                        SessionLogger.logDeactivateApp(
-                                applicationContext,
-                                activityName,
-                                lastSession,
-                                appId);
-                    }
-
-                    currentSession = new SessionInfo(currentTime, null);
-                    SourceApplicationInfo sourceApplicationInfo =
-                            SourceApplicationInfo.Factory.create(activity);
-                    currentSession.setSourceApplicationInfo(sourceApplicationInfo);
-                    SessionLogger.logActivateApp(
-                            applicationContext,
-                            activityName,
-                            sourceApplicationInfo,
-                            appId);
-                }
-            }
-        };
-        singleThreadExecutor.execute(handleActivityCreate);
-    }
-
-    // Public in order to allow unity sdk to correctly log app events
-    public static void onActivityResumed(final Activity activity) {
-        foregroundActivityCount.incrementAndGet();
-        cancelCurrentTask();
-        final long currentTime = System.currentTimeMillis();
-        Runnable handleActivityResume = new Runnable() {
-            @Override
-            public void run() {
-                Context applicationContext = activity.getApplicationContext();
-                String activityName = Utility.getActivityName(activity);
-
-                if (currentSession == null) {
-                    currentSession = new SessionInfo(currentTime, null);
-                    SessionLogger.logActivateApp(
-                            applicationContext,
-                            activityName,
-                            null,
-                            appId);
-                } else if (currentSession.getSessionLastEventTime() != null) {
-                    long suspendTime =
-                            currentTime - currentSession.getSessionLastEventTime();
-                    if (suspendTime > getSessionTimeoutInSeconds() * 1000) {
-                        // We were suspended for a significant amount of time.
-                        // Count this as a new session and log the old session
-                        SessionLogger.logDeactivateApp(
-                                applicationContext,
-                                activityName,
-                                currentSession,
-                                appId);
-                        SessionLogger.logActivateApp(
-                                applicationContext,
-                                activityName,
-                                null,
-                                appId);
-                        currentSession = new SessionInfo(currentTime, null);
-                    } else if (suspendTime > INTERRUPTION_THRESHOLD_MILLISECONDS) {
-                        currentSession.incrementInterruptionCount();
-                    }
-                }
-
-                currentSession.setSessionLastEventTime(currentTime);
-                currentSession.writeSessionToDisk();
-            }
-        };
-
-        singleThreadExecutor.execute(handleActivityResume);
-    }
-
-    private static void onActivityPaused(Activity activity) {
-        int count = foregroundActivityCount.decrementAndGet();
-        if (count < 0) {
-            // Our ref count can be off if a developer doesn't call activate
-            // app from the Application's onCreate method.
-            foregroundActivityCount.set(0);
-
-            Log.w(TAG, INCORRECT_IMPL_WARNING);
-        }
-
-        cancelCurrentTask();
-        final long currentTime = System.currentTimeMillis();
-
-        // Pull out this information now to avoid holding a reference to the activity
-        final Context applicationContext = activity.getApplicationContext();
-        final String activityName = Utility.getActivityName(activity);
-
-        Runnable handleActivityPaused = new Runnable() {
-            @Override
-            public void run() {
-                if (currentSession == null) {
-                    // This can happen if a developer doesn't call activate
-                    // app from the Application's onCreate method
-                    currentSession = new SessionInfo(currentTime, null);
-                }
-
-                currentSession.setSessionLastEventTime(currentTime);
-                if (foregroundActivityCount.get() <= 0) {
-                    // Schedule check to see if we still have 0 foreground
-                    // activities in our set time. This indicates that the app has
-                    // been backgrounded
-                    Runnable task = new Runnable() {
-                        @Override
-                        public void run() {
-                            if (foregroundActivityCount.get() <= 0) {
-                                SessionLogger.logDeactivateApp(
-                                        applicationContext,
-                                        activityName,
-                                        currentSession,
-                                        appId);
-                                SessionInfo.clearSavedSessionFromDisk();
-                                currentSession = null;
-                            }
-
-                            currentFuture = null;
-                        }
-                    };
-                    currentFuture = singleThreadExecutor.schedule(
-                            task,
-                            getSessionTimeoutInSeconds(),
-                            TimeUnit.SECONDS);
-
-                }
-
-                currentSession.writeSessionToDisk();
-            }
-        };
-        singleThreadExecutor.execute(handleActivityPaused);
-    }
-
-    private static int getSessionTimeoutInSeconds() {
-        Utility.FetchedAppSettings settings =
-                Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
-        if (settings == null) {
-            return Constants.getDefaultAppEventsSessionTimeoutInSeconds();
-        }
-
-        return settings.getSessionTimeoutInSeconds();
-    }
-
-    private static void cancelCurrentTask() {
-        if (currentFuture != null) {
-            currentFuture.cancel(false);
-        }
-
-        currentFuture = null;
-    }
-
-    private static void assertIsMainThread() {
-        if (BuildConfig.DEBUG){
-            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
-            Assert.assertTrue(
-                    "Activity Lifecycle Callback not running on main thread",
-                    isMainThread);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
deleted file mode 100644
index 8a6035365..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-public class Constants {
-    public static final String LOG_TIME_APP_EVENT_KEY = "_logTime";
-    public static final String EVENT_NAME_EVENT_KEY = "_eventName";
-
-    public static int getDefaultAppEventsSessionTimeoutInSeconds() {
-        return 60;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
deleted file mode 100644
index 1ab9d0d67..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import com.facebook.AccessToken;
-import com.facebook.appevents.AppEventsLogger;
-
-// This class extends the AppEventsLogger to be able to expose creating an app events logger
-// without passing in a context which is required when using AppEventsLogger.newLogger
-class InternalAppEventsLogger extends AppEventsLogger {
-    InternalAppEventsLogger(
-            String activityName,
-            String applicationId,
-            AccessToken accessToken) {
-        super(activityName, applicationId, accessToken);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
deleted file mode 100644
index 7e6b18792..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
+++ /dev/null
@@ -1,162 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-
-import com.facebook.FacebookSdk;
-
-import java.util.UUID;
-
-class SessionInfo {
-    private static final String LAST_SESSION_INFO_START_KEY
-            = "com.facebook.appevents.SessionInfo.sessionStartTime";
-    private static final String LAST_SESSION_INFO_END_KEY
-            = "com.facebook.appevents.SessionInfo.sessionEndTime";
-    private static final String INTERRUPTION_COUNT_KEY
-            = "com.facebook.appevents.SessionInfo.interruptionCount";
-    private static final String SESSION_ID_KEY
-            = "com.facebook.appevents.SessionInfo.sessionId";
-
-    private Long sessionStartTime;
-    private Long sessionLastEventTime;
-    private int interruptionCount;
-    private Long diskRestoreTime;
-    private SourceApplicationInfo sourceApplicationInfo;
-    private UUID sessionId;
-
-    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime) {
-        this(sessionStartTime, sessionLastEventTime, UUID.randomUUID());
-    }
-
-    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime, UUID sessionId) {
-        this.sessionStartTime = sessionStartTime;
-        this.sessionLastEventTime = sessionLastEventTime;
-        this.sessionId = sessionId;
-    }
-
-    /**
-     * Performs disk IO. Do not call from main thread
-     * @return
-     */
-    public static SessionInfo getStoredSessionInfo() {
-        SharedPreferences sharedPreferences =
-            PreferenceManager.getDefaultSharedPreferences(
-                    FacebookSdk.getApplicationContext());
-        
-        long startTime = sharedPreferences.getLong(LAST_SESSION_INFO_START_KEY, 0);
-        long endTime = sharedPreferences.getLong(LAST_SESSION_INFO_END_KEY, 0);
-        String sessionIDStr = sharedPreferences.getString(SESSION_ID_KEY, null);
-
-        if (startTime == 0 || endTime == 0 || sessionIDStr == null) {
-            return null;
-        }
-
-        SessionInfo sessionInfo = new SessionInfo(startTime, endTime);
-        sessionInfo.interruptionCount = sharedPreferences.getInt(INTERRUPTION_COUNT_KEY, 0);
-        sessionInfo.sourceApplicationInfo = SourceApplicationInfo.getStoredSourceApplicatioInfo();
-        sessionInfo.diskRestoreTime = System.currentTimeMillis();
-        sessionInfo.sessionId = UUID.fromString(sessionIDStr);
-        return sessionInfo;
-    }
-
-    public static void clearSavedSessionFromDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.remove(LAST_SESSION_INFO_START_KEY);
-        editor.remove(LAST_SESSION_INFO_END_KEY);
-        editor.remove(INTERRUPTION_COUNT_KEY);
-        editor.remove(SESSION_ID_KEY);
-        editor.apply();
-
-        SourceApplicationInfo.clearSavedSourceApplicationInfoFromDisk();
-    }
-
-    public Long getSessionStartTime() {
-        return sessionStartTime;
-    }
-
-    public Long getSessionLastEventTime() {
-        return sessionLastEventTime;
-    }
-
-    public void setSessionStartTime(Long sessionStartTime) {
-        this.sessionStartTime = sessionStartTime;
-    }
-
-    public void setSessionLastEventTime(Long essionLastEventTime) {
-        this.sessionLastEventTime = essionLastEventTime;
-    }
-
-    public int getInterruptionCount() {
-        return interruptionCount;
-    }
-
-    public void incrementInterruptionCount() {
-        interruptionCount++;
-    }
-
-    public long getDiskRestoreTime() {
-        return diskRestoreTime == null ? 0 : diskRestoreTime;
-    }
-
-    public UUID getSessionId() {
-        return sessionId;
-    }
-
-    public long getSessionLength() {
-        if (sessionStartTime == null || sessionLastEventTime == null) {
-            return 0;
-        }
-
-        return sessionLastEventTime - sessionStartTime;
-    }
-
-    public SourceApplicationInfo getSourceApplicationInfo() {
-        return sourceApplicationInfo;
-    }
-
-    public void setSourceApplicationInfo(SourceApplicationInfo sourceApplicationInfo) {
-        this.sourceApplicationInfo = sourceApplicationInfo;
-    }
-
-    /**
-     * Performs disk IO. Do not call from main thread
-     */
-    public void writeSessionToDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.putLong(LAST_SESSION_INFO_START_KEY, this.sessionStartTime);
-        editor.putLong(LAST_SESSION_INFO_END_KEY, this.sessionLastEventTime);
-        editor.putInt(INTERRUPTION_COUNT_KEY, this.interruptionCount);
-        editor.putString(SESSION_ID_KEY, this.sessionId.toString());
-        editor.apply();
-
-        if (sourceApplicationInfo != null) {
-            sourceApplicationInfo.writeSourceApplicationInfoToDisk();
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
deleted file mode 100644
index 8b88f5527..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
+++ /dev/null
@@ -1,150 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.text.format.DateUtils;
-
-import com.facebook.FacebookSdk;
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-
-import java.util.Locale;
-
-class SessionLogger {
-    private static final String TAG = SessionLogger.class.getCanonicalName();
-
-    private static final long[] INACTIVE_SECONDS_QUANTA =
-        new long[] {
-            5 * DateUtils.MINUTE_IN_MILLIS,
-            15 * DateUtils.MINUTE_IN_MILLIS,
-            30 * DateUtils.MINUTE_IN_MILLIS,
-            1 * DateUtils.HOUR_IN_MILLIS,
-            6 * DateUtils.HOUR_IN_MILLIS,
-            12 * DateUtils.HOUR_IN_MILLIS,
-            1 * DateUtils.DAY_IN_MILLIS,
-            2 * DateUtils.DAY_IN_MILLIS,
-            3 * DateUtils.DAY_IN_MILLIS,
-            7 * DateUtils.DAY_IN_MILLIS,
-            14 * DateUtils.DAY_IN_MILLIS,
-            21 * DateUtils.DAY_IN_MILLIS,
-            28 * DateUtils.DAY_IN_MILLIS,
-            60 * DateUtils.DAY_IN_MILLIS,
-            90 * DateUtils.DAY_IN_MILLIS,
-            120 * DateUtils.DAY_IN_MILLIS,
-            150 * DateUtils.DAY_IN_MILLIS,
-            180 * DateUtils.DAY_IN_MILLIS,
-            365 * DateUtils.DAY_IN_MILLIS,
-        };
-
-    public static void logActivateApp(
-            Context applicationContext,
-            String activityName,
-            SourceApplicationInfo sourceApplicationInfo,
-            String appId
-    ) {
-        String sourAppInfoStr = sourceApplicationInfo != null
-                ? sourceApplicationInfo.toString()
-                : "Unclassified";
-
-        Bundle eventParams = new Bundle();
-        eventParams.putString(
-                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                sourAppInfoStr);
-        new InternalAppEventsLogger(
-                activityName,
-                appId,
-                null)
-                .logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
-    }
-
-    public static void logDeactivateApp(
-            Context applicationContext,
-            String activityName,
-            SessionInfo sessionInfo,
-            String appId) {
-
-        Long interruptionDurationMillis =
-                sessionInfo.getDiskRestoreTime() - sessionInfo.getSessionLastEventTime();
-        if (interruptionDurationMillis < 0) {
-            interruptionDurationMillis = 0l;
-            logClockSkewEvent();
-        }
-
-        Long sessionLength = sessionInfo.getSessionLength();
-        if (sessionLength < 0) {
-            logClockSkewEvent();
-            sessionLength = 0l;
-        }
-
-        Bundle eventParams = new Bundle();
-        eventParams.putInt(
-                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
-                sessionInfo.getInterruptionCount());
-        eventParams.putString(
-                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
-                String.format(
-                        Locale.ROOT,
-                        "session_quanta_%d",
-                        getQuantaIndex(interruptionDurationMillis)));
-        SourceApplicationInfo sourceApplicationInfo = sessionInfo.getSourceApplicationInfo();
-        String sourAppInfoStr = sourceApplicationInfo != null
-                ? sourceApplicationInfo.toString()
-                : "Unclassified";
-        eventParams.putString(
-                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                sourAppInfoStr);
-
-        eventParams.putLong(Constants.LOG_TIME_APP_EVENT_KEY,
-                sessionInfo.getSessionLastEventTime() / 1000);
-
-        new InternalAppEventsLogger(
-                activityName,
-                appId,
-                null)
-                .logEvent(
-                    AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
-                    (sessionLength / DateUtils.SECOND_IN_MILLIS),
-                    eventParams);
-    }
-
-    private static void logClockSkewEvent() {
-        Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
-    }
-
-    private static int getQuantaIndex(long timeBetweenSessions) {
-        int quantaIndex = 0;
-
-        while (
-                quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
-                        INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
-                ) {
-            ++quantaIndex;
-        }
-
-        return quantaIndex;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
deleted file mode 100644
index 53679e0d4..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.preference.PreferenceManager;
-
-import com.facebook.FacebookSdk;
-
-import bolts.AppLinks;
-
-class SourceApplicationInfo {
-    private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT =
-            "_fbSourceApplicationHasBeenSet";
-    private static final String CALL_APPLICATION_PACKAGE_KEY
-            = "com.facebook.appevents.SourceApplicationInfo.callingApplicationPackage";
-    private static final String OPENED_BY_APP_LINK_KEY
-            = "com.facebook.appevents.SourceApplicationInfo.openedByApplink";
-
-    private String callingApplicationPackage;
-    private boolean openedByApplink;
-
-    private SourceApplicationInfo(String callingApplicationPackage, boolean openedByApplink) {
-        this.callingApplicationPackage = callingApplicationPackage;
-        this.openedByApplink = openedByApplink;
-    }
-
-    public static SourceApplicationInfo getStoredSourceApplicatioInfo() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-
-        if (!sharedPreferences.contains(CALL_APPLICATION_PACKAGE_KEY)) {
-            return null;
-        }
-
-        String callingApplicationPackage = sharedPreferences.getString(
-                CALL_APPLICATION_PACKAGE_KEY,
-                null);
-        boolean openedByApplink = sharedPreferences.getBoolean(OPENED_BY_APP_LINK_KEY, false);
-
-        return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
-    }
-
-    public static void clearSavedSourceApplicationInfoFromDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.remove(CALL_APPLICATION_PACKAGE_KEY);
-        editor.remove(OPENED_BY_APP_LINK_KEY);
-        editor.apply();
-    }
-
-    public String getCallingApplicationPackage() {
-        return callingApplicationPackage;
-    }
-
-    public boolean isOpenedByApplink() {
-        return openedByApplink;
-    }
-
-    @Override
-    public String toString() {
-        String openType = "Unclassified";
-        if (openedByApplink) {
-            openType = "Applink";
-        }
-
-        if (callingApplicationPackage != null) {
-            return openType + "(" + callingApplicationPackage + ")";
-        }
-        return openType;
-    }
-
-    public void writeSourceApplicationInfoToDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.putString(CALL_APPLICATION_PACKAGE_KEY, this.callingApplicationPackage);
-        editor.putBoolean(OPENED_BY_APP_LINK_KEY, this.openedByApplink);
-        editor.apply();
-    }
-
-    public static class Factory {
-        public static SourceApplicationInfo create(Activity activity) {
-            boolean openedByApplink = false;
-
-            ComponentName callingApplication = activity.getCallingActivity();
-            if (callingApplication == null) {
-                return null;
-            }
-
-            String callingApplicationPackage = callingApplication.getPackageName();
-            if (callingApplicationPackage.equals(activity.getPackageName())) {
-                // opened by own app.
-                return null;
-            }
-
-            // Tap icon to open an app will still get the old intent if the activity was opened by
-            // an intent before. Introduce an extra field in the intent to force clear the
-            // sourceApplication.
-            Intent openIntent = activity.getIntent();
-            if (openIntent != null
-                && !openIntent.getBooleanExtra(
-                    SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT,
-                    false)) {
-                openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
-                Bundle applinkData = AppLinks.getAppLinkData(openIntent);
-                if (applinkData != null) {
-                    openedByApplink = true;
-                    Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
-                    if (applinkReferrerData != null) {
-                        String applinkReferrerPackage = applinkReferrerData.getString("package");
-                        callingApplicationPackage = applinkReferrerPackage;
-                    }
-                }
-            }
-
-            // Mark this intent has been used to avoid use this intent again and again.
-            openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
-            return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
deleted file mode 100644
index 13b016860..000000000
--- a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
+++ /dev/null
@@ -1,488 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.applinks;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Iterator;
-
-/**
- * Class to encapsulate an app link, and provide methods for constructing the data from various
- * sources
- */
-public class AppLinkData {
-
-    /**
-     * Key that should be used to pull out the UTC Unix tap-time from the arguments for this app
-     * link.
-     */
-    public static final String ARGUMENTS_TAPTIME_KEY = "com.facebook.platform.APPLINK_TAP_TIME_UTC";
-    /**
-     * Key that should be used to get the "referer_data" field for this app link.
-     */
-    public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
-
-    /**
-     * Key that should be used to get the "extras" field for this app link.
-     */
-    public static final String ARGUMENTS_EXTRAS_KEY = "extras";
-
-    /**
-     * Key that should be used to pull out the native class that would have been used if the applink
-     * was deferred.
-     */
-    public static final String ARGUMENTS_NATIVE_CLASS_KEY =
-            "com.facebook.platform.APPLINK_NATIVE_CLASS";
-
-    /**
-     * Key that should be used to pull out the native url that would have been used if the applink
-     * was deferred.
-     */
-    public static final String ARGUMENTS_NATIVE_URL = "com.facebook.platform.APPLINK_NATIVE_URL";
-
-    static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
-    private static final String BUNDLE_AL_APPLINK_DATA_KEY = "al_applink_data";
-    private static final String APPLINK_BRIDGE_ARGS_KEY = "bridge_args";
-    private static final String APPLINK_METHOD_ARGS_KEY = "method_args";
-    private static final String APPLINK_VERSION_KEY = "version";
-    private static final String BRIDGE_ARGS_METHOD_KEY = "method";
-    private static final String DEFERRED_APP_LINK_EVENT = "DEFERRED_APP_LINK";
-    private static final String DEFERRED_APP_LINK_PATH = "%s/activities";
-
-    private static final String DEFERRED_APP_LINK_ARGS_FIELD = "applink_args";
-    private static final String DEFERRED_APP_LINK_CLASS_FIELD = "applink_class";
-    private static final String DEFERRED_APP_LINK_CLICK_TIME_FIELD = "click_time";
-    private static final String DEFERRED_APP_LINK_URL_FIELD = "applink_url";
-
-    private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
-    private static final String METHOD_ARGS_REF_KEY = "ref";
-    private static final String REFERER_DATA_REF_KEY = "fb_ref";
-    private static final String EXTRAS_DEEPLINK_CONTEXT_KEY = "deeplink_context";
-    private static final String PROMOTION_CODE_KEY = "promo_code";
-    private static final String TAG = AppLinkData.class.getCanonicalName();
-
-    private String ref;
-    private Uri targetUri;
-    private JSONObject arguments;
-    private Bundle argumentBundle;
-    private String promotionCode;
-
-    /**
-     * Asynchronously fetches app link information that might have been stored for use after
-     * installation of the app
-     *
-     * @param context           The context
-     * @param completionHandler CompletionHandler to be notified with the AppLinkData object or null
-     *                          if none is available.  Must not be null.
-     */
-    public static void fetchDeferredAppLinkData(
-            Context context,
-            CompletionHandler completionHandler) {
-        fetchDeferredAppLinkData(context, null, completionHandler);
-    }
-
-    /**
-     * Asynchronously fetches app link information that might have been stored for use after
-     * installation of the app
-     *
-     * @param context           The context
-     * @param applicationId     Facebook application Id. If null, it is taken from the manifest
-     * @param completionHandler CompletionHandler to be notified with the AppLinkData object or null
-     *                          if none is available.  Must not be null.
-     */
-    public static void fetchDeferredAppLinkData(
-            Context context,
-            String applicationId,
-            final CompletionHandler completionHandler) {
-        Validate.notNull(context, "context");
-        Validate.notNull(completionHandler, "completionHandler");
-
-        if (applicationId == null) {
-            applicationId = Utility.getMetadataApplicationId(context);
-        }
-
-        Validate.notNull(applicationId, "applicationId");
-
-        final Context applicationContext = context.getApplicationContext();
-        final String applicationIdCopy = applicationId;
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                fetchDeferredAppLinkFromServer(
-                        applicationContext, applicationIdCopy, completionHandler);
-            }
-        });
-    }
-
-    private static void fetchDeferredAppLinkFromServer(
-            Context context,
-            String applicationId,
-            final CompletionHandler completionHandler) {
-
-        JSONObject deferredApplinkParams = new JSONObject();
-        try {
-            deferredApplinkParams.put("event", DEFERRED_APP_LINK_EVENT);
-            Utility.setAppEventAttributionParameters(deferredApplinkParams,
-                    AttributionIdentifiers.getAttributionIdentifiers(context),
-                    AppEventsLogger.getAnonymousAppDeviceGUID(context),
-                    FacebookSdk.getLimitEventAndDataUsage(context));
-            deferredApplinkParams.put("application_package_name", context.getPackageName());
-        } catch (JSONException e) {
-            throw new FacebookException("An error occurred while preparing deferred app link", e);
-        }
-
-        String deferredApplinkUrlPath = String.format(DEFERRED_APP_LINK_PATH, applicationId);
-        AppLinkData appLinkData = null;
-
-        try {
-            GraphRequest deferredApplinkRequest = GraphRequest.newPostRequest(
-                    null, deferredApplinkUrlPath, deferredApplinkParams, null);
-            GraphResponse deferredApplinkResponse = deferredApplinkRequest.executeAndWait();
-            JSONObject jsonResponse = deferredApplinkResponse.getJSONObject();
-            if (jsonResponse != null) {
-                final String appLinkArgsJsonString =
-                        jsonResponse.optString(DEFERRED_APP_LINK_ARGS_FIELD);
-                final long tapTimeUtc =
-                        jsonResponse.optLong(DEFERRED_APP_LINK_CLICK_TIME_FIELD, -1);
-                final String appLinkClassName =
-                        jsonResponse.optString(DEFERRED_APP_LINK_CLASS_FIELD);
-                final String appLinkUrl = jsonResponse.optString(DEFERRED_APP_LINK_URL_FIELD);
-
-                if (!TextUtils.isEmpty(appLinkArgsJsonString)) {
-                    appLinkData = createFromJson(appLinkArgsJsonString);
-
-                    if (tapTimeUtc != -1) {
-                        try {
-                            if (appLinkData.arguments != null) {
-                                appLinkData.arguments.put(ARGUMENTS_TAPTIME_KEY, tapTimeUtc);
-                            }
-                            if (appLinkData.argumentBundle != null) {
-                                appLinkData.argumentBundle.putString(
-                                        ARGUMENTS_TAPTIME_KEY, Long.toString(tapTimeUtc));
-                            }
-                        } catch (JSONException e) {
-                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
-                        }
-                    }
-
-                    if (appLinkClassName != null) {
-                        try {
-                            if (appLinkData.arguments != null) {
-                                appLinkData.arguments.put(
-                                        ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
-                            }
-                            if (appLinkData.argumentBundle != null) {
-                                appLinkData.argumentBundle.putString(
-                                        ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
-                            }
-                        } catch (JSONException e) {
-                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
-                        }
-                    }
-
-                    if (appLinkUrl != null) {
-                        try {
-                            if (appLinkData.arguments != null) {
-                                appLinkData.arguments.put(ARGUMENTS_NATIVE_URL, appLinkUrl);
-                            }
-                            if (appLinkData.argumentBundle != null) {
-                                appLinkData.argumentBundle.putString(
-                                        ARGUMENTS_NATIVE_URL, appLinkUrl);
-                            }
-                        } catch (JSONException e) {
-                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
-                        }
-                    }
-                }
-            }
-        } catch (Exception e) {
-            Utility.logd(TAG, "Unable to fetch deferred applink from server");
-        }
-
-        completionHandler.onDeferredAppLinkDataFetched(appLinkData);
-    }
-
-    /**
-     * Parses out any app link data from the Intent of the Activity passed in.
-     * @param activity Activity that was started because of an app link
-     * @return AppLinkData if found. null if not.
-     */
-    public static AppLinkData createFromActivity(Activity activity) {
-        Validate.notNull(activity, "activity");
-        Intent intent = activity.getIntent();
-        if (intent == null) {
-            return null;
-        }
-
-        AppLinkData appLinkData = createFromAlApplinkData(intent);
-        if (appLinkData == null) {
-            String appLinkArgsJsonString = intent.getStringExtra(BUNDLE_APPLINK_ARGS_KEY);
-            appLinkData = createFromJson(appLinkArgsJsonString);
-        }
-        if (appLinkData == null) {
-            // Try regular app linking
-            appLinkData = createFromUri(intent.getData());
-        }
-
-        return appLinkData;
-    }
-
-    /**
-     * Parses out any app link data from the Intent passed in.
-     * @param intent Intent from the Activity that started because of an app link
-     * @return AppLinkData if found. null if not.
-     */
-    public static AppLinkData createFromAlApplinkData(Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        Bundle applinks = intent.getBundleExtra(BUNDLE_AL_APPLINK_DATA_KEY);
-        if (applinks == null) {
-            return null;
-        }
-
-        AppLinkData appLinkData = new AppLinkData();
-        appLinkData.targetUri = intent.getData();
-        if (appLinkData.targetUri == null) {
-            String targetUriString = applinks.getString(METHOD_ARGS_TARGET_URL_KEY);
-            if (targetUriString != null) {
-                appLinkData.targetUri = Uri.parse(targetUriString);
-            }
-        }
-        appLinkData.argumentBundle = applinks;
-        appLinkData.arguments = null;
-        Bundle refererData = applinks.getBundle(ARGUMENTS_REFERER_DATA_KEY);
-        if (refererData != null) {
-            appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
-        }
-
-        Bundle extras = applinks.getBundle(ARGUMENTS_EXTRAS_KEY);
-        if (extras != null) {
-            String deeplinkContext = extras.getString(EXTRAS_DEEPLINK_CONTEXT_KEY);
-            if (deeplinkContext != null) {
-                try {
-                    JSONObject dlContextJson = new JSONObject(deeplinkContext);
-                    if (dlContextJson.has(PROMOTION_CODE_KEY)) {
-                        appLinkData.promotionCode = dlContextJson.getString(PROMOTION_CODE_KEY);
-                    }
-                } catch (JSONException e) {
-                    Log.d(TAG, "Unable to parse deeplink_context JSON", e);
-                }
-            }
-        }
-
-        return appLinkData;
-    }
-
-    private static AppLinkData createFromJson(String jsonString) {
-        if (jsonString  == null) {
-            return null;
-        }
-
-        try {
-            // Any missing or malformed data will result in a JSONException
-            JSONObject appLinkArgsJson = new JSONObject(jsonString);
-            String version = appLinkArgsJson.getString(APPLINK_VERSION_KEY);
-
-            JSONObject bridgeArgs = appLinkArgsJson.getJSONObject(APPLINK_BRIDGE_ARGS_KEY);
-            String method = bridgeArgs.getString(BRIDGE_ARGS_METHOD_KEY);
-            if (method.equals("applink") && version.equals("2")) {
-                // We have a new deep link
-                AppLinkData appLinkData = new AppLinkData();
-
-                appLinkData.arguments = appLinkArgsJson.getJSONObject(APPLINK_METHOD_ARGS_KEY);
-                // first look for the "ref" key in the top level args
-                if (appLinkData.arguments.has(METHOD_ARGS_REF_KEY)) {
-                    appLinkData.ref = appLinkData.arguments.getString(METHOD_ARGS_REF_KEY);
-                } else if (appLinkData.arguments.has(ARGUMENTS_REFERER_DATA_KEY)) {
-                    // if it's not in the top level args, it could be in the "referer_data" blob
-                    JSONObject refererData = appLinkData.arguments.getJSONObject(
-                            ARGUMENTS_REFERER_DATA_KEY);
-                    if (refererData.has(REFERER_DATA_REF_KEY)) {
-                        appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
-                    }
-                }
-
-                if (appLinkData.arguments.has(METHOD_ARGS_TARGET_URL_KEY)) {
-                    appLinkData.targetUri = Uri.parse(
-                            appLinkData.arguments.getString(METHOD_ARGS_TARGET_URL_KEY));
-                }
-
-                if (appLinkData.arguments.has(ARGUMENTS_EXTRAS_KEY)) {
-                    JSONObject extrasData =
-                            appLinkData.arguments.getJSONObject(ARGUMENTS_EXTRAS_KEY);
-                    if (extrasData.has(EXTRAS_DEEPLINK_CONTEXT_KEY)) {
-                        JSONObject deeplink_context =
-                                extrasData.getJSONObject(EXTRAS_DEEPLINK_CONTEXT_KEY);
-                        if (deeplink_context.has(PROMOTION_CODE_KEY)) {
-                            appLinkData.promotionCode =
-                                    deeplink_context.getString(PROMOTION_CODE_KEY);
-                        }
-                    }
-                }
-
-                appLinkData.argumentBundle = toBundle(appLinkData.arguments);
-
-                return appLinkData;
-            }
-        } catch (JSONException e) {
-            Log.d(TAG, "Unable to parse AppLink JSON", e);
-        } catch (FacebookException e) {
-            Log.d(TAG, "Unable to parse AppLink JSON", e);
-        }
-
-        return null;
-    }
-
-    private static AppLinkData createFromUri(Uri appLinkDataUri) {
-        if (appLinkDataUri == null) {
-            return null;
-        }
-
-        AppLinkData appLinkData = new AppLinkData();
-        appLinkData.targetUri = appLinkDataUri;
-        return appLinkData;
-    }
-
-    private static Bundle toBundle(JSONObject node) throws JSONException {
-        Bundle bundle = new Bundle();
-        @SuppressWarnings("unchecked")
-        Iterator<String> fields = node.keys();
-        while (fields.hasNext()) {
-            String key = fields.next();
-            Object value;
-            value = node.get(key);
-
-            if (value instanceof JSONObject) {
-                bundle.putBundle(key, toBundle((JSONObject) value));
-            } else if (value instanceof JSONArray) {
-                JSONArray valueArr = (JSONArray) value;
-                if (valueArr.length() == 0) {
-                    bundle.putStringArray(key, new String[0]);
-                } else {
-                    Object firstNode = valueArr.get(0);
-                    if (firstNode instanceof JSONObject) {
-                        Bundle[] bundles = new Bundle[valueArr.length()];
-                        for (int i = 0; i < valueArr.length(); i++) {
-                            bundles[i] = toBundle(valueArr.getJSONObject(i));
-                        }
-                        bundle.putParcelableArray(key, bundles);
-                    } else if (firstNode instanceof JSONArray) {
-                        // we don't support nested arrays
-                        throw new FacebookException("Nested arrays are not supported.");
-                    } else { // just use the string value
-                        String[] arrValues = new String[valueArr.length()];
-                        for (int i = 0; i < valueArr.length(); i++) {
-                            arrValues[i] = valueArr.get(i).toString();
-                        }
-                        bundle.putStringArray(key, arrValues);
-                    }
-                }
-            } else {
-                bundle.putString(key, value.toString());
-            }
-        }
-        return bundle;
-    }
-
-
-    private AppLinkData() {
-    }
-
-    /**
-     * Returns the target uri for this App Link.
-     * @return target uri
-     */
-    public Uri getTargetUri() {
-        return targetUri;
-    }
-
-    /**
-     * Returns the ref for this App Link.
-     * @return ref
-     */
-    public String getRef() {
-        return ref;
-    }
-
-    /**
-     * Returns the promotion code for this App Link.
-     * @return promotion code
-     */
-    public String getPromotionCode() {
-        return promotionCode;
-    }
-
-    /**
-     * The full set of arguments for this app link. Properties like target uri & ref are typically
-     * picked out of this set of arguments.
-     * @return App link related arguments as a bundle.
-     */
-    public Bundle getArgumentBundle() {
-        return argumentBundle;
-    }
-
-    /**
-     * The referer data associated with the app link. This will contain Facebook specific
-     * information like fb_access_token, fb_expires_in, and fb_ref.
-     *
-     * @return the referer data.
-     */
-    public Bundle getRefererData() {
-        if (argumentBundle != null) {
-            return argumentBundle.getBundle(ARGUMENTS_REFERER_DATA_KEY);
-        }
-        return null;
-    }
-
-    /**
-     * Interface to asynchronously receive AppLinkData after it has been fetched.
-     */
-    public interface CompletionHandler {
-        /**
-         * This method is called when deferred app link data has been fetched. If no app link data
-         * was found, this method is called with null
-         *
-         * @param appLinkData The app link data that was fetched. Null if none was found.
-         */
-        void onDeferredAppLinkDataFetched(AppLinkData appLinkData);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java b/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
deleted file mode 100644
index 807d92f1f..000000000
--- a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
+++ /dev/null
@@ -1,262 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.applinks;
-
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookRequestError;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-
-import bolts.AppLink;
-import bolts.AppLinkResolver;
-import bolts.Continuation;
-import bolts.Task;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-
-/**
- * Provides an implementation for the {@link AppLinkResolver AppLinkResolver} interface that uses
- * the Facebook App Link index to resolve App Links given a URL. It also provides an additional
- * helper method that can resolve multiple App Links in a single call.
- */
-public class FacebookAppLinkResolver implements AppLinkResolver {
-
-    private static final String APP_LINK_KEY = "app_links";
-    private static final String APP_LINK_ANDROID_TARGET_KEY = "android";
-    private static final String APP_LINK_WEB_TARGET_KEY = "web";
-    private static final String APP_LINK_TARGET_PACKAGE_KEY = "package";
-    private static final String APP_LINK_TARGET_CLASS_KEY = "class";
-    private static final String APP_LINK_TARGET_APP_NAME_KEY = "app_name";
-    private static final String APP_LINK_TARGET_URL_KEY = "url";
-    private static final String APP_LINK_TARGET_SHOULD_FALLBACK_KEY = "should_fallback";
-
-    private final HashMap<Uri, AppLink> cachedAppLinks = new HashMap<Uri, AppLink>();
-
-    /**
-     * Asynchronously resolves App Link data for the passed in Uri
-     *
-     * @param uri Uri to be resolved into an App Link
-     * @return A Task that, when successful, will return an AppLink for the passed in Uri. This may
-     * be null if no App Link data was found for this Uri. In the case of general server errors, the
-     * task will be completed with the corresponding error.
-     */
-    public Task<AppLink> getAppLinkFromUrlInBackground(final Uri uri) {
-        ArrayList<Uri> uris = new ArrayList<Uri>();
-        uris.add(uri);
-
-        Task<Map<Uri, AppLink>> resolveTask = getAppLinkFromUrlsInBackground(uris);
-
-        return resolveTask.onSuccess(new Continuation<Map<Uri, AppLink>, AppLink>() {
-            @Override
-            public AppLink then(Task<Map<Uri, AppLink>> resolveUrisTask) throws Exception {
-                return resolveUrisTask.getResult().get(uri);
-            }
-        });
-    }
-
-    /**
-     * Asynchronously resolves App Link data for multiple URLs
-     *
-     * @param uris A list of Uri objects to resolve into App Links
-     * @return A Task that, when successful, will return a Map of Uri->AppLink for each Uri that was
-     * successfully resolved into an App Link. Uris that could not be resolved into App Links will
-     * not be present in the Map. In the case of general server errors, the task will be completed
-     * with the corresponding error.
-     */
-    public Task<Map<Uri, AppLink>> getAppLinkFromUrlsInBackground(List<Uri> uris) {
-        final Map<Uri, AppLink> appLinkResults = new HashMap<Uri, AppLink>();
-        final HashSet<Uri> urisToRequest = new HashSet<Uri>();
-        StringBuilder graphRequestFields = new StringBuilder();
-
-        for (Uri uri : uris) {
-            AppLink appLink = null;
-            synchronized (cachedAppLinks) {
-                appLink = cachedAppLinks.get(uri);
-            }
-
-            if (appLink != null) {
-                appLinkResults.put(uri, appLink);
-            } else {
-                if (!urisToRequest.isEmpty()) {
-                    graphRequestFields.append(',');
-                }
-                graphRequestFields.append(uri.toString());
-                urisToRequest.add(uri);
-            }
-        }
-
-        if (urisToRequest.isEmpty()) {
-            return Task.forResult(appLinkResults);
-        }
-
-        final Task<Map<Uri, AppLink>>.TaskCompletionSource taskCompletionSource = Task.create();
-
-        Bundle appLinkRequestParameters = new Bundle();
-
-        appLinkRequestParameters.putString("ids", graphRequestFields.toString());
-        appLinkRequestParameters.putString(
-                "fields",
-                String.format(
-                        "%s.fields(%s,%s)",
-                        APP_LINK_KEY,
-                        APP_LINK_ANDROID_TARGET_KEY,
-                        APP_LINK_WEB_TARGET_KEY));
-        GraphRequest appLinkRequest = new GraphRequest(
-                // We will use the current access token if we have one else we will use the client
-                // token
-                AccessToken.getCurrentAccessToken(), /* Access Token */
-                "", /* Graph path */
-                appLinkRequestParameters, /* Query parameters */
-                null, /* HttpMethod */
-                new GraphRequest.Callback() { /* Callback */
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        FacebookRequestError error = response.getError();
-                        if (error != null) {
-                            taskCompletionSource.setError(error.getException());
-                            return;
-                        }
-
-                        JSONObject responseJson = response.getJSONObject();
-                        if (responseJson == null) {
-                            taskCompletionSource.setResult(appLinkResults);
-                            return;
-                        }
-
-                        for (Uri uri : urisToRequest) {
-                            String uriString = uri.toString();
-                            if (!responseJson.has(uriString)) {
-                                continue;
-                            }
-
-                            JSONObject urlData = null;
-                            try {
-                                urlData = responseJson.getJSONObject(uri.toString());
-                                JSONObject appLinkData = urlData.getJSONObject(APP_LINK_KEY);
-
-                                JSONArray rawTargets =
-                                        appLinkData.getJSONArray(APP_LINK_ANDROID_TARGET_KEY);
-
-                                int targetsCount = rawTargets.length();
-                                List<AppLink.Target> targets = new ArrayList<AppLink.Target>(targetsCount);
-
-                                for (int i = 0; i < targetsCount; i++) {
-                                    AppLink.Target target =
-                                            getAndroidTargetFromJson(rawTargets.getJSONObject(i));
-                                    if (target != null) {
-                                        targets.add(target);
-                                    }
-                                }
-
-                                Uri webFallbackUrl = getWebFallbackUriFromJson(uri, appLinkData);
-                                AppLink appLink = new AppLink(uri, targets, webFallbackUrl);
-
-                                appLinkResults.put(uri, appLink);
-                                synchronized (cachedAppLinks) {
-                                    cachedAppLinks.put(uri, appLink);
-                                }
-                            } catch (JSONException e) {
-                                // The data for this uri was missing or badly formed.
-                                continue;
-                            }
-                        }
-
-                        taskCompletionSource.setResult(appLinkResults);
-                    }
-                });
-
-        appLinkRequest.executeAsync();
-
-        return taskCompletionSource.getTask();
-    }
-
-    private static AppLink.Target getAndroidTargetFromJson(JSONObject targetJson) {
-        String packageName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_PACKAGE_KEY, null);
-        if (packageName == null) {
-            // Package name is mandatory for each Android target
-            return null;
-        }
-        String className = tryGetStringFromJson(targetJson, APP_LINK_TARGET_CLASS_KEY, null);
-        String appName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_APP_NAME_KEY, null);
-        String targetUrlString = tryGetStringFromJson(targetJson, APP_LINK_TARGET_URL_KEY, null);
-        Uri targetUri = null;
-        if (targetUrlString != null) {
-            targetUri = Uri.parse(targetUrlString);
-        }
-
-        return new AppLink.Target(packageName, className, targetUri, appName);
-    }
-
-    private static Uri getWebFallbackUriFromJson(Uri sourceUrl, JSONObject urlData) {
-        // Try and get a web target. This is best effort. Any failures results in null being
-        // returned.
-        try {
-            JSONObject webTarget = urlData.getJSONObject(APP_LINK_WEB_TARGET_KEY);
-            boolean shouldFallback = tryGetBooleanFromJson(
-                    webTarget, APP_LINK_TARGET_SHOULD_FALLBACK_KEY, true);
-            if (!shouldFallback) {
-                // Don't use a fallback url
-                return null;
-            }
-
-            String webTargetUrlString =
-                    tryGetStringFromJson(webTarget, APP_LINK_TARGET_URL_KEY, null);
-            Uri webUri = null;
-            if (webTargetUrlString != null) {
-                webUri = Uri.parse(webTargetUrlString);
-            }
-
-            // If we weren't able to parse a url from the web target, use the source url
-            return webUri != null ? webUri: sourceUrl;
-        } catch (JSONException e) {
-            // If we were missing a web target, just use the source as the web url
-            return sourceUrl;
-        }
-    }
-
-    private static String tryGetStringFromJson(
-            JSONObject json,
-            String propertyName,
-            String defaultValue) {
-        try {
-            return json.getString(propertyName);
-        } catch(JSONException e) {
-            return defaultValue;
-        }
-    }
-
-    private static boolean tryGetBooleanFromJson(
-            JSONObject json,
-            String propertyName,
-            boolean defaultValue) {
-        try {
-            return json.getBoolean(propertyName);
-        } catch (JSONException e) {
-            return defaultValue;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java b/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
deleted file mode 100644
index 753eec00e..000000000
--- a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class AnalyticsEvents {
-    public static final String EVENT_NATIVE_LOGIN_DIALOG_COMPLETE   = "fb_dialogs_native_login_dialog_complete";
-    public static final String EVENT_NATIVE_LOGIN_DIALOG_START      = "fb_dialogs_native_login_dialog_start";
-    public static final String EVENT_WEB_LOGIN_COMPLETE             = "fb_dialogs_web_login_dialog_complete";
-    public static final String EVENT_FRIEND_PICKER_USAGE            = "fb_friend_picker_usage";
-    public static final String EVENT_PLACE_PICKER_USAGE             = "fb_place_picker_usage";
-    public static final String EVENT_LOGIN_VIEW_USAGE               = "fb_login_view_usage";
-    public static final String EVENT_USER_SETTINGS_USAGE            = "fb_user_settings_vc_usage";
-    public static final String EVENT_NATIVE_DIALOG_START            = "fb_native_dialog_start";
-    public static final String EVENT_NATIVE_DIALOG_COMPLETE         = "fb_native_dialog_complete";
-
-    public static final String PARAMETER_WEB_LOGIN_E2E                  = "fb_web_login_e2e";
-    public static final String PARAMETER_WEB_LOGIN_SWITCHBACK_TIME      = "fb_web_login_switchback_time";
-    public static final String PARAMETER_APP_ID                         = "app_id";
-    public static final String PARAMETER_CALL_ID                        = "call_id";
-    public static final String PARAMETER_ACTION_ID                      = "action_id";
-    public static final String PARAMETER_NATIVE_LOGIN_DIALOG_START_TIME = "fb_native_login_dialog_start_time";
-    public static final String PARAMETER_NATIVE_LOGIN_DIALOG_COMPLETE_TIME =
-            "fb_native_login_dialog_complete_time";
-
-    public static final String PARAMETER_DIALOG_OUTCOME                 = "fb_dialog_outcome";
-    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED = "Completed";
-    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN   = "Unknown";
-    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_CANCELLED = "Cancelled";
-    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_FAILED    = "Failed";
-
-    public static final String EVENT_NATIVE_DIALOG_TYPE_SHARE           = "fb_dialogs_present_share";
-    public static final String EVENT_NATIVE_DIALOG_TYPE_MESSAGE         = "fb_dialogs_present_message";
-    public static final String EVENT_NATIVE_DIALOG_TYPE_OG_SHARE        = "fb_dialogs_present_share_og";
-    public static final String EVENT_NATIVE_DIALOG_TYPE_OG_MESSAGE      = "fb_dialogs_present_message_og";
-    public static final String EVENT_NATIVE_DIALOG_TYPE_PHOTO_SHARE     = "fb_dialogs_present_share_photo";
-    public static final String EVENT_NATIVE_DIALOG_TYPE_PHOTO_MESSAGE   = "fb_dialogs_present_message_photo";
-    public static final String EVENT_NATIVE_DIALOG_TYPE_VIDEO_SHARE     = "fb_dialogs_present_share_video";
-    public static final String EVENT_NATIVE_DIALOG_TYPE_LIKE            = "fb_dialogs_present_like";
-
-    public static final String EVENT_LIKE_VIEW_CANNOT_PRESENT_DIALOG    = "fb_like_control_cannot_present_dialog";
-    public static final String EVENT_LIKE_VIEW_DID_LIKE                 = "fb_like_control_did_like";
-    public static final String EVENT_LIKE_VIEW_DID_PRESENT_DIALOG       = "fb_like_control_did_present_dialog";
-    public static final String EVENT_LIKE_VIEW_DID_PRESENT_FALLBACK     = "fb_like_control_did_present_fallback_dialog";
-    public static final String EVENT_LIKE_VIEW_DID_UNLIKE               = "fb_like_control_did_unlike";
-    public static final String EVENT_LIKE_VIEW_DID_UNDO_QUICKLY         = "fb_like_control_did_undo_quickly";
-    public static final String EVENT_LIKE_VIEW_DIALOG_DID_SUCCEED       = "fb_like_control_dialog_did_succeed";
-    public static final String EVENT_LIKE_VIEW_ERROR                    = "fb_like_control_error";
-
-    public static final String PARAMETER_LIKE_VIEW_STYLE                = "style";
-    public static final String PARAMETER_LIKE_VIEW_AUXILIARY_POSITION   = "auxiliary_position";
-    public static final String PARAMETER_LIKE_VIEW_HORIZONTAL_ALIGNMENT = "horizontal_alignment";
-    public static final String PARAMETER_LIKE_VIEW_OBJECT_ID            = "object_id";
-    public static final String PARAMETER_LIKE_VIEW_OBJECT_TYPE          = "object_type";
-    public static final String PARAMETER_LIKE_VIEW_CURRENT_ACTION       = "current_action";
-    public static final String PARAMETER_LIKE_VIEW_ERROR_JSON           = "error";
-
-    public static final String PARAMETER_SHARE_OUTCOME                  = "fb_share_dialog_outcome";
-    public static final String PARAMETER_SHARE_OUTCOME_SUCCEEDED        = "succeeded";
-    public static final String PARAMETER_SHARE_OUTCOME_CANCELLED        = "cancelled";
-    public static final String PARAMETER_SHARE_OUTCOME_ERROR            = "error";
-    public static final String PARAMETER_SHARE_OUTCOME_UNKNOWN          = "unknown";
-    public static final String PARAMETER_SHARE_ERROR_MESSAGE            = "error_message";
-
-    public static final String PARAMETER_SHARE_DIALOG_SHOW              = "fb_share_dialog_show";
-    public static final String PARAMETER_SHARE_DIALOG_SHOW_WEB          = "web";
-    public static final String PARAMETER_SHARE_DIALOG_SHOW_NATIVE       = "native";
-    public static final String PARAMETER_SHARE_DIALOG_SHOW_AUTOMATIC    = "automatic";
-    public static final String PARAMETER_SHARE_DIALOG_SHOW_UNKNOWN      = "unknown";
-
-    public static final String PARAMETER_SHARE_DIALOG_CONTENT_TYPE      =
-            "fb_share_dialog_content_type";
-    public static final String PARAMETER_SHARE_DIALOG_CONTENT_VIDEO     = "video";
-    public static final String PARAMETER_SHARE_DIALOG_CONTENT_PHOTO     = "photo";
-    public static final String PARAMETER_SHARE_DIALOG_CONTENT_STATUS    = "status";
-    public static final String PARAMETER_SHARE_DIALOG_CONTENT_OPENGRAPH = "open_graph";
-    public static final String PARAMETER_SHARE_DIALOG_CONTENT_UNKNOWN   = "unknown";
-
-    public static final String EVENT_SHARE_RESULT = "fb_share_dialog_result";
-    public static final String EVENT_SHARE_DIALOG_SHOW                  = "fb_share_dialog_show";
-
-    public static final String EVENT_LIKE_BUTTON_CREATE                 = "fb_like_button_create";
-    public static final String EVENT_LOGIN_BUTTON_CREATE                = "fb_login_button_create";
-    public static final String EVENT_SHARE_BUTTON_CREATE                = "fb_share_button_create";
-    public static final String EVENT_SEND_BUTTON_CREATE                 = "fb_send_button_create";
-
-    public static final String EVENT_SHARE_BUTTON_DID_TAP               = "fb_share_button_did_tap";
-    public static final String EVENT_SEND_BUTTON_DID_TAP               = "fb_send_button_did_tap";
-    public static final String EVENT_LIKE_BUTTON_DID_TAP               = "fb_like_button_did_tap";
-    public static final String EVENT_LOGIN_BUTTON_DID_TAP               = "fb_login_button_did_tap";
-
-    public static final String EVENT_DEVICE_SHARE_BUTTON_CREATE = "fb_device_share_button_create";
-    public static final String EVENT_DEVICE_SHARE_BUTTON_DID_TAP= "fb_device_share_button_did_tap";
-}
diff --git a/facebook/src/main/java/com/facebook/internal/AppCall.java b/facebook/src/main/java/com/facebook/internal/AppCall.java
deleted file mode 100644
index e2bb3e8bd..000000000
--- a/facebook/src/main/java/com/facebook/internal/AppCall.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Intent;
-
-import java.util.UUID;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class AppCall {
-    private static AppCall currentPendingCall;
-
-    public static AppCall getCurrentPendingCall() {
-        return currentPendingCall;
-    }
-
-    public static synchronized AppCall finishPendingCall(
-            UUID callId,
-            int requestCode) {
-        AppCall pendingCall = getCurrentPendingCall();
-        if (pendingCall == null ||
-                !pendingCall.getCallId().equals(callId) ||
-                pendingCall.getRequestCode() != requestCode) {
-            return null;
-        }
-
-        setCurrentPendingCall(null);
-
-        return pendingCall;
-    }
-
-    private static synchronized boolean setCurrentPendingCall(
-            AppCall appCall) {
-        AppCall oldAppCall = getCurrentPendingCall();
-        currentPendingCall = appCall;
-
-        return oldAppCall != null;
-    }
-
-    private UUID callId;
-    private Intent requestIntent;
-    private int requestCode;
-
-    /**
-     * Constructor.
-     *
-     * @param requestCode the request code for this app call
-     */
-    public AppCall(int requestCode) {
-        this(requestCode, UUID.randomUUID());
-    }
-
-    /**
-     * Constructor
-     *
-     * @param requestCode the request code for this app call
-     * @param callId the call Id for this app call
-     */
-    public AppCall(int requestCode, UUID callId) {
-        this.callId = callId;
-        this.requestCode = requestCode;
-    }
-
-    /**
-     * Returns the Intent that was used to initiate this call to the
-     * Facebook application.
-     *
-     * @return the Intent
-     */
-    public Intent getRequestIntent() {
-        return requestIntent;
-    }
-
-    /**
-     * Returns the unique ID of this call to the Facebook application.
-     *
-     * @return the unique ID
-     */
-    public UUID getCallId() {
-        return callId;
-    }
-
-    /**
-     * Gets the request code for this call.
-     *
-     * @return the request code that will be passed to
-     * handleActivityResult upon completion.
-     */
-    public int getRequestCode() {
-        return requestCode;
-    }
-
-    public void setRequestCode(int requestCode) {
-        this.requestCode = requestCode;
-    }
-
-    public void setRequestIntent(Intent requestIntent) {
-        this.requestIntent = requestIntent;
-    }
-
-    /**
-     *
-     * @return Returns true if there was another AppCall that was
-     * already pending and is now canceled
-     */
-    public boolean setPending() {
-        return setCurrentPendingCall(this);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/AppEventsLoggerUtility.java b/facebook/src/main/java/com/facebook/internal/AppEventsLoggerUtility.java
deleted file mode 100644
index 8f62c23d5..000000000
--- a/facebook/src/main/java/com/facebook/internal/AppEventsLoggerUtility.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-
-import com.facebook.LoggingBehavior;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class AppEventsLoggerUtility {
-
-    public enum GraphAPIActivityType {
-        MOBILE_INSTALL_EVENT,
-        CUSTOM_APP_EVENTS,
-    }
-
-    private static final Map<GraphAPIActivityType, String> API_ACTIVITY_TYPE_TO_STRING =
-            new HashMap<GraphAPIActivityType, String>() {{
-                put(GraphAPIActivityType.MOBILE_INSTALL_EVENT, "MOBILE_APP_INSTALL");
-                put(GraphAPIActivityType.CUSTOM_APP_EVENTS, "CUSTOM_APP_EVENTS");
-            }};
-
-    public static JSONObject getJSONObjectForGraphAPICall(
-            GraphAPIActivityType activityType,
-            AttributionIdentifiers attributionIdentifiers,
-            String anonymousAppDeviceGUID,
-            boolean limitEventUsage,
-            Context context) throws JSONException {
-        JSONObject publishParams = new JSONObject();
-
-        publishParams.put("event", API_ACTIVITY_TYPE_TO_STRING.get(activityType));
-
-        Utility.setAppEventAttributionParameters(publishParams, attributionIdentifiers,
-                anonymousAppDeviceGUID, limitEventUsage);
-
-        // The code to get all the Extended info is safe but just in case we can wrap the
-        // whole call in its own try/catch block since some of the things it does might
-        // cause unexpected exceptions on rooted/funky devices:
-        try {
-            Utility.setAppEventExtendedDeviceInfoParameters(
-                    publishParams,
-                    context);
-        } catch (Exception e) {
-            // Swallow but log
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "Fetching extended device info parameters failed: '%s'",
-                    e.toString());
-        }
-
-        publishParams.put("application_package_name", context.getPackageName());
-
-        return publishParams;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
deleted file mode 100644
index 0e94e9c05..000000000
--- a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
+++ /dev/null
@@ -1,328 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.ServiceConnection;
-import android.content.pm.PackageManager;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Binder;
-import android.os.IBinder;
-import android.os.IInterface;
-import android.os.Looper;
-import android.os.Parcel;
-import android.os.RemoteException;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.facebook.FacebookException;
-
-import java.lang.reflect.Method;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingDeque;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class AttributionIdentifiers {
-    private static final String TAG = AttributionIdentifiers.class.getCanonicalName();
-    private static final String ATTRIBUTION_ID_CONTENT_PROVIDER =
-            "com.facebook.katana.provider.AttributionIdProvider";
-    private static final String ATTRIBUTION_ID_CONTENT_PROVIDER_WAKIZASHI =
-            "com.facebook.wakizashi.provider.AttributionIdProvider";
-    private static final String ATTRIBUTION_ID_COLUMN_NAME = "aid";
-    private static final String ANDROID_ID_COLUMN_NAME = "androidid";
-    private static final String LIMIT_TRACKING_COLUMN_NAME = "limit_tracking";
-
-    // com.google.android.gms.common.ConnectionResult.SUCCESS
-    private static final int CONNECTION_RESULT_SUCCESS = 0;
-
-    private static final long IDENTIFIER_REFRESH_INTERVAL_MILLIS = 3600 * 1000;
-
-    private String attributionId;
-    private String androidAdvertiserId;
-    private String androidInstallerPackage;
-    private boolean limitTracking;
-    private long fetchTime;
-
-    private static AttributionIdentifiers recentlyFetchedIdentifiers;
-
-    private static AttributionIdentifiers getAndroidId(Context context) {
-        AttributionIdentifiers identifiers = getAndroidIdViaReflection(context);
-        if (identifiers == null) {
-            identifiers = getAndroidIdViaService(context);
-            if (identifiers == null) {
-                identifiers = new AttributionIdentifiers();
-            }
-        }
-        return identifiers;
-    }
-
-    private static AttributionIdentifiers getAndroidIdViaReflection(Context context) {
-        try {
-            // We can't call getAdvertisingIdInfo on the main thread or the app will potentially
-            // freeze, if this is the case throw:
-            if (Looper.myLooper() == Looper.getMainLooper()) {
-              throw new FacebookException("getAndroidId cannot be called on the main thread.");
-            }
-            Method isGooglePlayServicesAvailable = Utility.getMethodQuietly(
-                    "com.google.android.gms.common.GooglePlayServicesUtil",
-                    "isGooglePlayServicesAvailable",
-                    Context.class
-            );
-
-            if (isGooglePlayServicesAvailable == null) {
-                return null;
-            }
-
-            Object connectionResult = Utility.invokeMethodQuietly(
-                    null, isGooglePlayServicesAvailable, context);
-            if (!(connectionResult instanceof Integer)
-                    || (Integer) connectionResult != CONNECTION_RESULT_SUCCESS) {
-                return null;
-            }
-
-            Method getAdvertisingIdInfo = Utility.getMethodQuietly(
-                    "com.google.android.gms.ads.identifier.AdvertisingIdClient",
-                    "getAdvertisingIdInfo",
-                    Context.class
-            );
-            if (getAdvertisingIdInfo == null) {
-                return null;
-            }
-            Object advertisingInfo = Utility.invokeMethodQuietly(
-                    null, getAdvertisingIdInfo, context);
-            if (advertisingInfo == null) {
-                return null;
-            }
-
-            Method getId = Utility.getMethodQuietly(advertisingInfo.getClass(), "getId");
-            Method isLimitAdTrackingEnabled = Utility.getMethodQuietly(
-                    advertisingInfo.getClass(),
-                    "isLimitAdTrackingEnabled");
-            if (getId == null || isLimitAdTrackingEnabled == null) {
-                return null;
-            }
-
-            AttributionIdentifiers identifiers = new AttributionIdentifiers();
-            identifiers.androidAdvertiserId =
-                    (String) Utility.invokeMethodQuietly(advertisingInfo, getId);
-            identifiers.limitTracking = (Boolean) Utility.invokeMethodQuietly(
-                    advertisingInfo,
-                    isLimitAdTrackingEnabled);
-            return identifiers;
-        } catch (Exception e) {
-            Utility.logd("android_id", e);
-        }
-        return null;
-    }
-
-    private static AttributionIdentifiers getAndroidIdViaService(Context context) {
-        GoogleAdServiceConnection connection = new GoogleAdServiceConnection();
-        Intent intent = new Intent("com.google.android.gms.ads.identifier.service.START");
-        intent.setPackage("com.google.android.gms");
-        if(context.bindService(intent, connection, Context.BIND_AUTO_CREATE)) {
-            try {
-                GoogleAdInfo adInfo = new GoogleAdInfo(connection.getBinder());
-                AttributionIdentifiers identifiers = new AttributionIdentifiers();
-                identifiers.androidAdvertiserId = adInfo.getAdvertiserId();
-                identifiers.limitTracking = adInfo.isTrackingLimited();
-                return identifiers;
-            } catch (Exception exception) {
-                Utility.logd("android_id", exception);
-            } finally {
-                context.unbindService(connection);
-            }
-        }
-        return null;
-    }
-
-    public static AttributionIdentifiers getAttributionIdentifiers(Context context) {
-        if (recentlyFetchedIdentifiers != null &&
-            System.currentTimeMillis() - recentlyFetchedIdentifiers.fetchTime <
-                    IDENTIFIER_REFRESH_INTERVAL_MILLIS) {
-            return recentlyFetchedIdentifiers;
-        }
-
-        AttributionIdentifiers identifiers = getAndroidId(context);
-        Cursor c = null;
-        try {
-            String [] projection = {
-                    ATTRIBUTION_ID_COLUMN_NAME,
-                    ANDROID_ID_COLUMN_NAME,
-                    LIMIT_TRACKING_COLUMN_NAME};
-            Uri providerUri = null;
-            if (context.getPackageManager().resolveContentProvider(
-                    ATTRIBUTION_ID_CONTENT_PROVIDER, 0) != null) {
-                providerUri = Uri.parse("content://" + ATTRIBUTION_ID_CONTENT_PROVIDER);
-            } else if (context.getPackageManager().resolveContentProvider(
-                    ATTRIBUTION_ID_CONTENT_PROVIDER_WAKIZASHI, 0) != null) {
-                providerUri = Uri.parse("content://" + ATTRIBUTION_ID_CONTENT_PROVIDER_WAKIZASHI);
-            }
-            String installerPackageName = getInstallerPackageName(context);
-            if (installerPackageName != null) {
-                identifiers.androidInstallerPackage = installerPackageName;
-            }
-            if (providerUri == null) {
-                return cacheAndReturnIdentifiers(identifiers);
-            }
-            c = context.getContentResolver().query(providerUri, projection, null, null, null);
-            if (c == null || !c.moveToFirst()) {
-                return cacheAndReturnIdentifiers(identifiers);
-            }
-            int attributionColumnIndex = c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME);
-            int androidIdColumnIndex = c.getColumnIndex(ANDROID_ID_COLUMN_NAME);
-            int limitTrackingColumnIndex = c.getColumnIndex(LIMIT_TRACKING_COLUMN_NAME);
-
-            identifiers.attributionId = c.getString(attributionColumnIndex);
-
-            // if we failed to call Google's APIs directly (due to improper integration by the
-            // client), it may be possible for the local facebook application to relay it to us.
-            if (androidIdColumnIndex > 0 && limitTrackingColumnIndex > 0 &&
-                    identifiers.getAndroidAdvertiserId() == null) {
-                identifiers.androidAdvertiserId = c.getString(androidIdColumnIndex);
-                identifiers.limitTracking =
-                        Boolean.parseBoolean(c.getString(limitTrackingColumnIndex));
-            }
-        } catch (Exception e) {
-            Log.d(TAG, "Caught unexpected exception in getAttributionId(): " + e.toString());
-            return null;
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-        }
-        return cacheAndReturnIdentifiers(identifiers);
-    }
-
-    private static AttributionIdentifiers cacheAndReturnIdentifiers(
-            AttributionIdentifiers identifiers) {
-        identifiers.fetchTime = System.currentTimeMillis();
-        recentlyFetchedIdentifiers = identifiers;
-        return identifiers;
-    }
-
-    public String getAttributionId() {
-        return attributionId;
-    }
-
-    public String getAndroidAdvertiserId() {
-        return androidAdvertiserId;
-    }
-
-    public String getAndroidInstallerPackage() {
-        return androidInstallerPackage;
-    }
-
-    public boolean isTrackingLimited() {
-        return limitTracking;
-    }
-
-    @Nullable
-    private static String getInstallerPackageName(Context context) {
-        PackageManager packageManager = context.getPackageManager();
-        if (packageManager != null) {
-            return packageManager.getInstallerPackageName(context.getPackageName());
-        }
-        return null;
-    }
-
-    private static final class GoogleAdServiceConnection implements ServiceConnection {
-        private AtomicBoolean consumed = new AtomicBoolean(false);
-        private final BlockingQueue<IBinder> queue = new LinkedBlockingDeque<>();
-
-        @Override
-        public void onServiceConnected(ComponentName name, IBinder service) {
-            try {
-                queue.put(service);
-            } catch (InterruptedException e) {
-            }
-        }
-
-        @Override
-        public void onServiceDisconnected(ComponentName name) {
-        }
-
-        public IBinder getBinder() throws InterruptedException {
-            if (consumed.compareAndSet(true, true)) {
-                throw new IllegalStateException("Binder already consumed");
-            }
-            return queue.take();
-        }
-    }
-
-    private static final class GoogleAdInfo implements IInterface {
-        private static final int FIRST_TRANSACTION_CODE = Binder.FIRST_CALL_TRANSACTION;
-        private static final int SECOND_TRANSACTION_CODE = FIRST_TRANSACTION_CODE + 1;
-
-        private IBinder binder;
-
-        GoogleAdInfo(IBinder binder) {
-            this.binder = binder;
-        }
-
-        @Override
-        public IBinder asBinder() {
-            return binder;
-        }
-
-        public String getAdvertiserId() throws RemoteException {
-            Parcel data = Parcel.obtain();
-            Parcel reply = Parcel.obtain();
-            String id;
-            try {
-                data.writeInterfaceToken(
-                        "com.google.android.gms.ads.identifier.internal.IAdvertisingIdService");
-                binder.transact(FIRST_TRANSACTION_CODE, data, reply, 0);
-                reply.readException();
-                id = reply.readString();
-            } finally {
-                reply.recycle();
-                data.recycle();
-            }
-            return id;
-        }
-
-        public boolean isTrackingLimited() throws RemoteException {
-            Parcel data = Parcel.obtain();
-            Parcel reply = Parcel.obtain();
-            boolean limitAdTracking;
-            try {
-                data.writeInterfaceToken(
-                        "com.google.android.gms.ads.identifier.internal.IAdvertisingIdService");
-                data.writeInt(1);
-                binder.transact(SECOND_TRANSACTION_CODE, data, reply, 0);
-                reply.readException();
-                limitAdTracking = 0 != reply.readInt();
-            } finally {
-                reply.recycle();
-                data.recycle();
-            }
-            return limitAdTracking;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/BoltsMeasurementEventListener.java b/facebook/src/main/java/com/facebook/internal/BoltsMeasurementEventListener.java
deleted file mode 100644
index 681a94838..000000000
--- a/facebook/src/main/java/com/facebook/internal/BoltsMeasurementEventListener.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.facebook.appevents.AppEventsLogger;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class BoltsMeasurementEventListener extends BroadcastReceiver {
-    private static BoltsMeasurementEventListener _instance;
-
-    private final static String MEASUREMENT_EVENT_NOTIFICATION_NAME =
-            "com.parse.bolts.measurement_event";
-    private final static String MEASUREMENT_EVENT_NAME_KEY = "event_name";
-    private final static String MEASUREMENT_EVENT_ARGS_KEY = "event_args";
-    private final static String BOLTS_MEASUREMENT_EVENT_PREFIX = "bf_";
-
-    private Context applicationContext;
-
-    private BoltsMeasurementEventListener(Context context) {
-        applicationContext = context.getApplicationContext();
-    }
-
-    private void open() {
-      LocalBroadcastManager broadcastManager =
-              LocalBroadcastManager.getInstance(applicationContext);
-      broadcastManager.registerReceiver(
-              this, new IntentFilter(MEASUREMENT_EVENT_NOTIFICATION_NAME));
-    }
-
-    private void close() {
-      LocalBroadcastManager broadcastManager =
-              LocalBroadcastManager.getInstance(applicationContext);
-      broadcastManager.unregisterReceiver(this);
-    }
-
-    public static BoltsMeasurementEventListener getInstance(Context context) {
-        if (_instance != null) {
-            return _instance;
-        }
-        _instance = new BoltsMeasurementEventListener(context);
-        _instance.open();
-        return _instance;
-    }
-
-    protected void finalize() throws Throwable {
-        try {
-            close();
-        } finally {
-            super.finalize();
-        }
-    }
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context);
-        String eventName = BOLTS_MEASUREMENT_EVENT_PREFIX +
-                intent.getStringExtra(MEASUREMENT_EVENT_NAME_KEY);
-        Bundle eventArgs = intent.getBundleExtra(MEASUREMENT_EVENT_ARGS_KEY);
-        Bundle logData = new Bundle();
-        for(String key : eventArgs.keySet()) {
-           String safeKey = key.replaceAll(
-                   "[^0-9a-zA-Z _-]", "-").replaceAll("^[ -]*", "").replaceAll("[ -]*$", "");
-           logData.putString(safeKey, (String)eventArgs.get(key));
-        }
-        appEventsLogger.logEvent(eventName, logData);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/BundleJSONConverter.java b/facebook/src/main/java/com/facebook/internal/BundleJSONConverter.java
deleted file mode 100644
index 18a2bf5f1..000000000
--- a/facebook/src/main/java/com/facebook/internal/BundleJSONConverter.java
+++ /dev/null
@@ -1,201 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.os.Bundle;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- *
- * A helper class that can round trip between JSON and Bundle objects that contains the types:
- *   Boolean, Integer, Long, Double, String
- * If other types are found, an IllegalArgumentException is thrown.
- */
-public class BundleJSONConverter {
-    private static final Map<Class<?>, Setter> SETTERS = new HashMap<Class<?>, Setter>();
-
-    static {
-        SETTERS.put(Boolean.class, new Setter() {
-            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
-                bundle.putBoolean(key, (Boolean) value);
-            }
-
-            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
-                json.put(key, value);
-            }
-        });
-        SETTERS.put(Integer.class, new Setter() {
-            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
-                bundle.putInt(key, (Integer) value);
-            }
-
-            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
-                json.put(key, value);
-            }
-        });
-        SETTERS.put(Long.class, new Setter() {
-            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
-                bundle.putLong(key, (Long) value);
-            }
-
-            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
-                json.put(key, value);
-            }
-        });
-        SETTERS.put(Double.class, new Setter() {
-            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
-                bundle.putDouble(key, (Double) value);
-            }
-
-            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
-                json.put(key, value);
-            }
-        });
-        SETTERS.put(String.class, new Setter() {
-            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
-                bundle.putString(key, (String) value);
-            }
-
-            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
-                json.put(key, value);
-            }
-        });
-        SETTERS.put(String[].class, new Setter() {
-            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
-                throw new IllegalArgumentException("Unexpected type from JSON");
-            }
-
-            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
-                JSONArray jsonArray = new JSONArray();
-                for (String stringValue : (String[])value) {
-                    jsonArray.put(stringValue);
-                }
-                json.put(key, jsonArray);
-            }
-        });
-
-        SETTERS.put(JSONArray.class, new Setter() {
-            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
-                JSONArray jsonArray = (JSONArray)value;
-                ArrayList<String> stringArrayList = new ArrayList<String>();
-                // Empty list, can't even figure out the type, assume an ArrayList<String>
-                if (jsonArray.length() == 0) {
-                    bundle.putStringArrayList(key, stringArrayList);
-                    return;
-                }
-
-                // Only strings are supported for now
-                for (int i = 0; i < jsonArray.length(); i++) {
-                    Object current = jsonArray.get(i);
-                    if (current instanceof String) {
-                        stringArrayList.add((String)current);
-                    } else {
-                        throw new IllegalArgumentException("Unexpected type in an array: " + current.getClass());
-                    }
-                }
-                bundle.putStringArrayList(key, stringArrayList);
-            }
-
-            @Override
-            public void setOnJSON(JSONObject json, String key, Object value) throws JSONException {
-                throw new IllegalArgumentException("JSONArray's are not supported in bundles.");
-            }
-        });
-    }
-
-    public interface Setter {
-        public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException;
-        public void setOnJSON(JSONObject json, String key, Object value) throws JSONException;
-    }
-
-    public static JSONObject convertToJSON(Bundle bundle) throws JSONException {
-        JSONObject json = new JSONObject();
-
-        for(String key : bundle.keySet()) {
-            Object value = bundle.get(key);
-            if (value == null) {
-                // Null is not supported.
-                continue;
-            }
-
-            // Special case List<String> as getClass would not work, since List is an interface
-            if (value instanceof List<?>) {
-                JSONArray jsonArray = new JSONArray();
-                @SuppressWarnings("unchecked")
-                List<String> listValue = (List<String>)value;
-                for (String stringValue : listValue) {
-                    jsonArray.put(stringValue);
-                }
-                json.put(key, jsonArray);
-                continue;
-            }
-
-            // Special case Bundle as it's one way, on the return it will be JSONObject
-            if (value instanceof Bundle) {
-                json.put(key, convertToJSON((Bundle)value));
-                continue;
-            }
-
-            Setter setter = SETTERS.get(value.getClass());
-            if (setter == null) {
-                throw new IllegalArgumentException("Unsupported type: " + value.getClass());
-            }
-            setter.setOnJSON(json, key, value);
-        }
-
-        return json;
-    }
-
-    public static Bundle convertToBundle(JSONObject jsonObject) throws JSONException {
-        Bundle bundle = new Bundle();
-        @SuppressWarnings("unchecked")
-        Iterator<String> jsonIterator = jsonObject.keys();
-        while (jsonIterator.hasNext()) {
-            String key = jsonIterator.next();
-            Object value = jsonObject.get(key);
-            if (value == null || value == JSONObject.NULL) {
-                // Null is not supported.
-                continue;
-            }
-
-            // Special case JSONObject as it's one way, on the return it would be Bundle.
-            if (value instanceof JSONObject) {
-                bundle.putBundle(key, convertToBundle((JSONObject)value));
-                continue;
-            }
-
-            Setter setter = SETTERS.get(value.getClass());
-            if (setter == null) {
-                throw new IllegalArgumentException("Unsupported type: " + value.getClass());
-            }
-            setter.setOnBundle(bundle, key, value);
-        }
-
-        return bundle;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java b/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
deleted file mode 100644
index d7fdbd5e6..000000000
--- a/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Intent;
-
-import com.facebook.CallbackManager;
-import com.facebook.FacebookSdk;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public final class CallbackManagerImpl implements CallbackManager {
-    private static Map<Integer, Callback> staticCallbacks = new HashMap<>();
-
-    /**
-     * If there is no explicit callback, but we still need to call the Facebook component,
-     * because it's going to update some state, e.g., login, like. Then we should register a
-     * static callback that can still handle the response.
-     * @param requestCode The request code.
-     * @param callback The callback for the feature.
-     */
-    public synchronized static void registerStaticCallback(
-            int requestCode,
-            Callback callback) {
-        Validate.notNull(callback, "callback");
-        if (staticCallbacks.containsKey(requestCode)) {
-            return;
-        }
-        staticCallbacks.put(requestCode, callback);
-    }
-
-    private static synchronized Callback getStaticCallback(Integer requestCode) {
-        return staticCallbacks.get(requestCode);
-    }
-
-    private static boolean runStaticCallback(
-            int requestCode,
-            int resultCode,
-            Intent data) {
-        Callback callback = getStaticCallback(requestCode);
-        if (callback != null) {
-            return callback.onActivityResult(resultCode, data);
-        }
-        return false;
-    }
-
-    private Map<Integer, Callback> callbacks = new HashMap<>();
-
-    public void registerCallback(int requestCode, Callback callback) {
-        Validate.notNull(callback, "callback");
-        callbacks.put(requestCode, callback);
-    }
-
-    @Override
-    public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        Callback callback = callbacks.get(requestCode);
-        if (callback != null) {
-            return callback.onActivityResult(resultCode, data);
-        }
-        return runStaticCallback(requestCode, resultCode, data);
-    }
-
-    public interface Callback {
-        public boolean onActivityResult(int resultCode, Intent data);
-    }
-
-    public enum RequestCodeOffset {
-        Login(0),
-        Share(1),
-        Message(2),
-        Like(3),
-        GameRequest(4),
-        AppGroupCreate(5),
-        AppGroupJoin(6),
-        AppInvite(7),
-        DeviceShare(8),
-        ;
-
-        private final int offset;
-
-        RequestCodeOffset(int offset) {
-            this.offset = offset;
-        }
-
-        public int toRequestCode() {
-            return FacebookSdk.getCallbackRequestCodeOffset() + offset;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/CollectionMapper.java b/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
deleted file mode 100644
index 6ab0f110a..000000000
--- a/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookException;
-
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class CollectionMapper {
-    public static <T> void iterate(final Collection<T> collection,
-                                   final ValueMapper valueMapper,
-                                   final OnMapperCompleteListener onMapperCompleteListener) {
-        final Mutable<Boolean> didReturnError = new Mutable<Boolean>(false);
-        final Mutable<Integer> pendingJobCount = new Mutable<Integer>(1);
-        final OnMapperCompleteListener jobCompleteListener = new OnMapperCompleteListener() {
-            @Override
-            public void onComplete() {
-                if (didReturnError.value) {
-                    return;
-                }
-                if (--pendingJobCount.value == 0) {
-                    onMapperCompleteListener.onComplete();
-                }
-            }
-
-            @Override
-            public void onError(FacebookException exception) {
-                if (didReturnError.value) {
-                    return;
-                }
-                didReturnError.value = true;
-                onMapperCompleteListener.onError(exception);
-            }
-        };
-
-        Iterator<T> keyIterator = collection.keyIterator();
-        List<T> keys = new LinkedList<>();
-        while (keyIterator.hasNext()) {
-            keys.add(keyIterator.next());
-        }
-
-        for (final T key : keys) {
-            final Object value = collection.get(key);
-            final OnMapValueCompleteListener onMapValueCompleteListener =
-                    new OnMapValueCompleteListener() {
-                        @Override
-                        public void onComplete(Object mappedValue) {
-                            collection.set(key, mappedValue, jobCompleteListener);
-                            jobCompleteListener.onComplete();
-                        }
-
-                        @Override
-                        public void onError(FacebookException exception) {
-                            jobCompleteListener.onError(exception);
-                        }
-                    };
-            pendingJobCount.value++;
-            valueMapper.mapValue(value, onMapValueCompleteListener);
-        }
-        jobCompleteListener.onComplete();
-    }
-
-    public static interface OnErrorListener {
-        public void onError(FacebookException exception);
-    }
-
-    public static interface OnMapperCompleteListener extends OnErrorListener {
-        public void onComplete();
-    }
-
-    public static interface OnMapValueCompleteListener extends OnErrorListener {
-        public void onComplete(Object mappedValue);
-    }
-
-    public static interface ValueMapper {
-        public void mapValue(Object value, OnMapValueCompleteListener onMapValueCompleteListener);
-    }
-
-    public static interface Collection<T> {
-        public Iterator<T> keyIterator();
-        public Object get(T key);
-        public void set(T key, Object value, OnErrorListener onErrorListener);
-    }
-
-    private CollectionMapper() {}
-}
diff --git a/facebook/src/main/java/com/facebook/internal/CustomTab.java b/facebook/src/main/java/com/facebook/internal/CustomTab.java
deleted file mode 100644
index 098975749..000000000
--- a/facebook/src/main/java/com/facebook/internal/CustomTab.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-
-package com.facebook.internal;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.customtabs.CustomTabsIntent;
-
-public class CustomTab {
-
-    private Uri uri;
-
-    public CustomTab(String action, Bundle parameters) {
-        if (parameters == null) {
-            parameters = new Bundle();
-        }
-        uri = Utility.buildUri(
-                ServerProtocol.getDialogAuthority(),
-                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
-                parameters);
-    }
-
-    public void openCustomTab(Activity activity, String packageName) {
-        CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();
-        customTabsIntent.intent.setPackage(packageName);
-        customTabsIntent.intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
-        customTabsIntent.launchUrl(activity, uri);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/DialogFeature.java b/facebook/src/main/java/com/facebook/internal/DialogFeature.java
deleted file mode 100644
index cac1b4c1c..000000000
--- a/facebook/src/main/java/com/facebook/internal/DialogFeature.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public interface DialogFeature {
-    /**
-     * This method is for internal use only.
-     */
-    String getAction();
-
-    /**
-     * This method is for internal use only.
-     */
-    int getMinVersion();
-
-    /**
-     * This method is for internal use only.
-     *
-     * For all Enums that implement this interface, the name() method is already present. It returns
-     * the String representation of the Enum value, verbatim.
-     *
-     */
-    String name();
-}
diff --git a/facebook/src/main/java/com/facebook/internal/DialogPresenter.java b/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
deleted file mode 100644
index d2f934bd3..000000000
--- a/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
+++ /dev/null
@@ -1,272 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class DialogPresenter {
-
-    public static void setupAppCallForCannotShowError(AppCall appCall) {
-        FacebookException e = new FacebookException(
-                "Unable to show the provided content via the web or the installed version of the " +
-                        "Facebook app. Some dialogs are only supported starting API 14.");
-        setupAppCallForValidationError(appCall, e);
-    }
-
-    public static void setupAppCallForValidationError(
-            AppCall appCall, FacebookException validationError) {
-        setupAppCallForErrorResult(appCall, validationError);
-    }
-
-    public interface ParameterProvider {
-        Bundle getParameters();
-        Bundle getLegacyParameters();
-    }
-
-    public static void present(AppCall appCall, Activity activity) {
-        activity.startActivityForResult(appCall.getRequestIntent(), appCall.getRequestCode());
-
-        appCall.setPending();
-    }
-
-    public static void present(AppCall appCall, FragmentWrapper fragmentWrapper) {
-        fragmentWrapper.startActivityForResult(
-                appCall.getRequestIntent(),
-                appCall.getRequestCode());
-
-        appCall.setPending();
-    }
-
-    public static boolean canPresentNativeDialogWithFeature(
-            DialogFeature feature) {
-        return getProtocolVersionForNativeDialog(feature)
-                != NativeProtocol.NO_PROTOCOL_AVAILABLE;
-    }
-
-    public static boolean canPresentWebFallbackDialogWithFeature(DialogFeature feature) {
-        return getDialogWebFallbackUri(feature) != null;
-    }
-
-    public static void setupAppCallForErrorResult(AppCall appCall, FacebookException exception) {
-        if (exception == null) {
-            return;
-        }
-        Validate.hasFacebookActivity(FacebookSdk.getApplicationContext());
-
-        Intent errorResultIntent = new Intent();
-        errorResultIntent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
-        errorResultIntent.setAction(FacebookActivity.PASS_THROUGH_CANCEL_ACTION);
-
-        NativeProtocol.setupProtocolRequestIntent(
-                errorResultIntent,
-                appCall.getCallId().toString(),
-                null,
-                NativeProtocol.getLatestKnownVersion(),
-                NativeProtocol.createBundleForException(exception));
-
-        appCall.setRequestIntent(errorResultIntent);
-    }
-
-    public static void setupAppCallForWebDialog(
-            AppCall appCall,
-            String actionName,
-            Bundle parameters) {
-        Validate.hasFacebookActivity(FacebookSdk.getApplicationContext());
-        Validate.hasInternetPermissions(FacebookSdk.getApplicationContext());
-
-        Bundle intentParameters = new Bundle();
-        intentParameters.putString(NativeProtocol.WEB_DIALOG_ACTION, actionName);
-        intentParameters.putBundle(NativeProtocol.WEB_DIALOG_PARAMS, parameters);
-
-        Intent webDialogIntent = new Intent();
-        NativeProtocol.setupProtocolRequestIntent(
-                webDialogIntent,
-                appCall.getCallId().toString(),
-                actionName,
-                NativeProtocol.getLatestKnownVersion(),
-                intentParameters);
-        webDialogIntent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
-        webDialogIntent.setAction(FacebookDialogFragment.TAG);
-
-        appCall.setRequestIntent(webDialogIntent);
-    }
-
-    public static void setupAppCallForWebFallbackDialog(
-            AppCall appCall,
-            Bundle parameters,
-            DialogFeature feature) {
-        Validate.hasFacebookActivity(FacebookSdk.getApplicationContext());
-        Validate.hasInternetPermissions(FacebookSdk.getApplicationContext());
-
-        String featureName = feature.name();
-        Uri fallbackUrl = getDialogWebFallbackUri(feature);
-        if (fallbackUrl == null) {
-            throw new FacebookException(
-                    "Unable to fetch the Url for the DialogFeature : '" + featureName + "'");
-        }
-
-        // Since we're talking to the server here, let's use the latest version we know about.
-        // We know we are going to be communicating over a bucketed protocol.
-        int protocolVersion = NativeProtocol.getLatestKnownVersion();
-        Bundle webParams = ServerProtocol.getQueryParamsForPlatformActivityIntentWebFallback(
-                appCall.getCallId().toString(),
-                protocolVersion,
-                parameters);
-        if (webParams == null) {
-            throw new FacebookException("Unable to fetch the app's key-hash");
-        }
-
-        // Now form the Uri
-        if (fallbackUrl.isRelative()) {
-            fallbackUrl = Utility.buildUri(
-                    ServerProtocol.getDialogAuthority(),
-                    fallbackUrl.toString(),
-                    webParams);
-        } else {
-            fallbackUrl = Utility.buildUri(
-                    fallbackUrl.getAuthority(),
-                    fallbackUrl.getPath(),
-                    webParams);
-        }
-
-        Bundle intentParameters = new Bundle();
-        intentParameters.putString(NativeProtocol.WEB_DIALOG_URL, fallbackUrl.toString());
-        intentParameters.putBoolean(NativeProtocol.WEB_DIALOG_IS_FALLBACK, true);
-
-        Intent webDialogIntent = new Intent();
-        NativeProtocol.setupProtocolRequestIntent(
-                webDialogIntent,
-                appCall.getCallId().toString(),
-                feature.getAction(),
-                NativeProtocol.getLatestKnownVersion(),
-                intentParameters);
-        webDialogIntent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
-        webDialogIntent.setAction(FacebookDialogFragment.TAG);
-
-        appCall.setRequestIntent(webDialogIntent);
-    }
-
-    public static void setupAppCallForNativeDialog(
-            AppCall appCall,
-            ParameterProvider parameterProvider,
-            DialogFeature feature) {
-        Context context = FacebookSdk.getApplicationContext();
-        String action = feature.getAction();
-        int protocolVersion = getProtocolVersionForNativeDialog(feature);
-        if (protocolVersion == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
-            throw new FacebookException(
-                    "Cannot present this dialog. This likely means that the " +
-                            "Facebook app is not installed.");
-        }
-
-        Bundle params;
-        if (NativeProtocol.isVersionCompatibleWithBucketedIntent(protocolVersion)) {
-            // Facebook app supports the new bucketed protocol
-            params = parameterProvider.getParameters();
-        } else {
-            // Facebook app only supports the old flat protocol
-            params = parameterProvider.getLegacyParameters();
-        }
-        if (params == null) {
-            params = new Bundle();
-        }
-
-        Intent intent = NativeProtocol.createPlatformActivityIntent(
-                context,
-                appCall.getCallId().toString(),
-                action,
-                protocolVersion,
-                params);
-        if (intent == null) {
-            throw new FacebookException(
-                    "Unable to create Intent; this likely means the" +
-                            "Facebook app is not installed.");
-        }
-
-        appCall.setRequestIntent(intent);
-    }
-
-    private static Uri getDialogWebFallbackUri(DialogFeature feature) {
-        String featureName = feature.name();
-        String action = feature.getAction();
-        String applicationId = FacebookSdk.getApplicationId();
-
-        Utility.DialogFeatureConfig config =
-                Utility.getDialogFeatureConfig(applicationId, action, featureName);
-        Uri fallbackUrl = null;
-        if (config != null) {
-            fallbackUrl = config.getFallbackUrl();
-        }
-
-        return fallbackUrl;
-    }
-
-    public static int getProtocolVersionForNativeDialog(
-            DialogFeature feature) {
-        String applicationId = FacebookSdk.getApplicationId();
-        String action = feature.getAction();
-        int[] featureVersionSpec = getVersionSpecForFeature(applicationId, action, feature);
-
-        return NativeProtocol.getLatestAvailableProtocolVersionForAction(
-                action,
-                featureVersionSpec);
-    }
-
-    private static int[] getVersionSpecForFeature(
-            String applicationId,
-            String actionName,
-            DialogFeature feature) {
-        // Return the value from DialogFeatureConfig if available. Otherwise, just
-        // default to the min-version
-        Utility.DialogFeatureConfig config =
-                Utility.getDialogFeatureConfig(applicationId, actionName, feature.name());
-        if (config != null) {
-            return config.getVersionSpec();
-        } else {
-            return new int[]{feature.getMinVersion()};
-        }
-    }
-
-    public static void logDialogActivity(
-            Context context,
-            String eventName,
-            String outcome) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        Bundle parameters = new Bundle();
-        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
-        logger.logSdkEvent(eventName, null, parameters);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java b/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
deleted file mode 100644
index 3eabaf47c..000000000
--- a/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
+++ /dev/null
@@ -1,266 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.util.Log;
-
-import com.facebook.CallbackManager;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookDialog;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.LoggingBehavior;
-
-import java.util.List;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public abstract class FacebookDialogBase<CONTENT, RESULT>
-        implements FacebookDialog<CONTENT, RESULT> {
-
-    private static final String TAG = "FacebookDialog";
-
-    protected static final Object BASE_AUTOMATIC_MODE = new Object();
-
-    private final Activity activity;
-    private final FragmentWrapper fragmentWrapper;
-    private List<ModeHandler> modeHandlers;
-    private int requestCode;
-
-    protected FacebookDialogBase(final Activity activity, int requestCode) {
-        Validate.notNull(activity, "activity");
-        this.activity = activity;
-        this.fragmentWrapper = null;
-        this.requestCode = requestCode;
-    }
-
-    protected FacebookDialogBase(final FragmentWrapper fragmentWrapper, int requestCode) {
-        Validate.notNull(fragmentWrapper, "fragmentWrapper");
-        this.fragmentWrapper = fragmentWrapper;
-        this.activity = null;
-        this.requestCode = requestCode;
-
-        if (fragmentWrapper.getActivity() == null) {
-            throw new IllegalArgumentException(
-                    "Cannot use a fragment that is not attached to an activity");
-        }
-    }
-
-    @Override
-    public final void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<RESULT> callback) {
-        if (!(callbackManager instanceof CallbackManagerImpl)) {
-            throw new FacebookException("Unexpected CallbackManager, " +
-                    "please use the provided Factory.");
-        }
-        registerCallbackImpl((CallbackManagerImpl) callbackManager, callback);
-    }
-
-    @Override
-    public final void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<RESULT> callback,
-            final int requestCode) {
-        setRequestCode(requestCode);
-        registerCallback(callbackManager, callback);
-    }
-
-    protected abstract void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<RESULT> callback);
-
-    /**
-     * Set the request code for the startActivityForResult call. The requestCode should be
-     * outside of the range of those reserved for the Facebook SDK
-     * {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
-     *
-     * @param requestCode the request code to use.
-     */
-    protected void setRequestCode(int requestCode) {
-        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
-            throw new IllegalArgumentException("Request code " + requestCode +
-                    " cannot be within the range reserved by the Facebook SDK.");
-        }
-        this.requestCode = requestCode;
-    }
-
-    /**
-     * Returns the request code used for this dialog.
-     *
-     * @return the request code.
-     */
-    public int getRequestCode() {
-        return requestCode;
-    }
-
-    @Override
-    public boolean canShow(CONTENT content) {
-        return canShowImpl(content, BASE_AUTOMATIC_MODE);
-    }
-
-    // Pass in BASE_AUTOMATIC_MODE when Automatic mode choice is desired
-    protected boolean canShowImpl(CONTENT content, Object mode) {
-        boolean anyModeAllowed = (mode == BASE_AUTOMATIC_MODE);
-
-        for (ModeHandler handler : cachedModeHandlers()) {
-            if (!anyModeAllowed && !Utility.areObjectsEqual(handler.getMode(), mode)) {
-                continue;
-            }
-            // Calls to canShow() are not best effort like calls to show() are. So let's signal
-            // more explicitly whether the passed in content can be shown or not
-            if (handler.canShow(content, false /*isBestEffort*/)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    @Override
-    public void show(final CONTENT content) {
-        showImpl(content, BASE_AUTOMATIC_MODE);
-    }
-
-    // Pass in BASE_AUTOMATIC_MODE when Automatic mode choice is desired
-    protected void showImpl(final CONTENT content, final Object mode) {
-        AppCall appCall = createAppCallForMode(content, mode);
-        if (appCall != null) {
-            if (fragmentWrapper != null) {
-                DialogPresenter.present(appCall, fragmentWrapper);
-            } else {
-                DialogPresenter.present(appCall, activity);
-            }
-        } else {
-            // If we got a null appCall, then the derived dialog code is doing something wrong
-            String errorMessage = "No code path should ever result in a null appCall";
-            Log.e(TAG, errorMessage);
-            if (FacebookSdk.isDebugEnabled()) {
-                throw new IllegalStateException(errorMessage);
-            }
-        }
-    }
-
-    protected Activity getActivityContext() {
-        if (activity != null) {
-            return activity;
-        }
-
-        if (fragmentWrapper != null) {
-            return fragmentWrapper.getActivity();
-        }
-
-        return null;
-    }
-
-    protected void startActivityForResult(Intent intent, int requestCode) {
-        String error = null;
-        if (activity != null) {
-            activity.startActivityForResult(intent, requestCode);
-        } else if (fragmentWrapper != null) {
-            if (fragmentWrapper.getNativeFragment() != null) {
-                fragmentWrapper.getNativeFragment().startActivityForResult(intent, requestCode);
-            } else if (fragmentWrapper.getSupportFragment() != null) {
-                fragmentWrapper.getSupportFragment().startActivityForResult(intent, requestCode);
-            } else {
-                error = "Failed to find Activity or Fragment to startActivityForResult ";
-            }
-        } else {
-            error = "Failed to find Activity or Fragment to startActivityForResult ";
-        }
-        if (error != null) {
-            Logger.log(LoggingBehavior.DEVELOPER_ERRORS,
-                       Log.ERROR,
-                       this.getClass().getName(),
-                       error);
-        }
-    }
-
-    private AppCall createAppCallForMode(final CONTENT content, final Object mode) {
-        boolean anyModeAllowed = (mode == BASE_AUTOMATIC_MODE);
-
-        AppCall appCall = null;
-        for (ModeHandler handler : cachedModeHandlers()) {
-            if (!anyModeAllowed && !Utility.areObjectsEqual(handler.getMode(), mode)) {
-                continue;
-            }
-            if (!handler.canShow(content, true /*isBestEffort*/)) {
-                continue;
-            }
-
-            try {
-                appCall = handler.createAppCall(content);
-            } catch (FacebookException e) {
-                appCall = createBaseAppCall();
-                DialogPresenter.setupAppCallForValidationError(appCall, e);
-            }
-            break;
-        }
-
-        if (appCall == null) {
-            appCall = createBaseAppCall();
-            DialogPresenter.setupAppCallForCannotShowError(appCall);
-        }
-
-        return appCall;
-    }
-
-    private List<ModeHandler> cachedModeHandlers() {
-        if (modeHandlers == null) {
-            modeHandlers = getOrderedModeHandlers();
-        }
-
-        return modeHandlers;
-    }
-
-    protected abstract List<ModeHandler> getOrderedModeHandlers();
-
-    protected abstract AppCall createBaseAppCall();
-
-    protected abstract class ModeHandler {
-        /**
-         * @return An object to signify a specific dialog-mode.
-         */
-        public Object getMode() {
-            return BASE_AUTOMATIC_MODE;
-        }
-
-        /**
-         * Used when we want to signal back to the caller when required and optional features are
-         * not supported by specific Mode Handlers.
-         *
-         * @param content      Content to be checked
-         * @param isBestEffort Passing in true here will prevent signalling failure for optional or
-         *                     best-effort types of features. Passing in false will assume that
-         *                     optional or best-effort features should be treated the same as other
-         *                     features, and their support be enforced accordingly.
-         * @return True if can be shown
-         */
-        public abstract boolean canShow(final CONTENT content, boolean isBestEffort);
-
-        public abstract AppCall createAppCall(final CONTENT content);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java b/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
deleted file mode 100644
index 57d78ed6e..000000000
--- a/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
+++ /dev/null
@@ -1,168 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.FragmentActivity;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class FacebookDialogFragment extends DialogFragment {
-    private Dialog dialog;
-
-    public static final String TAG = "FacebookDialogFragment";
-
-    /**
-     * Setter for dialog. The dialog should be set before the show method is called.
-     * @param dialog The dialog that is wrapped.
-     */
-    public void setDialog(Dialog dialog) {
-        this.dialog = dialog;
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (this.dialog == null) {
-            final FragmentActivity activity = getActivity();
-            Intent intent = activity.getIntent();
-            Bundle params = NativeProtocol.getMethodArgumentsFromIntent(intent);
-
-            boolean isWebFallback = params.getBoolean(NativeProtocol.WEB_DIALOG_IS_FALLBACK, false);
-            WebDialog webDialog;
-            if (!isWebFallback) {
-                String actionName = params.getString(NativeProtocol.WEB_DIALOG_ACTION);
-                Bundle webParams = params.getBundle(NativeProtocol.WEB_DIALOG_PARAMS);
-                if (Utility.isNullOrEmpty(actionName)) {
-                    Utility.logd(
-                            TAG,
-                            "Cannot start a WebDialog with an empty/missing 'actionName'");
-                    activity.finish();
-                    return;
-                }
-
-                webDialog = new WebDialog.Builder(activity, actionName, webParams)
-                        .setOnCompleteListener(new WebDialog.OnCompleteListener() {
-                            @Override
-                            public void onComplete(Bundle values, FacebookException error) {
-                                onCompleteWebDialog(values, error);
-                            }
-                        })
-                        .build();
-            } else {
-                String url = params.getString(NativeProtocol.WEB_DIALOG_URL);
-                if (Utility.isNullOrEmpty(url)) {
-                    Utility.logd(
-                            TAG,
-                            "Cannot start a fallback WebDialog with an empty/missing 'url'");
-                    activity.finish();
-                    return;
-                }
-
-                String redirectUrl =
-                        String.format("fb%s://bridge/", FacebookSdk.getApplicationId());
-                webDialog = new FacebookWebFallbackDialog(activity, url, redirectUrl);
-                webDialog.setOnCompleteListener(new WebDialog.OnCompleteListener() {
-                    @Override
-                    public void onComplete(Bundle values, FacebookException error) {
-                        // Error data is nested in the values since this is in the form of a
-                        // Native protocol response
-                        onCompleteWebFallbackDialog(values);
-                    }
-                });
-            }
-
-            this.dialog = webDialog;
-        }
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        // Prevents an NPE crash in the support library
-        if (dialog == null) {
-            onCompleteWebDialog(null, null);
-            setShowsDialog(false);
-        }
-        return dialog;
-    }
-
-    @Override
-    public void onResume () {
-        super.onResume();
-        if (this.dialog instanceof WebDialog) {
-            ((WebDialog)this.dialog).resize();
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged (Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        if (this.dialog instanceof WebDialog && isResumed()) {
-            ((WebDialog)this.dialog).resize();
-        }
-    }
-
-    @Override
-    public void onDestroyView() {
-        if (getDialog() != null && getRetainInstance()) {
-            getDialog().setDismissMessage(null);
-        }
-        super.onDestroyView();
-    }
-
-    private void onCompleteWebDialog(Bundle values, FacebookException error) {
-        FragmentActivity fragmentActivity = getActivity();
-
-        Intent resultIntent = NativeProtocol.createProtocolResultIntent(
-                fragmentActivity.getIntent(),
-                values,
-                error);
-
-        int resultCode = error == null ? Activity.RESULT_OK : Activity.RESULT_CANCELED;
-
-        fragmentActivity.setResult(resultCode, resultIntent);
-        fragmentActivity.finish();
-    }
-
-    private void onCompleteWebFallbackDialog(Bundle values) {
-        FragmentActivity fragmentActivity = getActivity();
-
-        Intent resultIntent = new Intent();
-        resultIntent.putExtras(values == null ? new Bundle() : values);
-
-        fragmentActivity.setResult(Activity.RESULT_OK, resultIntent);
-        fragmentActivity.finish();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookRequestErrorClassification.java b/facebook/src/main/java/com/facebook/internal/FacebookRequestErrorClassification.java
deleted file mode 100644
index 770af2ce9..000000000
--- a/facebook/src/main/java/com/facebook/internal/FacebookRequestErrorClassification.java
+++ /dev/null
@@ -1,235 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-package com.facebook.internal;
-
-import com.facebook.FacebookRequestError;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public final class FacebookRequestErrorClassification {
-    public static final int EC_SERVICE_UNAVAILABLE = 2;
-    public static final int EC_APP_TOO_MANY_CALLS = 4;
-    public static final int EC_RATE = 9;
-    public static final int EC_USER_TOO_MANY_CALLS = 17;
-    public static final int EC_INVALID_SESSION = 102;
-    public static final int EC_INVALID_TOKEN = 190;
-    public static final int EC_TOO_MANY_USER_ACTION_CALLS = 341;
-
-    public static final String KEY_RECOVERY_MESSAGE = "recovery_message";
-    public static final String KEY_NAME = "name";
-    public static final String KEY_OTHER = "other";
-    public static final String KEY_TRANSIENT = "transient";
-    public static final String KEY_LOGIN_RECOVERABLE = "login_recoverable";
-
-    // Key is error code, value is the subcodes. Null subcodes means all subcodes are accepted.
-    private final Map<Integer, Set<Integer>> otherErrors;
-    private final Map<Integer, Set<Integer>> transientErrors;
-    private final Map<Integer, Set<Integer>> loginRecoverableErrors;
-    private final String otherRecoveryMessage;
-    private final String transientRecoveryMessage;
-    private final String loginRecoverableRecoveryMessage;
-
-    private static FacebookRequestErrorClassification defaultInstance;
-
-    FacebookRequestErrorClassification(
-            Map<Integer, Set<Integer>> otherErrors,
-            Map<Integer, Set<Integer>> transientErrors,
-            Map<Integer, Set<Integer>> loginRecoverableErrors,
-            String otherRecoveryMessage,
-            String transientRecoveryMessage,
-            String loginRecoverableRecoveryMessage) {
-        this.otherErrors = otherErrors;
-        this.transientErrors = transientErrors;
-        this.loginRecoverableErrors = loginRecoverableErrors;
-        this.otherRecoveryMessage = otherRecoveryMessage;
-        this.transientRecoveryMessage = transientRecoveryMessage;
-        this.loginRecoverableRecoveryMessage = loginRecoverableRecoveryMessage;
-    }
-
-    public Map<Integer, Set<Integer>> getOtherErrors() {
-        return otherErrors;
-    }
-
-    public Map<Integer, Set<Integer>> getTransientErrors() {
-        return transientErrors;
-    }
-
-    public Map<Integer, Set<Integer>> getLoginRecoverableErrors() {
-        return loginRecoverableErrors;
-    }
-
-    public String getRecoveryMessage(FacebookRequestError.Category category) {
-        switch (category) {
-            case OTHER:
-                return otherRecoveryMessage;
-            case LOGIN_RECOVERABLE:
-                return loginRecoverableRecoveryMessage;
-            case TRANSIENT:
-                return transientRecoveryMessage;
-            default:
-                return null;
-        }
-    }
-
-    public FacebookRequestError.Category classify(
-            int errorCode,
-            int errorSubCode,
-            boolean isTransient) {
-        if (isTransient) {
-            return FacebookRequestError.Category.TRANSIENT;
-        }
-
-        if (otherErrors != null && otherErrors.containsKey(errorCode)) {
-            Set<Integer> subCodes = otherErrors.get(errorCode);
-            if (subCodes == null || subCodes.contains(errorSubCode)) {
-                return FacebookRequestError.Category.OTHER;
-            }
-        }
-
-        if (loginRecoverableErrors != null && loginRecoverableErrors.containsKey(errorCode)) {
-            Set<Integer> subCodes = loginRecoverableErrors.get(errorCode);
-            if (subCodes == null || subCodes.contains(errorSubCode)) {
-                return FacebookRequestError.Category.LOGIN_RECOVERABLE;
-            }
-        }
-
-        if (transientErrors != null && transientErrors.containsKey(errorCode)) {
-            Set<Integer> subCodes = transientErrors.get(errorCode);
-            if (subCodes == null || subCodes.contains(errorSubCode)) {
-                return FacebookRequestError.Category.TRANSIENT;
-            }
-        }
-        return FacebookRequestError.Category.OTHER;
-    }
-
-    public static synchronized FacebookRequestErrorClassification getDefaultErrorClassification() {
-        if (defaultInstance == null) {
-            defaultInstance = getDefaultErrorClassificationImpl();
-        }
-        return defaultInstance;
-    }
-
-    private static FacebookRequestErrorClassification getDefaultErrorClassificationImpl() {
-        Map<Integer, Set<Integer>> transientErrors = new HashMap<Integer, Set<Integer>>() {{
-            put(EC_SERVICE_UNAVAILABLE, null);
-            put(EC_APP_TOO_MANY_CALLS, null);
-            put(EC_RATE, null);
-            put(EC_USER_TOO_MANY_CALLS, null);
-            put(EC_TOO_MANY_USER_ACTION_CALLS, null);
-        }};
-
-        Map<Integer, Set<Integer>> loginRecoverableErrors = new HashMap<Integer, Set<Integer>>() {{
-            put(EC_INVALID_SESSION,null);
-            put(EC_INVALID_TOKEN,null);
-        }};
-
-        return new FacebookRequestErrorClassification(
-                null,
-                transientErrors,
-                loginRecoverableErrors,
-                null,
-                null,
-                null);
-    }
-
-    private static Map<Integer, Set<Integer>> parseJSONDefinition(JSONObject definition) {
-        JSONArray itemsArray = definition.optJSONArray("items");
-        if (itemsArray.length() == 0) {
-            return null;
-        }
-
-        Map<Integer, Set<Integer>> items = new HashMap<>();
-        for (int i = 0; i < itemsArray.length(); i++) {
-            JSONObject item = itemsArray.optJSONObject(i);
-            if (item == null) {
-                continue;
-            }
-            int code = item.optInt("code");
-            if (code == 0) {
-                continue;
-            }
-            Set<Integer> subcodes = null;
-            JSONArray subcodesArray = item.optJSONArray("subcodes");
-            if (subcodesArray != null && subcodesArray.length() > 0) {
-                subcodes = new HashSet<>();
-                for (int j = 0; j < subcodesArray.length(); j++) {
-                    int subCode = subcodesArray.optInt(j);
-                    if (subCode != 0) {
-                        subcodes.add(subCode);
-                    }
-                }
-            }
-            items.put(code, subcodes);
-        }
-        return items;
-    }
-
-    public static FacebookRequestErrorClassification createFromJSON(JSONArray jsonArray) {
-        if (jsonArray == null) {
-            return null;
-        }
-        Map<Integer, Set<Integer>> otherErrors = null;
-        Map<Integer, Set<Integer>> transientErrors = null;
-        Map<Integer, Set<Integer>> loginRecoverableErrors = null;
-        String otherRecoveryMessage = null;
-        String transientRecoveryMessage = null;
-        String loginRecoverableRecoveryMessage = null;
-
-        for (int i = 0; i < jsonArray.length(); i++) {
-            JSONObject definition = jsonArray.optJSONObject(i);
-            if (definition == null) {
-                continue;
-            }
-            String name = definition.optString(KEY_NAME);
-            if (name == null) {
-                continue;
-            }
-            if (name.equalsIgnoreCase(KEY_OTHER)) {
-                otherRecoveryMessage = definition.optString(KEY_RECOVERY_MESSAGE, null);
-                otherErrors = parseJSONDefinition(definition);
-            } else if (name.equalsIgnoreCase(KEY_TRANSIENT)) {
-                transientRecoveryMessage = definition.optString(KEY_RECOVERY_MESSAGE, null);
-                transientErrors = parseJSONDefinition(definition);
-            } else if (name.equalsIgnoreCase(KEY_LOGIN_RECOVERABLE)) {
-                loginRecoverableRecoveryMessage = definition.optString(KEY_RECOVERY_MESSAGE, null);
-                loginRecoverableErrors = parseJSONDefinition(definition);
-            }
-        }
-        return new FacebookRequestErrorClassification(
-            otherErrors,
-            transientErrors,
-            loginRecoverableErrors,
-            otherRecoveryMessage,
-            transientRecoveryMessage,
-            loginRecoverableRecoveryMessage
-        );
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookWebFallbackDialog.java b/facebook/src/main/java/com/facebook/internal/FacebookWebFallbackDialog.java
deleted file mode 100644
index 9d945cdcd..000000000
--- a/facebook/src/main/java/com/facebook/internal/FacebookWebFallbackDialog.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.webkit.WebView;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- * <p/>
- * This dialog is used as a fallback when a native FacebookDialog could not be displayed. The
- * primary reason for this separation is to keep this approach for internal use only until we
- * stabilize the API.
- */
-public class FacebookWebFallbackDialog extends WebDialog {
-    private static final String TAG = FacebookWebFallbackDialog.class.getName();
-    private static final int OS_BACK_BUTTON_RESPONSE_TIMEOUT_MILLISECONDS = 1500;
-
-    private boolean waitingForDialogToClose;
-
-    public FacebookWebFallbackDialog(Context context, String url, String expectedRedirectUrl) {
-        super(context, url);
-
-        setExpectedRedirectUrl(expectedRedirectUrl);
-    }
-
-    @Override
-    protected Bundle parseResponseUri(String url) {
-        Uri responseUri = Uri.parse(url);
-        Bundle queryParams = Utility.parseUrlQueryString(responseUri.getQuery());
-
-        // Convert Bridge args to the format that the Native dialog code understands.
-        String bridgeArgsJSONString =
-                queryParams.getString(ServerProtocol.FALLBACK_DIALOG_PARAM_BRIDGE_ARGS);
-        queryParams.remove(ServerProtocol.FALLBACK_DIALOG_PARAM_BRIDGE_ARGS);
-
-        if (!Utility.isNullOrEmpty(bridgeArgsJSONString)) {
-            Bundle bridgeArgs;
-            try {
-                JSONObject bridgeArgsJSON = new JSONObject(bridgeArgsJSONString);
-                bridgeArgs = BundleJSONConverter.convertToBundle(bridgeArgsJSON);
-                queryParams.putBundle(NativeProtocol.EXTRA_PROTOCOL_BRIDGE_ARGS, bridgeArgs);
-            } catch (JSONException je) {
-                Utility.logd(TAG, "Unable to parse bridge_args JSON", je);
-            }
-        }
-
-        // Convert Method results to the format that the Native dialog code understands.
-        String methodResultsJSONString =
-                queryParams.getString(ServerProtocol.FALLBACK_DIALOG_PARAM_METHOD_RESULTS);
-        queryParams.remove(ServerProtocol.FALLBACK_DIALOG_PARAM_METHOD_RESULTS);
-
-        if (!Utility.isNullOrEmpty(methodResultsJSONString)) {
-            methodResultsJSONString =
-                    Utility.isNullOrEmpty(methodResultsJSONString) ? "{}" : methodResultsJSONString;
-            Bundle methodResults;
-            try {
-                JSONObject methodArgsJSON = new JSONObject(methodResultsJSONString);
-                methodResults = BundleJSONConverter.convertToBundle(methodArgsJSON);
-                queryParams.putBundle(NativeProtocol.EXTRA_PROTOCOL_METHOD_RESULTS, methodResults);
-            } catch (JSONException je) {
-                Utility.logd(TAG, "Unable to parse bridge_args JSON", je);
-            }
-        }
-
-        // The web host does not send a numeric version back. Put the latest known version in there
-        // so NativeProtocol can continue parsing the response.
-        queryParams.remove(ServerProtocol.FALLBACK_DIALOG_PARAM_VERSION);
-        queryParams.putInt(
-                NativeProtocol.EXTRA_PROTOCOL_VERSION, NativeProtocol.getLatestKnownVersion());
-
-        return queryParams;
-    }
-
-    @Override
-    public void cancel() {
-        WebView webView = getWebView();
-
-        // If the page hasn't loaded, or the listener is already called, then we can't interrupt
-        // this cancellation. Either the JS won't be ready to consume the event, or the listener
-        // has already processed a result.
-        // So let's just handle this cancellation in the standard way.
-        if (!isPageFinished()
-                || isListenerCalled()
-                || webView == null
-                || !webView.isShown()) {
-            super.cancel();
-            return;
-        }
-
-        // Return right away if we have already queued up the delayed-cancel call.
-        if (waitingForDialogToClose) {
-            return;
-        }
-
-        waitingForDialogToClose = true;
-
-        // Now fire off the event that will tell the dialog to wind down.
-        String eventJS =
-                "(function() {" +
-                        "  var event = document.createEvent('Event');" +
-                        "  event.initEvent('fbPlatformDialogMustClose',true,true);" +
-                        "  document.dispatchEvent(event);" +
-                        "})();";
-        webView.loadUrl("javascript:" + eventJS);
-
-        // Set up a timeout for the dialog to respond. If the timer expires, we need to honor
-        // the user's desire to dismiss the dialog.
-        Handler handler = new Handler(Looper.getMainLooper());
-        handler.postDelayed(
-                new Runnable() {
-                    @Override
-                    public void run() {
-                        // If we get here, then the dialog did not close quickly enough.
-                        // So we need to honor the user's wish to cancel and we should do
-                        // so without allowing interruptions.
-                        FacebookWebFallbackDialog.super.cancel();
-                    }
-                },
-                OS_BACK_BUTTON_RESPONSE_TIMEOUT_MILLISECONDS);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/FileLruCache.java b/facebook/src/main/java/com/facebook/internal/FileLruCache.java
deleted file mode 100644
index 72e73d467..000000000
--- a/facebook/src/main/java/com/facebook/internal/FileLruCache.java
+++ /dev/null
@@ -1,690 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.util.Log;
-
-import com.facebook.FacebookSdk;
-import com.facebook.LoggingBehavior;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.*;
-import java.security.InvalidParameterException;
-import java.util.Date;
-import java.util.PriorityQueue;
-import java.util.concurrent.atomic.AtomicLong;
-
-// This class is intended to be thread-safe.
-//
-// There are two classes of files:  buffer files and cache files:
-// - A buffer file is in the process of being written, and there is an open stream on the file.
-//   These files are named as "bufferN" where N is an incrementing integer.  On startup, we delete
-//   all existing files of this form. Once the stream is closed, we rename the buffer file to a
-//   cache file or attempt to delete if this fails.  We do not otherwise ever attempt to delete
-//   these files.
-// - A cache file is a non-changing file that is named by the md5 hash of the cache key.  We monitor
-//   the size of these files in aggregate and remove the oldest one(s) to stay under quota.  This
-//   process does not block threads calling into this class, so theoretically we could go
-//   arbitrarily over quota but in practice this should not happen because deleting files should be
-//   much cheaper than downloading new file content.
-//
-// Since there can only ever be one thread accessing a particular buffer file, we do not synchronize
-// access to these. We do assume that file rename is atomic when converting a buffer file to a cache
-// file, and that if multiple files are renamed to a single target that exactly one of them
-// continues to exist.
-//
-// Standard POSIX file semantics guarantee being able to continue to use a file handle even after
-// the corresponding file has been deleted.  Given this and that cache files never change other than
-// deleting in trim() or clear(),  we only have to ensure that there is at most one trim() or
-// clear() process deleting files at any given time.
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public final class FileLruCache {
-    static final String TAG = FileLruCache.class.getSimpleName();
-    private static final String HEADER_CACHEKEY_KEY = "key";
-    private static final String HEADER_CACHE_CONTENT_TAG_KEY = "tag";
-
-    private static final AtomicLong bufferIndex = new AtomicLong();
-
-    private final String tag;
-    private final Limits limits;
-    private final File directory;
-    private boolean isTrimPending;
-    private boolean isTrimInProgress;
-    private final Object lock;
-    private AtomicLong lastClearCacheTime = new AtomicLong(0);
-
-    // The value of tag should be a final String that works as a directory name.
-    public FileLruCache(String tag, Limits limits) {
-        this.tag = tag;
-        this.limits = limits;
-        this.directory = new File(FacebookSdk.getCacheDir(), tag);
-        this.lock = new Object();
-
-        // Ensure the cache dir exists
-        if (this.directory.mkdirs() || this.directory.isDirectory()) {
-            // Remove any stale partially-written files from a previous run
-            BufferFile.deleteAll(this.directory);
-        }
-    }
-
-    // This is not robust to files changing dynamically underneath it and should therefore only be
-    // used for test code.  If we ever need this for product code we need to think through
-    // synchronization.
-    // See the threading notes at the top of this class.
-    //
-    // Also, since trim() runs asynchronously now, this blocks until any pending trim has completed.
-    long sizeInBytesForTest() {
-        synchronized (lock) {
-            while (isTrimPending || isTrimInProgress) {
-                try {
-                    lock.wait();
-                } catch (InterruptedException e) {
-                    // intentional no-op
-                }
-            }
-        }
-
-        File[] files = this.directory.listFiles();
-        long total = 0;
-        if (files != null) {
-            for (File file : files) {
-                total += file.length();
-            }
-        }
-        return total;
-    }
-
-    public InputStream get(String key) throws IOException {
-        return get(key, null);
-    }
-
-    public InputStream get(String key, String contentTag) throws IOException {
-        File file = new File(this.directory, Utility.md5hash(key));
-
-        FileInputStream input = null;
-        try {
-            input = new FileInputStream(file);
-        } catch (IOException e) {
-            return null;
-        }
-
-        BufferedInputStream buffered =
-                new BufferedInputStream(input, Utility.DEFAULT_STREAM_BUFFER_SIZE);
-        boolean success = false;
-
-        try {
-            JSONObject header = StreamHeader.readHeader(buffered);
-            if (header == null) {
-                return null;
-            }
-
-            String foundKey = header.optString(HEADER_CACHEKEY_KEY);
-            if ((foundKey == null) || !foundKey.equals(key)) {
-                return null;
-            }
-
-            String headerContentTag = header.optString(HEADER_CACHE_CONTENT_TAG_KEY, null);
-
-            if ((contentTag == null && headerContentTag != null) ||
-                    (contentTag != null && !contentTag.equals(headerContentTag))) {
-                return null;
-            }
-
-            long accessTime = new Date().getTime();
-            Logger.log(
-                    LoggingBehavior.CACHE,
-                    TAG,
-                    "Setting lastModified to " + Long.valueOf(accessTime) + " for " +
-                            file.getName());
-            file.setLastModified(accessTime);
-
-            success = true;
-            return buffered;
-        } finally {
-            if (!success) {
-                buffered.close();
-            }
-        }
-    }
-
-    public OutputStream openPutStream(final String key) throws IOException {
-        return openPutStream(key, null);
-    }
-
-    public OutputStream openPutStream(final String key, String contentTag) throws IOException {
-        final File buffer = BufferFile.newFile(this.directory);
-        buffer.delete();
-        if (!buffer.createNewFile()) {
-            throw new IOException("Could not create file at " + buffer.getAbsolutePath());
-        }
-
-        FileOutputStream file = null;
-        try {
-            file = new FileOutputStream(buffer);
-        } catch (FileNotFoundException e) {
-            Logger.log(
-                    LoggingBehavior.CACHE,
-                    Log.WARN,
-                    TAG,
-                    "Error creating buffer output stream: " + e);
-            throw new IOException(e.getMessage());
-        }
-
-        final long bufferFileCreateTime = System.currentTimeMillis();
-        StreamCloseCallback renameToTargetCallback = new StreamCloseCallback() {
-            @Override
-            public void onClose() {
-                // if the buffer file was created before the cache was cleared, then the buffer file
-                // should be deleted rather than renamed and saved.
-                if (bufferFileCreateTime < lastClearCacheTime.get()) {
-                    buffer.delete();
-                } else {
-                    renameToTargetAndTrim(key, buffer);
-                }
-            }
-        };
-
-        CloseCallbackOutputStream cleanup =
-                new CloseCallbackOutputStream(file, renameToTargetCallback);
-        BufferedOutputStream buffered =
-                new BufferedOutputStream(cleanup, Utility.DEFAULT_STREAM_BUFFER_SIZE);
-        boolean success = false;
-
-        try {
-            // Prefix the stream with the actual key, since there could be collisions
-            JSONObject header = new JSONObject();
-            header.put(HEADER_CACHEKEY_KEY, key);
-            if (!Utility.isNullOrEmpty(contentTag)) {
-                header.put(HEADER_CACHE_CONTENT_TAG_KEY, contentTag);
-            }
-
-            StreamHeader.writeHeader(buffered, header);
-
-            success = true;
-            return buffered;
-        } catch (JSONException e) {
-            // JSON is an implementation detail of the cache, so don't let JSON exceptions out.
-            Logger.log(
-                    LoggingBehavior.CACHE,
-                    Log.WARN,
-                    TAG,
-                    "Error creating JSON header for cache file: " + e);
-            throw new IOException(e.getMessage());
-        } finally {
-            if (!success) {
-                buffered.close();
-            }
-        }
-    }
-
-    public void clearCache() {
-        // get the current directory listing of files to delete
-        final File[] filesToDelete = directory.listFiles(BufferFile.excludeBufferFiles());
-        lastClearCacheTime.set(System.currentTimeMillis());
-        if (filesToDelete != null) {
-            FacebookSdk.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    for (File file : filesToDelete) {
-                        file.delete();
-                    }
-                }
-            });
-        }
-    }
-
-    /**
-     * The location of the cache.
-     * @return The location of the cache.
-     */
-    public String getLocation() {
-        return this.directory.getPath();
-    }
-
-    private void renameToTargetAndTrim(String key, File buffer) {
-        final File target = new File(directory, Utility.md5hash(key));
-
-        // This is triggered by close().  By the time close() returns, the file should be cached, so
-        // this needs to happen synchronously on this thread.
-        //
-        // However, it does not need to be synchronized, since in the race we will just start an
-        // unnecessary trim operation.  Avoiding the cost of holding the lock across the file
-        // operation seems worth this cost.
-        if (!buffer.renameTo(target)) {
-            buffer.delete();
-        }
-
-        postTrim();
-    }
-
-    // Opens an output stream for the key, and creates an input stream wrapper to copy
-    // the contents of input into the new output stream.  The effect is to store a
-    // copy of input, and associate that data with key.
-    public InputStream interceptAndPut(String key, InputStream input) throws IOException {
-        OutputStream output = openPutStream(key);
-        return new CopyingInputStream(input, output);
-    }
-
-    public String toString() {
-        return "{FileLruCache:" + " tag:" + this.tag + " file:" + this.directory.getName() + "}";
-    }
-
-    private void postTrim() {
-        synchronized (lock) {
-            if (!isTrimPending) {
-                isTrimPending = true;
-                FacebookSdk.getExecutor().execute(new Runnable() {
-                    @Override
-                    public void run() {
-                        trim();
-                    }
-                });
-            }
-        }
-    }
-
-    private void trim() {
-        synchronized (lock) {
-            isTrimPending = false;
-            isTrimInProgress = true;
-        }
-        try {
-            Logger.log(LoggingBehavior.CACHE, TAG, "trim started");
-            PriorityQueue<ModifiedFile> heap = new PriorityQueue<ModifiedFile>();
-            long size = 0;
-            long count = 0;
-            File[] filesToTrim =this.directory.listFiles(BufferFile.excludeBufferFiles());
-            if (filesToTrim != null) {
-                for (File file : filesToTrim) {
-                    ModifiedFile modified = new ModifiedFile(file);
-                    heap.add(modified);
-                    Logger.log(
-                            LoggingBehavior.CACHE,
-                            TAG,
-                            "  trim considering time=" + Long.valueOf(modified.getModified()) +
-                                    " name=" + modified.getFile().getName());
-
-                    size += file.length();
-                    count++;
-                }
-            }
-
-            while ((size > limits.getByteCount()) || (count > limits.getFileCount())) {
-                File file = heap.remove().getFile();
-                Logger.log(LoggingBehavior.CACHE, TAG, "  trim removing " + file.getName());
-                size -= file.length();
-                count--;
-                file.delete();
-            }
-        } finally {
-            synchronized (lock) {
-                isTrimInProgress = false;
-                lock.notifyAll();
-            }
-        }
-    }
-
-    private static class BufferFile {
-        private static final String FILE_NAME_PREFIX = "buffer";
-        private static final FilenameFilter filterExcludeBufferFiles = new FilenameFilter() {
-            @Override
-            public boolean accept(File dir, String filename) {
-                return !filename.startsWith(FILE_NAME_PREFIX);
-            }
-        };
-        private static final FilenameFilter filterExcludeNonBufferFiles = new FilenameFilter() {
-            @Override
-            public boolean accept(File dir, String filename) {
-                return filename.startsWith(FILE_NAME_PREFIX);
-            }
-        };
-
-        static void deleteAll(final File root) {
-            File[] filesToDelete = root.listFiles(excludeNonBufferFiles());
-            if (filesToDelete != null) {
-                for (File file : filesToDelete) {
-                    file.delete();
-                }
-            }
-        }
-
-        static FilenameFilter excludeBufferFiles() {
-            return filterExcludeBufferFiles;
-        }
-
-        static FilenameFilter excludeNonBufferFiles() {
-            return filterExcludeNonBufferFiles;
-        }
-
-        static File newFile(final File root) {
-            String name = FILE_NAME_PREFIX + Long.valueOf(bufferIndex.incrementAndGet()).toString();
-            return new File(root, name);
-        }
-    }
-
-    // Treats the first part of a stream as a header, reads/writes it as a JSON blob, and
-    // leaves the stream positioned exactly after the header.
-    //
-    // The format is as follows:
-    //     byte: meaning
-    // ---------------------------------
-    //        0: version number
-    //      1-3: big-endian JSON header blob size
-    // 4-size+4: UTF-8 JSON header blob
-    //      ...: stream data
-    private static final class StreamHeader {
-        private static final int HEADER_VERSION = 0;
-
-        static void writeHeader(OutputStream stream, JSONObject header) throws IOException {
-            String headerString = header.toString();
-            byte[] headerBytes = headerString.getBytes();
-
-            // Write version number and big-endian header size
-            stream.write(HEADER_VERSION);
-            stream.write((headerBytes.length >> 16) & 0xff);
-            stream.write((headerBytes.length >> 8) & 0xff);
-            stream.write((headerBytes.length >> 0) & 0xff);
-
-            stream.write(headerBytes);
-        }
-
-        static JSONObject readHeader(InputStream stream) throws IOException {
-            int version = stream.read();
-            if (version != HEADER_VERSION) {
-                return null;
-            }
-
-            int headerSize = 0;
-            for (int i = 0; i < 3; i++) {
-                int b = stream.read();
-                if (b == -1) {
-                    Logger.log(LoggingBehavior.CACHE, TAG,
-                            "readHeader: stream.read returned -1 while reading header size");
-                    return null;
-                }
-                headerSize <<= 8;
-                headerSize += b & 0xff;
-            }
-
-            byte[] headerBytes = new byte[headerSize];
-            int count = 0;
-            while (count < headerBytes.length) {
-                int readCount = stream.read(headerBytes, count, headerBytes.length - count);
-                if (readCount < 1) {
-                    Logger.log(
-                            LoggingBehavior.CACHE,
-                            TAG,
-                            "readHeader: stream.read stopped at " + Integer.valueOf(count) +
-                                    " when expected " + headerBytes.length);
-                    return null;
-                }
-                count += readCount;
-            }
-
-            String headerString = new String(headerBytes);
-            JSONObject header = null;
-            JSONTokener tokener = new JSONTokener(headerString);
-            try {
-                Object parsed = tokener.nextValue();
-                if (!(parsed instanceof JSONObject)) {
-                    Logger.log(
-                            LoggingBehavior.CACHE,
-                            TAG,
-                            "readHeader: expected JSONObject, got " +
-                                    parsed.getClass().getCanonicalName());
-                    return null;
-                }
-                header = (JSONObject) parsed;
-            } catch (JSONException e) {
-                throw new IOException(e.getMessage());
-            }
-
-            return header;
-        }
-    }
-
-    private static class CloseCallbackOutputStream extends OutputStream {
-        final OutputStream innerStream;
-        final StreamCloseCallback callback;
-
-        CloseCallbackOutputStream(OutputStream innerStream, StreamCloseCallback callback) {
-            this.innerStream = innerStream;
-            this.callback = callback;
-        }
-
-        @Override
-        public void close() throws IOException {
-            try {
-                this.innerStream.close();
-            } finally {
-                this.callback.onClose();
-            }
-        }
-
-        @Override
-        public void flush() throws IOException {
-            this.innerStream.flush();
-        }
-
-        @Override
-        public void write(byte[] buffer, int offset, int count) throws IOException {
-            this.innerStream.write(buffer, offset, count);
-        }
-
-        @Override
-        public void write(byte[] buffer) throws IOException {
-            this.innerStream.write(buffer);
-        }
-
-        @Override
-        public void write(int oneByte) throws IOException {
-            this.innerStream.write(oneByte);
-        }
-    }
-
-    private static final class CopyingInputStream extends InputStream {
-        final InputStream input;
-        final OutputStream output;
-
-        CopyingInputStream(final InputStream input, final OutputStream output) {
-            this.input = input;
-            this.output = output;
-        }
-
-        @Override
-        public int available() throws IOException {
-            return input.available();
-        }
-
-        @Override
-        public void close() throws IOException {
-            // According to http://www.cs.cornell.edu/andru/javaspec/11.doc.html:
-            //  "If a finally clause is executed because of abrupt completion of a try block and the
-            //   finally clause itself completes abruptly, then the reason for the abrupt completion
-            //   of the try block is discarded and the new reason for abrupt completion is
-            //   propagated from there."
-            //
-            // Android does appear to behave like this.
-            try {
-                this.input.close();
-            } finally {
-                this.output.close();
-            }
-        }
-
-        @Override
-        public void mark(int readlimit) {
-            throw new UnsupportedOperationException();
-        }
-
-        @Override
-        public boolean markSupported() {
-            return false;
-        }
-
-        @Override
-        public int read(byte[] buffer) throws IOException {
-            int count = input.read(buffer);
-            if (count > 0) {
-                output.write(buffer, 0, count);
-            }
-            return count;
-        }
-
-        @Override
-        public int read() throws IOException {
-            int b = input.read();
-            if (b >= 0) {
-                output.write(b);
-            }
-            return b;
-        }
-
-        @Override
-        public int read(byte[] buffer, int offset, int length) throws IOException {
-            int count = input.read(buffer, offset, length);
-            if (count > 0) {
-                output.write(buffer, offset, count);
-            }
-            return count;
-        }
-
-        @Override
-        public synchronized void reset() {
-            throw new UnsupportedOperationException();
-        }
-
-        @Override
-        public long skip(long byteCount) throws IOException {
-            byte[] buffer = new byte[1024];
-            long total = 0;
-            while (total < byteCount) {
-                int count = read(buffer, 0, (int)Math.min(byteCount - total, buffer.length));
-                if (count < 0) {
-                    return total;
-                }
-                total += count;
-            }
-            return total;
-        }
-    }
-
-    public static final class Limits {
-        private int byteCount;
-        private int fileCount;
-
-        public Limits() {
-            // A Samsung Galaxy Nexus can create 1k files in half a second.  By the time
-            // it gets to 5k files it takes 5 seconds.  10k files took 15 seconds.  This
-            // continues to slow down as files are added.  This assumes all files are in
-            // a single directory.
-            //
-            // Following a git-like strategy where we partition MD5-named files based on
-            // the first 2 characters is slower across the board.
-            this.fileCount = 1024;
-            this.byteCount = 1024 * 1024;
-        }
-
-        int getByteCount() {
-            return byteCount;
-        }
-
-        int getFileCount() {
-            return fileCount;
-        }
-
-        void setByteCount(int n) {
-            if (n < 0) {
-                throw new InvalidParameterException("Cache byte-count limit must be >= 0");
-            }
-            byteCount = n;
-        }
-
-        void setFileCount(int n) {
-            if (n < 0) {
-                throw new InvalidParameterException("Cache file count limit must be >= 0");
-            }
-            fileCount = n;
-        }
-    }
-
-    // Caches the result of lastModified during sort/heap operations
-    private final static class ModifiedFile implements Comparable<ModifiedFile> {
-        private static final int HASH_SEED = 29; // Some random prime number
-        private static final int HASH_MULTIPLIER = 37; // Some random prime number
-
-        private final File file;
-        private final long modified;
-
-        ModifiedFile(File file) {
-            this.file = file;
-            this.modified = file.lastModified();
-        }
-
-        File getFile() {
-            return file;
-        }
-
-        long getModified() {
-            return modified;
-        }
-
-        @Override
-        public int compareTo(ModifiedFile another) {
-            if (getModified() < another.getModified()) {
-                return -1;
-            } else if (getModified() > another.getModified()) {
-                return 1;
-            } else {
-                return getFile().compareTo(another.getFile());
-            }
-        }
-
-        @Override
-        public boolean equals(Object another) {
-            return
-                    (another instanceof ModifiedFile) &&
-                    (compareTo((ModifiedFile)another) == 0);
-        }
-
-        @Override
-        public int hashCode() {
-            int result = HASH_SEED;
-
-            result = (result * HASH_MULTIPLIER) + file.hashCode();
-            result = (result * HASH_MULTIPLIER) + (int) (modified % Integer.MAX_VALUE);
-
-            return result;
-        }
-    }
-
-    private interface StreamCloseCallback {
-        void onClose();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/FragmentWrapper.java b/facebook/src/main/java/com/facebook/internal/FragmentWrapper.java
deleted file mode 100644
index 990faa3a9..000000000
--- a/facebook/src/main/java/com/facebook/internal/FragmentWrapper.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-
-public class FragmentWrapper {
-    private Fragment supportFragment;
-    private android.app.Fragment nativeFragment;
-
-    public FragmentWrapper(Fragment fragment) {
-        Validate.notNull(fragment, "fragment");
-        this.supportFragment = fragment;
-    }
-
-    public FragmentWrapper(android.app.Fragment fragment) {
-        Validate.notNull(fragment, "fragment");
-        this.nativeFragment = fragment;
-    }
-
-    public android.app.Fragment getNativeFragment() {
-        return this.nativeFragment;
-    }
-
-    public Fragment getSupportFragment() {
-        return this.supportFragment;
-    }
-
-    /**
-     * Call {@link Activity#startActivityForResult(Intent, int)} from the fragment's
-     * containing Activity.
-     */
-    public void startActivityForResult(Intent intent, int requestCode) {
-        if (supportFragment != null) {
-            supportFragment.startActivityForResult(intent, requestCode);
-        } else {
-            nativeFragment.startActivityForResult(intent, requestCode);
-        }
-    }
-
-    /**
-     * Return the {@link FragmentActivity} this fragment is currently associated with.
-     * May return {@code null} if the fragment is associated with a {@link Context}
-     * instead.
-     */
-    final public Activity getActivity() {
-        if (supportFragment != null) {
-            return supportFragment.getActivity();
-        } else {
-            return nativeFragment.getActivity();
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/GraphUtil.java b/facebook/src/main/java/com/facebook/internal/GraphUtil.java
deleted file mode 100644
index 93b4566ed..000000000
--- a/facebook/src/main/java/com/facebook/internal/GraphUtil.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookException;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Validate;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- * <p/>
- * This class provides utility methods that are useful in graph API interactions.
- */
-public class GraphUtil {
-    private static final String[] dateFormats = new String[] {
-            "yyyy-MM-dd'T'HH:mm:ssZ",
-            "yyyy-MM-dd'T'HH:mm:ss",
-            "yyyy-MM-dd",
-    };
-
-    /**
-     * Creates a JSONObject for an open graph action that is suitable for posting.
-     * @param type the Open Graph action type for the object, or null if it will be specified later
-     * @return a JSONObject
-     */
-    public static JSONObject createOpenGraphActionForPost(String type) {
-        JSONObject action = new JSONObject();
-        if (type != null) {
-            try {
-                action.put("type", type);
-            } catch (JSONException e) {
-                throw new FacebookException(
-                        "An error occurred while setting up the open graph action",
-                        e);
-            }
-        }
-        return action;
-    }
-
-
-    /**
-     * Creates a JSONObject for an open graph object that is suitable for posting.
-     * @param type the Open Graph object type for the object, or null if it will be specified later
-     * @return a JSONObject
-     */
-    public static JSONObject createOpenGraphObjectForPost(String type) {
-        return createOpenGraphObjectForPost(type, null, null, null, null, null, null);
-    }
-
-    /**
-     * Creates a JSONObject for an open graph object that is suitable for posting.
-     * @param type the Open Graph object type for the object, or null if it will be specified later
-     * @param title the title of the object, or null if it will be specified later
-     * @param imageUrl the URL of an image associated with the object, or null
-     * @param url the URL associated with the object, or null
-     * @param description the description of the object, or null
-     * @param objectProperties the properties of the open graph object
-     * @param id the id of the object if the post is for update
-     * @return a JSONObject
-     */
-    public static JSONObject createOpenGraphObjectForPost(
-            String type,
-            String title,
-            String imageUrl,
-            String url,
-            String description,
-            JSONObject objectProperties,
-            String id) {
-        JSONObject openGraphObject = new JSONObject();
-        try {
-            if (type != null) {
-                openGraphObject.put("type", type);
-            }
-            openGraphObject.put("title", title);
-
-            if (imageUrl != null) {
-                JSONObject imageUrlObject = new JSONObject();
-                imageUrlObject.put("url", imageUrl);
-                JSONArray imageUrls = new JSONArray();
-                imageUrls.put(imageUrlObject);
-                openGraphObject.put("image", imageUrls);
-            }
-
-            openGraphObject.put("url", url);
-            openGraphObject.put("description", description);
-            openGraphObject.put(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY, true);
-
-            if (objectProperties != null) {
-                openGraphObject.put("data", objectProperties);
-            }
-
-            if (id != null) {
-                openGraphObject.put("id", id);
-            }
-        } catch (JSONException e) {
-            throw new FacebookException("An error occurred while setting up the graph object", e);
-        }
-        return openGraphObject;
-    }
-
-    /**
-     * Determines if the open graph object is for posting
-     * @param object The open graph object to check
-     * @return True if the open graph object was created for posting
-     */
-    public static boolean isOpenGraphObjectForPost(JSONObject object) {
-        return object != null
-                ? object.optBoolean(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY) : false;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/ImageDownloader.java b/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
deleted file mode 100644
index 9309f2beb..000000000
--- a/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
+++ /dev/null
@@ -1,383 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.net.Uri;
-import android.os.Handler;
-import android.os.Looper;
-import com.facebook.FacebookException;
-import com.facebook.R;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class ImageDownloader {
-    private static final int DOWNLOAD_QUEUE_MAX_CONCURRENT = WorkQueue.DEFAULT_MAX_CONCURRENT;
-    private static final int CACHE_READ_QUEUE_MAX_CONCURRENT = 2;
-    private static Handler handler;
-    private static WorkQueue downloadQueue = new WorkQueue(DOWNLOAD_QUEUE_MAX_CONCURRENT);
-    private static WorkQueue cacheReadQueue = new WorkQueue(CACHE_READ_QUEUE_MAX_CONCURRENT);
-
-    private static final Map<RequestKey, DownloaderContext> pendingRequests = new HashMap<RequestKey, DownloaderContext>();
-
-    /**
-     * Downloads the image specified in the passed in request.
-     * If a callback is specified, it is guaranteed to be invoked on the calling thread.
-     * @param request Request to process
-     */
-    public static void downloadAsync(ImageRequest request) {
-        if (request == null) {
-            return;
-        }
-
-        // NOTE: This is the ONLY place where the original request's Url is read. From here on,
-        // we will keep track of the Url separately. This is because we might be dealing with a
-        // redirect response and the Url might change. We can't create our own new ImageRequests
-        // for these changed Urls since the caller might be doing some book-keeping with the
-        // requests object reference. So we keep the old references and just map them to new urls in
-        // the downloader.
-        RequestKey key = new RequestKey(request.getImageUri(), request.getCallerTag());
-        synchronized (pendingRequests) {
-            DownloaderContext downloaderContext = pendingRequests.get(key);
-            if (downloaderContext != null) {
-                downloaderContext.request = request;
-                downloaderContext.isCancelled = false;
-                downloaderContext.workItem.moveToFront();
-            } else {
-                enqueueCacheRead(request, key, request.isCachedRedirectAllowed());
-            }
-        }
-    }
-
-    public static boolean cancelRequest(ImageRequest request) {
-        boolean cancelled = false;
-        RequestKey key = new RequestKey(request.getImageUri(), request.getCallerTag());
-        synchronized (pendingRequests) {
-            DownloaderContext downloaderContext = pendingRequests.get(key);
-            if (downloaderContext != null) {
-                // If we were able to find the request in our list of pending requests, then we will
-                // definitely be able to prevent an ImageResponse from being issued. This is
-                // regardless of whether a cache-read or network-download is underway for this
-                // request.
-                cancelled = true;
-
-                if (downloaderContext.workItem.cancel()) {
-                    pendingRequests.remove(key);
-                } else {
-                    // May be attempting a cache-read right now. So keep track of the cancellation
-                    // to prevent network calls etc
-                    downloaderContext.isCancelled = true;
-                }
-            }
-        }
-
-        return cancelled;
-    }
-
-    public static void prioritizeRequest(ImageRequest request) {
-        RequestKey key = new RequestKey(request.getImageUri(), request.getCallerTag());
-        synchronized (pendingRequests) {
-            DownloaderContext downloaderContext = pendingRequests.get(key);
-            if (downloaderContext != null) {
-                downloaderContext.workItem.moveToFront();
-            }
-        }
-    }
-
-    public static void clearCache(Context context) {
-        ImageResponseCache.clearCache(context);
-        UrlRedirectCache.clearCache();
-    }
-
-    private static void enqueueCacheRead(
-            ImageRequest request,
-            RequestKey key,
-            boolean allowCachedRedirects) {
-        enqueueRequest(
-                request,
-                key,
-                cacheReadQueue,
-                new CacheReadWorkItem(request.getContext(), key, allowCachedRedirects));
-    }
-
-    private static void enqueueDownload(ImageRequest request, RequestKey key) {
-        enqueueRequest(
-                request,
-                key,
-                downloadQueue,
-                new DownloadImageWorkItem(request.getContext(), key));
-    }
-
-    private static void enqueueRequest(
-            ImageRequest request,
-            RequestKey key,
-            WorkQueue workQueue,
-            Runnable workItem) {
-        synchronized (pendingRequests) {
-            DownloaderContext downloaderContext = new DownloaderContext();
-            downloaderContext.request = request;
-            pendingRequests.put(key, downloaderContext);
-
-            // The creation of the WorkItem should be done after the pending request has been
-            // registered. This is necessary since the WorkItem might kick off right away and
-            // attempt to retrieve the request's DownloaderContext prior to it being ready for
-            // access.
-            //
-            // It is also necessary to hold on to the lock until after the workItem is created,
-            // since calls to cancelRequest or prioritizeRequest might come in and expect a
-            // registered request to have a workItem available as well.
-            downloaderContext.workItem = workQueue.addActiveWorkItem(workItem);
-        }
-    }
-
-    private static void issueResponse(
-            RequestKey key,
-            final Exception error,
-            final Bitmap bitmap,
-            final boolean isCachedRedirect) {
-        // Once the old downloader context is removed, we are thread-safe since this is the
-        // only reference to it
-        DownloaderContext completedRequestContext = removePendingRequest(key);
-        if (completedRequestContext != null && !completedRequestContext.isCancelled) {
-            final ImageRequest request = completedRequestContext.request;
-            final ImageRequest.Callback callback = request.getCallback();
-            if (callback != null) {
-                getHandler().post(new Runnable() {
-                    @Override
-                    public void run() {
-                        ImageResponse response = new ImageResponse(
-                                request,
-                                error,
-                                isCachedRedirect,
-                                bitmap);
-                        callback.onCompleted(response);
-                    }
-                });
-            }
-        }
-    }
-
-    private static void readFromCache(
-            RequestKey key,
-            Context context,
-            boolean allowCachedRedirects) {
-        InputStream cachedStream = null;
-        boolean isCachedRedirect = false;
-        if (allowCachedRedirects) {
-            Uri redirectUri = UrlRedirectCache.getRedirectedUri(key.uri);
-            if (redirectUri != null) {
-                cachedStream = ImageResponseCache.getCachedImageStream(redirectUri, context);
-                isCachedRedirect = cachedStream != null;
-            }
-        }
-
-        if (!isCachedRedirect) {
-            cachedStream = ImageResponseCache.getCachedImageStream(key.uri, context);
-        }
-
-        if (cachedStream != null) {
-            // We were able to find a cached image.
-            Bitmap bitmap = BitmapFactory.decodeStream(cachedStream);
-            Utility.closeQuietly(cachedStream);
-            issueResponse(key, null, bitmap, isCachedRedirect);
-        } else {
-            // Once the old downloader context is removed, we are thread-safe since this is the
-            // only reference to it
-            DownloaderContext downloaderContext = removePendingRequest(key);
-            if (downloaderContext != null && !downloaderContext.isCancelled) {
-                enqueueDownload(downloaderContext.request, key);
-            }
-        }
-    }
-
-    private static void download(RequestKey key, Context context) {
-        HttpURLConnection connection = null;
-        InputStream stream = null;
-        Exception error = null;
-        Bitmap bitmap = null;
-        boolean issueResponse = true;
-
-        try {
-            URL url = new URL(key.uri.toString());
-            connection = (HttpURLConnection) url.openConnection();
-            connection.setInstanceFollowRedirects(false);
-
-            switch (connection.getResponseCode()) {
-                case HttpURLConnection.HTTP_MOVED_PERM:
-                case HttpURLConnection.HTTP_MOVED_TEMP:
-                    // redirect. So we need to perform further requests
-                    issueResponse = false;
-
-                    String redirectLocation = connection.getHeaderField("location");
-                    if (!Utility.isNullOrEmpty(redirectLocation)) {
-                        Uri redirectUri = Uri.parse(redirectLocation);
-                        UrlRedirectCache.cacheUriRedirect(key.uri, redirectUri);
-
-                        // Once the old downloader context is removed, we are thread-safe since this
-                        // is the only reference to it
-                        DownloaderContext downloaderContext = removePendingRequest(key);
-                        if (downloaderContext != null && !downloaderContext.isCancelled) {
-                            enqueueCacheRead(
-                                    downloaderContext.request,
-                                    new RequestKey(redirectUri, key.tag),
-                                    false);
-                        }
-                    }
-                    break;
-
-                case HttpURLConnection.HTTP_OK:
-                    // image should be available
-                    stream = ImageResponseCache.interceptAndCacheImageStream(context, connection);
-                    bitmap = BitmapFactory.decodeStream(stream);
-                    break;
-
-                default:
-                    stream = connection.getErrorStream();
-                    StringBuilder errorMessageBuilder = new StringBuilder();
-                    if (stream != null) {
-                        InputStreamReader reader = new InputStreamReader(stream);
-                        char[] buffer = new char[128];
-                        int bufferLength;
-                        while ((bufferLength = reader.read(buffer, 0, buffer.length)) > 0) {
-                            errorMessageBuilder.append(buffer, 0, bufferLength);
-                        }
-                        Utility.closeQuietly(reader);
-                    } else {
-                        errorMessageBuilder.append(
-                            context.getString(R.string.com_facebook_image_download_unknown_error));
-                    }
-                    error = new FacebookException(errorMessageBuilder.toString());
-                    break;
-            }
-        } catch (IOException e) {
-            error = e;
-        } finally {
-            Utility.closeQuietly(stream);
-            Utility.disconnectQuietly(connection);
-        }
-
-        if (issueResponse) {
-            issueResponse(key, error, bitmap, false);
-        }
-    }
-
-    private static synchronized Handler getHandler() {
-        if (handler == null) {
-            handler = new Handler(Looper.getMainLooper());
-        }
-        return handler;
-    }
-
-    private static DownloaderContext removePendingRequest(RequestKey key) {
-        synchronized (pendingRequests) {
-            return pendingRequests.remove(key);
-        }
-    }
-
-    private static class RequestKey {
-        private static final int HASH_SEED = 29; // Some random prime number
-        private static final int HASH_MULTIPLIER = 37; // Some random prime number
-
-        Uri uri;
-        Object tag;
-
-        RequestKey(Uri url, Object tag) {
-            this.uri = url;
-            this.tag = tag;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = HASH_SEED;
-
-            result = (result * HASH_MULTIPLIER) + uri.hashCode();
-            result = (result * HASH_MULTIPLIER) + tag.hashCode();
-
-            return result;
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            boolean isEqual = false;
-
-            if (o != null && o instanceof RequestKey) {
-                RequestKey compareTo = (RequestKey)o;
-                isEqual = compareTo.uri == uri && compareTo.tag == tag;
-            }
-
-            return isEqual;
-        }
-    }
-
-    private static class DownloaderContext {
-        WorkQueue.WorkItem workItem;
-        ImageRequest request;
-        boolean isCancelled;
-    }
-
-    private static class CacheReadWorkItem implements Runnable {
-        private Context context;
-        private RequestKey key;
-        private boolean allowCachedRedirects;
-
-        CacheReadWorkItem(Context context, RequestKey key, boolean allowCachedRedirects) {
-            this.context = context;
-            this.key = key;
-            this.allowCachedRedirects = allowCachedRedirects;
-        }
-
-        @Override
-        public void run() {
-            readFromCache(key, context, allowCachedRedirects);
-        }
-    }
-
-    private static class DownloadImageWorkItem implements Runnable {
-        private Context context;
-        private RequestKey key;
-
-        DownloadImageWorkItem(Context context, RequestKey key) {
-            this.context = context;
-            this.key = key;
-        }
-
-        @Override
-        public void run() {
-            download(key, context);
-        }
-
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/ImageRequest.java b/facebook/src/main/java/com/facebook/internal/ImageRequest.java
deleted file mode 100644
index f0dbfbf3e..000000000
--- a/facebook/src/main/java/com/facebook/internal/ImageRequest.java
+++ /dev/null
@@ -1,158 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.net.Uri;
-
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.Locale;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class ImageRequest {
-
-    public interface Callback {
-        /**
-         * This method should always be called on the UI thread. ImageDownloader makes
-         * sure to do this when it is responsible for issuing the ImageResponse
-         * @param response
-         */
-        void onCompleted(ImageResponse response);
-    }
-
-    public static final int UNSPECIFIED_DIMENSION = 0;
-
-    private static final String SCHEME = "https";
-    private static final String AUTHORITY = "graph.facebook.com";
-    private static final String PATH = "%s/picture";
-    private static final String HEIGHT_PARAM = "height";
-    private static final String WIDTH_PARAM = "width";
-    private static final String MIGRATION_PARAM = "migration_overrides";
-    private static final String MIGRATION_VALUE = "{october_2012:true}";
-
-    private Context context;
-    private Uri imageUri;
-    private Callback callback;
-    private boolean allowCachedRedirects;
-    private Object callerTag;
-
-    public static Uri getProfilePictureUri(
-            String userId,
-            int width,
-            int height) {
-
-        Validate.notNullOrEmpty(userId, "userId");
-
-        width = Math.max(width, UNSPECIFIED_DIMENSION);
-        height = Math.max(height, UNSPECIFIED_DIMENSION);
-
-        if (width == UNSPECIFIED_DIMENSION && height == UNSPECIFIED_DIMENSION) {
-            throw new IllegalArgumentException("Either width or height must be greater than 0");
-        }
-
-        Uri.Builder builder =
-                new Uri.Builder()
-                        .scheme(SCHEME)
-                        .authority(AUTHORITY)
-                        .path(String.format(Locale.US, PATH, userId));
-
-        if (height != UNSPECIFIED_DIMENSION) {
-            builder.appendQueryParameter(HEIGHT_PARAM, String.valueOf(height));
-        }
-
-        if (width != UNSPECIFIED_DIMENSION) {
-            builder.appendQueryParameter(WIDTH_PARAM, String.valueOf(width));
-        }
-
-        builder.appendQueryParameter(MIGRATION_PARAM, MIGRATION_VALUE);
-
-        return builder.build();
-    }
-
-    private ImageRequest(Builder builder) {
-        this.context = builder.context;
-        this.imageUri = builder.imageUrl;
-        this.callback = builder.callback;
-        this.allowCachedRedirects = builder.allowCachedRedirects;
-        this.callerTag = builder.callerTag == null ? new Object() : builder.callerTag;
-    }
-
-    public Context getContext() {
-        return context;
-    }
-
-    public Uri getImageUri() {
-        return imageUri;
-    }
-
-    public Callback getCallback() {
-        return callback;
-    }
-
-    public boolean isCachedRedirectAllowed() {
-        return allowCachedRedirects;
-    }
-
-    public Object getCallerTag() {
-        return callerTag;
-    }
-
-    public static class Builder {
-        // Required
-        private Context context;
-        private Uri imageUrl;
-
-        // Optional
-        private Callback callback;
-        private boolean allowCachedRedirects;
-        private Object callerTag;
-
-        public Builder(Context context, Uri imageUri) {
-            Validate.notNull(imageUri, "imageUri");
-            this.context = context;
-            this.imageUrl = imageUri;
-        }
-
-        public Builder setCallback(Callback callback) {
-            this.callback = callback;
-            return this;
-        }
-
-        public Builder setCallerTag(Object callerTag) {
-            this.callerTag = callerTag;
-            return this;
-        }
-
-        public Builder setAllowCachedRedirects(boolean allowCachedRedirects) {
-            this.allowCachedRedirects = allowCachedRedirects;
-            return this;
-        }
-
-        public ImageRequest build() {
-            return new ImageRequest(this);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/ImageResponse.java b/facebook/src/main/java/com/facebook/internal/ImageResponse.java
deleted file mode 100644
index d62920eb8..000000000
--- a/facebook/src/main/java/com/facebook/internal/ImageResponse.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.graphics.Bitmap;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class ImageResponse {
-
-    private ImageRequest request;
-    private Exception error;
-    private boolean isCachedRedirect;
-    private Bitmap bitmap;
-
-    ImageResponse(ImageRequest request, Exception error, boolean isCachedRedirect, Bitmap bitmap) {
-        this.request = request;
-        this.error = error;
-        this.bitmap = bitmap;
-        this.isCachedRedirect = isCachedRedirect;
-    }
-
-    public ImageRequest getRequest() {
-        return request;
-    }
-
-    public Exception getError() {
-        return error;
-    }
-
-    public Bitmap getBitmap() {
-        return bitmap;
-    }
-
-    public boolean isCachedRedirect() {
-        return isCachedRedirect;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java b/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
deleted file mode 100644
index 847c441d4..000000000
--- a/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.net.Uri;
-import android.util.Log;
-import com.facebook.LoggingBehavior;
-
-import java.io.BufferedInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-class ImageResponseCache {
-    static final String TAG = ImageResponseCache.class.getSimpleName();
-
-    private volatile static FileLruCache imageCache;
-
-    synchronized static FileLruCache getCache(Context context) throws IOException{
-        if (imageCache == null) {
-            imageCache = new FileLruCache(TAG, new FileLruCache.Limits());
-        }
-        return imageCache;
-    }
-
-    // Get stream from cache, or return null if the image is not cached.
-    // Does not throw if there was an error.
-    static InputStream getCachedImageStream(Uri uri, Context context) {
-        InputStream imageStream = null;
-        if (uri != null) {
-            if (isCDNURL(uri)) {
-                try {
-                    FileLruCache cache = getCache(context);
-                    imageStream = cache.get(uri.toString());
-                } catch (IOException e) {
-                    Logger.log(LoggingBehavior.CACHE, Log.WARN, TAG, e.toString());
-                }
-            }
-        }
-
-        return imageStream;
-    }
-
-    static InputStream interceptAndCacheImageStream(
-            Context context,
-            HttpURLConnection connection
-    ) throws IOException {
-        InputStream stream = null;
-        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
-            Uri uri = Uri.parse(connection.getURL().toString());
-            stream = connection.getInputStream(); // Default stream in case caching fails
-            try {
-                if (isCDNURL(uri)) {
-                    FileLruCache cache = getCache(context);
-
-                    // Wrap stream with a caching stream
-                    stream = cache.interceptAndPut(
-                            uri.toString(),
-                            new BufferedHttpInputStream(stream, connection));
-                }
-            } catch (IOException e) {
-                // Caching is best effort
-            }
-        }
-        return stream;
-    }
-
-   private static boolean isCDNURL(Uri uri) {
-        if (uri != null) {
-            String uriHost = uri.getHost();
-
-            if (uriHost.endsWith("fbcdn.net")) {
-                return true;
-            }
-
-            if (uriHost.startsWith("fbcdn") && uriHost.endsWith("akamaihd.net")) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    static void clearCache(Context context) {
-        try {
-            getCache(context).clearCache();
-        } catch (IOException e) {
-            Logger.log(LoggingBehavior.CACHE, Log.WARN, TAG, "clearCache failed " + e.getMessage());
-        }
-    }
-
-    private static class BufferedHttpInputStream extends BufferedInputStream {
-        HttpURLConnection connection;
-        BufferedHttpInputStream(InputStream stream, HttpURLConnection connection) {
-            super(stream, Utility.DEFAULT_STREAM_BUFFER_SIZE);
-            this.connection = connection;
-        }
-
-        @Override
-        public void close() throws IOException {
-            super.close();
-            Utility.disconnectQuietly(connection);
-        }
-    }
-}
-
diff --git a/facebook/src/main/java/com/facebook/internal/InternalSettings.java b/facebook/src/main/java/com/facebook/internal/InternalSettings.java
deleted file mode 100644
index 16a2d2929..000000000
--- a/facebook/src/main/java/com/facebook/internal/InternalSettings.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-public class InternalSettings {
-    /**
-     * This value is used by the unity sdk to set the custom version. The user agent format is
-     * sdk_version/custom_user_agent
-     * For example
-     * FBAndroidSDK.4.2.0/Unity.7.0.1
-     */
-    private static volatile String mCustomUserAgent;
-
-    public static void setCustomUserAgent(String customUserAgent) {
-        mCustomUserAgent = customUserAgent;
-    }
-
-    public static String getCustomUserAgent() {
-        return mCustomUserAgent;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/JsonUtil.java b/facebook/src/main/java/com/facebook/internal/JsonUtil.java
deleted file mode 100644
index 021f9a7ef..000000000
--- a/facebook/src/main/java/com/facebook/internal/JsonUtil.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.annotation.SuppressLint;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-class JsonUtil {
-    static void jsonObjectClear(JSONObject jsonObject) {
-        @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
-        while (keys.hasNext()) {
-            keys.next();
-            keys.remove();
-        }
-    }
-
-    static boolean jsonObjectContainsValue(JSONObject jsonObject, Object value) {
-        @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
-        while (keys.hasNext()) {
-            Object thisValue = jsonObject.opt(keys.next());
-            if (thisValue != null && thisValue.equals(value)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    private final static class JSONObjectEntry implements Map.Entry<String, Object> {
-        private final String key;
-        private final Object value;
-
-        JSONObjectEntry(String key, Object value) {
-            this.key = key;
-            this.value = value;
-        }
-
-        @SuppressLint("FieldGetter")
-        @Override
-        public String getKey() {
-            return this.key;
-        }
-
-        @Override
-        public Object getValue() {
-            return this.value;
-        }
-
-        @Override
-        public Object setValue(Object object) {
-            throw new UnsupportedOperationException("JSONObjectEntry is immutable");
-        }
-
-    }
-
-    static Set<Map.Entry<String, Object>> jsonObjectEntrySet(JSONObject jsonObject) {
-        HashSet<Map.Entry<String, Object>> result = new HashSet<Map.Entry<String, Object>>();
-
-        @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
-        while (keys.hasNext()) {
-            String key = keys.next();
-            Object value = jsonObject.opt(key);
-            result.add(new JSONObjectEntry(key, value));
-        }
-
-        return result;
-    }
-
-    static Set<String> jsonObjectKeySet(JSONObject jsonObject) {
-        HashSet<String> result = new HashSet<String>();
-
-        @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
-        while (keys.hasNext()) {
-            result.add(keys.next());
-        }
-
-        return result;
-    }
-
-    static void jsonObjectPutAll(JSONObject jsonObject, Map<String, Object> map) {
-        Set<Map.Entry<String, Object>> entrySet = map.entrySet();
-        for (Map.Entry<String, Object> entry : entrySet) {
-            try {
-                jsonObject.putOpt(entry.getKey(), entry.getValue());
-            } catch (JSONException e) {
-                throw new IllegalArgumentException(e);
-            }
-        }
-    }
-
-    static Collection<Object> jsonObjectValues(JSONObject jsonObject) {
-        ArrayList<Object> result = new ArrayList<Object>();
-
-        @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
-        while (keys.hasNext()) {
-            result.add(jsonObject.opt(keys.next()));
-        }
-
-        return result;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/LockOnGetVariable.java b/facebook/src/main/java/com/facebook/internal/LockOnGetVariable.java
deleted file mode 100644
index baa327283..000000000
--- a/facebook/src/main/java/com/facebook/internal/LockOnGetVariable.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookSdk;
-
-import java.util.concurrent.Callable;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.FutureTask;
-
-public class LockOnGetVariable<T> {
-    private T value;
-    private CountDownLatch initLatch;
-
-    public LockOnGetVariable(T value) {
-        this.value = value;
-    }
-
-    public LockOnGetVariable(final Callable<T> callable) {
-        initLatch = new CountDownLatch(1);
-        FacebookSdk.getExecutor().execute(
-                new FutureTask<>(new Callable<Void>() {
-                    @Override
-                    public Void call() throws Exception {
-                        try {
-                            LockOnGetVariable.this.value = callable.call();
-                        } finally {
-                            initLatch.countDown();
-                        }
-                        return null;
-                    }
-                }));
-    }
-
-    public T getValue() {
-        this.waitOnInit();
-        return this.value;
-    }
-
-    private void waitOnInit() {
-        if (initLatch == null) {
-            return;
-        }
-
-        try {
-            initLatch.await();
-        } catch (InterruptedException ex) {
-            // ignore
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/Logger.java b/facebook/src/main/java/com/facebook/internal/Logger.java
deleted file mode 100644
index 4a66819a3..000000000
--- a/facebook/src/main/java/com/facebook/internal/Logger.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.util.Log;
-
-import com.facebook.FacebookSdk;
-import com.facebook.LoggingBehavior;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class Logger {
-    public static final String LOG_TAG_BASE = "FacebookSDK.";
-    private static final HashMap<String, String> stringsToReplace = new HashMap<String, String>();
-
-    private final LoggingBehavior behavior;
-    private final String tag;
-    private StringBuilder contents;
-    private int priority = Log.DEBUG;
-
-    // Note that the mapping of replaced strings is never emptied, so it should be used only for
-    // things that are not expected to be too numerous, such as access tokens.
-    public synchronized static void registerStringToReplace(String original, String replace) {
-        stringsToReplace.put(original, replace);
-    }
-
-    public synchronized static void registerAccessToken(String accessToken) {
-        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.INCLUDE_ACCESS_TOKENS) == false) {
-            registerStringToReplace(accessToken, "ACCESS_TOKEN_REMOVED");
-        }
-    }
-
-    public static void log(LoggingBehavior behavior, String tag, String string) {
-        log(behavior, Log.DEBUG, tag, string);
-    }
-
-
-    public static void log(LoggingBehavior behavior, String tag, String format, Object... args) {
-        if (FacebookSdk.isLoggingBehaviorEnabled(behavior)) {
-            String string = String.format(format, args);
-            log(behavior, Log.DEBUG, tag, string);
-        }
-    }
-
-    public static void log(
-            LoggingBehavior behavior,
-            int priority,
-            String tag,
-            String format,
-            Object... args) {
-        if (FacebookSdk.isLoggingBehaviorEnabled(behavior)) {
-            String string = String.format(format, args);
-            log(behavior, priority, tag, string);
-        }
-    }
-
-    public static void log(LoggingBehavior behavior, int priority, String tag, String string) {
-        if (FacebookSdk.isLoggingBehaviorEnabled(behavior)) {
-            string = replaceStrings(string);
-            if (tag.startsWith(LOG_TAG_BASE) == false) {
-                tag = LOG_TAG_BASE + tag;
-            }
-            Log.println(priority, tag, string);
-
-            // Developer errors warrant special treatment by printing out a stack trace, to make
-            // both more noticeable, and let the source of the problem be more easily pinpointed.
-            if (behavior == LoggingBehavior.DEVELOPER_ERRORS) {
-                (new Exception()).printStackTrace();
-            }
-        }
-    }
-
-    private synchronized static String replaceStrings(String string) {
-        for (Map.Entry<String, String> entry : stringsToReplace.entrySet()) {
-            string = string.replace(entry.getKey(), entry.getValue());
-        }
-        return string;
-    }
-
-    public Logger(LoggingBehavior behavior, String tag) {
-        Validate.notNullOrEmpty(tag, "tag");
-
-        this.behavior = behavior;
-        this.tag = LOG_TAG_BASE + tag;
-        this.contents = new StringBuilder();
-    }
-
-    public int getPriority() {
-        return priority;
-    }
-
-    public void setPriority(int value) {
-        Validate.oneOf(
-                value, "value", Log.ASSERT, Log.DEBUG, Log.ERROR, Log.INFO, Log.VERBOSE, Log.WARN);
-
-        priority = value;
-    }
-
-    public String getContents() {
-        return replaceStrings(contents.toString());
-    }
-
-    // Writes the accumulated contents, then clears contents to start again.
-    public void log() {
-        logString(contents.toString());
-        contents = new StringBuilder();
-    }
-
-    // Immediately logs a string, ignoring any accumulated contents, which are left unchanged.
-    public void logString(String string) {
-        log(behavior, priority, tag, string);
-    }
-
-    public void append(StringBuilder stringBuilder) {
-        if (shouldLog()) {
-            contents.append(stringBuilder);
-        }
-    }
-
-    public void append(String string) {
-        if (shouldLog()) {
-            contents.append(string);
-        }
-    }
-
-    public void append(String format, Object... args) {
-        if (shouldLog()) {
-            contents.append(String.format(format, args));
-        }
-    }
-
-    public void appendKeyValue(String key, Object value) {
-        append("  %s:\t%s\n", key, value);
-    }
-
-    private boolean shouldLog() {
-        return FacebookSdk.isLoggingBehaviorEnabled(behavior);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/LoginAuthorizationType.java b/facebook/src/main/java/com/facebook/internal/LoginAuthorizationType.java
deleted file mode 100644
index 278a8c739..000000000
--- a/facebook/src/main/java/com/facebook/internal/LoginAuthorizationType.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public enum LoginAuthorizationType {
-    READ,
-    PUBLISH
-}
diff --git a/facebook/src/main/java/com/facebook/internal/Mutable.java b/facebook/src/main/java/com/facebook/internal/Mutable.java
deleted file mode 100644
index e422ce3b7..000000000
--- a/facebook/src/main/java/com/facebook/internal/Mutable.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class Mutable<T> {
-    public T value;
-
-    public Mutable(T value) {
-        this.value = value;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java b/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
deleted file mode 100644
index 18814f355..000000000
--- a/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
+++ /dev/null
@@ -1,273 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.util.Log;
-
-import com.facebook.FacebookContentProvider;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-
-import java.io.*;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.UUID;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- *
- * <p>This class works in conjunction with {@link com.facebook.FacebookContentProvider} to allow
- * apps to attach binary attachments (e.g., images) to native dialogs launched via the sdk.It stores
- * attachments in temporary files and allows the Facebook application to retrieve them via the
- * content provider.</p>
- */
-public final class NativeAppCallAttachmentStore {
-    private static final String TAG = NativeAppCallAttachmentStore.class.getName();
-    static final String ATTACHMENTS_DIR_NAME = "com.facebook.NativeAppCallAttachmentStore.files";
-    private static File attachmentsDirectory;
-
-    private NativeAppCallAttachmentStore() {}
-
-    public static Attachment createAttachment(UUID callId, Bitmap attachmentBitmap) {
-        Validate.notNull(callId, "callId");
-        Validate.notNull(attachmentBitmap, "attachmentBitmap");
-
-        return new Attachment(callId, attachmentBitmap, null);
-    }
-
-    public static Attachment createAttachment(UUID callId, Uri attachmentUri) {
-        Validate.notNull(callId, "callId");
-        Validate.notNull(attachmentUri, "attachmentUri");
-
-        return new Attachment(callId, null, attachmentUri);
-    }
-
-    private static void processAttachmentBitmap(Bitmap bitmap, File outputFile) throws IOException {
-        FileOutputStream outputStream = new FileOutputStream(outputFile);
-        try {
-            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);
-        } finally {
-            Utility.closeQuietly(outputStream);
-        }
-    }
-
-    private static void processAttachmentFile(
-            Uri imageUri,
-            boolean isContentUri,
-            File outputFile) throws IOException {
-        FileOutputStream outputStream = new FileOutputStream(outputFile);
-        try {
-            InputStream inputStream = null;
-            if (!isContentUri) {
-                inputStream = new FileInputStream(imageUri.getPath());
-            } else {
-                inputStream = FacebookSdk
-                        .getApplicationContext()
-                        .getContentResolver()
-                        .openInputStream(imageUri);
-            }
-
-            Utility.copyAndCloseInputStream(inputStream, outputStream);
-        } finally {
-            Utility.closeQuietly(outputStream);
-        }
-    }
-
-    public static void addAttachments(Collection<Attachment> attachments) {
-        if (attachments == null || attachments.size() == 0) {
-            return;
-        }
-
-        // If this is the first time we've been instantiated, clean up any existing attachments.
-        if (attachmentsDirectory == null) {
-            cleanupAllAttachments();
-        }
-
-        ensureAttachmentsDirectoryExists();
-
-        List<File> filesToCleanup = new ArrayList<>();
-
-        try {
-            for (Attachment attachment : attachments) {
-                if (!attachment.shouldCreateFile) {
-                    continue;
-                }
-
-                File file = getAttachmentFile(
-                        attachment.callId,
-                        attachment.attachmentName,
-                        true);
-                filesToCleanup.add(file);
-
-                if (attachment.bitmap != null) {
-                    processAttachmentBitmap(attachment.bitmap, file);
-                } else if (attachment.originalUri != null) {
-                    processAttachmentFile(
-                            attachment.originalUri,
-                            attachment.isContentUri,
-                            file);
-                }
-            }
-        } catch (IOException exception) {
-            Log.e(TAG, "Got unexpected exception:" + exception);
-            for (File file : filesToCleanup) {
-                try {
-                    file.delete();
-                } catch (Exception e) {
-                    // Always try to delete other files.
-                }
-            }
-            throw new FacebookException(exception);
-        }
-    }
-
-    /**
-     * Removes any temporary files associated with a particular native app call.
-     *
-     * @param callId the unique ID of the call
-     */
-    public static void cleanupAttachmentsForCall(UUID callId) {
-        File dir = getAttachmentsDirectoryForCall(callId, false);
-        if (dir != null) {
-            Utility.deleteDirectory(dir);
-        }
-    }
-
-    public static File openAttachment(UUID callId, String attachmentName)
-            throws FileNotFoundException {
-        if (Utility.isNullOrEmpty(attachmentName) ||
-                callId == null) {
-            throw new FileNotFoundException();
-        }
-
-        try {
-            return getAttachmentFile(callId, attachmentName, false);
-        } catch (IOException e) {
-            // We don't try to create the file, so we shouldn't get any IOExceptions. But if we do,
-            // just act like the file wasn't found.
-            throw new FileNotFoundException();
-        }
-    }
-
-    synchronized static File getAttachmentsDirectory() {
-        if (attachmentsDirectory == null) {
-            attachmentsDirectory = new File(
-                    FacebookSdk.getApplicationContext().getCacheDir(),
-                    ATTACHMENTS_DIR_NAME);
-        }
-        return attachmentsDirectory;
-    }
-
-    static File ensureAttachmentsDirectoryExists() {
-        File dir = getAttachmentsDirectory();
-        dir.mkdirs();
-        return dir;
-    }
-
-    static File getAttachmentsDirectoryForCall(UUID callId, boolean create) {
-        if (attachmentsDirectory == null) {
-            return null;
-        }
-
-        File dir = new File(attachmentsDirectory, callId.toString());
-        if (create && !dir.exists()) {
-            dir.mkdirs();
-        }
-        return dir;
-    }
-
-    static File getAttachmentFile(
-            UUID callId,
-            String attachmentName,
-            boolean createDirs
-    ) throws IOException {
-        File dir = getAttachmentsDirectoryForCall(callId, createDirs);
-        if (dir == null) {
-            return null;
-        }
-
-        try {
-            return new File(dir, URLEncoder.encode(attachmentName, "UTF-8"));
-        } catch (UnsupportedEncodingException e) {
-            return null;
-        }
-    }
-
-    public static void cleanupAllAttachments() {
-        // Attachments directory may or may not exist; we won't create it if not, since we are just
-        // going to delete it.
-        File dir = getAttachmentsDirectory();
-        Utility.deleteDirectory(dir);
-    }
-
-    public static final class Attachment {
-        private final UUID callId;
-        private final String attachmentUrl;
-        private final String attachmentName;
-
-        private Bitmap bitmap;
-        private Uri originalUri;
-
-        private boolean isContentUri;
-        private boolean shouldCreateFile;
-
-        private Attachment(UUID callId, Bitmap bitmap, Uri uri) {
-            this.callId = callId;
-            this.bitmap = bitmap;
-            this.originalUri = uri;
-
-            if (uri != null) {
-                String scheme = uri.getScheme();
-                if ("content".equalsIgnoreCase(scheme)) {
-                    isContentUri = true;
-                    shouldCreateFile = uri.getAuthority() != null &&
-                            !uri.getAuthority().startsWith("media");
-                } else if ("file".equalsIgnoreCase(uri.getScheme())) {
-                    shouldCreateFile = true;
-                } else if (!Utility.isWebUri(uri)) {
-                    throw new FacebookException("Unsupported scheme for media Uri : " + scheme);
-                }
-            } else if (bitmap != null) {
-                shouldCreateFile = true;
-            } else {
-                throw new FacebookException("Cannot share media without a bitmap or Uri set");
-            }
-
-            attachmentName = !shouldCreateFile ? null : UUID.randomUUID().toString();
-            attachmentUrl = !shouldCreateFile
-                    ? this.originalUri.toString()
-                    : FacebookContentProvider.getAttachmentUrl(
-                            FacebookSdk.getApplicationId(),
-                            callId,
-                            attachmentName);
-        }
-
-        public String getAttachmentUrl() {
-            return attachmentUrl;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
deleted file mode 100644
index 3625a3479..000000000
--- a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
+++ /dev/null
@@ -1,957 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.*;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookSdk;
-import com.facebook.login.DefaultAudience;
-
-import java.util.*;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public final class NativeProtocol {
-
-    public static final int NO_PROTOCOL_AVAILABLE = -1;
-
-    private static final String TAG = NativeProtocol.class.getName();
-
-    private static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
-    private static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY =
-            "com.facebook.katana.platform.TokenRefreshService";
-
-    public static final String FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY = "scope";
-    public static final String FACEBOOK_PROXY_AUTH_APP_ID_KEY = "client_id";
-    public static final String FACEBOOK_PROXY_AUTH_E2E_KEY = "e2e";
-
-    // ---------------------------------------------------------------------------------------------
-    // Native Protocol updated 2012-11
-
-    static final String INTENT_ACTION_PLATFORM_ACTIVITY = "com.facebook.platform.PLATFORM_ACTIVITY";
-    static final String INTENT_ACTION_PLATFORM_SERVICE = "com.facebook.platform.PLATFORM_SERVICE";
-
-    public static final int PROTOCOL_VERSION_20121101 = 20121101;
-    public static final int PROTOCOL_VERSION_20130502 = 20130502;
-    public static final int PROTOCOL_VERSION_20130618 = 20130618;
-    public static final int PROTOCOL_VERSION_20131107 = 20131107;
-    public static final int PROTOCOL_VERSION_20140204 = 20140204;
-    public static final int PROTOCOL_VERSION_20140324 = 20140324;
-    public static final int PROTOCOL_VERSION_20140701 = 20140701;
-    public static final int PROTOCOL_VERSION_20141001 = 20141001;
-    public static final int PROTOCOL_VERSION_20141028 = 20141028;
-    public static final int PROTOCOL_VERSION_20141107 = 20141107; // Bucketed Result Intents
-    public static final int PROTOCOL_VERSION_20141218 = 20141218;
-    public static final int PROTOCOL_VERSION_20160327 = 20160327;
-
-    public static final String EXTRA_PROTOCOL_VERSION =
-            "com.facebook.platform.protocol.PROTOCOL_VERSION";
-    public static final String EXTRA_PROTOCOL_ACTION =
-            "com.facebook.platform.protocol.PROTOCOL_ACTION";
-    public static final String EXTRA_PROTOCOL_CALL_ID =
-            "com.facebook.platform.protocol.CALL_ID";
-    public static final String EXTRA_GET_INSTALL_DATA_PACKAGE =
-            "com.facebook.platform.extra.INSTALLDATA_PACKAGE";
-
-    public static final String EXTRA_PROTOCOL_BRIDGE_ARGS =
-            "com.facebook.platform.protocol.BRIDGE_ARGS";
-
-    public static final String EXTRA_PROTOCOL_METHOD_ARGS =
-            "com.facebook.platform.protocol.METHOD_ARGS";
-
-    public static final String EXTRA_PROTOCOL_METHOD_RESULTS =
-            "com.facebook.platform.protocol.RESULT_ARGS";
-
-    public static final String BRIDGE_ARG_APP_NAME_STRING = "app_name";
-    public static final String BRIDGE_ARG_ACTION_ID_STRING = "action_id";
-    public static final String BRIDGE_ARG_ERROR_BUNDLE = "error";
-
-    public static final String EXTRA_DIALOG_COMPLETE_KEY =
-            "com.facebook.platform.extra.DID_COMPLETE";
-    public static final String EXTRA_DIALOG_COMPLETION_GESTURE_KEY =
-            "com.facebook.platform.extra.COMPLETION_GESTURE";
-
-    public static final String RESULT_ARGS_DIALOG_COMPLETE_KEY = "didComplete";
-    public static final String RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY = "completionGesture";
-
-    // Messages supported by PlatformService:
-    public static final int MESSAGE_GET_ACCESS_TOKEN_REQUEST    = 0x10000;
-    public static final int MESSAGE_GET_ACCESS_TOKEN_REPLY      = 0x10001;
-    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REQUEST      = 0x10002;
-    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REPLY        = 0x10003;
-    public static final int MESSAGE_GET_INSTALL_DATA_REQUEST    = 0x10004;
-    public static final int MESSAGE_GET_INSTALL_DATA_REPLY      = 0x10005;
-    public static final int MESSAGE_GET_LIKE_STATUS_REQUEST     = 0x10006;
-    public static final int MESSAGE_GET_LIKE_STATUS_REPLY       = 0x10007;
-
-    // MESSAGE_ERROR_REPLY data keys:
-    // See STATUS_*
-
-    // MESSAGE_GET_ACCESS_TOKEN_REQUEST data keys:
-    // EXTRA_APPLICATION_ID
-
-    // MESSAGE_GET_ACCESS_TOKEN_REPLY data keys:
-    // EXTRA_ACCESS_TOKEN
-    // EXTRA_EXPIRES_SECONDS_SINCE_EPOCH
-    // EXTRA_PERMISSIONS
-
-    // MESSAGE_GET_LIKE_STATUS_REQUEST data keys:
-    // EXTRA_APPLICATION_ID
-    // EXTRA_OBJECT_ID
-
-    // MESSAGE_GET_LIKE_STATUS_REPLY data keys:
-    // EXTRA_OBJECT_IS_LIKED
-    // EXTRA_LIKE_COUNT_STRING_WITH_LIKE
-    // EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE
-    // EXTRA_SOCIAL_SENTENCE_WITH_LIKE
-    // EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE
-    // EXTRA_UNLIKE_TOKEN
-
-    // MESSAGE_GET_PROTOCOL_VERSIONS_REPLY data keys:
-    static final String EXTRA_PROTOCOL_VERSIONS = "com.facebook.platform.extra.PROTOCOL_VERSIONS";
-
-    // Values of EXTRA_PROTOCOL_ACTION supported by PlatformActivity:
-    public static final String ACTION_FEED_DIALOG =
-            "com.facebook.platform.action.request.FEED_DIALOG";
-    public static final String ACTION_MESSAGE_DIALOG =
-            "com.facebook.platform.action.request.MESSAGE_DIALOG";
-    public static final String ACTION_OGACTIONPUBLISH_DIALOG =
-            "com.facebook.platform.action.request.OGACTIONPUBLISH_DIALOG";
-    public static final String ACTION_OGMESSAGEPUBLISH_DIALOG =
-            "com.facebook.platform.action.request.OGMESSAGEPUBLISH_DIALOG";
-    public static final String ACTION_LIKE_DIALOG =
-            "com.facebook.platform.action.request.LIKE_DIALOG";
-    // The value of ACTION_APPINVITE_DIALOG is different since that is what is on the server.
-    public static final String ACTION_APPINVITE_DIALOG =
-            "com.facebook.platform.action.request.APPINVITES_DIALOG";
-
-    // Extras supported for ACTION_LOGIN_DIALOG:
-    public static final String EXTRA_PERMISSIONS = "com.facebook.platform.extra.PERMISSIONS";
-    public static final String EXTRA_APPLICATION_ID = "com.facebook.platform.extra.APPLICATION_ID";
-    public static final String EXTRA_APPLICATION_NAME =
-            "com.facebook.platform.extra.APPLICATION_NAME";
-    public static final String EXTRA_USER_ID = "com.facebook.platform.extra.USER_ID";
-
-    // Extras returned by setResult() for ACTION_LOGIN_DIALOG
-    public static final String EXTRA_ACCESS_TOKEN = "com.facebook.platform.extra.ACCESS_TOKEN";
-    public static final String EXTRA_EXPIRES_SECONDS_SINCE_EPOCH =
-            "com.facebook.platform.extra.EXPIRES_SECONDS_SINCE_EPOCH";
-    // EXTRA_PERMISSIONS
-
-    public static final String RESULT_ARGS_ACCESS_TOKEN = "access_token";
-    public static final String RESULT_ARGS_EXPIRES_SECONDS_SINCE_EPOCH =
-            "expires_seconds_since_epoch";
-    public static final String RESULT_ARGS_PERMISSIONS = "permissions";
-
-    // OG objects will have this key to set to true if they should be created as part of OG Action
-    // publish
-    public static final String OPEN_GRAPH_CREATE_OBJECT_KEY = "fbsdk:create_object";
-    // Determines whether an image is user generated
-    public static final String IMAGE_USER_GENERATED_KEY = "user_generated";
-    // url key for images
-    public static final String IMAGE_URL_KEY = "url";
-
-    // Keys for status data in MESSAGE_ERROR_REPLY from PlatformService and for error
-    // extras returned by PlatformActivity's setResult() in case of errors:
-    public static final String STATUS_ERROR_TYPE = "com.facebook.platform.status.ERROR_TYPE";
-    public static final String STATUS_ERROR_DESCRIPTION =
-            "com.facebook.platform.status.ERROR_DESCRIPTION";
-    public static final String STATUS_ERROR_CODE = "com.facebook.platform.status.ERROR_CODE";
-    public static final String STATUS_ERROR_SUBCODE = "com.facebook.platform.status.ERROR_SUBCODE";
-    public static final String STATUS_ERROR_JSON = "com.facebook.platform.status.ERROR_JSON";
-
-    public static final String BRIDGE_ARG_ERROR_TYPE = "error_type";
-    public static final String BRIDGE_ARG_ERROR_DESCRIPTION = "error_description";
-    public static final String BRIDGE_ARG_ERROR_CODE = "error_code";
-    public static final String BRIDGE_ARG_ERROR_SUBCODE = "error_subcode";
-    public static final String BRIDGE_ARG_ERROR_JSON = "error_json";
-
-    // Expected values for ERROR_KEY_TYPE.  Clients should tolerate other values:
-    public static final String ERROR_UNKNOWN_ERROR = "UnknownError";
-    public static final String ERROR_PROTOCOL_ERROR = "ProtocolError";
-    public static final String ERROR_USER_CANCELED = "UserCanceled";
-    public static final String ERROR_APPLICATION_ERROR = "ApplicationError";
-    public static final String ERROR_NETWORK_ERROR = "NetworkError";
-    public static final String ERROR_PERMISSION_DENIED = "PermissionDenied";
-    public static final String ERROR_SERVICE_DISABLED = "ServiceDisabled";
-
-    public static final String WEB_DIALOG_URL = "url";
-    public static final String WEB_DIALOG_ACTION = "action";
-    public static final String WEB_DIALOG_PARAMS = "params";
-    public static final String WEB_DIALOG_IS_FALLBACK = "is_fallback";
-
-    public static final String AUDIENCE_ME = "only_me";
-    public static final String AUDIENCE_FRIENDS = "friends";
-    public static final String AUDIENCE_EVERYONE = "everyone";
-
-    private static final String CONTENT_SCHEME = "content://";
-    private static final String PLATFORM_PROVIDER = ".provider.PlatformProvider";
-    private static final String PLATFORM_PROVIDER_VERSIONS = PLATFORM_PROVIDER + "/versions";
-
-    // Columns returned by PlatformProvider
-    private static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
-
-    private static abstract class NativeAppInfo {
-        abstract protected String getPackage();
-        abstract protected String getLoginActivity();
-
-        private static final String FBI_HASH = "a4b7452e2ed8f5f191058ca7bbfd26b0d3214bfc";
-        private static final String FBL_HASH = "5e8f16062ea3cd2c4a0d547876baa6f38cabf625";
-        private static final String FBR_HASH = "8a3c4b262d721acd49a4bf97d5213199c86fa2b9";
-
-        private static final HashSet<String> validAppSignatureHashes = buildAppSignatureHashes();
-
-        private TreeSet<Integer> availableVersions;
-
-        private static HashSet<String> buildAppSignatureHashes() {
-            HashSet<String> set = new HashSet<String>();
-            set.add(FBR_HASH);
-            set.add(FBI_HASH);
-            set.add(FBL_HASH);
-            return set;
-        }
-
-        public boolean validateSignature(Context context, String packageName) {
-            String brand = Build.BRAND;
-            int applicationFlags = context.getApplicationInfo().flags;
-            if (brand.startsWith("generic") &&
-                    (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
-                // We are debugging on an emulator, don't validate package signature.
-                return true;
-            }
-
-            PackageInfo packageInfo = null;
-            try {
-                packageInfo = context.getPackageManager().getPackageInfo(packageName,
-                        PackageManager.GET_SIGNATURES);
-            } catch (PackageManager.NameNotFoundException e) {
-                return false;
-            }
-
-            // just in case
-            if (packageInfo.signatures == null || packageInfo.signatures.length <= 0) {
-                return false;
-            }
-
-            for (Signature signature : packageInfo.signatures) {
-                String hashedSignature = Utility.sha1hash(signature.toByteArray());
-                if (!validAppSignatureHashes.contains(hashedSignature)) {
-                    return false;
-                }
-            }
-
-            return true;
-        }
-
-        public TreeSet<Integer> getAvailableVersions() {
-            if (availableVersions == null) {
-                fetchAvailableVersions(false);
-            }
-            return availableVersions;
-        }
-
-        private synchronized void fetchAvailableVersions(boolean force) {
-            if (force || availableVersions == null) {
-                availableVersions = fetchAllAvailableProtocolVersionsForAppInfo(this);
-            }
-        }
-    }
-
-    private static class KatanaAppInfo extends NativeAppInfo {
-        static final String KATANA_PACKAGE = "com.facebook.katana";
-
-        @Override
-        protected String getPackage() {
-            return KATANA_PACKAGE;
-        }
-
-        @Override
-        protected String getLoginActivity() {
-            return FACEBOOK_PROXY_AUTH_ACTIVITY;
-        }
-    }
-
-    private static class MessengerAppInfo extends NativeAppInfo {
-        static final String MESSENGER_PACKAGE = "com.facebook.orca";
-
-        @Override
-        protected String getPackage() {
-            return MESSENGER_PACKAGE;
-        }
-
-        @Override
-        protected String getLoginActivity() {
-            return null;
-        }
-    }
-
-    private static class WakizashiAppInfo extends NativeAppInfo {
-        static final String WAKIZASHI_PACKAGE = "com.facebook.wakizashi";
-
-        @Override
-        protected String getPackage() {
-            return WAKIZASHI_PACKAGE;
-        }
-
-        @Override
-        protected String getLoginActivity() {
-            return FACEBOOK_PROXY_AUTH_ACTIVITY;
-        }
-    }
-
-    private static class FBLiteAppInfo extends NativeAppInfo {
-        static final String FBLITE_PACKAGE = "com.facebook.lite";
-        static final String FACEBOOK_LITE_ACTIVITY =
-                "com.facebook.lite.platform.LoginGDPDialogActivity";
-
-        @Override
-        protected String getPackage() {
-            return FBLITE_PACKAGE;
-        }
-
-        @Override
-        protected String getLoginActivity() {
-            return FACEBOOK_LITE_ACTIVITY;
-        }
-    }
-
-    private static List<NativeAppInfo> facebookAppInfoList = buildFacebookAppList();
-    private static Map<String, List<NativeAppInfo>> actionToAppInfoMap = buildActionToAppInfoMap();
-    private static AtomicBoolean protocolVersionsAsyncUpdating = new AtomicBoolean(false);
-
-    private static List<NativeAppInfo> buildFacebookAppList() {
-        List<NativeAppInfo> list = new ArrayList<NativeAppInfo>();
-
-        // Katana needs to be the first thing in the list since it will get selected as the default
-        // FACEBOOK_APP_INFO
-        list.add(new KatanaAppInfo());
-        list.add(new WakizashiAppInfo());
-
-        return list;
-    }
-
-    private static Map<String, List<NativeAppInfo>> buildActionToAppInfoMap() {
-        Map<String, List<NativeAppInfo>> map = new HashMap<String, List<NativeAppInfo>>();
-
-        ArrayList<NativeAppInfo> messengerAppInfoList = new ArrayList<NativeAppInfo>();
-        messengerAppInfoList.add(new MessengerAppInfo());
-
-        // Add individual actions and the list they should try
-        map.put(ACTION_OGACTIONPUBLISH_DIALOG, facebookAppInfoList);
-        map.put(ACTION_FEED_DIALOG, facebookAppInfoList);
-        map.put(ACTION_LIKE_DIALOG, facebookAppInfoList);
-        map.put(ACTION_APPINVITE_DIALOG, facebookAppInfoList);
-        map.put(ACTION_MESSAGE_DIALOG, messengerAppInfoList);
-        map.put(ACTION_OGMESSAGEPUBLISH_DIALOG, messengerAppInfoList);
-
-        return map;
-    }
-
-    static Intent validateActivityIntent(Context context, Intent intent, NativeAppInfo appInfo) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!appInfo.validateSignature(context, resolveInfo.activityInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    static Intent validateServiceIntent(Context context, Intent intent, NativeAppInfo appInfo) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveService(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!appInfo.validateSignature(context, resolveInfo.serviceInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    public static Intent createFacebookLiteIntent(
-            Context context,
-            String applicationId,
-            Collection<String> permissions,
-            String e2e,
-            boolean isRerequest,
-            boolean isForPublish,
-            DefaultAudience defaultAudience,
-            String clientState
-    ) {
-        NativeAppInfo appInfo = new FBLiteAppInfo();
-        Intent intent = createNativeAppIntent(
-                appInfo,
-                applicationId,
-                permissions,
-                e2e,
-                isRerequest,
-                isForPublish,
-                defaultAudience,
-                clientState);
-        intent = validateActivityIntent(context, intent, appInfo);
-
-        return intent;
-    }
-
-    private static Intent createNativeAppIntent(
-            NativeAppInfo appInfo,
-            String applicationId,
-            Collection<String> permissions,
-            String e2e,
-            boolean isRerequest,
-            boolean isForPublish,
-            DefaultAudience defaultAudience,
-            String clientState
-    ) {
-        String activityName = appInfo.getLoginActivity();
-        // the NativeApp doesn't have a login activity
-        if (activityName == null) {
-            return null;
-        }
-
-        Intent intent = new Intent()
-                .setClassName(appInfo.getPackage(), activityName)
-                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
-
-        if (!Utility.isNullOrEmpty(permissions)) {
-            intent.putExtra(
-                    FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-        }
-        if (!Utility.isNullOrEmpty(e2e)) {
-            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
-        }
-
-        intent.putExtra(ServerProtocol.DIALOG_PARAM_STATE, clientState);
-        intent.putExtra(
-                ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
-                ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
-        intent.putExtra(
-                ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
-                ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-        if (isForPublish) {
-            intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE,
-                    defaultAudience.getNativeProtocolAudience());
-        }
-
-        // Override the API Version for Auth
-        intent.putExtra(
-                ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
-                ServerProtocol.GRAPH_API_VERSION);
-
-        intent.putExtra(
-                ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
-                ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-        return intent;
-    }
-
-    public static Intent createProxyAuthIntent(
-            Context context,
-            String applicationId,
-            Collection<String> permissions,
-            String e2e,
-            boolean isRerequest,
-            boolean isForPublish,
-            DefaultAudience defaultAudience,
-            String clientState) {
-        for (NativeAppInfo appInfo : facebookAppInfoList) {
-            Intent intent = createNativeAppIntent(
-                    appInfo,
-                    applicationId,
-                    permissions,
-                    e2e,
-                    isRerequest,
-                    isForPublish,
-                    defaultAudience,
-                    clientState);
-            intent = validateActivityIntent(context, intent, appInfo);
-
-            if (intent != null) {
-                return intent;
-            }
-        }
-        return null;
-    }
-
-    public static Intent createTokenRefreshIntent(Context context) {
-        for (NativeAppInfo appInfo : facebookAppInfoList) {
-            Intent intent = new Intent()
-                    .setClassName(appInfo.getPackage(), FACEBOOK_TOKEN_REFRESH_ACTIVITY);
-
-            intent = validateServiceIntent(context, intent, appInfo);
-
-            if (intent != null) {
-                return intent;
-            }
-        }
-        return null;
-    }
-
-    public static final int getLatestKnownVersion() {
-        return KNOWN_PROTOCOL_VERSIONS.get(0);
-    }
-
-    // Note: be sure this stays sorted in descending order; add new versions at the beginning
-    private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
-            Arrays.asList(
-                    PROTOCOL_VERSION_20160327,
-                    PROTOCOL_VERSION_20141218,
-                    PROTOCOL_VERSION_20141107,
-                    PROTOCOL_VERSION_20141028,
-                    PROTOCOL_VERSION_20141001,
-                    PROTOCOL_VERSION_20140701,
-                    PROTOCOL_VERSION_20140324,
-                    PROTOCOL_VERSION_20140204,
-                    PROTOCOL_VERSION_20131107,
-                    PROTOCOL_VERSION_20130618,
-                    PROTOCOL_VERSION_20130502,
-                    PROTOCOL_VERSION_20121101
-            );
-
-    private static Intent findActivityIntent(
-            Context context,
-            String activityAction,
-            String internalAction) {
-        List<NativeAppInfo> list = actionToAppInfoMap.get(internalAction);
-        if (list == null) {
-            return null;
-        }
-
-        Intent intent = null;
-        for (NativeAppInfo appInfo : list) {
-            intent = new Intent()
-                    .setAction(activityAction)
-                    .setPackage(appInfo.getPackage())
-                    .addCategory(Intent.CATEGORY_DEFAULT);
-            intent = validateActivityIntent(context, intent, appInfo);
-            if (intent != null) {
-                return intent;
-            }
-        }
-
-        return intent;
-    }
-
-    public static boolean isVersionCompatibleWithBucketedIntent(int version) {
-        return KNOWN_PROTOCOL_VERSIONS.contains(version) && version >= PROTOCOL_VERSION_20140701;
-    }
-
-    /**
-     * Will create an Intent that can be used to invoke an action in a Facebook app via the
-     * Native Protocol
-     */
-    public static Intent createPlatformActivityIntent(
-            Context context,
-            String callId,
-            String action,
-            int version,
-            Bundle extras) {
-        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, action);
-        if (intent == null) {
-            return null;
-        }
-
-        setupProtocolRequestIntent(intent, callId, action, version, extras);
-
-        return intent;
-    }
-
-    /**
-     * Will setup the passed in Intent in the shape of a Native Protocol request Intent.
-     */
-    public static void setupProtocolRequestIntent(
-            Intent intent,
-            String callId,
-            String action,
-            int version,
-            Bundle params) {
-        String applicationId = FacebookSdk.getApplicationId();
-        String applicationName = FacebookSdk.getApplicationName();
-
-        intent.putExtra(EXTRA_PROTOCOL_VERSION, version)
-                .putExtra(EXTRA_PROTOCOL_ACTION, action)
-                .putExtra(EXTRA_APPLICATION_ID, applicationId);
-
-        if (isVersionCompatibleWithBucketedIntent(version)) {
-            // This is a bucketed intent
-            Bundle bridgeArguments = new Bundle();
-            bridgeArguments.putString(BRIDGE_ARG_ACTION_ID_STRING, callId);
-            Utility.putNonEmptyString(bridgeArguments, BRIDGE_ARG_APP_NAME_STRING, applicationName);
-
-            intent.putExtra(EXTRA_PROTOCOL_BRIDGE_ARGS, bridgeArguments);
-
-            Bundle methodArguments = (params == null) ? new Bundle() : params;
-            intent.putExtra(EXTRA_PROTOCOL_METHOD_ARGS, methodArguments);
-        } else {
-            // This is the older flat intent
-            intent.putExtra(EXTRA_PROTOCOL_CALL_ID, callId);
-            if (!Utility.isNullOrEmpty(applicationName)) {
-                intent.putExtra(EXTRA_APPLICATION_NAME, applicationName);
-            }
-            intent.putExtras(params);
-        }
-    }
-
-    /**
-     * Use this method to set a result on an Activity, where the result needs to be in the shape
-     * of the native protocol used for native dialogs.
-     */
-    public static Intent createProtocolResultIntent(
-            Intent requestIntent,
-            Bundle results,
-            FacebookException error) {
-        UUID callId = NativeProtocol.getCallIdFromIntent(requestIntent);
-        if (callId == null) {
-            return null;
-        }
-
-        Intent resultIntent = new Intent();
-        resultIntent.putExtra(EXTRA_PROTOCOL_VERSION, getProtocolVersionFromIntent(requestIntent));
-
-        Bundle bridgeArguments = new Bundle();
-        bridgeArguments.putString(BRIDGE_ARG_ACTION_ID_STRING, callId.toString());
-        if (error != null) {
-            bridgeArguments.putBundle(
-                    BRIDGE_ARG_ERROR_BUNDLE, NativeProtocol.createBundleForException(error));
-        }
-        resultIntent.putExtra(EXTRA_PROTOCOL_BRIDGE_ARGS, bridgeArguments);
-
-        if (results != null) {
-            resultIntent.putExtra(EXTRA_PROTOCOL_METHOD_RESULTS, results);
-        }
-
-        return resultIntent;
-    }
-
-    public static Intent createPlatformServiceIntent(Context context) {
-        for (NativeAppInfo appInfo : facebookAppInfoList) {
-            Intent intent = new Intent(INTENT_ACTION_PLATFORM_SERVICE)
-                    .setPackage(appInfo.getPackage())
-                    .addCategory(Intent.CATEGORY_DEFAULT);
-            intent = validateServiceIntent(context, intent, appInfo);
-            if (intent != null) {
-                return intent;
-            }
-        }
-        return null;
-    }
-
-    public static int getProtocolVersionFromIntent(Intent intent) {
-        return intent.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);
-    }
-
-    public static UUID getCallIdFromIntent(Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-        int version = getProtocolVersionFromIntent(intent);
-        String callIdString = null;
-        if (isVersionCompatibleWithBucketedIntent(version)) {
-            Bundle bridgeArgs = intent.getBundleExtra(EXTRA_PROTOCOL_BRIDGE_ARGS);
-            if (bridgeArgs != null) {
-                callIdString = bridgeArgs.getString(BRIDGE_ARG_ACTION_ID_STRING);
-            }
-        } else {
-            callIdString = intent.getStringExtra(EXTRA_PROTOCOL_CALL_ID);
-        }
-
-        UUID callId = null;
-        if (callIdString != null) {
-            try {
-                callId = UUID.fromString(callIdString);
-            } catch (IllegalArgumentException exception) {
-            }
-        }
-        return callId;
-    }
-
-    public static Bundle getBridgeArgumentsFromIntent(Intent intent) {
-        int version = getProtocolVersionFromIntent(intent);
-        if (!isVersionCompatibleWithBucketedIntent(version)) {
-            return null;
-        }
-
-        return intent.getBundleExtra(EXTRA_PROTOCOL_BRIDGE_ARGS);
-    }
-
-    public static Bundle getMethodArgumentsFromIntent(Intent intent) {
-        int version = getProtocolVersionFromIntent(intent);
-        if (!isVersionCompatibleWithBucketedIntent(version)) {
-            return intent.getExtras();
-        }
-
-        return intent.getBundleExtra(EXTRA_PROTOCOL_METHOD_ARGS);
-    }
-
-    public static Bundle getSuccessResultsFromIntent(Intent resultIntent) {
-        int version = getProtocolVersionFromIntent(resultIntent);
-        Bundle extras = resultIntent.getExtras();
-        if (!isVersionCompatibleWithBucketedIntent(version) || extras == null) {
-            return extras;
-        }
-
-        return extras.getBundle(EXTRA_PROTOCOL_METHOD_RESULTS);
-    }
-
-    public static boolean isErrorResult(Intent resultIntent) {
-        Bundle bridgeArgs = getBridgeArgumentsFromIntent(resultIntent);
-        if (bridgeArgs != null) {
-            return bridgeArgs.containsKey(BRIDGE_ARG_ERROR_BUNDLE);
-        } else {
-            return resultIntent.hasExtra(STATUS_ERROR_TYPE);
-        }
-    }
-
-    public static Bundle getErrorDataFromResultIntent(Intent resultIntent) {
-        if (!isErrorResult(resultIntent)) {
-            return null;
-        }
-
-        Bundle bridgeArgs = getBridgeArgumentsFromIntent(resultIntent);
-        if (bridgeArgs != null) {
-            return bridgeArgs.getBundle(BRIDGE_ARG_ERROR_BUNDLE);
-        }
-
-        return resultIntent.getExtras();
-    }
-
-    public static FacebookException getExceptionFromErrorData(Bundle errorData) {
-        if (errorData == null) {
-            return null;
-        }
-
-        String type = errorData.getString(BRIDGE_ARG_ERROR_TYPE);
-        if (type == null) {
-            type = errorData.getString(STATUS_ERROR_TYPE);
-        }
-
-        String description = errorData.getString(BRIDGE_ARG_ERROR_DESCRIPTION);
-        if (description == null) {
-            description = errorData.getString(STATUS_ERROR_DESCRIPTION);
-        }
-
-        if (type != null && type.equalsIgnoreCase(ERROR_USER_CANCELED)) {
-            return new FacebookOperationCanceledException(description);
-        }
-
-        /* TODO parse error values and create appropriate exception class */
-        return new FacebookException(description);
-    }
-
-    public static Bundle createBundleForException(FacebookException e) {
-        if (e == null) {
-            return null;
-        }
-
-        Bundle errorBundle = new Bundle();
-        errorBundle.putString(BRIDGE_ARG_ERROR_DESCRIPTION, e.toString());
-        if (e instanceof FacebookOperationCanceledException) {
-            errorBundle.putString(BRIDGE_ARG_ERROR_TYPE, ERROR_USER_CANCELED);
-        }
-
-        return errorBundle;
-    }
-
-    public static int getLatestAvailableProtocolVersionForService(final int minimumVersion) {
-        // Services are currently always against the Facebook App
-        return getLatestAvailableProtocolVersionForAppInfoList(
-                facebookAppInfoList, new int[]{minimumVersion});
-    }
-
-    public static int getLatestAvailableProtocolVersionForAction(
-            String action,
-            int[] versionSpec) {
-        List<NativeAppInfo> appInfoList = actionToAppInfoMap.get(action);
-        return getLatestAvailableProtocolVersionForAppInfoList(appInfoList, versionSpec);
-    }
-
-    private static int getLatestAvailableProtocolVersionForAppInfoList(
-            List<NativeAppInfo> appInfoList,
-            int[] versionSpec) {
-        // Kick off an update
-        updateAllAvailableProtocolVersionsAsync();
-
-        if (appInfoList == null) {
-            return NO_PROTOCOL_AVAILABLE;
-        }
-
-        // Could potentially cache the NativeAppInfo to latestProtocolVersion
-        for (NativeAppInfo appInfo : appInfoList) {
-            int protocolVersion =
-                    computeLatestAvailableVersionFromVersionSpec(
-                            appInfo.getAvailableVersions(),
-                            getLatestKnownVersion(),
-                            versionSpec);
-
-            if (protocolVersion != NO_PROTOCOL_AVAILABLE) {
-                return protocolVersion;
-            }
-        }
-
-        return NO_PROTOCOL_AVAILABLE;
-    }
-
-    public static void updateAllAvailableProtocolVersionsAsync() {
-        if (!protocolVersionsAsyncUpdating.compareAndSet(false, true)) {
-            return;
-        }
-
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    for (NativeAppInfo appInfo : facebookAppInfoList) {
-                        appInfo.fetchAvailableVersions(true);
-                    }
-                } finally {
-                    protocolVersionsAsyncUpdating.set(false);
-                }
-            }
-        });
-    }
-
-    private static TreeSet<Integer> fetchAllAvailableProtocolVersionsForAppInfo(
-            NativeAppInfo appInfo) {
-        TreeSet<Integer> allAvailableVersions = new TreeSet<>();
-
-        Context appContext = FacebookSdk.getApplicationContext();
-        ContentResolver contentResolver = appContext.getContentResolver();
-
-        String [] projection = new String[]{ PLATFORM_PROVIDER_VERSION_COLUMN };
-        Uri uri = buildPlatformProviderVersionURI(appInfo);
-        Cursor c = null;
-        try {
-            // First see if the base provider exists as a check for whether the native app is
-            // installed. We do this prior to querying, to prevent errors from being output to
-            // logcat saying that the provider was not found.
-            PackageManager pm = FacebookSdk.getApplicationContext().getPackageManager();
-            String contentProviderName = appInfo.getPackage() + PLATFORM_PROVIDER;
-            ProviderInfo pInfo = pm.resolveContentProvider(contentProviderName, 0);
-            if (pInfo != null) {
-                try {
-                    c = contentResolver.query(uri, projection, null, null, null);
-                } catch (NullPointerException|SecurityException ex) {
-                    Log.e(TAG, "Failed to query content resolver.");
-                    // Meizu devices running Android 5.0+ have a bug where they can throw a
-                    // NullPointerException when trying resolve a ContentProvider. Additionally,
-                    // rarely some 5.0+ devices have a bug which can rarely cause a
-                    // SecurityException to be thrown. This will cause a incorrect indication
-                    // of if the FB app installed but it is better then crashing.
-                    c = null;
-                }
-
-                if (c != null) {
-                    while (c.moveToNext()) {
-                        int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
-                        allAvailableVersions.add(version);
-                    }
-                }
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-        }
-
-        return allAvailableVersions;
-    }
-
-    public static int computeLatestAvailableVersionFromVersionSpec(
-            TreeSet<Integer> allAvailableFacebookAppVersions,
-            int latestSdkVersion,
-            int[] versionSpec) {
-        // Remember that these ranges are sorted in ascending order and can be unbounded. So we are
-        // starting from the end of the version-spec array and working backwards, to try get the
-        // newest possible version
-        int versionSpecIndex = versionSpec.length - 1;
-        Iterator<Integer> fbAppVersionsIterator =
-                allAvailableFacebookAppVersions.descendingIterator();
-        int latestFacebookAppVersion = -1;
-
-        while (fbAppVersionsIterator.hasNext()) {
-            int fbAppVersion = fbAppVersionsIterator.next();
-
-            // We're holding on to the greatest fb-app version available.
-            latestFacebookAppVersion = Math.max(latestFacebookAppVersion, fbAppVersion);
-
-            // If there is a newer version in the versionSpec, throw it away, we don't have it
-            while (versionSpecIndex >= 0 && versionSpec[versionSpecIndex] > fbAppVersion) {
-                versionSpecIndex--;
-            }
-
-            if (versionSpecIndex < 0) {
-                // There was no fb app version that fell into any range in the versionSpec - or -
-                // the versionSpec was empty, which means that this action is not supported.
-                return NO_PROTOCOL_AVAILABLE;
-            }
-
-            // If we are here, we know we are within a range specified in the versionSpec. We should
-            // see if it is a disabled or enabled range.
-
-            if (versionSpec[versionSpecIndex] == fbAppVersion) {
-                // if the versionSpecIndex is even, it is enabled; if odd, disabled
-                return (
-                        versionSpecIndex % 2 == 0 ?
-                                Math.min(latestFacebookAppVersion, latestSdkVersion) :
-                                NO_PROTOCOL_AVAILABLE
-                );
-            }
-        }
-
-        return NO_PROTOCOL_AVAILABLE;
-    }
-
-    private static Uri buildPlatformProviderVersionURI(NativeAppInfo appInfo) {
-        return Uri.parse(CONTENT_SCHEME + appInfo.getPackage() + PLATFORM_PROVIDER_VERSIONS);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/PermissionType.java b/facebook/src/main/java/com/facebook/internal/PermissionType.java
deleted file mode 100644
index 0bf617f6c..000000000
--- a/facebook/src/main/java/com/facebook/internal/PermissionType.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public enum PermissionType {
-    READ,
-    PUBLISH
-}
diff --git a/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java b/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
deleted file mode 100644
index 45b7dfab8..000000000
--- a/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
+++ /dev/null
@@ -1,168 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.ServiceConnection;
-import android.os.*;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-abstract public class PlatformServiceClient implements ServiceConnection {
-    private final Context context;
-    private final Handler handler;
-    private CompletedListener listener;
-    private boolean running;
-    private Messenger sender;
-    private int requestMessage;
-    private int replyMessage;
-    private final String applicationId;
-    private final int protocolVersion;
-
-    public PlatformServiceClient(
-            Context context,
-            int requestMessage,
-            int replyMessage,
-            int protocolVersion,
-            String applicationId) {
-        Context applicationContext = context.getApplicationContext();
-
-        this.context = (applicationContext != null) ? applicationContext : context;
-        this.requestMessage = requestMessage;
-        this.replyMessage = replyMessage;
-        this.applicationId = applicationId;
-        this.protocolVersion = protocolVersion;
-
-        handler = new Handler() {
-            @Override
-            public void handleMessage(Message message) {
-                PlatformServiceClient.this.handleMessage(message);
-            }
-        };
-    }
-
-    public void setCompletedListener(CompletedListener listener) {
-        this.listener = listener;
-    }
-
-    protected Context getContext() {
-        return context;
-    }
-
-    public boolean start() {
-        if (running) {
-            return false;
-        }
-
-        // Make sure that the service can handle the requested protocol version
-        int availableVersion = NativeProtocol.getLatestAvailableProtocolVersionForService(
-                protocolVersion);
-        if (availableVersion == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
-            return false;
-        }
-
-        Intent intent = NativeProtocol.createPlatformServiceIntent(context);
-        if (intent == null) {
-            return false;
-        } else {
-            running = true;
-            context.bindService(intent, this, Context.BIND_AUTO_CREATE);
-            return true;
-        }
-    }
-
-    public void cancel() {
-        running = false;
-    }
-
-    public void onServiceConnected(ComponentName name, IBinder service) {
-        sender = new Messenger(service);
-        sendMessage();
-    }
-
-    public void onServiceDisconnected(ComponentName name) {
-        sender = null;
-        try {
-            context.unbindService(this);
-        } catch (IllegalArgumentException ex) {
-            // Do nothing, the connection was already unbound
-        }
-        callback(null);
-    }
-
-    private void sendMessage() {
-        Bundle data = new Bundle();
-        data.putString(NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
-
-        populateRequestBundle(data);
-
-        Message request = Message.obtain(null, requestMessage);
-        request.arg1 = protocolVersion;
-        request.setData(data);
-        request.replyTo = new Messenger(handler);
-
-        try {
-            sender.send(request);
-        } catch (RemoteException e) {
-            callback(null);
-        }
-    }
-
-    protected abstract void populateRequestBundle(Bundle data);
-
-    protected void handleMessage(Message message) {
-        if (message.what == replyMessage) {
-            Bundle extras = message.getData();
-            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
-            if (errorType != null) {
-                callback(null);
-            } else {
-                callback(extras);
-            }
-            try {
-                context.unbindService(this);
-            } catch (IllegalArgumentException ex) {
-                // Do nothing, the connection was already unbound
-            }
-        }
-    }
-
-    private void callback(Bundle result) {
-        if (!running) {
-            return;
-        }
-        running = false;
-
-        CompletedListener callback = listener;
-        if (callback != null) {
-            callback.completed(result);
-        }
-    }
-
-    public interface CompletedListener {
-        void completed(Bundle result);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/ProfileInformationCache.java b/facebook/src/main/java/com/facebook/internal/ProfileInformationCache.java
deleted file mode 100644
index dcfe0252c..000000000
--- a/facebook/src/main/java/com/facebook/internal/ProfileInformationCache.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import org.json.JSONObject;
-
-import java.util.concurrent.ConcurrentHashMap;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- *
- * Caches the profile information associated to a specific access token. This minimizes the number
- * of request we need to make to the server.
- */
-class ProfileInformationCache {
-    final private static ConcurrentHashMap<String, JSONObject> infoCache =
-            new ConcurrentHashMap<>();
-
-    public static JSONObject getProfileInformation(String accessToken) {
-        return infoCache.get(accessToken);
-    }
-
-    public static void putProfileInformation(String key, JSONObject value) {
-        infoCache.put(key, value);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
deleted file mode 100644
index 160ab7439..000000000
--- a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.util.Log;
-
-import com.facebook.FacebookSdk;
-import com.facebook.LoggingBehavior;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Collection;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public final class ServerProtocol {
-    private static final String TAG = ServerProtocol.class.getName();
-
-    private static final String DIALOG_AUTHORITY_FORMAT = "m.%s";
-    public static final String DIALOG_PATH = "dialog/";
-    public static final String DIALOG_PARAM_ACCESS_TOKEN = "access_token";
-    public static final String DIALOG_PARAM_APP_ID = "app_id";
-    public static final String DIALOG_PARAM_AUTH_TYPE = "auth_type";
-    public static final String DIALOG_PARAM_CLIENT_ID = "client_id";
-    public static final String DIALOG_PARAM_DISPLAY = "display";
-    public static final String DIALOG_PARAM_DISPLAY_TOUCH = "touch";
-    public static final String DIALOG_PARAM_E2E = "e2e";
-    public static final String DIALOG_PARAM_LEGACY_OVERRIDE = "legacy_override";
-    public static final String DIALOG_PARAM_REDIRECT_URI = "redirect_uri";
-    public static final String DIALOG_PARAM_RESPONSE_TYPE = "response_type";
-    public static final String DIALOG_PARAM_RETURN_SCOPES = "return_scopes";
-    public static final String DIALOG_PARAM_SCOPE = "scope";
-    public static final String DIALOG_PARAM_SSO_DEVICE = "sso";
-    public static final String DIALOG_PARAM_DEFAULT_AUDIENCE = "default_audience";
-    public static final String DIALOG_PARAM_SDK_VERSION = "sdk";
-    public static final String DIALOG_PARAM_STATE = "state";
-    public static final String DIALOG_REREQUEST_AUTH_TYPE = "rerequest";
-    public static final String DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST
-            = "token,signed_request";
-    public static final String DIALOG_RETURN_SCOPES_TRUE = "true";
-    public static final String DIALOG_REDIRECT_URI = "fbconnect://success";
-    public static final String DIALOG_CANCEL_URI = "fbconnect://cancel";
-
-    public static final String FALLBACK_DIALOG_PARAM_APP_ID = "app_id";
-    public static final String FALLBACK_DIALOG_PARAM_BRIDGE_ARGS = "bridge_args";
-    public static final String FALLBACK_DIALOG_PARAM_KEY_HASH = "android_key_hash";
-    public static final String FALLBACK_DIALOG_PARAM_METHOD_ARGS = "method_args";
-    public static final String FALLBACK_DIALOG_PARAM_METHOD_RESULTS = "method_results";
-    public static final String FALLBACK_DIALOG_PARAM_VERSION = "version";
-    public static final String FALLBACK_DIALOG_DISPLAY_VALUE_TOUCH = "touch";
-
-    // URL components
-    private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
-    private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    public static final String GRAPH_API_VERSION = "v2.7";
-
-    public static final Collection<String> errorsProxyAuthDisabled =
-            Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
-    public static final Collection<String> errorsUserCanceled =
-            Utility.unmodifiableCollection("access_denied", "OAuthAccessDeniedException");
-    public static final String errorConnectionFailure = "CONNECTION_FAILURE";
-
-    public static final String getDialogAuthority() {
-        return String.format(DIALOG_AUTHORITY_FORMAT, FacebookSdk.getFacebookDomain());
-    }
-
-    public static final String getGraphUrlBase() {
-        return String.format(GRAPH_URL_FORMAT, FacebookSdk.getFacebookDomain());
-    }
-
-    public static final String getGraphVideoUrlBase() {
-        return String.format(GRAPH_VIDEO_URL_FORMAT, FacebookSdk.getFacebookDomain());
-    }
-
-    public static final String getAPIVersion() {
-        return GRAPH_API_VERSION;
-    }
-
-    public static Bundle getQueryParamsForPlatformActivityIntentWebFallback(
-            String callId,
-            int version,
-            Bundle methodArgs) {
-
-        Context context = FacebookSdk.getApplicationContext();
-        String keyHash = FacebookSdk.getApplicationSignature(context);
-        if (Utility.isNullOrEmpty(keyHash)) {
-            return null;
-        }
-
-        Bundle webParams = new Bundle();
-
-        webParams.putString(FALLBACK_DIALOG_PARAM_KEY_HASH, keyHash);
-        webParams.putString(FALLBACK_DIALOG_PARAM_APP_ID, FacebookSdk.getApplicationId());
-        webParams.putInt(FALLBACK_DIALOG_PARAM_VERSION, version);
-        webParams.putString(DIALOG_PARAM_DISPLAY, FALLBACK_DIALOG_DISPLAY_VALUE_TOUCH);
-
-        Bundle bridgeArguments = new Bundle();
-        bridgeArguments.putString(NativeProtocol.BRIDGE_ARG_ACTION_ID_STRING, callId);
-
-        methodArgs = (methodArgs == null) ? new Bundle() : methodArgs;
-
-        try {
-            JSONObject bridgeArgsJSON = BundleJSONConverter.convertToJSON(bridgeArguments);
-            JSONObject methodArgsJSON = BundleJSONConverter.convertToJSON(methodArgs);
-
-            if (bridgeArgsJSON == null || methodArgsJSON == null) {
-                return null;
-            }
-
-            webParams.putString(FALLBACK_DIALOG_PARAM_BRIDGE_ARGS, bridgeArgsJSON.toString());
-            webParams.putString(FALLBACK_DIALOG_PARAM_METHOD_ARGS, methodArgsJSON.toString());
-        } catch (JSONException je) {
-            webParams = null;
-            Logger.log(LoggingBehavior.DEVELOPER_ERRORS, Log.ERROR, TAG,
-                    "Error creating Url -- " + je);
-        }
-
-        return webParams;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/UrlRedirectCache.java b/facebook/src/main/java/com/facebook/internal/UrlRedirectCache.java
deleted file mode 100644
index bf4c5b269..000000000
--- a/facebook/src/main/java/com/facebook/internal/UrlRedirectCache.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.net.Uri;
-import android.util.Log;
-import com.facebook.LoggingBehavior;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-class UrlRedirectCache {
-    static final String TAG = UrlRedirectCache.class.getSimpleName();
-    private static final String REDIRECT_CONTENT_TAG = TAG + "_Redirect";
-
-    private volatile static FileLruCache urlRedirectCache;
-
-    synchronized static FileLruCache getCache() throws IOException{
-        if (urlRedirectCache == null) {
-            urlRedirectCache = new FileLruCache(TAG, new FileLruCache.Limits());
-        }
-        return urlRedirectCache;
-    }
-
-    static Uri getRedirectedUri(Uri uri) {
-        if (uri == null) {
-            return null;
-        }
-
-        String uriString = uri.toString();
-        InputStreamReader reader = null;
-        try {
-            InputStream stream;
-            FileLruCache cache = getCache();
-            boolean redirectExists = false;
-            while ((stream = cache.get(uriString, REDIRECT_CONTENT_TAG)) != null) {
-                redirectExists = true;
-
-                // Get the redirected url
-                reader = new InputStreamReader(stream);
-                char[] buffer = new char[128];
-                int bufferLength;
-                StringBuilder urlBuilder = new StringBuilder();
-                while ((bufferLength = reader.read(buffer, 0, buffer.length)) > 0) {
-                    urlBuilder.append(buffer, 0, bufferLength);
-                }
-                Utility.closeQuietly(reader);
-
-                // Iterate to the next url in the redirection
-                uriString = urlBuilder.toString();
-            }
-
-            if (redirectExists) {
-                return Uri.parse(uriString);
-            }
-        } catch (IOException ioe) {
-        } finally {
-            Utility.closeQuietly(reader);
-        }
-
-        return null;
-    }
-
-    static void cacheUriRedirect(Uri fromUri, Uri toUri) {
-        if (fromUri == null || toUri == null) {
-            return;
-        }
-
-        OutputStream redirectStream = null;
-        try {
-            FileLruCache cache = getCache();
-            redirectStream = cache.openPutStream(fromUri.toString(), REDIRECT_CONTENT_TAG);
-            redirectStream.write(toUri.toString().getBytes());
-        } catch (IOException e) {
-            // Caching is best effort
-        } finally {
-            Utility.closeQuietly(redirectStream);
-        }
-    }
-
-    static void clearCache() {
-        try {
-            getCache().clearCache();
-        } catch (IOException e) {
-            Logger.log(LoggingBehavior.CACHE, Log.WARN, TAG, "clearCache failed " + e.getMessage());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/Utility.java b/facebook/src/main/java/com/facebook/internal/Utility.java
deleted file mode 100644
index 074ca876e..000000000
--- a/facebook/src/main/java/com/facebook/internal/Utility.java
+++ /dev/null
@@ -1,1520 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Parcel;
-import android.os.StatFs;
-import android.provider.OpenableColumns;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-import android.util.DisplayMetrics;
-import android.util.Log;
-import android.view.Display;
-import android.view.WindowManager;
-import android.webkit.CookieManager;
-import android.webkit.CookieSyncManager;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.internal.Constants;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.*;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.math.BigInteger;
-import java.net.HttpURLConnection;
-import java.net.URLConnection;
-
-import java.net.URLDecoder;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.regex.Pattern;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public final class Utility {
-    static final String LOG_TAG = "FacebookSDK";
-    private static final String HASH_ALGORITHM_MD5 = "MD5";
-    private static final String HASH_ALGORITHM_SHA1 = "SHA-1";
-    private static final String URL_SCHEME = "https";
-    private static final String APP_SETTINGS_PREFS_STORE =
-            "com.facebook.internal.preferences.APP_SETTINGS";
-    private static final String APP_SETTINGS_PREFS_KEY_FORMAT =
-            "com.facebook.internal.APP_SETTINGS.%s";
-    private static final String APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING =
-            "supports_implicit_sdk_logging";
-    private static final String APP_SETTING_NUX_CONTENT = "gdpv4_nux_content";
-    private static final String APP_SETTING_NUX_ENABLED = "gdpv4_nux_enabled";
-    private static final String APP_SETTING_CUSTOM_TABS_ENABLED =
-            "gdpv4_chrome_custom_tabs_enabled";
-    private static final String APP_SETTING_DIALOG_CONFIGS = "android_dialog_configs";
-    private static final String APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES =
-            "android_sdk_error_categories";
-    private static final String APP_SETTING_APP_EVENTS_SESSION_TIMEOUT =
-            "app_events_session_timeout";
-    private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a2";
-    private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
-    private static final String DIALOG_CONFIG_NAME_KEY = "name";
-    private static final String DIALOG_CONFIG_VERSIONS_KEY = "versions";
-    private static final String DIALOG_CONFIG_URL_KEY = "url";
-
-    private final static String UTF8 = "UTF-8";
-
-    private static final String[] APP_SETTING_FIELDS = new String[]{
-            APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING,
-            APP_SETTING_NUX_CONTENT,
-            APP_SETTING_NUX_ENABLED,
-            APP_SETTING_CUSTOM_TABS_ENABLED,
-            APP_SETTING_DIALOG_CONFIGS,
-            APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES,
-            APP_SETTING_APP_EVENTS_SESSION_TIMEOUT
-    };
-    private static final String APPLICATION_FIELDS = "fields";
-
-    // This is the default used by the buffer streams, but they trace a warning if you do not
-    // specify.
-    public static final int DEFAULT_STREAM_BUFFER_SIZE = 8192;
-
-    // Refresh extended device info every 30 minutes
-    private static final int REFRESH_TIME_FOR_EXTENDED_DEVICE_INFO_MILLIS = 30 * 60 * 1000;
-
-    private static final String noCarrierConstant = "NoCarrier";
-
-    private static final int GINGERBREAD_MR1 = 10;
-
-    private static Map<String, FetchedAppSettings> fetchedAppSettings =
-            new ConcurrentHashMap<String, FetchedAppSettings>();
-
-    private static AtomicBoolean loadingSettings = new AtomicBoolean(false);
-
-    private static int numCPUCores = 0;
-
-    private static long timestampOfLastCheck = -1;
-    private static long totalExternalStorageGB = -1;
-    private static long availableExternalStorageGB = -1;
-    private static String deviceTimezoneAbbreviation = "";
-    private static String deviceTimeZoneName = "";
-    private static String carrierName = noCarrierConstant;
-
-    public static class FetchedAppSettings {
-        private boolean supportsImplicitLogging;
-        private String nuxContent;
-        private boolean nuxEnabled;
-        private boolean customTabsEnabled;
-        private int sessionTimeoutInSeconds;
-        private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
-        private FacebookRequestErrorClassification errorClassification;
-
-        private FetchedAppSettings(boolean supportsImplicitLogging,
-                                   String nuxContent,
-                                   boolean nuxEnabled,
-                                   boolean customTabsEnabled,
-                                   int sessionTimeoutInSeconds,
-                                   Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
-                                   FacebookRequestErrorClassification errorClassification) {
-            this.supportsImplicitLogging = supportsImplicitLogging;
-            this.nuxContent = nuxContent;
-            this.nuxEnabled = nuxEnabled;
-            this.customTabsEnabled = customTabsEnabled;
-            this.dialogConfigMap = dialogConfigMap;
-            this.errorClassification = errorClassification;
-            this.sessionTimeoutInSeconds = sessionTimeoutInSeconds;
-        }
-
-        public boolean supportsImplicitLogging() {
-            return supportsImplicitLogging;
-        }
-
-        public String getNuxContent() {
-            return nuxContent;
-        }
-
-        public boolean getNuxEnabled() {
-            return nuxEnabled;
-        }
-
-        public boolean getCustomTabsEnabled() {
-            return customTabsEnabled;
-        }
-
-        public int getSessionTimeoutInSeconds() {
-            return sessionTimeoutInSeconds;
-        }
-
-        public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
-            return dialogConfigMap;
-        }
-
-        public FacebookRequestErrorClassification getErrorClassification() {
-            return errorClassification;
-        }
-    }
-
-    public static class DialogFeatureConfig {
-        private static DialogFeatureConfig parseDialogConfig(JSONObject dialogConfigJSON) {
-            String dialogNameWithFeature = dialogConfigJSON.optString(DIALOG_CONFIG_NAME_KEY);
-            if (Utility.isNullOrEmpty(dialogNameWithFeature)) {
-                return null;
-            }
-
-            String[] components = dialogNameWithFeature.split(
-                    DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR);
-            if (components.length != 2) {
-                // We expect the format to be dialogName|FeatureName, where both components are
-                // non-empty.
-                return null;
-            }
-
-            String dialogName = components[0];
-            String featureName = components[1];
-            if (isNullOrEmpty(dialogName) || isNullOrEmpty(featureName)) {
-                return null;
-            }
-
-            String urlString = dialogConfigJSON.optString(DIALOG_CONFIG_URL_KEY);
-            Uri fallbackUri = null;
-            if (!Utility.isNullOrEmpty(urlString)) {
-                fallbackUri = Uri.parse(urlString);
-            }
-
-            JSONArray versionsJSON = dialogConfigJSON.optJSONArray(DIALOG_CONFIG_VERSIONS_KEY);
-
-            int[] featureVersionSpec = parseVersionSpec(versionsJSON);
-
-            return new DialogFeatureConfig(
-                    dialogName, featureName, fallbackUri, featureVersionSpec);
-        }
-
-        private static int[] parseVersionSpec(JSONArray versionsJSON) {
-            // Null signifies no overrides to the min-version as specified by the SDK.
-            // An empty array would basically turn off the dialog (i.e no supported versions), so
-            // DON'T default to that.
-            int[] versionSpec = null;
-            if (versionsJSON != null) {
-                int numVersions = versionsJSON.length();
-                versionSpec = new int[numVersions];
-                for (int i = 0; i < numVersions; i++) {
-                    // See if the version was stored directly as an Integer
-                    int version = versionsJSON.optInt(i, NativeProtocol.NO_PROTOCOL_AVAILABLE);
-                    if (version == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
-                        // If not, then see if it was stored as a string that can be parsed out.
-                        // If even that fails, then we will leave it as NO_PROTOCOL_AVAILABLE
-                        String versionString = versionsJSON.optString(i);
-                        if (!isNullOrEmpty(versionString)) {
-                            try {
-                                version = Integer.parseInt(versionString);
-                            } catch (NumberFormatException nfe) {
-                                logd(LOG_TAG, nfe);
-                                version = NativeProtocol.NO_PROTOCOL_AVAILABLE;
-                            }
-                        }
-                    }
-
-                    versionSpec[i] = version;
-                }
-            }
-
-            return versionSpec;
-        }
-
-        private String dialogName;
-        private String featureName;
-        private Uri fallbackUrl;
-        private int[] featureVersionSpec;
-
-        private DialogFeatureConfig(
-                String dialogName,
-                String featureName,
-                Uri fallbackUrl,
-                int[] featureVersionSpec) {
-            this.dialogName = dialogName;
-            this.featureName = featureName;
-            this.fallbackUrl = fallbackUrl;
-            this.featureVersionSpec = featureVersionSpec;
-        }
-
-        public String getDialogName() {
-            return dialogName;
-        }
-
-        public String getFeatureName() {
-            return featureName;
-        }
-
-        public Uri getFallbackUrl() {
-            return fallbackUrl;
-        }
-
-        public int[] getVersionSpec() {
-            return featureVersionSpec;
-        }
-    }
-
-    /**
-     * Each array represents a set of closed or open Range, like so: [0,10,50,60] - Ranges are
-     * {0-9}, {50-59} [20] - Ranges are {20-} [30,40,100] - Ranges are {30-39}, {100-}
-     * <p/>
-     * All Ranges in the array have a closed lower bound. Only the last Range in each array may be
-     * open. It is assumed that the passed in arrays are sorted with ascending order. It is assumed
-     * that no two elements in a given are equal (i.e. no 0-length ranges)
-     * <p/>
-     * The method returns an intersect of the two passed in Range-sets
-     *
-     * @param range1 The first range
-     * @param range2 The second range
-     * @return The intersection of the two ranges.
-     */
-    public static int[] intersectRanges(int[] range1, int[] range2) {
-        if (range1 == null) {
-            return range2;
-        } else if (range2 == null) {
-            return range1;
-        }
-
-        int[] outputRange = new int[range1.length + range2.length];
-        int outputIndex = 0;
-        int index1 = 0, lower1, upper1;
-        int index2 = 0, lower2, upper2;
-        while (index1 < range1.length && index2 < range2.length) {
-            int newRangeLower = Integer.MIN_VALUE, newRangeUpper = Integer.MAX_VALUE;
-            lower1 = range1[index1];
-            upper1 = Integer.MAX_VALUE;
-
-            lower2 = range2[index2];
-            upper2 = Integer.MAX_VALUE;
-
-            if (index1 < range1.length - 1) {
-                upper1 = range1[index1 + 1];
-            }
-            if (index2 < range2.length - 1) {
-                upper2 = range2[index2 + 1];
-            }
-
-            if (lower1 < lower2) {
-                if (upper1 > lower2) {
-                    newRangeLower = lower2;
-                    if (upper1 > upper2) {
-                        newRangeUpper = upper2;
-                        index2 += 2;
-                    } else {
-                        newRangeUpper = upper1;
-                        index1 += 2;
-                    }
-                } else {
-                    index1 += 2;
-                }
-            } else {
-                if (upper2 > lower1) {
-                    newRangeLower = lower1;
-                    if (upper2 > upper1) {
-                        newRangeUpper = upper1;
-                        index1 += 2;
-                    } else {
-                        newRangeUpper = upper2;
-                        index2 += 2;
-                    }
-                } else {
-                    index2 += 2;
-                }
-            }
-
-            if (newRangeLower != Integer.MIN_VALUE) {
-                outputRange[outputIndex++] = newRangeLower;
-                if (newRangeUpper != Integer.MAX_VALUE) {
-                    outputRange[outputIndex++] = newRangeUpper;
-                } else {
-                    // If we reach an unbounded/open range, then we know we're done.
-                    break;
-                }
-            }
-        }
-
-        return Arrays.copyOf(outputRange, outputIndex);
-    }
-
-    // Returns true iff all items in subset are in superset, treating null and
-    // empty collections as
-    // the same.
-    public static <T> boolean isSubset(Collection<T> subset, Collection<T> superset) {
-        if ((superset == null) || (superset.size() == 0)) {
-            return ((subset == null) || (subset.size() == 0));
-        }
-
-        HashSet<T> hash = new HashSet<T>(superset);
-        for (T t : subset) {
-            if (!hash.contains(t)) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    public static <T> boolean isNullOrEmpty(Collection<T> c) {
-        return (c == null) || (c.size() == 0);
-    }
-
-    public static boolean isNullOrEmpty(String s) {
-        return (s == null) || (s.length() == 0);
-    }
-
-    /**
-     * Use this when you want to normalize empty and null strings
-     * This way, Utility.areObjectsEqual can used for comparison, where a null string is to be
-     * treated the same as an empty string.
-     *
-     * @param s                  The string to coerce
-     * @param valueIfNullOrEmpty The value if s is null or empty.
-     * @return The original string s if it's not null or empty, otherwise the valueIfNullOrEmpty
-     */
-    public static String coerceValueIfNullOrEmpty(String s, String valueIfNullOrEmpty) {
-        if (isNullOrEmpty(s)) {
-            return valueIfNullOrEmpty;
-        }
-
-        return s;
-    }
-
-    public static <T> Collection<T> unmodifiableCollection(T... ts) {
-        return Collections.unmodifiableCollection(Arrays.asList(ts));
-    }
-
-    public static <T> ArrayList<T> arrayList(T... ts) {
-        ArrayList<T> arrayList = new ArrayList<T>(ts.length);
-        for (T t : ts) {
-            arrayList.add(t);
-        }
-        return arrayList;
-    }
-
-    public static <T> HashSet<T> hashSet(T... ts) {
-        HashSet<T> hashSet = new HashSet<T>(ts.length);
-        for (T t : ts) {
-            hashSet.add(t);
-        }
-        return hashSet;
-    }
-
-    public static String md5hash(String key) {
-        return hashWithAlgorithm(HASH_ALGORITHM_MD5, key);
-    }
-
-    public static String sha1hash(String key) {
-        return hashWithAlgorithm(HASH_ALGORITHM_SHA1, key);
-    }
-
-    public static String sha1hash(byte[] bytes) {
-        return hashWithAlgorithm(HASH_ALGORITHM_SHA1, bytes);
-    }
-
-    private static String hashWithAlgorithm(String algorithm, String key) {
-        return hashWithAlgorithm(algorithm, key.getBytes());
-    }
-
-    private static String hashWithAlgorithm(String algorithm, byte[] bytes) {
-        MessageDigest hash;
-        try {
-            hash = MessageDigest.getInstance(algorithm);
-        } catch (NoSuchAlgorithmException e) {
-            return null;
-        }
-        return hashBytes(hash, bytes);
-    }
-
-    private static String hashBytes(MessageDigest hash, byte[] bytes) {
-        hash.update(bytes);
-        byte[] digest = hash.digest();
-        StringBuilder builder = new StringBuilder();
-        for (int b : digest) {
-            builder.append(Integer.toHexString((b >> 4) & 0xf));
-            builder.append(Integer.toHexString((b >> 0) & 0xf));
-        }
-        return builder.toString();
-    }
-
-    public static Uri buildUri(String authority, String path, Bundle parameters) {
-        Uri.Builder builder = new Uri.Builder();
-        builder.scheme(URL_SCHEME);
-        builder.authority(authority);
-        builder.path(path);
-        if (parameters != null) {
-            for (String key : parameters.keySet()) {
-                Object parameter = parameters.get(key);
-                if (parameter instanceof String) {
-                    builder.appendQueryParameter(key, (String) parameter);
-                }
-            }
-        }
-        return builder.build();
-    }
-
-    public static Bundle parseUrlQueryString(String queryString) {
-        Bundle params = new Bundle();
-        if (!isNullOrEmpty(queryString)) {
-            String array[] = queryString.split("&");
-            for (String parameter : array) {
-                String keyValuePair[] = parameter.split("=");
-
-                try {
-                    if (keyValuePair.length == 2) {
-                        params.putString(
-                                URLDecoder.decode(keyValuePair[0], UTF8),
-                                URLDecoder.decode(keyValuePair[1], UTF8));
-                    } else if (keyValuePair.length == 1) {
-                        params.putString(
-                                URLDecoder.decode(keyValuePair[0], UTF8),
-                                "");
-                    }
-                } catch (UnsupportedEncodingException e) {
-                    // shouldn't happen
-                    logd(LOG_TAG, e);
-                }
-            }
-        }
-        return params;
-    }
-
-    public static void putNonEmptyString(Bundle b, String key, String value) {
-        if (!Utility.isNullOrEmpty(value)) {
-            b.putString(key, value);
-        }
-    }
-
-    public static void putCommaSeparatedStringList(Bundle b, String key, List<String> list) {
-        if (list != null) {
-            StringBuilder builder = new StringBuilder();
-            for (String string : list) {
-                builder.append(string);
-                builder.append(",");
-            }
-            String commaSeparated = "";
-            if (builder.length() > 0) {
-                commaSeparated = builder.substring(0, builder.length() - 1);
-            }
-            b.putString(key, commaSeparated);
-        }
-    }
-
-    public static void putUri(Bundle b, String key, Uri uri) {
-        if (uri != null) {
-            Utility.putNonEmptyString(b, key, uri.toString());
-        }
-    }
-
-    public static boolean putJSONValueInBundle(Bundle bundle, String key, Object value) {
-        if (value == null) {
-            bundle.remove(key);
-        } else if (value instanceof Boolean) {
-            bundle.putBoolean(key, (boolean) value);
-        } else if (value instanceof boolean[]) {
-            bundle.putBooleanArray(key, (boolean[]) value);
-        } else if (value instanceof Double) {
-            bundle.putDouble(key, (double) value);
-        } else if (value instanceof double[]) {
-            bundle.putDoubleArray(key, (double[]) value);
-        } else if (value instanceof Integer) {
-            bundle.putInt(key, (int) value);
-        } else if (value instanceof int[]) {
-            bundle.putIntArray(key, (int[]) value);
-        } else if (value instanceof Long) {
-            bundle.putLong(key, (long) value);
-        } else if (value instanceof long[]) {
-            bundle.putLongArray(key, (long[]) value);
-        } else if (value instanceof String) {
-            bundle.putString(key, (String) value);
-        } else if (value instanceof JSONArray) {
-            bundle.putString(key, ((JSONArray) value).toString());
-        } else if (value instanceof JSONObject) {
-            bundle.putString(key, ((JSONObject) value).toString());
-        } else {
-            return false;
-        }
-        return true;
-    }
-
-    public static void closeQuietly(Closeable closeable) {
-        try {
-            if (closeable != null) {
-                closeable.close();
-            }
-        } catch (IOException ioe) {
-            // ignore
-        }
-    }
-
-    public static void disconnectQuietly(URLConnection connection) {
-        if (connection != null && connection instanceof HttpURLConnection) {
-            ((HttpURLConnection) connection).disconnect();
-        }
-    }
-
-    public static String getMetadataApplicationId(Context context) {
-        Validate.notNull(context, "context");
-
-        FacebookSdk.sdkInitialize(context);
-
-        return FacebookSdk.getApplicationId();
-    }
-
-    static Map<String, Object> convertJSONObjectToHashMap(JSONObject jsonObject) {
-        HashMap<String, Object> map = new HashMap<String, Object>();
-        JSONArray keys = jsonObject.names();
-        for (int i = 0; i < keys.length(); ++i) {
-            String key;
-            try {
-                key = keys.getString(i);
-                Object value = jsonObject.get(key);
-                if (value instanceof JSONObject) {
-                    value = convertJSONObjectToHashMap((JSONObject) value);
-                }
-                map.put(key, value);
-            } catch (JSONException e) {
-            }
-        }
-        return map;
-    }
-
-    // Returns either a JSONObject or JSONArray representation of the 'key' property of
-    // 'jsonObject'.
-    public static Object getStringPropertyAsJSON(
-            JSONObject jsonObject,
-            String key,
-            String nonJSONPropertyKey
-    ) throws JSONException {
-        Object value = jsonObject.opt(key);
-        if (value != null && value instanceof String) {
-            JSONTokener tokener = new JSONTokener((String) value);
-            value = tokener.nextValue();
-        }
-
-        if (value != null && !(value instanceof JSONObject || value instanceof JSONArray)) {
-            if (nonJSONPropertyKey != null) {
-                // Facebook sometimes gives us back a non-JSON value such as
-                // literal "true" or "false" as a result.
-                // If we got something like that, we present it to the caller as a JSONObject
-                // with a single property. We only do this if the caller wants that behavior.
-                jsonObject = new JSONObject();
-                jsonObject.putOpt(nonJSONPropertyKey, value);
-                return jsonObject;
-            } else {
-                throw new FacebookException("Got an unexpected non-JSON object.");
-            }
-        }
-
-        return value;
-
-    }
-
-    public static String readStreamToString(InputStream inputStream) throws IOException {
-        BufferedInputStream bufferedInputStream = null;
-        InputStreamReader reader = null;
-        try {
-            bufferedInputStream = new BufferedInputStream(inputStream);
-            reader = new InputStreamReader(bufferedInputStream);
-            StringBuilder stringBuilder = new StringBuilder();
-
-            final int bufferSize = 1024 * 2;
-            char[] buffer = new char[bufferSize];
-            int n = 0;
-            while ((n = reader.read(buffer)) != -1) {
-                stringBuilder.append(buffer, 0, n);
-            }
-
-            return stringBuilder.toString();
-        } finally {
-            closeQuietly(bufferedInputStream);
-            closeQuietly(reader);
-        }
-    }
-
-    public static int copyAndCloseInputStream(InputStream inputStream, OutputStream outputStream)
-            throws IOException {
-        BufferedInputStream bufferedInputStream = null;
-        int totalBytes = 0;
-        try {
-            bufferedInputStream = new BufferedInputStream(inputStream);
-
-            byte[] buffer = new byte[8192];
-            int bytesRead;
-            while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
-                outputStream.write(buffer, 0, bytesRead);
-                totalBytes += bytesRead;
-            }
-        } finally {
-            if (bufferedInputStream != null) {
-                bufferedInputStream.close();
-            }
-            if (inputStream != null) {
-                inputStream.close();
-            }
-        }
-
-        return totalBytes;
-    }
-
-    public static boolean stringsEqualOrEmpty(String a, String b) {
-        boolean aEmpty = TextUtils.isEmpty(a);
-        boolean bEmpty = TextUtils.isEmpty(b);
-
-        if (aEmpty && bEmpty) {
-            // Both null or empty, they match.
-            return true;
-        }
-        if (!aEmpty && !bEmpty) {
-            // Both non-empty, check equality.
-            return a.equals(b);
-        }
-        // One empty, one non-empty, can't match.
-        return false;
-    }
-
-    private static void clearCookiesForDomain(Context context, String domain) {
-        // This is to work around a bug where CookieManager may fail to instantiate if
-        // CookieSyncManager has never been created.
-        CookieSyncManager syncManager = CookieSyncManager.createInstance(context);
-        syncManager.sync();
-
-        CookieManager cookieManager = CookieManager.getInstance();
-
-        String cookies = cookieManager.getCookie(domain);
-        if (cookies == null) {
-            return;
-        }
-
-        String[] splitCookies = cookies.split(";");
-        for (String cookie : splitCookies) {
-            String[] cookieParts = cookie.split("=");
-            if (cookieParts.length > 0) {
-                String newCookie = cookieParts[0].trim() +
-                        "=;expires=Sat, 1 Jan 2000 00:00:01 UTC;";
-                cookieManager.setCookie(domain, newCookie);
-            }
-        }
-        cookieManager.removeExpiredCookie();
-    }
-
-    public static void clearFacebookCookies(Context context) {
-        // setCookie acts differently when trying to expire cookies between builds of Android that
-        // are using Chromium HTTP stack and those that are not. Using both of these domains to
-        // ensure it works on both.
-        clearCookiesForDomain(context, "facebook.com");
-        clearCookiesForDomain(context, ".facebook.com");
-        clearCookiesForDomain(context, "https://facebook.com");
-        clearCookiesForDomain(context, "https://.facebook.com");
-    }
-
-    public static void logd(String tag, Exception e) {
-        if (FacebookSdk.isDebugEnabled() && tag != null && e != null) {
-            Log.d(tag, e.getClass().getSimpleName() + ": " + e.getMessage());
-        }
-    }
-
-    public static void logd(String tag, String msg) {
-        if (FacebookSdk.isDebugEnabled() && tag != null && msg != null) {
-            Log.d(tag, msg);
-        }
-    }
-
-    public static void logd(String tag, String msg, Throwable t) {
-        if (FacebookSdk.isDebugEnabled() && !isNullOrEmpty(tag)) {
-            Log.d(tag, msg, t);
-        }
-    }
-
-    public static <T> boolean areObjectsEqual(T a, T b) {
-        if (a == null) {
-            return b == null;
-        }
-        return a.equals(b);
-    }
-
-    public static boolean hasSameId(JSONObject a, JSONObject b) {
-        if (a == null || b == null || !a.has("id") || !b.has("id")) {
-            return false;
-        }
-        if (a.equals(b)) {
-            return true;
-        }
-        String idA = a.optString("id");
-        String idB = b.optString("id");
-        if (idA == null || idB == null) {
-            return false;
-        }
-        return idA.equals(idB);
-    }
-
-    public static void loadAppSettingsAsync(
-            final Context context,
-            final String applicationId
-    ) {
-        boolean canStartLoading = loadingSettings.compareAndSet(false, true);
-        if (Utility.isNullOrEmpty(applicationId) ||
-                fetchedAppSettings.containsKey(applicationId) ||
-                !canStartLoading) {
-            return;
-        }
-
-        final String settingsKey = String.format(APP_SETTINGS_PREFS_KEY_FORMAT, applicationId);
-
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                // See if we had a cached copy and use that immediately.
-                SharedPreferences sharedPrefs = context.getSharedPreferences(
-                        APP_SETTINGS_PREFS_STORE,
-                        Context.MODE_PRIVATE);
-                String settingsJSONString = sharedPrefs.getString(settingsKey, null);
-                if (!isNullOrEmpty(settingsJSONString)) {
-                    JSONObject settingsJSON = null;
-                    try {
-                        settingsJSON = new JSONObject(settingsJSONString);
-                    } catch (JSONException je) {
-                        logd(LOG_TAG, je);
-                    }
-                    if (settingsJSON != null) {
-                        parseAppSettingsFromJSON(applicationId, settingsJSON);
-                    }
-                }
-
-                JSONObject resultJSON = getAppSettingsQueryResponse(applicationId);
-                if (resultJSON != null) {
-                    parseAppSettingsFromJSON(applicationId, resultJSON);
-
-                    sharedPrefs.edit()
-                            .putString(settingsKey, resultJSON.toString())
-                            .apply();
-                }
-
-                loadingSettings.set(false);
-            }
-        });
-    }
-
-    // This call only gets the app settings if they're already fetched
-    public static FetchedAppSettings getAppSettingsWithoutQuery(final String applicationId) {
-        return applicationId != null ? fetchedAppSettings.get(applicationId) : null;
-    }
-
-    // Note that this method makes a synchronous Graph API call, so should not be called from the
-    // main thread.
-    public static FetchedAppSettings queryAppSettings(
-            final String applicationId,
-            final boolean forceRequery) {
-        // Cache the last app checked results.
-        if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {
-            return fetchedAppSettings.get(applicationId);
-        }
-
-        JSONObject response = getAppSettingsQueryResponse(applicationId);
-        if (response == null) {
-            return null;
-        }
-
-        return parseAppSettingsFromJSON(applicationId, response);
-    }
-
-    private static FetchedAppSettings parseAppSettingsFromJSON(
-            String applicationId,
-            JSONObject settingsJSON) {
-        JSONArray errorClassificationJSON =
-                settingsJSON.optJSONArray(APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES);
-        FacebookRequestErrorClassification errorClassification =
-                errorClassificationJSON == null
-                        ? FacebookRequestErrorClassification.getDefaultErrorClassification()
-                        : FacebookRequestErrorClassification.createFromJSON(
-                        errorClassificationJSON
-                );
-        FetchedAppSettings result = new FetchedAppSettings(
-                settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
-                settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
-                settingsJSON.optBoolean(APP_SETTING_NUX_ENABLED, false),
-                settingsJSON.optBoolean(APP_SETTING_CUSTOM_TABS_ENABLED, false),
-                settingsJSON.optInt(
-                        APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
-                        Constants.getDefaultAppEventsSessionTimeoutInSeconds()),
-                parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS)),
-                errorClassification
-        );
-
-        fetchedAppSettings.put(applicationId, result);
-
-        return result;
-    }
-
-    // Note that this method makes a synchronous Graph API call, so should not be called from the
-    // main thread.
-    private static JSONObject getAppSettingsQueryResponse(String applicationId) {
-        Bundle appSettingsParams = new Bundle();
-        appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", APP_SETTING_FIELDS));
-
-        GraphRequest request = GraphRequest.newGraphPathRequest(null, applicationId, null);
-        request.setSkipClientToken(true);
-        request.setParameters(appSettingsParams);
-
-        return request.executeAndWait().getJSONObject();
-    }
-
-    public static DialogFeatureConfig getDialogFeatureConfig(
-            String applicationId,
-            String actionName,
-            String featureName) {
-        if (Utility.isNullOrEmpty(actionName) || Utility.isNullOrEmpty(featureName)) {
-            return null;
-        }
-
-        FetchedAppSettings settings = fetchedAppSettings.get(applicationId);
-        if (settings != null) {
-            Map<String, DialogFeatureConfig> featureMap =
-                    settings.getDialogConfigurations().get(actionName);
-            if (featureMap != null) {
-                return featureMap.get(featureName);
-            }
-        }
-        return null;
-    }
-
-    private static Map<String, Map<String, DialogFeatureConfig>> parseDialogConfigurations(
-            JSONObject dialogConfigResponse) {
-        HashMap<String, Map<String, DialogFeatureConfig>> dialogConfigMap = new HashMap<String, Map<String, DialogFeatureConfig>>();
-
-        if (dialogConfigResponse != null) {
-            JSONArray dialogConfigData = dialogConfigResponse.optJSONArray("data");
-            if (dialogConfigData != null) {
-                for (int i = 0; i < dialogConfigData.length(); i++) {
-                    DialogFeatureConfig dialogConfig = DialogFeatureConfig.parseDialogConfig(
-                            dialogConfigData.optJSONObject(i));
-                    if (dialogConfig == null) {
-                        continue;
-                    }
-
-                    String dialogName = dialogConfig.getDialogName();
-                    Map<String, DialogFeatureConfig> featureMap = dialogConfigMap.get(dialogName);
-                    if (featureMap == null) {
-                        featureMap = new HashMap<String, DialogFeatureConfig>();
-                        dialogConfigMap.put(dialogName, featureMap);
-                    }
-                    featureMap.put(dialogConfig.getFeatureName(), dialogConfig);
-                }
-            }
-        }
-
-        return dialogConfigMap;
-    }
-
-    public static String safeGetStringFromResponse(JSONObject response, String propertyName) {
-        return response != null ? response.optString(propertyName, "") : "";
-    }
-
-    public static JSONObject tryGetJSONObjectFromResponse(JSONObject response, String propertyKey) {
-        return response != null ? response.optJSONObject(propertyKey) : null;
-    }
-
-    public static JSONArray tryGetJSONArrayFromResponse(JSONObject response, String propertyKey) {
-        return response != null ? response.optJSONArray(propertyKey) : null;
-    }
-
-    public static void clearCaches(Context context) {
-        ImageDownloader.clearCache(context);
-    }
-
-    public static void deleteDirectory(File directoryOrFile) {
-        if (!directoryOrFile.exists()) {
-            return;
-        }
-
-        if (directoryOrFile.isDirectory()) {
-            final File[] children = directoryOrFile.listFiles();
-            if (children != null) {
-                for (final File child : children) {
-                    deleteDirectory(child);
-                }
-            }
-        }
-        directoryOrFile.delete();
-    }
-
-    public static <T> List<T> asListNoNulls(T... array) {
-        ArrayList<T> result = new ArrayList<T>();
-        for (T t : array) {
-            if (t != null) {
-                result.add(t);
-            }
-        }
-        return result;
-    }
-
-    public static List<String> jsonArrayToStringList(JSONArray jsonArray) throws JSONException {
-        ArrayList<String> result = new ArrayList<>();
-
-        for (int i = 0; i < jsonArray.length(); i++) {
-            result.add(jsonArray.getString(i));
-        }
-
-        return result;
-    }
-
-    public static Set<String> jsonArrayToSet(JSONArray jsonArray) throws JSONException {
-        Set<String> result = new HashSet<>();
-        for (int i = 0; i < jsonArray.length(); i++) {
-            result.add(jsonArray.getString(i));
-        }
-
-        return result;
-    }
-
-    public static void setAppEventAttributionParameters(
-            JSONObject params,
-            AttributionIdentifiers attributionIdentifiers,
-            String anonymousAppDeviceGUID,
-            boolean limitEventUsage) throws JSONException {
-        if (attributionIdentifiers != null && attributionIdentifiers.getAttributionId() != null) {
-            params.put("attribution", attributionIdentifiers.getAttributionId());
-        }
-
-        if (attributionIdentifiers != null &&
-                attributionIdentifiers.getAndroidAdvertiserId() != null) {
-            params.put("advertiser_id", attributionIdentifiers.getAndroidAdvertiserId());
-            params.put("advertiser_tracking_enabled", !attributionIdentifiers.isTrackingLimited());
-        }
-
-        if (attributionIdentifiers != null &&
-                attributionIdentifiers.getAndroidInstallerPackage() != null) {
-            params.put("installer_package", attributionIdentifiers.getAndroidInstallerPackage());
-        }
-
-        params.put("anon_id", anonymousAppDeviceGUID);
-        params.put("application_tracking_enabled", !limitEventUsage);
-    }
-
-    public static void setAppEventExtendedDeviceInfoParameters(
-            JSONObject params,
-            Context appContext
-    ) throws JSONException {
-        JSONArray extraInfoArray = new JSONArray();
-        extraInfoArray.put(EXTRA_APP_EVENTS_INFO_FORMAT_VERSION);
-
-        Utility.refreshPeriodicExtendedDeviceInfo(appContext);
-
-        // Application Manifest info:
-        String pkgName = appContext.getPackageName();
-        int versionCode = -1;
-        String versionName = "";
-
-        try {
-            PackageInfo pi = appContext.getPackageManager().getPackageInfo(pkgName, 0);
-            versionCode = pi.versionCode;
-            versionName = pi.versionName;
-        } catch (PackageManager.NameNotFoundException e) {
-            // Swallow
-        }
-
-        // Application Manifest info:
-        extraInfoArray.put(pkgName);
-        extraInfoArray.put(versionCode);
-        extraInfoArray.put(versionName);
-
-        // OS/Device info
-        extraInfoArray.put(Build.VERSION.RELEASE);
-        extraInfoArray.put(Build.MODEL);
-
-        // Locale
-        Locale locale = null;
-        try {
-            locale = appContext.getResources().getConfiguration().locale;
-        } catch (Exception e) {
-            locale = Locale.getDefault();
-        }
-        extraInfoArray.put(locale.getLanguage() + "_" + locale.getCountry());
-
-        // Time zone
-        extraInfoArray.put(deviceTimezoneAbbreviation);
-
-        // Carrier
-        extraInfoArray.put(carrierName);
-
-        // Screen dimensions
-        int width = 0;
-        int height = 0;
-        double density = 0;
-        try {
-            WindowManager wm = (WindowManager) appContext.getSystemService(Context.WINDOW_SERVICE);
-            if (wm != null) {
-                Display display = wm.getDefaultDisplay();
-                DisplayMetrics displayMetrics = new DisplayMetrics();
-                display.getMetrics(displayMetrics);
-                width = displayMetrics.widthPixels;
-                height = displayMetrics.heightPixels;
-                density = displayMetrics.density;
-            }
-        } catch (Exception e) {
-            // Swallow
-        }
-        extraInfoArray.put(width);
-        extraInfoArray.put(height);
-        extraInfoArray.put(String.format("%.2f", density));
-
-        // CPU Cores
-        extraInfoArray.put(refreshBestGuessNumberOfCPUCores());
-
-        // External Storage
-        extraInfoArray.put(totalExternalStorageGB);
-        extraInfoArray.put(availableExternalStorageGB);
-
-        extraInfoArray.put(deviceTimeZoneName);
-
-        params.put("extinfo", extraInfoArray.toString());
-    }
-
-    public static Method getMethodQuietly(
-            Class<?> clazz,
-            String methodName,
-            Class<?>... parameterTypes) {
-        try {
-            return clazz.getMethod(methodName, parameterTypes);
-        } catch (NoSuchMethodException ex) {
-            return null;
-        }
-    }
-
-    public static Method getMethodQuietly(
-            String className,
-            String methodName,
-            Class<?>... parameterTypes) {
-        try {
-            Class<?> clazz = Class.forName(className);
-            return getMethodQuietly(clazz, methodName, parameterTypes);
-        } catch (ClassNotFoundException ex) {
-            return null;
-        }
-    }
-
-    public static Object invokeMethodQuietly(Object receiver, Method method, Object... args) {
-        try {
-            return method.invoke(receiver, args);
-        } catch (IllegalAccessException ex) {
-            return null;
-        } catch (InvocationTargetException ex) {
-            return null;
-        }
-    }
-
-    /**
-     * Returns the name of the current activity if the context is an activity, otherwise return
-     * "unknown"
-     */
-    public static String getActivityName(Context context) {
-        if (context == null) {
-            return "null";
-        } else if (context == context.getApplicationContext()) {
-            return "unknown";
-        } else {
-            return context.getClass().getSimpleName();
-        }
-    }
-
-    public interface Predicate<T> {
-        public boolean apply(T item);
-    }
-
-    public static <T> List<T> filter(final List<T> target, final Predicate<T> predicate) {
-        if (target == null) {
-            return null;
-        }
-        final List<T> list = new ArrayList<T>();
-        for (T item : target) {
-            if (predicate.apply(item)) {
-                list.add(item);
-            }
-        }
-        return (list.size() == 0 ? null : list);
-    }
-
-    public interface Mapper<T, K> {
-        public K apply(T item);
-    }
-
-    public static <T, K> List<K> map(final List<T> target, final Mapper<T, K> mapper) {
-        if (target == null) {
-            return null;
-        }
-        final List<K> list = new ArrayList<K>();
-        for (T item : target) {
-            final K mappedItem = mapper.apply(item);
-            if (mappedItem != null) {
-                list.add(mappedItem);
-            }
-        }
-        return (list.size() == 0 ? null : list);
-    }
-
-    public static String getUriString(final Uri uri) {
-        return (uri == null ? null : uri.toString());
-    }
-
-    public static boolean isWebUri(final Uri uri) {
-        return (uri != null)
-                && ("http".equalsIgnoreCase(uri.getScheme())
-                || "https".equalsIgnoreCase(uri.getScheme()));
-    }
-
-    public static boolean isContentUri(final Uri uri) {
-        return (uri != null) && ("content".equalsIgnoreCase(uri.getScheme()));
-    }
-
-    public static boolean isFileUri(final Uri uri) {
-        return (uri != null) && ("file".equalsIgnoreCase(uri.getScheme()));
-    }
-
-    public static long getContentSize(final Uri contentUri) {
-        Cursor cursor = null;
-        try {
-            cursor = FacebookSdk
-                    .getApplicationContext()
-                    .getContentResolver()
-                    .query(contentUri, null, null, null, null);
-            int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);
-
-            cursor.moveToFirst();
-            return cursor.getLong(sizeIndex);
-        } finally {
-            if (cursor != null) {
-                cursor.close();
-            }
-        }
-    }
-
-    public static Date getBundleLongAsDate(Bundle bundle, String key, Date dateBase) {
-        if (bundle == null) {
-            return null;
-        }
-
-        long secondsFromBase = Long.MIN_VALUE;
-
-        Object secondsObject = bundle.get(key);
-        if (secondsObject instanceof Long) {
-            secondsFromBase = (Long) secondsObject;
-        } else if (secondsObject instanceof String) {
-            try {
-                secondsFromBase = Long.parseLong((String) secondsObject);
-            } catch (NumberFormatException e) {
-                return null;
-            }
-        } else {
-            return null;
-        }
-
-        if (secondsFromBase == 0) {
-            return new Date(Long.MAX_VALUE);
-        } else {
-            return new Date(dateBase.getTime() + (secondsFromBase * 1000L));
-        }
-    }
-
-    public static void writeStringMapToParcel(Parcel parcel, final Map<String, String> map) {
-        if (map == null) {
-            // 0 is for empty map, -1 to indicate null
-            parcel.writeInt(-1);
-        } else {
-            parcel.writeInt(map.size());
-            for (Map.Entry<String, String> entry : map.entrySet()) {
-                parcel.writeString(entry.getKey());
-                parcel.writeString(entry.getValue());
-            }
-        }
-    }
-
-    public static Map<String, String> readStringMapFromParcel(Parcel parcel) {
-        int size = parcel.readInt();
-        if (size < 0) {
-            return null;
-        }
-        Map<String, String> map = new HashMap<>();
-        for (int i = 0; i < size; i++) {
-            map.put(parcel.readString(), parcel.readString());
-        }
-        return map;
-    }
-
-    public static boolean isCurrentAccessToken(AccessToken token) {
-        return token != null ? token.equals(AccessToken.getCurrentAccessToken()) : false;
-    }
-
-    public interface GraphMeRequestWithCacheCallback {
-        void onSuccess(JSONObject userInfo);
-
-        void onFailure(FacebookException error);
-    }
-
-    public static void getGraphMeRequestWithCacheAsync(
-            final String accessToken,
-            final GraphMeRequestWithCacheCallback callback) {
-        JSONObject cachedValue = ProfileInformationCache.getProfileInformation(accessToken);
-        if (cachedValue != null) {
-            callback.onSuccess(cachedValue);
-            return;
-        }
-
-        GraphRequest.Callback graphCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                if (response.getError() != null) {
-                    callback.onFailure(response.getError().getException());
-                } else {
-                    ProfileInformationCache.putProfileInformation(
-                            accessToken,
-                            response.getJSONObject());
-                    callback.onSuccess(response.getJSONObject());
-                }
-            }
-        };
-        GraphRequest graphRequest = getGraphMeRequestWithCache(accessToken);
-        graphRequest.setCallback(graphCallback);
-        graphRequest.executeAsync();
-    }
-
-    public static JSONObject awaitGetGraphMeRequestWithCache(
-            final String accessToken) {
-        JSONObject cachedValue = ProfileInformationCache.getProfileInformation(accessToken);
-        if (cachedValue != null) {
-            return cachedValue;
-        }
-
-        GraphRequest graphRequest = getGraphMeRequestWithCache(accessToken);
-        GraphResponse response = graphRequest.executeAndWait();
-        if (response.getError() != null) {
-            return null;
-        }
-
-        return response.getJSONObject();
-    }
-
-    private static GraphRequest getGraphMeRequestWithCache(
-            final String accessToken) {
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "id,name,first_name,middle_name,last_name,link");
-        parameters.putString("access_token", accessToken);
-        GraphRequest graphRequest = new GraphRequest(
-                null,
-                "me",
-                parameters,
-                HttpMethod.GET,
-                null);
-        return graphRequest;
-    }
-
-    /**
-     * Return our best guess at the available number of cores. Will always return at least 1.
-     * @return The minimum number of CPU cores
-     */
-    private static int refreshBestGuessNumberOfCPUCores() {
-        // If we have calculated this before, return that value
-        if (numCPUCores > 0) {
-            return numCPUCores;
-        }
-
-        // Enumerate all available CPU files and try to count the number of CPU cores.
-        try {
-            int res = 0;
-            File cpuDir = new File("/sys/devices/system/cpu/");
-            File[] cpuFiles = cpuDir.listFiles(new FilenameFilter() {
-                @Override
-                public boolean accept(File dir, String fileName) {
-                    return Pattern.matches("cpu[0-9]+", fileName);
-                }
-            });
-
-            if (cpuFiles != null) {
-                numCPUCores = cpuFiles.length;
-            }
-        } catch (Exception e) {
-        }
-
-        // If enumerating and counting the CPU cores fails, use the runtime. Fallback to 1 if
-        // that returns bogus values.
-        if (numCPUCores <= 0) {
-            numCPUCores = Math.max(Runtime.getRuntime().availableProcessors(), 1);
-        }
-        return numCPUCores;
-    }
-
-    private static void refreshPeriodicExtendedDeviceInfo(Context appContext) {
-        if (timestampOfLastCheck == -1 ||
-                (System.currentTimeMillis() - timestampOfLastCheck) >=
-                        Utility.REFRESH_TIME_FOR_EXTENDED_DEVICE_INFO_MILLIS) {
-            timestampOfLastCheck = System.currentTimeMillis();
-            Utility.refreshTimezone();
-            Utility.refreshCarrierName(appContext);
-            Utility.refreshTotalExternalStorage();
-            Utility.refreshAvailableExternalStorage();
-        }
-    }
-
-    private static void refreshTimezone() {
-        try {
-            TimeZone tz = TimeZone.getDefault();
-            deviceTimezoneAbbreviation = tz.getDisplayName(
-                    tz.inDaylightTime(new Date()),
-                    TimeZone.SHORT
-            );
-            deviceTimeZoneName = tz.getID();
-        } catch (Exception e) {
-        }
-    }
-
-    /**
-     * Get and cache the carrier name since this won't change during the lifetime of the app.
-     * @return The carrier name
-     */
-    private static void refreshCarrierName(Context appContext) {
-        if (carrierName.equals(noCarrierConstant)) {
-            try {
-                TelephonyManager telephonyManager =
-                        ((TelephonyManager) appContext.getSystemService(Context.TELEPHONY_SERVICE));
-                carrierName = telephonyManager.getNetworkOperatorName();
-            } catch (Exception e) {
-            }
-        }
-    }
-
-    /**
-     * @return whether there is external storage:
-     */
-    private static boolean externalStorageExists() {
-        return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
-    }
-
-    // getAvailableBlocks/getBlockSize deprecated but required pre-API v18
-    @SuppressWarnings("deprecation")
-    private static void refreshAvailableExternalStorage() {
-        try {
-            if (externalStorageExists()) {
-                File path = Environment.getExternalStorageDirectory();
-                StatFs stat = new StatFs(path.getPath());
-                availableExternalStorageGB =
-                        (long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
-            }
-            availableExternalStorageGB =
-                    Utility.convertBytesToGB(availableExternalStorageGB);
-        } catch (Exception e) {
-            // Swallow
-        }
-    }
-
-    // getAvailableBlocks/getBlockSize deprecated but required pre-API v18
-    @SuppressWarnings("deprecation")
-    private static void refreshTotalExternalStorage() {
-        try {
-            if (externalStorageExists()) {
-                File path = Environment.getExternalStorageDirectory();
-                StatFs stat = new StatFs(path.getPath());
-                totalExternalStorageGB = (long)stat.getBlockCount() * (long)stat.getBlockSize();
-            }
-            totalExternalStorageGB = Utility.convertBytesToGB(totalExternalStorageGB);
-        } catch (Exception e) {
-            // Swallow
-        }
-    }
-
-    private static long convertBytesToGB(double bytes) {
-        return Math.round(bytes / (1024.0 * 1024.0 * 1024.0));
-    }
-
-    /**
-     * Internal helper class that is used to hold two different permission lists (granted and
-     * declined)
-     */
-    public static class PermissionsPair {
-        List<String> grantedPermissions;
-        List<String> declinedPermissions;
-
-        public PermissionsPair(List<String> grantedPermissions, List<String> declinedPermissions) {
-            this.grantedPermissions = grantedPermissions;
-            this.declinedPermissions = declinedPermissions;
-        }
-
-        public List<String> getGrantedPermissions() {
-            return grantedPermissions;
-        }
-
-        public List<String> getDeclinedPermissions() {
-            return declinedPermissions;
-        }
-    }
-
-    public static PermissionsPair handlePermissionResponse(JSONObject result)
-        throws JSONException {
-
-        JSONObject permissions = result.getJSONObject("permissions");
-
-        JSONArray data = permissions.getJSONArray("data");
-        List<String> grantedPermissions = new ArrayList<>(data.length());
-        List<String> declinedPermissions = new ArrayList<>(data.length());
-
-        for (int i = 0; i < data.length(); ++i) {
-            JSONObject object = data.optJSONObject(i);
-            String permission = object.optString("permission");
-            if (permission == null || permission.equals("installed")) {
-                continue;
-            }
-            String status = object.optString("status");
-            if (status == null) {
-                continue;
-            }
-
-            if (status.equals("granted")) {
-                grantedPermissions.add(permission);
-            } else if (status.equals("declined")) {
-                declinedPermissions.add(permission);
-            }
-        }
-
-        return new PermissionsPair(grantedPermissions, declinedPermissions);
-    }
-
-    public static String generateRandomString(int length) {
-        Random r = new Random();
-        return new BigInteger(length * 5, r).toString(32);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/Validate.java b/facebook/src/main/java/com/facebook/internal/Validate.java
deleted file mode 100644
index 5ad4b5073..000000000
--- a/facebook/src/main/java/com/facebook/internal/Validate.java
+++ /dev/null
@@ -1,262 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.Manifest;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.os.Looper;
-import android.util.Log;
-
-import com.facebook.CustomTabActivity;
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.FacebookSdkNotInitializedException;
-
-import java.util.Collection;
-import java.util.List;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public final class Validate {
-
-    private static final String TAG = Validate.class.getName();
-
-    private static final String NO_INTERNET_PERMISSION_REASON =
-            "No internet permissions granted for the app, please add " +
-            "<uses-permission android:name=\"android.permission.INTERNET\" /> " +
-            "to your AndroidManifest.xml.";
-
-    private static final String FACEBOOK_ACTIVITY_NOT_FOUND_REASON =
-            "FacebookActivity is not declared in the AndroidManifest.xml, please add " +
-            "com.facebook.FacebookActivity to your AndroidManifest.xml file. See " +
-            "https://developers.facebook.com/docs/android/getting-started for more info.";
-
-    private static final String CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON =
-            "FacebookActivity is declared incorrectly in the AndroidManifest.xml, please " +
-            "add com.facebook.FacebookActivity to your AndroidManifest.xml file. " +
-            "See https://developers.facebook.com/docs/android/getting-started for more info.";
-
-    private static final String CONTENT_PROVIDER_NOT_FOUND_REASON =
-            "A ContentProvider for this app was not set up in the AndroidManifest.xml, please " +
-            "add %s as a provider to your AndroidManifest.xml file. See " +
-            "https://developers.facebook.com/docs/sharing/android for more info.";
-
-    private static final String CONTENT_PROVIDER_BASE = "com.facebook.app.FacebookContentProvider";
-
-    public static void notNull(Object arg, String name) {
-        if (arg == null) {
-            throw new NullPointerException("Argument '" + name + "' cannot be null");
-        }
-    }
-
-    public static <T> void notEmpty(Collection<T> container, String name) {
-        if (container.isEmpty()) {
-            throw new IllegalArgumentException("Container '" + name + "' cannot be empty");
-        }
-    }
-
-    public static <T> void containsNoNulls(Collection<T> container, String name) {
-        Validate.notNull(container, name);
-        for (T item : container) {
-            if (item == null) {
-                throw new NullPointerException("Container '" + name +
-                        "' cannot contain null values");
-            }
-        }
-    }
-
-    public static void containsNoNullOrEmpty(Collection<String> container, String name) {
-        Validate.notNull(container, name);
-        for (String item : container) {
-            if (item == null) {
-                throw new NullPointerException("Container '" + name +
-                        "' cannot contain null values");
-            }
-            if (item.length() == 0) {
-                throw new IllegalArgumentException("Container '" + name +
-                        "' cannot contain empty values");
-            }
-        }
-    }
-
-    public static <T> void notEmptyAndContainsNoNulls(Collection<T> container, String name) {
-        Validate.containsNoNulls(container, name);
-        Validate.notEmpty(container, name);
-    }
-
-    public static void runningOnUiThread() {
-        if (!Looper.getMainLooper().equals(Looper.myLooper())) {
-            throw new FacebookException("This method should be called from the UI thread");
-        }
-    }
-
-    public static void notNullOrEmpty(String arg, String name) {
-        if (Utility.isNullOrEmpty(arg)) {
-            throw new IllegalArgumentException("Argument '" + name + "' cannot be null or empty");
-        }
-    }
-
-    public static void oneOf(Object arg, String name, Object... values) {
-        for (Object value : values) {
-            if (value != null) {
-                if (value.equals(arg)) {
-                    return;
-                }
-            } else {
-                if (arg == null) {
-                    return;
-                }
-            }
-        }
-        throw new IllegalArgumentException("Argument '" + name +
-                "' was not one of the allowed values");
-    }
-
-    public static void sdkInitialized() {
-        if (!FacebookSdk.isInitialized()) {
-            throw new FacebookSdkNotInitializedException(
-                    "The SDK has not been initialized, make sure to call " +
-                    "FacebookSdk.sdkInitialize() first.");
-        }
-    }
-
-    public static String hasAppID() {
-        String id = FacebookSdk.getApplicationId();
-        if (id == null) {
-            throw new IllegalStateException("No App ID found, please set the App ID.");
-        }
-        return id;
-    }
-
-    public static String hasClientToken() {
-        String token = FacebookSdk.getClientToken();
-        if (token == null) {
-            throw new IllegalStateException("No Client Token found, please set the Client Token.");
-        }
-        return token;
-    }
-
-    public static void hasInternetPermissions(Context context) {
-        Validate.hasInternetPermissions(context, true);
-    }
-
-    public static void hasInternetPermissions(Context context, boolean shouldThrow) {
-        Validate.notNull(context, "context");
-        if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET) ==
-                PackageManager.PERMISSION_DENIED) {
-            if (shouldThrow) {
-                throw new IllegalStateException(NO_INTERNET_PERMISSION_REASON);
-            } else {
-                Log.w(TAG, NO_INTERNET_PERMISSION_REASON);
-            }
-        }
-    }
-
-    public static void hasFacebookActivity(Context context) {
-        Validate.hasFacebookActivity(context, true);
-    }
-
-    public static void hasFacebookActivity(Context context, boolean shouldThrow) {
-        Validate.notNull(context, "context");
-        PackageManager pm = context.getPackageManager();
-        ActivityInfo activityInfo = null;
-        if (pm != null) {
-            ComponentName componentName =
-                    new ComponentName(context, FacebookActivity.class);
-            try {
-                activityInfo = pm.getActivityInfo(componentName, PackageManager.GET_ACTIVITIES);
-            } catch (PackageManager.NameNotFoundException e) {
-            }
-        }
-        if (activityInfo == null) {
-            if (shouldThrow) {
-                throw new IllegalStateException(FACEBOOK_ACTIVITY_NOT_FOUND_REASON);
-            } else {
-                Log.w(TAG, FACEBOOK_ACTIVITY_NOT_FOUND_REASON);
-            }
-        }
-    }
-
-    public static void checkCustomTabRedirectActivity(Context context) {
-        Validate.checkCustomTabRedirectActivity(context, true);
-    }
-
-    public static void checkCustomTabRedirectActivity(Context context, boolean shouldThrow) {
-        if (!hasCustomTabRedirectActivity(context)) {
-            if (shouldThrow) {
-                throw new IllegalStateException(CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON);
-            } else {
-                Log.w(TAG, CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON);
-            }
-        }
-    }
-
-    public static boolean hasCustomTabRedirectActivity(Context context) {
-        Validate.notNull(context, "context");
-        PackageManager pm = context.getPackageManager();
-        List<ResolveInfo> infos = null;
-        if (pm != null) {
-            Intent intent = new Intent();
-            intent.setAction(Intent.ACTION_VIEW);
-            intent.addCategory(Intent.CATEGORY_DEFAULT);
-            intent.addCategory(Intent.CATEGORY_BROWSABLE);
-            intent.setData(Uri.parse("fb" + FacebookSdk.getApplicationId() + "://authorize"));
-            infos = pm.queryIntentActivities(intent, PackageManager.GET_RESOLVED_FILTER);
-        }
-        boolean hasActivity = false;
-        if (infos != null) {
-            for (ResolveInfo info : infos) {
-                ActivityInfo activityInfo = info.activityInfo;
-                if (activityInfo.name.equals(CustomTabActivity.class.getName())) {
-                    hasActivity = true;
-                } else {
-                    // another application is listening for this url scheme, don't open
-                    // Custom Tab for security reasons
-                    return false;
-                }
-            }
-        }
-        return hasActivity;
-    }
-
-    public static void hasContentProvider(Context context) {
-        Validate.notNull(context, "context");
-        String appId = Validate.hasAppID();
-        PackageManager pm = context.getPackageManager();
-        if (pm != null) {
-            String providerName = CONTENT_PROVIDER_BASE + appId;
-            if (pm.resolveContentProvider(providerName, 0) == null) {
-                throw new IllegalStateException(
-                        String.format(CONTENT_PROVIDER_NOT_FOUND_REASON, providerName));
-            }
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/WebDialog.java b/facebook/src/main/java/com/facebook/internal/WebDialog.java
deleted file mode 100644
index f92dd8230..000000000
--- a/facebook/src/main/java/com/facebook/internal/WebDialog.java
+++ /dev/null
@@ -1,659 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.annotation.SuppressLint;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.net.http.SslError;
-import android.os.Bundle;
-import android.util.DisplayMetrics;
-import android.view.*;
-import android.webkit.SslErrorHandler;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import com.facebook.*;
-import com.facebook.R;
-
-import java.util.Locale;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- *
- * This class provides a mechanism for displaying Facebook Web dialogs inside a Dialog. Helper
- * methods are provided to construct commonly-used dialogs, or a caller can specify arbitrary
- * parameters to call other dialogs.
- */
-public class WebDialog extends Dialog {
-    private static final String LOG_TAG = Logger.LOG_TAG_BASE + "WebDialog";
-    private static final String DISPLAY_TOUCH = "touch";
-    private static final int API_EC_DIALOG_CANCEL = 4201;
-    static final String REDIRECT_URI = "fbconnect://success";
-    static final String CANCEL_URI = "fbconnect://cancel";
-    static final boolean DISABLE_SSL_CHECK_FOR_TESTING = false;
-
-    // width below which there are no extra margins
-    private static final int NO_PADDING_SCREEN_WIDTH = 480;
-    // width beyond which we're always using the MIN_SCALE_FACTOR
-    private static final int MAX_PADDING_SCREEN_WIDTH = 800;
-    // height below which there are no extra margins
-    private static final int NO_PADDING_SCREEN_HEIGHT = 800;
-    // height beyond which we're always using the MIN_SCALE_FACTOR
-    private static final int MAX_PADDING_SCREEN_HEIGHT = 1280;
-
-    // the minimum scaling factor for the web dialog (50% of screen size)
-    private static final double MIN_SCALE_FACTOR = 0.5;
-    // translucent border around the webview
-    private static final int BACKGROUND_GRAY = 0xCC000000;
-
-    public static final int DEFAULT_THEME = android.R.style.Theme_Translucent_NoTitleBar;
-
-    private String url;
-    private String expectedRedirectUrl = REDIRECT_URI;
-    private OnCompleteListener onCompleteListener;
-    private WebView webView;
-    private ProgressDialog spinner;
-    private ImageView crossImageView;
-    private FrameLayout contentFrameLayout;
-    private boolean listenerCalled = false;
-    private boolean isDetached = false;
-    private boolean isPageFinished = false;
-
-    /**
-     * Interface that implements a listener to be called when the user's interaction with the
-     * dialog completes, whether because the dialog finished successfully, or it was cancelled,
-     * or an error was encountered.
-     */
-    public interface OnCompleteListener {
-        /**
-         * Called when the dialog completes.
-         *
-         * @param values on success, contains the values returned by the dialog
-         * @param error  on an error, contains an exception describing the error
-         */
-        void onComplete(Bundle values, FacebookException error);
-    }
-
-    /**
-     * Constructor which can be used to display a dialog with an already-constructed URL.
-     *
-     * @param context the context to use to display the dialog
-     * @param url     the URL of the Web Dialog to display; no validation is done on this URL, but it should
-     *                be a valid URL pointing to a Facebook Web Dialog
-     */
-    public WebDialog(Context context, String url) {
-        this(context, url, FacebookSdk.getWebDialogTheme());
-    }
-
-    /**
-     * Constructor which can be used to display a dialog with an already-constructed URL and a custom theme.
-     *
-     * @param context the context to use to display the dialog
-     * @param url     the URL of the Web Dialog to display; no validation is done on this URL, but it should
-     *                be a valid URL pointing to a Facebook Web Dialog
-     * @param theme   identifier of a theme to pass to the Dialog class
-     */
-    public WebDialog(Context context, String url, int theme) {
-        super(context, theme == 0 ? FacebookSdk.getWebDialogTheme() : theme);
-        this.url = url;
-    }
-
-    /**
-     * Constructor which will construct the URL of the Web dialog based on the specified parameters.
-     *
-     * @param context    the context to use to display the dialog
-     * @param action     the portion of the dialog URL following "dialog/"
-     * @param parameters parameters which will be included as part of the URL
-     * @param theme      identifier of a theme to pass to the Dialog class
-     * @param listener the listener to notify, or null if no notification is desired
-     */
-    public WebDialog(Context context, String action, Bundle parameters, int theme, OnCompleteListener listener) {
-        super(context, theme == 0 ? FacebookSdk.getWebDialogTheme() : theme);
-
-        if (parameters == null) {
-            parameters = new Bundle();
-        }
-
-        // our webview client only handles the redirect uri we specify, so just hard code it here
-        parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
-
-        parameters.putString(ServerProtocol.DIALOG_PARAM_DISPLAY, DISPLAY_TOUCH);
-
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_SDK_VERSION,
-                String.format(Locale.ROOT, "android-%s", FacebookSdk.getSdkVersion()));
-
-        Uri uri = Utility.buildUri(
-                ServerProtocol.getDialogAuthority(),
-                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
-                parameters);
-        this.url = uri.toString();
-        onCompleteListener = listener;
-    }
-
-    /**
-     * Sets the listener which will be notified when the dialog finishes.
-     *
-     * @param listener the listener to notify, or null if no notification is desired
-     */
-    public void setOnCompleteListener(OnCompleteListener listener) {
-        onCompleteListener = listener;
-    }
-
-    /**
-     * Gets the listener which will be notified when the dialog finishes.
-     *
-     * @return the listener, or null if none has been specified
-     */
-    public OnCompleteListener getOnCompleteListener() {
-        return onCompleteListener;
-    }
-
-    @Override
-    public boolean onKeyDown(int keyCode, KeyEvent event) {
-        if (keyCode == KeyEvent.KEYCODE_BACK) {
-            cancel();
-        }
-
-        return super.onKeyDown(keyCode, event);
-    }
-
-    @Override
-    public void dismiss() {
-        if (webView != null) {
-            webView.stopLoading();
-        }
-        if (!isDetached) {
-            if (spinner != null && spinner.isShowing()) {
-                spinner.dismiss();
-            }
-        }
-        super.dismiss();
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        resize();
-    }
-
-    @Override
-    public void onDetachedFromWindow() {
-        isDetached = true;
-        super.onDetachedFromWindow();
-    }
-
-    @Override
-    public void onAttachedToWindow() {
-        isDetached = false;
-        super.onAttachedToWindow();
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        spinner = new ProgressDialog(getContext());
-        spinner.requestWindowFeature(Window.FEATURE_NO_TITLE);
-        spinner.setMessage(getContext().getString(R.string.com_facebook_loading));
-        // Stops people from accidently cancelling the login flow
-        spinner.setCanceledOnTouchOutside(false);
-        spinner.setOnCancelListener(new OnCancelListener() {
-            @Override
-            public void onCancel(DialogInterface dialogInterface) {
-                cancel();
-            }
-        });
-
-        requestWindowFeature(Window.FEATURE_NO_TITLE);
-        contentFrameLayout = new FrameLayout(getContext());
-
-        // First calculate how big the frame layout should be
-        resize();
-        getWindow().setGravity(Gravity.CENTER);
-
-        // resize the dialog if the soft keyboard comes up
-        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
-
-        /* Create the 'x' image, but don't add to the contentFrameLayout layout yet
-         * at this point, we only need to know its drawable width and height
-         * to place the webview
-         */
-        createCrossImage();
-
-        /* Now we know 'x' drawable width and height,
-         * layout the webview and add it the contentFrameLayout layout
-         */
-        int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
-
-        setUpWebView(crossWidth / 2 + 1);
-
-        /* Finally add the 'x' image to the contentFrameLayout layout and
-        * add contentFrameLayout to the Dialog view
-        */
-        contentFrameLayout.addView(crossImageView, new ViewGroup.LayoutParams(
-                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
-
-        setContentView(contentFrameLayout);
-    }
-
-    protected void setExpectedRedirectUrl(String expectedRedirectUrl) {
-        this.expectedRedirectUrl = expectedRedirectUrl;
-    }
-
-    protected Bundle parseResponseUri(String urlString) {
-        Uri u = Uri.parse(urlString);
-
-        Bundle b = Utility.parseUrlQueryString(u.getQuery());
-        b.putAll(Utility.parseUrlQueryString(u.getFragment()));
-
-        return b;
-    }
-
-    protected boolean isListenerCalled() {
-        return listenerCalled;
-    }
-
-    protected boolean isPageFinished() {
-        return isPageFinished;
-    }
-
-    protected WebView getWebView() {
-        return webView;
-    }
-
-    public void resize() {
-        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
-        Display display = wm.getDefaultDisplay();
-        DisplayMetrics metrics = new DisplayMetrics();
-        display.getMetrics(metrics);
-        // always use the portrait dimensions to do the scaling calculations so we always get a portrait shaped
-        // web dialog
-        int width = metrics.widthPixels < metrics.heightPixels ? metrics.widthPixels : metrics.heightPixels;
-        int height = metrics.widthPixels < metrics.heightPixels ? metrics.heightPixels : metrics.widthPixels;
-
-        int dialogWidth = Math.min(
-                getScaledSize(width, metrics.density, NO_PADDING_SCREEN_WIDTH, MAX_PADDING_SCREEN_WIDTH),
-                metrics.widthPixels);
-        int dialogHeight = Math.min(
-                getScaledSize(height, metrics.density, NO_PADDING_SCREEN_HEIGHT, MAX_PADDING_SCREEN_HEIGHT),
-                metrics.heightPixels);
-
-        getWindow().setLayout(dialogWidth, dialogHeight);
-    }
-
-    /**
-     * Returns a scaled size (either width or height) based on the parameters passed.
-     * @param screenSize a pixel dimension of the screen (either width or height)
-     * @param density density of the screen
-     * @param noPaddingSize the size at which there's no padding for the dialog
-     * @param maxPaddingSize the size at which to apply maximum padding for the dialog
-     * @return a scaled size.
-     */
-    private int getScaledSize(int screenSize, float density, int noPaddingSize, int maxPaddingSize) {
-        int scaledSize = (int) ((float) screenSize / density);
-        double scaleFactor;
-        if (scaledSize <= noPaddingSize) {
-            scaleFactor = 1.0;
-        } else if (scaledSize >= maxPaddingSize) {
-            scaleFactor = MIN_SCALE_FACTOR;
-        } else {
-            // between the noPadding and maxPadding widths, we take a linear reduction to go from 100%
-            // of screen size down to MIN_SCALE_FACTOR
-            scaleFactor = MIN_SCALE_FACTOR +
-                    ((double) (maxPaddingSize - scaledSize))
-                            / ((double) (maxPaddingSize - noPaddingSize))
-                            * (1.0 - MIN_SCALE_FACTOR);
-        }
-        return (int) (screenSize * scaleFactor);
-    }
-
-    protected void sendSuccessToListener(Bundle values) {
-        if (onCompleteListener != null && !listenerCalled) {
-            listenerCalled = true;
-            onCompleteListener.onComplete(values, null);
-            dismiss();
-        }
-    }
-
-    protected void sendErrorToListener(Throwable error) {
-        if (onCompleteListener != null && !listenerCalled) {
-            listenerCalled = true;
-            FacebookException facebookException = null;
-            if (error instanceof FacebookException) {
-                facebookException = (FacebookException) error;
-            } else {
-                facebookException = new FacebookException(error);
-            }
-            onCompleteListener.onComplete(null, facebookException);
-            dismiss();
-        }
-    }
-
-    public void cancel() {
-        if (onCompleteListener != null && !listenerCalled) {
-            sendErrorToListener(new FacebookOperationCanceledException());
-        }
-    }
-
-    private void createCrossImage() {
-        crossImageView = new ImageView(getContext());
-        // Dismiss the dialog when user click on the 'x'
-        crossImageView.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                cancel();
-            }
-        });
-        Drawable crossDrawable = getContext().getResources().getDrawable(R.drawable.com_facebook_close);
-        crossImageView.setImageDrawable(crossDrawable);
-        /* 'x' should not be visible while webview is loading
-         * make it visible only after webview has fully loaded
-         */
-        crossImageView.setVisibility(View.INVISIBLE);
-    }
-
-    @SuppressLint("SetJavaScriptEnabled")
-    private void setUpWebView(int margin) {
-        LinearLayout webViewContainer = new LinearLayout(getContext());
-        webView = new WebView(getContext().getApplicationContext()) {
-            /* Prevent NPE on Motorola 2.2 devices
-             * See https://groups.google.com/forum/?fromgroups=#!topic/android-developers/ktbwY2gtLKQ
-             */
-            @Override
-            public void onWindowFocusChanged(boolean hasWindowFocus) {
-                try {
-                    super.onWindowFocusChanged(hasWindowFocus);
-                } catch (NullPointerException e) {
-                }
-            }
-        };
-        webView.setVerticalScrollBarEnabled(false);
-        webView.setHorizontalScrollBarEnabled(false);
-        webView.setWebViewClient(new DialogWebViewClient());
-        webView.getSettings().setJavaScriptEnabled(true);
-        webView.loadUrl(url);
-        webView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
-                ViewGroup.LayoutParams.MATCH_PARENT));
-        webView.setVisibility(View.INVISIBLE);
-        webView.getSettings().setSavePassword(false);
-        webView.getSettings().setSaveFormData(false);
-        webView.setFocusable(true);
-        webView.setFocusableInTouchMode(true);
-        webView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (!v.hasFocus())
-                {
-                    v.requestFocus();
-                }
-                return false;
-            }
-        });
-
-        webViewContainer.setPadding(margin, margin, margin, margin);
-        webViewContainer.addView(webView);
-        webViewContainer.setBackgroundColor(BACKGROUND_GRAY);
-        contentFrameLayout.addView(webViewContainer);
-    }
-
-    private class DialogWebViewClient extends WebViewClient {
-        @Override
-        public boolean shouldOverrideUrlLoading(WebView view, String url) {
-            Utility.logd(LOG_TAG, "Redirect URL: " + url);
-            if (url.startsWith(WebDialog.this.expectedRedirectUrl)) {
-                Bundle values = parseResponseUri(url);
-
-                String error = values.getString("error");
-                if (error == null) {
-                    error = values.getString("error_type");
-                }
-
-                String errorMessage = values.getString("error_msg");
-                if (errorMessage == null) {
-                    errorMessage = values.getString("error_message");
-                }
-                if (errorMessage == null) {
-                    errorMessage = values.getString("error_description");
-                }
-                String errorCodeString = values.getString("error_code");
-                int errorCode = FacebookRequestError.INVALID_ERROR_CODE;
-                if (!Utility.isNullOrEmpty(errorCodeString)) {
-                    try {
-                        errorCode = Integer.parseInt(errorCodeString);
-                    } catch (NumberFormatException ex) {
-                        errorCode = FacebookRequestError.INVALID_ERROR_CODE;
-                    }
-                }
-
-                if (Utility.isNullOrEmpty(error) && Utility
-                        .isNullOrEmpty(errorMessage) && errorCode == FacebookRequestError.INVALID_ERROR_CODE) {
-                    sendSuccessToListener(values);
-                } else if (error != null && (error.equals("access_denied") ||
-                        error.equals("OAuthAccessDeniedException"))) {
-                    cancel();
-                } else if (errorCode == API_EC_DIALOG_CANCEL) {
-                    cancel();
-                } else {
-                    FacebookRequestError requestError = new FacebookRequestError(errorCode, error, errorMessage);
-                    sendErrorToListener(new FacebookServiceException(requestError, errorMessage));
-                }
-                return true;
-            } else if (url.startsWith(WebDialog.CANCEL_URI)) {
-                cancel();
-                return true;
-            } else if (url.contains(DISPLAY_TOUCH)) {
-                return false;
-            }
-            // launch non-dialog URLs in a full browser
-            try {
-                getContext().startActivity(
-                        new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
-                return true;
-            } catch (ActivityNotFoundException e) {
-                return false;
-            }
-        }
-
-        @Override
-        public void onReceivedError(WebView view, int errorCode,
-                String description, String failingUrl) {
-            super.onReceivedError(view, errorCode, description, failingUrl);
-            sendErrorToListener(new FacebookDialogException(description, errorCode, failingUrl));
-        }
-
-        @Override
-        public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
-            if (DISABLE_SSL_CHECK_FOR_TESTING) {
-                handler.proceed();
-            } else {
-                super.onReceivedSslError(view, handler, error);
-
-                handler.cancel();
-                sendErrorToListener(new FacebookDialogException(null, ERROR_FAILED_SSL_HANDSHAKE, null));
-            }
-        }
-
-        @Override
-        public void onPageStarted(WebView view, String url, Bitmap favicon) {
-            Utility.logd(LOG_TAG, "Webview loading URL: " + url);
-            super.onPageStarted(view, url, favicon);
-            if (!isDetached) {
-                spinner.show();
-            }
-        }
-
-        @Override
-        public void onPageFinished(WebView view, String url) {
-            super.onPageFinished(view, url);
-            if (!isDetached) {
-                spinner.dismiss();
-            }
-            /*
-             * Once web view is fully loaded, set the contentFrameLayout background to be transparent
-             * and make visible the 'x' image.
-             */
-            contentFrameLayout.setBackgroundColor(Color.TRANSPARENT);
-            webView.setVisibility(View.VISIBLE);
-            crossImageView.setVisibility(View.VISIBLE);
-            isPageFinished = true;
-        }
-    }
-
-    public static class Builder {
-        private Context context;
-        private String applicationId;
-        private String action;
-        private int theme;
-        private OnCompleteListener listener;
-        private Bundle parameters;
-        private AccessToken accessToken;
-
-        /**
-         * Constructor that builds a dialog using either the current access token, or the
-         * application id specified in the application/meta-data.
-         *
-         * @param context the Context within which the dialog will be shown.
-         * @param action the portion of the dialog URL following www.facebook.com/dialog/.
-         *               See https://developers.facebook.com/docs/reference/dialogs/ for details.
-         * @param parameters a Bundle containing parameters to pass as part of the URL.
-         */
-        public Builder(Context context, String action, Bundle parameters) {
-            accessToken = AccessToken.getCurrentAccessToken();
-            if (accessToken == null) {
-                String applicationId = Utility.getMetadataApplicationId(context);
-                if (applicationId != null) {
-                    this.applicationId = applicationId;
-                } else {
-                    throw new FacebookException("Attempted to create a builder without a valid" +
-                            " access token or a valid default Application ID.");
-                }
-            }
-
-            finishInit(context, action, parameters);
-        }
-
-        /**
-         * Constructor that builds a dialog without an authenticated user.
-         *
-         * @param context the Context within which the dialog will be shown.
-         * @param applicationId the application ID to be included in the dialog URL.
-         * @param action the portion of the dialog URL following www.facebook.com/dialog/.
-         *               See https://developers.facebook.com/docs/reference/dialogs/ for details.
-         * @param parameters a Bundle containing parameters to pass as part of the URL.
-         */
-        public Builder(Context context, String applicationId, String action, Bundle parameters) {
-            if (applicationId == null) {
-                applicationId = Utility.getMetadataApplicationId(context);
-            }
-            Validate.notNullOrEmpty(applicationId, "applicationId");
-            this.applicationId = applicationId;
-
-            finishInit(context, action, parameters);
-        }
-
-        /**
-         * Sets a theme identifier which will be passed to the underlying Dialog.
-         *
-         * @param theme a theme identifier which will be passed to the Dialog class
-         * @return the builder
-         */
-        public Builder setTheme(int theme) {
-            this.theme = theme;
-            return this;
-        }
-
-        /**
-         * Sets the listener which will be notified when the dialog finishes.
-         *
-         * @param listener the listener to notify, or null if no notification is desired
-         * @return the builder
-         */
-        public Builder setOnCompleteListener(OnCompleteListener listener) {
-            this.listener = listener;
-            return this;
-        }
-
-        /**
-         * Constructs a WebDialog using the parameters provided. The dialog is not shown,
-         * but is ready to be shown by calling Dialog.show().
-         *
-         * @return the WebDialog
-         */
-        public WebDialog build() {
-            if (accessToken != null) {
-                parameters.putString(
-                        ServerProtocol.DIALOG_PARAM_APP_ID,
-                        accessToken.getApplicationId());
-                parameters.putString(
-                        ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                        accessToken.getToken());
-            } else {
-                parameters.putString(ServerProtocol.DIALOG_PARAM_APP_ID, applicationId);
-            }
-
-            return new WebDialog(context, action, parameters, theme, listener);
-        }
-
-        public String getApplicationId() {
-            return applicationId;
-        }
-
-        public Context getContext() {
-            return context;
-        }
-
-        public int getTheme() {
-            return theme;
-        }
-
-        public Bundle getParameters() {
-            return parameters;
-        }
-
-        public WebDialog.OnCompleteListener getListener() {
-            return listener;
-        }
-
-        private void finishInit(Context context, String action, Bundle parameters) {
-            this.context = context;
-            this.action = action;
-            if (parameters != null) {
-                this.parameters = parameters;
-            } else {
-                this.parameters = new Bundle();
-            }
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/WorkQueue.java b/facebook/src/main/java/com/facebook/internal/WorkQueue.java
deleted file mode 100644
index 1624cb8ff..000000000
--- a/facebook/src/main/java/com/facebook/internal/WorkQueue.java
+++ /dev/null
@@ -1,230 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookSdk;
-
-import java.util.concurrent.Executor;
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class WorkQueue {
-    public static final int DEFAULT_MAX_CONCURRENT = 8;
-
-    private final Object workLock = new Object();
-    private WorkNode pendingJobs;
-
-    private final int maxConcurrent;
-    private final Executor executor;
-
-    private WorkNode runningJobs = null;
-    private int runningCount = 0;
-
-    public WorkQueue() {
-        this(DEFAULT_MAX_CONCURRENT);
-    }
-
-    public WorkQueue(int maxConcurrent) {
-        this(maxConcurrent, FacebookSdk.getExecutor());
-    }
-
-    public WorkQueue(int maxConcurrent, Executor executor) {
-        this.maxConcurrent = maxConcurrent;
-        this.executor = executor;
-    }
-
-    public WorkItem addActiveWorkItem(Runnable callback) {
-        return addActiveWorkItem(callback, true);
-    }
-
-    public WorkItem addActiveWorkItem(Runnable callback, boolean addToFront) {
-        WorkNode node = new WorkNode(callback);
-        synchronized (workLock) {
-            pendingJobs = node.addToList(pendingJobs, addToFront);
-        }
-
-        startItem();
-        return node;
-    }
-
-    public void validate() {
-        synchronized (workLock) {
-            // Verify that all running items know they are running, and counts match
-            int count = 0;
-
-            if (runningJobs != null) {
-                WorkNode walk = runningJobs;
-                do {
-                    walk.verify(true);
-                    count++;
-                    walk = walk.getNext();
-                } while (walk != runningJobs);
-            }
-
-            assert runningCount == count;
-        }
-    }
-
-    private void startItem() {
-        finishItemAndStartNew(null);
-    }
-
-    private void finishItemAndStartNew(WorkNode finished) {
-        WorkNode ready = null;
-
-        synchronized (workLock) {
-            if (finished != null) {
-                runningJobs = finished.removeFromList(runningJobs);
-                runningCount--;
-            }
-
-            if (runningCount < maxConcurrent) {
-                ready = pendingJobs; // Head of the pendingJobs queue
-                if (ready != null) {
-                    // The Queue reassignments are necessary since 'ready' might have been
-                    // added / removed from the front of either queue, which changes its
-                    // respective head.
-                    pendingJobs = ready.removeFromList(pendingJobs);
-                    runningJobs = ready.addToList(runningJobs, false);
-                    runningCount++;
-
-                    ready.setIsRunning(true);
-                }
-            }
-        }
-
-        if (ready != null) {
-            execute(ready);
-        }
-    }
-
-    private void execute(final WorkNode node) {
-        executor.execute(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    node.getCallback().run();
-                } finally {
-                    finishItemAndStartNew(node);
-                }
-            }
-        });
-    }
-
-    private class WorkNode implements WorkItem {
-        private final Runnable callback;
-        private WorkNode next;
-        private WorkNode prev;
-        private boolean isRunning;
-
-        WorkNode(Runnable callback) {
-            this.callback = callback;
-        }
-
-        @Override
-        public boolean cancel() {
-            synchronized (workLock) {
-                if (!isRunning()) {
-                    pendingJobs = removeFromList(pendingJobs);
-                    return true;
-                }
-            }
-
-            return false;
-        }
-
-        @Override
-        public void moveToFront() {
-            synchronized (workLock) {
-                if (!isRunning()) {
-                    pendingJobs = removeFromList(pendingJobs);
-                    pendingJobs = addToList(pendingJobs, true);
-                }
-            }
-        }
-
-        @Override
-        public boolean isRunning() {
-            return isRunning;
-        }
-
-        Runnable getCallback() {
-            return callback;
-        }
-
-        WorkNode getNext() {
-            return next;
-        }
-
-        void setIsRunning(boolean isRunning) {
-            this.isRunning = isRunning;
-        }
-
-        WorkNode addToList(WorkNode list, boolean addToFront) {
-            assert next == null;
-            assert prev == null;
-
-            if (list == null) {
-                list = next = prev = this;
-            } else {
-                next = list;
-                prev = list.prev;
-                next.prev = prev.next = this;
-            }
-
-            return addToFront ? this : list;
-        }
-
-        WorkNode removeFromList(WorkNode list) {
-            assert next != null;
-            assert prev != null;
-
-            if (list == this) {
-                if (next == this) {
-                    list = null;
-                } else {
-                    list = next;
-                }
-            }
-
-            next.prev = prev;
-            prev.next = next;
-            next = prev = null;
-
-            return list;
-        }
-
-        void verify(boolean shouldBeRunning) {
-            assert prev.next == this;
-            assert next.prev == this;
-            assert isRunning() == shouldBeRunning;
-        }
-    }
-
-    public interface WorkItem {
-        boolean cancel();
-        boolean isRunning();
-        void moveToFront();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/package-info.java b/facebook/src/main/java/com/facebook/internal/package-info.java
deleted file mode 100644
index 6c63b4a3f..000000000
--- a/facebook/src/main/java/com/facebook/internal/package-info.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-/**
- * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
- * any of the classes in this package is unsupported, and they may be modified or removed without warning at
- * any time.
- */
-package com.facebook.internal;
diff --git a/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
deleted file mode 100644
index 9298f6de5..000000000
--- a/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
+++ /dev/null
@@ -1,252 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.content.pm.ServiceInfo;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.AccessTokenSource;
-import com.facebook.CustomTabMainActivity;
-import com.facebook.FacebookException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.FacebookServiceException;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-public class CustomTabLoginMethodHandler extends WebLoginMethodHandler {
-    private static final int CUSTOM_TAB_REQUEST_CODE = 1;
-    private static final int CHALLENGE_LENGTH = 20;
-    private static final int API_EC_DIALOG_CANCEL = 4201;
-    private static final String CUSTOM_TABS_SERVICE_ACTION =
-            "android.support.customtabs.action.CustomTabsService";
-    private static final String[] CHROME_PACKAGES = {
-            "com.android.chrome",
-            "com.chrome.beta",
-            "com.chrome.dev",
-    };
-
-    private String currentPackage;
-    private String expectedChallenge;
-
-    CustomTabLoginMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-        expectedChallenge = Utility.generateRandomString(CHALLENGE_LENGTH);
-    }
-
-    @Override
-    String getNameForLogging() {
-        return "custom_tab";
-    }
-
-    @Override
-    AccessTokenSource getTokenSource() {
-        return AccessTokenSource.CHROME_CUSTOM_TAB;
-    }
-
-    @Override
-    protected String getSSODevice() {
-        return "chrome_custom_tab";
-    }
-
-    @Override
-    boolean tryAuthorize(final LoginClient.Request request) {
-        if (!isCustomTabsAllowed()) {
-            return false;
-        }
-
-        Bundle parameters = getParameters(request);
-        parameters = addExtraParameters(parameters, request);
-        Activity activity = loginClient.getActivity();
-
-        Intent intent = new Intent(activity, CustomTabMainActivity.class);
-        intent.putExtra(CustomTabMainActivity.EXTRA_PARAMS, parameters);
-        intent.putExtra(CustomTabMainActivity.EXTRA_CHROME_PACKAGE, getChromePackage());
-        loginClient.getFragment().startActivityForResult(intent, CUSTOM_TAB_REQUEST_CODE);
-
-        return true;
-    }
-
-    private boolean isCustomTabsAllowed() {
-        return isCustomTabsEnabled()
-                && getChromePackage() != null
-                && Validate.hasCustomTabRedirectActivity(FacebookSdk.getApplicationContext());
-    }
-
-    private boolean isCustomTabsEnabled() {
-        final String appId = Utility.getMetadataApplicationId(loginClient.getActivity());
-        final Utility.FetchedAppSettings settings = Utility.getAppSettingsWithoutQuery(appId);
-        return settings != null && settings.getCustomTabsEnabled();
-    }
-
-    private String getChromePackage() {
-        if (currentPackage != null) {
-            return currentPackage;
-        }
-        Context context = loginClient.getActivity();
-        Intent serviceIntent = new Intent(CUSTOM_TABS_SERVICE_ACTION);
-        List<ResolveInfo> resolveInfos =
-                context.getPackageManager().queryIntentServices(serviceIntent, 0);
-        if (resolveInfos != null) {
-            Set<String> chromePackages = new HashSet<>(Arrays.asList(CHROME_PACKAGES));
-            for (ResolveInfo resolveInfo : resolveInfos) {
-                ServiceInfo serviceInfo = resolveInfo.serviceInfo;
-                if (serviceInfo != null && chromePackages.contains(serviceInfo.packageName)) {
-                    currentPackage = serviceInfo.packageName;
-                    return currentPackage;
-                }
-            }
-        }
-        return null;
-    }
-
-    @Override
-    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode != CUSTOM_TAB_REQUEST_CODE) {
-            return super.onActivityResult(requestCode, resultCode, data);
-        }
-        LoginClient.Request request = loginClient.getPendingRequest();
-        if (resultCode == Activity.RESULT_OK) {
-            onCustomTabComplete(data.getStringExtra(CustomTabMainActivity.EXTRA_URL), request);
-            return true;
-        }
-        super.onComplete(request, null, new FacebookOperationCanceledException());
-        return false;
-    }
-
-    private void onCustomTabComplete(String url, LoginClient.Request request) {
-        if (url != null && url.startsWith(CustomTabMainActivity.getRedirectUrl())) {
-            Uri uri = Uri.parse(url);
-            Bundle values = Utility.parseUrlQueryString(uri.getQuery());
-            values.putAll(Utility.parseUrlQueryString(uri.getFragment()));
-
-            if (!validateChallengeParam(values)) {
-                super.onComplete(request, null, new FacebookException("Invalid state parameter"));
-                return;
-            }
-
-            String error = values.getString("error");
-            if (error == null) {
-                error = values.getString("error_type");
-            }
-
-            String errorMessage = values.getString("error_msg");
-            if (errorMessage == null) {
-                errorMessage = values.getString("error_message");
-            }
-            if (errorMessage == null) {
-                errorMessage = values.getString("error_description");
-            }
-            String errorCodeString = values.getString("error_code");
-            int errorCode = FacebookRequestError.INVALID_ERROR_CODE;
-            if (!Utility.isNullOrEmpty(errorCodeString)) {
-                try {
-                    errorCode = Integer.parseInt(errorCodeString);
-                } catch (NumberFormatException ex) {
-                    errorCode = FacebookRequestError.INVALID_ERROR_CODE;
-                }
-            }
-
-            if (Utility.isNullOrEmpty(error) && Utility.isNullOrEmpty(errorMessage)
-                    && errorCode == FacebookRequestError.INVALID_ERROR_CODE) {
-                super.onComplete(request, values, null);
-            } else if (error != null && (error.equals("access_denied") ||
-                    error.equals("OAuthAccessDeniedException"))) {
-                super.onComplete(request, null, new FacebookOperationCanceledException());
-            } else if (errorCode == API_EC_DIALOG_CANCEL) {
-                super.onComplete(request, null, new FacebookOperationCanceledException());
-            } else {
-                FacebookRequestError requestError =
-                        new FacebookRequestError(errorCode, error, errorMessage);
-                super.onComplete(
-                        request,
-                        null,
-                        new FacebookServiceException(requestError, errorMessage));
-            }
-        }
-    }
-
-    @Override
-    protected void putChallengeParam(JSONObject param) throws JSONException {
-        param.put(LoginLogger.EVENT_PARAM_CHALLENGE, expectedChallenge);
-    }
-
-    private boolean validateChallengeParam(Bundle values) {
-        try {
-            String stateString = values.getString(ServerProtocol.DIALOG_PARAM_STATE);
-            if (stateString == null) {
-                return false;
-            }
-            JSONObject state = new JSONObject(stateString);
-            String challenge = state.getString(LoginLogger.EVENT_PARAM_CHALLENGE);
-            return challenge.equals(expectedChallenge);
-        } catch (JSONException e) {
-            return false;
-        }
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    CustomTabLoginMethodHandler(Parcel source) {
-        super(source);
-        expectedChallenge = source.readString();
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        super.writeToParcel(dest, flags);
-        dest.writeString(expectedChallenge);
-    }
-
-    public static final Parcelable.Creator<CustomTabLoginMethodHandler> CREATOR =
-            new Parcelable.Creator() {
-
-                @Override
-                public CustomTabLoginMethodHandler createFromParcel(Parcel source) {
-                    return new CustomTabLoginMethodHandler(source);
-                }
-
-                @Override
-                public CustomTabLoginMethodHandler[] newArray(int size) {
-                    return new CustomTabLoginMethodHandler[size];
-                }
-            };
-}
diff --git a/facebook/src/main/java/com/facebook/login/DefaultAudience.java b/facebook/src/main/java/com/facebook/login/DefaultAudience.java
deleted file mode 100644
index e54fe3499..000000000
--- a/facebook/src/main/java/com/facebook/login/DefaultAudience.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import com.facebook.internal.NativeProtocol;
-
-/**
- * Certain operations such as publishing a status or publishing a photo require an audience. When
- * the user grants an application permission to perform a publish operation, a default audience is
- * selected as the publication ceiling for the application. This enumerated value allows the
- * application to select which audience to ask the user to grant publish permission for.
- */
-public enum DefaultAudience {
-    /**
-     * Represents an invalid default audience value, can be used when only reading.
-     */
-    NONE(null),
-
-    /**
-     * Indicates only the user is able to see posts made by the application.
-     */
-    ONLY_ME(NativeProtocol.AUDIENCE_ME),
-
-    /**
-     * Indicates that the user's friends are able to see posts made by the application.
-     */
-    FRIENDS(NativeProtocol.AUDIENCE_FRIENDS),
-
-    /**
-     * Indicates that all Facebook users are able to see posts made by the application.
-     */
-    EVERYONE(NativeProtocol.AUDIENCE_EVERYONE);
-
-    private final String nativeProtocolAudience;
-
-    private DefaultAudience(String protocol) {
-        nativeProtocolAudience = protocol;
-    }
-
-    public String getNativeProtocolAudience() {
-        return nativeProtocolAudience;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java b/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
deleted file mode 100644
index b6f8c66d9..000000000
--- a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
+++ /dev/null
@@ -1,449 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.DialogFragment;
-import android.text.Html;
-import android.text.TextUtils;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphRequestAsyncTask;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.R;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Date;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class DeviceAuthDialog extends DialogFragment {
-    private static final String DEVICE_LOGIN_ENDPOINT = "device/login";
-    private static final String DEVICE_LOGIN_STATUS_ENDPOINT = "device/login_status";
-    private static final String REQUEST_STATE_KEY = "request_state";
-
-    private static final int LOGIN_ERROR_SUBCODE_EXCESSIVE_POLLING = 1349172;
-    private static final int LOGIN_ERROR_SUBCODE_AUTHORIZATION_DECLINED = 1349173;
-    private static final int LOGIN_ERROR_SUBCODE_AUTHORIZATION_PENDING = 1349174;
-    private static final int LOGIN_ERROR_SUBCODE_CODE_EXPIRED = 1349152;
-
-    private ProgressBar progressBar;
-    private TextView confirmationCode;
-    private DeviceAuthMethodHandler deviceAuthMethodHandler;
-    private AtomicBoolean completed = new AtomicBoolean();
-    private volatile GraphRequestAsyncTask currentGraphRequestPoll;
-    private volatile ScheduledFuture scheduledPoll;
-    private volatile RequestState currentRequestState;
-    private Dialog dialog;
-
-    // Used to tell if we are destroying the fragment because it was dismissed or dismissing the
-    // fragment because it is being destroyed.
-    private boolean isBeingDestroyed = false;
-
-    @Nullable
-    @Override
-    public View onCreateView(
-            LayoutInflater inflater,
-            ViewGroup container,
-            Bundle savedInstanceState) {
-        View view = super.onCreateView(inflater, container, savedInstanceState);
-        FacebookActivity facebookActivity = (FacebookActivity) getActivity();
-        LoginFragment fragment = (LoginFragment)facebookActivity.getCurrentFragment();
-        deviceAuthMethodHandler = (DeviceAuthMethodHandler)fragment
-                .getLoginClient()
-                .getCurrentHandler();
-
-        if (savedInstanceState != null) {
-            RequestState requestState = savedInstanceState.getParcelable(REQUEST_STATE_KEY);
-            if (requestState != null) {
-                setCurrentRequestState(requestState);
-            }
-        }
-
-        return view;
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
-        LayoutInflater inflater = getActivity().getLayoutInflater();
-        View view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
-        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
-        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
-
-        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
-        cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                onCancel();
-            }
-        });
-
-        TextView instructions = (TextView)view.findViewById(
-                R.id.com_facebook_device_auth_instructions);
-        instructions.setText(
-                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
-
-        dialog.setContentView(view);
-        return dialog;
-    }
-
-    @Override
-    public void onDismiss(final DialogInterface dialog) {
-        super.onDismiss(dialog);
-        if (!isBeingDestroyed) {
-            onCancel();
-        }
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        if (currentRequestState != null) {
-            outState.putParcelable(REQUEST_STATE_KEY, currentRequestState);
-        }
-    }
-
-    @Override
-    public void onDestroy() {
-        // Set this to true so we know if we are being destroyed and then dismissing the dialog
-        // Or if we are dismissing the dialog and then destroying the fragment. In latter we want
-        // to do a cancel callback.
-        isBeingDestroyed = true;
-        completed.set(true);
-        super.onDestroy();
-        if (currentGraphRequestPoll != null) {
-            currentGraphRequestPoll.cancel(true);
-        }
-
-        if (scheduledPoll != null) {
-            scheduledPoll.cancel(true);
-        }
-    }
-
-    public void startLogin(final LoginClient.Request request) {
-        Bundle parameters = new Bundle();
-        parameters.putString("scope", TextUtils.join(",", request.getPermissions()));
-
-        String redirectUriString = request.getDeviceRedirectUriString();
-        if (redirectUriString != null) {
-            parameters.putString("redirect_uri", redirectUriString);
-        }
-
-        String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
-        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
-        GraphRequest graphRequest = new GraphRequest(
-                null,
-                DEVICE_LOGIN_ENDPOINT,
-                parameters,
-                HttpMethod.POST,
-                new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                if (response.getError() != null) {
-                    onError(response.getError().getException());
-                    return;
-                }
-
-                JSONObject jsonObject = response.getJSONObject();
-                RequestState requestState = new RequestState();
-                try {
-                    requestState.setUserCode(jsonObject.getString("user_code"));
-                    requestState.setRequestCode(jsonObject.getString("code"));
-                    requestState.setInterval(jsonObject.getLong("interval"));
-                } catch (JSONException ex) {
-                    onError(new FacebookException(ex));
-                    return;
-                }
-
-                setCurrentRequestState(requestState);
-            }
-        });
-        graphRequest.executeAsync();
-    }
-
-    private void setCurrentRequestState(RequestState currentRequestState) {
-        this.currentRequestState = currentRequestState;
-        confirmationCode.setText(currentRequestState.getUserCode());
-        confirmationCode.setVisibility(View.VISIBLE);
-        progressBar.setVisibility(View.GONE);
-
-        // If we polled within the last interval schedule a poll else start a poll.
-        if (currentRequestState.withinLastRefreshWindow()) {
-            schedulePoll();
-        } else {
-            poll();
-        }
-    }
-
-    private void poll() {
-        currentRequestState.setLastPoll(new Date().getTime());
-        currentGraphRequestPoll = getPollRequest().executeAsync();
-    }
-
-    private void schedulePoll() {
-        scheduledPoll = DeviceAuthMethodHandler.getBackgroundExecutor().schedule(
-                new Runnable() {
-                    @Override
-                    public void run() {
-                        poll();
-                    }
-                },
-                currentRequestState.getInterval(),
-                TimeUnit.SECONDS);
-    }
-
-    private GraphRequest getPollRequest() {
-        Bundle parameters = new Bundle();
-        parameters.putString("code", currentRequestState.getRequestCode());
-        return new GraphRequest(
-                null,
-                DEVICE_LOGIN_STATUS_ENDPOINT,
-                parameters,
-                HttpMethod.POST,
-                new GraphRequest.Callback() {
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        // Check if the request was already cancelled
-                        if (completed.get()) {
-                            return;
-                        }
-
-                        FacebookRequestError error = response.getError();
-                        if (error != null) {
-                            // We need to decide if this is a fatal error by checking the error
-                            // message text
-                            switch (error.getSubErrorCode()) {
-                                case LOGIN_ERROR_SUBCODE_AUTHORIZATION_PENDING:
-                                case LOGIN_ERROR_SUBCODE_EXCESSIVE_POLLING: {
-                                    // Keep polling. If we got the slow down message just ignore
-                                    schedulePoll();
-                                } break;
-                                case LOGIN_ERROR_SUBCODE_CODE_EXPIRED:
-                                case LOGIN_ERROR_SUBCODE_AUTHORIZATION_DECLINED: {
-                                    onCancel();
-                                } break;
-                                default: {
-                                    onError(response.getError().getException());
-                                }
-                                break;
-                            }
-                            return;
-                        }
-
-                        try {
-                            JSONObject resultObject = response.getJSONObject();
-                            onSuccess(resultObject.getString("access_token"));
-                        } catch (JSONException ex) {
-                            onError(new FacebookException(ex));
-                        }
-                    }
-                });
-    }
-
-    private void onSuccess(final String accessToken) {
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "id,permissions");
-        AccessToken temporaryToken = new AccessToken(
-                accessToken,
-                FacebookSdk.getApplicationId(),
-                "0",
-                null,
-                null,
-                null,
-                null,
-                null);
-
-        GraphRequest request = new GraphRequest(
-                temporaryToken,
-                "me",
-                parameters,
-                HttpMethod.GET,
-                new GraphRequest.Callback() {
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        if (completed.get()) {
-                            return;
-                        }
-
-                        if (response.getError() != null) {
-                            onError(response.getError().getException());
-                            return;
-                        }
-
-                        String userId;
-                        Utility.PermissionsPair permissions;
-                        try {
-                            JSONObject jsonObject = response.getJSONObject();
-                            userId = jsonObject.getString("id");
-                            permissions = Utility.handlePermissionResponse(jsonObject);
-                        } catch (JSONException ex) {
-                            onError(new FacebookException(ex));
-                            return;
-                        }
-
-                        deviceAuthMethodHandler.onSuccess(
-                                accessToken,
-                                FacebookSdk.getApplicationId(),
-                                userId,
-                                permissions.getGrantedPermissions(),
-                                permissions.getDeclinedPermissions(),
-                                AccessTokenSource.DEVICE_AUTH,
-                                null,
-                                null);
-                        dialog.dismiss();
-                    }
-                });
-        request.executeAsync();
-    }
-
-    private void onError(FacebookException ex) {
-        if (!completed.compareAndSet(false, true)) {
-            return;
-        }
-
-        deviceAuthMethodHandler.onError(ex);
-        dialog.dismiss();
-    }
-
-    private void onCancel() {
-        if (!completed.compareAndSet(false, true)) {
-            // Should not have happened but we called cancel twice
-            return;
-        }
-
-        if (deviceAuthMethodHandler != null) {
-            // We are detached and cannot send a cancel message back
-            deviceAuthMethodHandler.onCancel();
-        }
-
-        dialog.dismiss();
-    }
-
-    private static class RequestState implements Parcelable{
-        private String userCode;
-        private String requestCode;
-        private long interval;
-        private long lastPoll;
-
-        RequestState() {}
-
-        public String getUserCode() {
-            return userCode;
-        }
-
-        public void setUserCode(String userCode) {
-            this.userCode = userCode;
-        }
-
-        public String getRequestCode() {
-            return requestCode;
-        }
-
-        public void setRequestCode(String requestCode) {
-            this.requestCode = requestCode;
-        }
-
-        public long getInterval() {
-            return interval;
-        }
-
-        public void setInterval(long interval) {
-            this.interval = interval;
-        }
-
-        public void setLastPoll(long lastPoll) {
-            this.lastPoll = lastPoll;
-        }
-
-        protected RequestState(Parcel in) {
-            userCode = in.readString();
-            requestCode = in.readString();
-            interval = in.readLong();
-            lastPoll = in.readLong();
-        }
-
-        /**
-         *
-         * @return True if the current time is less than last poll time + polling interval.
-         */
-        public boolean withinLastRefreshWindow() {
-            if (lastPoll == 0) {
-                return false;
-            }
-
-            long diff = new Date().getTime() - lastPoll - interval * 1000L;
-            return diff < 0;
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel dest, int flags) {
-            dest.writeString(userCode);
-            dest.writeString(requestCode);
-            dest.writeLong(interval);
-            dest.writeLong(lastPoll);
-        }
-
-        @SuppressWarnings("unused")
-        public static final Parcelable.Creator<RequestState> CREATOR =
-                new Parcelable.Creator<RequestState>() {
-            @Override
-            public RequestState createFromParcel(Parcel in) {
-                return new RequestState(in);
-            }
-
-            @Override
-            public RequestState[] newArray(int size) {
-                return new RequestState[size];
-            }
-        };
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java b/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
deleted file mode 100644
index 9539525f3..000000000
--- a/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Dialog;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-
-import java.util.Collection;
-import java.util.Date;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-
-class DeviceAuthMethodHandler extends LoginMethodHandler {
-    private static ScheduledThreadPoolExecutor backgroundExecutor;
-
-    DeviceAuthMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-    }
-
-    @Override
-    boolean tryAuthorize(LoginClient.Request request) {
-        showDialog(request);
-        return true;
-    }
-
-    private void showDialog(final LoginClient.Request request) {
-        DeviceAuthDialog dialog = new DeviceAuthDialog();
-        dialog.show(
-                loginClient.getActivity().getSupportFragmentManager(),
-                "login_with_facebook");
-        dialog.startLogin(request);
-    }
-
-    public void onCancel() {
-        LoginClient.Result outcome = LoginClient.Result.createCancelResult(
-                loginClient.getPendingRequest(),
-                "User canceled log in.");
-        loginClient.completeAndValidate(outcome);
-    }
-
-    public void onError(Exception ex) {
-        LoginClient.Result outcome = LoginClient.Result.createErrorResult(
-                loginClient.getPendingRequest(),
-                null,
-                ex.getMessage());
-        loginClient.completeAndValidate(outcome);
-    }
-
-    public void onSuccess(
-            String accessToken,
-            String applicationId,
-            String userId,
-            Collection<String> permissions,
-            Collection<String> declinedPermissions,
-            AccessTokenSource accessTokenSource,
-            Date expirationTime,
-            Date lastRefreshTime) {
-        AccessToken token = new AccessToken(
-                accessToken,
-                applicationId,
-                userId,
-                permissions,
-                declinedPermissions,
-                accessTokenSource,
-                expirationTime,
-                lastRefreshTime);
-
-        LoginClient.Result outcome = LoginClient.Result.createTokenResult(
-                loginClient.getPendingRequest(),
-                token);
-        loginClient.completeAndValidate(outcome);
-    }
-
-    public static synchronized ScheduledThreadPoolExecutor getBackgroundExecutor() {
-        if (backgroundExecutor == null) {
-            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
-        }
-
-        return backgroundExecutor;
-    }
-
-    protected DeviceAuthMethodHandler(Parcel parcel) {
-        super(parcel);
-    }
-
-    @Override
-    String getNameForLogging() {
-        return "device_auth";
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        super.writeToParcel(dest, flags);
-    }
-
-    public static final Parcelable.Creator<DeviceAuthMethodHandler> CREATOR =
-            new Parcelable.Creator() {
-
-                @Override
-                public DeviceAuthMethodHandler createFromParcel(Parcel source) {
-                    return new DeviceAuthMethodHandler(source);
-                }
-
-                @Override
-                public DeviceAuthMethodHandler[] newArray(int size) {
-                    return new DeviceAuthMethodHandler[size];
-                }
-            };
-}
diff --git a/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java b/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java
deleted file mode 100644
index e96c21746..000000000
--- a/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.net.Uri;
-
-import java.util.Collection;
-
-/**
- * This class manages device login and permissions for Facebook.
- */
-public class DeviceLoginManager extends LoginManager {
-    private Uri deviceRedirectUri;
-
-    private static volatile DeviceLoginManager instance;
-
-    /**
-     * Getter for the login manager.
-     * @return The login manager.
-     */
-    public static DeviceLoginManager getInstance() {
-        if (instance == null) {
-            synchronized (DeviceLoginManager.class) {
-                if (instance == null) {
-                    instance = new DeviceLoginManager();
-                }
-            }
-        }
-        return instance;
-    }
-
-    /**
-     * Set uri to redirect the user to after they complete
-     * the device login flow on the external device.
-     * <p/>
-     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
-     *
-     * @param uri The URI to set.
-     */
-    public void setDeviceRedirectUri(Uri uri) {
-        this.deviceRedirectUri = uri;
-    }
-
-    /**
-     * Get the previously set uri that will be used to redirect the user to
-     * after they complete the device login flow on the external device.
-     * <p/>
-     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
-     *
-     * @return The current device redirect uri set.
-     */
-    public Uri getDeviceRedirectUri() {
-        return this.deviceRedirectUri;
-    }
-
-    @Override
-    protected LoginClient.Request createLoginRequest(Collection<String> permissions) {
-        LoginClient.Request request = super.createLoginRequest(permissions);
-        Uri redirectUri = getDeviceRedirectUri();
-        if (redirectUri != null) {
-            request.setDeviceRedirectUriString(redirectUri.toString());
-        }
-        return request;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
deleted file mode 100644
index a39406278..000000000
--- a/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-
-
-class FacebookLiteLoginMethodHandler extends NativeAppLoginMethodHandler {
-
-    FacebookLiteLoginMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-    }
-
-    @Override
-    String getNameForLogging() {
-        return "fb_lite_login";
-    }
-
-    @Override
-    boolean tryAuthorize(LoginClient.Request request) {
-        String e2e = LoginClient.getE2E();
-        Intent intent = NativeProtocol.createFacebookLiteIntent(
-                loginClient.getActivity(),
-                request.getApplicationId(),
-                request.getPermissions(),
-                e2e,
-                request.isRerequest(),
-                request.hasPublishPermission(),
-                request.getDefaultAudience(),
-                getClientState(request.getAuthId()));
-
-        addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
-
-        return tryIntent(intent, LoginClient.getLoginRequestCode());
-    }
-
-    FacebookLiteLoginMethodHandler(Parcel source) {
-        super(source);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        super.writeToParcel(dest, flags);
-    }
-
-    public static final Parcelable.Creator<FacebookLiteLoginMethodHandler> CREATOR =
-            new Parcelable.Creator() {
-
-                @Override
-                public FacebookLiteLoginMethodHandler createFromParcel(Parcel source) {
-                    return new FacebookLiteLoginMethodHandler(source);
-                }
-
-                @Override
-                public FacebookLiteLoginMethodHandler[] newArray(int size) {
-                    return new FacebookLiteLoginMethodHandler[size];
-                }
-            };
-}
diff --git a/facebook/src/main/java/com/facebook/login/GetTokenClient.java b/facebook/src/main/java/com/facebook/login/GetTokenClient.java
deleted file mode 100644
index b2bc7c070..000000000
--- a/facebook/src/main/java/com/facebook/login/GetTokenClient.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-
-import android.content.Context;
-import android.os.Bundle;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.PlatformServiceClient;
-
-final class GetTokenClient extends PlatformServiceClient {
-
-    GetTokenClient(Context context, String applicationId) {
-        super(
-                context,
-                NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REQUEST,
-                NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REPLY,
-                NativeProtocol.PROTOCOL_VERSION_20121101,
-                applicationId);
-    }
-
-    @Override
-    protected void populateRequestBundle(Bundle data) {
-    }
-}
-
diff --git a/facebook/src/main/java/com/facebook/login/GetTokenLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/GetTokenLoginMethodHandler.java
deleted file mode 100644
index a6136718e..000000000
--- a/facebook/src/main/java/com/facebook/login/GetTokenLoginMethodHandler.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.text.TextUtils;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Set;
-
-class GetTokenLoginMethodHandler extends LoginMethodHandler {
-    private GetTokenClient getTokenClient;
-
-    GetTokenLoginMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-    }
-
-    @Override
-    String getNameForLogging() {
-        return "get_token";
-    }
-
-    @Override
-    void cancel() {
-        if (getTokenClient != null) {
-            getTokenClient.cancel();
-            getTokenClient.setCompletedListener(null);
-            getTokenClient = null;
-        }
-    }
-
-    boolean tryAuthorize(final LoginClient.Request request) {
-        getTokenClient = new GetTokenClient(loginClient.getActivity(),
-            request.getApplicationId());
-        if (!getTokenClient.start()) {
-            return false;
-        }
-
-        loginClient.notifyBackgroundProcessingStart();
-
-        GetTokenClient.CompletedListener callback = new GetTokenClient.CompletedListener() {
-            @Override
-            public void completed(Bundle result) {
-                getTokenCompleted(request, result);
-            }
-        };
-
-        getTokenClient.setCompletedListener(callback);
-        return true;
-    }
-
-    void getTokenCompleted(LoginClient.Request request, Bundle result) {
-        if (getTokenClient != null) {
-            getTokenClient.setCompletedListener(null);
-        }
-        getTokenClient = null;
-
-        loginClient.notifyBackgroundProcessingStop();
-
-        if (result != null) {
-            ArrayList<String> currentPermissions =
-                    result.getStringArrayList(NativeProtocol.EXTRA_PERMISSIONS);
-            Set<String> permissions = request.getPermissions();
-            if ((currentPermissions != null) &&
-                    ((permissions == null) || currentPermissions.containsAll(permissions))) {
-                // We got all the permissions we needed, so we can complete the auth now.
-                complete(request, result);
-                return;
-            }
-
-            // We didn't get all the permissions we wanted, so update the request with just the
-            // permissions we still need.
-            Set<String> newPermissions = new HashSet<String>();
-            for (String permission : permissions) {
-                if (!currentPermissions.contains(permission)) {
-                    newPermissions.add(permission);
-                }
-            }
-            if (!newPermissions.isEmpty()) {
-                addLoggingExtra(
-                    LoginLogger.EVENT_EXTRAS_NEW_PERMISSIONS,
-                    TextUtils.join(",", newPermissions)
-                );
-            }
-
-            request.setPermissions(newPermissions);
-        }
-
-        loginClient.tryNextHandler();
-    }
-
-    void onComplete(final LoginClient.Request request, final Bundle result) {
-        AccessToken token = createAccessTokenFromNativeLogin(
-                result,
-                AccessTokenSource.FACEBOOK_APPLICATION_SERVICE,
-                request.getApplicationId());
-        LoginClient.Result outcome =
-                LoginClient.Result.createTokenResult(loginClient.getPendingRequest(), token);
-        loginClient.completeAndValidate(outcome);
-    }
-
-    // Workaround for old facebook apps that don't return the userid.
-    void complete(final LoginClient.Request request, final Bundle result) {
-        String userId = result.getString(NativeProtocol.EXTRA_USER_ID);
-        // If the result is missing the UserId request it
-        if (userId == null || userId.isEmpty()) {
-            loginClient.notifyBackgroundProcessingStart();
-
-            String accessToken = result.getString(NativeProtocol.EXTRA_ACCESS_TOKEN);
-            Utility.getGraphMeRequestWithCacheAsync(
-                    accessToken,
-                    new Utility.GraphMeRequestWithCacheCallback() {
-                        @Override
-                        public void onSuccess(JSONObject userInfo) {
-                            try {
-                                String userId = userInfo.getString("id");
-                                result.putString(NativeProtocol.EXTRA_USER_ID, userId);
-                                onComplete(request, result);
-                            } catch (JSONException ex) {
-                                loginClient.complete(LoginClient.Result.createErrorResult(
-                                        loginClient.getPendingRequest(),
-                                        "Caught exception",
-                                        ex.getMessage()));
-                            }
-                        }
-
-                        @Override
-                        public void onFailure(FacebookException error) {
-                            loginClient.complete(LoginClient.Result.createErrorResult(
-                                    loginClient.getPendingRequest(),
-                                    "Caught exception",
-                                    error.getMessage()));
-                        }
-                    });
-        } else {
-            onComplete(request, result);
-        }
-
-    }
-
-    GetTokenLoginMethodHandler(Parcel source) {
-        super(source);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        super.writeToParcel(dest, flags);
-    }
-
-    public static final Parcelable.Creator<GetTokenLoginMethodHandler> CREATOR =
-            new Parcelable.Creator() {
-
-        @Override
-        public GetTokenLoginMethodHandler createFromParcel(Parcel source) {
-            return new GetTokenLoginMethodHandler(source);
-        }
-
-        @Override
-        public GetTokenLoginMethodHandler[] newArray(int size) {
-            return new GetTokenLoginMethodHandler[size];
-        }
-    };
-}
diff --git a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
deleted file mode 100644
index 0651b1c9a..000000000
--- a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-
-class KatanaProxyLoginMethodHandler extends NativeAppLoginMethodHandler {
-
-    KatanaProxyLoginMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-    }
-
-    @Override
-    String getNameForLogging() {
-        return "katana_proxy_auth";
-    }
-
-    @Override
-    boolean tryAuthorize(LoginClient.Request request) {
-        String e2e = LoginClient.getE2E();
-        Intent intent = NativeProtocol.createProxyAuthIntent(
-                loginClient.getActivity(),
-                request.getApplicationId(),
-                request.getPermissions(),
-                e2e,
-                request.isRerequest(),
-                request.hasPublishPermission(),
-                request.getDefaultAudience(),
-                getClientState(request.getAuthId()));
-
-        addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
-
-        return tryIntent(intent, LoginClient.getLoginRequestCode());
-    }
-
-    KatanaProxyLoginMethodHandler(Parcel source) {
-        super(source);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        super.writeToParcel(dest, flags);
-    }
-
-    public static final Parcelable.Creator<KatanaProxyLoginMethodHandler> CREATOR =
-            new Parcelable.Creator() {
-
-                @Override
-                public KatanaProxyLoginMethodHandler createFromParcel(Parcel source) {
-                    return new KatanaProxyLoginMethodHandler(source);
-                }
-
-                @Override
-                public KatanaProxyLoginMethodHandler[] newArray(int size) {
-                    return new KatanaProxyLoginMethodHandler[size];
-                }
-            };
-}
diff --git a/facebook/src/main/java/com/facebook/login/LoginBehavior.java b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
deleted file mode 100644
index a7b8f1957..000000000
--- a/facebook/src/main/java/com/facebook/login/LoginBehavior.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-/**
- * Specifies the behaviors to try during login.
- */
-public enum LoginBehavior {
-    /**
-     * Specifies that login should attempt login in using the Facebook App, and if that
-     * does not work fall back to web dialog auth. This is the default behavior.
-     */
-    NATIVE_WITH_FALLBACK(true, true, true, false, true, true),
-
-    /**
-     * Specifies that login should only attempt to login using the Facebook App.
-     * If the Facebook App cannot be used then the login fails.
-     */
-    NATIVE_ONLY(true, true, false, false, false, true),
-
-    /**
-     * Specifies that login should only attempt to use Katana Proxy Login.
-     */
-    KATANA_ONLY(false, true, false, false, false, false),
-
-    /**
-     * Specifies that only the web dialog auth should be used.
-     */
-    WEB_ONLY(false, false, true, false, true, false),
-
-    /**
-     * Specifies that only the web view dialog auth should be used.
-     */
-    WEB_VIEW_ONLY(false, false, true, false, false, false),
-
-    /**
-     * Specifies that device login authentication flow should be used.
-     * Use it via ({@link com.facebook.login.widget.DeviceLoginButton DeviceLoginButton}
-     * or ({@link com.facebook.login.DeviceLoginManager DeviceLoginManager} to authenticate.
-     */
-    DEVICE_AUTH(false, false, false, true, false, false);
-
-    private final boolean allowsGetTokenAuth;
-    private final boolean allowsKatanaAuth;
-    private final boolean allowsWebViewAuth;
-    private final boolean allowsDeviceAuth;
-    private final boolean allowsCustomTabAuth;
-    private final boolean allowsFacebookLiteAuth;
-
-    private LoginBehavior(
-            boolean allowsGetTokenAuth,
-            boolean allowsKatanaAuth,
-            boolean allowsWebViewAuth,
-            boolean allowsDeviceAuth,
-            boolean allowsCustomTabAuth,
-            boolean allowsFacebookLiteAuth) {
-        this.allowsGetTokenAuth = allowsGetTokenAuth;
-        this.allowsKatanaAuth = allowsKatanaAuth;
-        this.allowsWebViewAuth = allowsWebViewAuth;
-        this.allowsDeviceAuth = allowsDeviceAuth;
-        this.allowsCustomTabAuth = allowsCustomTabAuth;
-        this.allowsFacebookLiteAuth = allowsFacebookLiteAuth;
-    }
-
-    boolean allowsGetTokenAuth() {
-        return allowsGetTokenAuth;
-    }
-
-    boolean allowsKatanaAuth() {
-        return allowsKatanaAuth;
-    }
-
-    boolean allowsWebViewAuth() {
-        return allowsWebViewAuth;
-    }
-
-    boolean allowsDeviceAuth() {
-        return allowsDeviceAuth;
-    }
-
-    boolean allowsCustomTabAuth() {
-        return allowsCustomTabAuth;
-    }
-
-    boolean allowsFacebookLiteAuth() {
-        return allowsFacebookLiteAuth;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/LoginClient.java b/facebook/src/main/java/com/facebook/login/LoginClient.java
deleted file mode 100644
index f3ce3b7f1..000000000
--- a/facebook/src/main/java/com/facebook/login/LoginClient.java
+++ /dev/null
@@ -1,701 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.Manifest;
-import android.app.Activity;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.text.TextUtils;
-
-import com.facebook.AccessToken;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.FacebookException;
-import com.facebook.HttpMethod;
-import com.facebook.R;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-class LoginClient implements Parcelable {
-    LoginMethodHandler[] handlersToTry;
-    int currentHandler = -1;
-    Fragment fragment;
-    OnCompletedListener onCompletedListener;
-    BackgroundProcessingListener backgroundProcessingListener;
-    boolean checkedInternetPermission;
-    Request pendingRequest;
-    Map<String, String> loggingExtras;
-    private LoginLogger loginLogger;
-
-    public interface OnCompletedListener {
-        void onCompleted(Result result);
-    }
-
-    interface BackgroundProcessingListener {
-        void onBackgroundProcessingStarted();
-
-        void onBackgroundProcessingStopped();
-    }
-
-    public LoginClient(Fragment fragment) {
-        this.fragment = fragment;
-    }
-
-    public Fragment getFragment() {
-        return fragment;
-    }
-
-    void setFragment(Fragment fragment) {
-        if (this.fragment != null) {
-            throw new FacebookException("Can't set fragment once it is already set.");
-        }
-        this.fragment = fragment;
-    }
-
-    FragmentActivity getActivity() {
-        return fragment.getActivity();
-    }
-
-
-    public Request getPendingRequest() {
-        return pendingRequest;
-    }
-
-    public static int getLoginRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode();
-    }
-
-    void startOrContinueAuth(Request request) {
-        if (!getInProgress()) {
-            authorize(request);
-        }
-    }
-
-    void authorize(Request request) {
-        if (request == null) {
-            return;
-        }
-
-        if (pendingRequest != null) {
-            throw new FacebookException("Attempted to authorize while a request is pending.");
-        }
-
-        if (AccessToken.getCurrentAccessToken() != null && !checkInternetPermission()) {
-            // We're going to need INTERNET permission later and don't have it, so fail early.
-            return;
-        }
-        pendingRequest = request;
-        handlersToTry = getHandlersToTry(request);
-        tryNextHandler();
-    }
-
-    boolean getInProgress() {
-        return pendingRequest != null && currentHandler >= 0;
-    }
-
-    void cancelCurrentHandler() {
-        if (currentHandler >= 0) {
-            getCurrentHandler().cancel();
-        }
-    }
-
-    LoginMethodHandler getCurrentHandler() {
-        if (currentHandler >= 0) {
-            return handlersToTry[currentHandler];
-        } else {
-            return null;
-        }
-    }
-
-    public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (pendingRequest != null) {
-            return getCurrentHandler()
-                    .onActivityResult(requestCode, resultCode, data);
-        }
-        return false;
-    }
-
-    private LoginMethodHandler [] getHandlersToTry(Request request) {
-        ArrayList<LoginMethodHandler> handlers = new ArrayList<LoginMethodHandler>();
-
-        final LoginBehavior behavior = request.getLoginBehavior();
-
-        if (behavior.allowsGetTokenAuth()) {
-            handlers.add(new GetTokenLoginMethodHandler(this));
-        }
-
-        if (behavior.allowsKatanaAuth()) {
-            handlers.add(new KatanaProxyLoginMethodHandler(this));
-        }
-
-        if (behavior.allowsFacebookLiteAuth()) {
-            handlers.add(new FacebookLiteLoginMethodHandler(this));
-        }
-
-        if (behavior.allowsCustomTabAuth()) {
-            handlers.add(new CustomTabLoginMethodHandler(this));
-        }
-
-        if (behavior.allowsWebViewAuth()) {
-            handlers.add(new WebViewLoginMethodHandler(this));
-        }
-
-        if (behavior.allowsDeviceAuth()) {
-            handlers.add(new DeviceAuthMethodHandler(this));
-        }
-
-        LoginMethodHandler [] result = new LoginMethodHandler[handlers.size()];
-        handlers.toArray(result);
-        return result;
-    }
-
-    boolean checkInternetPermission() {
-        if (checkedInternetPermission) {
-            return true;
-        }
-
-        int permissionCheck = checkPermission(Manifest.permission.INTERNET);
-        if (permissionCheck != PackageManager.PERMISSION_GRANTED) {
-            Activity activity = getActivity();
-            String errorType = activity.getString(R.string.com_facebook_internet_permission_error_title);
-            String errorDescription = activity.getString(R.string.com_facebook_internet_permission_error_message);
-            complete(Result.createErrorResult(pendingRequest, errorType, errorDescription));
-
-            return false;
-        }
-
-        checkedInternetPermission = true;
-        return true;
-    }
-
-    void tryNextHandler() {
-        if (currentHandler >= 0) {
-            logAuthorizationMethodComplete(
-                    getCurrentHandler().getNameForLogging(),
-                    LoginLogger.EVENT_PARAM_METHOD_RESULT_SKIPPED,
-                    null,
-                    null,
-                    getCurrentHandler().methodLoggingExtras);
-        }
-
-        while (handlersToTry != null && currentHandler < (handlersToTry.length - 1)) {
-            currentHandler++;
-
-            boolean started = tryCurrentHandler();
-
-            if (started) {
-                return;
-            }
-        }
-
-        if (pendingRequest != null) {
-            // We went through all handlers without successfully attempting an auth.
-            completeWithFailure();
-        }
-    }
-
-    private void completeWithFailure() {
-        complete(Result.createErrorResult(pendingRequest, "Login attempt failed.", null));
-    }
-
-    private void addLoggingExtra(String key, String value, boolean accumulate) {
-        if (loggingExtras == null) {
-            loggingExtras = new HashMap<String, String>();
-        }
-        if (loggingExtras.containsKey(key) && accumulate) {
-            value = loggingExtras.get(key) + "," + value;
-        }
-        loggingExtras.put(key, value);
-    }
-
-    boolean tryCurrentHandler() {
-        LoginMethodHandler handler = getCurrentHandler();
-        if (handler.needsInternetPermission() && !checkInternetPermission()) {
-            addLoggingExtra(
-                    LoginLogger.EVENT_EXTRAS_MISSING_INTERNET_PERMISSION,
-                    AppEventsConstants.EVENT_PARAM_VALUE_YES,
-                    false
-            );
-            return false;
-        }
-
-        boolean tried = handler.tryAuthorize(pendingRequest);
-        if (tried) {
-            getLogger().logAuthorizationMethodStart(pendingRequest.getAuthId(),
-                    handler.getNameForLogging());
-        } else {
-            // We didn't try it, so we don't get any other completion
-            // notification -- log that we skipped it.
-            getLogger().logAuthorizationMethodNotTried(pendingRequest.getAuthId(),
-                    handler.getNameForLogging());
-            addLoggingExtra(
-                    LoginLogger.EVENT_EXTRAS_NOT_TRIED,
-                    handler.getNameForLogging(),
-                    true
-            );
-        }
-
-        return tried;
-    }
-
-    void completeAndValidate(Result outcome) {
-        // Do we need to validate a successful result (as in the case of a reauth)?
-        if (outcome.token != null && AccessToken.getCurrentAccessToken() != null) {
-            validateSameFbidAndFinish(outcome);
-        } else {
-            // We're done, just notify the listener.
-            complete(outcome);
-        }
-    }
-
-    void complete(Result outcome) {
-        LoginMethodHandler handler = getCurrentHandler();
-
-        // This might be null if, for some reason, none of the handlers were successfully tried
-        // (in which case we already logged that).
-        if (handler != null) {
-            logAuthorizationMethodComplete(handler.getNameForLogging(), outcome,
-                    handler.methodLoggingExtras);
-        }
-
-        if (loggingExtras != null) {
-            // Pass this back to the caller for logging at the aggregate level.
-            outcome.loggingExtras = loggingExtras;
-        }
-
-        handlersToTry = null;
-        currentHandler = -1;
-        pendingRequest = null;
-        loggingExtras = null;
-
-        notifyOnCompleteListener(outcome);
-    }
-
-    OnCompletedListener getOnCompletedListener() {
-        return onCompletedListener;
-    }
-
-    void setOnCompletedListener(OnCompletedListener onCompletedListener) {
-        this.onCompletedListener = onCompletedListener;
-    }
-
-    BackgroundProcessingListener getBackgroundProcessingListener() {
-        return backgroundProcessingListener;
-    }
-
-
-    void setBackgroundProcessingListener(
-            BackgroundProcessingListener backgroundProcessingListener) {
-        this.backgroundProcessingListener = backgroundProcessingListener;
-    }
-
-    int checkPermission(String permission) {
-        return getActivity().checkCallingOrSelfPermission(permission);
-    }
-
-    void validateSameFbidAndFinish(Result pendingResult) {
-        if (pendingResult.token == null) {
-            throw new FacebookException("Can't validate without a token");
-        }
-
-        AccessToken previousToken = AccessToken.getCurrentAccessToken();
-        AccessToken newToken = pendingResult.token;
-
-        try {
-            Result result = null;
-            if (previousToken != null && newToken != null &&
-                    previousToken.getUserId().equals(newToken.getUserId())) {
-                result = Result.createTokenResult(pendingRequest, pendingResult.token);
-            } else {
-                result = Result
-                        .createErrorResult(
-                                pendingRequest,
-                                "User logged in as different Facebook user.",
-                                null);
-            }
-            complete(result);
-        } catch (Exception ex) {
-            complete(Result.createErrorResult(
-                    pendingRequest,
-                    "Caught exception",
-                    ex.getMessage()));
-        }
-    }
-
-    private static AccessToken createFromTokenWithRefreshedPermissions(
-            AccessToken token,
-            Collection<String> grantedPermissions,
-            Collection<String> declinedPermissions) {
-        return new AccessToken(
-                token.getToken(),
-                token.getApplicationId(),
-                token.getUserId(),
-                grantedPermissions,
-                declinedPermissions,
-                token.getSource(),
-                token.getExpires(),
-                token.getLastRefresh());
-    }
-
-    private LoginLogger getLogger() {
-        if (loginLogger == null ||
-                !loginLogger.getApplicationId().equals(pendingRequest.getApplicationId())) {
-
-            loginLogger = new LoginLogger(getActivity(), pendingRequest.getApplicationId());
-        }
-        return loginLogger;
-    }
-
-    private void notifyOnCompleteListener(Result outcome) {
-        if (onCompletedListener != null) {
-            onCompletedListener.onCompleted(outcome);
-        }
-    }
-
-    void notifyBackgroundProcessingStart() {
-        if (backgroundProcessingListener != null) {
-            backgroundProcessingListener.onBackgroundProcessingStarted();
-        }
-    }
-
-    void notifyBackgroundProcessingStop() {
-        if (backgroundProcessingListener != null) {
-            backgroundProcessingListener.onBackgroundProcessingStopped();
-        }
-    }
-
-    private void logAuthorizationMethodComplete(
-            String method,
-            Result result,
-            Map<String, String> loggingExtras) {
-        logAuthorizationMethodComplete(method,
-                result.code.getLoggingValue(),
-                result.errorMessage,
-                result.errorCode,
-                loggingExtras);
-    }
-
-    private void logAuthorizationMethodComplete(
-            String method,
-            String result,
-            String errorMessage,
-            String errorCode,
-            Map<String, String> loggingExtras) {
-        if (pendingRequest == null) {
-            // We don't expect this to happen, but if it does, log an event for diagnostic purposes.
-            getLogger().logUnexpectedError(
-                    LoginLogger.EVENT_NAME_LOGIN_METHOD_COMPLETE,
-                    "Unexpected call to logCompleteLogin with null pendingAuthorizationRequest.",
-                    method
-            );
-        } else {
-            getLogger().logAuthorizationMethodComplete(pendingRequest.getAuthId(), method, result,
-                    errorMessage, errorCode, loggingExtras);
-        }
-    }
-
-    static String getE2E() {
-        JSONObject e2e = new JSONObject();
-        try {
-            e2e.put("init", System.currentTimeMillis());
-        } catch (JSONException e) {
-        }
-        return e2e.toString();
-    }
-
-    public static class Request implements Parcelable {
-        private final LoginBehavior loginBehavior;
-        private Set<String> permissions;
-        private final DefaultAudience defaultAudience;
-        private final String applicationId;
-        private final String authId;
-        private boolean isRerequest = false;
-        private String deviceRedirectUriString;
-
-        Request(
-                LoginBehavior loginBehavior,
-                Set<String> permissions,
-                DefaultAudience defaultAudience,
-                String applicationId,
-                String authId) {
-            this.loginBehavior = loginBehavior;
-            this.permissions = permissions != null ? permissions : new HashSet<String>();
-            this.defaultAudience = defaultAudience;
-            this.applicationId = applicationId;
-            this.authId = authId;
-        }
-
-        Set<String> getPermissions() {
-            return permissions;
-        }
-
-        void setPermissions(Set<String> permissions) {
-            Validate.notNull(permissions, "permissions");
-            this.permissions = permissions;
-        }
-
-        LoginBehavior getLoginBehavior() {
-            return loginBehavior;
-        }
-
-        DefaultAudience getDefaultAudience() {
-            return defaultAudience;
-        }
-
-        String getApplicationId() {
-            return applicationId;
-        }
-
-        String getAuthId() {
-            return authId;
-        }
-
-        boolean isRerequest() {
-            return isRerequest;
-        }
-
-        void setRerequest(boolean isRerequest) {
-            this.isRerequest = isRerequest;
-        }
-
-        String getDeviceRedirectUriString() {
-            return this.deviceRedirectUriString;
-        }
-
-        void setDeviceRedirectUriString(String deviceRedirectUriString) {
-            this.deviceRedirectUriString = deviceRedirectUriString;
-        }
-
-        boolean hasPublishPermission() {
-            for (String permission : permissions) {
-                if (LoginManager.isPublishPermission(permission)) {
-                    return true;
-                }
-            }
-            return false;
-        }
-
-        private Request(Parcel parcel) {
-            String enumValue = parcel.readString();
-            this.loginBehavior = enumValue != null ? LoginBehavior.valueOf(enumValue) : null;
-            ArrayList<String> permissionsList = new ArrayList<>();
-            parcel.readStringList(permissionsList);
-            this.permissions = new HashSet<String>(permissionsList);
-            enumValue = parcel.readString();
-            this.defaultAudience = enumValue != null ? DefaultAudience.valueOf(enumValue) : null;
-            this.applicationId = parcel.readString();
-            this.authId = parcel.readString();
-            this.isRerequest = parcel.readByte() != 0 ? true : false;
-            this.deviceRedirectUriString = parcel.readString();
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel dest, int flags) {
-            dest.writeString(loginBehavior != null ? loginBehavior.name() : null);
-            dest.writeStringList(new ArrayList<String>(permissions));
-            dest.writeString(defaultAudience != null ? defaultAudience.name() : null);
-            dest.writeString(applicationId);
-            dest.writeString(authId);
-            dest.writeByte((byte)(isRerequest ? 1 : 0));
-            dest.writeString(deviceRedirectUriString);
-        }
-
-        public static final Parcelable.Creator<Request> CREATOR = new Parcelable.Creator() {
-            @Override
-            public Request createFromParcel(Parcel source) {
-                return new Request(source);
-            }
-
-            @Override
-            public Request[] newArray(int size) {
-                return new Request[size];
-            }
-        };
-    }
-
-    public static class Result implements Parcelable {
-        enum Code {
-            SUCCESS("success"),
-            CANCEL("cancel"),
-            ERROR("error");
-
-            private final String loggingValue;
-
-            Code(String loggingValue) {
-                this.loggingValue = loggingValue;
-            }
-
-            // For consistency across platforms, we want to use specific string values when logging
-            // these results.
-            String getLoggingValue() {
-                return loggingValue;
-            }
-        }
-
-        final Code code;
-        final AccessToken token;
-        final String errorMessage;
-        final String errorCode;
-        final Request request;
-        public Map<String, String> loggingExtras;
-
-        Result(
-                Request request,
-                Code code,
-                AccessToken token,
-                String errorMessage,
-                String errorCode) {
-            Validate.notNull(code, "code");
-            this.request = request;
-            this.token = token;
-            this.errorMessage = errorMessage;
-            this.code = code;
-            this.errorCode = errorCode;
-        }
-
-        static Result createTokenResult(Request request, AccessToken token) {
-            return new Result(request, Code.SUCCESS, token, null, null);
-        }
-
-        static Result createCancelResult(Request request, String message) {
-            return new Result(request, Code.CANCEL, null, message, null);
-        }
-
-        static Result createErrorResult(
-                Request request,
-                String errorType,
-                String errorDescription) {
-            return createErrorResult(request, errorType, errorDescription, null);
-        }
-
-        static Result createErrorResult(
-                Request request,
-                String errorType,
-                String errorDescription,
-                String errorCode) {
-            String message = TextUtils.join(
-                    ": ",
-                    Utility.asListNoNulls(errorType, errorDescription));
-            return new Result(request, Code.ERROR, null, message, errorCode);
-        }
-
-        private Result(Parcel parcel) {
-            this.code = Code.valueOf(parcel.readString());
-            this.token = parcel.readParcelable(AccessToken.class.getClassLoader());
-            this.errorMessage = parcel.readString();
-            this.errorCode = parcel.readString();
-            this.request = parcel.readParcelable(Request.class.getClassLoader());
-            this.loggingExtras = Utility.readStringMapFromParcel(parcel);
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel dest, int flags) {
-            dest.writeString(code.name());
-            dest.writeParcelable(token, flags);
-            dest.writeString(errorMessage);
-            dest.writeString(errorCode);
-            dest.writeParcelable(request, flags);
-            Utility.writeStringMapToParcel(dest, loggingExtras);
-        }
-
-        public static final Parcelable.Creator<Result> CREATOR = new Parcelable.Creator() {
-            @Override
-            public Result createFromParcel(Parcel source) {
-                return new Result(source);
-            }
-
-            @Override
-            public Result[] newArray(int size) {
-                return new Result[size];
-            }
-        };
-    }
-
-    // Parcelable implementation
-
-    public LoginClient(Parcel source) {
-        Object [] o = source.readParcelableArray(LoginMethodHandler.class.getClassLoader());
-        handlersToTry = new LoginMethodHandler[o.length];
-        for (int i = 0; i < o.length; ++i) {
-            handlersToTry[i] = (LoginMethodHandler) o[i];
-            handlersToTry[i].setLoginClient(this);
-        }
-        currentHandler = source.readInt();
-        pendingRequest = source.readParcelable(Request.class.getClassLoader());
-        loggingExtras = Utility.readStringMapFromParcel(source);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeParcelableArray(handlersToTry, flags);
-        dest.writeInt(currentHandler);
-        dest.writeParcelable(pendingRequest, flags);
-        Utility.writeStringMapToParcel(dest, loggingExtras);
-    }
-
-    public static final Parcelable.Creator<LoginClient> CREATOR = new Parcelable.Creator() {
-        @Override
-        public LoginClient createFromParcel(Parcel source) {
-            return new LoginClient(source);
-        }
-
-        @Override
-        public LoginClient[] newArray(int size) {
-            return new LoginClient[size];
-        }
-    };
-}
diff --git a/facebook/src/main/java/com/facebook/login/LoginFragment.java b/facebook/src/main/java/com/facebook/login/LoginFragment.java
deleted file mode 100644
index 0fc60bb36..000000000
--- a/facebook/src/main/java/com/facebook/login/LoginFragment.java
+++ /dev/null
@@ -1,185 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.facebook.R;
-
-/**
- * This Fragment is a necessary part of the overall Facebook login process
- * but is not meant to be used directly.
- *
- * @see com.facebook.FacebookActivity
- */
-
-public class LoginFragment extends Fragment {
-    static final String RESULT_KEY = "com.facebook.LoginFragment:Result";
-    static final String REQUEST_KEY = "com.facebook.LoginFragment:Request";
-    static final String EXTRA_REQUEST = "request";
-
-    private static final String TAG = "LoginFragment";
-    private static final String NULL_CALLING_PKG_ERROR_MSG =
-            "Cannot call LoginFragment with a null calling package. " +
-                    "This can occur if the launchMode of the caller is singleInstance.";
-    private static final String SAVED_LOGIN_CLIENT = "loginClient";
-
-    private String callingPackage;
-    private LoginClient loginClient;
-    private LoginClient.Request request;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (savedInstanceState != null) {
-            loginClient = savedInstanceState.getParcelable(SAVED_LOGIN_CLIENT);
-            loginClient.setFragment(this);
-        } else {
-            loginClient = new LoginClient(this);
-        }
-
-        loginClient.setOnCompletedListener(new LoginClient.OnCompletedListener() {
-            @Override
-            public void onCompleted(LoginClient.Result outcome) {
-                onLoginClientCompleted(outcome);
-            }
-        });
-
-        Activity activity = getActivity();
-        if (activity == null) {
-            return;
-        }
-
-        initializeCallingPackage(activity);
-        if (activity.getIntent() != null) {
-            Intent intent = activity.getIntent();
-            Bundle bundle = intent.getBundleExtra(REQUEST_KEY);
-            request = (LoginClient.Request)bundle.getParcelable(EXTRA_REQUEST);
-        }
-    }
-
-    @Override
-    public void onDestroy() {
-        loginClient.cancelCurrentHandler();
-        super.onDestroy();
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
-                             @Nullable Bundle savedInstanceState) {
-        final View view = inflater.inflate(R.layout.com_facebook_login_fragment, container, false);
-
-        loginClient.setBackgroundProcessingListener(
-                new LoginClient.BackgroundProcessingListener() {
-                    @Override
-                    public void onBackgroundProcessingStarted() {
-                        view.findViewById(R.id.com_facebook_login_activity_progress_bar)
-                                .setVisibility(View.VISIBLE);
-                    }
-
-                    @Override
-                    public void onBackgroundProcessingStopped() {
-                        view.findViewById(R.id.com_facebook_login_activity_progress_bar)
-                                .setVisibility(View.GONE);
-                    }
-                });
-
-        return view;
-    }
-
-    private void onLoginClientCompleted(LoginClient.Result outcome) {
-        request = null;
-
-        int resultCode = (outcome.code == LoginClient.Result.Code.CANCEL) ?
-                Activity.RESULT_CANCELED : Activity.RESULT_OK;
-
-        Bundle bundle = new Bundle();
-        bundle.putParcelable(RESULT_KEY, outcome);
-
-        Intent resultIntent = new Intent();
-        resultIntent.putExtras(bundle);
-
-        // The activity might be detached we will send a cancel result in onDetach
-        if (isAdded()) {
-            getActivity().setResult(resultCode, resultIntent);
-            getActivity().finish();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-
-        // If the calling package is null, this generally means that the callee was started
-        // with a launchMode of singleInstance. Unfortunately, Android does not allow a result
-        // to be set when the callee is a singleInstance, so we log an error and return.
-        if (callingPackage == null) {
-            Log.e(TAG, NULL_CALLING_PKG_ERROR_MSG);
-            getActivity().finish();
-            return;
-        }
-
-        loginClient.startOrContinueAuth(request);
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-
-        getActivity().findViewById(R.id.com_facebook_login_activity_progress_bar).setVisibility(
-                View.GONE);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        loginClient.onActivityResult(requestCode, resultCode, data);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        outState.putParcelable(SAVED_LOGIN_CLIENT, loginClient);
-    }
-
-    private void initializeCallingPackage(final Activity activity) {
-        ComponentName componentName = activity.getCallingActivity();
-        if (componentName == null) {
-            return;
-        }
-        callingPackage = componentName.getPackageName();
-    }
-
-    LoginClient getLoginClient() {
-        return loginClient;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/LoginLogger.java b/facebook/src/main/java/com/facebook/login/LoginLogger.java
deleted file mode 100644
index ad6cefbb2..000000000
--- a/facebook/src/main/java/com/facebook/login/LoginLogger.java
+++ /dev/null
@@ -1,217 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.content.Context;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.os.Bundle;
-import android.text.TextUtils;
-
-import com.facebook.appevents.AppEventsLogger;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Map;
-
-class LoginLogger {
-    // Constants for logging login-related data.
-    static final String EVENT_NAME_LOGIN_METHOD_START = "fb_mobile_login_method_start";
-    static final String EVENT_NAME_LOGIN_METHOD_COMPLETE = "fb_mobile_login_method_complete";
-    static final String EVENT_NAME_LOGIN_METHOD_NOT_TRIED = "fb_mobile_login_method_not_tried";
-    static final String EVENT_PARAM_METHOD_RESULT_SKIPPED = "skipped";
-    static final String EVENT_NAME_LOGIN_START = "fb_mobile_login_start";
-    static final String EVENT_NAME_LOGIN_COMPLETE = "fb_mobile_login_complete";
-    // Note: to ensure stability of column mappings across the four different event types, we
-    // prepend a column index to each name, and we log all columns with all events, even if they are
-    // empty.
-    static final String EVENT_PARAM_AUTH_LOGGER_ID = "0_auth_logger_id";
-    static final String EVENT_PARAM_TIMESTAMP = "1_timestamp_ms";
-    static final String EVENT_PARAM_LOGIN_RESULT = "2_result";
-    static final String EVENT_PARAM_METHOD = "3_method";
-    static final String EVENT_PARAM_ERROR_CODE = "4_error_code";
-    static final String EVENT_PARAM_ERROR_MESSAGE = "5_error_message";
-    static final String EVENT_PARAM_EXTRAS = "6_extras";
-    static final String EVENT_PARAM_CHALLENGE = "7_challenge";
-    static final String EVENT_EXTRAS_TRY_LOGIN_ACTIVITY = "try_login_activity";
-    static final String EVENT_EXTRAS_MISSING_INTERNET_PERMISSION = "no_internet_permission";
-    static final String EVENT_EXTRAS_NOT_TRIED = "not_tried";
-    static final String EVENT_EXTRAS_NEW_PERMISSIONS = "new_permissions";
-    static final String EVENT_EXTRAS_LOGIN_BEHAVIOR = "login_behavior";
-    static final String EVENT_EXTRAS_REQUEST_CODE = "request_code";
-    static final String EVENT_EXTRAS_PERMISSIONS = "permissions";
-    static final String EVENT_EXTRAS_DEFAULT_AUDIENCE = "default_audience";
-    static final String EVENT_EXTRAS_IS_REAUTHORIZE = "isReauthorize";
-    static final String EVENT_EXTRAS_FACEBOOK_VERSION = "facebookVersion";
-
-    static final String FACEBOOK_PACKAGE_NAME = "com.facebook.katana";
-
-    private final AppEventsLogger appEventsLogger;
-    private String applicationId;
-    private String facebookVersion;
-
-    LoginLogger(Context context, String applicationId) {
-        this.applicationId = applicationId;
-
-        appEventsLogger = AppEventsLogger.newLogger(context, applicationId);
-
-        // Store which version of facebook is installed
-        try {
-            PackageManager packageManager = context.getPackageManager();
-            if (packageManager != null) {
-                PackageInfo facebookInfo = packageManager.getPackageInfo(FACEBOOK_PACKAGE_NAME, 0);
-                if (facebookInfo != null) {
-                    facebookVersion = facebookInfo.versionName;
-                }
-            }
-        } catch (PackageManager.NameNotFoundException e) {
-            // Do nothing, just ignore and not log
-        }
-    }
-
-    public String getApplicationId() {
-        return applicationId;
-    }
-
-    static Bundle newAuthorizationLoggingBundle(String authLoggerId) {
-        // We want to log all parameters for all events, to ensure stability of columns across
-        // different event types.
-        Bundle bundle = new Bundle();
-        bundle.putLong(EVENT_PARAM_TIMESTAMP, System.currentTimeMillis());
-        bundle.putString(EVENT_PARAM_AUTH_LOGGER_ID, authLoggerId);
-        bundle.putString(EVENT_PARAM_METHOD, "");
-        bundle.putString(EVENT_PARAM_LOGIN_RESULT, "");
-        bundle.putString(EVENT_PARAM_ERROR_MESSAGE, "");
-        bundle.putString(EVENT_PARAM_ERROR_CODE, "");
-        bundle.putString(EVENT_PARAM_EXTRAS, "");
-        return bundle;
-    }
-
-    public void logStartLogin(LoginClient.Request pendingLoginRequest) {
-        Bundle bundle = newAuthorizationLoggingBundle(pendingLoginRequest.getAuthId());
-
-        // Log what we already know about the call in start event
-        try {
-            JSONObject extras = new JSONObject();
-            extras.put(EVENT_EXTRAS_LOGIN_BEHAVIOR,
-                    pendingLoginRequest.getLoginBehavior().toString());
-            extras.put(EVENT_EXTRAS_REQUEST_CODE, LoginClient.getLoginRequestCode());
-            extras.put(EVENT_EXTRAS_PERMISSIONS,
-                    TextUtils.join(",", pendingLoginRequest.getPermissions()));
-            extras.put(EVENT_EXTRAS_DEFAULT_AUDIENCE,
-                    pendingLoginRequest.getDefaultAudience().toString());
-            extras.put(EVENT_EXTRAS_IS_REAUTHORIZE, pendingLoginRequest.isRerequest());
-            if (facebookVersion != null) {
-                extras.put(EVENT_EXTRAS_FACEBOOK_VERSION, facebookVersion);
-            }
-            bundle.putString(EVENT_PARAM_EXTRAS, extras.toString());
-        } catch (JSONException e) {
-        }
-
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_START, null, bundle);
-    }
-
-    public void logCompleteLogin(String loginRequestId, Map<String, String> loggingExtras,
-        LoginClient.Result.Code result, Map<String, String> resultExtras, Exception exception) {
-
-        Bundle bundle = newAuthorizationLoggingBundle(loginRequestId);
-        if (result != null) {
-            bundle.putString(EVENT_PARAM_LOGIN_RESULT, result.getLoggingValue());
-        }
-        if (exception != null && exception.getMessage() != null) {
-            bundle.putString(EVENT_PARAM_ERROR_MESSAGE, exception.getMessage());
-        }
-
-        // Combine extras from the request and from the result.
-        JSONObject jsonObject = null;
-        if (loggingExtras.isEmpty() == false) {
-            jsonObject = new JSONObject(loggingExtras);
-        }
-        if (resultExtras != null) {
-            if (jsonObject == null) {
-                jsonObject = new JSONObject();
-            }
-            try {
-                for (Map.Entry<String, String> entry : resultExtras.entrySet()) {
-                    jsonObject.put(entry.getKey(), entry.getValue());
-                }
-            } catch (JSONException e) {
-            }
-        }
-        if (jsonObject != null) {
-            bundle.putString(EVENT_PARAM_EXTRAS, jsonObject.toString());
-        }
-
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_COMPLETE, null, bundle);
-    }
-
-    public void logAuthorizationMethodStart(String authId, String method) {
-        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(authId);
-        bundle.putString(EVENT_PARAM_METHOD, method);
-
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_START, null, bundle);
-    }
-
-    public void logAuthorizationMethodComplete(String authId, String method, String result,
-        String errorMessage, String errorCode, Map<String, String> loggingExtras) {
-
-        Bundle bundle;
-        bundle = LoginLogger.newAuthorizationLoggingBundle(authId);
-        if (result != null) {
-            bundle.putString(LoginLogger.EVENT_PARAM_LOGIN_RESULT, result);
-        }
-        if (errorMessage != null) {
-            bundle.putString(LoginLogger.EVENT_PARAM_ERROR_MESSAGE, errorMessage);
-        }
-        if (errorCode != null) {
-            bundle.putString(LoginLogger.EVENT_PARAM_ERROR_CODE, errorCode);
-        }
-        if (loggingExtras != null && !loggingExtras.isEmpty()) {
-            JSONObject jsonObject = new JSONObject(loggingExtras);
-            bundle.putString(LoginLogger.EVENT_PARAM_EXTRAS, jsonObject.toString());
-        }
-        bundle.putString(EVENT_PARAM_METHOD, method);
-
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_COMPLETE, null, bundle);
-    }
-
-    public void logAuthorizationMethodNotTried(String authId, String method) {
-        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(authId);
-        bundle.putString(EVENT_PARAM_METHOD, method);
-
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_NOT_TRIED, null, bundle);
-    }
-
-    public void logUnexpectedError(String eventName, String errorMessage) {
-        logUnexpectedError(eventName, errorMessage, "");
-    }
-
-    public void logUnexpectedError(String eventName, String errorMessage, String method) {
-        Bundle bundle = newAuthorizationLoggingBundle("");
-        bundle.putString(EVENT_PARAM_LOGIN_RESULT,
-                LoginClient.Result.Code.ERROR.getLoggingValue());
-        bundle.putString(EVENT_PARAM_ERROR_MESSAGE, errorMessage);
-        bundle.putString(EVENT_PARAM_METHOD, method);
-
-        appEventsLogger.logSdkEvent(eventName, null, bundle);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/LoginManager.java b/facebook/src/main/java/com/facebook/login/LoginManager.java
deleted file mode 100644
index d411b66b0..000000000
--- a/facebook/src/main/java/com/facebook/login/LoginManager.java
+++ /dev/null
@@ -1,638 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.os.Bundle;
-import android.content.Context;
-import android.support.v4.app.Fragment;
-
-import com.facebook.AccessToken;
-import com.facebook.CallbackManager;
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookAuthorizationException;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphResponse;
-import com.facebook.Profile;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.internal.Validate;
-import com.facebook.appevents.AppEventsConstants;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-
-/**
- * This class manages login and permissions for Facebook.
- */
-public class LoginManager {
-    private static final String PUBLISH_PERMISSION_PREFIX = "publish";
-    private static final String MANAGE_PERMISSION_PREFIX = "manage";
-    private static final Set<String> OTHER_PUBLISH_PERMISSIONS = getOtherPublishPermissions();
-
-    private static volatile LoginManager instance;
-
-    private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;
-    private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;
-
-    LoginManager() {
-        Validate.sdkInitialized();
-    }
-
-    /**
-     * Getter for the login manager.
-     * @return The login manager.
-     */
-    public static LoginManager getInstance() {
-        if (instance == null) {
-            synchronized (LoginManager.class) {
-                if (instance == null) {
-                    instance = new LoginManager();
-                }
-            }
-        }
-
-        return instance;
-    }
-
-    /**
-     * Starts the login process to resolve the error defined in the response. The registered login
-     * callbacks will be called on completion.
-     *
-     * @param activity The activity which is starting the login process.
-     * @param response The response that has the error.
-     */
-    public void resolveError(final Activity activity, final GraphResponse response) {
-        startLogin(
-                new ActivityStartActivityDelegate(activity),
-                createLoginRequestFromResponse(response)
-        );
-    }
-
-    /**
-     * Starts the login process to resolve the error defined in the response. The registered login
-     * callbacks will be called on completion.
-     *
-     * @param fragment The fragment which is starting the login process.
-     * @param response The response that has the error.
-     */
-    public void resolveError(Fragment fragment, final GraphResponse response) {
-        this.resolveError(new FragmentWrapper(fragment), response);
-    }
-
-    /**
-     * Starts the login process to resolve the error defined in the response. The registered login
-     * callbacks will be called on completion.
-     *
-     * @param fragment The android.app.Fragment which is starting the login process.
-     * @param response The response that has the error.
-     */
-    public void resolveError(final android.app.Fragment fragment, final GraphResponse response) {
-        this.resolveError(new FragmentWrapper(fragment), response);
-    }
-
-    /**
-     * Starts the login process to resolve the error defined in the response. The registered login
-     * callbacks will be called on completion.
-     *
-     * @param fragment The fragment which is starting the login process.
-     * @param response The response that has the error.
-     */
-    private void resolveError(final FragmentWrapper fragment, final GraphResponse response) {
-        startLogin(
-                new FragmentStartActivityDelegate(fragment),
-                createLoginRequestFromResponse(response)
-        );
-    }
-
-    private LoginClient.Request createLoginRequestFromResponse(final GraphResponse response) {
-        Validate.notNull(response, "response");
-        AccessToken failedToken = response.getRequest().getAccessToken();
-        return createLoginRequest(failedToken != null ? failedToken.getPermissions() : null);
-    }
-
-    /**
-     * Registers a login callback to the given callback manager.
-     * @param callbackManager The callback manager that will encapsulate the callback.
-     * @param callback The login callback that will be called on login completion.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<LoginResult> callback) {
-        if (!(callbackManager instanceof CallbackManagerImpl)) {
-            throw new FacebookException("Unexpected CallbackManager, " +
-                    "please use the provided Factory.");
-        }
-        ((CallbackManagerImpl) callbackManager).registerCallback(
-                CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return LoginManager.this.onActivityResult(
-                                resultCode,
-                                data,
-                                callback);
-                    }
-                }
-        );
-    }
-
-    boolean onActivityResult(int resultCode, Intent data) {
-        return onActivityResult(resultCode, data, null);
-    }
-
-    boolean onActivityResult(int resultCode, Intent data, FacebookCallback<LoginResult>  callback) {
-        FacebookException exception = null;
-        AccessToken newToken = null;
-        LoginClient.Result.Code code = LoginClient.Result.Code.ERROR;
-        Map<String, String> loggingExtras = null;
-        LoginClient.Request originalRequest = null;
-
-        boolean isCanceled = false;
-        if (data != null) {
-            LoginClient.Result result =
-                    (LoginClient.Result) data.getParcelableExtra(LoginFragment.RESULT_KEY);
-            if (result != null) {
-                originalRequest = result.request;
-                code = result.code;
-                if (resultCode == Activity.RESULT_OK) {
-                    if (result.code == LoginClient.Result.Code.SUCCESS) {
-                        newToken = result.token;
-                    } else {
-                        exception = new FacebookAuthorizationException(result.errorMessage);
-                    }
-                } else if (resultCode == Activity.RESULT_CANCELED) {
-                    isCanceled = true;
-                }
-                loggingExtras = result.loggingExtras;
-            }
-        } else if (resultCode == Activity.RESULT_CANCELED) {
-            isCanceled = true;
-            code = LoginClient.Result.Code.CANCEL;
-        }
-
-        if (exception == null && newToken == null && !isCanceled) {
-            exception = new FacebookException("Unexpected call to LoginManager.onActivityResult");
-        }
-
-        boolean wasLoginActivityTried = true;
-        Context context = null; //Sadly, there is no way to get activity context at this point.S
-        logCompleteLogin(
-                context,
-                code,
-                loggingExtras,
-                exception,
-                wasLoginActivityTried,
-                originalRequest);
-
-        finishLogin(newToken, originalRequest, exception, isCanceled, callback);
-
-        return true;
-    }
-
-    /**
-     * Getter for the login behavior.
-     * @return the login behavior.
-     */
-    public LoginBehavior getLoginBehavior() {
-        return loginBehavior;
-    }
-
-    /**
-     * Setter for the login behavior.
-     * @param loginBehavior The login behavior.
-     * @return The login manager.
-     */
-    public LoginManager setLoginBehavior(LoginBehavior loginBehavior) {
-        this.loginBehavior = loginBehavior;
-        return this;
-    }
-
-    /**
-     * Getter for the default audience.
-     * @return The default audience.
-     */
-    public DefaultAudience getDefaultAudience() {
-        return defaultAudience;
-    }
-
-    /**
-     * Setter for the default audience.
-     * @param defaultAudience The default audience.
-     * @return The login manager.
-     */
-    public LoginManager setDefaultAudience(DefaultAudience defaultAudience) {
-        this.defaultAudience = defaultAudience;
-        return this;
-    }
-
-    /**
-     * Logs out the user.
-     */
-    public void logOut() {
-        AccessToken.setCurrentAccessToken(null);
-        Profile.setCurrentProfile(null);
-    }
-
-    /**
-     * Logs the user in with the requested read permissions.
-     * @param fragment    The android.support.v4.app.Fragment which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    public void logInWithReadPermissions(
-            Fragment fragment,
-            Collection<String> permissions) {
-        logInWithReadPermissions(new FragmentWrapper(fragment), permissions);
-    }
-
-    /**
-     * Logs the user in with the requested read permissions.
-     * @param fragment    The android.app.Fragment which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    public void logInWithReadPermissions(
-            android.app.Fragment fragment,
-            Collection<String> permissions) {
-        logInWithReadPermissions(new FragmentWrapper(fragment), permissions);
-    }
-
-    /**
-     * Logs the user in with the requested read permissions.
-     * @param fragment    The fragment which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    private void logInWithReadPermissions(
-            FragmentWrapper fragment,
-            Collection<String> permissions) {
-        validateReadPermissions(permissions);
-
-        LoginClient.Request loginRequest = createLoginRequest(permissions);
-        startLogin(new FragmentStartActivityDelegate(fragment), loginRequest);
-    }
-
-    /**
-     * Logs the user in with the requested read permissions.
-     * @param activity    The activity which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    public void logInWithReadPermissions(Activity activity, Collection<String> permissions) {
-        validateReadPermissions(permissions);
-
-        LoginClient.Request loginRequest = createLoginRequest(permissions);
-        startLogin(new ActivityStartActivityDelegate(activity), loginRequest);
-    }
-
-    /**
-     * Logs the user in with the requested publish permissions.
-     * @param fragment    The android.support.v4.app.Fragment which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    public void logInWithPublishPermissions(
-            Fragment fragment,
-            Collection<String> permissions) {
-        logInWithPublishPermissions(new FragmentWrapper(fragment), permissions);
-    }
-
-    /**
-     * Logs the user in with the requested publish permissions.
-     * @param fragment    The android.app.Fragment which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    public void logInWithPublishPermissions(
-            android.app.Fragment fragment,
-            Collection<String> permissions) {
-        logInWithPublishPermissions(new FragmentWrapper(fragment), permissions);
-    }
-
-    /**
-     * Logs the user in with the requested publish permissions.
-     * @param fragment    The fragment which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    private void logInWithPublishPermissions(
-            FragmentWrapper fragment,
-            Collection<String> permissions) {
-        validatePublishPermissions(permissions);
-
-        LoginClient.Request loginRequest = createLoginRequest(permissions);
-        startLogin(new FragmentStartActivityDelegate(fragment), loginRequest);
-    }
-
-    /**
-     * Logs the user in with the requested publish permissions.
-     * @param activity    The activity which is starting the login process.
-     * @param permissions The requested permissions.
-     */
-    public void logInWithPublishPermissions(Activity activity, Collection<String> permissions) {
-        validatePublishPermissions(permissions);
-
-        LoginClient.Request loginRequest = createLoginRequest(permissions);
-        startLogin(new ActivityStartActivityDelegate(activity), loginRequest);
-    }
-
-    private void validateReadPermissions(Collection<String> permissions) {
-        if (permissions == null) {
-            return;
-        }
-        for (String permission : permissions) {
-            if (isPublishPermission(permission)) {
-                throw new FacebookException(
-                    String.format(
-                        "Cannot pass a publish or manage permission (%s) to a request for read " +
-                                "authorization",
-                        permission));
-            }
-        }
-    }
-
-    private void validatePublishPermissions(Collection<String> permissions) {
-        if (permissions == null) {
-            return;
-        }
-        for (String permission : permissions) {
-            if (!isPublishPermission(permission)) {
-                throw new FacebookException(
-                    String.format(
-                        "Cannot pass a read permission (%s) to a request for publish authorization",
-                        permission));
-            }
-        }
-    }
-
-    static boolean isPublishPermission(String permission) {
-        return permission != null &&
-            (permission.startsWith(PUBLISH_PERMISSION_PREFIX) ||
-                permission.startsWith(MANAGE_PERMISSION_PREFIX) ||
-                OTHER_PUBLISH_PERMISSIONS.contains(permission));
-    }
-
-    private static Set<String> getOtherPublishPermissions() {
-        HashSet<String> set = new HashSet<String>() {{
-            add("ads_management");
-            add("create_event");
-            add("rsvp_event");
-        }};
-        return Collections.unmodifiableSet(set);
-    }
-
-    protected LoginClient.Request createLoginRequest(Collection<String> permissions) {
-        LoginClient.Request request = new LoginClient.Request(
-                loginBehavior,
-                Collections.unmodifiableSet(
-                        permissions != null ? new HashSet(permissions) : new HashSet<String>()),
-                defaultAudience,
-                FacebookSdk.getApplicationId(),
-                UUID.randomUUID().toString()
-        );
-        request.setRerequest(AccessToken.getCurrentAccessToken() != null);
-        return request;
-    }
-
-    private void startLogin(
-            StartActivityDelegate startActivityDelegate,
-            LoginClient.Request request
-    ) throws FacebookException {
-
-        logStartLogin(startActivityDelegate.getActivityContext(), request);
-
-        // Make sure the static handler for login is registered if there isn't an explicit callback
-        CallbackManagerImpl.registerStaticCallback(
-                CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return LoginManager.this.onActivityResult(resultCode, data);
-                    }
-                }
-        );
-
-        boolean started = tryFacebookActivity(startActivityDelegate, request);
-
-        if (!started) {
-            FacebookException exception = new FacebookException(
-                    "Log in attempt failed: FacebookActivity could not be started." +
-                            " Please make sure you added FacebookActivity to the AndroidManifest.");
-            boolean wasLoginActivityTried = false;
-            logCompleteLogin(
-                    startActivityDelegate.getActivityContext(),
-                    LoginClient.Result.Code.ERROR,
-                    null,
-                    exception,
-                    wasLoginActivityTried,
-                    request);
-            throw exception;
-        }
-    }
-
-    private void logStartLogin(Context context, LoginClient.Request loginRequest) {
-        LoginLogger loginLogger = LoginLoggerHolder.getLogger(context);
-        if (loginLogger != null && loginRequest != null) {
-            loginLogger.logStartLogin(loginRequest);
-        }
-    }
-
-    private void logCompleteLogin(
-            Context context,
-            LoginClient.Result.Code result,
-            Map<String, String> resultExtras,
-            Exception exception,
-            boolean wasLoginActivityTried,
-            LoginClient.Request request) {
-        LoginLogger loginLogger = LoginLoggerHolder.getLogger(context);
-        if (loginLogger == null) {
-            return;
-        }
-        if (request == null) {
-            // We don't expect this to happen, but if it does, log an event for diagnostic purposes.
-            loginLogger.logUnexpectedError(
-                    LoginLogger.EVENT_NAME_LOGIN_COMPLETE,
-                    "Unexpected call to logCompleteLogin with null pendingAuthorizationRequest."
-            );
-        } else {
-            HashMap<String, String> pendingLoggingExtras = new HashMap<>();
-            pendingLoggingExtras.put(
-                    LoginLogger.EVENT_EXTRAS_TRY_LOGIN_ACTIVITY,
-                    wasLoginActivityTried ?
-                            AppEventsConstants.EVENT_PARAM_VALUE_YES :
-                            AppEventsConstants.EVENT_PARAM_VALUE_NO
-            );
-            loginLogger.logCompleteLogin(
-                    request.getAuthId(),
-                    pendingLoggingExtras,
-                    result,
-                    resultExtras,
-                    exception);
-        }
-    }
-
-    private boolean tryFacebookActivity(
-            StartActivityDelegate startActivityDelegate,
-            LoginClient.Request request) {
-
-        Intent intent = getFacebookActivityIntent(request);
-
-        if (!resolveIntent(intent)) {
-            return false;
-        }
-
-        try {
-            startActivityDelegate.startActivityForResult(
-                    intent,
-                    LoginClient.getLoginRequestCode());
-        } catch (ActivityNotFoundException e) {
-            return false;
-        }
-
-        return true;
-    }
-
-    private boolean resolveIntent(Intent intent) {
-        ResolveInfo resolveInfo = FacebookSdk.getApplicationContext().getPackageManager()
-            .resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return false;
-        }
-        return true;
-    }
-
-    private Intent getFacebookActivityIntent(LoginClient.Request request) {
-        Intent intent = new Intent();
-        intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
-        intent.setAction(request.getLoginBehavior().toString());
-
-        // Let FacebookActivity populate extras appropriately
-        LoginClient.Request authClientRequest = request;
-        Bundle extras = new Bundle();
-        extras.putParcelable(LoginFragment.EXTRA_REQUEST, request);
-        intent.putExtra(LoginFragment.REQUEST_KEY, extras);
-
-        return intent;
-    }
-
-    static LoginResult computeLoginResult(
-            final LoginClient.Request request,
-            final AccessToken newToken
-    ) {
-        Set<String> requestedPermissions = request.getPermissions();
-        Set<String> grantedPermissions = new HashSet<String>(newToken.getPermissions());
-
-        // If it's a reauth, subset the granted permissions to just the requested permissions
-        // so we don't report implicit permissions like user_profile as recently granted.
-        if (request.isRerequest()) {
-            grantedPermissions.retainAll(requestedPermissions);
-        }
-
-        Set<String> deniedPermissions = new HashSet<String>(requestedPermissions);
-        deniedPermissions.removeAll(grantedPermissions);
-        return new LoginResult(newToken, grantedPermissions, deniedPermissions);
-    }
-
-    private void finishLogin(
-            AccessToken newToken,
-            LoginClient.Request origRequest,
-            FacebookException exception,
-            boolean isCanceled,
-            FacebookCallback<LoginResult>  callback) {
-        if (newToken != null) {
-            AccessToken.setCurrentAccessToken(newToken);
-            Profile.fetchProfileForCurrentAccessToken();
-        }
-
-        if (callback != null) {
-            LoginResult loginResult = newToken != null
-                    ? computeLoginResult(origRequest, newToken)
-                    : null;
-            // If there are no granted permissions, the operation is treated as cancel.
-            if (isCanceled
-                    || (loginResult != null
-                           && loginResult.getRecentlyGrantedPermissions().size() == 0)) {
-                callback.onCancel();
-            } else if (exception != null) {
-                callback.onError(exception);
-            } else if (newToken != null) {
-                callback.onSuccess(loginResult);
-            }
-        }
-    }
-
-    private static class ActivityStartActivityDelegate implements StartActivityDelegate {
-        private final Activity activity;
-
-        ActivityStartActivityDelegate(final Activity activity) {
-            Validate.notNull(activity, "activity");
-            this.activity = activity;
-        }
-
-        @Override
-        public void startActivityForResult(Intent intent, int requestCode) {
-            activity.startActivityForResult(intent, requestCode);
-        }
-
-        @Override
-        public Activity getActivityContext() {
-            return activity;
-        }
-    }
-
-    private static class FragmentStartActivityDelegate implements StartActivityDelegate {
-        private final FragmentWrapper fragment;
-
-        FragmentStartActivityDelegate(final FragmentWrapper fragment) {
-            Validate.notNull(fragment, "fragment");
-            this.fragment = fragment;
-        }
-
-        @Override
-        public void startActivityForResult(Intent intent, int requestCode) {
-            fragment.startActivityForResult(intent, requestCode);
-        }
-
-        @Override
-        public Activity getActivityContext() {
-            return fragment.getActivity();
-        }
-    }
-
-    private static class LoginLoggerHolder {
-        private static volatile LoginLogger logger;
-
-        private static synchronized LoginLogger getLogger(Context context) {
-            context = context != null ? context : FacebookSdk.getApplicationContext();
-            if (context == null) {
-                return null;
-            }
-            if (logger == null) {
-                logger = new LoginLogger(context, FacebookSdk.getApplicationId());
-            }
-            return logger;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
deleted file mode 100644
index fc3e01879..000000000
--- a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
+++ /dev/null
@@ -1,214 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.util.Base64;
-import android.util.Log;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookAuthorizationException;
-import com.facebook.FacebookException;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.UnsupportedEncodingException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-abstract class LoginMethodHandler implements Parcelable {
-    Map<String, String> methodLoggingExtras;
-    protected LoginClient loginClient;
-
-    LoginMethodHandler(LoginClient loginClient) {
-        this.loginClient = loginClient;
-    }
-
-    LoginMethodHandler(Parcel source) {
-        methodLoggingExtras = Utility.readStringMapFromParcel(source);
-    }
-
-    // This should only be used if restoring from a Parcel
-    void setLoginClient(LoginClient loginClient) {
-        if (this.loginClient != null) {
-            throw new FacebookException("Can't set LoginClient if it is already set.");
-        }
-        this.loginClient = loginClient;
-    }
-
-    abstract boolean tryAuthorize(LoginClient.Request request);
-
-    abstract String getNameForLogging();
-
-    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        return false;
-    }
-
-    boolean needsInternetPermission() {
-        return false;
-    }
-
-    void cancel() {
-    }
-
-    void putChallengeParam(JSONObject param) throws JSONException {
-    }
-
-    protected String getClientState(String authId) {
-        JSONObject param = new JSONObject();
-        try {
-            param.put(LoginLogger.EVENT_PARAM_AUTH_LOGGER_ID, authId);
-            param.put(LoginLogger.EVENT_PARAM_METHOD, getNameForLogging());
-            putChallengeParam(param);
-        } catch (JSONException e) {
-            Log.w("LoginMethodHandler", "Error creating client state json: " + e.getMessage());
-        }
-        return param.toString();
-    }
-
-    protected void addLoggingExtra(String key, Object value) {
-        if (methodLoggingExtras == null) {
-            methodLoggingExtras = new HashMap<String, String>();
-        }
-        methodLoggingExtras.put(key, value == null ? null : value.toString());
-    }
-
-    protected void logWebLoginCompleted(String e2e) {
-        String applicationId = loginClient.getPendingRequest().getApplicationId();
-        AppEventsLogger appEventsLogger =
-                AppEventsLogger.newLogger(loginClient.getActivity(), applicationId);
-
-        Bundle parameters = new Bundle();
-        parameters.putString(AnalyticsEvents.PARAMETER_WEB_LOGIN_E2E, e2e);
-        parameters.putLong(
-                AnalyticsEvents.PARAMETER_WEB_LOGIN_SWITCHBACK_TIME, System.currentTimeMillis());
-        parameters.putString(AnalyticsEvents.PARAMETER_APP_ID, applicationId);
-
-        appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_WEB_LOGIN_COMPLETE, null, parameters);
-    }
-
-    static AccessToken createAccessTokenFromNativeLogin(
-            Bundle bundle,
-            AccessTokenSource source,
-            String applicationId) {
-        Date expires = Utility.getBundleLongAsDate(
-                bundle, NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, new Date(0));
-        ArrayList<String> permissions = bundle.getStringArrayList(NativeProtocol.EXTRA_PERMISSIONS);
-        String token = bundle.getString(NativeProtocol.EXTRA_ACCESS_TOKEN);
-
-        if (Utility.isNullOrEmpty(token)) {
-            return null;
-        }
-
-        String userId = bundle.getString(NativeProtocol.EXTRA_USER_ID);
-
-        return new AccessToken(
-                token,
-                applicationId,
-                userId,
-                permissions,
-                null,
-                source,
-                expires,
-                new Date());
-    }
-
-    public static AccessToken createAccessTokenFromWebBundle(
-            Collection<String> requestedPermissions,
-            Bundle bundle,
-            AccessTokenSource source,
-            String applicationId) throws FacebookException {
-        Date expires = Utility.getBundleLongAsDate(bundle, AccessToken.EXPIRES_IN_KEY, new Date());
-        String token = bundle.getString(AccessToken.ACCESS_TOKEN_KEY);
-
-        // With Login v4, we now get back the actual permissions granted, so update the permissions
-        // to be the real thing
-        String grantedPermissions = bundle.getString("granted_scopes");
-        if (!Utility.isNullOrEmpty(grantedPermissions)) {
-            requestedPermissions = new ArrayList<String>(
-                    Arrays.asList(grantedPermissions.split(",")));
-        }
-        String deniedPermissions = bundle.getString("denied_scopes");
-        List<String> declinedPermissions = null;
-        if (!Utility.isNullOrEmpty(deniedPermissions)) {
-            declinedPermissions = new ArrayList<String>(
-                    Arrays.asList(deniedPermissions.split(",")));
-        }
-
-        if (Utility.isNullOrEmpty(token)) {
-            return null;
-        }
-
-        String signed_request = bundle.getString("signed_request");
-        String userId = getUserIDFromSignedRequest(signed_request);
-
-        return new AccessToken(
-                token,
-                applicationId,
-                userId,
-                requestedPermissions,
-                declinedPermissions,
-                source,
-                expires,
-                new Date());
-    }
-
-    private static String getUserIDFromSignedRequest(
-            String signedRequest) throws FacebookException {
-        if (signedRequest == null || signedRequest.isEmpty()) {
-            throw new FacebookException(
-                    "Authorization response does not contain the signed_request");
-        }
-
-        try {
-            String[] signatureAndPayload = signedRequest.split("\\.");
-            if (signatureAndPayload.length == 2) {
-                byte[] data = Base64.decode(signatureAndPayload[1], Base64.DEFAULT);
-                String dataStr = new String(data, "UTF-8");
-                JSONObject jsonObject = new JSONObject(dataStr);
-                return jsonObject.getString("user_id");
-            }
-        } catch (UnsupportedEncodingException ex) {
-        } catch (JSONException ex) {
-        }
-        throw new FacebookException("Failed to retrieve user_id from signed_request");
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        Utility.writeStringMapToParcel(dest, methodLoggingExtras);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/LoginResult.java b/facebook/src/main/java/com/facebook/login/LoginResult.java
deleted file mode 100644
index 1fe643122..000000000
--- a/facebook/src/main/java/com/facebook/login/LoginResult.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import com.facebook.AccessToken;
-
-import java.util.Set;
-
-/**
- * This class shows the results of a login operation.
- */
-public class LoginResult {
-    private final AccessToken accessToken;
-    private final Set<String> recentlyGrantedPermissions;
-    private final Set<String> recentlyDeniedPermissions;
-
-    /**
-     * The constructor.
-     *
-     * @param accessToken                The new access token.
-     * @param recentlyGrantedPermissions The recently granted permissions.
-     * @param recentlyDeniedPermissions  The recently denied permissions.
-     */
-    public LoginResult(
-            AccessToken accessToken,
-            Set<String> recentlyGrantedPermissions,
-            Set<String> recentlyDeniedPermissions) {
-        this.accessToken = accessToken;
-        this.recentlyGrantedPermissions = recentlyGrantedPermissions;
-        this.recentlyDeniedPermissions = recentlyDeniedPermissions;
-    }
-
-    /**
-     * Getter for the new access token.
-     * @return the new access token.
-     */
-    public AccessToken getAccessToken() {
-        return accessToken;
-    }
-
-    /**
-     * Getter for the recently granted permissions.
-     * @return the recently granted permissions.
-     */
-    public Set<String> getRecentlyGrantedPermissions() {
-        return recentlyGrantedPermissions;
-    }
-
-    /**
-     * Getter for the recently denied permissions.
-     * @return the recently denied permissions.
-     */
-    public Set<String> getRecentlyDeniedPermissions() {
-        return recentlyDeniedPermissions;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
deleted file mode 100644
index be86941ad..000000000
--- a/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Parcel;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-
-abstract class NativeAppLoginMethodHandler extends LoginMethodHandler {
-
-    NativeAppLoginMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-    }
-
-    NativeAppLoginMethodHandler(Parcel source) {
-        super(source);
-    }
-
-    abstract boolean tryAuthorize(LoginClient.Request request);
-
-    @Override
-    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        // Handle stuff
-        LoginClient.Result outcome;
-
-        LoginClient.Request request = loginClient.getPendingRequest();
-
-        if (data == null) {
-            // This happens if the user presses 'Back'.
-            outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
-        } else if (resultCode == Activity.RESULT_CANCELED) {
-            outcome = handleResultCancel(request, data);
-        } else if (resultCode != Activity.RESULT_OK) {
-            outcome = LoginClient.Result.createErrorResult(request,
-                    "Unexpected resultCode from authorization.", null);
-        } else {
-            outcome = handleResultOk(request, data);
-        }
-
-        if (outcome != null) {
-            loginClient.completeAndValidate(outcome);
-        } else {
-            loginClient.tryNextHandler();
-        }
-        return true;
-    }
-
-    private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-        String errorMessage = getErrorMessage(extras);
-
-        String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
-        if (!Utility.isNullOrEmpty(e2e)) {
-            logWebLoginCompleted(e2e);
-        }
-
-        if (error == null && errorCode == null && errorMessage == null) {
-            try {
-                AccessToken token = createAccessTokenFromWebBundle(request.getPermissions(),
-                        extras, AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                        request.getApplicationId());
-                return LoginClient.Result.createTokenResult(request, token);
-            } catch (FacebookException ex) {
-                return LoginClient.Result.createErrorResult(request, null, ex.getMessage());
-            }
-        } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
-            return null;
-        } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
-            return LoginClient.Result.createCancelResult(request, null);
-        } else {
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-    }
-
-    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-
-        // If the device has lost network, the result will be a cancel with a connection failure
-        // error. We want our consumers to be notified of this as an error so they can tell their
-        // users to "reconnect and try again".
-        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
-            String errorMessage = getErrorMessage(extras);
-
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-
-        return LoginClient.Result.createCancelResult(request, error);
-    }
-
-    private String getError(Bundle extras) {
-        String error = extras.getString("error");
-        if (error == null) {
-            error = extras.getString("error_type");
-        }
-        return error;
-    }
-
-    private String getErrorMessage(Bundle extras) {
-        String errorMessage = extras.getString("error_message");
-        if (errorMessage == null) {
-            errorMessage = extras.getString("error_description");
-        }
-        return errorMessage;
-    }
-
-    protected boolean tryIntent(Intent intent, int requestCode) {
-        if (intent == null) {
-            return false;
-        }
-
-        try {
-            loginClient.getFragment().startActivityForResult(intent, requestCode);
-        } catch (ActivityNotFoundException e) {
-            // We don't expect this to happen, since we've already validated the intent and bailed
-            // out before now if it couldn't be resolved.
-            return false;
-        }
-
-        return true;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/StartActivityDelegate.java b/facebook/src/main/java/com/facebook/login/StartActivityDelegate.java
deleted file mode 100644
index d30461be3..000000000
--- a/facebook/src/main/java/com/facebook/login/StartActivityDelegate.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.Intent;
-
-interface StartActivityDelegate {
-    public void startActivityForResult(Intent intent, int requestCode);
-
-    public Activity getActivityContext();
-}
diff --git a/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
deleted file mode 100644
index 1aa098c76..000000000
--- a/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.text.TextUtils;
-import android.webkit.CookieSyncManager;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.FacebookServiceException;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-
-import java.util.Locale;
-
-abstract class WebLoginMethodHandler extends LoginMethodHandler {
-    private static final String WEB_VIEW_AUTH_HANDLER_STORE =
-            "com.facebook.login.AuthorizationClient.WebViewAuthHandler.TOKEN_STORE_KEY";
-    private static final String WEB_VIEW_AUTH_HANDLER_TOKEN_KEY = "TOKEN";
-
-    private static final String getRedirectUri() {
-        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
-    }
-
-    private String e2e;
-
-    WebLoginMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-    }
-
-    WebLoginMethodHandler(Parcel source) {
-        super(source);
-    }
-
-    abstract AccessTokenSource getTokenSource();
-
-    protected String getSSODevice() {
-        return null;
-    }
-
-    protected Bundle getParameters(final LoginClient.Request request) {
-        Bundle parameters = new Bundle();
-        if (!Utility.isNullOrEmpty(request.getPermissions())) {
-            String scope = TextUtils.join(",", request.getPermissions());
-            parameters.putString(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
-            addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
-        }
-
-        DefaultAudience audience = request.getDefaultAudience();
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, audience.getNativeProtocolAudience());
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_STATE, getClientState(request.getAuthId()));
-
-        AccessToken previousToken = AccessToken.getCurrentAccessToken();
-        String previousTokenString = previousToken != null ? previousToken.getToken() : null;
-        if (previousTokenString != null
-                && (previousTokenString.equals(loadCookieToken()))) {
-            parameters.putString(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    previousTokenString);
-            // Don't log the actual access token, just its presence or absence.
-            addLoggingExtra(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    AppEventsConstants.EVENT_PARAM_VALUE_YES);
-        } else {
-            // The call to clear cookies will create the first instance of CookieSyncManager if
-            // necessary
-            Utility.clearFacebookCookies(loginClient.getActivity());
-            addLoggingExtra(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    AppEventsConstants.EVENT_PARAM_VALUE_NO);
-        }
-
-        return parameters;
-    }
-
-    protected Bundle addExtraParameters(Bundle parameters, final LoginClient.Request request) {
-        parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, getRedirectUri());
-        parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, request.getApplicationId());
-        parameters.putString(ServerProtocol.DIALOG_PARAM_E2E, loginClient.getE2E());
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
-                ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
-                ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
-                ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-        if (getSSODevice() != null) {
-            parameters.putString(ServerProtocol.DIALOG_PARAM_SSO_DEVICE, getSSODevice());
-        }
-
-        return parameters;
-    }
-
-    protected void onComplete(LoginClient.Request request, Bundle values, FacebookException error) {
-        LoginClient.Result outcome;
-        e2e = null;
-        if (values != null) {
-            // Actual e2e we got from the dialog should be used for logging.
-            if (values.containsKey(ServerProtocol.DIALOG_PARAM_E2E)) {
-                e2e = values.getString(ServerProtocol.DIALOG_PARAM_E2E);
-            }
-
-            try {
-                AccessToken token = createAccessTokenFromWebBundle(
-                        request.getPermissions(),
-                        values,
-                        getTokenSource(),
-                        request.getApplicationId());
-                outcome = LoginClient.Result.createTokenResult(
-                        loginClient.getPendingRequest(),
-                        token);
-
-                // Ensure any cookies set by the dialog are saved
-                // This is to work around a bug where CookieManager may fail to instantiate if
-                // CookieSyncManager has never been created.
-                CookieSyncManager syncManager =
-                        CookieSyncManager.createInstance(loginClient.getActivity());
-                syncManager.sync();
-                saveCookieToken(token.getToken());
-            } catch (FacebookException ex) {
-                outcome = LoginClient.Result.createErrorResult(
-                        loginClient.getPendingRequest(),
-                        null,
-                        ex.getMessage());
-            }
-        } else {
-            if (error instanceof FacebookOperationCanceledException) {
-                outcome = LoginClient.Result.createCancelResult(loginClient.getPendingRequest(),
-                        "User canceled log in.");
-            } else {
-                // Something went wrong, don't log a completion event since it will skew timing
-                // results.
-                e2e = null;
-
-                String errorCode = null;
-                String errorMessage = error.getMessage();
-                if (error instanceof FacebookServiceException) {
-                    FacebookRequestError requestError =
-                            ((FacebookServiceException)error).getRequestError();
-                    errorCode = String.format(Locale.ROOT, "%d", requestError.getErrorCode());
-                    errorMessage = requestError.toString();
-                }
-                outcome = LoginClient.Result.createErrorResult(loginClient.getPendingRequest(),
-                        null, errorMessage, errorCode);
-            }
-        }
-
-        if (!Utility.isNullOrEmpty(e2e)) {
-            logWebLoginCompleted(e2e);
-        }
-
-        loginClient.completeAndValidate(outcome);
-    }
-
-    private String loadCookieToken() {
-        Context context = loginClient.getActivity();
-        SharedPreferences sharedPreferences = context.getSharedPreferences(
-                WEB_VIEW_AUTH_HANDLER_STORE,
-                Context.MODE_PRIVATE);
-        return sharedPreferences.getString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, "");
-    }
-
-    private void saveCookieToken(String token) {
-        Context context = loginClient.getActivity();
-        context.getSharedPreferences(
-                WEB_VIEW_AUTH_HANDLER_STORE,
-                Context.MODE_PRIVATE)
-                .edit()
-                .putString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, token)
-                .apply();
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
deleted file mode 100644
index e83ead459..000000000
--- a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
+++ /dev/null
@@ -1,173 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.v4.app.FragmentActivity;
-
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.internal.FacebookDialogFragment;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.WebDialog;
-
-class WebViewLoginMethodHandler extends WebLoginMethodHandler {
-
-    private WebDialog loginDialog;
-    private String e2e;
-
-    WebViewLoginMethodHandler(LoginClient loginClient) {
-        super(loginClient);
-    }
-
-    @Override
-    String getNameForLogging() {
-        return "web_view";
-    }
-
-    @Override
-    AccessTokenSource getTokenSource() {
-        return AccessTokenSource.WEB_VIEW;
-    }
-
-    @Override
-    boolean needsInternetPermission() {
-        return true;
-    }
-
-    @Override
-    void cancel() {
-        if (loginDialog != null) {
-            loginDialog.cancel();
-            loginDialog = null;
-        }
-    }
-
-    @Override
-    boolean tryAuthorize(final LoginClient.Request request) {
-        Bundle parameters = getParameters(request);
-
-        WebDialog.OnCompleteListener listener = new WebDialog.OnCompleteListener() {
-            @Override
-            public void onComplete(Bundle values, FacebookException error) {
-                onWebDialogComplete(request, values, error);
-            }
-        };
-
-        e2e = LoginClient.getE2E();
-        addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
-
-        FragmentActivity fragmentActivity = loginClient.getActivity();
-        WebDialog.Builder builder = new AuthDialogBuilder(
-                fragmentActivity,
-                request.getApplicationId(),
-                parameters)
-                .setE2E(e2e)
-                .setIsRerequest(request.isRerequest())
-                .setOnCompleteListener(listener);
-        loginDialog = builder.build();
-
-        FacebookDialogFragment dialogFragment = new FacebookDialogFragment();
-        dialogFragment.setRetainInstance(true);
-        dialogFragment.setDialog(loginDialog);
-        dialogFragment.show(fragmentActivity.getSupportFragmentManager(),
-                FacebookDialogFragment.TAG);
-
-        return true;
-    }
-
-    void onWebDialogComplete(LoginClient.Request request, Bundle values,
-            FacebookException error) {
-        super.onComplete(request, values, error);
-    }
-
-    static class AuthDialogBuilder extends WebDialog.Builder {
-        private static final String OAUTH_DIALOG = "oauth";
-        static final String REDIRECT_URI = "fbconnect://success";
-        private String e2e;
-        private boolean isRerequest;
-
-        public AuthDialogBuilder(Context context, String applicationId, Bundle parameters) {
-            super(context, applicationId, OAUTH_DIALOG, parameters);
-        }
-
-        public AuthDialogBuilder setE2E(String e2e) {
-            this.e2e = e2e;
-            return this;
-        }
-
-        public AuthDialogBuilder setIsRerequest(boolean isRerequest) {
-            this.isRerequest = isRerequest;
-            return this;
-        }
-
-        @Override
-        public WebDialog build() {
-            Bundle parameters = getParameters();
-            parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
-            parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, getApplicationId());
-            parameters.putString(ServerProtocol.DIALOG_PARAM_E2E, e2e);
-            parameters.putString(
-                    ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
-                    ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
-            parameters.putString(
-                    ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
-                    ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-            parameters.putString(
-                        ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
-                        ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-
-            return new WebDialog(getContext(), OAUTH_DIALOG, parameters, getTheme(), getListener());
-        }
-    }
-
-    WebViewLoginMethodHandler(Parcel source) {
-        super(source);
-        e2e = source.readString();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        super.writeToParcel(dest, flags);
-        dest.writeString(e2e);
-    }
-
-    public static final Parcelable.Creator<WebViewLoginMethodHandler> CREATOR =
-            new Parcelable.Creator() {
-
-                @Override
-                public WebViewLoginMethodHandler createFromParcel(Parcel source) {
-                    return new WebViewLoginMethodHandler(source);
-                }
-
-                @Override
-                public WebViewLoginMethodHandler[] newArray(int size) {
-                    return new WebViewLoginMethodHandler[size];
-                }
-            };}
diff --git a/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java b/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java
deleted file mode 100644
index 9ffb8d896..000000000
--- a/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login.widget;
-
-import android.content.Context;
-import android.net.Uri;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.login.DeviceLoginManager;
-import com.facebook.login.LoginBehavior;
-import com.facebook.login.LoginManager;
-
-/**
- * A Log In/Log Out button that maintains login state and logs in/out for the app.
- * <p/>
- * This control requires the app ID and client token to be specified in the AndroidManifest.xml.
- */
-public class DeviceLoginButton extends LoginButton {
-
-    private Uri deviceRedirectUri;
-
-    /**
-     * Create the LoginButton by inflating from XML
-     *
-     * @see View#View(Context, AttributeSet)
-     */
-    public DeviceLoginButton(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    /**
-     * Create the LoginButton by inflating from XML
-     *
-     * @see View#View(Context, AttributeSet)
-     */
-    public DeviceLoginButton(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    /**
-     * Create the LoginButton by inflating from XML and applying a style.
-     *
-     * @see View#View(Context, AttributeSet, int)
-     */
-    public DeviceLoginButton(Context context) {
-        super(context);
-    }
-
-    /**
-     * Set uri to redirect the user to after they complete
-     * the device login flow on the external device.
-     * <p/>
-     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
-     *
-     * @param uri The URI to set.
-     */
-    public void setDeviceRedirectUri(Uri uri) {
-        this.deviceRedirectUri = uri;
-    }
-
-    /**
-     * Get the previously set uri that will be used to redirect the user to
-     * after they complete the device login flow on the external device.
-     * <p/>
-     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
-     *
-     * @return The current device redirect uri set.
-     */
-    public Uri getDeviceRedirectUri() {
-        return this.deviceRedirectUri;
-    }
-
-    @Override
-    protected LoginClickListener getNewLoginClickListener() {
-        return new DeviceLoginClickListener();
-    }
-
-    private class DeviceLoginClickListener extends LoginClickListener {
-        @Override
-        protected LoginManager getLoginManager() {
-            DeviceLoginManager manager = DeviceLoginManager.getInstance();
-            manager.setDefaultAudience(getDefaultAudience());
-            manager.setLoginBehavior(LoginBehavior.DEVICE_AUTH);
-            manager.setDeviceRedirectUri(getDeviceRedirectUri());
-            return manager;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java b/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
deleted file mode 100644
index 0ae9eb9a2..000000000
--- a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
+++ /dev/null
@@ -1,786 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login.widget;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.res.Resources;
-import android.content.res.TypedArray;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.net.Uri;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.View;
-import com.facebook.*;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.LoginAuthorizationType;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Utility.FetchedAppSettings;
-import com.facebook.login.DefaultAudience;
-import com.facebook.login.LoginBehavior;
-import com.facebook.login.LoginManager;
-import com.facebook.login.LoginResult;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * A Log In/Log Out button that maintains login state and logs in/out for the app.
- * <p/>
- * This control requires the app ID to be specified in the AndroidManifest.xml.
- */
-public class LoginButton extends FacebookButtonBase {
-
-    // ***
-    // Keep all the enum values in sync with attrs.xml
-    // ***
-
-    /**
-     * The display modes for the login button tool tip.
-     */
-    public enum ToolTipMode {
-        /**
-         * Default display mode. A server query will determine if the tool tip should be displayed
-         * and, if so, what the string shown to the user should be.
-         */
-        AUTOMATIC("automatic", 0),
-
-        /**
-         * Display the tool tip with a local string--regardless of what the server returns
-         */
-        DISPLAY_ALWAYS("display_always", 1),
-
-        /**
-         * Never display the tool tip--regardless of what the server says
-         */
-        NEVER_DISPLAY("never_display", 2);
-
-        public static ToolTipMode DEFAULT = AUTOMATIC;
-
-        public static ToolTipMode fromInt(int enumValue) {
-            for (ToolTipMode mode : values()) {
-                if (mode.getValue() == enumValue) {
-                    return mode;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        ToolTipMode(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        public int getValue() {
-            return intValue;
-        }
-    }
-
-    private static final String TAG = LoginButton.class.getName();
-    private boolean confirmLogout;
-    private String loginText;
-    private String logoutText;
-    private LoginButtonProperties properties = new LoginButtonProperties();
-    private String loginLogoutEventName = AnalyticsEvents.EVENT_LOGIN_VIEW_USAGE;
-    private boolean toolTipChecked;
-    private ToolTipPopup.Style toolTipStyle = ToolTipPopup.Style.BLUE;
-    private ToolTipMode toolTipMode;
-    private long toolTipDisplayTime = ToolTipPopup.DEFAULT_POPUP_DISPLAY_TIME;
-    private ToolTipPopup toolTipPopup;
-    private AccessTokenTracker accessTokenTracker;
-    private LoginManager loginManager;
-
-    static class LoginButtonProperties {
-        private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;
-        private List<String> permissions = Collections.<String>emptyList();
-        private LoginAuthorizationType authorizationType = null;
-        private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;
-
-        public void setDefaultAudience(DefaultAudience defaultAudience) {
-            this.defaultAudience = defaultAudience;
-        }
-
-        public DefaultAudience getDefaultAudience() {
-            return defaultAudience;
-        }
-
-        public void setReadPermissions(List<String> permissions) {
-
-            if (LoginAuthorizationType.PUBLISH.equals(authorizationType)) {
-                throw new UnsupportedOperationException("Cannot call setReadPermissions after " +
-                        "setPublishPermissions has been called.");
-            }
-            this.permissions = permissions;
-            authorizationType = LoginAuthorizationType.READ;
-        }
-
-        public void setPublishPermissions(List<String> permissions) {
-
-            if (LoginAuthorizationType.READ.equals(authorizationType)) {
-                throw new UnsupportedOperationException("Cannot call setPublishPermissions after " +
-                        "setReadPermissions has been called.");
-            }
-            if (Utility.isNullOrEmpty(permissions)) {
-                throw new IllegalArgumentException(
-                        "Permissions for publish actions cannot be null or empty.");
-            }
-            this.permissions = permissions;
-            authorizationType = LoginAuthorizationType.PUBLISH;
-        }
-
-        List<String> getPermissions() {
-            return permissions;
-        }
-
-        public void clearPermissions() {
-            permissions = null;
-            authorizationType = null;
-        }
-
-        public void setLoginBehavior(LoginBehavior loginBehavior) {
-            this.loginBehavior = loginBehavior;
-        }
-
-        public LoginBehavior getLoginBehavior() {
-            return loginBehavior;
-        }
-    }
-
-    /**
-     * Create the LoginButton by inflating from XML
-     *
-     * @see View#View(Context, AttributeSet)
-     */
-    public LoginButton(Context context) {
-        super(
-                context,
-                null,
-                0,
-                0,
-                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);
-    }
-
-    /**
-     * Create the LoginButton by inflating from XML
-     *
-     * @see View#View(Context, AttributeSet)
-     */
-    public LoginButton(Context context, AttributeSet attrs) {
-        super(
-                context,
-                attrs,
-                0,
-                0,
-                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);
-    }
-
-    /**
-     * Create the LoginButton by inflating from XML and applying a style.
-     *
-     * @see View#View(Context, AttributeSet, int)
-     */
-    public LoginButton(Context context, AttributeSet attrs, int defStyle) {
-        super(
-                context,
-                attrs,
-                defStyle,
-                0,
-                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);
-    }
-
-    /**
-     * Sets the default audience to use when the user logs in.
-     * This value is only useful when specifying publish permissions for the native
-     * login dialog.
-     *
-     * @param defaultAudience the default audience value to use
-     */
-    public void setDefaultAudience(DefaultAudience defaultAudience) {
-        properties.setDefaultAudience(defaultAudience);
-    }
-
-    /**
-     * Gets the default audience to use when the user logs in.
-     * This value is only useful when specifying publish permissions for the native
-     * login dialog.
-     *
-     * @return the default audience value to use
-     */
-    public DefaultAudience getDefaultAudience() {
-        return properties.getDefaultAudience();
-    }
-
-    /**
-     * Set the permissions to use when the user logs in. The permissions here
-     * can only be read permissions. If any publish permissions are included, the login
-     * attempt by the user will fail. The LoginButton can only be associated with either
-     * read permissions or publish permissions, but not both. Calling both
-     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
-     * will result in an exception being thrown unless clearPermissions is called in between.
-     * <p/>
-     * This method is only meaningful if called before the user logs in. If this is called
-     * after login, and the list of permissions passed in is not a subset
-     * of the permissions granted during the authorization, it will log an error.
-     * <p/>
-     * It's important to always pass in a consistent set of permissions to this method, or
-     * manage the setting of permissions outside of the LoginButton class altogether
-     * (by using the LoginManager explicitly).
-     *
-     * @param permissions the read permissions to use
-     * @throws UnsupportedOperationException if setPublishPermissions has been called
-     */
-    public void setReadPermissions(List<String> permissions) {
-        properties.setReadPermissions(permissions);
-    }
-
-    /**
-     * Set the permissions to use when the user logs in. The permissions here
-     * can only be read permissions. If any publish permissions are included, the login
-     * attempt by the user will fail. The LoginButton can only be associated with either
-     * read permissions or publish permissions, but not both. Calling both
-     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
-     * will result in an exception being thrown unless clearPermissions is called in between.
-     * <p/>
-     * This method is only meaningful if called before the user logs in. If this is called
-     * after login, and the list of permissions passed in is not a subset
-     * of the permissions granted during the authorization, it will log an error.
-     * <p/>
-     * It's important to always pass in a consistent set of permissions to this method, or
-     * manage the setting of permissions outside of the LoginButton class altogether
-     * (by using the LoginManager explicitly).
-     *
-     * @param permissions the read permissions to use
-     * @throws UnsupportedOperationException if setPublishPermissions has been called
-     */
-    public void setReadPermissions(String... permissions) {
-        properties.setReadPermissions(Arrays.asList(permissions));
-    }
-
-
-    /**
-     * Set the permissions to use when the user logs in. The permissions here
-     * should only be publish permissions. If any read permissions are included, the login
-     * attempt by the user may fail. The LoginButton can only be associated with either
-     * read permissions or publish permissions, but not both. Calling both
-     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
-     * will result in an exception being thrown unless clearPermissions is called in between.
-     * <p/>
-     * This method is only meaningful if called before the user logs in. If this is called
-     * after login, and the list of permissions passed in is not a subset
-     * of the permissions granted during the authorization, it will log an error.
-     * <p/>
-     * It's important to always pass in a consistent set of permissions to this method, or
-     * manage the setting of permissions outside of the LoginButton class altogether
-     * (by using the LoginManager explicitly).
-     *
-     * @param permissions the publish permissions to use
-     * @throws UnsupportedOperationException if setReadPermissions has been called
-     * @throws IllegalArgumentException      if permissions is null or empty
-     */
-    public void setPublishPermissions(List<String> permissions) {
-        properties.setPublishPermissions(permissions);
-    }
-
-    /**
-     * Set the permissions to use when the user logs in. The permissions here
-     * should only be publish permissions. If any read permissions are included, the login
-     * attempt by the user may fail. The LoginButton can only be associated with either
-     * read permissions or publish permissions, but not both. Calling both
-     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
-     * will result in an exception being thrown unless clearPermissions is called in between.
-     * <p/>
-     * This method is only meaningful if called before the user logs in. If this is called
-     * after login, and the list of permissions passed in is not a subset
-     * of the permissions granted during the authorization, it will log an error.
-     * <p/>
-     * It's important to always pass in a consistent set of permissions to this method, or
-     * manage the setting of permissions outside of the LoginButton class altogether
-     * (by using the LoginManager explicitly).
-     *
-     * @param permissions the publish permissions to use
-     * @throws UnsupportedOperationException if setReadPermissions has been called
-     * @throws IllegalArgumentException      if permissions is null or empty
-     */
-    public void setPublishPermissions(String... permissions) {
-        properties.setPublishPermissions(Arrays.asList(permissions));
-    }
-
-
-    /**
-     * Clears the permissions currently associated with this LoginButton.
-     */
-    public void clearPermissions() {
-        properties.clearPermissions();
-    }
-
-    /**
-     * Sets the login behavior during authorization. If null is specified, the default
-     * ({@link com.facebook.login.LoginBehavior LoginBehavior.NATIVE_WITH_FALLBACK}
-     * will be used.
-     *
-     * @param loginBehavior The {@link com.facebook.login.LoginBehavior LoginBehavior} that
-     *                      specifies what behaviors should be attempted during
-     *                      authorization.
-     */
-    public void setLoginBehavior(LoginBehavior loginBehavior) {
-        properties.setLoginBehavior(loginBehavior);
-    }
-
-    /**
-     * Gets the login behavior during authorization. If null is returned, the default
-     * ({@link com.facebook.login.LoginBehavior LoginBehavior.NATIVE_WITH_FALLBACK}
-     * will be used.
-     *
-     * @return loginBehavior The {@link com.facebook.login.LoginBehavior LoginBehavior} that
-     * specifies what behaviors should be attempted during
-     * authorization.
-     */
-    public LoginBehavior getLoginBehavior() {
-        return properties.getLoginBehavior();
-    }
-
-    /**
-     * Sets the style (background) of the Tool Tip popup. Currently a blue style and a black
-     * style are supported. Blue is default
-     *
-     * @param toolTipStyle The style of the tool tip popup.
-     */
-    public void setToolTipStyle(ToolTipPopup.Style toolTipStyle) {
-        this.toolTipStyle = toolTipStyle;
-    }
-
-    /**
-     * Sets the mode of the Tool Tip popup. Currently supported modes are default (normal
-     * behavior), always_on (popup remains up until forcibly dismissed), and always_off (popup
-     * doesn't show)
-     *
-     * @param toolTipMode The new mode for the tool tip
-     */
-    public void setToolTipMode(ToolTipMode toolTipMode) {
-        this.toolTipMode = toolTipMode;
-    }
-
-    /**
-     * Return the current {@link ToolTipMode} for this LoginButton
-     *
-     * @return The {@link ToolTipMode}
-     */
-    public ToolTipMode getToolTipMode() {
-        return toolTipMode;
-    }
-
-    /**
-     * Sets the amount of time (in milliseconds) that the tool tip will be shown to the user. The
-     * default is {@value com.facebook.login.widget.ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}.
-     * Any value that is less than or equal to zero will cause the tool tip to be displayed
-     * indefinitely.
-     *
-     * @param displayTime The amount of time (in milliseconds) that the tool tip will be displayed
-     *                    to the user
-     */
-    public void setToolTipDisplayTime(long displayTime) {
-        this.toolTipDisplayTime = displayTime;
-    }
-
-    /**
-     * Gets the current amount of time (in ms) that the tool tip will be displayed to the user.
-     *
-     * @return The current amount of time (in ms) that the tool tip will be displayed.
-     */
-    public long getToolTipDisplayTime() {
-        return toolTipDisplayTime;
-    }
-
-    /**
-     * Dismisses the Tooltip if it is currently visible
-     */
-    public void dismissToolTip() {
-        if (toolTipPopup != null) {
-            toolTipPopup.dismiss();
-            toolTipPopup = null;
-        }
-    }
-
-    /**
-     * Registers a login callback to the given callback manager.
-     *
-     * @param callbackManager The callback manager that will encapsulate the callback.
-     * @param callback        The login callback that will be called on login completion.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<LoginResult> callback) {
-        getLoginManager().registerCallback(callbackManager, callback);
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        if (accessTokenTracker != null && !accessTokenTracker.isTracking()) {
-            accessTokenTracker.startTracking();
-            setButtonText();
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        if (!toolTipChecked && !isInEditMode()) {
-            toolTipChecked = true;
-            checkToolTipSettings();
-        }
-    }
-
-    private void showToolTipPerSettings(FetchedAppSettings settings) {
-        if (settings != null && settings.getNuxEnabled() && getVisibility() == View.VISIBLE) {
-            String toolTipString = settings.getNuxContent();
-            displayToolTip(toolTipString);
-        }
-    }
-
-    private void displayToolTip(String toolTipString) {
-        toolTipPopup = new ToolTipPopup(toolTipString, this);
-        toolTipPopup.setStyle(toolTipStyle);
-        toolTipPopup.setNuxDisplayTime(toolTipDisplayTime);
-        toolTipPopup.show();
-    }
-
-    private void checkToolTipSettings() {
-        switch (toolTipMode) {
-            case AUTOMATIC:
-                // kick off an async request
-                final String appId = Utility.getMetadataApplicationId(getContext());
-                FacebookSdk.getExecutor().execute(new Runnable() {
-                    @Override
-                    public void run() {
-                        final FetchedAppSettings settings = Utility.queryAppSettings(appId, false);
-                        getActivity().runOnUiThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                showToolTipPerSettings(settings);
-                            }
-                        });
-                    }
-                });
-                break;
-            case DISPLAY_ALWAYS:
-                String toolTipString = getResources().getString(
-                        R.string.com_facebook_tooltip_default);
-                displayToolTip(toolTipString);
-                break;
-            case NEVER_DISPLAY:
-                break;
-        }
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-        setButtonText();
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        if (accessTokenTracker != null) {
-            accessTokenTracker.stopTracking();
-        }
-        dismissToolTip();
-    }
-
-    @Override
-    protected void onVisibilityChanged(View changedView, int visibility) {
-        super.onVisibilityChanged(changedView, visibility);
-        // If the visibility is not VISIBLE, we want to dismiss the tooltip if it is there
-        if (visibility != VISIBLE) {
-            dismissToolTip();
-        }
-    }
-
-    // For testing purposes only
-    List<String> getPermissions() {
-        return properties.getPermissions();
-    }
-
-    void setProperties(LoginButtonProperties properties) {
-        this.properties = properties;
-    }
-
-    @Override
-    protected void configureButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        setInternalOnClickListener(getNewLoginClickListener());
-
-        parseLoginButtonAttributes(context, attrs, defStyleAttr, defStyleRes);
-
-        if (isInEditMode()) {
-            // cannot use a drawable in edit mode, so setting the background color instead
-            // of a background resource.
-            setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));
-            // hardcoding in edit mode as getResources().getString() doesn't seem to work in
-            // IntelliJ
-            loginText = "Log in with Facebook";
-        } else {
-            accessTokenTracker = new AccessTokenTracker() {
-                @Override
-                protected void onCurrentAccessTokenChanged(
-                        AccessToken oldAccessToken,
-                        AccessToken currentAccessToken) {
-                    setButtonText();
-                }
-            };
-        }
-
-        setButtonText();
-    }
-
-    protected LoginClickListener getNewLoginClickListener() {
-        return new LoginClickListener();
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_loginview_default_style;
-    }
-
-    private void parseLoginButtonAttributes(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        this.toolTipMode = ToolTipMode.DEFAULT;
-        final TypedArray a = context.getTheme().obtainStyledAttributes(
-                attrs,
-                R.styleable.com_facebook_login_view,
-                defStyleAttr,
-                defStyleRes);
-        try {
-            confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_com_facebook_confirm_logout, true);
-            loginText = a.getString(R.styleable.com_facebook_login_view_com_facebook_login_text);
-            logoutText = a.getString(R.styleable.com_facebook_login_view_com_facebook_logout_text);
-            toolTipMode = ToolTipMode.fromInt(a.getInt(
-                    R.styleable.com_facebook_login_view_com_facebook_tooltip_mode,
-                    ToolTipMode.DEFAULT.getValue()));
-        } finally {
-            a.recycle();
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        Paint.FontMetrics fontMetrics = getPaint().getFontMetrics();
-        int height = (getCompoundPaddingTop() +
-                (int)Math.ceil(Math.abs(fontMetrics.top) + Math.abs(fontMetrics.bottom)) +
-                getCompoundPaddingBottom());
-
-        final Resources resources = getResources();
-        String text = loginText;
-        int logInWidth;
-        int width;
-        if (text == null) {
-            text = resources.getString(R.string.com_facebook_loginview_log_in_button_long);
-            logInWidth = measureButtonWidth(text);
-            width = resolveSize(logInWidth, widthMeasureSpec);
-            if (width < logInWidth) {
-                text = resources.getString(R.string.com_facebook_loginview_log_in_button);
-            }
-        }
-        logInWidth = measureButtonWidth(text);
-
-        text = logoutText;
-        if (text == null) {
-            text = resources.getString(R.string.com_facebook_loginview_log_out_button);
-        }
-        int logOutWidth = measureButtonWidth(text);
-
-        width = resolveSize(Math.max(logInWidth, logOutWidth), widthMeasureSpec);
-        setMeasuredDimension(width, height);
-    }
-
-    private int measureButtonWidth(final String text) {
-        int textWidth = measureTextWidth(text);
-        int width = (getCompoundPaddingLeft() +
-                getCompoundDrawablePadding() +
-                textWidth +
-                getCompoundPaddingRight());
-        return width;
-    }
-
-    private void setButtonText() {
-        final Resources resources = getResources();
-        if (!isInEditMode() && AccessToken.getCurrentAccessToken() != null) {
-            setText((logoutText != null) ?
-                    logoutText :
-                    resources.getString(R.string.com_facebook_loginview_log_out_button));
-        } else {
-            if (loginText != null) {
-                setText(loginText);
-            } else {
-                String text = resources.getString(
-                        R.string.com_facebook_loginview_log_in_button_long);
-                int width = getWidth();
-                // if the width is 0, we are going to measure size, so use the long text
-                if (width != 0) {
-                    // we have a specific width, check if the long text fits
-                    int measuredWidth = measureButtonWidth(text);
-                    if (measuredWidth > width) {
-                        // it doesn't fit, use the shorter text
-                        text = resources.getString(R.string.com_facebook_loginview_log_in_button);
-                    }
-                }
-                setText(text);
-            }
-        }
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode();
-    }
-
-    LoginManager getLoginManager() {
-        if (loginManager == null) {
-            loginManager = LoginManager.getInstance();
-        }
-        return loginManager;
-    }
-
-    void setLoginManager(LoginManager loginManager) {
-        this.loginManager = loginManager;
-    }
-
-    protected class LoginClickListener implements OnClickListener {
-        @Override
-        public void onClick(View v) {
-            callExternalOnClickListener(v);
-
-            AccessToken accessToken = AccessToken.getCurrentAccessToken();
-            if (accessToken != null) {
-                // Log out
-                performLogout(getContext());
-            } else {
-                performLogin();
-            }
-
-            AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
-
-            Bundle parameters = new Bundle();
-            parameters.putInt("logging_in", (accessToken != null) ? 0 : 1);
-
-            logger.logSdkEvent(loginLogoutEventName, null, parameters);
-        }
-
-        protected void performLogin() {
-            final LoginManager loginManager = getLoginManager();
-            if (LoginAuthorizationType.PUBLISH.equals(properties.authorizationType)) {
-                if (LoginButton.this.getFragment() != null) {
-                    loginManager.logInWithPublishPermissions(
-                            LoginButton.this.getFragment(),
-                            properties.permissions);
-                } else if (LoginButton.this.getNativeFragment() != null) {
-                    loginManager.logInWithPublishPermissions(
-                            LoginButton.this.getNativeFragment(),
-                            properties.permissions);
-                } else {
-                    loginManager.logInWithPublishPermissions(
-                            LoginButton.this.getActivity(),
-                            properties.permissions);
-                }
-            } else {
-                if (LoginButton.this.getFragment() != null) {
-                    loginManager.logInWithReadPermissions(
-                            LoginButton.this.getFragment(),
-                            properties.permissions);
-                } else if (LoginButton.this.getNativeFragment() != null) {
-                    loginManager.logInWithReadPermissions(
-                            LoginButton.this.getNativeFragment(),
-                            properties.permissions);
-                } else {
-                    loginManager.logInWithReadPermissions(
-                            LoginButton.this.getActivity(),
-                            properties.permissions);
-                }
-            }
-        }
-
-        protected void performLogout(Context context) {
-            final LoginManager loginManager = getLoginManager();
-            if (confirmLogout) {
-                // Create a confirmation dialog
-                String logout = getResources().getString(
-                        R.string.com_facebook_loginview_log_out_action);
-                String cancel = getResources().getString(
-                        R.string.com_facebook_loginview_cancel_action);
-                String message;
-                Profile profile = Profile.getCurrentProfile();
-                if (profile != null && profile.getName() != null) {
-                    message = String.format(
-                            getResources().getString(
-                                    R.string.com_facebook_loginview_logged_in_as),
-                            profile.getName());
-                } else {
-                    message = getResources().getString(
-                            R.string.com_facebook_loginview_logged_in_using_facebook);
-                }
-                AlertDialog.Builder builder = new AlertDialog.Builder(context);
-                builder.setMessage(message)
-                        .setCancelable(true)
-                        .setPositiveButton(logout, new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int which) {
-                                loginManager.logOut();
-                            }
-                        })
-                        .setNegativeButton(cancel, null);
-                builder.create().show();
-            } else {
-                loginManager.logOut();
-            }
-        }
-
-        protected LoginManager getLoginManager() {
-            LoginManager manager = LoginManager.getInstance();
-            manager.setDefaultAudience(getDefaultAudience());
-            manager.setLoginBehavior(getLoginBehavior());
-            return manager;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/widget/ProfilePictureView.java b/facebook/src/main/java/com/facebook/login/widget/ProfilePictureView.java
deleted file mode 100644
index b92c39107..000000000
--- a/facebook/src/main/java/com/facebook/login/widget/ProfilePictureView.java
+++ /dev/null
@@ -1,545 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login.widget;
-
-import android.content.Context;
-import android.content.res.TypedArray;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.os.Bundle;
-import android.os.Parcelable;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import com.facebook.FacebookException;
-import com.facebook.LoggingBehavior;
-import com.facebook.R;
-import com.facebook.internal.*;
-
-/**
- * View that displays the profile photo of a supplied profile ID, while conforming
- * to user specified dimensions.
- */
-public class ProfilePictureView extends FrameLayout {
-
-    /**
-     * Callback interface that will be called when a network or other error is encountered
-     * while retrieving profile pictures.
-     */
-    public interface OnErrorListener {
-        /**
-         * Called when a network or other error is encountered.
-         * @param error     a FacebookException representing the error that was encountered.
-         */
-        void onError(FacebookException error);
-    }
-
-    /**
-     * Tag used when logging calls are made by ProfilePictureView
-     */
-    public static final String TAG = ProfilePictureView.class.getSimpleName();
-
-    /**
-     * Indicates that the specific size of the View will be set via layout params.
-     * ProfilePictureView will default to NORMAL X NORMAL, if the layout params set on
-     * this instance do not have a fixed size.
-     * Used in calls to setPresetSize() and getPresetSize().
-     * Corresponds with the preset_size Xml attribute that can be set on ProfilePictureView.
-     */
-    public static final int CUSTOM = -1;
-
-    /**
-     * Indicates that the profile image should fit in a SMALL X SMALL space, regardless
-     * of whether the cropped or un-cropped version is chosen.
-     * Used in calls to setPresetSize() and getPresetSize().
-     * Corresponds with the preset_size Xml attribute that can be set on ProfilePictureView.
-     */
-    public static final int SMALL = -2;
-
-    /**
-     * Indicates that the profile image should fit in a NORMAL X NORMAL space, regardless
-     * of whether the cropped or un-cropped version is chosen.
-     * Used in calls to setPresetSize() and getPresetSize().
-     * Corresponds with the preset_size Xml attribute that can be set on ProfilePictureView.
-     */
-    public static final int NORMAL = -3;
-
-    /**
-     * Indicates that the profile image should fit in a LARGE X LARGE space, regardless
-     * of whether the cropped or un-cropped version is chosen.
-     * Used in calls to setPresetSize() and getPresetSize().
-     * Corresponds with the preset_size Xml attribute that can be set on ProfilePictureView.
-     */
-    public static final int LARGE = -4;
-
-    private static final int MIN_SIZE = 1;
-    private static final boolean IS_CROPPED_DEFAULT_VALUE = true;
-    private static final String SUPER_STATE_KEY = "ProfilePictureView_superState";
-    private static final String PROFILE_ID_KEY = "ProfilePictureView_profileId";
-    private static final String PRESET_SIZE_KEY = "ProfilePictureView_presetSize";
-    private static final String IS_CROPPED_KEY = "ProfilePictureView_isCropped";
-    private static final String BITMAP_KEY = "ProfilePictureView_bitmap";
-    private static final String BITMAP_WIDTH_KEY = "ProfilePictureView_width";
-    private static final String BITMAP_HEIGHT_KEY = "ProfilePictureView_height";
-    private static final String PENDING_REFRESH_KEY = "ProfilePictureView_refresh";
-
-    private String profileId;
-    private int queryHeight = ImageRequest.UNSPECIFIED_DIMENSION;
-    private int queryWidth = ImageRequest.UNSPECIFIED_DIMENSION;
-    private boolean isCropped = IS_CROPPED_DEFAULT_VALUE;
-    private Bitmap imageContents;
-    private ImageView image;
-    private int presetSizeType = CUSTOM;
-    private ImageRequest lastRequest;
-    private OnErrorListener onErrorListener;
-    private Bitmap customizedDefaultProfilePicture = null;
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     */
-    public ProfilePictureView(Context context) {
-        super(context);
-        initialize(context);
-    }
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     * @param attrs   AttributeSet for this View.
-     *                The attribute 'preset_size' is processed here
-     */
-    public ProfilePictureView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        initialize(context);
-        parseAttributes(attrs);
-    }
-
-    /**
-     * Constructor
-     *
-     * @param context  Context for this View
-     * @param attrs    AttributeSet for this View.
-     *                 The attribute 'preset_size' is processed here
-     * @param defStyle Default style for this View
-     */
-    public ProfilePictureView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        initialize(context);
-        parseAttributes(attrs);
-    }
-
-    /**
-     * Gets the current preset size type
-     *
-     * @return The current preset size type, if set; CUSTOM if not
-     */
-    public final int getPresetSize() {
-        return presetSizeType;
-    }
-
-    /**
-     * Apply a preset size to this profile photo
-     *
-     * @param sizeType The size type to apply: SMALL, NORMAL or LARGE
-     */
-    public final void setPresetSize(int sizeType) {
-        switch (sizeType) {
-            case SMALL:
-            case NORMAL:
-            case LARGE:
-            case CUSTOM:
-                this.presetSizeType = sizeType;
-                break;
-
-            default:
-                throw new IllegalArgumentException("Must use a predefined preset size");
-        }
-
-        requestLayout();
-    }
-
-    /**
-     * Indicates whether the cropped version of the profile photo has been chosen
-     *
-     * @return True if the cropped version is chosen, false if not.
-     */
-    public final boolean isCropped() {
-        return isCropped;
-    }
-
-    /**
-     * Sets the profile photo to be the cropped version, or the original version
-     *
-     * @param showCroppedVersion True to select the cropped version
-     *                           False to select the standard version
-     */
-    public final void setCropped(boolean showCroppedVersion) {
-        isCropped = showCroppedVersion;
-        // No need to force the refresh since we will catch the change in required dimensions
-        refreshImage(false);
-    }
-
-    /**
-     * Returns the profile Id for the current profile photo
-     *
-     * @return The profile Id
-     */
-    public final String getProfileId() {
-        return profileId;
-    }
-
-    /**
-     * Sets the profile Id for this profile photo
-     *
-     * @param profileId The profileId
-     *               NULL/Empty String will show the blank profile photo
-     */
-    public final void setProfileId(String profileId) {
-        boolean force = false;
-        if (Utility.isNullOrEmpty(this.profileId) || !this.profileId.equalsIgnoreCase(profileId)) {
-            // Clear out the old profilePicture before requesting for the new one.
-            setBlankProfilePicture();
-            force = true;
-        }
-
-        this.profileId = profileId;
-        refreshImage(force);
-    }
-
-    /**
-     * Returns the current OnErrorListener for this instance of ProfilePictureView
-     *
-     * @return The OnErrorListener
-     */
-    public final OnErrorListener getOnErrorListener() {
-        return onErrorListener;
-    }
-
-    /**
-     * Sets an OnErrorListener for this instance of ProfilePictureView to call into when
-     * certain errors occur.
-     *
-     * @param onErrorListener The Listener object to set
-     */
-    public final void setOnErrorListener(OnErrorListener onErrorListener) {
-      this.onErrorListener = onErrorListener;
-    }
-
-    /**
-     * The ProfilePictureView will display the provided image while the specified
-     * profile is being loaded, or if the specified profile is not available.
-     *
-     * @param inputBitmap The bitmap to render until the actual profile is loaded.
-     */
-    public final void setDefaultProfilePicture(Bitmap inputBitmap) {
-        customizedDefaultProfilePicture = inputBitmap;
-    }
-
-    /**
-     * Overriding onMeasure to handle the case where WRAP_CONTENT might be
-     * specified in the layout. Since we don't know the dimensions of the profile
-     * photo, we need to handle this case specifically.
-     * <p/>
-     * The approach is to default to a NORMAL sized amount of space in the case that
-     * a preset size is not specified. This logic is applied to both width and height
-     */
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        ViewGroup.LayoutParams params = getLayoutParams();
-        boolean customMeasure = false;
-        int newHeight = MeasureSpec.getSize(heightMeasureSpec);
-        int newWidth = MeasureSpec.getSize(widthMeasureSpec);
-        if (MeasureSpec.getMode(heightMeasureSpec) != MeasureSpec.EXACTLY &&
-                params.height == ViewGroup.LayoutParams.WRAP_CONTENT) {
-            newHeight = getPresetSizeInPixels(true); // Default to a preset size
-            heightMeasureSpec = MeasureSpec.makeMeasureSpec(newHeight, MeasureSpec.EXACTLY);
-            customMeasure = true;
-        }
-
-        if (MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.EXACTLY &&
-                params.width == ViewGroup.LayoutParams.WRAP_CONTENT) {
-            newWidth = getPresetSizeInPixels(true); // Default to a preset size
-            widthMeasureSpec = MeasureSpec.makeMeasureSpec(newWidth, MeasureSpec.EXACTLY);
-            customMeasure = true;
-        }
-
-        if (customMeasure) {
-            // Since we are providing custom dimensions, we need to handle the measure
-            // phase from here
-            setMeasuredDimension(newWidth, newHeight);
-            measureChildren(widthMeasureSpec, heightMeasureSpec);
-        } else {
-            // Rely on FrameLayout to do the right thing
-            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-        }
-    }
-
-    /**
-     * In addition to calling super.Layout(), we also attempt to get a new image that
-     * is properly sized for the layout dimensions
-     */
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        // See if the image needs redrawing
-        refreshImage(false);
-    }
-
-    /**
-     * Some of the current state is returned as a Bundle to allow quick restoration
-     * of the ProfilePictureView object in scenarios like orientation changes.
-     * @return a Parcelable containing the current state
-     */
-    @Override
-    protected Parcelable onSaveInstanceState() {
-        Parcelable superState = super.onSaveInstanceState();
-        Bundle instanceState = new Bundle();
-        instanceState.putParcelable(SUPER_STATE_KEY, superState);
-        instanceState.putString(PROFILE_ID_KEY, profileId);
-        instanceState.putInt(PRESET_SIZE_KEY, presetSizeType);
-        instanceState.putBoolean(IS_CROPPED_KEY, isCropped);
-        instanceState.putParcelable(BITMAP_KEY, imageContents);
-        instanceState.putInt(BITMAP_WIDTH_KEY, queryWidth);
-        instanceState.putInt(BITMAP_HEIGHT_KEY, queryHeight);
-        instanceState.putBoolean(PENDING_REFRESH_KEY, lastRequest != null);
-
-        return instanceState;
-    }
-
-    /**
-     * If the passed in state is a Bundle, an attempt is made to restore from it.
-     * @param state a Parcelable containing the current state
-     */
-    @Override
-    protected void onRestoreInstanceState(Parcelable state) {
-        if (state.getClass() != Bundle.class) {
-            super.onRestoreInstanceState(state);
-        } else {
-            Bundle instanceState = (Bundle)state;
-            super.onRestoreInstanceState(instanceState.getParcelable(SUPER_STATE_KEY));
-
-            profileId = instanceState.getString(PROFILE_ID_KEY);
-            presetSizeType = instanceState.getInt(PRESET_SIZE_KEY);
-            isCropped = instanceState.getBoolean(IS_CROPPED_KEY);
-            queryWidth = instanceState.getInt(BITMAP_WIDTH_KEY);
-            queryHeight = instanceState.getInt(BITMAP_HEIGHT_KEY);
-
-            setImageBitmap((Bitmap)instanceState.getParcelable(BITMAP_KEY));
-
-            if (instanceState.getBoolean(PENDING_REFRESH_KEY)) {
-                refreshImage(true);
-            }
-        }
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-
-        // Null out lastRequest. This way, when the response is returned, we can ascertain
-        // that the view is detached and hence should not attempt to update its contents.
-        lastRequest = null;
-    }
-
-    private void initialize(Context context) {
-        // We only want our ImageView in here. Nothing else is permitted
-        removeAllViews();
-
-        image = new ImageView(context);
-
-        LayoutParams imageLayout = new LayoutParams(
-                LayoutParams.MATCH_PARENT,
-                LayoutParams.MATCH_PARENT);
-
-        image.setLayoutParams(imageLayout);
-
-        // We want to prevent up-scaling the image, but still have it fit within
-        // the layout bounds as best as possible.
-        image.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        addView(image);
-    }
-
-    private void parseAttributes(AttributeSet attrs) {
-        TypedArray a = getContext().obtainStyledAttributes(
-                attrs, R.styleable.com_facebook_profile_picture_view);
-        setPresetSize(a.getInt(R.styleable.com_facebook_profile_picture_view_com_facebook_preset_size, CUSTOM));
-        isCropped = a.getBoolean(
-                R.styleable.com_facebook_profile_picture_view_com_facebook_is_cropped, IS_CROPPED_DEFAULT_VALUE);
-        a.recycle();
-    }
-
-    private void refreshImage(boolean force) {
-        boolean changed = updateImageQueryParameters();
-        // Note: do not use Utility.isNullOrEmpty here as this will cause the Eclipse
-        // Graphical Layout editor to fail in some cases
-        if (profileId == null || profileId.length() == 0 ||
-                ((queryWidth == ImageRequest.UNSPECIFIED_DIMENSION) &&
-                        (queryHeight == ImageRequest.UNSPECIFIED_DIMENSION))) {
-            setBlankProfilePicture();
-        } else if (changed || force) {
-            sendImageRequest(true);
-        }
-    }
-
-    private void setBlankProfilePicture() {
-        // If we have a pending image download request cancel it
-        if (lastRequest != null) {
-            ImageDownloader.cancelRequest(lastRequest);
-        }
-
-        if (customizedDefaultProfilePicture == null) {
-            int blankImageResource = isCropped() ?
-                    R.drawable.com_facebook_profile_picture_blank_square :
-                    R.drawable.com_facebook_profile_picture_blank_portrait;
-            setImageBitmap(BitmapFactory.decodeResource(getResources(), blankImageResource));
-        } else {
-            // Update profile image dimensions.
-            updateImageQueryParameters();
-            // Resize inputBitmap to new dimensions of queryWidth and queryHeight.
-            Bitmap scaledBitmap = Bitmap.createScaledBitmap(
-                    customizedDefaultProfilePicture, queryWidth, queryHeight, false);
-            setImageBitmap(scaledBitmap);
-        }
-    }
-
-    private void setImageBitmap(Bitmap imageBitmap) {
-        if (image != null && imageBitmap != null) {
-            imageContents = imageBitmap; // Hold for save-restore cycles
-            image.setImageBitmap(imageBitmap);
-        }
-    }
-
-    private void sendImageRequest(boolean allowCachedResponse) {
-        ImageRequest.Builder requestBuilder = new ImageRequest.Builder(
-                getContext(),
-                ImageRequest.getProfilePictureUri(profileId, queryWidth, queryHeight));
-
-        ImageRequest request = requestBuilder.setAllowCachedRedirects(allowCachedResponse)
-                .setCallerTag(this)
-                .setCallback(
-                new ImageRequest.Callback() {
-                    @Override
-                    public void onCompleted(ImageResponse response) {
-                        processResponse(response);
-                    }
-                })
-                .build();
-
-        // Make sure to cancel the old request before sending the new one to prevent
-        // accidental cancellation of the new request. This could happen if the URL and
-        // caller tag stayed the same.
-        if (lastRequest != null) {
-            ImageDownloader.cancelRequest(lastRequest);
-        }
-        lastRequest = request;
-
-        ImageDownloader.downloadAsync(request);
-    }
-
-    private void processResponse(ImageResponse response) {
-        // First check if the response is for the right request. We may have:
-        // 1. Sent a new request, thus super-ceding this one.
-        // 2. Detached this view, in which case the response should be discarded.
-        if (response.getRequest() == lastRequest) {
-            lastRequest = null;
-            Bitmap responseImage = response.getBitmap();
-            Exception error = response.getError();
-            if (error != null) {
-                OnErrorListener listener = onErrorListener;
-                if (listener != null) {
-                    listener.onError(new FacebookException(
-                            "Error in downloading profile picture for profileId: " +
-                                    getProfileId(), error));
-                } else {
-                    Logger.log(LoggingBehavior.REQUESTS, Log.ERROR, TAG, error.toString());
-                }
-            } else if (responseImage != null) {
-                setImageBitmap(responseImage);
-
-                if (response.isCachedRedirect()) {
-                    sendImageRequest(false);
-                }
-            }
-        }
-    }
-
-    private boolean updateImageQueryParameters() {
-        int newHeightPx = getHeight();
-        int newWidthPx = getWidth();
-        if (newWidthPx < MIN_SIZE || newHeightPx < MIN_SIZE) {
-            // Not enough space laid out for this View yet. Or something else is awry.
-            return false;
-        }
-
-        int presetSize = getPresetSizeInPixels(false);
-        if (presetSize != ImageRequest.UNSPECIFIED_DIMENSION) {
-            newWidthPx = presetSize;
-            newHeightPx = presetSize;
-        }
-
-        // The cropped version is square
-        // If full version is desired, then only one dimension is required.
-        if (newWidthPx <= newHeightPx) {
-            newHeightPx = isCropped() ? newWidthPx : ImageRequest.UNSPECIFIED_DIMENSION;
-        } else {
-            newWidthPx = isCropped() ? newHeightPx : ImageRequest.UNSPECIFIED_DIMENSION;
-        }
-
-        boolean changed = (newWidthPx != queryWidth) || (newHeightPx != queryHeight);
-
-        queryWidth = newWidthPx;
-        queryHeight = newHeightPx;
-
-        return changed;
-    }
-
-    private int getPresetSizeInPixels(boolean forcePreset) {
-        int dimensionId;
-        switch (presetSizeType) {
-            case SMALL:
-                dimensionId = R.dimen.com_facebook_profilepictureview_preset_size_small;
-                break;
-            case NORMAL:
-                dimensionId = R.dimen.com_facebook_profilepictureview_preset_size_normal;
-                break;
-            case LARGE:
-                dimensionId = R.dimen.com_facebook_profilepictureview_preset_size_large;
-                break;
-            case CUSTOM:
-                if (!forcePreset) {
-                    return ImageRequest.UNSPECIFIED_DIMENSION;
-                } else {
-                    dimensionId = R.dimen.com_facebook_profilepictureview_preset_size_normal;
-                    break;
-                }
-            default:
-                return ImageRequest.UNSPECIFIED_DIMENSION;
-        }
-
-        return getResources().getDimensionPixelSize(dimensionId);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/login/widget/ToolTipPopup.java b/facebook/src/main/java/com/facebook/login/widget/ToolTipPopup.java
deleted file mode 100644
index 017960820..000000000
--- a/facebook/src/main/java/com/facebook/login/widget/ToolTipPopup.java
+++ /dev/null
@@ -1,240 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login.widget;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewTreeObserver;
-import android.view.Window;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.PopupWindow;
-import android.widget.TextView;
-import com.facebook.R;
-
-import java.lang.ref.WeakReference;
-
-/**
- * This displays a popup tool tip for a specified view.
- */
-public class ToolTipPopup {
-
-    /**
-     * The values here describe the styles available for the tool tip class.
-     */
-    public static enum Style {
-        /**
-         * The tool tip will be shown with a blue style; including a blue background and blue
-         * arrows.
-         */
-        BLUE,
-        
-        /**
-         * The tool tip will be shown with a black style; including a black background and black
-         * arrows.
-         */
-        BLACK
-    }
-    
-    /**
-     * The default time that the tool tip will be displayed
-     */
-    public static final long DEFAULT_POPUP_DISPLAY_TIME = 6000;
-    
-    private final String mText;
-    private final WeakReference<View> mAnchorViewRef;
-    private final Context mContext;
-    private PopupContentView mPopupContent;
-    private PopupWindow mPopupWindow;
-    private Style mStyle = Style.BLUE;
-    private long mNuxDisplayTime = DEFAULT_POPUP_DISPLAY_TIME;
-    
-    private final ViewTreeObserver.OnScrollChangedListener mScrollListener = 
-            new ViewTreeObserver.OnScrollChangedListener() {
-                @Override
-                public void onScrollChanged() {
-                    if (mAnchorViewRef.get() != null && 
-                            mPopupWindow != null && 
-                            mPopupWindow.isShowing()) {
-                        if (mPopupWindow.isAboveAnchor()) {
-                            mPopupContent.showBottomArrow();
-                        } else {
-                            mPopupContent.showTopArrow();
-                        }
-                    }
-                }
-            };
-    
-    /**
-     * Create a new ToolTipPopup
-     * @param text The text to be displayed in the tool tip
-     * @param anchor The view to anchor this tool tip to.
-     */
-    public ToolTipPopup(String text, View anchor) {
-        mText = text;
-        mAnchorViewRef = new WeakReference<View>(anchor);
-        mContext = anchor.getContext();
-    }
-    
-    /**
-     * Sets the {@link Style} of this tool tip.
-     * @param mStyle the style for the tool tip
-     */
-    public void setStyle(Style mStyle) {
-        this.mStyle = mStyle;
-    }
-    
-    /**
-     * Display this tool tip to the user
-     */
-    public void show() {
-        if (mAnchorViewRef.get() != null) {
-            mPopupContent = new PopupContentView(mContext);
-            TextView body = (TextView) mPopupContent.findViewById(
-                    R.id.com_facebook_tooltip_bubble_view_text_body);
-            body.setText(mText);
-            if (mStyle == Style.BLUE) {
-                mPopupContent.bodyFrame.setBackgroundResource(
-                        R.drawable.com_facebook_tooltip_blue_background);
-                mPopupContent.bottomArrow.setImageResource(
-                        R.drawable.com_facebook_tooltip_blue_bottomnub);
-                mPopupContent.topArrow.setImageResource(
-                        R.drawable.com_facebook_tooltip_blue_topnub);
-                mPopupContent.xOut.setImageResource(R.drawable.com_facebook_tooltip_blue_xout);
-            } else {
-                mPopupContent.bodyFrame.setBackgroundResource(
-                        R.drawable.com_facebook_tooltip_black_background);
-                mPopupContent.bottomArrow.setImageResource(
-                        R.drawable.com_facebook_tooltip_black_bottomnub);
-                mPopupContent.topArrow.setImageResource(
-                        R.drawable.com_facebook_tooltip_black_topnub);
-                mPopupContent.xOut.setImageResource(R.drawable.com_facebook_tooltip_black_xout);
-            }
-            
-            final Window window = ((Activity) mContext).getWindow();
-            final View decorView = window.getDecorView();
-            final int decorWidth = decorView.getWidth();
-            final int decorHeight = decorView.getHeight();
-            registerObserver();
-            mPopupContent.measure(
-                    View.MeasureSpec.makeMeasureSpec(decorWidth, View.MeasureSpec.AT_MOST), 
-                    View.MeasureSpec.makeMeasureSpec(decorHeight, View.MeasureSpec.AT_MOST));
-            mPopupWindow = new PopupWindow(
-                    mPopupContent, 
-                    mPopupContent.getMeasuredWidth(),
-                    mPopupContent.getMeasuredHeight());
-            mPopupWindow.showAsDropDown(mAnchorViewRef.get());
-            updateArrows();
-            if (mNuxDisplayTime > 0) {
-                mPopupContent.postDelayed(new Runnable() {
-                    @Override
-                    public void run() {
-                        dismiss();
-                    }
-                }, mNuxDisplayTime);
-            }
-            mPopupWindow.setTouchable(true);
-            mPopupContent.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    dismiss();
-                }
-            });
-        }
-    }
-    
-    /**
-     * Set the time (in milliseconds) the tool tip will be displayed. Any number less than or equal
-     * to 0 will cause the tool tip to be displayed indefinitely
-     * @param displayTime The amount of time (in milliseconds) to display the tool tip
-     */
-    public void setNuxDisplayTime(long displayTime) {
-        this.mNuxDisplayTime = displayTime;
-    }
-    
-    private void updateArrows() {
-        if (mPopupWindow != null && mPopupWindow.isShowing()) {
-            if (mPopupWindow.isAboveAnchor()) {
-                mPopupContent.showBottomArrow();
-            } else {
-                mPopupContent.showTopArrow();
-            }
-        }
-    }
-    
-    /**
-     * Dismiss the tool tip
-     */
-    public void dismiss() {
-        unregisterObserver();
-        if (mPopupWindow != null) {
-            mPopupWindow.dismiss();
-        }
-    }
-    
-    private void registerObserver() {
-        unregisterObserver();
-        if (mAnchorViewRef.get() != null) {
-            mAnchorViewRef.get().getViewTreeObserver().addOnScrollChangedListener(mScrollListener);
-        }
-    }
-    
-    private void unregisterObserver() {
-        if (mAnchorViewRef.get() != null) {
-            mAnchorViewRef.get().getViewTreeObserver().removeOnScrollChangedListener(
-                    mScrollListener);
-        }
-    }
-    
-    private class PopupContentView extends FrameLayout {
-        private ImageView topArrow;
-        private ImageView bottomArrow;
-        private View bodyFrame;
-        private ImageView xOut;
-        
-        public PopupContentView(Context context) {
-            super(context);
-            init();
-        }
-        
-        private void init() {
-            LayoutInflater inflater = LayoutInflater.from(getContext());
-            inflater.inflate(R.layout.com_facebook_tooltip_bubble, this);
-            topArrow = (ImageView) findViewById(R.id.com_facebook_tooltip_bubble_view_top_pointer);
-            bottomArrow = (ImageView) findViewById(
-                    R.id.com_facebook_tooltip_bubble_view_bottom_pointer);
-            bodyFrame = findViewById(R.id.com_facebook_body_frame);
-            xOut = (ImageView) findViewById(R.id.com_facebook_button_xout);
-        }
-        
-        public void showTopArrow() {
-            topArrow.setVisibility(View.VISIBLE);
-            bottomArrow.setVisibility(View.INVISIBLE);
-        }
-        
-        public void showBottomArrow() {
-            topArrow.setVisibility(View.INVISIBLE);
-            bottomArrow.setVisibility(View.VISIBLE);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/messenger/MessengerThreadParams.java b/facebook/src/main/java/com/facebook/messenger/MessengerThreadParams.java
deleted file mode 100644
index dcc1ff52a..000000000
--- a/facebook/src/main/java/com/facebook/messenger/MessengerThreadParams.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import java.util.List;
-
-/**
- * Parameters describing the Intent that Messenger sent to the app. Returned by
- * {@link MessengerUtils#getMessengerThreadParamsForIntent}.
- */
-public class MessengerThreadParams {
-
-  /**
-   * The origin of the flow that user originated from.
-   */
-  public enum Origin {
-    /**
-     * The user clicked on a reply link in Messenger to a particular message.
-     */
-    REPLY_FLOW,
-
-    /**
-     * The user clicked an app shortcut in Messenger.
-     */
-    COMPOSE_FLOW,
-
-    /**
-     * The user came from a flow that was not known at the time this code was written.
-     */
-    UNKNOWN
-  }
-
-  /**
-   * The origin of the flow that the user originated from.
-   */
-  public final Origin origin;
-
-  /**
-   * A token representing the thread the user originated from. This is an opaque value that is not
-   * meant for the app to consume. It exists to complete the flow back to Messenger.
-   */
-  public final String threadToken;
-
-  /**
-   * Metadata that originated from content the app originally set when it sent the request to
-   * Messenger.
-   */
-  public final String metadata;
-
-  /**
-   * The list of participants in the thread represented as App-scoped User IDs. This may not
-   * always be set and will only ever be set for apps that include Facebook login. When set, it
-   * will only include the participants in the thread that have logged into the app. See
-   * <a href="https://developers.facebook.com/docs/apps/upgrading">docs</a> for more info.
-   */
-  public final List<String> participants;
-
-  public MessengerThreadParams(
-      Origin origin,
-      String threadToken,
-      String metadata,
-      List<String> participants) {
-    this.threadToken = threadToken;
-    this.metadata = metadata;
-    this.participants = participants;
-    this.origin = origin;
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java b/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java
deleted file mode 100644
index af847c14d..000000000
--- a/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java
+++ /dev/null
@@ -1,296 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.FacebookSdk;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import bolts.AppLinks;
-
-/**
- * Utilities for Messenger Content Platform.
- * <p>
- *   Applications should specify the app id in their manifest or call
- *   {@link com.facebook.FacebookSdk#setApplicationId(String)} } in
- *   their application startup path. For specifying in the manifest, add a meta tag in your
- *   &lt;application&gt; tag.
- *
- *   <pre>
- *    &lt;meta-data android:name="com.facebook.sdk.ApplicationId" android:value="YOUR_APP_ID"/&gt;
- *   </pre>
- *
- * </p>
- *
- * <p>
- *   When sharing to Messenger, apps should call the {@link #shareToMessenger} method. For example,
- *
- *   <pre>
- *     ShareToMessengerParams params = ShareToMessengerParams.newBuilder(uri, "image/*")
- *         .setMetaData(metaData)
- *         .build();
- *     MessengerUtils.shareToMessenger(this, REQUEST_CODE_SHARE_TO_MESSENGER, params);
- *   </pre>
- *
- *   To handle receiving a composer shortcut or reply intent from Messenger, apps should
- *   put the following intent filter in their manifest for the activity that receives the intent:
- *
- *   <pre>
- *           &lt;intent-filter&gt;
- *             &lt;action android:name="android.intent.action.PICK" /&gt;
- *             &lt;category android:name="android.intent.category.DEFAULT"/&gt;
- *             &lt;category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150311"/&gt;
- *           &lt;/intent-filter&gt;
- *   </pre>
- *
- *   When handling the intent, then call {@link #getMessengerThreadParamsForIntent} to receive
- *   the parameters for messenger. When the user has clicked the Send button to send the content
- *   to Messenger, then call {@link #finishShareToMessenger} to return the data back to Messenger.
- * </p>
- */
-public class MessengerUtils {
-
-  private static final String TAG = "MessengerUtils";
-
-  public static final String PACKAGE_NAME = "com.facebook.orca";
-
-  public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.orca.extra.PROTOCOL_VERSION";
-  public static final String EXTRA_APP_ID = "com.facebook.orca.extra.APPLICATION_ID";
-  public static final String EXTRA_REPLY_TOKEN_KEY = "com.facebook.orca.extra.REPLY_TOKEN";
-  public static final String EXTRA_THREAD_TOKEN_KEY = "com.facebook.orca.extra.THREAD_TOKEN";
-  public static final String EXTRA_METADATA = "com.facebook.orca.extra.METADATA";
-  public static final String EXTRA_EXTERNAL_URI = "com.facebook.orca.extra.EXTERNAL_URI";
-  public static final String EXTRA_PARTICIPANTS = "com.facebook.orca.extra.PARTICIPANTS";
-  public static final String EXTRA_IS_REPLY = "com.facebook.orca.extra.IS_REPLY";
-  public static final String EXTRA_IS_COMPOSE = "com.facebook.orca.extra.IS_COMPOSE";
-  public static final int PROTOCOL_VERSION_20150314 = 20150314;
-
-  public static final String ORCA_THREAD_CATEGORY_20150314 =
-      "com.facebook.orca.category.PLATFORM_THREAD_20150314";
-
-  /**
-   * Starts an intent to share a piece of media on Messenger using the messenger content platform.
-   *
-   * @param activity the activity sharing the content
-   * @param requestCode a unique request code for {@link Activity#startActivityForResult}
-   * @param shareToMessengerParams parameters for what to share
-   */
-  public static void shareToMessenger(
-      Activity activity,
-      int requestCode,
-      ShareToMessengerParams shareToMessengerParams) {
-    if (!MessengerUtils.hasMessengerInstalled(activity)) {
-      MessengerUtils.openMessengerInPlayStore(activity);
-      return;
-    }
-
-    Set<Integer> allAvailableVersions = getAllAvailableProtocolVersions(activity);
-    if (allAvailableVersions.contains(PROTOCOL_VERSION_20150314)) {
-      shareToMessenger20150314(activity, requestCode, shareToMessengerParams);
-    } else {
-      // TODO -- should we show a upgrade dialog?
-      MessengerUtils.openMessengerInPlayStore(activity);
-    }
-  }
-
-  private static void shareToMessenger20150314(
-      Activity activity,
-      int requestCode,
-      ShareToMessengerParams shareToMessengerParams) {
-    try {
-      Intent shareIntent = new Intent(Intent.ACTION_SEND);
-      shareIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
-      shareIntent.setPackage(PACKAGE_NAME);
-      shareIntent.putExtra(Intent.EXTRA_STREAM, shareToMessengerParams.uri);
-      shareIntent.setType(shareToMessengerParams.mimeType);
-      String appId = FacebookSdk.getApplicationId();
-      if (appId != null) {
-        shareIntent.putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20150314);
-        shareIntent.putExtra(EXTRA_APP_ID, appId);
-        shareIntent.putExtra(EXTRA_METADATA, shareToMessengerParams.metaData);
-        shareIntent.putExtra(EXTRA_EXTERNAL_URI, shareToMessengerParams.externalUri);
-      }
-
-      activity.startActivityForResult(shareIntent, requestCode);
-    } catch (ActivityNotFoundException e) {
-      Intent openMessenger = activity.getPackageManager().getLaunchIntentForPackage(PACKAGE_NAME);
-      activity.startActivity(openMessenger);
-    }
-  }
-
-  /**
-   * When handling an {@code Intent} from Messenger, call this to parse the parameters of the
-   * intent.
-   *
-   * @param intent the intent of the activity
-   * @return a {@link MessengerThreadParams} or null if this intent wasn't recognized as a request
-   *     from Messenger to share.
-   */
-  public static MessengerThreadParams getMessengerThreadParamsForIntent(Intent intent) {
-    Set<String> categories = intent.getCategories();
-    if (categories == null) {
-      return null;
-    }
-    if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {
-      Bundle appLinkExtras = AppLinks.getAppLinkExtras(intent);
-      String threadToken = appLinkExtras.getString(EXTRA_THREAD_TOKEN_KEY);
-      String metadata = appLinkExtras.getString(EXTRA_METADATA);
-      String participants = appLinkExtras.getString(EXTRA_PARTICIPANTS);
-      boolean isReply = appLinkExtras.getBoolean(EXTRA_IS_REPLY);
-      boolean isCompose = appLinkExtras.getBoolean(EXTRA_IS_COMPOSE);
-      MessengerThreadParams.Origin origin = MessengerThreadParams.Origin.UNKNOWN;
-      if (isReply) {
-        origin = MessengerThreadParams.Origin.REPLY_FLOW;
-      } else if (isCompose) {
-        origin = MessengerThreadParams.Origin.COMPOSE_FLOW;
-      }
-
-      return new MessengerThreadParams(
-          origin,
-          threadToken,
-          metadata,
-          parseParticipants(participants));
-    } else {
-      return null;
-    }
-  }
-
-  /**
-   * Finishes the activity and returns the media item the user picked to Messenger.
-   *
-   * @param activity the activity that received the original intent from Messenger
-   * @param shareToMessengerParams parameters for what to share
-   */
-  public static void finishShareToMessenger(
-      Activity activity,
-      ShareToMessengerParams shareToMessengerParams) {
-    Intent originalIntent = activity.getIntent();
-    Set<String> categories = originalIntent.getCategories();
-    if (categories == null) {
-      // This shouldn't happen.
-      activity.setResult(Activity.RESULT_CANCELED, null);
-      activity.finish();
-      return;
-    }
-
-    if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {
-      Bundle appLinkExtras = AppLinks.getAppLinkExtras(originalIntent);
-
-      Intent resultIntent = new Intent();
-      if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {
-        resultIntent.putExtra(EXTRA_PROTOCOL_VERSION, MessengerUtils.PROTOCOL_VERSION_20150314);
-        String threadToken = appLinkExtras.getString(MessengerUtils.EXTRA_THREAD_TOKEN_KEY);
-        resultIntent.putExtra(EXTRA_THREAD_TOKEN_KEY, threadToken);
-      } else {
-        throw new RuntimeException(); // Can't happen.
-      }
-      resultIntent.setDataAndType(shareToMessengerParams.uri, shareToMessengerParams.mimeType);
-      resultIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
-      resultIntent.putExtra(EXTRA_APP_ID, FacebookSdk.getApplicationId());
-      resultIntent.putExtra(EXTRA_METADATA, shareToMessengerParams.metaData);
-      resultIntent.putExtra(EXTRA_EXTERNAL_URI, shareToMessengerParams.externalUri);
-      activity.setResult(Activity.RESULT_OK, resultIntent);
-      activity.finish();
-    } else {
-      // This shouldn't happen.
-      activity.setResult(Activity.RESULT_CANCELED, null);
-      activity.finish();
-    }
-  }
-
-  /**
-   * Checks whether any version of messenger is installed.
-   *
-   * @param context an android context
-   * @return whether any version of messenger is installed
-   */
-  public static boolean hasMessengerInstalled(Context context) {
-    try {
-      context.getPackageManager().getPackageInfo(PACKAGE_NAME, 0);
-      return true;
-    } catch (PackageManager.NameNotFoundException e) {
-      return false;
-    }
-  }
-
-  /**
-   * Opens the play store to install Messenger.
-   *
-   * @param context an android context.
-   */
-  public static void openMessengerInPlayStore(Context context) {
-    try {
-      startViewUri(context, "market://details?id=" + PACKAGE_NAME);
-    } catch (ActivityNotFoundException anfe) {
-      startViewUri(context, "http://play.google.com/store/apps/details?id=" + PACKAGE_NAME);
-    }
-  }
-
-  private static Set<Integer> getAllAvailableProtocolVersions(Context context) {
-    ContentResolver contentResolver = context.getContentResolver();
-    Set<Integer> allAvailableVersions = new HashSet<Integer>();
-    Uri uri = Uri.parse("content://com.facebook.orca.provider.MessengerPlatformProvider/versions");
-    String [] projection = new String[]{ "version" };
-    Cursor c = contentResolver.query(uri, projection, null, null, null);
-    if (c != null) {
-      try {
-        int versionColumnIndex = c.getColumnIndex("version");
-        while (c.moveToNext()) {
-          int version = c.getInt(versionColumnIndex);
-          allAvailableVersions.add(version);
-        }
-      } finally {
-        c.close();
-      }
-    }
-    return allAvailableVersions;
-  }
-
-  private static void startViewUri(Context context, String uri) {
-    context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(uri)));
-  }
-
-  private static List<String> parseParticipants(String s) {
-    if (s == null || s.length() == 0) {
-      return Collections.emptyList();
-    }
-    String[] parts = s.split(",");
-    List<String> ret = new ArrayList<String>();
-    for (String part : parts) {
-      ret.add(part.trim());
-    }
-    return ret;
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParams.java b/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParams.java
deleted file mode 100644
index 9bb413384..000000000
--- a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParams.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.net.Uri;
-
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-/**
- * Parameters used by {@link MessengerUtils} for sending the media to Messenger to share.
- * See <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for
- * more info.
- */
-public class ShareToMessengerParams {
-
-  public static final Set<String> VALID_URI_SCHEMES;
-  public static final Set<String> VALID_MIME_TYPES;
-  public static final Set<String> VALID_EXTERNAL_URI_SCHEMES;
-
-  static {
-    Set<String> validMimeTypes = new HashSet<String>();
-    validMimeTypes.add("image/*");
-    validMimeTypes.add("image/jpeg");
-    validMimeTypes.add("image/png");
-    validMimeTypes.add("image/gif");
-    validMimeTypes.add("image/webp");
-    validMimeTypes.add("video/*");
-    validMimeTypes.add("video/mp4");
-    validMimeTypes.add("audio/*");
-    validMimeTypes.add("audio/mpeg");
-    VALID_MIME_TYPES = Collections.unmodifiableSet(validMimeTypes);
-
-    Set<String> validUriSchemes = new HashSet<String>();
-    validUriSchemes.add("content");
-    validUriSchemes.add("android.resource");
-    validUriSchemes.add("file");
-    VALID_URI_SCHEMES = Collections.unmodifiableSet(validUriSchemes);
-
-    Set<String> validExternalUriSchemes = new HashSet<String>();
-    validExternalUriSchemes.add("http");
-    validExternalUriSchemes.add("https");
-    VALID_EXTERNAL_URI_SCHEMES = Collections.unmodifiableSet(validExternalUriSchemes);
-  }
-
-  /**
-   * The URI of the local image, video, or audio clip to send to messenger. Must be
-   * a file://, content://, or res:// URI.
-   */
-  public final Uri uri;
-
-  /**
-   * The mime type of the content. See {@link #VALID_MIME_TYPES} for what mime types are supported.
-   */
-  public final String mimeType;
-
-  /**
-   * The metadata to attach to the content to shared. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   */
-  public final String metaData;
-
-  /**
-   * An external URI that Messenger can use to download the content on Facebook's servers
-   * instead of requiring the Messenger application to upload the content. The content returned by
-   * the this URI must be exactly the same as the content specified by {@link #uri}. If the
-   * content is different, Messenger may fail to send the content. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   */
-  public final Uri externalUri;
-
-  ShareToMessengerParams(ShareToMessengerParamsBuilder builder) {
-    uri = builder.getUri();
-    mimeType = builder.getMimeType();
-    metaData = builder.getMetaData();
-    externalUri = builder.getExternalUri();
-
-    if (uri == null) {
-      throw new NullPointerException("Must provide non-null uri");
-    }
-    if (mimeType == null) {
-      throw new NullPointerException("Must provide mimeType");
-    }
-    if (!VALID_URI_SCHEMES.contains(uri.getScheme())) {
-      throw new IllegalArgumentException("Unsupported URI scheme: " + uri.getScheme());
-    }
-    if (!VALID_MIME_TYPES.contains(mimeType)) {
-      throw new IllegalArgumentException("Unsupported mime-type: " + mimeType);
-    }
-    if (externalUri != null) {
-      if (!VALID_EXTERNAL_URI_SCHEMES.contains(externalUri.getScheme())) {
-        throw new IllegalArgumentException("Unsupported external uri scheme: " +
-            externalUri.getScheme());
-      }
-    }
-  }
-
-  /**
-   * Creates a new builder for creating a {@link ShareToMessengerParams} instance
-   *
-   * @param uri the uri of the local content. Must be a file://, content://, or res:// URI.
-   * @param mimeType the mime-type of the content. See {@link #VALID_MIME_TYPES} for what mime
-   *                 types are supported.
-   * @return the builder instance
-   */
-  public static ShareToMessengerParamsBuilder newBuilder(Uri uri, String mimeType) {
-    return new ShareToMessengerParamsBuilder(uri, mimeType);
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParamsBuilder.java b/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParamsBuilder.java
deleted file mode 100644
index ad42d6c28..000000000
--- a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParamsBuilder.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.net.Uri;
-
-/**
- * Builder for {@link ShareToMessengerParams}.
- */
-public class ShareToMessengerParamsBuilder {
-
-  private final Uri mUri;
-  private final String mMimeType;
-  private String mMetaData;
-  private Uri mExternalUri;
-
-  ShareToMessengerParamsBuilder(Uri uri, String mimeType) {
-    mUri = uri;
-    mMimeType = mimeType;
-  }
-
-  /**
-   * Gets the URI of the local image, video, or audio clip to send to messenger. Must be
-   * a file://, content://, or res:// URI.
-   *
-   * @return the uri
-   */
-  public Uri getUri() {
-    return mUri;
-  }
-
-  /**
-   * Gets the mime type of the content. See {@link ShareToMessengerParams#VALID_MIME_TYPES} for
-   * what mime types are supported.
-   *
-   * @return the mime type
-   */
-  public String getMimeType() {
-    return mMimeType;
-  }
-
-  /**
-   * Sets the metadata to attach to the content to shared. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @param metaData the metadata to attach to the message
-   * @return this builder
-   */
-  public ShareToMessengerParamsBuilder setMetaData(String metaData) {
-    mMetaData = metaData;
-    return this;
-  }
-
-  /**
-   * Gets the metadata to attach to the content to shared. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @return the metadata to attach to the message
-   */
-  public String getMetaData() {
-    return mMetaData;
-  }
-
-  /**
-   * Sets an external URI that Messenger can use to download the content on Facebook's servers
-   * instead of requiring the Messenger application to upload the content. The content returned by
-   * the this URI must be exactly the same as the content specified by {@link #getUri()}. If the
-   * content is different, Messenger may fail to send the content. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @param externalUri the external uri to set
-   * @return this builder
-   */
-  public ShareToMessengerParamsBuilder setExternalUri(Uri externalUri) {
-    mExternalUri = externalUri;
-    return this;
-  }
-
-  /**
-   * Gets an external URI that Messenger can use to download the content on Facebook's servers
-   * instead of requiring the Messenger application to upload the content. The content returned by
-   * the this URI must be exactly the same as the content specified by {@link #getUri()}. If the
-   * content is different, Messenger may fail to send the content. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @return the external URI
-   */
-  public Uri getExternalUri() {
-    return mExternalUri;
-  }
-
-  /**
-   * Builds the parameter object.
-   *
-   * @return the parameter object
-   */
-  public ShareToMessengerParams build() {
-    return new ShareToMessengerParams(this);
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
deleted file mode 100644
index c9c017124..000000000
--- a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
+++ /dev/null
@@ -1,143 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-package com.facebook.share;
-
-import android.app.Activity;
-import android.app.Fragment;
-import android.content.Intent;
-import android.os.Bundle;
-
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.DeviceShareDialogFragment;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import java.util.List;
-
-/*
- * Provides functionality to share from devices.
- * See https://developers.facebook.com/docs/android/devices
- *
- * Only ShareLinkContent and ShareOpenGraphContent are supported.
- *
- * The dialog does not indicate if the person completed a share. Therefore,
- * the callback will always either invoke onSuccess or onError.
- *
- * The dialog can also dismiss itself after the device code has expired.
- */
-public class DeviceShareDialog
-        extends FacebookDialogBase<ShareContent, DeviceShareDialog.Result> {
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.DeviceShare.toRequestCode();
-    /**
-     * Constructs a new DeviceShareDialog.
-     * @param activity Activity to use to share the provided content
-     */
-    public DeviceShareDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-    /**
-     * Constructs a new DeviceShareDialog.
-     * @param fragment fragment to use to share the provided content
-     */
-    public DeviceShareDialog(final Fragment fragment) {
-        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
-    }
-    /**
-     * Constructs a new DeviceShareDialog.
-     * @param fragment fragment to use to share the provided content
-     */
-    public DeviceShareDialog(final android.support.v4.app.Fragment fragment) {
-        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected boolean canShowImpl(ShareContent content, Object mode) {
-        return (content instanceof ShareLinkContent ||
-                content instanceof ShareOpenGraphContent);
-    }
-
-    @Override
-    protected void showImpl(final ShareContent content, final Object mode) {
-        if (content == null) {
-            throw new FacebookException("Must provide non-null content to share");
-        }
-
-        if (!(content instanceof ShareLinkContent) &&
-            !(content instanceof ShareOpenGraphContent)) {
-            throw new FacebookException(this.getClass().getSimpleName() +
-                    " only supports ShareLinkContent or ShareOpenGraphContent");
-        }
-        Intent intent = new Intent();
-        intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
-        intent.setAction(DeviceShareDialogFragment.TAG);
-        intent.putExtra("content", content);
-        startActivityForResult(intent, getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        return null;
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-       return null;
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-
-        callbackManager.registerCallback(
-                getRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        Bundle extras = data.getExtras();
-                        if (data.hasExtra("error")) {
-                            FacebookRequestError error = data.getParcelableExtra("error");
-                            callback.onError(error.getException());
-                            return true;
-                        }
-                        callback.onSuccess(new Result());
-                        return true;
-                    }
-                });
-    }
-
-    /*
-     * Describes the result of a device share.
-     * This class is intentionally empty.
-     */
-    public static class Result {
-
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/ShareApi.java b/facebook/src/main/java/com/facebook/share/ShareApi.java
deleted file mode 100644
index 2917e345e..000000000
--- a/facebook/src/main/java/com/facebook/share/ShareApi.java
+++ /dev/null
@@ -1,745 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookGraphResponseException;
-import com.facebook.FacebookRequestError;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.internal.CollectionMapper;
-import com.facebook.internal.Mutable;
-import com.facebook.internal.Utility;
-import com.facebook.share.internal.ShareContentValidation;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.VideoUploader;
-import com.facebook.share.model.*;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.FileNotFoundException;
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
-import java.util.*;
-
-/**
- * Provides an interface for sharing through the graph API. Using this class requires an access
- * token in AccessToken.currentAccessToken that has been granted the "publish_actions" permission.
- */
-public final class ShareApi {
-    private static final String TAG = "ShareApi";
-    private static final String DEFAULT_GRAPH_NODE = "me";
-    private static final String PHOTOS_EDGE = "photos";
-    private static final String GRAPH_PATH_FORMAT = "%s/%s";
-    private static final String DEFAULT_CHARSET = "UTF-8";
-
-    private String message;
-    private String graphNode;
-    private final ShareContent shareContent;
-
-    /**
-     * Convenience method to share a piece of content.
-     *
-     * @param shareContent the content to share.
-     * @param callback     the callback to call once the share is complete.
-     */
-    public static void share(
-            final ShareContent shareContent,
-            final FacebookCallback<Sharer.Result> callback) {
-        new ShareApi(shareContent)
-                .share(callback);
-    }
-
-    /**
-     * Constructs a new instance.
-     *
-     * @param shareContent the content to share.
-     */
-    public ShareApi(final ShareContent shareContent) {
-        this.shareContent = shareContent;
-        this.graphNode = DEFAULT_GRAPH_NODE;
-    }
-
-    /**
-     * Returns the message the person has provided through the custom dialog that will accompany the
-     * share content.
-     * @return the message.
-     */
-    public String getMessage() {
-        return this.message;
-    }
-
-    /**
-     * Sets the message the person has provided through the custom dialog that will accompany the
-     * share content.
-     * @param message the message.
-     */
-    public void setMessage(final String message) {
-        this.message = message;
-    }
-
-    /**
-     * Returns the graph node to share to.
-     * @return the graph node.
-     */
-    public String getGraphNode() {
-        return this.graphNode;
-    }
-
-    /**
-     * Sets the graph node to share to (this can be a user id, event id, page id, group id, album
-     * id, etc).
-     * @param graphNode the graph node to share to.
-     */
-    public void setGraphNode(final String graphNode) {
-        this.graphNode = graphNode;
-    }
-
-    /**
-     * Returns the content to be shared.
-     *
-     * @return the content to be shared.
-     */
-    public ShareContent getShareContent() {
-        return this.shareContent;
-    }
-
-    /**
-     * Returns true if the content can be shared. Warns if the access token is missing the
-     * publish_actions permission. Doesn't fail when this permission is missing, because the app
-     * could have been granted that permission in another installation.
-     *
-     * @return true if the content can be shared.
-     */
-    public boolean canShare() {
-        if (this.getShareContent() == null) {
-            return false;
-        }
-        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        if (accessToken == null) {
-            return false;
-        }
-        final Set<String> permissions = accessToken.getPermissions();
-        if (permissions == null || !permissions.contains("publish_actions")) {
-            Log.w(TAG, "The publish_actions permissions are missing, the share will fail unless" +
-                    " this app was authorized to publish in another installation.");
-        }
-
-        return true;
-    }
-
-    /**
-     * Share the content.
-     *
-     * @param callback the callback to call once the share is complete.
-     */
-    public void share(FacebookCallback<Sharer.Result> callback) {
-        if (!this.canShare()) {
-            ShareInternalUtility.invokeCallbackWithError(
-                    callback, "Insufficient permissions for sharing content via Api.");
-            return;
-        }
-        final ShareContent shareContent = this.getShareContent();
-
-        // Validate the share content
-        try {
-            ShareContentValidation.validateForApiShare(shareContent);
-        } catch (FacebookException ex) {
-            ShareInternalUtility.invokeCallbackWithException(callback, ex);
-            return;
-        }
-
-        if (shareContent instanceof ShareLinkContent) {
-            this.shareLinkContent((ShareLinkContent) shareContent, callback);
-        } else if (shareContent instanceof SharePhotoContent) {
-            this.sharePhotoContent((SharePhotoContent) shareContent, callback);
-        } else if (shareContent instanceof ShareVideoContent) {
-            this.shareVideoContent((ShareVideoContent) shareContent, callback);
-        } else if (shareContent instanceof ShareOpenGraphContent) {
-            this.shareOpenGraphContent((ShareOpenGraphContent) shareContent, callback);
-        }
-    }
-
-    // Get the graph path, pathAfterGraphNode must be properly URL encoded
-    private String getGraphPath(final String pathAfterGraphNode) {
-        try {
-            return String.format(
-                    Locale.ROOT, GRAPH_PATH_FORMAT,
-                    URLEncoder.encode(getGraphNode(), DEFAULT_CHARSET),
-                    pathAfterGraphNode);
-        } catch (UnsupportedEncodingException e) {
-            return null;
-        }
-    }
-
-    private void addCommonParameters(final Bundle bundle, ShareContent shareContent) {
-        final List<String> peopleIds = shareContent.getPeopleIds();
-        if (!Utility.isNullOrEmpty(peopleIds)) {
-            bundle.putString("tags", TextUtils.join(", ", peopleIds));
-        }
-
-        if (!Utility.isNullOrEmpty(shareContent.getPlaceId())) {
-            bundle.putString("place", shareContent.getPlaceId());
-        }
-
-        if (!Utility.isNullOrEmpty(shareContent.getRef())) {
-            bundle.putString("ref", shareContent.getRef());
-        }
-    }
-
-    private void shareOpenGraphContent(final ShareOpenGraphContent openGraphContent,
-                                       final FacebookCallback<Sharer.Result> callback) {
-        // In order to create a new Open Graph action using a custom object that does not already
-        // exist (objectID or URL), you must first send a request to post the object and then
-        // another to post the action.  If a local image is supplied with the object or action, that
-        // must be staged first and then referenced by the staging URL that is returned by that
-        // request.
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final JSONObject data = response.getJSONObject();
-                final String postId = (data == null ? null : data.optString("id"));
-                ShareInternalUtility.invokeCallbackWithResults(callback, postId, response);
-            }
-        };
-        final ShareOpenGraphAction action = openGraphContent.getAction();
-        final Bundle parameters = action.getBundle();
-        this.addCommonParameters(parameters, openGraphContent);
-        if (!Utility.isNullOrEmpty(this.getMessage())) {
-            parameters.putString("message", this.getMessage());
-        }
-
-        final CollectionMapper.OnMapperCompleteListener stageCallback = new CollectionMapper
-                .OnMapperCompleteListener() {
-            @Override
-            public void onComplete() {
-                try {
-                    handleImagesOnAction(parameters);
-
-                    new GraphRequest(
-                            AccessToken.getCurrentAccessToken(),
-                            getGraphPath(
-                                    URLEncoder.encode(action.getActionType(), DEFAULT_CHARSET)),
-                            parameters,
-                            HttpMethod.POST,
-                            requestCallback).executeAsync();
-                } catch (final UnsupportedEncodingException ex) {
-                    ShareInternalUtility.invokeCallbackWithException(callback, ex);
-                }
-            }
-
-            @Override
-            public void onError(FacebookException exception) {
-                ShareInternalUtility.invokeCallbackWithException(callback, exception);
-            }
-        };
-        this.stageOpenGraphAction(parameters, stageCallback);
-    }
-
-    private static void handleImagesOnAction(Bundle parameters) {
-        // In general, graph objects are passed by reference (ID/URL). But if this is an OG Action,
-        // we need to pass the entire values of the contents of the 'image' property, as they
-        // contain important metadata beyond just a URL.
-        String imageStr = parameters.getString("image");
-        if (imageStr != null) {
-            try {
-                // Check to see if this is an json array. Will throw if not
-                JSONArray images = new JSONArray(imageStr);
-                for (int i = 0; i < images.length(); ++i) {
-                    JSONObject jsonImage = images.optJSONObject(i);
-                    if(jsonImage != null) {
-                        putImageInBundleWithArrayFormat(parameters, i, jsonImage);
-                    } else {
-                        // If we don't have jsonImage we probably just have a url
-                        String url = images.getString(i);
-                        parameters.putString(String.format(Locale.ROOT, "image[%d][url]", i), url);
-                    }
-                }
-                parameters.remove("image");
-                return;
-            } catch (JSONException ex) {
-                // We couldn't parse the string as an array
-            }
-
-            // If the image is not in an array it might just be an single photo
-            try {
-                JSONObject image = new JSONObject(imageStr);
-                putImageInBundleWithArrayFormat(parameters, 0, image);
-                parameters.remove("image");
-            } catch (JSONException exception) {
-                // The image was not in array format or a json object and can be safely passed
-                // without modification
-            }
-        }
-    }
-
-    private static void putImageInBundleWithArrayFormat(
-            Bundle parameters,
-            int index,
-            JSONObject image) throws JSONException{
-        Iterator<String> keys = image.keys();
-        while (keys.hasNext()) {
-            String property = keys.next();
-            String key = String.format(Locale.ROOT, "image[%d][%s]", index, property);
-            parameters.putString(key, image.get(property).toString());
-        }
-    }
-
-    private void sharePhotoContent(final SharePhotoContent photoContent,
-                                   final FacebookCallback<Sharer.Result> callback) {
-        final Mutable<Integer> requestCount = new Mutable<Integer>(0);
-        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        final ArrayList<GraphRequest> requests = new ArrayList<GraphRequest>();
-        final ArrayList<JSONObject> results = new ArrayList<JSONObject>();
-        final ArrayList<GraphResponse> errorResponses = new ArrayList<GraphResponse>();
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final JSONObject result = response.getJSONObject();
-                if (result != null) {
-                    results.add(result);
-                }
-                if (response.getError() != null) {
-                    errorResponses.add(response);
-                }
-                requestCount.value -= 1;
-                if (requestCount.value == 0) {
-                    if (!errorResponses.isEmpty()) {
-                        ShareInternalUtility.invokeCallbackWithResults(
-                                callback,
-                                null,
-                                errorResponses.get(0));
-                    } else if (!results.isEmpty()) {
-                        final String postId = results.get(0).optString("id");
-                        ShareInternalUtility.invokeCallbackWithResults(
-                                callback,
-                                postId,
-                                response);
-                    }
-                }
-            }
-        };
-        try {
-            for (SharePhoto photo : photoContent.getPhotos()) {
-                Bundle params = null;
-                try {
-                    params = getSharePhotoCommonParameters(photo, photoContent);
-                } catch (JSONException e) {
-                    ShareInternalUtility.invokeCallbackWithException(callback, e);
-                    return;
-                }
-                final Bitmap bitmap = photo.getBitmap();
-                final Uri photoUri = photo.getImageUrl();
-                String caption = photo.getCaption();
-                if (caption == null) {
-                    caption = this.getMessage();
-                }
-                if (bitmap != null) {
-                    requests.add(GraphRequest.newUploadPhotoRequest(
-                            accessToken,
-                            getGraphPath(PHOTOS_EDGE),
-                            bitmap,
-                            caption,
-                            params,
-                            requestCallback));
-                } else if (photoUri != null) {
-                    requests.add(GraphRequest.newUploadPhotoRequest(
-                            accessToken,
-                            getGraphPath(PHOTOS_EDGE),
-                            photoUri,
-                            caption,
-                            params,
-                            requestCallback));
-                }
-            }
-            requestCount.value += requests.size();
-            for (GraphRequest request : requests) {
-                request.executeAsync();
-            }
-        } catch (final FileNotFoundException ex) {
-            ShareInternalUtility.invokeCallbackWithException(callback, ex);
-        }
-    }
-
-    private void shareLinkContent(final ShareLinkContent linkContent,
-                                  final FacebookCallback<Sharer.Result> callback) {
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final JSONObject data = response.getJSONObject();
-                final String postId = (data == null ? null : data.optString("id"));
-                ShareInternalUtility.invokeCallbackWithResults(callback, postId, response);
-            }
-        };
-        final Bundle parameters = new Bundle();
-        this.addCommonParameters(parameters, linkContent);
-        parameters.putString("message", this.getMessage());
-        parameters.putString("link", Utility.getUriString(linkContent.getContentUrl()));
-        parameters.putString("picture", Utility.getUriString(linkContent.getImageUrl()));
-        parameters.putString("name", linkContent.getContentTitle());
-        parameters.putString("description", linkContent.getContentDescription());
-        parameters.putString("ref", linkContent.getRef());
-        new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                getGraphPath("feed"),
-                parameters,
-                HttpMethod.POST,
-                requestCallback).executeAsync();
-    }
-
-    private void shareVideoContent(final ShareVideoContent videoContent,
-                                   final FacebookCallback<Sharer.Result> callback) {
-        try {
-            VideoUploader.uploadAsync(videoContent, getGraphNode(), callback);
-        } catch (final FileNotFoundException ex) {
-            ShareInternalUtility.invokeCallbackWithException(callback, ex);
-        }
-    }
-
-    private Bundle getSharePhotoCommonParameters(SharePhoto photo, SharePhotoContent photoContent)
-            throws JSONException{
-        Bundle params = photo.getParameters();
-        if (!params.containsKey("place")
-                && !Utility.isNullOrEmpty(photoContent.getPlaceId())) {
-            params.putString("place", photoContent.getPlaceId());
-        }
-        if (!params.containsKey("tags")
-                && !Utility.isNullOrEmpty(photoContent.getPeopleIds())) {
-            final List<String> peopleIds = photoContent.getPeopleIds();
-            if (!Utility.isNullOrEmpty(peopleIds)) {
-                JSONArray tags = new JSONArray();
-                for (String id : peopleIds) {
-                    JSONObject tag = new JSONObject();
-                    tag.put("tag_uid", id);
-                    tags.put(tag);
-                }
-                params.putString("tags", tags.toString());
-            }
-        }
-        if (!params.containsKey("ref")
-                && !Utility.isNullOrEmpty(photoContent.getRef())) {
-            params.putString("ref", photoContent.getRef());
-        }
-        return params;
-    }
-
-    private void stageArrayList(final ArrayList arrayList,
-                                       final CollectionMapper.OnMapValueCompleteListener
-                                               onArrayListStagedListener) {
-        final JSONArray stagedObject = new JSONArray();
-        final CollectionMapper.Collection<Integer> collection = new CollectionMapper
-                .Collection<Integer>() {
-            @Override
-            public Iterator<Integer> keyIterator() {
-                final int size = arrayList.size();
-                final Mutable<Integer> current = new Mutable<Integer>(0);
-                return new Iterator<Integer>() {
-                    @Override
-                    public boolean hasNext() {
-                        return current.value < size;
-                    }
-
-                    @Override
-                    public Integer next() {
-                        return current.value++;
-                    }
-
-                    @Override
-                    public void remove() {
-                    }
-                };
-            }
-
-            @Override
-            public Object get(Integer key) {
-                return arrayList.get(key);
-            }
-
-            @Override
-            public void set(Integer key,
-                            Object value,
-                            CollectionMapper.OnErrorListener onErrorListener) {
-                try {
-                    stagedObject.put(key, value);
-                } catch (final JSONException ex) {
-                    String message = ex.getLocalizedMessage();
-                    if (message == null) {
-                        message = "Error staging object.";
-                    }
-                    onErrorListener.onError(new FacebookException(message));
-                }
-            }
-        };
-        final CollectionMapper.OnMapperCompleteListener onStagedArrayMapperCompleteListener =
-                new CollectionMapper.OnMapperCompleteListener() {
-                    @Override
-                    public void onComplete() {
-                        onArrayListStagedListener.onComplete(stagedObject);
-                    }
-
-                    @Override
-                    public void onError(FacebookException exception) {
-                        onArrayListStagedListener.onError(exception);
-                    }
-                };
-        stageCollectionValues(collection, onStagedArrayMapperCompleteListener);
-    }
-
-    private <T> void stageCollectionValues(final CollectionMapper.Collection<T> collection,
-                                                  final CollectionMapper.OnMapperCompleteListener
-                                                          onCollectionValuesStagedListener) {
-        final CollectionMapper.ValueMapper valueMapper = new CollectionMapper.ValueMapper() {
-            @Override
-            public void mapValue(Object value,
-                                 CollectionMapper.OnMapValueCompleteListener
-                                         onMapValueCompleteListener) {
-                if (value instanceof ArrayList) {
-                    stageArrayList((ArrayList) value, onMapValueCompleteListener);
-                } else if (value instanceof ShareOpenGraphObject) {
-                    stageOpenGraphObject(
-                            (ShareOpenGraphObject) value,
-                            onMapValueCompleteListener);
-                } else if (value instanceof SharePhoto) {
-                    stagePhoto((SharePhoto) value, onMapValueCompleteListener);
-                } else {
-                    onMapValueCompleteListener.onComplete(value);
-                }
-            }
-        };
-        CollectionMapper.iterate(collection, valueMapper, onCollectionValuesStagedListener);
-    }
-
-    private void stageOpenGraphAction(final Bundle parameters,
-                                             final CollectionMapper.OnMapperCompleteListener
-                                                     onOpenGraphActionStagedListener) {
-        final CollectionMapper.Collection<String> collection = new CollectionMapper
-                .Collection<String>() {
-            @Override
-            public Iterator<String> keyIterator() {
-                return parameters.keySet().iterator();
-            }
-
-            @Override
-            public Object get(String key) {
-                return parameters.get(key);
-            }
-
-            @Override
-            public void set(String key,
-                            Object value,
-                            CollectionMapper.OnErrorListener onErrorListener) {
-                if (!Utility.putJSONValueInBundle(parameters, key, value)) {
-                    onErrorListener.onError(
-                            new FacebookException("Unexpected value: " + value.toString()));
-                }
-            }
-        };
-        stageCollectionValues(collection, onOpenGraphActionStagedListener);
-    }
-
-    private void stageOpenGraphObject(final ShareOpenGraphObject object,
-                                             final CollectionMapper.OnMapValueCompleteListener
-                                                     onOpenGraphObjectStagedListener) {
-        String type = object.getString("type");
-        if (type == null) {
-            type = object.getString("og:type");
-        }
-
-        if (type == null) {
-            onOpenGraphObjectStagedListener.onError(
-                    new FacebookException("Open Graph objects must contain a type value."));
-            return;
-        }
-        final JSONObject stagedObject = new JSONObject();
-        final CollectionMapper.Collection<String> collection = new CollectionMapper
-                .Collection<String>() {
-            @Override
-            public Iterator<String> keyIterator() {
-                return object.keySet().iterator();
-            }
-
-            @Override
-            public Object get(String key) {
-                return object.get(key);
-            }
-
-            @Override
-            public void set(String key,
-                            Object value,
-                            CollectionMapper.OnErrorListener onErrorListener) {
-                try {
-                    stagedObject.put(key, value);
-                } catch (final JSONException ex) {
-                    String message = ex.getLocalizedMessage();
-                    if (message == null) {
-                        message = "Error staging object.";
-                    }
-                    onErrorListener.onError(new FacebookException(message));
-                }
-            }
-        };
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final FacebookRequestError error = response.getError();
-                if (error != null) {
-                    String message = error.getErrorMessage();
-                    if (message == null) {
-                        message = "Error staging Open Graph object.";
-                    }
-                    onOpenGraphObjectStagedListener.onError(
-                            new FacebookGraphResponseException(response, message));
-                    return;
-                }
-                final JSONObject data = response.getJSONObject();
-                if (data == null) {
-                    onOpenGraphObjectStagedListener.onError(
-                            new FacebookGraphResponseException(response,
-                                    "Error staging Open Graph object."));
-                    return;
-                }
-                final String stagedObjectId = data.optString("id");
-                if (stagedObjectId == null) {
-                    onOpenGraphObjectStagedListener.onError(
-                            new FacebookGraphResponseException(response,
-                                    "Error staging Open Graph object."));
-                    return;
-                }
-                onOpenGraphObjectStagedListener.onComplete(stagedObjectId);
-            }
-        };
-        final String ogType = type;
-        final CollectionMapper.OnMapperCompleteListener onMapperCompleteListener =
-                new CollectionMapper.OnMapperCompleteListener() {
-                    @Override
-                    public void onComplete() {
-                        final String objectString = stagedObject.toString();
-                        final Bundle parameters = new Bundle();
-                        parameters.putString("object", objectString);
-                        try {
-                            new GraphRequest(
-                                    AccessToken.getCurrentAccessToken(),
-                                    getGraphPath(
-                                            "objects/" +
-                                                    URLEncoder.encode(ogType, DEFAULT_CHARSET)),
-                                    parameters,
-                                    HttpMethod.POST,
-                                    requestCallback).executeAsync();
-                        } catch (final UnsupportedEncodingException ex) {
-                            String message = ex.getLocalizedMessage();
-                            if (message == null) {
-                                message = "Error staging Open Graph object.";
-                            }
-                            onOpenGraphObjectStagedListener.onError(new FacebookException(message));
-                        }
-                    }
-
-                    @Override
-                    public void onError(FacebookException exception) {
-                        onOpenGraphObjectStagedListener.onError(exception);
-                    }
-                };
-        stageCollectionValues(collection, onMapperCompleteListener);
-    }
-
-    private void stagePhoto(final SharePhoto photo,
-                                   final CollectionMapper.OnMapValueCompleteListener
-                                           onPhotoStagedListener) {
-        final Bitmap bitmap = photo.getBitmap();
-        final Uri imageUrl = photo.getImageUrl();
-        if ((bitmap != null) || (imageUrl != null)) {
-            final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-                @Override
-                public void onCompleted(GraphResponse response) {
-                    final FacebookRequestError error = response.getError();
-                    if (error != null) {
-                        String message = error.getErrorMessage();
-                        if (message == null) {
-                            message = "Error staging photo.";
-                        }
-                        onPhotoStagedListener.onError(
-                                new FacebookGraphResponseException(response, message));
-                        return;
-                    }
-                    final JSONObject data = response.getJSONObject();
-                    if (data == null) {
-                        onPhotoStagedListener.onError(
-                                new FacebookException("Error staging photo."));
-                        return;
-                    }
-                    final String stagedImageUri = data.optString("uri");
-                    if (stagedImageUri == null) {
-                        onPhotoStagedListener.onError(
-                                new FacebookException("Error staging photo."));
-                        return;
-                    }
-
-                    final JSONObject stagedObject = new JSONObject();
-                    try {
-                        stagedObject.put("url", stagedImageUri);
-                        stagedObject.put("user_generated", photo.getUserGenerated());
-                    } catch (final JSONException ex) {
-                        String message = ex.getLocalizedMessage();
-                        if (message == null) {
-                            message = "Error staging photo.";
-                        }
-                        onPhotoStagedListener.onError(new FacebookException(message));
-                        return;
-                    }
-                    onPhotoStagedListener.onComplete(stagedObject);
-                }
-            };
-            if (bitmap != null) {
-                ShareInternalUtility.newUploadStagingResourceWithImageRequest(
-                        AccessToken.getCurrentAccessToken(),
-                        bitmap,
-                        requestCallback).executeAsync();
-            } else {
-                try {
-                    ShareInternalUtility.newUploadStagingResourceWithImageRequest(
-                            AccessToken.getCurrentAccessToken(),
-                            imageUrl,
-                            requestCallback).executeAsync();
-                } catch (final FileNotFoundException ex) {
-                    String message = ex.getLocalizedMessage();
-                    if (message == null) {
-                        message = "Error staging photo.";
-                    }
-                    onPhotoStagedListener.onError(new FacebookException(message));
-                }
-            }
-        } else {
-            onPhotoStagedListener.onError(
-                    new FacebookException("Photos must have an imageURL or bitmap."));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/ShareBuilder.java b/facebook/src/main/java/com/facebook/share/ShareBuilder.java
deleted file mode 100644
index 53df49f3a..000000000
--- a/facebook/src/main/java/com/facebook/share/ShareBuilder.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share;
-
-/**
- * Interface for builders related to sharing.
- * @param <P> The class of the object to be built.
- * @param <E> The concrete builder class.
- */
-public interface ShareBuilder<P, E extends ShareBuilder> {
-    /**
-     * Builds the object.
-     * @return The built object.
-     */
-    public P build();
-}
diff --git a/facebook/src/main/java/com/facebook/share/Sharer.java b/facebook/src/main/java/com/facebook/share/Sharer.java
deleted file mode 100644
index 1f22d52a4..000000000
--- a/facebook/src/main/java/com/facebook/share/Sharer.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share;
-
-/**
- * The common interface for components that initiate sharing.
- * @see com.facebook.share.widget.ShareDialog
- * @see com.facebook.share.widget.MessageDialog
- */
-public interface Sharer {
-    /**
-     * Specifies whether the sharer should fail if it finds an error with the share content.
-     * If false, the share dialog will still be displayed without the data that was mis-configured.
-     * For example, an invalid placeID specified on the shareContent would produce a data error.
-     * @return A Boolean value.
-     */
-    public boolean getShouldFailOnDataError();
-
-    /**
-     * Specifies whether the sharer should fail if it finds an error with the share content.
-     * If false, the share dialog will still be displayed without the data that was mis-configured.
-     * For example, an invalid placeID specified on the shareContent would produce a data error.
-     *
-     * @param shouldFailOnDataError whether the dialog should fail if it finds an error.
-     */
-    public void setShouldFailOnDataError(boolean shouldFailOnDataError);
-
-    /**
-     * Helper object for handling the result from a share dialog or share operation
-     */
-    public static class Result {
-        final String postId;
-
-        /**
-         * Constructor.
-         * @param postId the resulting post id.
-         */
-        public Result(String postId) {
-            this.postId = postId;
-        }
-
-        /**
-         * Returns the post id, if available.
-         * @return the post id.
-         */
-        public String getPostId() {
-            return postId;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/AppInviteDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/AppInviteDialogFeature.java
deleted file mode 100644
index b6d224742..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/AppInviteDialogFeature.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum AppInviteDialogFeature implements DialogFeature {
-
-    // This matches a value in a sitevar. DO NOT CHANGE
-    APP_INVITES_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140701);
-
-    private int minVersion;
-
-    AppInviteDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    public String getAction() {
-        return NativeProtocol.ACTION_APPINVITE_DIALOG;
-    }
-
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
deleted file mode 100644
index 82bc20cef..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
+++ /dev/null
@@ -1,292 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.DialogFragment;
-import android.text.Html;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import com.facebook.FacebookRequestError;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.R;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class DeviceShareDialogFragment extends DialogFragment {
-    public static final String TAG = "DeviceShareDialogFragment";
-    private static final String DEVICE_SHARE_ENDPOINT = "device/share";
-    private static final String REQUEST_STATE_KEY = "request_state";
-    private ProgressBar progressBar;
-    private TextView confirmationCode;
-    private Dialog dialog;
-    private volatile RequestState currentRequestState;
-    private volatile ScheduledFuture codeExpiredFuture;
-    private static ScheduledThreadPoolExecutor backgroundExecutor;
-    private ShareContent shareContent;
-
-    @Nullable
-    @Override
-    public View onCreateView(
-            LayoutInflater inflater,
-            ViewGroup container,
-            Bundle savedInstanceState) {
-        View view = super.onCreateView(inflater, container, savedInstanceState);
-        if (savedInstanceState != null) {
-            RequestState requestState = savedInstanceState.getParcelable(REQUEST_STATE_KEY);
-            if (requestState != null) {
-                setCurrentRequestState(requestState);
-            }
-        }
-        return view;
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
-        LayoutInflater inflater = getActivity().getLayoutInflater();
-        View view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
-        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
-        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
-
-        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
-        cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
-        });
-
-        TextView instructions = (TextView)view.findViewById(
-                R.id.com_facebook_device_auth_instructions);
-        instructions.setText(
-                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
-
-        dialog.setContentView(view);
-
-        this.startShare();
-        return dialog;
-    }
-
-    @Override
-    public void onDismiss(final DialogInterface dialog) {
-        super.onDismiss(dialog);
-        if (codeExpiredFuture != null) {
-            codeExpiredFuture.cancel(true);
-        }
-        Intent resultIntent = new Intent();
-        finishActivity(Activity.RESULT_OK, resultIntent);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        if (currentRequestState != null) {
-            outState.putParcelable(REQUEST_STATE_KEY, currentRequestState);
-        }
-    }
-
-    private void finishActivity(int resultCode, Intent data) {
-        if (isAdded()) {
-            Activity activity = getActivity();
-            activity.setResult(resultCode, data);
-            activity.finish();
-        }
-    }
-
-    private void detach() {
-        if (isAdded()) {
-            this.getFragmentManager().beginTransaction().remove(this).commit();
-        }
-    }
-
-    public void setShareContent(ShareContent shareContent) {
-        this.shareContent = shareContent;
-    }
-
-    private Bundle getGraphParametersForShareContent() {
-        ShareContent content = this.shareContent;
-        if (content == null) {
-            return null;
-        }
-        if (content instanceof ShareLinkContent) {
-            return WebDialogParameters.create((ShareLinkContent)content);
-        } else if (content instanceof ShareOpenGraphContent) {
-            return WebDialogParameters.create((ShareOpenGraphContent)content);
-        }
-        return null;
-    }
-
-    private void startShare() {
-        Bundle parameters = getGraphParametersForShareContent();
-        if (parameters == null || parameters.size() == 0) {
-            this.finishActivityWithError(
-                    new FacebookRequestError(0, "", "Failed to get share content"));
-        }
-        String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
-        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
-        GraphRequest graphRequest = new GraphRequest(
-                null,
-                DEVICE_SHARE_ENDPOINT,
-                parameters,
-                HttpMethod.POST,
-                new GraphRequest.Callback() {
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        FacebookRequestError error = response.getError();
-                        if (error != null) {
-                            finishActivityWithError(error);
-                            return;
-                        }
-
-                        JSONObject jsonObject = response.getJSONObject();
-                        RequestState requestState = new RequestState();
-                        try {
-                            requestState.setUserCode(jsonObject.getString("user_code"));
-                            requestState.setExpiresIn(jsonObject.getLong("expires_in"));
-                        } catch (JSONException ex) {
-                            finishActivityWithError(
-                                    new FacebookRequestError(0, "", "Malformed server response"));
-                            return;
-                        }
-
-                        setCurrentRequestState(requestState);
-                    }
-                });
-        graphRequest.executeAsync();
-    }
-
-    private void finishActivityWithError(FacebookRequestError error) {
-        // detach so that we don't send a cancellation message back ondismiss.
-        detach();
-        Intent intent = new Intent();
-        intent.putExtra("error", error);
-        finishActivity(Activity.RESULT_OK, intent);
-    }
-
-    private static synchronized ScheduledThreadPoolExecutor getBackgroundExecutor() {
-        if (backgroundExecutor == null) {
-            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
-        }
-        return backgroundExecutor;
-    }
-
-    private void setCurrentRequestState(RequestState currentRequestState) {
-        this.currentRequestState = currentRequestState;
-        confirmationCode.setText(currentRequestState.getUserCode());
-        confirmationCode.setVisibility(View.VISIBLE);
-        progressBar.setVisibility(View.GONE);
-
-        codeExpiredFuture = getBackgroundExecutor().schedule(
-                new Runnable() {
-                    @Override
-                    public void run() {
-                        dialog.dismiss();
-                    }
-                },
-                currentRequestState.getExpiresIn(),
-                TimeUnit.SECONDS);
-    }
-
-    private static class RequestState implements Parcelable {
-        private String userCode;
-        private long expiresIn;
-
-        RequestState() {}
-
-        public String getUserCode() {
-            return userCode;
-        }
-
-        public void setUserCode(String userCode) {
-            this.userCode = userCode;
-        }
-
-        public long getExpiresIn() {
-            return expiresIn;
-        }
-
-        public void setExpiresIn(long expiresIn) {
-            this.expiresIn = expiresIn;
-        }
-
-
-        protected RequestState(Parcel in) {
-            userCode = in.readString();
-            expiresIn = in.readLong();
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel dest, int flags) {
-            dest.writeString(userCode);
-            dest.writeLong(expiresIn);
-        }
-
-        @SuppressWarnings("unused")
-        public static final Parcelable.Creator<RequestState> CREATOR =
-                new Parcelable.Creator<RequestState>() {
-                    @Override
-                    public RequestState createFromParcel(Parcel in) {
-                        return new RequestState(in);
-                    }
-
-                    @Override
-                    public RequestState[] newArray(int size) {
-                        return new RequestState[size];
-                    }
-                };
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/GameRequestValidation.java b/facebook/src/main/java/com/facebook/share/internal/GameRequestValidation.java
deleted file mode 100644
index 4ff10df2c..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/GameRequestValidation.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.Validate;
-import com.facebook.share.model.GameRequestContent;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Validates GameRequestContent before it is shown by GameRequestDialog
- */
-public class GameRequestValidation {
-
-    public static void validate(GameRequestContent content) {
-        Validate.notNull(content.getMessage(), "message");
-        if (content.getObjectId() != null ^
-                (content.getActionType() == GameRequestContent.ActionType.ASKFOR
-                || content.getActionType() == GameRequestContent.ActionType.SEND)) {
-            throw new IllegalArgumentException(
-                    "Object id should be provided if and only if action type is send or askfor");
-        }
-
-        // parameters recipients, filters, suggestions are mutually exclusive
-        int mutex = 0;
-        if (content.getRecipients() != null) {
-            mutex++;
-        }
-        if (content.getSuggestions() != null) {
-            mutex++;
-        }
-        if (content.getFilters() != null) {
-            mutex++;
-        }
-        if (mutex > 1) {
-            throw new IllegalArgumentException(
-                    "Parameters to, filters and suggestions are mutually exclusive");
-        }
-    }
-
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
deleted file mode 100644
index a00f9e5fc..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
+++ /dev/null
@@ -1,157 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.os.Bundle;
-
-import com.facebook.FacebookException;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class LegacyNativeDialogParameters {
-
-    public static Bundle create(
-            UUID callId,
-            ShareContent shareContent,
-            boolean shouldFailOnDataError) {
-        Validate.notNull(shareContent, "shareContent");
-        Validate.notNull(callId, "callId");
-
-        Bundle nativeParams = null;
-        if (shareContent instanceof ShareLinkContent) {
-            final ShareLinkContent linkContent = (ShareLinkContent)shareContent;
-            nativeParams = create(linkContent, shouldFailOnDataError);
-        } else if (shareContent instanceof SharePhotoContent) {
-            final SharePhotoContent photoContent = (SharePhotoContent)shareContent;
-            List<String> photoUrls = ShareInternalUtility.getPhotoUrls(
-                    photoContent,
-                    callId);
-
-            nativeParams = create(photoContent, photoUrls, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareVideoContent) {
-            final ShareVideoContent videoContent = (ShareVideoContent)shareContent;
-            nativeParams = create(videoContent, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareOpenGraphContent) {
-            final ShareOpenGraphContent openGraphContent = (ShareOpenGraphContent) shareContent;
-            try {
-                JSONObject openGraphActionJSON = ShareInternalUtility.toJSONObjectForCall(
-                        callId, openGraphContent);
-
-                nativeParams = create(openGraphContent, openGraphActionJSON, shouldFailOnDataError);
-            } catch (final JSONException e) {
-                throw new FacebookException(
-                        "Unable to create a JSON Object from the provided ShareOpenGraphContent: "
-                                + e.getMessage());
-            }
-        }
-
-        return nativeParams;
-    }
-
-    private static Bundle create(ShareLinkContent linkContent, boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(linkContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(
-                params, ShareConstants.LEGACY_TITLE, linkContent.getContentTitle());
-        Utility.putNonEmptyString(
-                params, ShareConstants.LEGACY_DESCRIPTION, linkContent.getContentDescription());
-        Utility.putUri(params, ShareConstants.LEGACY_IMAGE, linkContent.getImageUrl());
-
-        return params;
-    }
-
-    private static Bundle create(
-            SharePhotoContent photoContent,
-            List<String> imageUrls,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(photoContent, dataErrorsFatal);
-
-        params.putStringArrayList(ShareConstants.LEGACY_PHOTOS, new ArrayList<>(imageUrls));
-
-        return params;
-    }
-
-    private static Bundle create(ShareVideoContent videoContent, boolean dataErrorsFatal) {
-        // Not supported
-        return null;
-    }
-
-    private static Bundle create(
-            ShareOpenGraphContent openGraphContent,
-            JSONObject openGraphActionJSON,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(openGraphContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.LEGACY_PREVIEW_PROPERTY_NAME,
-                openGraphContent.getPreviewPropertyName());
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.LEGACY_ACTION_TYPE,
-                openGraphContent.getAction().getActionType());
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.LEGACY_ACTION,
-                openGraphActionJSON.toString());
-
-        return params;
-    }
-
-    private static Bundle createBaseParameters(ShareContent content, boolean dataErrorsFatal) {
-        Bundle params = new Bundle();
-
-        Utility.putUri(params, ShareConstants.LEGACY_LINK, content.getContentUrl());
-        Utility.putNonEmptyString(params, ShareConstants.LEGACY_PLACE_TAG, content.getPlaceId());
-        Utility.putNonEmptyString(params, ShareConstants.LEGACY_REF, content.getRef());
-
-        params.putBoolean(ShareConstants.LEGACY_DATA_FAILURES_FATAL, dataErrorsFatal);
-
-        List<String> peopleIds = content.getPeopleIds();
-        if (!Utility.isNullOrEmpty(peopleIds)) {
-            params.putStringArrayList(
-                    ShareConstants.LEGACY_FRIEND_TAGS,
-                    new ArrayList<>(peopleIds));
-        }
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
deleted file mode 100644
index 04caec8ef..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
+++ /dev/null
@@ -1,1772 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.app.Activity;
-import android.content.*;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-
-import com.facebook.*;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.BundleJSONConverter;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FileLruCache;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.internal.Logger;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.internal.WorkQueue;
-import com.facebook.share.widget.LikeView;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.Locale;
-import java.util.concurrent.ConcurrentHashMap;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class LikeActionController {
-
-    public static final String ACTION_LIKE_ACTION_CONTROLLER_UPDATED =
-            "com.facebook.sdk.LikeActionController.UPDATED";
-    public static final String ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR =
-            "com.facebook.sdk.LikeActionController.DID_ERROR";
-    public static final String ACTION_LIKE_ACTION_CONTROLLER_DID_RESET =
-            "com.facebook.sdk.LikeActionController.DID_RESET";
-
-    public static final String ACTION_OBJECT_ID_KEY =
-            "com.facebook.sdk.LikeActionController.OBJECT_ID";
-
-    public static final String ERROR_INVALID_OBJECT_ID = "Invalid Object Id";
-    public static final String ERROR_PUBLISH_ERROR = "Unable to publish the like/unlike action";
-
-    private static final String TAG = LikeActionController.class.getSimpleName();
-
-    private static final int LIKE_ACTION_CONTROLLER_VERSION = 3;
-    private static final int MAX_CACHE_SIZE = 128;
-    // MAX_OBJECT_SUFFIX basically accommodates for 1000 access token changes before the async
-    // disk-cache-clear finishes. The value is reasonably arbitrary.
-    private static final int MAX_OBJECT_SUFFIX = 1000;
-
-    private static final String LIKE_ACTION_CONTROLLER_STORE =
-            "com.facebook.LikeActionController.CONTROLLER_STORE_KEY";
-    private static final String LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY =
-            "PENDING_CONTROLLER_KEY";
-    private static final String LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY = "OBJECT_SUFFIX";
-
-    private static final String JSON_INT_VERSION_KEY =
-            "com.facebook.share.internal.LikeActionController.version";
-    private static final String JSON_STRING_OBJECT_ID_KEY = "object_id";
-    private static final String JSON_INT_OBJECT_TYPE_KEY = "object_type";
-    private static final String JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY =
-            "like_count_string_with_like";
-    private static final String JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY =
-            "like_count_string_without_like";
-    private static final String JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY =
-            "social_sentence_with_like";
-    private static final String JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY =
-            "social_sentence_without_like";
-    private static final String JSON_BOOL_IS_OBJECT_LIKED_KEY = "is_object_liked";
-    private static final String JSON_STRING_UNLIKE_TOKEN_KEY = "unlike_token";
-    private static final String JSON_BUNDLE_FACEBOOK_DIALOG_ANALYTICS_BUNDLE =
-            "facebook_dialog_analytics_bundle";
-
-    private static final String LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY = "object_is_liked";
-    private static final String LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY = "like_count_string";
-    private static final String LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY = "social_sentence";
-    private static final String LIKE_DIALOG_RESPONSE_UNLIKE_TOKEN_KEY = "unlike_token";
-
-    private static final int ERROR_CODE_OBJECT_ALREADY_LIKED = 3501;
-
-    private static FileLruCache controllerDiskCache;
-    private static final ConcurrentHashMap<String, LikeActionController> cache =
-            new ConcurrentHashMap<>();
-
-    // This MUST be 1 for proper synchronization
-    private static WorkQueue mruCacheWorkQueue = new WorkQueue(1);
-    // This MUST be 1 for proper synchronization
-    private static WorkQueue diskIOWorkQueue = new WorkQueue(1);
-
-    private static Handler handler;
-    private static String objectIdForPendingController;
-    private static boolean isInitialized;
-    private static volatile int objectSuffix;
-    private static AccessTokenTracker accessTokenTracker;
-
-    private String objectId;
-    private LikeView.ObjectType objectType;
-    private boolean isObjectLiked;
-    private String likeCountStringWithLike;
-    private String likeCountStringWithoutLike;
-    private String socialSentenceWithLike;
-    private String socialSentenceWithoutLike;
-    private String unlikeToken;
-
-    private String verifiedObjectId;
-    private boolean objectIsPage;
-    private boolean isObjectLikedOnServer;
-
-    private boolean isPendingLikeOrUnlike;
-
-    private Bundle facebookDialogAnalyticsBundle;
-
-    private AppEventsLogger appEventsLogger;
-
-    /**
-     * Called from CallbackManager to process any pending likes that had resulted in the Like
-     * dialog being displayed
-     *
-     * @param requestCode From the originating call to onActivityResult
-     * @param resultCode  From the originating call to onActivityResult
-     * @param data        From the originating call to onActivityResult
-     * @return Indication of whether the Intent was handled
-     */
-    public static boolean handleOnActivityResult(final int requestCode,
-                                                 final int resultCode,
-                                                 final Intent data) {
-        // See if we were waiting on a Like dialog completion.
-        if (Utility.isNullOrEmpty(objectIdForPendingController)) {
-            Context appContext = FacebookSdk.getApplicationContext();
-            SharedPreferences sharedPreferences = appContext.getSharedPreferences(
-                    LIKE_ACTION_CONTROLLER_STORE,
-                    Context.MODE_PRIVATE);
-
-            objectIdForPendingController = sharedPreferences.getString(
-                    LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY,
-                    null);
-        }
-
-        if (Utility.isNullOrEmpty(objectIdForPendingController)) {
-            // Doesn't look like we were waiting on a Like dialog completion
-            return false;
-        }
-
-        getControllerForObjectId(
-                objectIdForPendingController,
-                LikeView.ObjectType.UNKNOWN,
-                new CreationCallback() {
-                    @Override
-                    public void onComplete(
-                            LikeActionController likeActionController,
-                            FacebookException error) {
-                        if (error == null) {
-                            likeActionController.onActivityResult(
-                                    requestCode,
-                                    resultCode,
-                                    data);
-                        } else {
-                            Utility.logd(TAG, error);
-                        }
-                    }
-                });
-
-        return true;
-    }
-
-    /**
-     * Called by the LikeView when an object-id is set on it.
-     *
-     * @param objectId Object Id
-     * @param callback Callback to be invoked when the LikeActionController has been created.
-     */
-    public static void getControllerForObjectId(
-            String objectId,
-            LikeView.ObjectType objectType,
-            CreationCallback callback) {
-        if (!isInitialized) {
-            performFirstInitialize();
-        }
-
-        LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);
-        if (controllerForObject != null) {
-            // Direct object-cache hit
-            verifyControllerAndInvokeCallback(controllerForObject, objectType, callback);
-        } else {
-            diskIOWorkQueue.addActiveWorkItem(
-                    new CreateLikeActionControllerWorkItem(objectId, objectType, callback));
-        }
-    }
-
-    private static void verifyControllerAndInvokeCallback(
-            LikeActionController likeActionController,
-            LikeView.ObjectType objectType,
-            CreationCallback callback) {
-        LikeView.ObjectType bestObjectType = ShareInternalUtility.getMostSpecificObjectType(
-                objectType,
-                likeActionController.objectType);
-        FacebookException error = null;
-        if (bestObjectType == null) {
-            // Looks like the existing controller has an object_type for this object_id that is
-            // not compatible with the requested object type.
-            error = new FacebookException(
-                    "Object with id:\"%s\" is already marked as type:\"%s\". " +
-                            "Cannot change the type to:\"%s\"",
-                    likeActionController.objectId,
-                    likeActionController.objectType.toString(),
-                    objectType.toString());
-            likeActionController = null;
-        } else {
-            likeActionController.objectType = bestObjectType;
-        }
-
-        invokeCallbackWithController(callback, likeActionController, error);
-    }
-
-    /**
-     * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure
-     * that it happens on the right thread, at the right time.
-     */
-    private static void createControllerForObjectIdAndType(
-            String objectId,
-            LikeView.ObjectType objectType,
-            CreationCallback callback) {
-        // Check again to see if the controller was created before attempting to deserialize/create
-        // one. Need to check this in the case where multiple LikeViews are looking for a controller
-        // for the same object and all got queued up to create one. We only want the first one to go
-        // through with the creation, and the rest should get the same instance from the
-        // object-cache.
-        LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);
-        if (controllerForObject != null) {
-            // Direct object-cache hit
-            verifyControllerAndInvokeCallback(controllerForObject, objectType, callback);
-            return;
-        }
-
-        // Try deserialize from disk
-        controllerForObject = deserializeFromDiskSynchronously(objectId);
-
-        if (controllerForObject == null) {
-            controllerForObject = new LikeActionController(objectId, objectType);
-            serializeToDiskAsync(controllerForObject);
-        }
-
-        // Update object-cache.
-        putControllerInMemoryCache(objectId, controllerForObject);
-
-        // Refresh the controller on the Main thread.
-        final LikeActionController controllerToRefresh = controllerForObject;
-        handler.post(new Runnable() {
-            @Override
-            public void run() {
-                controllerToRefresh.refreshStatusAsync();
-            }
-        });
-
-        invokeCallbackWithController(callback, controllerToRefresh, null);
-    }
-
-    private synchronized static void performFirstInitialize() {
-        if (isInitialized) {
-            return;
-        }
-
-        handler = new Handler(Looper.getMainLooper());
-
-        Context appContext = FacebookSdk.getApplicationContext();
-        SharedPreferences sharedPreferences = appContext.getSharedPreferences(
-                LIKE_ACTION_CONTROLLER_STORE,
-                Context.MODE_PRIVATE);
-
-        objectSuffix = sharedPreferences.getInt(LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY, 1);
-        controllerDiskCache = new FileLruCache(TAG, new FileLruCache.Limits());
-
-        registerAccessTokenTracker();
-
-        CallbackManagerImpl.registerStaticCallback(
-                CallbackManagerImpl.RequestCodeOffset.Like.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return handleOnActivityResult(
-                                CallbackManagerImpl.RequestCodeOffset.Like.toRequestCode(),
-                                resultCode,
-                                data);
-                    }
-                });
-
-        isInitialized = true;
-    }
-
-    private static void invokeCallbackWithController(
-            final CreationCallback callback,
-            final LikeActionController controller,
-            final FacebookException error) {
-        if (callback == null) {
-            return;
-        }
-
-        handler.post(new Runnable() {
-            @Override
-            public void run() {
-                callback.onComplete(controller, error);
-            }
-        });
-    }
-
-    //
-    // In-memory mru-caching code
-    //
-
-    private static void registerAccessTokenTracker() {
-        accessTokenTracker = new AccessTokenTracker() {
-            @Override
-            protected void onCurrentAccessTokenChanged(
-                    AccessToken oldAccessToken,
-                    AccessToken currentAccessToken) {
-                Context appContext = FacebookSdk.getApplicationContext();
-                if (currentAccessToken == null) {
-                    // Bump up the objectSuffix so that we don't have a filename collision between a
-                    // cache-clear and and a cache-read/write.
-                    //
-                    // NOTE: We know that onReceive() was called on the main thread. This means that
-                    // even this code is running on the main thread, and therefore, there aren't
-                    // synchronization issues with incrementing the objectSuffix and clearing the
-                    // caches here.
-                    objectSuffix = (objectSuffix + 1) % MAX_OBJECT_SUFFIX;
-                    appContext.getSharedPreferences(
-                            LIKE_ACTION_CONTROLLER_STORE,
-                            Context.MODE_PRIVATE)
-                            .edit()
-                            .putInt(LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY, objectSuffix)
-                            .apply();
-
-                    // Only clearing the actual caches. The MRU index will self-clean with usage.
-                    // Clearing the caches is necessary to prevent leaking like-state across
-                    // users.
-                    cache.clear();
-                    controllerDiskCache.clearCache();
-                }
-                broadcastAction(null, ACTION_LIKE_ACTION_CONTROLLER_DID_RESET);
-            }
-        };
-    }
-
-    private static void putControllerInMemoryCache(
-            String objectId,
-            LikeActionController controllerForObject) {
-        String cacheKey = getCacheKeyForObjectId(objectId);
-        // Move this object to the front. Also trim cache if necessary
-        mruCacheWorkQueue.addActiveWorkItem(new MRUCacheWorkItem(cacheKey, true));
-
-        cache.put(cacheKey, controllerForObject);
-    }
-
-    private static LikeActionController getControllerFromInMemoryCache(String objectId) {
-        String cacheKey = getCacheKeyForObjectId(objectId);
-
-        LikeActionController controller = cache.get(cacheKey);
-        if (controller != null) {
-            // Move this object to the front
-            mruCacheWorkQueue.addActiveWorkItem(new MRUCacheWorkItem(cacheKey, false));
-        }
-
-        return controller;
-    }
-
-    //
-    // Disk caching code
-    //
-
-    private static void serializeToDiskAsync(LikeActionController controller) {
-        String controllerJson = serializeToJson(controller);
-        String cacheKey = getCacheKeyForObjectId(controller.objectId);
-
-        if (!Utility.isNullOrEmpty(controllerJson) && !Utility.isNullOrEmpty(cacheKey)) {
-            diskIOWorkQueue.addActiveWorkItem(
-                    new SerializeToDiskWorkItem(cacheKey, controllerJson));
-        }
-    }
-
-    /**
-     * NOTE: This MUST be called ONLY via the SerializeToDiskWorkItem class to ensure that it
-     * happens on the right thread, at the right time.
-     */
-    private static void serializeToDiskSynchronously(String cacheKey, String controllerJson) {
-        OutputStream outputStream = null;
-        try {
-            outputStream = controllerDiskCache.openPutStream(cacheKey);
-            outputStream.write(controllerJson.getBytes());
-        } catch (IOException e) {
-            Log.e(TAG, "Unable to serialize controller to disk", e);
-        } finally {
-            if (outputStream != null) {
-                Utility.closeQuietly(outputStream);
-            }
-        }
-    }
-
-    /**
-     * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure
-     * that it happens on the right thread, at the right time.
-     */
-    private static LikeActionController deserializeFromDiskSynchronously(String objectId) {
-        LikeActionController controller = null;
-
-        InputStream inputStream = null;
-        try {
-            String cacheKey = getCacheKeyForObjectId(objectId);
-            inputStream = controllerDiskCache.get(cacheKey);
-            if (inputStream != null) {
-                String controllerJsonString = Utility.readStreamToString(inputStream);
-                if (!Utility.isNullOrEmpty(controllerJsonString)) {
-                    controller = deserializeFromJson(controllerJsonString);
-                }
-            }
-        } catch (IOException e) {
-            Log.e(TAG, "Unable to deserialize controller from disk", e);
-            controller = null;
-        } finally {
-            if (inputStream != null) {
-                Utility.closeQuietly(inputStream);
-            }
-        }
-
-        return controller;
-    }
-
-    private static LikeActionController deserializeFromJson(String controllerJsonString) {
-        LikeActionController controller;
-
-        try {
-            JSONObject controllerJson = new JSONObject(controllerJsonString);
-            int version = controllerJson.optInt(JSON_INT_VERSION_KEY, -1);
-            if (version != LIKE_ACTION_CONTROLLER_VERSION) {
-                // Don't attempt to deserialize a controller that might be serialized differently
-                // than expected.
-                return null;
-            }
-
-            String objectId = controllerJson.getString(JSON_STRING_OBJECT_ID_KEY);
-            int objectTypeInt = controllerJson.optInt(
-                    JSON_INT_OBJECT_TYPE_KEY,
-                    LikeView.ObjectType.UNKNOWN.getValue());
-
-            controller = new LikeActionController(
-                    objectId,
-                    LikeView.ObjectType.fromInt(objectTypeInt));
-
-            // Make sure to default to null and not empty string, to keep the logic elsewhere
-            // functioning properly.
-            controller.likeCountStringWithLike =
-                    controllerJson.optString(JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY, null);
-            controller.likeCountStringWithoutLike =
-                    controllerJson.optString(JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY, null);
-            controller.socialSentenceWithLike =
-                    controllerJson.optString(JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY, null);
-            controller.socialSentenceWithoutLike =
-                    controllerJson.optString(JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY, null);
-            controller.isObjectLiked = controllerJson.optBoolean(JSON_BOOL_IS_OBJECT_LIKED_KEY);
-            controller.unlikeToken = controllerJson.optString(JSON_STRING_UNLIKE_TOKEN_KEY, null);
-
-            JSONObject analyticsJSON = controllerJson.optJSONObject(
-                    JSON_BUNDLE_FACEBOOK_DIALOG_ANALYTICS_BUNDLE);
-            if (analyticsJSON != null) {
-                controller.facebookDialogAnalyticsBundle =
-                        BundleJSONConverter.convertToBundle(analyticsJSON);
-            }
-        } catch (JSONException e) {
-            Log.e(TAG, "Unable to deserialize controller from JSON", e);
-            controller = null;
-        }
-
-        return controller;
-    }
-
-    private static String serializeToJson(LikeActionController controller) {
-        JSONObject controllerJson = new JSONObject();
-        try {
-            controllerJson.put(JSON_INT_VERSION_KEY, LIKE_ACTION_CONTROLLER_VERSION);
-            controllerJson.put(JSON_STRING_OBJECT_ID_KEY, controller.objectId);
-            controllerJson.put(JSON_INT_OBJECT_TYPE_KEY, controller.objectType.getValue());
-            controllerJson.put(
-                    JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY,
-                    controller.likeCountStringWithLike);
-            controllerJson.put(
-                    JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY,
-                    controller.likeCountStringWithoutLike);
-            controllerJson.put(
-                    JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY,
-                    controller.socialSentenceWithLike);
-            controllerJson.put(
-                    JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY,
-                    controller.socialSentenceWithoutLike);
-            controllerJson.put(JSON_BOOL_IS_OBJECT_LIKED_KEY, controller.isObjectLiked);
-            controllerJson.put(JSON_STRING_UNLIKE_TOKEN_KEY, controller.unlikeToken);
-            if (controller.facebookDialogAnalyticsBundle != null) {
-                JSONObject analyticsJSON =
-                        BundleJSONConverter.convertToJSON(
-                                controller.facebookDialogAnalyticsBundle);
-                if (analyticsJSON != null) {
-                    controllerJson.put(
-                            JSON_BUNDLE_FACEBOOK_DIALOG_ANALYTICS_BUNDLE,
-                            analyticsJSON);
-                }
-            }
-        } catch (JSONException e) {
-            Log.e(TAG, "Unable to serialize controller to JSON", e);
-            return null;
-        }
-
-        return controllerJson.toString();
-    }
-
-    private static String getCacheKeyForObjectId(String objectId) {
-        String accessTokenPortion = null;
-        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        if (accessToken != null) {
-            accessTokenPortion = accessToken.getToken();
-        }
-        if (accessTokenPortion != null) {
-            // Cache-key collisions are not something to worry about here, since we only store state
-            // for one access token. Even in the case where the previous access tokens serialized
-            // files have not been deleted yet, the objectSuffix will be different due to the access
-            // token change, thus making the key different.
-            accessTokenPortion = Utility.md5hash(accessTokenPortion);
-        }
-        return String.format(
-                Locale.ROOT,
-                "%s|%s|com.fb.sdk.like|%d",
-                objectId,
-                Utility.coerceValueIfNullOrEmpty(accessTokenPortion, ""),
-                objectSuffix);
-    }
-
-    //
-    // Broadcast handling code
-    //
-
-    private static void broadcastAction(
-            LikeActionController controller,
-            String action) {
-        broadcastAction(controller, action, null);
-    }
-
-    private static void broadcastAction(
-            LikeActionController controller,
-            String action,
-            Bundle data) {
-        Intent broadcastIntent = new Intent(action);
-        if (controller != null) {
-            if (data == null) {
-                data = new Bundle();
-            }
-
-            data.putString(ACTION_OBJECT_ID_KEY, controller.getObjectId());
-        }
-
-        if (data != null) {
-            broadcastIntent.putExtras(data);
-        }
-        LocalBroadcastManager.getInstance(FacebookSdk.getApplicationContext())
-                .sendBroadcast(broadcastIntent);
-    }
-
-    /**
-     * Constructor
-     */
-    private LikeActionController(String objectId, LikeView.ObjectType objectType) {
-        this.objectId = objectId;
-        this.objectType = objectType;
-    }
-
-    /**
-     * Gets the the associated object id
-     *
-     * @return object id
-     */
-    public String getObjectId() {
-        return objectId;
-    }
-
-    /**
-     * Gets the String representation of the like-count for the associated object
-     *
-     * @return String representation of the like-count for the associated object
-     */
-    public String getLikeCountString() {
-        return isObjectLiked ? likeCountStringWithLike : likeCountStringWithoutLike;
-    }
-
-    /**
-     * Gets the String representation of the like-count for the associated object
-     *
-     * @return String representation of the like-count for the associated object
-     */
-    public String getSocialSentence() {
-        return isObjectLiked ? socialSentenceWithLike : socialSentenceWithoutLike;
-    }
-
-    /**
-     * Indicates whether the associated object is liked
-     *
-     * @return Indication of whether the associated object is liked
-     */
-    public boolean isObjectLiked() {
-        return isObjectLiked;
-    }
-
-    /**
-     * Indicates whether the LikeView should enable itself.
-     *
-     * @return Indication of whether the LikeView should enable itself.
-     */
-    public boolean shouldEnableView() {
-        if (LikeDialog.canShowNativeDialog() || LikeDialog.canShowWebFallback()) {
-            return true;
-        }
-        if (objectIsPage || (objectType == LikeView.ObjectType.PAGE)) {
-            // If we can't use the dialogs, then we can't like Pages.
-            // Before any requests are made to the server, we have to rely on the object type set
-            // by the app. If we have permissions to make requests, we will know the real type after
-            // the first request.
-            return false;
-        }
-
-        // See if we have publish permissions.
-        // NOTE: This will NOT be accurate if the app has the type set as UNKNOWN, and the
-        // underlying object is a page.
-        AccessToken token = AccessToken.getCurrentAccessToken();
-        return token != null
-                && token.getPermissions() != null
-                && token.getPermissions().contains("publish_actions");
-    }
-
-    /**
-     * Entry-point to the code that performs the like/unlike action.
-     */
-    public void toggleLike(
-            Activity activity,
-            FragmentWrapper fragment,
-            Bundle analyticsParameters) {
-        boolean shouldLikeObject = !this.isObjectLiked;
-
-        if (canUseOGPublish()) {
-            // Update UI Like state optimistically
-            updateLikeState(shouldLikeObject);
-            if (isPendingLikeOrUnlike) {
-                // If the user toggled the button quickly, and there is still a publish underway,
-                // don't fire off another request. Also log this behavior.
-
-                getAppEventsLogger().logSdkEvent(
-                        AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNDO_QUICKLY,
-                        null,
-                        analyticsParameters);
-            } else if (!publishLikeOrUnlikeAsync(shouldLikeObject, analyticsParameters)) {
-                // We were not able to send a graph request to unlike or like the object
-                // Undo the optimistic state-update and show the dialog instead
-                updateLikeState(!shouldLikeObject);
-                presentLikeDialog(activity, fragment, analyticsParameters);
-            }
-        } else {
-            presentLikeDialog(activity, fragment, analyticsParameters);
-        }
-    }
-
-    private AppEventsLogger getAppEventsLogger() {
-        if (appEventsLogger == null) {
-            appEventsLogger = AppEventsLogger.newLogger(FacebookSdk.getApplicationContext());
-        }
-        return appEventsLogger;
-    }
-
-    private boolean publishLikeOrUnlikeAsync(
-            boolean shouldLikeObject,
-            Bundle analyticsParameters) {
-        boolean requested = false;
-        if (canUseOGPublish()) {
-            if (shouldLikeObject) {
-                requested = true;
-                publishLikeAsync(analyticsParameters);
-            } else if (!Utility.isNullOrEmpty(this.unlikeToken)) {
-                requested = true;
-                publishUnlikeAsync(analyticsParameters);
-            }
-        }
-
-        return requested;
-    }
-
-    /**
-     * Only to be called after an OG-publish was attempted and something went wrong. The Button
-     * state is reverted and an error is returned to the LikeViews
-     */
-    private void publishDidError(boolean oldLikeState) {
-        updateLikeState(oldLikeState);
-
-        Bundle errorBundle = new Bundle();
-        errorBundle.putString(
-                NativeProtocol.STATUS_ERROR_DESCRIPTION,
-                ERROR_PUBLISH_ERROR);
-
-        broadcastAction(
-                LikeActionController.this,
-                ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR,
-                errorBundle);
-    }
-
-    private void updateLikeState(boolean isObjectLiked) {
-        updateState(isObjectLiked,
-                this.likeCountStringWithLike,
-                this.likeCountStringWithoutLike,
-                this.socialSentenceWithLike,
-                this.socialSentenceWithoutLike,
-                this.unlikeToken);
-    }
-
-    private void updateState(boolean isObjectLiked,
-                             String likeCountStringWithLike,
-                             String likeCountStringWithoutLike,
-                             String socialSentenceWithLike,
-                             String socialSentenceWithoutLike,
-                             String unlikeToken) {
-        // Normalize all empty strings to null, so that we don't have any problems with comparison.
-        likeCountStringWithLike = Utility.coerceValueIfNullOrEmpty(likeCountStringWithLike, null);
-        likeCountStringWithoutLike =
-                Utility.coerceValueIfNullOrEmpty(likeCountStringWithoutLike, null);
-        socialSentenceWithLike = Utility.coerceValueIfNullOrEmpty(socialSentenceWithLike, null);
-        socialSentenceWithoutLike =
-                Utility.coerceValueIfNullOrEmpty(socialSentenceWithoutLike, null);
-        unlikeToken = Utility.coerceValueIfNullOrEmpty(unlikeToken, null);
-
-        boolean stateChanged = isObjectLiked != this.isObjectLiked ||
-                !Utility.areObjectsEqual(
-                        likeCountStringWithLike,
-                        this.likeCountStringWithLike) ||
-                !Utility.areObjectsEqual(
-                        likeCountStringWithoutLike,
-                        this.likeCountStringWithoutLike) ||
-                !Utility.areObjectsEqual(socialSentenceWithLike, this.socialSentenceWithLike) ||
-                !Utility.areObjectsEqual(
-                        socialSentenceWithoutLike,
-                        this.socialSentenceWithoutLike) ||
-                !Utility.areObjectsEqual(unlikeToken, this.unlikeToken);
-
-        if (!stateChanged) {
-            return;
-        }
-
-        this.isObjectLiked = isObjectLiked;
-        this.likeCountStringWithLike = likeCountStringWithLike;
-        this.likeCountStringWithoutLike = likeCountStringWithoutLike;
-        this.socialSentenceWithLike = socialSentenceWithLike;
-        this.socialSentenceWithoutLike = socialSentenceWithoutLike;
-        this.unlikeToken = unlikeToken;
-
-        serializeToDiskAsync(this);
-
-        broadcastAction(this, ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
-    }
-
-    private void presentLikeDialog(
-            final Activity activity,
-            final FragmentWrapper fragmentWrapper,
-            final Bundle analyticsParameters) {
-        String analyticsEvent = null;
-
-        if (LikeDialog.canShowNativeDialog()) {
-            analyticsEvent = AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_DIALOG;
-        } else if (LikeDialog.canShowWebFallback()) {
-            analyticsEvent = AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_FALLBACK;
-        } else {
-            // We will get here if the user tapped the button when dialogs cannot be shown.
-            logAppEventForError("present_dialog", analyticsParameters);
-            Utility.logd(TAG, "Cannot show the Like Dialog on this device.");
-
-            // If we got to this point, we should ask the views to check if they should now
-            // be disabled.
-            broadcastAction(null, ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
-        }
-
-        // Using the value of analyticsEvent to see if we can show any version of the dialog.
-        // Written this way just to prevent extra lines of code.
-        if (analyticsEvent != null) {
-            String objectTypeString = (this.objectType != null)
-                    ? this.objectType.toString()
-                    : LikeView.ObjectType.UNKNOWN.toString();
-            LikeContent likeContent = new LikeContent.Builder()
-                    .setObjectId(this.objectId)
-                    .setObjectType(objectTypeString)
-                    .build();
-
-            if (fragmentWrapper != null) {
-                new LikeDialog(fragmentWrapper).show(likeContent);
-            } else {
-                new LikeDialog(activity).show(likeContent);
-            }
-
-            saveState(analyticsParameters);
-
-            getAppEventsLogger().logSdkEvent(
-                    AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_DIALOG,
-                    null,
-                    analyticsParameters);
-        }
-    }
-
-    private void onActivityResult(
-            int requestCode,
-            int resultCode,
-            Intent data) {
-        // Look for results
-        ShareInternalUtility.handleActivityResult(
-                requestCode,
-                resultCode,
-                data,
-                getResultProcessor(facebookDialogAnalyticsBundle));
-
-        // The handlers from above will run synchronously. So by the time we get here, it should be
-        // safe to stop tracking this call and also serialize the controller to disk
-        clearState();
-    }
-
-    private ResultProcessor getResultProcessor(final Bundle analyticsParameters) {
-        return new ResultProcessor(null) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle data) {
-                if (data == null || !data.containsKey(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY)) {
-                    // This is an empty result that we can't handle.
-                    return;
-                }
-
-                boolean isObjectLiked = data.getBoolean(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY);
-
-                // Default to known/cached state, if properties are missing.
-                String likeCountStringWithLike =
-                        LikeActionController.this.likeCountStringWithLike;
-                String likeCountStringWithoutLike =
-                        LikeActionController.this.likeCountStringWithoutLike;
-                if (data.containsKey(LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY)) {
-                    likeCountStringWithLike =
-                            data.getString(LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY);
-                    likeCountStringWithoutLike = likeCountStringWithLike;
-                }
-
-                String socialSentenceWithLike = LikeActionController.this.socialSentenceWithLike;
-                String socialSentenceWithoutWithoutLike =
-                        LikeActionController.this.socialSentenceWithoutLike;
-                if (data.containsKey(LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY)) {
-                    socialSentenceWithLike = data.getString(
-                            LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY);
-                    socialSentenceWithoutWithoutLike = socialSentenceWithLike;
-                }
-
-                String unlikeToken = data.containsKey(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY)
-                        ? data.getString(LIKE_DIALOG_RESPONSE_UNLIKE_TOKEN_KEY)
-                        : LikeActionController.this.unlikeToken;
-
-                Bundle logParams =
-                        (analyticsParameters == null) ? new Bundle() : analyticsParameters;
-                logParams.putString(
-                        AnalyticsEvents.PARAMETER_CALL_ID,
-                        appCall.getCallId().toString());
-                getAppEventsLogger().logSdkEvent(
-                        AnalyticsEvents.EVENT_LIKE_VIEW_DIALOG_DID_SUCCEED,
-                        null,
-                        logParams);
-
-                updateState(
-                        isObjectLiked,
-                        likeCountStringWithLike,
-                        likeCountStringWithoutLike,
-                        socialSentenceWithLike,
-                        socialSentenceWithoutWithoutLike,
-                        unlikeToken);
-            }
-
-            @Override
-            public void onError(AppCall appCall, FacebookException error) {
-                Logger.log(
-                        LoggingBehavior.REQUESTS,
-                        TAG,
-                        "Like Dialog failed with error : %s",
-                        error);
-
-                Bundle logParams = analyticsParameters == null ? new Bundle() : analyticsParameters;
-                logParams.putString(
-                        AnalyticsEvents.PARAMETER_CALL_ID,
-                        appCall.getCallId().toString());
-
-                // Log the error and AppEvent
-                logAppEventForError("present_dialog", logParams);
-
-                broadcastAction(
-                        LikeActionController.this,
-                        ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR,
-                        NativeProtocol.createBundleForException(error));
-            }
-
-            @Override
-            public void onCancel(AppCall appCall) {
-                onError(appCall, new FacebookOperationCanceledException());
-            }
-        };
-    }
-
-    private void saveState(Bundle analyticsParameters) {
-        // Save off the call id for processing the response
-        storeObjectIdForPendingController(objectId);
-
-        // Store off the analytics parameters as well, for completion-logging
-        facebookDialogAnalyticsBundle = analyticsParameters;
-
-        // Serialize to disk, in case we get terminated while waiting for the dialog to complete
-        serializeToDiskAsync(this);
-    }
-
-    private void clearState() {
-        facebookDialogAnalyticsBundle = null;
-
-        storeObjectIdForPendingController(null);
-    }
-
-    private static void storeObjectIdForPendingController(String objectId) {
-        objectIdForPendingController = objectId;
-        Context appContext = FacebookSdk.getApplicationContext();
-
-        appContext.getSharedPreferences(LIKE_ACTION_CONTROLLER_STORE, Context.MODE_PRIVATE)
-                .edit()
-                .putString(
-                        LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY,
-                        objectIdForPendingController)
-                .apply();
-    }
-
-    private boolean canUseOGPublish() {
-        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        // Verify that the object isn't a Page, that we have permissions and that, if we're
-        // unliking, then we have an unlike token.
-        return !objectIsPage &&
-                verifiedObjectId != null &&
-                accessToken != null &&
-                accessToken.getPermissions() != null &&
-                accessToken.getPermissions().contains("publish_actions");
-    }
-
-    private void publishLikeAsync(final Bundle analyticsParameters) {
-        isPendingLikeOrUnlike = true;
-
-        fetchVerifiedObjectId(new RequestCompletionCallback() {
-            @Override
-            public void onComplete() {
-                if (Utility.isNullOrEmpty(verifiedObjectId)) {
-                    // Could not get a verified id
-                    Bundle errorBundle = new Bundle();
-                    errorBundle.putString(
-                            NativeProtocol.STATUS_ERROR_DESCRIPTION,
-                            ERROR_INVALID_OBJECT_ID);
-
-                    broadcastAction(
-                            LikeActionController.this,
-                            ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR,
-                            errorBundle);
-                    return;
-                }
-
-                // Perform the Like.
-                GraphRequestBatch requestBatch = new GraphRequestBatch();
-                final PublishLikeRequestWrapper likeRequest =
-                        new PublishLikeRequestWrapper(verifiedObjectId, objectType);
-                likeRequest.addToBatch(requestBatch);
-                requestBatch.addCallback(new GraphRequestBatch.Callback() {
-                    @Override
-                    public void onBatchCompleted(GraphRequestBatch batch) {
-                        isPendingLikeOrUnlike = false;
-
-                        if (likeRequest.getError() != null) {
-                            // We already updated the UI to show button in the Liked state. Since
-                            // this failed, let's revert back to the Unliked state and broadcast
-                            // an error
-                            publishDidError(false);
-                        } else {
-                            unlikeToken =
-                                    Utility.coerceValueIfNullOrEmpty(likeRequest.unlikeToken, null);
-                            isObjectLikedOnServer = true;
-
-                            getAppEventsLogger().logSdkEvent(
-                                    AnalyticsEvents.EVENT_LIKE_VIEW_DID_LIKE,
-                                    null,
-                                    analyticsParameters);
-
-                            // See if the user toggled the button back while this request was
-                            // completing
-                            publishAgainIfNeeded(analyticsParameters);
-                        }
-                    }
-                });
-
-                requestBatch.executeAsync();
-            }
-        });
-    }
-
-    private void publishUnlikeAsync(final Bundle analyticsParameters) {
-        isPendingLikeOrUnlike = true;
-
-        // Perform the Unlike.
-        GraphRequestBatch requestBatch = new GraphRequestBatch();
-        final PublishUnlikeRequestWrapper unlikeRequest =
-                new PublishUnlikeRequestWrapper(unlikeToken);
-        unlikeRequest.addToBatch(requestBatch);
-        requestBatch.addCallback(new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-                isPendingLikeOrUnlike = false;
-
-                if (unlikeRequest.getError() != null) {
-                    // We already updated the UI to show button in the Unliked state. Since this
-                    // failed, let's revert back to the Liked state and broadcast an error.
-                    publishDidError(true);
-                } else {
-                    unlikeToken = null;
-                    isObjectLikedOnServer = false;
-
-                    getAppEventsLogger().logSdkEvent(
-                            AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNLIKE,
-                            null,
-                            analyticsParameters);
-
-                    // See if the user toggled the button back while this request was
-                    // completing
-                    publishAgainIfNeeded(analyticsParameters);
-                }
-            }
-        });
-
-        requestBatch.executeAsync();
-    }
-
-    private void refreshStatusAsync() {
-        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        if (accessToken == null) {
-            // Only when we know that there is no active access token should we attempt getting like
-            // state from the service. Otherwise, use the access token to make sure we get the
-            // correct like state.
-            refreshStatusViaService();
-            return;
-        }
-
-        fetchVerifiedObjectId(new RequestCompletionCallback() {
-            @Override
-            public void onComplete() {
-                final LikeRequestWrapper likeRequestWrapper;
-                switch (objectType) {
-                    case PAGE:
-                        likeRequestWrapper = new GetPageLikesRequestWrapper(verifiedObjectId);
-                        break;
-                    default:
-                        likeRequestWrapper =
-                                new GetOGObjectLikesRequestWrapper(verifiedObjectId, objectType);
-                        break;
-                }
-                final GetEngagementRequestWrapper engagementRequest =
-                        new GetEngagementRequestWrapper(verifiedObjectId, objectType);
-
-                GraphRequestBatch requestBatch = new GraphRequestBatch();
-                likeRequestWrapper.addToBatch(requestBatch);
-                engagementRequest.addToBatch(requestBatch);
-
-                requestBatch.addCallback(new GraphRequestBatch.Callback() {
-                    @Override
-                    public void onBatchCompleted(GraphRequestBatch batch) {
-                        if (likeRequestWrapper.getError() != null ||
-                                engagementRequest.getError() != null) {
-                            // Refreshing is best-effort. If the refresh fails, don't lose old
-                            // state.
-                            Logger.log(
-                                    LoggingBehavior.REQUESTS,
-                                    TAG,
-                                    "Unable to refresh like state for id: '%s'", objectId);
-                            return;
-                        }
-
-                        updateState(
-                                likeRequestWrapper.isObjectLiked(),
-                                engagementRequest.likeCountStringWithLike,
-                                engagementRequest.likeCountStringWithoutLike,
-                                engagementRequest.socialSentenceStringWithLike,
-                                engagementRequest.socialSentenceStringWithoutLike,
-                                likeRequestWrapper.getUnlikeToken());
-                    }
-                });
-
-                requestBatch.executeAsync();
-            }
-        });
-    }
-
-    private void refreshStatusViaService() {
-        LikeStatusClient likeStatusClient = new LikeStatusClient(
-                FacebookSdk.getApplicationContext(),
-                FacebookSdk.getApplicationId(),
-                objectId);
-        if (!likeStatusClient.start()) {
-            return;
-        }
-
-        LikeStatusClient.CompletedListener callback = new LikeStatusClient.CompletedListener() {
-            @Override
-            public void completed(Bundle result) {
-                // Don't lose old state if the service response is incomplete.
-                if (result == null || !result.containsKey(ShareConstants.EXTRA_OBJECT_IS_LIKED)) {
-                    return;
-                }
-
-                boolean objectIsLiked = result.getBoolean(ShareConstants.EXTRA_OBJECT_IS_LIKED);
-
-                String likeCountWithLike =
-                        result.containsKey(ShareConstants.EXTRA_LIKE_COUNT_STRING_WITH_LIKE)
-                                ? result.getString(ShareConstants.EXTRA_LIKE_COUNT_STRING_WITH_LIKE)
-                                : LikeActionController.this.likeCountStringWithLike;
-
-                String likeCountWithoutLike =
-                        result.containsKey(ShareConstants.EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE)
-                                ? result.getString(
-                                ShareConstants.EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE)
-                                : LikeActionController.this.likeCountStringWithoutLike;
-
-                String socialSentenceWithLike =
-                        result.containsKey(ShareConstants.EXTRA_SOCIAL_SENTENCE_WITH_LIKE)
-                                ? result.getString(ShareConstants.EXTRA_SOCIAL_SENTENCE_WITH_LIKE)
-                                : LikeActionController.this.socialSentenceWithLike;
-
-                String socialSentenceWithoutLike =
-                        result.containsKey(ShareConstants.EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE)
-                                ? result.getString(
-                                ShareConstants.EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE)
-                                : LikeActionController.this.socialSentenceWithoutLike;
-
-                String unlikeToken =
-                        result.containsKey(ShareConstants.EXTRA_UNLIKE_TOKEN)
-                                ? result.getString(ShareConstants.EXTRA_UNLIKE_TOKEN)
-                                : LikeActionController.this.unlikeToken;
-
-                updateState(
-                        objectIsLiked,
-                        likeCountWithLike,
-                        likeCountWithoutLike,
-                        socialSentenceWithLike,
-                        socialSentenceWithoutLike,
-                        unlikeToken);
-            }
-        };
-
-        likeStatusClient.setCompletedListener(callback);
-    }
-
-    private void publishAgainIfNeeded(final Bundle analyticsParameters) {
-        if (isObjectLiked != isObjectLikedOnServer &&
-                !publishLikeOrUnlikeAsync(isObjectLiked, analyticsParameters)) {
-            // Unable to re-publish the new desired state. Signal that there is an error and
-            // revert the like state back.
-            publishDidError(!isObjectLiked);
-        }
-    }
-
-    private void fetchVerifiedObjectId(final RequestCompletionCallback completionHandler) {
-        if (!Utility.isNullOrEmpty(verifiedObjectId)) {
-            if (completionHandler != null) {
-                completionHandler.onComplete();
-            }
-
-            return;
-        }
-
-        final GetOGObjectIdRequestWrapper objectIdRequest =
-                new GetOGObjectIdRequestWrapper(objectId, objectType);
-        final GetPageIdRequestWrapper pageIdRequest =
-                new GetPageIdRequestWrapper(objectId, objectType);
-
-        GraphRequestBatch requestBatch = new GraphRequestBatch();
-        objectIdRequest.addToBatch(requestBatch);
-        pageIdRequest.addToBatch(requestBatch);
-
-        requestBatch.addCallback(new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-                verifiedObjectId = objectIdRequest.verifiedObjectId;
-                if (Utility.isNullOrEmpty(verifiedObjectId)) {
-                    verifiedObjectId = pageIdRequest.verifiedObjectId;
-                    objectIsPage = pageIdRequest.objectIsPage;
-                }
-
-                if (Utility.isNullOrEmpty(verifiedObjectId)) {
-                    Logger.log(LoggingBehavior.DEVELOPER_ERRORS,
-                            TAG,
-                            "Unable to verify the FB id for '%s'. Verify that it is a valid FB" +
-                                    " object or page",
-                            objectId);
-                    logAppEventForError("get_verified_id",
-                            pageIdRequest.getError() != null
-                                    ? pageIdRequest.getError()
-                                    : objectIdRequest.getError());
-                }
-
-                if (completionHandler != null) {
-                    completionHandler.onComplete();
-                }
-            }
-        });
-
-        requestBatch.executeAsync();
-    }
-
-    private void logAppEventForError(String action, Bundle parameters) {
-        Bundle logParams = new Bundle(parameters);
-        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_ID, objectId);
-        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_TYPE, objectType.toString());
-        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_CURRENT_ACTION, action);
-
-        getAppEventsLogger().logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_ERROR, null, logParams);
-    }
-
-    private void logAppEventForError(String action, FacebookRequestError error) {
-        Bundle logParams = new Bundle();
-        if (error != null) {
-            JSONObject requestResult = error.getRequestResult();
-            if (requestResult != null) {
-                logParams.putString(
-                        AnalyticsEvents.PARAMETER_LIKE_VIEW_ERROR_JSON,
-                        requestResult.toString());
-            }
-        }
-        logAppEventForError(action, logParams);
-    }
-
-    //
-    // Interfaces
-    //
-
-    /**
-     * Used by the call to getControllerForObjectId()
-     */
-    public interface CreationCallback {
-        public void onComplete(
-                LikeActionController likeActionController,
-                FacebookException error);
-    }
-
-    /**
-     * Used by all the request wrappers
-     */
-    private interface RequestCompletionCallback {
-        void onComplete();
-    }
-
-    //
-    // Inner classes
-    //
-
-    private class GetOGObjectIdRequestWrapper extends AbstractRequestWrapper {
-        String verifiedObjectId;
-
-        GetOGObjectIdRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle objectIdRequestParams = new Bundle();
-            objectIdRequestParams.putString("fields", "og_object.fields(id)");
-            objectIdRequestParams.putString("ids", objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "",
-                    objectIdRequestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            // If this object Id is for a Page, an error will be received for this request
-            // We will then rely on the other request to come through.
-            if (error.getErrorMessage().contains("og_object")) {
-                this.error = null;
-            } else {
-                Logger.log(LoggingBehavior.REQUESTS,
-                        TAG,
-                        "Error getting the FB id for object '%s' with type '%s' : %s",
-                        objectId,
-                        objectType,
-                        error);
-            }
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONObject results = Utility.tryGetJSONObjectFromResponse(
-                    response.getJSONObject(),
-                    objectId);
-            if (results != null) {
-                // See if we can get the OG object Id out
-                JSONObject ogObject = results.optJSONObject("og_object");
-                if (ogObject != null) {
-                    verifiedObjectId = ogObject.optString("id");
-                }
-            }
-        }
-    }
-
-    private class GetPageIdRequestWrapper extends AbstractRequestWrapper {
-        String verifiedObjectId;
-        boolean objectIsPage;
-
-        GetPageIdRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle pageIdRequestParams = new Bundle();
-            pageIdRequestParams.putString("fields", "id");
-            pageIdRequestParams.putString("ids", objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "",
-                    pageIdRequestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONObject results = Utility.tryGetJSONObjectFromResponse(
-                    response.getJSONObject(),
-                    objectId);
-            if (results != null) {
-                verifiedObjectId = results.optString("id");
-                objectIsPage = !Utility.isNullOrEmpty(verifiedObjectId);
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error getting the FB id for object '%s' with type '%s' : %s",
-                    objectId,
-                    objectType,
-                    error);
-        }
-    }
-
-    private class PublishLikeRequestWrapper extends AbstractRequestWrapper {
-        String unlikeToken;
-
-        PublishLikeRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle likeRequestParams = new Bundle();
-            likeRequestParams.putString("object", objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "me/og.likes",
-                    likeRequestParams,
-                    HttpMethod.POST));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            unlikeToken = Utility.safeGetStringFromResponse(response.getJSONObject(), "id");
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            int errorCode = error.getErrorCode();
-            if (errorCode == ERROR_CODE_OBJECT_ALREADY_LIKED) {
-                // This isn't an error for us. Client was just out of sync with server
-                // This will prevent us from showing the dialog for this.
-
-                // However, there is no unliketoken. So a subsequent unlike WILL show the dialog
-                this.error = null;
-            } else {
-                Logger.log(LoggingBehavior.REQUESTS,
-                        TAG,
-                        "Error liking object '%s' with type '%s' : %s",
-                        objectId,
-                        objectType,
-                        error);
-                logAppEventForError("publish_like", error);
-            }
-        }
-    }
-
-    private class PublishUnlikeRequestWrapper extends AbstractRequestWrapper {
-        private String unlikeToken;
-
-        PublishUnlikeRequestWrapper(String unlikeToken) {
-            super(null, null);
-
-            this.unlikeToken = unlikeToken;
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    unlikeToken,
-                    null,
-                    HttpMethod.DELETE));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error unliking object with unlike token '%s' : %s", unlikeToken, error);
-            logAppEventForError("publish_unlike", error);
-        }
-    }
-
-    private interface LikeRequestWrapper extends RequestWrapper {
-        boolean isObjectLiked();
-        String getUnlikeToken();
-    }
-
-    private class GetPageLikesRequestWrapper
-            extends AbstractRequestWrapper
-            implements LikeRequestWrapper {
-        private boolean objectIsLiked = LikeActionController.this.isObjectLiked;
-        private String pageId;
-
-        GetPageLikesRequestWrapper(String pageId) {
-            super(pageId, LikeView.ObjectType.PAGE);
-            this.pageId = pageId;
-
-            Bundle requestParams = new Bundle();
-            requestParams.putString("fields", "id");
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "me/likes/" + pageId,
-                    requestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONArray dataSet = Utility.tryGetJSONArrayFromResponse(
-                    response.getJSONObject(),
-                    "data");
-            if (dataSet != null && dataSet.length() > 0) {
-                objectIsLiked = true;
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error fetching like status for page id '%s': %s",
-                    this.pageId,
-                    error);
-            logAppEventForError("get_page_like", error);
-        }
-
-
-        @Override
-        public boolean isObjectLiked() {
-            return this.objectIsLiked;
-        }
-
-        @Override
-        public String getUnlikeToken() {
-            return null;
-        }
-    }
-
-    private class GetOGObjectLikesRequestWrapper
-            extends AbstractRequestWrapper
-            implements LikeRequestWrapper {
-        // Initialize the like status to what we currently have. This way, empty/error responses
-        // don't end up clearing out the state.
-        private boolean objectIsLiked = LikeActionController.this.isObjectLiked;
-        private String unlikeToken;
-        private final String objectId;
-        private final LikeView.ObjectType objectType;
-
-        GetOGObjectLikesRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-            this.objectId = objectId;
-            this.objectType = objectType;
-
-            Bundle requestParams = new Bundle();
-            requestParams.putString("fields", "id,application");
-            requestParams.putString("object", this.objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "me/og.likes",
-                    requestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONArray dataSet = Utility.tryGetJSONArrayFromResponse(
-                    response.getJSONObject(),
-                    "data");
-            if (dataSet != null) {
-                for (int i = 0; i < dataSet.length(); i++) {
-                    JSONObject data = dataSet.optJSONObject(i);
-                    if (data != null) {
-                        objectIsLiked = true;
-                        JSONObject appData = data.optJSONObject("application");
-                        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-                        if (appData != null &&
-                                accessToken != null &&
-                                Utility.areObjectsEqual(
-                                        accessToken.getApplicationId(),
-                                        appData.optString("id"))) {
-                            unlikeToken = data.optString("id");
-                        }
-                    }
-                }
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error fetching like status for object '%s' with type '%s' : %s",
-                    this.objectId,
-                    this.objectType,
-                    error);
-            logAppEventForError("get_og_object_like", error);
-        }
-
-        @Override
-        public boolean isObjectLiked() {
-            return this.objectIsLiked;
-        }
-
-        @Override
-        public String getUnlikeToken() {
-            return this.unlikeToken;
-        }
-    }
-
-    private class GetEngagementRequestWrapper extends AbstractRequestWrapper {
-        // Initialize the like status to what we currently have. This way, empty/error responses
-        // don't end up clearing out the state.
-        String likeCountStringWithLike = LikeActionController.this.likeCountStringWithLike;
-        String likeCountStringWithoutLike = LikeActionController.this.likeCountStringWithoutLike;
-        String socialSentenceStringWithLike = LikeActionController.this.socialSentenceWithLike;
-        String socialSentenceStringWithoutLike =
-                LikeActionController.this.socialSentenceWithoutLike;
-
-        GetEngagementRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle requestParams = new Bundle();
-            requestParams.putString(
-                    "fields",
-                    "engagement.fields(" +
-                            "count_string_with_like," +
-                            "count_string_without_like," +
-                            "social_sentence_with_like," +
-                            "social_sentence_without_like)");
-
-            // Ensure that the social sentence returned is localized
-            requestParams.putString("locale", Locale.getDefault().toString());
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    objectId,
-                    requestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONObject engagementResults = Utility.tryGetJSONObjectFromResponse(
-                    response.getJSONObject(),
-                    "engagement");
-            if (engagementResults != null) {
-                // Missing properties in the response should default to cached like status
-                likeCountStringWithLike =
-                        engagementResults.optString(
-                                "count_string_with_like",
-                                likeCountStringWithLike);
-
-                likeCountStringWithoutLike =
-                        engagementResults.optString(
-                                "count_string_without_like",
-                                likeCountStringWithoutLike);
-
-                socialSentenceStringWithLike =
-                        engagementResults.optString(
-                                "social_sentence_with_like",
-                                socialSentenceStringWithLike);
-
-                socialSentenceStringWithoutLike =
-                        engagementResults.optString(
-                                "social_sentence_without_like",
-                                socialSentenceStringWithoutLike);
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error fetching engagement for object '%s' with type '%s' : %s",
-                    objectId,
-                    objectType,
-                    error);
-            logAppEventForError("get_engagement", error);
-        }
-    }
-
-    private interface RequestWrapper {
-        FacebookRequestError getError();
-        void addToBatch(GraphRequestBatch batch);
-    }
-
-    private abstract class AbstractRequestWrapper implements RequestWrapper{
-        private GraphRequest request;
-        protected String objectId;
-        protected LikeView.ObjectType objectType;
-        protected FacebookRequestError error;
-
-        protected AbstractRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            this.objectId = objectId;
-            this.objectType = objectType;
-        }
-
-        public void addToBatch(GraphRequestBatch batch) {
-            batch.add(request);
-        }
-
-        public FacebookRequestError getError() {
-            return this.error;
-        }
-
-        protected void setRequest(GraphRequest request) {
-            this.request = request;
-            // Make sure that our requests are hitting the latest version of the API known to this
-            // sdk.
-            request.setVersion(ServerProtocol.GRAPH_API_VERSION);
-            request.setCallback(new GraphRequest.Callback() {
-                @Override
-                public void onCompleted(GraphResponse response) {
-                    error = response.getError();
-                    if (error != null) {
-                        processError(error);
-                    } else {
-                        processSuccess(response);
-                    }
-                }
-            });
-        }
-
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error running request for object '%s' with type '%s' : %s",
-                    this.objectId,
-                    this.objectType,
-                    error);
-        }
-
-        protected abstract void processSuccess(GraphResponse response);
-    }
-
-    // Performs cache re-ordering/trimming to keep most-recently-used items up front
-    // ** NOTE ** It is expected that only _ONE_ MRUCacheWorkItem is ever running. This is enforced
-    // by setting the concurrency of the WorkQueue to 1. Changing the concurrency will most likely
-    // lead to errors.
-    private static class MRUCacheWorkItem implements Runnable {
-        private static ArrayList<String> mruCachedItems = new ArrayList<String>();
-        private String cacheItem;
-        private boolean shouldTrim;
-
-        MRUCacheWorkItem(String cacheItem, boolean shouldTrim) {
-            this.cacheItem = cacheItem;
-            this.shouldTrim = shouldTrim;
-        }
-
-        @Override
-        public void run() {
-            if (cacheItem != null) {
-                mruCachedItems.remove(cacheItem);
-                mruCachedItems.add(0, cacheItem);
-            }
-            if (shouldTrim && mruCachedItems.size() >= MAX_CACHE_SIZE) {
-                int targetSize = MAX_CACHE_SIZE / 2; // Optimize for fewer trim-passes.
-                while (targetSize < mruCachedItems.size()) {
-                    String cacheKey = mruCachedItems.remove(mruCachedItems.size() - 1);
-
-                    // Here is where we actually remove from the cache of LikeActionControllers.
-                    cache.remove(cacheKey);
-                }
-            }
-        }
-    }
-
-    private static class SerializeToDiskWorkItem implements Runnable {
-        private String cacheKey;
-        private String controllerJson;
-
-        SerializeToDiskWorkItem(String cacheKey, String controllerJson) {
-            this.cacheKey = cacheKey;
-            this.controllerJson = controllerJson;
-        }
-
-        @Override
-        public void run() {
-            serializeToDiskSynchronously(cacheKey, controllerJson);
-        }
-    }
-
-    private static class CreateLikeActionControllerWorkItem implements Runnable {
-        private String objectId;
-        private LikeView.ObjectType objectType;
-        private CreationCallback callback;
-
-        CreateLikeActionControllerWorkItem(
-                String objectId,
-                LikeView.ObjectType objectType,
-                CreationCallback callback) {
-            this.objectId = objectId;
-            this.objectType = objectType;
-            this.callback = callback;
-        }
-
-        @Override
-        public void run() {
-            createControllerForObjectIdAndType(objectId, objectType, callback);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeBoxCountView.java b/facebook/src/main/java/com/facebook/share/internal/LikeBoxCountView.java
deleted file mode 100644
index 23cf68ffe..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeBoxCountView.java
+++ /dev/null
@@ -1,229 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.graphics.*;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-import com.facebook.R;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class LikeBoxCountView extends FrameLayout {
-
-    public enum LikeBoxCountViewCaretPosition {
-        LEFT,
-        TOP,
-        RIGHT,
-        BOTTOM
-    }
-
-    private TextView likeCountLabel;
-    private LikeBoxCountViewCaretPosition caretPosition = LikeBoxCountViewCaretPosition.LEFT;
-
-    private float caretHeight;
-    private float caretWidth;
-    private float borderRadius;
-    private Paint borderPaint;
-    private int textPadding;
-    private int additionalTextPadding;
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     */
-    public LikeBoxCountView(Context context) {
-        super(context);
-        initialize(context);
-    }
-
-    /**
-     * Sets the text for this view
-     * @param text
-     */
-    public void setText(String text) {
-        likeCountLabel.setText(text);
-    }
-
-    /**
-     * Sets the caret's position. This will trigger a layout of the view.
-     * @param caretPosition
-     */
-    public void setCaretPosition(LikeBoxCountViewCaretPosition caretPosition) {
-        this.caretPosition = caretPosition;
-
-        // Since the presence of a caret will move that edge closer to the text, let's add
-        // some padding (equal to caretHeight) in that same direction
-        switch (caretPosition) {
-            case LEFT:
-                setAdditionalTextPadding(additionalTextPadding, 0, 0, 0);
-                break;
-            case TOP:
-                setAdditionalTextPadding(0, additionalTextPadding, 0, 0);
-                break;
-            case RIGHT:
-                setAdditionalTextPadding(0, 0, additionalTextPadding, 0);
-                break;
-            case BOTTOM:
-                setAdditionalTextPadding(0, 0, 0, additionalTextPadding);
-                break;
-        }
-
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        int top = getPaddingTop(), left = getPaddingLeft();
-        int right = getWidth() - getPaddingRight(), bottom = getHeight() - getPaddingBottom();
-
-        switch (caretPosition) {
-            case BOTTOM:
-                bottom -= caretHeight;
-                break;
-            case LEFT:
-                left += caretHeight;
-                break;
-            case TOP:
-                top += caretHeight;
-                break;
-            case RIGHT:
-                right -= caretHeight;
-                break;
-        }
-
-        drawBorder(canvas, left, top, right, bottom);
-    }
-
-    private void initialize(Context context) {
-        setWillNotDraw(false); // Required for the onDraw() method to be called on a FrameLayout
-        caretHeight = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_caret_height);
-        caretWidth = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_caret_width);
-        borderRadius = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_border_radius);
-
-        borderPaint = new Paint();
-        borderPaint.setColor(
-                getResources().getColor(R.color.com_facebook_likeboxcountview_border_color));
-        borderPaint.setStrokeWidth(getResources().getDimension(R.dimen.com_facebook_likeboxcountview_border_width));
-        borderPaint.setStyle(Paint.Style.STROKE);
-
-        initializeLikeCountLabel(context);
-
-        addView(likeCountLabel);
-
-        setCaretPosition(this.caretPosition);
-    }
-
-    private void initializeLikeCountLabel(Context context) {
-        likeCountLabel = new TextView(context);
-        LayoutParams likeCountLabelLayoutParams = new LayoutParams(
-                ViewGroup.LayoutParams.MATCH_PARENT,
-                ViewGroup.LayoutParams.MATCH_PARENT);
-        likeCountLabel.setLayoutParams(likeCountLabelLayoutParams);
-        likeCountLabel.setGravity(Gravity.CENTER);
-        likeCountLabel.setTextSize(
-                TypedValue.COMPLEX_UNIT_PX,
-                getResources().getDimension(R.dimen.com_facebook_likeboxcountview_text_size));
-        likeCountLabel.setTextColor(
-                getResources().getColor(R.color.com_facebook_likeboxcountview_text_color));
-        textPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeboxcountview_text_padding);
-
-        // Calculate the additional text padding that will be applied in the direction of the caret.
-        additionalTextPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeboxcountview_caret_height);
-    }
-
-    private void setAdditionalTextPadding(int left, int top, int right, int bottom) {
-        likeCountLabel.setPadding(
-                textPadding + left,
-                textPadding + top,
-                textPadding + right,
-                textPadding + bottom);
-    }
-
-    private void drawBorder(Canvas canvas, float left, float top, float right, float bottom) {
-        Path borderPath = new Path();
-
-        float ovalSize = 2.0f * borderRadius;
-
-        // Top left corner
-        borderPath.addArc(new RectF(left, top, left + ovalSize, top + ovalSize), -180, 90);
-
-        // Top caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.TOP) {
-            borderPath.lineTo(left + (right - left - caretWidth) / 2, top);
-            borderPath.lineTo(left + (right - left) / 2, top - caretHeight);
-            borderPath.lineTo(left + (right - left + caretWidth) / 2, top);
-        }
-
-        // Move to top right corner
-        borderPath.lineTo(right - borderRadius, top);
-
-        // Top right corner
-        borderPath.addArc(new RectF(right - ovalSize, top, right, top + ovalSize), -90, 90);
-
-        // Right caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.RIGHT) {
-            borderPath.lineTo(right, top + (bottom - top - caretWidth) / 2);
-            borderPath.lineTo(right + caretHeight, top + (bottom - top) / 2);
-            borderPath.lineTo(right, top + (bottom - top + caretWidth) / 2);
-        }
-
-        // Move to bottom right corner
-        borderPath.lineTo(right, bottom - borderRadius);
-
-        // Bottom right corner
-        borderPath.addArc(new RectF(right - ovalSize, bottom - ovalSize, right, bottom), 0, 90);
-
-        // Bottom caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.BOTTOM) {
-            borderPath.lineTo(left + (right - left + caretWidth) / 2, bottom);
-            borderPath.lineTo(left + (right - left) / 2, bottom + caretHeight);
-            borderPath.lineTo(left + (right - left - caretWidth) / 2, bottom);
-        }
-
-        // Move to bottom left corner
-        borderPath.lineTo(left + borderRadius, bottom);
-
-        // Bottom left corner
-        borderPath.addArc(new RectF(left, bottom - ovalSize, left + ovalSize, bottom), 90, 90);
-
-        // Left caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.LEFT) {
-            borderPath.lineTo(left, top + (bottom - top + caretWidth) / 2);
-            borderPath.lineTo(left - caretHeight, top + (bottom - top) / 2);
-            borderPath.lineTo(left, top + (bottom - top - caretWidth) / 2);
-        }
-
-        // Move back to the beginning
-        borderPath.lineTo(left, top + borderRadius);
-
-        canvas.drawPath(borderPath, borderPaint);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeButton.java b/facebook/src/main/java/com/facebook/share/internal/LikeButton.java
deleted file mode 100644
index 3a4a0c5ca..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeButton.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import com.facebook.FacebookButtonBase;
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class LikeButton extends FacebookButtonBase {
-    public LikeButton(Context context, boolean isLiked) {
-        super(context, null, 0, 0, AnalyticsEvents.EVENT_LIKE_BUTTON_CREATE,
-                                   AnalyticsEvents.EVENT_LIKE_BUTTON_DID_TAP);
-        this.setSelected(isLiked);
-    }
-
-    @Override
-    public void setSelected(boolean selected) {
-        super.setSelected(selected);
-        updateForLikeStatus();
-    }
-
-    @Override
-    protected void configureButton(
-            Context context,
-            AttributeSet attrs,
-            int defStyleAttr,
-            int defStyleRes) {
-        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        updateForLikeStatus();
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return 0;
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_like;
-    }
-
-    private void updateForLikeStatus() {
-        // the compound drawables don't support selectors, so we need to update for the status
-        if (isSelected()) {
-            this.setCompoundDrawablesWithIntrinsicBounds(
-                    R.drawable.com_facebook_button_like_icon_selected, 0, 0, 0);
-            this.setText(getResources().getString(R.string.com_facebook_like_button_liked));
-        } else {
-            this.setCompoundDrawablesWithIntrinsicBounds(
-                    R.drawable.com_facebook_button_icon, 0, 0, 0);
-            this.setText(getResources().getString(R.string.com_facebook_like_button_not_liked));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java b/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
deleted file mode 100644
index ffd46cbce..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Parcel;
-
-import com.facebook.share.model.ShareModel;
-import com.facebook.share.model.ShareModelBuilder;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Represents content that is set on a LikeView to allow users to like and unlike it.
- */
-public class LikeContent implements ShareModel {
-
-    private final String objectId;
-    private final String objectType;
-
-    private LikeContent(final Builder builder) {
-        this.objectId = builder.objectId;
-        this.objectType = builder.objectType;
-    }
-
-    LikeContent(final Parcel in) {
-        this.objectId = in.readString();
-        this.objectType = in.readString();
-    }
-
-    /**
-     * Gets the object Id for the LikeView.
-     *
-     * @return the object Id
-     */
-    public String getObjectId() {
-        return objectId;
-    }
-
-    /**
-     * Gets the type of the object for the LikeView.
-     *
-     * @return the type of the object
-     */
-    public String getObjectType() {
-        return objectType;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.objectId);
-        out.writeString(this.objectType);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<LikeContent> CREATOR =
-            new Creator<LikeContent>() {
-                public LikeContent createFromParcel(final Parcel in) {
-                    return new LikeContent(in);
-                }
-
-                public LikeContent[] newArray(final int size) {
-                    return new LikeContent[size];
-                }
-            };
-
-    /**
-     * Builder class for a concrete instance of AppInviteContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<LikeContent, Builder> {
-        private String objectId;
-        private String objectType;
-
-        /**
-         * Sets the object Id for the LikeView
-         * @param objectId the object Id
-         */
-        public Builder setObjectId(final String objectId) {
-            this.objectId = objectId;
-            return this;
-        }
-
-        /**
-         * Sets the type of the object for the LikeView
-         * @param objectType the type of the object
-         */
-        public Builder setObjectType(final String objectType) {
-            this.objectType = objectType;
-            return this;
-        }
-
-        @Override
-        public LikeContent build() {
-            return new LikeContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final LikeContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setObjectId(content.getObjectId())
-                    .setObjectType(content.getObjectType());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java b/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
deleted file mode 100644
index 4aeeb34d6..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
+++ /dev/null
@@ -1,206 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FragmentWrapper;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class LikeDialog extends FacebookDialogBase<LikeContent, LikeDialog.Result> {
-
-    private static final String TAG = "LikeDialog";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.Like.toRequestCode();
-
-    public static final class Result {
-        private final Bundle bundle;
-
-        /**
-         * Constructor
-         *
-         * @param bundle the results bundle
-         */
-        public Result(Bundle bundle) {
-            this.bundle = bundle;
-        }
-
-        /**
-         * Returns the results data as a Bundle.
-         *
-         * @return the results bundle
-         */
-        public Bundle getData() {
-            return bundle;
-        }
-    }
-
-    // Public for internal use
-    public static boolean canShowNativeDialog() {
-        return DialogPresenter.canPresentNativeDialogWithFeature(getFeature());
-    }
-
-    // Public for internal use
-    public static boolean canShowWebFallback() {
-        return DialogPresenter.canPresentWebFallbackDialogWithFeature(getFeature());
-    }
-
-    public LikeDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    public LikeDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    public LikeDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    public LikeDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-        handlers.add(new WebFallbackHandler());
-
-        return handlers;
-    }
-
-    @Override
-    protected void registerCallbackImpl (
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                callback.onSuccess(new Result(results));
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(
-                getRequestCode(),
-                callbackManagerCallback);
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final LikeContent content, boolean isBestEffort) {
-            return (content != null) && LikeDialog.canShowNativeDialog();
-        }
-
-        @Override
-        public AppCall createAppCall(final LikeContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return createParameters(content);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            // Like is not supported with legacy fb4a devices. Should never get here
-                            Log.e(TAG, "Attempting to present the Like Dialog with an outdated " +
-                                    "Facebook app on the device");
-                            return new Bundle();
-                        }
-                    },
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private class WebFallbackHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final LikeContent content, boolean isBestEffort) {
-            return (content != null) && LikeDialog.canShowWebFallback();
-        }
-
-        @Override
-        public AppCall createAppCall(final LikeContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForWebFallbackDialog(
-                    appCall,
-                    createParameters(content),
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature() {
-        return LikeDialogFeature.LIKE_DIALOG;
-    }
-
-    private static Bundle createParameters(final LikeContent likeContent) {
-        Bundle params = new Bundle();
-
-        params.putString(ShareConstants.OBJECT_ID, likeContent.getObjectId());
-        params.putString(ShareConstants.OBJECT_TYPE, likeContent.getObjectType());
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/LikeDialogFeature.java
deleted file mode 100644
index 3ab0c9150..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeDialogFeature.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum LikeDialogFeature implements DialogFeature {
-
-    // This matches a value in a sitevar. DO NOT CHANGE
-    LIKE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140701);
-
-    private int minVersion;
-
-    LikeDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    public String getAction() {
-        return NativeProtocol.ACTION_LIKE_DIALOG;
-    }
-
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeStatusClient.java b/facebook/src/main/java/com/facebook/share/internal/LikeStatusClient.java
deleted file mode 100644
index f890db8a5..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeStatusClient.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-
-import android.content.Context;
-import android.os.Bundle;
-
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.PlatformServiceClient;
-import com.facebook.share.internal.ShareConstants;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- *
- * This class executes service calls to fetch like-state of objects from the Facebook Application,
- * if available.
- */
-final class LikeStatusClient extends PlatformServiceClient {
-    private String objectId;
-
-    LikeStatusClient(Context context, String applicationId, String objectId) {
-        super(context,
-                NativeProtocol.MESSAGE_GET_LIKE_STATUS_REQUEST,
-                NativeProtocol.MESSAGE_GET_LIKE_STATUS_REPLY,
-                NativeProtocol.PROTOCOL_VERSION_20141001,
-                applicationId);
-
-        this.objectId = objectId;
-    }
-
-    @Override
-    protected void populateRequestBundle(Bundle data) {
-        // Only thing we need to pass in is the object id.
-        data.putString(ShareConstants.EXTRA_OBJECT_ID, objectId);
-    }
-}
-
diff --git a/facebook/src/main/java/com/facebook/share/internal/MessageDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/MessageDialogFeature.java
deleted file mode 100644
index 40199d8b0..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/MessageDialogFeature.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum MessageDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Message dialog itself is supported by the installed version of
-     * the Facebook Messenger application.
-     */
-    MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204),
-    /**
-     * Indicates whether the native Message dialog supports sharing of photo images.
-     */
-    PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140324),
-    /**
-     * Indicates whether the native Message dialog supports sharing of videos.
-     */
-    VIDEO(NativeProtocol.PROTOCOL_VERSION_20141218),
-    ;
-
-    private int minVersion;
-
-    MessageDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_MESSAGE_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
deleted file mode 100644
index 3d56d79c8..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
+++ /dev/null
@@ -1,196 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-
-import com.facebook.FacebookException;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareHashtag;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareMediaContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class NativeDialogParameters {
-
-    public static Bundle create(
-            UUID callId,
-            ShareContent shareContent,
-            boolean shouldFailOnDataError) {
-        Validate.notNull(shareContent, "shareContent");
-        Validate.notNull(callId, "callId");
-
-        Bundle nativeParams = null;
-        if (shareContent instanceof ShareLinkContent) {
-            final ShareLinkContent linkContent = (ShareLinkContent) shareContent;
-            nativeParams = create(linkContent, shouldFailOnDataError);
-        } else if (shareContent instanceof SharePhotoContent) {
-            final SharePhotoContent photoContent = (SharePhotoContent) shareContent;
-            List<String> photoUrls = ShareInternalUtility.getPhotoUrls(
-                    photoContent,
-                    callId);
-
-            nativeParams = create(photoContent, photoUrls, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareVideoContent) {
-            final ShareVideoContent videoContent = (ShareVideoContent) shareContent;
-            String videoUrl = ShareInternalUtility.getVideoUrl(videoContent, callId);
-
-            nativeParams = create(videoContent, videoUrl, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareOpenGraphContent) {
-            final ShareOpenGraphContent openGraphContent = (ShareOpenGraphContent) shareContent;
-            try {
-                JSONObject openGraphActionJSON = ShareInternalUtility.toJSONObjectForCall(
-                        callId, openGraphContent);
-                openGraphActionJSON = ShareInternalUtility.removeNamespacesFromOGJsonObject(
-                        openGraphActionJSON, false);
-                nativeParams = create(openGraphContent, openGraphActionJSON, shouldFailOnDataError);
-            } catch (final JSONException e) {
-                throw new FacebookException(
-                        "Unable to create a JSON Object from the provided ShareOpenGraphContent: "
-                                + e.getMessage());
-            }
-        } else if (shareContent instanceof ShareMediaContent) {
-            final ShareMediaContent mediaContent = (ShareMediaContent) shareContent;
-            List<Bundle> mediaInfos = ShareInternalUtility.getMediaInfos(
-                    mediaContent,
-                    callId);
-
-            nativeParams = create(mediaContent, mediaInfos, shouldFailOnDataError);
-        }
-
-        return nativeParams;
-    }
-
-    private static Bundle create(ShareLinkContent linkContent, boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(linkContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(params, ShareConstants.TITLE, linkContent.getContentTitle());
-        Utility.putNonEmptyString(
-                params, ShareConstants.DESCRIPTION, linkContent.getContentDescription());
-        Utility.putUri(params, ShareConstants.IMAGE_URL, linkContent.getImageUrl());
-        Utility.putNonEmptyString(params, ShareConstants.QUOTE, linkContent.getQuote());
-
-        return params;
-    }
-
-    private static Bundle create(
-            SharePhotoContent photoContent,
-            List<String> imageUrls,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(photoContent, dataErrorsFatal);
-
-        params.putStringArrayList(ShareConstants.PHOTOS, new ArrayList<>(imageUrls));
-
-        return params;
-    }
-
-    private static Bundle create(
-            ShareVideoContent videoContent,
-            String videoUrl,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(videoContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(params, ShareConstants.TITLE, videoContent.getContentTitle());
-        Utility.putNonEmptyString(
-                params, ShareConstants.DESCRIPTION, videoContent.getContentDescription());
-        Utility.putNonEmptyString(params, ShareConstants.VIDEO_URL, videoUrl);
-
-        return params;
-    }
-
-    private static Bundle create(
-            ShareMediaContent mediaContent,
-            List<Bundle> mediaInfos,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(mediaContent, dataErrorsFatal);
-
-        params.putParcelableArrayList(ShareConstants.MEDIA, new ArrayList<>(mediaInfos));
-
-        return params;
-    }
-
-    private static Bundle create(
-            ShareOpenGraphContent openGraphContent,
-            JSONObject openGraphActionJSON,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(openGraphContent, dataErrorsFatal);
-
-        // Strip namespace from preview property name
-        String previewProperty = ShareInternalUtility.getFieldNameAndNamespaceFromFullName(
-                openGraphContent.getPreviewPropertyName()).second;
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.PREVIEW_PROPERTY_NAME,
-                previewProperty);
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.ACTION_TYPE,
-                openGraphContent.getAction().getActionType());
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.ACTION,
-                openGraphActionJSON.toString());
-
-        return params;
-    }
-
-    private static Bundle createBaseParameters(ShareContent content, boolean dataErrorsFatal) {
-        Bundle params = new Bundle();
-
-        Utility.putUri(params, ShareConstants.CONTENT_URL, content.getContentUrl());
-        Utility.putNonEmptyString(params, ShareConstants.PLACE_ID, content.getPlaceId());
-        Utility.putNonEmptyString(params, ShareConstants.REF, content.getRef());
-
-        params.putBoolean(ShareConstants.DATA_FAILURES_FATAL, dataErrorsFatal);
-
-        List<String> peopleIds = content.getPeopleIds();
-        if (!Utility.isNullOrEmpty(peopleIds)) {
-            params.putStringArrayList(
-                    ShareConstants.PEOPLE_IDS,
-                    new ArrayList<>(peopleIds));
-        }
-
-        ShareHashtag shareHashtag = content.getShareHashtag();
-        if (shareHashtag != null) {
-            Utility.putNonEmptyString(params, ShareConstants.HASHTAG, shareHashtag.getHashtag());
-        }
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphActionDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphActionDialogFeature.java
deleted file mode 100644
index 5eefbcebe..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphActionDialogFeature.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum OpenGraphActionDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Open Graph action dialog itself is supported by the installed
-     * version of the Facebook application.
-     */
-    OG_ACTION_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618);
-
-    private int minVersion;
-
-    OpenGraphActionDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
deleted file mode 100644
index dfa01941d..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.SharePhoto;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Utility methods for JSON representation of Open Graph models.
- */
-public final class OpenGraphJSONUtility {
-    /**
-     * Converts an action to a JSONObject.
-     *
-     * NOTE: All images are removed from the JSON representation and must be added to the builder
-     * separately.
-     *
-     * @param action {@link com.facebook.share.model.ShareOpenGraphAction} to be converted.
-     * @return {@link org.json.JSONObject} representing the action.
-     * @throws JSONException
-     */
-    public static JSONObject toJSONObject(
-            final ShareOpenGraphAction action,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        final JSONObject result = new JSONObject();
-        final Set<String> keys = action.keySet();
-        for (String key : keys) {
-            result.put(key, toJSONValue(action.get(key), photoJSONProcessor));
-        }
-        return result;
-    }
-
-    private static JSONObject toJSONObject(
-            final ShareOpenGraphObject object,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        final JSONObject result = new JSONObject();
-        final Set<String> keys = object.keySet();
-        for (String key : keys) {
-            result.put(key, toJSONValue(object.get(key), photoJSONProcessor));
-        }
-        return result;
-    }
-
-    private static JSONArray toJSONArray(
-            final List list,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        final JSONArray result = new JSONArray();
-        for (Object item : list) {
-            result.put(toJSONValue(item, photoJSONProcessor));
-        }
-        return result;
-    }
-
-    public static Object toJSONValue(
-            @Nullable final Object object,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        if (object == null) {
-            return JSONObject.NULL;
-        }
-        if ((object instanceof String) ||
-                (object instanceof Boolean) ||
-                (object instanceof Double) ||
-                (object instanceof Float) ||
-                (object instanceof Integer) ||
-                (object instanceof Long)) {
-            return object;
-        }
-        if (object instanceof SharePhoto) {
-            if (photoJSONProcessor != null) {
-                return photoJSONProcessor.toJSONObject((SharePhoto) object);
-            }
-            return null;
-        }
-        if (object instanceof ShareOpenGraphObject) {
-            return toJSONObject((ShareOpenGraphObject) object, photoJSONProcessor);
-        }
-        if (object instanceof List) {
-            return toJSONArray((List) object, photoJSONProcessor);
-        }
-        throw new IllegalArgumentException(
-                "Invalid object found for JSON serialization: " +object.toString());
-    }
-
-    private OpenGraphJSONUtility() {}
-
-    public interface PhotoJSONProcessor {
-        public JSONObject toJSONObject(SharePhoto photo);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphMessageDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphMessageDialogFeature.java
deleted file mode 100644
index b064b7e77..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphMessageDialogFeature.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum OpenGraphMessageDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Open Graph Message dialog itself is supported by the installed
-     * version of the Facebook Messenger application.
-     */
-    OG_MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204);
-
-    private int minVersion;
-
-    OpenGraphMessageDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_OGMESSAGEPUBLISH_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ResultProcessor.java b/facebook/src/main/java/com/facebook/share/internal/ResultProcessor.java
deleted file mode 100644
index 0633d99da..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ResultProcessor.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.internal.AppCall;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Callback class to allow derivations of FacebookDialogBase to do custom operations
- */
-public abstract class ResultProcessor {
-    private FacebookCallback appCallback;
-
-    public ResultProcessor(FacebookCallback callback) {
-        this.appCallback = callback;
-    }
-
-    public abstract void onSuccess(AppCall appCall, Bundle results);
-
-    /**
-     * Override this if anything needs to be done on cancellation (e.g. Logging)
-     */
-    public void onCancel(AppCall appCall) {
-        if (appCallback != null) {
-            appCallback.onCancel();
-        }
-    }
-
-    /**
-     * Override this if anything needs to be done on error (e.g. Logging)
-     */
-    public void onError(AppCall appCall, FacebookException error) {
-        if (appCallback != null) {
-            appCallback.onError(error);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
deleted file mode 100644
index 149f7b635..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class ShareConstants {
-
-    // Common Web Params
-    public static final String WEB_DIALOG_PARAM_ACTION_TYPE = "action_type";
-
-    // Game Request Dialog Params
-    public static final String WEB_DIALOG_PARAM_DATA = "data";
-    public static final String WEB_DIALOG_PARAM_MESSAGE = "message";
-    public static final String WEB_DIALOG_PARAM_TO = "to";
-    public static final String WEB_DIALOG_PARAM_TITLE = "title";
-    public static final String WEB_DIALOG_PARAM_OBJECT_ID = "object_id";
-    public static final String WEB_DIALOG_PARAM_FILTERS = "filters";
-    public static final String WEB_DIALOG_PARAM_SUGGESTIONS = "suggestions";
-
-    // Web Share Dialog Params
-    public static final String WEB_DIALOG_PARAM_HREF = "href";
-    public static final String WEB_DIALOG_PARAM_ACTION_PROPERTIES = "action_properties";
-    public static final String WEB_DIALOG_PARAM_QUOTE = "quote";
-    public static final String WEB_DIALOG_PARAM_HASHTAG = "hashtag";
-
-    // Feed Dialog Params
-    public static final String WEB_DIALOG_PARAM_LINK = "link";
-    public static final String WEB_DIALOG_PARAM_PICTURE = "picture";
-    public static final String WEB_DIALOG_PARAM_NAME = "name";
-    public static final String WEB_DIALOG_PARAM_DESCRIPTION = "description";
-
-    // Join App Group Dialog Params
-    public static final String WEB_DIALOG_PARAM_ID = "id";
-
-    // Create App Group Dialog Params
-    public static final String WEB_DIALOG_PARAM_PRIVACY = "privacy";
-
-    public static final String WEB_DIALOG_RESULT_PARAM_POST_ID = "post_id";
-    public static final String WEB_DIALOG_RESULT_PARAM_REQUEST_ID = "request";
-    public static final String WEB_DIALOG_RESULT_PARAM_TO_ARRAY_MEMBER = "to[%d]";
-
-    // Extras supported for ACTION_FEED_DIALOG:
-    public static final String LEGACY_PLACE_TAG = "com.facebook.platform.extra.PLACE";
-    public static final String LEGACY_FRIEND_TAGS = "com.facebook.platform.extra.FRIENDS";
-    public static final String LEGACY_LINK = "com.facebook.platform.extra.LINK";
-    public static final String LEGACY_IMAGE = "com.facebook.platform.extra.IMAGE";
-    public static final String LEGACY_TITLE = "com.facebook.platform.extra.TITLE";
-    public static final String LEGACY_DESCRIPTION = "com.facebook.platform.extra.DESCRIPTION";
-    public static final String LEGACY_REF = "com.facebook.platform.extra.REF";
-    public static final String LEGACY_DATA_FAILURES_FATAL =
-            "com.facebook.platform.extra.DATA_FAILURES_FATAL";
-    public static final String LEGACY_PHOTOS = "com.facebook.platform.extra.PHOTOS";
-
-    public static final String PLACE_ID = "PLACE";
-    public static final String PEOPLE_IDS = "FRIENDS";
-    public static final String CONTENT_URL = "LINK";
-    public static final String HASHTAG = "HASHTAG";
-    public static final String IMAGE_URL = "IMAGE";
-    public static final String TITLE = "TITLE";
-    public static final String DESCRIPTION = "DESCRIPTION";
-    public static final String REF = "REF";
-    public static final String DATA_FAILURES_FATAL = "DATA_FAILURES_FATAL";
-    public static final String PHOTOS = "PHOTOS";
-    public static final String VIDEO_URL = "VIDEO";
-    public static final String QUOTE = "QUOTE";
-    public static final String MEDIA = "MEDIA";
-
-    // Multimedia args
-    public static final String MEDIA_TYPE = "type";
-    public static final String MEDIA_URI = "uri";
-
-    // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
-    public static final String LEGACY_ACTION = "com.facebook.platform.extra.ACTION";
-    public static final String LEGACY_ACTION_TYPE = "com.facebook.platform.extra.ACTION_TYPE";
-    public static final String LEGACY_PREVIEW_PROPERTY_NAME =
-            "com.facebook.platform.extra.PREVIEW_PROPERTY_NAME";
-
-    public static final String ACTION = "ACTION";
-    public static final String ACTION_TYPE = "ACTION_TYPE";
-    public static final String PREVIEW_PROPERTY_NAME = "PREVIEW_PROPERTY_NAME";
-
-    // Method args supported for ACTION_LIKE_DIALOG
-    public static final String OBJECT_ID = "object_id";
-    public static final String OBJECT_TYPE = "object_type";
-
-    // Method args supported for ACTION_APPINVITE_DIALOG
-    public static final String APPLINK_URL = "app_link_url";
-    public static final String PREVIEW_IMAGE_URL = "preview_image_url";
-    public static final String PROMO_CODE = "promo_code";
-    public static final String PROMO_TEXT = "promo_text";
-    public static final String DEEPLINK_CONTEXT = "deeplink_context";
-    public static final String DESTINATION = "destination";
-
-    // Extras supported for MESSAGE_GET_LIKE_STATUS_REQUEST:
-    public static final String EXTRA_OBJECT_ID = "com.facebook.platform.extra.OBJECT_ID";
-
-    // Extras supported in MESSAGE_GET_LIKE_STATUS_REPLY:
-    public static final String EXTRA_OBJECT_IS_LIKED =
-            "com.facebook.platform.extra.OBJECT_IS_LIKED";
-    public static final String EXTRA_LIKE_COUNT_STRING_WITH_LIKE =
-            "com.facebook.platform.extra.LIKE_COUNT_STRING_WITH_LIKE";
-    public static final String EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE =
-            "com.facebook.platform.extra.LIKE_COUNT_STRING_WITHOUT_LIKE";
-    public static final String EXTRA_SOCIAL_SENTENCE_WITH_LIKE =
-            "com.facebook.platform.extra.SOCIAL_SENTENCE_WITH_LIKE";
-    public static final String EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE =
-            "com.facebook.platform.extra.SOCIAL_SENTENCE_WITHOUT_LIKE";
-    public static final String EXTRA_UNLIKE_TOKEN = "com.facebook.platform.extra.UNLIKE_TOKEN";
-
-    // Result keys from Native sharing dialogs
-    public static final String EXTRA_RESULT_POST_ID = "com.facebook.platform.extra.POST_ID";
-    public static final String RESULT_POST_ID = "postId";
-
-    public static final int MAXIMUM_PHOTO_COUNT = 6;
-    public static final int MAXIMUM_MEDIA_COUNT = 6;
-    static final String MY_VIDEOS = "me/videos";
-
-    // Feed Dialog
-    public static final String FEED_TO_PARAM = "to";
-    public static final String FEED_LINK_PARAM = "link";
-    public static final String FEED_PICTURE_PARAM = "picture";
-    public static final String FEED_SOURCE_PARAM = "source";
-    public static final String FEED_NAME_PARAM = "name";
-    public static final String FEED_CAPTION_PARAM = "caption";
-    public static final String FEED_DESCRIPTION_PARAM = "description";
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
deleted file mode 100644
index ef0dbc864..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
+++ /dev/null
@@ -1,441 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareMedia;
-import com.facebook.share.model.ShareMediaContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.ShareOpenGraphValueContainer;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class ShareContentValidation {
-
-    private static Validator WebShareValidator;
-    private static Validator DefaultValidator;
-    private static Validator ApiValidator;
-
-    public static void validateForMessage(ShareContent content) {
-        validate(content, getDefaultValidator());
-    }
-
-    public static void validateForNativeShare(ShareContent content) {
-        validate(content, getDefaultValidator());
-    }
-
-    public static void validateForWebShare(ShareContent content) {
-        validate(content, getWebShareValidator());
-    }
-
-    public static void validateForApiShare(ShareContent content) {
-        validate(content, getApiValidator());
-    }
-
-    private static Validator getDefaultValidator() {
-        if (DefaultValidator == null) {
-            DefaultValidator = new Validator();
-        }
-        return DefaultValidator;
-    }
-
-    private static Validator getApiValidator() {
-        if (ApiValidator == null) {
-            ApiValidator = new ApiValidator();
-        }
-        return ApiValidator;
-    }
-
-    private static Validator getWebShareValidator() {
-        if (WebShareValidator == null) {
-            WebShareValidator = new WebShareValidator();
-        }
-        return WebShareValidator;
-    }
-
-    private static void validate(ShareContent content, Validator validator)
-            throws FacebookException {
-        if (content == null) {
-            throw new FacebookException("Must provide non-null content to share");
-        }
-
-        if (content instanceof ShareLinkContent) {
-            validator.validate((ShareLinkContent) content);
-        } else if (content instanceof SharePhotoContent) {
-            validator.validate((SharePhotoContent) content);
-        } else if (content instanceof ShareVideoContent) {
-            validator.validate((ShareVideoContent) content);
-        } else if (content instanceof ShareOpenGraphContent) {
-            validator.validate((ShareOpenGraphContent) content);
-        } else if (content instanceof ShareMediaContent) {
-            validator.validate((ShareMediaContent) content);
-        }
-    }
-
-    private static void validateLinkContent(
-            ShareLinkContent linkContent, Validator validator) {
-        Uri imageUrl = linkContent.getImageUrl();
-        if (imageUrl != null && !Utility.isWebUri(imageUrl)) {
-            throw new FacebookException("Image Url must be an http:// or https:// url");
-        }
-    }
-
-    private static void validatePhotoContent(
-            SharePhotoContent photoContent, Validator validator) {
-        List<SharePhoto> photos = photoContent.getPhotos();
-        if (photos == null || photos.isEmpty()) {
-            throw new FacebookException("Must specify at least one Photo in SharePhotoContent.");
-        }
-        if (photos.size() > ShareConstants.MAXIMUM_PHOTO_COUNT) {
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Cannot add more than %d photos.",
-                            ShareConstants.MAXIMUM_PHOTO_COUNT));
-        }
-
-        for (SharePhoto photo : photos) {
-            validator.validate(photo);
-        }
-    }
-
-    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
-        if (photo == null) {
-            throw new FacebookException("Cannot share a null SharePhoto");
-        }
-
-        Bitmap photoBitmap = photo.getBitmap();
-        Uri photoUri = photo.getImageUrl();
-
-        if (photoBitmap == null) {
-            if (photoUri == null) {
-                throw new FacebookException(
-                        "SharePhoto does not have a Bitmap or ImageUrl specified");
-            }
-
-            if (Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
-                throw new FacebookException(
-                        "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
-                                "web when sharing SharePhotoContent");
-            }
-        }
-    }
-
-    private static void validatePhotoForNativeDialog(SharePhoto photo, Validator validator) {
-        validatePhotoForApi(photo, validator);
-
-        if (photo.getBitmap() != null || !Utility.isWebUri(photo.getImageUrl())) {
-            Validate.hasContentProvider(FacebookSdk.getApplicationContext());
-        }
-    }
-
-    private static void validatePhotoForWebDialog(SharePhoto photo, Validator validator) {
-        if (photo == null) {
-            throw new FacebookException("Cannot share a null SharePhoto");
-        }
-
-        Uri imageUri = photo.getImageUrl();
-        if (imageUri == null || !Utility.isWebUri(imageUri)) {
-            throw new FacebookException(
-                    "SharePhoto must have a non-null imageUrl set to the Uri of an image " +
-                            "on the web");
-        }
-    }
-
-    private static void validateVideoContent(
-            ShareVideoContent videoContent, Validator validator) {
-        validator.validate(videoContent.getVideo());
-
-        SharePhoto previewPhoto = videoContent.getPreviewPhoto();
-        if (previewPhoto != null) {
-            validator.validate(previewPhoto);
-        }
-    }
-
-    private static void validateVideo(ShareVideo video, Validator validator) {
-        if (video == null) {
-            throw new FacebookException("Cannot share a null ShareVideo");
-        }
-
-        Uri localUri = video.getLocalUrl();
-        if (localUri == null) {
-            throw new FacebookException("ShareVideo does not have a LocalUrl specified");
-        }
-
-        if (!Utility.isContentUri(localUri) && !Utility.isFileUri(localUri)) {
-            throw new FacebookException("ShareVideo must reference a video that is on the device");
-        }
-    }
-
-    private static void validateMediaContent(ShareMediaContent mediaContent, Validator validator) {
-        List<ShareMedia> media = mediaContent.getMedia();
-        if (media == null || media.isEmpty()) {
-            throw new FacebookException("Must specify at least one medium in ShareMediaContent.");
-        }
-        if (media.size() > ShareConstants.MAXIMUM_MEDIA_COUNT) {
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Cannot add more than %d media.",
-                            ShareConstants.MAXIMUM_MEDIA_COUNT));
-        }
-        for (ShareMedia medium : media) {
-            validator.validate(medium);
-        }
-    }
-
-    public static void validateMedium(ShareMedia medium, Validator validator) {
-        if (medium instanceof SharePhoto) {
-            validator.validate((SharePhoto) medium);
-        } else if (medium instanceof ShareVideo) {
-            validator.validate((ShareVideo) medium);
-        } else {
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Invalid media type: %s",
-                            medium.getClass().getSimpleName()));
-        }
-    }
-
-    private static void validateOpenGraphContent(
-            ShareOpenGraphContent openGraphContent, Validator validator) {
-        validator.validate(openGraphContent.getAction());
-
-        String previewPropertyName = openGraphContent.getPreviewPropertyName();
-        if (Utility.isNullOrEmpty(previewPropertyName)) {
-            throw new FacebookException("Must specify a previewPropertyName.");
-        }
-
-        if (openGraphContent.getAction().get(previewPropertyName) == null) {
-            throw new FacebookException(
-                    "Property \"" + previewPropertyName + "\" was not found on the action. " +
-                            "The name of the preview property must match the name of an " +
-                            "action property.");
-        }
-    }
-
-    private static void validateOpenGraphAction(
-            ShareOpenGraphAction openGraphAction,
-            Validator validator) {
-        if (openGraphAction == null) {
-            throw new FacebookException("Must specify a non-null ShareOpenGraphAction");
-        }
-
-        if (Utility.isNullOrEmpty(openGraphAction.getActionType())) {
-            throw new FacebookException("ShareOpenGraphAction must have a non-empty actionType");
-        }
-
-        validator.validate((ShareOpenGraphValueContainer) openGraphAction, false);
-    }
-
-    private static void validateOpenGraphObject(
-            ShareOpenGraphObject openGraphObject,
-            Validator validator) {
-        if (openGraphObject == null) {
-            throw new FacebookException("Cannot share a null ShareOpenGraphObject");
-        }
-
-        validator.validate((ShareOpenGraphValueContainer) openGraphObject, true);
-    }
-
-    private static void validateOpenGraphValueContainer(
-            ShareOpenGraphValueContainer valueContainer,
-            Validator validator,
-            boolean requireNamespace) {
-        Set<String> keySet = valueContainer.keySet();
-        for (String key : keySet) {
-            validateOpenGraphKey(key, requireNamespace);
-            Object o = valueContainer.get(key);
-            if (o instanceof List) {
-                List list = (List) o;
-                for (Object objectInList : list) {
-                    if (objectInList == null) {
-                        throw new FacebookException(
-                                "Cannot put null objects in Lists in " +
-                                        "ShareOpenGraphObjects and ShareOpenGraphActions");
-                    }
-                    validateOpenGraphValueContainerObject(objectInList, validator);
-                }
-            } else {
-                validateOpenGraphValueContainerObject(o, validator);
-            }
-        }
-    }
-
-    private static void validateOpenGraphKey(String key, boolean requireNamespace) {
-        if (!requireNamespace) {
-            return;
-        }
-
-        String[] components = key.split(":");
-        if (components.length < 2) {
-            throw new FacebookException("Open Graph keys must be namespaced: %s", key);
-        }
-        for (String component : components) {
-            if (component.isEmpty()) {
-                throw new FacebookException("Invalid key found in Open Graph dictionary: %s", key);
-            }
-        }
-    }
-
-    private static void validateOpenGraphValueContainerObject(
-            Object o, Validator validator) {
-        if (o instanceof ShareOpenGraphObject) {
-            validator.validate((ShareOpenGraphObject) o);
-        } else if (o instanceof SharePhoto) {
-            validator.validate((SharePhoto) o);
-        }
-    }
-
-    private static class WebShareValidator extends Validator {
-        @Override
-        public void validate(final SharePhotoContent photoContent) {
-            throw new FacebookException("Cannot share SharePhotoContent via web sharing dialogs");
-        }
-
-        @Override
-        public void validate(final ShareVideoContent videoContent) {
-            throw new FacebookException("Cannot share ShareVideoContent via web sharing dialogs");
-        }
-
-        @Override
-        public void validate(ShareMediaContent mediaContent) {
-            throw new FacebookException("Cannot share ShareMediaContent via web sharing dialogs");
-        }
-
-        @Override
-        public void validate(final SharePhoto photo) {
-            validatePhotoForWebDialog(photo, this);
-        }
-    }
-
-    private static class ApiValidator extends Validator {
-        @Override
-        public void validate(final SharePhoto photo) {
-            validatePhotoForApi(photo, this);
-        }
-
-        @Override
-        public void validate(ShareVideoContent videoContent) {
-            if (!Utility.isNullOrEmpty(videoContent.getPlaceId())) {
-                throw new FacebookException(
-                        "Cannot share video content with place IDs using the share api");
-            }
-            if (!Utility.isNullOrEmpty(videoContent.getPeopleIds())) {
-                throw new FacebookException(
-                        "Cannot share video content with people IDs using the share api");
-            }
-            if (!Utility.isNullOrEmpty(videoContent.getRef())) {
-                throw new FacebookException(
-                        "Cannot share video content with referrer URL using the share api");
-            }
-        }
-
-        @Override
-        public void validate(ShareMediaContent mediaContent) {
-            throw new FacebookException("Cannot share ShareMediaContent using the share api");
-        }
-
-        @Override
-        public void validate(ShareLinkContent linkContent) {
-            if (!Utility.isNullOrEmpty(linkContent.getQuote())) {
-                throw new FacebookException(
-                        "Cannot share link content with quote using the share api");
-            }
-        }
-    }
-
-    private static class Validator {
-        private boolean isOpenGraphContent = false;
-
-        public void validate(final ShareLinkContent linkContent) {
-            validateLinkContent(linkContent, this);
-        }
-
-        public void validate(final SharePhotoContent photoContent) {
-            validatePhotoContent(photoContent, this);
-        }
-
-        public void validate(final ShareVideoContent videoContent) {
-            validateVideoContent(videoContent, this);
-        }
-
-        public void validate(final ShareMediaContent mediaContent) {
-            validateMediaContent(mediaContent, this);
-        }
-
-        public void validate(final ShareOpenGraphContent openGraphContent) {
-            isOpenGraphContent = true;
-            validateOpenGraphContent(openGraphContent, this);
-        }
-
-        public void validate(final ShareOpenGraphAction openGraphAction) {
-            validateOpenGraphAction(openGraphAction, this);
-        }
-
-        public void validate(final ShareOpenGraphObject openGraphObject) {
-            validateOpenGraphObject(openGraphObject, this);
-        }
-
-        public void validate(final ShareOpenGraphValueContainer openGraphValueContainer,
-                             boolean requireNamespace) {
-            validateOpenGraphValueContainer(openGraphValueContainer, this, requireNamespace);
-        }
-
-        public void validate(final SharePhoto photo) {
-            validatePhotoForNativeDialog(photo, this);
-        }
-
-        public void validate(final ShareVideo video) {
-            validateVideo(video, this);
-        }
-
-        public void validate(final ShareMedia medium) {
-            validateMedium(medium, this);
-        }
-
-        public boolean isOpenGraphContent() {
-            return isOpenGraphContent;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
deleted file mode 100644
index b75ede84e..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum ShareDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Share dialog itself is supported by the installed version of the
-     * Facebook application.
-     */
-    SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618),
-    /**
-     * Indicates whether the native Share dialog supports sharing of photo images.
-     */
-    PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140204),
-    /**
-     * Indicates whether the native Share dialog supports sharing of videos.
-     */
-    VIDEO(NativeProtocol.PROTOCOL_VERSION_20141028),
-    /**
-     * Indicates whether the native Share dialog supports sharing of multimedia.
-     */
-    MULTIMEDIA(NativeProtocol.PROTOCOL_VERSION_20160327),
-    /**
-     * Indicates whether the native Share dialog supports hashtags
-     */
-    HASHTAG(NativeProtocol.PROTOCOL_VERSION_20160327),
-    /**
-     * Indicates whether the native Share dialog supports quotes
-     */
-    LINK_SHARE_QUOTES(NativeProtocol.PROTOCOL_VERSION_20160327),
-    ;
-
-    private int minVersion;
-
-    ShareDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_FEED_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java b/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
deleted file mode 100644
index 295ca4047..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.share.model.ShareContent;
-
-import java.util.HashMap;
-import java.util.Map;
-
-// This class is used specifically for backwards support in unity for various feed parameters
-// Currently this content is only supported if you set the mode to Feed when sharing.
-public class ShareFeedContent
-        extends ShareContent<ShareFeedContent, ShareFeedContent.Builder> {
-    private final String toId;
-    private final String link;
-    private final String linkName;
-    private final String linkCaption;
-    private final String linkDescription;
-    private final String picture;
-    private final String mediaSource;
-
-    private ShareFeedContent(final Builder builder) {
-        super(builder);
-        this.toId = builder.toId;
-        this.link = builder.link;
-        this.linkName = builder.linkName;
-        this.linkCaption = builder.linkCaption;
-        this.linkDescription = builder.linkDescription;
-        this.picture = builder.picture;
-        this.mediaSource = builder.mediaSource;
-    }
-
-    ShareFeedContent(final Parcel in) {
-        super(in);
-        this.toId = in.readString();
-        this.link = in.readString();
-        this.linkName = in.readString();
-        this.linkCaption = in.readString();
-        this.linkDescription = in.readString();
-        this.picture = in.readString();
-        this.mediaSource = in.readString();
-    }
-
-    public String getToId() {
-        return toId;
-    }
-
-    public String getLink() {
-        return link;
-    }
-
-    public String getLinkName() {
-        return linkName;
-    }
-
-    public String getLinkCaption() {
-        return linkCaption;
-    }
-
-    public String getLinkDescription() {
-        return linkDescription;
-    }
-
-    public String getPicture() {
-        return picture;
-    }
-
-    public String getMediaSource() {
-        return mediaSource;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeString(this.toId);
-        out.writeString(this.link);
-        out.writeString(this.linkName);
-        out.writeString(this.linkCaption);
-        out.writeString(this.linkDescription);
-        out.writeString(this.picture);
-        out.writeString(this.mediaSource);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Parcelable.Creator<ShareFeedContent> CREATOR =
-            new Parcelable.Creator<ShareFeedContent>() {
-                public ShareFeedContent createFromParcel(final Parcel in) {
-                    return new ShareFeedContent(in);
-                }
-
-                public ShareFeedContent[] newArray(final int size) {
-                    return new ShareFeedContent[size];
-                }
-            };
-
-    /**
-     * Builder for the {@link ShareFeedContent} interface.
-     */
-    public static final class Builder
-            extends ShareContent.Builder<ShareFeedContent, Builder> {
-        private String toId;
-        private String link;
-        private String linkName;
-        private String linkCaption;
-        private String linkDescription;
-        private String picture;
-        private String mediaSource;
-
-        public ShareFeedContent.Builder setToId(String toId) {
-            this.toId = toId;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLink(String link) {
-            this.link = link;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLinkName(String linkName) {
-            this.linkName = linkName;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLinkCaption(String linkCaption) {
-            this.linkCaption = linkCaption;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLinkDescription(String linkDescription) {
-            this.linkDescription = linkDescription;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setPicture(String picture) {
-            this.picture = picture;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setMediaSource(String mediaSource) {
-            this.mediaSource = mediaSource;
-            return this;
-        }
-
-        @Override
-        public ShareFeedContent build() {
-            return new ShareFeedContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareFeedContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setToId(model.getToId())
-                    .setLink(model.getLink())
-                    .setLinkName(model.getLinkName())
-                    .setLinkCaption(model.getLinkCaption())
-                    .setLinkDescription(model.getLinkDescription())
-                    .setPicture(model.getPicture())
-                    .setMediaSource(model.getMediaSource())
-                    ;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
deleted file mode 100644
index 4e8305eb2..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
+++ /dev/null
@@ -1,720 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.ParcelFileDescriptor;
-import android.support.annotation.Nullable;
-import android.util.Pair;
-
-import com.facebook.AccessToken;
-import com.facebook.CallbackManager;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookGraphResponseException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphRequest.Callback;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.NativeAppCallAttachmentStore;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareMedia;
-import com.facebook.share.model.ShareMediaContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-import com.facebook.share.widget.LikeView;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public final class ShareInternalUtility {
-    public static final String MY_PHOTOS = "me/photos";
-    private static final String MY_STAGING_RESOURCES = "me/staging_resources";
-
-    // Parameter names/values
-    private static final String STAGING_PARAM = "file";
-
-    public static void invokeCallbackWithException(
-            FacebookCallback<Sharer.Result> callback,
-            final Exception exception) {
-        if (exception instanceof FacebookException) {
-            invokeOnErrorCallback(callback, (FacebookException) exception);
-            return;
-        }
-        invokeCallbackWithError(
-                callback,
-                "Error preparing share content: " + exception.getLocalizedMessage());
-    }
-
-    public static void invokeCallbackWithError(
-            FacebookCallback<Sharer.Result> callback,
-            String error) {
-        invokeOnErrorCallback(callback, error);
-    }
-
-    public static void invokeCallbackWithResults(
-            FacebookCallback<Sharer.Result> callback,
-            final String postId,
-            final GraphResponse graphResponse) {
-        FacebookRequestError requestError = graphResponse.getError();
-        if (requestError != null) {
-            String errorMessage = requestError.getErrorMessage();
-            if (Utility.isNullOrEmpty(errorMessage)) {
-                errorMessage = "Unexpected error sharing.";
-            }
-            invokeOnErrorCallback(callback, graphResponse, errorMessage);
-        } else {
-            invokeOnSuccessCallback(callback, postId);
-        }
-    }
-
-    /**
-     * Returns the gesture with which the user completed the native dialog. This is only returned
-     * if the user has previously authorized the calling app with basic permissions.
-     *
-     * @param result the bundle passed back to onActivityResult
-     * @return "post" or "cancel" as the completion gesture
-     */
-    public static String getNativeDialogCompletionGesture(Bundle result) {
-        if (result.containsKey(NativeProtocol.RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY)) {
-            return result.getString(NativeProtocol.RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY);
-        }
-        return result.getString(NativeProtocol.EXTRA_DIALOG_COMPLETION_GESTURE_KEY);
-    }
-
-    /**
-     * Returns the id of the published post. This is only returned if the user has previously
-     * given the app publish permissions.
-     *
-     * @param result the bundle passed back to onActivityResult
-     * @return the id of the published post
-     */
-    public static String getShareDialogPostId(Bundle result) {
-        if (result.containsKey(ShareConstants.RESULT_POST_ID)) {
-            return result.getString(ShareConstants.RESULT_POST_ID);
-        }
-        if (result.containsKey(ShareConstants.EXTRA_RESULT_POST_ID)) {
-            return result.getString(ShareConstants.EXTRA_RESULT_POST_ID);
-        }
-        return result.getString(ShareConstants.WEB_DIALOG_RESULT_PARAM_POST_ID);
-    }
-
-    public static boolean handleActivityResult(
-            int requestCode,
-            int resultCode,
-            Intent data,
-            ResultProcessor resultProcessor) {
-        AppCall appCall = getAppCallFromActivityResult(requestCode, resultCode, data);
-        if (appCall == null) {
-            return false;
-        }
-
-        NativeAppCallAttachmentStore.cleanupAttachmentsForCall(appCall.getCallId());
-        if (resultProcessor == null) {
-            return true;
-        }
-
-        FacebookException exception = NativeProtocol.getExceptionFromErrorData(
-                NativeProtocol.getErrorDataFromResultIntent(data));
-        if (exception != null) {
-            if (exception instanceof FacebookOperationCanceledException) {
-                resultProcessor.onCancel(appCall);
-            } else {
-                resultProcessor.onError(appCall, exception);
-            }
-        } else {
-            // If here, we did not find an error in the result.
-            Bundle results = NativeProtocol.getSuccessResultsFromIntent(data);
-            resultProcessor.onSuccess(appCall, results);
-        }
-
-        return true;
-    }
-
-    // Custom handling for Share so that we can log results
-    public static ResultProcessor getShareResultProcessor(
-            final FacebookCallback<Sharer.Result> callback) {
-        return new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                if (results != null) {
-                    final String gesture = getNativeDialogCompletionGesture(results);
-                    if (gesture == null || "post".equalsIgnoreCase(gesture)) {
-                        String postId = getShareDialogPostId(results);
-                        invokeOnSuccessCallback(callback, postId);
-                    } else if ("cancel".equalsIgnoreCase(gesture)) {
-                        invokeOnCancelCallback(callback);
-                    } else {
-                        invokeOnErrorCallback(
-                                callback,
-                                new FacebookException(NativeProtocol.ERROR_UNKNOWN_ERROR));
-                    }
-                }
-            }
-
-            @Override
-            public void onCancel(AppCall appCall) {
-                invokeOnCancelCallback(callback);
-            }
-
-            @Override
-            public void onError(AppCall appCall, FacebookException error) {
-                invokeOnErrorCallback(callback, error);
-            }
-        };
-    }
-
-    private static AppCall getAppCallFromActivityResult(int requestCode,
-                                                        int resultCode,
-                                                        Intent data) {
-        UUID callId = NativeProtocol.getCallIdFromIntent(data);
-        if (callId == null) {
-            return null;
-        }
-
-        return AppCall.finishPendingCall(callId, requestCode);
-    }
-
-    public static void registerStaticShareCallback(
-            final int requestCode) {
-        CallbackManagerImpl.registerStaticCallback(
-                requestCode,
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return handleActivityResult(
-                                requestCode,
-                                resultCode,
-                                data,
-                                getShareResultProcessor(null));
-                    }
-                }
-        );
-    }
-
-    public static void registerSharerCallback(
-            final int requestCode,
-            final CallbackManager callbackManager,
-            final FacebookCallback<Sharer.Result> callback) {
-        if (!(callbackManager instanceof CallbackManagerImpl)) {
-            throw new FacebookException("Unexpected CallbackManager, " +
-                    "please use the provided Factory.");
-        }
-
-        ((CallbackManagerImpl) callbackManager).registerCallback(
-                requestCode,
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return handleActivityResult(
-                                requestCode,
-                                resultCode,
-                                data,
-                                getShareResultProcessor(callback));
-                    }
-                });
-    }
-
-    public static List<String> getPhotoUrls(
-            final SharePhotoContent photoContent,
-            final UUID appCallId) {
-        List<SharePhoto> photos;
-        if (photoContent == null || (photos = photoContent.getPhotos()) == null) {
-            return null;
-        }
-
-        List<NativeAppCallAttachmentStore.Attachment> attachments = Utility.map(
-                photos,
-                new Utility.Mapper<SharePhoto, NativeAppCallAttachmentStore.Attachment>() {
-                    @Override
-                    public NativeAppCallAttachmentStore.Attachment apply(SharePhoto item) {
-                        return getAttachment(appCallId, item);
-                    }
-                });
-
-        List<String> attachmentUrls = Utility.map(
-                attachments,
-                new Utility.Mapper<NativeAppCallAttachmentStore.Attachment, String>() {
-                    @Override
-                    public String apply(NativeAppCallAttachmentStore.Attachment item) {
-                        return item.getAttachmentUrl();
-                    }
-                });
-
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-
-        return attachmentUrls;
-    }
-
-    public static String getVideoUrl(final ShareVideoContent videoContent, final UUID appCallId) {
-        if (videoContent == null || videoContent.getVideo() == null) {
-            return null;
-        }
-
-        NativeAppCallAttachmentStore.Attachment attachment =
-                NativeAppCallAttachmentStore.createAttachment(
-                        appCallId,
-                        videoContent.getVideo().getLocalUrl());
-
-        ArrayList<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>(1);
-        attachments.add(attachment);
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-
-        return attachment.getAttachmentUrl();
-    }
-
-    public static List<Bundle> getMediaInfos(
-            final ShareMediaContent mediaContent,
-            final UUID appCallId) {
-        final List<ShareMedia> media;
-        if (mediaContent == null || (media = mediaContent.getMedia()) == null) {
-            return null;
-        }
-
-        final List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
-        List<Bundle> mediaInfos = Utility.map(
-                media,
-                new Utility.Mapper<ShareMedia, Bundle>() {
-                    @Override
-                    public Bundle apply(ShareMedia item) {
-                        NativeAppCallAttachmentStore.Attachment attachment =
-                                getAttachment(appCallId, item);
-                        attachments.add(attachment);
-                        Bundle mediaInfo = new Bundle();
-                        mediaInfo.putString(
-                                ShareConstants.MEDIA_TYPE,
-                                item.getMediaType().name());
-                        mediaInfo.putString(
-                                ShareConstants.MEDIA_URI,
-                                attachment.getAttachmentUrl());
-                        return mediaInfo;
-                    }
-                });
-
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-
-        return mediaInfos;
-    }
-
-    public static JSONObject toJSONObjectForCall(
-            final UUID callId,
-            final ShareOpenGraphContent content)
-            throws JSONException {
-        final ShareOpenGraphAction action = content.getAction();
-        final ArrayList<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
-        JSONObject actionJSON = OpenGraphJSONUtility.toJSONObject(
-                action,
-                new OpenGraphJSONUtility.PhotoJSONProcessor() {
-                    @Override
-                    public JSONObject toJSONObject(SharePhoto photo) {
-                        NativeAppCallAttachmentStore.Attachment attachment = getAttachment(
-                                callId,
-                                photo);
-
-                        if (attachment == null) {
-                            return null;
-                        }
-
-                        attachments.add(attachment);
-
-                        JSONObject photoJSONObject = new JSONObject();
-                        try {
-                            photoJSONObject.put(
-                                    NativeProtocol.IMAGE_URL_KEY, attachment.getAttachmentUrl());
-                            if (photo.getUserGenerated()) {
-                                photoJSONObject.put(NativeProtocol.IMAGE_USER_GENERATED_KEY, true);
-                            }
-                        } catch (JSONException e) {
-                            throw new FacebookException("Unable to attach images", e);
-                        }
-                        return photoJSONObject;
-                    }
-                });
-
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-        // People and place tags must be moved from the share content to the open graph action
-        if (content.getPlaceId() != null) {
-            String placeTag = actionJSON.optString("place");
-
-            // Only if the place tag is already empty or null replace with the id from the
-            // share content
-            if (Utility.isNullOrEmpty(placeTag)) {
-                actionJSON.put("place", content.getPlaceId());
-            }
-        }
-
-        if (content.getPeopleIds() != null) {
-            JSONArray peopleTags = actionJSON.optJSONArray("tags");
-            Set<String> peopleIdSet = peopleTags == null
-                    ? new HashSet<String>()
-                    : Utility.jsonArrayToSet(peopleTags);
-
-            for (String peopleId : content.getPeopleIds()) {
-                peopleIdSet.add(peopleId);
-            }
-            actionJSON.put("tags", new ArrayList<>(peopleIdSet));
-        }
-
-        return actionJSON;
-    }
-
-    public static JSONObject toJSONObjectForWeb(
-            final ShareOpenGraphContent shareOpenGraphContent)
-            throws JSONException {
-        ShareOpenGraphAction action = shareOpenGraphContent.getAction();
-
-        return OpenGraphJSONUtility.toJSONObject(
-                action,
-                new OpenGraphJSONUtility.PhotoJSONProcessor() {
-                    @Override
-                    public JSONObject toJSONObject(SharePhoto photo) {
-                        Uri photoUri = photo.getImageUrl();
-                        JSONObject photoJSONObject = new JSONObject();
-                        try {
-                            photoJSONObject.put(
-                                    NativeProtocol.IMAGE_URL_KEY, photoUri.toString());
-                        } catch (JSONException e) {
-                            throw new FacebookException("Unable to attach images", e);
-                        }
-                        return photoJSONObject;
-                    }
-                });
-    }
-
-    public static JSONArray removeNamespacesFromOGJsonArray(
-            JSONArray jsonArray,
-            boolean requireNamespace) throws JSONException {
-        JSONArray newArray = new JSONArray();
-        for (int i = 0; i < jsonArray.length(); ++i) {
-            Object value = jsonArray.get(i);
-            if (value instanceof JSONArray) {
-                value = removeNamespacesFromOGJsonArray((JSONArray) value, requireNamespace);
-            } else if (value instanceof JSONObject) {
-                value = removeNamespacesFromOGJsonObject((JSONObject) value, requireNamespace);
-            }
-            newArray.put(value);
-        }
-
-        return newArray;
-    }
-
-    public static JSONObject removeNamespacesFromOGJsonObject(
-            JSONObject jsonObject,
-            boolean requireNamespace) {
-        if (jsonObject == null) {
-            return null;
-        }
-
-        try {
-            JSONObject newJsonObject = new JSONObject();
-            JSONObject data = new JSONObject();
-            JSONArray names = jsonObject.names();
-            for (int i = 0; i < names.length(); ++i) {
-                String key = names.getString(i);
-                Object value = null;
-                value = jsonObject.get(key);
-                if (value instanceof JSONObject) {
-                    value = removeNamespacesFromOGJsonObject((JSONObject) value, true);
-                } else if (value instanceof JSONArray) {
-                    value = removeNamespacesFromOGJsonArray((JSONArray) value, true);
-                }
-
-                Pair<String, String> fieldNameAndNamespace = getFieldNameAndNamespaceFromFullName(
-                        key);
-                String namespace = fieldNameAndNamespace.first;
-                String fieldName = fieldNameAndNamespace.second;
-
-                if (requireNamespace) {
-                    if (namespace != null && namespace.equals("fbsdk")) {
-                        newJsonObject.put(key, value);
-                    } else if (namespace == null || namespace.equals("og")) {
-                        newJsonObject.put(fieldName, value);
-                    } else {
-                        data.put(fieldName, value);
-                    }
-                } else if (namespace != null && namespace.equals("fb")) {
-                    newJsonObject.put(key, value);
-                } else {
-                    newJsonObject.put(fieldName, value);
-                }
-            }
-
-            if (data.length() > 0) {
-                newJsonObject.put("data", data);
-            }
-
-            return newJsonObject;
-        } catch (JSONException e) {
-            throw new FacebookException("Failed to create json object from share content");
-        }
-    }
-
-    public static Pair<String, String> getFieldNameAndNamespaceFromFullName(String fullName) {
-        String namespace = null;
-        String fieldName;
-        int index = fullName.indexOf(':');
-        if (index != -1 && fullName.length() > index + 1) {
-            namespace = fullName.substring(0, index);
-            fieldName = fullName.substring(index + 1);
-        } else {
-            fieldName = fullName;
-        }
-        return new Pair<>(namespace, fieldName);
-    }
-
-    private static NativeAppCallAttachmentStore.Attachment getAttachment(
-            UUID callId,
-            ShareMedia medium) {
-        Bitmap bitmap = null;
-        Uri uri = null;
-
-        if (medium instanceof SharePhoto) {
-            SharePhoto photo = (SharePhoto)medium;
-            bitmap = photo.getBitmap();
-            uri = photo.getImageUrl();
-        } else if (medium instanceof ShareVideo) {
-            ShareVideo video = (ShareVideo)medium;
-            uri = video.getLocalUrl();
-        }
-
-        NativeAppCallAttachmentStore.Attachment attachment = null;
-        if (bitmap != null) {
-            attachment = NativeAppCallAttachmentStore.createAttachment(
-                    callId,
-                    bitmap);
-        } else if (uri != null) {
-            attachment = NativeAppCallAttachmentStore.createAttachment(
-                    callId,
-                    uri);
-        }
-
-        return attachment;
-    }
-
-    static void invokeOnCancelCallback(FacebookCallback<Sharer.Result> callback) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_CANCELLED, null);
-        if (callback != null) {
-            callback.onCancel();
-        }
-    }
-
-    static void invokeOnSuccessCallback(
-            FacebookCallback<Sharer.Result> callback,
-            String postId) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_SUCCEEDED, null);
-        if (callback != null) {
-            callback.onSuccess(new Sharer.Result(postId));
-        }
-    }
-
-    static void invokeOnErrorCallback(
-            FacebookCallback<Sharer.Result> callback,
-            GraphResponse response,
-            String message) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_ERROR, message);
-        if (callback != null) {
-            callback.onError(new FacebookGraphResponseException(response, message));
-        }
-    }
-
-
-    static void invokeOnErrorCallback(
-            FacebookCallback<Sharer.Result> callback,
-            String message) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_ERROR, message);
-        if (callback != null) {
-            callback.onError(new FacebookException(message));
-        }
-    }
-
-    static void invokeOnErrorCallback(
-            FacebookCallback<Sharer.Result> callback,
-            FacebookException ex) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_ERROR, ex.getMessage());
-        if (callback != null) {
-            callback.onError(ex);
-        }
-    }
-
-    private static void logShareResult(String shareOutcome, String errorMessage) {
-        Context context = FacebookSdk.getApplicationContext();
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        Bundle parameters = new Bundle();
-        parameters.putString(
-                AnalyticsEvents.PARAMETER_SHARE_OUTCOME,
-                shareOutcome
-        );
-
-        if (errorMessage != null) {
-            parameters.putString(AnalyticsEvents.PARAMETER_SHARE_ERROR_MESSAGE, errorMessage);
-        }
-        logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_RESULT, null, parameters);
-    }
-
-    /**
-     * Creates a new Request configured to upload an image to create a staging resource. Staging
-     * resources allow you to post binary data such as images, in preparation for a post of an Open
-     * Graph object or action which references the image. The URI returned when uploading a staging
-     * resource may be passed as the image property for an Open Graph object or action.
-     *
-     * @param accessToken the access token to use, or null
-     * @param image       the image to upload
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newUploadStagingResourceWithImageRequest(
-            AccessToken accessToken,
-            Bitmap image,
-            Callback callback) {
-        Bundle parameters = new Bundle(1);
-        parameters.putParcelable(STAGING_PARAM, image);
-
-        return new GraphRequest(
-                accessToken,
-                MY_STAGING_RESOURCES,
-                parameters,
-                HttpMethod.POST,
-                callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload an image to create a staging resource. Staging
-     * resources allow you to post binary data such as images, in preparation for a post of an Open
-     * Graph object or action which references the image. The URI returned when uploading a staging
-     * resource may be passed as the image property for an Open Graph object or action.
-     *
-     * @param accessToken the access token to use, or null
-     * @param file        the file containing the image to upload
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     * @throws FileNotFoundException
-     */
-    public static GraphRequest newUploadStagingResourceWithImageRequest(
-            AccessToken accessToken,
-            File file,
-            Callback callback
-    ) throws FileNotFoundException {
-        ParcelFileDescriptor descriptor =
-                ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
-        GraphRequest.ParcelableResourceWithMimeType<ParcelFileDescriptor> resourceWithMimeType =
-                new GraphRequest.ParcelableResourceWithMimeType<>(descriptor, "image/png");
-        Bundle parameters = new Bundle(1);
-        parameters.putParcelable(STAGING_PARAM, resourceWithMimeType);
-
-        return new GraphRequest(
-                accessToken,
-                MY_STAGING_RESOURCES,
-                parameters,
-                HttpMethod.POST,
-                callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload an image to create a staging resource. Staging
-     * resources allow you to post binary data such as images, in preparation for a post of an Open
-     * Graph object or action which references the image. The URI returned when uploading a staging
-     * resource may be passed as the image property for an Open Graph object or action.
-     *
-     * @param accessToken the access token to use, or null
-     * @param imageUri    the file:// or content:// Uri pointing to the image to upload
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     * @throws FileNotFoundException
-     */
-    public static GraphRequest newUploadStagingResourceWithImageRequest(
-            AccessToken accessToken,
-            Uri imageUri,
-            Callback callback
-    ) throws FileNotFoundException {
-        if (Utility.isFileUri(imageUri)) {
-            return newUploadStagingResourceWithImageRequest(
-                    accessToken,
-                    new File(imageUri.getPath()),
-                    callback);
-        } else if (!Utility.isContentUri(imageUri)) {
-            throw new FacebookException("The image Uri must be either a file:// or content:// Uri");
-        }
-
-        GraphRequest.ParcelableResourceWithMimeType<Uri> resourceWithMimeType =
-                new GraphRequest.ParcelableResourceWithMimeType<>(imageUri, "image/png");
-        Bundle parameters = new Bundle(1);
-        parameters.putParcelable(STAGING_PARAM, resourceWithMimeType);
-
-        return new GraphRequest(
-                accessToken,
-                MY_STAGING_RESOURCES,
-                parameters,
-                HttpMethod.POST,
-                callback);
-    }
-
-    @Nullable
-    public static LikeView.ObjectType getMostSpecificObjectType(
-            LikeView.ObjectType objectType1,
-            LikeView.ObjectType objectType2) {
-        if (objectType1 == objectType2) {
-            return objectType1;
-        }
-
-        if (objectType1 == LikeView.ObjectType.UNKNOWN) {
-            return objectType2;
-        } else if (objectType2 == LikeView.ObjectType.UNKNOWN) {
-            return objectType1;
-        } else {
-            // We can't have a PAGE and an OPEN_GRAPH type be compatible.
-            return null;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java b/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
deleted file mode 100644
index 52a012d9d..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
+++ /dev/null
@@ -1,643 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.ParcelFileDescriptor;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenTracker;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookGraphResponseException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.internal.WorkQueue;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Set;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class VideoUploader {
-
-    private static final String TAG = "VideoUploader";
-
-    private static final String PARAM_UPLOAD_PHASE = "upload_phase";
-    private static final String PARAM_VALUE_UPLOAD_START_PHASE = "start";
-    private static final String PARAM_VALUE_UPLOAD_TRANSFER_PHASE = "transfer";
-    private static final String PARAM_VALUE_UPLOAD_FINISH_PHASE = "finish";
-
-    private static final String PARAM_TITLE = "title";
-    private static final String PARAM_DESCRIPTION = "description";
-    private static final String PARAM_REF = "ref";
-    private static final String PARAM_FILE_SIZE = "file_size";
-    private static final String PARAM_SESSION_ID = "upload_session_id";
-    private static final String PARAM_VIDEO_ID = "video_id";
-    private static final String PARAM_START_OFFSET = "start_offset";
-    private static final String PARAM_END_OFFSET = "end_offset";
-    private static final String PARAM_VIDEO_FILE_CHUNK = "video_file_chunk";
-
-    private static final String ERROR_UPLOAD = "Video upload failed";
-    private static final String ERROR_BAD_SERVER_RESPONSE = "Unexpected error in server response";
-
-    private static final int UPLOAD_QUEUE_MAX_CONCURRENT = WorkQueue.DEFAULT_MAX_CONCURRENT;
-    private static final int MAX_RETRIES_PER_PHASE = 2;
-    private static final int RETRY_DELAY_UNIT_MS = 5000;
-    private static final int RETRY_DELAY_BACK_OFF_FACTOR = 3;
-
-    private static boolean initialized;
-
-    private static Handler handler;
-    private static WorkQueue uploadQueue = new WorkQueue(UPLOAD_QUEUE_MAX_CONCURRENT);
-
-    private static Set<UploadContext> pendingUploads = new HashSet<>();
-
-    private static AccessTokenTracker accessTokenTracker;
-
-    public static synchronized void uploadAsync(
-            ShareVideoContent videoContent,
-            FacebookCallback<Sharer.Result> callback)
-            throws FileNotFoundException {
-        uploadAsync(videoContent, "me", callback);
-    }
-
-    public static synchronized void uploadAsync(
-            ShareVideoContent videoContent,
-            String graphNode,
-            FacebookCallback<Sharer.Result> callback)
-            throws FileNotFoundException {
-        if (!initialized) {
-            registerAccessTokenTracker();
-            initialized = true;
-        }
-
-        Validate.notNull(videoContent, "videoContent");
-        Validate.notNull(graphNode, "graphNode");
-        ShareVideo video = videoContent.getVideo();
-        Validate.notNull(video, "videoContent.video");
-        Uri videoUri = video.getLocalUrl();
-        Validate.notNull(videoUri, "videoContent.video.localUrl");
-
-        UploadContext uploadContext = new UploadContext(videoContent, graphNode, callback);
-        uploadContext.initialize();
-
-        pendingUploads.add(uploadContext);
-
-        enqueueUploadStart(
-                uploadContext,
-                0);
-    }
-
-    private static synchronized void cancelAllRequests() {
-        for (UploadContext uploadContext : pendingUploads) {
-            uploadContext.isCanceled = true;
-        }
-    }
-
-    private static synchronized void removePendingUpload(
-            UploadContext uploadContext) {
-        pendingUploads.remove(uploadContext);
-    }
-
-    private static synchronized Handler getHandler() {
-        if (handler == null) {
-            handler = new Handler(Looper.getMainLooper());
-        }
-        return handler;
-    }
-
-    private static void issueResponse(
-            final UploadContext uploadContext,
-            final FacebookException error,
-            final String videoId) {
-        // Remove the UploadContext synchronously
-        // Once the UploadContext is removed, this is the only reference to it.
-        removePendingUpload(uploadContext);
-
-        Utility.closeQuietly(uploadContext.videoStream);
-
-        if (uploadContext.callback != null) {
-            if (error != null) {
-                ShareInternalUtility.invokeOnErrorCallback(uploadContext.callback, error);
-            } else if (uploadContext.isCanceled) {
-                ShareInternalUtility.invokeOnCancelCallback(uploadContext.callback);
-            } else {
-                ShareInternalUtility.invokeOnSuccessCallback(uploadContext.callback, videoId);
-            }
-        }
-    }
-
-    private static void enqueueUploadStart(UploadContext uploadContext, int completedRetries) {
-        enqueueRequest(
-                uploadContext,
-                new StartUploadWorkItem(
-                        uploadContext,
-                        completedRetries));
-    }
-
-    private static void enqueueUploadChunk(
-            UploadContext uploadContext,
-            String chunkStart,
-            String chunkEnd,
-            int completedRetries) {
-        enqueueRequest(
-                uploadContext,
-                new TransferChunkWorkItem(
-                        uploadContext,
-                        chunkStart,
-                        chunkEnd,
-                        completedRetries));
-    }
-
-    private static void enqueueUploadFinish(UploadContext uploadContext, int completedRetries) {
-        enqueueRequest(
-                uploadContext,
-                new FinishUploadWorkItem(
-                        uploadContext,
-                        completedRetries));
-    }
-
-    private static synchronized void enqueueRequest(
-            UploadContext uploadContext,
-            Runnable workItem) {
-        uploadContext.workItem = uploadQueue.addActiveWorkItem(workItem);
-    }
-
-    private static byte[] getChunk(
-            UploadContext uploadContext,
-            String chunkStart,
-            String chunkEnd)
-            throws IOException {
-        if (!Utility.areObjectsEqual(chunkStart, uploadContext.chunkStart)) {
-            // Something went wrong in the book-keeping here.
-            logError(
-                    null,
-                    "Error reading video chunk. Expected chunk '%s'. Requested chunk '%s'.",
-                    uploadContext.chunkStart,
-                    chunkStart);
-            return null;
-        }
-
-        long chunkStartLong = Long.parseLong(chunkStart);
-        long chunkEndLong = Long.parseLong(chunkEnd);
-        int chunkSize = (int) (chunkEndLong - chunkStartLong);
-
-        ByteArrayOutputStream byteBufferStream = new ByteArrayOutputStream();
-        int bufferSize = Math.min(8192, chunkSize);
-        byte[] buffer = new byte[bufferSize];
-
-        int len = 0;
-        while ((len = uploadContext.videoStream.read(buffer)) != -1) {
-            byteBufferStream.write(buffer, 0, len);
-
-            chunkSize -= len;
-            if (chunkSize == 0) {
-                // Done!
-                break;
-            } else if (chunkSize < 0) {
-                // This should not happen. Signal an error.
-                logError(
-                        null,
-                        "Error reading video chunk. Expected buffer length - '%d'. Actual - '%d'.",
-                        chunkSize + len,
-                        len);
-                return null;
-            }
-        }
-
-        uploadContext.chunkStart = chunkEnd;
-
-        return byteBufferStream.toByteArray();
-    }
-
-    private static void registerAccessTokenTracker() {
-        accessTokenTracker = new AccessTokenTracker() {
-            @Override
-            protected void onCurrentAccessTokenChanged(
-                    AccessToken oldAccessToken,
-                    AccessToken currentAccessToken) {
-                if (oldAccessToken == null) {
-                    // If we never had an access token, then there would be no pending uploads.
-                    return;
-                }
-
-                if (currentAccessToken == null ||
-                        !Utility.areObjectsEqual(
-                                currentAccessToken.getUserId(),
-                                oldAccessToken.getUserId())) {
-                    // Cancel any pending uploads since the user changed.
-                    cancelAllRequests();
-                }
-            }
-        };
-    }
-
-    private static void logError(
-            Exception e,
-            String format,
-            Object... args) {
-        Log.e(TAG, String.format(Locale.ROOT, format, args), e);
-    }
-
-    private static class UploadContext {
-        public final Uri videoUri;
-        public final String title;
-        public final String description;
-        public final String ref;
-        public final String graphNode;
-
-        public final AccessToken accessToken;
-
-        public final FacebookCallback<Sharer.Result> callback;
-
-        public String sessionId;
-        public String videoId;
-        public InputStream videoStream;
-        public long videoSize;
-        public String chunkStart = "0";
-        public boolean isCanceled;
-        public WorkQueue.WorkItem workItem;
-        public Bundle params;
-
-        private UploadContext(
-                ShareVideoContent videoContent,
-                String graphNode,
-                FacebookCallback<Sharer.Result> callback) {
-            // Store off the access token right away so that under no circumstances will we
-            // end up with different tokens between phases. We will rely on the access token tracker
-            // to cancel pending uploads.
-            this.accessToken = AccessToken.getCurrentAccessToken();
-            this.videoUri = videoContent.getVideo().getLocalUrl();
-            this.title = videoContent.getContentTitle();
-            this.description = videoContent.getContentDescription();
-            this.ref = videoContent.getRef();
-            this.graphNode = graphNode;
-            this.callback = callback;
-            this.params = videoContent.getVideo().getParameters();
-            if (!Utility.isNullOrEmpty(videoContent.getPeopleIds())) {
-                this.params.putString("tags", TextUtils.join(", ", videoContent.getPeopleIds()));
-            }
-
-            if (!Utility.isNullOrEmpty(videoContent.getPlaceId())) {
-                this.params.putString("place", videoContent.getPlaceId());
-            }
-
-            if (!Utility.isNullOrEmpty(videoContent.getRef())) {
-                this.params.putString("ref", videoContent.getRef());
-            }
-        }
-
-        private void initialize()
-                throws FileNotFoundException {
-            ParcelFileDescriptor fileDescriptor = null;
-            try {
-                if (Utility.isFileUri(videoUri)) {
-                    fileDescriptor = ParcelFileDescriptor.open(
-                            new File(videoUri.getPath()),
-                            ParcelFileDescriptor.MODE_READ_ONLY);
-                    videoSize = fileDescriptor.getStatSize();
-                    videoStream = new ParcelFileDescriptor.AutoCloseInputStream(fileDescriptor);
-                } else if (Utility.isContentUri(videoUri)) {
-                    videoSize = Utility.getContentSize(videoUri);
-                    videoStream = FacebookSdk
-                            .getApplicationContext()
-                            .getContentResolver()
-                            .openInputStream(videoUri);
-                } else {
-                    throw new FacebookException("Uri must be a content:// or file:// uri");
-                }
-            } catch (FileNotFoundException e) {
-                Utility.closeQuietly(videoStream);
-
-                throw e;
-            }
-        }
-    }
-
-    private static class StartUploadWorkItem extends UploadWorkItemBase {
-        static final Set<Integer> transientErrorCodes = new HashSet<Integer>() {{
-            add(6000);
-        }};
-
-        public StartUploadWorkItem(UploadContext uploadContext, int completedRetries) {
-            super(uploadContext, completedRetries);
-        }
-
-        @Override
-        public Bundle getParameters() {
-            Bundle parameters = new Bundle();
-            parameters.putString(PARAM_UPLOAD_PHASE, PARAM_VALUE_UPLOAD_START_PHASE);
-            parameters.putLong(PARAM_FILE_SIZE, uploadContext.videoSize);
-
-            return parameters;
-        }
-
-        @Override
-        protected void handleSuccess(JSONObject jsonObject)
-                throws JSONException {
-            uploadContext.sessionId = jsonObject.getString(PARAM_SESSION_ID);
-            uploadContext.videoId = jsonObject.getString(PARAM_VIDEO_ID);
-            String startOffset = jsonObject.getString(PARAM_START_OFFSET);
-            String endOffset = jsonObject.getString(PARAM_END_OFFSET);
-
-            enqueueUploadChunk(
-                    uploadContext,
-                    startOffset,
-                    endOffset,
-                    0);
-        }
-
-        @Override
-        protected void handleError(FacebookException error) {
-            logError(error, "Error starting video upload");
-            endUploadWithFailure(error);
-        }
-
-        @Override
-        protected Set<Integer> getTransientErrorCodes() {
-            return transientErrorCodes;
-        }
-
-        @Override
-        protected void enqueueRetry(int retriesCompleted) {
-            enqueueUploadStart(uploadContext, retriesCompleted);
-        }
-    }
-
-    private static class TransferChunkWorkItem extends UploadWorkItemBase {
-        static final Set<Integer> transientErrorCodes = new HashSet<Integer>() {{
-            add(1363019);
-            add(1363021);
-            add(1363030);
-            add(1363033);
-            add(1363041);
-        }};
-
-        private String chunkStart;
-        private String chunkEnd;
-
-        public TransferChunkWorkItem(
-                UploadContext uploadContext,
-                String chunkStart,
-                String chunkEnd,
-                int completedRetries) {
-            super(uploadContext, completedRetries);
-            this.chunkStart = chunkStart;
-            this.chunkEnd = chunkEnd;
-        }
-
-        @Override
-        public Bundle getParameters()
-                throws IOException {
-            Bundle parameters = new Bundle();
-            parameters.putString(PARAM_UPLOAD_PHASE, PARAM_VALUE_UPLOAD_TRANSFER_PHASE);
-            parameters.putString(PARAM_SESSION_ID, uploadContext.sessionId);
-            parameters.putString(PARAM_START_OFFSET, chunkStart);
-
-            byte[] chunk = getChunk(uploadContext, chunkStart, chunkEnd);
-            if (chunk != null) {
-                parameters.putByteArray(PARAM_VIDEO_FILE_CHUNK, chunk);
-            } else {
-                throw new FacebookException("Error reading video");
-            }
-
-            return parameters;
-        }
-
-        @Override
-        protected void handleSuccess(JSONObject jsonObject)
-                throws JSONException {
-            String startOffset = jsonObject.getString(PARAM_START_OFFSET);
-            String endOffset = jsonObject.getString(PARAM_END_OFFSET);
-
-            if (Utility.areObjectsEqual(startOffset, endOffset)) {
-                enqueueUploadFinish(
-                        uploadContext,
-                        0);
-            } else {
-                enqueueUploadChunk(
-                        uploadContext,
-                        startOffset,
-                        endOffset,
-                        0);
-            }
-        }
-
-        @Override
-        protected void handleError(FacebookException error) {
-            logError(error, "Error uploading video '%s'", uploadContext.videoId);
-            endUploadWithFailure(error);
-        }
-
-        @Override
-        protected Set<Integer> getTransientErrorCodes() {
-            return transientErrorCodes;
-        }
-
-        @Override
-        protected void enqueueRetry(int retriesCompleted) {
-            enqueueUploadChunk(uploadContext, chunkStart, chunkEnd, retriesCompleted);
-        }
-    }
-
-    private static class FinishUploadWorkItem extends UploadWorkItemBase {
-        static final Set<Integer> transientErrorCodes = new HashSet<Integer>() {{
-            add(1363011);
-        }};
-
-        public FinishUploadWorkItem(UploadContext uploadContext, int completedRetries) {
-            super(uploadContext, completedRetries);
-        }
-
-        @Override
-        public Bundle getParameters() {
-            Bundle parameters = new Bundle();
-            if (uploadContext.params != null) {
-                parameters.putAll(uploadContext.params);
-            }
-            parameters.putString(PARAM_UPLOAD_PHASE, PARAM_VALUE_UPLOAD_FINISH_PHASE);
-            parameters.putString(PARAM_SESSION_ID, uploadContext.sessionId);
-            Utility.putNonEmptyString(parameters, PARAM_TITLE, uploadContext.title);
-            Utility.putNonEmptyString(parameters, PARAM_DESCRIPTION, uploadContext.description);
-            Utility.putNonEmptyString(parameters, PARAM_REF, uploadContext.ref);
-
-            return parameters;
-        }
-
-        @Override
-        protected void handleSuccess(JSONObject jsonObject)
-                throws JSONException {
-            if (jsonObject.getBoolean("success")) {
-                issueResponseOnMainThread(null, uploadContext.videoId);
-            } else {
-                handleError(new FacebookException(ERROR_BAD_SERVER_RESPONSE));
-            }
-        }
-
-        @Override
-        protected void handleError(FacebookException error) {
-            logError(error, "Video '%s' failed to finish uploading", uploadContext.videoId);
-            endUploadWithFailure(error);
-        }
-
-        @Override
-        protected Set<Integer> getTransientErrorCodes() {
-            return transientErrorCodes;
-        }
-
-        @Override
-        protected void enqueueRetry(int retriesCompleted) {
-            enqueueUploadFinish(uploadContext, retriesCompleted);
-        }
-    }
-
-    private static abstract class UploadWorkItemBase implements Runnable {
-        protected UploadContext uploadContext;
-        protected int completedRetries;
-
-        protected UploadWorkItemBase(
-                UploadContext uploadContext,
-                int completedRetries) {
-            this.uploadContext = uploadContext;
-            this.completedRetries = completedRetries;
-        }
-
-        @Override
-        public void run() {
-            if (!uploadContext.isCanceled) {
-                try {
-                    executeGraphRequestSynchronously(getParameters());
-                } catch (FacebookException fe) {
-                    endUploadWithFailure(fe);
-                } catch (Exception e) {
-                    endUploadWithFailure(new FacebookException(ERROR_UPLOAD, e));
-                }
-            } else {
-                // No specific failure here.
-                endUploadWithFailure(null);
-            }
-        }
-
-        protected void executeGraphRequestSynchronously(Bundle parameters) {
-            GraphRequest request = new GraphRequest(
-                    uploadContext.accessToken,
-                    String.format(Locale.ROOT, "%s/videos", uploadContext.graphNode),
-                    parameters,
-                    HttpMethod.POST,
-                    null);
-            GraphResponse response = request.executeAndWait();
-
-            if (response != null) {
-                FacebookRequestError error = response.getError();
-                JSONObject responseJSON = response.getJSONObject();
-                if (error != null) {
-                    if (!attemptRetry(error.getSubErrorCode())) {
-                        handleError(new FacebookGraphResponseException(response, ERROR_UPLOAD));
-                    }
-                } else if (responseJSON != null) {
-                    try {
-                        handleSuccess(responseJSON);
-                    } catch (JSONException e) {
-                        endUploadWithFailure(new FacebookException(ERROR_BAD_SERVER_RESPONSE, e));
-                    }
-                } else {
-                    handleError(new FacebookException(ERROR_BAD_SERVER_RESPONSE));
-                }
-            } else {
-                handleError(new FacebookException(ERROR_BAD_SERVER_RESPONSE));
-            }
-        }
-
-        private boolean attemptRetry(int errorCode) {
-            if (completedRetries < MAX_RETRIES_PER_PHASE &&
-                    getTransientErrorCodes().contains(errorCode)) {
-                int delay = RETRY_DELAY_UNIT_MS * (int) Math.pow(
-                        RETRY_DELAY_BACK_OFF_FACTOR, completedRetries);
-
-                // Enqueuing the retry from the main thread which should be a lightweight
-                // action with no I/O.
-                getHandler().postDelayed(new Runnable() {
-                    @Override
-                    public void run() {
-                        enqueueRetry(completedRetries + 1);
-                    }
-                }, delay);
-
-                return true;
-            } else {
-                return false;
-            }
-        }
-
-        protected void endUploadWithFailure(FacebookException error) {
-            issueResponseOnMainThread(error, null);
-        }
-
-        protected void issueResponseOnMainThread(
-                final FacebookException error,
-                final String videoId) {
-            getHandler().post(new Runnable() {
-                @Override
-                public void run() {
-                    issueResponse(uploadContext, error, videoId);
-                }
-            });
-        }
-
-        protected abstract Bundle getParameters()
-                throws Exception;
-
-        protected abstract void handleSuccess(JSONObject jsonObject)
-                throws JSONException;
-
-        protected abstract void handleError(FacebookException error);
-
-        protected abstract Set<Integer> getTransientErrorCodes();
-
-        protected abstract void enqueueRetry(int retriesCompleted);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
deleted file mode 100644
index 68d7774b6..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
+++ /dev/null
@@ -1,251 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-
-import com.facebook.FacebookException;
-import com.facebook.internal.Utility;
-import com.facebook.internal.WebDialog;
-import com.facebook.share.model.AppGroupCreationContent;
-import com.facebook.share.model.GameRequestContent;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareHashtag;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class WebDialogParameters {
-
-    public static Bundle create(AppGroupCreationContent appGroupCreationContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_NAME,
-                appGroupCreationContent.getName());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_DESCRIPTION,
-                appGroupCreationContent.getDescription());
-
-        AppGroupCreationContent.AppGroupPrivacy privacy =
-                appGroupCreationContent.getAppGroupPrivacy();
-        if (privacy != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_PRIVACY,
-                    privacy.toString().toLowerCase(Locale.ENGLISH));
-        }
-
-        return webParams;
-    }
-
-    public static Bundle create(GameRequestContent gameRequestContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_MESSAGE,
-                gameRequestContent.getMessage());
-        Utility.putCommaSeparatedStringList(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_TO,
-                gameRequestContent.getRecipients());
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_TITLE,
-                gameRequestContent.getTitle());
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_DATA,
-                gameRequestContent.getData());
-        if (gameRequestContent.getActionType() != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_ACTION_TYPE,
-                    gameRequestContent.getActionType().toString().toLowerCase(Locale.ENGLISH));
-        }
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_OBJECT_ID,
-                gameRequestContent.getObjectId());
-        if (gameRequestContent.getFilters() != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_FILTERS,
-                    gameRequestContent.getFilters().toString().toLowerCase(Locale.ENGLISH));
-        }
-        Utility.putCommaSeparatedStringList(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_SUGGESTIONS,
-                gameRequestContent.getSuggestions());
-        return webParams;
-    }
-
-    public static Bundle create(ShareLinkContent shareLinkContent) {
-        Bundle params = createBaseParameters(shareLinkContent);
-        Utility.putUri(
-                params,
-                ShareConstants.WEB_DIALOG_PARAM_HREF,
-                shareLinkContent.getContentUrl());
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
-                shareLinkContent.getQuote());
-
-        return params;
-    }
-
-    public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
-        Bundle params = createBaseParameters(shareOpenGraphContent);
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.WEB_DIALOG_PARAM_ACTION_TYPE,
-                shareOpenGraphContent.getAction().getActionType());
-
-        try {
-            JSONObject ogJSON = ShareInternalUtility.toJSONObjectForWeb(shareOpenGraphContent);
-            ogJSON = ShareInternalUtility.removeNamespacesFromOGJsonObject(ogJSON, false);
-            if (ogJSON != null) {
-                Utility.putNonEmptyString(
-                        params,
-                        ShareConstants.WEB_DIALOG_PARAM_ACTION_PROPERTIES,
-                        ogJSON.toString());
-            }
-        } catch (JSONException e) {
-            throw new FacebookException("Unable to serialize the ShareOpenGraphContent to JSON", e);
-        }
-
-        return params;
-    }
-
-    public static Bundle createBaseParameters(ShareContent shareContent) {
-        Bundle params = new Bundle();
-
-        ShareHashtag shareHashtag = shareContent.getShareHashtag();
-        if (shareHashtag != null) {
-            Utility.putNonEmptyString(
-                    params,
-                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
-                    shareHashtag.getHashtag());
-        }
-
-        return params;
-    }
-
-    public static Bundle createForFeed(ShareLinkContent shareLinkContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_NAME,
-                shareLinkContent.getContentTitle());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_DESCRIPTION,
-                shareLinkContent.getContentDescription());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_LINK,
-                Utility.getUriString(shareLinkContent.getContentUrl()));
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_PICTURE,
-                Utility.getUriString(shareLinkContent.getImageUrl()));
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
-                shareLinkContent.getQuote());
-
-        ShareHashtag shareHashtag = shareLinkContent.getShareHashtag();
-        if (shareHashtag != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
-                    shareLinkContent.getShareHashtag().getHashtag());
-        }
-        return webParams;
-    }
-
-    public static Bundle createForFeed(ShareFeedContent shareFeedContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_TO_PARAM,
-                shareFeedContent.getToId());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_LINK_PARAM,
-                shareFeedContent.getLink());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_PICTURE_PARAM,
-                shareFeedContent.getPicture());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_SOURCE_PARAM,
-                shareFeedContent.getMediaSource());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_NAME_PARAM,
-                shareFeedContent.getLinkName());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_CAPTION_PARAM,
-                shareFeedContent.getLinkCaption());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_DESCRIPTION_PARAM,
-                shareFeedContent.getLinkDescription());
-
-        return webParams;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java b/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
deleted file mode 100644
index d85a06756..000000000
--- a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
+++ /dev/null
@@ -1,168 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-/**
- * Describes the content that will be displayed by the AppGroupCreationDialog
- */
-public final class AppGroupCreationContent implements ShareModel {
-    private final String name;
-    private final String description;
-    private AppGroupPrivacy privacy;
-
-    private AppGroupCreationContent(final Builder builder) {
-        this.name = builder.name;
-        this.description = builder.description;
-        this.privacy = builder.privacy;
-    }
-
-    AppGroupCreationContent(final Parcel in) {
-        this.name = in.readString();
-        this.description = in.readString();
-        this.privacy = (AppGroupPrivacy) in.readSerializable();
-    }
-
-    /**
-     * Gets the name of the group that will be created.
-     *
-     * @return name of the group
-     */
-    public String getName() {
-        return this.name;
-    }
-
-    /**
-     * Gets the description of the group that will be created.
-     *
-     * @return the description
-     */
-    public String getDescription() {
-        return this.description;
-    }
-
-    /**
-     * Gets the privacy for the group that will be created
-     *
-     * @return the privacy of the group
-     */
-    public AppGroupPrivacy getAppGroupPrivacy() {
-        return this.privacy;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.name);
-        out.writeString(this.description);
-        out.writeSerializable(this.privacy);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<AppGroupCreationContent> CREATOR =
-            new Creator<AppGroupCreationContent>() {
-                public AppGroupCreationContent createFromParcel(final Parcel in) {
-                    return new AppGroupCreationContent(in);
-                }
-
-                public AppGroupCreationContent[] newArray(final int size) {
-                    return new AppGroupCreationContent[size];
-                }
-            };
-
-    /**
-     * Specifies the privacy of a group.
-     */
-    public enum AppGroupPrivacy {
-        /**
-         * Anyone can see the group, who's in it and what members post.
-         */
-        Open,
-
-        /**
-         * Anyone can see the group and who's in it, but only members can see posts.
-         */
-        Closed,
-    }
-
-    /**
-     * Builder class for a concrete instance of AppGroupCreationContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<AppGroupCreationContent, Builder> {
-        private String name;
-        private String description;
-        private AppGroupPrivacy privacy;
-
-        /**
-         * Sets the name of the group that will be created.
-         *
-         * @param name name of the group
-         * @return the builder
-         */
-        public Builder setName(final String name) {
-            this.name = name;
-            return this;
-        }
-
-        /**
-         * Sets the description of the group that will be created.
-         *
-         * @param description the description
-         * @return the builder
-         */
-        public Builder setDescription(final String description) {
-            this.description = description;
-            return this;
-        }
-
-        /**
-         * Sets the privacy for the group that will be created
-         *
-         * @param privacy privacy of the group
-         * @return the builder
-         */
-        public Builder setAppGroupPrivacy(final AppGroupPrivacy privacy) {
-            this.privacy = privacy;
-            return this;
-        }
-
-        @Override
-        public AppGroupCreationContent build() {
-            return new AppGroupCreationContent(this);
-        }
-
-
-        @Override
-        public Builder readFrom(final AppGroupCreationContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setName(content.getName())
-                    .setDescription(content.getDescription())
-                    .setAppGroupPrivacy(content.getAppGroupPrivacy());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
deleted file mode 100644
index c9b690cf5..000000000
--- a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
+++ /dev/null
@@ -1,264 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.text.TextUtils;
-
-/**
- * Describes the content that will be displayed by the AppInviteDialog
- */
-public final class AppInviteContent implements ShareModel {
-    private final String applinkUrl;
-    private final String previewImageUrl;
-    private final String promoCode;
-    private final String promoText;
-    private final Builder.Destination destination;
-
-    private AppInviteContent(final Builder builder) {
-        this.applinkUrl = builder.applinkUrl;
-        this.previewImageUrl = builder.previewImageUrl;
-        this.promoCode = builder.promoCode;
-        this.promoText = builder.promoText;
-        this.destination = builder.destination;
-    }
-
-    AppInviteContent(final Parcel in) {
-        this.applinkUrl = in.readString();
-        this.previewImageUrl = in.readString();
-        this.promoText = in.readString();
-        this.promoCode = in.readString();
-
-        String destinationString = in.readString();
-        if (destinationString.length() > 0) {
-            this.destination = Builder.Destination.valueOf(destinationString);
-        }
-        else {
-            this.destination = Builder.Destination.FACEBOOK;
-        }
-    }
-
-    /**
-     * Gets the applink url.
-     * @return The applink url for the invite.
-     */
-    public String getApplinkUrl() {
-        return applinkUrl;
-    }
-
-    /**
-     * Gets the preview image url.
-     * @return The preview image url for the invite.
-     */
-    public String getPreviewImageUrl() {
-        return previewImageUrl;
-    }
-
-    /**
-     * Gets the promotion code.
-     * @return The promotion code for invite.
-     */
-    public String getPromotionCode() {
-        return promoCode;
-    }
-
-    /**
-     * Gets the promotion text.
-     * @return The promotion text for invite.
-     */
-    public String getPromotionText() {
-        return promoText;
-    }
-
-    /**
-     * Gets the destination for the invite.
-     * @return The destination for the invite.
-     */
-    public Builder.Destination getDestination() {
-        if (destination != null) {
-            return destination;
-        } else {
-            return Builder.Destination.FACEBOOK;
-        }
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.applinkUrl);
-        out.writeString(this.previewImageUrl);
-        out.writeString(this.promoText);
-        out.writeString(this.promoCode);
-        out.writeString(this.destination.toString());
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<AppInviteContent> CREATOR =
-        new Creator<AppInviteContent>() {
-            public AppInviteContent createFromParcel(final Parcel in) {
-                return new AppInviteContent(in);
-            }
-
-            public AppInviteContent[] newArray(final int size) {
-                return new AppInviteContent[size];
-            }
-        };
-
-    /**
-     * Builder class for a concrete instance of AppInviteContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<AppInviteContent, Builder> {
-        private String applinkUrl;
-        private String previewImageUrl;
-        private String promoCode;
-        private String promoText;
-        private Destination destination;
-
-
-        public enum Destination {
-            FACEBOOK ("facebook"),
-            MESSENGER ("messenger");
-
-            private final String name;
-
-            private Destination(String s) {
-                name = s;
-            }
-
-            public boolean equalsName(String otherName) {
-                return (otherName == null) ? false : name.equals(otherName);
-            }
-
-            public String toString() {
-                return this.name;
-            }
-        }
-
-        /**
-         * Sets the applink url that will be used for deep-linking
-         *
-         * @param applinkUrl the applink url
-         * @return the builder
-         */
-        public Builder setApplinkUrl(final String applinkUrl) {
-            this.applinkUrl = applinkUrl;
-            return this;
-        }
-
-        /**
-         * Sets the preview image url for this invite. See guidelines for correct dimensions.
-         *
-         * @param previewImageUrl url of the image that is going to be used as a preview for invite
-         * @return the builder
-         */
-        public Builder setPreviewImageUrl(final String previewImageUrl) {
-            this.previewImageUrl = previewImageUrl;
-            return this;
-        }
-
-        /**
-         * Sets promotion code and promotion text to be shown on sender and receiver flows
-         * for app invites.
-         *
-         * @param promotionText Promotion text to be shown on sender and receiver flows.
-         *                      Promotion text has to be between 1 and 80 characters long.
-         * @param promotionCode Promotion code to be shown on sender and receiver flows.
-         *                      Promotion code is optional and has to be less than 10 characters
-         *                      long. promotionText needs to be specified if promotionCode
-         *                      is provided.
-         * @return the builder
-         */
-        public Builder setPromotionDetails(final String promotionText, final String promotionCode) {
-            if (!TextUtils.isEmpty(promotionText)) {
-                if (promotionText.length() > 80) {
-                    throw new IllegalArgumentException("" +
-                            "Invalid promotion text, promotionText needs to be between" +
-                            "1 and 80 characters long");
-                }
-
-                if (!isAlphanumericWithSpaces(promotionText)) {
-                    throw new IllegalArgumentException("" +
-                            "Invalid promotion text, promotionText can only contain alphanumeric" +
-                            "characters and spaces.");
-                }
-
-                if (!TextUtils.isEmpty(promotionCode)) {
-
-                    if (promotionCode.length() > 10) {
-                        throw new IllegalArgumentException("" +
-                                "Invalid promotion code, promotionCode can be between" +
-                                "1 and 10 characters long");
-                    }
-
-                    if (!isAlphanumericWithSpaces(promotionCode)) {
-                        throw new IllegalArgumentException("" +
-                                "Invalid promotion code, promotionCode can only contain " +
-                                "alphanumeric characters and spaces.");
-                    }
-                }
-            } else if (!TextUtils.isEmpty(promotionCode)) {
-                throw new IllegalArgumentException("promotionCode cannot be specified " +
-                        "without a valid promotionText");
-            }
-
-            this.promoCode = promotionCode;
-            this.promoText = promotionText;
-            return this;
-        }
-
-        public Builder setDestination(Destination destination) {
-            this.destination = destination;
-            return this;
-        }
-
-
-        @Override
-        public AppInviteContent build() {
-            return new AppInviteContent(this);
-        }
-
-
-        @Override
-        public Builder readFrom(final AppInviteContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setApplinkUrl(content.getApplinkUrl())
-                    .setPreviewImageUrl(content.getPreviewImageUrl())
-                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode())
-                    .setDestination(content.getDestination());
-        }
-
-        private boolean isAlphanumericWithSpaces(String str) {
-            for (int i=0; i<str.length(); i++) {
-                char c = str.charAt(i);
-                if (!Character.isDigit(c) && !Character.isLetter(c) && !Character.isSpaceChar(c))
-                    return false;
-            }
-
-            return true;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java b/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
deleted file mode 100644
index d9d185471..000000000
--- a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
+++ /dev/null
@@ -1,312 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.text.TextUtils;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Describes the content that will be displayed by the GameRequestDialog
- */
-public final class GameRequestContent implements ShareModel {
-    public enum ActionType {
-        SEND,
-        ASKFOR,
-        TURN,
-    }
-
-    public enum Filters {
-        APP_USERS,
-        APP_NON_USERS,
-    }
-
-    private final String message;
-    private final List<String> recipients;
-    private final String title;
-    private final String data;
-
-    private final ActionType actionType;
-    private final String objectId;
-    private final Filters filters;
-    private final List<String> suggestions;
-
-    private GameRequestContent(final Builder builder) {
-        this.message = builder.message;
-        this.recipients = builder.recipients;
-        this.title = builder.title;
-        this.data = builder.data;
-        this.actionType = builder.actionType;
-        this.objectId = builder.objectId;
-        this.filters = builder.filters;
-        this.suggestions = builder.suggestions;
-    }
-
-    GameRequestContent(final Parcel in) {
-        this.message = in.readString();
-        this.recipients = in.createStringArrayList();
-        this.title = in.readString();
-        this.data = in.readString();
-        this.actionType = (ActionType) in.readSerializable();
-        this.objectId = in.readString();
-        this.filters = (Filters) in.readSerializable();
-        this.suggestions = in.createStringArrayList();
-        in.readStringList(this.suggestions);
-    }
-
-    /**
-     * Gets the message that users receiving the request will see.
-     */
-    public String getMessage() {
-        return message;
-    }
-
-    /**
-     * Gets the user IDs or user names the request will be sent to.
-     *
-     * @deprecated Replaced by {@link #getRecipients()}
-     * */
-    public String getTo() {
-        return this.getRecipients() != null ? TextUtils.join(",", this.getRecipients()) : null;
-    }
-
-    /**
-     * Gets the user IDs or user names the request will be sent to.
-     */
-    public List<String> getRecipients() {
-        return recipients;
-    }
-
-    /**
-     * Gets the optional title for the dialog
-     */
-    public String getTitle() {
-        return title;
-    }
-
-    /**
-     * Gets optional data which can be used for tracking
-     */
-    public String getData() {
-        return data;
-    }
-
-    /**
-     * Gets the action type
-     */
-    public ActionType getActionType() {
-        return this.actionType;
-    }
-
-    /**
-     * Gets the open graph id of the object that action type will be performed on
-     */
-    public String getObjectId() {
-        return this.objectId;
-    }
-
-    /**
-     * Get the filters
-     */
-    public Filters getFilters() {
-        return this.filters;
-    }
-
-    /**
-     * Gets a list of suggested user ids
-     */
-    public List<String> getSuggestions() {
-        return this.suggestions;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.message);
-        out.writeStringList(this.recipients);
-        out.writeString(this.title);
-        out.writeString(this.data);
-        out.writeSerializable(this.actionType);
-        out.writeString(this.objectId);
-        out.writeSerializable(this.filters);
-        out.writeStringList(this.suggestions);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<GameRequestContent> CREATOR =
-            new Creator<GameRequestContent>() {
-                public GameRequestContent createFromParcel(final Parcel in) {
-                    return new GameRequestContent(in);
-                }
-
-                public GameRequestContent[] newArray(final int size) {
-                    return new GameRequestContent[size];
-                }
-            };
-
-    /**
-     * Builder class for a concrete instance of GameRequestContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<GameRequestContent, Builder> {
-        private String message;
-        private List<String> recipients;
-        private String data;
-        private String title;
-        private ActionType actionType;
-        private String objectId;
-        private Filters filters;
-        private List<String> suggestions;
-
-        /**
-         * Sets the message users receiving the request will see. The maximum length
-         * is 60 characters.
-         *
-         * @param message the message
-         * @return the builder
-         */
-        public Builder setMessage(final String message) {
-            this.message = message;
-            return this;
-        }
-
-        /**
-         * Sets the user ID or user name the request will be sent to. If this is not
-         * specified, a friend selector will be displayed and the user can select up
-         * to 50 friends.
-         *
-         * @deprecated Replaced by {@link #setRecipients(List)}
-         * @param to the id or user name to send the request to
-         * @return the builder
-         */
-        public Builder setTo(final String to) {
-            if (to != null) {
-                String[] recipientsArray = to.split(",");
-                this.recipients = Arrays.asList(recipientsArray);
-            }
-
-            return this;
-        }
-
-        /**
-         * An array of user IDs, usernames or invite tokens of people to send request.
-         * If this is not specified, a friend selector will be displayed and the user
-         * can select up to 50 friends.
-         *
-         * This is equivalent to the "to" parameter when using the web game request dialog.
-         *
-         * @param recipients the list of user ids to send the request to
-         * @return the builder
-         */
-        public Builder setRecipients(List<String> recipients) {
-            this.recipients = recipients;
-            return this;
-        }
-
-        /**
-         * Sets optional data which can be used for tracking; maximum length is 255
-         * characters.
-         *
-         * @param data the data
-         * @return the builder
-         */
-        public Builder setData(final String data) {
-            this.data = data;
-            return this;
-        }
-
-        /**
-         * Sets an optional title for the dialog; maximum length is 50 characters.
-         *
-         * @param title the title
-         * @return the builder
-         */
-        public Builder setTitle(final String title) {
-            this.title = title;
-            return this;
-        }
-
-        /**
-         * Sets the action type for this request
-         */
-        public Builder setActionType(ActionType actionType) {
-            this.actionType = actionType;
-            return this;
-        }
-
-        /**
-         * Sets the open graph id of the object that action type will be performed on
-         * Only valid (and required) for ActionTypes SEND, ASKFOR
-         */
-        public Builder setObjectId(String objectId) {
-            this.objectId = objectId;
-            return this;
-        }
-
-        /**
-         * Sets the filters for everybody/app users/non app users
-         */
-        public Builder setFilters(Filters filters) {
-            this.filters = filters;
-            return this;
-        }
-
-        /**
-         * Sets a list of user ids suggested as request receivers
-         */
-        public Builder setSuggestions(List<String> suggestions) {
-            this.suggestions = suggestions;
-            return this;
-        }
-
-        @Override
-        public GameRequestContent build() {
-            return new GameRequestContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final GameRequestContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setMessage(content.getMessage())
-                    .setRecipients(content.getRecipients())
-                    .setTitle(content.getTitle())
-                    .setData(content.getData())
-                    .setActionType(content.getActionType())
-                    .setObjectId(content.getObjectId())
-                    .setFilters(content.getFilters())
-                    .setSuggestions(content.getSuggestions());
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (GameRequestContent) parcel.readParcelable(
-                            GameRequestContent.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareContent.java b/facebook/src/main/java/com/facebook/share/model/ShareContent.java
deleted file mode 100644
index acc3c5b0b..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareContent.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.net.Uri;
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * Provides the base class for content to be shared. Contains all common methods for
- * the different types of content.
- */
-public abstract class ShareContent<P extends ShareContent, E extends ShareContent.Builder>
-        implements ShareModel {
-    private final Uri contentUrl;
-    private final List<String> peopleIds;
-    private final String placeId;
-    private final String ref;
-    private final ShareHashtag hashtag;
-
-    protected ShareContent(final Builder builder) {
-        super();
-        this.contentUrl = builder.contentUrl;
-        this.peopleIds = builder.peopleIds;
-        this.placeId = builder.placeId;
-        this.ref = builder.ref;
-        this.hashtag = builder.hashtag;
-    }
-
-    protected ShareContent(final Parcel in) {
-        this.contentUrl = in.readParcelable(Uri.class.getClassLoader());
-        this.peopleIds = readUnmodifiableStringList(in);
-        this.placeId = in.readString();
-        this.ref = in.readString();
-        this.hashtag = new ShareHashtag.Builder().readFrom(in).build();
-    }
-
-    /**
-     * URL for the content being shared.  This URL will be checked for app link meta tags for
-     * linking in platform specific ways.
-     * <p/>
-     * See documentation for <a href="https://developers.facebook.com/docs/applinks/">App Links</a>.
-     *
-     * @return {@link android.net.Uri} representation of the content link.
-     */
-    @Nullable
-    public Uri getContentUrl() {
-        return this.contentUrl;
-    }
-
-    /**
-     * List of Ids for taggable people to tag with this content.
-     * <p/>
-     * See documentation for
-     * <a href="https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends">
-     * Taggable Friends</a>.
-     *
-     * @return {@link java.util.List} of Ids for people to tag.
-     */
-    @Nullable
-    public List<String> getPeopleIds() {
-        return this.peopleIds;
-    }
-
-    /**
-     * The Id for a place to tag with this content.
-     *
-     * @return The Id for the place to tag.
-     */
-    @Nullable
-    public String getPlaceId() {
-        return this.placeId;
-    }
-
-    /**
-     * A value to be added to the referrer URL when a person follows a link from this shared
-     * content on feed.
-     *
-     * @return The ref for the content.
-     */
-    @Nullable
-    public String getRef() {
-        return this.ref;
-    }
-
-    /**
-     * Gets the ShareHashtag, if one has been set, for this content.
-     *
-     * @return The hashtag
-     */
-    @Nullable
-    public ShareHashtag getShareHashtag() {
-        return this.hashtag;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeParcelable(this.contentUrl, 0);
-        out.writeStringList(this.peopleIds);
-        out.writeString(this.placeId);
-        out.writeString(this.ref);
-        out.writeParcelable(this.hashtag, 0);
-    }
-
-    private List<String> readUnmodifiableStringList(final Parcel in) {
-        final List<String> list = new ArrayList<String>();
-        in.readStringList(list);
-        return (list.size() == 0 ? null : Collections.unmodifiableList(list));
-    }
-
-    /**
-     * Abstract builder for {@link com.facebook.share.model.ShareContent}
-     */
-    public abstract static class Builder<P extends ShareContent, E extends Builder>
-            implements ShareModelBuilder<P, E> {
-        private Uri contentUrl;
-        private List<String> peopleIds;
-        private String placeId;
-        private String ref;
-        private ShareHashtag hashtag;
-
-        /**
-         * Set the URL for the content being shared.
-         *
-         * @param contentUrl {@link android.net.Uri} representation of the content link.
-         * @return The builder.
-         */
-        public E setContentUrl(@Nullable final Uri contentUrl) {
-            this.contentUrl = contentUrl;
-            return (E) this;
-        }
-
-        /**
-         * Set the list of Ids for taggable people to tag with this content.
-         *
-         * @param peopleIds {@link java.util.List} of Ids for people to tag.
-         * @return The builder.
-         */
-        public E setPeopleIds(@Nullable final List<String> peopleIds) {
-            this.peopleIds = (peopleIds == null ? null : Collections.unmodifiableList(peopleIds));
-            return (E) this;
-        }
-
-        /**
-         * Set the Id for a place to tag with this content.
-         *
-         * @param placeId The Id for the place to tag.
-         * @return The builder.
-         */
-        public E setPlaceId(@Nullable final String placeId) {
-            this.placeId = placeId;
-            return (E) this;
-        }
-
-        /**
-         * Set the value to be added to the referrer URL when a person follows a link from this
-         * shared content on feed.
-         *
-         * @param ref The ref for the content.
-         * @return The builder.
-         */
-        public E setRef(@Nullable final String ref) {
-            this.ref = ref;
-            return (E) this;
-        }
-
-        /**
-         * Set the ShareHashtag for this content
-         *
-         * @param shareHashtag The hashtag for this content
-         * @return The builder
-         */
-        public E setShareHashtag(@Nullable final ShareHashtag shareHashtag) {
-            this.hashtag = shareHashtag;
-            return (E) this;
-        }
-
-        @Override
-        public E readFrom(final P content) {
-            if (content == null) {
-                return (E) this;
-            }
-            return (E) this
-                    .setContentUrl(content.getContentUrl())
-                    .setPeopleIds(content.getPeopleIds())
-                    .setPlaceId(content.getPlaceId())
-                    .setRef(content.getRef());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
deleted file mode 100644
index 95fdbdc90..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-/**
- * Describes a hashtag for sharing.
- *
- * Use {@link ShareHashtag.Builder} to build instances
- */
-public class ShareHashtag implements ShareModel {
-
-    private final String hashtag;
-
-    private ShareHashtag(final Builder builder) {
-        this.hashtag = builder.hashtag;
-    }
-
-    ShareHashtag(final Parcel in) {
-        this.hashtag = in.readString();
-    }
-
-    /**
-     * @return Gets the value of the hashtag for this instance
-     */
-    public String getHashtag() {
-        return hashtag;
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(hashtag);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareHashtag> CREATOR = new Creator<ShareHashtag>() {
-        public ShareHashtag createFromParcel(final Parcel in) {
-            return new ShareHashtag(in);
-        }
-
-        public ShareHashtag[] newArray(final int size) {
-            return new ShareHashtag[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareHashtag} class.
-     */
-    public static class Builder implements ShareModelBuilder<ShareHashtag, Builder> {
-
-        private String hashtag;
-
-        /**
-         * Sets the hashtag value for this instance.
-         * @param hashtag
-         * @return the Builder instance
-         */
-        public Builder setHashtag(final String hashtag) {
-            this.hashtag = hashtag;
-            return this;
-        }
-
-        /**
-         * @return Gets the value of the hashtag for this instance
-         */
-        public String getHashtag() {
-            return hashtag;
-        }
-
-        @Override
-        public Builder readFrom(final ShareHashtag model) {
-            if (model == null) {
-                return this;
-            }
-
-            return this.setHashtag(model.getHashtag());
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareHashtag)parcel.readParcelable(ShareHashtag.class.getClassLoader()));
-        }
-
-        @Override
-        public ShareHashtag build() {
-            return new ShareHashtag(this);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
deleted file mode 100644
index f95134a75..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
+++ /dev/null
@@ -1,187 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.net.Uri;
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Describes link content to be shared.
- *
- * Use {@link ShareLinkContent.Builder} to build instances.
- *
- * See documentation for <a href="https://developers.facebook.com/docs/sharing/best-practices">best practices</a>.
- */
-public final class ShareLinkContent
-        extends ShareContent<ShareLinkContent, ShareLinkContent.Builder> {
-    private final String contentDescription;
-    private final String contentTitle;
-    private final Uri imageUrl;
-    private final String quote;
-
-    private ShareLinkContent(final Builder builder) {
-        super(builder);
-        this.contentDescription = builder.contentDescription;
-        this.contentTitle = builder.contentTitle;
-        this.imageUrl = builder.imageUrl;
-        this.quote = builder.quote;
-    }
-
-    ShareLinkContent(final Parcel in) {
-        super(in);
-        this.contentDescription = in.readString();
-        this.contentTitle = in.readString();
-        this.imageUrl = in.readParcelable(Uri.class.getClassLoader());
-        this.quote = in.readString();
-    }
-
-    /**
-     * The description of the link.  If not specified, this field is automatically populated by
-     * information scraped from the link, typically the title of the page.
-     * @return The description of the link.
-     */
-    public String getContentDescription() {
-        return this.contentDescription;
-    }
-
-    /**
-     * The title to display for this link.
-     * @return The link title.
-     */
-    @Nullable
-    public String getContentTitle() {
-        return this.contentTitle;
-    }
-
-    /**
-     * The URL of a picture to attach to this content.
-     * @return The network URL of an image.
-     */
-    @Nullable
-    public Uri getImageUrl() {
-        return this.imageUrl;
-    }
-
-    /**
-     * The quoted text to display for this link.
-     * @return The text quoted from the link.
-     */
-    @Nullable
-    public String getQuote() {
-        return this.quote;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeString(this.contentDescription);
-        out.writeString(this.contentTitle);
-        out.writeParcelable(this.imageUrl, 0);
-        out.writeString(this.quote);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareLinkContent> CREATOR =
-            new Creator<ShareLinkContent>() {
-        public ShareLinkContent createFromParcel(final Parcel in) {
-            return new ShareLinkContent(in);
-        }
-
-        public ShareLinkContent[] newArray(final int size) {
-            return new ShareLinkContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link ShareLinkContent} interface.
-     */
-    public static final class Builder
-            extends ShareContent.Builder<ShareLinkContent, Builder> {
-        private String contentDescription;
-        private String contentTitle;
-        private Uri imageUrl;
-        private String quote;
-
-        /**
-         * Set the contentDescription of the link.
-         * @param contentDescription The contentDescription of the link.
-         * @return The builder.
-         */
-        public Builder setContentDescription(
-                @Nullable final String contentDescription) {
-            this.contentDescription = contentDescription;
-            return this;
-        }
-
-        /**
-         * Set the contentTitle to display for this link.
-         * @param contentTitle The link contentTitle.
-         * @return The builder.
-         */
-        public Builder setContentTitle(@Nullable final String contentTitle) {
-            this.contentTitle = contentTitle;
-            return this;
-        }
-
-        /**
-         * Set the URL of a picture to attach to this content.
-         * @param imageUrl The network URL of an image.
-         * @return The builder.
-         */
-        public Builder setImageUrl(@Nullable final Uri imageUrl) {
-            this.imageUrl = imageUrl;
-            return this;
-        }
-
-        /**
-         * Set the quote to display for this link.
-         * @param quote The text quoted from the link.
-         * @return The builder.
-         */
-        public Builder setQuote(@Nullable final String quote) {
-            this.quote = quote;
-            return this;
-        }
-
-        @Override
-        public ShareLinkContent build() {
-            return new ShareLinkContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareLinkContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setContentDescription(model.getContentDescription())
-                    .setImageUrl(model.getImageUrl())
-                    .setContentTitle(model.getContentTitle())
-                    .setQuote(model.getQuote())
-                    ;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
deleted file mode 100644
index f1be45be7..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.ParcelFormatException;
-import android.os.Parcelable;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Base class for shared media (photos, videos, etc).
- */
-public abstract class ShareMedia implements ShareModel {
-
-    public enum Type {
-        PHOTO,
-        VIDEO,
-        ;
-    }
-
-    private final Bundle params;
-
-    protected ShareMedia(final Builder builder) {
-        this.params = new Bundle(builder.params);
-    }
-
-    ShareMedia(final Parcel in) {
-        this.params = in.readBundle();
-    }
-
-    /**
-     * @deprecated This method is deprecated. Use GraphRequest directly to set parameters.
-     */
-    @Deprecated
-    public Bundle getParameters() {
-        return new Bundle(params);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeBundle(params);
-    }
-
-    public abstract Type getMediaType();
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareMedia} class.
-     */
-    public static abstract class Builder<M extends ShareMedia, B extends Builder>
-            implements ShareModelBuilder<M, B> {
-        private Bundle params = new Bundle();
-
-        /**
-         * @deprecated This method is deprecated. Use GraphRequest directly to set parameters.
-         */
-        @Deprecated
-        public B setParameter(final String key, final String value) {
-            params.putString(key, value);
-            return (B) this;
-        }
-
-        /**
-         * @deprecated This method is deprecated. Use GraphRequest directly to set parameters.
-         */
-        @Deprecated
-        public B setParameters(final Bundle parameters) {
-            params.putAll(parameters);
-            return (B) this;
-        }
-
-        @Override
-        public B readFrom(final M model) {
-            if (model == null) {
-                return (B) this;
-            }
-            return this.setParameters(model.getParameters());
-        }
-
-        static void writeListTo(
-                final Parcel out,
-                int parcelFlags,
-                final List<ShareMedia> media) {
-            out.writeParcelableArray((ShareMedia[]) media.toArray(), parcelFlags);
-        }
-
-        static List<ShareMedia> readListFrom(final Parcel in) {
-            Parcelable[] parcelables = in.readParcelableArray(
-                    ShareMedia.class.getClassLoader());
-            List<ShareMedia> shareMedia = new ArrayList<>(parcelables.length);
-            for (Parcelable parcelable : parcelables) {
-                shareMedia.add((ShareMedia) parcelable);
-            }
-            return shareMedia;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
deleted file mode 100644
index 3474d1a16..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-public final class ShareMediaContent
-        extends ShareContent<ShareMediaContent, ShareMediaContent.Builder> {
-    private final List<ShareMedia> media;
-
-    private ShareMediaContent(final Builder builder) {
-        super(builder);
-        this.media = Collections.unmodifiableList(builder.media);
-    }
-
-    ShareMediaContent(final Parcel in) {
-        super(in);
-        ShareMedia[] shareMedia = (ShareMedia[])in.readParcelableArray(
-                ShareMedia.class.getClassLoader());
-        this.media = Arrays.asList(shareMedia);
-    }
-
-    /**
-     * Media to be shared.
-     *
-     * @return {@link java.util.List} of {@link ShareMedia}s.
-     */
-    @Nullable
-    public List<ShareMedia> getMedia() {
-        return this.media;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelableArray((ShareMedia[])this.media.toArray(), flags);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareMediaContent> CREATOR = new Creator<ShareMediaContent>() {
-        public ShareMediaContent createFromParcel(final Parcel in) {
-            return new ShareMediaContent(in);
-        }
-
-        public ShareMediaContent[] newArray(final int size) {
-            return new ShareMediaContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link SharePhotoContent} interface.
-     */
-    public static class Builder extends ShareContent.Builder<ShareMediaContent, Builder> {
-        private final List<ShareMedia> media = new ArrayList<>();
-
-        /**
-         * Adds a medium to the content.
-         *
-         * @param medium {@link com.facebook.share.model.ShareMedia} to add.
-         * @return The builder.
-         */
-        public Builder addMedium(@Nullable final ShareMedia medium) {
-            if (medium != null) {
-                ShareMedia mediumToAdd;
-                if (medium instanceof SharePhoto) {
-                    mediumToAdd = new SharePhoto.Builder().readFrom((SharePhoto) medium).build();
-                } else if (medium instanceof ShareVideo) {
-                    mediumToAdd = new ShareVideo.Builder().readFrom((ShareVideo) medium).build();
-                } else {
-                    throw new IllegalArgumentException(
-                            "medium must be either a SharePhoto or ShareVideo");
-                }
-                this.media.add(mediumToAdd);
-            }
-            return this;
-        }
-
-        /**
-         * Adds multiple media to the content.
-         *
-         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
-         *               to add.
-         * @return The builder.
-         */
-        public Builder addMedia(@Nullable final List<ShareMedia> media) {
-            if (media != null) {
-                for (ShareMedia medium : media) {
-                    this.addMedium(medium);
-                }
-            }
-            return this;
-        }
-
-        @Override
-        public ShareMediaContent build() {
-            return new ShareMediaContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareMediaContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super.
-                    readFrom(model)
-                    .addMedia(model.getMedia());
-        }
-
-        /**
-         * Replaces the media for the builder.
-         *
-         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
-         *   to add.
-         * @return The builder.
-         */
-        public Builder setMedia(@Nullable final List<ShareMedia> media) {
-            this.media.clear();
-            this.addMedia(media);
-            return this;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareModel.java b/facebook/src/main/java/com/facebook/share/model/ShareModel.java
deleted file mode 100644
index 31bf11911..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareModel.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcelable;
-
-/**
- * Base interface for share models.
- */
-public interface ShareModel extends Parcelable {
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java b/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
deleted file mode 100644
index 4e8fe2968..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-import com.facebook.share.ShareBuilder;
-
-/**
- * Interface for builders related to sharing.
- * @param <P> The model protocol to be built.
- * @param <E> The concrete builder class.
- */
-public interface ShareModelBuilder<P extends ShareModel, E extends ShareModelBuilder>
-        extends ShareBuilder<P, E> {
-    /**
-     * Reads the values from a ShareModel into the builder.
-     * @param model The source ShareModel
-     * @return The builder.
-     */
-    public E readFrom(P model);
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
deleted file mode 100644
index 683cddd21..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Describes an Open Graph action
- * <p/>
- * Use {@link ShareOpenGraphAction.Builder} to create instances
- * <p/>
- * See the documentation for
- * <a href="https://developers.facebook.com/docs/opengraph/actions/">Open Graph Actions</a>.
- */
-public final class ShareOpenGraphAction
-        extends ShareOpenGraphValueContainer<ShareOpenGraphAction, ShareOpenGraphAction.Builder> {
-
-    private ShareOpenGraphAction(final Builder builder) {
-        super(builder);
-    }
-
-    ShareOpenGraphAction(final Parcel in) {
-        super(in);
-    }
-
-    /**
-     * The type for the action.
-     *
-     * @return The type for the action.
-     */
-    @Nullable
-    public String getActionType() {
-        return this.getString(Builder.ACTION_TYPE_KEY);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareOpenGraphAction> CREATOR =
-            new Creator<ShareOpenGraphAction>() {
-                public ShareOpenGraphAction createFromParcel(final Parcel in) {
-                    return new ShareOpenGraphAction(in);
-                }
-
-                public ShareOpenGraphAction[] newArray(final int size) {
-                    return new ShareOpenGraphAction[size];
-                }
-            };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareOpenGraphAction} interface.
-     */
-    public static final class Builder
-            extends ShareOpenGraphValueContainer.Builder<ShareOpenGraphAction, Builder> {
-        private static final String ACTION_TYPE_KEY = "og:type";
-
-        /**
-         * Sets the type for the action.
-         *
-         * @param actionType The type for the action.
-         * @return The builder.
-         */
-        public Builder setActionType(final String actionType) {
-            this.putString(ACTION_TYPE_KEY, actionType);
-            return this;
-        }
-
-        @Override
-        public ShareOpenGraphAction build() {
-            return new ShareOpenGraphAction(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareOpenGraphAction model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setActionType(model.getActionType())
-                    ;
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareOpenGraphAction) parcel.readParcelable(
-                            ShareOpenGraphAction.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
deleted file mode 100644
index 725b1cc82..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Describes Open Graph content that is to be shared
- * <p/>
- * Use {@link ShareOpenGraphContent.Builder} to create instances
- * <p/>
- * See the documentation for <a href="https://developers.facebook.com/docs/opengraph">Open Graph</a>
- * and for <a href="https://developers.facebook.com/docs/sharing/best-practices">best practices</a>.
- */
-public final class ShareOpenGraphContent
-        extends ShareContent<ShareOpenGraphContent, ShareOpenGraphContent.Builder> {
-    private final ShareOpenGraphAction action;
-    private final String previewPropertyName;
-
-    private ShareOpenGraphContent(final Builder builder) {
-        super(builder);
-        this.action = builder.action;
-        this.previewPropertyName = builder.previewPropertyName;
-    }
-
-    ShareOpenGraphContent(final Parcel in) {
-        super(in);
-        this.action = new ShareOpenGraphAction.Builder().readFrom(in).build();
-        this.previewPropertyName = in.readString();
-    }
-
-    /**
-     * The Open Graph Action for the content.
-     *
-     * @return {@link ShareOpenGraphAction}
-     */
-    @Nullable
-    public ShareOpenGraphAction getAction() {
-        return this.action;
-    }
-
-    /**
-     * The property name for the primary {@link com.facebook.share.model.ShareOpenGraphObject}
-     * in the action.
-     *
-     * @return The property name for the preview object.
-     */
-    @Nullable
-    public String getPreviewPropertyName() {
-        return this.previewPropertyName;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelable(this.action, 0);
-        out.writeString(this.previewPropertyName);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareOpenGraphContent> CREATOR =
-            new Creator<ShareOpenGraphContent>() {
-                public ShareOpenGraphContent createFromParcel(final Parcel in) {
-                    return new ShareOpenGraphContent(in);
-                }
-
-                public ShareOpenGraphContent[] newArray(final int size) {
-                    return new ShareOpenGraphContent[size];
-                }
-            };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareOpenGraphContent} interface.
-     */
-    public static final class Builder
-            extends ShareContent.Builder<com.facebook.share.model.ShareOpenGraphContent, Builder> {
-        private ShareOpenGraphAction action;
-        private String previewPropertyName;
-
-        /**
-         * Sets the Open Graph Action for the content.
-         *
-         * @param action {@link com.facebook.share.model.ShareOpenGraphAction}
-         * @return The builder.
-         */
-        public Builder setAction(@Nullable final ShareOpenGraphAction action) {
-            this.action =
-                    (action == null
-                            ? null
-                            : new ShareOpenGraphAction.Builder()
-                            .readFrom(action).build());
-            return this;
-        }
-
-        /**
-         * Sets the property name for the primary
-         * {@link com.facebook.share.model.ShareOpenGraphObject} in the action.
-         *
-         * @param previewPropertyName The property name for the preview object.
-         * @return The builder.
-         */
-        public Builder setPreviewPropertyName(
-                @Nullable final String previewPropertyName) {
-            this.previewPropertyName = previewPropertyName;
-            return this;
-        }
-
-        @Override
-        public com.facebook.share.model.ShareOpenGraphContent build() {
-            return new ShareOpenGraphContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final com.facebook.share.model.ShareOpenGraphContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setAction(model.getAction())
-                    .setPreviewPropertyName(model.getPreviewPropertyName())
-                    ;
-        }
-
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
deleted file mode 100644
index 368207022..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-import com.facebook.internal.NativeProtocol;
-
-/**
- * Describes an Open Graph Object to be created.
- * <p/>
- * Use {@link ShareOpenGraphObject.Builder} to create instances
- * <p/>
- * See the documentation for
- * <a href="https://developers.facebook.com/docs/opengraph/objects/">Open Graph Objects</a>.
- */
-public final class ShareOpenGraphObject extends
-        ShareOpenGraphValueContainer<ShareOpenGraphObject, ShareOpenGraphObject.Builder> {
-
-    private ShareOpenGraphObject(final Builder builder) {
-        super(builder);
-    }
-
-    ShareOpenGraphObject(final Parcel in) {
-        super(in);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareOpenGraphObject> CREATOR =
-            new Creator<ShareOpenGraphObject>() {
-        public ShareOpenGraphObject createFromParcel(final Parcel in) {
-            return new ShareOpenGraphObject(in);
-        }
-
-        public ShareOpenGraphObject[] newArray(final int size) {
-            return new ShareOpenGraphObject[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareOpenGraphObject} interface.
-     */
-    public static final class Builder
-            extends ShareOpenGraphValueContainer.Builder<ShareOpenGraphObject, Builder> {
-        public Builder() {
-            super();
-            this.putBoolean(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY, true);
-        }
-
-        @Override
-        public ShareOpenGraphObject build() {
-            return new ShareOpenGraphObject(this);
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareOpenGraphObject)parcel.readParcelable(
-                            ShareOpenGraphObject.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java
deleted file mode 100644
index 789a47b78..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java
+++ /dev/null
@@ -1,418 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.Set;
-
-/**
- * Provides an abstract class to contain Open Graph values.
- *
- * Use {@link ShareOpenGraphValueContainer.Builder} to create instances
- */
-public abstract class ShareOpenGraphValueContainer
-        <P extends ShareOpenGraphValueContainer, E extends ShareOpenGraphValueContainer.Builder>
-        implements ShareModel {
-    private final Bundle bundle;
-
-    protected ShareOpenGraphValueContainer(
-            final Builder<P, E> builder) {
-        super();
-        this.bundle = (Bundle)builder.bundle.clone();
-    }
-
-    ShareOpenGraphValueContainer(final Parcel in) {
-        this.bundle = in.readBundle(Builder.class.getClassLoader());
-    }
-
-    /**
-     * Gets a value out of the object.
-     * @param key The key for the value.
-     * @return The boolean value.
-     */
-    @Nullable
-    public Object get(String key) {
-        return this.bundle.get(key);
-    }
-
-    /**
-     * Gets a boolean value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The boolean value.
-     */
-    public boolean getBoolean(final String key, final boolean defaultValue) {
-        return this.bundle.getBoolean(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of boolean values out of the object.
-     * @param key The key for the value.
-     * @return The boolean values.
-     */
-    @Nullable
-    public boolean[] getBooleanArray(final String key) {
-        return this.bundle.getBooleanArray(key);
-    }
-
-    /**
-     * Gets a double value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The double value.
-     */
-    public double getDouble(final String key, final double defaultValue) {
-        return this.bundle.getDouble(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of double values out of the object.
-     * @param key The key for the value.
-     * @return The double values.
-     */
-    @Nullable
-    public double[] getDoubleArray(final String key) {
-        return this.bundle.getDoubleArray(key);
-    }
-
-    /**
-     * Gets an int value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The int value.
-     */
-    public int getInt(final String key, final int defaultValue) {
-        return this.bundle.getInt(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of int values out of the object.
-     * @param key The key for the value.
-     * @return The int values.
-     */
-    @Nullable
-    public int[] getIntArray(final String key) {
-        return this.bundle.getIntArray(key);
-    }
-
-    /**
-     * Gets an long value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The long value.
-     */
-    public long getLong(final String key, final long defaultValue) {
-        return this.bundle.getLong(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of long values out of the object.
-     * @param key The key for the value.
-     * @return The long values.
-     */
-    @Nullable
-    public long[] getLongArray(final String key) {
-        return this.bundle.getLongArray(key);
-    }
-
-    /**
-     * Gets an object value out of the object.
-     * @param key The key for the value.
-     * @return The object value.
-     */
-    public ShareOpenGraphObject getObject(final String key) {
-        final Object value = this.bundle.get(key);
-        return (value instanceof ShareOpenGraphObject ? (ShareOpenGraphObject)value : null);
-    }
-
-    /**
-     * Gets an array of object values out of the object.
-     * @param key The key for the value.
-     * @return The object values.
-     */
-    @Nullable
-    public ArrayList<ShareOpenGraphObject> getObjectArrayList(final String key) {
-        final ArrayList<Parcelable> items = this.bundle.getParcelableArrayList(key);
-        if (items == null) {
-            return null;
-        }
-        final ArrayList<ShareOpenGraphObject> list = new ArrayList<ShareOpenGraphObject>();
-        for (Parcelable item : items) {
-            if (item instanceof ShareOpenGraphObject) {
-                list.add((ShareOpenGraphObject)item);
-            }
-        }
-        return list;
-    }
-
-    /**
-     * Gets a photo value out of the object.
-     * @param key The key for the value.
-     * @return The photo value.
-     */
-    @Nullable
-    public SharePhoto getPhoto(final String key) {
-        final Object value = this.bundle.getParcelable(key);
-        return (value instanceof SharePhoto ? (SharePhoto)value : null);
-    }
-
-    /**
-     * Gets an array of photo values out of the object.
-     * @param key The key for the value.
-     * @return The photo values.
-     */
-    @Nullable
-    public ArrayList<SharePhoto> getPhotoArrayList(final String key) {
-        final ArrayList<Parcelable> items = this.bundle.getParcelableArrayList(key);
-        if (items == null) {
-            return null;
-        }
-        final ArrayList<SharePhoto> list = new ArrayList<SharePhoto>();
-        for (Parcelable item : items) {
-            if (item instanceof SharePhoto) {
-                list.add((SharePhoto)item);
-            }
-        }
-        return list;
-    }
-
-    /**
-     * Gets a string value out of the object.
-     * @param key The key for the value.
-     * @return The string value.
-     */
-    @Nullable
-    public String getString(final String key) {
-        return this.bundle.getString(key);
-    }
-
-    /**
-     * Gets an array of string values out of the object.
-     * @param key The key for the value.
-     * @return The string values.
-     */
-    @Nullable
-    public ArrayList<String> getStringArrayList(final String key) {
-        return this.bundle.getStringArrayList(key);
-    }
-
-    /**
-     * Returns the values in the container packaged in a bundle.
-     * @return A bundle with the values.
-     */
-    public Bundle getBundle() {
-        return (Bundle)this.bundle.clone();
-    }
-
-    /**
-     * Returns a set of the keys contained in this object.
-     * @return A set of the keys.
-     */
-    public Set<String> keySet() {
-        return this.bundle.keySet();
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeBundle(this.bundle);
-    }
-
-    /**
-     * Abstract builder for the {@link com.facebook.share.model.ShareOpenGraphValueContainer} class.
-     */
-    public abstract static class Builder
-            <P extends ShareOpenGraphValueContainer, E extends Builder>
-            implements ShareModelBuilder<P, E> {
-        private Bundle bundle = new Bundle();
-
-        /**
-         * Sets a boolean value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putBoolean(final String key, final boolean value) {
-            this.bundle.putBoolean(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of boolean values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putBooleanArray(final String key, @Nullable final boolean[] value) {
-            this.bundle.putBooleanArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets a double value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putDouble(final String key, final double value) {
-            this.bundle.putDouble(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of double values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putDoubleArray(final String key, @Nullable final double[] value) {
-            this.bundle.putDoubleArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an int value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putInt(final String key, final int value) {
-            this.bundle.putInt(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of int values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putIntArray(final String key, @Nullable final int[] value) {
-            this.bundle.putIntArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets a long value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putLong(final String key, final long value) {
-            this.bundle.putLong(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of long values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putLongArray(final String key, @Nullable final long[] value) {
-            this.bundle.putLongArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an object value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putObject(final String key, @Nullable final ShareOpenGraphObject value) {
-            this.bundle.putParcelable(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of object values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putObjectArrayList(
-                final String key,
-                @Nullable final ArrayList<ShareOpenGraphObject> value) {
-            this.bundle.putParcelableArrayList(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets a photo value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putPhoto(final String key, @Nullable final SharePhoto value) {
-            this.bundle.putParcelable(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of photo values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putPhotoArrayList(final String key, @Nullable final ArrayList<SharePhoto> value) {
-            this.bundle.putParcelableArrayList(key, value);
-            return (E) this;
-        }
-
-        /**
-         * Sets a string value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putString(final String key, @Nullable final String value) {
-            this.bundle.putString(key, value);
-            return (E) this;
-        }
-
-        /**
-         * Sets an array of string values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putStringArrayList(final String key, @Nullable final ArrayList<String> value) {
-            this.bundle.putStringArrayList(key, value);
-            return (E) this;
-        }
-
-        @Override
-        public E readFrom(final P model) {
-            if (model != null) {
-                this.bundle.putAll(model.getBundle());
-            }
-            return (E)this;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
deleted file mode 100644
index fdd834ac3..000000000
--- a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
+++ /dev/null
@@ -1,243 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Describes a photo for sharing.
- *
- * Use {@link SharePhoto.Builder} to build instances
- */
-public final class SharePhoto extends ShareMedia {
-    private final Bitmap bitmap;
-    private final Uri imageUrl;
-    private final boolean userGenerated;
-    private final String caption;
-
-    private SharePhoto(final Builder builder) {
-        super(builder);
-        this.bitmap = builder.bitmap;
-        this.imageUrl = builder.imageUrl;
-        this.userGenerated = builder.userGenerated;
-        this.caption = builder.caption;
-    }
-
-    SharePhoto(final Parcel in) {
-        super(in);
-        this.bitmap = in.readParcelable(Bitmap.class.getClassLoader());
-        this.imageUrl = in.readParcelable(Uri.class.getClassLoader());
-        this.userGenerated = (in.readByte() != 0);
-        this.caption = in.readString();
-    }
-
-    /**
-     * If the photo is resident in memory, this method supplies the data.
-     * @return {@link android.graphics.Bitmap} representation of the photo.
-     */
-    @Nullable
-    public Bitmap getBitmap() {
-        return this.bitmap;
-    }
-
-    /**
-     * The URL to the photo.
-     * @return {@link android.net.Uri} that points to a network location or the location of the
-     * photo on disk.
-     */
-    @Nullable
-    public Uri getImageUrl() {
-        return this.imageUrl;
-    }
-
-    /**
-     * Specifies whether the photo represented by this object was generated by the user or by the
-     * application.
-     * @return Indication of whether the photo is user-generated.
-     */
-    public boolean getUserGenerated() {
-        return this.userGenerated;
-    }
-
-    /**
-     * Gets the user generated caption. Note that the 'caption' must come from the user, as
-     * pre-filled content is forbidden by the Platform Policies (2.3).
-     * @return The user generated caption.
-     */
-    public String getCaption() {
-        return this.caption;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelable(this.bitmap, 0);
-        out.writeParcelable(this.imageUrl, 0);
-        out.writeByte((byte)(this.userGenerated ? 1 : 0));
-        out.writeString(caption);
-    }
-
-    public static final Parcelable.Creator<SharePhoto> CREATOR =
-            new Parcelable.Creator<SharePhoto>() {
-
-                @Override
-                public SharePhoto createFromParcel(final Parcel source) {
-                    return new SharePhoto(source);
-                }
-
-                @Override
-                public SharePhoto[] newArray(final int size) {
-                    return new SharePhoto[size];
-                }
-            };
-
-    @Override
-    public Type getMediaType() {
-        return Type.PHOTO;
-    }
-
-    /**
-     * Builder for the {@link com.facebook.share.model.SharePhoto} class.
-     */
-    public static final class Builder extends ShareMedia.Builder<SharePhoto, Builder> {
-        private Bitmap bitmap;
-        private Uri imageUrl;
-        private boolean userGenerated;
-        private String caption;
-
-        /**
-         * Sets the bitmap representation of the photo.
-         * @param bitmap {@link android.graphics.Bitmap} representation of the photo.
-         * @return The builder.
-         */
-        public Builder setBitmap(@Nullable final Bitmap bitmap) {
-            this.bitmap = bitmap;
-            return this;
-        }
-
-        /**
-         * Sets the URL to the photo.
-         * @param imageUrl {@link android.net.Uri} that points to a network location or the location
-         *                                        of the photo on disk.
-         * @return The builder.
-         */
-        public Builder setImageUrl(@Nullable final Uri imageUrl) {
-            this.imageUrl = imageUrl;
-            return this;
-        }
-
-        /**
-         * Sets whether the photo represented by this object was generated by the user or by the
-         * application.
-         * @param userGenerated Indication of whether the photo is user-generated.
-         * @return The builder.
-         */
-        public Builder setUserGenerated(final boolean userGenerated) {
-            this.userGenerated = userGenerated;
-            return this;
-        }
-
-        /**
-         * Sets the user generated caption for the photo. Note that the 'caption' must come from
-         * the user, as pre-filled content is forbidden by the Platform Policies (2.3).
-         *
-         * @param caption {@link java.lang.String} of a {@link com.facebook.share.model.SharePhoto}
-         * @return The builder.
-         */
-        public Builder setCaption(@Nullable final String caption) {
-            this.caption = caption;
-            return this;
-        }
-
-        // Accessor that is present only for ShareVideoContent(Parcel) to use
-        Uri getImageUrl() {
-            return imageUrl;
-        }
-
-        // Accessor that is present only for ShareVideoContent(Parcel) to use
-        Bitmap getBitmap() {
-            return bitmap;
-        }
-
-        @Override
-        public SharePhoto build() {
-            return new SharePhoto(this);
-        }
-
-        @Override
-        public Builder readFrom(final SharePhoto model) {
-            if (model == null) {
-                return this;
-            }
-            return super.readFrom(model)
-                    .setBitmap(model.getBitmap())
-                    .setImageUrl(model.getImageUrl())
-                    .setUserGenerated(model.getUserGenerated())
-                    .setCaption(model.getCaption())
-                    ;
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (SharePhoto) parcel.readParcelable(SharePhoto.class.getClassLoader()));
-        }
-
-        /*
-         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
-         * code.
-         */
-        static void writePhotoListTo(
-                final Parcel out,
-                int parcelFlags,
-                final List<SharePhoto> photos) {
-            ShareMedia[] array = new ShareMedia[photos.size()];
-            for (int i = 0; i < photos.size(); ++i) {
-                array[i] = photos.get(i);
-            }
-            out.writeParcelableArray(array, parcelFlags);
-        }
-
-        /*
-         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
-         * code.
-         */
-        static List<SharePhoto> readPhotoListFrom(final Parcel in) {
-            final List<ShareMedia> media = readListFrom(in);
-            final List<SharePhoto> photos = new ArrayList<>();
-            for (ShareMedia medium : media) {
-                if (medium instanceof SharePhoto) {
-                    photos.add((SharePhoto) medium);
-                }
-            }
-            return photos;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
deleted file mode 100644
index fccbc67de..000000000
--- a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-import com.facebook.share.internal.ShareConstants;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * Describes photo content to be shared.
- *
- * Use {@link SharePhotoContent.Builder} to create instances
- */
-public final class SharePhotoContent
-        extends ShareContent<SharePhotoContent, SharePhotoContent.Builder> {
-    private final List<SharePhoto> photos;
-
-    private SharePhotoContent(final Builder builder) {
-        super(builder);
-        this.photos = Collections.unmodifiableList(builder.photos);
-    }
-
-    SharePhotoContent(final Parcel in) {
-        super(in);
-
-        this.photos = Collections.unmodifiableList(SharePhoto.Builder.readPhotoListFrom(in));
-    }
-
-    /**
-     * Photos to be shared.
-     * @return {@link java.util.List} of {@link SharePhoto}s.
-     */
-    @Nullable
-    public List<SharePhoto> getPhotos() {
-        return this.photos;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        SharePhoto.Builder.writePhotoListTo(out, flags, this.photos);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<SharePhotoContent> CREATOR = new Creator<SharePhotoContent>() {
-        public SharePhotoContent createFromParcel(final Parcel in) {
-            return new SharePhotoContent(in);
-        }
-
-        public SharePhotoContent[] newArray(final int size) {
-            return new SharePhotoContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link SharePhotoContent} interface.
-     */
-    public static class Builder extends ShareContent.Builder<SharePhotoContent, Builder> {
-        private final List<SharePhoto> photos = new ArrayList<SharePhoto>();
-
-        /**
-         * Adds a photo to the content.
-         * @param photo {@link com.facebook.share.model.SharePhoto} to add.
-         * @return The builder.
-         */
-        public Builder addPhoto(@Nullable final SharePhoto photo) {
-            if (photo != null) {
-                this.photos.add(new SharePhoto.Builder().readFrom(photo).build());
-            }
-            return this;
-        }
-
-        /**
-         * Adds multiple photos to the content.
-         * @param photos {@link java.util.List} of {@link com.facebook.share.model.SharePhoto}s
-         *                                      to add.
-         * @return The builder.
-         */
-        public Builder addPhotos(@Nullable final List<SharePhoto> photos) {
-            if (photos != null) {
-                for (SharePhoto photo : photos) {
-                    this.addPhoto(photo);
-                }
-            }
-            return this;
-        }
-
-        @Override
-        public SharePhotoContent build() {
-            return new SharePhotoContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final SharePhotoContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super.
-                    readFrom(model)
-                    .addPhotos(model.getPhotos());
-        }
-
-        /**
-         * Replaces the photos for the builder.
-         * @param photos {@link java.util.List} of {@link com.facebook.share.model.SharePhoto}s to add.
-         * @return The builder.
-         */
-        public Builder setPhotos(@Nullable final List<SharePhoto> photos) {
-            this.photos.clear();
-            this.addPhotos(photos);
-            return this;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
deleted file mode 100644
index 0a919f6f2..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.net.Uri;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-
-/**
- * Describes a video for sharing.
- *
- * Use {@link ShareVideo.Builder} to create instances
- */
-public final class ShareVideo extends ShareMedia {
-    private final Uri localUrl;
-
-    private ShareVideo(final Builder builder) {
-        super(builder);
-        this.localUrl = builder.localUrl;
-    }
-
-    ShareVideo(final Parcel in) {
-        super(in);
-        this.localUrl = in.readParcelable(Uri.class.getClassLoader());
-    }
-
-    /**
-     * This method supplies the URL to locate the video.
-     * @return {@link android.net.Uri} that points to the location of the video on disk.
-     */
-    @Nullable
-    public Uri getLocalUrl() {
-        return this.localUrl;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelable(this.localUrl, 0);
-    }
-
-    public static final Parcelable.Creator<ShareVideo> CREATOR =
-        new Parcelable.Creator<ShareVideo>() {
-
-            @Override
-            public ShareVideo createFromParcel(final Parcel source) {
-                return new ShareVideo(source);
-            }
-
-            @Override
-            public ShareVideo[] newArray(final int size) {
-                return new ShareVideo[size];
-            }
-        };
-
-    @Override
-    public Type getMediaType() {
-        return Type.VIDEO;
-    }
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareVideo} class.
-     */
-    public static final class Builder extends ShareMedia.Builder<ShareVideo, Builder> {
-        private Uri localUrl;
-
-        /**
-         * Sets the URL to locate the video.
-         * @param localUrl {@link android.net.Uri} that points to the location of the video on disk.
-         * @return The builder.
-         */
-        public Builder setLocalUrl(@Nullable final Uri localUrl) {
-            this.localUrl = localUrl;
-            return this;
-        }
-
-        @Override
-        public ShareVideo build() {
-            return new ShareVideo(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareVideo model) {
-            if (model == null) {
-                return this;
-            }
-            return super.readFrom(model)
-                    .setLocalUrl(model.getLocalUrl());
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareVideo) parcel.readParcelable(ShareVideo.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java b/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
deleted file mode 100644
index ed82b3fb3..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Provides the interface for video content to be shared.
- *
- * A general use builder is available in
- * {@link ShareVideoContent.Builder}.
- */
-public final class ShareVideoContent
-        extends ShareContent<ShareVideoContent, ShareVideoContent.Builder>
-        implements ShareModel {
-    private final String contentDescription;
-    private final String contentTitle;
-    private final SharePhoto previewPhoto;
-    private final ShareVideo video;
-
-    private ShareVideoContent(final Builder builder) {
-        super(builder);
-
-        this.contentDescription = builder.contentDescription;
-        this.contentTitle = builder.contentTitle;
-        this.previewPhoto = builder.previewPhoto;
-        this.video = builder.video;
-    }
-
-    ShareVideoContent(final Parcel in) {
-        super(in);
-        this.contentDescription = in.readString();
-        this.contentTitle = in.readString();
-        SharePhoto.Builder previewPhotoBuilder = new SharePhoto.Builder().readFrom(in);
-        if (previewPhotoBuilder.getImageUrl() != null || previewPhotoBuilder.getBitmap() != null) {
-            this.previewPhoto = previewPhotoBuilder.build();
-        } else {
-            this.previewPhoto = null;
-        }
-        this.video = new ShareVideo.Builder().readFrom(in).build();
-    }
-
-    /**
-     * The description of the video.
-     * @return The description of the video.
-     */
-    @Nullable
-    public String getContentDescription() {
-        return this.contentDescription;
-    }
-
-    /**
-     * The title to display for this video.
-     * @return The video title.
-     */
-    @Nullable
-    public String getContentTitle() {
-        return this.contentTitle;
-    }
-
-    /**
-     * Photo to be used as a preview for the video.
-     * @return Preview {@link SharePhoto} for the content.
-     */
-    @Nullable
-    public SharePhoto getPreviewPhoto() {
-        return this.previewPhoto;
-    }
-
-    /**
-     * Video to be shared.
-     * @return {@link ShareVideo}
-     */
-    @Nullable
-    public ShareVideo getVideo() {
-        return this.video;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeString(this.contentDescription);
-        out.writeString(this.contentTitle);
-        out.writeParcelable(this.previewPhoto, 0);
-        out.writeParcelable(this.video, 0);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareVideoContent> CREATOR = new Creator<ShareVideoContent>() {
-        public ShareVideoContent createFromParcel(final Parcel in) {
-            return new ShareVideoContent(in);
-        }
-
-        public ShareVideoContent[] newArray(final int size) {
-            return new ShareVideoContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareVideoContent} interface.
-     */
-    public static final class Builder extends ShareContent.Builder<ShareVideoContent, Builder> {
-        private String contentDescription;
-        private String contentTitle;
-        private SharePhoto previewPhoto;
-        private ShareVideo video;
-
-        /**
-         * Sets the description of the video.
-         * @param contentDescription The description of the video.
-         * @return The builder.
-         */
-        public Builder setContentDescription(
-                @Nullable final String contentDescription) {
-            this.contentDescription = contentDescription;
-            return this;
-        }
-
-        /**
-         * Sets the title to display for this video.
-         * @param contentTitle The video title.
-         * @return The builder.
-         */
-        public Builder setContentTitle(@Nullable final String contentTitle) {
-            this.contentTitle = contentTitle;
-            return this;
-        }
-
-        /**
-         * Sets the photo to be used as a preview for the video.
-         * @param previewPhoto Preview {@link com.facebook.share.model.SharePhoto} for the content.
-         * @return The builder.
-         */
-        public Builder setPreviewPhoto(@Nullable final SharePhoto previewPhoto) {
-            this.previewPhoto = (
-                    previewPhoto == null ?
-                    null :
-                    new SharePhoto.Builder().readFrom(previewPhoto).build());
-            return this;
-        }
-
-        /**
-         * Sets the video to be shared.
-         * @param video {@link com.facebook.share.model.ShareVideo}
-         * @return The builder.
-         */
-        public Builder setVideo(@Nullable final ShareVideo video) {
-            if (video == null) {
-                return this;
-            }
-
-            this.video = new ShareVideo.Builder().readFrom(video).build();
-            return this;
-        }
-
-        @Override
-        public ShareVideoContent build() {
-            return new ShareVideoContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareVideoContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setContentDescription(model.getContentDescription())
-                    .setContentTitle(model.getContentTitle())
-                    .setPreviewPhoto(model.getPreviewPhoto())
-                    .setVideo(model.getVideo())
-                    ;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
deleted file mode 100644
index d65bdcbd0..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
+++ /dev/null
@@ -1,307 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.*;
-import com.facebook.share.internal.*;
-import com.facebook.share.model.AppInviteContent;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * A dialog for inviting users.
- */
-public class AppInviteDialog
-        extends FacebookDialogBase<AppInviteContent, AppInviteDialog.Result> {
-
-    /**
-     * Helper object for handling the result from an app invites dialog.
-     */
-    public static final class Result {
-        private final Bundle bundle;
-
-        /**
-         * Constructor
-         *
-         * @param bundle the results bundle
-         */
-        public Result(Bundle bundle) {
-            this.bundle = bundle;
-        }
-
-        /**
-         * Returns the results data as a Bundle.
-         *
-         * @return the results bundle
-         */
-        public Bundle getData() {
-            return bundle;
-        }
-    }
-
-    private static final String TAG = "AppInviteDialog";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.AppInvite.toRequestCode();
-
-    /**
-     * Indicates whether the app invite dialog can be shown.
-     *
-     * @return true if the dialog can be shown
-     */
-    public static boolean canShow() {
-        return canShowNativeDialog() || canShowWebFallback();
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.AppInviteContent} using
-     * the provided Activity. No callback will be invoked.
-     *
-     * @param activity          Activity to use to share the provided content
-     * @param appInviteContent Content of the app invite to send
-     */
-    public static void show(
-            final Activity activity,
-            final AppInviteContent appInviteContent) {
-        new AppInviteDialog(activity)
-                .show(appInviteContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.AppInviteContent} using
-     * the provided Fragment. No callback will be invoked.
-     *
-     * @param fragment          android.support.v4.app.Fragment to use to share the provided content
-     * @param appInviteContent Content of the app invite to send
-     */
-    public static void show(
-            final Fragment fragment,
-            final AppInviteContent appInviteContent) {
-        show(new FragmentWrapper(fragment), appInviteContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.AppInviteContent} using
-     * the provided Fragment. No callback will be invoked.
-     *
-     * @param fragment          android.app.Fragment to use to share the provided content
-     * @param appInviteContent Content of the app invite to send
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final AppInviteContent appInviteContent) {
-        show(new FragmentWrapper(fragment), appInviteContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final AppInviteContent appInviteContent) {
-        new AppInviteDialog(fragmentWrapper)
-                .show(appInviteContent);
-    }
-
-    private static boolean canShowNativeDialog() {
-        return DialogPresenter.canPresentNativeDialogWithFeature(getFeature());
-    }
-
-    private static boolean canShowWebFallback() {
-        return DialogPresenter.canPresentWebFallbackDialogWithFeature(getFeature());
-    }
-
-    /**
-     * Constructs a new AppInviteDialog.
-     *
-     * @param activity Activity to use to share the provided content.
-     */
-    public AppInviteDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a new AppInviteDialog.
-     *
-     * @param fragment android.support.v4.app.Fragment to use to share the provided content.
-     */
-    public AppInviteDialog(final Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * Constructs a new AppInviteDialog.
-     *
-     * @param fragment android.app.Fragment to use to share the provided content.
-     */
-    public AppInviteDialog(final android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private AppInviteDialog(final FragmentWrapper fragment) {
-        super(fragment, DEFAULT_REQUEST_CODE);
-    }
-
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                String gesture = ShareInternalUtility.getNativeDialogCompletionGesture(results);
-                if ("cancel".equalsIgnoreCase(gesture)) {
-                    callback.onCancel();
-                } else {
-                    callback.onSuccess(new Result(results));
-                }
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(
-                getRequestCode(),
-                callbackManagerCallback);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-        handlers.add(new WebFallbackHandler());
-
-        return handlers;
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public boolean canShow(AppInviteContent content, boolean isBestEffort) {
-            return AppInviteDialog.canShowNativeDialog();
-        }
-
-        @Override
-        public AppCall createAppCall(final AppInviteContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return createParameters(content);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            // App Invites are not supported with legacy fb4a devices.
-                            // We should never get here
-                            Log.e(TAG, "Attempting to present the AppInviteDialog with " +
-                                    "an outdated Facebook app on the device");
-                            return new Bundle();
-                        }
-                    },
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private class WebFallbackHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final AppInviteContent content, boolean isBestEffort) {
-            return AppInviteDialog.canShowWebFallback();
-        }
-
-        @Override
-        public AppCall createAppCall(final AppInviteContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForWebFallbackDialog(
-                    appCall,
-                    createParameters(content),
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature() {
-        return AppInviteDialogFeature.APP_INVITES_DIALOG;
-    }
-
-    private static Bundle createParameters(final AppInviteContent content) {
-        Bundle params = new Bundle();
-        params.putString(ShareConstants.APPLINK_URL, content.getApplinkUrl());
-        params.putString(ShareConstants.PREVIEW_IMAGE_URL, content.getPreviewImageUrl());
-        params.putString(
-                ShareConstants.DESTINATION,
-                content.getDestination().toString()
-        );
-
-        String promoCode = content.getPromotionCode();
-        promoCode = promoCode != null ? promoCode : "";
-        String promoText = content.getPromotionText();
-
-        if (!TextUtils.isEmpty(promoText)) {
-            // Encode deeplink context as json array.
-            try {
-                JSONObject deeplinkContent = new JSONObject();
-                deeplinkContent.put(ShareConstants.PROMO_CODE, promoCode);
-                deeplinkContent.put(ShareConstants.PROMO_TEXT, promoText);
-
-                params.putString(ShareConstants.DEEPLINK_CONTEXT, deeplinkContent.toString());
-                params.putString(ShareConstants.PROMO_CODE, promoCode);
-                params.putString(ShareConstants.PROMO_TEXT, promoText);
-            } catch (JSONException e) {
-                Log.e(TAG, "Json Exception in creating deeplink context");
-                // Ignore it since this is optional.
-            }
-        }
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
deleted file mode 100644
index b5b0e99c4..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
+++ /dev/null
@@ -1,221 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.ResultProcessor;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.AppGroupCreationContent;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * @deprecated
- * App and game groups are being deprecated. See
- * https://developers.facebook.com/docs/games/services/game-groups for more information.
- */
-@Deprecated
-public class CreateAppGroupDialog
-        extends FacebookDialogBase<AppGroupCreationContent, CreateAppGroupDialog.Result> {
-
-    private static final String GAME_GROUP_CREATION_DIALOG = "game_group_create";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.AppGroupCreate.toRequestCode();
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static final class Result {
-        private final String id;
-
-        private Result(String id) {
-            this.id = id;
-        }
-
-        /**
-         * Get the ID of the created group.
-         * @return the id of the group.
-         */
-        public String getId() {
-            return id;
-        }
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static boolean canShow() {
-        return true;
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static void show(
-            final Activity activity,
-            final AppGroupCreationContent appGroupCreationContent) {
-        new CreateAppGroupDialog(activity).show(appGroupCreationContent);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static void show(
-            final Fragment fragment,
-            AppGroupCreationContent appGroupCreationContent) {
-        show(new FragmentWrapper(fragment), appGroupCreationContent);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static void show(
-            final android.app.Fragment fragment,
-            AppGroupCreationContent appGroupCreationContent) {
-        show(new FragmentWrapper(fragment), appGroupCreationContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            AppGroupCreationContent appGroupCreationContent) {
-        new CreateAppGroupDialog(fragmentWrapper).show(appGroupCreationContent);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public CreateAppGroupDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public CreateAppGroupDialog(final Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public CreateAppGroupDialog(final android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private CreateAppGroupDialog(final FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                callback.onSuccess(new Result(results.getString("id")));
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(getRequestCode(), callbackManagerCallback);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new WebHandler());
-
-        return handlers;
-    }
-
-    private class WebHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final AppGroupCreationContent content, boolean isBestEffort) {
-            return true;
-        }
-
-        @Override
-        public AppCall createAppCall(final AppGroupCreationContent content) {
-            AppCall appCall = createBaseAppCall();
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    GAME_GROUP_CREATION_DIALOG,
-                    WebDialogParameters.create(content));
-
-            return appCall;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java b/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
deleted file mode 100644
index 67b03ffc7..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
+++ /dev/null
@@ -1,204 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- * <p/>
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- * <p/>
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- * <p/>
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.CallbackManager;
-import com.facebook.FacebookButtonBase;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookSdk;
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.share.DeviceShareDialog;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A button to share content on Facebook from a device.
- * Tapping the receiver will invoke the {@link com.facebook.share.DeviceShareDialog} with
- * the attached shareContent.
- */
-public final class DeviceShareButton extends FacebookButtonBase {
-    private ShareContent shareContent;
-    private int requestCode = 0;
-    private boolean enabledExplicitlySet = false;
-    private DeviceShareDialog dialog = null;
-
-    /*
-     * Constructs a new DeviceShareButton instance.
-     */
-    public DeviceShareButton(final Context context) {
-        this(context, null, 0);
-    }
-    /*
-     * Constructs a new DeviceShareButton instance.
-     */
-    public DeviceShareButton(final Context context, final AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-    /*
-     * Constructs a new DeviceShareButton instance.
-     */
-    private DeviceShareButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                0,
-                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_DID_TAP);
-        requestCode = isInEditMode() ? 0 : getDefaultRequestCode();
-        internalSetEnabled(false);
-    }
-
-    /**
-     * Returns the share content from the button.
-     * @return The share content.
-     */
-    public ShareContent getShareContent() {
-        return this.shareContent;
-    }
-
-    /**
-     * Sets the share content on the button.
-     * @param shareContent The share content.
-     */
-    public void setShareContent(final ShareContent shareContent) {
-        this.shareContent = shareContent;
-        if (!enabledExplicitlySet) {
-            internalSetEnabled(canShare());
-        }
-    }
-
-    @Override
-    public void setEnabled(boolean enabled) {
-        super.setEnabled(enabled);
-        enabledExplicitlySet = true;
-    }
-
-    public int getRequestCode() {
-        return requestCode;
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *          handling results that are received via
-     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<DeviceShareDialog.Result> callback) {
-        getDialog().registerCallback(callbackManager, callback);
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *          handling results that are received via
-     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     * @param requestCode  The request code to use, this should be outside of the range of those
-     *                     reserved for the Facebook SDK
-     *                     {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<DeviceShareDialog.Result> callback,
-            final int requestCode) {
-        setRequestCode(requestCode);
-        getDialog().registerCallback(callbackManager, callback, requestCode);
-    }
-
-    @Override
-    protected void configureButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        setInternalOnClickListener(this.getShareOnClickListener());
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_share;
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
-    }
-
-    protected OnClickListener getShareOnClickListener() {
-        return new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                callExternalOnClickListener(v);
-                getDialog().show(getShareContent());
-            }
-        };
-    }
-
-    private void internalSetEnabled(boolean enabled) {
-        setEnabled(enabled);
-        enabledExplicitlySet = false;
-    }
-
-    private void setRequestCode(final int requestCode) {
-        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
-            throw new IllegalArgumentException("Request code " + requestCode +
-                    " cannot be within the range reserved by the Facebook SDK.");
-        }
-        this.requestCode = requestCode;
-    }
-
-    private boolean canShare() {
-        return new DeviceShareDialog(getActivity()).canShow(getShareContent());
-    }
-
-    private DeviceShareDialog getDialog() {
-        if (dialog != null) {
-            return dialog;
-        }
-        if (DeviceShareButton.this.getFragment() != null) {
-            dialog = new DeviceShareDialog(DeviceShareButton.this.getFragment());
-        } else if (DeviceShareButton.this.getNativeFragment() != null) {
-            dialog = new DeviceShareDialog(DeviceShareButton.this.getNativeFragment());
-        } else {
-            dialog = new DeviceShareDialog(getActivity());
-        }
-        return dialog;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java b/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
deleted file mode 100644
index 94c06c3c1..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
+++ /dev/null
@@ -1,235 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.GameRequestValidation;
-import com.facebook.share.internal.ResultProcessor;
-import com.facebook.share.internal.ShareConstants;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.GameRequestContent;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Provides functionality to send requests in games.
- * see https://developers.facebook.com/docs/games/requests
- */
-public class GameRequestDialog
-        extends FacebookDialogBase<GameRequestContent, GameRequestDialog.Result> {
-
-    /**
-     * Helper object for handling the result from a requests dialog
-     */
-    public static final class Result {
-        String requestId;
-        List<String> to;
-
-        private Result(Bundle results) {
-            this.requestId = results.getString(ShareConstants.WEB_DIALOG_RESULT_PARAM_REQUEST_ID);
-            this.to = new ArrayList<String>();
-            while (results.containsKey(String.format(
-                    ShareConstants.WEB_DIALOG_RESULT_PARAM_TO_ARRAY_MEMBER, this.to.size()))) {
-                this.to.add(results.getString(String.format(
-                        ShareConstants.WEB_DIALOG_RESULT_PARAM_TO_ARRAY_MEMBER, this.to.size())));
-            }
-        }
-
-        /**
-         * Returns the request ID.
-         * @return the request ID.
-         */
-        public String getRequestId() {
-            return requestId;
-        }
-
-        /**
-         * Returns request recipients.
-         * @return request recipients
-         */
-        public List<String> getRequestRecipients() {
-            return to;
-        }
-    }
-
-    // The actual value of the string is different since that is what the web dialog is actually
-    // called on the server.
-    private static final String GAME_REQUEST_DIALOG = "apprequests";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.GameRequest.toRequestCode();
-
-    /**
-     * Indicates whether the game request dialog can be shown.
-     *
-     * @return true if the dialog can be shown
-     */
-    public static boolean canShow() {
-        return true;
-    }
-
-    /**
-     * Shows a {@link GameRequestDialog} to send a request, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog.
-     * @param gameRequestContent Content of the request.
-     */
-    public static void show(final Activity activity, final GameRequestContent gameRequestContent) {
-        new GameRequestDialog(activity).show(gameRequestContent);
-    }
-
-    /**
-     * Shows a {@link GameRequestDialog} to send a request, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
-     * @param gameRequestContent Content of the request.
-     */
-    public static void show(
-            final Fragment fragment,
-            final GameRequestContent gameRequestContent) {
-        show(new FragmentWrapper(fragment), gameRequestContent);
-    }
-
-    /**
-     * Shows a {@link GameRequestDialog} to send a request, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog.
-     * @param gameRequestContent Content of the request.
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final GameRequestContent gameRequestContent) {
-        show(new FragmentWrapper(fragment), gameRequestContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final GameRequestContent gameRequestContent) {
-        new GameRequestDialog(fragmentWrapper).show(gameRequestContent);
-    }
-
-    /**
-     * Constructs a new RequestDialog.
-     * @param activity Activity hosting the dialog.
-     */
-    public GameRequestDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a new RequestDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
-     */
-    public GameRequestDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * Constructs a new RequestDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
-     */
-    public GameRequestDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private GameRequestDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                if (results != null) {
-                    callback.onSuccess(new Result(results));
-                } else {
-                    onCancel(appCall);
-                }
-            }
-        };
-
-       callbackManager.registerCallback(
-                getRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return ShareInternalUtility.handleActivityResult(
-                                getRequestCode(),
-                                resultCode,
-                                data,
-                                resultProcessor);
-                    }
-                });
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new WebHandler());
-
-        return handlers;
-    }
-
-    private class WebHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final GameRequestContent content, boolean isBestEffort) {
-            return true;
-        }
-
-        @Override
-        public AppCall createAppCall(final GameRequestContent content) {
-            GameRequestValidation.validate(content);
-            AppCall appCall = createBaseAppCall();
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    GAME_REQUEST_DIALOG,
-                    WebDialogParameters.create(content));
-
-            return appCall;
-        }
-
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
deleted file mode 100644
index 00298627f..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
+++ /dev/null
@@ -1,222 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.ResultProcessor;
-import com.facebook.share.internal.ShareConstants;
-import com.facebook.share.internal.ShareInternalUtility;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * @deprecated
- * App and game groups are being deprecated. See
- * https://developers.facebook.com/docs/games/services/game-groups for more information.
- */
-@Deprecated
-public class JoinAppGroupDialog extends FacebookDialogBase<String, JoinAppGroupDialog.Result> {
-
-    private static final String JOIN_GAME_GROUP_DIALOG = "game_group_join";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.AppGroupJoin.toRequestCode();
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static final class Result {
-        private final Bundle data;
-
-        private Result(Bundle bundle) {
-            this.data = bundle;
-        }
-
-        /**
-         * Returns the result data from the dialog;
-         * @return the result data.
-         */
-        public Bundle getData() {
-            return data;
-        }
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static boolean canShow() {
-        return true;
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static void show(
-            final Activity activity,
-            final String groupId) {
-        new JoinAppGroupDialog(activity).show(groupId);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static void show(
-            final Fragment fragment,
-            final String groupId) {
-        show(new FragmentWrapper(fragment), groupId);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public static void show(
-            final android.app.Fragment fragment,
-            final String groupId) {
-        show(new FragmentWrapper(fragment), groupId);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final String groupId) {
-        new JoinAppGroupDialog(fragmentWrapper).show(groupId);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public JoinAppGroupDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public JoinAppGroupDialog(final Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * @deprecated
-     * App and game groups are being deprecated. See
-     * https://developers.facebook.com/docs/games/services/game-groups for more information.
-     */
-    @Deprecated
-    public JoinAppGroupDialog(final android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private JoinAppGroupDialog(final FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected void registerCallbackImpl (
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                callback.onSuccess(new Result(results));
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(getRequestCode(), callbackManagerCallback);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new WebHandler());
-
-        return handlers;
-    }
-
-    private class WebHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final String content, boolean isBestEffort) {
-            return true;
-        }
-
-        @Override
-        public AppCall createAppCall(final String content) {
-            AppCall appCall = createBaseAppCall();
-            Bundle params = new Bundle();
-            params.putString(ShareConstants.WEB_DIALOG_PARAM_ID, content);
-
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    JOIN_GAME_GROUP_DIALOG,
-                    params);
-
-            return appCall;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/LikeView.java b/facebook/src/main/java/com/facebook/share/widget/LikeView.java
deleted file mode 100644
index b23d39ebb..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/LikeView.java
+++ /dev/null
@@ -1,861 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.res.TypedArray;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.facebook.FacebookException;
-import com.facebook.R;
-import com.facebook.internal.*;
-import com.facebook.share.internal.LikeActionController;
-import com.facebook.share.internal.LikeBoxCountView;
-import com.facebook.share.internal.LikeButton;
-
-/**
- * This class provides the UI for displaying the Facebook Like button and its associated components.
- */
-public class LikeView extends FrameLayout {
-
-    // ***
-    // Keep all the enum values in sync with attrs.xml
-    // ***
-
-    /**
-     * Encapsulates the valid values for the facebook:object_type attribute for a LikeView
-     */
-    public enum ObjectType {
-        /**
-         * This is the default value
-         */
-        UNKNOWN("unknown", 0),
-
-        /**
-         * Indicates that the object id set on this LikeView is an Open Graph object
-         */
-        OPEN_GRAPH("open_graph", 1),
-
-        /**
-         * Indicates that the object id set on this LikeView is a Page.
-         */
-        PAGE("page", 2);
-
-        public static ObjectType DEFAULT = UNKNOWN;
-
-        public static ObjectType fromInt(int enumValue) {
-            for (ObjectType objectType : values()) {
-                if (objectType.getValue() == enumValue) {
-                    return objectType;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private ObjectType(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        public int getValue() {
-            return intValue;
-        }
-    }
-
-    /**
-     * Encapsulates the valid values for the facebook:style attribute for a LikeView
-     */
-    public enum Style {
-        /**
-         * Setting the attribute to this value will display the button and a sentence near it that
-         * describes the social sentence for the associated object.
-         * <p/>
-         * This is the default value
-         */
-        STANDARD("standard", 0),
-
-        /**
-         * Setting the attribute to this value will display the button by itself, with no other
-         * components
-         */
-        BUTTON("button", 1),
-
-        /**
-         * Setting the attribute to this value will display the button and a box near it with the
-         * number of likes for the associated object
-         */
-        BOX_COUNT("box_count", 2);
-
-        static Style DEFAULT = STANDARD;
-
-        static Style fromInt(int enumValue) {
-            for (Style style : values()) {
-                if (style.getValue() == enumValue) {
-                    return style;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private Style(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        private int getValue() {
-            return intValue;
-        }
-    }
-
-    /**
-     * Encapsulates the valid values for the facebook:horizontal_alignment attribute for a LikeView.
-     */
-    public enum HorizontalAlignment {
-        /**
-         * Setting the attribute to this value will center the button and auxiliary view in the
-         * parent view.
-         * <p/>
-         * This is the default value
-         */
-        CENTER("center", 0),
-
-        /**
-         * Setting the attribute to this value will left-justify the button and auxiliary view in
-         * the parent view.
-         */
-        LEFT("left", 1),
-
-        /**
-         * Setting the attribute to this value will right-justify the button and auxiliary view in
-         * the parent view. If the facebook:auxiliary_view_position is set to INLINE, then the
-         * auxiliary view will be on the left of the button
-         */
-        RIGHT("right", 2);
-
-        static HorizontalAlignment DEFAULT = CENTER;
-
-        static HorizontalAlignment fromInt(int enumValue) {
-            for (HorizontalAlignment horizontalAlignment : values()) {
-                if (horizontalAlignment.getValue() == enumValue) {
-                    return horizontalAlignment;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private HorizontalAlignment(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        private int getValue() {
-            return intValue;
-        }
-    }
-
-    /**
-     * Encapsulates the valid values for the facebook:auxiliary_view_position attribute for a
-     * LikeView.
-     */
-    public enum AuxiliaryViewPosition {
-        /**
-         * Setting the attribute to this value will put the social-sentence or box-count below the
-         * like button. If the facebook:style is set to BUTTON, then this has no effect.
-         * <p/>
-         * This is the default value
-         */
-        BOTTOM("bottom", 0),
-
-        /**
-         * Setting the attribute to this value will put the social-sentence or box-count inline with
-         * the like button. The auxiliary view will be to the left of the button if the
-         * facebook:horizontal_alignment is set to RIGHT. In all other cases, it will be to the
-         * right of the button. If the facebook:style is set to BUTTON, then this has no effect.
-         */
-        INLINE("inline", 1),
-
-        /**
-         * Setting the attribute to this value will put the social-sentence or box-count above the
-         * like button. If the facebook:style is set to BUTTON, then this has no effect.
-         */
-        TOP("top", 2);
-
-        static AuxiliaryViewPosition DEFAULT = BOTTOM;
-
-        static AuxiliaryViewPosition fromInt(int enumValue) {
-            for (AuxiliaryViewPosition auxViewPosition : values()) {
-                if (auxViewPosition.getValue() == enumValue) {
-                    return auxViewPosition;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private AuxiliaryViewPosition(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        private int getValue() {
-            return intValue;
-        }
-    }
-
-    private static final int NO_FOREGROUND_COLOR = -1;
-
-    private String objectId;
-    private ObjectType objectType;
-    private LinearLayout containerView;
-    private LikeButton likeButton;
-    private LikeBoxCountView likeBoxCountView;
-    private TextView socialSentenceView;
-    private LikeActionController likeActionController;
-    private OnErrorListener onErrorListener;
-    private BroadcastReceiver broadcastReceiver;
-    private LikeActionControllerCreationCallback creationCallback;
-
-    private Style likeViewStyle = Style.DEFAULT;
-    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.DEFAULT;
-    private AuxiliaryViewPosition auxiliaryViewPosition = AuxiliaryViewPosition.DEFAULT;
-    private int foregroundColor = NO_FOREGROUND_COLOR;
-
-    private int edgePadding;
-    private int internalPadding;
-
-    private FragmentWrapper parentFragment;
-
-    private boolean explicitlyDisabled;
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     */
-    public LikeView(Context context) {
-        super(context);
-        initialize(context);
-    }
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     * @param attrs   AttributeSet for this View.
-     */
-    public LikeView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        parseAttributes(attrs);
-        initialize(context);
-    }
-
-    /**
-     * Sets the associated object ID for this LikeView. Can be changed during runtime.
-     * @param objectId The object ID, this can be a URL or a Facebook ID.
-     */
-    public void setObjectIdAndType(String objectId, ObjectType objectType) {
-        objectId = Utility.coerceValueIfNullOrEmpty(objectId, null);
-        objectType = objectType != null ? objectType : ObjectType.DEFAULT;
-
-        if (!Utility.areObjectsEqual(objectId, this.objectId) || (objectType != this.objectType)) {
-            setObjectIdAndTypeForced(objectId, objectType);
-
-            updateLikeStateAndLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:style for this LikeView. Can be changed during runtime.
-     *
-     * @param likeViewStyle Should be either LikeView.STANDARD, LikeView.BUTTON or
-     *                      LikeView.BOX_COUNT
-     */
-    public void setLikeViewStyle(Style likeViewStyle) {
-        likeViewStyle = likeViewStyle != null ? likeViewStyle : Style.DEFAULT;
-        if (this.likeViewStyle != likeViewStyle) {
-            this.likeViewStyle = likeViewStyle;
-
-            updateLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:auxiliary_view_position for this LikeView. Can be changed during runtime.
-     *
-     * @param auxiliaryViewPosition Should be either LikeView.TOP, LikeView.INLINE or
-     *                              LikeView.BOTTOM
-     */
-    public void setAuxiliaryViewPosition(AuxiliaryViewPosition auxiliaryViewPosition) {
-        auxiliaryViewPosition = auxiliaryViewPosition != null
-                ? auxiliaryViewPosition : AuxiliaryViewPosition.DEFAULT;
-        if (this.auxiliaryViewPosition != auxiliaryViewPosition) {
-            this.auxiliaryViewPosition = auxiliaryViewPosition;
-
-            updateLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:horizontal_alignment for this LikeView. Can be changed during runtime.
-     *
-     * @param horizontalAlignment Should be either LikeView.LEFT, LikeView.CENTER or LikeView.RIGHT
-     */
-    public void setHorizontalAlignment(HorizontalAlignment horizontalAlignment) {
-        horizontalAlignment = horizontalAlignment != null
-                ? horizontalAlignment : HorizontalAlignment.DEFAULT;
-        if (this.horizontalAlignment != horizontalAlignment) {
-            this.horizontalAlignment = horizontalAlignment;
-
-            updateLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:foreground_color for this LikeView. Can be changed during runtime. The
-     * color is only used for the social sentence text.
-     *
-     * @param foregroundColor And valid android.graphics.Color value.
-     */
-    public void setForegroundColor(int foregroundColor) {
-        if (this.foregroundColor != foregroundColor) {
-            socialSentenceView.setTextColor(foregroundColor);
-        }
-    }
-
-    /**
-     * Sets an OnErrorListener for this instance of LikeView to call into when
-     * certain exceptions occur.
-     *
-     * @param onErrorListener The listener object to set
-     */
-    public void setOnErrorListener(OnErrorListener onErrorListener) {
-        this.onErrorListener = onErrorListener;
-    }
-
-    /**
-     * Returns the current OnErrorListener for this instance of LikeView.
-     *
-     * @return The OnErrorListener
-     */
-    public OnErrorListener getOnErrorListener() {
-        return onErrorListener;
-    }
-
-    /**
-     * Sets the parent Fragment which is hosting this LikeView. This allows the LikeView to be
-     * embedded inside a Fragment, and will allow the fragment to receive the
-     * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
-     * call rather than the Activity, upon completion of Likes from this view.
-     *
-     * @param fragment android.support.v4.app.Fragment that is hosting the LikeView.
-     */
-    public void setFragment(Fragment fragment) {
-        this.parentFragment = new FragmentWrapper(fragment);
-    }
-
-    /**
-     * Sets the parent Fragment which is hosting this LikeView. This allows the LikeView to be
-     * embedded inside a Fragment, and will allow the fragment to receive the
-     * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
-     * call rather than the Activity, upon completion of Likes from this view.
-     *
-     * @param fragment android.app.Fragment that is hosting the LikeView.
-     */
-    public void setFragment(android.app.Fragment fragment) {
-        this.parentFragment = new FragmentWrapper(fragment);
-    }
-
-    @Override
-    public void setEnabled(boolean enabled) {
-        explicitlyDisabled = !enabled;
-
-        updateLikeStateAndLayout();
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        // Disassociate from the object
-        setObjectIdAndType(null, ObjectType.UNKNOWN);
-
-        super.onDetachedFromWindow();
-    }
-
-    private void parseAttributes(AttributeSet attrs) {
-        if (attrs == null || getContext() == null) {
-            return;
-        }
-
-        TypedArray a = getContext().obtainStyledAttributes(
-                attrs, R.styleable.com_facebook_like_view);
-        if (a == null) {
-            return;
-        }
-
-        objectId = Utility.coerceValueIfNullOrEmpty(
-                a.getString(R.styleable.com_facebook_like_view_com_facebook_object_id), null);
-        objectType = ObjectType.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_object_type,
-                        ObjectType.DEFAULT.getValue()));
-        likeViewStyle = Style.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_style,
-                        Style.DEFAULT.getValue()));
-        if (likeViewStyle == null) {
-            throw new IllegalArgumentException("Unsupported value for LikeView 'style'");
-        }
-
-        auxiliaryViewPosition = AuxiliaryViewPosition.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_auxiliary_view_position,
-                        AuxiliaryViewPosition.DEFAULT.getValue()));
-        if (auxiliaryViewPosition == null) {
-            throw new IllegalArgumentException(
-                    "Unsupported value for LikeView 'auxiliary_view_position'");
-        }
-
-        horizontalAlignment = HorizontalAlignment.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_horizontal_alignment,
-                        HorizontalAlignment.DEFAULT.getValue()));
-        if (horizontalAlignment == null) {
-            throw new IllegalArgumentException(
-                    "Unsupported value for LikeView 'horizontal_alignment'");
-        }
-
-        foregroundColor = a.getColor(
-                R.styleable.com_facebook_like_view_com_facebook_foreground_color, NO_FOREGROUND_COLOR);
-
-        a.recycle();
-    }
-
-    // If attributes were present, parseAttributes MUST be called before initialize() to ensure
-    // proper behavior
-    private void initialize(Context context) {
-        edgePadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_edge_padding);
-        internalPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_internal_padding);
-        if (foregroundColor == NO_FOREGROUND_COLOR) {
-            foregroundColor = getResources().getColor(R.color.com_facebook_likeview_text_color);
-        }
-
-        setBackgroundColor(Color.TRANSPARENT);
-
-        containerView = new LinearLayout(context);
-        LayoutParams containerViewLayoutParams = new LayoutParams(
-                LayoutParams.WRAP_CONTENT,
-                LayoutParams.WRAP_CONTENT);
-        containerView.setLayoutParams(containerViewLayoutParams);
-
-        initializeLikeButton(context);
-        initializeSocialSentenceView(context);
-        initializeLikeCountView(context);
-
-        containerView.addView(likeButton);
-        containerView.addView(socialSentenceView);
-        containerView.addView(likeBoxCountView);
-
-        addView(containerView);
-
-        setObjectIdAndTypeForced(this.objectId, this.objectType);
-        updateLikeStateAndLayout();
-    }
-
-    private void initializeLikeButton(Context context) {
-        likeButton = new LikeButton(
-                context,
-                likeActionController != null && likeActionController.isObjectLiked());
-        likeButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                toggleLike();
-            }
-        });
-
-        LinearLayout.LayoutParams buttonLayout = new LinearLayout.LayoutParams(
-                LayoutParams.WRAP_CONTENT,
-                LayoutParams.WRAP_CONTENT);
-
-        likeButton.setLayoutParams(buttonLayout);
-    }
-
-    private void initializeSocialSentenceView(Context context) {
-        socialSentenceView = new TextView(context);
-        socialSentenceView.setTextSize(
-                TypedValue.COMPLEX_UNIT_PX,
-                getResources().getDimension(R.dimen.com_facebook_likeview_text_size));
-        socialSentenceView.setMaxLines(2);
-        socialSentenceView.setTextColor(foregroundColor);
-        socialSentenceView.setGravity(Gravity.CENTER);
-
-        LinearLayout.LayoutParams socialSentenceViewLayout = new LinearLayout.LayoutParams(
-                LayoutParams.WRAP_CONTENT,
-                LayoutParams.MATCH_PARENT);
-        socialSentenceView.setLayoutParams(socialSentenceViewLayout);
-    }
-
-    private void initializeLikeCountView(Context context) {
-        likeBoxCountView = new LikeBoxCountView(context);
-
-        LinearLayout.LayoutParams likeCountViewLayout = new LinearLayout.LayoutParams(
-                LayoutParams.MATCH_PARENT,
-                LayoutParams.MATCH_PARENT);
-        likeBoxCountView.setLayoutParams(likeCountViewLayout);
-    }
-
-    private void toggleLike() {
-        if (likeActionController != null) {
-            Activity activity = null;
-            if (parentFragment == null) {
-                activity = getActivity();
-            }
-
-            likeActionController.toggleLike(
-                    activity,
-                    parentFragment,
-                    getAnalyticsParameters());
-        }
-    }
-
-    private Activity getActivity() {
-        Context context = getContext();
-        while (!(context instanceof Activity) && context instanceof ContextWrapper) {
-            context = ((ContextWrapper) context).getBaseContext();
-        }
-
-        if (context instanceof Activity) {
-            return (Activity) context;
-        }
-        throw new FacebookException("Unable to get Activity.");
-    }
-
-    private Bundle getAnalyticsParameters() {
-        Bundle params = new Bundle();
-        params.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_STYLE, likeViewStyle.toString());
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_AUXILIARY_POSITION,
-                auxiliaryViewPosition.toString());
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_HORIZONTAL_ALIGNMENT,
-                horizontalAlignment.toString());
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_ID,
-                Utility.coerceValueIfNullOrEmpty(objectId, ""));
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_TYPE,
-                objectType.toString());
-
-        return params;
-    }
-
-    private void setObjectIdAndTypeForced(String newObjectId, ObjectType newObjectType) {
-        tearDownObjectAssociations();
-
-        objectId = newObjectId;
-        objectType = newObjectType;
-
-        if (Utility.isNullOrEmpty(newObjectId)) {
-            return;
-        }
-
-        creationCallback = new LikeActionControllerCreationCallback();
-        if (!isInEditMode()) {
-            LikeActionController.getControllerForObjectId(
-                    newObjectId,
-                    newObjectType,
-                    creationCallback);
-        }
-    }
-
-    private void associateWithLikeActionController(LikeActionController likeActionController) {
-        this.likeActionController = likeActionController;
-
-        this.broadcastReceiver = new LikeControllerBroadcastReceiver();
-        LocalBroadcastManager localBroadcastManager =
-                LocalBroadcastManager.getInstance(getContext());
-
-        // add the broadcast receiver
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
-        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR);
-        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_RESET);
-
-        localBroadcastManager.registerReceiver(broadcastReceiver, filter);
-    }
-
-    private void tearDownObjectAssociations() {
-        if (broadcastReceiver != null) {
-            LocalBroadcastManager localBroadcastManager =
-                    LocalBroadcastManager.getInstance(getContext());
-            localBroadcastManager.unregisterReceiver(broadcastReceiver);
-
-            broadcastReceiver = null;
-        }
-
-        // If we were already waiting on a controller to be given back, make sure we aren't waiting
-        // anymore. Otherwise when that controller is given back to the callback, it will go and
-        // register a broadcast receiver for it.
-        if (creationCallback != null) {
-            creationCallback.cancel();
-
-            creationCallback = null;
-        }
-
-        likeActionController = null;
-    }
-
-    private void updateLikeStateAndLayout() {
-        boolean enabled = !explicitlyDisabled;
-
-        if (likeActionController == null) {
-            likeButton.setSelected(false);
-            socialSentenceView.setText(null);
-            likeBoxCountView.setText(null);
-        } else {
-            likeButton.setSelected(likeActionController.isObjectLiked());
-            socialSentenceView.setText(likeActionController.getSocialSentence());
-            likeBoxCountView.setText(likeActionController.getLikeCountString());
-
-            enabled &= likeActionController.shouldEnableView();
-        }
-
-        super.setEnabled(enabled);
-        likeButton.setEnabled(enabled);
-
-        updateLayout();
-    }
-
-    private void updateLayout() {
-        // Make sure the container is horizontally aligned according to specifications.
-        LayoutParams containerViewLayoutParams = (LayoutParams)containerView.getLayoutParams();
-        LinearLayout.LayoutParams buttonLayoutParams =
-                (LinearLayout.LayoutParams)likeButton.getLayoutParams();
-        int viewGravity =
-                horizontalAlignment == HorizontalAlignment.LEFT ? Gravity.LEFT :
-                        horizontalAlignment == HorizontalAlignment.CENTER
-                                ? Gravity.CENTER_HORIZONTAL : Gravity.RIGHT;
-
-        containerViewLayoutParams.gravity = viewGravity | Gravity.TOP;
-        buttonLayoutParams.gravity = viewGravity;
-
-        // Choose the right auxiliary view to make visible.
-        socialSentenceView.setVisibility(GONE);
-        likeBoxCountView.setVisibility(GONE);
-
-        View auxView;
-        if (likeViewStyle == Style.STANDARD &&
-                likeActionController != null &&
-                !Utility.isNullOrEmpty(likeActionController.getSocialSentence())) {
-            auxView = socialSentenceView;
-        } else if (likeViewStyle == Style.BOX_COUNT &&
-                likeActionController != null &&
-                !Utility.isNullOrEmpty(likeActionController.getLikeCountString())) {
-            updateBoxCountCaretPosition();
-            auxView = likeBoxCountView;
-        } else {
-            // No more work to be done.
-            return;
-        }
-        auxView.setVisibility(VISIBLE);
-
-        // Now position the auxiliary view properly
-        LinearLayout.LayoutParams auxViewLayoutParams =
-                (LinearLayout.LayoutParams)auxView.getLayoutParams();
-        auxViewLayoutParams.gravity = viewGravity;
-
-        containerView.setOrientation(
-                auxiliaryViewPosition == AuxiliaryViewPosition.INLINE ?
-                        LinearLayout.HORIZONTAL :
-                        LinearLayout.VERTICAL);
-
-        if (auxiliaryViewPosition == AuxiliaryViewPosition.TOP ||
-                (auxiliaryViewPosition == AuxiliaryViewPosition.INLINE &&
-                        horizontalAlignment == HorizontalAlignment.RIGHT)) {
-            // Button comes after the auxiliary view. Make sure it is at the end
-            containerView.removeView(likeButton);
-            containerView.addView(likeButton);
-        } else {
-            // In all other cases, the button comes first
-            containerView.removeView(auxView);
-            containerView.addView(auxView);
-        }
-
-        switch (auxiliaryViewPosition) {
-            case TOP:
-                auxView.setPadding(edgePadding, edgePadding, edgePadding, internalPadding);
-                break;
-            case BOTTOM:
-                auxView.setPadding(edgePadding, internalPadding, edgePadding, edgePadding);
-                break;
-            case INLINE:
-                if (horizontalAlignment == HorizontalAlignment.RIGHT) {
-                    auxView.setPadding(edgePadding, edgePadding, internalPadding, edgePadding);
-                } else {
-                    auxView.setPadding(internalPadding, edgePadding, edgePadding, edgePadding);
-                }
-                break;
-        }
-    }
-
-    private void updateBoxCountCaretPosition() {
-        switch (auxiliaryViewPosition) {
-            case TOP:
-                likeBoxCountView.setCaretPosition(
-                        LikeBoxCountView.LikeBoxCountViewCaretPosition.BOTTOM);
-                break;
-            case BOTTOM:
-                likeBoxCountView.setCaretPosition(
-                        LikeBoxCountView.LikeBoxCountViewCaretPosition.TOP);
-                break;
-            case INLINE:
-                likeBoxCountView.setCaretPosition(
-                        horizontalAlignment == HorizontalAlignment.RIGHT ?
-                                LikeBoxCountView.LikeBoxCountViewCaretPosition.RIGHT :
-                                LikeBoxCountView.LikeBoxCountViewCaretPosition.LEFT);
-                break;
-        }
-    }
-
-    /**
-     * Callback interface that will be called when a network or other error is encountered
-     * while logging in.
-     */
-    public interface OnErrorListener {
-        /**
-         * Called when the share action encounters an error.
-         * @param error The error that occurred
-         */
-        public void onError(FacebookException error);
-    }
-
-    private class LikeControllerBroadcastReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String intentAction = intent.getAction();
-            Bundle extras = intent.getExtras();
-            boolean shouldRespond = true;
-            if (extras != null) {
-                // See if an Id was set in the broadcast Intent. If it was, treat it as a filter.
-                String broadcastObjectId = extras.getString(
-                        LikeActionController.ACTION_OBJECT_ID_KEY);
-                shouldRespond = Utility.isNullOrEmpty(broadcastObjectId) ||
-                        Utility.areObjectsEqual(objectId, broadcastObjectId);
-            }
-
-            if (!shouldRespond) {
-                return;
-            }
-
-            if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_UPDATED.equals(intentAction)) {
-                updateLikeStateAndLayout();
-            } else if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR.equals(
-                    intentAction)) {
-                if (onErrorListener != null) {
-                    onErrorListener.onError(NativeProtocol.getExceptionFromErrorData(extras));
-                }
-            } else if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_RESET.equals(
-                    intentAction)) {
-                // This will recreate the controller and associated objects
-                setObjectIdAndTypeForced(objectId, objectType);
-                updateLikeStateAndLayout();
-            }
-        }
-    }
-
-    private class LikeActionControllerCreationCallback
-            implements LikeActionController.CreationCallback {
-        private boolean isCancelled;
-
-        public void cancel() {
-            isCancelled = true;
-        }
-
-        @Override
-        public void onComplete(
-                LikeActionController likeActionController,
-                FacebookException error) {
-            if (isCancelled) {
-                return;
-            }
-
-            if (likeActionController != null) {
-                if (!likeActionController.shouldEnableView()) {
-                    error = new FacebookException(
-                            "Cannot use LikeView. The device may not be supported.");
-                }
-
-                // Always associate with the controller, so it can get updates if the view gets
-                // enabled again.
-                associateWithLikeActionController(likeActionController);
-                updateLikeStateAndLayout();
-            }
-
-            if (error != null) {
-                if (onErrorListener != null) {
-                    onErrorListener.onError(error);
-                }
-            }
-
-            LikeView.this.creationCallback = null;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
deleted file mode 100644
index 01fb16943..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
+++ /dev/null
@@ -1,255 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.LegacyNativeDialogParameters;
-import com.facebook.share.internal.MessageDialogFeature;
-import com.facebook.share.internal.NativeDialogParameters;
-import com.facebook.share.internal.OpenGraphMessageDialogFeature;
-import com.facebook.share.internal.ShareContentValidation;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Provides functionality to send content via the Facebook Message Dialog
- */
-public final class MessageDialog
-        extends FacebookDialogBase<ShareContent, Sharer.Result>
-        implements Sharer {
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.Message.toRequestCode();
-
-    private boolean shouldFailOnDataError = false;
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Activity. No callback will be invoked.
-     *
-     * @param activity Activity to use to send the provided content
-     * @param shareContent Content to send
-     */
-    public static void show(
-            final Activity activity,
-            final ShareContent shareContent) {
-        new MessageDialog(activity).show(shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment to use to send the provided content
-     * @param shareContent Content to send
-     */
-    public static void show(
-            final Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment to use to send the provided content
-     * @param shareContent Content to send
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final ShareContent shareContent) {
-        new MessageDialog(fragmentWrapper).show(shareContent);
-    }
-
-    /**
-     * Indicates whether it is possible to show the dialog for
-     * {@link com.facebook.share.model.ShareContent} of the specified type.
-     *
-     * @param contentType Class of the intended {@link com.facebook.share.model.ShareContent} to
-     *                    send.
-     * @return True if the specified content type can be shown via the dialog
-     */
-    public static boolean canShow(Class<? extends ShareContent> contentType) {
-        DialogFeature feature = getFeature(contentType);
-
-        return feature != null && DialogPresenter.canPresentNativeDialogWithFeature(feature);
-    }
-
-    /**
-     * Constructs a MessageDialog.
-     * @param activity Activity to use to send the provided content.
-     */
-    public MessageDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a MessageDialog.
-     * @param fragment android.support.v4.app.Fragment to use to send the provided content.
-     */
-    public MessageDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-
-    }
-
-    /**
-     * Constructs a MessageDialog.
-     * @param fragment android.app.Fragment to use to send the provided content.
-     */
-    public MessageDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private MessageDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    // for SendButton use only
-    MessageDialog(Activity activity, int requestCode) {
-        super(activity, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    // for SendButton use only
-    MessageDialog(Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-
-    }
-
-    MessageDialog(android.app.Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-    }
-
-    private MessageDialog(FragmentWrapper fragmentWrapper, int requestCode) {
-        super(fragmentWrapper, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        ShareInternalUtility.registerSharerCallback(getRequestCode(), callbackManager, callback);
-    }
-
-    @Override
-    public boolean getShouldFailOnDataError() {
-        return this.shouldFailOnDataError;
-    }
-
-    @Override
-    public void setShouldFailOnDataError(boolean shouldFailOnDataError) {
-        this.shouldFailOnDataError = shouldFailOnDataError;
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-
-        return handlers;
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final ShareContent shareContent, boolean isBestEffort) {
-            return shareContent != null && MessageDialog.canShow(shareContent.getClass());
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            ShareContentValidation.validateForMessage(content);
-
-            final AppCall appCall = createBaseAppCall();
-            final boolean shouldFailOnDataError = getShouldFailOnDataError();
-            final Activity activity = getActivityContext();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return NativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            return LegacyNativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-                    },
-                    getFeature(content.getClass()));
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature(
-            Class<? extends ShareContent> contentType) {
-        if (ShareLinkContent.class.isAssignableFrom(contentType)) {
-            return MessageDialogFeature.MESSAGE_DIALOG;
-        } else if (SharePhotoContent.class.isAssignableFrom(contentType)) {
-            return MessageDialogFeature.PHOTOS;
-        } else if (ShareVideoContent.class.isAssignableFrom(contentType)) {
-            return MessageDialogFeature.VIDEO;
-        } else if (ShareOpenGraphContent.class.isAssignableFrom(contentType)) {
-            return OpenGraphMessageDialogFeature.OG_MESSAGE_DIALOG;
-        }
-        return null;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/SendButton.java b/facebook/src/main/java/com/facebook/share/widget/SendButton.java
deleted file mode 100644
index 068d9ebc6..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/SendButton.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A button to share content through Messenger.
- * Tapping the receiver will invoke the {@link com.facebook.share.widget.MessageDialog} with the attached shareContent.
- */
-public final class SendButton extends ShareButtonBase {
-    public SendButton(final Context context) {
-        super(context, null, 0, AnalyticsEvents.EVENT_SEND_BUTTON_CREATE,
-                                AnalyticsEvents.EVENT_SEND_BUTTON_DID_TAP);
-    }
-
-    public SendButton(final Context context, final AttributeSet attrs) {
-        super(context, attrs, 0, AnalyticsEvents.EVENT_SEND_BUTTON_CREATE,
-                                 AnalyticsEvents.EVENT_SEND_BUTTON_DID_TAP);
-    }
-
-    public SendButton(final Context context, final AttributeSet attrs, final int defStyleAttr) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                AnalyticsEvents.EVENT_SEND_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_SEND_BUTTON_DID_TAP);
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_send;
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Message.toRequestCode();
-    }
-
-    @Override
-    protected FacebookDialogBase<ShareContent, Sharer.Result> getDialog() {
-        final MessageDialog dialog;
-        if (SendButton.this.getFragment() != null) {
-            dialog = new MessageDialog(SendButton.this.getFragment(), getRequestCode());
-        } else if (SendButton.this.getNativeFragment() != null) {
-            dialog = new MessageDialog(SendButton.this.getNativeFragment(), getRequestCode());
-        } else {
-            dialog = new MessageDialog(getActivity(), getRequestCode());
-        }
-        return dialog;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java b/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
deleted file mode 100644
index 2c5835150..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A button to share content on Facebook.
- * Tapping the receiver will invoke the {@link com.facebook.share.widget.ShareDialog} with the attached shareContent.
- */
-public final class ShareButton extends ShareButtonBase {
-
-    public ShareButton(final Context context) {
-        super(context, null, 0, AnalyticsEvents.EVENT_SHARE_BUTTON_CREATE,
-                                AnalyticsEvents.EVENT_SHARE_BUTTON_DID_TAP);
-    }
-
-    public ShareButton(final Context context, final AttributeSet attrs) {
-        super(context, attrs, 0, AnalyticsEvents.EVENT_SHARE_BUTTON_CREATE,
-                                 AnalyticsEvents.EVENT_SHARE_BUTTON_DID_TAP);
-    }
-
-    public ShareButton(final Context context, final AttributeSet attrs, final int defStyleAttr) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                AnalyticsEvents.EVENT_SHARE_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_SHARE_BUTTON_DID_TAP);
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_share;
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
-    }
-
-    @Override
-    protected FacebookDialogBase<ShareContent, Sharer.Result> getDialog() {
-        final ShareDialog dialog;
-        if (ShareButton.this.getFragment() != null) {
-            dialog = new ShareDialog(ShareButton.this.getFragment(), getRequestCode());
-        } else if (ShareButton.this.getNativeFragment() != null) {
-            dialog = new ShareDialog(ShareButton.this.getNativeFragment(), getRequestCode());
-        } else {
-            dialog = new ShareDialog(getActivity(), getRequestCode());
-        }
-        return dialog;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareButtonBase.java b/facebook/src/main/java/com/facebook/share/widget/ShareButtonBase.java
deleted file mode 100644
index 910bf04d5..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/ShareButtonBase.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.CallbackManager;
-import com.facebook.FacebookButtonBase;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A base class for sharing buttons.
- */
-public abstract class ShareButtonBase extends FacebookButtonBase {
-    private ShareContent shareContent;
-    private int requestCode = 0;
-    private boolean enabledExplicitlySet = false;
-
-    protected ShareButtonBase(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final String analyticsButtonCreatedEventName,
-            final String analyticsButtonTappedEventName) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                0,
-                analyticsButtonCreatedEventName,
-                analyticsButtonTappedEventName);
-        requestCode = isInEditMode() ? 0 : getDefaultRequestCode();
-        internalSetEnabled(false);
-    }
-
-    /**
-     * Returns the share content from the button.
-     * @return The share content.
-     */
-    public ShareContent getShareContent() {
-        return this.shareContent;
-    }
-
-    /**
-     * Sets the share content on the button.
-     * @param shareContent The share content.
-     */
-    public void setShareContent(final ShareContent shareContent) {
-        this.shareContent = shareContent;
-        if (!enabledExplicitlySet) {
-            internalSetEnabled(canShare());
-        }
-    }
-
-    @Override
-    public void setEnabled(boolean enabled) {
-        super.setEnabled(enabled);
-        enabledExplicitlySet = true;
-    }
-
-    /**
-     * Returns the request code used for this Button.
-     *
-     * @return the request code.
-     */
-    @Override
-    public int getRequestCode() {
-        return requestCode;
-    }
-
-    /**
-     * Set the request code for the startActivityForResult call. The requestCode should be
-     * outside of the range of those reserved for the Facebook SDK
-     * {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}. This method should also be
-     * called prior to registering any callbacks.
-     *
-     * @param requestCode the request code to use.
-     */
-    protected void setRequestCode(final int requestCode) {
-        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
-            throw new IllegalArgumentException("Request code " + requestCode +
-                    " cannot be within the range reserved by the Facebook SDK.");
-        }
-        this.requestCode = requestCode;
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *                        handling results that are received via
-     *                        {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<Sharer.Result> callback) {
-        ShareInternalUtility.registerSharerCallback(getRequestCode(), callbackManager, callback);
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *                        handling results that are received via
-     *                        {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     * @param requestCode  The request code to use, this should be outside of the range of those
-     *                     reserved for the Facebook SDK
-     *                     {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<Sharer.Result> callback,
-            final int requestCode) {
-        setRequestCode(requestCode);
-        registerCallback(callbackManager, callback);
-    }
-
-    @Override
-    protected void configureButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        setInternalOnClickListener(this.getShareOnClickListener());
-    }
-
-    protected boolean canShare() {
-        return getDialog().canShow(getShareContent());
-    }
-
-    protected OnClickListener getShareOnClickListener()  {
-        return new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                callExternalOnClickListener(v);
-                getDialog().show(getShareContent());
-            }
-        };
-    }
-
-    abstract protected FacebookDialogBase<ShareContent, Sharer.Result> getDialog();
-
-    private void internalSetEnabled(boolean enabled) {
-        setEnabled(enabled);
-        enabledExplicitlySet = false;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
deleted file mode 100644
index a5ef533ab..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
+++ /dev/null
@@ -1,484 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.Context;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.internal.Utility;
-import com.facebook.share.internal.ShareFeedContent;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.LegacyNativeDialogParameters;
-import com.facebook.share.internal.NativeDialogParameters;
-import com.facebook.share.internal.OpenGraphActionDialogFeature;
-import com.facebook.share.internal.ShareContentValidation;
-import com.facebook.share.internal.ShareDialogFeature;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Provides functionality to share content via the Facebook Share Dialog
- */
-public final class ShareDialog
-        extends FacebookDialogBase<ShareContent, Sharer.Result>
-        implements Sharer {
-
-    /**
-     * The mode for the share dialog.
-     */
-    public enum Mode {
-        /**
-         * The mode is determined automatically.
-         */
-        AUTOMATIC,
-        /**
-         * The native dialog is used.
-         */
-        NATIVE,
-        /**
-         * The web dialog is used.
-         */
-        WEB,
-        /**
-         * The feed dialog is used.
-         */
-        FEED
-    }
-
-    private static final String FEED_DIALOG = "feed";
-    private static final String WEB_SHARE_DIALOG = "share";
-    private static final String WEB_OG_SHARE_DIALOG = "share_open_graph";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
-
-    private  boolean shouldFailOnDataError = false;
-    // Keep track of Mode overrides for logging purposes.
-    private boolean isAutomaticMode = true;
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Activity. No callback will be invoked.
-     *
-     * @param activity Activity to use to share the provided content
-     * @param shareContent Content to share
-     */
-    public static void show(
-            final Activity activity,
-            final ShareContent shareContent) {
-        new ShareDialog(activity).show(shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment to use to share the provided content
-     * @param shareContent Content to share
-     */
-    public static void show(
-            final Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment to use to share the provided content
-     * @param shareContent Content to share
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final ShareContent shareContent) {
-        new ShareDialog(fragmentWrapper).show(shareContent);
-    }
-
-    /**
-     * Indicates whether it is possible to show the dialog for
-     * {@link com.facebook.share.model.ShareContent} of the specified type.
-     *
-     * @param contentType Class of the intended {@link com.facebook.share.model.ShareContent} to
-     *                    share.
-     * @return True if the specified content type can be shown via the dialog
-     */
-    public static boolean canShow(Class<? extends ShareContent> contentType) {
-        return canShowWebTypeCheck(contentType) || canShowNative(contentType);
-    }
-
-    private static boolean canShowNative(Class<? extends ShareContent> contentType) {
-        DialogFeature feature = getFeature(contentType);
-
-        return feature != null && DialogPresenter.canPresentNativeDialogWithFeature(feature);
-    }
-
-    private static boolean canShowWebTypeCheck(Class<? extends ShareContent> contentType) {
-        // If we don't have an instance of a ShareContent, then all we can do is check whether
-        // this is a ShareLinkContent, which can be shared if configured properly.
-        // The instance method version of this check is more accurate and should be used on
-        // ShareDialog instances.
-
-        return ShareLinkContent.class.isAssignableFrom(contentType)
-                || ShareOpenGraphContent.class.isAssignableFrom(contentType);
-    }
-
-    /**
-     * Constructs a new ShareDialog.
-     * @param activity Activity to use to share the provided content.
-     */
-    public ShareDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a new ShareDialog.
-     * @param fragment android.support.v4.app.Fragment to use to share the provided content.
-     */
-    public ShareDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-
-    }
-
-    /**
-     * Constructs a new ShareDialog.
-     * @param fragment android.app.Fragment to use to share the provided content.
-     */
-    public ShareDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private ShareDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    // for ShareDialog use only
-    ShareDialog(Activity activity, int requestCode) {
-        super(activity, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    // for ShareDialog use only
-    ShareDialog(Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-
-    }
-
-    ShareDialog(android.app.Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-    }
-
-    private ShareDialog(FragmentWrapper fragmentWrapper, int requestCode) {
-        super(fragmentWrapper, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        ShareInternalUtility.registerSharerCallback(
-                getRequestCode(), callbackManager, callback);
-    }
-
-    @Override
-    public boolean getShouldFailOnDataError() {
-        return this.shouldFailOnDataError;
-    }
-
-    @Override
-    public void setShouldFailOnDataError(boolean shouldFailOnDataError) {
-        this.shouldFailOnDataError = shouldFailOnDataError;
-    }
-
-    /**
-     * Call this to check if the Share Dialog can be shown in a specific mode.
-     *
-     * @param mode Mode of the Share Dialog
-     * @return True if the dialog can be shown in the passed in Mode
-     */
-    public boolean canShow(ShareContent content, Mode mode) {
-        return canShowImpl(content, (mode == Mode.AUTOMATIC) ? BASE_AUTOMATIC_MODE : mode);
-    }
-
-    /**
-     * Call this to show the Share Dialog in a specific mode
-     * @param mode Mode of the Share Dialog
-     */
-    public void show(ShareContent content, Mode mode) {
-        isAutomaticMode = (mode == Mode.AUTOMATIC);
-
-        showImpl(content, isAutomaticMode ? BASE_AUTOMATIC_MODE : mode);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-        handlers.add(new FeedHandler()); // Feed takes precedence for link-shares for Mode.AUTOMATIC
-        handlers.add(new WebShareHandler());
-
-        return handlers;
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public Object getMode() {
-            return Mode.NATIVE;
-        }
-
-        @Override
-        public boolean canShow(final ShareContent content, boolean isBestEffort) {
-            if (content == null) {
-                return false;
-            }
-
-            boolean canShowResult = true;
-            if (!isBestEffort) {
-                // The following features are considered best-effort and will not prevent the
-                // native share dialog from being presented, even if the installed version does
-                // not support the feature.
-                // However, to let apps pivot to a different approach or dialog (for example, Web),
-                // we need to be able to signal back when native support is lacking.
-                if (content.getShareHashtag() != null) {
-                    canShowResult = DialogPresenter.canPresentNativeDialogWithFeature(
-                            ShareDialogFeature.HASHTAG);
-                }
-                if ((content instanceof ShareLinkContent) &&
-                        (!Utility.isNullOrEmpty(((ShareLinkContent)content).getQuote()))) {
-                    canShowResult &= DialogPresenter.canPresentNativeDialogWithFeature(
-                            ShareDialogFeature.LINK_SHARE_QUOTES);
-                }
-            }
-            return canShowResult && ShareDialog.canShowNative(content.getClass());
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            logDialogShare(getActivityContext(), content, Mode.NATIVE);
-
-            ShareContentValidation.validateForNativeShare(content);
-
-            final AppCall appCall = createBaseAppCall();
-            final boolean shouldFailOnDataError = getShouldFailOnDataError();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return NativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            return LegacyNativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-                    },
-                    getFeature(content.getClass()));
-
-            return appCall;
-        }
-    }
-
-    private class WebShareHandler extends ModeHandler {
-        @Override
-        public Object getMode() {
-            return Mode.WEB;
-        }
-
-        @Override
-        public boolean canShow(final ShareContent content, boolean isBestEffort) {
-            return (content != null) && ShareDialog.canShowWebTypeCheck(content.getClass());
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            logDialogShare(getActivityContext(), content, Mode.WEB);
-
-            final AppCall appCall = createBaseAppCall();
-
-            ShareContentValidation.validateForWebShare(content);
-
-            Bundle params;
-            if (content instanceof ShareLinkContent) {
-                params = WebDialogParameters.create((ShareLinkContent)content);
-            } else {
-                params = WebDialogParameters.create((ShareOpenGraphContent)content);
-            }
-
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    getActionName(content),
-                    params);
-
-            return appCall;
-        }
-
-        private String getActionName(ShareContent shareContent) {
-            if (shareContent instanceof ShareLinkContent) {
-                return WEB_SHARE_DIALOG;
-            } else if (shareContent instanceof ShareOpenGraphContent) {
-                return WEB_OG_SHARE_DIALOG;
-            }
-
-            return null;
-        }
-    }
-
-    private class FeedHandler extends ModeHandler {
-        @Override
-        public Object getMode() {
-            return Mode.FEED;
-        }
-
-        @Override
-        public boolean canShow(final ShareContent content, boolean isBestEffort) {
-            return (content instanceof ShareLinkContent)
-                    || (content instanceof ShareFeedContent);
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            logDialogShare(getActivityContext(), content, Mode.FEED);
-            AppCall appCall = createBaseAppCall();
-            Bundle params;
-            if (content instanceof ShareLinkContent) {
-                ShareLinkContent linkContent = (ShareLinkContent)content;
-                ShareContentValidation.validateForWebShare(linkContent);
-                params = WebDialogParameters.createForFeed(linkContent);
-            } else {
-                ShareFeedContent feedContent = (ShareFeedContent)content;
-                params = WebDialogParameters.createForFeed(feedContent);
-            }
-
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    FEED_DIALOG,
-                    params);
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature(
-            Class<? extends ShareContent> contentType) {
-        if (ShareLinkContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.SHARE_DIALOG;
-        } else if (SharePhotoContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.PHOTOS;
-        } else if (ShareVideoContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.VIDEO;
-        } else if (ShareOpenGraphContent.class.isAssignableFrom(contentType)) {
-            return OpenGraphActionDialogFeature.OG_ACTION_DIALOG;
-        } else if (ShareMediaContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.MULTIMEDIA;
-        }
-        return null;
-    }
-
-    private void logDialogShare(Context context, ShareContent content, Mode mode) {
-        String displayType;
-        if (isAutomaticMode) {
-            mode = Mode.AUTOMATIC;
-        }
-
-        switch (mode) {
-            case AUTOMATIC:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_AUTOMATIC;
-                break;
-            case WEB:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_WEB;
-                break;
-            case NATIVE:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_NATIVE;
-                break;
-            default:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_UNKNOWN;
-                break;
-        }
-
-        String contentType;
-        DialogFeature dialogFeature = getFeature(content.getClass());
-        if (dialogFeature == ShareDialogFeature.SHARE_DIALOG) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_STATUS;
-        } else if (dialogFeature == ShareDialogFeature.PHOTOS) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_PHOTO;
-        } else if (dialogFeature == ShareDialogFeature.VIDEO) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_VIDEO;
-        } else if (dialogFeature == OpenGraphActionDialogFeature.OG_ACTION_DIALOG) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_OPENGRAPH;
-        } else {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_UNKNOWN;
-        }
-
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        Bundle parameters = new Bundle();
-        parameters.putString(
-                AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW,
-                displayType
-        );
-        parameters.putString(
-                AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_TYPE,
-                contentType
-        );
-        logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_DIALOG_SHOW, null, parameters);
-    }
-}
diff --git a/facebook/src/main/res/color/com_facebook_button_text_color.xml b/facebook/src/main/res/color/com_facebook_button_text_color.xml
deleted file mode 100644
index 028198809..000000000
--- a/facebook/src/main/res/color/com_facebook_button_text_color.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true" android:state_enabled="true" android:color="@color/com_facebook_blue" />
-    <item android:color="#fffffe" />
-</selector>
diff --git a/facebook/src/main/res/color/com_facebook_send_button_text_color.xml b/facebook/src/main/res/color/com_facebook_send_button_text_color.xml
deleted file mode 100644
index d02ee0208..000000000
--- a/facebook/src/main/res/color/com_facebook_send_button_text_color.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true" android:state_enabled="true" android:color="@color/com_facebook_messenger_blue" />
-    <item android:color="#fffffe" />
-</selector>
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_button_icon_blue.png b/facebook/src/main/res/drawable-hdpi/com_facebook_button_icon_blue.png
deleted file mode 100644
index dd8e61a62..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_button_icon_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_button_icon_white.png b/facebook/src/main/res/drawable-hdpi/com_facebook_button_icon_white.png
deleted file mode 100644
index c0d4688e5..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_button_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_button_like_icon_selected.png b/facebook/src/main/res/drawable-hdpi/com_facebook_button_like_icon_selected.png
deleted file mode 100644
index 5e8ac3c99..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_button_like_icon_selected.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_button_send_icon_blue.png b/facebook/src/main/res/drawable-hdpi/com_facebook_button_send_icon_blue.png
deleted file mode 100644
index 361e63874..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_button_send_icon_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_button_send_icon_white.png b/facebook/src/main/res/drawable-hdpi/com_facebook_button_send_icon_white.png
deleted file mode 100644
index dbc69dccc..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_button_send_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_close.png b/facebook/src/main/res/drawable-hdpi/com_facebook_close.png
deleted file mode 100644
index d81f040d7..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_close.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 3042a7bb2..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png
deleted file mode 100644
index 2c5b1bbad..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png
deleted file mode 100644
index 972010ec2..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png
deleted file mode 100644
index 5d595c5a3..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_xout.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_xout.png
deleted file mode 100644
index e2903b6de..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_black_xout.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png
deleted file mode 100644
index a42b3cd92..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png
deleted file mode 100644
index 2d292f2ca..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png
deleted file mode 100644
index b2dcc4089..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png b/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png
deleted file mode 100644
index 1285a1665..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/messenger_bubble_large_blue.png b/facebook/src/main/res/drawable-hdpi/messenger_bubble_large_blue.png
deleted file mode 100644
index a58670371..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/messenger_bubble_large_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/messenger_bubble_large_white.png b/facebook/src/main/res/drawable-hdpi/messenger_bubble_large_white.png
deleted file mode 100644
index 80be8f6de..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/messenger_bubble_large_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/messenger_bubble_small_blue.png b/facebook/src/main/res/drawable-hdpi/messenger_bubble_small_blue.png
deleted file mode 100644
index d7a6fcd42..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/messenger_bubble_small_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/messenger_bubble_small_white.png b/facebook/src/main/res/drawable-hdpi/messenger_bubble_small_white.png
deleted file mode 100644
index b368abbaa..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/messenger_bubble_small_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-hdpi/messenger_button_send_round_shadow.png b/facebook/src/main/res/drawable-hdpi/messenger_button_send_round_shadow.png
deleted file mode 100644
index f369b4128..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/messenger_button_send_round_shadow.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_button_icon_blue.png b/facebook/src/main/res/drawable-mdpi/com_facebook_button_icon_blue.png
deleted file mode 100644
index fa21c2e81..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_button_icon_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_button_icon_white.png b/facebook/src/main/res/drawable-mdpi/com_facebook_button_icon_white.png
deleted file mode 100644
index 51d72dd32..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_button_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_button_like_icon_selected.png b/facebook/src/main/res/drawable-mdpi/com_facebook_button_like_icon_selected.png
deleted file mode 100644
index 9834a4c14..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_button_like_icon_selected.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_button_send_icon_blue.png b/facebook/src/main/res/drawable-mdpi/com_facebook_button_send_icon_blue.png
deleted file mode 100644
index 5d58986ab..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_button_send_icon_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_button_send_icon_white.png b/facebook/src/main/res/drawable-mdpi/com_facebook_button_send_icon_white.png
deleted file mode 100644
index 5964bc945..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_button_send_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_close.png b/facebook/src/main/res/drawable-mdpi/com_facebook_close.png
deleted file mode 100755
index 4ffc94cdc..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_close.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 72fe4b60b..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_profile_picture_blank_portrait.png b/facebook/src/main/res/drawable-mdpi/com_facebook_profile_picture_blank_portrait.png
deleted file mode 100644
index 27a6f7a74..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_profile_picture_blank_portrait.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_profile_picture_blank_square.png b/facebook/src/main/res/drawable-mdpi/com_facebook_profile_picture_blank_square.png
deleted file mode 100644
index 77554e01f..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_profile_picture_blank_square.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png
deleted file mode 100644
index d10e30391..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png
deleted file mode 100644
index 9378512ce..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png
deleted file mode 100644
index d94fa9688..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_xout.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_xout.png
deleted file mode 100644
index 51454e5a3..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_black_xout.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png
deleted file mode 100644
index bf60245bb..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png
deleted file mode 100644
index e0ac8fea8..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png
deleted file mode 100644
index e09406081..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png b/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png
deleted file mode 100644
index 85699f8ec..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/messenger_bubble_large_blue.png b/facebook/src/main/res/drawable-mdpi/messenger_bubble_large_blue.png
deleted file mode 100644
index 89ec1d6a1..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/messenger_bubble_large_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/messenger_bubble_large_white.png b/facebook/src/main/res/drawable-mdpi/messenger_bubble_large_white.png
deleted file mode 100644
index b62f660e1..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/messenger_bubble_large_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/messenger_bubble_small_blue.png b/facebook/src/main/res/drawable-mdpi/messenger_bubble_small_blue.png
deleted file mode 100644
index cf4417797..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/messenger_bubble_small_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/messenger_bubble_small_white.png b/facebook/src/main/res/drawable-mdpi/messenger_bubble_small_white.png
deleted file mode 100644
index 2f3a364ce..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/messenger_bubble_small_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/messenger_button_send_round_shadow.png b/facebook/src/main/res/drawable-mdpi/messenger_button_send_round_shadow.png
deleted file mode 100644
index d5ebd1854..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/messenger_button_send_round_shadow.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_icon_blue.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_button_icon_blue.png
deleted file mode 100644
index f4141461b..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_icon_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_icon_white.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_button_icon_white.png
deleted file mode 100644
index c4d7016b4..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_like_icon_selected.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_button_like_icon_selected.png
deleted file mode 100644
index ccb98d5e3..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_like_icon_selected.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_send_icon_blue.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_button_send_icon_blue.png
deleted file mode 100644
index 1fc78ad78..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_send_icon_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_send_icon_white.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_button_send_icon_white.png
deleted file mode 100644
index a751b5fe8..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_button_send_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_close.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_close.png
deleted file mode 100755
index b603ef892..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_close.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index ce5c8909f..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png
deleted file mode 100644
index 43b14c999..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png
deleted file mode 100644
index 87f9795bc..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png
deleted file mode 100644
index 4d3f58f6e..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png
deleted file mode 100644
index 6cd7bc8d9..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png
deleted file mode 100644
index 7614b95c3..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png
deleted file mode 100644
index d29b95242..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png
deleted file mode 100644
index d2dc678ee..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png
deleted file mode 100644
index e9bc616f1..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_large_blue.png b/facebook/src/main/res/drawable-xhdpi/messenger_bubble_large_blue.png
deleted file mode 100644
index 7bf06cc29..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_large_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_large_white.png b/facebook/src/main/res/drawable-xhdpi/messenger_bubble_large_white.png
deleted file mode 100644
index 0743811ac..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_large_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_small_blue.png b/facebook/src/main/res/drawable-xhdpi/messenger_bubble_small_blue.png
deleted file mode 100644
index 8de9b46a8..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_small_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_small_white.png b/facebook/src/main/res/drawable-xhdpi/messenger_bubble_small_white.png
deleted file mode 100644
index 9ed2cb28b..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/messenger_bubble_small_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/messenger_button_send_round_shadow.png b/facebook/src/main/res/drawable-xhdpi/messenger_button_send_round_shadow.png
deleted file mode 100644
index 3f9382064..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/messenger_button_send_round_shadow.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_icon_blue.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_icon_blue.png
deleted file mode 100644
index 01480c9f5..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_icon_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_icon_white.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_icon_white.png
deleted file mode 100644
index 88d2169da..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_like_icon_selected.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_like_icon_selected.png
deleted file mode 100644
index 41137fc92..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_like_icon_selected.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_send_icon_white.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_send_icon_white.png
deleted file mode 100644
index a30068b98..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_button_send_icon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 82fd70fae..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_large_blue.png b/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_large_blue.png
deleted file mode 100644
index 7f18441ff..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_large_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_large_white.png b/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_large_white.png
deleted file mode 100644
index 39e8f4d7b..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_large_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_small_blue.png b/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_small_blue.png
deleted file mode 100644
index b5ad769bd..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_small_blue.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_small_white.png b/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_small_white.png
deleted file mode 100644
index 3134ed126..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/messenger_bubble_small_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/messenger_button_send_round_shadow.png b/facebook/src/main/res/drawable-xxhdpi/messenger_button_send_round_shadow.png
deleted file mode 100644
index 5b88c0947..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/messenger_button_send_round_shadow.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml b/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
deleted file mode 100644
index 77fd0a910..000000000
--- a/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <solid android:color="@android:color/white" />
-    <corners
-        android:bottomLeftRadius="@dimen/com_facebook_auth_dialog_corner_radius"
-        android:bottomRightRadius="@dimen/com_facebook_auth_dialog_corner_radius"
-        android:topLeftRadius="@dimen/com_facebook_auth_dialog_corner_radius_oversized"
-        android:topRightRadius="@dimen/com_facebook_auth_dialog_corner_radius_oversized" />
-</shape>
diff --git a/facebook/src/main/res/drawable/com_facebook_auth_dialog_cancel_background.xml b/facebook/src/main/res/drawable/com_facebook_auth_dialog_cancel_background.xml
deleted file mode 100644
index 17f07a862..000000000
--- a/facebook/src/main/res/drawable/com_facebook_auth_dialog_cancel_background.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="2dp" />
-            <solid android:color="#999999" />
-        </shape>
-    </item>
-    <item>
-        <shape android:shape="rectangle">
-            <corners android:radius="2dp" />
-            <solid android:color="#33999999" />
-        </shape>
-    </item>
-</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml b/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
deleted file mode 100644
index 66cd5cff4..000000000
--- a/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <solid android:color="#fffafafa" />
-    <corners
-        android:bottomLeftRadius="0dp"
-        android:bottomRightRadius="0dp"
-        android:topLeftRadius="@dimen/com_facebook_auth_dialog_corner_radius"
-        android:topRightRadius="@dimen/com_facebook_auth_dialog_corner_radius" />
-</shape>
diff --git a/facebook/src/main/res/drawable/com_facebook_button_background.xml b/facebook/src/main/res/drawable/com_facebook_button_background.xml
deleted file mode 100644
index c3c794102..000000000
--- a/facebook/src/main/res/drawable/com_facebook_button_background.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_enabled="false"
-        android:state_focused="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_focused_disabled" />
-        </shape>
-    </item>
-    <item android:state_enabled="false"
-        android:state_focused="false">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_disabled" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_focused" />
-            <stroke
-                android:width="1dp"
-                android:color="@color/com_facebook_button_border_color_focused" >
-            </stroke>
-        </shape>
-    </item>
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_pressed" />
-        </shape>
-    </item>
-    <item>
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color" />
-        </shape>
-    </item>
-</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_button_icon.xml b/facebook/src/main/res/drawable/com_facebook_button_icon.xml
deleted file mode 100644
index 8012a8cf0..000000000
--- a/facebook/src/main/res/drawable/com_facebook_button_icon.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true" android:state_enabled="true" android:drawable="@drawable/com_facebook_button_icon_blue"/>
-    <item android:drawable="@drawable/com_facebook_button_icon_white"/>
-</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_button_like_background.xml b/facebook/src/main/res/drawable/com_facebook_button_like_background.xml
deleted file mode 100644
index ecbb4c1b1..000000000
--- a/facebook/src/main/res/drawable/com_facebook_button_like_background.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_pressed" />
-        </shape>
-    </item>
-    <item android:state_enabled="false"
-        android:state_focused="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_focused_disabled" />
-        </shape>
-    </item>
-    <item android:state_enabled="false"
-        android:state_focused="false">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_disabled" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_focused" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_selected" />
-        </shape>
-    </item>
-    <item>
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color" />
-        </shape>
-    </item>
-</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_button_login_silver_background.xml b/facebook/src/main/res/drawable/com_facebook_button_login_silver_background.xml
deleted file mode 100644
index 87ae0992c..000000000
--- a/facebook/src/main/res/drawable/com_facebook_button_login_silver_background.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_enabled="false">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_disabled" />
-        </shape>
-    </item>
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_login_silver_background_color_pressed" />
-        </shape>
-    </item>
-    <item>
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_login_silver_background_color" />
-        </shape>
-    </item>
-</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_button_send_background.xml b/facebook/src/main/res/drawable/com_facebook_button_send_background.xml
deleted file mode 100644
index 9b685a7d3..000000000
--- a/facebook/src/main/res/drawable/com_facebook_button_send_background.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_enabled="false"
-        android:state_focused="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_focused_disabled" />
-        </shape>
-    </item>
-    <item android:state_enabled="false"
-        android:state_focused="false">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_disabled" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="@dimen/com_facebook_button_corner_radius" />
-            <solid android:color="@color/com_facebook_button_background_color_focused" />
-            <stroke
-                android:width="1dp"
-                android:color="@color/com_facebook_button_border_color_focused" >
-            </stroke>
-        </shape>
-    </item>
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <corners android:radius="2dp" />
-            <solid android:color="@color/com_facebook_button_send_background_color_pressed" />
-        </shape>
-    </item>
-    <item>
-        <shape android:shape="rectangle">
-            <corners android:radius="2dp" />
-            <solid android:color="@color/com_facebook_button_send_background_color" />
-        </shape>
-    </item>
-</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_send_button_icon.xml b/facebook/src/main/res/drawable/com_facebook_send_button_icon.xml
deleted file mode 100644
index 576272d8e..000000000
--- a/facebook/src/main/res/drawable/com_facebook_send_button_icon.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true" android:state_enabled="true" android:drawable="@drawable/com_facebook_button_send_icon_blue"/>
-    <item android:drawable="@drawable/com_facebook_button_send_icon_white"/>
-</selector>
diff --git a/facebook/src/main/res/drawable/messenger_button_blue_bg_round.xml b/facebook/src/main/res/drawable/messenger_button_blue_bg_round.xml
deleted file mode 100644
index 971aba7e7..000000000
--- a/facebook/src/main/res/drawable/messenger_button_blue_bg_round.xml
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
-  <item android:drawable="@drawable/messenger_button_send_round_shadow" />
-  <item
-    android:top="1dp"
-    android:bottom="2dp"
-    android:left="1dp"
-    android:right="1dp"
-    >
-    <selector>
-      <item android:state_pressed="true">
-        <shape android:shape="oval">
-          <solid android:color="#1f8eff" />
-        </shape>
-      </item>
-
-      <item>
-        <shape android:shape="oval">
-          <solid android:color="#0084ff" />
-        </shape>
-      </item>
-    </selector>
-  </item>
-
-  <item
-    android:top="1dp"
-    android:bottom="2dp"
-    android:left="1dp"
-    android:right="1dp"
-    >
-    <bitmap
-      android:src="@drawable/messenger_bubble_large_white"
-      android:gravity="center"
-      />
-  </item>
-</layer-list>
diff --git a/facebook/src/main/res/drawable/messenger_button_blue_bg_selector.xml b/facebook/src/main/res/drawable/messenger_button_blue_bg_selector.xml
deleted file mode 100644
index 248041038..000000000
--- a/facebook/src/main/res/drawable/messenger_button_blue_bg_selector.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-  <item android:state_pressed="true">
-    <shape android:shape="rectangle">
-      <corners android:radius="2dp" />
-      <solid android:color="#1f8eff" />
-    </shape>
-  </item>
-
-  <item>
-    <shape android:shape="rectangle">
-      <corners android:radius="2dp" />
-      <solid android:color="#0084ff" />
-    </shape>
-  </item>
-</selector>
diff --git a/facebook/src/main/res/drawable/messenger_button_white_bg_round.xml b/facebook/src/main/res/drawable/messenger_button_white_bg_round.xml
deleted file mode 100644
index c6bccabc4..000000000
--- a/facebook/src/main/res/drawable/messenger_button_white_bg_round.xml
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
-  <item android:drawable="@drawable/messenger_button_send_round_shadow" />
-  <item
-    android:top="1dp"
-    android:bottom="2dp"
-    android:left="1dp"
-    android:right="1dp"
-    >
-    <selector>
-      <item android:state_pressed="true">
-        <shape android:shape="oval">
-          <solid android:color="#ebebeb" />
-        </shape>
-      </item>
-
-      <item>
-        <shape android:shape="oval">
-          <solid android:color="#ffffff" />
-        </shape>
-      </item>
-    </selector>
-  </item>
-
-  <item
-    android:top="1dp"
-    android:bottom="2dp"
-    android:left="1dp"
-    android:right="1dp"
-    >
-    <bitmap
-      android:src="@drawable/messenger_bubble_large_blue"
-      android:gravity="center"
-      />
-  </item>
-</layer-list>
diff --git a/facebook/src/main/res/drawable/messenger_button_white_bg_selector.xml b/facebook/src/main/res/drawable/messenger_button_white_bg_selector.xml
deleted file mode 100644
index 9035e21e7..000000000
--- a/facebook/src/main/res/drawable/messenger_button_white_bg_selector.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-  <item android:state_pressed="true">
-    <shape android:shape="rectangle">
-      <corners android:radius="2dp" />
-      <solid android:color="#ebebeb" />
-    </shape>
-  </item>
-
-  <item>
-    <shape android:shape="rectangle">
-      <corners android:radius="2dp" />
-      <solid android:color="#ffffff" />
-    </shape>
-  </item>
-</selector>
diff --git a/facebook/src/main/res/layout/com_facebook_activity_layout.xml b/facebook/src/main/res/layout/com_facebook_activity_layout.xml
deleted file mode 100644
index db7f79cd3..000000000
--- a/facebook/src/main/res/layout/com_facebook_activity_layout.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-             android:id="@+id/com_facebook_fragment_container"
-             android:layout_width="match_parent"
-             android:layout_height="match_parent"
-    />
diff --git a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
deleted file mode 100644
index e0dcff318..000000000
--- a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
+++ /dev/null
@@ -1,119 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:card_view="http://schemas.android.com/apk/res-auto"
-    android:layout_width="wrap_content"
-    android:layout_height="wrap_content"
-    card_view:cardBackgroundColor="@android:color/transparent"
-    card_view:cardElevation="10dp">
-
-    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:background="@drawable/com_facebook_auth_dialog_background"
-        android:orientation="vertical">
-
-        <RelativeLayout
-            android:layout_width="300dp"
-            android:layout_height="100dp"
-            android:background="@drawable/com_facebook_auth_dialog_header_background"
-            android:orientation="horizontal">
-
-            <FrameLayout
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content">
-
-                <ImageView
-                    android:layout_width="18dp"
-                    android:layout_height="18dp"
-                    android:layout_marginBottom="11dp"
-                    android:layout_marginLeft="12dp"
-                    android:layout_marginTop="11dp"
-                    android:adjustViewBounds="false"
-                    android:scaleType="fitXY"
-                    android:src="@drawable/com_facebook_button_icon_blue" />
-            </FrameLayout>
-
-            <TextView
-                android:id="@+id/confirmation_code"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_centerInParent="true"
-                android:fontFamily="roboto_condensed"
-                android:gravity="center"
-                android:textColor="@color/com_facebook_blue"
-                android:textSize="30sp"
-                android:typeface="sans"
-                android:visibility="invisible" />
-
-            <ProgressBar
-                android:id="@+id/progress_bar"
-                style="@android:style/Widget.Holo.Light.ProgressBar"
-                android:layout_width="wrap_content"
-                android:layout_height="0dp"
-                android:layout_alignBottom="@+id/confirmation_code"
-                android:layout_alignTop="@+id/confirmation_code"
-                android:layout_centerHorizontal="true"
-                android:layout_centerInParent="true"
-                android:layout_centerVertical="true" />
-
-        </RelativeLayout>
-
-        <TextView
-            android:id="@+id/com_facebook_device_auth_instructions"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginEnd="16dp"
-            android:layout_marginStart="16dp"
-            android:layout_marginTop="20dp"
-            android:fontFamily="roboto_condensed"
-            android:gravity="center_horizontal"
-            android:singleLine="false"
-            android:textColor="@color/com_facebook_device_auth_text"
-            android:textSize="12sp"
-            android:typeface="sans" />
-
-        <FrameLayout
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_marginBottom="17dp"
-            android:layout_marginTop="14dp">
-
-            <Button
-                android:id="@+id/cancel_button"
-                android:layout_width="84dp"
-                android:layout_height="27dp"
-                android:layout_gravity="center_horizontal"
-                android:background="@drawable/com_facebook_auth_dialog_cancel_background"
-                android:clickable="true"
-                android:focusable="true"
-                android:fontFamily="roboto_condensed"
-                android:text="@android:string/cancel"
-                android:textAllCaps="true"
-                android:textColor="@color/com_facebook_device_auth_text"
-                android:textSize="10sp"
-                android:textStyle="bold"
-                android:typeface="sans" />
-        </FrameLayout>
-
-    </LinearLayout>
-</android.support.v7.widget.CardView>
diff --git a/facebook/src/main/res/layout/com_facebook_login_fragment.xml b/facebook/src/main/res/layout/com_facebook_login_fragment.xml
deleted file mode 100644
index ef301ae85..000000000
--- a/facebook/src/main/res/layout/com_facebook_login_fragment.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent">
-
-    <ProgressBar android:indeterminate="true"
-                 android:layout_width="wrap_content"
-                 android:layout_height="50dip"
-                 android:id="@+id/com_facebook_login_activity_progress_bar"
-                 android:layout_centerInParent="true"
-                 android:visibility="gone"
-                 android:indeterminateOnly="true"
-        />
-</RelativeLayout>
diff --git a/facebook/src/main/res/layout/com_facebook_tooltip_bubble.xml b/facebook/src/main/res/layout/com_facebook_tooltip_bubble.xml
deleted file mode 100644
index d1aff5920..000000000
--- a/facebook/src/main/res/layout/com_facebook_tooltip_bubble.xml
+++ /dev/null
@@ -1,74 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="wrap_content"
-    android:layout_height="wrap_content"
-    android:paddingLeft="20dp"
-    android:paddingRight="20dp">
-  <RelativeLayout
-  	android:id="@+id/com_facebook_body_frame"
-    android:layout_width="wrap_content"
-    android:layout_height="wrap_content"
-    android:layout_below="@+id/com_facebook_tooltip_bubble_view_top_pointer"
-    android:layout_centerHorizontal="true"
-    android:background="@drawable/com_facebook_tooltip_blue_background">
-      <ImageView 
-        android:id="@+id/com_facebook_button_xout"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentRight="true"
-        android:padding="10dp"
-        android:src="@drawable/com_facebook_tooltip_blue_xout"
-        />
-      <TextView
-          android:id="@+id/com_facebook_tooltip_bubble_view_text_body"
-          android:layout_width="wrap_content"
-          android:layout_height="wrap_content"
-          android:layout_alignParentTop="true"
-          android:layout_toLeftOf="@id/com_facebook_button_xout"
-          android:layout_alignParentLeft="true"
-          android:padding="10dp"
-          style="@style/tooltip_bubble_text"
-          />
-  </RelativeLayout>
-  <ImageView
-      android:id="@+id/com_facebook_tooltip_bubble_view_top_pointer"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:layout_alignParentTop="true"
-      android:layout_centerHorizontal="true"
-      android:layout_marginBottom="-10dp"
-      android:src="@drawable/com_facebook_tooltip_blue_topnub"
-      />
-  <ImageView
-      android:id="@+id/com_facebook_tooltip_bubble_view_bottom_pointer"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:layout_gravity="center_horizontal|bottom"
-      android:layout_centerHorizontal="true"
-      android:layout_below="@id/com_facebook_body_frame"
-      android:layout_marginTop="-13dp"
-      android:src="@drawable/com_facebook_tooltip_blue_bottomnub"
-      />
-</RelativeLayout>
diff --git a/facebook/src/main/res/layout/messenger_button_send_blue_large.xml b/facebook/src/main/res/layout/messenger_button_send_blue_large.xml
deleted file mode 100644
index 5583b3e28..000000000
--- a/facebook/src/main/res/layout/messenger_button_send_blue_large.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<FrameLayout
-  xmlns:android="http://schemas.android.com/apk/res/android"
-  android:id="@+id/messenger_send_button"
-  style="@style/MessengerButton.Blue.Large"
-  >
-  <TextView
-    android:text="@string/messenger_send_button_text"
-    style="@style/MessengerButtonText.Blue.Large"
-    />
-</FrameLayout>
diff --git a/facebook/src/main/res/layout/messenger_button_send_blue_round.xml b/facebook/src/main/res/layout/messenger_button_send_blue_round.xml
deleted file mode 100644
index 805efba90..000000000
--- a/facebook/src/main/res/layout/messenger_button_send_blue_round.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<Button
-  xmlns:android="http://schemas.android.com/apk/res/android"
-  android:id="@+id/messenger_send_button"
-  android:layout_width="58dp"
-  android:layout_height="59dp"
-  android:background="@drawable/messenger_button_blue_bg_round"
-  />
diff --git a/facebook/src/main/res/layout/messenger_button_send_blue_small.xml b/facebook/src/main/res/layout/messenger_button_send_blue_small.xml
deleted file mode 100644
index 107a56bc5..000000000
--- a/facebook/src/main/res/layout/messenger_button_send_blue_small.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<FrameLayout
-  xmlns:android="http://schemas.android.com/apk/res/android"
-  android:id="@+id/messenger_send_button"
-  style="@style/MessengerButton.Blue.Small"
-  >
-  <TextView
-    android:text="@string/messenger_send_button_text"
-    style="@style/MessengerButtonText.Blue.Small"
-    />
-</FrameLayout>
diff --git a/facebook/src/main/res/layout/messenger_button_send_white_large.xml b/facebook/src/main/res/layout/messenger_button_send_white_large.xml
deleted file mode 100644
index 2f0e0923a..000000000
--- a/facebook/src/main/res/layout/messenger_button_send_white_large.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<FrameLayout
-  xmlns:android="http://schemas.android.com/apk/res/android"
-  android:id="@+id/messenger_send_button"
-  style="@style/MessengerButton.White.Large"
-  >
-  <TextView
-    android:text="@string/messenger_send_button_text"
-    style="@style/MessengerButtonText.White.Large"
-    />
-</FrameLayout>
diff --git a/facebook/src/main/res/layout/messenger_button_send_white_round.xml b/facebook/src/main/res/layout/messenger_button_send_white_round.xml
deleted file mode 100644
index 796ca687e..000000000
--- a/facebook/src/main/res/layout/messenger_button_send_white_round.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<Button
-  xmlns:android="http://schemas.android.com/apk/res/android"
-  android:id="@+id/messenger_send_button"
-  android:layout_width="58dp"
-  android:layout_height="59dp"
-  android:background="@drawable/messenger_button_white_bg_round"
-  />
diff --git a/facebook/src/main/res/layout/messenger_button_send_white_small.xml b/facebook/src/main/res/layout/messenger_button_send_white_small.xml
deleted file mode 100644
index 876f5d666..000000000
--- a/facebook/src/main/res/layout/messenger_button_send_white_small.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<FrameLayout
-  xmlns:android="http://schemas.android.com/apk/res/android"
-  android:id="@+id/messenger_send_button"
-  style="@style/MessengerButton.White.Small"
-  >
-  <TextView
-    android:text="@string/messenger_send_button_text"
-    style="@style/MessengerButtonText.White.Small"
-    />
-</FrameLayout>
diff --git a/facebook/src/main/res/values-af/messenger_button_strings.xml b/facebook/src/main/res/values-af/messenger_button_strings.xml
deleted file mode 100644
index 17be2a914..000000000
--- a/facebook/src/main/res/values-af/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Stuur</string>
-</resources>
diff --git a/facebook/src/main/res/values-af/strings.xml b/facebook/src/main/res/values-af/strings.xml
deleted file mode 100644
index c5932dc6a..000000000
--- a/facebook/src/main/res/values-af/strings.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Hou van</string>
-    <string name="com_facebook_like_button_liked">Hou van</string>
-    <string name="com_facebook_loginview_log_out_button">Meld af</string>
-    <string name="com_facebook_loginview_log_in_button">Meld aan</string>
-    <string name="com_facebook_loginview_log_in_button_long">Meld met Facebook aan</string>
-    <string name="com_facebook_loginview_logged_in_as">Aangemeld as: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Met Facebook aangemeld</string>
-    <string name="com_facebook_loginview_log_out_action">Meld af</string>
-    <string name="com_facebook_loginview_cancel_action">Kanselleer</string>
-    <string name="com_facebook_loading">Laai tans...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-fout</string>
-    <string name="com_facebook_internet_permission_error_message">Webaansig-aanmelding benodig INTERNET-toestemming</string>
-    <string name="com_facebook_tooltip_default">Nuut! Jy is in beheer - kies watter inligting jy met toepassings wil deel.</string>
-    <string name="com_facebook_image_download_unknown_error">Onverwagse fout met aflaai van \'n
-        prent.</string>
-    <string name="com_facebook_share_button_text">Deel</string>
-    <string name="com_facebook_send_button_text">Stuur</string>
-    <string name="com_facebook_device_auth_instructions">Besoek &lt;b&gt;facebook.com/device&lt;/b&gt; op jou slimfoon of rekenaar en voer hierdie kode in:</string>
-</resources>
diff --git a/facebook/src/main/res/values-ar/messenger_button_strings.xml b/facebook/src/main/res/values-ar/messenger_button_strings.xml
deleted file mode 100644
index 5051f3908..000000000
--- a/facebook/src/main/res/values-ar/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">إرسال</string>
-</resources>
diff --git a/facebook/src/main/res/values-ar/strings.xml b/facebook/src/main/res/values-ar/strings.xml
deleted file mode 100644
index 946c6c9b8..000000000
--- a/facebook/src/main/res/values-ar/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">إعجاب</string>
-    <string name="com_facebook_like_button_liked">أعجبني</string>
-    <string name="com_facebook_loginview_log_out_button">تسجيل الخروج</string>
-    <string name="com_facebook_loginview_log_in_button">تسجيل الدخول</string>
-    <string name="com_facebook_loginview_log_in_button_long">تسجيل الدخول بحساب فيسبوك</string>
-    <string name="com_facebook_loginview_logged_in_as">تم تسجيل الدخول باسم: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">تم تسجيل الدخول بحساب فيسبوك</string>
-    <string name="com_facebook_loginview_log_out_action">تسجيل الخروج</string>
-    <string name="com_facebook_loginview_cancel_action">إلغاء</string>
-    <string name="com_facebook_loading">جارٍ التحميل...</string>
-    <string name="com_facebook_internet_permission_error_title">خطأ AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">يتطلب تسجيل الدخول إلى WebView إذن الاتصال بالإنترنت</string>
-    <string name="com_facebook_tooltip_default">جديد! أنت المتحكم - اختر المعلومات التي تريد مشاركتها مع التطبيقات.</string>
-    <string name="com_facebook_image_download_unknown_error">حدث خطأ غير متوقع أثناء تنزيل صورة.</string>
-    <string name="com_facebook_share_button_text">مشاركة</string>
-    <string name="com_facebook_send_button_text">إرسال</string>
-    <string name="com_facebook_device_auth_instructions">زر &lt;b&gt;facebook.com/device&lt;/b&gt; على هاتفك الذكي أو الكمبيوتر ثم أدخل هذا الرمز:</string>
-</resources>
diff --git a/facebook/src/main/res/values-bn/messenger_button_strings.xml b/facebook/src/main/res/values-bn/messenger_button_strings.xml
deleted file mode 100644
index 633acf2b0..000000000
--- a/facebook/src/main/res/values-bn/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">প্রেরণ করুন</string>
-</resources>
diff --git a/facebook/src/main/res/values-bn/strings.xml b/facebook/src/main/res/values-bn/strings.xml
deleted file mode 100644
index 1fb7ec1d1..000000000
--- a/facebook/src/main/res/values-bn/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">পছন্দ করুন</string>
-    <string name="com_facebook_like_button_liked">পছন্দ করা হয়েছে</string>
-    <string name="com_facebook_loginview_log_out_button">লগ আউট করুন</string>
-    <string name="com_facebook_loginview_log_in_button">লগ ইন করুন</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook -এর সাথে লগ ইন করুন</string>
-    <string name="com_facebook_loginview_logged_in_as">এই হিসাবে লগ ইন করা হয়েছে: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ব্যবহার করে লগ ইন করা হয়েছে</string>
-    <string name="com_facebook_loginview_log_out_action">লগ আউট করুন</string>
-    <string name="com_facebook_loginview_cancel_action">বাতিল করুন</string>
-    <string name="com_facebook_loading">লোড হচ্ছে...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ত্রুটি</string>
-    <string name="com_facebook_internet_permission_error_message">WebView লগ ইন করার জন্য INTERNET-এর অনুমতির প্রয়োজন আছে</string>
-    <string name="com_facebook_tooltip_default">নতুন! আপনি নিয়ন্ত্রণে আছেন-অ্যাপসের সাথে আপনি কোন তথ্য ভাগ করতে চাইছেন তা চয়ন করুন৷</string>
-    <string name="com_facebook_image_download_unknown_error">একটি চিত্র ডাউনলোড করার সময়ে অপ্রত্যাশিত ত্রুটি দেখা দিচ্ছে৷</string>
-    <string name="com_facebook_share_button_text">ভাগ করুন</string>
-    <string name="com_facebook_send_button_text">পাঠান</string>
-    <string name="com_facebook_device_auth_instructions">আপনার কম্পিউটার বা স্মার্টফোন থেকে &lt;b&gt;facebook.com/device&lt;/b&gt; এ যান এবং এই কোডটিকে প্রবেশ করান:</string>
-</resources>
diff --git a/facebook/src/main/res/values-cs/messenger_button_strings.xml b/facebook/src/main/res/values-cs/messenger_button_strings.xml
deleted file mode 100644
index 381bf74f6..000000000
--- a/facebook/src/main/res/values-cs/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Odeslat</string>
-</resources>
diff --git a/facebook/src/main/res/values-cs/strings.xml b/facebook/src/main/res/values-cs/strings.xml
deleted file mode 100644
index ff7de1b51..000000000
--- a/facebook/src/main/res/values-cs/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">To se mi líbí</string>
-    <string name="com_facebook_like_button_liked">Už se mi to líbí</string>
-    <string name="com_facebook_loginview_log_out_button">Odhlásit</string>
-    <string name="com_facebook_loginview_log_in_button">Přihlásit</string>
-    <string name="com_facebook_loginview_log_in_button_long">Přihlásit se přes Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Přihlášen(a) jako: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Přihlášen(a) přes Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Odhlásit</string>
-    <string name="com_facebook_loginview_cancel_action">Zrušit</string>
-    <string name="com_facebook_loading">Načítání…</string>
-    <string name="com_facebook_internet_permission_error_title">Chyba AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Webové přihlášení vyžaduje oprávnění použít INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novinka! Je jen na vás, které informace chcete s aplikacemi sdílet.</string>
-    <string name="com_facebook_image_download_unknown_error">Při stahování obrázku došlo k nečekané chybě.</string>
-    <string name="com_facebook_share_button_text">Sdílet</string>
-    <string name="com_facebook_send_button_text">Odeslat</string>
-    <string name="com_facebook_device_auth_instructions">Přejděte ze smartphonu nebo počítače na &lt;b&gt;facebook.com/device&lt;/b&gt; a zadejte tento kód:</string>
-</resources>
diff --git a/facebook/src/main/res/values-da/messenger_button_strings.xml b/facebook/src/main/res/values-da/messenger_button_strings.xml
deleted file mode 100644
index d4d20fbd9..000000000
--- a/facebook/src/main/res/values-da/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Send</string>
-</resources>
diff --git a/facebook/src/main/res/values-da/strings.xml b/facebook/src/main/res/values-da/strings.xml
deleted file mode 100644
index 994356453..000000000
--- a/facebook/src/main/res/values-da/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Synes godt om</string>
-    <string name="com_facebook_like_button_liked">Synes godt om</string>
-    <string name="com_facebook_loginview_log_out_button">Log af</string>
-    <string name="com_facebook_loginview_log_in_button">Log på</string>
-    <string name="com_facebook_loginview_log_in_button_long">Log på med Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Logget på som: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Logget på med Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Log af</string>
-    <string name="com_facebook_loginview_cancel_action">Annuller</string>
-    <string name="com_facebook_loading">Indlæser ...</string>
-    <string name="com_facebook_internet_permission_error_title">Fejl i forbindelse med AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">WebView-login kræver tilladelse til INTERNET</string>
-    <string name="com_facebook_tooltip_default">Nyhed! Du har styringen – vælg de oplysninger, som du vil dele med apps.</string>
-    <string name="com_facebook_image_download_unknown_error">Der opstod en uventet fejl under download af et billede.</string>
-    <string name="com_facebook_share_button_text">Del</string>
-    <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Gå til &lt;b&gt;facebook.com/device&lt;/b&gt; på din smartphone eller computer, og indtast denne kode:</string>
-</resources>
diff --git a/facebook/src/main/res/values-de/messenger_button_strings.xml b/facebook/src/main/res/values-de/messenger_button_strings.xml
deleted file mode 100644
index 8b125cf1a..000000000
--- a/facebook/src/main/res/values-de/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Senden</string>
-</resources>
diff --git a/facebook/src/main/res/values-de/strings.xml b/facebook/src/main/res/values-de/strings.xml
deleted file mode 100644
index 0913a44e6..000000000
--- a/facebook/src/main/res/values-de/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gefällt mir</string>
-    <string name="com_facebook_like_button_liked">Gefällt dir</string>
-    <string name="com_facebook_loginview_log_out_button">Abmelden</string>
-    <string name="com_facebook_loginview_log_in_button">Anmelden</string>
-    <string name="com_facebook_loginview_log_in_button_long">Über Facebook anmelden</string>
-    <string name="com_facebook_loginview_logged_in_as">Angemeldet als: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Über Facebook angemeldet</string>
-    <string name="com_facebook_loginview_log_out_action">Abmelden</string>
-    <string name="com_facebook_loginview_cancel_action">Abbrechen</string>
-    <string name="com_facebook_loading">Wird geladen ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-Fehler</string>
-    <string name="com_facebook_internet_permission_error_message">Die WebView-Anmeldung erfordert die INTERNET-Berechtigung</string>
-    <string name="com_facebook_tooltip_default">Neu! Es liegt ganz an dir – du kannst dir aussuchen, was du mit Apps teilen möchtest.</string>
-    <string name="com_facebook_image_download_unknown_error">Unerwarteter Fehler beim Herunterladen eines Bildes.</string>
-    <string name="com_facebook_share_button_text">Teilen</string>
-    <string name="com_facebook_send_button_text">Senden</string>
-    <string name="com_facebook_device_auth_instructions">Gehe über dein Smartphone oder deinen Computer zu &lt;b&gt;facebook.com/device&lt;/b&gt; und gib diesen Code ein:</string>
-</resources>
diff --git a/facebook/src/main/res/values-el/messenger_button_strings.xml b/facebook/src/main/res/values-el/messenger_button_strings.xml
deleted file mode 100644
index 4acca25b4..000000000
--- a/facebook/src/main/res/values-el/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Αποστολή</string>
-</resources>
diff --git a/facebook/src/main/res/values-el/strings.xml b/facebook/src/main/res/values-el/strings.xml
deleted file mode 100644
index 0d4699dcb..000000000
--- a/facebook/src/main/res/values-el/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Μου αρέσει!</string>
-    <string name="com_facebook_like_button_liked">Σας αρέσει</string>
-    <string name="com_facebook_loginview_log_out_button">Αποσύνδεση</string>
-    <string name="com_facebook_loginview_log_in_button">Σύνδεση</string>
-    <string name="com_facebook_loginview_log_in_button_long">Σύνδεση μέσω Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Έχει γίνει σύνδεση ως: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Έχει γίνει σύνδεση μέσω Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Αποσύνδεση</string>
-    <string name="com_facebook_loginview_cancel_action">Άκυρο</string>
-    <string name="com_facebook_loading">Φόρτωση...</string>
-    <string name="com_facebook_internet_permission_error_title">Σφάλμα AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Για τη σύνδεση στο WebView απαιτείται σύνδεση INTERNET</string>
-    <string name="com_facebook_tooltip_default">Νέο! Έχετε τον έλεγχο - επιλέξτε ποιες πληροφορίες θέλετε να κοινοποιούνται στις εφαρμογές.</string>
-    <string name="com_facebook_image_download_unknown_error">Προέκυψε μη αναμενόμενο σφάλμα κατά τη λήψη μιας εικόνας.</string>
-    <string name="com_facebook_share_button_text">Κοινοποίηση</string>
-    <string name="com_facebook_send_button_text">Αποστολή</string>
-    <string name="com_facebook_device_auth_instructions">Επισκεφτείτε τον ιστότοπο &lt;b&gt;facebook.com/device&lt;/b&gt; από το smartphone ή τον υπολογιστή σας και πληκτρολογήστε αυτόν τον κωδικό:</string>
-</resources>
diff --git a/facebook/src/main/res/values-es-rES/messenger_button_strings.xml b/facebook/src/main/res/values-es-rES/messenger_button_strings.xml
deleted file mode 100644
index c7b157fb2..000000000
--- a/facebook/src/main/res/values-es-rES/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Enviar</string>
-</resources>
diff --git a/facebook/src/main/res/values-es-rES/strings.xml b/facebook/src/main/res/values-es-rES/strings.xml
deleted file mode 100644
index bc0b08e39..000000000
--- a/facebook/src/main/res/values-es-rES/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Me gusta</string>
-    <string name="com_facebook_like_button_liked">Te gusta</string>
-    <string name="com_facebook_loginview_log_out_button">Salir</string>
-    <string name="com_facebook_loginview_log_in_button">Inicio de sesión</string>
-    <string name="com_facebook_loginview_log_in_button_long">Iniciar sesión con Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Sesión iniciada como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Sesión iniciada con Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Salir</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Cargando...</string>
-    <string name="com_facebook_internet_permission_error_title">Error de AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">El inicio de sesión de WebView requiere permiso para INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novedad: Tú eres quien controla y elige la información que quieres compartir con las aplicaciones.</string>
-    <string name="com_facebook_image_download_unknown_error">Error inesperado al descargar una imagen.</string>
-    <string name="com_facebook_share_button_text">Compartir</string>
-    <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; en tu smartphone o computadora e ingresa este código:</string>
-</resources>
diff --git a/facebook/src/main/res/values-es/messenger_button_strings.xml b/facebook/src/main/res/values-es/messenger_button_strings.xml
deleted file mode 100644
index c7b157fb2..000000000
--- a/facebook/src/main/res/values-es/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Enviar</string>
-</resources>
diff --git a/facebook/src/main/res/values-es/strings.xml b/facebook/src/main/res/values-es/strings.xml
deleted file mode 100644
index 9a211ca6c..000000000
--- a/facebook/src/main/res/values-es/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Me gusta</string>
-    <string name="com_facebook_like_button_liked">Te gusta</string>
-    <string name="com_facebook_loginview_log_out_button">Salir</string>
-    <string name="com_facebook_loginview_log_in_button">Inicio de sesión</string>
-    <string name="com_facebook_loginview_log_in_button_long">Iniciar sesión con Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Sesión iniciada como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Sesión iniciada con Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Salir</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Cargando…</string>
-    <string name="com_facebook_internet_permission_error_title">Error AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">El inicio de sesión a la web requiere permiso de conexión a internet</string>
-    <string name="com_facebook_tooltip_default">¡Nuevo! Tú tienes el control: elige qué información quieres compartir con las aplicaciones.</string>
-    <string name="com_facebook_image_download_unknown_error">Se produjo un error inesperado al descargar una imagen.</string>
-    <string name="com_facebook_share_button_text">Compartir</string>
-    <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; en tu smartphone u ordenador e introduce este código:</string>
-</resources>
diff --git a/facebook/src/main/res/values-fi/messenger_button_strings.xml b/facebook/src/main/res/values-fi/messenger_button_strings.xml
deleted file mode 100644
index f9864d98d..000000000
--- a/facebook/src/main/res/values-fi/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Lähetä</string>
-</resources>
diff --git a/facebook/src/main/res/values-fi/strings.xml b/facebook/src/main/res/values-fi/strings.xml
deleted file mode 100644
index 3962c6cc3..000000000
--- a/facebook/src/main/res/values-fi/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Tykkää</string>
-    <string name="com_facebook_like_button_liked">Tykätty</string>
-    <string name="com_facebook_loginview_log_out_button">Kirjaudu ulos</string>
-    <string name="com_facebook_loginview_log_in_button">Kirjaudu sisään</string>
-    <string name="com_facebook_loginview_log_in_button_long">Kirjaudu sisään Facebookin avulla</string>
-    <string name="com_facebook_loginview_logged_in_as">Sisäänkirjautunut nimellä: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Sisäänkirjautunut Facebookin avulla</string>
-    <string name="com_facebook_loginview_log_out_action">Kirjaudu ulos</string>
-    <string name="com_facebook_loginview_cancel_action">Peruuta</string>
-    <string name="com_facebook_loading">Ladataan...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-virhe</string>
-    <string name="com_facebook_internet_permission_error_message">WebView-kirjautuminen edellyttää INTERNET-käyttöoikeutta</string>
-    <string name="com_facebook_tooltip_default">Uutta! Sinä päätät – valitse, mitä haluat jakaa sovellusten kanssa.</string>
-    <string name="com_facebook_image_download_unknown_error">Odottamaton virhe kuvan palvelimesta lataamisen aikana.</string>
-    <string name="com_facebook_share_button_text">Jaa</string>
-    <string name="com_facebook_send_button_text">Lähetä</string>
-    <string name="com_facebook_device_auth_instructions">Siirry osoitteeseen &lt;b&gt;facebook.com/device&lt;/b&gt; älypuhelimella tai tietokoneella ja anna seuraava koodi:</string>
-</resources>
diff --git a/facebook/src/main/res/values-fr/messenger_button_strings.xml b/facebook/src/main/res/values-fr/messenger_button_strings.xml
deleted file mode 100644
index 18721c291..000000000
--- a/facebook/src/main/res/values-fr/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Envoyer</string>
-</resources>
diff --git a/facebook/src/main/res/values-fr/strings.xml b/facebook/src/main/res/values-fr/strings.xml
deleted file mode 100644
index d7a686d8b..000000000
--- a/facebook/src/main/res/values-fr/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">J’aime</string>
-    <string name="com_facebook_like_button_liked">J’aime déjà</string>
-    <string name="com_facebook_loginview_log_out_button">Déconnexion</string>
-    <string name="com_facebook_loginview_log_in_button">Connexion</string>
-    <string name="com_facebook_loginview_log_in_button_long">Connexion avec Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Connexion en tant que : %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Connecté(e) à l’aide de Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Déconnexion</string>
-    <string name="com_facebook_loginview_cancel_action">Annuler</string>
-    <string name="com_facebook_loading">Chargement...</string>
-    <string name="com_facebook_internet_permission_error_title">Erreur AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">La connexion au web nécessite une autorisation d’accéder à INTERNET</string>
-    <string name="com_facebook_tooltip_default">Nouveau ! Choisissez les informations que vous souhaitez partager avec les applications.</string>
-    <string name="com_facebook_image_download_unknown_error">Une erreur inattendue s’est produite au moment de télécharger une image.</string>
-    <string name="com_facebook_share_button_text">Partager</string>
-    <string name="com_facebook_send_button_text">Envoyer</string>
-    <string name="com_facebook_device_auth_instructions">Rendez-vous sur &lt;b&gt;facebook.com/device&lt;/b&gt; sur votre smartphone ou votre ordinateur et entrez ce code :</string>
-</resources>
diff --git a/facebook/src/main/res/values-gu/messenger_button_strings.xml b/facebook/src/main/res/values-gu/messenger_button_strings.xml
deleted file mode 100644
index 012084c1b..000000000
--- a/facebook/src/main/res/values-gu/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">મોકલો</string>
-</resources>
diff --git a/facebook/src/main/res/values-gu/strings.xml b/facebook/src/main/res/values-gu/strings.xml
deleted file mode 100644
index 633e58a60..000000000
--- a/facebook/src/main/res/values-gu/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">પસંદ કરો</string>
-    <string name="com_facebook_like_button_liked">પસંદ કર્યું</string>
-    <string name="com_facebook_loginview_log_out_button">લૉગ આઉટ કરો</string>
-    <string name="com_facebook_loginview_log_in_button">લૉગ ઇન કરો</string>
-    <string name="com_facebook_loginview_log_in_button_long">ફેસબુક સાથે લૉગ ઇન કરો</string>
-    <string name="com_facebook_loginview_logged_in_as">આ તરીકે લૉગ ઇન થયાં: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">ફેસબુકનો ઉપયોગ કરીને લૉગ ઇન કરો</string>
-    <string name="com_facebook_loginview_log_out_action">લૉગ આઉટ કરો</string>
-    <string name="com_facebook_loginview_cancel_action">રદ કરો</string>
-    <string name="com_facebook_loading">લોડ કરી રહ્યાં છે...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ભૂલ</string>
-    <string name="com_facebook_internet_permission_error_message">WebView લૉગિન માટે ઇન્ટરનેટ પરવાગની આવશ્યક છે</string>
-    <string name="com_facebook_tooltip_default">નવું! તમે નિયંત્રણ કરો છો - તમે એપ્લિકેશન્સ સાથે કઈ માહિતી શેર કરવા માંગો છો તે પસંદ કરો.</string>
-    <string name="com_facebook_image_download_unknown_error">છબી ડાઉનલોડ કરતી વખતે અનપેક્ષિત ભૂલ આવી.</string>
-    <string name="com_facebook_share_button_text">શેર કરો</string>
-    <string name="com_facebook_send_button_text">મોકલો</string>
-    <string name="com_facebook_device_auth_instructions">તમારા સ્માર્ટફોન અથવા કમ્પ્યુટર પર &lt;b&gt;facebook.com/device&lt;/b&gt; ની મુલાકાત લો અને આ કોડ દાખલ કરો:</string>
-</resources>
diff --git a/facebook/src/main/res/values-hi/messenger_button_strings.xml b/facebook/src/main/res/values-hi/messenger_button_strings.xml
deleted file mode 100644
index ad8aeabd3..000000000
--- a/facebook/src/main/res/values-hi/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">भेजें</string>
-</resources>
diff --git a/facebook/src/main/res/values-hi/strings.xml b/facebook/src/main/res/values-hi/strings.xml
deleted file mode 100644
index 1784ecf2d..000000000
--- a/facebook/src/main/res/values-hi/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">पसंद करें</string>
-    <string name="com_facebook_like_button_liked">पसंद किया</string>
-    <string name="com_facebook_loginview_log_out_button">लॉग आउट</string>
-    <string name="com_facebook_loginview_log_in_button">लॉग इन करें</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook से लॉग इन करें</string>
-    <string name="com_facebook_loginview_logged_in_as">इस रूप में लॉग इन किया: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook का उपयोग करके लॉग इन किया हुआ है</string>
-    <string name="com_facebook_loginview_log_out_action">लॉग आउट</string>
-    <string name="com_facebook_loginview_cancel_action">रद्द करें</string>
-    <string name="com_facebook_loading">लोड हो रहा है...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest गलती</string>
-    <string name="com_facebook_internet_permission_error_message">WebView लॉग इन के लिए INTERNET अनुमति की आवश्यकता है</string>
-    <string name="com_facebook_tooltip_default">नया! आप नियंत्रण में हैं - चुनें कि आप एप्लिकेशन से कौन-सी जानकारी साझा करना चाहते हैं.</string>
-    <string name="com_facebook_image_download_unknown_error">एक चित्र डाउनलोड करते समय अनपेक्षित गलती हुई.</string>
-    <string name="com_facebook_share_button_text">साझा करें</string>
-    <string name="com_facebook_send_button_text">भेजें</string>
-    <string name="com_facebook_device_auth_instructions">अपने स्मार्टफ़ोन या कंप्यूटर पर &lt;b&gt;facebook.com/device&lt;/b&gt; पर जाएँ और यह कोड डालें:</string>
-</resources>
diff --git a/facebook/src/main/res/values-hr/strings.xml b/facebook/src/main/res/values-hr/strings.xml
deleted file mode 100644
index 24cd1b72f..000000000
--- a/facebook/src/main/res/values-hr/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Sviđa mi se</string>
-    <string name="com_facebook_like_button_liked">Označeno sa "sviđa mi se"</string>
-    <string name="com_facebook_loginview_log_out_button">Odjavi se</string>
-    <string name="com_facebook_loginview_log_in_button">Prijavi se</string>
-    <string name="com_facebook_loginview_log_in_button_long">Prijava putem Facebooka</string>
-    <string name="com_facebook_loginview_logged_in_as">Prijavljen kao: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Prijavljen putem Facebooka</string>
-    <string name="com_facebook_loginview_log_out_action">Odjavi se</string>
-    <string name="com_facebook_loginview_cancel_action">Odustani</string>
-    <string name="com_facebook_loading">Učitavanje u tijeku…</string>
-    <string name="com_facebook_internet_permission_error_title">Pogreška datoteke AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Za prijavu u aplikaciju WebView potrebna je dozvola INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novo! Vi odlučujete – odaberite koje informacije želite podijeliti u aplikacijama.</string>
-    <string name="com_facebook_image_download_unknown_error">Prilikom preuzimanja slike došlo je do neočekivane pogreške.</string>
-    <string name="com_facebook_share_button_text">Dijeli</string>
-    <string name="com_facebook_send_button_text">Pošalji</string>
-    <string name="com_facebook_device_auth_instructions">Posjetite &lt;b&gt;facebook.com/device&lt;/b&gt; na pametnom telefonu ili računalu i unesite ovaj kôd:</string>
-</resources>
diff --git a/facebook/src/main/res/values-hu/strings.xml b/facebook/src/main/res/values-hu/strings.xml
deleted file mode 100644
index e91c8444e..000000000
--- a/facebook/src/main/res/values-hu/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Tetszik</string>
-    <string name="com_facebook_like_button_liked">Kedveled</string>
-    <string name="com_facebook_loginview_log_out_button">Kijelentkezés</string>
-    <string name="com_facebook_loginview_log_in_button">Bejelentkezés</string>
-    <string name="com_facebook_loginview_log_in_button_long">Bejelentkezés a Facebook használatával</string>
-    <string name="com_facebook_loginview_logged_in_as">Bejelentkezve %1$s néven</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Bejelentkezve a Facebook használatával</string>
-    <string name="com_facebook_loginview_log_out_action">Kijelentkezés</string>
-    <string name="com_facebook_loginview_cancel_action">Törlés</string>
-    <string name="com_facebook_loading">Betöltés...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-hiba</string>
-    <string name="com_facebook_internet_permission_error_message">A webes bejelentkezéshez szükséges a jogosultság az internet használatára.</string>
-    <string name="com_facebook_tooltip_default">Újdonság! A döntés a kezedben van: kiválaszthatod, hogy milyen adatokat osztasz meg az alkalmazásokkal.</string>
-    <string name="com_facebook_image_download_unknown_error">Váratlan hiba történt egy kép betöltése közben.</string>
-    <string name="com_facebook_share_button_text">Megosztás</string>
-    <string name="com_facebook_send_button_text">Küldés</string>
-    <string name="com_facebook_device_auth_instructions">Keresd fel a(z) &lt;b&gt;facebook.com/device&lt;/b&gt; oldalt a telefonodról vagy számítógépről, és írd be a következő kódot:</string>
-</resources>
diff --git a/facebook/src/main/res/values-id/strings.xml b/facebook/src/main/res/values-id/strings.xml
deleted file mode 100644
index 76bbb24bc..000000000
--- a/facebook/src/main/res/values-id/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Suka</string>
-    <string name="com_facebook_like_button_liked">Disukai</string>
-    <string name="com_facebook_loginview_log_out_button">Keluar</string>
-    <string name="com_facebook_loginview_log_in_button">Masuk</string>
-    <string name="com_facebook_loginview_log_in_button_long">Masuk menggunakan Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Masuk sebagai: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Masuk menggunakan Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Keluar</string>
-    <string name="com_facebook_loginview_cancel_action">Batal</string>
-    <string name="com_facebook_loading">Memuat...</string>
-    <string name="com_facebook_internet_permission_error_title">Kesalahan AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Masuk WebView memerlukan izin INTERNET</string>
-    <string name="com_facebook_tooltip_default">Baru! Anda memegang kendali - pilih info yang ingin Anda bagikan dengan aplikasi.</string>
-    <string name="com_facebook_image_download_unknown_error">Kesalahan yang tidak diharapkan saat mengunduh gambar.</string>
-    <string name="com_facebook_share_button_text">Berbagi</string>
-    <string name="com_facebook_send_button_text">Kirim</string>
-    <string name="com_facebook_device_auth_instructions">Buka &lt;b&gt;facebook.com/device&lt;/b&gt; dari smartphone Anda atau komputer dan masukkan kode ini:</string>
-</resources>
diff --git a/facebook/src/main/res/values-in/messenger_button_strings.xml b/facebook/src/main/res/values-in/messenger_button_strings.xml
deleted file mode 100644
index 31bb1a62e..000000000
--- a/facebook/src/main/res/values-in/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Kirim</string>
-</resources>
diff --git a/facebook/src/main/res/values-it/messenger_button_strings.xml b/facebook/src/main/res/values-it/messenger_button_strings.xml
deleted file mode 100644
index 55473fbdc..000000000
--- a/facebook/src/main/res/values-it/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Invia</string>
-</resources>
diff --git a/facebook/src/main/res/values-it/strings.xml b/facebook/src/main/res/values-it/strings.xml
deleted file mode 100644
index 9e46b98bd..000000000
--- a/facebook/src/main/res/values-it/strings.xml
+++ /dev/null
@@ -1,42 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Mi piace</string>
-    <string name="com_facebook_like_button_liked">Ti piace</string>
-    <string name="com_facebook_loginview_log_out_button">Esci</string>
-    <string name="com_facebook_loginview_log_in_button">Accedi</string>
-    <string name="com_facebook_loginview_log_in_button_long">Accedi con Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Accesso effettuato come: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Accesso effettuato con Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Esci</string>
-    <string name="com_facebook_loginview_cancel_action">Annulla</string>
-    <string name="com_facebook_loading">Caricamento...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
-    <string name="com_facebook_internet_permission_error_message">L\'accesso tramite Web richiede
-        l\'autorizzazione INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novità! Il controllo è nelle tue mani: scegli quali informazioni condividere con le applicazioni.</string>
-    <string name="com_facebook_image_download_unknown_error">Errore imprevisto durante il
-        caricamento di un\'immagine.</string>
-    <string name="com_facebook_share_button_text">Condividi</string>
-    <string name="com_facebook_send_button_text">Invia</string>
-    <string name="com_facebook_device_auth_instructions">Accedi a &lt;b&gt;facebook.com/device&lt;/b&gt; nel tuo smartphone o computer e inserisci questo codice:</string>
-</resources>
diff --git a/facebook/src/main/res/values-ja/messenger_button_strings.xml b/facebook/src/main/res/values-ja/messenger_button_strings.xml
deleted file mode 100644
index 029d66e5f..000000000
--- a/facebook/src/main/res/values-ja/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">送信</string>
-</resources>
diff --git a/facebook/src/main/res/values-ja/strings.xml b/facebook/src/main/res/values-ja/strings.xml
deleted file mode 100644
index 858d388e5..000000000
--- a/facebook/src/main/res/values-ja/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">いいね！</string>
-    <string name="com_facebook_like_button_liked">いいね！済み</string>
-    <string name="com_facebook_loginview_log_out_button">ログアウト</string>
-    <string name="com_facebook_loginview_log_in_button">ログイン</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebookでログイン</string>
-    <string name="com_facebook_loginview_logged_in_as">次のユーザーとしてログイン中: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebookを使用してログイン中</string>
-    <string name="com_facebook_loginview_log_out_action">ログアウト</string>
-    <string name="com_facebook_loginview_cancel_action">キャンセル</string>
-    <string name="com_facebook_loading">読み込み中...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifestエラー</string>
-    <string name="com_facebook_internet_permission_error_message">WebViewログインにはINTERNET権限が必要です</string>
-    <string name="com_facebook_tooltip_default">新機能！アプリと共有する情報をコントロールできます。</string>
-    <string name="com_facebook_image_download_unknown_error">画像のダウンロード中に予期しないエラーが発生しました。</string>
-    <string name="com_facebook_share_button_text">シェア</string>
-    <string name="com_facebook_send_button_text">送信</string>
-    <string name="com_facebook_device_auth_instructions">スマートフォンまたはコンピュータから&lt;b&gt;facebook.com/device&lt;/b&gt;にアクセスし、次のコードを入力してください。</string>
-</resources>
diff --git a/facebook/src/main/res/values-kn/messenger_button_strings.xml b/facebook/src/main/res/values-kn/messenger_button_strings.xml
deleted file mode 100644
index 1b8db435c..000000000
--- a/facebook/src/main/res/values-kn/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">ಕಳುಹಿಸು</string>
-</resources>
diff --git a/facebook/src/main/res/values-kn/strings.xml b/facebook/src/main/res/values-kn/strings.xml
deleted file mode 100644
index c3ca7a696..000000000
--- a/facebook/src/main/res/values-kn/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ಇಷ್ಟವಾಗಿದೆ</string>
-    <string name="com_facebook_like_button_liked">ಇಷ್ಟಪಟ್ಟಿದ್ದಾರೆ</string>
-    <string name="com_facebook_loginview_log_out_button">ಲಾಗ್‌ ಔಟ್‌</string>
-    <string name="com_facebook_loginview_log_in_button">ಲಾಗ್‌ ಇನ್‌</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ಮೂಲಕ ಲಾಗ್‌ ಇನ್‌ ಮಾಡಿ</string>
-    <string name="com_facebook_loginview_logged_in_as">ಇದರಂತೆ ಲಾಗಿನ್‌ ಮಾಡಲಾಗಿದೆ: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ಬಳಸಿಕೊಂಡು ಲಾಗಿನ್‌ ಮಾಡಲಾಗಿದೆ</string>
-    <string name="com_facebook_loginview_log_out_action">ಲಾಗ್‌ ಔಟ್‌</string>
-    <string name="com_facebook_loginview_cancel_action">ರದ್ದುಮಾಡು</string>
-    <string name="com_facebook_loading">ಲೋಡ್‌ ಆಗುತ್ತಿದೆ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ದೋಷ</string>
-    <string name="com_facebook_internet_permission_error_message">WebView ಲಾಗಿನ್‌ಗೆ ಇಂಟರ್ನೆಟ್ ಅನುಮತಿಯ ಅಗತ್ಯವಿದೆ</string>
-    <string name="com_facebook_tooltip_default">ಹೊಸ! ನೀವು ನಿಯಂತ್ರಣದಲ್ಲಿರುವಿರಿ - ನೀವು ಅಪ್ಲಿಕೇಶನ್‌ಗಳನ್ನು ಬಳಸಿಕೊಂಡು ಹಂಚಿಕೊಳ್ಳಲು ಬಯಸುವ ವಿಷಯವನ್ನು ಆರಿಸಿ.</string>
-    <string name="com_facebook_image_download_unknown_error">ಚಿತ್ರವನ್ನು ಡೌನ್‌ಲೋಡ್‌ ಮಾಡುವಾಗ ಅನಿರೀಕ್ಷಿತ ದೋಷ ಕಂಡುಬಂದಿದೆ.</string>
-    <string name="com_facebook_share_button_text">ಹಂಚಿಕೊಳ್ಳಿ</string>
-    <string name="com_facebook_send_button_text">ಕಳುಹಿಸಿ</string>
-    <string name="com_facebook_device_auth_instructions">ನಿಮ್ಮ ಸ್ಮಾರ್ಟ್‌ ಫೋನ್‌ ಅಥವಾ ಕಂಪ್ಯೂಟರ್‌ನಲ್ಲಿ &lt;b&gt;facebook.com/device&lt;/b&gt; ಗೆ ಭೇಟಿ ನೀಡಿ ಮತ್ತು ಈ ಕೋಡ್‌ ಅನ್ನು ನಮೂದಿಸಿ:</string>
-</resources>
diff --git a/facebook/src/main/res/values-ko/messenger_button_strings.xml b/facebook/src/main/res/values-ko/messenger_button_strings.xml
deleted file mode 100644
index 0f492315b..000000000
--- a/facebook/src/main/res/values-ko/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">보내기</string>
-</resources>
diff --git a/facebook/src/main/res/values-ko/strings.xml b/facebook/src/main/res/values-ko/strings.xml
deleted file mode 100644
index c925e6ef7..000000000
--- a/facebook/src/main/res/values-ko/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">좋아요</string>
-    <string name="com_facebook_like_button_liked">좋아요</string>
-    <string name="com_facebook_loginview_log_out_button">로그아웃</string>
-    <string name="com_facebook_loginview_log_in_button">로그인</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook으로 로그인</string>
-    <string name="com_facebook_loginview_logged_in_as">로그인할 이름: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook 계정으로 로그인함</string>
-    <string name="com_facebook_loginview_log_out_action">로그아웃</string>
-    <string name="com_facebook_loginview_cancel_action">취소</string>
-    <string name="com_facebook_loading">읽어들이는 중...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 오류</string>
-    <string name="com_facebook_internet_permission_error_message">WebView에 로그인하려면 인터넷 권한이 필요합니다</string>
-    <string name="com_facebook_tooltip_default">새로운 기능! 이제 앱과 어떤 정보를 공유할지 자유롭게 선택할 수 있습니다.</string>
-    <string name="com_facebook_image_download_unknown_error">이미지를 다운로드하는 중 예기치 않은 오류가 발생했습니다.</string>
-    <string name="com_facebook_share_button_text">공유하기</string>
-    <string name="com_facebook_send_button_text">보내기</string>
-    <string name="com_facebook_device_auth_instructions">스마트폰이나 컴퓨터에서 &lt;b&gt;facebook.com/device&lt;/b&gt; 주소를 방문하여 다음 코드를 입력하세요.</string>
-</resources>
diff --git a/facebook/src/main/res/values-ml/messenger_button_strings.xml b/facebook/src/main/res/values-ml/messenger_button_strings.xml
deleted file mode 100644
index 4709f1178..000000000
--- a/facebook/src/main/res/values-ml/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">അയയ്ക്കുക</string>
-</resources>
diff --git a/facebook/src/main/res/values-ml/strings.xml b/facebook/src/main/res/values-ml/strings.xml
deleted file mode 100644
index ff740a8ed..000000000
--- a/facebook/src/main/res/values-ml/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ലൈക്കുചെയ്യുക</string>
-    <string name="com_facebook_like_button_liked">ലൈക്കുചെയ്‌‌തു</string>
-    <string name="com_facebook_loginview_log_out_button">ലോഗ്ഔട്ട് ചെയ്യുക</string>
-    <string name="com_facebook_loginview_log_in_button">ലോഗിൻ ചെയ്യുക</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്യുക</string>
-    <string name="com_facebook_loginview_logged_in_as">ഇതുപ്രകാരം ലോഗിൻ ചെയ്യുക: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്‌തു</string>
-    <string name="com_facebook_loginview_log_out_action">ലോഗ്ഔട്ട് ചെയ്യുക</string>
-    <string name="com_facebook_loginview_cancel_action">റദ്ദാക്കുക</string>
-    <string name="com_facebook_loading">ലോഡുചെയ്യുന്നു...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest പിശക്</string>
-    <string name="com_facebook_internet_permission_error_message">WebView ലോഗിന് ഇന്റർനെറ്റ് അനുമതി ആവശ്യമാണ്</string>
-    <string name="com_facebook_tooltip_default">പുതിയത്! നിങ്ങൾ നിയന്ത്രണത്തിലാണ് - നിങ്ങൾക്ക് ആപ്ലിക്കേഷനുകളുമായി പങ്കിടേണ്ടതുണ്ടെങ്കിൽ തിരഞ്ഞെടുക്കുക.</string>
-    <string name="com_facebook_image_download_unknown_error">ചിത്രം ഡൗൺലോഡുചെയ്യുന്നതിൽ അപ്രതീക്ഷിത പിശക് സംഭവിച്ചു.</string>
-    <string name="com_facebook_share_button_text">പങ്കിടുക</string>
-    <string name="com_facebook_send_button_text">അയയ്‌ക്കുക</string>
-    <string name="com_facebook_device_auth_instructions">നിങ്ങളുടെ സ്‌മാർട്ട്ഫോണിലെ അല്ലെങ്കിൽ കമ്പ്യൂട്ടറിലെ &lt;b&gt;facebook.com/device&lt;/b&gt; സന്ദർശിച്ച് ഇനിപ്പറയുന്ന കോഡ് നൽകുക:</string>
-</resources>
diff --git a/facebook/src/main/res/values-mr/messenger_button_strings.xml b/facebook/src/main/res/values-mr/messenger_button_strings.xml
deleted file mode 100644
index 15fd59880..000000000
--- a/facebook/src/main/res/values-mr/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">पाठवा</string>
-</resources>
diff --git a/facebook/src/main/res/values-mr/strings.xml b/facebook/src/main/res/values-mr/strings.xml
deleted file mode 100644
index ab6105bb9..000000000
--- a/facebook/src/main/res/values-mr/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">आवडले</string>
-    <string name="com_facebook_like_button_liked">आवडलेले</string>
-    <string name="com_facebook_loginview_log_out_button">लॉग आउट करा</string>
-    <string name="com_facebook_loginview_log_in_button">लॉग इन करा</string>
-    <string name="com_facebook_loginview_log_in_button_long">फेसबुकसह लॉग इन करा</string>
-    <string name="com_facebook_loginview_logged_in_as">म्हणून लॉग इन केले: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">फेसबुक वापरून लॉग इन केले</string>
-    <string name="com_facebook_loginview_log_out_action">लॉग आउट करा</string>
-    <string name="com_facebook_loginview_cancel_action">रद्द करा</string>
-    <string name="com_facebook_loading">लोड होत आहे...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest त्रुटी</string>
-    <string name="com_facebook_internet_permission_error_message">वेबदृश्य लॉग इन आवश्यकता इंटरनेट परवानगी</string>
-    <string name="com_facebook_tooltip_default">नवीन! आपण नियंत्रणात आहात - आपण कोणती माहिती अनुप्रयोगांसह शेअर करू इच्छिता ते निवडा.</string>
-    <string name="com_facebook_image_download_unknown_error">प्रतिमा डाउनलोड करताना अनपेक्षित त्रुटी.</string>
-    <string name="com_facebook_share_button_text">सामायिक करा</string>
-    <string name="com_facebook_send_button_text">पाठवा</string>
-    <string name="com_facebook_device_auth_instructions">आपला स्‍मार्ट फोन किंवा संगणकावर &lt;b&gt;facebook.com/device&lt;/b&gt; ला भेट द्या आणि हा कोड प्रविष्‍ट करा:</string>
-</resources>
diff --git a/facebook/src/main/res/values-ms/messenger_button_strings.xml b/facebook/src/main/res/values-ms/messenger_button_strings.xml
deleted file mode 100644
index 567fbbe2a..000000000
--- a/facebook/src/main/res/values-ms/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Hantar</string>
-</resources>
diff --git a/facebook/src/main/res/values-ms/strings.xml b/facebook/src/main/res/values-ms/strings.xml
deleted file mode 100644
index 2c5b536f2..000000000
--- a/facebook/src/main/res/values-ms/strings.xml
+++ /dev/null
@@ -1,39 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Suka</string>
-    <string name="com_facebook_like_button_liked">Disukai</string>
-    <string name="com_facebook_loginview_log_out_button">Log keluar</string>
-    <string name="com_facebook_loginview_log_in_button">Log masuk</string>
-    <string name="com_facebook_loginview_log_in_button_long">Log masuk dengan Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Dilog masuk sebagai: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Dilog masuk menggunakan Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Log keluar</string>
-    <string name="com_facebook_loginview_cancel_action">Batal</string>
-    <string name="com_facebook_loading">Memuatkan...</string>
-    <string name="com_facebook_internet_permission_error_title">Ralat AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Log masuk WebView memerlukan kebenaran INTERNET</string>
-    <string name="com_facebook_tooltip_default">Baru! Anda yang mengawal - pilih maklumat yang anda ingin kongsi dengan aplikasi.</string>
-    <string name="com_facebook_image_download_unknown_error">Ralat tidak dijangka ketika memuat turun imej.</string>
-    <string name="com_facebook_share_button_text">Kongsi</string>
-    <string name="com_facebook_send_button_text">Hantar</string>
-</resources>
diff --git a/facebook/src/main/res/values-nb/messenger_button_strings.xml b/facebook/src/main/res/values-nb/messenger_button_strings.xml
deleted file mode 100644
index d4d20fbd9..000000000
--- a/facebook/src/main/res/values-nb/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Send</string>
-</resources>
diff --git a/facebook/src/main/res/values-nb/strings.xml b/facebook/src/main/res/values-nb/strings.xml
deleted file mode 100644
index 1b909f5eb..000000000
--- a/facebook/src/main/res/values-nb/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Liker</string>
-    <string name="com_facebook_like_button_liked">Likt</string>
-    <string name="com_facebook_loginview_log_out_button">Logg ut</string>
-    <string name="com_facebook_loginview_log_in_button">Logg inn</string>
-    <string name="com_facebook_loginview_log_in_button_long">Logg inn med Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Logget inn som: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Logget inn med Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Logg ut</string>
-    <string name="com_facebook_loginview_cancel_action">Avbryt</string>
-    <string name="com_facebook_loading">Laster inn …</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-feil</string>
-    <string name="com_facebook_internet_permission_error_message">Webvisning-innlogging krever INTERNETT-tillatelse</string>
-    <string name="com_facebook_tooltip_default">Nyhet! Du bestemmer – velg hvilke opplysninger du vil dele med appene.</string>
-    <string name="com_facebook_image_download_unknown_error">Det oppstod en uventet feil ved nedlasting av et bilde.</string>
-    <string name="com_facebook_share_button_text">Del</string>
-    <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Gå til &lt;b&gt;facebook.com/device&lt;/b&gt; på smarttelefonen eller datamaskinen din, og oppgi denne koden:</string>
-</resources>
diff --git a/facebook/src/main/res/values-nl/messenger_button_strings.xml b/facebook/src/main/res/values-nl/messenger_button_strings.xml
deleted file mode 100644
index 293e33aa3..000000000
--- a/facebook/src/main/res/values-nl/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Verzenden</string>
-</resources>
diff --git a/facebook/src/main/res/values-nl/strings.xml b/facebook/src/main/res/values-nl/strings.xml
deleted file mode 100644
index cb9e6235d..000000000
--- a/facebook/src/main/res/values-nl/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Vind ik leuk</string>
-    <string name="com_facebook_like_button_liked">Vind ik leuk</string>
-    <string name="com_facebook_loginview_log_out_button">Afmelden</string>
-    <string name="com_facebook_loginview_log_in_button">Aanmelden</string>
-    <string name="com_facebook_loginview_log_in_button_long">Aanmelden met Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Aangemeld als: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Aangemeld via Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Afmelden</string>
-    <string name="com_facebook_loginview_cancel_action">Annuleren</string>
-    <string name="com_facebook_loading">Laden…</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
-    <string name="com_facebook_internet_permission_error_message">Voor aanmelding via webweergave is de toestemming INTERNET vereist</string>
-    <string name="com_facebook_tooltip_default">Nieuw! Jij hebt de controle. Kies welke informatie je met apps wilt delen.</string>
-    <string name="com_facebook_image_download_unknown_error">Onverwachte fout tijdens het downloaden van een afbeelding.</string>
-    <string name="com_facebook_share_button_text">Delen</string>
-    <string name="com_facebook_send_button_text">Verzenden</string>
-    <string name="com_facebook_device_auth_instructions">Ga op je smartphone of computer naar &lt;b&gt;facebook.com/device&lt;/b&gt; en voer deze code in:</string>
-</resources>
diff --git a/facebook/src/main/res/values-pa/messenger_button_strings.xml b/facebook/src/main/res/values-pa/messenger_button_strings.xml
deleted file mode 100644
index 12057e2f7..000000000
--- a/facebook/src/main/res/values-pa/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">ਭੇਜੋ</string>
-</resources>
diff --git a/facebook/src/main/res/values-pa/strings.xml b/facebook/src/main/res/values-pa/strings.xml
deleted file mode 100644
index 391c572f4..000000000
--- a/facebook/src/main/res/values-pa/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ਪਸੰਦ ਕਰੋ</string>
-    <string name="com_facebook_like_button_liked">ਪਸੰਦ ਕੀਤਾ ਗਿਆ</string>
-    <string name="com_facebook_loginview_log_out_button">ਲੌਗ ਆਉਟ ਕਰੋ</string>
-    <string name="com_facebook_loginview_log_in_button">ਲੌਗ ਇਨ ਕਰੋ</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ਦੇ ਨਾਲ ਲੌਗ ਇਨ ਕਰੋ</string>
-    <string name="com_facebook_loginview_logged_in_as">ਇਸ ਵੱਜੋਂ ਲੌਗ ਇਨ ਕੀਤਾ ਗਿਆ: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ਦਾ ਉਪਯੋਗ ਕਰਕੇ ਲੌਗ ਇਨ ਕੀਤਾ ਗਿਆ</string>
-    <string name="com_facebook_loginview_log_out_action">ਲੌਗ ਆਉਟ ਕਰੋ</string>
-    <string name="com_facebook_loginview_cancel_action">ਰੱਦ ਕਰੋ</string>
-    <string name="com_facebook_loading">ਲੋਡ ਕਰ ਰਿਹਾ ਹੈ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ਤਰੁੱਟੀ</string>
-    <string name="com_facebook_internet_permission_error_message">WebView ਲੌਗ ਨੂੰ ਇੰਟਰਨੈੱਟ ਅਨੁਮਤੀ ਦੀ ਲੋੜ ਹੁੰਦੀ ਹੈ</string>
-    <string name="com_facebook_tooltip_default">ਨਵਾਂ! ਤੁ\ਸੀਂ ਨਿਯੰਤਰਣ ਵਿੱਚ ਹੋ - ਉਹ ਜਾਣਕਾਰੀ ਚੁਣੋ ਜੋ ਤੁਸੀਂ ਐਪਸ ਦੇ ਨਾਲ ਸਾਂਝੀ ਕਰਨੀ ਚਾਹੁੰਦੇ ਹੋ।</string>
-    <string name="com_facebook_image_download_unknown_error">ਕਿਸੇ ਤਸਵੀਰ ਨੂੰ ਡਾਉਨਲੋਡ ਕਰਨ ਵੇਲੇ ਅਗਿਆਤ ਤਰੁੱਟੀ ਹੋ ਗਈ।</string>
-    <string name="com_facebook_share_button_text">ਸਾਂਝਾ ਕਰੋ</string>
-    <string name="com_facebook_send_button_text">ਭੇਜੋ</string>
-    <string name="com_facebook_device_auth_instructions">ਆਪਣੇ ਸਮਾਰਟਫ਼ੋਨ ਜਾਂ ਕੰਪਿਊਟਰ \'ਤੇ &lt;b&gt;facebook.com/device&lt;/b&gt; ਵਿੱਚ ਜਾਓ ਅਤੇ ਇਸ ਕੋਡ ਨੂੰ ਦਾਖ਼ਲ ਕਰੋ:</string>
-</resources>
diff --git a/facebook/src/main/res/values-pl/messenger_button_strings.xml b/facebook/src/main/res/values-pl/messenger_button_strings.xml
deleted file mode 100644
index 4e0d1732a..000000000
--- a/facebook/src/main/res/values-pl/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Wyślij</string>
-</resources>
diff --git a/facebook/src/main/res/values-pl/strings.xml b/facebook/src/main/res/values-pl/strings.xml
deleted file mode 100644
index e0a49498b..000000000
--- a/facebook/src/main/res/values-pl/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Lubię to!</string>
-    <string name="com_facebook_like_button_liked">Polubione</string>
-    <string name="com_facebook_loginview_log_out_button">Wyloguj się</string>
-    <string name="com_facebook_loginview_log_in_button">Zaloguj się</string>
-    <string name="com_facebook_loginview_log_in_button_long">Zaloguj się przez Facebooka</string>
-    <string name="com_facebook_loginview_logged_in_as">Zalogowano jako: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Zalogowano przez Facebooka</string>
-    <string name="com_facebook_loginview_log_out_action">Wyloguj się</string>
-    <string name="com_facebook_loginview_cancel_action">Anuluj</string>
-    <string name="com_facebook_loading">Ładowanie...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
-    <string name="com_facebook_internet_permission_error_message">Logowanie się do sieci wymaga zezwolenia na dostęp do INTERNETU</string>
-    <string name="com_facebook_tooltip_default">Nowość! Masz pełną kontrolę – określ, jakie informacje chcesz udostępniać aplikacjom.</string>
-    <string name="com_facebook_image_download_unknown_error">Nieoczekiwany błąd podczas pobierania obrazu.</string>
-    <string name="com_facebook_share_button_text">Udostępnij</string>
-    <string name="com_facebook_send_button_text">Wyślij</string>
-    <string name="com_facebook_device_auth_instructions">Przejdź do &lt;b&gt;facebook.com/device&lt;/b&gt; na smartfonie lub komputerze i wprowadź ten kod:</string>
-</resources>
diff --git a/facebook/src/main/res/values-pt-rPT/messenger_button_strings.xml b/facebook/src/main/res/values-pt-rPT/messenger_button_strings.xml
deleted file mode 100644
index c7b157fb2..000000000
--- a/facebook/src/main/res/values-pt-rPT/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Enviar</string>
-</resources>
diff --git a/facebook/src/main/res/values-pt-rPT/strings.xml b/facebook/src/main/res/values-pt-rPT/strings.xml
deleted file mode 100644
index 6df0f03e5..000000000
--- a/facebook/src/main/res/values-pt-rPT/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gosto</string>
-    <string name="com_facebook_like_button_liked">Gostei</string>
-    <string name="com_facebook_loginview_log_out_button">Terminar sessão</string>
-    <string name="com_facebook_loginview_log_in_button">Iniciar sessão</string>
-    <string name="com_facebook_loginview_log_in_button_long">Iniciar sessão com o Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Com sessão iniciada como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Com sessão iniciada através do Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Terminar sessão</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">A carregar...</string>
-    <string name="com_facebook_internet_permission_error_title">Erro AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">O início de sessão WebView necessita de permissão para aceder à INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novidade! Tens o controlo: escolhe a informação que pretendes partilhar com as aplicações.</string>
-    <string name="com_facebook_image_download_unknown_error">Ocorreu um erro inesperado ao descarregar uma imagem.</string>
-    <string name="com_facebook_share_button_text">Partilhar</string>
-    <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; no teu smartphone ou computador e insere este código:</string>
-</resources>
diff --git a/facebook/src/main/res/values-pt/messenger_button_strings.xml b/facebook/src/main/res/values-pt/messenger_button_strings.xml
deleted file mode 100644
index c7b157fb2..000000000
--- a/facebook/src/main/res/values-pt/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Enviar</string>
-</resources>
diff --git a/facebook/src/main/res/values-pt/strings.xml b/facebook/src/main/res/values-pt/strings.xml
deleted file mode 100644
index 9f09bbd33..000000000
--- a/facebook/src/main/res/values-pt/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Curtir</string>
-    <string name="com_facebook_like_button_liked">Curtiu</string>
-    <string name="com_facebook_loginview_log_out_button">Sair</string>
-    <string name="com_facebook_loginview_log_in_button">Entrar</string>
-    <string name="com_facebook_loginview_log_in_button_long">Entrar com o Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Conectado como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Você entrou usando o Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Sair</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Carregando...</string>
-    <string name="com_facebook_internet_permission_error_title">Erro no AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">A permissão de INTERNET é necessária para fazer o login WebView</string>
-    <string name="com_facebook_tooltip_default">Novidade! Você está no controle - escolha quais informações quer compartilhar com os aplicativos.</string>
-    <string name="com_facebook_image_download_unknown_error">Erro inesperado ao baixar uma imagem.</string>
-    <string name="com_facebook_share_button_text">Compartilhar</string>
-    <string name="com_facebook_send_button_text">Envio</string>
-    <string name="com_facebook_device_auth_instructions">Acesse &lt;b&gt;facebook.com/device&lt;/b&gt; no seu smartphone ou computador e insira este código:</string>
-</resources>
diff --git a/facebook/src/main/res/values-ru/messenger_button_strings.xml b/facebook/src/main/res/values-ru/messenger_button_strings.xml
deleted file mode 100644
index da0987b7e..000000000
--- a/facebook/src/main/res/values-ru/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Отпр</string>
-</resources>
diff --git a/facebook/src/main/res/values-ru/strings.xml b/facebook/src/main/res/values-ru/strings.xml
deleted file mode 100644
index 8f47ce62b..000000000
--- a/facebook/src/main/res/values-ru/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Нравится</string>
-    <string name="com_facebook_like_button_liked">Понравилось</string>
-    <string name="com_facebook_loginview_log_out_button">Выход</string>
-    <string name="com_facebook_loginview_log_in_button">Вход</string>
-    <string name="com_facebook_loginview_log_in_button_long">Вход через Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Вы вошли как: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Выполнен вход с помощью Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Выход</string>
-    <string name="com_facebook_loginview_cancel_action">Отменить</string>
-    <string name="com_facebook_loading">Загрузка...</string>
-    <string name="com_facebook_internet_permission_error_title">Ошибка AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Для входа в WebView необходимо разрешение INTERNET</string>
-    <string name="com_facebook_tooltip_default">Новинка! У вас все под контролем — выбирайте, какой информацией вы хотите поделиться с приложениями.</string>
-    <string name="com_facebook_image_download_unknown_error">При загрузке изображения возникла неожиданная ошибка.</string>
-    <string name="com_facebook_share_button_text">Поделиться</string>
-    <string name="com_facebook_send_button_text">Отправить</string>
-    <string name="com_facebook_device_auth_instructions">Откройте «&lt;b&gt;facebook.com/device&lt;/b&gt;» на своем смартфофне или компьютере и введите этот код:</string>
-</resources>
diff --git a/facebook/src/main/res/values-sk/strings.xml b/facebook/src/main/res/values-sk/strings.xml
deleted file mode 100644
index c67312513..000000000
--- a/facebook/src/main/res/values-sk/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Páči sa mi to</string>
-    <string name="com_facebook_like_button_liked">Páči sa mi to</string>
-    <string name="com_facebook_loginview_log_out_button">Odhlásiť sa</string>
-    <string name="com_facebook_loginview_log_in_button">Prihlásiť sa</string>
-    <string name="com_facebook_loginview_log_in_button_long">Prihlásiť sa cez Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Prihlásený ako: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Prihlásený cez Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Odhlásiť sa</string>
-    <string name="com_facebook_loginview_cancel_action">Zrušiť</string>
-    <string name="com_facebook_loading">Načítava sa...</string>
-    <string name="com_facebook_internet_permission_error_title">Chyba súboru AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Na prihlásenie sa v rozhraní WebView sa vyžaduje povolenie pre INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novinka! Máte to pod kontrolou: vyberte, ktoré informácie chcete zdieľať s aplikáciami.</string>
-    <string name="com_facebook_image_download_unknown_error">Pri sťahovaní obrázka sa vyskytla neočakávaná chyba.</string>
-    <string name="com_facebook_share_button_text">Zdieľať</string>
-    <string name="com_facebook_send_button_text">Odoslať</string>
-    <string name="com_facebook_device_auth_instructions">Navštívte &lt;b&gt;facebook.com/device&lt;/b&gt; v smartfóne alebo počítači a zadajte tento kód:</string>
-</resources>
diff --git a/facebook/src/main/res/values-sv/messenger_button_strings.xml b/facebook/src/main/res/values-sv/messenger_button_strings.xml
deleted file mode 100644
index 0cff34af8..000000000
--- a/facebook/src/main/res/values-sv/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Skicka</string>
-</resources>
diff --git a/facebook/src/main/res/values-sv/strings.xml b/facebook/src/main/res/values-sv/strings.xml
deleted file mode 100644
index af2f460e6..000000000
--- a/facebook/src/main/res/values-sv/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gilla</string>
-    <string name="com_facebook_like_button_liked">Gillade</string>
-    <string name="com_facebook_loginview_log_out_button">Logga ut</string>
-    <string name="com_facebook_loginview_log_in_button">Logga in</string>
-    <string name="com_facebook_loginview_log_in_button_long">Logga in med Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Inloggad som: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Inloggad med Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Logga ut</string>
-    <string name="com_facebook_loginview_cancel_action">Avbryt</string>
-    <string name="com_facebook_loading">Laddar ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-fel</string>
-    <string name="com_facebook_internet_permission_error_message">Webbinloggning kräver internetbehörighet</string>
-    <string name="com_facebook_tooltip_default">Nyhet! Du bestämmer – välj vilken info du vill dela med appar.</string>
-    <string name="com_facebook_image_download_unknown_error">Oväntat fel vid hämtning av en bild.</string>
-    <string name="com_facebook_share_button_text">Dela</string>
-    <string name="com_facebook_send_button_text">Skicka</string>
-    <string name="com_facebook_device_auth_instructions">Besök &lt;b&gt;facebook.com/device&lt;/b&gt; på din smartphone eller dator och ange den här koden:</string>
-</resources>
diff --git a/facebook/src/main/res/values-ta/messenger_button_strings.xml b/facebook/src/main/res/values-ta/messenger_button_strings.xml
deleted file mode 100644
index cae24ff92..000000000
--- a/facebook/src/main/res/values-ta/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">அனுப்பு</string>
-</resources>
diff --git a/facebook/src/main/res/values-ta/strings.xml b/facebook/src/main/res/values-ta/strings.xml
deleted file mode 100644
index 95d878bee..000000000
--- a/facebook/src/main/res/values-ta/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">விருப்பம்</string>
-    <string name="com_facebook_like_button_liked">விரும்பப்பட்டது</string>
-    <string name="com_facebook_loginview_log_out_button">வெளியேறு</string>
-    <string name="com_facebook_loginview_log_in_button">உள்நுழைவு</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook மூலம் உள்நுழையவும்</string>
-    <string name="com_facebook_loginview_logged_in_as">உள்நுழைந்துள்ள கணக்கு: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook மூலம் உள்நுழையப்பட்டுள்ளது</string>
-    <string name="com_facebook_loginview_log_out_action">வெளியேறு</string>
-    <string name="com_facebook_loginview_cancel_action">ரத்துசெய்</string>
-    <string name="com_facebook_loading">ஏற்றுகிறது...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest பிழை</string>
-    <string name="com_facebook_internet_permission_error_message">WebView இல் உள்நுழைய இணைய அனுமதி தேவை</string>
-    <string name="com_facebook_tooltip_default">புதிது! உங்கள் கட்டுப்பாட்டில் இருப்பதால், பயன்பாடுகளுடன் பகிர வேண்டிய தகவலைத் தேர்வுசெய்யவும்.</string>
-    <string name="com_facebook_image_download_unknown_error">படத்தைப் பதிவிறக்கும் போது பிழை ஏற்பட்டது.</string>
-    <string name="com_facebook_share_button_text">பகிர்</string>
-    <string name="com_facebook_send_button_text">அனுப்பு</string>
-    <string name="com_facebook_device_auth_instructions">உங்கள் ஸ்மார்ட்ஃபோன் அல்லது கணினியில் &lt;b&gt;facebook.com/device&lt;/b&gt; ஐப் பார்வையிட்டு, பின்வரும் குறியீட்டை உள்ளிடவும்:</string>
-</resources>
diff --git a/facebook/src/main/res/values-te/messenger_button_strings.xml b/facebook/src/main/res/values-te/messenger_button_strings.xml
deleted file mode 100644
index d709da3d1..000000000
--- a/facebook/src/main/res/values-te/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">పంపు</string>
-</resources>
diff --git a/facebook/src/main/res/values-te/strings.xml b/facebook/src/main/res/values-te/strings.xml
deleted file mode 100644
index 3421df3eb..000000000
--- a/facebook/src/main/res/values-te/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ఇష్టంగా గుర్తు పెట్టు</string>
-    <string name="com_facebook_like_button_liked">ఇష్టంగా గుర్తు పెట్టబడింది</string>
-    <string name="com_facebook_loginview_log_out_button">లాగ్ అవుట్ చేయి</string>
-    <string name="com_facebook_loginview_log_in_button">లాగిన్ చేయి</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebookతో లాగిన్ చేయి</string>
-    <string name="com_facebook_loginview_logged_in_as">ఇలా లాగిన్ చేసారు: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ఉపయోగించి లాగిన్ చేసారు</string>
-    <string name="com_facebook_loginview_log_out_action">లాగ్ అవుట్ చేయి</string>
-    <string name="com_facebook_loginview_cancel_action">రద్దు చేయి</string>
-    <string name="com_facebook_loading">లోడ్ చేస్తోంది...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest లోపం</string>
-    <string name="com_facebook_internet_permission_error_message">వెబ్ వీక్షణ లాగిన్‌కు ఇంటర్నెట్ అనుమతి అవసరం</string>
-    <string name="com_facebook_tooltip_default">సరికొత్తది! మీకు నియంత్రణ ఉంది - మీరు అప్లికేషన్‌లతో ఏ సమాచారాన్ని భాగస్వామ్యం చేయాలనుకుంటున్నారో ఎంచుకోండి.</string>
-    <string name="com_facebook_image_download_unknown_error">చిత్రాన్ని డౌన్‌లోడ్ చేస్తున్నప్పుడు ఊహించని లోపం ఏర్పడింది.</string>
-    <string name="com_facebook_share_button_text">భాగస్వామ్యం చేయండి</string>
-    <string name="com_facebook_send_button_text">పంపు</string>
-    <string name="com_facebook_device_auth_instructions">మీ స్మార్ట్‌ఫోన్ లేదా కంప్యూటర్‌లో &lt;b&gt;facebook.com/device&lt;/b&gt; సందర్శించి, ఈ కోడ్‌ను నమోదు చేయండి:</string>
-</resources>
diff --git a/facebook/src/main/res/values-th/messenger_button_strings.xml b/facebook/src/main/res/values-th/messenger_button_strings.xml
deleted file mode 100644
index 32f559c08..000000000
--- a/facebook/src/main/res/values-th/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">ส่ง</string>
-</resources>
diff --git a/facebook/src/main/res/values-th/strings.xml b/facebook/src/main/res/values-th/strings.xml
deleted file mode 100644
index f044656db..000000000
--- a/facebook/src/main/res/values-th/strings.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ถูกใจ</string>
-    <string name="com_facebook_like_button_liked">ถูกใจแล้ว</string>
-    <string name="com_facebook_loginview_log_out_button">ออกจากระบบ</string>
-    <string name="com_facebook_loginview_log_in_button">เข้าสู่ระบบ</string>
-    <string name="com_facebook_loginview_log_in_button_long">เข้าสู่ระบบด้วย Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">เข้าสู่ระบบในชื่อ: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">เข้าสู่ระบบโดยใช้ Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">ออกจากระบบ</string>
-    <string name="com_facebook_loginview_cancel_action">ยกเลิก</string>
-    <string name="com_facebook_loading">กำลังโหลด...</string>
-    <string name="com_facebook_internet_permission_error_title">ข้อผิดพลาดของ AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">การเข้าสู่ระบบ WebView จำเป็นต้องได้รับอนุญาตจากอินเทอร์เน็ต</string>
-    <string name="com_facebook_tooltip_default">ใหม่! คุณเป็นฝ่ายควบคุม โปรดเลือกข้อมูลที่คุณต้องการแชร์ด้วยแอพ</string>
-    <string name="com_facebook_image_download_unknown_error">เกิดข้อผิดพลาดที่ไม่คาดคิดขณะดาวน์โหลดรูปภาพ</string>
-    <string name="com_facebook_share_button_text">แชร์</string>
-    <string name="com_facebook_send_button_text">ส่ง</string>
-    <string name="com_facebook_device_auth_instructions">ไปที่ &lt;b&gt;facebook.com/device&lt;/b&gt; ในสมาร์ทโฟนหรือคอมพิวเตอร์ของคุณ แล้วป้อนรหัสนี้:</string>
-
-</resources>
diff --git a/facebook/src/main/res/values-tl/messenger_button_strings.xml b/facebook/src/main/res/values-tl/messenger_button_strings.xml
deleted file mode 100644
index 38c161156..000000000
--- a/facebook/src/main/res/values-tl/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Ipadala</string>
-</resources>
diff --git a/facebook/src/main/res/values-tl/strings.xml b/facebook/src/main/res/values-tl/strings.xml
deleted file mode 100644
index 3d8fe9009..000000000
--- a/facebook/src/main/res/values-tl/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gustuhin</string>
-    <string name="com_facebook_like_button_liked">Nagustuhan</string>
-    <string name="com_facebook_loginview_log_out_button">Mag-log out</string>
-    <string name="com_facebook_loginview_log_in_button">Mag-log in</string>
-    <string name="com_facebook_loginview_log_in_button_long">Mag-log in sa pamamagitan ng Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Naka-log in bilang si: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Naka-log in gamit ang Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Mag-log out</string>
-    <string name="com_facebook_loginview_cancel_action">Kanselahin</string>
-    <string name="com_facebook_loading">Naglo-load...</string>
-    <string name="com_facebook_internet_permission_error_title">Error na AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Ang pag-log in sa Web ay nangangailangan ng pahintulot sa INTERNET</string>
-    <string name="com_facebook_tooltip_default">Bago! Ikaw ang may kontrol - piliin kung anong impormasyon ang gusto mong ibahagi sa mga app.</string>
-    <string name="com_facebook_image_download_unknown_error">Hindi inaasahang error habang dina-download ang imahe.</string>
-    <string name="com_facebook_share_button_text">Ibahagi</string>
-    <string name="com_facebook_send_button_text">Ipadala</string>
-    <string name="com_facebook_device_auth_instructions">Puntahan ang &lt;b&gt;facebook.com/device&lt;/b&gt; sa iyong smartphone o computer at ilagay ang code na ito:</string>
-</resources>
diff --git a/facebook/src/main/res/values-tr/messenger_button_strings.xml b/facebook/src/main/res/values-tr/messenger_button_strings.xml
deleted file mode 100644
index e0f9539b2..000000000
--- a/facebook/src/main/res/values-tr/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Gönder</string>
-</resources>
diff --git a/facebook/src/main/res/values-tr/strings.xml b/facebook/src/main/res/values-tr/strings.xml
deleted file mode 100644
index 2e9595ffd..000000000
--- a/facebook/src/main/res/values-tr/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Beğen</string>
-    <string name="com_facebook_like_button_liked">Beğendin</string>
-    <string name="com_facebook_loginview_log_out_button">Çıkış yap</string>
-    <string name="com_facebook_loginview_log_in_button">Giriş yap</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ile giriş yap</string>
-    <string name="com_facebook_loginview_logged_in_as">Giriş yapan: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ile giriş yapıldı</string>
-    <string name="com_facebook_loginview_log_out_action">Çıkış yap</string>
-    <string name="com_facebook_loginview_cancel_action">İptal</string>
-    <string name="com_facebook_loading">Yükleniyor...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Hatası</string>
-    <string name="com_facebook_internet_permission_error_message">WebView girişi için İNTERNET izni gerekir</string>
-    <string name="com_facebook_tooltip_default">Yeni! Kontrol sende. Uygulamalarla paylaşmak istediğin bilgileri seç.</string>
-    <string name="com_facebook_image_download_unknown_error">Görsel indirilirken beklenmeyen hata.</string>
-    <string name="com_facebook_share_button_text">Paylaş</string>
-    <string name="com_facebook_send_button_text">Gönder</string>
-    <string name="com_facebook_device_auth_instructions">Akıllı telefonunda veya bilgisayarında &lt;b&gt;facebook.com/device&lt;/b&gt; adresine git ve bu kodu gir:</string>
-</resources>
diff --git a/facebook/src/main/res/values-vi/messenger_button_strings.xml b/facebook/src/main/res/values-vi/messenger_button_strings.xml
deleted file mode 100644
index 54840acde..000000000
--- a/facebook/src/main/res/values-vi/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Gửi</string>
-</resources>
diff --git a/facebook/src/main/res/values-vi/strings.xml b/facebook/src/main/res/values-vi/strings.xml
deleted file mode 100644
index 480478e3e..000000000
--- a/facebook/src/main/res/values-vi/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Thích</string>
-    <string name="com_facebook_like_button_liked">Đã thích</string>
-    <string name="com_facebook_loginview_log_out_button">Đăng xuất</string>
-    <string name="com_facebook_loginview_log_in_button">Đăng nhập</string>
-    <string name="com_facebook_loginview_log_in_button_long">Đăng nhập bằng Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Đã đăng nhập với tư cách là: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Đã đăng nhập bằng Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Đăng xuất</string>
-    <string name="com_facebook_loginview_cancel_action">Hủy</string>
-    <string name="com_facebook_loading">Đang tải...</string>
-    <string name="com_facebook_internet_permission_error_title">Lỗi AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Đăng nhập WebView yêu cầu INTERNET cho phép</string>
-    <string name="com_facebook_tooltip_default">Mới! Bạn đang có quyền kiểm soát - hãy chọn thông tin bạn muốn chia sẻ với các ứng dụng.</string>
-    <string name="com_facebook_image_download_unknown_error">Lỗi bất ngờ khi tải ảnh xuống.</string>
-    <string name="com_facebook_share_button_text">Chia sẻ</string>
-    <string name="com_facebook_send_button_text">Gửi</string>
-    <string name="com_facebook_device_auth_instructions">Truy cập &lt;b&gt;facebook.com/device&lt;/b&gt; trên điện thoại thông minh hoặc máy tính và nhập mã sau:</string>
-</resources>
diff --git a/facebook/src/main/res/values-zh-rCN/messenger_button_strings.xml b/facebook/src/main/res/values-zh-rCN/messenger_button_strings.xml
deleted file mode 100644
index 3bc0640da..000000000
--- a/facebook/src/main/res/values-zh-rCN/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">发送</string>
-</resources>
diff --git a/facebook/src/main/res/values-zh-rCN/strings.xml b/facebook/src/main/res/values-zh-rCN/strings.xml
deleted file mode 100644
index 868a0fa2d..000000000
--- a/facebook/src/main/res/values-zh-rCN/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">赞</string>
-    <string name="com_facebook_like_button_liked">赞了</string>
-    <string name="com_facebook_loginview_log_out_button">退出</string>
-    <string name="com_facebook_loginview_log_in_button">登录</string>
-    <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登录</string>
-    <string name="com_facebook_loginview_logged_in_as">已以%1$s 身份登录</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">已使用 Facebook 登录</string>
-    <string name="com_facebook_loginview_log_out_action">退出</string>
-    <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">正在加载...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 错误</string>
-    <string name="com_facebook_internet_permission_error_message">Web 登录需要互联网许可</string>
-    <string name="com_facebook_tooltip_default">新增功能！一切任您掌控 — 选择您想通过应用分享的信息。</string>
-    <string name="com_facebook_image_download_unknown_error">下载图片时出现意外错误。</string>
-    <string name="com_facebook_share_button_text">分享</string>
-    <string name="com_facebook_send_button_text">发送</string>
-    <string name="com_facebook_device_auth_instructions">请用智能手机或电脑访问 &lt;b&gt;facebook.com/device&lt;/b&gt;，然后输入验证码：</string>
-</resources>
diff --git a/facebook/src/main/res/values-zh-rHK/messenger_button_strings.xml b/facebook/src/main/res/values-zh-rHK/messenger_button_strings.xml
deleted file mode 100644
index 457aeeb9f..000000000
--- a/facebook/src/main/res/values-zh-rHK/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">傳送</string>
-</resources>
diff --git a/facebook/src/main/res/values-zh-rHK/strings.xml b/facebook/src/main/res/values-zh-rHK/strings.xml
deleted file mode 100644
index 3bb5b4a1d..000000000
--- a/facebook/src/main/res/values-zh-rHK/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">讚好</string>
-    <string name="com_facebook_like_button_liked">已讚好</string>
-    <string name="com_facebook_loginview_log_out_button">登出</string>
-    <string name="com_facebook_loginview_log_in_button">登入</string>
-    <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_logged_in_as">以以下身分登入：%1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_log_out_action">登出</string>
-    <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">載入中⋯</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 錯誤</string>
-    <string name="com_facebook_internet_permission_error_message">WebView 登入需有 INTERNET 權限</string>
-    <string name="com_facebook_tooltip_default">最新消息！控制權在您 - 選擇您要與應用程式分享的資訊。</string>
-    <string name="com_facebook_image_download_unknown_error">下載圖像時發生預期外的錯誤。</string>
-    <string name="com_facebook_share_button_text">分享</string>
-    <string name="com_facebook_send_button_text">傳送</string>
-    <string name="com_facebook_device_auth_instructions">在智能手機或電腦前往 &lt;b&gt;facebook.com/device&lt;/b&gt; 並輸入此代碼：</string>
-</resources>
diff --git a/facebook/src/main/res/values-zh-rTW/messenger_button_strings.xml b/facebook/src/main/res/values-zh-rTW/messenger_button_strings.xml
deleted file mode 100644
index 457aeeb9f..000000000
--- a/facebook/src/main/res/values-zh-rTW/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">傳送</string>
-</resources>
diff --git a/facebook/src/main/res/values-zh-rTW/strings.xml b/facebook/src/main/res/values-zh-rTW/strings.xml
deleted file mode 100644
index 914ca3023..000000000
--- a/facebook/src/main/res/values-zh-rTW/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">讚</string>
-    <string name="com_facebook_like_button_liked">說讚</string>
-    <string name="com_facebook_loginview_log_out_button">登出</string>
-    <string name="com_facebook_loginview_log_in_button">登入</string>
-    <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_logged_in_as">使用下列身分登入：%1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">已使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_log_out_action">登出</string>
-    <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">正在載入…</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 錯誤</string>
-    <string name="com_facebook_internet_permission_error_message">WebView 登入需要「網際網路」授權</string>
-    <string name="com_facebook_tooltip_default">新消息！您已成功登入，請選擇要與應用程式分享的資訊。</string>
-    <string name="com_facebook_image_download_unknown_error">下載圖像時發生非預期的錯誤。</string>
-    <string name="com_facebook_share_button_text">分享</string>
-    <string name="com_facebook_send_button_text">傳送</string>
-    <string name="com_facebook_device_auth_instructions">使用您的智慧型手機或電腦前往 &lt;b&gt;facebook.com/device&lt;/b&gt;，然後輸入此代碼：</string>
-</resources>
diff --git a/facebook/src/main/res/values/attrs.xml b/facebook/src/main/res/values/attrs.xml
deleted file mode 100644
index ecd88b321..000000000
--- a/facebook/src/main/res/values/attrs.xml
+++ /dev/null
@@ -1,71 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <declare-styleable name="com_facebook_login_view">
-        <attr name="com_facebook_confirm_logout" format="boolean"/>
-        <attr name="com_facebook_login_text" format="string"/>
-        <attr name="com_facebook_logout_text" format="string"/>
-        <attr name="com_facebook_tooltip_mode">
-            <!-- Keep in sync with Enums in LoginButton -->
-            <enum name="automatic" value="0" />
-            <enum name="display_always" value="1" />
-            <enum name="never_display" value="2" />
-        </attr>
-    </declare-styleable>
-    <declare-styleable name="com_facebook_profile_picture_view">
-        <attr name="com_facebook_preset_size">
-            <!-- Keep in sync with constants in ProfilePictureView -->
-            <enum name="small" value="-2" />
-            <enum name="normal" value="-3" />
-            <enum name="large" value="-4" />
-        </attr>
-        <attr name="com_facebook_is_cropped" format="boolean" />
-    </declare-styleable>
-    <declare-styleable name="com_facebook_like_view">
-        <attr name="com_facebook_foreground_color" format="color" />
-        <attr name="com_facebook_object_id" format="string" />
-        <attr name="com_facebook_object_type">
-            <!-- Keep in sync with Enums in Likeview -->
-            <enum name="unknown" value="0" />
-            <enum name="open_graph" value="1" />
-            <enum name="page" value="2" />
-        </attr>
-        <attr name="com_facebook_style">
-            <!-- Keep in sync with Enums in LikeView -->
-            <enum name="standard" value="0" />
-            <enum name="button" value="1" />
-            <enum name="box_count" value="2" />
-        </attr>
-        <attr name="com_facebook_auxiliary_view_position">
-            <!-- Keep in sync with Enums in LikeView -->
-            <enum name="bottom" value="0" />
-            <enum name="inline" value="1" />
-            <enum name="top" value="2" />
-        </attr>
-        <attr name="com_facebook_horizontal_alignment">
-            <!-- Keep in sync with Enums in LikeView -->
-            <enum name="center" value="0" />
-            <enum name="left" value="1" />
-            <enum name="right" value="2" />
-        </attr>
-    </declare-styleable>
-</resources>
diff --git a/facebook/src/main/res/values/dimens.xml b/facebook/src/main/res/values/dimens.xml
deleted file mode 100644
index 5ae0ed683..000000000
--- a/facebook/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <dimen name="com_facebook_auth_dialog_corner_radius">2dp</dimen>
-    <!--Oversized radius for making sure that when two frames are overlayed the button
-    one does not stick out-->
-    <dimen name="com_facebook_auth_dialog_corner_radius_oversized">4dp</dimen>
-    <dimen name="com_facebook_button_corner_radius">2dp</dimen>
-</resources>
diff --git a/facebook/src/main/res/values/messenger_button_strings.xml b/facebook/src/main/res/values/messenger_button_strings.xml
deleted file mode 100644
index d4d20fbd9..000000000
--- a/facebook/src/main/res/values/messenger_button_strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <string name="messenger_send_button_text">Send</string>
-</resources>
diff --git a/facebook/src/main/res/values/messenger_button_styles.xml b/facebook/src/main/res/values/messenger_button_styles.xml
deleted file mode 100644
index 998e4bd4b..000000000
--- a/facebook/src/main/res/values/messenger_button_styles.xml
+++ /dev/null
@@ -1,94 +0,0 @@
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-  <style name="MessengerButton">
-    <item name="android:clickable">true</item>
-  </style>
-
-  <style name="MessengerButton.Blue">
-    <item name="android:background">@drawable/messenger_button_blue_bg_selector</item>
-  </style>
-
-  <style name="MessengerButton.Blue.Large">
-    <item name="android:layout_width">match_parent</item>
-    <item name="android:layout_height">44dp</item>
-    <item name="android:layout_marginLeft">16dp</item>
-    <item name="android:layout_marginRight">16dp</item>
-  </style>
-
-  <style name="MessengerButton.Blue.Small">
-    <item name="android:layout_width">158dp</item>
-    <item name="android:layout_height">36dp</item>
-  </style>
-
-
-  <style name="MessengerButton.White">
-    <item name="android:background">@drawable/messenger_button_white_bg_selector</item>
-  </style>
-
-  <style name="MessengerButton.White.Large">
-    <item name="android:layout_width">match_parent</item>
-    <item name="android:layout_height">44dp</item>
-    <item name="android:layout_marginLeft">16dp</item>
-    <item name="android:layout_marginRight">16dp</item>
-  </style>
-
-  <style name="MessengerButton.White.Small">
-    <item name="android:layout_width">158dp</item>
-    <item name="android:layout_height">36dp</item>
-  </style>
-
-  <style name="MessengerButtonText">
-    <item name="android:layout_width">wrap_content</item>
-    <item name="android:layout_height">wrap_content</item>
-    <item name="android:layout_gravity">center</item>
-    <item name="android:drawablePadding">4dp</item>
-    <item name="android:gravity">center</item>
-    <!--suppress NewApi -->
-    <item name="android:textAllCaps">true</item>
-    <item name="android:textSize">14sp</item>
-    <item name="android:textStyle">bold</item>
-  </style>
-
-  <style name="MessengerButtonText.Blue">
-    <item name="android:textColor">#ffffff</item>
-  </style>
-
-  <style name="MessengerButtonText.Blue.Large">
-    <item name="android:drawableLeft">@drawable/messenger_bubble_large_white</item>
-  </style>
-
-  <style name="MessengerButtonText.Blue.Small">
-    <item name="android:drawableLeft">@drawable/messenger_bubble_small_white</item>
-  </style>
-
-  <style name="MessengerButtonText.White">
-    <item name="android:textColor">#0084ff</item>
-  </style>
-
-  <style name="MessengerButtonText.White.Large">
-    <item name="android:drawableLeft">@drawable/messenger_bubble_large_blue</item>
-  </style>
-
-  <style name="MessengerButtonText.White.Small">
-    <item name="android:drawableLeft">@drawable/messenger_bubble_small_blue</item>
-  </style>
-</resources>
diff --git a/facebook/src/main/res/values/strings.xml b/facebook/src/main/res/values/strings.xml
deleted file mode 100644
index 070cb88b6..000000000
--- a/facebook/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Like</string>
-    <string name="com_facebook_like_button_liked">Liked</string>
-    <string name="com_facebook_loginview_log_out_button">Log out</string>
-    <string name="com_facebook_loginview_log_in_button">Log in</string>
-    <string name="com_facebook_loginview_log_in_button_long">Log in with Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Logged in as: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Logged in using Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Log out</string>
-    <string name="com_facebook_loginview_cancel_action">Cancel</string>
-    <string name="com_facebook_loading">Loading...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
-    <string name="com_facebook_internet_permission_error_message">WebView login requires INTERNET permission</string>
-    <string name="com_facebook_tooltip_default">New! You\'re in control - choose what info you want to share with apps.</string>
-    <string name="com_facebook_image_download_unknown_error">Unexpected error while downloading an image.</string>
-    <string name="com_facebook_share_button_text">Share</string>
-    <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Visit &lt;b&gt;facebook.com/device&lt;/b&gt; on your smartphone or computer and enter this code</string>
-</resources>
diff --git a/facebook/src/main/res/values/styles.xml b/facebook/src/main/res/values/styles.xml
deleted file mode 100644
index b7824d208..000000000
--- a/facebook/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,123 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
-    <color name="com_facebook_blue">#3B5998</color>
-    <color name="com_facebook_messenger_blue">#0084ff</color>
-
-    <dimen name="com_facebook_likeview_text_size">11.0sp</dimen>
-    <color name="com_facebook_likeview_text_color">#6a7180</color>
-    <dimen name="com_facebook_likeview_edge_padding">2dp</dimen>
-    <dimen name="com_facebook_likeview_internal_padding">6dp</dimen>
-
-    <dimen name="com_facebook_likeboxcountview_caret_width">6dp</dimen>
-    <dimen name="com_facebook_likeboxcountview_caret_height">3dp</dimen>
-    <dimen name="com_facebook_likeboxcountview_border_radius">3dp</dimen>
-    <dimen name="com_facebook_likeboxcountview_border_width">1dp</dimen>
-    <color name="com_facebook_likeboxcountview_border_color">#6a7180</color>
-    <color name="com_facebook_likeboxcountview_text_color">#6a7180</color>
-    <dimen name="com_facebook_likeboxcountview_text_size">11.0sp</dimen>
-    <dimen name="com_facebook_likeboxcountview_text_padding">6dp</dimen>
-
-    <dimen name="com_facebook_profilepictureview_preset_size_small">50dp</dimen>
-    <dimen name="com_facebook_profilepictureview_preset_size_normal">100dp</dimen>
-    <dimen name="com_facebook_profilepictureview_preset_size_large">180dp</dimen>
-
-    <dimen name="com_facebook_share_button_compound_drawable_padding">12dp</dimen>
-    <dimen name="com_facebook_share_button_padding_bottom">12dp</dimen>
-    <dimen name="com_facebook_share_button_padding_left">12dp</dimen>
-    <dimen name="com_facebook_share_button_padding_right">16dp</dimen>
-    <dimen name="com_facebook_share_button_padding_top">12dp</dimen>
-    <color name="com_facebook_share_button_text_color">#FFFFFF</color>
-    <dimen name="com_facebook_share_button_text_size">16.0sp</dimen>
-
-    <dimen name="com_facebook_tooltip_horizontal_padding">10dp</dimen>
-
-    <color name="com_facebook_device_auth_text">#797E87</color>
-
-    <style name="tooltip_bubble_text">
-        <item name="android:textColor">@android:color/white</item>
-        <item name="android:gravity">left</item>
-        <item name="android:textSize">12sp</item>
-        <item name="android:shadowDy">-1</item>
-        <item name="android:shadowRadius">0.25</item>
-        <item name="android:shadowColor">#40000000</item>
-    </style>
-
-    <color name="com_facebook_button_background_color">#415dae</color>
-    <color name="com_facebook_button_background_color_focused">#FFFFFe</color>
-    <color name="com_facebook_button_background_color_focused_disabled">#84878c</color>
-    <color name="com_facebook_button_background_color_selected">#7c8fc8</color>
-    <color name="com_facebook_button_background_color_disabled">#bdc1c9</color>
-    <color name="com_facebook_button_background_color_pressed">#2f477a</color>
-    <color name="com_facebook_button_login_silver_background_color">#f4f6f8</color>
-    <color name="com_facebook_button_login_silver_background_color_pressed">#e9eaf0</color>
-    <color name="com_facebook_button_send_background_color">@color/com_facebook_messenger_blue</color>
-    <color name="com_facebook_button_send_background_color_pressed">#006fff</color>
-
-    <color name="com_facebook_button_border_color_focused">#dedee6</color>
-
-    <style name="com_facebook_button" parent="@android:style/Widget.Button">
-        <item name="android:background">@drawable/com_facebook_button_background</item>
-        <item name="android:drawablePadding">6dp</item>
-        <item name="android:gravity">center</item>
-        <item name="android:paddingBottom">5dp</item>
-        <item name="android:paddingLeft">8dp</item>
-        <item name="android:paddingRight">8dp</item>
-        <item name="android:paddingTop">5dp</item>
-        <item name="android:textColor">@color/com_facebook_button_text_color</item>
-        <item name="android:textSize">14.0dp</item>
-    </style>
-
-    <style name="com_facebook_button_like" parent="com_facebook_button">
-        <item name="android:background">@drawable/com_facebook_button_like_background</item>
-    </style>
-
-    <style name="com_facebook_loginview_default_style" parent="com_facebook_button">
-        <item name="android:drawableLeft">@drawable/com_facebook_button_icon</item>
-    </style>
-
-    <style name="com_facebook_loginview_silver_style" parent="com_facebook_loginview_default_style">
-        <item name="android:background">@drawable/com_facebook_button_login_silver_background</item>
-        <item name="android:drawableLeft">@null</item>
-        <item name="android:textColor">#4b5164</item>
-    </style>
-
-    <style name="com_facebook_button_send" parent="com_facebook_button">
-        <item name="android:background">@drawable/com_facebook_button_send_background</item>
-        <item name="android:drawableLeft">@drawable/com_facebook_send_button_icon</item>
-        <item name="android:text">@string/com_facebook_send_button_text</item>
-        <item name="android:textColor">@color/com_facebook_send_button_text_color</item>
-    </style>
-
-    <style name="com_facebook_button_share" parent="com_facebook_button">
-        <item name="android:drawableLeft">@drawable/com_facebook_button_icon</item>
-        <item name="android:text">@string/com_facebook_share_button_text</item>
-    </style>
-
-    <style name="com_facebook_auth_dialog" parent="android:style/Theme.Dialog">
-        <item name="android:windowIsTranslucent">true</item>
-        <item name="android:windowBackground">@android:color/transparent</item>
-        <item name="android:windowNoTitle">true</item>
-        <item name="android:windowIsFloating">true</item>
-    </style>
-
-</resources>
