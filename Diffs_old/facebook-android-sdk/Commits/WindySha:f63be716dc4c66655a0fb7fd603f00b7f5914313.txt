diff --git a/facebook/src/test/java/com/facebook/MockSharedPreference.java b/facebook/src/test/java/com/facebook/MockSharedPreference.java
new file mode 100644
index 000000000..a22a44681
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/MockSharedPreference.java
@@ -0,0 +1,164 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook;
+
+import android.content.SharedPreferences;
+import android.support.annotation.Nullable;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+public class MockSharedPreference implements SharedPreferences {
+
+    private final HashMap<String, Object> preferenceMap;
+
+    private final MockEditor editor;
+
+    public MockSharedPreference () {
+        preferenceMap = new HashMap<>();
+        editor = new MockEditor(preferenceMap);
+    }
+
+    @Override
+    public Map<String, ?> getAll() {
+        return preferenceMap;
+    }
+
+    @Nullable
+    @Override
+    public String getString(String key, @Nullable String defValue) {
+        return (String) preferenceMap.getOrDefault(key, defValue);
+    }
+
+    @Nullable
+    @Override
+    public Set<String> getStringSet(String key, @Nullable Set<String> defValues) {
+        return (Set<String>) preferenceMap.getOrDefault(key, defValues);
+    }
+
+    @Override
+    public int getInt(String key, int defValue) {
+        return (int) preferenceMap.getOrDefault(key, defValue);
+    }
+
+    @Override
+    public long getLong(String key, long defValue) {
+        return (long) preferenceMap.getOrDefault(key, defValue);
+    }
+
+    @Override
+    public float getFloat(String key, float defValue) {
+        return (float) preferenceMap.getOrDefault(key, defValue);
+    }
+
+    @Override
+    public boolean getBoolean(String key, boolean defValue) {
+        return (boolean) preferenceMap.getOrDefault(key, defValue);
+    }
+
+    @Override
+    public boolean contains(String key) {
+        return preferenceMap.containsKey(key);
+    }
+
+    @Override
+    public Editor edit() {
+        return editor;
+    }
+
+    @Override
+    public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
+
+    }
+
+    @Override
+    public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
+
+    }
+
+    public static class MockEditor implements Editor {
+
+        private final Map<String, Object> preferenceMap;
+
+        MockEditor(final Map<String, Object> map) {
+            preferenceMap = map;
+        }
+
+        @Override
+        public Editor putString(String key, @Nullable String value) {
+            preferenceMap.put(key, value);
+            return this;
+        }
+
+        @Override
+        public Editor putStringSet(String key, @Nullable Set<String> values) {
+            preferenceMap.put(key, values);
+            return this;
+        }
+
+        @Override
+        public Editor putInt(String key, int value) {
+            preferenceMap.put(key, value);
+            return this;
+        }
+
+        @Override
+        public Editor putLong(String key, long value) {
+            preferenceMap.put(key, value);
+            return this;
+        }
+
+        @Override
+        public Editor putFloat(String key, float value) {
+            preferenceMap.put(key, value);
+            return this;
+        }
+
+        @Override
+        public Editor putBoolean(String key, boolean value) {
+            preferenceMap.put(key, value);
+            return this;
+        }
+
+        @Override
+        public Editor remove(String key) {
+            preferenceMap.remove(key);
+            return this;
+        }
+
+        @Override
+        public Editor clear() {
+            preferenceMap.clear();
+            return this;
+        }
+
+        @Override
+        public boolean commit() {
+            return true;
+        }
+
+        @Override
+        public void apply() {
+
+        }
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/UserDataStoreTest.java b/facebook/src/test/java/com/facebook/appevents/UserDataStoreTest.java
new file mode 100644
index 000000000..71f40240a
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/UserDataStoreTest.java
@@ -0,0 +1,147 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.facebook.FacebookPowerMockTestCase;
+import com.facebook.FacebookSdk;
+import com.facebook.MockSharedPreference;
+import com.facebook.TestUtils;
+import com.facebook.internal.Utility;
+
+import junit.framework.Assert;
+
+import org.json.JSONObject;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.Matchers;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.reflect.Whitebox;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+@PrepareForTest({
+        FacebookSdk.class,
+        InternalAppEventsLogger.class,
+        PreferenceManager.class,
+        UserDataStore.class,
+})
+public class UserDataStoreTest extends FacebookPowerMockTestCase {
+
+    private final String TAG = InternalAppEventsLogger.class.getCanonicalName();
+
+    private final Executor mockExecutor = new FacebookSerialExecutor();
+
+    @Before
+    @Override
+    public void setUp() {
+        super.setUp();
+        PowerMockito.spy(FacebookSdk.class);
+        Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
+
+        try {
+            PowerMockito.spy(PreferenceManager.class);
+            PowerMockito.spy(InternalAppEventsLogger.class);
+            PowerMockito.doReturn(mockExecutor).when(
+                    InternalAppEventsLogger.class, "getAnalyticsExecutor");
+        } catch (Exception e) {
+            Log.e(TAG, "Fail to set up UserDataStoreTest: " + e.getMessage());
+        }
+    }
+
+    @Test
+    public void testInitStore() throws Exception {
+        // Test initStore without cache in SharedPreference
+        Whitebox.setInternalState(UserDataStore.class, "initialized", new AtomicBoolean(false));
+        MockSharedPreference mockPreference = new MockSharedPreference();
+        PowerMockito.doReturn(mockPreference).when(PreferenceManager.class,
+                "getDefaultSharedPreferences", Matchers.any(Context.class));
+
+        UserDataStore.initStore();
+        ConcurrentHashMap<String, String> hashedUserData =
+                Whitebox.getInternalState(UserDataStore.class, "hashedUserData");
+        Assert.assertTrue(hashedUserData.isEmpty());
+
+        // Test initStore with cache in SharedPreference
+        Map<String, String> cacheData = new HashMap<>();
+        cacheData.put("key1", "val1");
+        cacheData.put("key2", "val2");
+        Whitebox.setInternalState(UserDataStore.class, "initialized", new AtomicBoolean(false));
+        mockPreference.edit().putString("com.facebook.appevents.UserDataStore.userData",
+                (new JSONObject(cacheData)).toString());
+        PowerMockito.doReturn(mockPreference).when(PreferenceManager.class,
+                "getDefaultSharedPreferences", Matchers.any(Context.class));
+
+        UserDataStore.initStore();
+        hashedUserData = Whitebox.getInternalState(UserDataStore.class, "hashedUserData");
+        Assert.assertEquals(cacheData, hashedUserData);
+    }
+
+    @Test
+    public void testSetUserDataAndHash() throws Exception {
+        MockSharedPreference mockPreference = new MockSharedPreference();
+        PowerMockito.doReturn(mockPreference).when(PreferenceManager.class,
+                "getDefaultSharedPreferences", Matchers.any(Context.class));
+        Whitebox.setInternalState(UserDataStore.class, "initialized", new AtomicBoolean(false));
+
+        String email = "test@fb.com";
+        String phone = "8008007000";
+        UserDataStore.setUserDataAndHash(email, null, null, phone, null, null,null, null, null,
+                null);
+        Map<String, String> expectedData = new HashMap<>();
+        expectedData.put(UserDataStore.EMAIL, Utility.sha256hash(email));
+        expectedData.put(UserDataStore.PHONE, Utility.sha256hash(phone));
+        JSONObject expected = new JSONObject(expectedData);
+        JSONObject actual = new JSONObject(UserDataStore.getHashedUserData());
+        TestUtils.assertEquals(expected, actual);
+
+        Bundle bundleData = new Bundle();
+        bundleData.putString(UserDataStore.EMAIL, "android@fb.com");
+        UserDataStore.setUserDataAndHash(bundleData);
+        expectedData.put(UserDataStore.EMAIL, Utility.sha256hash("android@fb.com"));
+        expected = new JSONObject(expectedData);
+        actual = new JSONObject(UserDataStore.getHashedUserData());
+        TestUtils.assertEquals(expected, actual);
+    }
+
+    @Test
+    public void testClear() throws Exception {
+        MockSharedPreference mockPreference = new MockSharedPreference();
+        PowerMockito.doReturn(mockPreference).when(PreferenceManager.class,
+                "getDefaultSharedPreferences", Matchers.any(Context.class));
+        Whitebox.setInternalState(UserDataStore.class, "initialized", new AtomicBoolean(false));
+
+        UserDataStore.setUserDataAndHash("test@fb.com", null, null, "8008007000", null, null,null
+                , null, null, null);
+
+        UserDataStore.clear();
+        Assert.assertTrue(UserDataStore.getHashedUserData().isEmpty());
+    }
+}
