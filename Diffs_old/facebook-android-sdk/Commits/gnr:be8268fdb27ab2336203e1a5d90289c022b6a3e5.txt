diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index cfb6e1260..303d125b3 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -57,6 +57,11 @@
     // Strings used in the authorization flow
     public static final String REDIRECT_URI = "fbconnect://success";
     public static final String CANCEL_URI = "fbconnect://cancel";
+    public static final String LOGIN_URI = "facebook.com/login.php";
+
+    public static final String ERROR_CODE_KEY = "error_code";
+    public static final int LOGIN_REDIRECT_CODE = 3336;
+
     public static final String TOKEN = "access_token";
     public static final String EXPIRES = "expires_in";
     public static final String SINGLE_SIGN_ON_DISABLED = "service_disabled";
@@ -85,7 +90,7 @@
     private String[] mAuthPermissions;
     private int mAuthActivityCode;
     private DialogListener mAuthDialogListener;
-    
+
     // If the last time we extended the access token was more than 24 hours ago
     // we try to refresh the access token again.
     final private long REFRESH_TOKEN_BARRIER = 24L * 60L * 60L * 1000L;
@@ -202,6 +207,9 @@ public void authorize(Activity activity, String[] permissions,
             singleSignOnStarted = startSingleSignOn(activity, mAppId,
                     permissions, activityCode);
         }
+
+        Util.setSsoEnabled(activity, singleSignOnStarted);
+
         // Otherwise fall back to traditional dialog.
         if (!singleSignOnStarted) {
             startDialogAuth(activity, permissions);
@@ -245,6 +253,7 @@ private boolean startSingleSignOn(Activity activity, String applicationId,
         mAuthPermissions = permissions;
         mAuthActivityCode = activityCode;
         try {
+        	Log.d("Facebook-authorize", "Starting SSO activity for result");
             activity.startActivityForResult(intent, activityCode);
         } catch (ActivityNotFoundException e) {
             didSucceed = false;
@@ -308,7 +317,8 @@ private void startDialogAuth(Activity activity, String[] permissions) {
         CookieSyncManager.createInstance(activity);
         dialog(activity, LOGIN, params, new DialogListener() {
 
-            public void onComplete(Bundle values) {
+            @Override
+			public void onComplete(Bundle values) {
                 // ensure any cookies set by the dialog are saved
                 CookieSyncManager.getInstance().sync();
                 setAccessToken(values.getString(TOKEN));
@@ -324,17 +334,20 @@ public void onComplete(Bundle values) {
                 }
             }
 
-            public void onError(DialogError error) {
+            @Override
+			public void onError(DialogError error) {
                 Log.d("Facebook-authorize", "Login failed: " + error);
                 mAuthDialogListener.onError(error);
             }
 
-            public void onFacebookError(FacebookError error) {
+            @Override
+			public void onFacebookError(FacebookError error) {
                 Log.d("Facebook-authorize", "Login failed: " + error);
                 mAuthDialogListener.onFacebookError(error);
             }
 
-            public void onCancel() {
+            @Override
+			public void onCancel() {
                 Log.d("Facebook-authorize", "Login canceled");
                 mAuthDialogListener.onCancel();
             }
@@ -433,7 +446,7 @@ public void authorizeCallback(int requestCode, int resultCode, Intent data) {
      * will automatically replace the old token with a new one. Note that this
      * method is asynchronous and the callback will be invoked in the original
      * calling thread (not in a background thread).
-     * 
+     *
      * @param context
      *            The Android Context that will be used to bind to the Facebook
      *            RefreshToken Service
@@ -461,30 +474,32 @@ public boolean extendAccessToken(Context context, ServiceListener serviceListene
                 new TokenRefreshServiceConnection(context, serviceListener),
                 Context.BIND_AUTO_CREATE);
     }
-    
+
     /**
     * Calls extendAccessToken if shouldExtendAccessToken returns true.
-    * 
+    *
     * @return the same value as extendAccessToken if the the token requires
     *           refreshing, true otherwise
     */
     public boolean extendAccessTokenIfNeeded(Context context, ServiceListener serviceListener) {
         if (shouldExtendAccessToken()) {
+            Log.v("Facebook-authorize", "Extending access token");
             return extendAccessToken(context, serviceListener);
         }
+        Log.v("Facebook-authorize", "Access token extension not required");
         return true;
     }
-    
+
     /**
-     * Check if the access token requires refreshing. 
-     * 
+     * Check if the access token requires refreshing.
+     *
      * @return true if the last time a new token was obtained was over 24 hours ago.
      */
     public boolean shouldExtendAccessToken() {
         return isSessionValid() &&
                 (System.currentTimeMillis() - mLastAccessUpdate >= REFRESH_TOKEN_BARRIER);
     }
-    
+
     /**
      * Handles connection to the token refresh service (this service is a part
      * of Facebook App).
@@ -565,8 +580,8 @@ private void refreshToken() {
                 serviceListener.onError(new Error("Service connection error"));
             }
         }
-    };    
-    
+    };
+
     /**
      * Invalidate the current user session by removing the access token in
      * memory, clearing the browser cookie, and calling auth.expireSession
@@ -895,7 +910,7 @@ public void setAppId(String appId) {
         public void onCancel();
 
     }
-    
+
     /**
      * Callback interface for service requests.
      */
@@ -903,7 +918,7 @@ public void setAppId(String appId) {
 
         /**
          * Called when a service request completes.
-         * 
+         *
          * @param values
          *            Key-value string pairs extracted from the response.
          */
diff --git a/facebook/src/com/facebook/android/FbDialog.java b/facebook/src/com/facebook/android/FbDialog.java
index 52ebf8e0e..2656a3555 100644
--- a/facebook/src/com/facebook/android/FbDialog.java
+++ b/facebook/src/com/facebook/android/FbDialog.java
@@ -192,6 +192,18 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                     // swallow - thrown if the user slides the keyboard in/out while fb dialog is loading
                 }
                 return true;
+            } else if (Util.getSsoEnabled(getContext()) && url.contains(Facebook.LOGIN_URI)) {
+            	Log.d("Facebook-WebView", "Facebook tried to redirect to login URI - bailing");
+
+            	Bundle values = new Bundle();
+            	values.putInt(Facebook.ERROR_CODE_KEY, Facebook.LOGIN_REDIRECT_CODE);
+                mListener.onComplete(values);
+                try {
+                    FbDialog.this.dismiss();
+                } catch(IllegalArgumentException iae) {
+                    // swallow - thrown if the user slides the keyboard in/out while fb dialog is loading
+                }
+                return true;
             } else if (url.contains(DISPLAY_STRING)) {
                 return false;
             }
@@ -216,7 +228,7 @@ public void onReceivedError(WebView view, int errorCode,
 
         @Override
         public void onPageStarted(WebView view, String url, Bitmap favicon) {
-            Log.d("Facebook-WebView", "Webview loading URL: " + url);
+        	Log.d("Facebook-WebView", "Webview loading URL: " + url);
             super.onPageStarted(view, url, favicon);
             createProgressDialog().show();
         }
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index 5a34f8a3b..2fb197926 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -34,6 +34,7 @@
 
 import android.app.AlertDialog.Builder;
 import android.content.Context;
+import android.content.SharedPreferences.Editor;
 import android.os.Bundle;
 import android.util.Log;
 import android.webkit.CookieManager;
@@ -47,10 +48,15 @@
  */
 public final class Util {
 
-    /**
+	private static final String TAG = "Facebook-Utils";
+
+	private static final String SHARED_PREFS_NAME = "facebook_shared_prefs";
+	private static final String SSO_ENABLED_PREFS_KEY = "sso_enabled_key";
+
+	/**
      * Generate the multi-part post body providing the parameters and boundary
      * string
-     * 
+     *
      * @param parameters the parameters need to be posted
      * @param boundary the random string as boundary
      * @return a string of the post body
@@ -121,7 +127,7 @@ public static Bundle parseUrl(String url) {
         }
     }
 
-    
+
     /**
      * Connect to an HTTP URL and return the response as a string.
      *
@@ -303,4 +309,17 @@ public static void showAlert(Context context, String title, String text) {
         alertBuilder.create().show();
     }
 
+	public static void setSsoEnabled(Context context, boolean singleSignOnEnabled) {
+		Log.v(TAG, "Writing SSO enabled: " + String.valueOf(singleSignOnEnabled));
+		Editor ed = context.getSharedPreferences(SHARED_PREFS_NAME, Context.MODE_PRIVATE).edit();
+		ed.putBoolean(SSO_ENABLED_PREFS_KEY, singleSignOnEnabled);
+		ed.commit();
+	}
+
+	public static boolean getSsoEnabled(Context context) {
+		final boolean rtn = context.getSharedPreferences(SHARED_PREFS_NAME, Context.MODE_PRIVATE).getBoolean(SSO_ENABLED_PREFS_KEY, false);
+		Log.v(TAG, "Read SSO enabled: %s" + String.valueOf(rtn));
+		return rtn;
+	}
+
 }
