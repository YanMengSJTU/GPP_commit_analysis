diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index 6346907de..a3bb220b3 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -20,11 +20,13 @@
 
 package com.facebook;
 
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.location.Location;
 import android.net.Uri;
 import android.os.Bundle;
 
+import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Utility;
 import com.facebook.share.internal.ShareInternalUtility;
 
@@ -32,6 +34,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.robolectric.RuntimeEnvironment;
 
 import java.net.HttpURLConnection;
 import java.util.ArrayList;
@@ -47,7 +50,14 @@
 import static org.powermock.api.mockito.PowerMockito.spy;
 import static org.powermock.api.mockito.PowerMockito.when;
 
-@PrepareForTest({FacebookSdk.class, AccessTokenManager.class, GraphResponse.class, Utility.class})
+@PrepareForTest({
+        AccessToken.class,
+        AccessTokenManager.class,
+        AttributionIdentifiers.class,
+        FacebookSdk.class,
+        GraphResponse.class,
+        Utility.class
+})
 public class GraphRequestTest extends FacebookPowerMockTestCase {
 
     @Before
@@ -265,4 +275,27 @@ public void testCallback() throws Exception {
 
         verify(callback, times(1)).onCompleted(any(GraphResponse.class));
     }
+
+    @Test
+    public void testRequestForCustomAudienceThirdPartyID() throws Exception {
+        mockStatic(AttributionIdentifiers.class);
+        when(AttributionIdentifiers.getAttributionIdentifiers(any(Context.class))).thenReturn(null);
+        doReturn(false).when(FacebookSdk.class, "getLimitEventAndDataUsage", any(Context.class));
+        GraphRequest expectedRequest = new GraphRequest(
+                null,
+                "mockAppID/custom_audience_third_party_id",
+                new Bundle(),
+                HttpMethod.GET,
+                null);
+
+        GraphRequest request = GraphRequest.newCustomAudienceThirdPartyIdRequest(
+                mock(AccessToken.class),
+                RuntimeEnvironment.application,
+                "mockAppID",
+                null);
+
+        assertEquals(expectedRequest.getGraphPath(), request.getGraphPath());
+        assertEquals(expectedRequest.getHttpMethod(), request.getHttpMethod());
+        assertEquals(expectedRequest.getParameters(), request.getParameters());
+    }
 }
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
index f886fc9cf..c3c0eb41f 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
@@ -20,20 +20,28 @@
 
 package com.facebook.appevents;
 
+import android.content.Context;
+import android.content.SharedPreferences;
 import android.os.Bundle;
+import android.test.mock.MockContext;
+import android.util.Log;
 
 import com.facebook.FacebookPowerMockTestCase;
 import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
+import com.facebook.HttpMethod;
 import com.facebook.appevents.internal.ActivityLifecycleTracker;
 import com.facebook.appevents.internal.AppEventUtility;
 import com.facebook.appevents.internal.AppEventsLoggerUtility;
 import com.facebook.appevents.internal.Constants;
+import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Utility;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.ArgumentCaptor;
 import org.mockito.Matchers;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
@@ -48,8 +56,10 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.doReturn;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
@@ -64,8 +74,10 @@
         AppEventUtility.class,
         AppEventsLogger.class,
         AppEventsLoggerImpl.class,
+        AttributionIdentifiers.class,
         InternalAppEventsLogger.class,
         FacebookSdk.class,
+        GraphRequest.class,
         Utility.class,
 })
 public class AppEventsLoggerTest extends FacebookPowerMockTestCase {
@@ -342,6 +354,7 @@ public void testLogPushNotificationOpenWithoutPayload() throws Exception {
     public void testSetPushNotificationsRegistrationId()  throws Exception {
         String mockNotificationId = "123";
         AppEventsLogger.setPushNotificationsRegistrationId(mockNotificationId);
+
         verifyNew(AppEvent.class).withArguments(
                 Matchers.anyString(),
                 Matchers.eq(AppEventsConstants.EVENT_NAME_PUSH_TOKEN_OBTAINED),
@@ -352,4 +365,27 @@ public void testSetPushNotificationsRegistrationId()  throws Exception {
                 Matchers.any(UUID.class));
         assertEquals(mockNotificationId, InternalAppEventsLogger.getPushNotificationsRegistrationId());
     }
+
+    @Test
+    public void testPublishInstall() throws Exception {
+        GraphRequest mockRequest = mock(GraphRequest.class);
+        PowerMockito.whenNew(GraphRequest.class).withAnyArguments().thenReturn(mockRequest);
+        mockStatic(AttributionIdentifiers.class);
+        when(AttributionIdentifiers.getAttributionIdentifiers(any(Context.class))).thenReturn(null);
+        String expectedEvent = "MOBILE_APP_INSTALL";
+        String expectedUrl = "mockAppID/activities";
+        final ArgumentCaptor<JSONObject> captor = ArgumentCaptor.forClass(JSONObject.class);
+
+        FacebookSdk.publishInstallAsync(FacebookSdk.getApplicationContext(), "mockAppID");
+
+        verifyNew(GraphRequest.class).withArguments(
+                Matchers.isNull(),
+                Matchers.eq(expectedUrl),
+                Matchers.isNull(),
+                Matchers.eq(HttpMethod.POST),
+                Matchers.isNull()
+        );
+        verify(mockRequest).setGraphObject(captor.capture());
+        assertEquals(expectedEvent, captor.getValue().getString("event"));
+    }
 }
