diff --git a/build.gradle b/build.gradle
index e435642ee..4ea313abc 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
+        classpath 'com.android.tools.build:gradle:2.1.3'
     }
 }
 
diff --git a/facebook/build.gradle b/facebook/build.gradle
index f53038b70..f77645314 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -12,13 +12,14 @@ dependencies {
     // The cardview and custom tabs dependencies have been removed until the Corona plugin
     // uses the features that need these.
     compile 'com.android.support:support-v4:23.4.0'
+    compile 'com.android.support:appcompat-v7:23.4.0'
+
 //    compile 'com.android.support:cardview-v7:23.4.0'
 //    compile 'com.android.support:customtabs:23.4.0'
+
     compile 'com.parse.bolts:bolts-android:1.4.0'
 
     // Unit Tests
-    testCompile 'com.android.support:appcompat-v7:23.4.0'
-
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
     testCompile 'org.robolectric:shadows-support-v4:3.0'
@@ -43,6 +44,12 @@ android {
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
         consumerProguardFiles 'proguard-project.txt'
+
+        vectorDrawables.useSupportLibrary = true
+    }
+
+    aaptOptions {
+        additionalParameters "--no-version-vectors"
     }
 
     lintOptions {
diff --git a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java b/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
index 6745a0fab..5556e8991 100644
--- a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
@@ -20,11 +20,14 @@
 
 package com.facebook;
 
+import android.net.Uri;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.SmallTest;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.Date;
+import java.net.HttpURLConnection;
 
 // These tests relate to serialization/de-serialization of graph objects in a variety of scenarios, rather than
 // to the underlying request/batch plumbing.
@@ -68,4 +71,25 @@ public void testCommentRoundTrip() throws JSONException {
         assertNotNull(comment2Message);
         assertEquals(commentMessage, comment2Message);
     }
+
+    @SmallTest
+    public void testSetVersion() throws Exception {
+        String currentVersion = FacebookSdk.getGraphApiVersion();
+        FacebookSdk.setGraphApiVersion("v4.5");
+        GraphRequest requestMe = new GraphRequest(null, "TourEiffel");
+        HttpURLConnection connection = GraphRequest.toHttpConnection(requestMe);
+
+        assertTrue(connection != null);
+
+        assertEquals("GET", connection.getRequestMethod());
+        assertEquals("v4.5", FacebookSdk.getGraphApiVersion());
+        assertEquals("/v4.5" + "/TourEiffel", connection.getURL().getPath());
+
+        assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
+
+        Uri uri = Uri.parse(connection.getURL().toString());
+        assertEquals("android", uri.getQueryParameter("sdk"));
+        assertEquals("json", uri.getQueryParameter("format"));
+        FacebookSdk.setGraphApiVersion(currentVersion);
+    }
 }
diff --git a/facebook/src/main/AndroidManifest.xml b/facebook/src/main/AndroidManifest.xml
index 5eb3dface..b68c0bd71 100644
--- a/facebook/src/main/AndroidManifest.xml
+++ b/facebook/src/main/AndroidManifest.xml
@@ -30,7 +30,7 @@
         <activity
             android:name="com.facebook.FacebookActivity"
             android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+            android:theme="@style/com_facebook_activity_theme" />
         <activity
             android:name="com.facebook.CustomTabActivity"
             android:exported="true">
diff --git a/facebook/src/main/java/com/facebook/FacebookActivity.java b/facebook/src/main/java/com/facebook/FacebookActivity.java
index 4ca38c146..ded4c9660 100644
--- a/facebook/src/main/java/com/facebook/FacebookActivity.java
+++ b/facebook/src/main/java/com/facebook/FacebookActivity.java
@@ -80,6 +80,11 @@ public void onCreate(Bundle savedInstanceState) {
             return;
         }
 
+        singleFragment = getFragment();
+    }
+
+    protected Fragment getFragment() {
+        Intent intent = getIntent();
         FragmentManager manager = getSupportFragmentManager();
         Fragment fragment = manager.findFragmentByTag(FRAGMENT_TAG);
 
@@ -104,8 +109,7 @@ public void onCreate(Bundle savedInstanceState) {
                         .commit();
             }
         }
-
-        singleFragment = fragment;
+        return fragment;
     }
 
     @Override
diff --git a/facebook/src/main/java/com/facebook/FacebookButtonBase.java b/facebook/src/main/java/com/facebook/FacebookButtonBase.java
index fedb3a94f..0192206cd 100644
--- a/facebook/src/main/java/com/facebook/FacebookButtonBase.java
+++ b/facebook/src/main/java/com/facebook/FacebookButtonBase.java
@@ -26,8 +26,6 @@
 import android.content.ContextWrapper;
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
 import android.graphics.Typeface;
 import android.support.v4.app.Fragment;
 import android.support.v4.content.ContextCompat;
@@ -36,10 +34,7 @@
 import android.view.Gravity;
 import android.view.View;
 import android.widget.Button;
-import android.util.Log;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.R;
+
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.FragmentWrapper;
 
@@ -297,6 +292,7 @@ private void parseCompoundDrawableAttributes(
         }
     }
 
+    @SuppressWarnings("ResourceType")
     private void parseContentAttributes(
             final Context context,
             final AttributeSet attrs,
@@ -324,6 +320,7 @@ private void parseContentAttributes(
         }
     }
 
+    @SuppressWarnings("ResourceType")
     private void parseTextAttributes(
             final Context context,
             final AttributeSet attrs,
diff --git a/facebook/src/main/java/com/facebook/FacebookSdk.java b/facebook/src/main/java/com/facebook/FacebookSdk.java
index ef3848b77..e846c406e 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdk.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdk.java
@@ -28,6 +28,7 @@
 import android.content.pm.Signature;
 import android.os.AsyncTask;
 import android.os.Build;
+import android.text.TextUtils;
 import android.util.Base64;
 import android.util.Log;
 
@@ -37,6 +38,7 @@
 import com.facebook.internal.BoltsMeasurementEventListener;
 import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 import com.facebook.internal.WebDialog;
@@ -81,6 +83,8 @@
     private static final int DEFAULT_KEEP_ALIVE = 1;
     private static int callbackRequestCodeOffset = 0xface;
     private static final Object LOCK = new Object();
+    private static final int DEFAULT_THEME = R.style.com_facebook_activity_theme;
+    private static String graphApiVersion = ServerProtocol.getDefaultAPIVersion();
 
     private static final int MAX_REQUEST_CODE_RANGE = 100;
 
@@ -472,6 +476,29 @@ private static Executor getAsyncTaskExecutor() {
         return (Executor) executorObject;
     }
 
+    /**
+     * Sets the Graph API version to use when making Graph requests. This defaults to the latest
+     * Graph API version at the time when the Facebook SDK is shipped.
+     *
+     * @param graphApiVersion the Graph API version, it should be of the form "v2.7"
+     */
+    public static void setGraphApiVersion(String graphApiVersion) {
+        if (!Utility.isNullOrEmpty(graphApiVersion) &&
+                !FacebookSdk.graphApiVersion.equals(graphApiVersion)) {
+            FacebookSdk.graphApiVersion = graphApiVersion;
+        }
+    }
+
+    /**
+     * Returns the Graph API version to use when making Graph requests. This defaults to the latest
+     * Graph API version at the time when the Facebook SDK is shipped.
+     *
+     * @return the Graph API version to use.
+     */
+    public static String getGraphApiVersion() {
+        return graphApiVersion;
+    }
+
     /**
      * This method is public in order to be used by app events, please don't use directly.
      * @param context       The application context.
@@ -776,7 +803,7 @@ public static int getWebDialogTheme() {
      * @param theme A theme to use
      */
     public static void setWebDialogTheme(int theme) {
-        webDialogTheme = (theme != 0) ? theme : WebDialog.DEFAULT_THEME;
+        webDialogTheme = (theme != 0) ? theme : DEFAULT_THEME;
     }
 
     /**
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
index 9ce152301..2306bd159 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.15.0";
+    public static final String BUILD = "4.16.0";
 }
diff --git a/facebook/src/main/java/com/facebook/GraphRequest.java b/facebook/src/main/java/com/facebook/GraphRequest.java
index 17f40024c..7fb565aa4 100644
--- a/facebook/src/main/java/com/facebook/GraphRequest.java
+++ b/facebook/src/main/java/com/facebook/GraphRequest.java
@@ -257,7 +257,7 @@ public GraphRequest(
         }
 
         if (this.version == null) {
-            this.version = ServerProtocol.getAPIVersion();
+            this.version = FacebookSdk.getGraphApiVersion();
         }
     }
 
@@ -542,6 +542,10 @@ public static GraphRequest newUploadPhotoRequest(
         }
         parameters.putParcelable(PICTURE_PARAM, photoUri);
 
+        if (caption != null && !caption.isEmpty()) {
+            parameters.putString(CAPTION_PARAM, caption);
+        }
+
         return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
     }
 
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEvent.java b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
index 84702399b..52d2d7c98 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEvent.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
@@ -20,7 +20,6 @@
 
 package com.facebook.appevents;
 
-import android.content.Context;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 
@@ -29,7 +28,6 @@
 import com.facebook.appevents.internal.Constants;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
index 75cc72504..35d6bc518 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
@@ -24,8 +24,8 @@
 import android.os.Looper;
 import android.util.Log;
 
-import com.facebook.BuildConfig;
 import com.facebook.FacebookSdk;
+import com.facebook.appevents.internal.AppEventUtility;
 import com.facebook.internal.Utility;
 
 import junit.framework.Assert;
@@ -48,7 +48,7 @@
     public static synchronized void persistEvents(
             final AccessTokenAppIdPair accessTokenAppIdPair,
             final SessionEventsState appEvents) {
-        assertIsNotMainThread();
+        AppEventUtility.assertIsNotMainThread();
         PersistedEvents persistedEvents = readAndClearStore();
 
         if (persistedEvents.containsKey(accessTokenAppIdPair)) {
@@ -64,7 +64,7 @@ public static synchronized void persistEvents(
 
     public static synchronized void persistEvents(
             final AppEventCollection eventsToPersist) {
-        assertIsNotMainThread();
+        AppEventUtility.assertIsNotMainThread();
         PersistedEvents persistedEvents = readAndClearStore();
         for (AccessTokenAppIdPair accessTokenAppIdPair : eventsToPersist.keySet()) {
             SessionEventsState sessionEventsState = eventsToPersist.get(
@@ -79,7 +79,7 @@ public static synchronized void persistEvents(
 
     // Only call from singleThreadExecutor
     public static synchronized PersistedEvents readAndClearStore() {
-        assertIsNotMainThread();
+        AppEventUtility.assertIsNotMainThread();
 
         MovedClassObjectInputStream ois = null;
         PersistedEvents persistedEvents = null;
@@ -138,15 +138,6 @@ private static void saveEventsToDisk(
         }
     }
 
-    private static void assertIsNotMainThread() {
-        if (BuildConfig.DEBUG){
-            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
-            Assert.assertFalse(
-                    "Call cannot be made on the main thread",
-                    isMainThread);
-        }
-    }
-
     private static class MovedClassObjectInputStream extends ObjectInputStream {
         private static final String ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME =
                 "com.facebook.appevents.AppEventsLogger$AccessTokenAppIdPair$SerializationProxyV1";
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
index 090186847..2652736c8 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -28,7 +28,7 @@
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.content.LocalBroadcastManager;
+import android.telecom.Call;
 import android.util.Log;
 import bolts.AppLinks;
 
@@ -38,12 +38,11 @@
 import com.facebook.FacebookSdk;
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.internal.ActivityLifecycleTracker;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.internal.Constants;
-import com.facebook.internal.AppEventsLoggerUtility;
 import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.BundleJSONConverter;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
@@ -52,27 +51,19 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.io.ObjectStreamClass;
-import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
 import java.math.BigDecimal;
-import java.util.ArrayList;
 import java.util.Currency;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
@@ -201,6 +192,7 @@
     private static boolean isOpenedByApplink;
     private static boolean isActivateAppEventRequested;
     private static String pushNotificationsRegistrationId;
+    private static String externalAnalyticsUserID;
 
     /**
      * Notifies the events system that the app has launched and activate and deactivate events
@@ -702,6 +694,7 @@ static String getPushNotificationsRegistrationId() {
             return pushNotificationsRegistrationId;
         }
     }
+
     /**
      * This method is intended only for internal use by the Facebook SDK and other use is
      * unsupported.
@@ -930,6 +923,14 @@ static void resetSourceApplication() {
         isOpenedByApplink = false;
     }
 
+    static Executor getAnalyticsExecutor() {
+        if (backgroundExecutor == null) {
+            initializeTimersIfNeeded();
+        }
+
+        return backgroundExecutor;
+    }
+
     /**
      * Each app/device pair gets an GUID that is sent back with App Events and persisted with this
      * app/device pair.
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
index a7a2e74b5..f9e27b90b 100644
--- a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
@@ -27,7 +27,6 @@
 import android.os.Looper;
 import android.util.Log;
 
-import com.facebook.BuildConfig;
 import com.facebook.FacebookSdk;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.Utility;
@@ -56,6 +55,7 @@
     private static volatile SessionInfo currentSession;
     private static AtomicBoolean tracking = new AtomicBoolean(false);
     private static String appId;
+    private static long currentActivityAppearTime;
 
     public static void startTracking(Application application, final String appId) {
         if (!tracking.compareAndSet(false, true)) {
@@ -70,7 +70,7 @@ public static void startTracking(Application application, final String appId) {
                     public void onActivityCreated(
                             final Activity activity,
                             Bundle savedInstanceState) {
-                        assertIsMainThread();
+                        AppEventUtility.assertIsMainThread();
                         ActivityLifecycleTracker.onActivityCreated(activity);
                     }
 
@@ -79,13 +79,13 @@ public void onActivityStarted(Activity activity) {}
 
                     @Override
                     public void onActivityResumed(final Activity activity) {
-                        assertIsMainThread();
+                        AppEventUtility.assertIsMainThread();
                         ActivityLifecycleTracker.onActivityResumed(activity);
                     }
 
                     @Override
                     public void onActivityPaused(final Activity activity) {
-                        assertIsMainThread();
+                        AppEventUtility.assertIsMainThread();
                         ActivityLifecycleTracker.onActivityPaused(activity);
                     }
 
@@ -152,6 +152,7 @@ public static void onActivityResumed(final Activity activity) {
         foregroundActivityCount.incrementAndGet();
         cancelCurrentTask();
         final long currentTime = System.currentTimeMillis();
+        ActivityLifecycleTracker.currentActivityAppearTime = currentTime;
         Runnable handleActivityResume = new Runnable() {
             @Override
             public void run() {
@@ -249,6 +250,17 @@ public void run() {
 
                 }
 
+                long appearTime = ActivityLifecycleTracker.currentActivityAppearTime;
+                long timeSpentOnActivityInSeconds =  appearTime > 0
+                        ? (currentTime - appearTime) / 1000
+                        : 0;
+                AutomaticAnalyticsLogger.logActivityTimeSpentEvent(
+                        applicationContext,
+                        appId,
+                        activityName,
+                        timeSpentOnActivityInSeconds
+                );
+
                 currentSession.writeSessionToDisk();
             }
         };
@@ -272,13 +284,4 @@ private static void cancelCurrentTask() {
 
         currentFuture = null;
     }
-
-    private static void assertIsMainThread() {
-        if (BuildConfig.DEBUG){
-            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
-            Assert.assertTrue(
-                    "Activity Lifecycle Callback not running on main thread",
-                    isMainThread);
-        }
-    }
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java b/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java
new file mode 100644
index 000000000..c9455ce57
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.os.Looper;
+import android.support.v4.BuildConfig;
+
+import junit.framework.Assert;
+
+public class AppEventUtility {
+    public static void assertIsNotMainThread() {
+        if (BuildConfig.DEBUG) {
+            Assert.assertFalse(
+                    "Call cannot be made on the main thread",
+                    isMainThread());
+        }
+    }
+
+    public static void assertIsMainThread() {
+        if (BuildConfig.DEBUG) {
+            Assert.assertTrue(
+                    "Call must be made on the main thread",
+                    isMainThread());
+        }
+    }
+
+    private static boolean isMainThread() {
+        return Looper.myLooper() == Looper.getMainLooper();
+    }
+
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
new file mode 100644
index 000000000..b2d069d15
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
@@ -0,0 +1,46 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.content.Context;
+import android.os.Bundle;
+
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Utility.FetchedAppSettings;
+
+class AutomaticAnalyticsLogger {
+
+    public static void logActivityTimeSpentEvent(
+            Context context,
+            String appId,
+            String activityName,
+            long timeSpentInSeconds) {
+        AppEventsLogger l = AppEventsLogger.newLogger(context);
+        final FetchedAppSettings settings = Utility.queryAppSettings(appId, false);
+        if (settings.getAutomaticLoggingEnabled() && timeSpentInSeconds > 0) {
+            Bundle params = new Bundle(1);
+            params.putCharSequence(Constants.AA_TIME_SPENT_SCREEN_PARAMETER_NAME, activityName);
+            l.logEvent(Constants.AA_TIME_SPENT_EVENT_NAME, timeSpentInSeconds, params);
+        }
+    }
+
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
index 8a6035365..7df30fb0c 100644
--- a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
@@ -24,6 +24,10 @@
     public static final String LOG_TIME_APP_EVENT_KEY = "_logTime";
     public static final String EVENT_NAME_EVENT_KEY = "_eventName";
 
+    // The following are for Automatic Analytics events and parameters
+    public static final String AA_TIME_SPENT_EVENT_NAME = "fb_aa_time_spent_on_view";
+    public static final String AA_TIME_SPENT_SCREEN_PARAMETER_NAME = "fb_aa_time_spent_view_name";
+
     public static int getDefaultAppEventsSessionTimeoutInSeconds() {
         return 60;
     }
diff --git a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
index 0e94e9c05..8a314e367 100644
--- a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
+++ b/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
@@ -162,6 +162,13 @@ private static AttributionIdentifiers getAndroidIdViaService(Context context) {
     }
 
     public static AttributionIdentifiers getAttributionIdentifiers(Context context) {
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            // Calling this method from the main thread might cause this app to freeze.
+            Log.e(
+                AttributionIdentifiers.TAG,
+                "getAttributionIdentifiers should not be called from the main thread");
+        }
+
         if (recentlyFetchedIdentifiers != null &&
             System.currentTimeMillis() - recentlyFetchedIdentifiers.fetchTime <
                     IDENTIFIER_REFRESH_INTERVAL_MILLIS) {
diff --git a/facebook/src/main/java/com/facebook/internal/CustomTab.java b/facebook/src/main/java/com/facebook/internal/CustomTab.java
index f6e86ea00..9734bf811 100644
--- a/facebook/src/main/java/com/facebook/internal/CustomTab.java
+++ b/facebook/src/main/java/com/facebook/internal/CustomTab.java
@@ -28,6 +28,8 @@
 // CORONA: The custom tabs functionality is removed until the plugin uses the features that need it.
 //import android.support.customtabs.CustomTabsIntent;
 
+import com.facebook.FacebookSdk;
+
 public class CustomTab {
 
     private Uri uri;
@@ -38,7 +40,7 @@ public CustomTab(String action, Bundle parameters) {
         }
         uri = Utility.buildUri(
                 ServerProtocol.getDialogAuthority(),
-                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
                 parameters);
     }
 
diff --git a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
index 3625a3479..610acea34 100644
--- a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
@@ -487,7 +487,7 @@ private static Intent createNativeAppIntent(
         // Override the API Version for Auth
         intent.putExtra(
                 ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
-                ServerProtocol.GRAPH_API_VERSION);
+                FacebookSdk.getGraphApiVersion());
 
         intent.putExtra(
                 ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
@@ -876,7 +876,16 @@ public void run() {
             // logcat saying that the provider was not found.
             PackageManager pm = FacebookSdk.getApplicationContext().getPackageManager();
             String contentProviderName = appInfo.getPackage() + PLATFORM_PROVIDER;
-            ProviderInfo pInfo = pm.resolveContentProvider(contentProviderName, 0);
+            ProviderInfo pInfo = null;
+            try {
+                pInfo = pm.resolveContentProvider(contentProviderName, 0);
+            } catch (RuntimeException e) {
+                // Accessing a dead provider will cause an DeadObjectException in the
+                // package manager. It will be thrown as a Runtime Exception.
+                // This will cause a incorrect indication of if the FB app installed but
+                // it is better then crashing.
+                Log.e(TAG, "Failed to query content resolver.", e);
+            }
             if (pInfo != null) {
                 try {
                     c = contentResolver.query(uri, projection, null, null, null);
diff --git a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
index 160ab7439..5816c11c8 100644
--- a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
@@ -76,7 +76,7 @@
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    public static final String GRAPH_API_VERSION = "v2.7";
+    private static final String GRAPH_API_VERSION = "v2.7";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
@@ -96,7 +96,7 @@ public static final String getGraphVideoUrlBase() {
         return String.format(GRAPH_VIDEO_URL_FORMAT, FacebookSdk.getFacebookDomain());
     }
 
-    public static final String getAPIVersion() {
+    public static final String getDefaultAPIVersion() {
         return GRAPH_API_VERSION;
     }
 
diff --git a/facebook/src/main/java/com/facebook/internal/Utility.java b/facebook/src/main/java/com/facebook/internal/Utility.java
index 074ca876e..7c1411a1b 100644
--- a/facebook/src/main/java/com/facebook/internal/Utility.java
+++ b/facebook/src/main/java/com/facebook/internal/Utility.java
@@ -95,6 +95,9 @@
             "android_sdk_error_categories";
     private static final String APP_SETTING_APP_EVENTS_SESSION_TIMEOUT =
             "app_events_session_timeout";
+    private static final String APP_SETTING_APP_EVENTS_FEATURE_BITMASK =
+            "app_events_feature_bitmask";
+    private static final int AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD = 1 << 3;
     private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a2";
     private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
     private static final String DIALOG_CONFIG_NAME_KEY = "name";
@@ -110,7 +113,8 @@
             APP_SETTING_CUSTOM_TABS_ENABLED,
             APP_SETTING_DIALOG_CONFIGS,
             APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES,
-            APP_SETTING_APP_EVENTS_SESSION_TIMEOUT
+            APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
+            APP_SETTING_APP_EVENTS_FEATURE_BITMASK
     };
     private static final String APPLICATION_FIELDS = "fields";
 
@@ -146,6 +150,7 @@
         private boolean customTabsEnabled;
         private int sessionTimeoutInSeconds;
         private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
+        private boolean automaticLoggingEnabled;
         private FacebookRequestErrorClassification errorClassification;
 
         private FetchedAppSettings(boolean supportsImplicitLogging,
@@ -154,6 +159,7 @@ private FetchedAppSettings(boolean supportsImplicitLogging,
                                    boolean customTabsEnabled,
                                    int sessionTimeoutInSeconds,
                                    Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
+                                   boolean automaticLoggingEnabled,
                                    FacebookRequestErrorClassification errorClassification) {
             this.supportsImplicitLogging = supportsImplicitLogging;
             this.nuxContent = nuxContent;
@@ -162,6 +168,7 @@ private FetchedAppSettings(boolean supportsImplicitLogging,
             this.dialogConfigMap = dialogConfigMap;
             this.errorClassification = errorClassification;
             this.sessionTimeoutInSeconds = sessionTimeoutInSeconds;
+            this.automaticLoggingEnabled = automaticLoggingEnabled;
         }
 
         public boolean supportsImplicitLogging() {
@@ -184,6 +191,10 @@ public int getSessionTimeoutInSeconds() {
             return sessionTimeoutInSeconds;
         }
 
+        public boolean getAutomaticLoggingEnabled() {
+            return automaticLoggingEnabled;
+        }
+
         public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
             return dialogConfigMap;
         }
@@ -866,6 +877,9 @@ private static FetchedAppSettings parseAppSettingsFromJSON(
                         : FacebookRequestErrorClassification.createFromJSON(
                         errorClassificationJSON
                 );
+        int featureBitmask = settingsJSON.optInt(APP_SETTING_APP_EVENTS_FEATURE_BITMASK,0);
+        boolean automaticLoggingEnabled =
+                (featureBitmask & AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD) != 0;
         FetchedAppSettings result = new FetchedAppSettings(
                 settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
                 settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
@@ -875,6 +889,7 @@ private static FetchedAppSettings parseAppSettingsFromJSON(
                         APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
                         Constants.getDefaultAppEventsSessionTimeoutInSeconds()),
                 parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS)),
+                automaticLoggingEnabled,
                 errorClassification
         );
 
@@ -1196,7 +1211,8 @@ public static String getUriString(final Uri uri) {
     public static boolean isWebUri(final Uri uri) {
         return (uri != null)
                 && ("http".equalsIgnoreCase(uri.getScheme())
-                || "https".equalsIgnoreCase(uri.getScheme()));
+                || "https".equalsIgnoreCase(uri.getScheme())
+                || "fbstaging".equalsIgnoreCase(uri.getScheme()));
     }
 
     public static boolean isContentUri(final Uri uri) {
diff --git a/facebook/src/main/java/com/facebook/internal/Validate.java b/facebook/src/main/java/com/facebook/internal/Validate.java
index 5ad4b5073..72f87abcf 100644
--- a/facebook/src/main/java/com/facebook/internal/Validate.java
+++ b/facebook/src/main/java/com/facebook/internal/Validate.java
@@ -184,6 +184,7 @@ public static void hasFacebookActivity(Context context) {
         Validate.hasFacebookActivity(context, true);
     }
 
+    @SuppressWarnings("WrongConstant")
     public static void hasFacebookActivity(Context context, boolean shouldThrow) {
         Validate.notNull(context, "context");
         PackageManager pm = context.getPackageManager();
diff --git a/facebook/src/main/java/com/facebook/internal/WebDialog.java b/facebook/src/main/java/com/facebook/internal/WebDialog.java
index f92dd8230..528d55d6e 100644
--- a/facebook/src/main/java/com/facebook/internal/WebDialog.java
+++ b/facebook/src/main/java/com/facebook/internal/WebDialog.java
@@ -32,19 +32,48 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.net.http.SslError;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.util.DisplayMetrics;
-import android.view.*;
+import android.view.Display;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
 import android.webkit.SslErrorHandler;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import com.facebook.*;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookDialogException;
+import com.facebook.FacebookException;
+import com.facebook.FacebookGraphResponseException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookServiceException;
+import com.facebook.GraphRequest;
+import com.facebook.GraphRequestAsyncTask;
+import com.facebook.GraphResponse;
 import com.facebook.R;
+import com.facebook.share.internal.ShareConstants;
+import com.facebook.share.internal.ShareInternalUtility;
+import com.facebook.share.widget.ShareDialog;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
 
+import java.util.Arrays;
+import java.util.List;
 import java.util.Locale;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CountDownLatch;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -77,8 +106,6 @@
     // translucent border around the webview
     private static final int BACKGROUND_GRAY = 0xCC000000;
 
-    public static final int DEFAULT_THEME = android.R.style.Theme_Translucent_NoTitleBar;
-
     private String url;
     private String expectedRedirectUrl = REDIRECT_URI;
     private OnCompleteListener onCompleteListener;
@@ -86,6 +113,7 @@
     private ProgressDialog spinner;
     private ImageView crossImageView;
     private FrameLayout contentFrameLayout;
+    private UploadStagingResourcesTask uploadTask;
     private boolean listenerCalled = false;
     private boolean isDetached = false;
     private boolean isPageFinished = false;
@@ -154,12 +182,18 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
                 ServerProtocol.DIALOG_PARAM_SDK_VERSION,
                 String.format(Locale.ROOT, "android-%s", FacebookSdk.getSdkVersion()));
 
-        Uri uri = Utility.buildUri(
-                ServerProtocol.getDialogAuthority(),
-                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
-                parameters);
-        this.url = uri.toString();
         onCompleteListener = listener;
+
+        if (action.equals(ShareDialog.WEB_SHARE_DIALOG) &&
+                parameters.containsKey(ShareConstants.WEB_DIALOG_PARAM_MEDIA)) {
+            this.uploadTask = new UploadStagingResourcesTask(action, parameters);
+        } else {
+            Uri uri = Utility.buildUri(
+                    ServerProtocol.getDialogAuthority(),
+                    FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                    parameters);
+            this.url = uri.toString();
+        }
     }
 
     /**
@@ -205,7 +239,21 @@ public void dismiss() {
     @Override
     protected void onStart() {
         super.onStart();
-        resize();
+        if (uploadTask != null && uploadTask.getStatus() == AsyncTask.Status.PENDING) {
+            uploadTask.execute();
+            spinner.show();
+        } else {
+            resize();
+        }
+    }
+
+    @Override
+    protected void onStop() {
+        if (uploadTask != null) {
+            uploadTask.cancel(true);
+            spinner.dismiss();
+        }
+        super.onStop();
     }
 
     @Override
@@ -252,12 +300,13 @@ public void onCancel(DialogInterface dialogInterface) {
          */
         createCrossImage();
 
-        /* Now we know 'x' drawable width and height,
-         * layout the webview and add it the contentFrameLayout layout
-         */
-        int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
-
-        setUpWebView(crossWidth / 2 + 1);
+        if (this.url != null) {
+            /* Now we know 'x' drawable width and height,
+            * layout the webview and add it the contentFrameLayout layout
+            */
+            int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
+            setUpWebView(crossWidth / 2 + 1);
+        }
 
         /* Finally add the 'x' image to the contentFrameLayout layout and
         * add contentFrameLayout to the Dialog view
@@ -656,4 +705,125 @@ private void finishInit(Context context, String action, Bundle parameters) {
             }
         }
     }
+
+    private class UploadStagingResourcesTask extends AsyncTask<Void, Void, String[]> {
+        private String action;
+        private Bundle parameters;
+        private Exception[] exceptions;
+
+        UploadStagingResourcesTask(String action, Bundle parameters) {
+            this.action = action;
+            this.parameters = parameters;
+        }
+
+        @Override
+        protected String[] doInBackground(Void... args) {
+            final String[] params =
+                    parameters.getStringArray(ShareConstants.WEB_DIALOG_PARAM_MEDIA);
+            final String[] results = new String[params.length];
+            exceptions = new Exception[params.length];
+
+            final CountDownLatch latch = new CountDownLatch(params.length);
+            final ConcurrentLinkedQueue<GraphRequestAsyncTask> tasks =
+                    new ConcurrentLinkedQueue<>();
+
+            final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+            try {
+                for (int i = 0; i < params.length; i++) {
+                    if (isCancelled()) {
+                        for (AsyncTask task : tasks) {
+                            task.cancel(true);
+                        }
+                        return null;
+                    }
+                    final Uri uri = Uri.parse(params[i]);
+                    final int writeIndex = i;
+                    if (Utility.isWebUri(uri)) {
+                        results[writeIndex] = uri.toString();
+                        latch.countDown();
+                        continue;
+                    }
+                    final GraphRequest.Callback callback = new GraphRequest.Callback() {
+                        @Override
+                        public void onCompleted(GraphResponse response) {
+                            try {
+                                final FacebookRequestError error = response.getError();
+                                if (error != null) {
+                                    String message = error.getErrorMessage();
+                                    if (message == null) {
+                                        message = "Error staging photo.";
+                                    }
+                                    throw new FacebookGraphResponseException(response, message);
+                                }
+                                final JSONObject data = response.getJSONObject();
+                                if (data == null) {
+                                    throw new FacebookException("Error staging photo.");
+                                }
+                                final String stagedImageUri = data.optString("uri");
+                                if (stagedImageUri == null) {
+                                    throw new FacebookException("Error staging photo.");
+                                }
+                                results[writeIndex] = stagedImageUri;
+                            } catch(Exception e) {
+                                exceptions[writeIndex] = e;
+                            }
+                            latch.countDown();
+                        }
+                    };
+
+                    GraphRequestAsyncTask task =
+                            ShareInternalUtility.newUploadStagingResourceWithImageRequest(
+                                    accessToken,
+                                    uri,
+                                    callback).executeAsync();
+                    tasks.add(task);
+                }
+                latch.await();
+            } catch(Exception e) {
+                for (AsyncTask task : tasks) {
+                    task.cancel(true);
+                }
+                return null;
+            }
+
+            return results;
+        }
+
+        @Override
+        protected void onPostExecute(String[] results) {
+            spinner.dismiss();
+
+            for (Exception e : exceptions) {
+                if (e != null) {
+                    sendErrorToListener(e);
+                    return;
+                }
+            }
+
+            if (results == null) {
+                sendErrorToListener(new FacebookException("Failed to stage photos for web dialog"));
+                return;
+            }
+
+            List<String> resultList = Arrays.asList(results);
+            if (resultList.contains(null)) {
+                sendErrorToListener(new FacebookException("Failed to stage photos for web dialog"));
+                return;
+            }
+
+            Utility.putJSONValueInBundle(
+                    parameters,
+                    ShareConstants.WEB_DIALOG_PARAM_MEDIA,
+                    new JSONArray(resultList));
+
+            Uri uri = Utility.buildUri(
+                    ServerProtocol.getDialogAuthority(),
+                    FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                    parameters);
+
+            WebDialog.this.url = uri.toString();
+            int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
+            setUpWebView(crossWidth / 2 + 1);
+        }
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/login/LoginClient.java b/facebook/src/main/java/com/facebook/login/LoginClient.java
index f3ce3b7f1..e0beee610 100644
--- a/facebook/src/main/java/com/facebook/login/LoginClient.java
+++ b/facebook/src/main/java/com/facebook/login/LoginClient.java
@@ -154,7 +154,7 @@ public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         return false;
     }
 
-    private LoginMethodHandler [] getHandlersToTry(Request request) {
+    protected LoginMethodHandler [] getHandlersToTry(Request request) {
         ArrayList<LoginMethodHandler> handlers = new ArrayList<LoginMethodHandler>();
 
         final LoginBehavior behavior = request.getLoginBehavior();
diff --git a/facebook/src/main/java/com/facebook/login/LoginFragment.java b/facebook/src/main/java/com/facebook/login/LoginFragment.java
index 0fc60bb36..e06756791 100644
--- a/facebook/src/main/java/com/facebook/login/LoginFragment.java
+++ b/facebook/src/main/java/com/facebook/login/LoginFragment.java
@@ -58,12 +58,11 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
         if (savedInstanceState != null) {
             loginClient = savedInstanceState.getParcelable(SAVED_LOGIN_CLIENT);
             loginClient.setFragment(this);
         } else {
-            loginClient = new LoginClient(this);
+            loginClient = createLoginClient();
         }
 
         loginClient.setOnCompletedListener(new LoginClient.OnCompletedListener() {
@@ -86,6 +85,10 @@ public void onCompleted(LoginClient.Result outcome) {
         }
     }
 
+    protected LoginClient createLoginClient() {
+        return new LoginClient(this);
+    }
+
     @Override
     public void onDestroy() {
         loginClient.cancelCurrentHandler();
diff --git a/facebook/src/main/java/com/facebook/login/LoginManager.java b/facebook/src/main/java/com/facebook/login/LoginManager.java
index 7e2803fb0..8c88c8b61 100644
--- a/facebook/src/main/java/com/facebook/login/LoginManager.java
+++ b/facebook/src/main/java/com/facebook/login/LoginManager.java
@@ -523,7 +523,7 @@ private boolean resolveIntent(Intent intent) {
         return true;
     }
 
-    private Intent getFacebookActivityIntent(LoginClient.Request request) {
+    protected Intent getFacebookActivityIntent(LoginClient.Request request) {
         Intent intent = new Intent();
         intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
         intent.setAction(request.getLoginBehavior().toString());
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
index 04caec8ef..3f0c8fd27 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
@@ -38,7 +38,6 @@
 import com.facebook.internal.FragmentWrapper;
 import com.facebook.internal.Logger;
 import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.WorkQueue;
 import com.facebook.share.widget.LikeView;
@@ -1677,7 +1676,7 @@ protected void setRequest(GraphRequest request) {
             this.request = request;
             // Make sure that our requests are hitting the latest version of the API known to this
             // sdk.
-            request.setVersion(ServerProtocol.GRAPH_API_VERSION);
+            request.setVersion(FacebookSdk.getGraphApiVersion());
             request.setCallback(new GraphRequest.Callback() {
                 @Override
                 public void onCompleted(GraphResponse response) {
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
index 149f7b635..550545b96 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
@@ -44,6 +44,8 @@
     public static final String WEB_DIALOG_PARAM_ACTION_PROPERTIES = "action_properties";
     public static final String WEB_DIALOG_PARAM_QUOTE = "quote";
     public static final String WEB_DIALOG_PARAM_HASHTAG = "hashtag";
+    // Images from a SharePhotoContent
+    public static final String WEB_DIALOG_PARAM_MEDIA =   "media";
 
     // Feed Dialog Params
     public static final String WEB_DIALOG_PARAM_LINK = "link";
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
index ef0dbc864..bd5643b1c 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
@@ -138,7 +138,7 @@ private static void validatePhotoContent(
         }
     }
 
-    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
+    private static void validatePhoto(SharePhoto photo) {
         if (photo == null) {
             throw new FacebookException("Cannot share a null SharePhoto");
         }
@@ -146,17 +146,21 @@ private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
         Bitmap photoBitmap = photo.getBitmap();
         Uri photoUri = photo.getImageUrl();
 
-        if (photoBitmap == null) {
-            if (photoUri == null) {
-                throw new FacebookException(
-                        "SharePhoto does not have a Bitmap or ImageUrl specified");
-            }
+        if (photoBitmap == null && photoUri == null) {
+            throw new FacebookException("SharePhoto does not have a Bitmap or ImageUrl specified");
+        }
+    }
 
-            if (Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
-                throw new FacebookException(
-                        "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
-                                "web when sharing SharePhotoContent");
-            }
+    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
+        validatePhoto(photo);
+
+        Bitmap photoBitmap = photo.getBitmap();
+        Uri photoUri = photo.getImageUrl();
+
+        if (photoBitmap == null && Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
+            throw new FacebookException(
+                    "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
+                            "web when sharing SharePhotoContent");
         }
     }
 
@@ -169,16 +173,7 @@ private static void validatePhotoForNativeDialog(SharePhoto photo, Validator val
     }
 
     private static void validatePhotoForWebDialog(SharePhoto photo, Validator validator) {
-        if (photo == null) {
-            throw new FacebookException("Cannot share a null SharePhoto");
-        }
-
-        Uri imageUri = photo.getImageUrl();
-        if (imageUri == null || !Utility.isWebUri(imageUri)) {
-            throw new FacebookException(
-                    "SharePhoto must have a non-null imageUrl set to the Uri of an image " +
-                            "on the web");
-        }
+        validatePhoto(photo);
     }
 
     private static void validateVideoContent(
@@ -328,11 +323,6 @@ private static void validateOpenGraphValueContainerObject(
     }
 
     private static class WebShareValidator extends Validator {
-        @Override
-        public void validate(final SharePhotoContent photoContent) {
-            throw new FacebookException("Cannot share SharePhotoContent via web sharing dialogs");
-        }
-
         @Override
         public void validate(final ShareVideoContent videoContent) {
             throw new FacebookException("Cannot share ShareVideoContent via web sharing dialogs");
diff --git a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
index 68d7774b6..fd0cef464 100644
--- a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
@@ -21,27 +21,25 @@
 package com.facebook.share.internal;
 
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 
 import com.facebook.FacebookException;
 import com.facebook.internal.Utility;
-import com.facebook.internal.WebDialog;
 import com.facebook.share.model.AppGroupCreationContent;
 import com.facebook.share.model.GameRequestContent;
 import com.facebook.share.model.ShareContent;
 import com.facebook.share.model.ShareHashtag;
 import com.facebook.share.model.ShareLinkContent;
 import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.SharePhotoContent;
 
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.Collection;
-import java.util.HashMap;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * com.facebook.share.internal is solely for the use of other packages within the
@@ -156,6 +154,24 @@ public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
         return params;
     }
 
+    public static Bundle create(SharePhotoContent sharePhotoContent) {
+        final Bundle params = createBaseParameters(sharePhotoContent);
+
+        final String[] urls = new String[sharePhotoContent.getPhotos().size()];
+        Utility.map(
+                sharePhotoContent.getPhotos(),
+                new Utility.Mapper<SharePhoto, String>() {
+                    @Override
+                    public String apply(SharePhoto item) {
+                        return item.getImageUrl().toString();
+                    }
+                }).toArray(urls);
+
+        params.putStringArray(ShareConstants.WEB_DIALOG_PARAM_MEDIA ,urls);
+
+        return params;
+    }
+
     public static Bundle createBaseParameters(ShareContent shareContent) {
         Bundle params = new Bundle();
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
index a5ef533ab..4613c6a25 100644
--- a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
@@ -21,8 +21,9 @@
 package com.facebook.share.widget;
 
 import android.app.Activity;
-import android.app.Dialog;
 import android.content.Context;
+import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 
@@ -35,20 +36,28 @@
 import com.facebook.internal.DialogPresenter;
 import com.facebook.internal.FacebookDialogBase;
 import com.facebook.internal.FragmentWrapper;
+import com.facebook.internal.NativeAppCallAttachmentStore;
 import com.facebook.internal.Utility;
-import com.facebook.share.internal.ShareFeedContent;
 import com.facebook.share.Sharer;
 import com.facebook.share.internal.LegacyNativeDialogParameters;
 import com.facebook.share.internal.NativeDialogParameters;
 import com.facebook.share.internal.OpenGraphActionDialogFeature;
 import com.facebook.share.internal.ShareContentValidation;
 import com.facebook.share.internal.ShareDialogFeature;
+import com.facebook.share.internal.ShareFeedContent;
 import com.facebook.share.internal.ShareInternalUtility;
 import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.*;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareMediaContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.SharePhotoContent;
+import com.facebook.share.model.ShareVideoContent;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 
 /**
  * Provides functionality to share content via the Facebook Share Dialog
@@ -80,7 +89,7 @@
     }
 
     private static final String FEED_DIALOG = "feed";
-    private static final String WEB_SHARE_DIALOG = "share";
+    public static final String WEB_SHARE_DIALOG = "share";
     private static final String WEB_OG_SHARE_DIALOG = "share_open_graph";
 
     private static final int DEFAULT_REQUEST_CODE =
@@ -160,7 +169,8 @@ private static boolean canShowWebTypeCheck(Class<? extends ShareContent> content
         // ShareDialog instances.
 
         return ShareLinkContent.class.isAssignableFrom(contentType)
-                || ShareOpenGraphContent.class.isAssignableFrom(contentType);
+                || ShareOpenGraphContent.class.isAssignableFrom(contentType)
+                || SharePhotoContent.class.isAssignableFrom(contentType);
     }
 
     /**
@@ -360,6 +370,10 @@ public AppCall createAppCall(final ShareContent content) {
             Bundle params;
             if (content instanceof ShareLinkContent) {
                 params = WebDialogParameters.create((ShareLinkContent)content);
+            } else if (content instanceof SharePhotoContent) {
+                final SharePhotoContent photoContent =
+                        createAndMapAttachments((SharePhotoContent)content, appCall.getCallId());
+                params = WebDialogParameters.create(photoContent);
             } else {
                 params = WebDialogParameters.create((ShareOpenGraphContent)content);
             }
@@ -373,7 +387,8 @@ public AppCall createAppCall(final ShareContent content) {
         }
 
         private String getActionName(ShareContent shareContent) {
-            if (shareContent instanceof ShareLinkContent) {
+            if (shareContent instanceof ShareLinkContent
+                    || shareContent instanceof SharePhotoContent) {
                 return WEB_SHARE_DIALOG;
             } else if (shareContent instanceof ShareOpenGraphContent) {
                 return WEB_OG_SHARE_DIALOG;
@@ -381,6 +396,35 @@ private String getActionName(ShareContent shareContent) {
 
             return null;
         }
+
+        private SharePhotoContent createAndMapAttachments(
+                final SharePhotoContent content,
+                final UUID callId) {
+            final SharePhotoContent.Builder contentBuilder =
+                    new SharePhotoContent.Builder().readFrom(content);
+            final List<SharePhoto> photos = new ArrayList<>();
+            final List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
+            for (int i = 0; i < content.getPhotos().size(); i++) {
+                SharePhoto sharePhoto = content.getPhotos().get(i);
+                final Bitmap photoBitmap = sharePhoto.getBitmap();
+
+                if (photoBitmap != null) {
+                    NativeAppCallAttachmentStore.Attachment attachment =
+                            NativeAppCallAttachmentStore.createAttachment(callId, photoBitmap);
+                    sharePhoto = new SharePhoto.Builder()
+                            .readFrom(sharePhoto)
+                            .setImageUrl(Uri.parse(attachment.getAttachmentUrl()))
+                            .setBitmap(null)
+                            .build();
+                    attachments.add(attachment);
+                }
+
+                photos.add(sharePhoto);
+            }
+            contentBuilder.setPhotos(photos);
+            NativeAppCallAttachmentStore.addAttachments(attachments);
+            return contentBuilder.build();
+        }
     }
 
     private class FeedHandler extends ModeHandler {
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 3042a7bb2..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 72fe4b60b..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index ce5c8909f..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 82fd70fae..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml b/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml
new file mode 100644
index 000000000..2f5ed129a
--- /dev/null
+++ b/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml
@@ -0,0 +1,27 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<vector android:height="14dp"
+    android:viewportHeight="22.0"
+    android:viewportWidth="22.0"
+    android:width="14dp"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#3c6399" android:pathData="M20,0H2C0.895,0 0,0.896 0,2v18c0,1.105 0.895,2 2,2h9.96v-8.662H9.01V9.962h2.95v-2.49c0,-2.888 1.785,-4.46 4.393,-4.46 1.25,0 2.323,0.09 2.637,0.13v3.02l-1.81,0.002c-1.418,0 -1.693,0.666 -1.693,1.643v2.155h3.383l-0.44,3.376h-2.943V22H20c1.105,0 2,-0.895 2,-2V2c0,-1.104 -0.895,-2 -2,-2"/>
+</vector>
diff --git a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
index e0dcff318..5b7001999 100644
--- a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
+++ b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
@@ -20,11 +20,11 @@
 -->
 
 <android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:card_view="http://schemas.android.com/apk/res-auto"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    card_view:cardBackgroundColor="@android:color/transparent"
-    card_view:cardElevation="10dp">
+    app:cardBackgroundColor="@android:color/transparent"
+    app:cardElevation="10dp">
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_width="wrap_content"
@@ -42,7 +42,7 @@
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content">
 
-                <ImageView
+                <android.support.v7.widget.AppCompatImageView
                     android:layout_width="18dp"
                     android:layout_height="18dp"
                     android:layout_marginBottom="11dp"
@@ -50,7 +50,7 @@
                     android:layout_marginTop="11dp"
                     android:adjustViewBounds="false"
                     android:scaleType="fitXY"
-                    android:src="@drawable/com_facebook_button_icon_blue" />
+                    app:srcCompat="@drawable/com_facebook_favicon_blue" />
             </FrameLayout>
 
             <TextView
@@ -67,7 +67,6 @@
 
             <ProgressBar
                 android:id="@+id/progress_bar"
-                style="@android:style/Widget.Holo.Light.ProgressBar"
                 android:layout_width="wrap_content"
                 android:layout_height="0dp"
                 android:layout_alignBottom="@+id/confirmation_code"
diff --git a/facebook/src/main/res/values/styles.xml b/facebook/src/main/res/values/styles.xml
index 4488f14ad..8ec7c5cfe 100644
--- a/facebook/src/main/res/values/styles.xml
+++ b/facebook/src/main/res/values/styles.xml
@@ -114,7 +114,7 @@
         <item name="android:text">@string/com_facebook_share_button_text</item>
     </style>
 
-    <style name="com_facebook_auth_dialog" parent="android:style/Theme.Dialog">
+    <style name="com_facebook_auth_dialog" parent="@style/Theme.AppCompat.Dialog">
         <item name="android:windowIsTranslucent">true</item>
         <item name="android:windowBackground">@android:color/transparent</item>
         <item name="android:windowNoTitle">true</item>
@@ -136,4 +136,11 @@
     <style name="CardView.Dark">
         <item name="cardBackgroundColor">@color/cardview_dark_background</item>
     </style>
+
+    <style name="com_facebook_activity_theme" parent="@style/Theme.AppCompat.NoActionBar">
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowNoTitle">true</item>
+    </style>
+
 </resources>
diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index 3aca6e1c5..487c75d0c 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -25,11 +25,8 @@
 import android.net.Uri;
 import android.os.Bundle;
 
-import com.facebook.internal.GraphUtil;
-import com.facebook.internal.ServerProtocol;
 import com.facebook.share.internal.ShareInternalUtility;
 
-import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
@@ -210,7 +207,7 @@ public void testSingleGetToHttpRequest() throws Exception {
         assertTrue(connection != null);
 
         assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/" + ServerProtocol.getAPIVersion() + "/TourEiffel",
+        assertEquals("/" + FacebookSdk.getGraphApiVersion() + "/TourEiffel",
             connection.getURL().getPath());
 
         assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
index d20e42e7f..a1ee11601 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
@@ -20,31 +20,36 @@
 
 package com.facebook.appevents;
 
-import android.os.Bundle;
-
+import com.facebook.FacebookSdk;
 import com.facebook.FacebookTestCase;
 
 import org.junit.Assert;
+import org.junit.Before;
 import org.junit.Test;
+import org.robolectric.RuntimeEnvironment;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.util.UUID;
 
 public class AppEventTest extends FacebookTestCase {
+    @Before
+    public void init() {
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+    }
+
     @Test
     public void testChecksumOfAppEvent() throws Exception {
-        AppEvent appEvent = getTestAppEvent();
-        Assert.assertTrue(getTestAppEvent().isChecksumValid());
+        AppEvent appEvent = AppEventTestUtilities.getTestAppEvent();
+        Assert.assertTrue(appEvent.isChecksumValid());
         appEvent.getJSONObject().put("new_key", "corrupted");
         Assert.assertFalse(appEvent.isChecksumValid());
     }
 
     @Test
     public void testAppEventSerializedChecksum() throws Exception {
-        AppEvent appEvent1 = getTestAppEvent();
+        AppEvent appEvent1 = AppEventTestUtilities.getTestAppEvent();
 
         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
         ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
@@ -61,19 +66,4 @@ public void testAppEventSerializedChecksum() throws Exception {
         Assert.assertTrue(
                 appEvent1.getJSONObject().toString().equals(appEvent2.getJSONObject().toString()));
     }
-
-    public AppEvent getTestAppEvent() throws Exception {
-        Bundle customParams = new Bundle();
-        customParams.putString("key1", "value1");
-        customParams.putString("key2", "value2");
-        AppEvent appEvent = new AppEvent(
-                "contextName",
-                "eventName",
-                1.0,
-                customParams,
-                false,
-                UUID.fromString("65565271-1ace-4580-bd13-b2bc6d0df035"));
-        appEvent.isChecksumValid();
-        return appEvent;
-    }
 }
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
new file mode 100644
index 000000000..69414c7a7
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
@@ -0,0 +1,42 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.os.Bundle;
+
+import java.util.UUID;
+
+public class AppEventTestUtilities {
+    public static AppEvent getTestAppEvent() throws Exception {
+        Bundle customParams = new Bundle();
+        customParams.putString("key1", "value1");
+        customParams.putString("key2", "value2");
+        AppEvent appEvent = new AppEvent(
+                "contextName",
+                "eventName",
+                1.0,
+                customParams,
+                false,
+                UUID.fromString("65565271-1ace-4580-bd13-b2bc6d0df035"));
+        appEvent.isChecksumValid();
+        return appEvent;
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
new file mode 100644
index 000000000..8613d120a
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.internal.Utility;
+import com.facebook.internal.Utility.FetchedAppSettings;
+import com.facebook.FacebookTestCase;
+
+import org.json.JSONObject;
+import static org.junit.Assert.assertEquals;
+import org.junit.Test;
+import org.powermock.reflect.Whitebox;
+
+public class AutomaticAnalyticsTest extends FacebookTestCase {
+
+    @Test
+    public void testAutomaticLoggingEnabledServerConfiguration() throws Exception {
+        JSONObject settingsJSON = new JSONObject();
+        settingsJSON.put("app_events_feature_bitmask", "0");
+        FetchedAppSettings settings = Whitebox.invokeMethod(
+                Utility.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "7");
+        settings = Whitebox.invokeMethod(
+                Utility.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "23");
+        settings = Whitebox.invokeMethod(
+                Utility.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "8");
+        settings = Whitebox.invokeMethod(
+                Utility.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),true);
+
+        JSONObject noBitmaskFieldSettings = new JSONObject();
+        settings = Whitebox.invokeMethod(
+                Utility.class, "parseAppSettingsFromJSON", "123", noBitmaskFieldSettings);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
index 775fd8051..0e80ebf01 100644
--- a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
+++ b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
@@ -161,8 +161,8 @@ public void testItValidatesNullContentForWebShare() {
         ShareContentValidation.validateForWebShare(null);
     }
 
-    @Test(expected = FacebookException.class)
-    public void testItDoesNotAcceptSharePhotoContentByWeb() {
+    @Test
+    public void testItDoesAcceptSharePhotoContentByWeb() {
         SharePhoto sharePhoto = buildSharePhoto("https://facebook.com/awesome.gif");
         SharePhotoContent sharePhotoContent =
                 new SharePhotoContent.Builder().addPhoto(sharePhoto).build();
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 1e6849d48..9c0bad963 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 27 13:02:47 PDT 2016
+#Fri Sep 16 14:59:52 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index c0fb8d48b..525cd8323 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -41,9 +41,6 @@
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity
-            android:name="com.facebook.FacebookActivity"
-            android:label="@string/app_name"/>
         <activity
             android:name="com.facebook.CustomTabActivity">
             <intent-filter>
diff --git a/samples/Iconicus/AndroidManifest.xml b/samples/Iconicus/AndroidManifest.xml
index 4823cc0d7..40b0a1059 100644
--- a/samples/Iconicus/AndroidManifest.xml
+++ b/samples/Iconicus/AndroidManifest.xml
@@ -57,9 +57,6 @@
                 <action android:name="android.intent.action.VIEW" />
             </intent-filter>
         </activity>
-        <activity
-            android:name="com.facebook.FacebookActivity"
-            android:label="@string/app_name"/>
         <activity
             android:name="com.facebook.CustomTabActivity">
             <intent-filter>
diff --git a/samples/LoginSample/build.gradle b/samples/LoginSample/build.gradle
new file mode 100644
index 000000000..eb806cb5e
--- /dev/null
+++ b/samples/LoginSample/build.gradle
@@ -0,0 +1,43 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.facebook.samples.loginsample"
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+        versionCode 1
+        versionName "1.0"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile project(':facebook')
+    compile 'com.android.support:appcompat-v7:24.1.1'
+    compile 'com.facebook.android:account-kit-sdk:4.+'
+    testCompile 'junit:junit:4.12'
+}
+
diff --git a/samples/LoginSample/proguard-rules.pro b/samples/LoginSample/proguard-rules.pro
new file mode 100644
index 000000000..a8376722c
--- /dev/null
+++ b/samples/LoginSample/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/abeatte/resources/android_sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java b/samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
new file mode 100644
index 000000000..3730d148b
--- /dev/null
+++ b/samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
@@ -0,0 +1,33 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
diff --git a/samples/LoginSample/src/main/AndroidManifest.xml b/samples/LoginSample/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..4028e1e9f
--- /dev/null
+++ b/samples/LoginSample/src/main/AndroidManifest.xml
@@ -0,0 +1,116 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.facebook.samples.loginsample">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_SMS" />
+    <uses-permission android:name="android.permission.GET_ACCOUNTS" />
+
+    <application
+        android:name=".LoginSampleApplication"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id"/>
+
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <activity android:label="@string/label_facebook_login"
+            android:name=".facebook.FacebookLoginActivity"/>
+
+        <activity android:name=".facebook.PermissionSelectActivity"/>
+
+        <activity android:label="@string/label_account_kit_login"
+            android:name=".accountkit.AccountKitLoginActivity"/>
+
+        <activity
+            android:name=".accountkit.ErrorActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <activity
+            android:name=".accountkit.CodeActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <activity
+            android:name=".accountkit.TokenActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <!--Account Kit-->
+
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data android:name="com.facebook.accountkit.ApplicationName"
+            android:value="@string/app_name" />
+        <meta-data android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+        <meta-data android:name="com.facebook.accountkit.ClientToken"
+            android:value="@string/ACCOUNT_KIT_CLIENT_TOKEN" />
+
+        <activity
+            android:name="com.facebook.accountkit.ui.AccountKitActivity"
+            android:theme="@style/AppLoginTheme"
+            tools:replace="android:theme">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/ak_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <activity android:name="com.facebook.accountkit.ui.AccountKitEmailRedirectActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/ak_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+</manifest>
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/LoginSampleApplication.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/LoginSampleApplication.java
new file mode 100644
index 000000000..fc3647bfa
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/LoginSampleApplication.java
@@ -0,0 +1,36 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class LoginSampleApplication extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java
new file mode 100644
index 000000000..4c31f324a
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java
@@ -0,0 +1,67 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample;
+
+import android.content.Intent;
+import android.support.v7.app.AppCompatActivity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import com.facebook.FacebookSdk;
+import com.facebook.accountkit.AccountKit;
+import com.facebook.samples.loginsample.accountkit.AccountKitLoginActivity;
+import com.facebook.samples.loginsample.facebook.FacebookLoginActivity;
+
+public class MainActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        initFacebookLogin();
+        initAccountKitLogin();
+    }
+
+    private void initFacebookLogin() {
+        FacebookSdk.sdkInitialize(getApplicationContext());
+
+        final Button fbLoginButton = (Button) findViewById(R.id.fb_login_button);
+        fbLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(MainActivity.this, FacebookLoginActivity.class));
+            }
+        });
+    }
+
+    private void initAccountKitLogin() {
+        AccountKit.initialize(getApplicationContext());
+
+        final Button akLoginButton = (Button) findViewById(R.id.ak_login_button);
+        akLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                startActivity(new Intent(MainActivity.this, AccountKitLoginActivity.class));
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java
new file mode 100644
index 000000000..836b90a36
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java
@@ -0,0 +1,606 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.Manifest;
+import android.annotation.TargetApi;
+import android.app.AlertDialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.content.LocalBroadcastManager;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
+import android.widget.Spinner;
+import android.widget.Switch;
+import android.widget.Toast;
+
+import com.facebook.accountkit.AccessToken;
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.AccountKitLoginResult;
+import com.facebook.accountkit.ui.AccountKitConfiguration;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
+public class AccountKitLoginActivity extends AppCompatActivity {
+    private static final int FRAMEWORK_REQUEST_CODE = 1;
+
+    private Switch advancedUISwitch;
+    private ButtonType confirmButton;
+    private ButtonType entryButton;
+    private String initialStateParam;
+    private int nextPermissionsRequestCode = 4000;
+    private final Map<Integer, OnCompleteListener> permissionsListeners = new HashMap<>();
+    private int selectedThemeId = -1;
+    private BroadcastReceiver switchLoginTypeReceiver;
+    private TextPosition textPosition;
+
+    private interface OnCompleteListener {
+        void onComplete();
+    }
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.account_kit_activity);
+
+        if (AccountKit.getCurrentAccessToken() != null) {
+            showHelloActivity(null);
+        }
+
+        final Spinner themeSpinner = (Spinner) findViewById(R.id.theme_spinner);
+        if (themeSpinner != null) {
+            final ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
+                    this,
+                    R.array.theme_options,
+                    android.R.layout.simple_spinner_dropdown_item);
+            themeSpinner.setAdapter(adapter);
+            themeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+                @Override
+                public void onItemSelected(
+                        final AdapterView<?> parent,
+                        final View view,
+                        final int position,
+                        final long id) {
+                    switch (position) {
+                        case 0:
+                            selectedThemeId = R.style.AppLoginTheme;
+                            break;
+                        case 1:
+                            selectedThemeId = R.style.AppLoginTheme_Salmon;
+                            break;
+                        case 2:
+                            selectedThemeId = R.style.AppLoginTheme_Yellow;
+                            break;
+                        case 3:
+                            selectedThemeId = R.style.AppLoginTheme_Red;
+                            break;
+                        case 4:
+                            selectedThemeId = R.style.AppLoginTheme_Dog;
+                            break;
+                        case 5:
+                            selectedThemeId = R.style.AppLoginTheme_Bicycle;
+                            break;
+                        case 6:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_A;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        case 7:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_B;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        case 8:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_C;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        default:
+                            selectedThemeId = -1;
+                            break;
+                    }
+                }
+
+                @Override
+                public void onNothingSelected(final AdapterView<?> parent) {
+                    selectedThemeId = -1;
+                }
+            });
+        }
+
+        advancedUISwitch = (Switch) findViewById(R.id.advanced_ui_switch);
+
+        final AccountKitLoginActivity thisActivity = this;
+        final LinearLayout advancedUIOptionsLayout =
+                (LinearLayout) findViewById(R.id.advanced_ui_options);
+
+        final List<CharSequence> buttonNames = new ArrayList<>();
+        buttonNames.add("Default");
+        for (ButtonType buttonType : ButtonType.values()) {
+            buttonNames.add(buttonType.name());
+        }
+        final ArrayAdapter<CharSequence> buttonNameAdapter
+                = new ArrayAdapter<>(
+                thisActivity,
+                android.R.layout.simple_spinner_dropdown_item,
+                buttonNames);
+
+        advancedUISwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                if (isChecked) {
+                    advancedUIOptionsLayout.setVisibility(View.VISIBLE);
+
+                    final Spinner entryButtonSpinner =
+                            (Spinner) findViewById(R.id.entry_button_spinner);
+                    if (entryButtonSpinner != null) {
+                        entryButtonSpinner.setAdapter(buttonNameAdapter);
+                        entryButtonSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past that
+                                        if (position > 0) {
+                                            entryButton = ButtonType.valueOf(
+                                                    entryButtonSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            entryButton = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(final AdapterView<?> parent) {
+                                        entryButton = null;
+                                    }
+                                });
+                    }
+
+                    final Spinner confirmButtonSpinner =
+                            (Spinner) findViewById(R.id.confirm_button_spinner);
+                    if (confirmButtonSpinner != null) {
+                        confirmButtonSpinner.setAdapter(buttonNameAdapter);
+                        confirmButtonSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past
+                                        // that
+                                        if (position > 0) {
+                                            confirmButton = ButtonType.valueOf(
+                                                    confirmButtonSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            confirmButton = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(
+                                            final AdapterView<?> parent) {
+                                        confirmButton = null;
+                                    }
+                                });
+                    }
+
+                    final Spinner textPositionSpinner =
+                            (Spinner) findViewById(R.id.text_position_spinner);
+                    if (textPositionSpinner != null) {
+                        final List<CharSequence> textPositions = new ArrayList<>();
+                        textPositions.add("Default");
+                        for (TextPosition textPosition : TextPosition.values()) {
+                            textPositions.add(textPosition.name());
+                        }
+                        final ArrayAdapter<CharSequence> textPositionAdapter
+                                = new ArrayAdapter<>(
+                                thisActivity,
+                                android.R.layout.simple_spinner_dropdown_item,
+                                textPositions);
+
+                        textPositionSpinner.setAdapter(textPositionAdapter);
+                        textPositionSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past
+                                        // that
+                                        if (position > 0) {
+                                            textPosition = TextPosition.valueOf(
+                                                    textPositionSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            textPosition = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(
+                                            final AdapterView<?> parent) {
+                                        textPosition = null;
+                                    }
+                                });
+                    }
+                } else if (isReverbThemeSelected()) {
+                    advancedUISwitch.setChecked(true);
+                    Toast.makeText(
+                            AccountKitLoginActivity.this,
+                            R.string.reverb_advanced_ui_required,
+                            Toast.LENGTH_LONG)
+                            .show();
+                } else {
+                    advancedUIOptionsLayout.setVisibility(View.GONE);
+                }
+            }
+        });
+    }
+
+    @Override
+    protected void onDestroy() {
+        LocalBroadcastManager.getInstance(getApplicationContext())
+                .unregisterReceiver(switchLoginTypeReceiver);
+
+        super.onDestroy();
+    }
+
+    public void onLoginEmail(final View view) {
+        onLogin(LoginType.EMAIL);
+    }
+
+    public void onLoginPhone(final View view) {
+        onLogin(LoginType.PHONE);
+    }
+
+    @Override
+    protected void onActivityResult(
+            final int requestCode,
+            final int resultCode,
+            final Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        if (requestCode != FRAMEWORK_REQUEST_CODE) {
+            return;
+        }
+
+        final String toastMessage;
+        final AccountKitLoginResult loginResult = AccountKit.loginResultWithIntent(data);
+        if (loginResult == null || loginResult.wasCancelled()) {
+            toastMessage = "Login Cancelled";
+        } else if (loginResult.getError() != null) {
+            toastMessage = loginResult.getError().getErrorType().getMessage();
+            showErrorActivity(loginResult.getError());
+        } else {
+            final AccessToken accessToken = loginResult.getAccessToken();
+            final String authorizationCode = loginResult.getAuthorizationCode();
+            final long tokenRefreshIntervalInSeconds =
+                    loginResult.getTokenRefreshIntervalInSeconds();
+            if (accessToken != null) {
+                toastMessage = "Success:" + accessToken.getAccountId()
+                        + tokenRefreshIntervalInSeconds;
+                showHelloActivity(loginResult.getFinalAuthorizationState());
+            } else if (authorizationCode != null) {
+                toastMessage = String.format(
+                        "Success:%s...",
+                        authorizationCode.substring(0, 10));
+                showHelloActivity(authorizationCode, loginResult.getFinalAuthorizationState());
+            } else {
+                toastMessage = "Unknown response type";
+            }
+        }
+
+        Toast.makeText(
+                this,
+                toastMessage,
+                Toast.LENGTH_LONG)
+                .show();
+    }
+
+    private com.facebook.accountkit.ui.AccountKitActivity.ResponseType getResponseType() {
+        final Switch responseTypeSwitch = (Switch) findViewById(R.id.response_type_switch);
+        if (responseTypeSwitch != null && responseTypeSwitch.isChecked()) {
+            return com.facebook.accountkit.ui.AccountKitActivity.ResponseType.TOKEN;
+        } else {
+            return com.facebook.accountkit.ui.AccountKitActivity.ResponseType.CODE;
+        }
+    }
+
+    private AccountKitConfiguration.AccountKitConfigurationBuilder createAccountKitConfiguration(
+            final LoginType loginType) {
+        AccountKitConfiguration.AccountKitConfigurationBuilder configurationBuilder
+                = new AccountKitConfiguration.AccountKitConfigurationBuilder(
+                loginType,
+                getResponseType());
+        final Switch titleTypeSwitch = (Switch) findViewById(R.id.title_type_switch);
+        final Switch stateParamSwitch = (Switch) findViewById(R.id.state_param_switch);
+        final Switch facebookNotificationsSwitch =
+                (Switch) findViewById(R.id.facebook_notification_switch);
+        final Switch useManualWhiteListBlacklist =
+                (Switch) findViewById(R.id.whitelist_blacklist_switch);
+        final Switch readPhoneStateSwitch =
+                (Switch) findViewById(R.id.read_phone_state_switch);
+        final Switch receiveSMS =
+                (Switch) findViewById(R.id.receive_sms_switch);
+
+        if (titleTypeSwitch != null && titleTypeSwitch.isChecked()) {
+            configurationBuilder
+                    .setTitleType(com.facebook.accountkit.ui.AccountKitActivity.TitleType.APP_NAME);
+        }
+        if (advancedUISwitch != null && advancedUISwitch.isChecked()) {
+            if (isReverbThemeSelected()) {
+                if (switchLoginTypeReceiver == null) {
+                    switchLoginTypeReceiver = new BroadcastReceiver() {
+                        @Override
+                        public void onReceive(final Context context, final Intent intent) {
+                            final String loginTypeString
+                                    = intent.getStringExtra(ReverbUIManager.LOGIN_TYPE_EXTRA);
+                            if (loginTypeString == null) {
+                                return;
+                            }
+                            final LoginType loginType = LoginType.valueOf(loginTypeString);
+                            if (loginType == null) {
+                                return;
+                            }
+                            onLogin(loginType);
+                        }
+                    };
+                    LocalBroadcastManager.getInstance(getApplicationContext())
+                            .registerReceiver(
+                                    switchLoginTypeReceiver,
+                                    new IntentFilter(ReverbUIManager.SWITCH_LOGIN_TYPE_EVENT));
+                }
+                configurationBuilder.setAdvancedUIManager(new ReverbUIManager(
+                        confirmButton,
+                        entryButton,
+                        loginType,
+                        textPosition,
+                        selectedThemeId));
+            } else {
+                configurationBuilder.setAdvancedUIManager(new AccountKitSampleAdvancedUIManager(
+                        confirmButton,
+                        entryButton,
+                        textPosition,
+                        loginType));
+            }
+        }
+        if (stateParamSwitch != null && stateParamSwitch.isChecked()) {
+            initialStateParam = UUID.randomUUID().toString();
+            configurationBuilder.setInitialAuthState(initialStateParam);
+        }
+        if (facebookNotificationsSwitch != null && !facebookNotificationsSwitch.isChecked()) {
+            configurationBuilder.setFacebookNotificationsEnabled(false);
+        }
+        if (selectedThemeId > 0) {
+            configurationBuilder.setTheme(selectedThemeId);
+        }
+        if (useManualWhiteListBlacklist != null && useManualWhiteListBlacklist.isChecked()) {
+            final String[] blackList
+                    = getResources().getStringArray(R.array.blacklistedSmsCountryCodes);
+            final String[] whiteList
+                    = getResources().getStringArray(R.array.whitelistedSmsCountryCodes);
+            configurationBuilder.setSMSBlacklist(blackList);
+            configurationBuilder.setSMSWhitelist(whiteList);
+        }
+        if (readPhoneStateSwitch != null && !(readPhoneStateSwitch.isChecked())) {
+            configurationBuilder.setReadPhoneStateEnabled(false);
+        }
+        if (receiveSMS != null && !receiveSMS.isChecked()) {
+            configurationBuilder.setReceiveSMS(false);
+        }
+
+        return configurationBuilder;
+    }
+
+    private boolean isReverbThemeSelected() {
+        return selectedThemeId == R.style.AppLoginTheme_Reverb_A
+                || selectedThemeId == R.style.AppLoginTheme_Reverb_B
+                || selectedThemeId == R.style.AppLoginTheme_Reverb_C;
+    }
+
+    private void onLogin(final LoginType loginType) {
+        final Intent intent = new Intent(this, com.facebook.accountkit.ui.AccountKitActivity.class);
+        final AccountKitConfiguration.AccountKitConfigurationBuilder configurationBuilder
+                = createAccountKitConfiguration(loginType);
+        final AccountKitConfiguration configuration = configurationBuilder.build();
+        intent.putExtra(
+                com.facebook.accountkit.ui.AccountKitActivity.ACCOUNT_KIT_ACTIVITY_CONFIGURATION,
+                configuration);
+        OnCompleteListener completeListener = new OnCompleteListener() {
+            @Override
+            public void onComplete() {
+                startActivityForResult(intent, FRAMEWORK_REQUEST_CODE);
+            }
+        };
+        switch (loginType) {
+            case EMAIL:
+                final OnCompleteListener getAccountsCompleteListener = completeListener;
+                completeListener = new OnCompleteListener() {
+                    @Override
+                    public void onComplete() {
+                        requestPermissions(
+                                Manifest.permission.GET_ACCOUNTS,
+                                R.string.permissions_get_accounts_title,
+                                R.string.permissions_get_accounts_message,
+                                getAccountsCompleteListener);
+                    }
+                };
+                break;
+            case PHONE:
+                if (configuration.isReceiveSMSEnabled()) {
+                    final OnCompleteListener receiveSMSCompleteListener = completeListener;
+                    completeListener = new OnCompleteListener() {
+                        @Override
+                        public void onComplete() {
+                            requestPermissions(
+                                    Manifest.permission.RECEIVE_SMS,
+                                    R.string.permissions_receive_sms_title,
+                                    R.string.permissions_receive_sms_message,
+                                    receiveSMSCompleteListener);
+                        }
+                    };
+                }
+                if (configuration.isReadPhoneStateEnabled()) {
+                    final OnCompleteListener readPhoneStateCompleteListener = completeListener;
+                    completeListener = new OnCompleteListener() {
+                        @Override
+                        public void onComplete() {
+                            requestPermissions(
+                                    Manifest.permission.READ_PHONE_STATE,
+                                    R.string.permissions_read_phone_state_title,
+                                    R.string.permissions_read_phone_state_message,
+                                    readPhoneStateCompleteListener);
+                        }
+                    };
+                }
+                break;
+        }
+        completeListener.onComplete();
+    }
+
+    private void showHelloActivity(final String finalState) {
+        final Intent intent = new Intent(this, TokenActivity.class);
+        intent.putExtra(
+                TokenActivity.HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA,
+                initialStateParam);
+        intent.putExtra(TokenActivity.HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA, finalState);
+        startActivity(intent);
+    }
+
+    private void showHelloActivity(final String code, final String finalState) {
+        final Intent intent = new Intent(this, CodeActivity.class);
+        intent.putExtra(CodeActivity.HELLO_CODE_ACTIVITY_CODE_EXTRA, code);
+        intent.putExtra(
+                CodeActivity.HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA,
+                initialStateParam);
+        intent.putExtra(CodeActivity.HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA, finalState);
+
+        startActivity(intent);
+    }
+
+    private void showErrorActivity(final AccountKitError error) {
+        final Intent intent = new Intent(this, ErrorActivity.class);
+        intent.putExtra(ErrorActivity.HELLO_TOKEN_ACTIVITY_ERROR_EXTRA, error);
+
+        startActivity(intent);
+    }
+
+    private void requestPermissions(
+            final String permission,
+            final int rationaleTitleResourceId,
+            final int rationaleMessageResourceId,
+            final OnCompleteListener listener) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            if (listener != null) {
+                listener.onComplete();
+            }
+            return;
+        }
+
+        checkRequestPermissions(
+                permission,
+                rationaleTitleResourceId,
+                rationaleMessageResourceId,
+                listener);
+    }
+
+    @TargetApi(23)
+    private void checkRequestPermissions(
+            final String permission,
+            final int rationaleTitleResourceId,
+            final int rationaleMessageResourceId,
+            final OnCompleteListener listener) {
+        if (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED) {
+            if (listener != null) {
+                listener.onComplete();
+            }
+            return;
+        }
+
+        final int requestCode = nextPermissionsRequestCode++;
+        permissionsListeners.put(requestCode, listener);
+
+        if (shouldShowRequestPermissionRationale(permission)) {
+            new AlertDialog.Builder(this)
+                    .setTitle(rationaleTitleResourceId)
+                    .setMessage(rationaleMessageResourceId)
+                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(final DialogInterface dialog, final int which) {
+                            requestPermissions(new String[] { permission }, requestCode);
+                        }
+                    })
+                    .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(final DialogInterface dialog, final int which) {
+                            // ignore and clean up the listener
+                            permissionsListeners.remove(requestCode);
+                        }
+                    })
+                    .setIcon(android.R.drawable.ic_dialog_alert)
+                    .show();
+        } else {
+            requestPermissions(new String[]{ permission }, requestCode);
+        }
+    }
+
+    @TargetApi(23)
+    @SuppressWarnings("unused")
+    @Override
+    public void onRequestPermissionsResult(final int requestCode,
+                                           final @NonNull String permissions[],
+                                           final @NonNull int[] grantResults) {
+        final OnCompleteListener permissionsListener = permissionsListeners.remove(requestCode);
+        if (permissionsListener != null
+                && grantResults.length > 0
+                && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            permissionsListener.onComplete();
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java
new file mode 100644
index 000000000..669acdd8f
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java
@@ -0,0 +1,245 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.ui.AdvancedUIManager;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+public class AccountKitSampleAdvancedUIManager implements AdvancedUIManager, Parcelable {
+    private static final int ACTION_BAR_HEIGHT = 40;
+    private static final int BODY_HEIGHT = 80;
+    private static final int FOOTER_HEIGHT = 120;
+    private static final int HEADER_HEIGHT = 80;
+
+    private final ButtonType confirmButton;
+    private final ButtonType entryButton;
+    private AccountKitError error;
+    private LoginType loginType;
+    private AdvancedUIManagerListener listener;
+    private final TextPosition textPosition;
+
+    public AccountKitSampleAdvancedUIManager(
+            final ButtonType confirmButton,
+            final ButtonType entryButton,
+            final TextPosition textPosition,
+            final LoginType loginType) {
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.textPosition = textPosition;
+        this.loginType = loginType;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getActionBarFragment(final LoginFlowState state) {
+        final PlaceholderFragment fragment = getPlaceholderFragment(
+                state,
+                ACTION_BAR_HEIGHT,
+                "Action Bar");
+        if (fragment != null) {
+            fragment.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(final View v) {
+                    listener.onBack();
+                }
+            });
+        }
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getBodyFragment(final LoginFlowState state) {
+        return getPlaceholderFragment(state, BODY_HEIGHT, "Body");
+    }
+
+    @Override
+    @Nullable
+    public ButtonType getButtonType(final LoginFlowState state) {
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                return entryButton;
+            case CODE_INPUT:
+                return confirmButton;
+            default:
+                return null;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Fragment getFooterFragment(final LoginFlowState state) {
+        return getPlaceholderFragment(state, FOOTER_HEIGHT, "Footer");
+    }
+
+    @Override
+    @Nullable
+    public Fragment getHeaderFragment(final LoginFlowState state) {
+        if (state != LoginFlowState.ERROR) {
+            return getPlaceholderFragment(state, HEADER_HEIGHT, "Header");
+        }
+        final String errorMessage = getErrorMessage();
+        if (errorMessage == null) {
+            return PlaceholderFragment.create(HEADER_HEIGHT, R.string.error_message);
+        } else {
+            return PlaceholderFragment.create(HEADER_HEIGHT, errorMessage);
+        }
+    }
+
+    @Override
+    @Nullable
+    public TextPosition getTextPosition(final LoginFlowState state) {
+        return textPosition;
+    }
+
+    @Override
+    public void setAdvancedUIManagerListener(final AdvancedUIManagerListener listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    public void onError(final AccountKitError error) {
+        this.error = error;
+    }
+
+    private String getErrorMessage() {
+        if (error == null) {
+            return null;
+        }
+
+        final String message = error.getUserFacingMessage();
+        if (message == null) {
+            return null;
+        }
+
+        return message;
+    }
+
+    @Nullable
+    private PlaceholderFragment getPlaceholderFragment(
+            final LoginFlowState state,
+            final int height,
+            final String suffix) {
+        final String prefix;
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+                prefix = "Custom Phone Number ";
+                break;
+            case EMAIL_INPUT:
+                prefix = "Custom Email ";
+                break;
+            case EMAIL_VERIFY:
+                prefix = "Custom Email Verify ";
+                break;
+            case SENDING_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        prefix = "Custom Sending Email ";
+                        break;
+                    case PHONE:
+                        prefix = "Custom Sending Code ";
+                        break;
+                    default:
+                        return null;
+                }
+                break;
+            case SENT_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        prefix = "Custom Sent Email ";
+                        break;
+                    case PHONE:
+                        prefix = "Custom Sent Code ";
+                        break;
+                    default:
+                        return null;
+                }
+                break;
+            case CODE_INPUT:
+                prefix = "Custom Code Input ";
+                break;
+            case VERIFYING_CODE:
+                prefix = "Custom Verifying ";
+                break;
+            case VERIFIED:
+                prefix = "Custom Verified ";
+                break;
+            case RESEND:
+                prefix = "Custom Resend ";
+                break;
+            case ERROR:
+                prefix = "Custom Error ";
+                break;
+            default:
+                return null;
+        }
+        return PlaceholderFragment.create(height, prefix.concat(suffix));
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(final Parcel dest, final int flags) {
+        dest.writeString(confirmButton != null ? confirmButton.name() : null);
+        dest.writeString(entryButton != null ? entryButton.name() : null);
+        dest.writeString(textPosition != null ? textPosition.name() : null);
+        dest.writeString(loginType.name());
+    }
+
+    public static final Creator<AccountKitSampleAdvancedUIManager> CREATOR
+            = new Creator<AccountKitSampleAdvancedUIManager>() {
+        @Override
+        public AccountKitSampleAdvancedUIManager createFromParcel(final Parcel source) {
+            String s = source.readString();
+            final ButtonType confirmButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final ButtonType entryButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final TextPosition textPosition = s == null ? null : TextPosition.valueOf(s);
+            final LoginType loginType = LoginType.valueOf(source.readString());
+            return new AccountKitSampleAdvancedUIManager(
+                    confirmButton,
+                    entryButton,
+                    textPosition,
+                    loginType);
+        }
+
+        @Override
+        public AccountKitSampleAdvancedUIManager[] newArray(final int size) {
+            return new AccountKitSampleAdvancedUIManager[size];
+        }
+    };
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java
new file mode 100644
index 000000000..f679d79ff
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java
@@ -0,0 +1,88 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.AccountKit;
+import com.facebook.samples.loginsample.R;
+
+public class CodeActivity extends Activity {
+    static final String HELLO_CODE_ACTIVITY_CODE_EXTRA = "HELLO_CODE_ACTIVITY_CODE_EXTRA";
+    static final String HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA =
+            "HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA";
+    static final String HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA =
+            "HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_hello_code);
+
+        final String code = getIntent().getStringExtra(HELLO_CODE_ACTIVITY_CODE_EXTRA);
+        final String finalState =
+                getIntent().getStringExtra(HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA);
+        final String initialState =
+                getIntent().getStringExtra(HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA);
+
+        if (code != null) {
+            final TextView codeView = (TextView) findViewById(R.id.code);
+            if (codeView != null) {
+                codeView.setText(code);
+            }
+        }
+
+        if (initialState != null) {
+            final TextView initialStateView = (TextView) findViewById(R.id.initial_state);
+            final TextView initialStateLabelView =
+                    (TextView) findViewById(R.id.initial_state_label);
+            if (initialStateView != null && initialStateLabelView != null) {
+                initialStateView.setText(initialState);
+                initialStateView.setVisibility(View.VISIBLE);
+                initialStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (finalState != null) {
+            final TextView finalStateView = (TextView) findViewById(R.id.final_state);
+            final TextView finalStateLabelView =
+                    (TextView) findViewById(R.id.final_state_label);
+            if (finalStateView != null && finalStateLabelView != null) {
+                finalStateView.setText(finalState);
+                finalStateView.setVisibility(View.VISIBLE);
+                finalStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java
new file mode 100644
index 000000000..3aefa408c
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.samples.loginsample.R;
+
+public class ErrorActivity extends Activity {
+    static final String HELLO_TOKEN_ACTIVITY_ERROR_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_ERROR_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_error);
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+
+        final AccountKitError error =
+                getIntent().getParcelableExtra(HELLO_TOKEN_ACTIVITY_ERROR_EXTRA);
+
+        final TextView errorView = (TextView) findViewById(R.id.error);
+        if (errorView != null) {
+            if (error != null) {
+                errorView.setText(error.toString());
+            } else {
+                errorView.setText(R.string.na);
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java
new file mode 100644
index 000000000..ffe5a5241
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import com.facebook.samples.loginsample.R;
+
+@SuppressWarnings("All")
+class InflateFragment extends Fragment {
+    @TargetApi(11)
+    @Override
+    public void onInflate(final AttributeSet attrs, final Bundle savedInstanceState) {
+        super.onInflate(attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    @TargetApi(21)
+    @Override
+    public void onInflate(
+            final Activity activity,
+            final AttributeSet attrs,
+            final Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    @TargetApi(23)
+    @Override
+    public void onInflate(
+            final Context context,
+            final AttributeSet attrs,
+            final Bundle savedInstanceState) {
+        super.onInflate(context, attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    protected void handleAttributes(final AttributeSet attrs) {
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java
new file mode 100644
index 000000000..d15c55865
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java
@@ -0,0 +1,105 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+import com.facebook.samples.loginsample.R;
+
+public class PlaceholderFragment extends Fragment {
+    private static final String HEIGHT_KEY = "height";
+    private static final String TEXT_KEY = "text";
+    private static final String TEXT_RESOURCE_ID_KEY = "textResourceId";
+
+    private View.OnClickListener onClickListener;
+
+    public static PlaceholderFragment create(final int height, final String text) {
+        final PlaceholderFragment fragment = new PlaceholderFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_KEY, height);
+        arguments.putString(TEXT_KEY, text);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    public static PlaceholderFragment create(final int height, final int textResourceId) {
+        final PlaceholderFragment fragment = new PlaceholderFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_KEY, height);
+        arguments.putInt(TEXT_RESOURCE_ID_KEY, textResourceId);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    public void setOnClickListener(final View.OnClickListener onClickListener) {
+        this.onClickListener = onClickListener;
+        final View view = getView();
+        if (view != null) {
+            view.setOnClickListener(onClickListener);
+        }
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            @Nullable final Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_placeholder, container, false);
+        }
+
+        final Bundle arguments = getArguments();
+        if (arguments != null) {
+            final int height = arguments.getInt(HEIGHT_KEY, -1);
+            if (height >= 0) {
+                view.getLayoutParams().height = (int) TypedValue.applyDimension(
+                        TypedValue.COMPLEX_UNIT_DIP,
+                        height,
+                        getResources().getDisplayMetrics());
+            }
+
+            final String text = arguments.getString(TEXT_KEY);
+            final int textResourceId = arguments.getInt(TEXT_RESOURCE_ID_KEY, -1);
+            final TextView textView = (TextView) view.findViewById(R.id.text_view);
+            if (textView != null) {
+                if (text != null) {
+                    textView.setText(text);
+                } else if (textResourceId > 0) {
+                    textView.setText(textResourceId);
+                }
+            }
+        }
+
+        if (onClickListener != null) {
+            view.setOnClickListener(onClickListener);
+        }
+
+        return view;
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbActionBarFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbActionBarFragment.java
new file mode 100644
index 000000000..13dfa8adb
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbActionBarFragment.java
@@ -0,0 +1,116 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbActionBarFragment extends Fragment {
+    private static final String STATE_KEY = "state";
+
+    private LoginFlowState state = LoginFlowState.NONE;
+
+    public void setState(final LoginFlowState state) {
+        if (state == null) {
+            return;
+        }
+        this.state = state;
+        updateTitleView(getView());
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            final String stateString = savedInstanceState.getString(STATE_KEY);
+            state = stateString == null ? state : LoginFlowState.valueOf(stateString);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_reverb_action_bar, container, false);
+        }
+        if (view == null) {
+            return null;
+        }
+        updateTitleView(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putString(STATE_KEY, state.name());
+    }
+
+    private void updateTitleView(@Nullable final View view) {
+        if (view == null || state == null) {
+            return;
+        }
+        final TextView titleView = (TextView) view.findViewById(R.id.title_view);
+        if (titleView != null) {
+            switch (state) {
+                case PHONE_NUMBER_INPUT:
+                    titleView.setText(R.string.reverb_title_phone_number_input);
+                    break;
+                case EMAIL_INPUT:
+                    titleView.setText(R.string.reverb_title_email_input);
+                    break;
+                case SENDING_CODE:
+                    titleView.setText(R.string.reverb_title_sending_code);
+                    break;
+                case SENT_CODE:
+                    titleView.setText(R.string.reverb_title_sent_code);
+                    break;
+                case CODE_INPUT:
+                    titleView.setText(R.string.reverb_title_code_input);
+                    break;
+                case EMAIL_VERIFY:
+                    titleView.setText(R.string.reverb_title_email_verify);
+                    break;
+                case VERIFYING_CODE:
+                    titleView.setText(R.string.reverb_title_verifying_code);
+                    break;
+                case VERIFIED:
+                    titleView.setText(R.string.reverb_title_verified);
+                    break;
+                case RESEND:
+                    titleView.setText(R.string.reverb_title_resend);
+                    break;
+                case ERROR:
+                    titleView.setText(R.string.reverb_title_error);
+                    break;
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java
new file mode 100644
index 000000000..b67ba4bfd
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java
@@ -0,0 +1,96 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbBodyFragment extends Fragment {
+    private static final String ICON_RESOURCE_ID_KEY = "iconResourceId";
+    private static final String SHOW_PROGRESS_SPINNER_KEY = "showProgressSpinner";
+
+    private int iconResourceId = 0;
+    private boolean showProgressSpinner;
+
+    public void setIconResourceId(final int iconResourceId) {
+        this.iconResourceId = iconResourceId;
+        updateIcon(getView());
+    }
+
+    public void setShowProgressSpinner(final boolean showProgressSpinner) {
+        this.showProgressSpinner = showProgressSpinner;
+        updateIcon(getView());
+    }
+
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            iconResourceId = savedInstanceState.getInt(ICON_RESOURCE_ID_KEY, iconResourceId);
+            showProgressSpinner = savedInstanceState.getBoolean(
+                    SHOW_PROGRESS_SPINNER_KEY,
+                    showProgressSpinner);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_reverb_body, container, false);
+        }
+        updateIcon(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putInt(ICON_RESOURCE_ID_KEY, iconResourceId);
+        outState.putBoolean(SHOW_PROGRESS_SPINNER_KEY, showProgressSpinner);
+    }
+
+    private void updateIcon(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+
+        final View progressSpinner = view.findViewById(R.id.reverb_progress_spinner);
+        if (progressSpinner != null) {
+            progressSpinner.setVisibility(showProgressSpinner ? View.VISIBLE : View.GONE);
+        }
+
+        final ImageView iconView = (ImageView) view.findViewById(R.id.reverb_icon);
+        if (iconView != null) {
+            if (iconResourceId > 0) {
+                iconView.setImageResource(iconResourceId);
+                iconView.setVisibility(View.VISIBLE);
+            } else {
+                iconView.setVisibility(View.GONE);
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java
new file mode 100644
index 000000000..e85f85f36
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java
@@ -0,0 +1,175 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbFooterFragment extends Fragment {
+    private static final String LOGIN_TYPE_KEY = "loginType";
+    private static final String PROGRESS_KEY = "progress";
+    private static final String PROGRESS_TYPE_KEY = "progressType";
+
+    public enum ProgressType {
+        BAR,
+        DOTS,
+    }
+
+    public interface OnSwitchLoginTypeListener {
+        void onSwitchLoginType();
+    }
+
+    private LoginType loginType;
+    private OnSwitchLoginTypeListener onSwitchLoginTypeListener;
+    private int progress = 0;
+    private ProgressType progressType = ProgressType.BAR;
+
+    public void setLoginType(final LoginType loginType) {
+        if (loginType == null) {
+            return;
+        }
+        this.loginType = loginType;
+        updateButtonText(getView());
+    }
+
+    public void setOnSwitchLoginTypeListener(
+            final OnSwitchLoginTypeListener onSwitchLoginTypeListener) {
+        this.onSwitchLoginTypeListener = onSwitchLoginTypeListener;
+        updateSwitchLoginTypeListener(getView());
+    }
+
+    public void setProgress(final int progress) {
+        this.progress = progress;
+        updateProgress(getView());
+    }
+
+    public void setProgressType(final ProgressType progressType) {
+        if (progressType == null) {
+            return;
+        }
+        this.progressType = progressType;
+    }
+
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            final String loginTypeString = savedInstanceState.getString(LOGIN_TYPE_KEY);
+            loginType = loginTypeString == null ? loginType : LoginType.valueOf(loginTypeString);
+            progress = savedInstanceState.getInt(PROGRESS_KEY, progress);
+            final String progressTypeString = savedInstanceState.getString(PROGRESS_TYPE_KEY);
+            progressType = progressTypeString == null
+                    ? progressType
+                    : ProgressType.valueOf(progressTypeString);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            final int layoutResourceId;
+            switch (progressType) {
+                case DOTS:
+                    layoutResourceId = R.layout.fragment_reverb_footer_dots;
+                    break;
+                case BAR:
+                default:
+                    layoutResourceId = R.layout.fragment_reverb_footer_bar;
+                    break;
+            }
+            view = inflater.inflate(layoutResourceId, container, false);
+        }
+        updateButtonText(view);
+        updateProgress(view);
+        updateSwitchLoginTypeListener(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putString(LOGIN_TYPE_KEY, loginType == null ? null : loginType.name());
+        outState.putInt(PROGRESS_KEY, progress);
+        outState.putString(PROGRESS_TYPE_KEY, progressType.name());
+    }
+
+    private void updateButtonText(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+        final TextView switchLoginTypeButton
+                = (TextView) view.findViewById(R.id.switch_login_type_button);
+        if (switchLoginTypeButton == null) {
+            return;
+        }
+        if (loginType == null) {
+            switchLoginTypeButton.setVisibility(View.GONE);
+            return;
+        }
+        switch (loginType) {
+            case EMAIL:
+                switchLoginTypeButton.setText(R.string.reverb_switch_login_type_email);
+                break;
+            case PHONE:
+                switchLoginTypeButton.setText(R.string.reverb_switch_login_type_phone);
+                break;
+        }
+        switchLoginTypeButton.setVisibility(View.VISIBLE);
+    }
+
+    private void updateProgress(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+
+        final ProgressBar progressBar = (ProgressBar) view.findViewById(R.id.reverb_progress_bar);
+        if (progressBar != null) {
+            progressBar.setProgress(progress);
+        }
+    }
+
+    private void updateSwitchLoginTypeListener(@Nullable final View view) {
+        if (view == null || onSwitchLoginTypeListener == null) {
+            return;
+        }
+        final View switchLoginTypeButton = view.findViewById(R.id.switch_login_type_button);
+        if (switchLoginTypeButton == null) {
+            return;
+        }
+        switchLoginTypeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                if (onSwitchLoginTypeListener != null) {
+                    onSwitchLoginTypeListener.onSwitchLoginType();
+                }
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java
new file mode 100644
index 000000000..47171a24b
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java
@@ -0,0 +1,272 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.annotation.Nullable;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.ui.AdvancedUIManager;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbUIManager implements AdvancedUIManager, Parcelable {
+    public static final String LOGIN_TYPE_EXTRA = "loginType";
+    public static final String SWITCH_LOGIN_TYPE_EVENT = "switch-login-type";
+
+    private final ButtonType confirmButton;
+    private final ButtonType entryButton;
+    private AdvancedUIManagerListener listener;
+    private final LoginType loginType;
+    private final TextPosition textPosition;
+    private final int themeResourceId;
+
+    public ReverbUIManager(
+            final ButtonType confirmButton,
+            final ButtonType entryButton,
+            final LoginType loginType,
+            final TextPosition textPosition,
+            final int themeResourceId) {
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.loginType = loginType;
+        this.textPosition = textPosition;
+        this.themeResourceId = themeResourceId;
+    }
+
+    @Override
+    @Nullable
+    public  Fragment getActionBarFragment(final LoginFlowState state) {
+        final ReverbActionBarFragment fragment = new ReverbActionBarFragment();
+        fragment.setState(state);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getBodyFragment(final LoginFlowState state) {
+        int iconResourceId = 0;
+        boolean showProgressSpinner = false;
+        switch (state) {
+            case SENDING_CODE:
+                showProgressSpinner = true;
+                break;
+            case SENT_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        iconResourceId = R.drawable.reverb_email;
+                        break;
+                    case PHONE:
+                        iconResourceId = R.drawable.reverb_progress_complete;
+                        break;
+                }
+                break;
+            case EMAIL_VERIFY:
+                iconResourceId = R.drawable.reverb_email_sent;
+                break;
+            case VERIFYING_CODE:
+                showProgressSpinner = true;
+                break;
+            case VERIFIED:
+                iconResourceId = R.drawable.reverb_progress_complete;
+                break;
+            case ERROR:
+                iconResourceId = R.drawable.reverb_error;
+                break;
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+            case CODE_INPUT:
+            case RESEND:
+            case NONE:
+            default:
+                return null;
+        }
+        final ReverbBodyFragment fragment = new ReverbBodyFragment();
+        fragment.setIconResourceId(iconResourceId);
+        fragment.setShowProgressSpinner(showProgressSpinner);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public ButtonType getButtonType(final LoginFlowState state) {
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                return entryButton;
+            case CODE_INPUT:
+                return confirmButton;
+            default:
+                return null;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Fragment getFooterFragment(final LoginFlowState state) {
+        final int progress;
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                progress = 1;
+                break;
+            case SENDING_CODE:
+            case SENT_CODE:
+                progress = 2;
+                break;
+            case CODE_INPUT:
+            case EMAIL_VERIFY:
+                progress = 3;
+                break;
+            case VERIFYING_CODE:
+                progress = 4;
+                break;
+            case VERIFIED:
+                progress = 5;
+                break;
+            case RESEND:
+            case ERROR:
+            case NONE:
+            default:
+                return null;
+        }
+        final ReverbFooterFragment fragment = new ReverbFooterFragment();
+        if (progress == 1) {
+            fragment.setLoginType(loginType);
+            fragment.setOnSwitchLoginTypeListener(
+                    new ReverbFooterFragment.OnSwitchLoginTypeListener() {
+                        @Override
+                        public void onSwitchLoginType() {
+                            if (listener == null) {
+                                return;
+                            }
+
+                            listener.onCancel();
+
+                            final Activity activity = fragment.getActivity();
+                            if (activity == null) {
+                                return;
+                            }
+                            final Context applicationContext = activity.getApplicationContext();
+                            final LoginType newLoginType;
+                            switch (loginType) {
+                                case EMAIL:
+                                    newLoginType = LoginType.PHONE;
+                                    break;
+                                case PHONE:
+                                    newLoginType = LoginType.EMAIL;
+                                    break;
+                                default:
+                                    return;
+                            }
+                            LocalBroadcastManager
+                                    .getInstance(applicationContext)
+                                    .sendBroadcast(new Intent(SWITCH_LOGIN_TYPE_EVENT)
+                                            .putExtra(LOGIN_TYPE_EXTRA, newLoginType.name()));
+                        }
+                    });
+        }
+        if (themeResourceId == R.style.AppLoginTheme_Reverb_A) {
+            fragment.setProgressType(ReverbFooterFragment.ProgressType.BAR);
+        } else if (themeResourceId == R.style.AppLoginTheme_Reverb_B
+                || themeResourceId == R.style.AppLoginTheme_Reverb_C) {
+            fragment.setProgressType(ReverbFooterFragment.ProgressType.DOTS);
+        }
+        fragment.setProgress(progress);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getHeaderFragment(final LoginFlowState state) {
+        if (state == LoginFlowState.ERROR) {
+            return null;
+        } else {
+            return SpaceFragment.create(
+                    R.styleable.Theme_AccountKitSample_Style_reverb_content_margin_top);
+        }
+    }
+
+    @Override
+    @Nullable
+    public TextPosition getTextPosition(final LoginFlowState state) {
+        return textPosition == null ? TextPosition.ABOVE_BODY : textPosition;
+    }
+
+    @Override
+    public void setAdvancedUIManagerListener(final AdvancedUIManagerListener listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    public void onError(final AccountKitError error) {
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(final Parcel dest, final int flags) {
+        dest.writeString(confirmButton != null ? confirmButton.name() : null);
+        dest.writeString(entryButton != null ? entryButton.name() : null);
+        dest.writeString(loginType != null ? loginType.name() : null);
+        dest.writeString(textPosition != null ? textPosition.name() : null);
+        dest.writeInt(themeResourceId);
+    }
+
+    public static final Creator<ReverbUIManager> CREATOR
+            = new Creator<ReverbUIManager>() {
+        @Override
+        public ReverbUIManager createFromParcel(final Parcel source) {
+            String s = source.readString();
+            final ButtonType confirmButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final ButtonType entryButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final LoginType loginType = s == null ? null : LoginType.valueOf(s);
+            s = source.readString();
+            final TextPosition textPosition = s == null ? null : TextPosition.valueOf(s);
+            final int themeResourceId = source.readInt();
+            return new ReverbUIManager(
+                    confirmButton,
+                    entryButton,
+                    loginType,
+                    textPosition,
+                    themeResourceId);
+        }
+
+        @Override
+        public ReverbUIManager[] newArray(final int size) {
+            return new ReverbUIManager[size];
+        }
+    };
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java
new file mode 100644
index 000000000..9f28c34da
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java
@@ -0,0 +1,93 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import com.facebook.samples.loginsample.R;
+
+public class SpaceFragment extends InflateFragment {
+
+    private static final String HEIGHT_ATTRIBUTE_KEY = "heightAttribute";
+
+    private AttributeSet attributes;
+
+    public static SpaceFragment create(final int heightAttribute) {
+        final SpaceFragment fragment = new SpaceFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_ATTRIBUTE_KEY, heightAttribute);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_space, container, false);
+        }
+        updateHeight(view);
+        return view;
+    }
+
+    @Override
+    protected void handleAttributes(final AttributeSet attrs) {
+        attributes = attrs;
+        updateHeight(getView());
+    }
+
+    private void updateHeight(final View view) {
+        if (view == null) {
+            return;
+        }
+        final Activity activity = getActivity();
+        if (activity == null) {
+            return;
+        }
+
+        final Bundle arguments = getArguments();
+        if (arguments == null) {
+            return;
+        }
+
+        final int heightAttribute = arguments.getInt(HEIGHT_ATTRIBUTE_KEY, -1);
+        if (heightAttribute >= 0) {
+            final TypedArray a = activity.obtainStyledAttributes(
+                    attributes,
+                    R.styleable.Theme_AccountKitSample_Style);
+            final int heightAttributeValue = a.getDimensionPixelSize(heightAttribute, -1);
+            a.recycle();
+            if (heightAttributeValue >= 0) {
+                view.getLayoutParams().height = heightAttributeValue;
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java
new file mode 100644
index 000000000..5b89baad1
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java
@@ -0,0 +1,107 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.Account;
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitCallback;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.PhoneNumber;
+import com.facebook.samples.loginsample.R;
+
+public class TokenActivity extends Activity {
+    static final String HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA";
+    static final String HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_hello_token);
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+
+        final String finalState =
+                getIntent().getStringExtra(HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA);
+        final String initialState =
+                getIntent().getStringExtra(HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA);
+
+        if (initialState != null) {
+            final TextView initialStateView = (TextView) findViewById(R.id.initial_state);
+            final TextView initialStateLabelView =
+                    (TextView) findViewById(R.id.initial_state_label);
+            if (initialStateView != null && initialStateLabelView != null) {
+                initialStateView.setText(initialState);
+                initialStateView.setVisibility(View.VISIBLE);
+                initialStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (finalState != null) {
+            final TextView finalStateView = (TextView) findViewById(R.id.final_state);
+            final TextView finalStateLabelView =
+                    (TextView) findViewById(R.id.final_state_label);
+            if (finalStateView != null && finalStateLabelView != null) {
+                finalStateView.setText(finalState);
+                finalStateView.setVisibility(View.VISIBLE);
+                finalStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        AccountKit.getCurrentAccount(new AccountKitCallback<Account>() {
+            @Override
+            public void onSuccess(final Account account) {
+                final TextView userId = (TextView) findViewById(R.id.user_id);
+                userId.setText(account.getId());
+
+                final TextView phoneNumber = (TextView) findViewById(R.id.user_phone);
+                final PhoneNumber number = account.getPhoneNumber();
+                phoneNumber.setText(number == null ? null : number.toString());
+
+                final TextView email = (TextView) findViewById(R.id.user_email);
+                email.setText(account.getEmail());
+            }
+
+            @Override
+            public void onError(final AccountKitError error) {
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java
new file mode 100644
index 000000000..7ba24c86b
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java
@@ -0,0 +1,226 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.facebook;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.facebook.AccessToken;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
+import com.facebook.Profile;
+import com.facebook.ProfileTracker;
+import com.facebook.login.DefaultAudience;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+import com.facebook.login.widget.LoginButton;
+import com.facebook.login.widget.ProfilePictureView;
+import com.facebook.samples.loginsample.R;
+
+import org.json.JSONException;
+
+public class FacebookLoginActivity extends AppCompatActivity {
+
+    private static final String GRAPH_PATH = "me/permissions";
+    private static final String SUCCESS = "success";
+
+    private static final int PICK_PERMS_REQUEST = 0;
+
+    private CallbackManager callbackManager;
+
+    private ProfilePictureView profilePictureView;
+    private TextView userNameView;
+    private LoginButton fbLoginButton;
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_facebook_login);
+
+        callbackManager = CallbackManager.Factory.create();
+
+        fbLoginButton = (LoginButton) findViewById(R.id._fb_login);
+        profilePictureView = (ProfilePictureView) findViewById(R.id.user_pic);
+        profilePictureView.setCropped(true);
+
+        userNameView = (TextView) findViewById(R.id.user_name);
+
+        final Button deAuthButton = (Button) findViewById(R.id.deauth);
+        deAuthButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                if (!isLoggedIn()) {
+                    Toast.makeText(
+                            FacebookLoginActivity.this,
+                            R.string.app_not_logged_in,
+                            Toast.LENGTH_LONG).show();
+                    return;
+                }
+                GraphRequest.Callback callback = new GraphRequest.Callback() {
+                    @Override
+                    public void onCompleted(GraphResponse response) {
+                        try {
+                            if(response.getError() != null) {
+                                Toast.makeText(
+                                        FacebookLoginActivity.this,
+                                        getResources().getString(
+                                                R.string.failed_to_deauth,
+                                                response.toString()),
+                                        Toast.LENGTH_LONG
+                                ).show();
+                            }
+                            else if (response.getJSONObject().getBoolean(SUCCESS)) {
+                                LoginManager.getInstance().logOut();
+                                // updateUI();?
+                            }
+                        } catch (JSONException ex) { /* no op */ }
+                    }
+                };
+                GraphRequest request = new GraphRequest(AccessToken.getCurrentAccessToken(),
+                        GRAPH_PATH, new Bundle(), HttpMethod.DELETE, callback);
+                request.executeAsync();
+            }
+        });
+
+        final Button permsButton = (Button) findViewById(R.id.perms);
+        permsButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(final View v) {
+                Intent selectPermsIntent =
+                        new Intent(FacebookLoginActivity.this, PermissionSelectActivity.class);
+                startActivityForResult(selectPermsIntent, PICK_PERMS_REQUEST);
+            }
+        });
+
+        // Callback registration
+        fbLoginButton.registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
+            @Override
+            public void onSuccess(final LoginResult loginResult) {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.success,
+                        Toast.LENGTH_LONG).show();
+                updateUI();
+            }
+
+            @Override
+            public void onCancel() {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.cancel,
+                        Toast.LENGTH_LONG).show();
+            }
+
+            @Override
+            public void onError(final FacebookException exception) {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.error,
+                        Toast.LENGTH_LONG).show();
+            }
+        });
+
+        new ProfileTracker() {
+            @Override
+            protected void onCurrentProfileChanged(
+                    final Profile oldProfile,
+                    final Profile currentProfile) {
+                updateUI();
+            }
+        };
+    }
+
+    private boolean isLoggedIn() {
+        AccessToken accesstoken = AccessToken.getCurrentAccessToken();
+        return !(accesstoken == null || accesstoken.getPermissions().isEmpty());
+    }
+
+    private void updateUI() {
+        Profile profile = Profile.getCurrentProfile();
+        if (profile != null) {
+            profilePictureView.setProfileId(profile.getId());
+            userNameView
+                    .setText(String.format("%s %s",profile.getFirstName(), profile.getLastName()));
+        } else {
+            profilePictureView.setProfileId(null);
+            userNameView.setText(getString(R.string.welcome));
+        }
+    }
+
+    @Override
+    protected void onActivityResult(
+            final int requestCode,
+            final int resultCode,
+            final Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if(requestCode == PICK_PERMS_REQUEST) {
+            if(resultCode == RESULT_OK) {
+                String[] readPermsArr = data
+                        .getStringArrayExtra(PermissionSelectActivity.EXTRA_SELECTED_READ_PARAMS);
+                String writePrivacy = data
+                        .getStringExtra(PermissionSelectActivity.EXTRA_SELECTED_WRITE_PRIVACY);
+                String[] publishPermsArr = data
+                        .getStringArrayExtra(
+                                PermissionSelectActivity.EXTRA_SELECTED_PUBLISH_PARAMS);
+
+                fbLoginButton.clearPermissions();
+
+                if (readPermsArr != null) {
+                    if(readPermsArr.length > 0) {
+                        fbLoginButton.setReadPermissions(readPermsArr);
+                    }
+                }
+
+                if ((readPermsArr == null ||
+                        readPermsArr.length == 0) &&
+                        publishPermsArr != null) {
+                    if(publishPermsArr.length > 0) {
+                        fbLoginButton.setPublishPermissions(publishPermsArr);
+                    }
+                }
+                // Set write privacy for the user
+                if ((writePrivacy != null)) {
+                    DefaultAudience audience;
+                    if (DefaultAudience.EVERYONE.toString().equals(writePrivacy)) {
+                        audience = DefaultAudience.EVERYONE;
+                    } else if (DefaultAudience.FRIENDS.toString().equals(writePrivacy)) {
+                        audience = DefaultAudience.FRIENDS;
+                    } else {
+                        audience = DefaultAudience.ONLY_ME;
+                    }
+                    fbLoginButton.setDefaultAudience(audience);
+                }
+            }
+        } else {
+            callbackManager.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java
new file mode 100644
index 000000000..ee7db339c
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java
@@ -0,0 +1,120 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.facebook;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.SparseBooleanArray;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.ListView;
+import com.facebook.login.DefaultAudience;
+import com.facebook.samples.loginsample.R;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+public class PermissionSelectActivity extends Activity implements OnClickListener{
+
+    public static final String TAG = PermissionSelectActivity.class.getSimpleName();
+
+    public static final String EXTRA_SELECTED_READ_PARAMS = TAG + ".selectedReadPerms";
+    public static final String EXTRA_SELECTED_WRITE_PRIVACY = TAG + ".selectedWritePrivacy";
+    public static final String EXTRA_SELECTED_PUBLISH_PARAMS = TAG + ".selectedPublishPerms";
+
+    // Permissions
+    public static String PUBLISH_ACTIONS = "publish_actions";
+    public static String PUBLISH_CHECKINS = "publish_checkins";
+    public static String ADS_MANAGEMENT = "ads_management";
+    public static String CREATE_EVENT = "create_event";
+    public static String MANAGE_FRIENDLISTS = "manage_friendlists";
+    public static String MANAGE_NOTIFICATIONS = "manage_notifications";
+    public static String MANAGE_PAGES = "manage_pages";
+    public static String RSVP_EVENT = "rsvp_event";
+
+    public static final Set<String> PUBLISH_PERMS_LIST = new HashSet<>(Arrays.asList(
+            PUBLISH_ACTIONS,
+            PUBLISH_CHECKINS,
+            ADS_MANAGEMENT,
+            CREATE_EVENT,
+            MANAGE_FRIENDLISTS,
+            MANAGE_NOTIFICATIONS,
+            MANAGE_PAGES,
+            RSVP_EVENT));
+
+    Button button;
+    ListView listView;
+    ArrayAdapter<String> adapter;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.list_perms_new);
+        listView = (ListView) findViewById(R.id.list);
+        button = (Button) findViewById(R.id.confirm);
+        String[] perms = getResources().getStringArray(R.array.perms_array);
+
+        adapter = new ArrayAdapter<>(this,
+                android.R.layout.simple_list_item_multiple_choice, perms);
+        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        listView.setAdapter(adapter);
+        button.setOnClickListener(this);
+    }
+
+    public void onClick(View v) {
+        SparseBooleanArray checked = listView.getCheckedItemPositions();
+        ArrayList<String> readPerms = new ArrayList<>();
+        String writePri = null;
+        ArrayList<String> publishPerms = new ArrayList<>();
+        for (int i = 0; i < checked.size(); i++) {
+            // Item position in adapter
+            int position = checked.keyAt(i);
+            // Add perm only if checked
+            if (checked.valueAt(i)){
+                String checkedItem = adapter.getItem(position);
+                if (DefaultAudience.EVERYONE.toString().equals(checkedItem)) {
+                    writePri = "EVERYONE";
+                } else if (DefaultAudience.FRIENDS.toString().equals(checkedItem)) {
+                    writePri = "FRIENDS";
+                } else if (DefaultAudience.ONLY_ME.toString().equals(checkedItem)) {
+                    writePri = "ONLY_ME";
+                } else if ((PUBLISH_PERMS_LIST).contains(checkedItem)) {
+                    publishPerms.add(checkedItem);
+                } else
+                    readPerms.add(checkedItem);
+            }
+        }
+
+        String[] readPermsArr = readPerms.toArray(new String[readPerms.size()]);
+        String[] publishPermsArr = publishPerms.toArray(new String[publishPerms.size()]);
+        Intent intent=new Intent();
+        intent.putExtra(EXTRA_SELECTED_READ_PARAMS, readPermsArr);
+        intent.putExtra(EXTRA_SELECTED_WRITE_PRIVACY, writePri);
+        intent.putExtra(EXTRA_SELECTED_PUBLISH_PARAMS, publishPermsArr);
+        setResult(RESULT_OK, intent);
+        finish();
+    }
+}
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg
new file mode 100644
index 000000000..f9793bcec
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg
new file mode 100644
index 000000000..87d1c8011
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..d257e4801
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..2b5fe5946
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png
new file mode 100644
index 000000000..c03233229
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png
new file mode 100644
index 000000000..dc2ffbd70
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png
new file mode 100644
index 000000000..fe4a768f2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png
new file mode 100644
index 000000000..b4e8ef844
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png
new file mode 100644
index 000000000..ae2b9c625
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..415b3b283
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..3271014a5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..f0dae891a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg
new file mode 100644
index 000000000..aefd987f6
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg
new file mode 100644
index 000000000..3d5437852
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..7bff78a4c
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..317eb1e35
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png
new file mode 100644
index 000000000..6ec8827b8
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png
new file mode 100644
index 000000000..0c1a77a8c
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png
new file mode 100644
index 000000000..56ff2acd2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png
new file mode 100644
index 000000000..31ffdbb8d
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png
new file mode 100644
index 000000000..413dacb18
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..1cc00e784
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..2fc152447
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..128c70666
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg
new file mode 100644
index 000000000..542ad35f1
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg
new file mode 100644
index 000000000..16170ddf8
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..ae1e819c9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..607f8af4e
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..daf155d69
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png
new file mode 100644
index 000000000..813db5112
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..144c1cbc5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png
new file mode 100644
index 000000000..27c4c9ba7
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png
new file mode 100644
index 000000000..d3bb03e90
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..e76c5152a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..0ebd0c33d
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..cae2f159f
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg
new file mode 100644
index 000000000..a029a356a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg
new file mode 100644
index 000000000..81b3ee646
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..965439d33
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..d6491c11a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..7ac4d4328
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png
new file mode 100644
index 000000000..d6906ad31
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..d634b90d5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png
new file mode 100644
index 000000000..4c5ff33f0
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png
new file mode 100644
index 000000000..cf2889df9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..cd1af3e94
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..498cb9786
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..5956cb39b
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg
new file mode 100644
index 000000000..5e0c6c8c2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg
new file mode 100644
index 000000000..8ee6d7166
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..415d397ba
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..f68850d93
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..694f511eb
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png
new file mode 100644
index 000000000..b76b5c2d9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..6a0559955
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png
new file mode 100644
index 000000000..fa6ac722a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png
new file mode 100644
index 000000000..c59f539fb
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..cce40d2dd
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..2db4d892b
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..84ff81eb7
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable/placeholder_background.xml b/samples/LoginSample/src/main/res/drawable/placeholder_background.xml
new file mode 100644
index 000000000..469f62a35
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/placeholder_background.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="#e02727" />
+        </shape>
+    </item>
+    <item
+        android:bottom="6dp"
+        android:left="6dp"
+        android:right="6dp"
+        android:top="6dp"
+        >
+        <shape android:shape="rectangle">
+            <corners android:radius="6dp" />
+            <stroke
+                android:color="#cccccccc"
+                android:dashGap="4dp"
+                android:dashWidth="8dp"
+                android:width="2dp"
+                />
+        </shape>
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml
new file mode 100644
index 000000000..f7e0fac75
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@android:id/background">
+        <shape>
+            <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+            <solid android:color="@color/reverb_light" />
+        </shape>
+    </item>
+    <item android:id="@android:id/secondaryProgress">
+        <shape>
+            <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+            <solid android:color="@color/reverb_light" />
+        </shape>
+    </item>
+    <item android:id="@android:id/progress">
+        <clip>
+            <shape>
+                <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+                <solid android:color="@color/reverb_dark" />
+            </shape>
+        </clip>
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml
new file mode 100644
index 000000000..06abcd053
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape
+            android:shape="ring"
+            android:innerRadius="37dp"
+            android:thickness="4dp"
+            android:useLevel="false"
+            >
+            <solid
+                android:color="@color/reverb_dark"
+                android:useLevel="false"
+                />
+        </shape>
+    </item>
+    <item>
+        <bitmap
+            android:src="@drawable/reverb_checkmark"
+            android:tint="@color/reverb_dark"
+            />
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml
new file mode 100644
index 000000000..5ae1d9c40
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<rotate
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:drawable="@drawable/reverb_progress_ring"
+    android:fromDegrees="0"
+    android:pivotX="50%"
+    android:pivotY="50%"
+    android:toDegrees="720"
+    />
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml b/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml
new file mode 100644
index 000000000..7c66ea0eb
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- RatingBar does not handle ShapeDrawables for the items, so just use images -->
+    <item
+        android:id="@android:id/background"
+        android:drawable="@drawable/reverb_rating_bar_unselected"
+        />
+    <item
+        android:id="@android:id/secondaryProgress"
+        android:drawable="@drawable/reverb_rating_bar_unselected"
+        />
+    <item
+        android:id="@android:id/progress"
+        android:drawable="@drawable/reverb_rating_bar_selected"
+        />
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/layout/account_kit_activity.xml b/samples/LoginSample/src/main/res/layout/account_kit_activity.xml
new file mode 100644
index 000000000..01c5ada7c
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/account_kit_activity.xml
@@ -0,0 +1,215 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:minWidth="300dp"
+            tools:ignore="UselessParent"
+            >
+            <Switch
+                android:id="@+id/title_type_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/config_title_type_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/advanced_ui_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/config_advanced_ui_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/response_type_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/config_response_type_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/state_param_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/confirm_state_param_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/facebook_notification_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/confirm_facebook_notification_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/whitelist_blacklist_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/use_manual_whitelistblacklist_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/read_phone_state_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/read_phone_state_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/receive_sms_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/receive_sms_label"
+                android:textColor="@android:color/black"
+                />
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:orientation="horizontal"
+                >
+                <TextView
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:text="@string/config_theme_label"
+                    android:textColor="@android:color/black"
+                    />
+                <Spinner
+                    android:id="@+id/theme_spinner"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:gravity="end"
+                    android:textAlignment="center"
+                    tools:ignore="UnusedAttribute"
+                    />
+            </LinearLayout>
+            <LinearLayout
+                android:id="@+id/advanced_ui_options"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:orientation="vertical"
+                android:visibility="gone"
+                >
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_entry_button_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/entry_button_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_confirm_button_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/confirm_button_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_text_position_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/text_position_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+            </LinearLayout>
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="onLoginPhone"
+                android:text="@string/log_in_phone_button"
+                />
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="onLoginEmail"
+                android:text="@string/log_in_email_button"
+                />
+        </LinearLayout>
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_error.xml b/samples/LoginSample/src/main/res/layout/activity_error.xml
new file mode 100644
index 000000000..c3711ec54
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_error.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/error_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/error_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/error"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml b/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml
new file mode 100644
index 000000000..d0f1176c1
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml
@@ -0,0 +1,85 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:facebook="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:gravity="center">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center">
+
+        <com.facebook.login.widget.ProfilePictureView
+            android:id="@+id/user_pic"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="10dp"
+            android:layout_marginStart="10dp"
+            android:layout_marginRight="10dp"
+            android:layout_marginEnd="10dp"
+            facebook:com_facebook_preset_size="small" />
+
+        <TextView
+            android:id="@+id/user_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/welcome" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center"
+        android:layout_margin="10dp">
+
+        <Button
+            android:id="@+id/deauth"
+            android:layout_width="182dip"
+            android:layout_height="wrap_content"
+            android:text="@string/de_authorize_app"
+            android:layout_marginRight="5dp"
+            android:layout_marginEnd="5dp"
+            android:textSize="12sp" />
+
+        <Button
+            android:id="@+id/perms"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/permissions"
+            android:layout_marginLeft="5dp"
+            android:layout_marginStart="5dp"
+            android:textSize="12sp" />
+
+    </LinearLayout>
+
+    <com.facebook.login.widget.LoginButton
+        android:id="@+id/_fb_login"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal" />
+
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/activity_hello_code.xml b/samples/LoginSample/src/main/res/layout/activity_hello_code.xml
new file mode 100644
index 000000000..30b0bf7c4
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_hello_code.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/user_code_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/code_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/code"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/initial_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/initial_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/initial_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/final_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/final_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/final_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_hello_token.xml b/samples/LoginSample/src/main/res/layout/activity_hello_token.xml
new file mode 100644
index 000000000..eea3b554b
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_hello_token.xml
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/user_id_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/user_id_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_id"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_phone_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/phone_number_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_phone"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_email_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/email_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_email"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/initial_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/initial_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/initial_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/final_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/final_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/final_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_main.xml b/samples/LoginSample/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..c5828e387
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:gravity="center"
+    android:orientation="vertical"
+    tools:context="com.facebook.samples.loginsample.MainActivity">
+
+    <Button
+        android:id="@+id/fb_login_button"
+        android:text="@string/log_in_with_facebook"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:textSize="12sp"/>
+
+    <Button
+        android:id="@+id/ak_login_button"
+        android:text="@string/login_with_account_kit"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:textSize="12sp"/>
+
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml b/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml
new file mode 100644
index 000000000..3f0e56e02
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="100dp"
+    android:background="@drawable/placeholder_background"
+    >
+    <TextView
+        android:id="@+id/text_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:textColor="#ffffff"
+        />
+</FrameLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml
new file mode 100644
index 000000000..080c48105
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/reverb_action_bar_height"
+    android:background="?attr/com_accountkit_header_background_color"
+    android:gravity="center_vertical"
+    android:orientation="horizontal"
+    android:paddingEnd="@dimen/activity_horizontal_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingStart="@dimen/activity_horizontal_margin"
+    tools:ignore="Overdraw"
+    >
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:onClick="onBackPressed"
+        android:src="?attr/reverb_back_arrow_src"
+        tools:ignore="ContentDescription,OnClick"
+        />
+    <TextView
+        android:id="@+id/title_view"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center_vertical"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:textAllCaps="?attr/reverb_text_all_caps"
+        android:textColor="?attr/com_accountkit_header_text_color"
+        />
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@drawable/reverb_icon"
+        android:visibility="?attr/reverb_app_icon_visibility"
+        tools:ignore="ContentDescription"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml
new file mode 100644
index 000000000..1e95eae43
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    >
+    <FrameLayout
+        android:id="@+id/reverb_progress_spinner"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:visibility="gone"
+        >
+        <ProgressBar
+            android:layout_width="@dimen/reverb_icon_size"
+            android:layout_height="@dimen/reverb_icon_size"
+            android:layout_gravity="center"
+            android:indeterminateDrawable="@drawable/reverb_progress_rotating_ring"
+            />
+    </FrameLayout>
+    <ImageView
+        android:id="@+id/reverb_icon"
+        android:layout_width="@dimen/reverb_icon_size"
+        android:layout_height="@dimen/reverb_icon_size"
+        android:layout_gravity="center"
+        android:visibility="gone"
+        tools:ignore="ContentDescription"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml
new file mode 100644
index 000000000..2809db05b
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:paddingBottom="@dimen/reverb_progress_bar_padding"
+    android:paddingTop="@dimen/reverb_progress_bar_padding"
+    style="@style/Reverb.Footer"
+    >
+    <include layout="@layout/layout_reverb_switch_login_type" />
+    <ProgressBar
+        android:id="@+id/reverb_progress_bar"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/reverb_progress_bar_height"
+        android:indeterminateOnly="false"
+        android:max="5"
+        android:progressDrawable="@drawable/reverb_progress_bar"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml
new file mode 100644
index 000000000..546cb2530
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/Reverb.Footer"
+    >
+    <include layout="@layout/layout_reverb_switch_login_type" />
+    <RatingBar
+        android:id="@+id/reverb_progress_bar"
+        android:isIndicator="true"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxHeight="@dimen/reverb_rating_bar_height"
+        android:minHeight="@dimen/reverb_rating_bar_height"
+        android:numStars="5"
+        android:progressDrawable="@drawable/reverb_rating_bar"
+        android:rating="1.0"
+        android:stepSize="1.0"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_space.xml b/samples/LoginSample/src/main/res/layout/fragment_space.xml
new file mode 100644
index 000000000..5827d721c
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_space.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="0dp"
+    />
diff --git a/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml b/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml
new file mode 100644
index 000000000..8b515f11d
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<TextView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/switch_login_type_button"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginTop="@dimen/reverb_footer_margin_top"
+    android:gravity="center"
+    android:padding="@dimen/reverb_padding"
+    android:textColor="?attr/com_accountkit_button_background_color"
+    android:textSize="@dimen/reverb_switch_login_type_text_size"
+    android:textStyle="bold"
+    android:visibility="gone"
+    />
diff --git a/samples/LoginSample/src/main/res/layout/list_perms_new.xml b/samples/LoginSample/src/main/res/layout/list_perms_new.xml
new file mode 100644
index 000000000..2ab9dbc86
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/list_perms_new.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <Button
+        android:id="@+id/confirm"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:text="@android:string/ok" />
+
+    <ListView
+        android:id="@+id/list"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_above="@id/confirm"
+        android:layout_alignParentTop="true"
+        />
+</RelativeLayout>
diff --git a/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100755
index 000000000..a4a96fed1
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100755
index 000000000..909d5b7f7
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100755
index 000000000..507873baa
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100755
index 000000000..b2f1081ed
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100755
index 000000000..26a703056
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/values-v17/styles.xml b/samples/LoginSample/src/main/res/values-v17/styles.xml
new file mode 100644
index 000000000..caabf4282
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values-v17/styles.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="Sample.ScrollContent" parent="Base.Sample.ScrollContent">
+        <item name="android:paddingEnd">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingStart">@dimen/activity_horizontal_margin</item>
+    </style>
+
+    <style name="Reverb.Footer" parent="Base.Reverb.Footer">
+        <item name="android:layout_marginEnd">@dimen/reverb_content_margin_end</item>
+        <item name="android:layout_marginStart">@dimen/reverb_content_margin_start</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values-w820dp/dimens.xml b/samples/LoginSample/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 000000000..72bb51545
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,26 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_colors.xml b/samples/LoginSample/src/main/res/values/accountkit_colors.xml
new file mode 100644
index 000000000..c32c0a5e5
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_colors.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <color name="reverb_dark">#262261</color>
+    <color name="reverb_light">#e9e8ef</color>
+    <color name="reverb_text">#1d2129</color>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_dimens.xml b/samples/LoginSample/src/main/res/values/accountkit_dimens.xml
new file mode 100644
index 000000000..2d11a897d
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_dimens.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="reverb_action_bar_height">50dp</dimen>
+    <dimen name="reverb_content_margin_end">25dp</dimen>
+    <dimen name="reverb_content_margin_start">25dp</dimen>
+    <dimen name="reverb_content_margin_top_large">22dp</dimen>
+    <dimen name="reverb_content_margin_top_small">14dp</dimen>
+    <dimen name="reverb_content_max_width">360dp</dimen>
+    <dimen name="reverb_content_min_height">340dp</dimen>
+    <dimen name="reverb_footer_margin_bottom">12dp</dimen>
+    <dimen name="reverb_footer_margin_top">14dp</dimen>
+    <dimen name="reverb_icon_size">86dp</dimen>
+    <dimen name="reverb_padding">8dp</dimen>
+    <dimen name="reverb_progress_bar_corner_radius">3dp</dimen>
+    <dimen name="reverb_progress_bar_height">14dp</dimen>
+    <dimen name="reverb_progress_bar_padding">10dp</dimen>
+    <dimen name="reverb_rating_bar_height">20dp</dimen>
+    <dimen name="reverb_switch_login_type_text_size">12sp</dimen>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_strings.xml b/samples/LoginSample/src/main/res/values/accountkit_strings.xml
new file mode 100644
index 000000000..51c76ef59
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_strings.xml
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="action_bar_title_hello">Hello</string>
+    <string name="code_label">Code</string>
+    <string name="config_advanced_ui_label">Use advanced UI theming</string>
+    <string name="config_confirm_button_label">Confirm button Text</string>
+    <string name="config_entry_button_label">Entry button Text</string>
+    <string name="config_response_type_label">Enable Client Access Token Flow</string>
+    <string name="config_text_position_label">Text Position</string>
+    <string name="config_theme_label">Theme</string>
+    <string name="config_title_type_label">App Name only for title</string>
+    <string name="confirm_facebook_notification_label">Facebook Notifications Fallback</string>
+    <string name="confirm_state_param_label">Is State Param passed?</string>
+    <string name="email_label">Email</string>
+    <string name="error_label">Error</string>
+    <string name="error_message">An error has occurred.</string>
+    <string name="final_state_label">Final State</string>
+    <string name="initial_state_label">Initial State</string>
+    <string name="loading_placeholder">Loading…</string>
+    <string name="log_in_email_button">Log In via Email</string>
+    <string name="log_in_phone_button">Log In via Phone</string>
+    <string name="log_out_button">Log Out</string>
+    <string name="na">NA</string>
+    <string name="permissions_get_accounts_message">
+        Grant permission to read your email address from your device to pre-fill.
+    </string>
+    <string name="permissions_get_accounts_title">Read Email Address</string>
+    <string name="permissions_read_phone_state_message">
+        Grant permission to read your phone number from your device to pre-fill.
+    </string>
+    <string name="permissions_read_phone_state_title">Read Phone Number</string>
+    <string name="permissions_receive_sms_message">
+        Grant permission to read your SMS code from your device to pre-fill.
+    </string>
+    <string name="permissions_receive_sms_title">Read SMS Code</string>
+    <string name="phone_number_label">Phone Number</string>
+    <string name="read_phone_state_label">Read phone number?</string>
+    <string name="receive_sms_label">Receive SMS?</string>
+    <string name="use_manual_whitelistblacklist_label">Use manual whitelist/blacklist</string>
+    <string name="user_id_label">Account ID</string>
+    <string name="reverb_advanced_ui_required">
+        Advanced UI theming is required for Reverb themes. Select a different theme to disable.
+    </string>
+    <string name="reverb_switch_login_type_email">SIGN IN WITH PHONE</string>
+    <string name="reverb_switch_login_type_phone">SIGN IN WITH EMAIL</string>
+    <string name="reverb_title_code_input">Enter your code</string>
+    <string name="reverb_title_email_input">Enter your email address</string>
+    <string name="reverb_title_email_verify">Open the email and confirm your address</string>
+    <string name="reverb_title_error">We\'re sorry, something went wrong.</string>
+    <string name="reverb_title_phone_number_input">Enter your phone number</string>
+    <string name="reverb_title_resend">We\'re sorry. Try these options to continue.</string>
+    <string name="reverb_title_sending_code">Sending your code…</string>
+    <string name="reverb_title_sent_code">Sent!</string>
+    <string name="reverb_title_verified">Done!</string>
+    <string name="reverb_title_verifying_code">Verifying your code…</string>
+    <string-array name="theme_options">
+        <item>Default</item>
+        <item>Salmon</item>
+        <item>Yellow</item>
+        <item>Red</item>
+        <item>Dog</item>
+        <item>Bicycle</item>
+        <item>Reverb A</item>
+        <item>Reverb B</item>
+        <item>Reverb C</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_styles.xml b/samples/LoginSample/src/main/res/values/accountkit_styles.xml
new file mode 100644
index 000000000..6e490e3a8
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_styles.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="Sample.ScrollContent" parent="Base.Sample.ScrollContent" />
+
+    <style name="Base.Sample.ScrollContent" parent="">
+        <item name="android:gravity">center_horizontal</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:orientation">vertical</item>
+        <item name="android:paddingBottom">@dimen/activity_vertical_margin</item>
+        <item name="android:paddingLeft">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingRight">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingTop">@dimen/activity_vertical_margin</item>
+    </style>
+
+    <style name="Reverb.Footer" parent="Base.Reverb.Footer" />
+
+    <style name="Base.Reverb.Footer" parent="">
+        <item name="android:gravity">center_horizontal|bottom</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_marginBottom">@dimen/reverb_footer_margin_bottom</item>
+        <item name="android:layout_marginLeft">@dimen/reverb_content_margin_start</item>
+        <item name="android:layout_marginRight">@dimen/reverb_content_margin_end</item>
+        <item name="android:layout_marginTop">@dimen/reverb_footer_margin_top</item>
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:orientation">vertical</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_themes.xml b/samples/LoginSample/src/main/res/values/accountkit_themes.xml
new file mode 100644
index 000000000..f28bc7c42
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_themes.xml
@@ -0,0 +1,119 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="AppLoginTheme" parent="Theme.AccountKit" />
+    <style name="AppLoginTheme.Salmon" parent="Theme.AccountKit">
+        <item name="com_accountkit_primary_color">@android:color/white</item>
+        <item name="com_accountkit_primary_text_color">#565a5c</item>
+        <item name="com_accountkit_secondary_color">#ffe5e5</item>
+        <item name="com_accountkit_secondary_text_color">
+            ?attr/com_accountkit_primary_text_color
+        </item>
+        <item name="com_accountkit_status_bar_color">@android:color/black</item>
+        <item name="com_accountkit_button_background_color">#ff5a5f</item>
+        <item name="com_accountkit_button_text_color">@android:color/white</item>
+        <item name="com_accountkit_icon_color">#ff5a5f</item>
+        <item name="com_accountkit_toolbar_elevation">8dp</item>
+    </style>
+    <style name="AppLoginTheme.Yellow" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#f4bf56</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">#44566b</item>
+        <item name="com_accountkit_status_bar_color">#ed9d00</item>
+        <item name="com_accountkit_input_accent_color">?attr/com_accountkit_primary_color</item>
+        <item name="com_accountkit_input_border_color">?attr/com_accountkit_primary_color</item>
+    </style>
+    <style name="AppLoginTheme.Red" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#333333</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">#151515</item>
+        <item name="com_accountkit_status_bar_color">@android:color/black</item>
+        <item name="com_accountkit_background_color">#f7f7f7</item>
+        <item name="com_accountkit_button_background_color">#e02727</item>
+        <item name="com_accountkit_button_border_color">
+            ?attr/com_accountkit_button_background_color
+        </item>
+        <item name="com_accountkit_input_border_color">#bbbbbb</item>
+    </style>
+    <style name="AppLoginTheme.Dog" parent="Theme.AccountKit">
+        <item name="com_accountkit_primary_color">@android:color/white</item>
+        <item name="com_accountkit_primary_text_color">#44566b</item>
+        <item name="com_accountkit_secondary_color">#ccffffff</item>
+        <item name="com_accountkit_secondary_text_color">@android:color/white</item>
+        <item name="com_accountkit_background">@drawable/dog</item>
+        <item name="com_accountkit_background_color">#994e7e24</item>
+        <item name="com_accountkit_input_text_color">?attr/com_accountkit_primary_text_color</item>
+    </style>
+    <style name="AppLoginTheme.Bicycle" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#ff5a5f</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">@android:color/white</item>
+        <item name="com_accountkit_background">@drawable/bicycle</item>
+        <item name="com_accountkit_background_color">#66000000</item>
+        <item name="com_accountkit_input_accent_color">@android:color/white</item>
+        <item name="com_accountkit_input_background_color">#00000000</item>
+        <item name="com_accountkit_input_border_color">@android:color/white</item>
+    </style>
+    <style name="Base.AppLoginTheme.Reverb" parent="AppLoginTheme">
+        <item name="com_accountkit_primary_color">?attr/com_accountkit_secondary_color</item>
+        <item name="com_accountkit_primary_text_color">
+            ?attr/com_accountkit_secondary_text_color
+        </item>
+        <item name="com_accountkit_secondary_color">@color/reverb_light</item>
+        <item name="com_accountkit_secondary_text_color">@color/reverb_text</item>
+        <item name="com_accountkit_status_bar_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_background_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_border_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_text_color">@android:color/white</item>
+        <item name="com_accountkit_content_body_layout_weight">1</item>
+        <item name="com_accountkit_content_bottom_layout_weight">1</item>
+        <item name="com_accountkit_content_footer_layout_weight">0</item>
+        <item name="com_accountkit_content_header_layout_weight">1</item>
+        <item name="com_accountkit_content_text_layout_weight">1</item>
+        <item name="com_accountkit_content_top_layout_weight">1</item>
+        <item name="com_accountkit_content_margin_end">@dimen/reverb_content_margin_end</item>
+        <item name="com_accountkit_content_margin_start">@dimen/reverb_content_margin_start</item>
+        <item name="com_accountkit_content_max_width">@dimen/reverb_content_max_width</item>
+        <item name="com_accountkit_content_min_height">@dimen/reverb_content_min_height</item>
+        <item name="com_accountkit_icon_color">?attr/com_accountkit_status_bar_color</item>
+        <item name="reverb_app_icon_visibility">gone</item>
+        <item name="reverb_back_arrow_src">@drawable/reverb_arrow_purple</item>
+        <item name="reverb_content_margin_top">@dimen/reverb_content_margin_top_small</item>
+        <item name="reverb_text_all_caps">false</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.A" parent="Base.AppLoginTheme.Reverb">
+        <item name="com_accountkit_header_background_color">@android:color/white</item>
+        <item name="com_accountkit_header_text_color">?attr/com_accountkit_status_bar_color</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.B" parent="Base.AppLoginTheme.Reverb">
+        <item name="com_accountkit_header_background_color">#7c7aa0</item>
+        <item name="com_accountkit_header_text_color">@android:color/white</item>
+        <item name="reverb_app_icon_visibility">visible</item>
+        <item name="reverb_back_arrow_src">@drawable/reverb_arrow_white</item>
+        <item name="reverb_content_margin_top">@dimen/reverb_content_margin_top_large</item>
+        <item name="reverb_text_all_caps">true</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.C" parent="AppLoginTheme.Reverb.A">
+        <item name="reverb_app_icon_visibility">visible</item>
+        <item name="reverb_text_all_caps">true</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/attrs.xml b/samples/LoginSample/src/main/res/values/attrs.xml
new file mode 100644
index 000000000..e20fc7ffd
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/attrs.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <declare-styleable name="Theme.AccountKitSample.Style">
+        <attr name="reverb_app_icon_visibility" format="enum">
+            <enum name="visible" value="0" />
+            <enum name="gone" value="2" />
+        </attr>
+        <attr name="reverb_back_arrow_src" format="reference" />
+        <attr name="reverb_content_margin_top" format="dimension" />
+        <attr name="reverb_text_all_caps" format="boolean" />
+    </declare-styleable>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml b/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml
new file mode 100644
index 000000000..3ef4ccaea
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <string-array name="blacklistedSmsCountryCodes" tools:ignore="MissingTranslation">
+        <item>ID</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/colors.xml b/samples/LoginSample/src/main/res/values/colors.xml
new file mode 100644
index 000000000..a887ffe50
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/colors.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/dimens.xml b/samples/LoginSample/src/main/res/values/dimens.xml
new file mode 100644
index 000000000..34e488dbb
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/dimens.xml
@@ -0,0 +1,26 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/strings.xml b/samples/LoginSample/src/main/res/values/strings.xml
new file mode 100644
index 000000000..72639e7c0
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/strings.xml
@@ -0,0 +1,85 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <string name="app_name">Login Sample</string>
+    <string name="facebook_app_id">133094273807591</string>
+    <string name="fb_login_protocol_scheme">fb133094273807591</string>
+    <string name="ACCOUNT_KIT_CLIENT_TOKEN">9d92ebdd3db421ff3ddb041fb8fe60c0</string>
+    <string name="ak_login_protocol_scheme">ak133094273807591</string>
+
+    <string name="login_with_account_kit">Log in with AccountKit</string>
+
+    <string name="welcome">Welcome!</string>
+    <string name="log_in_with_facebook">Log in with Facebook</string>
+    <string name="permissions">Permissions</string>
+    <string name="label_facebook_login">Facebook Login</string>
+    <string name="label_account_kit_login">Account Kit Login</string>
+    <string name="de_authorize_app">De-authorize App</string>
+    <string name="failed_to_deauth">"failed to deauthorize app %1s"</string>
+    <string name="app_not_logged_in">App not logged in</string>
+    <string name="success">SUCCESS</string>
+    <string name="cancel">CANCEL</string>
+    <string name="error">ERROR</string>
+
+    <string-array name="perms_array">
+        // User Data Permissions
+        <item>basic_info</item>
+        <item>public_profile</item>
+        <item>email</item>
+        <item>publish_actions</item>
+        <item>user_about_me</item>
+        <item>user_activities</item>
+        <item>user_birthday</item>
+        <item>user_mobile_phone</item>
+        <item>user_education_history</item>
+        <item>user_friends</item>
+        <item>user_games_activity</item>
+        <item>user_hometown</item>
+        <item>user_interests</item>
+        <item>user_likes</item>
+        <item>user_location</item>
+        <item>user_photos</item>
+        <item>user_posts</item>
+        <item>user_relationship_details</item>
+        <item>user_relationships</item>
+        <item>user_religion_politics</item>
+        <item>user_status</item>
+        <item>user_tagged_places</item>
+        <item>user_videos</item>
+        <item>user_website</item>
+        <item>user_work_history</item>
+
+        // Other Permissions
+        <item>manage_notifications</item>
+        <item>read_custom_friendlists</item>
+        <item>read_insights</item>
+        <item>read_mailbox</item>
+        <item>read_stream</item>
+        <item>read_audience_network_insights</item>
+
+        // Privacy
+        <item>ONLY_ME</item>
+        <item>FRIENDS</item>
+        <item>EVERYONE</item>
+    </string-array>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/styles.xml b/samples/LoginSample/src/main/res/values/styles.xml
new file mode 100644
index 000000000..cbe3e82a6
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/styles.xml
@@ -0,0 +1,31 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/themes.xml b/samples/LoginSample/src/main/res/values/themes.xml
new file mode 100644
index 000000000..7c0e3007e
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/themes.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml b/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml
new file mode 100644
index 000000000..b573a2b9a
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string-array name="whitelistedSmsCountryCodes">
+        <item>ID</item>
+        <item>US</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java b/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java
new file mode 100644
index 000000000..b5a7d1ebb
--- /dev/null
+++ b/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
index 68d3b58fa..fd2b98cbe 100644
--- a/samples/RPSSample/AndroidManifest.xml
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -52,9 +52,6 @@
                     android:scheme="https" />
             </intent-filter>
         </activity>
-        <activity
-            android:name="com.facebook.FacebookActivity"
-            android:label="@string/app_name"/>
         <activity
             android:name="com.facebook.CustomTabActivity">
             <intent-filter>
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index a06051789..0fc0fdbfc 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -49,9 +49,6 @@
         <activity
             android:name="com.example.scrumptious.PickerActivity"
             android:label="@string/app_name" />
-        <activity
-            android:name="com.facebook.FacebookActivity"
-            android:label="@string/app_name"/>
         <activity
             android:name="com.facebook.CustomTabActivity">
             <intent-filter>
diff --git a/samples/ShareIt/AndroidManifest.xml b/samples/ShareIt/AndroidManifest.xml
index 697a3eaae..57088a445 100644
--- a/samples/ShareIt/AndroidManifest.xml
+++ b/samples/ShareIt/AndroidManifest.xml
@@ -39,9 +39,6 @@
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity
-            android:name="com.facebook.FacebookActivity"
-            android:label="@string/app_name"/>
         <activity
             android:name="com.facebook.CustomTabActivity">
             <intent-filter>
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
index a4a75cc57..96887a41f 100644
--- a/samples/SwitchUserSample/AndroidManifest.xml
+++ b/samples/SwitchUserSample/AndroidManifest.xml
@@ -39,9 +39,6 @@
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity
-            android:name="com.facebook.FacebookActivity"
-            android:label="@string/app_name"/>
         <activity
             android:name="com.facebook.CustomTabActivity">
             <intent-filter>
diff --git a/settings.gradle b/settings.gradle
index baa056346..23c413f6a 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -4,6 +4,7 @@ include ':facebook'
 // Samples
 include ':samples:HelloFacebookSample'
 include ':samples:Iconicus'
+include ':samples:LoginSample'
 include ':samples:RPSSample'
 include ':samples:MessengerSendSample'
 include ':samples:Scrumptious'
