diff --git a/build.gradle b/build.gradle
index e435642ee..d778ca944 100644
--- a/build.gradle
+++ b/build.gradle
@@ -11,5 +11,8 @@ buildscript {
 allprojects {
     repositories {
         mavenCentral()
+        maven {
+            url 'https://download.01.org/crosswalk/releases/crosswalk/android/maven2'
+        }
     }
 }
diff --git a/facebook/build.gradle b/facebook/build.gradle
index 90d99fb91..015312248 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -16,6 +16,8 @@ dependencies {
     // Unit Tests
     testCompile 'com.android.support:appcompat-v7:23.4.0'
 
+    compile 'org.xwalk:xwalk_core_library:20.+'
+
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
     testCompile 'org.robolectric:shadows-support-v4:3.0'
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookWebFallbackDialog.java b/facebook/src/main/java/com/facebook/internal/FacebookWebFallbackDialog.java
index 9d945cdcd..c836ef31c 100644
--- a/facebook/src/main/java/com/facebook/internal/FacebookWebFallbackDialog.java
+++ b/facebook/src/main/java/com/facebook/internal/FacebookWebFallbackDialog.java
@@ -25,10 +25,10 @@
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
-import android.webkit.WebView;
 
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.xwalk.core.XWalkView;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -101,7 +101,7 @@ protected Bundle parseResponseUri(String url) {
 
     @Override
     public void cancel() {
-        WebView webView = getWebView();
+        XWalkView webView = getWebView();
 
         // If the page hasn't loaded, or the listener is already called, then we can't interrupt
         // this cancellation. Either the JS won't be ready to consume the event, or the listener
@@ -129,7 +129,7 @@ public void cancel() {
                         "  event.initEvent('fbPlatformDialogMustClose',true,true);" +
                         "  document.dispatchEvent(event);" +
                         "})();";
-        webView.loadUrl("javascript:" + eventJS);
+        webView.load("javascript:" + eventJS, null);
 
         // Set up a timeout for the dialog to respond. If the timer expires, we need to honor
         // the user's desire to dismiss the dialog.
diff --git a/facebook/src/main/java/com/facebook/internal/WebDialog.java b/facebook/src/main/java/com/facebook/internal/WebDialog.java
index f92dd8230..df59b9010 100644
--- a/facebook/src/main/java/com/facebook/internal/WebDialog.java
+++ b/facebook/src/main/java/com/facebook/internal/WebDialog.java
@@ -25,9 +25,9 @@
 import android.app.ProgressDialog;
 import android.content.ActivityNotFoundException;
 import android.content.Context;
+import android.content.ContextWrapper;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
@@ -35,15 +35,18 @@
 import android.os.Bundle;
 import android.util.DisplayMetrics;
 import android.view.*;
-import android.webkit.SslErrorHandler;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
+import android.webkit.ValueCallback;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import com.facebook.*;
 import com.facebook.R;
 
+import org.xwalk.core.XWalkCookieManager;
+import org.xwalk.core.XWalkResourceClient;
+import org.xwalk.core.XWalkUIClient;
+import org.xwalk.core.XWalkView;
+
 import java.util.Locale;
 
 /**
@@ -82,7 +85,7 @@
     private String url;
     private String expectedRedirectUrl = REDIRECT_URI;
     private OnCompleteListener onCompleteListener;
-    private WebView webView;
+    private XWalkView webView;
     private ProgressDialog spinner;
     private ImageView crossImageView;
     private FrameLayout contentFrameLayout;
@@ -289,7 +292,7 @@ protected boolean isPageFinished() {
         return isPageFinished;
     }
 
-    protected WebView getWebView() {
+    protected XWalkView getWebView() {
         return webView;
     }
 
@@ -387,7 +390,7 @@ public void onClick(View v) {
     @SuppressLint("SetJavaScriptEnabled")
     private void setUpWebView(int margin) {
         LinearLayout webViewContainer = new LinearLayout(getContext());
-        webView = new WebView(getContext().getApplicationContext()) {
+        webView = new XWalkView(((ContextWrapper) getContext()).getBaseContext()) {
             /* Prevent NPE on Motorola 2.2 devices
              * See https://groups.google.com/forum/?fromgroups=#!topic/android-developers/ktbwY2gtLKQ
              */
@@ -401,14 +404,15 @@ public void onWindowFocusChanged(boolean hasWindowFocus) {
         };
         webView.setVerticalScrollBarEnabled(false);
         webView.setHorizontalScrollBarEnabled(false);
-        webView.setWebViewClient(new DialogWebViewClient());
-        webView.getSettings().setJavaScriptEnabled(true);
-        webView.loadUrl(url);
+        webView.setResourceClient(new DialogXWalkWebViewClient(webView));
+        webView.setUIClient(new XwalkWunderUiClient(webView));
+        XWalkCookieManager mCookieManager = new XWalkCookieManager();
+        mCookieManager.removeAllCookie();
+
+        webView.load(url, null);
         webView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
                 ViewGroup.LayoutParams.MATCH_PARENT));
         webView.setVisibility(View.INVISIBLE);
-        webView.getSettings().setSavePassword(false);
-        webView.getSettings().setSaveFormData(false);
         webView.setFocusable(true);
         webView.setFocusableInTouchMode(true);
         webView.setOnTouchListener(new View.OnTouchListener() {
@@ -428,9 +432,14 @@ public boolean onTouch(View v, MotionEvent event) {
         contentFrameLayout.addView(webViewContainer);
     }
 
-    private class DialogWebViewClient extends WebViewClient {
+    private class DialogXWalkWebViewClient extends XWalkResourceClient {
+
+        public DialogXWalkWebViewClient(XWalkView view) {
+            super(view);
+        }
+
         @Override
-        public boolean shouldOverrideUrlLoading(WebView view, String url) {
+        public boolean shouldOverrideUrlLoading(XWalkView view, String url) {
             Utility.logd(LOG_TAG, "Redirect URL: " + url);
             if (url.startsWith(WebDialog.this.expectedRedirectUrl)) {
                 Bundle values = parseResponseUri(url);
@@ -487,36 +496,44 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
         }
 
         @Override
-        public void onReceivedError(WebView view, int errorCode,
-                String description, String failingUrl) {
-            super.onReceivedError(view, errorCode, description, failingUrl);
+        public void onReceivedLoadError(XWalkView view, int errorCode,
+                                        String description, String failingUrl) {
+            super.onReceivedLoadError(view, errorCode, description, failingUrl);
             sendErrorToListener(new FacebookDialogException(description, errorCode, failingUrl));
         }
 
         @Override
-        public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
+        public void onReceivedSslError(XWalkView view, ValueCallback<Boolean> callback, SslError error) {
             if (DISABLE_SSL_CHECK_FOR_TESTING) {
-                handler.proceed();
+                callback.onReceiveValue(false);
             } else {
-                super.onReceivedSslError(view, handler, error);
+                super.onReceivedSslError(view, callback, error);
 
-                handler.cancel();
+                callback.onReceiveValue(false);
                 sendErrorToListener(new FacebookDialogException(null, ERROR_FAILED_SSL_HANDSHAKE, null));
             }
         }
 
+    }
+
+    public class XwalkWunderUiClient extends XWalkUIClient {
+
+        public XwalkWunderUiClient(XWalkView view) {
+            super(view);
+        }
+
         @Override
-        public void onPageStarted(WebView view, String url, Bitmap favicon) {
+        public void onPageLoadStarted(XWalkView view, String url) {
             Utility.logd(LOG_TAG, "Webview loading URL: " + url);
-            super.onPageStarted(view, url, favicon);
+            super.onPageLoadStarted(view, url);
             if (!isDetached) {
                 spinner.show();
             }
         }
 
         @Override
-        public void onPageFinished(WebView view, String url) {
-            super.onPageFinished(view, url);
+        public void onPageLoadStopped(XWalkView view, String url, XWalkUIClient.LoadStatus status) {
+            super.onPageLoadStopped(view, url, status);
             if (!isDetached) {
                 spinner.dismiss();
             }
diff --git a/samples/ShareIt/AndroidManifest.xml b/samples/ShareIt/AndroidManifest.xml
index 697a3eaae..195d03424 100644
--- a/samples/ShareIt/AndroidManifest.xml
+++ b/samples/ShareIt/AndroidManifest.xml
@@ -20,9 +20,11 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.shareit">
+    package="com.example.shareit"
+    xmlns:tools="http://schemas.android.com/tools">
 
     <uses-permission android:name="android.permission.INTERNET" />
+    <uses-sdk tools:overrideLibrary="org.xwalk.core"/>
 
     <application
         android:name="com.example.shareit.ShareItApplication"
