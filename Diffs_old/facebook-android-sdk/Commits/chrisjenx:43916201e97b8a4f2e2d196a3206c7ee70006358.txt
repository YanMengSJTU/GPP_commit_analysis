diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index 472dcab19..0e39848e3 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -18,6 +18,7 @@
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.MalformedURLException;
 
 import android.Manifest;
@@ -743,13 +744,48 @@ public String request(String graphPath, Bundle parameters)
 	 */
 	public String request(String graphPath, Bundle params, String httpMethod)
 			throws FileNotFoundException, MalformedURLException, IOException {
+		return request(graphPath, params, httpMethod, null, null);
+	}
+
+	/**
+	 * Synchronously make a request to the Facebook Graph API with the given
+	 * HTTP method and string parameters. Note that binary data parameters (e.g.
+	 * pictures) are not yet supported by this helper function.
+	 * 
+	 * See http://developers.facebook.com/docs/api
+	 * 
+	 * Note that this method blocks waiting for a network response, so do not
+	 * call it in a UI thread.
+	 * 
+	 * @param graphPath
+	 *            Path to resource in the Facebook graph, e.g., to fetch data
+	 *            about the currently logged authenticated user, provide "me",
+	 *            which will fetch http://graph.facebook.com/me
+	 * @param params
+	 *            Key-value string parameters, e.g. the path "search" with
+	 *            parameters {"q" : "facebook"} would produce a query for the
+	 *            following graph resource:
+	 *            https://graph.facebook.com/search?q=facebook
+	 * @param httpMethod
+	 *            http verb, e.g. "GET", "POST", "DELETE"
+	 * @param uploadStream
+	 *            - InputStream useful for uploading large files
+	 * @param uploadName
+	 *            - http param name for uploadStream
+	 * @throws IOException
+	 * @throws MalformedURLException
+	 * @return JSON string representation of the response
+	 */
+	public String request(String graphPath, Bundle params, String httpMethod,
+			InputStream upload, String uploadName)
+			throws FileNotFoundException, MalformedURLException, IOException {
 		params.putString("format", "json");
 		if (isSessionValid()) {
 			params.putString(TOKEN, getAccessToken());
 		}
 		String url = (graphPath != null) ? GRAPH_BASE_URL + graphPath
 				: RESTSERVER_URL;
-		return Util.openUrl(url, httpMethod, params);
+		return Util.openUrl(url, httpMethod, params, upload, uploadName);
 	}
 
 	/**
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index 617b8c388..0320312ec 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -161,13 +161,19 @@ public static Bundle parseUrl(String url) {
 	 *            - the HTTP method to use ("GET", "POST", etc.)
 	 * @param params
 	 *            - the query parameter for the URL (e.g. access_token=foo)
+	 * @param uploadStream
+	 *            - InputStream useful for uploading large files
+	 * @param uploadName
+	 *            - http param name for uploadStream
 	 * @return the URL contents as a String
 	 * @throws MalformedURLException
 	 *             - if the URL format is invalid
 	 * @throws IOException
 	 *             - if a network problem occurs
 	 */
-	public static String openUrl(String url, String method, Bundle params)
+
+	public static String openUrl(String url, String method, Bundle params,
+			final InputStream uploadStream, final String uploadName)
 			throws MalformedURLException, IOException {
 
 		// HTTP connection reuse was buggy pre-froyo
@@ -239,7 +245,6 @@ public static String openUrl(String url, String method, Bundle params)
 			os.write(sb.toString().getBytes());
 
 			if (!dataparams.isEmpty()) {
-
 				for (String key : dataparams.keySet()) {
 					os.write(("Content-Disposition: form-data; filename=\""
 							+ key + "\"" + END_LINE).getBytes());
@@ -251,6 +256,23 @@ public static String openUrl(String url, String method, Bundle params)
 
 				}
 			}
+
+			if (null != uploadStream) {
+				os.write(("Content-Disposition: form-data; filename=\""
+						+ uploadName + "\"" + END_LINE).getBytes());
+				os.write(("Content-Type: content/unknown" + END_LINE + END_LINE)
+						.getBytes());
+
+				int count;
+				byte[] buffer = new byte[8 * 1024];
+				while ((count = uploadStream.read(buffer)) > 0) {
+					os.write(buffer, 0, count);
+				}
+
+				os.write((END_LINE + TWO_HYPHENS + BOUNDARY + END_LINE)
+						.getBytes());
+			}
+
 			os.flush();
 			os.close();
 		}
