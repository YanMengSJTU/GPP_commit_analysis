diff --git a/facebook/res/layout/com_facebook_search_bar_layout.xml b/facebook/res/layout/com_facebook_search_bar_layout.xml
index 79dbabbf0..5de1a6db9 100644
--- a/facebook/res/layout/com_facebook_search_bar_layout.xml
+++ b/facebook/res/layout/com_facebook_search_bar_layout.xml
@@ -20,7 +20,7 @@
             android:singleLine="true"
             android:layout_gravity="center"
             android:gravity="center_vertical"
-            android:textSize="16dp"
+            android:textSize="16sp"
             android:textColor="@android:color/black"
             android:textColorHint="@color/com_facebook_picker_search_bar_text"
             android:background="@color/com_facebook_picker_search_bar_background"
diff --git a/facebook/res/layout/com_facebook_usersettingsfragment.xml b/facebook/res/layout/com_facebook_usersettingsfragment.xml
index 04a9a1ded..c35c18654 100644
--- a/facebook/res/layout/com_facebook_usersettingsfragment.xml
+++ b/facebook/res/layout/com_facebook_usersettingsfragment.xml
@@ -23,7 +23,7 @@
     android:background="@drawable/com_facebook_usersettingsfragment_background_gradient" >
     <LinearLayout
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_height="wrap_content"
         android:orientation="vertical">
 
         <ImageView
diff --git a/facebook/src/com/facebook/AccessToken.java b/facebook/src/com/facebook/AccessToken.java
index bb6693929..392d677e3 100644
--- a/facebook/src/com/facebook/AccessToken.java
+++ b/facebook/src/com/facebook/AccessToken.java
@@ -56,17 +56,22 @@
 
     private final Date expires;
     private final List<String> permissions;
+    private final List<String> declinedPermissions;
     private final String token;
     private final AccessTokenSource source;
     private final Date lastRefresh;
 
-    AccessToken(String token, Date expires, List<String> permissions, AccessTokenSource source, Date lastRefresh) {
+    AccessToken(String token, Date expires, List<String> permissions, List<String> declinedPermissions, AccessTokenSource source, Date lastRefresh) {
         if (permissions == null) {
             permissions = Collections.emptyList();
         }
+        if (declinedPermissions == null) {
+            declinedPermissions = Collections.emptyList();
+        }
 
         this.expires = expires;
         this.permissions = Collections.unmodifiableList(permissions);
+        this.declinedPermissions = Collections.unmodifiableList(declinedPermissions);
         this.token = token;
         this.source = source;
         this.lastRefresh = lastRefresh;
@@ -102,6 +107,18 @@ public Date getExpires() {
         return this.permissions;
     }
 
+    /**
+     * Gets the list of permissions declined by the user with this access token.  It represents the entire set
+     * of permissions that have been requested and declined.  Note that the most up-to-date list of permissions is
+     * maintained by the Facebook service, so this list may be outdated if permissions have been granted or declined
+     * since the last time an AccessToken object was created.
+     *
+     * @return a read-only list of strings representing the permissions declined by the user
+     */
+    public List<String> getDeclinedPermissions() {
+        return this.declinedPermissions;
+    }
+
     /**
      * Gets the {@link AccessTokenSource} indicating how this access token was obtained.
      *
@@ -150,7 +167,7 @@ public static AccessToken createFromExistingAccessToken(String accessToken, Date
             accessTokenSource = DEFAULT_ACCESS_TOKEN_SOURCE;
         }
 
-        return new AccessToken(accessToken, expirationTime, permissions, accessTokenSource, lastRefreshTime);
+        return new AccessToken(accessToken, expirationTime, permissions, null, accessTokenSource, lastRefreshTime);
     }
 
     /**
@@ -183,13 +200,13 @@ public String toString() {
         return builder.toString();
     }
 
-    static AccessToken createEmptyToken(List<String> permissions) {
-        return new AccessToken("", ALREADY_EXPIRED_EXPIRATION_TIME, permissions, AccessTokenSource.NONE,
+    static AccessToken createEmptyToken() {
+        return new AccessToken("", ALREADY_EXPIRED_EXPIRATION_TIME, null, null, AccessTokenSource.NONE,
                 DEFAULT_LAST_REFRESH_TIME);
     }
 
     static AccessToken createFromString(String token, List<String> permissions, AccessTokenSource source) {
-        return new AccessToken(token, DEFAULT_EXPIRATION_TIME, permissions, source, DEFAULT_LAST_REFRESH_TIME);
+        return new AccessToken(token, DEFAULT_EXPIRATION_TIME, permissions, null, source, DEFAULT_LAST_REFRESH_TIME);
     }
 
     static AccessToken createFromNativeLogin(Bundle bundle, AccessTokenSource source) {
@@ -198,7 +215,7 @@ static AccessToken createFromNativeLogin(Bundle bundle, AccessTokenSource source
         ArrayList<String> permissions = bundle.getStringArrayList(NativeProtocol.EXTRA_PERMISSIONS);
         String token = bundle.getString(NativeProtocol.EXTRA_ACCESS_TOKEN);
 
-        return createNew(permissions, token, expires, source);
+        return createNew(permissions, null, token, expires, source);
     }
 
     static AccessToken createFromWebBundle(List<String> requestedPermissions, Bundle bundle, AccessTokenSource source) {
@@ -210,8 +227,13 @@ static AccessToken createFromWebBundle(List<String> requestedPermissions, Bundle
         if (!Utility.isNullOrEmpty(grantedPermissions)) {
             requestedPermissions =  new ArrayList<String>(Arrays.asList(grantedPermissions.split(",")));
         }
+        String deniedPermissions = bundle.getString("denied_scopes");
+        List<String> declinedPermissions = null;
+        if (!Utility.isNullOrEmpty(deniedPermissions)) {
+            declinedPermissions = new ArrayList<String>(Arrays.asList(deniedPermissions.split(",")));
+        }
 
-        return createNew(requestedPermissions, token, expires, source);
+        return createNew(requestedPermissions, declinedPermissions, token, expires, source);
     }
 
     @SuppressLint("FieldGetter")
@@ -225,35 +247,48 @@ static AccessToken createFromRefresh(AccessToken current, Bundle bundle) {
         Date expires = getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date(0));
         String token = bundle.getString(ACCESS_TOKEN_KEY);
 
-        return createNew(current.getPermissions(), token, expires, current.source);
+        return createNew(current.getPermissions(), current.getDeclinedPermissions(), token, expires, current.source);
     }
 
-    static AccessToken createFromTokenWithRefreshedPermissions(AccessToken token, List<String> permissions) {
-        return new AccessToken(token.token, token.expires, permissions, token.source, token.lastRefresh);
+    static AccessToken createFromTokenWithRefreshedPermissions(
+            AccessToken token,
+            List<String> grantedPermissions,
+            List<String> declinedPermissions) {
+        return new AccessToken(token.token, token.expires, grantedPermissions, declinedPermissions, token.source, token.lastRefresh);
     }
 
     private static AccessToken createNew(
-            List<String> requestedPermissions, String accessToken, Date expires, AccessTokenSource source) {
+            List<String> grantedPermissions,
+            List<String> declinedPermissions,
+            String accessToken, Date expires,
+            AccessTokenSource source) {
         if (Utility.isNullOrEmpty(accessToken) || (expires == null)) {
-            return createEmptyToken(requestedPermissions);
+            return createEmptyToken();
         } else {
-            return new AccessToken(accessToken, expires, requestedPermissions, source, new Date());
+            return new AccessToken(accessToken, expires, grantedPermissions, declinedPermissions, source, new Date());
         }
     }
 
     static AccessToken createFromCache(Bundle bundle) {
+        List<String> permissions = getPermissionsFromBundle(bundle, TokenCachingStrategy.PERMISSIONS_KEY);
+        List<String> declinedPermissions = getPermissionsFromBundle(bundle, TokenCachingStrategy.DECLINED_PERMISSIONS_KEY);
+
+        return new AccessToken(bundle.getString(TokenCachingStrategy.TOKEN_KEY), TokenCachingStrategy.getDate(bundle,
+                TokenCachingStrategy.EXPIRATION_DATE_KEY), permissions, declinedPermissions,
+                TokenCachingStrategy.getSource(bundle),
+                TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY));
+    }
+
+    static List<String> getPermissionsFromBundle(Bundle bundle, String key) {
         // Copy the list so we can guarantee immutable
-        List<String> originalPermissions = bundle.getStringArrayList(TokenCachingStrategy.PERMISSIONS_KEY);
+        List<String> originalPermissions = bundle.getStringArrayList(key);
         List<String> permissions;
         if (originalPermissions == null) {
             permissions = Collections.emptyList();
         } else {
             permissions = Collections.unmodifiableList(new ArrayList<String>(originalPermissions));
         }
-
-        return new AccessToken(bundle.getString(TokenCachingStrategy.TOKEN_KEY), TokenCachingStrategy.getDate(bundle,
-                TokenCachingStrategy.EXPIRATION_DATE_KEY), permissions, TokenCachingStrategy.getSource(bundle),
-                TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY));
+        return permissions;
     }
 
     Bundle toCacheBundle() {
@@ -262,6 +297,7 @@ Bundle toCacheBundle() {
         bundle.putString(TokenCachingStrategy.TOKEN_KEY, this.token);
         TokenCachingStrategy.putDate(bundle, TokenCachingStrategy.EXPIRATION_DATE_KEY, expires);
         bundle.putStringArrayList(TokenCachingStrategy.PERMISSIONS_KEY, new ArrayList<String>(permissions));
+        bundle.putStringArrayList(TokenCachingStrategy.DECLINED_PERMISSIONS_KEY, new ArrayList<String>(declinedPermissions));
         bundle.putSerializable(TokenCachingStrategy.TOKEN_SOURCE_KEY, source);
         TokenCachingStrategy.putDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY, lastRefresh);
 
@@ -282,7 +318,7 @@ private static AccessToken createFromBundle(List<String> requestedPermissions, B
             return null;
         }
 
-        return new AccessToken(token, expires, requestedPermissions, source, new Date());
+        return new AccessToken(token, expires, requestedPermissions, null, source, new Date());
     }
 
     private String tokenToString() {
@@ -324,12 +360,37 @@ private SerializationProxyV1(String token, Date expires,
         }
 
         private Object readResolve() {
-            return new AccessToken(token, expires, permissions, source, lastRefresh);
+            return new AccessToken(token, expires, permissions, null, source, lastRefresh);
+        }
+    }
+
+    private static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = -2488473066578201068L;
+        private final Date expires;
+        private final List<String> permissions;
+        private final List<String> declinedPermissions;
+        private final String token;
+        private final AccessTokenSource source;
+        private final Date lastRefresh;
+
+        private SerializationProxyV2(String token, Date expires,
+                                     List<String> permissions, List<String> declinedPermissions,
+                                     AccessTokenSource source, Date lastRefresh) {
+            this.expires = expires;
+            this.permissions = permissions;
+            this.declinedPermissions = declinedPermissions;
+            this.token = token;
+            this.source = source;
+            this.lastRefresh = lastRefresh;
+        }
+
+        private Object readResolve() {
+            return new AccessToken(token, expires, permissions, declinedPermissions, source, lastRefresh);
         }
     }
 
     private Object writeReplace() {
-        return new SerializationProxyV1(token, expires, permissions, source, lastRefresh);
+        return new SerializationProxyV2(token, expires, permissions, declinedPermissions, source, lastRefresh);
     }
 
     // have a readObject that throws to prevent spoofing
diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index 5de41dd88..70ac8a103 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -361,7 +361,8 @@ RequestBatch createReauthValidationBatch(final Result pendingResult) {
         // request using the current token to get the permissions of the user.
 
         final ArrayList<String> fbids = new ArrayList<String>();
-        final ArrayList<String> tokenPermissions = new ArrayList<String>();
+        final ArrayList<String> grantedPermissions = new ArrayList<String>();
+        final ArrayList<String> declinedPermissions = new ArrayList<String>();
         final String newToken = pendingResult.token.getToken();
 
         Request.Callback meCallback = new Request.Callback() {
@@ -389,9 +390,10 @@ public void onCompleted(Response response) {
             @Override
             public void onCompleted(Response response) {
                 try {
-                    List<String> permissions = Session.handlePermissionResponse(null, response);
-                    if (permissions != null) {
-                        tokenPermissions.addAll(permissions);
+                    Session.PermissionsPair permissionsPair = Session.handlePermissionResponse(response);
+                    if (permissionsPair != null) {
+                        grantedPermissions.addAll(permissionsPair.getGrantedPermissions());
+                        declinedPermissions.addAll(permissionsPair.getDeclinedPermissions());
                     }
                 } catch (Exception ex) {
                 }
@@ -411,7 +413,7 @@ public void onBatchCompleted(RequestBatch batch) {
                         // Modify the token to have the right permission set.
                         AccessToken tokenWithPermissions = AccessToken
                                 .createFromTokenWithRefreshedPermissions(pendingResult.token,
-                                        tokenPermissions);
+                                        grantedPermissions, declinedPermissions);
                         result = Result.createTokenResult(pendingRequest, tokenWithPermissions);
                     } else {
                         result = Result
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 54f6e59c0..7525134b4 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,5 +17,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.14.1";
+    public static final String BUILD = "3.15.0";
 }
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 7590115b2..d0d2b5656 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -141,8 +141,6 @@
     private AuthorizationRequest pendingAuthorizationRequest;
     private AuthorizationClient authorizationClient;
 
-    private Set<String> requestedPermissions = new HashSet<String>();
-
     // The following are not serialized with the Session object
     private volatile Bundle authorizationBundle;
     private final List<StatusCallback> callbacks;
@@ -250,7 +248,6 @@ private Session(String applicationId, SessionState state,
         this.tokenInfo = tokenInfo;
         this.lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate;
         this.pendingAuthorizationRequest = pendingAuthorizationRequest;
-        this.requestedPermissions = requestedPermissions;
         handler = new Handler(Looper.getMainLooper());
         currentTokenRefreshRequest = null;
         tokenCachingStrategy = null;
@@ -303,14 +300,14 @@ public Session(Context currentContext) {
                 // If expired or we require new permissions, clear out the
                 // current token cache.
                 tokenCachingStrategy.clear();
-                this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+                this.tokenInfo = AccessToken.createEmptyToken();
             } else {
                 // Otherwise we have a valid token, so use it.
                 this.tokenInfo = AccessToken.createFromCache(tokenState);
                 this.state = SessionState.CREATED_TOKEN_LOADED;
             }
         } else {
-            this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+            this.tokenInfo = AccessToken.createEmptyToken();
         }
     }
 
@@ -437,20 +434,7 @@ public boolean isPermissionGranted(String permission) {
      */
     public final List<String> getDeclinedPermissions() {
         synchronized (this.lock) {
-            List<String> grantedPermissions = getPermissions();
-            List<String> declinedPermissions = new ArrayList<String>(requestedPermissions);
-            if (grantedPermissions != null) {
-                boolean removedBasicInfo = false;
-                for (String permission : grantedPermissions) {
-                    declinedPermissions.remove(permission);
-                    // We can remove "basic_info" permission if we have any granted permissions
-                    if (!removedBasicInfo && requestedPermissions.contains(BASIC_INFO_PERMISSION)) {
-                        declinedPermissions.remove(BASIC_INFO_PERMISSION);
-                        removedBasicInfo = true;
-                    }
-                }
-            }
-            return declinedPermissions;
+            return (this.tokenInfo == null) ? null : this.tokenInfo.getDeclinedPermissions();
         }
     }
 
@@ -623,11 +607,12 @@ public final void refreshPermissions() {
         request.setCallback(new Request.Callback() {
             @Override
             public void onCompleted(Response response) {
-                List<String> grantedPermissions = handlePermissionResponse(Session.this, response);
-                if (grantedPermissions != null) {
+                PermissionsPair permissionsPair = handlePermissionResponse(response);
+                if (permissionsPair != null) {
                     // Update our token with the refreshed permissions
                     synchronized (lock) {
-                        tokenInfo = AccessToken.createFromTokenWithRefreshedPermissions(tokenInfo, grantedPermissions);
+                        tokenInfo = AccessToken.createFromTokenWithRefreshedPermissions(tokenInfo,
+                                permissionsPair.getGrantedPermissions(), permissionsPair.getDeclinedPermissions());
                         postStateChange(state, SessionState.OPENED_TOKEN_UPDATED, null);
                     }
                 }
@@ -636,16 +621,35 @@ public void onCompleted(Response response) {
         request.executeAsync();
     }
 
+    /**
+     * Internal helper class that is used to hold two different permission lists (granted and declined)
+     */
+    static class PermissionsPair {
+        List<String> grantedPermissions;
+        List<String> declinedPermissions;
+
+        public PermissionsPair(List<String> grantedPermissions, List<String> declinedPermissions) {
+            this.grantedPermissions = grantedPermissions;
+            this.declinedPermissions = declinedPermissions;
+        }
+
+        public List<String> getGrantedPermissions() {
+            return grantedPermissions;
+        }
+
+        public List<String> getDeclinedPermissions() {
+            return declinedPermissions;
+        }
+    }
     /**
      * This parses a server response to a call to me/permissions.  It will return the list of granted permissions.
      * It will optionally update a session with the requested permissions.  It also handles the distinction between
      * 1.0 and 2.0 calls to the endpoint.
      *
-     * @param session An optional session to update the requested permission set
      * @param response The server response
      * @return A list of granted permissions or null if an error
      */
-    static List<String> handlePermissionResponse(Session session, Response response) {
+    static PermissionsPair handlePermissionResponse(Response response) {
         if (response.getError() != null) {
             return null;
         }
@@ -659,18 +663,22 @@ public void onCompleted(Response response) {
         if (data == null || data.size() == 0) {
             return null;
         }
-        List<String> allPermissions = new ArrayList<String>(data.size());
         List<String> grantedPermissions = new ArrayList<String>(data.size());
+        List<String> declinedPermissions = new ArrayList<String>(data.size());
 
         // Check if we are dealing with v2.0 or v1.0 behavior until the server is updated
         GraphObject firstObject = data.get(0);
         if (firstObject.getProperty("permission") != null) { // v2.0
             for (GraphObject graphObject : data) {
                 String permission = (String) graphObject.getProperty("permission");
+                if (permission.equals("installed")) {
+                    continue;
+                }
                 String status = (String) graphObject.getProperty("status");
-                allPermissions.add(permission);
                 if(status.equals("granted")) {
                     grantedPermissions.add(permission);
+                } else if (status.equals("declined")) {
+                    declinedPermissions.add(permission);
                 }
             }
         } else { // v1.0
@@ -679,18 +687,13 @@ public void onCompleted(Response response) {
                 if (entry.getKey().equals("installed")) {
                     continue;
                 }
-                allPermissions.add(entry.getKey());
                 if ((Integer)entry.getValue() == 1) {
                     grantedPermissions.add(entry.getKey());
                 }
             }
         }
 
-        // If we have a session track all the permissions that were requested
-        if (session != null) {
-            session.addRequestedPermissions(allPermissions);
-        }
-        return grantedPermissions;
+        return new PermissionsPair(grantedPermissions, declinedPermissions);
     }
 
     /**
@@ -852,8 +855,8 @@ void extendTokenCompleted(Bundle bundle) {
     }
 
     private Object writeReplace() {
-        return new SerializationProxyV2(applicationId, state, tokenInfo,
-                lastAttemptedTokenExtendDate, false, pendingAuthorizationRequest, requestedPermissions);
+        return new SerializationProxyV1(applicationId, state, tokenInfo,
+                lastAttemptedTokenExtendDate, false, pendingAuthorizationRequest);
     }
 
     // have a readObject that throws to prevent spoofing
@@ -1152,8 +1155,6 @@ void authorize(AuthorizationRequest request) {
 
         started = tryLoginActivity(request);
 
-        addRequestedPermissions(request.getPermissions());
-
         pendingAuthorizationRequest.loggingExtras.put(AuthorizationClient.EVENT_EXTRAS_TRY_LOGIN_ACTIVITY,
                 started ? AppEventsConstants.EVENT_PARAM_VALUE_YES : AppEventsConstants.EVENT_PARAM_VALUE_NO);
 
@@ -1514,14 +1515,6 @@ private void saveTokenToCache(AccessToken newToken) {
         }
     }
 
-    private void addRequestedPermissions(List<String> permissions) {
-        synchronized (this.lock) {
-            for(String permission : permissions) {
-                requestedPermissions.add(permission);
-            }
-        }
-    }
-
     void postStateChange(final SessionState oldState, final SessionState newState, final Exception exception) {
         // When we request new permissions, we stay in SessionState.OPENED_TOKEN_UPDATED,
         // but we still want notifications of the state change since permissions are
@@ -1533,7 +1526,7 @@ void postStateChange(final SessionState oldState, final SessionState newState, f
         }
 
         if (newState.isClosed()) {
-            this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+            this.tokenInfo = AccessToken.createEmptyToken();
         }
 
         // Need to schedule the callbacks inside the same queue to preserve ordering.
diff --git a/facebook/src/com/facebook/TestSession.java b/facebook/src/com/facebook/TestSession.java
index ac5fa6d66..821c1f95d 100644
--- a/facebook/src/com/facebook/TestSession.java
+++ b/facebook/src/com/facebook/TestSession.java
@@ -350,7 +350,7 @@ void forceExtendAccessToken(boolean forceExtendAccessToken) {
         AccessToken currentToken = getTokenInfo();
         setTokenInfo(
                 new AccessToken(currentToken.getToken(), new Date(), currentToken.getPermissions(),
-                        AccessTokenSource.TEST_USER, new Date(0)));
+                        currentToken.getDeclinedPermissions(), AccessTokenSource.TEST_USER, new Date(0)));
         setLastAttemptedTokenExtendDate(new Date(0));
     }
 
diff --git a/facebook/src/com/facebook/TokenCachingStrategy.java b/facebook/src/com/facebook/TokenCachingStrategy.java
index 6f18cc3fe..c615be640 100644
--- a/facebook/src/com/facebook/TokenCachingStrategy.java
+++ b/facebook/src/com/facebook/TokenCachingStrategy.java
@@ -76,6 +76,12 @@
      */
     public static final String PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.Permissions";
 
+    /**
+     * The key used by Session to store the list of permissions declined by the user in the token in the Bundle
+     * during load and save.
+     */
+    public static final String DECLINED_PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.DeclinedPermissions";
+
     private static final long INVALID_BUNDLE_MILLISECONDS = Long.MIN_VALUE;
     private static final String IS_SSO_KEY = "com.facebook.TokenCachingStrategy.IsSSO";
 
@@ -266,6 +272,31 @@ public static void putPermissions(Bundle bundle, List<String> value) {
         bundle.putStringArrayList(PERMISSIONS_KEY, arrayList);
     }
 
+    /**
+     * Puts the list of declined permissions into a Bundle.
+     *
+     * @param bundle
+     *            A Bundle in which the list of permissions should be stored.
+     * @param value
+     *            The List&lt;String&gt; representing the list of permissions,
+     *            or null.
+     *
+     * @throws NullPointerException if the passed in Bundle or permissions list are null
+     */
+    public static void putDeclinedPermissions(Bundle bundle, List<String> value) {
+        Validate.notNull(bundle, "bundle");
+        Validate.notNull(value, "value");
+
+        ArrayList<String> arrayList;
+        if (value instanceof ArrayList<?>) {
+            arrayList = (ArrayList<String>) value;
+        } else {
+            arrayList = new ArrayList<String>(value);
+        }
+        bundle.putStringArrayList(DECLINED_PERMISSIONS_KEY, arrayList);
+    }
+
+
     /**
      * Gets the cached enum indicating the source of the token from the Bundle.
      *
diff --git a/facebook/src/com/facebook/model/GraphUser.java b/facebook/src/com/facebook/model/GraphUser.java
index c2daca049..51db95d4e 100644
--- a/facebook/src/com/facebook/model/GraphUser.java
+++ b/facebook/src/com/facebook/model/GraphUser.java
@@ -112,13 +112,14 @@
     public void setBirthday(String birthday);
 
     /**
-     * Returns the current city of the user.
-     * @return the current city of the user
+     * Returns the current place of the user.
+     * @return the current place of the user
      */
-    public GraphLocation getLocation();
+    public GraphPlace getLocation();
+
     /**
-     * Sets the current city of the user.
-     * @param location the current city of the user
+     * Sets the current place of the user.
+     * @param location the current place of the user
      */
-    public void setLocation(GraphLocation location);
+    public void setLocation(GraphPlace location);
 }
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
index 59ba695ee..1322228ca 100644
--- a/facebook/src/com/facebook/widget/FacebookDialog.java
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -1009,6 +1009,7 @@ int getMaximumNumberOfPhotos() {
      * Message dialog. This builder will throw an exception if the Facebook Messenger application is not installed, so it
      * should only be used if {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
      * com.facebook.widget.FacebookDialog.MessageDialogFeature...)}  indicates the capability is available.
+     * The "friends" and "place" properties will be ignored as the Facebook Messenger app does not support tagging.
      */
     public static class MessageDialogBuilder extends ShareDialogBuilderBase<MessageDialogBuilder> {
 
diff --git a/facebook/src/com/facebook/widget/GraphObjectAdapter.java b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
index 3686cb8b2..552474933 100644
--- a/facebook/src/com/facebook/widget/GraphObjectAdapter.java
+++ b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
@@ -435,7 +435,7 @@ String getPictureFieldSpecifier() {
 
         // Note: these dimensions are in pixels, not dips
         ViewGroup.LayoutParams layoutParams = picture.getLayoutParams();
-        return String.format("picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
+        return String.format(Locale.US, "picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
     }
 
 
diff --git a/facebook/src/com/facebook/widget/WebDialog.java b/facebook/src/com/facebook/widget/WebDialog.java
index 374bbe24d..84be24eec 100644
--- a/facebook/src/com/facebook/widget/WebDialog.java
+++ b/facebook/src/com/facebook/widget/WebDialog.java
@@ -700,7 +700,8 @@ public FeedDialogBuilder setFrom(String id) {
 
         /**
          * Sets the ID of the profile that the story will be published to. If not specified, it
-         * will default to the same profile that the story is being published from.
+         * will default to the same profile that the story is being published from. The ID must be a friend who also
+         * uses your app.
          *
          * @param id Facebook ID of the profile to post to
          * @return the builder
diff --git a/facebook/tests/src/com/facebook/AccessTokenTests.java b/facebook/tests/src/com/facebook/AccessTokenTests.java
index 09220b0f9..7f4139be9 100644
--- a/facebook/tests/src/com/facebook/AccessTokenTests.java
+++ b/facebook/tests/src/com/facebook/AccessTokenTests.java
@@ -38,19 +38,7 @@
     @LargeTest
     public void testEmptyToken() {
         List<String> permissions = Utility.arrayList();
-        AccessToken token = AccessToken.createEmptyToken(permissions);
-        TestUtils.assertSamePermissions(permissions, token);
-        assertEquals("", token.getToken());
-        assertTrue(token.isInvalid());
-        assertTrue(token.getExpires().before(new Date()));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyTokenWithPermissions() {
-        List<String> permissions = Utility.arrayList("stream_publish");
-        AccessToken token = AccessToken.createEmptyToken(permissions);
+        AccessToken token = AccessToken.createEmptyToken();
         TestUtils.assertSamePermissions(permissions, token);
         assertEquals("", token.getToken());
         assertTrue(token.isInvalid());
@@ -142,6 +130,7 @@ public void testFromNativeLogin() {
     @LargeTest
     public void testCacheRoundtrip() {
         ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
+        ArrayList<String> declinedPermissions = Utility.arrayList("no you may not", "no soup for you");
         String token = "AnImaginaryTokenValue";
         Date later = TestUtils.nowPlusSeconds(60);
         Date earlier = TestUtils.nowPlusSeconds(-60);
@@ -152,6 +141,7 @@ public void testCacheRoundtrip() {
         TokenCachingStrategy.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION_WEB);
         TokenCachingStrategy.putLastRefreshDate(bundle, earlier);
         TokenCachingStrategy.putPermissions(bundle, permissions);
+        TokenCachingStrategy.putDeclinedPermissions(bundle, declinedPermissions);
 
         AccessToken accessToken = AccessToken.createFromCache(bundle);
         TestUtils.assertSamePermissions(permissions, accessToken);
@@ -229,7 +219,7 @@ public void testBasicSerialization() throws IOException {
     @LargeTest
     public void testPermissionsAreImmutable() {
         List<String> permissions = Arrays.asList("go to Jail", "do not pass Go");
-        AccessToken accessToken = new AccessToken("some token", new Date(), permissions,
+        AccessToken accessToken = new AccessToken("some token", new Date(), permissions, null,
                 AccessTokenSource.FACEBOOK_APPLICATION_WEB, new Date());
 
         permissions = accessToken.getPermissions();
diff --git a/facebook/tests/src/com/facebook/SessionTests.java b/facebook/tests/src/com/facebook/SessionTests.java
index 3f5a9f6a6..331152c4c 100644
--- a/facebook/tests/src/com/facebook/SessionTests.java
+++ b/facebook/tests/src/com/facebook/SessionTests.java
@@ -580,7 +580,7 @@ public void testOpenWithAccessToken() {
         session.open(accessToken, statusRecorder);
         statusRecorder.waitForCall(session, SessionState.OPENED, null);
 
-        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions,
+        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions, null,
                 AccessTokenSource.FACEBOOK_APPLICATION_WEB, lastRefreshDate);
         verifySessionHasToken(session, expectedToken);
 
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
index 42fb88e64..36763afc0 100644
--- a/samples/RPSSample/res/values/strings.xml
+++ b/samples/RPSSample/res/values/strings.xml
@@ -31,6 +31,7 @@
     <string name="result_lost">lost</string>
     <string name="result_tied">tied</string>
     <string name="share_on_facebook">Share on Facebook</string>
+    <string name="send_with_messenger">Send with Messenger</string>
     <string name="see_friends">See Friends</string>
     <string name="check_settings">Check Facebook Settings</string>
     <string name="friends_using_rps">Friends Rockin\' RPS</string>
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
index 1740ecd2e..5e6efe1f6 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
@@ -43,6 +43,7 @@
     private MenuItem settings;
     private MenuItem friends;
     private MenuItem share;
+    private MenuItem message;
     private boolean isResumed = false;
     private UiLifecycleHelper uiHelper;
     private Session.StatusCallback callback = new Session.StatusCallback() {
@@ -133,6 +134,7 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         if (fragments[RPS].isVisible()) {
             if (menu.size() == 0) {
                 share = menu.add(R.string.share_on_facebook);
+                message = menu.add(R.string.send_with_messenger);
                 friends = menu.add(R.string.see_friends);
                 settings = menu.add(R.string.check_settings);
             }
@@ -158,6 +160,10 @@ public boolean onOptionsItemSelected(MenuItem item) {
             RpsFragment fragment = (RpsFragment) fragments[RPS];
             fragment.shareUsingNativeDialog();
             return true;
+        } else if (item.equals(message)) {
+            RpsFragment fragment = (RpsFragment) fragments[RPS];
+            fragment.shareUsingMessengerDialog();
+            return true;
         }
         return false;
     }
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
index 5627902e7..30d74bb1d 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
@@ -414,6 +414,41 @@ public void shareUsingNativeDialog() {
         }
     }
 
+    public void shareUsingMessengerDialog() {
+        if (playerChoice == INVALID_CHOICE || computerChoice == INVALID_CHOICE) {
+            FacebookDialog.MessageDialogBuilder builder = new FacebookDialog.MessageDialogBuilder(getActivity())
+                    .setLink(SHARE_GAME_LINK)
+                    .setName(SHARE_GAME_NAME)
+                    .setFragment(this);
+            // share the app
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        } else {
+            ThrowAction throwAction = OpenGraphAction.Factory.createForPost(ThrowAction.class, ThrowAction.TYPE);
+            throwAction.setGesture(getBuiltInGesture(playerChoice));
+            throwAction.setOpposingGesture(getBuiltInGesture(computerChoice));
+
+            // The OG objects have their own bitmaps we could rely on, but in order to demonstrate attaching
+            // an in-memory bitmap (e.g., a game screencap) we'll send the bitmap explicitly ourselves.
+            ImageButton view = gestureImages[playerChoice];
+            BitmapDrawable drawable = (BitmapDrawable) view.getBackground();
+            Bitmap bitmap = drawable.getBitmap();
+
+            FacebookDialog.OpenGraphMessageDialogBuilder builder = new FacebookDialog.OpenGraphMessageDialogBuilder(
+                    getActivity(),
+                    throwAction,
+                    ThrowAction.PREVIEW_PROPERTY_NAME)
+                    .setFragment(this)
+                    .setImageAttachmentsForAction(Arrays.asList(bitmap));
+
+            // share the game play
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        }
+    }
+
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
