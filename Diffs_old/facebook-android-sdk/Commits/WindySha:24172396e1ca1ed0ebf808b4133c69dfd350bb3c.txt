diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java
index e868dabb0..4b353709e 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java
@@ -28,6 +28,7 @@
 import android.content.ServiceConnection;
 import android.os.Bundle;
 import android.os.IBinder;
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.facebook.FacebookSdk;
@@ -37,8 +38,9 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 
@@ -125,20 +127,16 @@ public void run() {
                                 .getPurchasesSubs(context, inAppBillingObj);
                         logPurchaseSubs(context, purchasesSubs, new HashMap<String, String>());
 
-                        List<Integer> errorCode = new ArrayList<>();
+                        Set<Integer> errorCodes = new HashSet<>();
                         purchasesSubs.clear();
                         ArrayList<String> purchasesSubsExpire = InAppPurchaseEventManager
-                                .getPurchasesSubsExpire(context, inAppBillingObj, errorCode);
+                                .getPurchasesSubsExpire(context, inAppBillingObj, errorCodes);
                         for (String purchase : purchasesSubsExpire) {
                             purchasesSubs.put(purchase, SubscriptionType.EXPIRE);
                         }
                         Map<String, String> extraParameters = new HashMap<>();
-                        if (!errorCode.isEmpty()) {
-                            StringBuilder sb = new StringBuilder();
-                            for (int code : errorCode) {
-                                sb.append(code).append(',');
-                            }
-                            extraParameters.put("error_code", sb.toString());
+                        if (!errorCodes.isEmpty()) {
+                            extraParameters.put("error_code", TextUtils.join(",", errorCodes));
                         }
                         logPurchaseSubs(context, purchasesSubs, extraParameters);
                     }
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
index 0bbb17f54..ad0f25833 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
@@ -241,7 +241,7 @@ private static Boolean isBillingSupported(Context context,
     }
 
     static ArrayList<String> getPurchasesSubsExpire(
-            Context context, Object inAppBillingObj, List<Integer> errorCode) {
+            Context context, Object inAppBillingObj, Set<Integer> errorCodes) {
         ArrayList<String> expirePurchases = new ArrayList<>();
 
         Map<String,?> keys = purchaseSubsSharedPrefs.getAll();
@@ -250,7 +250,7 @@ private static Boolean isBillingSupported(Context context,
         }
 
         ArrayList<String> currPurchases =
-                getPurchases(context, inAppBillingObj, SUBSCRIPTION, errorCode);
+                getPurchases(context, inAppBillingObj, SUBSCRIPTION, errorCodes);
         Set<String> currSkuSet = new HashSet<>();
         for (String purchase : currPurchases) {
             try {
@@ -394,14 +394,13 @@ private static SubscriptionType getSubsType(Context context,
     private static ArrayList<String> getPurchases(Context context,
                                                   Object inAppBillingObj,
                                                   String type) {
-        return getPurchases(context, inAppBillingObj, type, new ArrayList<Integer>());
+        return getPurchases(context, inAppBillingObj, type, new HashSet<Integer>());
     }
 
     private static ArrayList<String> getPurchases(Context context,
                                                   Object inAppBillingObj,
                                                   String type,
-                                                  List<Integer> errorCode) {
-
+                                                  Set<Integer> errorCodes) {
         ArrayList<String> purchases = new ArrayList<>();
 
         if (inAppBillingObj == null) {
@@ -416,7 +415,7 @@ private static SubscriptionType getSubsType(Context context,
             do {
                 Object[] args = new Object[] {3, PACKAGE_NAME, type, continuationToken};
                 Object result = invokeMethod(context, IN_APP_BILLING_SERVICE,
-                        GET_PURCHASES, inAppBillingObj, args, errorCode);
+                        GET_PURCHASES, inAppBillingObj, args, errorCodes);
 
                 continuationToken = null;
 
@@ -435,16 +434,16 @@ private static SubscriptionType getSubsType(Context context,
                         }
                     }
                 } else {
-                    errorCode.add(ERROR_INVOKE_METHOD_RETURN_NULL);
+                    errorCodes.add(ERROR_INVOKE_METHOD_RETURN_NULL);
                 }
             } while (queriedPurchaseNum < MAX_QUERY_PURCHASE_NUM
                     && continuationToken != null);
 
             if (queriedPurchaseNum >= MAX_QUERY_PURCHASE_NUM) {
-                errorCode.add(ERROR_EXCEEDING_QUERY_NUM);
+                errorCodes.add(ERROR_EXCEEDING_QUERY_NUM);
             }
         } else {
-            errorCode.add(ERROR_BILLING_NOT_SUPPORTED);
+            errorCodes.add(ERROR_BILLING_NOT_SUPPORTED);
         }
 
         return purchases;
@@ -627,37 +626,37 @@ private static Method getMethod(Class<?> classObj, String methodName) {
     @Nullable
     private static Object invokeMethod(Context context, String className,
                                        String methodName, Object obj, Object[] args) {
-        return invokeMethod(context, className, methodName, obj, args, new ArrayList<Integer>());
+        return invokeMethod(context, className, methodName, obj, args, new HashSet<Integer>());
     }
 
     @Nullable
     private static Object invokeMethod(Context context, String className,
-                                       String methodName, Object obj, Object[] args, List<Integer> errorCode) {
+                                       String methodName, Object obj, Object[] args, Set<Integer> errorCodes) {
         Class<?> classObj = getClass(context, className);
         if (classObj == null) {
-            errorCode.add(ERROR_CLASS_OBJ_NULL);
+            errorCodes.add(ERROR_CLASS_OBJ_NULL);
             return null;
         }
 
         Method methodObj = getMethod(classObj, methodName);
         if (methodObj == null) {
-            errorCode.add(ERROR_METHOD_OBJ_NULL);
+            errorCodes.add(ERROR_METHOD_OBJ_NULL);
             return null;
         }
 
         if (obj != null) {
             obj = classObj.cast(obj);
         } else {
-            errorCode.add(ERROR_OBJ_NULL);
+            errorCodes.add(ERROR_OBJ_NULL);
             return null;
         }
 
         try {
             return methodObj.invoke(obj, args);
         } catch (IllegalAccessException e) {
-            errorCode.add(ERROR_ILLEGAL_ACCESS);
+            errorCodes.add(ERROR_ILLEGAL_ACCESS);
         } catch (InvocationTargetException e) {
-            errorCode.add(ERROR_ILLEGAL_TARGET);
+            errorCodes.add(ERROR_ILLEGAL_TARGET);
         }
 
         return null;
