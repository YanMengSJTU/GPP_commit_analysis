diff --git a/facebook/src/com/facebook/Request.java b/facebook/src/com/facebook/Request.java
index 837ce4a65..c9a9181b5 100644
--- a/facebook/src/com/facebook/Request.java
+++ b/facebook/src/com/facebook/Request.java
@@ -75,6 +75,7 @@
     private static final String MY_VIDEOS = "me/videos";
     private static final String SEARCH = "search";
     private static final String MY_FEED = "me/feed";
+    private static final String MY_ALBUMS = "me/albums";
 
     private static final String USER_AGENT_BASE = "FBAndroidSDK";
     private static final String USER_AGENT_HEADER = "User-Agent";
@@ -428,6 +429,26 @@ public static Request newStatusUpdateRequest(Session session, String message, Ca
         return new Request(session, MY_FEED, parameters, HttpMethod.POST, callback);
     }
 
+    /**
+     * Creates a new Request configured to retrieve a user's album list.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newMyAlbumsRequest(Session session, final GraphAlbumListCallback callback) {
+        Callback wrapper = new Callback() {
+            @Override
+            public void onCompleted(Response response) {
+                if (callback != null)
+                    callback.onCompleted(typedListFromResponse(response, GraphAlbum.class), response);
+            }
+        };
+        return new Request(session, MY_ALBUMS, null, null, wrapper);
+    }
+
     /**
      * Returns the GraphObject, if any, associated with this request.
      *
@@ -824,6 +845,21 @@ public static RequestAsyncTask executeStatusUpdateRequestAsync(Session session,
         return newStatusUpdateRequest(session, message, callback).executeAsync();
     }
 
+    /**
+     * Creates a new Request configured to retrieve a user's album list.
+     * <p/>
+     * This should only be called from the UI thread.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a RequestAsyncTask that is executing the request
+     */
+    public static RequestAsyncTask executeMyAlbumsRequestAsync(Session session, GraphAlbumListCallback callback) {
+        return newMyAlbumsRequest(session, callback).executeAsync();
+    }
+
     /**
      * Executes this request and returns the response.
      * <p/>
@@ -1820,4 +1856,18 @@ public void writeLine(String format, Object... args) throws IOException {
          */
         void onCompleted(List<GraphPlace> places, Response response);
     }
+
+    /**
+     * Specifies the interface that consumer of
+     * {@link FacebookRequest#executeMyAlbumsRequestAsync(Session, GraphAlbumCallback)}
+     * can use to be notified when the request completes, either successfully or
+     * with error.
+     *
+     * @author ogunwale
+     *
+     */
+    public interface GraphAlbumListCallback {
+        void onCompleted(List<GraphAlbum> albums, Response response);
+    }
+
 }
diff --git a/facebook/src/com/facebook/model/GraphAlbum.java b/facebook/src/com/facebook/model/GraphAlbum.java
new file mode 100644
index 000000000..59db6b7dc
--- /dev/null
+++ b/facebook/src/com/facebook/model/GraphAlbum.java
@@ -0,0 +1,158 @@
+package com.facebook.model;
+
+/**
+ * Provides a strongly-typed representation of the Album as defined by the Graph
+ * API. See http://developers.facebook.com/docs/reference/api/album/ for details.
+ *
+ * Note that this interface is intended to be used with GraphObject.Factory and
+ * not implemented directly.
+ *
+ * @author ogunwale
+ *
+ */
+public interface GraphAlbum extends GraphObject {
+
+	/**
+     * Returns the ID of the album.
+     * @return the ID of the album
+     */
+    public String getId();
+
+    /**
+     * Sets the ID of the album.
+     * @param Id the ID of the album
+     */
+    public void setId(String Id);
+
+    /**
+     * Returns the name of the album.
+     * @return the name of the album
+     */
+    public String getName();
+
+    /**
+     * Sets the name of the album.
+     * @param name the name of the album
+     */
+    public void setName(String name);
+
+    /**
+     * Returns the description of the album.
+     * @return the description of the album
+     */
+    public String getDescription();
+
+    /**
+     * Sets the description of the album.
+     * @param description the description of the album
+     */
+    public void setDescription(String description);
+
+    /**
+     * Returns the location of the album.
+     * @return the location of the album
+     */
+    public String getLocation();
+
+    /**
+     * Sets the location of the album.
+     * @param location the location of the album
+     */
+    public void setLocation(String location);
+
+    /**
+     * Returns the link of the album.
+     * @return the link of the album
+     */
+    public String getLink();
+
+    /**
+     * Sets the link of the album.
+     * @param link the link of the album
+     */
+    public void setLink(String link);
+
+    /**
+     * Returns the cover photo of the album.
+     * @return the cover photo of the album
+     */
+    public String getCoverPhoto();
+
+    /**
+     * Sets the cover photo of the album.
+     * @param coverPhoto the cover photo of the album
+     */
+    public void setCoverPhoto(String coverPhoto);
+
+    /**
+     * Returns the privacy setting of the album.
+     * @return the privacy setting of the album
+     */
+    public String getPrivacy();
+
+    /**
+     * Sets the privacy setting of the album.
+     * @param privacy the privacy setting of the album
+     */
+    public void setPrivacy(String privacy);
+
+    /**
+     * Returns the photos count of the album.
+     * @return the photos count of the album
+     */
+    public String getCount();
+
+    /**
+     * Sets the photos count of the album.
+     * @param count the photos count of the album
+     */
+    public void setCount(String count);
+
+    /**
+     * Returns the album type.
+     * @return the album type
+     */
+    public String getType();
+
+    /**
+     * Sets the album type.
+     * @param type the album type.
+     */
+    public void setType(String type);
+
+    /**
+     * Returns the created time of the album.
+     * @return the created time of the album
+     */
+    public String getCreatedTime();
+
+    /**
+     * Sets the created time of the album.
+     * @param createdTime the created time of the album
+     */
+    public void setCreatedTime(String createdTime);
+
+    /**
+     * Returns the updated time of the album.
+     * @return the updated time of the album
+     */
+    public String getUpdatedTime();
+
+    /**
+     * Sets the updated time of the album.
+     * @param updatedTime the updated time of the album
+     */
+    public void setUpdatedTime(String updatedTime);
+
+    /**
+     * Returns the can upload permission of the album.
+     * @return the can upload permission of the album
+     */
+    public boolean getCanUpload();
+
+    /**
+     * Sets the can upload permission of the album.
+     * @param canUpload the can upload permission of the album
+     */
+    public void setCanUpload(boolean canUpload);
+}
