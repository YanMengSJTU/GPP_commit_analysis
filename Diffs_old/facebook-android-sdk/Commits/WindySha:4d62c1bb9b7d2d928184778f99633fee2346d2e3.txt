diff --git a/facebook-common/src/main/java/com/facebook/FacebookButtonBase.java b/facebook-common/src/main/java/com/facebook/FacebookButtonBase.java
index 5cde8d40f..5a693151f 100644
--- a/facebook-common/src/main/java/com/facebook/FacebookButtonBase.java
+++ b/facebook-common/src/main/java/com/facebook/FacebookButtonBase.java
@@ -37,6 +37,7 @@
 
 import com.facebook.FacebookException;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.FragmentWrapper;
 import com.facebook.common.R;
 
@@ -219,13 +220,13 @@ protected void setInternalOnClickListener(final OnClickListener l) {
     }
 
     private void logButtonCreated(final Context context) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        logger.logSdkEvent(analyticsButtonCreatedEventName, null, null);
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(context);
+        logger.logEventImplicitly(analyticsButtonCreatedEventName);
     }
 
     private void logButtonTapped(final Context context) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        logger.logSdkEvent(analyticsButtonTappedEventName, null, null);
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(context);
+        logger.logEventImplicitly(analyticsButtonTappedEventName);
     }
 
     private void parseBackgroundAttributes(
diff --git a/facebook-common/src/main/java/com/facebook/internal/DialogPresenter.java b/facebook-common/src/main/java/com/facebook/internal/DialogPresenter.java
index eca10cdf1..a642d74d8 100644
--- a/facebook-common/src/main/java/com/facebook/internal/DialogPresenter.java
+++ b/facebook-common/src/main/java/com/facebook/internal/DialogPresenter.java
@@ -30,6 +30,7 @@
 import com.facebook.FacebookException;
 import com.facebook.FacebookSdk;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.FetchedAppSettings;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.ServerProtocol;
@@ -270,9 +271,9 @@ public static void logDialogActivity(
             Context context,
             String eventName,
             String outcome) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(context);
         Bundle parameters = new Bundle();
         parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
-        logger.logSdkEvent(eventName, null, parameters);
+        logger.logEventImplicitly(eventName, parameters);
     }
 }
diff --git a/facebook-common/src/main/java/com/facebook/login/DeviceAuthDialog.java b/facebook-common/src/main/java/com/facebook/login/DeviceAuthDialog.java
index be131f0d2..698f0eeb5 100644
--- a/facebook-common/src/main/java/com/facebook/login/DeviceAuthDialog.java
+++ b/facebook-common/src/main/java/com/facebook/login/DeviceAuthDialog.java
@@ -50,6 +50,7 @@
 import com.facebook.GraphRequestAsyncTask;
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.common.R;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.devicerequests.internal.DeviceRequestsHelper;
@@ -226,8 +227,8 @@ private void setCurrentRequestState(RequestState currentRequestState) {
 
         if (!isRetry) {
             if (DeviceRequestsHelper.startAdvertisementService(currentRequestState.getUserCode())) {
-                final AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
-                logger.logSdkEvent(AnalyticsEvents.EVENT_SMART_LOGIN_SERVICE, null, null);
+                final InternalAppEventsLogger logger = new InternalAppEventsLogger(getContext());
+                logger.logEventImplicitly(AnalyticsEvents.EVENT_SMART_LOGIN_SERVICE);
             }
         }
 
diff --git a/facebook-common/src/main/java/com/facebook/login/LoginLogger.java b/facebook-common/src/main/java/com/facebook/login/LoginLogger.java
index 7b31b014f..2b48ece6a 100644
--- a/facebook-common/src/main/java/com/facebook/login/LoginLogger.java
+++ b/facebook-common/src/main/java/com/facebook/login/LoginLogger.java
@@ -27,6 +27,7 @@
 import android.text.TextUtils;
 
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -68,14 +69,14 @@
 
     static final String FACEBOOK_PACKAGE_NAME = "com.facebook.katana";
 
-    private final AppEventsLogger appEventsLogger;
+    private final InternalAppEventsLogger logger;
     private String applicationId;
     private String facebookVersion;
 
     LoginLogger(Context context, String applicationId) {
         this.applicationId = applicationId;
 
-        appEventsLogger = AppEventsLogger.newLogger(context, applicationId);
+        logger = new InternalAppEventsLogger(context, applicationId);
 
         // Store which version of facebook is installed
         try {
@@ -130,7 +131,7 @@ public void logStartLogin(LoginClient.Request pendingLoginRequest) {
         } catch (JSONException e) {
         }
 
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_START, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_START, null, bundle);
     }
 
     public void logCompleteLogin(String loginRequestId, Map<String, String> loggingExtras,
@@ -164,14 +165,14 @@ public void logCompleteLogin(String loginRequestId, Map<String, String> loggingE
             bundle.putString(EVENT_PARAM_EXTRAS, jsonObject.toString());
         }
 
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_COMPLETE, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_COMPLETE, bundle);
     }
 
     public void logAuthorizationMethodStart(String authId, String method) {
         Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(authId);
         bundle.putString(EVENT_PARAM_METHOD, method);
 
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_START, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_METHOD_START, bundle);
     }
 
     public void logAuthorizationMethodComplete(String authId, String method, String result,
@@ -194,19 +195,19 @@ public void logAuthorizationMethodComplete(String authId, String method, String
         }
         bundle.putString(EVENT_PARAM_METHOD, method);
 
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_COMPLETE, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_METHOD_COMPLETE, bundle);
     }
 
     public void logAuthorizationMethodNotTried(String authId, String method) {
         Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(authId);
         bundle.putString(EVENT_PARAM_METHOD, method);
 
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_NOT_TRIED, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_METHOD_NOT_TRIED, bundle);
     }
 
     public void logLoginStatusStart(final String loggerRef) {
         Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(loggerRef);
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_START, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_STATUS_START, bundle);
     }
 
     public void logLoginStatusSuccess(final String loggerRef) {
@@ -214,13 +215,13 @@ public void logLoginStatusSuccess(final String loggerRef) {
         bundle.putString(
             EVENT_PARAM_LOGIN_RESULT,
             LoginClient.Result.Code.SUCCESS.getLoggingValue());
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_COMPLETE, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_STATUS_COMPLETE, bundle);
     }
 
     public void logLoginStatusFailure(final String loggerRef) {
         Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(loggerRef);
         bundle.putString(EVENT_PARAM_LOGIN_RESULT, EVENT_EXTRAS_FAILURE);
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_COMPLETE, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_STATUS_COMPLETE, bundle);
     }
 
     public void logLoginStatusError(final String loggerRef, final Exception exception) {
@@ -229,7 +230,7 @@ public void logLoginStatusError(final String loggerRef, final Exception exceptio
             EVENT_PARAM_LOGIN_RESULT,
             LoginClient.Result.Code.ERROR.getLoggingValue());
         bundle.putString(EVENT_PARAM_ERROR_MESSAGE, exception.toString());
-        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_COMPLETE, null, bundle);
+        logger.logEventImplicitly(EVENT_NAME_LOGIN_STATUS_COMPLETE, bundle);
     }
 
     public void logUnexpectedError(String eventName, String errorMessage) {
@@ -243,6 +244,6 @@ public void logUnexpectedError(String eventName, String errorMessage, String met
         bundle.putString(EVENT_PARAM_ERROR_MESSAGE, errorMessage);
         bundle.putString(EVENT_PARAM_METHOD, method);
 
-        appEventsLogger.logSdkEvent(eventName, null, bundle);
+        logger.logEventImplicitly(eventName, bundle);
     }
 }
diff --git a/facebook-common/src/main/java/com/facebook/login/LoginMethodHandler.java b/facebook-common/src/main/java/com/facebook/login/LoginMethodHandler.java
index 322be1097..268a63f5f 100644
--- a/facebook-common/src/main/java/com/facebook/login/LoginMethodHandler.java
+++ b/facebook-common/src/main/java/com/facebook/login/LoginMethodHandler.java
@@ -31,6 +31,7 @@
 import com.facebook.AccessTokenSource;
 import com.facebook.FacebookException;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
@@ -106,8 +107,8 @@ protected void addLoggingExtra(String key, Object value) {
 
     protected void logWebLoginCompleted(String e2e) {
         String applicationId = loginClient.getPendingRequest().getApplicationId();
-        AppEventsLogger appEventsLogger =
-                AppEventsLogger.newLogger(loginClient.getActivity(), applicationId);
+        InternalAppEventsLogger logger =
+                new InternalAppEventsLogger(loginClient.getActivity(), applicationId);
 
         Bundle parameters = new Bundle();
         parameters.putString(AnalyticsEvents.PARAMETER_WEB_LOGIN_E2E, e2e);
@@ -115,7 +116,7 @@ protected void logWebLoginCompleted(String e2e) {
                 AnalyticsEvents.PARAMETER_WEB_LOGIN_SWITCHBACK_TIME, System.currentTimeMillis());
         parameters.putString(AnalyticsEvents.PARAMETER_APP_ID, applicationId);
 
-        appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_WEB_LOGIN_COMPLETE, null, parameters);
+        logger.logEventImplicitly(AnalyticsEvents.EVENT_WEB_LOGIN_COMPLETE, null, parameters);
     }
 
     static AccessToken createAccessTokenFromNativeLogin(
diff --git a/facebook-common/src/main/java/com/facebook/share/internal/LikeActionController.java b/facebook-common/src/main/java/com/facebook/share/internal/LikeActionController.java
index 39416a3e0..14214a4b5 100644
--- a/facebook-common/src/main/java/com/facebook/share/internal/LikeActionController.java
+++ b/facebook-common/src/main/java/com/facebook/share/internal/LikeActionController.java
@@ -40,6 +40,7 @@
 import com.facebook.HttpMethod;
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.AppCall;
 import com.facebook.internal.BundleJSONConverter;
@@ -188,7 +189,7 @@
 
     private Bundle facebookDialogAnalyticsBundle;
 
-    private AppEventsLogger appEventsLogger;
+    private InternalAppEventsLogger logger;
 
     /**
      * @deprecated
@@ -705,9 +706,8 @@ public void toggleLike(
                 // If the user toggled the button quickly, and there is still a publish underway,
                 // don't fire off another request. Also log this behavior.
 
-                getAppEventsLogger().logSdkEvent(
+                getAppEventsLogger().logEventImplicitly(
                         AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNDO_QUICKLY,
-                        null,
                         analyticsParameters);
             } else if (!publishLikeOrUnlikeAsync(shouldLikeObject, analyticsParameters)) {
                 // We were not able to send a graph request to unlike or like the object
@@ -720,11 +720,11 @@ public void toggleLike(
         }
     }
 
-    private AppEventsLogger getAppEventsLogger() {
-        if (appEventsLogger == null) {
-            appEventsLogger = AppEventsLogger.newLogger(FacebookSdk.getApplicationContext());
+    private InternalAppEventsLogger getAppEventsLogger() {
+        if (logger == null) {
+            logger = new InternalAppEventsLogger(FacebookSdk.getApplicationContext());
         }
-        return appEventsLogger;
+        return logger;
     }
 
     private boolean publishLikeOrUnlikeAsync(
@@ -854,9 +854,8 @@ private void presentLikeDialog(
 
             saveState(analyticsParameters);
 
-            getAppEventsLogger().logSdkEvent(
+            getAppEventsLogger().logEventImplicitly(
                     AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_DIALOG,
-                    null,
                     analyticsParameters);
         }
     }
@@ -917,9 +916,8 @@ public void onSuccess(AppCall appCall, Bundle data) {
                 logParams.putString(
                         AnalyticsEvents.PARAMETER_CALL_ID,
                         appCall.getCallId().toString());
-                getAppEventsLogger().logSdkEvent(
+                getAppEventsLogger().logEventImplicitly(
                         AnalyticsEvents.EVENT_LIKE_VIEW_DIALOG_DID_SUCCEED,
-                        null,
                         logParams);
 
                 updateState(
@@ -1040,7 +1038,7 @@ public void onBatchCompleted(GraphRequestBatch batch) {
                                     Utility.coerceValueIfNullOrEmpty(likeRequest.unlikeToken, null);
                             isObjectLikedOnServer = true;
 
-                            getAppEventsLogger().logSdkEvent(
+                            getAppEventsLogger().logEventImplicitly(
                                     AnalyticsEvents.EVENT_LIKE_VIEW_DID_LIKE,
                                     null,
                                     analyticsParameters);
@@ -1078,7 +1076,7 @@ public void onBatchCompleted(GraphRequestBatch batch) {
                     unlikeToken = null;
                     isObjectLikedOnServer = false;
 
-                    getAppEventsLogger().logSdkEvent(
+                    getAppEventsLogger().logEventImplicitly(
                             AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNLIKE,
                             null,
                             analyticsParameters);
@@ -1273,7 +1271,7 @@ private void logAppEventForError(String action, Bundle parameters) {
         logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_TYPE, objectType.toString());
         logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_CURRENT_ACTION, action);
 
-        getAppEventsLogger().logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_ERROR, null, logParams);
+        getAppEventsLogger().logEventImplicitly(AnalyticsEvents.EVENT_LIKE_VIEW_ERROR, null, logParams);
     }
 
     private void logAppEventForError(String action, FacebookRequestError error) {
diff --git a/facebook-common/src/main/java/com/facebook/share/internal/ShareInternalUtility.java b/facebook-common/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
index 6a2f1a506..035876121 100644
--- a/facebook-common/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
+++ b/facebook-common/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
@@ -42,6 +42,7 @@
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.AppCall;
 import com.facebook.internal.CallbackManagerImpl;
@@ -625,7 +626,7 @@ static void invokeOnErrorCallback(
 
     private static void logShareResult(String shareOutcome, String errorMessage) {
         Context context = FacebookSdk.getApplicationContext();
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(context);
         Bundle parameters = new Bundle();
         parameters.putString(
             AnalyticsEvents.PARAMETER_SHARE_OUTCOME,
@@ -635,7 +636,7 @@ private static void logShareResult(String shareOutcome, String errorMessage) {
         if (errorMessage != null) {
             parameters.putString(AnalyticsEvents.PARAMETER_SHARE_ERROR_MESSAGE, errorMessage);
         }
-        logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_RESULT, null, parameters);
+        logger.logEventImplicitly(AnalyticsEvents.EVENT_SHARE_RESULT, parameters);
     }
 
     /**
diff --git a/facebook-common/src/main/java/com/facebook/share/widget/ShareDialog.java b/facebook-common/src/main/java/com/facebook/share/widget/ShareDialog.java
index 0267b7075..7c2c59022 100644
--- a/facebook-common/src/main/java/com/facebook/share/widget/ShareDialog.java
+++ b/facebook-common/src/main/java/com/facebook/share/widget/ShareDialog.java
@@ -31,6 +31,7 @@
 import com.facebook.AccessToken;
 import com.facebook.FacebookCallback;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.AppCall;
 import com.facebook.internal.CallbackManagerImpl;
@@ -643,7 +644,7 @@ private void logDialogShare(Context context, ShareContent content, Mode mode) {
             contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_UNKNOWN;
         }
 
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(context);
         Bundle parameters = new Bundle();
         parameters.putString(
             AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW,
@@ -653,6 +654,6 @@ private void logDialogShare(Context context, ShareContent content, Mode mode) {
             AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_TYPE,
             contentType
         );
-        logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_DIALOG_SHOW, null, parameters);
+        logger.logEventImplicitly(AnalyticsEvents.EVENT_SHARE_DIALOG_SHOW, parameters);
     }
 }
diff --git a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java
index 692df3299..4c989345c 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -761,18 +761,6 @@ public static void updateUserProperties(
                 callback);
     }
 
-    /**
-     * This method is intended only for internal use by the Facebook SDK and other use is
-     * unsupported.
-     * TODO: T41629092 remove after migration
-     */
-    public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters) {
-        loggerImpl.logSdkEvent(
-                eventName,
-                valueToSum,
-                parameters);
-    }
-
     /**
      * Returns the app ID this logger was configured to log to.
      *
diff --git a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java
index d21900e6f..71cbae48e 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java
@@ -284,7 +284,7 @@ public void run() {
                     params.putInt("billing_service_lib_included", 1);
                 } catch (ClassNotFoundException ignored) { /* no op */ }
 
-                logger.logSdkEvent(AnalyticsEvents.EVENT_SDK_INITIALIZE, null, params);
+                logger.logEventImplicitly(AnalyticsEvents.EVENT_SDK_INITIALIZE, null, params);
             }
         });
     }
@@ -585,15 +585,6 @@ public void run() {
         });
     }
 
-    void logSdkEvent(String eventName, Double valueToSum, Bundle parameters) {
-        logEvent(
-                eventName,
-                valueToSum,
-                parameters,
-                true,
-                ActivityLifecycleTracker.getCurrentSessionGuid());
-    }
-
     /**
      * Returns the app ID this logger was configured to log to.
      *
diff --git a/facebook-core/src/main/java/com/facebook/appevents/InternalAppEventsLogger.java b/facebook-core/src/main/java/com/facebook/appevents/InternalAppEventsLogger.java
index a6c64623d..5f4f5a365 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/InternalAppEventsLogger.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/InternalAppEventsLogger.java
@@ -47,6 +47,10 @@ public InternalAppEventsLogger(Context context) {
         loggerImpl = new AppEventsLoggerImpl(context, null, null);
     }
 
+    public InternalAppEventsLogger(Context context, String applicationId) {
+        loggerImpl = new AppEventsLoggerImpl(context, applicationId, null);
+    }
+
     public InternalAppEventsLogger(
             String activityName,
             String applicationId,
@@ -84,6 +88,12 @@ public void logEventImplicitly(String eventName,
         }
     }
 
+    public void logEventImplicitly(String eventName) {
+        if (FacebookSdk.getAutoLogAppEventsEnabled()) {
+            loggerImpl.logEventImplicitly(eventName, null, null);
+        }
+    }
+
     public void logEventImplicitly(String eventName, Double valueToSum, Bundle parameters) {
         if (FacebookSdk.getAutoLogAppEventsEnabled()) {
             loggerImpl.logEventImplicitly(eventName, valueToSum, parameters);
diff --git a/facebook-login/src/main/java/com/facebook/login/widget/LoginButton.java b/facebook-login/src/main/java/com/facebook/login/widget/LoginButton.java
index 69d699815..f37261d0b 100644
--- a/facebook-login/src/main/java/com/facebook/login/widget/LoginButton.java
+++ b/facebook-login/src/main/java/com/facebook/login/widget/LoginButton.java
@@ -40,6 +40,7 @@
 import com.facebook.FacebookSdk;
 import com.facebook.Profile;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.FetchedAppSettings;
@@ -761,7 +762,7 @@ public void onClick(View v) {
                 performLogin();
             }
 
-            AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
+            InternalAppEventsLogger logger = new InternalAppEventsLogger(getContext());
 
             Bundle parameters = new Bundle();
             parameters.putInt(
@@ -771,7 +772,7 @@ public void onClick(View v) {
                     "access_token_expired",
                     (AccessToken.isCurrentAccessTokenActive()) ? 1 : 0);
 
-            logger.logSdkEvent(loginLogoutEventName, null, parameters);
+            logger.logEventImplicitly(loginLogoutEventName, parameters);
         }
 
         protected void performLogin() {
diff --git a/facebook-share/src/main/java/com/facebook/share/widget/MessageDialog.java b/facebook-share/src/main/java/com/facebook/share/widget/MessageDialog.java
index 3dac79bd2..a51285588 100644
--- a/facebook-share/src/main/java/com/facebook/share/widget/MessageDialog.java
+++ b/facebook-share/src/main/java/com/facebook/share/widget/MessageDialog.java
@@ -27,6 +27,7 @@
 
 import com.facebook.FacebookCallback;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.AppCall;
 import com.facebook.internal.CallbackManagerImpl;
@@ -286,7 +287,7 @@ private static void logDialogShare(Context context, ShareContent content, AppCal
             contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_UNKNOWN;
         }
 
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(context);
         Bundle parameters = new Bundle();
         parameters.putString(
                 AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_TYPE,
@@ -298,6 +299,6 @@ private static void logDialogShare(Context context, ShareContent content, AppCal
                 AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_PAGE_ID,
                 content.getPageId());
 
-        logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_MESSENGER_DIALOG_SHOW, null, parameters);
+        logger.logEventImplicitly(AnalyticsEvents.EVENT_SHARE_MESSENGER_DIALOG_SHOW, parameters);
     }
 }
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/FriendPickerFragment.java b/samples/Scrumptious/src/com/example/scrumptious/picker/FriendPickerFragment.java
index bc47b6e3a..9031b6a68 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/picker/FriendPickerFragment.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/FriendPickerFragment.java
@@ -31,6 +31,7 @@
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.FacebookException;
 import com.example.scrumptious.R;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.Validate;
 
@@ -269,7 +270,7 @@ String getDefaultTitleText() {
 
     @Override
     void logAppEvents(boolean doneButtonClicked) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(),
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(this.getActivity(),
                 AccessToken.getCurrentAccessToken().getToken());
         Bundle parameters = new Bundle();
 
@@ -281,7 +282,7 @@ void logAppEvents(boolean doneButtonClicked) {
         parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
         parameters.putInt("num_friends_picked", getSelection().size());
 
-        logger.logSdkEvent(AnalyticsEvents.EVENT_FRIEND_PICKER_USAGE, null, parameters);
+        logger.logEventImplicitly(AnalyticsEvents.EVENT_FRIEND_PICKER_USAGE, parameters);
     }
 
     @Override
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/PlacePickerFragment.java b/samples/Scrumptious/src/com/example/scrumptious/picker/PlacePickerFragment.java
index 97e53d4e9..a288e66d7 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/picker/PlacePickerFragment.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/PlacePickerFragment.java
@@ -42,6 +42,7 @@
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.AppEventsLogger;
 import com.example.scrumptious.R;
+import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
@@ -332,7 +333,7 @@ String getDefaultTitleText() {
 
     @Override
     void logAppEvents(boolean doneButtonClicked) {
-        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(),
+        InternalAppEventsLogger logger = new InternalAppEventsLogger(this.getActivity(),
                 AccessToken.getCurrentAccessToken().getToken());
         Bundle parameters = new Bundle();
 
@@ -344,7 +345,7 @@ void logAppEvents(boolean doneButtonClicked) {
         parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
         parameters.putInt("num_places_picked", (getSelection() != null) ? 1 : 0);
 
-        logger.logSdkEvent(AnalyticsEvents.EVENT_PLACE_PICKER_USAGE, null, parameters);
+        logger.logEventImplicitly(AnalyticsEvents.EVENT_PLACE_PICKER_USAGE, parameters);
     }
 
     @Override
