diff --git a/examples/Hackbook/src/com/facebook/android/SessionStore.java b/examples/Hackbook/src/com/facebook/android/SessionStore.java
index 1b97a53a6..db2438b01 100644
--- a/examples/Hackbook/src/com/facebook/android/SessionStore.java
+++ b/examples/Hackbook/src/com/facebook/android/SessionStore.java
@@ -24,17 +24,18 @@
 
     private static final String TOKEN = "access_token";
     private static final String EXPIRES = "expires_in";
+    private static final String LAST_UPDATE = "last_update";
     private static final String KEY = "facebook-session";
 
     /*
      * Save the access token and expiry date so you don't have to fetch it each
      * time
      */
-
     public static boolean save(Facebook session, Context context) {
         Editor editor = context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
         editor.putString(TOKEN, session.getAccessToken());
         editor.putLong(EXPIRES, session.getAccessExpires());
+        editor.putLong(LAST_UPDATE, session.getLastAccessUpdate());
         return editor.commit();
     }
 
@@ -43,8 +44,10 @@ public static boolean save(Facebook session, Context context) {
      */
     public static boolean restore(Facebook session, Context context) {
         SharedPreferences savedSession = context.getSharedPreferences(KEY, Context.MODE_PRIVATE);
-        session.setAccessToken(savedSession.getString(TOKEN, null));
-        session.setAccessExpires(savedSession.getLong(EXPIRES, 0));
+        session.setTokenFromCache(
+                savedSession.getString(TOKEN, null),
+                savedSession.getLong(EXPIRES, 0),
+                savedSession.getLong(LAST_UPDATE, 0));
         return session.isSessionValid();
     }
 
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index aa92877dd..80083a6e1 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -844,6 +844,31 @@ public long getAccessExpires() {
         return mAccessExpires;
     }
 
+    /**
+     * Retrieve the last time the token was updated (in milliseconds since
+     * the Unix epoch), or 0 if the token has not been set.
+     *
+     * @return long - timestamp of the last token update.
+     */
+    public long getLastAccessUpdate() {
+        return mLastAccessUpdate;
+    }
+
+    /**
+     * Restore the token, expiration time, and last update time from cached values.
+     * These should be values obtained from getAccessToken(), getAccessExpires, and
+     * getLastAccessUpdate() respectively.
+     *
+     * @param accessToken - access token
+     * @param accessExpires - access token expiration time
+     * @param lastAccessUpdate - timestamp of the last token update
+     */
+    public void setTokenFromCache(String accessToken, long accessExpires, long lastAccessUpdate) {
+        mAccessToken = accessToken;
+        mAccessExpires = accessExpires;
+        mLastAccessUpdate = lastAccessUpdate;
+    }
+
     /**
      * Set the OAuth 2.0 access token for API access.
      *
