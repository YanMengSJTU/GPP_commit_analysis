diff --git a/.gitignore b/.gitignore
index c93345c23..752c49dfc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -28,6 +28,17 @@ proguard/
 .gradle
 build
 
+# Buck
+/buck-cache/
+/buck-out/
+/.buckconfig.local
+/.buckd
+/.nobuckcheck
+/.bucktestselectors
+
+# vim temp files
+*.swp
+
 *~
 *.DS_Store
 *java#
diff --git a/build.gradle b/build.gradle
index 2d3bec743..157b75ff1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,6 +4,6 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.7.+'
+        classpath 'com.android.tools.build:gradle:0.10.+'
     }
 }
diff --git a/facebook/TestApp/build.gradle b/facebook/TestApp/build.gradle
index a2cda0280..b76fed903 100644
--- a/facebook/TestApp/build.gradle
+++ b/facebook/TestApp/build.gradle
@@ -5,12 +5,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/facebook/build.gradle b/facebook/build.gradle
index ea2914c49..43154cb22 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -1,16 +1,21 @@
 apply plugin: 'android-library'
 
 dependencies {
-    compile 'com.android.support:support-v4:13.0.+'
+    compile 'com.android.support:support-v4:19.1.+'
+    compile files('../libs/bolts.jar')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png
new file mode 100644
index 000000000..4707ba20c
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png
new file mode 100644
index 000000000..83bf9694b
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png
new file mode 100644
index 000000000..0d8fb82b6
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_xout.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_xout.png
new file mode 100644
index 000000000..5bebe5e35
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_xout.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png
new file mode 100644
index 000000000..0f8c5dffc
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png
new file mode 100644
index 000000000..21145bca6
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png
new file mode 100644
index 000000000..8b534773d
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png
new file mode 100644
index 000000000..9f341075c
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png
new file mode 100644
index 000000000..59f263982
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png
new file mode 100644
index 000000000..4c97bf923
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png
new file mode 100644
index 000000000..7fdf08201
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_xout.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_xout.png
new file mode 100644
index 000000000..21ad6a54e
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_xout.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png
new file mode 100644
index 000000000..bd54278da
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png
new file mode 100644
index 000000000..299afc24e
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png
new file mode 100644
index 000000000..cb29b55f3
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png
new file mode 100644
index 000000000..73695f03b
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png
new file mode 100644
index 000000000..d6f89a731
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png
new file mode 100644
index 000000000..71abe544b
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png
new file mode 100644
index 000000000..2ac32dbc2
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png
new file mode 100644
index 000000000..e3d562b60
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png
new file mode 100644
index 000000000..a1978044c
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png
new file mode 100644
index 000000000..cee80f129
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png
new file mode 100644
index 000000000..2ec445e5d
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png
new file mode 100644
index 000000000..7fd57632d
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png differ
diff --git a/facebook/res/layout/com_facebook_search_bar_layout.xml b/facebook/res/layout/com_facebook_search_bar_layout.xml
index 79dbabbf0..5de1a6db9 100644
--- a/facebook/res/layout/com_facebook_search_bar_layout.xml
+++ b/facebook/res/layout/com_facebook_search_bar_layout.xml
@@ -20,7 +20,7 @@
             android:singleLine="true"
             android:layout_gravity="center"
             android:gravity="center_vertical"
-            android:textSize="16dp"
+            android:textSize="16sp"
             android:textColor="@android:color/black"
             android:textColorHint="@color/com_facebook_picker_search_bar_text"
             android:background="@color/com_facebook_picker_search_bar_background"
diff --git a/facebook/res/layout/com_facebook_tooltip_bubble.xml b/facebook/res/layout/com_facebook_tooltip_bubble.xml
new file mode 100644
index 000000000..07a48e26c
--- /dev/null
+++ b/facebook/res/layout/com_facebook_tooltip_bubble.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:paddingLeft="20dp"
+    android:paddingRight="20dp">
+  <RelativeLayout
+  	android:id="@+id/com_facebook_body_frame"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_below="@+id/com_facebook_tooltip_bubble_view_top_pointer"
+    android:layout_centerHorizontal="true"
+    android:background="@drawable/com_facebook_tooltip_blue_background">
+      <ImageView 
+        android:id="@+id/com_facebook_button_xout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
+        android:padding="10dp"
+        android:src="@drawable/com_facebook_tooltip_blue_xout"
+        />
+      <TextView
+          android:id="@+id/com_facebook_tooltip_bubble_view_text_body"
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:layout_alignParentTop="true"
+          android:layout_toLeftOf="@id/com_facebook_button_xout"
+          android:layout_alignParentLeft="true"
+          android:padding="10dp"
+          style="@style/tooltip_bubble_text"
+          />
+  </RelativeLayout>
+  <ImageView
+      android:id="@+id/com_facebook_tooltip_bubble_view_top_pointer"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:layout_alignParentTop="true"
+      android:layout_centerHorizontal="true"
+      android:layout_marginBottom="-10dp"
+      android:src="@drawable/com_facebook_tooltip_blue_topnub"
+      />
+  <ImageView
+      android:id="@+id/com_facebook_tooltip_bubble_view_bottom_pointer"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:layout_gravity="center_horizontal|bottom"
+      android:layout_centerHorizontal="true"
+      android:layout_below="@id/com_facebook_body_frame"
+      android:layout_marginTop="-13dp"
+      android:src="@drawable/com_facebook_tooltip_blue_bottomnub"
+      />
+</RelativeLayout>
diff --git a/facebook/res/layout/com_facebook_usersettingsfragment.xml b/facebook/res/layout/com_facebook_usersettingsfragment.xml
index 04a9a1ded..c35c18654 100644
--- a/facebook/res/layout/com_facebook_usersettingsfragment.xml
+++ b/facebook/res/layout/com_facebook_usersettingsfragment.xml
@@ -23,7 +23,7 @@
     android:background="@drawable/com_facebook_usersettingsfragment_background_gradient" >
     <LinearLayout
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_height="wrap_content"
         android:orientation="vertical">
 
         <ImageView
diff --git a/facebook/res/values/strings.xml b/facebook/res/values/strings.xml
index 022d85c80..e73d31fc0 100644
--- a/facebook/res/values/strings.xml
+++ b/facebook/res/values/strings.xml
@@ -41,4 +41,5 @@
     <string name="com_facebook_requesterror_password_changed">Your Facebook password has changed. Please log into this app again to reconnect your Facebook account.</string>
     <string name="com_facebook_requesterror_reconnect">Please log into this app again to reconnect your Facebook account.</string>
     <string name="com_facebook_requesterror_permissions">This app doesn’t have permission to do this. To change permissions, try logging into the app again.</string>
+    <string name="com_facebook_tooltip_default">New! You\'re in control - choose what info you want to share with apps.</string>
 </resources>
diff --git a/facebook/res/values/styles.xml b/facebook/res/values/styles.xml
index aafc79431..926b60346 100644
--- a/facebook/res/values/styles.xml
+++ b/facebook/res/values/styles.xml
@@ -35,6 +35,8 @@
     <dimen name="com_facebook_profilepictureview_preset_size_small">50dp</dimen>
     <dimen name="com_facebook_profilepictureview_preset_size_normal">100dp</dimen>
     <dimen name="com_facebook_profilepictureview_preset_size_large">180dp</dimen>
+    
+    <dimen name="com_facebook_tooltip_horizontal_padding">10dp</dimen>
 
     <style name="com_facebook_loginview_default_style" parent="@android:style/Widget.Button">
         <item name="android:layout_width">wrap_content</item>
@@ -56,4 +58,13 @@
         <item name="android:textColor">#4B5164</item>
         <item name="android:gravity">center</item>
     </style>
+    
+    <style name="tooltip_bubble_text">
+	    <item name="android:textColor">@android:color/white</item>
+	    <item name="android:gravity">left</item>
+	    <item name="android:textSize">12sp</item>
+	    <item name="android:shadowDy">-1</item>
+	    <item name="android:shadowRadius">0.25</item>
+	    <item name="android:shadowColor">#40000000</item>
+    </style>
 </resources>
diff --git a/facebook/src/com/facebook/AccessToken.java b/facebook/src/com/facebook/AccessToken.java
index 374a2b498..392d677e3 100644
--- a/facebook/src/com/facebook/AccessToken.java
+++ b/facebook/src/com/facebook/AccessToken.java
@@ -28,6 +28,7 @@
 import java.io.ObjectInputStream;
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
 import java.util.List;
@@ -55,17 +56,22 @@
 
     private final Date expires;
     private final List<String> permissions;
+    private final List<String> declinedPermissions;
     private final String token;
     private final AccessTokenSource source;
     private final Date lastRefresh;
 
-    AccessToken(String token, Date expires, List<String> permissions, AccessTokenSource source, Date lastRefresh) {
+    AccessToken(String token, Date expires, List<String> permissions, List<String> declinedPermissions, AccessTokenSource source, Date lastRefresh) {
         if (permissions == null) {
             permissions = Collections.emptyList();
         }
+        if (declinedPermissions == null) {
+            declinedPermissions = Collections.emptyList();
+        }
 
         this.expires = expires;
         this.permissions = Collections.unmodifiableList(permissions);
+        this.declinedPermissions = Collections.unmodifiableList(declinedPermissions);
         this.token = token;
         this.source = source;
         this.lastRefresh = lastRefresh;
@@ -101,6 +107,18 @@ public Date getExpires() {
         return this.permissions;
     }
 
+    /**
+     * Gets the list of permissions declined by the user with this access token.  It represents the entire set
+     * of permissions that have been requested and declined.  Note that the most up-to-date list of permissions is
+     * maintained by the Facebook service, so this list may be outdated if permissions have been granted or declined
+     * since the last time an AccessToken object was created.
+     *
+     * @return a read-only list of strings representing the permissions declined by the user
+     */
+    public List<String> getDeclinedPermissions() {
+        return this.declinedPermissions;
+    }
+
     /**
      * Gets the {@link AccessTokenSource} indicating how this access token was obtained.
      *
@@ -149,7 +167,7 @@ public static AccessToken createFromExistingAccessToken(String accessToken, Date
             accessTokenSource = DEFAULT_ACCESS_TOKEN_SOURCE;
         }
 
-        return new AccessToken(accessToken, expirationTime, permissions, accessTokenSource, lastRefreshTime);
+        return new AccessToken(accessToken, expirationTime, permissions, null, accessTokenSource, lastRefreshTime);
     }
 
     /**
@@ -182,13 +200,13 @@ public String toString() {
         return builder.toString();
     }
 
-    static AccessToken createEmptyToken(List<String> permissions) {
-        return new AccessToken("", ALREADY_EXPIRED_EXPIRATION_TIME, permissions, AccessTokenSource.NONE,
+    static AccessToken createEmptyToken() {
+        return new AccessToken("", ALREADY_EXPIRED_EXPIRATION_TIME, null, null, AccessTokenSource.NONE,
                 DEFAULT_LAST_REFRESH_TIME);
     }
 
     static AccessToken createFromString(String token, List<String> permissions, AccessTokenSource source) {
-        return new AccessToken(token, DEFAULT_EXPIRATION_TIME, permissions, source, DEFAULT_LAST_REFRESH_TIME);
+        return new AccessToken(token, DEFAULT_EXPIRATION_TIME, permissions, null, source, DEFAULT_LAST_REFRESH_TIME);
     }
 
     static AccessToken createFromNativeLogin(Bundle bundle, AccessTokenSource source) {
@@ -197,14 +215,25 @@ static AccessToken createFromNativeLogin(Bundle bundle, AccessTokenSource source
         ArrayList<String> permissions = bundle.getStringArrayList(NativeProtocol.EXTRA_PERMISSIONS);
         String token = bundle.getString(NativeProtocol.EXTRA_ACCESS_TOKEN);
 
-        return createNew(permissions, token, expires, source);
+        return createNew(permissions, null, token, expires, source);
     }
 
     static AccessToken createFromWebBundle(List<String> requestedPermissions, Bundle bundle, AccessTokenSource source) {
         Date expires = getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date());
         String token = bundle.getString(ACCESS_TOKEN_KEY);
 
-        return createNew(requestedPermissions, token, expires, source);
+        // With Login v4, we now get back the actual permissions granted, so update the permissions to be the real thing
+        String grantedPermissions = bundle.getString("granted_scopes");
+        if (!Utility.isNullOrEmpty(grantedPermissions)) {
+            requestedPermissions =  new ArrayList<String>(Arrays.asList(grantedPermissions.split(",")));
+        }
+        String deniedPermissions = bundle.getString("denied_scopes");
+        List<String> declinedPermissions = null;
+        if (!Utility.isNullOrEmpty(deniedPermissions)) {
+            declinedPermissions = new ArrayList<String>(Arrays.asList(deniedPermissions.split(",")));
+        }
+
+        return createNew(requestedPermissions, declinedPermissions, token, expires, source);
     }
 
     @SuppressLint("FieldGetter")
@@ -218,35 +247,48 @@ static AccessToken createFromRefresh(AccessToken current, Bundle bundle) {
         Date expires = getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date(0));
         String token = bundle.getString(ACCESS_TOKEN_KEY);
 
-        return createNew(current.getPermissions(), token, expires, current.source);
+        return createNew(current.getPermissions(), current.getDeclinedPermissions(), token, expires, current.source);
     }
 
-    static AccessToken createFromTokenWithRefreshedPermissions(AccessToken token, List<String> permissions) {
-        return new AccessToken(token.token, token.expires, permissions, token.source, token.lastRefresh);
+    static AccessToken createFromTokenWithRefreshedPermissions(
+            AccessToken token,
+            List<String> grantedPermissions,
+            List<String> declinedPermissions) {
+        return new AccessToken(token.token, token.expires, grantedPermissions, declinedPermissions, token.source, token.lastRefresh);
     }
 
     private static AccessToken createNew(
-            List<String> requestedPermissions, String accessToken, Date expires, AccessTokenSource source) {
+            List<String> grantedPermissions,
+            List<String> declinedPermissions,
+            String accessToken, Date expires,
+            AccessTokenSource source) {
         if (Utility.isNullOrEmpty(accessToken) || (expires == null)) {
-            return createEmptyToken(requestedPermissions);
+            return createEmptyToken();
         } else {
-            return new AccessToken(accessToken, expires, requestedPermissions, source, new Date());
+            return new AccessToken(accessToken, expires, grantedPermissions, declinedPermissions, source, new Date());
         }
     }
 
     static AccessToken createFromCache(Bundle bundle) {
+        List<String> permissions = getPermissionsFromBundle(bundle, TokenCachingStrategy.PERMISSIONS_KEY);
+        List<String> declinedPermissions = getPermissionsFromBundle(bundle, TokenCachingStrategy.DECLINED_PERMISSIONS_KEY);
+
+        return new AccessToken(bundle.getString(TokenCachingStrategy.TOKEN_KEY), TokenCachingStrategy.getDate(bundle,
+                TokenCachingStrategy.EXPIRATION_DATE_KEY), permissions, declinedPermissions,
+                TokenCachingStrategy.getSource(bundle),
+                TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY));
+    }
+
+    static List<String> getPermissionsFromBundle(Bundle bundle, String key) {
         // Copy the list so we can guarantee immutable
-        List<String> originalPermissions = bundle.getStringArrayList(TokenCachingStrategy.PERMISSIONS_KEY);
+        List<String> originalPermissions = bundle.getStringArrayList(key);
         List<String> permissions;
         if (originalPermissions == null) {
             permissions = Collections.emptyList();
         } else {
             permissions = Collections.unmodifiableList(new ArrayList<String>(originalPermissions));
         }
-
-        return new AccessToken(bundle.getString(TokenCachingStrategy.TOKEN_KEY), TokenCachingStrategy.getDate(bundle,
-                TokenCachingStrategy.EXPIRATION_DATE_KEY), permissions, TokenCachingStrategy.getSource(bundle),
-                TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY));
+        return permissions;
     }
 
     Bundle toCacheBundle() {
@@ -255,6 +297,7 @@ Bundle toCacheBundle() {
         bundle.putString(TokenCachingStrategy.TOKEN_KEY, this.token);
         TokenCachingStrategy.putDate(bundle, TokenCachingStrategy.EXPIRATION_DATE_KEY, expires);
         bundle.putStringArrayList(TokenCachingStrategy.PERMISSIONS_KEY, new ArrayList<String>(permissions));
+        bundle.putStringArrayList(TokenCachingStrategy.DECLINED_PERMISSIONS_KEY, new ArrayList<String>(declinedPermissions));
         bundle.putSerializable(TokenCachingStrategy.TOKEN_SOURCE_KEY, source);
         TokenCachingStrategy.putDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY, lastRefresh);
 
@@ -275,7 +318,7 @@ private static AccessToken createFromBundle(List<String> requestedPermissions, B
             return null;
         }
 
-        return new AccessToken(token, expires, requestedPermissions, source, new Date());
+        return new AccessToken(token, expires, requestedPermissions, null, source, new Date());
     }
 
     private String tokenToString() {
@@ -317,12 +360,37 @@ private SerializationProxyV1(String token, Date expires,
         }
 
         private Object readResolve() {
-            return new AccessToken(token, expires, permissions, source, lastRefresh);
+            return new AccessToken(token, expires, permissions, null, source, lastRefresh);
+        }
+    }
+
+    private static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = -2488473066578201068L;
+        private final Date expires;
+        private final List<String> permissions;
+        private final List<String> declinedPermissions;
+        private final String token;
+        private final AccessTokenSource source;
+        private final Date lastRefresh;
+
+        private SerializationProxyV2(String token, Date expires,
+                                     List<String> permissions, List<String> declinedPermissions,
+                                     AccessTokenSource source, Date lastRefresh) {
+            this.expires = expires;
+            this.permissions = permissions;
+            this.declinedPermissions = declinedPermissions;
+            this.token = token;
+            this.source = source;
+            this.lastRefresh = lastRefresh;
+        }
+
+        private Object readResolve() {
+            return new AccessToken(token, expires, permissions, declinedPermissions, source, lastRefresh);
         }
     }
 
     private Object writeReplace() {
-        return new SerializationProxyV1(token, expires, permissions, source, lastRefresh);
+        return new SerializationProxyV2(token, expires, permissions, declinedPermissions, source, lastRefresh);
     }
 
     // have a readObject that throws to prevent spoofing
diff --git a/facebook/src/com/facebook/AppEventsLogger.java b/facebook/src/com/facebook/AppEventsLogger.java
index feb15f7a7..2155e9ba4 100644
--- a/facebook/src/com/facebook/AppEventsLogger.java
+++ b/facebook/src/com/facebook/AppEventsLogger.java
@@ -91,7 +91,7 @@
  * </li>
  * <li>
  * There is a limit to the number of unique parameter names in the provided parameters that can
- * be used per event, on the order of 10.  This is not just for an individual call, but for all
+ * be used per event, on the order of 25.  This is not just for an individual call, but for all
  * invocations for that eventName.
  * </li>
  * <li>
@@ -269,6 +269,7 @@ public static void setLimitEventUsage(Context context, boolean limitEventUsage)
      * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
      */
     public static void activateApp(Context context) {
+        Settings.sdkInitialize(context);
         activateApp(context, Utility.getMetadataApplicationId(context));
     }
 
@@ -290,7 +291,7 @@ public static void activateApp(Context context, String applicationId) {
 
         // activateApp supercedes publishInstall in the public API, so we need to explicitly invoke it, since the server
         // can't reliably infer install state for all conditions of an app activate.
-        Settings.publishInstallAsync(context, applicationId);
+        Settings.publishInstallAsync(context, applicationId, null);
 
         AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
         logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP);
@@ -567,9 +568,13 @@ private AppEventsLogger(Context context, String applicationId, Session session)
             session = Session.getActiveSession();
         }
 
-        if (session != null) {
+        // If we have a session and the appId passed is null or matches the session's app ID:
+        if (session != null &&
+            (applicationId == null || applicationId.equals(session.getApplicationId()))
+          ) {
             accessTokenAppId = new AccessTokenAppIdPair(session);
         } else {
+            // If no app ID passed, get it from the manifest:
             if (applicationId == null) {
                 applicationId = Utility.getMetadataApplicationId(context);
             }
@@ -632,7 +637,7 @@ public void run() {
 
     private void logEvent(String eventName, Double valueToSum, Bundle parameters, boolean isImplicitlyLogged) {
 
-        AppEvent event = new AppEvent(eventName, valueToSum, parameters, isImplicitlyLogged);
+        AppEvent event = new AppEvent(this.context, eventName, valueToSum, parameters, isImplicitlyLogged);
         logEvent(context, event, accessTokenAppId);
     }
 
@@ -706,9 +711,10 @@ private static SessionEventsState getSessionEventsState(Context context, AccessT
             SessionEventsState state = stateMap.get(accessTokenAppId);
             if (state == null) {
                 // Retrieve attributionId, but we will only send it if attribution is supported for the app.
-                String attributionId = Settings.getAttributionId(context.getContentResolver());
+                AttributionIdentifiers attributionIdentifiers =
+                    AttributionIdentifiers.getAttributionIdentifiers(context);
 
-                state = new SessionEventsState(attributionId, context.getPackageName(), hashedDeviceAndAppId);
+                state = new SessionEventsState(attributionIdentifiers, context.getPackageName(), hashedDeviceAndAppId);
                 stateMap.put(accessTokenAppId, state);
             }
             return state;
@@ -931,7 +937,7 @@ private static void notifyDeveloperError(String message) {
         private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
         private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
         private int numSkippedEventsDueToFullBuffer;
-        private String attributionId;
+        private AttributionIdentifiers attributionIdentifiers;
         private String packageName;
         private String hashedDeviceAndAppId;
 
@@ -941,8 +947,8 @@ private static void notifyDeveloperError(String message) {
 
         private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
 
-        public SessionEventsState(String attributionId, String packageName, String hashedDeviceAndAppId) {
-            this.attributionId = attributionId;
+        public SessionEventsState(AttributionIdentifiers identifiers, String packageName, String hashedDeviceAndAppId) {
+            this.attributionIdentifiers = identifiers;
             this.packageName = packageName;
             this.hashedDeviceAndAppId = hashedDeviceAndAppId;
         }
@@ -1022,10 +1028,19 @@ private void populateRequest(Request request, int numSkipped, JSONArray events,
             }
 
             if (includeAttribution) {
-                Utility.setAppEventAttributionParameters(publishParams, attributionId,
+                Utility.setAppEventAttributionParameters(publishParams, attributionIdentifiers,
                         hashedDeviceAndAppId, limitEventUsage);
             }
 
+            // The code to get all the Extended info is safe but just in case we can wrap the whole
+            // call in its own try/catch block since some of the things it does might cause
+            // unexpected exceptions on rooted/funky devices:
+            try {
+              Utility.setAppEventExtendedDeviceInfoParameters(publishParams, applicationContext);
+            } catch (Exception e) {
+              // Swallow
+            }
+
             publishParams.setProperty("application_package_name", packageName);
 
             request.setGraphObject(publishParams);
@@ -1063,7 +1078,13 @@ private void populateRequest(Request request, int numSkipped, JSONArray events,
         private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
         private String name;
 
-        public AppEvent(String eventName, Double valueToSum, Bundle parameters, boolean isImplicitlyLogged) {
+        public AppEvent(
+            Context context,
+            String eventName,
+            Double valueToSum,
+            Bundle parameters,
+            boolean isImplicitlyLogged
+        ) {
 
             validateIdentifier(eventName);
 
@@ -1073,9 +1094,9 @@ public AppEvent(String eventName, Double valueToSum, Bundle parameters, boolean
             jsonObject = new JSONObject();
 
             try {
-
                 jsonObject.put("_eventName", eventName);
                 jsonObject.put("_logTime", System.currentTimeMillis() / 1000);
+                jsonObject.put("_ui", Utility.getActivityName(context));
 
                 if (valueToSum != null) {
                     jsonObject.put("_valueToSum", valueToSum.doubleValue());
diff --git a/facebook/src/com/facebook/AppLinkData.java b/facebook/src/com/facebook/AppLinkData.java
index 2c68b04cc..5309337c1 100644
--- a/facebook/src/com/facebook/AppLinkData.java
+++ b/facebook/src/com/facebook/AppLinkData.java
@@ -24,10 +24,8 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.PlatformServiceClient;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
+import com.facebook.internal.*;
+import com.facebook.model.GraphObject;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -48,12 +46,30 @@
      */
     public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
 
+    /**
+     * Key that should be used to pull out the native class that would have been used if the applink was deferred.
+     */
+    public static final String ARGUMENTS_NATIVE_CLASS_KEY = "com.facebook.platform.APPLINK_NATIVE_CLASS";
+
+    /**
+     * Key that should be used to pull out the native url that would have been used if the applink was deferred.
+     */
+    public static final String ARGUMENTS_NATIVE_URL = "com.facebook.platform.APPLINK_NATIVE_URL";
+
     static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
     private static final String BUNDLE_AL_APPLINK_DATA_KEY = "al_applink_data";
     private static final String APPLINK_BRIDGE_ARGS_KEY = "bridge_args";
     private static final String APPLINK_METHOD_ARGS_KEY = "method_args";
     private static final String APPLINK_VERSION_KEY = "version";
     private static final String BRIDGE_ARGS_METHOD_KEY = "method";
+    private static final String DEFERRED_APP_LINK_EVENT = "DEFERRED_APP_LINK";
+    private static final String DEFERRED_APP_LINK_PATH = "%s/activities";
+
+    private static final String DEFERRED_APP_LINK_ARGS_FIELD = "applink_args";
+    private static final String DEFERRED_APP_LINK_CLASS_FIELD = "applink_class";
+    private static final String DEFERRED_APP_LINK_CLICK_TIME_FIELD = "click_time";
+    private static final String DEFERRED_APP_LINK_URL_FIELD = "applink_url";
+
     private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
     private static final String METHOD_ARGS_REF_KEY = "ref";
     private static final String REFERER_DATA_REF_KEY = "fb_ref";
@@ -96,17 +112,47 @@ public static void fetchDeferredAppLinkData(
 
         Validate.notNull(applicationId, "applicationId");
 
-        DeferredAppLinkDataClient client = new DeferredAppLinkDataClient(context, applicationId);
-        DeferredAppLinkDataClient.CompletedListener callback = new DeferredAppLinkDataClient.CompletedListener() {
+        final Context applicationContext = context.getApplicationContext();
+        final String applicationIdCopy = applicationId;
+        Settings.getExecutor().execute(new Runnable() {
             @Override
-            public void completed(Bundle result) {
-                AppLinkData appLinkData = null;
-                if (result != null) {
-                    final String appLinkArgsJsonString = result.getString(BUNDLE_APPLINK_ARGS_KEY);
-                    final long tapTimeUtc = result.getLong(ARGUMENTS_TAPTIME_KEY, -1);
+            public void run() {
+                fetchDeferredAppLinkFromServer(applicationContext, applicationIdCopy, completionHandler);
+            }
+        });
+    }
 
-                    // Now create the app link
+    private static void fetchDeferredAppLinkFromServer(
+            Context context,
+            String applicationId,
+            final CompletionHandler completionHandler) {
+
+        GraphObject deferredApplinkParams = GraphObject.Factory.create();
+        deferredApplinkParams.setProperty("event", DEFERRED_APP_LINK_EVENT);
+        Utility.setAppEventAttributionParameters(deferredApplinkParams,
+                AttributionIdentifiers.getAttributionIdentifiers(context),
+                Utility.getHashedDeviceAndAppID(context, applicationId),
+                Settings.getLimitEventAndDataUsage(context));
+        deferredApplinkParams.setProperty("application_package_name", context.getPackageName());
+
+        String deferredApplinkUrlPath = String.format(DEFERRED_APP_LINK_PATH, applicationId);
+        AppLinkData appLinkData = null;
+
+        try {
+            Request deferredApplinkRequest = Request.newPostRequest(
+                    null, deferredApplinkUrlPath, deferredApplinkParams, null);
+            Response deferredApplinkResponse = deferredApplinkRequest.executeAndWait();
+            GraphObject wireResponse = deferredApplinkResponse.getGraphObject();
+            JSONObject jsonResponse = wireResponse != null ? wireResponse.getInnerJSONObject() : null;
+            if (jsonResponse != null) {
+                final String appLinkArgsJsonString = jsonResponse.optString(DEFERRED_APP_LINK_ARGS_FIELD);
+                final long tapTimeUtc = jsonResponse.optLong(DEFERRED_APP_LINK_CLICK_TIME_FIELD, -1);
+                final String appLinkClassName = jsonResponse.optString(DEFERRED_APP_LINK_CLASS_FIELD);
+                final String appLinkUrl = jsonResponse.optString(DEFERRED_APP_LINK_URL_FIELD);
+
+                if (appLinkArgsJsonString != null && appLinkArgsJsonString != "") {
                     appLinkData = createFromJson(appLinkArgsJsonString);
+
                     if (tapTimeUtc != -1) {
                         try {
                             if (appLinkData.arguments != null) {
@@ -119,23 +165,39 @@ public void completed(Bundle result) {
                             Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
                         }
                     }
+
+                    if (appLinkClassName != null) {
+                        try {
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
+                            }
+                        } catch (JSONException e) {
+                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
+                        }
+                    }
+
+                    if (appLinkUrl != null) {
+                        try {
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_NATIVE_URL, appLinkUrl);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_NATIVE_URL, appLinkUrl);
+                            }
+                        } catch (JSONException e) {
+                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
+                        }
+                    }
                 }
-                completionHandler.onDeferredAppLinkDataFetched(appLinkData);
             }
-        };
-        client.setCompletedListener(callback);
-
-        if (!client.start()) {
-            // there is not a sufficient version of fb4a present to return a deferred app link, so kick off
-            // a call to the completion handler.
-            Handler handler = new Handler(Looper.getMainLooper());
-            handler.post(new Runnable() {
-                @Override
-                public void run() {
-                    completionHandler.onDeferredAppLinkDataFetched(null);
-                }
-            });
+        } catch (Exception e) {
+            Utility.logd(TAG, "Unable to fetch deferred applink from server");
         }
+
+        completionHandler.onDeferredAppLinkDataFetched(appLinkData);
     }
 
     /**
@@ -344,18 +406,4 @@ public Bundle getRefererData() {
          */
         void onDeferredAppLinkDataFetched(AppLinkData appLinkData);
     }
-
-    final static class DeferredAppLinkDataClient extends PlatformServiceClient {
-
-        DeferredAppLinkDataClient(Context context, String applicationId) {
-            super(context, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REQUEST, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REPLY,
-                    NativeProtocol.PROTOCOL_VERSION_20130618, applicationId);
-        }
-
-        @Override
-        protected void populateRequestBundle(Bundle data) {
-            String packageName = getContext().getPackageName();
-            data.putString(NativeProtocol.EXTRA_GET_INSTALL_DATA_PACKAGE, packageName);
-        }
-    }
 }
diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index cbd308add..f0f31f35b 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -31,9 +31,6 @@
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
-import com.facebook.model.GraphMultiResult;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphObjectList;
 import com.facebook.model.GraphUser;
 import com.facebook.widget.WebDialog;
 import org.json.JSONException;
@@ -192,7 +189,6 @@ boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         if (behavior.allowsKatanaAuth()) {
             if (!request.isLegacy()) {
                 handlers.add(new GetTokenAuthHandler());
-                handlers.add(new KatanaLoginDialogAuthHandler());
             }
             handlers.add(new KatanaProxyAuthHandler());
         }
@@ -365,7 +361,8 @@ RequestBatch createReauthValidationBatch(final Result pendingResult) {
         // request using the current token to get the permissions of the user.
 
         final ArrayList<String> fbids = new ArrayList<String>();
-        final ArrayList<String> tokenPermissions = new ArrayList<String>();
+        final ArrayList<String> grantedPermissions = new ArrayList<String>();
+        final ArrayList<String> declinedPermissions = new ArrayList<String>();
         final String newToken = pendingResult.token.getToken();
 
         Request.Callback meCallback = new Request.Callback() {
@@ -393,15 +390,10 @@ public void onCompleted(Response response) {
             @Override
             public void onCompleted(Response response) {
                 try {
-                    GraphMultiResult result = response.getGraphObjectAs(GraphMultiResult.class);
-                    if (result != null) {
-                        GraphObjectList<GraphObject> data = result.getData();
-                        if (data != null && data.size() == 1) {
-                            GraphObject permissions = data.get(0);
-
-                            // The keys are the permission names.
-                            tokenPermissions.addAll(permissions.asMap().keySet());
-                        }
+                    Session.PermissionsPair permissionsPair = Session.handlePermissionResponse(response);
+                    if (permissionsPair != null) {
+                        grantedPermissions.addAll(permissionsPair.getGrantedPermissions());
+                        declinedPermissions.addAll(permissionsPair.getDeclinedPermissions());
                     }
                 } catch (Exception ex) {
                 }
@@ -421,7 +413,7 @@ public void onBatchCompleted(RequestBatch batch) {
                         // Modify the token to have the right permission set.
                         AccessToken tokenWithPermissions = AccessToken
                                 .createFromTokenWithRefreshedPermissions(pendingResult.token,
-                                        tokenPermissions);
+                                        grantedPermissions, declinedPermissions);
                         result = Result.createTokenResult(pendingRequest, tokenWithPermissions);
                     } else {
                         result = Result
@@ -441,7 +433,6 @@ public void onBatchCompleted(RequestBatch batch) {
 
     Request createGetPermissionsRequest(String accessToken) {
         Bundle parameters = new Bundle();
-        parameters.putString("fields", "id");
         parameters.putString("access_token", accessToken);
         return new Request(null, "me/permissions", parameters, HttpMethod.GET, null);
     }
@@ -454,7 +445,7 @@ Request createGetProfileIdRequest(String accessToken) {
     }
 
     private AppEventsLogger getAppEventsLogger() {
-        if (appEventsLogger == null || appEventsLogger.getApplicationId() != pendingRequest.getApplicationId()) {
+        if (appEventsLogger == null || !appEventsLogger.getApplicationId().equals(pendingRequest.getApplicationId())) {
             appEventsLogger = AppEventsLogger.newLogger(context, pendingRequest.getApplicationId());
         }
         return appEventsLogger;
@@ -631,6 +622,7 @@ public void onComplete(Bundle values, FacebookException error) {
             WebDialog.Builder builder =
                     new AuthDialogBuilder(getStartActivityDelegate().getActivityContext(), applicationId, parameters)
                             .setE2E(e2e)
+                            .setIsRerequest(request.isRerequest())
                             .setOnCompleteListener(listener);
             loginDialog = builder.build();
             loginDialog.show();
@@ -803,119 +795,6 @@ protected boolean tryIntent(Intent intent, int requestCode) {
         }
     }
 
-    class KatanaLoginDialogAuthHandler extends KatanaAuthHandler {
-        private static final long serialVersionUID = 1L;
-        private String applicationId;
-        private String callId;
-
-        @Override
-        String getNameForLogging() {
-            return "katana_login_dialog";
-        }
-
-        @Override
-        boolean tryAuthorize(AuthorizationRequest request) {
-            applicationId = request.getApplicationId();
-
-            Intent intent = NativeProtocol.createLoginDialog20121101Intent(context, request.getApplicationId(),
-                    new ArrayList<String>(request.getPermissions()),
-                    request.getDefaultAudience().getNativeProtocolAudience());
-            if (intent == null) {
-                return false;
-            }
-
-            callId = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
-
-            addLoggingExtra(EVENT_EXTRAS_APP_CALL_ID, callId);
-            addLoggingExtra(EVENT_EXTRAS_PROTOCOL_VERSION,
-                    intent.getIntExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION, 0));
-            addLoggingExtra(EVENT_EXTRAS_PERMISSIONS,
-                    TextUtils.join(",", intent.getStringArrayListExtra(NativeProtocol.EXTRA_PERMISSIONS)));
-            addLoggingExtra(EVENT_EXTRAS_WRITE_PRIVACY, intent.getStringExtra(NativeProtocol.EXTRA_WRITE_PRIVACY));
-            logEvent(AnalyticsEvents.EVENT_NATIVE_LOGIN_DIALOG_START,
-                    AnalyticsEvents.PARAMETER_NATIVE_LOGIN_DIALOG_START_TIME, callId);
-
-            return tryIntent(intent, request.getRequestCode());
-        }
-
-        @Override
-        boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-            Result outcome;
-
-            logEvent(AnalyticsEvents.EVENT_NATIVE_LOGIN_DIALOG_COMPLETE,
-                    AnalyticsEvents.PARAMETER_NATIVE_LOGIN_DIALOG_COMPLETE_TIME, callId);
-
-            if (data == null) {
-                // This happens if the user presses 'Back'.
-                outcome = Result.createCancelResult(pendingRequest, "Operation canceled");
-            } else if (NativeProtocol.isServiceDisabledResult20121101(data)) {
-                outcome = null;
-            } else if (resultCode == Activity.RESULT_CANCELED) {
-                outcome = createCancelOrErrorResult(pendingRequest, data);
-            } else if (resultCode != Activity.RESULT_OK) {
-                outcome = Result.createErrorResult(pendingRequest, "Unexpected resultCode from authorization.", null);
-            } else {
-                outcome = handleResultOk(data);
-            }
-
-            if (outcome != null) {
-                completeAndValidate(outcome);
-            } else {
-                tryNextHandler();
-            }
-
-            return true;
-        }
-
-        private Result handleResultOk(Intent data) {
-            Bundle extras = data.getExtras();
-            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
-            if (errorType == null) {
-                return Result.createTokenResult(pendingRequest,
-                        AccessToken.createFromNativeLogin(extras, AccessTokenSource.FACEBOOK_APPLICATION_NATIVE));
-            } else if (NativeProtocol.ERROR_SERVICE_DISABLED.equals(errorType)) {
-                addLoggingExtra(EVENT_EXTRAS_SERVICE_DISABLED, AppEventsConstants.EVENT_PARAM_VALUE_YES);
-                return null;
-            } else {
-                return createCancelOrErrorResult(pendingRequest, data);
-            }
-        }
-
-        private Result createCancelOrErrorResult(AuthorizationRequest request, Intent data) {
-            Bundle extras = data.getExtras();
-            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
-
-            if (NativeProtocol.ERROR_USER_CANCELED.equals(errorType) ||
-                    NativeProtocol.ERROR_PERMISSION_DENIED.equals(errorType)) {
-                return Result.createCancelResult(request, data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION));
-            } else {
-                // See if we can get an error code out of the JSON.
-                String errorJson = extras.getString(NativeProtocol.STATUS_ERROR_JSON);
-                String errorCode = null;
-                if (errorJson != null) {
-                    try {
-                        JSONObject jsonObject = new JSONObject(errorJson);
-                        errorCode = jsonObject.getString("error_code");
-                    } catch (JSONException e) {
-                    }
-                }
-                return Result.createErrorResult(request, errorType,
-                        data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION), errorCode);
-            }
-        }
-
-        private void logEvent(String eventName, String timeParameter, String callId) {
-            if (callId != null) {
-                AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context, applicationId);
-                Bundle parameters = new Bundle();
-                parameters.putString(AnalyticsEvents.PARAMETER_APP_ID, applicationId);
-                parameters.putString(AnalyticsEvents.PARAMETER_ACTION_ID, callId);
-                parameters.putLong(timeParameter, System.currentTimeMillis());
-                appEventsLogger.logSdkEvent(eventName, null, parameters);
-            }
-        }
-    }
-
     class KatanaProxyAuthHandler extends KatanaAuthHandler {
         private static final long serialVersionUID = 1L;
         private String applicationId;
@@ -931,7 +810,7 @@ boolean tryAuthorize(AuthorizationRequest request) {
 
             String e2e = getE2E();
             Intent intent = NativeProtocol.createProxyAuthIntent(context, request.getApplicationId(),
-                    request.getPermissions(), e2e);
+                    request.getPermissions(), e2e, request.isRerequest());
 
             addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
 
@@ -1017,6 +896,7 @@ private void logWebLoginCompleted(String applicationId, String e2e) {
         private static final String OAUTH_DIALOG = "oauth";
         static final String REDIRECT_URI = "fbconnect://success";
         private String e2e;
+        private boolean isRerequest;
 
         public AuthDialogBuilder(Context context, String applicationId, Bundle parameters) {
             super(context, applicationId, OAUTH_DIALOG, parameters);
@@ -1027,12 +907,24 @@ public AuthDialogBuilder setE2E(String e2e) {
             return this;
         }
 
+        public AuthDialogBuilder setIsRerequest(boolean isRerequest) {
+            this.isRerequest = isRerequest;
+            return this;
+        }
+
         @Override
         public WebDialog build() {
             Bundle parameters = getParameters();
             parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
             parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, getApplicationId());
             parameters.putString(ServerProtocol.DIALOG_PARAM_E2E, e2e);
+            parameters.putString(ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE, ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN);
+            parameters.putString(ServerProtocol.DIALOG_PARAM_RETURN_SCOPES, ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+
+            // Only set the rerequest auth type for non legacy requests
+            if (isRerequest && !Settings.getPlatformCompatibilityEnabled()) {
+                parameters.putString(ServerProtocol.DIALOG_PARAM_AUTH_TYPE, ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+            }
 
             return new WebDialog(getContext(), OAUTH_DIALOG, parameters, getTheme(), getListener());
         }
@@ -1050,6 +942,7 @@ public WebDialog build() {
         private final String applicationId;
         private final String previousAccessToken;
         private final String authId;
+        private boolean isRerequest = false;
 
         AuthorizationRequest(SessionLoginBehavior loginBehavior, int requestCode, boolean isLegacy,
                 List<String> permissions, SessionDefaultAudience defaultAudience, String applicationId,
@@ -1063,7 +956,6 @@ public WebDialog build() {
             this.previousAccessToken = validateSameFbidAsToken;
             this.startActivityDelegate = startActivityDelegate;
             this.authId = authId;
-
         }
 
         StartActivityDelegate getStartActivityDelegate() {
@@ -1113,6 +1005,14 @@ boolean needsNewTokenValidation() {
         String getAuthId() {
             return authId;
         }
+
+        boolean isRerequest() {
+            return isRerequest;
+        }
+
+        void setRerequest(boolean isRerequest) {
+            this.isRerequest = isRerequest;
+        }
     }
 
 
diff --git a/facebook/src/com/facebook/BoltsMeasurementEventListener.java b/facebook/src/com/facebook/BoltsMeasurementEventListener.java
new file mode 100644
index 000000000..8a1eaca0c
--- /dev/null
+++ b/facebook/src/com/facebook/BoltsMeasurementEventListener.java
@@ -0,0 +1,57 @@
+package com.facebook;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+
+public class BoltsMeasurementEventListener extends BroadcastReceiver {
+    private static BoltsMeasurementEventListener _instance;
+
+    private final static String MEASUREMENT_EVENT_NOTIFICATION_NAME = "com.parse.bolts.measurement_event";
+    private final static String MEASUREMENT_EVENT_NAME_KEY = "event_name";
+    private final static String MEASUREMENT_EVENT_ARGS_KEY = "event_args";
+    private final static String BOLTS_MEASUREMENT_EVENT_PREFIX = "bf_";
+
+    private Context applicationContext;
+
+    private BoltsMeasurementEventListener(Context context) {
+        applicationContext = context.getApplicationContext();
+    }
+
+    private void open() {
+      LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(applicationContext);
+      broadcastManager.registerReceiver(this, new IntentFilter(MEASUREMENT_EVENT_NOTIFICATION_NAME));
+    }
+
+    private void close() {
+      LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(applicationContext);
+      broadcastManager.unregisterReceiver(this);
+    }
+
+    static BoltsMeasurementEventListener getInstance(Context context) {
+        if (_instance != null) {
+            return _instance;
+        }
+        _instance = new BoltsMeasurementEventListener(context);
+        _instance.open();
+        return _instance;
+    }
+
+    protected void finalize() throws Throwable {
+        try {
+            close();
+        } finally {
+            super.finalize();
+        }
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context);
+        String eventName = BOLTS_MEASUREMENT_EVENT_PREFIX + intent.getStringExtra(MEASUREMENT_EVENT_NAME_KEY);
+        appEventsLogger.logEvent(eventName, intent.getBundleExtra(MEASUREMENT_EVENT_ARGS_KEY));
+    }
+}
diff --git a/facebook/src/com/facebook/FacebookAppLinkResolver.java b/facebook/src/com/facebook/FacebookAppLinkResolver.java
new file mode 100644
index 000000000..e05e05f99
--- /dev/null
+++ b/facebook/src/com/facebook/FacebookAppLinkResolver.java
@@ -0,0 +1,234 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.net.Uri;
+import android.os.Bundle;
+import bolts.AppLink;
+import bolts.AppLinkResolver;
+import bolts.Continuation;
+import bolts.Task;
+import com.facebook.model.GraphObject;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.*;
+
+/**
+ * Provides an implementation for the {@link AppLinkResolver AppLinkResolver} interface that uses the Facebook App Link
+ * index to solve App Links, given a Url. It also provides an additional helper method that can resolve multiple App
+ * Links in a single call.
+ */
+public class FacebookAppLinkResolver implements AppLinkResolver {
+
+    private static final String APP_LINK_ANDROID_TARGET_KEY = "android";
+    private static final String APP_LINK_WEB_TARGET_KEY = "web";
+    private static final String APP_LINK_TARGET_PACKAGE_KEY = "package";
+    private static final String APP_LINK_TARGET_CLASS_KEY = "class";
+    private static final String APP_LINK_TARGET_APP_NAME_KEY = "app_name";
+    private static final String APP_LINK_TARGET_URL_KEY = "url";
+    private static final String APP_LINK_TARGET_SHOULD_FALLBACK_KEY = "should_fallback";
+
+    private final HashMap<Uri, AppLink> cachedAppLinks = new HashMap<Uri, AppLink>();
+
+    /**
+     * Asynchronously resolves App Link data for the passed in Uri
+     *
+     * @param uri Uri to be resolved into an App Link
+     * @return A Task that, when successful, will return an AppLink for the passed in Uri. This may be null if no App
+     * Link data was found for this Uri.
+     * In the case of general server errors, the task will be completed with the corresponding error.
+     */
+    public Task<AppLink> getAppLinkFromUrlInBackground(final Uri uri) {
+        ArrayList<Uri> uris = new ArrayList<Uri>();
+        uris.add(uri);
+
+        Task<Map<Uri, AppLink>> resolveTask = getAppLinkFromUrlsInBackground(uris);
+
+        return resolveTask.onSuccess(new Continuation<Map<Uri, AppLink>, AppLink>() {
+            @Override
+            public AppLink then(Task<Map<Uri, AppLink>> resolveUrisTask) throws Exception {
+                return resolveUrisTask.getResult().get(uri);
+            }
+        });
+    }
+
+    /**
+     * Asynchronously resolves App Link data for multiple Urls
+     *
+     * @param uris A list of Uri objects to resolve into App Links
+     * @return A Task that, when successful, will return a Map of Uri->AppLink for each Uri that was successfully
+     * resolved into an App Link. Uris that could not be resolved into App Links will not be present in the Map.
+     * In the case of general server errors, the task will be completed with the corresponding error.
+     */
+    public Task<Map<Uri, AppLink>> getAppLinkFromUrlsInBackground(List<Uri> uris) {
+        final Map<Uri, AppLink> appLinkResults = new HashMap<Uri, AppLink>();
+        final HashSet<Uri> urisToRequest = new HashSet<Uri>();
+        StringBuilder graphRequestFields = new StringBuilder();
+
+        for (Uri uri : uris) {
+            AppLink appLink = null;
+            synchronized (cachedAppLinks) {
+                appLink = cachedAppLinks.get(uri);
+            }
+
+            if (appLink != null) {
+                appLinkResults.put(uri, appLink);
+            } else {
+                if (!urisToRequest.isEmpty()) {
+                    graphRequestFields.append(',');
+                }
+                graphRequestFields.append(uri.toString());
+                urisToRequest.add(uri);
+            }
+        }
+
+        if (urisToRequest.isEmpty()) {
+            return Task.forResult(appLinkResults);
+        }
+
+        final Task<Map<Uri, AppLink>>.TaskCompletionSource taskCompletionSource = Task.create();
+
+        Bundle appLinkRequestParameters = new Bundle();
+        appLinkRequestParameters.putString("type", "al");
+        appLinkRequestParameters.putString("ids", graphRequestFields.toString());
+        appLinkRequestParameters.putString(
+                "fields",
+                String.format("%s,%s", APP_LINK_ANDROID_TARGET_KEY, APP_LINK_WEB_TARGET_KEY));
+
+        Request appLinkRequest = new Request(
+                null, /* Session */
+                "", /* Graph path */
+                appLinkRequestParameters, /* Query parameters */
+                null, /* HttpMethod */
+                new Request.Callback() { /* Callback */
+                    @Override
+                    public void onCompleted(Response response) {
+                        FacebookRequestError error = response.getError();
+                        if (error != null) {
+                            taskCompletionSource.setError(error.getException());
+                            return;
+                        }
+
+                        GraphObject responseObject = response.getGraphObject();
+                        JSONObject responseJson = responseObject != null ? responseObject.getInnerJSONObject() : null;
+                        if (responseJson == null) {
+                            taskCompletionSource.setResult(appLinkResults);
+                            return;
+                        }
+
+                        for (Uri uri : urisToRequest) {
+                            String uriString = uri.toString();
+                            if (!responseJson.has(uriString)) {
+                                continue;
+                            }
+
+                            JSONObject urlData = null;
+                            try {
+                                urlData = responseJson.getJSONObject(uri.toString());
+                                JSONArray rawTargets = urlData.getJSONArray(APP_LINK_ANDROID_TARGET_KEY);
+
+                                int targetsCount = rawTargets.length();
+                                List<AppLink.Target> targets = new ArrayList<AppLink.Target>(targetsCount);
+
+                                for (int i = 0; i < targetsCount; i++) {
+                                    AppLink.Target target = getAndroidTargetFromJson(rawTargets.getJSONObject(i));
+                                    if (target != null) {
+                                        targets.add(target);
+                                    }
+                                }
+
+                                Uri webFallbackUrl = getWebFallbackUriFromJson(uri, urlData);
+                                AppLink appLink = new AppLink(uri, targets, webFallbackUrl);
+
+                                appLinkResults.put(uri, appLink);
+                                synchronized (cachedAppLinks) {
+                                    cachedAppLinks.put(uri, appLink);
+                                }
+                            } catch (JSONException e) {
+                                // The data for this uri was missing or badly formed.
+                                continue;
+                            }
+                        }
+
+                        taskCompletionSource.setResult(appLinkResults);
+                    }
+                });
+
+        appLinkRequest.executeAsync();
+
+        return taskCompletionSource.getTask();
+    }
+
+    private static AppLink.Target getAndroidTargetFromJson(JSONObject targetJson) {
+        String packageName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_PACKAGE_KEY, null);
+        if (packageName == null) {
+            // Package name is mandatory for each Android target
+            return null;
+        }
+        String className = tryGetStringFromJson(targetJson, APP_LINK_TARGET_CLASS_KEY, null);
+        String appName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_APP_NAME_KEY, null);
+        String targetUrlString = tryGetStringFromJson(targetJson, APP_LINK_TARGET_URL_KEY, null);
+        Uri targetUri = null;
+        if (targetUrlString != null) {
+            targetUri = Uri.parse(targetUrlString);
+        }
+
+        return new AppLink.Target(packageName, className, targetUri, appName);
+    }
+
+    private static Uri getWebFallbackUriFromJson(Uri sourceUrl, JSONObject urlData) {
+        // Try and get a web target. This is best effort. Any failures results in null being returned.
+        try {
+            JSONObject webTarget = urlData.getJSONObject(APP_LINK_WEB_TARGET_KEY);
+            boolean shouldFallback = tryGetBooleanFromJson(webTarget, APP_LINK_TARGET_SHOULD_FALLBACK_KEY, true);
+            if (!shouldFallback) {
+                // Don't use a fallback url
+                return null;
+            }
+
+            String webTargetUrlString = tryGetStringFromJson(webTarget, APP_LINK_TARGET_URL_KEY, null);
+            Uri webUri = null;
+            if (webTargetUrlString != null) {
+                webUri = Uri.parse(webTargetUrlString);
+            }
+
+            // If we weren't able to parse a url from the web target, use the source url
+            return webUri != null ? webUri: sourceUrl;
+        } catch (JSONException e) {
+            // If we were missing a web target, just use the source as the web url
+            return sourceUrl;
+        }
+    }
+
+    private static String tryGetStringFromJson(JSONObject json, String propertyName, String defaultValue) {
+        try {
+            return json.getString(propertyName);
+        } catch(JSONException e) {
+            return defaultValue;
+        }
+    }
+
+    private static boolean tryGetBooleanFromJson(JSONObject json, String propertyName, boolean defaultValue) {
+        try {
+            return json.getBoolean(propertyName);
+        } catch (JSONException e) {
+            return defaultValue;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/FacebookBroadcastReceiver.java b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
new file mode 100644
index 000000000..ec2556c9b
--- /dev/null
+++ b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
@@ -0,0 +1,42 @@
+package com.facebook;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.internal.NativeProtocol;
+
+/**
+ * This class implements a simple BroadcastReceiver designed to listen for broadcast notifications from the
+ * Facebook app. At present, these notifications consistent of success/failure notifications for photo upload
+ * operations that happen in the background.
+ *
+ * Applications may subclass this class and register it in their AndroidManifest.xml, listening on the
+ * com.facebook.platform.AppCallResultBroadcast action.
+ */
+public class FacebookBroadcastReceiver extends BroadcastReceiver {
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        String appCallId = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
+        String action = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION);
+        if (appCallId != null && action != null) {
+            Bundle extras = intent.getExtras();
+
+            if (NativeProtocol.isErrorResult(intent)) {
+                onFailedAppCall(appCallId, action, extras);
+            } else {
+                onSuccessfulAppCall(appCallId, action, extras);
+            }
+        }
+    }
+
+    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
+        // Default does nothing.
+    }
+
+    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
+        // Default does nothing.
+    }
+}
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 8973962d3..4e0e5ea63 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,6 +17,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.7.0";
-    public static final String MIGRATION_BUNDLE = "fbsdk:20131203";
+    public static final String BUILD = "3.16.0";
 }
diff --git a/facebook/src/com/facebook/Request.java b/facebook/src/com/facebook/Request.java
index e7660f6c0..1bf5bc9fa 100644
--- a/facebook/src/com/facebook/Request.java
+++ b/facebook/src/com/facebook/Request.java
@@ -22,12 +22,10 @@
 import android.net.Uri;
 import android.os.*;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.Pair;
-import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.*;
 import com.facebook.model.*;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -40,6 +38,8 @@
 import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.Map.Entry;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * A single request to be sent to the Facebook Platform through either the <a
@@ -68,6 +68,8 @@
      */
     public static final int MAXIMUM_BATCH_SIZE = 50;
 
+    public static final String TAG = Request.class.getSimpleName();
+
     private static final String ME = "me";
     private static final String MY_FRIENDS = "me/friends";
     private static final String MY_PHOTOS = "me/photos";
@@ -82,6 +84,7 @@
     private static final String USER_AGENT_BASE = "FBAndroidSDK";
     private static final String USER_AGENT_HEADER = "User-Agent";
     private static final String CONTENT_TYPE_HEADER = "Content-Type";
+    private static final String ACCEPT_LANGUAGE_HEADER = "Accept-Language";
 
     // Parameter names/values
     private static final String PICTURE_PARAM = "picture";
@@ -100,7 +103,6 @@
     private static final String BATCH_PARAM = "batch";
     private static final String ATTACHMENT_FILENAME_PREFIX = "file";
     private static final String ATTACHED_FILES_PARAM = "attached_files";
-    private static final String MIGRATION_BUNDLE_PARAM = "migration_bundle";
     private static final String ISO_8601_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ssZ";
     private static final String STAGING_PARAM = "file";
     private static final String OBJECT_PARAM = "object";
@@ -109,6 +111,9 @@
 
     private static String defaultBatchApplicationId;
 
+    // Group 1 in the pattern is the path without the version info
+    private static Pattern versionPattern = Pattern.compile("^/?v\\d+\\.\\d+/(.*)");
+
     private Session session;
     private HttpMethod httpMethod;
     private String graphPath;
@@ -121,6 +126,7 @@
     private Callback callback;
     private String overriddenURL;
     private Object tag;
+    private String version;
 
     /**
      * Constructs a request without a session, graph path, or any other parameters.
@@ -187,9 +193,36 @@ public Request(Session session, String graphPath, Bundle parameters, HttpMethod
      *            a callback that will be called when the request is completed to handle success or error conditions
      */
     public Request(Session session, String graphPath, Bundle parameters, HttpMethod httpMethod, Callback callback) {
+        this(session, graphPath, parameters, httpMethod, callback, null);
+    }
+
+    /**
+     * Constructs a request with a specific Session, graph path, parameters, and HTTP method. A Session need not be
+     * provided, in which case the request is sent without an access token and thus is not executed in the context of
+     * any particular user. Only certain graph requests can be expected to succeed in this case. If a Session is
+     * provided, it must be in an opened state or the request will fail.
+     *
+     * Depending on the httpMethod parameter, the object at the graph path may be retrieved, created, or deleted.
+     *
+     * @param session
+     *            the Session to use, or null
+     * @param graphPath
+     *            the graph path to retrieve, create, or delete
+     * @param parameters
+     *            additional parameters to pass along with the Graph API request; parameters must be Strings, Numbers,
+     *            Bitmaps, Dates, or Byte arrays.
+     * @param httpMethod
+     *            the {@link HttpMethod} to use for the request, or null for default (HttpMethod.GET)
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @param version
+     *            the version of the Graph API
+     */
+    public Request(Session session, String graphPath, Bundle parameters, HttpMethod httpMethod, Callback callback, String version) {
         this.session = session;
         this.graphPath = graphPath;
         this.callback = callback;
+        this.version = version;
 
         setHttpMethod(httpMethod);
 
@@ -199,8 +232,8 @@ public Request(Session session, String graphPath, Bundle parameters, HttpMethod
             this.parameters = new Bundle();
         }
 
-        if (!this.parameters.containsKey(MIGRATION_BUNDLE_PARAM)) {
-            this.parameters.putString(MIGRATION_BUNDLE_PARAM, FacebookSdkVersion.MIGRATION_BUNDLE);
+        if (this.version == null) {
+            this.version = ServerProtocol.getAPIVersion();
         }
     }
 
@@ -585,20 +618,23 @@ public static Request newCustomAudienceThirdPartyIdRequest(Session session,
         }
 
         String endpoint = applicationId + "/custom_audience_third_party_id";
-
+        AttributionIdentifiers attributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
         Bundle parameters = new Bundle();
+
         if (session == null) {
             // Only use the attributionID if we don't have an open session.  If we do have an open session, then
             // the user token will be used to identify the user, and is more reliable than the attributionID.
-            String attributionId = Settings.getAttributionId(context.getContentResolver());
-            if (attributionId != null) {
-                parameters.putString("udid", attributionId);
+            String udid = attributionIdentifiers.getAttributionId() != null
+                ? attributionIdentifiers.getAttributionId()
+                : attributionIdentifiers.getAndroidAdvertiserId();
+            if (attributionIdentifiers.getAttributionId() != null) {
+                parameters.putString("udid", udid);
             }
         }
 
         // Server will choose to not provide the App User ID in the event that event usage has been limited for
         // this user for this app.
-        if (Settings.getLimitEventAndDataUsage(context)) {
+        if (Settings.getLimitEventAndDataUsage(context) || attributionIdentifiers.isTrackingLimited()) {
             parameters.putString("limit_event_usage", "1");
         }
 
@@ -870,6 +906,26 @@ public final void setHttpMethod(HttpMethod httpMethod) {
         this.httpMethod = (httpMethod != null) ? httpMethod : HttpMethod.GET;
     }
 
+    /**
+     * Returns the version of the API that this request will use.  By default this is the current API at the time
+     * the SDK is released.
+     *
+     * @return the version that this request will use
+     */
+    public final String getVersion() {
+        return this.version;
+    }
+
+    /**
+     * Set the version to use for this request.  By default the version will be the current API at the time the SDK
+     * is released.  Only use this if you need to explicitly override.
+     *
+     * @param version The version to use.  Should look like "v2.0"
+     */
+    public final void setVersion(String version) {
+        this.version = version;
+    }
+
     /**
      * Returns the parameters for this request.
      *
@@ -1694,6 +1750,7 @@ static HttpURLConnection createConnection(URL url) throws IOException {
 
         connection.setRequestProperty(USER_AGENT_HEADER, getUserAgent());
         connection.setRequestProperty(CONTENT_TYPE_HEADER, getMimeContentType());
+        connection.setRequestProperty(ACCEPT_LANGUAGE_HEADER, Locale.getDefault().toString());
 
         connection.setChunkedStreamingMode(0);
         return connection;
@@ -1709,6 +1766,16 @@ private void addCommonParameters() {
                 Logger.registerAccessToken(accessToken);
                 this.parameters.putString(ACCESS_TOKEN_PARAM, accessToken);
             }
+        } else if (!this.parameters.containsKey(ACCESS_TOKEN_PARAM)) {
+            String appID = Settings.getApplicationId();
+            String clientToken = Settings.getClientToken();
+            if (!Utility.isNullOrEmpty(appID) && !Utility.isNullOrEmpty(clientToken)) {
+                String accessToken = appID + "|" + clientToken;
+                this.parameters.putString(ACCESS_TOKEN_PARAM, accessToken);
+            } else {
+                Log.d(TAG,
+                        "Warning: Sessionless Request needs token but missing either application ID or client token.");
+            }
         }
         this.parameters.putString(SDK_PARAM, SDK_ANDROID);
         this.parameters.putString(FORMAT_PARAM, FORMAT_JSON);
@@ -1748,9 +1815,9 @@ final String getUrlForBatchedRequest() {
 
         String baseUrl;
         if (this.restMethod != null) {
-            baseUrl = ServerProtocol.BATCHED_REST_METHOD_URL_BASE + this.restMethod;
+            baseUrl = getRestPathWithVersion();
         } else {
-            baseUrl = this.graphPath;
+            baseUrl = getGraphPathWithVersion();
         }
 
         addCommonParameters();
@@ -1764,19 +1831,37 @@ final String getUrlForSingleRequest() {
 
         String baseUrl;
         if (this.restMethod != null) {
-            baseUrl = String.format("%s/%s", ServerProtocol.getRestUrlBase(), restMethod);
+            baseUrl = String.format("%s/%s", ServerProtocol.getRestUrlBase(), getRestPathWithVersion());
         } else {
+            String graphBaseUrlBase;
             if (this.getHttpMethod() == HttpMethod.POST && graphPath != null && graphPath.endsWith(VIDEOS_SUFFIX)) {
-                baseUrl = String.format("%s/%s", ServerProtocol.getGraphVideoUrlBase(), graphPath);
+                graphBaseUrlBase = ServerProtocol.getGraphVideoUrlBase();
             } else {
-                baseUrl = String.format("%s/%s", ServerProtocol.getGraphUrlBase(), graphPath);
+                graphBaseUrlBase = ServerProtocol.getGraphUrlBase();
             }
+            baseUrl = String.format("%s/%s", graphBaseUrlBase, getGraphPathWithVersion());
         }
 
         addCommonParameters();
         return appendParametersToBaseUrl(baseUrl);
     }
 
+    private String getGraphPathWithVersion() {
+        Matcher matcher = versionPattern.matcher(this.graphPath);
+        if (matcher.matches()) {
+            return this.graphPath;
+        }
+        return String.format("%s/%s", this.version, this.graphPath);
+    }
+
+    private String getRestPathWithVersion() {
+        Matcher matcher = versionPattern.matcher(this.restMethod);
+        if (matcher.matches()) {
+            return this.restMethod;
+        }
+        return String.format("%s/%s/%s", this.version, ServerProtocol.REST_METHOD_BASE, this.restMethod);
+    }
+
     private static class Attachment {
         private final Request request;
         private final Object value;
@@ -1976,6 +2061,18 @@ private static void processRequest(RequestBatch requests, Logger logger, int num
         }
     }
 
+    private static boolean isMeRequest(String path) {
+        Matcher matcher = versionPattern.matcher(path);
+        if (matcher.matches()) {
+            // Group 1 contains the path aside from version
+            path = matcher.group(1);
+        }
+        if (path.startsWith("me/") || path.startsWith("/me/")) {
+            return true;
+        }
+        return false;
+    }
+
     private static void processGraphObject(GraphObject graphObject, String path, KeyValueSerializer serializer)
             throws IOException {
         // In general, graph objects are passed by reference (ID/URL). But if this is an OG Action,
@@ -1985,7 +2082,7 @@ private static void processGraphObject(GraphObject graphObject, String path, Key
         // but passing the OG Action type as a substituted parameter is unlikely.
         // It looks like an OG Action if it's posted to me/namespace:action[?other=stuff].
         boolean isOGAction = false;
-        if (path.startsWith("me/") || path.startsWith("/me/")) {
+        if (isMeRequest(path)) {
             int colonLocation = path.indexOf(":");
             int questionMarkLocation = path.indexOf("?");
             isOGAction = colonLocation > 3 && (questionMarkLocation == -1 || colonLocation < questionMarkLocation);
@@ -2027,6 +2124,8 @@ private static void processGraphObjectProperty(String key, Object value, KeyValu
                     processGraphObjectProperty(key, jsonObject.optString("id"), serializer, passByValue);
                 } else if (jsonObject.has("url")) {
                     processGraphObjectProperty(key, jsonObject.optString("url"), serializer, passByValue);
+                } else if (jsonObject.has(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)) {
+                    processGraphObjectProperty(key, jsonObject.toString(), serializer, passByValue);
                 }
             }
         } else if (JSONArray.class.isAssignableFrom(valueClass)) {
diff --git a/facebook/src/com/facebook/Response.java b/facebook/src/com/facebook/Response.java
index 4697aaf12..a5e408d88 100644
--- a/facebook/src/com/facebook/Response.java
+++ b/facebook/src/com/facebook/Response.java
@@ -42,6 +42,7 @@
     private final GraphObjectList<GraphObject> graphObjectList;
     private final boolean isFromCache;
     private final FacebookRequestError error;
+    private final String rawResponse;
     private final Request request;
 
     /**
@@ -61,31 +62,26 @@
     private static final String RESPONSE_CACHE_TAG = "ResponseCache";
     private static FileLruCache responseCache;
 
-    Response(Request request, HttpURLConnection connection, GraphObject graphObject, boolean isFromCache) {
-        this.request = request;
-        this.connection = connection;
-        this.graphObject = graphObject;
-        this.graphObjectList = null;
-        this.isFromCache = isFromCache;
-        this.error = null;
+    Response(Request request, HttpURLConnection connection, String rawResponse, GraphObject graphObject, boolean isFromCache) {
+        this(request, connection, rawResponse, graphObject, null, isFromCache, null);
     }
 
-    Response(Request request, HttpURLConnection connection, GraphObjectList<GraphObject> graphObjects,
+    Response(Request request, HttpURLConnection connection, String rawResponse, GraphObjectList<GraphObject> graphObjects,
             boolean isFromCache) {
-        this.request = request;
-        this.connection = connection;
-        this.graphObject = null;
-        this.graphObjectList = graphObjects;
-        this.isFromCache = isFromCache;
-        this.error = null;
+        this(request, connection, rawResponse, null, graphObjects, isFromCache, null);
     }
 
     Response(Request request, HttpURLConnection connection, FacebookRequestError error) {
+        this(request, connection, null, null, null, false, error);
+    }
+
+    Response(Request request, HttpURLConnection connection, String rawResponse, GraphObject graphObject, GraphObjectList<GraphObject> graphObjects, boolean isFromCache, FacebookRequestError error) {
         this.request = request;
         this.connection = connection;
-        this.graphObject = null;
-        this.graphObjectList = null;
-        this.isFromCache = false;
+        this.rawResponse = rawResponse;
+        this.graphObject = graphObject;
+        this.graphObjectList = graphObjects;
+        this.isFromCache = isFromCache;
         this.error = error;
     }
 
@@ -166,6 +162,15 @@ public Request getRequest() {
         return request;
     }
 
+    /**
+     * Returns the server response as a String that this response is for.
+     *
+     * @return A String representation of the actual response from the server
+     */
+    public String getRawResponse() {
+        return rawResponse;
+    }
+
     /**
      * Indicates whether paging is being done forward or backward.
      */
@@ -425,18 +430,18 @@ private static Response createResponseFromObject(Request request, HttpURLConnect
 
             if (body instanceof JSONObject) {
                 GraphObject graphObject = GraphObject.Factory.create((JSONObject) body);
-                return new Response(request, connection, graphObject, isFromCache);
+                return new Response(request, connection, body.toString(), graphObject, isFromCache);
             } else if (body instanceof JSONArray) {
                 GraphObjectList<GraphObject> graphObjectList = GraphObject.Factory.createList(
                         (JSONArray) body, GraphObject.class);
-                return new Response(request, connection, graphObjectList, isFromCache);
+                return new Response(request, connection, body.toString(), graphObjectList, isFromCache);
             }
             // We didn't get a body we understand how to handle, so pretend we got nothing.
             object = JSONObject.NULL;
         }
 
         if (object == JSONObject.NULL) {
-            return new Response(request, connection, (GraphObject)null, isFromCache);
+            return new Response(request, connection, object.toString(), (GraphObject)null, isFromCache);
         } else {
             throw new FacebookException("Got unexpected object type in response, class: "
                     + object.getClass().getSimpleName());
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 26a743281..aa362fcf8 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -59,6 +59,9 @@
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 import com.facebook.internal.*;
+import com.facebook.model.GraphMultiResult;
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphObjectList;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -137,13 +140,6 @@
      */
     public static final String ACTION_ACTIVE_SESSION_CLOSED = "com.facebook.sdk.ACTIVE_SESSION_CLOSED";
 
-    /**
-     * Session takes application id as a constructor parameter. If this is null,
-     * Session will attempt to load the application id from
-     * application/meta-data using this String as the key.
-     */
-    public static final String APPLICATION_ID_PROPERTY = "com.facebook.sdk.ApplicationId";
-
     private static final Object STATIC_LOCK = new Object();
     private static Session activeSession;
     private static volatile Context staticContext;
@@ -158,6 +154,8 @@
     private static final String PUBLISH_PERMISSION_PREFIX = "publish";
     private static final String MANAGE_PERMISSION_PREFIX = "manage";
 
+    private static final String BASIC_INFO_PERMISSION = "basic_info";
+
     @SuppressWarnings("serial")
     private static final Set<String> OTHER_PUBLISH_PERMISSIONS = new HashSet<String>() {{
         add("ads_management");
@@ -216,6 +214,41 @@ private Object readResolve() {
         }
     }
 
+    /**
+     * Serialization proxy for the Session class. This is version 2 of
+     * serialization. Future serializations may differ in format. This
+     * class should not be modified. If serializations formats change,
+     * create a new class SerializationProxyVx.
+     */
+    private static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = 7663436173185080064L;
+        private final String applicationId;
+        private final SessionState state;
+        private final AccessToken tokenInfo;
+        private final Date lastAttemptedTokenExtendDate;
+        private final boolean shouldAutoPublish;
+        private final AuthorizationRequest pendingAuthorizationRequest;
+        private final Set<String> requestedPermissions;
+
+        SerializationProxyV2(String applicationId, SessionState state,
+                             AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
+                             boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest,
+                             Set<String> requestedPermissions) {
+            this.applicationId = applicationId;
+            this.state = state;
+            this.tokenInfo = tokenInfo;
+            this.lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate;
+            this.shouldAutoPublish = shouldAutoPublish;
+            this.pendingAuthorizationRequest = pendingAuthorizationRequest;
+            this.requestedPermissions = requestedPermissions;
+        }
+
+        private Object readResolve() {
+            return new Session(applicationId, state, tokenInfo,
+                    lastAttemptedTokenExtendDate, shouldAutoPublish, pendingAuthorizationRequest, requestedPermissions);
+        }
+    }
+
     /**
      * Used by version 1 of the serialization proxy, do not modify.
      */
@@ -233,6 +266,24 @@ private Session(String applicationId, SessionState state,
         callbacks = new ArrayList<StatusCallback>();
     }
 
+    /**
+     * Used by version 2 of the serialization proxy, do not modify.
+     */
+    private Session(String applicationId, SessionState state,
+                    AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
+                    boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest,
+                    Set<String> requestedPermissions) {
+        this.applicationId = applicationId;
+        this.state = state;
+        this.tokenInfo = tokenInfo;
+        this.lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate;
+        this.pendingAuthorizationRequest = pendingAuthorizationRequest;
+        handler = new Handler(Looper.getMainLooper());
+        currentTokenRefreshRequest = null;
+        tokenCachingStrategy = null;
+        callbacks = new ArrayList<StatusCallback>();
+    }
+
     /**
      * Initializes a new Session with the specified context.
      *
@@ -279,14 +330,14 @@ public Session(Context currentContext) {
                 // If expired or we require new permissions, clear out the
                 // current token cache.
                 tokenCachingStrategy.clear();
-                this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+                this.tokenInfo = AccessToken.createEmptyToken();
             } else {
                 // Otherwise we have a valid token, so use it.
                 this.tokenInfo = AccessToken.createFromCache(tokenState);
                 this.state = SessionState.CREATED_TOKEN_LOADED;
             }
         } else {
-            this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+            this.tokenInfo = AccessToken.createEmptyToken();
         }
     }
 
@@ -388,6 +439,35 @@ public final Date getExpirationDate() {
         }
     }
 
+    /**
+     * <p>
+     *     Returns whether a particular permission has been granted
+     * </p>
+     *
+     * @param permission The permission to check for
+     * @return true if the permission is granted, false otherwise
+     */
+    public boolean isPermissionGranted(String permission) {
+        List<String> grantedPermissions = getPermissions();
+        if (grantedPermissions != null) {
+            return grantedPermissions.contains(permission);
+        }
+        return false;
+    }
+
+    /**
+     * <p>
+     * Returns the list of permissions that have been requested in this session but not granted
+     * </p>
+     *
+     * @return the list of requested permissions that have been declined
+     */
+    public final List<String> getDeclinedPermissions() {
+        synchronized (this.lock) {
+            return (this.tokenInfo == null) ? null : this.tokenInfo.getDeclinedPermissions();
+        }
+    }
+
     /**
      * <p>
      * Logs a user in to Facebook.
@@ -542,6 +622,110 @@ public final void requestNewPublishPermissions(NewPermissionsRequest newPermissi
         requestNewPermissions(newPermissionsRequest, SessionAuthorizationType.PUBLISH);
     }
 
+    /**
+     * <p>
+     * Issues a request to refresh the permissions on the session.
+     * </p>
+     * <p>
+     * If successful, this will update the permissions and call the app back with
+     * {@link SessionState#OPENED_TOKEN_UPDATED}.  The session can then be queried to see the granted and declined
+     * permissions.  If this fails because the user has removed the app, the session will close.
+     * </p>
+     */
+    public final void refreshPermissions() {
+        Request request = new Request(this, "me/permissions");
+        request.setCallback(new Request.Callback() {
+            @Override
+            public void onCompleted(Response response) {
+                PermissionsPair permissionsPair = handlePermissionResponse(response);
+                if (permissionsPair != null) {
+                    // Update our token with the refreshed permissions
+                    synchronized (lock) {
+                        tokenInfo = AccessToken.createFromTokenWithRefreshedPermissions(tokenInfo,
+                                permissionsPair.getGrantedPermissions(), permissionsPair.getDeclinedPermissions());
+                        postStateChange(state, SessionState.OPENED_TOKEN_UPDATED, null);
+                    }
+                }
+            }
+        });
+        request.executeAsync();
+    }
+
+    /**
+     * Internal helper class that is used to hold two different permission lists (granted and declined)
+     */
+    static class PermissionsPair {
+        List<String> grantedPermissions;
+        List<String> declinedPermissions;
+
+        public PermissionsPair(List<String> grantedPermissions, List<String> declinedPermissions) {
+            this.grantedPermissions = grantedPermissions;
+            this.declinedPermissions = declinedPermissions;
+        }
+
+        public List<String> getGrantedPermissions() {
+            return grantedPermissions;
+        }
+
+        public List<String> getDeclinedPermissions() {
+            return declinedPermissions;
+        }
+    }
+    /**
+     * This parses a server response to a call to me/permissions.  It will return the list of granted permissions.
+     * It will optionally update a session with the requested permissions.  It also handles the distinction between
+     * 1.0 and 2.0 calls to the endpoint.
+     *
+     * @param response The server response
+     * @return A list of granted permissions or null if an error
+     */
+    static PermissionsPair handlePermissionResponse(Response response) {
+        if (response.getError() != null) {
+            return null;
+        }
+
+        GraphMultiResult result = response.getGraphObjectAs(GraphMultiResult.class);
+        if (result == null) {
+            return null;
+        }
+
+        GraphObjectList<GraphObject> data = result.getData();
+        if (data == null || data.size() == 0) {
+            return null;
+        }
+        List<String> grantedPermissions = new ArrayList<String>(data.size());
+        List<String> declinedPermissions = new ArrayList<String>(data.size());
+
+        // Check if we are dealing with v2.0 or v1.0 behavior until the server is updated
+        GraphObject firstObject = data.get(0);
+        if (firstObject.getProperty("permission") != null) { // v2.0
+            for (GraphObject graphObject : data) {
+                String permission = (String) graphObject.getProperty("permission");
+                if (permission.equals("installed")) {
+                    continue;
+                }
+                String status = (String) graphObject.getProperty("status");
+                if(status.equals("granted")) {
+                    grantedPermissions.add(permission);
+                } else if (status.equals("declined")) {
+                    declinedPermissions.add(permission);
+                }
+            }
+        } else { // v1.0
+            Map<String, Object> permissionsMap = firstObject.asMap();
+            for (Map.Entry<String, Object> entry : permissionsMap.entrySet()) {
+                if (entry.getKey().equals("installed")) {
+                    continue;
+                }
+                if ((Integer)entry.getValue() == 1) {
+                    grantedPermissions.add(entry.getKey());
+                }
+            }
+        }
+
+        return new PermissionsPair(grantedPermissions, declinedPermissions);
+    }
+
     /**
      * Provides an implementation for {@link Activity#onActivityResult
      * onActivityResult} that updates the Session based on information returned
@@ -860,6 +1044,33 @@ public static Session openActiveSession(Activity activity, boolean allowLoginUI,
         return openActiveSession(activity, allowLoginUI, new OpenRequest(activity).setCallback(callback));
     }
 
+    /**
+     * If allowLoginUI is true, this will create a new Session, make it active, and
+     * open it. If the default token cache is not available, then this will request
+     * the permissions provided (and basic permissions of no permissions are provided).
+     * If the default token cache is available and cached tokens are loaded, this will
+     * use the cached token and associated permissions.
+     * <p/>
+     * If allowedLoginUI is false, this will only create the active session and open
+     * it if it requires no user interaction (i.e. the token cache is available and
+     * there are cached tokens).
+     *
+     * @param activity     The Activity that is opening the new Session.
+     * @param allowLoginUI if false, only sets the active session and opens it if it
+     *                     does not require user interaction
+     * @param permissions  The permissions to request for this Session
+     * @param callback     The {@link StatusCallback SessionStatusCallback} to
+     *                     notify regarding Session state changes. May be null.
+     * @return The new Session or null if one could not be created
+     */
+    public static Session openActiveSession(Activity activity, boolean allowLoginUI,
+            List<String> permissions, StatusCallback callback) {
+        return openActiveSession(
+                activity, 
+                allowLoginUI, 
+                new OpenRequest(activity).setCallback(callback).setPermissions(permissions));
+    }
+    
     /**
      * If allowLoginUI is true, this will create a new Session, make it active, and
      * open it. If the default token cache is not available, then this will request
@@ -882,6 +1093,34 @@ public static Session openActiveSession(Context context, Fragment fragment,
             boolean allowLoginUI, StatusCallback callback) {
         return openActiveSession(context, allowLoginUI, new OpenRequest(fragment).setCallback(callback));
     }
+    
+    /**
+     * If allowLoginUI is true, this will create a new Session, make it active, and
+     * open it. If the default token cache is not available, then this will request
+     * the permissions provided (and basic permissions of no permissions are provided).
+     * If the default token cache is available and cached tokens are loaded, this will
+     * use the cached token and associated permissions.
+     * <p/>
+     * If allowedLoginUI is false, this will only create the active session and open
+     * it if it requires no user interaction (i.e. the token cache is available and
+     * there are cached tokens).
+     *
+     * @param context      The Activity or Service creating this Session
+     * @param fragment     The Fragment that is opening the new Session.
+     * @param allowLoginUI if false, only sets the active session and opens it if it
+     *                     does not require user interaction
+     * @param permissions  The permissions to request for this Session
+     * @param callback     The {@link StatusCallback SessionStatusCallback} to
+     *                     notify regarding Session state changes.
+     * @return The new Session or null if one could not be created
+     */
+    public static Session openActiveSession(Context context, Fragment fragment,
+            boolean allowLoginUI, List<String> permissions, StatusCallback callback) {
+        return openActiveSession(
+                context, 
+                allowLoginUI, 
+                new OpenRequest(fragment).setCallback(callback).setPermissions(permissions));
+    }
 
     /**
      * Opens a session based on an existing Facebook access token, and also makes this session
@@ -1321,7 +1560,7 @@ void postStateChange(final SessionState oldState, final SessionState newState, f
         }
 
         if (newState.isClosed()) {
-            this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+            this.tokenInfo = AccessToken.createEmptyToken();
         }
 
         // Need to schedule the callbacks inside the same queue to preserve ordering.
@@ -2095,5 +2334,12 @@ public final NewPermissionsRequest setDefaultAudience(SessionDefaultAudience def
             super.setDefaultAudience(defaultAudience);
             return this;
         }
+
+        @Override
+        AuthorizationClient.AuthorizationRequest getAuthorizationClientRequest() {
+            AuthorizationClient.AuthorizationRequest request = super.getAuthorizationClientRequest();
+            request.setRerequest(true);
+            return request;
+        }
     }
 }
diff --git a/facebook/src/com/facebook/Settings.java b/facebook/src/com/facebook/Settings.java
index cb0b98a56..d834c4d81 100644
--- a/facebook/src/com/facebook/Settings.java
+++ b/facebook/src/com/facebook/Settings.java
@@ -19,6 +19,8 @@
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.AsyncTask;
@@ -26,6 +28,7 @@
 import android.os.Looper;
 import android.util.Log;
 import com.facebook.android.BuildConfig;
+import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Utility;
 import com.facebook.model.GraphObject;
 import com.facebook.internal.Validate;
@@ -48,9 +51,13 @@
     private static volatile Executor executor;
     private static volatile boolean shouldAutoPublishInstall;
     private static volatile String appVersion;
+    private static volatile String applicationId;
+    private static volatile String appClientToken;
+    private static volatile boolean defaultsLoaded = false;
     private static final String FACEBOOK_COM = "facebook.com";
     private static volatile String facebookDomain = FACEBOOK_COM;
     private static AtomicLong onProgressThreshold = new AtomicLong(65536);
+    private static volatile boolean platformCompatibilityEnabled;
 
     private static final int DEFAULT_CORE_POOL_SIZE = 5;
     private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
@@ -79,6 +86,32 @@ public Thread newThread(Runnable runnable) {
         }
     };
 
+    /**
+     * loadDefaultsFromMetadata will attempt to load certain settings (e.g., application ID, client token) from
+     * metadata in the app's AndroidManifest.xml. The application ID will be read from this key.
+     */
+    public static final String APPLICATION_ID_PROPERTY = "com.facebook.sdk.ApplicationId";
+    /**
+     * loadDefaultsFromMetadata will attempt to load certain settings (e.g., application ID, client token) from
+     * metadata in the app's AndroidManifest.xml. The client token will be read from this key.
+     */
+    public static final String CLIENT_TOKEN_PROPERTY = "com.facebook.sdk.ClientToken";
+
+    private static Boolean sdkInitialized = false;
+
+    /**
+     * Initialize SDK
+     * This function will be called once in the application, it is tried to be called as early as possible;
+     * This is the place to register broadcast listeners.
+     */
+    public static synchronized void sdkInitialize(Context context) {
+        if (sdkInitialized == true) {
+          return;
+        }
+        BoltsMeasurementEventListener.getInstance(context.getApplicationContext());
+        sdkInitialized = true;
+    }
+
     /**
      * Certain logging behaviors are available for debugging beyond those that should be
      * enabled in production.
@@ -237,30 +270,7 @@ private static Executor getAsyncTaskExecutor() {
         return (Executor) executorObject;
     }
 
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static void publishInstallAsync(final Context context, final String applicationId) {
-       publishInstallAsync(context, applicationId, null);
-    }
-
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     * @param callback a callback to invoke with a Response object, carrying the server response, or an error.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static void publishInstallAsync(final Context context, final String applicationId,
+    static void publishInstallAsync(final Context context, final String applicationId,
         final Request.Callback callback) {
         // grab the application context ahead of time, since we will return to the caller immediately.
         final Context applicationContext = context.getApplicationContext();
@@ -268,9 +278,8 @@ public static void publishInstallAsync(final Context context, final String appli
             @Override
             public void run() {
                 Log.d(TAG, "Publishing Install for " + applicationId);
-                final Response response = Settings.publishInstallAndWaitForResponse(applicationContext, applicationId);
+                final Response response = Settings.publishInstallAndWaitForResponse(applicationContext, applicationId, false);
                 Log.d(TAG, "Got Response for: " + response.toString());
-
                 if (callback != null) {
                     // invoke the callback on the main thread.
                     Handler handler = new Handler(Looper.getMainLooper());
@@ -309,36 +318,6 @@ public static boolean getShouldAutoPublishInstall() {
         return shouldAutoPublishInstall;
     }
 
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     * @return returns false on error.  Applications should retry until true is returned.  Safe to call again after
-     * true is returned.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static boolean publishInstallAndWait(final Context context, final String applicationId) {
-        Response response = publishInstallAndWaitForResponse(context, applicationId);
-        return response != null && response.getError() == null;
-    }
-
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles caching repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     * @return returns a Response object, carrying the server response, or an error.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static Response publishInstallAndWaitForResponse(final Context context, final String applicationId) {
-        return publishInstallAndWaitForResponse(context, applicationId, false);
-    }
-
     static Response publishInstallAndWaitForResponse(
             final Context context,
             final String applicationId,
@@ -347,7 +326,7 @@ static Response publishInstallAndWaitForResponse(
             if (context == null || applicationId == null) {
                 throw new IllegalArgumentException("Both context and applicationId must be non-null");
             }
-            String attributionId = Settings.getAttributionId(context.getContentResolver());
+            AttributionIdentifiers identifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
             SharedPreferences preferences = context.getSharedPreferences(ATTRIBUTION_PREFERENCES, Context.MODE_PRIVATE);
             String pingKey = applicationId+"ping";
             String jsonKey = applicationId+"json";
@@ -363,9 +342,9 @@ static Response publishInstallAndWaitForResponse(
             publishParams.setProperty(ANALYTICS_EVENT, MOBILE_INSTALL_EVENT);
 
             Utility.setAppEventAttributionParameters(publishParams,
-                    attributionId,
+                    identifiers,
                     Utility.getHashedDeviceAndAppID(context, applicationId),
-                    !getLimitEventAndDataUsage(context));
+                    getLimitEventAndDataUsage(context));
             publishParams.setProperty(AUTO_PUBLISH, isAutoPublish);
             publishParams.setProperty("application_package_name", context.getPackageName());
 
@@ -385,12 +364,11 @@ static Response publishInstallAndWaitForResponse(
                 if (graphObject == null) {
                     return Response.createResponsesFromString("true", null, new RequestBatch(publishRequest), true).get(0);
                 } else {
-                    return new Response(null, null, graphObject, true);
+                    return new Response(null, null, null, graphObject, true);
                 }
-            } else if (attributionId == null) {
-                throw new FacebookException("No attribution id returned from the Facebook application");
+            } else if (identifiers.getAndroidAdvertiserId() == null && identifiers.getAttributionId() == null) {
+                throw new FacebookException("No attribution id available to send to server.");
             } else {
-
                 if (!Utility.queryAppSettings(applicationId, false).supportsAttribution()) {
                     throw new FacebookException("Install attribution has been disabled on the server.");
                 }
@@ -466,17 +444,6 @@ public static String getSdkVersion() {
         return FacebookSdkVersion.BUILD;
     }
 
-    /**
-     * Gets the current Facebook migration bundle string; this string can be passed to Graph API
-     * endpoints to specify a set of platform migrations that are explicitly turned on or off for
-     * that call, in order to ensure compatibility between a given version of the SDK and the
-     * Graph API.
-     * @return the migration bundle supported by this version of the SDK
-     */
-    public static String getMigrationBundle() {
-        return FacebookSdkVersion.MIGRATION_BUNDLE;
-    }
-
     /**
      * Gets whether data such as that generated through AppEventsLogger and sent to Facebook should be restricted from
      * being used for purposes other than analytics and conversions, such as for targeting ads to this user.  Defaults
@@ -520,4 +487,98 @@ public static long getOnProgressThreshold() {
     public static void setOnProgressThreshold(long threshold) {
         onProgressThreshold.set(threshold);
     }
+
+    /**
+     * Gets whether the SDK is running in Platform Compatibility mode (i.e. making calls to v1.0 endpoints by default)
+     * The default is false.
+     *
+     * @return the value
+     */
+    public static boolean getPlatformCompatibilityEnabled() {
+        return platformCompatibilityEnabled;
+    }
+
+    /**
+     * Sets whether the SDK is running in Platform Compatibility mode (i.e. making calls to v1.0 endpoints by default)
+     * The default is false.  This is provided for apps that have strong reason not to take advantage of new
+     * capabilities in version 2.0+ of the API.
+     *
+     * @param platformCompatibilityEnabled whether to set Legacy Graph API mode
+     */
+    public static void setPlatformCompatibilityEnabled(boolean platformCompatibilityEnabled) {
+        Settings.platformCompatibilityEnabled = platformCompatibilityEnabled;
+    }
+
+    /**
+     * Loads default values for certain settings from an application's AndroidManifest.xml metadata, if possible.
+     * If values have been explicitly set for a particular setting, they will not be overwritten. The following
+     * settings are currently loaded from metadata: APPLICATION_ID_PROPERTY, CLIENT_TOKEN_PROPERTY
+     * @param context the Context to use for loading metadata
+     */
+    public static void loadDefaultsFromMetadata(Context context) {
+        defaultsLoaded = true;
+
+        if (context == null) {
+            return;
+        }
+
+        ApplicationInfo ai = null;
+        try {
+            ai = context.getPackageManager().getApplicationInfo(
+                    context.getPackageName(), PackageManager.GET_META_DATA);
+        } catch (PackageManager.NameNotFoundException e) {
+            return;
+        }
+
+        if (ai == null || ai.metaData == null) {
+            return;
+        }
+
+        if (applicationId == null) {
+            applicationId = ai.metaData.getString(APPLICATION_ID_PROPERTY);
+        }
+        if (appClientToken == null) {
+            appClientToken = ai.metaData.getString(CLIENT_TOKEN_PROPERTY);
+        }
+    }
+
+    static void loadDefaultsFromMetadataIfNeeded(Context context) {
+        if (!defaultsLoaded) {
+            loadDefaultsFromMetadata(context);
+        }
+    }
+
+    /**
+     * Gets the Facebook application ID for the current app. This will be null unless explicitly set or unless
+     * loadDefaultsFromMetadata has been called.
+     * @return the application ID
+     */
+    public static String getApplicationId() {
+        return applicationId;
+    }
+
+    /**
+     * Sets the Facebook application ID for the current app.
+     * @param applicationId the application ID
+     */
+    public static void setApplicationId(String applicationId) {
+        Settings.applicationId = applicationId;
+    }
+
+    /**
+     * Gets the client token for the current app. This will be null unless explicitly set or unless
+     * loadDefaultsFromMetadata has been called.
+     * @return the client token
+     */
+    public static String getClientToken() {
+        return appClientToken;
+    }
+
+    /**
+     * Sets the Facebook client token for the current app.
+     * @param clientToken the client token
+     */
+    public static void setClientToken(String clientToken) {
+        appClientToken = clientToken;
+    }
 }
diff --git a/facebook/src/com/facebook/TestSession.java b/facebook/src/com/facebook/TestSession.java
index 9133cb91f..821c1f95d 100644
--- a/facebook/src/com/facebook/TestSession.java
+++ b/facebook/src/com/facebook/TestSession.java
@@ -77,6 +77,7 @@
     private final List<String> requestedPermissions;
     private final Mode mode;
     private String testAccountId;
+    private String testAccountUserName;
 
     private boolean wasAskedToExtendAccessToken;
 
@@ -200,6 +201,16 @@ public final String getTestUserId() {
         return testAccountId;
     }
 
+    /**
+     * Gets the name of the test user that this TestSession is authenticated as.
+     *
+     * @return the name of the test user
+     */
+    public final String getTestUserName() {
+        return testAccountUserName;
+    }
+
+
     private static synchronized TestSession createTestSession(Activity activity, List<String> permissions, Mode mode,
             String sessionUniqueUserTag) {
         if (Utility.isNullOrEmpty(testApplicationId) || Utility.isNullOrEmpty(testApplicationSecret)) {
@@ -339,7 +350,7 @@ void forceExtendAccessToken(boolean forceExtendAccessToken) {
         AccessToken currentToken = getTokenInfo();
         setTokenInfo(
                 new AccessToken(currentToken.getToken(), new Date(), currentToken.getPermissions(),
-                        AccessTokenSource.TEST_USER, new Date(0)));
+                        currentToken.getDeclinedPermissions(), AccessTokenSource.TEST_USER, new Date(0)));
         setLastAttemptedTokenExtendDate(new Date(0));
     }
 
@@ -375,6 +386,7 @@ private void findOrCreateSharedTestAccount() {
 
     private void finishAuthWithTestAccount(TestAccount testAccount) {
         testAccountId = testAccount.getId();
+        testAccountUserName = testAccount.getName();
 
         AccessToken accessToken = AccessToken.createFromString(testAccount.getAccessToken(), requestedPermissions,
                 AccessTokenSource.TEST_USER);
diff --git a/facebook/src/com/facebook/TokenCachingStrategy.java b/facebook/src/com/facebook/TokenCachingStrategy.java
index 6f18cc3fe..c615be640 100644
--- a/facebook/src/com/facebook/TokenCachingStrategy.java
+++ b/facebook/src/com/facebook/TokenCachingStrategy.java
@@ -76,6 +76,12 @@
      */
     public static final String PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.Permissions";
 
+    /**
+     * The key used by Session to store the list of permissions declined by the user in the token in the Bundle
+     * during load and save.
+     */
+    public static final String DECLINED_PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.DeclinedPermissions";
+
     private static final long INVALID_BUNDLE_MILLISECONDS = Long.MIN_VALUE;
     private static final String IS_SSO_KEY = "com.facebook.TokenCachingStrategy.IsSSO";
 
@@ -266,6 +272,31 @@ public static void putPermissions(Bundle bundle, List<String> value) {
         bundle.putStringArrayList(PERMISSIONS_KEY, arrayList);
     }
 
+    /**
+     * Puts the list of declined permissions into a Bundle.
+     *
+     * @param bundle
+     *            A Bundle in which the list of permissions should be stored.
+     * @param value
+     *            The List&lt;String&gt; representing the list of permissions,
+     *            or null.
+     *
+     * @throws NullPointerException if the passed in Bundle or permissions list are null
+     */
+    public static void putDeclinedPermissions(Bundle bundle, List<String> value) {
+        Validate.notNull(bundle, "bundle");
+        Validate.notNull(value, "value");
+
+        ArrayList<String> arrayList;
+        if (value instanceof ArrayList<?>) {
+            arrayList = (ArrayList<String>) value;
+        } else {
+            arrayList = new ArrayList<String>(value);
+        }
+        bundle.putStringArrayList(DECLINED_PERMISSIONS_KEY, arrayList);
+    }
+
+
     /**
      * Gets the cached enum indicating the source of the token from the Bundle.
      *
diff --git a/facebook/src/com/facebook/UiLifecycleHelper.java b/facebook/src/com/facebook/UiLifecycleHelper.java
index cecb95da8..d7c163ab3 100644
--- a/facebook/src/com/facebook/UiLifecycleHelper.java
+++ b/facebook/src/com/facebook/UiLifecycleHelper.java
@@ -66,10 +66,15 @@ public UiLifecycleHelper(Activity activity, Session.StatusCallback callback) {
         if (activity == null) {
             throw new IllegalArgumentException(ACTIVITY_NULL_MESSAGE);
         }
+
         this.activity = activity;
         this.callback = callback;
         this.receiver = new ActiveSessionBroadcastReceiver();
         this.broadcastManager = LocalBroadcastManager.getInstance(activity);
+        // initialize SDK
+        Settings.sdkInitialize(activity);
+        // Make sure we've loaded default settings if we haven't already.
+        Settings.loadDefaultsFromMetadataIfNeeded(activity);
     }
 
     /**
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index 83cdabe9b..4680f364d 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -1223,23 +1223,6 @@ public void setShouldAutoPublishInstall(boolean value) {
         Settings.setShouldAutoPublishInstall(value);
     }
 
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * <p/>
-     * This method is deprecated.  See {@link Facebook} and {@link Settings} for more info.
-     *
-     * @param context the current Android context
-     * @return Always false.  Earlier versions of the API returned true if it was no longer necessary to call.
-     * Apps should ignore this value, but for compatibility we will return false to ensure repeat calls (and the
-     * underlying code will prevent duplicate network traffic).
-     */
-    @Deprecated
-    public boolean publishInstall(final Context context) {
-        Settings.publishInstallAsync(context, mAppId);
-        return false;
-    }
-
     /**
      * Callback interface for dialog requests.
      * <p/>
diff --git a/facebook/src/com/facebook/internal/AnalyticsEvents.java b/facebook/src/com/facebook/internal/AnalyticsEvents.java
index e01ac4371..e57ec0fb7 100644
--- a/facebook/src/com/facebook/internal/AnalyticsEvents.java
+++ b/facebook/src/com/facebook/internal/AnalyticsEvents.java
@@ -13,6 +13,8 @@
     public static final String EVENT_PLACE_PICKER_USAGE             = "fb_place_picker_usage";
     public static final String EVENT_LOGIN_VIEW_USAGE               = "fb_login_view_usage";
     public static final String EVENT_USER_SETTINGS_USAGE            = "fb_user_settings_vc_usage";
+    public static final String EVENT_NATIVE_DIALOG_START            = "fb_native_dialog_start";
+    public static final String EVENT_NATIVE_DIALOG_COMPLETE         = "fb_native_dialog_complete";
 
     public static final String PARAMETER_WEB_LOGIN_E2E                  = "fb_web_login_e2e";
     public static final String PARAMETER_WEB_LOGIN_SWITCHBACK_TIME      = "fb_web_login_switchback_time";
@@ -28,4 +30,10 @@
     public static final String PARAMETER_DIALOG_OUTCOME_VALUE_CANCELLED = "Cancelled";
     public static final String PARAMETER_DIALOG_OUTCOME_VALUE_FAILED    = "Failed";
 
+    public static final String EVENT_NATIVE_DIALOG_TYPE_SHARE           = "fb_dialogs_present_share";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_MESSAGE         = "fb_dialogs_present_message";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_OG_SHARE        = "fb_dialogs_present_share_og";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_OG_MESSAGE      = "fb_dialogs_present_message_og";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_PHOTO_SHARE     = "fb_dialogs_present_share_photo";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_PHOTO_MESSAGE   = "fb_dialogs_present_message_photo";
 }
diff --git a/facebook/src/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
new file mode 100644
index 000000000..1c8f63018
--- /dev/null
+++ b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
@@ -0,0 +1,144 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.util.Log;
+
+import java.lang.reflect.Method;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class AttributionIdentifiers {
+    private static final String TAG = AttributionIdentifiers.class.getCanonicalName();
+    private static final Uri ATTRIBUTION_ID_CONTENT_URI =
+            Uri.parse("content://com.facebook.katana.provider.AttributionIdProvider");
+    private static final String ATTRIBUTION_ID_COLUMN_NAME = "aid";
+    private static final String ANDROID_ID_COLUMN_NAME = "androidid";
+    private static final String LIMIT_TRACKING_COLUMN_NAME = "limit_tracking";
+
+    // com.google.android.gms.common.ConnectionResult.SUCCESS
+    private static final int CONNECTION_RESULT_SUCCESS = 0;
+
+    private static final long IDENTIFIER_REFRESH_INTERVAL_MILLIS = 3600 * 1000;
+
+    private String attributionId;
+    private String androidAdvertiserId;
+    private boolean limitTracking;
+    private long fetchTime;
+
+    private static AttributionIdentifiers recentlyFetchedIdentifiers;
+
+    private static AttributionIdentifiers getAndroidId(Context context) {
+        AttributionIdentifiers identifiers = new AttributionIdentifiers();
+        try {
+            Method isGooglePlayServicesAvailable = Utility.getMethodQuietly(
+                    "com.google.android.gms.common.GooglePlayServicesUtil",
+                    "isGooglePlayServicesAvailable",
+                    Context.class
+            );
+
+            if (isGooglePlayServicesAvailable == null) {
+                return identifiers;
+            }
+
+            Object connectionResult = Utility.invokeMethodQuietly(null, isGooglePlayServicesAvailable, context);
+            if (!(connectionResult instanceof Integer) || (Integer) connectionResult != CONNECTION_RESULT_SUCCESS) {
+                return identifiers;
+            }
+
+            Method getAdvertisingIdInfo = Utility.getMethodQuietly(
+                    "com.google.android.gms.ads.identifier.AdvertisingIdClient",
+                    "getAdvertisingIdInfo",
+                    Context.class
+            );
+            if (getAdvertisingIdInfo == null) {
+                return identifiers;
+            }
+            Object advertisingInfo = Utility.invokeMethodQuietly(null, getAdvertisingIdInfo, context);
+            if (advertisingInfo == null) {
+                return identifiers;
+            }
+
+            Method getId = Utility.getMethodQuietly(advertisingInfo.getClass(), "getId");
+            Method isLimitAdTrackingEnabled = Utility.getMethodQuietly(advertisingInfo.getClass(), "isLimitAdTrackingEnabled");
+            if (getId == null || isLimitAdTrackingEnabled == null) {
+                return identifiers;
+            }
+
+            identifiers.androidAdvertiserId = (String) Utility.invokeMethodQuietly(advertisingInfo, getId);
+            identifiers.limitTracking = (Boolean) Utility.invokeMethodQuietly(advertisingInfo, isLimitAdTrackingEnabled);
+        } catch (Exception e) {
+            Utility.logd("android_id", e);
+        }
+        return identifiers;
+    }
+
+    public static AttributionIdentifiers getAttributionIdentifiers(Context context) {
+        if (recentlyFetchedIdentifiers != null &&
+            System.currentTimeMillis() - recentlyFetchedIdentifiers.fetchTime < IDENTIFIER_REFRESH_INTERVAL_MILLIS) {
+            return recentlyFetchedIdentifiers;
+        }
+
+        AttributionIdentifiers identifiers = getAndroidId(context);
+
+        try {
+            String [] projection = {ATTRIBUTION_ID_COLUMN_NAME, ANDROID_ID_COLUMN_NAME, LIMIT_TRACKING_COLUMN_NAME};
+            Cursor c = context.getContentResolver().query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
+            if (c == null || !c.moveToFirst()) {
+                return null;
+            }
+            int attributionColumnIndex = c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME);
+            int androidIdColumnIndex = c.getColumnIndex(ANDROID_ID_COLUMN_NAME);
+            int limitTrackingColumnIndex = c.getColumnIndex(LIMIT_TRACKING_COLUMN_NAME);
+
+            identifiers.attributionId = c.getString(attributionColumnIndex);
+
+            // if we failed to call Google's APIs directly (due to improper integration by the client), it may be
+            // possible for the local facebook application to relay it to us.
+            if (androidIdColumnIndex > 0 && limitTrackingColumnIndex > 0 && identifiers.getAndroidAdvertiserId() == null) {
+                identifiers.androidAdvertiserId = c.getString(androidIdColumnIndex);
+                identifiers.limitTracking = Boolean.parseBoolean(c.getString(limitTrackingColumnIndex));
+            }
+            c.close();
+        } catch (Exception e) {
+            Log.d(TAG, "Caught unexpected exception in getAttributionId(): " + e.toString());
+            return null;
+        }
+
+        identifiers.fetchTime = System.currentTimeMillis();
+        recentlyFetchedIdentifiers = identifiers;
+        return identifiers;
+    }
+
+    public String getAttributionId() {
+        return attributionId;
+    }
+
+    public String getAndroidAdvertiserId() {
+        return androidAdvertiserId;
+    }
+
+    public boolean isTrackingLimited() {
+        return limitTracking;
+    }
+}
\ No newline at end of file
diff --git a/facebook/src/com/facebook/internal/NativeProtocol.java b/facebook/src/com/facebook/internal/NativeProtocol.java
index 98417dcdc..7a7186c10 100644
--- a/facebook/src/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/com/facebook/internal/NativeProtocol.java
@@ -26,7 +26,6 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import com.facebook.*;
-import com.facebook.android.BuildConfig;
 
 import java.util.*;
 
@@ -42,7 +41,6 @@
     private static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
     private static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService";
 
-    private static final String BASIC_INFO = "basic_info";
     public static final String FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY = "scope";
     public static final String FACEBOOK_PROXY_AUTH_APP_ID_KEY = "client_id";
     public static final String FACEBOOK_PROXY_AUTH_E2E_KEY = "e2e";
@@ -57,6 +55,9 @@
     public static final int PROTOCOL_VERSION_20130502 = 20130502;
     public static final int PROTOCOL_VERSION_20130618 = 20130618;
     public static final int PROTOCOL_VERSION_20131107 = 20131107;
+    public static final int PROTOCOL_VERSION_20140204 = 20140204;
+    public static final int PROTOCOL_VERSION_20140324 = 20140324;
+
     public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION";
     public static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION";
     public static final String EXTRA_PROTOCOL_CALL_ID = "com.facebook.platform.protocol.CALL_ID";
@@ -85,22 +86,25 @@
     static final String EXTRA_PROTOCOL_VERSIONS = "com.facebook.platform.extra.PROTOCOL_VERSIONS";
 
     // Values of EXTRA_PROTOCOL_ACTION supported by PlatformActivity:
-    public static final String ACTION_LOGIN_DIALOG = "com.facebook.platform.action.request.LOGIN_DIALOG";
     public static final String ACTION_FEED_DIALOG = "com.facebook.platform.action.request.FEED_DIALOG";
+    public static final String ACTION_MESSAGE_DIALOG = "com.facebook.platform.action.request.MESSAGE_DIALOG";
     public static final String ACTION_OGACTIONPUBLISH_DIALOG =
             "com.facebook.platform.action.request.OGACTIONPUBLISH_DIALOG";
+    public static final String ACTION_OGMESSAGEPUBLISH_DIALOG =
+            "com.facebook.platform.action.request.OGMESSAGEPUBLISH_DIALOG";
 
     // Values of EXTRA_PROTOCOL_ACTION values returned by PlatformActivity:
-    static final String ACTION_LOGIN_DIALOG_REPLY =
-            "com.facebook.platform.action.reply.LOGIN_DIALOG";
     public static final String ACTION_FEED_DIALOG_REPLY =
             "com.facebook.platform.action.reply.FEED_DIALOG";
+    public static final String ACTION_MESSAGE_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.MESSAGE_DIALOG";
     public static final String ACTION_OGACTIONPUBLISH_DIALOG_REPLY =
             "com.facebook.platform.action.reply.OGACTIONPUBLISH_DIALOG";
+    public static final String ACTION_OGMESSAGEPUBLISH_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.OGMESSAGEPUBLISH_DIALOG";
 
     // Extras supported for ACTION_LOGIN_DIALOG:
     public static final String EXTRA_PERMISSIONS = "com.facebook.platform.extra.PERMISSIONS";
-    public static final String EXTRA_WRITE_PRIVACY = "com.facebook.platform.extra.WRITE_PRIVACY";
     public static final String EXTRA_APPLICATION_ID = "com.facebook.platform.extra.APPLICATION_ID";
     public static final String EXTRA_APPLICATION_NAME = "com.facebook.platform.extra.APPLICATION_NAME";
 
@@ -120,6 +124,7 @@
     public static final String EXTRA_DESCRIPTION = "com.facebook.platform.extra.DESCRIPTION";
     public static final String EXTRA_REF = "com.facebook.platform.extra.REF";
     public static final String EXTRA_DATA_FAILURES_FATAL = "com.facebook.platform.extra.DATA_FAILURES_FATAL";
+    public static final String EXTRA_PHOTOS = "com.facebook.platform.extra.PHOTOS";
 
     // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
     public static final String EXTRA_ACTION = "com.facebook.platform.extra.ACTION";
@@ -165,9 +170,25 @@
     // Columns returned by PlatformProvider
     private static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
 
+    // Broadcast action for asynchronously-executing AppCalls
+    private static final String PLATFORM_ASYNC_APPCALL_ACTION = "com.facebook.platform.AppCallResultBroadcast";
+
     private static abstract class NativeAppInfo {
         abstract protected String getPackage();
-        abstract protected String getSignature();
+
+        private static final String FBI_HASH = "a4b7452e2ed8f5f191058ca7bbfd26b0d3214bfc";
+        private static final String FBL_HASH = "5e8f16062ea3cd2c4a0d547876baa6f38cabf625";
+        private static final String FBR_HASH = "8a3c4b262d721acd49a4bf97d5213199c86fa2b9";
+
+        private static final HashSet<String> validAppSignatureHashes = buildAppSignatureHashes();
+
+        private static HashSet<String> buildAppSignatureHashes() {
+            HashSet<String> set = new HashSet<String>();
+            set.add(FBR_HASH);
+            set.add(FBI_HASH);
+            set.add(FBL_HASH);
+            return set;
+        }
 
         public boolean validateSignature(Context context, String packageName) {
             String brand = Build.BRAND;
@@ -186,61 +207,36 @@ public boolean validateSignature(Context context, String packageName) {
             }
 
             for (Signature signature : packageInfo.signatures) {
-                if (signature.toCharsString().equals(this.getSignature())) {
+                String hashedSignature = Utility.sha1hash(signature.toByteArray());
+                if (validAppSignatureHashes.contains(hashedSignature)) {
                     return true;
                 }
             }
 
             return false;
         }
-
     }
 
     private static class KatanaAppInfo extends NativeAppInfo {
         static final String KATANA_PACKAGE = "com.facebook.katana";
-        static final String KATANA_SIGNATURE =
-                "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
-                        + "b3009060355040613025553310b30090603550408130243413112301006035504"
-                        + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
-                        + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
-                        + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
-                        + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
-                        + "55040613025553310b30090603550408130243413112301006035504071309506"
-                        + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
-                        + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
-                        + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
-                        + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
-                        + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
-                        + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
-                        + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
-                        + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
-                        + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
-                        + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
-                        + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
-                        + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
-                        + "928a2";
-        @Override
-        protected String getSignature() {
-            return KATANA_SIGNATURE;
-        }
+
         @Override
         protected String getPackage() {
             return KATANA_PACKAGE;
         }
     }
 
-    private static class WakizashiAppInfo extends NativeAppInfo {
-        static final String WAKIZASHI_PACKAGE = "com.facebook.wakizashi";
+    private static class MessengerAppInfo extends NativeAppInfo {
+        static final String MESSENGER_PACKAGE = "com.facebook.orca";
 
         @Override
-        public boolean validateSignature(Context context, String packageName) {
-            return true;
+        protected String getPackage() {
+            return MESSENGER_PACKAGE;
         }
+    }
 
-        @Override
-        protected String getSignature() {
-            return null;
-        }
+    private static class WakizashiAppInfo extends NativeAppInfo {
+        static final String WAKIZASHI_PACKAGE = "com.facebook.wakizashi";
 
         @Override
         protected String getPackage() {
@@ -257,10 +253,7 @@ protected String getPackage() {
 
         // Katana needs to be the first thing in the list since it will get selected as the default FACEBOOK_APP_INFO
         list.add(FACEBOOK_APP_INFO);
-
-        if(BuildConfig.DEBUG) {
-            list.add(new WakizashiAppInfo());
-        }
+        list.add(new WakizashiAppInfo());
 
         return list;
     }
@@ -268,10 +261,14 @@ protected String getPackage() {
     private static Map<String, List<NativeAppInfo>> buildActionToAppInfoMap() {
         Map<String, List<NativeAppInfo>> map = new HashMap<String, List<NativeAppInfo>>();
 
+        ArrayList<NativeAppInfo> messengerAppInfoList = new ArrayList<NativeAppInfo>();
+        messengerAppInfoList.add(new MessengerAppInfo());
+
         // Add individual actions and the list they should try
         map.put(ACTION_OGACTIONPUBLISH_DIALOG, facebookAppInfoList);
         map.put(ACTION_FEED_DIALOG, facebookAppInfoList);
-        map.put(ACTION_LOGIN_DIALOG, facebookAppInfoList);
+        map.put(ACTION_MESSAGE_DIALOG, messengerAppInfoList);
+        map.put(ACTION_OGMESSAGEPUBLISH_DIALOG, messengerAppInfoList);
 
         return map;
     }
@@ -311,31 +308,60 @@ static Intent validateServiceIntent(Context context, Intent intent, NativeAppInf
     }
 
     public static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions,
-            String e2e) {
-        Intent intent = new Intent()
-                .setClassName(FACEBOOK_APP_INFO.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
-                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+            String e2e, boolean isRerequest) {
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = new Intent()
+                    .setClassName(appInfo.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
+                    .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
 
-        if (!Utility.isNullOrEmpty(permissions)) {
-            intent.putExtra(FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-        }
-        if (!Utility.isNullOrEmpty(e2e)) {
-            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
-        }
+            if (!Utility.isNullOrEmpty(permissions)) {
+                intent.putExtra(FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
+            }
+            if (!Utility.isNullOrEmpty(e2e)) {
+                intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
+            }
+
+            intent.putExtra(ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE, ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN);
+            intent.putExtra(ServerProtocol.DIALOG_PARAM_RETURN_SCOPES, ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+
+            if (!Settings.getPlatformCompatibilityEnabled()) {
+                // Override the API Version for Auth
+                intent.putExtra(ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE, ServerProtocol.GRAPH_API_VERSION);
+
+                // Only set the rerequest auth type for non legacy requests
+                if (isRerequest) {
+                    intent.putExtra(ServerProtocol.DIALOG_PARAM_AUTH_TYPE, ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+                }
+            }
 
-        return validateActivityIntent(context, intent, FACEBOOK_APP_INFO);
+            intent = validateActivityIntent(context, intent, appInfo);
+
+            if (intent != null) {
+                return intent;
+            }
+        }
+        return null;
     }
 
     public static Intent createTokenRefreshIntent(Context context) {
-        Intent intent = new Intent()
-                .setClassName(FACEBOOK_APP_INFO.getPackage(), FACEBOOK_TOKEN_REFRESH_ACTIVITY);
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = new Intent()
+                    .setClassName(appInfo.getPackage(), FACEBOOK_TOKEN_REFRESH_ACTIVITY);
 
-        return validateServiceIntent(context, intent, FACEBOOK_APP_INFO);
+            intent = validateServiceIntent(context, intent, appInfo);
+
+            if (intent != null) {
+                return intent;
+            }
+        }
+        return null;
     }
 
     // Note: be sure this stays sorted in descending order; add new versions at the beginning
     private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
             Arrays.asList(
+                    PROTOCOL_VERSION_20140324,
+                    PROTOCOL_VERSION_20140204,
                     PROTOCOL_VERSION_20131107,
                     PROTOCOL_VERSION_20130618,
                     PROTOCOL_VERSION_20130502,
@@ -389,23 +415,6 @@ public static Intent createPlatformServiceIntent(Context context) {
         return null;
     }
 
-    public static Intent createLoginDialog20121101Intent(Context context, String applicationId, ArrayList<String> permissions,
-            String audience) {
-        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, ACTION_LOGIN_DIALOG);
-        if (intent == null) {
-            return null;
-        }
-
-        intent.putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20121101)
-              .putExtra(EXTRA_PROTOCOL_ACTION, ACTION_LOGIN_DIALOG)
-              .putExtra(EXTRA_APPLICATION_ID, applicationId)
-              .putStringArrayListExtra(EXTRA_PERMISSIONS, ensureDefaultPermissions(permissions))
-              .putExtra(EXTRA_PROTOCOL_CALL_ID, generateCallId())
-              .putExtra(EXTRA_WRITE_PRIVACY, ensureDefaultAudience(audience));
-
-        return intent;
-    }
-
     public static boolean isErrorResult(Intent resultIntent) {
         return resultIntent.hasExtra(STATUS_ERROR_TYPE);
     }
@@ -425,44 +434,6 @@ public static Exception getErrorFromResult(Intent resultIntent) {
         return new FacebookException(description);
     }
 
-    private static String generateCallId() {
-        return UUID.randomUUID().toString();
-    }
-
-    private static String ensureDefaultAudience(String audience) {
-        if (Utility.isNullOrEmpty(audience)) {
-            return AUDIENCE_ME;
-        } else {
-            return audience;
-        }
-    }
-
-    private static ArrayList<String> ensureDefaultPermissions(ArrayList<String> permissions) {
-        ArrayList<String> updated;
-
-        // Return if we are doing publish, or if basic_info is already included
-        if (Utility.isNullOrEmpty(permissions)) {
-            updated = new ArrayList<String>();
-        } else {
-            for (String permission : permissions) {
-                if (Session.isPublishPermission(permission) || BASIC_INFO.equals(permission)) {
-                    return permissions;
-                }
-            }
-            updated = new ArrayList<String>(permissions);
-        }
-
-        updated.add(BASIC_INFO);
-        return updated;
-    }
-
-    public static boolean isServiceDisabledResult20121101(Intent data) {
-        int protocolVersion = data.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);
-        String errorType = data.getStringExtra(STATUS_ERROR_TYPE);
-
-        return ((PROTOCOL_VERSION_20121101 == protocolVersion) && ERROR_SERVICE_DISABLED.equals(errorType));
-    }
-
     public static int getLatestAvailableProtocolVersionForService(Context context, final int minimumVersion) {
         // Services are currently always against the Facebook App
         return getLatestAvailableProtocolVersionForAppInfoList(context, facebookAppInfoList, minimumVersion);
@@ -496,24 +467,31 @@ private static int getLatestAvailableProtocolVersionForAppInfo(Context context,
 
         String [] projection = new String[]{ PLATFORM_PROVIDER_VERSION_COLUMN };
         Uri uri = buildPlatformProviderVersionURI(appInfo);
-        Cursor c = contentResolver.query(uri, projection, null, null, null);
-        if (c == null) {
-            return NO_PROTOCOL_AVAILABLE;
-        }
-
-        Set<Integer> versions = new HashSet<Integer>();
-        while (c.moveToNext()) {
-            int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
-            versions.add(version);
-        }
-
-        for (Integer knownVersion : KNOWN_PROTOCOL_VERSIONS) {
-            if (knownVersion < minimumVersion) {
+        Cursor c = null;
+        try {
+            c = contentResolver.query(uri, projection, null, null, null);
+            if (c == null) {
                 return NO_PROTOCOL_AVAILABLE;
             }
 
-            if (versions.contains(knownVersion)) {
-                return knownVersion;
+            Set<Integer> versions = new HashSet<Integer>();
+            while (c.moveToNext()) {
+                int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
+                versions.add(version);
+            }
+
+            for (Integer knownVersion : KNOWN_PROTOCOL_VERSIONS) {
+                if (knownVersion < minimumVersion) {
+                    return NO_PROTOCOL_AVAILABLE;
+                }
+
+                if (versions.contains(knownVersion)) {
+                    return knownVersion;
+                }
+            }
+        } finally {
+            if (c != null) {
+                c.close();
             }
         }
 
diff --git a/facebook/src/com/facebook/internal/ServerProtocol.java b/facebook/src/com/facebook/internal/ServerProtocol.java
index 6f3dd7d49..06155ce5e 100644
--- a/facebook/src/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/com/facebook/internal/ServerProtocol.java
@@ -17,7 +17,6 @@
 package com.facebook.internal;
 
 import com.facebook.Settings;
-import com.facebook.internal.Utility;
 
 import java.util.Collection;
 
@@ -29,20 +28,29 @@
 public final class ServerProtocol {
     private static final String DIALOG_AUTHORITY_FORMAT = "m.%s";
     public static final String DIALOG_PATH = "dialog/";
-    public static final String DIALOG_PARAM_SCOPE = "scope";
-    public static final String DIALOG_PARAM_CLIENT_ID = "client_id";
-    public static final String DIALOG_PARAM_DISPLAY = "display";
-    public static final String DIALOG_PARAM_REDIRECT_URI = "redirect_uri";
-    public static final String DIALOG_PARAM_TYPE = "type";
     public static final String DIALOG_PARAM_ACCESS_TOKEN = "access_token";
     public static final String DIALOG_PARAM_APP_ID = "app_id";
+    public static final String DIALOG_PARAM_AUTH_TYPE = "auth_type";
+    public static final String DIALOG_PARAM_CLIENT_ID = "client_id";
+    public static final String DIALOG_PARAM_DISPLAY = "display";
     public static final String DIALOG_PARAM_E2E = "e2e";
+    public static final String DIALOG_PARAM_LEGACY_OVERRIDE = "legacy_override";
+    public static final String DIALOG_PARAM_REDIRECT_URI = "redirect_uri";
+    public static final String DIALOG_PARAM_RESPONSE_TYPE = "response_type";
+    public static final String DIALOG_PARAM_RETURN_SCOPES = "return_scopes";
+    public static final String DIALOG_PARAM_SCOPE = "scope";
+    public static final String DIALOG_REREQUEST_AUTH_TYPE = "rerequest";
+    public static final String DIALOG_RESPONSE_TYPE_TOKEN = "token";
+    public static final String DIALOG_RETURN_SCOPES_TRUE = "true";
 
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    private static final String REST_URL_FORMAT = "https://api.%s/method";
-    public static final String BATCHED_REST_METHOD_URL_BASE = "method/";
+    private static final String REST_URL_FORMAT = "https://api.%s";
+    public static final String REST_METHOD_BASE = "method";
+    public static final String GRAPH_API_VERSION = "v2.0";
+
+    private static final String LEGACY_API_VERSION = "v1.0";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
@@ -64,4 +72,11 @@ public static final String getGraphVideoUrlBase() {
     public static final String getRestUrlBase() {
         return String.format(REST_URL_FORMAT, Settings.getFacebookDomain());
     }
+
+    public static final String getAPIVersion() {
+        if (Settings.getPlatformCompatibilityEnabled()) {
+            return LEGACY_API_VERSION;
+        }
+        return GRAPH_API_VERSION;
+    }
 }
diff --git a/facebook/src/com/facebook/internal/Utility.java b/facebook/src/com/facebook/internal/Utility.java
index 28afbf84f..41fd4e3b6 100644
--- a/facebook/src/com/facebook/internal/Utility.java
+++ b/facebook/src/com/facebook/internal/Utility.java
@@ -17,14 +17,24 @@
 package com.facebook.internal;
 
 import android.content.Context;
-import android.content.pm.ApplicationInfo;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.net.Uri;
+import android.os.BatteryManager;
+import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.os.Parcelable;
+import android.os.StatFs;
 import android.provider.Settings.Secure;
+import android.telephony.TelephonyManager;
 import android.text.TextUtils;
+import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.Display;
+import android.view.WindowManager;
 import android.webkit.CookieManager;
 import android.webkit.CookieSyncManager;
 import com.facebook.*;
@@ -36,6 +46,8 @@
 import org.json.JSONTokener;
 
 import java.io.*;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
 import java.security.MessageDigest;
@@ -55,9 +67,15 @@
     private static final String URL_SCHEME = "https";
     private static final String SUPPORTS_ATTRIBUTION = "supports_attribution";
     private static final String SUPPORTS_IMPLICIT_SDK_LOGGING = "supports_implicit_sdk_logging";
+    private static final String NUX_CONTENT = "gdpv4_nux_content";
+    private static final String NUX_ENABLED = "gdpv4_nux_enabled";
+    private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a1";
+
     private static final String [] APP_SETTING_FIELDS = new String[] {
             SUPPORTS_ATTRIBUTION,
-            SUPPORTS_IMPLICIT_SDK_LOGGING
+            SUPPORTS_IMPLICIT_SDK_LOGGING,
+            NUX_CONTENT,
+            NUX_ENABLED
     };
     private static final String APPLICATION_FIELDS = "fields";
 
@@ -67,13 +85,26 @@
     private static Map<String, FetchedAppSettings> fetchedAppSettings =
             new ConcurrentHashMap<String, FetchedAppSettings>();
 
-    public static class FetchedAppSettings {
+    private static int sNumCPUCores = 0;
+    private static long sTotalExternalStorageBytes = -1;
+    private static long sAvailableExternalStorageBytes = -1;
+    private static String sCarrierName = null;
+
+
+  public static class FetchedAppSettings {
         private boolean supportsAttribution;
         private boolean supportsImplicitLogging;
+        private String nuxContent;
+        private boolean nuxEnabled;
 
-        private FetchedAppSettings(boolean supportsAttribution, boolean supportsImplicitLogging) {
+        private FetchedAppSettings(boolean supportsAttribution,
+                                   boolean supportsImplicitLogging,
+                                   String nuxContent,
+                                   boolean nuxEnabled) {
             this.supportsAttribution = supportsAttribution;
             this.supportsImplicitLogging = supportsImplicitLogging;
+            this.nuxContent = nuxContent;
+            this.nuxEnabled = nuxEnabled;
         }
 
         public boolean supportsAttribution() {
@@ -83,6 +114,14 @@ public boolean supportsAttribution() {
         public boolean supportsImplicitLogging() {
             return supportsImplicitLogging;
         }
+
+        public String getNuxContent() {
+            return nuxContent;
+        }
+
+        public boolean getNuxEnabled() {
+            return nuxEnabled;
+        }
     }
 
     // Returns true iff all items in subset are in superset, treating null and
@@ -126,19 +165,30 @@ static String md5hash(String key) {
         return hashWithAlgorithm(HASH_ALGORITHM_MD5, key);
     }
 
-    private static String sha1hash(String key) {
+    static String sha1hash(String key) {
         return hashWithAlgorithm(HASH_ALGORITHM_SHA1, key);
     }
 
+    static String sha1hash(byte[] bytes) {
+        return hashWithAlgorithm(HASH_ALGORITHM_SHA1, bytes);
+    }
+
     private static String hashWithAlgorithm(String algorithm, String key) {
-        MessageDigest hash = null;
+        return hashWithAlgorithm(algorithm, key.getBytes());
+    }
+
+    private static String hashWithAlgorithm(String algorithm, byte[] bytes) {
+        MessageDigest hash;
         try {
             hash = MessageDigest.getInstance(algorithm);
         } catch (NoSuchAlgorithmException e) {
             return null;
         }
+        return hashBytes(hash, bytes);
+    }
 
-        hash.update(key.getBytes());
+    private static String hashBytes(MessageDigest hash, byte[] bytes) {
+        hash.update(bytes);
         byte[] digest = hash.digest();
         StringBuilder builder = new StringBuilder();
         for (int b : digest) {
@@ -193,17 +243,9 @@ public static void disconnectQuietly(URLConnection connection) {
     public static String getMetadataApplicationId(Context context) {
         Validate.notNull(context, "context");
 
-        try {
-            ApplicationInfo ai = context.getPackageManager().getApplicationInfo(
-                    context.getPackageName(), PackageManager.GET_META_DATA);
-            if (ai.metaData != null) {
-                return ai.metaData.getString(Session.APPLICATION_ID_PROPERTY);
-            }
-        } catch (PackageManager.NameNotFoundException e) {
-            // if we can't find it in the manifest, just return null
-        }
+        Settings.loadDefaultsFromMetadata(context);
 
-        return null;
+        return Settings.getApplicationId();
     }
 
     static Map<String, Object> convertJSONObjectToHashMap(JSONObject jsonObject) {
@@ -359,7 +401,10 @@ public static FetchedAppSettings queryAppSettings(final String applicationId, fi
         GraphObject supportResponse = request.executeAndWait().getGraphObject();
         FetchedAppSettings result = new FetchedAppSettings(
                 safeGetBooleanFromResponse(supportResponse, SUPPORTS_ATTRIBUTION),
-                safeGetBooleanFromResponse(supportResponse, SUPPORTS_IMPLICIT_SDK_LOGGING));
+                safeGetBooleanFromResponse(supportResponse, SUPPORTS_IMPLICIT_SDK_LOGGING),
+                safeGetStringFromResponse(supportResponse, NUX_CONTENT),
+                safeGetBooleanFromResponse(supportResponse, NUX_ENABLED)
+                );
 
         fetchedAppSettings.put(applicationId, result);
 
@@ -377,6 +422,17 @@ private static boolean safeGetBooleanFromResponse(GraphObject response, String p
         return (Boolean) result;
     }
 
+    private static String safeGetStringFromResponse(GraphObject response, String propertyName) {
+        Object result = "";
+        if (response != null) {
+            result = response.getProperty(propertyName);
+        }
+        if (!(result instanceof String)) {
+            result = "";
+        }
+        return (String) result;
+    }
+
     public static void clearCaches(Context context) {
         ImageDownloader.clearCache(context);
     }
@@ -419,14 +475,92 @@ public static String getHashedDeviceAndAppID(Context context, String application
     }
 
     public static void setAppEventAttributionParameters(GraphObject params,
-            String attributionId, String hashedDeviceAndAppId, boolean limitEventUsage) {
+            AttributionIdentifiers attributionIdentifiers, String hashedDeviceAndAppId, boolean limitEventUsage) {
         // Send attributionID if it exists, otherwise send a hashed device+appid specific value as the advertiser_id.
-        if (attributionId != null) {
-            params.setProperty("attribution", attributionId);
+        if (attributionIdentifiers != null && attributionIdentifiers.getAttributionId() != null) {
+            params.setProperty("attribution", attributionIdentifiers.getAttributionId());
+        }
+
+        if (attributionIdentifiers != null && attributionIdentifiers.getAndroidAdvertiserId() != null) {
+            params.setProperty("advertiser_id", attributionIdentifiers.getAndroidAdvertiserId());
+            params.setProperty("advertiser_tracking_enabled", !attributionIdentifiers.isTrackingLimited());
         } else if (hashedDeviceAndAppId != null) {
             params.setProperty("advertiser_id", hashedDeviceAndAppId);
         }
 
         params.setProperty("application_tracking_enabled", !limitEventUsage);
     }
+
+    public static void setAppEventExtendedDeviceInfoParameters(GraphObject params, Context appContext) {
+      JSONArray extraInfoArray = new JSONArray();
+      extraInfoArray.put(EXTRA_APP_EVENTS_INFO_FORMAT_VERSION);
+
+      // Application Manifest info:
+      String pkgName = appContext.getPackageName();
+      int versionCode = -1;
+      String versionName = "";
+
+      try {
+        PackageInfo pi = appContext.getPackageManager().getPackageInfo(pkgName, 0);
+        versionCode = pi.versionCode;
+        versionName = pi.versionName;
+      } catch (PackageManager.NameNotFoundException e) {
+        // Swallow
+      }
+
+      // Application Manifest info:
+      extraInfoArray.put(pkgName);
+      extraInfoArray.put(versionCode);
+      extraInfoArray.put(versionName);
+
+      params.setProperty("extinfo", extraInfoArray.toString());
+    }
+
+  private static <T> void silentJSONObjectPut(JSONObject object, String key, T data) {
+      try {
+        object.put(key, data);
+      } catch (JSONException e) {
+        // Swallow
+      }
+    }
+
+    public static Method getMethodQuietly(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
+        try {
+            return clazz.getMethod(methodName, parameterTypes);
+        } catch (NoSuchMethodException ex) {
+            return null;
+        }
+    }
+
+    public static Method getMethodQuietly(String className, String methodName, Class<?>... parameterTypes) {
+        try {
+            Class<?> clazz = Class.forName(className);
+            return getMethodQuietly(clazz, methodName, parameterTypes);
+        } catch (ClassNotFoundException ex) {
+            return null;
+        }
+    }
+
+    public static Object invokeMethodQuietly(Object receiver, Method method, Object... args) {
+        try {
+            return method.invoke(receiver, args);
+        } catch (IllegalAccessException ex) {
+            return null;
+        } catch (InvocationTargetException ex) {
+            return null;
+        }
+    }
+
+  /**
+   * Returns the name of the current activity if the context is an activity, otherwise return "unknown"
+   */
+  public static String getActivityName(Context context) {
+    if (context == null) {
+      return "null";
+    } else if (context == context.getApplicationContext()) {
+      return "unknown";
+    } else {
+      return context.getClass().getSimpleName();
+    }
+  }
 }
diff --git a/facebook/src/com/facebook/model/GraphUser.java b/facebook/src/com/facebook/model/GraphUser.java
index c2daca049..51db95d4e 100644
--- a/facebook/src/com/facebook/model/GraphUser.java
+++ b/facebook/src/com/facebook/model/GraphUser.java
@@ -112,13 +112,14 @@
     public void setBirthday(String birthday);
 
     /**
-     * Returns the current city of the user.
-     * @return the current city of the user
+     * Returns the current place of the user.
+     * @return the current place of the user
      */
-    public GraphLocation getLocation();
+    public GraphPlace getLocation();
+
     /**
-     * Sets the current city of the user.
-     * @param location the current city of the user
+     * Sets the current place of the user.
+     * @param location the current place of the user
      */
-    public void setLocation(GraphLocation location);
+    public void setLocation(GraphPlace location);
 }
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
index 77457b457..1322228ca 100644
--- a/facebook/src/com/facebook/widget/FacebookDialog.java
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -25,6 +25,7 @@
 import android.os.Parcelable;
 import android.support.v4.app.Fragment;
 import com.facebook.*;
+import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
@@ -95,7 +96,12 @@
          * Indicates whether the native Share dialog itself is supported by the installed version of the
          * Facebook application.
          */
-        SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618);
+        SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618),
+        /**
+         * Indicates whether the native Share dialog supports sharing of photo images.
+         */
+        PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140204),
+        ;
 
         private int minVersion;
 
@@ -118,6 +124,49 @@ public int getMinVersion() {
         }
     }
 
+    /**
+     * Defines a set of features that may be supported by the native Message dialog exposed by the Facebook Messenger application.
+     * As additional features are added, these flags may be passed to
+     * {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)}
+     * to determine whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features, which in turn may be used to determine which UI, etc., to present to the
+     * user.
+     */
+    public enum MessageDialogFeature implements DialogFeature {
+        /**
+         * Indicates whether the native Message dialog itself is supported by the installed version of the
+         * Facebook application.
+         */
+        MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204),
+        /**
+         * Indicates whether the native Message dialog supports sharing of photo images.
+         */
+        PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140324),
+        ;
+
+        private int minVersion;
+
+        private MessageDialogFeature(int minVersion) {
+            this.minVersion = minVersion;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_MESSAGE_DIALOG;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public int getMinVersion() {
+            return minVersion;
+        }
+    }
+
+
     /**
      * Defines a set of features that may be supported by the native Open Graph dialogs exposed by the Facebook
      * application. As additional features are added, these flags may be passed to
@@ -155,6 +204,43 @@ public int getMinVersion() {
         }
     }
 
+    /**
+     * Defines a set of features that may be supported by the native Open Graph Message dialogs exposed by the Facebook
+     * application. As additional features are added, these flags may be passed to
+     * {@link FacebookDialog#canPresentOpenGraphMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphMessageDialogFeature...)}
+     * to determine whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features, which in turn may be used to determine which UI, etc., to present to the
+     * user.
+     */
+    public enum OpenGraphMessageDialogFeature implements DialogFeature {
+        /**
+         * Indicates whether the native Open Graph Message dialog itself is supported by the installed version of the
+         * Messenger application.
+         */
+        OG_MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204);
+
+        private int minVersion;
+
+        private OpenGraphMessageDialogFeature(int minVersion) {
+            this.minVersion = minVersion;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_OGMESSAGEPUBLISH_DIALOG;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public int getMinVersion() {
+            return minVersion;
+        }
+    }
+
     interface OnPresentCallback {
         void onPresent(Context context) throws Exception;
     }
@@ -213,6 +299,9 @@ private FacebookDialog(Activity activity, Fragment fragment, PendingCall appCall
      * @return a PendingCall containing the unique call ID corresponding to this call to the Facebook application
      */
     public PendingCall present() {
+        logDialogActivity(activity, fragment, getEventName(appCall.getRequestIntent()),
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED);
+
         if (onPresentCallback != null) {
             try {
                 onPresentCallback.onPresent(activity);
@@ -276,6 +365,21 @@ public static boolean canPresentShareDialog(Context context, ShareDialogFeature.
         return handleCanPresent(context, EnumSet.of(ShareDialogFeature.SHARE_DIALOG, features));
     }
 
+    /**
+     * Determines whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features of the native Message dialog, which in turn may be used to determine
+     * which UI, etc., to present to the user.
+     *
+     * @param context  the calling Context
+     * @param features zero or more features to check for; {@link com.facebook.widget.FacebookDialog.MessageDialogFeature#MESSAGE_DIALOG} is implicitly
+     *                 checked if not explicitly specified
+     * @return true if all of the specified features are supported by the currently installed version of the
+     *         Facebook application; false if any of the features are not supported
+     */
+    public static boolean canPresentMessageDialog(Context context, MessageDialogFeature... features) {
+        return handleCanPresent(context, EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG, features));
+    }
+
     /**
      * Determines whether the version of the Facebook application installed on the user's device is recent
      * enough to support specific features of the native Open Graph action dialog, which in turn may be used to
@@ -291,6 +395,21 @@ public static boolean canPresentOpenGraphActionDialog(Context context, OpenGraph
         return handleCanPresent(context, EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG, features));
     }
 
+    /**
+     * Determines whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features of the native Open Graph Message dialog, which in turn may be used to
+     * determine which UI, etc., to present to the user.
+     *
+     * @param context  the calling Context
+     * @param features zero or more features to check for; {@link com.facebook.widget.FacebookDialog.OpenGraphMessageDialogFeature#OG_MESSAGE_DIALOG} is
+     *                 implicitly checked if not explicitly specified
+     * @return true if all of the specified features are supported by the currently installed version of the
+     *         Facebook application; false if any of the features are not supported
+     */
+    public static boolean canPresentOpenGraphMessageDialog(Context context, OpenGraphMessageDialogFeature... features) {
+        return handleCanPresent(context, EnumSet.of(OpenGraphMessageDialogFeature.OG_MESSAGE_DIALOG, features));
+    }
+
     private static boolean handleCanPresent(Context context, Iterable<? extends DialogFeature> features) {
         return getProtocolVersionForNativeDialog(context, getActionForFeatures(features), getMinVersionForFeatures(features))
                 != NativeProtocol.NO_PROTOCOL_AVAILABLE;
@@ -327,12 +446,48 @@ private static String getActionForFeatures(Iterable<? extends DialogFeature> fea
         return action;
     }
 
-    private abstract static class Builder<CONCRETE extends Builder<?>> {
+    private static void logDialogActivity(Activity activity, Fragment fragment, String eventName, String outcome) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(fragment != null ? fragment.getActivity() : activity);
+        Bundle parameters = new Bundle();
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        logger.logSdkEvent(eventName, null, parameters);
+    }
+
+    static private String getEventName(Intent intent) {
+        String action = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION);
+        boolean hasPhotos = intent.hasExtra(NativeProtocol.EXTRA_PHOTOS);
+        return getEventName(action, hasPhotos);
+    }
+
+    static private String getEventName(String action, boolean hasPhotos) {
+        String eventName;
+
+        if (action.equals(NativeProtocol.ACTION_FEED_DIALOG)) {
+            eventName = hasPhotos ?
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_PHOTO_SHARE :
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_SHARE;
+        } else if (action.equals(NativeProtocol.ACTION_MESSAGE_DIALOG)) {
+            eventName = hasPhotos ?
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_PHOTO_MESSAGE :
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_MESSAGE;
+        } else if (action.equals(NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG)) {
+            eventName = AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_OG_SHARE;
+        } else if (action.equals(NativeProtocol.ACTION_OGMESSAGEPUBLISH_DIALOG)) {
+            eventName = AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_OG_MESSAGE;
+        } else {
+            throw new FacebookException("An unspecified action was presented");
+        }
+        return eventName;
+    }
+
+    abstract static class Builder<CONCRETE extends Builder<?>> {
         final protected Activity activity;
         final protected String applicationId;
         final protected PendingCall appCall;
         protected Fragment fragment;
         protected String applicationName;
+        protected HashMap<String, Bitmap> imageAttachments = new HashMap<String, Bitmap>();
+        protected HashMap<String, File> imageAttachmentFiles = new HashMap<String, File>();
 
         Builder(Activity activity) {
             Validate.notNull(activity, "activity");
@@ -405,6 +560,10 @@ public FacebookDialog build() {
 
             Intent intent = NativeProtocol.createPlatformActivityIntent(activity, action, protocolVersion, extras);
             if (intent == null) {
+                logDialogActivity(activity, fragment,
+                        getEventName(action, extras.containsKey(NativeProtocol.EXTRA_PHOTOS)),
+                        AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_FAILED);
+
                 throw new FacebookException(
                         "Unable to create Intent; this likely means the Facebook app is not installed.");
             }
@@ -428,7 +587,53 @@ void validate() {
         }
 
         OnPresentCallback getOnPresentCallback() {
-            return null;
+            return new OnPresentCallback() {
+                @Override
+                public void onPresent(Context context) throws Exception {
+                    // We're actually being presented, so put our attachments in the content provider.
+                    if (imageAttachments != null && imageAttachments.size() > 0) {
+                        getAttachmentStore().addAttachmentsForCall(context, appCall.getCallId(), imageAttachments);
+                    }
+                    if (imageAttachmentFiles != null && imageAttachmentFiles.size() > 0) {
+                        getAttachmentStore().addAttachmentFilesForCall(context, appCall.getCallId(),
+                                imageAttachmentFiles);
+                    }
+                }
+            };
+        }
+
+        protected List<String> addImageAttachments(Collection<Bitmap> bitmaps) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (Bitmap bitmap : bitmaps) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmap);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        protected List<String> addImageAttachmentFiles(Collection<File> bitmapFiles) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (File bitmapFile : bitmapFiles) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmapFile);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        List<String> getImageAttachmentNames() {
+            return new ArrayList<String>(imageAttachments.keySet());
         }
 
         abstract Bundle setBundleExtras(Bundle extras);
@@ -440,13 +645,27 @@ void putExtra(Bundle extras, String key, String value) {
         }
 
         abstract EnumSet<? extends DialogFeature> getDialogFeatures();
+
+        protected CONCRETE addImageAttachment(String imageName, Bitmap bitmap) {
+            imageAttachments.put(imageName, bitmap);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        protected CONCRETE addImageAttachment(String imageName, File attachment) {
+            imageAttachmentFiles.put(imageName, attachment);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
     }
 
     private abstract static class ShareDialogBuilderBase<CONCRETE extends ShareDialogBuilderBase<?>> extends Builder<CONCRETE> {
         private String name;
         private String caption;
         private String description;
-        private String link;
+        protected String link;
         private String picture;
         private String place;
         private ArrayList<String> friends;
@@ -624,14 +843,197 @@ public ShareDialogBuilder(Activity activity) {
         }
     }
 
+    private static abstract class PhotoDialogBuilderBase<CONCRETE extends PhotoDialogBuilderBase<?>>
+            extends Builder<CONCRETE> {
+        static int MAXIMUM_PHOTO_COUNT = 6;
+        private String place;
+        private ArrayList<String> friends;
+        private ArrayList<String> imageAttachmentUrls = new ArrayList<String>();
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public PhotoDialogBuilderBase(Activity activity) {
+            super(activity);
+        }
+
+        /**
+         * Sets the place for the item to be shared.
+         *
+         * @param place the Facebook ID of the place
+         * @return this instance of the builder
+         */
+        public CONCRETE setPlace(String place) {
+            this.place = place;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the tagged friends for the item to be shared.
+         *
+         * @param friends a list of Facebook IDs of the friends to be tagged in the shared item
+         * @return this instance of the builder
+         */
+        public CONCRETE setFriends(List<String> friends) {
+            this.friends = new ArrayList<String>(friends);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * <p></p>Adds one or more photos to the list of photos to display in the native Share dialog, by providing
+         * an in-memory representation of the photos. The dialog's callback will be called once the user has
+         * shared the photos, but the photos themselves may be uploaded in the background by the Facebook app;
+         * apps wishing to be notified when the photo upload has succeeded or failed should extend the
+         * FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.</p>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         * No more than six photos may be shared at a time.
+         * @param photos a collection of Files representing photos to be uploaded
+         * @return this instance of the builder
+         */
+        public CONCRETE addPhotos(Collection<Bitmap> photos) {
+            imageAttachmentUrls.addAll(addImageAttachments(photos));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Adds one or more photos to the list of photos to display in the native Share dialog, by specifying
+         * their location in the file system. The dialog's callback will be called once the user has
+         * shared the photos, but the photos themselves may be uploaded in the background by the Facebook app;
+         * apps wishing to be notified when the photo upload has succeeded or failed should extend the
+         * FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.
+         * No more than six photos may be shared at a time.
+         * @param photos a collection of Files representing photos to be uploaded
+         * @return this instance of the builder
+         */
+        public CONCRETE addPhotoFiles(Collection<File> photos) {
+            imageAttachmentUrls.addAll(addImageAttachmentFiles(photos));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        abstract int getMaximumNumberOfPhotos();
+
+        @Override
+        void validate() {
+            super.validate();
+
+            if (imageAttachmentUrls.isEmpty()) {
+                throw new FacebookException("Must specify at least one photo.");
+            }
+
+            if (imageAttachmentUrls.size() > getMaximumNumberOfPhotos()) {
+                throw new FacebookException(String.format("Cannot add more than %d photos.", getMaximumNumberOfPhotos()));
+            }
+        }
+
+        @Override
+        Bundle setBundleExtras(Bundle extras) {
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            putExtra(extras, NativeProtocol.EXTRA_PLACE_TAG, place);
+            extras.putStringArrayList(NativeProtocol.EXTRA_PHOTOS, imageAttachmentUrls);
+
+            if (!Utility.isNullOrEmpty(friends)) {
+                extras.putStringArrayList(NativeProtocol.EXTRA_FRIEND_TAGS, friends);
+            }
+            return extras;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Share dialog for sharing photos. This builder will throw an exception if the Facebook application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)}  indicates the capability is available.
+     */
+    public static class PhotoShareDialogBuilder extends PhotoDialogBuilderBase<PhotoShareDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public PhotoShareDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(ShareDialogFeature.SHARE_DIALOG, ShareDialogFeature.PHOTOS);
+        }
+
+        @Override
+        int getMaximumNumberOfPhotos() {
+            return MAXIMUM_PHOTO_COUNT;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Message dialog for sharing photos. This builder will throw an exception if the Messenger application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)} indicates the capability is available.
+     */
+    public static class PhotoMessageDialogBuilder extends PhotoDialogBuilderBase<PhotoMessageDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Message dialog; must not be null
+         */
+        public PhotoMessageDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG, MessageDialogFeature.PHOTOS);
+        }
+
+        @Override
+        int getMaximumNumberOfPhotos() {
+            return MAXIMUM_PHOTO_COUNT;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Message dialog. This builder will throw an exception if the Facebook Messenger application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)}  indicates the capability is available.
+     * The "friends" and "place" properties will be ignored as the Facebook Messenger app does not support tagging.
+     */
+    public static class MessageDialogBuilder extends ShareDialogBuilderBase<MessageDialogBuilder> {
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Message dialog; must not be null
+         */
+        public MessageDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG);
+        }
+    }
+
     private static abstract class OpenGraphDialogBuilderBase<CONCRETE extends OpenGraphDialogBuilderBase<?>>
             extends Builder<CONCRETE> {
 
         private String previewPropertyName;
         private OpenGraphAction action;
         private String actionType;
-        private HashMap<String, Bitmap> imageAttachments;
-        private HashMap<String, File> imageAttachmentFiles;
         private boolean dataErrorsFatal;
 
         /**
@@ -996,40 +1398,6 @@ void updateObjectAttachmentUrls(String objectProperty, List<String> attachmentUr
             object.setImage(attachments);
         }
 
-        private List<String> addImageAttachments(List<Bitmap> bitmaps) {
-            ArrayList<String> attachmentUrls = new ArrayList<String>();
-            for (Bitmap bitmap : bitmaps) {
-                String attachmentName = UUID.randomUUID().toString();
-
-                addImageAttachment(attachmentName, bitmap);
-
-                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
-                        attachmentName);
-                attachmentUrls.add(url);
-            }
-
-            return attachmentUrls;
-        }
-
-        private List<String> addImageAttachmentFiles(List<File> bitmapFiles) {
-            ArrayList<String> attachmentUrls = new ArrayList<String>();
-            for (File bitmapFile : bitmapFiles) {
-                String attachmentName = UUID.randomUUID().toString();
-
-                addImageAttachment(attachmentName, bitmapFile);
-
-                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
-                        attachmentName);
-                attachmentUrls.add(url);
-            }
-
-            return attachmentUrls;
-        }
-
-        List<String> getImageAttachmentNames() {
-            return new ArrayList<String>(imageAttachments.keySet());
-        }
-
         @Override
         Bundle setBundleExtras(Bundle extras) {
             putExtra(extras, NativeProtocol.EXTRA_PREVIEW_PROPERTY_NAME, previewPropertyName);
@@ -1045,43 +1413,6 @@ Bundle setBundleExtras(Bundle extras) {
             return extras;
         }
 
-        @Override
-        OnPresentCallback getOnPresentCallback() {
-            return new OnPresentCallback() {
-                @Override
-                public void onPresent(Context context) throws Exception {
-                    // We're actually being presented, so put our attachments in the content provider.
-                    if (imageAttachments != null && imageAttachments.size() > 0) {
-                        getAttachmentStore().addAttachmentsForCall(context, appCall.getCallId(), imageAttachments);
-                    }
-                    if (imageAttachmentFiles != null && imageAttachmentFiles.size() > 0) {
-                        getAttachmentStore().addAttachmentFilesForCall(context, appCall.getCallId(),
-                                imageAttachmentFiles);
-                    }
-                }
-            };
-        }
-
-        private CONCRETE addImageAttachment(String imageName, Bitmap bitmap) {
-            if (imageAttachments == null) {
-                imageAttachments = new HashMap<String, Bitmap>();
-            }
-            imageAttachments.put(imageName, bitmap);
-            @SuppressWarnings("unchecked")
-            CONCRETE result = (CONCRETE) this;
-            return result;
-        }
-
-        private CONCRETE addImageAttachment(String imageName, File attachment) {
-            if (imageAttachmentFiles == null) {
-                imageAttachmentFiles = new HashMap<String, File>();
-            }
-            imageAttachmentFiles.put(imageName, attachment);
-            @SuppressWarnings("unchecked")
-            CONCRETE result = (CONCRETE) this;
-            return result;
-        }
-
         private JSONObject flattenChildrenOfGraphObject(JSONObject graphObject) {
             try {
                 // Clone the existing object to avoid modifying it from under the caller.
@@ -1189,6 +1520,36 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
         }
     }
 
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Open Graph action message dialog. This builder allows the caller to specify binary images for both the
+     * action and any Open Graph objects to be created prior to publishing the action.
+     * This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentOpenGraphMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphMessageDialogFeature...)} indicates the capability is available.
+     */
+    public static class OpenGraphMessageDialogBuilder extends OpenGraphDialogBuilderBase<OpenGraphMessageDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action message dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be sent, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        public OpenGraphMessageDialogBuilder(Activity activity, OpenGraphAction action, String previewPropertyName) {
+            super(activity, action, previewPropertyName);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(OpenGraphMessageDialogFeature.OG_MESSAGE_DIALOG);
+        }
+    }
+
     /**
      * Encapsulates information about a call being made to the Facebook application for Android. A unique String
      * call ID is used to track calls through their lifecycle.
diff --git a/facebook/src/com/facebook/widget/FriendPickerFragment.java b/facebook/src/com/facebook/widget/FriendPickerFragment.java
index b657ec567..6f05df64b 100644
--- a/facebook/src/com/facebook/widget/FriendPickerFragment.java
+++ b/facebook/src/com/facebook/widget/FriendPickerFragment.java
@@ -47,6 +47,33 @@
      * picker should allow more than one friend to be selected or not.
      */
     public static final String MULTI_SELECT_BUNDLE_KEY = "com.facebook.widget.FriendPickerFragment.MultiSelect";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the type of friend picker to use.
+     * This value is case sensitive, and must match the enum @{link FriendPickerType}
+     */
+    public static final String FRIEND_PICKER_TYPE_KEY = "com.facebook.widget.FriendPickerFragment.FriendPickerType";
+
+    public enum FriendPickerType {
+        FRIENDS("/friends", true),
+        TAGGABLE_FRIENDS("/taggable_friends", false),
+        INVITABLE_FRIENDS("/invitable_friends", false);
+
+        private final String requestPath;
+        private final boolean requestIsCacheable;
+
+        FriendPickerType(String path, boolean cacheable) {
+            this.requestPath = path;
+            this.requestIsCacheable = cacheable;
+        }
+
+        String getRequestPath() {
+            return requestPath;
+        }
+
+        boolean isCacheable() {
+            return requestIsCacheable;
+        }
+    }
 
     private static final String ID = "id";
     private static final String NAME = "name";
@@ -55,6 +82,9 @@
 
     private boolean multiSelect = true;
 
+    // default to Friends for backwards compatibility
+    private FriendPickerType friendPickerType = FriendPickerType.FRIENDS;
+
     private List<String> preSelectedFriendIds = new ArrayList<String>();
 
     /**
@@ -112,6 +142,14 @@ public void setMultiSelect(boolean multiSelect) {
         }
     }
 
+    /**
+     * Sets the friend picker type for this fragment.
+     * @param type the type of friend picker to use.
+     */
+    public void setFriendPickerType(FriendPickerType type) {
+        this.friendPickerType = type;
+    }
+
     /**
      * Sets the list of friends for pre selection. These friends will be selected by default.
      * @param userIds list of friends as ids
@@ -250,7 +288,7 @@ public void loadData(boolean forceReload) {
     }
 
     private Request createRequest(String userID, Set<String> extraFields, Session session) {
-        Request request = Request.newGraphPathRequest(session, userID + "/friends", null);
+        Request request = Request.newGraphPathRequest(session, userID + friendPickerType.getRequestPath(), null);
 
         Set<String> fields = new HashSet<String>(extraFields);
         String[] requiredFields = new String[]{
@@ -278,6 +316,13 @@ private void setFriendPickerSettingsFromBundle(Bundle inState) {
                 setUserId(inState.getString(USER_ID_BUNDLE_KEY));
             }
             setMultiSelect(inState.getBoolean(MULTI_SELECT_BUNDLE_KEY, multiSelect));
+            if (inState.containsKey(FRIEND_PICKER_TYPE_KEY)) {
+                try {
+                    friendPickerType = FriendPickerType.valueOf(inState.getString(FRIEND_PICKER_TYPE_KEY));
+                } catch (Exception e) {
+                    // NOOP
+                }
+            }
         }
     }
 
@@ -308,6 +353,11 @@ protected void onLoadFinished(GraphObjectPagingLoader<GraphUser> loader,
             }
         }
 
+        @Override
+        protected boolean canSkipRoundTripIfCached() {
+            return friendPickerType.isCacheable();
+        }
+
         private void followNextLink() {
             // This may look redundant, but this causes the circle to be alpha-dimmed if we have results.
             displayActivityCircle();
diff --git a/facebook/src/com/facebook/widget/GraphObjectAdapter.java b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
index 3686cb8b2..285ddeec2 100644
--- a/facebook/src/com/facebook/widget/GraphObjectAdapter.java
+++ b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
@@ -435,7 +435,7 @@ String getPictureFieldSpecifier() {
 
         // Note: these dimensions are in pixels, not dips
         ViewGroup.LayoutParams layoutParams = picture.getLayoutParams();
-        return String.format("picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
+        return String.format(Locale.US, "picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
     }
 
 
@@ -635,7 +635,11 @@ public long getItemId(int position) {
         if (sectionAndItem != null && sectionAndItem.graphObject != null) {
             String id = getIdOfGraphObject(sectionAndItem.graphObject);
             if (id != null) {
-                return Long.parseLong(id);
+                try {
+                    return Long.parseLong(id);
+                } catch (NumberFormatException e) {
+                    // NOOP
+                }
             }
         }
         return 0;
diff --git a/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java b/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
index 26b33c99d..17d6cb674 100644
--- a/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
+++ b/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
@@ -201,7 +201,11 @@ private void addResults(Response response) {
             nextRequest = response.getRequestForPagedResults(Response.PagingDirection.NEXT);
 
             cursorToModify.addGraphObjects(data, fromCache);
-            cursorToModify.setMoreObjectsAvailable(true);
+            if (nextRequest != null) {
+                cursorToModify.setMoreObjectsAvailable(true);
+            } else {
+                cursorToModify.setMoreObjectsAvailable(false);
+            }
         }
 
         if (!haveData) {
diff --git a/facebook/src/com/facebook/widget/LoginButton.java b/facebook/src/com/facebook/widget/LoginButton.java
index d24c4dc96..25310ccaf 100644
--- a/facebook/src/com/facebook/widget/LoginButton.java
+++ b/facebook/src/com/facebook/widget/LoginButton.java
@@ -26,7 +26,9 @@
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.res.TypedArray;
+import android.graphics.Canvas;
 import android.graphics.Typeface;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.util.AttributeSet;
 import android.util.Log;
@@ -35,14 +37,7 @@
 import android.view.View;
 import android.widget.Button;
 
-import com.facebook.AppEventsLogger;
-import com.facebook.FacebookException;
-import com.facebook.Request;
-import com.facebook.Response;
-import com.facebook.Session;
-import com.facebook.SessionDefaultAudience;
-import com.facebook.SessionLoginBehavior;
-import com.facebook.SessionState;
+import com.facebook.*;
 import com.facebook.android.R;
 import com.facebook.internal.SessionAuthorizationType;
 import com.facebook.internal.SessionTracker;
@@ -53,10 +48,9 @@
 import com.facebook.internal.SessionAuthorizationType;
 import com.facebook.internal.SessionTracker;
 import com.facebook.internal.Utility;
+import com.facebook.internal.Utility.FetchedAppSettings;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
+import java.util.*;
 
 /**
  * A Log In/Log Out button that maintains session state and logs
@@ -70,6 +64,24 @@
  * the {@link #setSession(com.facebook.Session)} method.
  */
 public class LoginButton extends Button {
+    
+    public static enum ToolTipMode {
+        /**
+         * Default display mode. A server query will determine if the tool tip should be displayed
+         * and, if so, what the string shown to the user should be.
+         */
+        DEFAULT,
+        
+        /**
+         * Display the tool tip with a local string--regardless of what the server returns 
+         */
+        DISPLAY_ALWAYS,
+        
+        /**
+         * Never display the tool tip--regardless of what the server says
+         */
+        NEVER_DISPLAY
+    }
 
     private static final String TAG = LoginButton.class.getName();
     private String applicationId = null;
@@ -84,6 +96,12 @@
     private Fragment parentFragment;
     private LoginButtonProperties properties = new LoginButtonProperties();
     private String loginLogoutEventName = AnalyticsEvents.EVENT_LOGIN_VIEW_USAGE;
+    private OnClickListener listenerCallback;
+    private boolean nuxChecked;
+    private ToolTipPopup.Style nuxStyle = ToolTipPopup.Style.BLUE;
+    private ToolTipMode nuxMode = ToolTipMode.DEFAULT;
+    private long nuxDisplayTime = ToolTipPopup.DEFAULT_POPUP_DISPLAY_TIME;
+    private ToolTipPopup nuxPopup;
 
     static class LoginButtonProperties {
         private SessionDefaultAudience defaultAudience = SessionDefaultAudience.FRIENDS;
@@ -484,6 +502,62 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
     public Session.StatusCallback getSessionStatusCallback() {
         return properties.getSessionStatusCallback();
     }
+    
+    /**
+     * Sets the style (background) of the Tool Tip popup. Currently a blue style and a black
+     * style are supported. Blue is default
+     * @param nuxStyle The style of the tool tip popup.
+     */
+    public void setToolTipStyle(ToolTipPopup.Style nuxStyle) {
+        this.nuxStyle = nuxStyle;
+    }
+    
+    /**
+     * Sets the mode of the Tool Tip popup. Currently supported modes are default (normal
+     * behavior), always_on (popup remains up until forcibly dismissed), and always_off (popup
+     * doesn't show)
+     * @param nuxMode The new mode for the tool tip
+     */
+    public void setToolTipMode(ToolTipMode nuxMode) {
+        this.nuxMode = nuxMode;
+    }
+    
+    /**
+     * Return the current {@link ToolTipMode} for this LoginButton
+     * @return The {@link ToolTipMode}
+     */
+    public ToolTipMode getToolTipMode() {
+        return nuxMode;
+    }
+    
+    /**
+     * Sets the amount of time (in milliseconds) that the tool tip will be shown to the user. The 
+     * default is {@value ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}. Any value that is less than or
+     * equal to zero will cause the tool tip to be displayed indefinitely.
+     * @param displayTime The amount of time (in milliseconds) that the tool tip will be displayed
+     * to the user
+     */
+    public void setToolTipDisplayTime(long displayTime) {
+        this.nuxDisplayTime = displayTime;
+    }
+    
+    /**
+     * Gets the current amount of time (in ms) that the tool tip will be displayed to the user
+     * @return
+     */
+    public long getToolTipDisplayTime() {
+        return nuxDisplayTime;
+    }
+
+    /**
+     * Dismisses the Nux Tooltip if it is currently visible
+     */
+    public void dismissToolTip() {
+        if (nuxPopup != null) {
+            nuxPopup.dismiss();
+            nuxPopup = null;
+        }
+    }
 
     /**
      * Provides an implementation for {@link Activity#onActivityResult
@@ -542,7 +616,7 @@ public void onFinishInflate() {
     }
 
     private void finishInit() {
-        setOnClickListener(new LoginClickListener());
+        super.setOnClickListener(new LoginClickListener());
         setButtonText();
         if (!isInEditMode()) {
             sessionTracker = new SessionTracker(getContext(), new LoginButtonCallback(), null, false);
@@ -571,6 +645,54 @@ protected void onAttachedToWindow() {
             setButtonText();
         }
     }
+    
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        if (!nuxChecked && nuxMode != ToolTipMode.NEVER_DISPLAY && !isInEditMode()) {
+            nuxChecked = true;
+            checkNuxSettings();
+        }
+    }
+    
+    private void showNuxPerSettings(FetchedAppSettings settings) {
+        if (settings != null && settings.getNuxEnabled() && getVisibility() == View.VISIBLE) {
+            String nuxString = settings.getNuxContent();
+            displayNux(nuxString);
+        }
+    }
+    
+    private void displayNux(String nuxString) {
+        nuxPopup = new ToolTipPopup(nuxString, this);
+        nuxPopup.setStyle(nuxStyle);
+        nuxPopup.setNuxDisplayTime(nuxDisplayTime);
+        nuxPopup.show();
+    }
+    
+    private void checkNuxSettings() {
+        if (nuxMode == ToolTipMode.DISPLAY_ALWAYS) {
+            String nuxString = getResources().getString(R.string.com_facebook_tooltip_default);
+            displayNux(nuxString);
+        } else {
+            // kick off an async request
+            final String appId = Utility.getMetadataApplicationId(getContext());
+            AsyncTask<Void, Void, FetchedAppSettings> task = new AsyncTask<Void, Void, Utility.FetchedAppSettings>() {
+                @Override
+                protected FetchedAppSettings doInBackground(Void... params) {
+                    FetchedAppSettings settings = Utility.queryAppSettings(appId, false);
+                    return settings;
+                }
+
+                @Override
+                protected void onPostExecute(FetchedAppSettings result) {
+                    showNuxPerSettings(result);
+                }
+            };
+            task.execute((Void[])null);
+        }
+
+    }
 
     @Override
     protected void onDetachedFromWindow() {
@@ -578,6 +700,16 @@ protected void onDetachedFromWindow() {
         if (sessionTracker != null) {
             sessionTracker.stopTracking();
         }
+        dismissToolTip();
+    }
+
+    @Override
+    protected void onVisibilityChanged(View changedView, int visibility) {
+        super.onVisibilityChanged(changedView, visibility);
+        // If the visibility is not VISIBLE, we want to dismiss the nux if it is there
+        if (visibility != VISIBLE) {
+            dismissToolTip();
+        }
     }
 
     // For testing purposes only
@@ -661,6 +793,16 @@ public void onCompleted(GraphUser me,  Response response) {
         }
     }
 
+    /**
+     * Allow a developer to set the OnClickListener for the button.  This will be called back after we do any handling
+     * internally for login
+     * @param clickListener
+     */
+    @Override
+    public void setOnClickListener(OnClickListener clickListener) {
+        listenerCallback = clickListener;
+    }
+
     private class LoginClickListener implements OnClickListener {
 
         @Override
@@ -729,6 +871,10 @@ public void onClick(DialogInterface dialog, int which) {
             parameters.putInt("logging_in", (openSession != null) ? 0 : 1);
 
             logger.logSdkEvent(loginLogoutEventName, null, parameters);
+
+            if (listenerCallback != null) {
+                listenerCallback.onClick(v);
+            }
         }
     }
 
diff --git a/facebook/src/com/facebook/widget/PickerFragment.java b/facebook/src/com/facebook/widget/PickerFragment.java
index 7718a0c26..780fdfa9f 100644
--- a/facebook/src/com/facebook/widget/PickerFragment.java
+++ b/facebook/src/com/facebook/widget/PickerFragment.java
@@ -903,7 +903,7 @@ public void clearResults() {
 
         public void startLoading(Request request) {
             if (loader != null) {
-                loader.startLoading(request, true);
+                loader.startLoading(request, canSkipRoundTripIfCached());
                 onStartLoading(loader, request);
             }
         }
@@ -927,6 +927,10 @@ protected void onLoadReset(GraphObjectPagingLoader<T> loader) {
         protected void onLoadFinished(GraphObjectPagingLoader<T> loader, SimpleGraphObjectCursor<T> data) {
             updateAdapter(data);
         }
+
+        protected boolean canSkipRoundTripIfCached() {
+            return true;
+        }
     }
 
     abstract class SelectionStrategy {
diff --git a/facebook/src/com/facebook/widget/ToolTipPopup.java b/facebook/src/com/facebook/widget/ToolTipPopup.java
new file mode 100644
index 000000000..58f64f357
--- /dev/null
+++ b/facebook/src/com/facebook/widget/ToolTipPopup.java
@@ -0,0 +1,237 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.widget;
+
+import java.lang.ref.WeakReference;
+
+import com.facebook.android.R;
+import com.facebook.widget.LoginButton.ToolTipMode;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.PopupWindow;
+import android.widget.TextView;
+
+public class ToolTipPopup {
+    
+    public static enum Style {
+        /**
+         * The tool tip will be shown with a blue style; including a blue background and blue
+         * arrows.
+         */
+        BLUE,
+        
+        /**
+         * The tool tip will be shown with a black style; including a black background and black
+         * arrows.
+         */
+        BLACK
+    }
+    
+    /**
+     * The default time that the tool tip will be displayed
+     */
+    public static final long DEFAULT_POPUP_DISPLAY_TIME = 6000;
+    
+    private final String mText;
+    private final WeakReference<View> mAnchorViewRef;
+    private final Context mContext;
+    private PopupContentView mPopupContent;
+    private PopupWindow mPopupWindow;
+    private Style mStyle = Style.BLUE;
+    private long mNuxDisplayTime = DEFAULT_POPUP_DISPLAY_TIME;
+    
+    private final ViewTreeObserver.OnScrollChangedListener mScrollListener = 
+            new ViewTreeObserver.OnScrollChangedListener() {
+                @Override
+                public void onScrollChanged() {
+                    if (mAnchorViewRef.get() != null && 
+                            mPopupWindow != null && 
+                            mPopupWindow.isShowing()) {
+                        if (mPopupWindow.isAboveAnchor()) {
+                            mPopupContent.showBottomArrow();
+                        } else {
+                            mPopupContent.showTopArrow();
+                        }
+                    }
+                }
+            };
+    
+    /**
+     * Create a new ToolTipPopup
+     * @param text The text to be displayed in the tool tip
+     * @param anchor The view to anchor this tool tip to.
+     */
+    public ToolTipPopup(String text, View anchor) {
+        mText = text;
+        mAnchorViewRef = new WeakReference<View>(anchor);
+        mContext = anchor.getContext();
+    }
+    
+    /**
+     * Sets the {@link Style} of this tool tip.
+     * @param mStyle
+     */
+    public void setStyle(Style mStyle) {
+        this.mStyle = mStyle;
+    }
+    
+    /**
+     * Display this tool tip to the user
+     */
+    public void show() {
+        if (mAnchorViewRef.get() != null) {
+            mPopupContent = new PopupContentView(mContext);
+            TextView body = (TextView) mPopupContent.findViewById(
+                    R.id.com_facebook_tooltip_bubble_view_text_body);
+            body.setText(mText);
+            if (mStyle == Style.BLUE) {
+                mPopupContent.bodyFrame.setBackgroundResource(
+                        R.drawable.com_facebook_tooltip_blue_background);
+                mPopupContent.bottomArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_blue_bottomnub);
+                mPopupContent.topArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_blue_topnub);
+                mPopupContent.xOut.setImageResource(R.drawable.com_facebook_tooltip_blue_xout);
+            } else {
+                mPopupContent.bodyFrame.setBackgroundResource(
+                        R.drawable.com_facebook_tooltip_black_background);
+                mPopupContent.bottomArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_black_bottomnub);
+                mPopupContent.topArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_black_topnub);
+                mPopupContent.xOut.setImageResource(R.drawable.com_facebook_tooltip_black_xout);
+            }
+            
+            final Window window = ((Activity) mContext).getWindow();
+            final View decorView = window.getDecorView();
+            final int decorWidth = decorView.getWidth();
+            final int decorHeight = decorView.getHeight();
+            registerObserver();
+            mPopupContent.onMeasure(
+                    View.MeasureSpec.makeMeasureSpec(decorWidth, View.MeasureSpec.AT_MOST), 
+                    View.MeasureSpec.makeMeasureSpec(decorHeight, View.MeasureSpec.AT_MOST));
+            mPopupWindow = new PopupWindow(
+                    mPopupContent, 
+                    mPopupContent.getMeasuredWidth(),
+                    mPopupContent.getMeasuredHeight());
+            mPopupWindow.showAsDropDown(mAnchorViewRef.get());
+            updateArrows();
+            if (mNuxDisplayTime > 0) {
+                mPopupContent.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        dismiss();
+                    }
+                }, mNuxDisplayTime);
+            }
+            mPopupWindow.setTouchable(true);
+            mPopupContent.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    dismiss();
+                }
+            });
+        }
+    }
+    
+    /**
+     * Set the time (in milliseconds) the tool tip will be displayed. Any number less than or equal
+     * to 0 will cause the tool tip to be displayed indefinitely
+     * @param displayTime The amount of time (in milliseconds) to display the tool tip
+     */
+    public void setNuxDisplayTime(long displayTime) {
+        this.mNuxDisplayTime = displayTime;
+    }
+    
+    private void updateArrows() {
+        if (mPopupWindow != null && mPopupWindow.isShowing()) {
+            if (mPopupWindow.isAboveAnchor()) {
+                mPopupContent.showBottomArrow();
+            } else {
+                mPopupContent.showTopArrow();
+            }
+        }
+    }
+    
+    /**
+     * Dismiss the tool tip
+     */
+    public void dismiss() {
+        unregisterObserver();
+        if (mPopupWindow != null) {
+            mPopupWindow.dismiss();
+        }
+    }
+    
+    private void registerObserver() {
+        unregisterObserver();
+        if (mAnchorViewRef.get() != null) {
+            mAnchorViewRef.get().getViewTreeObserver().addOnScrollChangedListener(mScrollListener);
+        }
+    }
+    
+    private void unregisterObserver() {
+        if (mAnchorViewRef.get() != null) {
+            mAnchorViewRef.get().getViewTreeObserver().removeOnScrollChangedListener(mScrollListener);
+        }
+    }
+    
+    private class PopupContentView extends FrameLayout {
+        private ImageView topArrow;
+        private ImageView bottomArrow;
+        private View bodyFrame;
+        private ImageView xOut;
+        
+        public PopupContentView(Context context) {
+            super(context);
+            init();
+        }
+        
+        private void init() {
+            LayoutInflater inflater = LayoutInflater.from(getContext());
+            inflater.inflate(R.layout.com_facebook_tooltip_bubble, this);
+            topArrow = (ImageView) findViewById(R.id.com_facebook_tooltip_bubble_view_top_pointer);
+            bottomArrow = (ImageView) findViewById(
+                    R.id.com_facebook_tooltip_bubble_view_bottom_pointer);
+            bodyFrame = findViewById(R.id.com_facebook_body_frame);
+            xOut = (ImageView) findViewById(R.id.com_facebook_button_xout);
+        }
+        
+        public void showTopArrow() {
+            topArrow.setVisibility(View.VISIBLE);
+            bottomArrow.setVisibility(View.INVISIBLE);
+        }
+        
+        public void showBottomArrow() {
+            topArrow.setVisibility(View.INVISIBLE);
+            bottomArrow.setVisibility(View.VISIBLE);
+        }
+        
+        // Expose so popup content can be sized
+        @Override
+        public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/widget/WebDialog.java b/facebook/src/com/facebook/widget/WebDialog.java
index aaced5ccd..84be24eec 100644
--- a/facebook/src/com/facebook/widget/WebDialog.java
+++ b/facebook/src/com/facebook/widget/WebDialog.java
@@ -140,9 +140,10 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
         parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
 
         parameters.putString(ServerProtocol.DIALOG_PARAM_DISPLAY, DISPLAY_TOUCH);
-        parameters.putString(ServerProtocol.DIALOG_PARAM_TYPE, USER_AGENT);
 
-        Uri uri = Utility.buildUri(ServerProtocol.getDialogAuthority(), ServerProtocol.DIALOG_PATH + action,
+        Uri uri = Utility.buildUri(
+                ServerProtocol.getDialogAuthority(),
+                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
                 parameters);
         this.url = uri.toString();
         onCompleteListener = listener;
@@ -346,6 +347,7 @@ private void setUpWebView(int margin) {
                 ViewGroup.LayoutParams.MATCH_PARENT));
         webView.setVisibility(View.INVISIBLE);
         webView.getSettings().setSavePassword(false);
+        webView.getSettings().setSaveFormData(false);
 
         webViewContainer.setPadding(margin, margin, margin, margin);
         webViewContainer.addView(webView);
@@ -698,7 +700,8 @@ public FeedDialogBuilder setFrom(String id) {
 
         /**
          * Sets the ID of the profile that the story will be published to. If not specified, it
-         * will default to the same profile that the story is being published from.
+         * will default to the same profile that the story is being published from. The ID must be a friend who also
+         * uses your app.
          *
          * @param id Facebook ID of the profile to post to
          * @return the builder
diff --git a/facebook/tests/AndroidManifest.xml b/facebook/tests/AndroidManifest.xml
index 1509af65d..09b8b240b 100644
--- a/facebook/tests/AndroidManifest.xml
+++ b/facebook/tests/AndroidManifest.xml
@@ -19,6 +19,7 @@
         <activity android:name="com.facebook.LoginActivity" />
         <activity android:name="com.facebook.FacebookActivityTests$FacebookTestActivity" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
+        <meta-data android:name="com.facebook.sdk.ClientToken" android:value="@string/client_token"/>
     </application>
     <!--
     This declares that this application uses the instrumentation test runner targeting
diff --git a/facebook/tests/build.gradle b/facebook/tests/build.gradle
index 1a7be02eb..97494f6b4 100644
--- a/facebook/tests/build.gradle
+++ b/facebook/tests/build.gradle
@@ -6,12 +6,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
@@ -19,11 +23,11 @@ android {
             manifest.srcFile 'AndroidManifest.xml'
             java.srcDirs = ['src']
             res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
         }
 
         instrumentTest {
             java.srcDirs = ['src']
-            assets.srcDirs = ['assets']
         }
     }
 }
diff --git a/facebook/tests/res/values/strings.xml b/facebook/tests/res/values/strings.xml
index 05dacbbfd..2331e1e47 100644
--- a/facebook/tests/res/values/strings.xml
+++ b/facebook/tests/res/values/strings.xml
@@ -17,4 +17,5 @@
 
 <resources>
     <string name="app_id">1234567890</string>
+    <string name="client_token">abcdef123456</string>
 </resources>
diff --git a/facebook/tests/src/com/facebook/AccessTokenTests.java b/facebook/tests/src/com/facebook/AccessTokenTests.java
index 09220b0f9..7f4139be9 100644
--- a/facebook/tests/src/com/facebook/AccessTokenTests.java
+++ b/facebook/tests/src/com/facebook/AccessTokenTests.java
@@ -38,19 +38,7 @@
     @LargeTest
     public void testEmptyToken() {
         List<String> permissions = Utility.arrayList();
-        AccessToken token = AccessToken.createEmptyToken(permissions);
-        TestUtils.assertSamePermissions(permissions, token);
-        assertEquals("", token.getToken());
-        assertTrue(token.isInvalid());
-        assertTrue(token.getExpires().before(new Date()));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyTokenWithPermissions() {
-        List<String> permissions = Utility.arrayList("stream_publish");
-        AccessToken token = AccessToken.createEmptyToken(permissions);
+        AccessToken token = AccessToken.createEmptyToken();
         TestUtils.assertSamePermissions(permissions, token);
         assertEquals("", token.getToken());
         assertTrue(token.isInvalid());
@@ -142,6 +130,7 @@ public void testFromNativeLogin() {
     @LargeTest
     public void testCacheRoundtrip() {
         ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
+        ArrayList<String> declinedPermissions = Utility.arrayList("no you may not", "no soup for you");
         String token = "AnImaginaryTokenValue";
         Date later = TestUtils.nowPlusSeconds(60);
         Date earlier = TestUtils.nowPlusSeconds(-60);
@@ -152,6 +141,7 @@ public void testCacheRoundtrip() {
         TokenCachingStrategy.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION_WEB);
         TokenCachingStrategy.putLastRefreshDate(bundle, earlier);
         TokenCachingStrategy.putPermissions(bundle, permissions);
+        TokenCachingStrategy.putDeclinedPermissions(bundle, declinedPermissions);
 
         AccessToken accessToken = AccessToken.createFromCache(bundle);
         TestUtils.assertSamePermissions(permissions, accessToken);
@@ -229,7 +219,7 @@ public void testBasicSerialization() throws IOException {
     @LargeTest
     public void testPermissionsAreImmutable() {
         List<String> permissions = Arrays.asList("go to Jail", "do not pass Go");
-        AccessToken accessToken = new AccessToken("some token", new Date(), permissions,
+        AccessToken accessToken = new AccessToken("some token", new Date(), permissions, null,
                 AccessTokenSource.FACEBOOK_APPLICATION_WEB, new Date());
 
         permissions = accessToken.getPermissions();
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
index 07857df61..f30af6bb7 100644
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ b/facebook/tests/src/com/facebook/AsyncRequestTests.java
@@ -95,7 +95,8 @@ public void testExecuteBatchWithNullRequestThrows() throws Exception {
     @MediumTest
     @LargeTest
     public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
+        final TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel", null, null, new ExpectSuccessCallback() {
             @Override
             protected void performAsserts(Response response) {
                 assertNotNull(response);
@@ -115,7 +116,8 @@ protected void performAsserts(Response response) {
     @MediumTest
     @LargeTest
     public void testExecuteSingleGetUsingHttpURLConnection() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
+        final TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel", null, null, new ExpectSuccessCallback() {
             @Override
             protected void performAsserts(Response response) {
                 assertNotNull(response);
@@ -136,7 +138,8 @@ protected void performAsserts(Response response) {
     @MediumTest
     @LargeTest
     public void testExecuteSingleGetFailureCase() {
-        Request request = new Request(null, "-1", null, null, new ExpectFailureCallback());
+        final TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "-1", null, null, new ExpectFailureCallback());
 
         TestRequestAsyncTask task = new TestRequestAsyncTask(request);
 
diff --git a/facebook/tests/src/com/facebook/AuthorizationClientTests.java b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
index 0a96adf35..f931578dd 100644
--- a/facebook/tests/src/com/facebook/AuthorizationClientTests.java
+++ b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
@@ -229,110 +229,6 @@ public void testGetTokenHandlesNoResult() {
         assertEquals(PERMISSIONS.size(), request.getPermissions().size());
     }
 
-    // KatanaLoginDialogAuthHandler tests
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putStringArrayList(NativeProtocol.EXTRA_PERMISSIONS, PERMISSIONS);
-        bundle.putLong(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, new Date().getTime() / 1000 + EXPIRES_IN_DELTA);
-        bundle.putString(NativeProtocol.EXTRA_ACCESS_TOKEN, ACCESS_TOKEN);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        assertEquals(PERMISSIONS, token.getPermissions());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesCancel() {
-        Bundle bundle = new Bundle();
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_USER_CANCELED);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.CANCEL, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNull(token);
-        assertNull(client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesError() {
-        Bundle bundle = new Bundle();
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, ERROR_MESSAGE);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.ERROR, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNull(token);
-        assertNotNull(client.result.errorMessage);
-        assertEquals(ERROR_MESSAGE, client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesDisabled() {
-        Bundle bundle = new Bundle();
-        bundle.putInt(NativeProtocol.EXTRA_PROTOCOL_VERSION, NativeProtocol.PROTOCOL_VERSION_20121101);
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_SERVICE_DISABLED);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNull(client.result);
-        assertTrue(client.triedNextHandler);
-    }
-
     // KatanaProxyAuthHandler tests
 
     @SmallTest
@@ -469,7 +365,7 @@ public Response createResponse() {
                     String fbid = mapAccessTokenToFbid.get(accessToken);
                     GraphUser user = GraphObject.Factory.create(GraphUser.class);
                     user.setId(fbid);
-                    return new Response(this, null, user, false);
+                    return new Response(this, null, null, user, false);
                 }
             };
         }
@@ -492,7 +388,7 @@ public Response createResponse() {
                     GraphMultiResult result = GraphObject.Factory.create(GraphMultiResult.class);
                     result.setProperty("data", data);
 
-                    return new Response(this, null, result, false);
+                    return new Response(this, null, null, result, false);
                 }
             };
         }
@@ -544,7 +440,9 @@ public void testReauthorizationWithSameFbidSucceeds() throws Exception {
         AccessToken resultToken = client.result.token;
         assertNotNull(resultToken);
         assertEquals(USER_1_ACCESS_TOKEN, resultToken.getToken());
-        assertEquals(PERMISSIONS, resultToken.getPermissions());
+
+        // We don't care about ordering.
+        assertEquals(new HashSet<String>(PERMISSIONS), new HashSet<String>(resultToken.getPermissions()));
     }
 
     @MediumTest
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
index 7a863649f..d75d31ab5 100644
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ b/facebook/tests/src/com/facebook/BatchRequestTests.java
@@ -40,6 +40,11 @@ protected void setUp() throws Exception {
         Request.setDefaultBatchApplicationId(null);
     }
 
+    protected String[] getPermissionsForDefaultTestSession()
+    {
+        return new String[] { "email", "publish_actions", "read_stream" };
+    };
+
     @SmallTest
     @MediumTest
     @LargeTest
@@ -89,12 +94,12 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
         // ensures that paths passed to batch requests are encoded properly before
         // we send it up to the server
 
-        setBatchApplicationIdForTestApp();
+        TestSession session = openTestSessionWithSharedUser();
 
-        Request request1 = new Request(null, "TourEiffel");
+        Request request1 = new Request(session, "TourEiffel");
         request1.setBatchEntryName("eiffel");
         request1.setBatchEntryOmitResultOnSuccess(false);
-        Request request2 = new Request(null, "{result=eiffel:$.id}");
+        Request request2 = new Request(session, "{result=eiffel:$.id}");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertEquals(2, responses.size());
@@ -113,10 +118,10 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
     @MediumTest
     @LargeTest
     public void testExecuteBatchedGets() throws IOException {
-        setBatchApplicationIdForTestApp();
+        TestSession session = openTestSessionWithSharedUser();
 
-        Request request1 = new Request(null, "TourEiffel");
-        Request request2 = new Request(null, "SpaceNeedle");
+        Request request1 = new Request(session, "TourEiffel");
+        Request request2 = new Request(session, "SpaceNeedle");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertEquals(2, responses.size());
@@ -160,8 +165,10 @@ public void testBatchPostStatusUpdate() {
 
         Request postRequest1 = Request.newPostRequest(session, "me/feed", statusUpdate1, null);
         postRequest1.setBatchEntryName("postRequest1");
+        postRequest1.setBatchEntryOmitResultOnSuccess(false);
         Request postRequest2 = Request.newPostRequest(session, "me/feed", statusUpdate2, null);
         postRequest2.setBatchEntryName("postRequest2");
+        postRequest2.setBatchEntryOmitResultOnSuccess(false);
         Request getRequest1 = new Request(session, "{result=postRequest1:$.id}");
         Request getRequest2 = new Request(session, "{result=postRequest2:$.id}");
 
@@ -207,7 +214,7 @@ public void testBatchWithValidSessionAndNoSession() {
         TestSession session = openTestSessionWithSharedUser();
 
         Request request1 = new Request(session, "me");
-        Request request2 = new Request(null, "zuck");
+        Request request2 = new Request(null, "me");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertNotNull(responses);
@@ -217,18 +224,16 @@ public void testBatchWithValidSessionAndNoSession() {
         GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
 
         assertNotNull(user1);
-        assertNotNull(user2);
+        assertNull(user2);
 
-        assertFalse(user1.getId().equals(user2.getId()));
         assertEquals(session.getTestUserId(), user1.getId());
-        assertEquals("4", user2.getId());
     }
 
     @LargeTest
     public void testBatchWithNoSessionAndValidSession() {
         TestSession session = openTestSessionWithSharedUser();
 
-        Request request1 = new Request(null, "zuck");
+        Request request1 = new Request(null, "me");
         Request request2 = new Request(session, "me");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
@@ -238,11 +243,9 @@ public void testBatchWithNoSessionAndValidSession() {
         GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
         GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
 
-        assertNotNull(user1);
+        assertNull(user1);
         assertNotNull(user2);
 
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals("4", user1.getId());
         assertEquals(session.getTestUserId(), user2.getId());
     }
 
@@ -252,8 +255,8 @@ public void testBatchWithTwoSessionlessRequestsAndDefaultAppID() {
         String appId = session.getApplicationId();
         Request.setDefaultBatchApplicationId(appId);
 
-        Request request1 = new Request(null, "zuck");
-        Request request2 = new Request(null, "zuck");
+        Request request1 = new Request(null, "me");
+        Request request2 = new Request(null, "me");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertNotNull(responses);
@@ -262,11 +265,8 @@ public void testBatchWithTwoSessionlessRequestsAndDefaultAppID() {
         GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
         GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
 
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertEquals("4", user1.getId());
-        assertEquals("4", user2.getId());
+        assertNull(user1);
+        assertNull(user2);
     }
 
     @LargeTest
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
index ad2753abe..c0afc8c73 100644
--- a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
+++ b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
@@ -25,6 +25,7 @@
 import android.os.Handler;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
+import com.facebook.android.Util;
 import com.facebook.model.GraphObject;
 import com.facebook.internal.Utility;
 import junit.framework.AssertionFailedError;
@@ -45,6 +46,7 @@
 
     private static String applicationId;
     private static String applicationSecret;
+    private static String clientToken;
 
     public final static String SECOND_TEST_USER_TAG = "Second";
     public final static String THIRD_TEST_USER_TAG = "Third";
@@ -62,6 +64,8 @@ public FacebookActivityTestCase(Class<T> activityClass) {
         super("", activityClass);
     }
 
+    protected String[] getPermissionsForDefaultTestSession() { return null; };
+
     // Returns an un-opened TestSession
     protected TestSession getTestSessionWithSharedUser() {
         return getTestSessionWithSharedUser(null);
@@ -97,7 +101,7 @@ protected TestSession openTestSessionWithSharedUser() {
     }
 
     protected TestSession openTestSessionWithSharedUser(String sessionUniqueUserTag) {
-        return openTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, (String[]) null);
+        return openTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, getPermissionsForDefaultTestSession());
     }
 
     protected TestSession openTestSessionWithSharedUserAndPermissions(String sessionUniqueUserTag,
@@ -151,11 +155,11 @@ public void run() {
 
     protected synchronized void readApplicationIdAndSecret() {
         synchronized (FacebookTestCase.class) {
-            if (applicationId != null && applicationSecret != null) {
+            if (applicationId != null && applicationSecret != null && clientToken != null) {
                 return;
             }
 
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
+            AssetManager assets = getActivity().getResources().getAssets();
             InputStream stream = null;
             final String errorMessage = "could not read applicationId and applicationSecret from config.json; ensure "
                     + "you have run 'configure_unit_tests.sh'. Error: ";
@@ -172,9 +176,11 @@ protected synchronized void readApplicationIdAndSecret() {
 
                 applicationId = jsonObject.optString("applicationId");
                 applicationSecret = jsonObject.optString("applicationSecret");
+                clientToken = jsonObject.optString("clientToken");
 
-                if (Utility.isNullOrEmpty(applicationId) || Utility.isNullOrEmpty(applicationSecret)) {
-                    fail(errorMessage + "one or both config values are missing");
+                if (Utility.isNullOrEmpty(applicationId) || Utility.isNullOrEmpty(applicationSecret) ||
+                        Utility.isNullOrEmpty(clientToken)) {
+                    fail(errorMessage + "config values are missing");
                 }
 
                 TestSession.setTestApplicationId(applicationId);
@@ -230,6 +236,9 @@ protected void setUp() throws Exception {
         // Make sure we have read application ID and secret.
         readApplicationIdAndSecret();
 
+        Settings.setApplicationId(applicationId);
+        Settings.setClientToken(clientToken);
+
         // These are useful for debugging unit test failures.
         Settings.addLoggingBehavior(LoggingBehavior.REQUESTS);
         Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
@@ -385,7 +394,7 @@ protected File createTempFileFromAsset(String assetPath) throws IOException {
         FileOutputStream outStream = null;
 
         try {
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
+            AssetManager assets = getActivity().getResources().getAssets();
             inputStream = assets.open(assetPath);
 
             File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
diff --git a/facebook/tests/src/com/facebook/FacebookAppLinkResolverTests.java b/facebook/tests/src/com/facebook/FacebookAppLinkResolverTests.java
new file mode 100644
index 000000000..2aca415ad
--- /dev/null
+++ b/facebook/tests/src/com/facebook/FacebookAppLinkResolverTests.java
@@ -0,0 +1,205 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.net.Uri;
+import android.os.Handler;
+import android.test.AndroidTestCase;
+import bolts.AppLink;
+import bolts.Continuation;
+import bolts.Task;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FacebookAppLinkResolverTests extends FacebookTestCase {
+    private Task resolveTask;
+
+    public void testSingleUrl() {
+        String testUrlString = "https://fb.me/732873156764191";
+        Uri testUrl = Uri.parse(testUrlString);
+        Uri testWebUri = Uri.parse("http://www.facebook.com/");
+        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
+        testTargets.add(new AppLink.Target(
+                "com.myapp",
+                null,
+                Uri.parse("myapp://3"),
+                "my app"));
+        testTargets.add(new AppLink.Target(
+                "com.myapp-test",
+                null,
+                Uri.parse("myapp-test://4"),
+                "my test app"));
+        try {
+            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testUrl);
+
+            getTestBlocker().waitForSignals(1);
+
+            assertNotNull(resolveTask);
+
+            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
+
+            assertTrue(singleUrlResolveTask.isCompleted() &&
+                    !singleUrlResolveTask.isCancelled() &&
+                    !singleUrlResolveTask.isFaulted());
+
+            AppLink appLink = singleUrlResolveTask.getResult();
+
+            assertEquals(appLink.getSourceUrl(), testUrl);
+            assertEquals(appLink.getWebUrl(), testWebUri);
+            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
+        } catch (Exception e) {
+            // Forcing the test to fail with details
+            assertNull(e);
+        }
+    }
+
+    public void testUrlWithNoAppLinkData() {
+        String testNoAppLinkUrlString = "https://fb.me/732873156764191_no_app_link";
+        Uri testNoAppLinkUrl = Uri.parse(testNoAppLinkUrlString);
+        try {
+            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testNoAppLinkUrl);
+
+            getTestBlocker().waitForSignals(1);
+
+            assertNotNull(resolveTask);
+
+            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
+
+            assertTrue(singleUrlResolveTask.isCompleted() &&
+                    !singleUrlResolveTask.isCancelled() &&
+                    !singleUrlResolveTask.isFaulted());
+
+            AppLink appLink = singleUrlResolveTask.getResult();
+            assertNull(appLink);
+        } catch (Exception e) {
+            // Forcing the test to fail with details
+            assertNull(e);
+        }
+    }
+
+    public void testCachedAppLinkData() {
+        String testUrlString = "https://fb.me/732873156764191";
+        Uri testUrl = Uri.parse(testUrlString);
+        Uri testWebUri = Uri.parse("http://www.facebook.com/");
+        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
+        testTargets.add(new AppLink.Target(
+                "com.myapp",
+                null,
+                Uri.parse("myapp://3"),
+                "my app"));
+        testTargets.add(new AppLink.Target(
+                "com.myapp-test",
+                null,
+                Uri.parse("myapp-test://4"),
+                "my test app"));
+
+        try {
+            FacebookAppLinkResolver resolver = new FacebookAppLinkResolver();
+
+            // This will prefetch the app link
+            executeResolverOnBlockerThread(resolver, testUrl);
+            getTestBlocker().waitForSignals(1);
+            assertNotNull(resolveTask);
+
+            // Now let's fetch it again. This should complete the task synchronously.
+            Task<AppLink> cachedUrlResolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
+
+            assertTrue(cachedUrlResolveTask.isCompleted() &&
+                    !cachedUrlResolveTask.isCancelled() &&
+                    !cachedUrlResolveTask.isFaulted());
+
+            AppLink appLink = cachedUrlResolveTask.getResult();
+
+            assertEquals(appLink.getSourceUrl(), testUrl);
+            assertEquals(appLink.getWebUrl(), testWebUri);
+            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
+        } catch (Exception e) {
+            // Forcing the test to fail with details
+            assertNull(e);
+        }
+    }
+
+    public void executeResolverOnBlockerThread(final FacebookAppLinkResolver resolver, final Uri testUrl) {
+        final TestBlocker blocker = getTestBlocker();
+        Runnable runnable = new Runnable() {
+            public void run() {
+                try {
+                    resolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
+                    resolveTask.continueWith(new Continuation() {
+                        @Override
+                        public Object then(Task task) throws Exception {
+                            // Once the task is complete, unblock the test thread, so it can inspect for errors/results.
+                            blocker.signal();
+                            return null;
+                        }
+                    });
+                } catch (Exception e) {
+                    // Get back to the test case if there was an uncaught exception
+                    blocker.signal();
+                }
+            }
+        };
+
+        Handler handler = new Handler(blocker.getLooper());
+        handler.post(runnable);
+    }
+
+    private static boolean targetListsAreEqual(List<AppLink.Target> list1, List<AppLink.Target> list2) {
+        if (list1 == null) {
+            return list2 == null;
+        } else if (list2 == null || list1.size() != list2.size()) {
+            return false;
+        }
+
+        ArrayList<AppLink.Target> list2Copy = new ArrayList<AppLink.Target>(list2);
+
+        for(int i = 0; i < list1.size(); i++) {
+            int j;
+            for (j = 0; j < list2Copy.size(); j++) {
+                if (targetsAreEqual(list1.get(i), list2Copy.get(j))) {
+                    break;
+                }
+            }
+
+            if (j < list2Copy.size()) {
+                // Found a match. Remove from the copy to make sure the same target isn't matched twice.
+                list2Copy.remove(j);
+            } else {
+                // Match not found
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private static boolean targetsAreEqual(AppLink.Target target1, AppLink.Target target2) {
+        boolean isEqual =
+                objectsAreEqual(target1.getPackageName(), target2.getPackageName()) &&
+                objectsAreEqual(target1.getClassName(), target2.getClassName()) &&
+                objectsAreEqual(target1.getAppName(), target2.getAppName()) &&
+                objectsAreEqual(target1.getUrl(), target2.getUrl()) ;
+
+        return isEqual;
+    }
+
+    private static boolean objectsAreEqual(Object s1, Object s2) {
+        return s1 == null
+                ? s2 == null
+                : s1.equals(s2);
+    }
+}
diff --git a/facebook/tests/src/com/facebook/GraphRequestTests.java b/facebook/tests/src/com/facebook/GraphRequestTests.java
index 5ff2a975d..7157823c3 100644
--- a/facebook/tests/src/com/facebook/GraphRequestTests.java
+++ b/facebook/tests/src/com/facebook/GraphRequestTests.java
@@ -25,6 +25,11 @@
 // to the underlying request/batch plumbing.
 public class GraphRequestTests extends FacebookTestCase {
 
+    protected String[] getPermissionsForDefaultTestSession()
+    {
+        return new String[] { "email", "publish_actions", "read_stream" };
+    };
+
     @LargeTest
     public void testCommentRoundTrip() {
         TestSession session = openTestSessionWithSharedUser();
@@ -60,31 +65,4 @@ public void testCommentRoundTrip() {
         assertNotNull(comment2Message);
         assertEquals(commentMessage, comment2Message);
     }
-
-    @LargeTest
-    public void testEventRoundTrip() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "create_event");
-
-        GraphObject event = GraphObject.Factory.create();
-        // Android emulators tend to not have the right date/time. To avoid issues with posting events in the past
-        // or too far in the future, we use a constant year. This test will break in 2030, angering our robot overlords.
-        Date startTime = new Date(130, 2, 17, 12, 34, 56);
-        event.setProperty("name", "My awesome St. Patrick's Day party on " + startTime.toString());
-        final String eventDescription = "This is a great event. You should all come.";
-        event.setProperty("description", eventDescription);
-        Date endTime = new Date(startTime.getTime() + 3600 * 1000);
-        event.setProperty("start_time", startTime);
-        event.setProperty("end_time", endTime);
-        event.setProperty("location", "My house");
-
-        GraphObject event1 = batchCreateAndGet(session, "me/events", event, null, GraphObject.class);
-        assertNotNull(event1);
-        assertEquals(eventDescription, event1.getProperty("description"));
-
-        event1.removeProperty("id");
-        GraphObject event2 = batchCreateAndGet(session, "me/events", event1, null, GraphObject.class);
-        assertNotNull(event2);
-        assertEquals(eventDescription, event2.getProperty("description"));
-    }
-
 }
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
index bdb34a78b..99da7ab6d 100644
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ b/facebook/tests/src/com/facebook/RequestTests.java
@@ -23,6 +23,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.internal.ServerProtocol;
 import com.facebook.model.*;
 
 import java.io.File;
@@ -37,6 +38,11 @@
 public class RequestTests extends FacebookTestCase {
     private final static String TEST_OG_TYPE = "facebooksdktests:test";
 
+    protected String[] getPermissionsForDefaultTestSession()
+    {
+        return new String[] { "email", "publish_actions", "read_stream" };
+    };
+
     @SmallTest
     @MediumTest
     @LargeTest
@@ -343,7 +349,7 @@ public void testSingleGetToHttpRequest() throws Exception {
         assertTrue(connection != null);
 
         assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/TourEiffel", connection.getURL().getPath());
+        assertEquals("/" + ServerProtocol.getAPIVersion() + "/TourEiffel", connection.getURL().getPath());
 
         assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
 
@@ -352,15 +358,33 @@ public void testSingleGetToHttpRequest() throws Exception {
         assertEquals("json", uri.getQueryParameter("format"));
     }
 
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testBuildsClientTokenIfNeeded() throws Exception {
+        Request requestMe = new Request(null, "TourEiffel");
+        HttpURLConnection connection = Request.toHttpConnection(requestMe);
+
+        assertTrue(connection != null);
+
+        Uri uri = Uri.parse(connection.getURL().toString());
+        String accessToken = uri.getQueryParameter("access_token");
+        assertNotNull(accessToken);
+        assertTrue(accessToken.contains(Settings.getApplicationId()));
+        assertTrue(accessToken.contains(Settings.getClientToken()));
+    }
+
     @MediumTest
     @LargeTest
     public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel");
+        TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel");
         Response response = request.executeAndWait();
 
         assertTrue(response != null);
         assertTrue(response.getError() == null);
         assertTrue(response.getGraphObject() != null);
+        assertNotNull(response.getRawResponse());
 
         GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
         assertEquals("Paris", graphPlace.getLocation().getCity());
@@ -369,7 +393,8 @@ public void testExecuteSingleGet() {
     @MediumTest
     @LargeTest
     public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
-        Request request = new Request(null, "TourEiffel");
+        TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel");
         HttpURLConnection connection = Request.toHttpConnection(request);
 
         List<Response> responses = Request.executeConnectionAndWait(connection, Arrays.asList(new Request[]{request}));
@@ -381,6 +406,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
         assertTrue(response != null);
         assertTrue(response.getError() == null);
         assertTrue(response.getGraphObject() != null);
+        assertNotNull(response.getRawResponse());
 
         GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
         assertEquals("Paris", graphPlace.getLocation().getCity());
@@ -388,7 +414,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
         // Make sure calling code can still access HTTP headers and call disconnect themselves.
         int code = connection.getResponseCode();
         assertEquals(200, code);
-        assertTrue(connection.getHeaderFields().keySet().contains("Content-Length"));
+        assertTrue(connection.getHeaderFields().keySet().contains("Content-Type"));
         connection.disconnect();
     }
 
@@ -458,6 +484,7 @@ static void validateMeResponse(TestSession session, Response response) {
         GraphUser me = response.getGraphObjectAs(GraphUser.class);
         assertNotNull(me);
         assertEquals(session.getTestUserId(), me.getId());
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -481,6 +508,8 @@ static void validateMyFriendsResponse(TestSession session, Response response) {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -503,6 +532,8 @@ public void testExecutePlaceRequestWithLocation() {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -522,6 +553,8 @@ public void testExecutePlaceRequestWithSearchText() {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -544,6 +577,8 @@ public void testExecutePlaceRequestWithLocationAndSearchText() {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     private String executePostOpenGraphRequest() {
@@ -563,6 +598,8 @@ private String executePostOpenGraphRequest() {
         assertNotNull(graphResult);
         assertNotNull(graphResult.getProperty("id"));
 
+        assertNotNull(response.getRawResponse());
+
         return (String) graphResult.getProperty("id");
     }
 
@@ -586,6 +623,7 @@ public void testDeleteObjectRequest() {
         assertNotNull(result);
 
         assertTrue((Boolean) result.getProperty(Response.NON_JSON_RESPONSE_PROPERTY));
+        assertNotNull(response.getRawResponse());
     }
 
     @LargeTest
@@ -605,6 +643,7 @@ public void testUpdateOpenGraphObjectRequest() {
 
         GraphObject result = response.getGraphObject();
         assertNotNull(result);
+        assertNotNull(response.getRawResponse());
     }
 
     @LargeTest
@@ -620,6 +659,7 @@ public void testExecuteUploadPhoto() {
 
         GraphObject result = response.getGraphObject();
         assertNotNull(result);
+        assertNotNull(response.getRawResponse());
     }
 
     @LargeTest
@@ -647,6 +687,7 @@ public void testExecuteUploadPhotoViaFile() throws IOException {
 
             GraphObject result = response.getGraphObject();
             assertNotNull(result);
+            assertNotNull(response.getRawResponse());
         } finally {
             if (outStream != null) {
                 outStream.close();
@@ -672,6 +713,7 @@ public void testUploadVideoFile() throws IOException, URISyntaxException {
 
             GraphObject result = response.getGraphObject();
             assertNotNull(result);
+            assertNotNull(response.getRawResponse());
         } catch (Exception ex) {
             return;
         } finally {
@@ -712,6 +754,8 @@ public void testRestMethodGetUser() {
         GraphObject user = graphObjects.get(0);
         assertNotNull(user);
         assertEquals(testUserId, user.getProperty("uid").toString());
+
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
diff --git a/facebook/tests/src/com/facebook/SessionTests.java b/facebook/tests/src/com/facebook/SessionTests.java
index 3f5a9f6a6..331152c4c 100644
--- a/facebook/tests/src/com/facebook/SessionTests.java
+++ b/facebook/tests/src/com/facebook/SessionTests.java
@@ -580,7 +580,7 @@ public void testOpenWithAccessToken() {
         session.open(accessToken, statusRecorder);
         statusRecorder.waitForCall(session, SessionState.OPENED, null);
 
-        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions,
+        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions, null,
                 AccessTokenSource.FACEBOOK_APPLICATION_WEB, lastRefreshDate);
         verifySessionHasToken(session, expectedToken);
 
diff --git a/facebook/tests/src/com/facebook/SettingsTests.java b/facebook/tests/src/com/facebook/SettingsTests.java
index 435de6d40..a96c25347 100644
--- a/facebook/tests/src/com/facebook/SettingsTests.java
+++ b/facebook/tests/src/com/facebook/SettingsTests.java
@@ -17,7 +17,6 @@
 package com.facebook;
 
 import android.os.ConditionVariable;
-import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
@@ -27,7 +26,7 @@
 import java.io.IOException;
 import java.util.concurrent.Executor;
 
-public final class SettingsTests extends AndroidTestCase {
+public final class SettingsTests extends FacebookTestCase {
 
     @SmallTest @MediumTest @LargeTest
     public void testGetExecutor() {
@@ -99,4 +98,26 @@ public void testFacebookDomain() {
 
         Settings.setFacebookDomain("facebook.com");
     }
+
+    @SmallTest @MediumTest @LargeTest
+    public void testLoadDefaults() {
+        Settings.setApplicationId(null);
+        Settings.setClientToken(null);
+
+        Settings.loadDefaultsFromMetadata(getActivity());
+
+        assertEquals("1234567890", Settings.getApplicationId());
+        assertEquals("abcdef123456", Settings.getClientToken());
+    }
+
+    @SmallTest @MediumTest @LargeTest
+    public void testLoadDefaultsDoesNotOverwrite() {
+        Settings.setApplicationId("hello");
+        Settings.setClientToken("world");
+
+        Settings.loadDefaultsFromMetadata(getActivity());
+
+        assertEquals("hello", Settings.getApplicationId());
+        assertEquals("world", Settings.getClientToken());
+    }
 }
diff --git a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
index a00e90083..444d48836 100644
--- a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
+++ b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
@@ -17,6 +17,7 @@
 package com.facebook.widget;
 
 import android.graphics.Bitmap;
+import com.facebook.FacebookException;
 import com.facebook.FacebookTestCase;
 import com.facebook.model.GraphObject;
 import com.facebook.model.OpenGraphAction;
@@ -24,6 +25,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -254,6 +256,5 @@ public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionTypeMat
             fail("expected exception");
         } catch (IllegalArgumentException exception) {
         }
-
     }
 }
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 000000000..a18bb5cb5
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,4 @@
+ANDROID_BUILD_MIN_SDK_VERSION=8
+ANDROID_BUILD_TARGET_SDK_VERSION=19
+ANDROID_BUILD_TOOLS_VERSION=19.1.0
+ANDROID_BUILD_SDK_VERSION=19
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 75b72d4da..23bdf0c69 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Feb 05 10:18:08 PST 2014
+#Tue Jun 17 21:31:41 PDT 2014
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.9-all.zip
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-all.zip
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
index cf12d2839..c31cede47 100644
Binary files a/libs/android-support-v4.jar and b/libs/android-support-v4.jar differ
diff --git a/libs/bolts.jar b/libs/bolts.jar
new file mode 100644
index 000000000..9a9a1e94b
Binary files /dev/null and b/libs/bolts.jar differ
diff --git a/samples/FriendPickerSample/build.gradle b/samples/FriendPickerSample/build.gradle
index a2cda0280..b76fed903 100644
--- a/samples/FriendPickerSample/build.gradle
+++ b/samples/FriendPickerSample/build.gradle
@@ -5,12 +5,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/FriendPickerSample/res/values/strings.xml b/samples/FriendPickerSample/res/values/strings.xml
index 747f98078..863108c2a 100644
--- a/samples/FriendPickerSample/res/values/strings.xml
+++ b/samples/FriendPickerSample/res/values/strings.xml
@@ -20,4 +20,7 @@
     <string name="app_id">370546396320150</string>
     <string name="exception">Exception: %1$s</string>
     <string name="ok_button">OK</string>
+    <string name="need_perms_alert_text">In order to pick your friends you need to accept all the permissions on the following page.</string>
+    <string name="need_perms_alert_button_ok">OK</string>
+    <string name="need_perms_alert_button_quit">Quit</string>
 </resources>
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
index 1c8ec2b62..478bd7a5d 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
@@ -16,6 +16,8 @@
 
 package com.facebook.samples.friendpicker;
 
+import android.app.AlertDialog;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
@@ -23,7 +25,9 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.TextView;
+
 import com.facebook.AppEventsLogger;
+import com.facebook.Session.NewPermissionsRequest;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 import com.facebook.model.GraphUser;
@@ -31,8 +35,15 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 
 public class FriendPickerSampleActivity extends FragmentActivity {
+    private static final List<String> PERMISSIONS = new ArrayList<String>() {
+        {
+            add("user_friends");
+            add("public_profile");
+        }
+    };
     private static final int PICK_FRIENDS_ACTIVITY = 1;
     private Button pickFriendsButton;
     private TextView resultsTextView;
@@ -94,19 +105,70 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     private boolean ensureOpenSession() {
         if (Session.getActiveSession() == null ||
                 !Session.getActiveSession().isOpened()) {
-            Session.openActiveSession(this, true, new Session.StatusCallback() {
-                @Override
-                public void call(Session session, SessionState state, Exception exception) {
-                    onSessionStateChanged(session, state, exception);
-                }
-            });
+            Session.openActiveSession(
+                    this, 
+                    true, 
+                    PERMISSIONS,
+                    new Session.StatusCallback() {
+                        @Override
+                        public void call(Session session, SessionState state, Exception exception) {
+                            onSessionStateChanged(session, state, exception);
+                        }
+                    });
             return false;
         }
         return true;
     }
+    
+    private boolean sessionHasNecessaryPerms(Session session) {
+        if (session != null && session.getPermissions() != null) {
+            for (String requestedPerm : PERMISSIONS) {
+                if (!session.getPermissions().contains(requestedPerm)) {
+                    return false;
+                }
+            }
+            return true;
+        }
+        return false;
+    }
+    
+    private List<String> getMissingPermissions(Session session) {
+        List<String> missingPerms = new ArrayList<String>(PERMISSIONS);
+        if (session != null && session.getPermissions() != null) {
+            for (String requestedPerm : PERMISSIONS) {
+                if (session.getPermissions().contains(requestedPerm)) {
+                    missingPerms.remove(requestedPerm);
+                }
+            }
+        }
+        return missingPerms;
+    }
 
-    private void onSessionStateChanged(Session session, SessionState state, Exception exception) {
-        if (pickFriendsWhenSessionOpened && state.isOpened()) {
+    private void onSessionStateChanged(final Session session, SessionState state, Exception exception) {
+        if (state.isOpened() && !sessionHasNecessaryPerms(session)) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setMessage(R.string.need_perms_alert_text);
+            builder.setPositiveButton(
+                    R.string.need_perms_alert_button_ok, 
+                    new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            session.requestNewReadPermissions(
+                                    new NewPermissionsRequest(
+                                            FriendPickerSampleActivity.this, 
+                                            getMissingPermissions(session)));
+                        }
+                    });
+            builder.setNegativeButton(
+                    R.string.need_perms_alert_button_quit,
+                    new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            finish();
+                        }
+                    });
+            builder.show();
+        } else if (pickFriendsWhenSessionOpened && state.isOpened()) {
             pickFriendsWhenSessionOpened = false;
 
             startPickFriendsActivity();
diff --git a/samples/GraphApiSample/.classpath b/samples/GraphApiSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/GraphApiSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/GraphApiSample/.project b/samples/GraphApiSample/.project
deleted file mode 100644
index ff735cf87..000000000
--- a/samples/GraphApiSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>GraphApiSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/GraphApiSample/AndroidManifest.xml b/samples/GraphApiSample/AndroidManifest.xml
deleted file mode 100644
index 3647ce9a0..000000000
--- a/samples/GraphApiSample/AndroidManifest.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.samples.graphapi"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-
-    <application
-        android:icon="@drawable/icon"
-        android:label="@string/app_name" >
-        <activity
-            android:name=".GraphApiSampleActivity"
-            android:label="@string/app_name"
-            android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-    </application>
-
-</manifest>
diff --git a/samples/GraphApiSample/ant.properties b/samples/GraphApiSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/GraphApiSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/GraphApiSample/build.gradle b/samples/GraphApiSample/build.gradle
deleted file mode 100644
index a2cda0280..000000000
--- a/samples/GraphApiSample/build.gradle
+++ /dev/null
@@ -1,23 +0,0 @@
-apply plugin: 'android'
-
-dependencies {
-    compile project(':facebook')
-}
-
-android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-}
diff --git a/samples/GraphApiSample/build.xml b/samples/GraphApiSample/build.xml
deleted file mode 100644
index b2456a58c..000000000
--- a/samples/GraphApiSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="GraphApiSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env" />
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME" />
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/samples/GraphApiSample/proguard-project.txt b/samples/GraphApiSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/GraphApiSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/GraphApiSample/project.properties b/samples/GraphApiSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/GraphApiSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/GraphApiSample/res/drawable-hdpi/icon.png b/samples/GraphApiSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index a888af1c6..000000000
Binary files a/samples/GraphApiSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable-mdpi/icon.png b/samples/GraphApiSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 2275c8571..000000000
Binary files a/samples/GraphApiSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable-xhdpi/icon.png b/samples/GraphApiSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 31201f160..000000000
Binary files a/samples/GraphApiSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable/icon.png b/samples/GraphApiSample/res/drawable/icon.png
deleted file mode 100644
index 2275c8571..000000000
Binary files a/samples/GraphApiSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/layout/main.xml b/samples/GraphApiSample/res/layout/main.xml
deleted file mode 100644
index 8ebf7e229..000000000
--- a/samples/GraphApiSample/res/layout/main.xml
+++ /dev/null
@@ -1,44 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <EditText
-        android:id="@+id/editRequests"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:ems="10" >
-
-        <requestFocus />
-    </EditText>
-
-    <Button
-        android:id="@+id/buttonRequest"
-        android:layout_width="122dp"
-        android:layout_height="wrap_content"
-        android:text="@string/request" />
-
-    <TextView
-        android:id="@+id/textViewResults"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textAppearance="?android:attr/textAppearanceLarge" />
-
-</LinearLayout>
diff --git a/samples/GraphApiSample/res/values/strings.xml b/samples/GraphApiSample/res/values/strings.xml
deleted file mode 100644
index 025d17499..000000000
--- a/samples/GraphApiSample/res/values/strings.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-
-    <string name="hello">Hello World, GraphApiSampleActivity!</string>
-    <string name="app_name">GraphApiSample</string>
-    <string name="request">Request</string>
-    <string name="instructions">Login to create a link to fetch account data</string>
-    <string name="logout">Log out</string>
-    <string name="login_failed_dialog_title">Login failed</string>
-    <string name="ok_button">OK</string>
-
-</resources>
diff --git a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java b/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
deleted file mode 100644
index 444926c02..000000000
--- a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.graphapi;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import com.facebook.*;
-import com.facebook.Session.StatusCallback;
-import com.facebook.model.GraphObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class GraphApiSampleActivity extends Activity {
-    static final String APP_ID = "307234779396415";
-    static final String PENDING_REQUEST_BUNDLE_KEY = "com.facebook.samples.graphapi:PendingRequest";
-
-    Button buttonRequest;
-    EditText editRequests;
-    TextView textViewResults;
-    Session session;
-    boolean pendingRequest;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        this.buttonRequest = (Button) findViewById(R.id.buttonRequest);
-        this.buttonRequest.setOnClickListener(new OnClickListener() {
-            public void onClick(View view) {
-                onClickRequest();
-            }
-        });
-        this.editRequests = (EditText) findViewById(R.id.editRequests);
-        this.textViewResults = (TextView) findViewById(R.id.textViewResults);
-
-        this.session = createSession();
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-    }
-
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (this.session.onActivityResult(this, requestCode, resultCode, data) &&
-                pendingRequest &&
-                this.session.getState().isOpened()) {
-            sendRequests();
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
-        // the onResume methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.activateApp(this, APP_ID);
-    }
-
-    @Override
-    protected void onRestoreInstanceState(Bundle savedInstanceState) {
-        super.onRestoreInstanceState(savedInstanceState);
-
-        pendingRequest = savedInstanceState.getBoolean(PENDING_REQUEST_BUNDLE_KEY, pendingRequest);
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        outState.putBoolean(PENDING_REQUEST_BUNDLE_KEY, pendingRequest);
-    }
-
-    private void onClickRequest() {
-        if (this.session.isOpened()) {
-            sendRequests();
-        } else {
-            StatusCallback callback = new StatusCallback() {
-                public void call(Session session, SessionState state, Exception exception) {
-                    if (exception != null) {
-                        new AlertDialog.Builder(GraphApiSampleActivity.this)
-                                .setTitle(R.string.login_failed_dialog_title)
-                                .setMessage(exception.getMessage())
-                                .setPositiveButton(R.string.ok_button, null)
-                                .show();
-                        GraphApiSampleActivity.this.session = createSession();
-                    }
-                }
-            };
-            pendingRequest = true;
-            this.session.openForRead(new Session.OpenRequest(this).setCallback(callback));
-        }
-    }
-
-    private void sendRequests() {
-        textViewResults.setText("");
-
-        String requestIdsText = editRequests.getText().toString();
-        String[] requestIds = requestIdsText.split(",");
-
-        List<Request> requests = new ArrayList<Request>();
-        for (final String requestId : requestIds) {
-            requests.add(new Request(session, requestId, null, null, new Request.Callback() {
-                public void onCompleted(Response response) {
-                    GraphObject graphObject = response.getGraphObject();
-                    FacebookRequestError error = response.getError();
-                    String s = textViewResults.getText().toString();
-                    if (graphObject != null) {
-                        if (graphObject.getProperty("id") != null) {
-                            s = s + String.format("%s: %s\n", graphObject.getProperty("id"), graphObject.getProperty(
-                                    "name"));
-                        } else {
-                            s = s + String.format("%s: <no such id>\n", requestId);
-                        }
-                    } else if (error != null) {
-                        s = s + String.format("Error: %s", error.getErrorMessage());
-                    }
-                    textViewResults.setText(s);
-                }
-            }));
-        }
-        pendingRequest = false;
-        Request.executeBatchAsync(requests);
-    }
-
-    private Session createSession() {
-        Session activeSession = Session.getActiveSession();
-        if (activeSession == null || activeSession.getState().isClosed()) {
-            activeSession = new Session.Builder(this).setApplicationId(APP_ID).build();
-            Session.setActiveSession(activeSession);
-        }
-        return activeSession;
-    }
-}
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index 246d0de24..04809d609 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -22,5 +22,13 @@
                   android:theme="@android:style/Theme.Translucent.NoTitleBar"
                   android:label="@string/app_name" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
+        <provider android:authorities="com.facebook.app.NativeAppCallContentProvider355198514515820"
+                  android:name="com.facebook.NativeAppCallContentProvider"
+                  android:exported="true"/>
+        <receiver android:name="com.facebook.samples.hellofacebook.HelloFacebookBroadcastReceiver">
+            <intent-filter>
+                <action android:name="com.facebook.platform.AppCallResultBroadcast" />
+            </intent-filter>
+        </receiver>
     </application>
 </manifest>
diff --git a/samples/HelloFacebookSample/build.gradle b/samples/HelloFacebookSample/build.gradle
index a2cda0280..b76fed903 100644
--- a/samples/HelloFacebookSample/build.gradle
+++ b/samples/HelloFacebookSample/build.gradle
@@ -5,12 +5,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java
new file mode 100644
index 000000000..a1328155e
--- /dev/null
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java
@@ -0,0 +1,40 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.hellofacebook;
+
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.FacebookBroadcastReceiver;
+
+/**
+ * This is a simple example to demonstrate how an app could extend FacebookBroadcastReceiver to handle
+ * notifications that long-running operations such as photo uploads have finished.
+ */
+public class HelloFacebookBroadcastReceiver extends FacebookBroadcastReceiver {
+
+    @Override
+    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " succeeded."));
+    }
+
+    @Override
+    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was not uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " failed."));
+    }
+}
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
index bf374a95c..33485efb4 100644
--- a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
@@ -65,6 +65,7 @@
     private GraphPlace place;
     private List<GraphUser> tags;
     private boolean canPresentShareDialog;
+    private boolean canPresentShareDialogWithPhotos;
 
     private enum PendingAction {
         NONE,
@@ -175,8 +176,12 @@ public void onBackStackChanged() {
             }
         });
 
+        // Can we present the share dialog for regular links?
         canPresentShareDialog = FacebookDialog.canPresentShareDialog(this,
                 FacebookDialog.ShareDialogFeature.SHARE_DIALOG);
+        // Can we present the share dialog for photos?
+        canPresentShareDialogWithPhotos = FacebookDialog.canPresentShareDialog(this,
+                FacebookDialog.ShareDialogFeature.PHOTOS);
     }
 
     @Override
@@ -238,7 +243,7 @@ private void updateUI() {
         boolean enableButtons = (session != null && session.isOpened());
 
         postStatusUpdateButton.setEnabled(enableButtons || canPresentShareDialog);
-        postPhotoButton.setEnabled(enableButtons);
+        postPhotoButton.setEnabled(enableButtons || canPresentShareDialogWithPhotos);
         pickFriendsButton.setEnabled(enableButtons);
         pickPlaceButton.setEnabled(enableButtons);
 
@@ -295,7 +300,7 @@ private void onClickPostStatusUpdate() {
         performPublish(PendingAction.POST_STATUS_UPDATE, canPresentShareDialog);
     }
 
-    private FacebookDialog.ShareDialogBuilder createShareDialogBuilder() {
+    private FacebookDialog.ShareDialogBuilder createShareDialogBuilderForLink() {
         return new FacebookDialog.ShareDialogBuilder(this)
                 .setName("Hello Facebook")
                 .setDescription("The 'Hello Facebook' sample application showcases simple Facebook integration")
@@ -304,7 +309,7 @@ private void onClickPostStatusUpdate() {
 
     private void postStatusUpdate() {
         if (canPresentShareDialog) {
-            FacebookDialog shareDialog = createShareDialogBuilder().build();
+            FacebookDialog shareDialog = createShareDialogBuilderForLink().build();
             uiHelper.trackPendingDialogCall(shareDialog.present());
         } else if (user != null && hasPublishPermission()) {
             final String message = getString(R.string.status_update, user.getFirstName(), (new Date().toString()));
@@ -322,12 +327,20 @@ public void onCompleted(Response response) {
     }
 
     private void onClickPostPhoto() {
-        performPublish(PendingAction.POST_PHOTO, false);
+        performPublish(PendingAction.POST_PHOTO, canPresentShareDialogWithPhotos);
+    }
+
+    private FacebookDialog.PhotoShareDialogBuilder createShareDialogBuilderForPhoto(Bitmap... photos) {
+        return new FacebookDialog.PhotoShareDialogBuilder(this)
+                .addPhotos(Arrays.asList(photos));
     }
 
     private void postPhoto() {
-        if (hasPublishPermission()) {
-            Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
+        Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
+        if (canPresentShareDialogWithPhotos) {
+            FacebookDialog shareDialog = createShareDialogBuilderForPhoto(image).build();
+            uiHelper.trackPendingDialogCall(shareDialog.present());
+        } else if (hasPublishPermission()) {
             Request request = Request.newUploadPhotoRequest(Session.getActiveSession(), image, new Request.Callback() {
                 @Override
                 public void onCompleted(Response response) {
diff --git a/samples/PlacePickerSample/build.gradle b/samples/PlacePickerSample/build.gradle
index a2cda0280..b76fed903 100644
--- a/samples/PlacePickerSample/build.gradle
+++ b/samples/PlacePickerSample/build.gradle
@@ -5,12 +5,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/ProfilePictureSample/.classpath b/samples/ProfilePictureSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/ProfilePictureSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/ProfilePictureSample/.project b/samples/ProfilePictureSample/.project
deleted file mode 100644
index 2b2339321..000000000
--- a/samples/ProfilePictureSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>ProfilePictureSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/ProfilePictureSample/AndroidManifest.xml b/samples/ProfilePictureSample/AndroidManifest.xml
deleted file mode 100644
index 907d05754..000000000
--- a/samples/ProfilePictureSample/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.profilepicture"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon" >
-        <activity
-                android:name=".ProfilePictureSampleActivity"
-                android:label="@string/app_name"
-                android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-</manifest> 
diff --git a/samples/ProfilePictureSample/ant.properties b/samples/ProfilePictureSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/ProfilePictureSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/ProfilePictureSample/build.gradle b/samples/ProfilePictureSample/build.gradle
deleted file mode 100644
index a2cda0280..000000000
--- a/samples/ProfilePictureSample/build.gradle
+++ /dev/null
@@ -1,23 +0,0 @@
-apply plugin: 'android'
-
-dependencies {
-    compile project(':facebook')
-}
-
-android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-}
diff --git a/samples/ProfilePictureSample/build.xml b/samples/ProfilePictureSample/build.xml
deleted file mode 100644
index 3454adc93..000000000
--- a/samples/ProfilePictureSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="ProfilePictureSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/ProfilePictureSample/proguard-project.txt b/samples/ProfilePictureSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/ProfilePictureSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/ProfilePictureSample/project.properties b/samples/ProfilePictureSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/ProfilePictureSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/ProfilePictureSample/res/drawable-hdpi/icon.png b/samples/ProfilePictureSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 1bc72b1bf..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable-mdpi/icon.png b/samples/ProfilePictureSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index e0de1a4ba..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png b/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 1bc4b231d..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable/icon.png b/samples/ProfilePictureSample/res/drawable/icon.png
deleted file mode 100644
index e0de1a4ba..000000000
Binary files a/samples/ProfilePictureSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml b/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml
deleted file mode 100644
index 8797e28be..000000000
--- a/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<fragment xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@+id/profilePictureSampleFragment"
-          android:layout_width="match_parent"
-          android:layout_height="match_parent"
-          android:name="com.facebook.samples.profilepicture.ProfilePictureSampleFragment"
-        />
diff --git a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml b/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
deleted file mode 100644
index 8bb4921c5..000000000
--- a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
+++ /dev/null
@@ -1,152 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-            xmlns:app="http://schemas.android.com/apk/res-auto"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        >
-<LinearLayout
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-        >
-    <TextView
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/description"
-            android:layout_marginBottom="15dp"
-            />
-    <LinearLayout
-            android:layout_height="wrap_content"
-            android:layout_width="match_parent"
-            android:layout_marginBottom="15dp"
-            android:orientation="horizontal">
-        <LinearLayout
-                android:id="@+id/presetSizeView"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                android:orientation="horizontal"
-                >
-            <Button
-                    android:id="@+id/smallerButton"
-                    android:layout_height="40dp"
-                    android:layout_width="40dp"
-                    android:layout_weight="0"
-                    android:text="@string/smaller_button_text"
-                    android:textSize="18dp"
-                    />
-            <Button
-                    android:id="@+id/largerButton"
-                    android:layout_height="40dp"
-                    android:layout_width="40dp"
-                    android:layout_weight="0"
-                    android:text="@string/larger_button_text"
-                    android:textSize="18dp"
-                    android:enabled="false"
-                    />
-            <TextView
-                    android:id="@+id/sizeLabel"
-                    android:layout_height="40dp"
-                    android:layout_width="0dp"
-                    android:layout_weight="1"
-                    android:paddingLeft="10dp"
-                    android:text="@string/large_image_size"
-                    android:textSize="18dp"
-                    />
-        </LinearLayout>
-        <SeekBar
-                android:id="@+id/customSizeView"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                android:orientation="horizontal"
-                android:visibility="gone"
-                />
-        <Button
-                android:id="@+id/sizeToggle"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="10dp"
-                android:text="@string/custom_size_button_text"
-                />
-    </LinearLayout>
-    <LinearLayout
-            android:orientation="horizontal"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="10dp"
-            android:layout_marginBottom="10dp"
-            >
-        <com.facebook.widget.ProfilePictureView
-                android:id="@+id/profilepic"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                app:preset_size="large"
-                app:is_cropped="true"
-                />
-        <LinearLayout
-                android:id="@+id/userbuttoncontainer"
-                android:orientation="vertical"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="right"
-                >
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_chris_name"
-                    android:tag="chris.lang.92123"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_ming_name"
-                    android:tag="mingfli"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_karthik_name"
-                    android:tag="ksubraman"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_random_name"
-                    />
-
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_none_name"
-                    android:tag=""
-                    />
-        </LinearLayout>
-    </LinearLayout>
-
-    <CheckBox
-            android:id="@+id/squareCropToggle"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/cropping_label"
-            android:checked="true"
-            />
-</LinearLayout>
-</ScrollView>
diff --git a/samples/ProfilePictureSample/res/values/strings.xml b/samples/ProfilePictureSample/res/values/strings.xml
deleted file mode 100644
index bde7903ad..000000000
--- a/samples/ProfilePictureSample/res/values/strings.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">ProfilePictureSample</string>
-    <string name="description">Sample app demonstrating the use of ProfilePictureView</string>
-    <string name="cropping_label">Show cropped version</string>
-    <string name="crop_original_button_text">Original</string>
-    <string name="crop_square_button_text">Square</string>
-    <string name="user_chris_name">Chris</string>
-    <string name="user_ming_name">Ming</string>
-    <string name="user_karthik_name">Karthik</string>
-    <string name="user_random_name">Random</string>
-    <string name="user_none_name">None</string>
-    <string name="smaller_button_text">-</string>
-    <string name="larger_button_text">+</string>
-    <string name="large_image_size">Large</string>
-    <string name="normal_image_size">Normal</string>
-    <string name="small_image_size">Small</string>
-    <string name="preset_size_button_text">Use preset size</string>
-    <string name="custom_size_button_text">Use custom size</string>
-</resources>
diff --git a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java b/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java
deleted file mode 100644
index dc2b12efa..000000000
--- a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.profilepicture;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-
-public class ProfilePictureSampleActivity extends FragmentActivity {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_profile_picture_sample);
-    }
-}
diff --git a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java b/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java
deleted file mode 100644
index b80ca2eff..000000000
--- a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java
+++ /dev/null
@@ -1,314 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.profilepicture;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import com.facebook.widget.ProfilePictureView;
-
-import java.util.Date;
-import java.util.Random;
-
-public class ProfilePictureSampleFragment extends Fragment {
-
-    // Keeping the number of custom sizes low to prevent excessive network chatter.
-    private static final int MAX_CUSTOM_SIZES = 6;
-    private static final int DEFAULT_SIZE_INCREMENT = MAX_CUSTOM_SIZES / 2;
-    private static final String PICTURE_SIZE_TYPE_KEY = "PictureSizeType";
-
-    private static final String[] INTERESTING_IDS = {
-        "zuck",
-        // Recent Presidents and nominees
-        "barackobama",
-        "mittromney",
-        "johnmccain",
-        "johnkerry",
-        "georgewbush",
-        "algore",
-        // Places too!
-        "Disneyland",
-        "SpaceNeedle",
-        "TourEiffel",
-        "sydneyoperahouse",
-        // A selection of 1986 Mets
-        "166020963458360",
-        "108084865880237",
-        "140447466087679",
-        "111825495501392",
-        // The cast of Saved by the Bell
-        "108168249210849",
-        "TiffaniThiessen",
-        "108126672542534",
-        "112886105391693",
-        "MarioLopezExtra",
-        "108504145837165",
-        "dennishaskins",
-        // Eighties bands that have been to Moscow
-        "7220821999",
-        "31938132882",
-        "108023262558391",
-        "209263392372",
-        "104132506290482",
-        "9721897972",
-        "5461947317",
-        "57084011597",
-        // Three people that have never been in my kitchen
-        "24408579964",
-        "111980872152571",
-        "112427772106500",
-        // Trusted anchormen
-        "113415525338717",
-        "105628452803615",
-        "105533779480538",
-    };
-
-    private int pictureSizeType = ProfilePictureView.CUSTOM;
-    private String firstUserId;
-    private Random randomGenerator;
-
-    private ProfilePictureView profilePic;
-    private Button smallerButton;
-    private Button largerButton;
-    private TextView sizeLabel;
-    private View presetSizeView;
-    private SeekBar customSizeView;
-    private CheckBox cropToggle;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {
-        View fragmentView = inflater.inflate(R.layout.fragment_profile_picture_sample, parent, false);
-
-        randomGenerator = new Random((new Date()).getTime());
-
-        profilePic = (ProfilePictureView) fragmentView.findViewById(R.id.profilepic);
-        smallerButton = (Button) fragmentView.findViewById(R.id.smallerButton);
-        largerButton = (Button) fragmentView.findViewById(R.id.largerButton);
-        sizeLabel = (TextView) fragmentView.findViewById(R.id.sizeLabel);
-        presetSizeView = fragmentView.findViewById(R.id.presetSizeView);
-        customSizeView = (SeekBar) fragmentView.findViewById(R.id.customSizeView);
-        cropToggle = (CheckBox) fragmentView.findViewById(R.id.squareCropToggle);
-
-        LinearLayout container = (LinearLayout) fragmentView.findViewById(R.id.userbuttoncontainer);
-        int numChildren = container.getChildCount();
-        for (int i = 0; i < numChildren; i++) {
-            View childView = container.getChildAt(i);
-            Object tag = childView.getTag();
-            if (childView instanceof Button) {
-                setupUserButton((Button)childView);
-                if (i == 0) {
-                    // Initialize the image to the first user
-                    firstUserId = tag.toString();
-                }
-            }
-        }
-
-        cropToggle.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {
-            @Override
-            public void onCheckedChanged(CompoundButton checkbox, boolean checked) {
-                profilePic.setCropped(checked);
-            }
-        });
-
-        final Button sizeToggle = (Button) fragmentView.findViewById(R.id.sizeToggle);
-        sizeToggle.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (pictureSizeType != ProfilePictureView.CUSTOM) {
-                    sizeToggle.setText(R.string.preset_size_button_text);
-                    switchToCustomSize();
-                } else {
-                    sizeToggle.setText(R.string.custom_size_button_text);
-                    switchToPresetSize(ProfilePictureView.LARGE);
-                }
-            }
-        });
-
-        smallerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                switch(profilePic.getPresetSize()) {
-                    case ProfilePictureView.LARGE:
-                        switchToPresetSize(ProfilePictureView.NORMAL);
-                        break;
-                    case ProfilePictureView.NORMAL:
-                        switchToPresetSize(ProfilePictureView.SMALL);
-                        break;
-                }
-            }
-        });
-
-        largerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                switch(profilePic.getPresetSize()) {
-                    case ProfilePictureView.NORMAL:
-                        switchToPresetSize(ProfilePictureView.LARGE);
-                        break;
-                    case ProfilePictureView.SMALL:
-                        switchToPresetSize(ProfilePictureView.NORMAL);
-                        break;
-                }
-            }
-        });
-
-        // We will fetch a new image for each change in the SeekBar. So keeping the count low
-        // to prevent too much network chatter. SeekBar reports 0-max, so we will get max+1
-        // notifications of change.
-        customSizeView.setMax(MAX_CUSTOM_SIZES);
-        customSizeView.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
-            @Override
-            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
-                updateProfilePicForCustomSizeIncrement(i);
-            }
-
-            @Override
-            public void onStartTrackingTouch(SeekBar seekBar) {
-                // NO-OP
-            }
-
-            @Override
-            public void onStopTrackingTouch(SeekBar seekBar) {
-                // NO-OP
-            }
-        });
-
-        restoreState(savedInstanceState);
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        // Store the size type since we will use that to switch the Fragment's UI
-        // between CUSTOM & PRESET modes
-        // Other state (userId & isCropped) will be saved/restored directly by
-        // ProfilePictureView
-        outState.putInt(PICTURE_SIZE_TYPE_KEY, pictureSizeType);
-    }
-
-    private void restoreState(Bundle savedInstanceState) {
-        if (savedInstanceState != null) {
-            // Is we have saved state, restore the Fragment to it.
-            // UserId & isCropped will be restored directly by ProfilePictureView
-            pictureSizeType = savedInstanceState.getInt(
-                    PICTURE_SIZE_TYPE_KEY, ProfilePictureView.LARGE);
-
-            if (pictureSizeType == ProfilePictureView.CUSTOM) {
-                switchToCustomSize();
-            } else {
-                switchToPresetSize(pictureSizeType);
-            }
-        } else {
-            // No saved state. Let's go to a default state
-            switchToPresetSize(ProfilePictureView.LARGE);
-            profilePic.setCropped(cropToggle.isChecked());
-
-            // Setting userId last so that only one network request is sent
-            profilePic.setProfileId(firstUserId);
-        }
-    }
-
-    private void setupUserButton(Button b) {
-        b.setOnClickListener(new Button.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Object tag = v.getTag();
-                String userId = null;
-                if (tag != null) {
-                    userId = tag.toString();
-                } else {
-                    // Random id.
-                    userId = INTERESTING_IDS[randomGenerator.nextInt(INTERESTING_IDS.length)];
-                }
-                profilePic.setProfileId(userId);
-            }
-        });
-    }
-
-    private void switchToCustomSize() {
-        pictureSizeType = ProfilePictureView.CUSTOM;
-        presetSizeView.setVisibility(View.GONE);
-        customSizeView.setVisibility(View.VISIBLE);
-
-        profilePic.setPresetSize(pictureSizeType);
-
-        customSizeView.setProgress(DEFAULT_SIZE_INCREMENT);
-        updateProfilePicForCustomSizeIncrement(DEFAULT_SIZE_INCREMENT);
-    }
-
-    private void switchToPresetSize(int sizeType) {
-        customSizeView.setVisibility(View.GONE);
-        presetSizeView.setVisibility(View.VISIBLE);
-
-        switch(sizeType) {
-            case ProfilePictureView.SMALL:
-                largerButton.setEnabled(true);
-                smallerButton.setEnabled(false);
-                sizeLabel.setText(R.string.small_image_size);
-                pictureSizeType = sizeType;
-                break;
-            case ProfilePictureView.NORMAL:
-                largerButton.setEnabled(true);
-                smallerButton.setEnabled(true);
-                sizeLabel.setText(R.string.normal_image_size);
-                pictureSizeType = sizeType;
-                break;
-            case ProfilePictureView.LARGE:
-            default:
-                largerButton.setEnabled(false);
-                smallerButton.setEnabled(true);
-                sizeLabel.setText(R.string.large_image_size);
-                pictureSizeType = ProfilePictureView.LARGE;
-                break;
-        }
-
-        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                0,
-                ViewGroup.LayoutParams.WRAP_CONTENT,
-                1
-        );
-
-        profilePic.setLayoutParams(params);
-        profilePic.setPresetSize(pictureSizeType);
-    }
-
-    private void updateProfilePicForCustomSizeIncrement(int i) {
-        if (pictureSizeType != ProfilePictureView.CUSTOM) {
-            return;
-        }
-
-        // This will ensure a minimum size of 51x68 and will scale the image at
-        // a ratio of 3:4 (w:h) as the SeekBar is moved.
-        //
-        // Completely arbitrary
-        //
-        // NOTE: The numbers are in dips.
-        float width = (i * 21) + 51;
-        float height = (i * 28) + 68;
-
-        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                (int)(width * getResources().getDisplayMetrics().density),
-                (int)(height * getResources().getDisplayMetrics().density));
-        profilePic.setLayoutParams(params);
-    }
-}
diff --git a/samples/RPSSample/build.gradle b/samples/RPSSample/build.gradle
index a2cda0280..b76fed903 100644
--- a/samples/RPSSample/build.gradle
+++ b/samples/RPSSample/build.gradle
@@ -5,12 +5,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
index 42fb88e64..36763afc0 100644
--- a/samples/RPSSample/res/values/strings.xml
+++ b/samples/RPSSample/res/values/strings.xml
@@ -31,6 +31,7 @@
     <string name="result_lost">lost</string>
     <string name="result_tied">tied</string>
     <string name="share_on_facebook">Share on Facebook</string>
+    <string name="send_with_messenger">Send with Messenger</string>
     <string name="see_friends">See Friends</string>
     <string name="check_settings">Check Facebook Settings</string>
     <string name="friends_using_rps">Friends Rockin\' RPS</string>
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
index 1740ecd2e..5e6efe1f6 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
@@ -43,6 +43,7 @@
     private MenuItem settings;
     private MenuItem friends;
     private MenuItem share;
+    private MenuItem message;
     private boolean isResumed = false;
     private UiLifecycleHelper uiHelper;
     private Session.StatusCallback callback = new Session.StatusCallback() {
@@ -133,6 +134,7 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         if (fragments[RPS].isVisible()) {
             if (menu.size() == 0) {
                 share = menu.add(R.string.share_on_facebook);
+                message = menu.add(R.string.send_with_messenger);
                 friends = menu.add(R.string.see_friends);
                 settings = menu.add(R.string.check_settings);
             }
@@ -158,6 +160,10 @@ public boolean onOptionsItemSelected(MenuItem item) {
             RpsFragment fragment = (RpsFragment) fragments[RPS];
             fragment.shareUsingNativeDialog();
             return true;
+        } else if (item.equals(message)) {
+            RpsFragment fragment = (RpsFragment) fragments[RPS];
+            fragment.shareUsingMessengerDialog();
+            return true;
         }
         return false;
     }
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
index 5627902e7..30d74bb1d 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
@@ -414,6 +414,41 @@ public void shareUsingNativeDialog() {
         }
     }
 
+    public void shareUsingMessengerDialog() {
+        if (playerChoice == INVALID_CHOICE || computerChoice == INVALID_CHOICE) {
+            FacebookDialog.MessageDialogBuilder builder = new FacebookDialog.MessageDialogBuilder(getActivity())
+                    .setLink(SHARE_GAME_LINK)
+                    .setName(SHARE_GAME_NAME)
+                    .setFragment(this);
+            // share the app
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        } else {
+            ThrowAction throwAction = OpenGraphAction.Factory.createForPost(ThrowAction.class, ThrowAction.TYPE);
+            throwAction.setGesture(getBuiltInGesture(playerChoice));
+            throwAction.setOpposingGesture(getBuiltInGesture(computerChoice));
+
+            // The OG objects have their own bitmaps we could rely on, but in order to demonstrate attaching
+            // an in-memory bitmap (e.g., a game screencap) we'll send the bitmap explicitly ourselves.
+            ImageButton view = gestureImages[playerChoice];
+            BitmapDrawable drawable = (BitmapDrawable) view.getBackground();
+            Bitmap bitmap = drawable.getBitmap();
+
+            FacebookDialog.OpenGraphMessageDialogBuilder builder = new FacebookDialog.OpenGraphMessageDialogBuilder(
+                    getActivity(),
+                    throwAction,
+                    ThrowAction.PREVIEW_PROPERTY_NAME)
+                    .setFragment(this)
+                    .setImageAttachmentsForAction(Arrays.asList(bitmap));
+
+            // share the game play
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        }
+    }
+
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index c4365dd21..9a83e201c 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -11,10 +11,11 @@
     <uses-feature android:name="android.hardware.camera"/>
     <uses-feature android:name="android.hardware.camera.autofocus"/>
     <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
+                 android:icon="@drawable/add_food"
                  android:name=".ScrumptiousApplication">
         <activity android:name="MainActivity"
                   android:label="@string/app_name"
+                  android:theme="@style/Theme.Scrumptious"
                   android:windowSoftInputMode="adjustResize">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN"/>
diff --git a/samples/Scrumptious/build.gradle b/samples/Scrumptious/build.gradle
index a2cda0280..b76fed903 100644
--- a/samples/Scrumptious/build.gradle
+++ b/samples/Scrumptious/build.gradle
@@ -5,12 +5,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/Scrumptious/res/drawable-mdpi/logo.png b/samples/Scrumptious/res/drawable-mdpi/logo.png
new file mode 100644
index 000000000..27fd9ffc1
Binary files /dev/null and b/samples/Scrumptious/res/drawable-mdpi/logo.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/logo.png b/samples/Scrumptious/res/drawable-xhdpi/logo.png
new file mode 100644
index 000000000..0fff04bb9
Binary files /dev/null and b/samples/Scrumptious/res/drawable-xhdpi/logo.png differ
diff --git a/samples/Scrumptious/res/drawable/action_eating.png b/samples/Scrumptious/res/drawable/action_eating.png
deleted file mode 100644
index 7b951edf0..000000000
Binary files a/samples/Scrumptious/res/drawable/action_eating.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_location.png b/samples/Scrumptious/res/drawable/action_location.png
deleted file mode 100644
index 13dfe86ff..000000000
Binary files a/samples/Scrumptious/res/drawable/action_location.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_people.png b/samples/Scrumptious/res/drawable/action_people.png
deleted file mode 100644
index 19546267c..000000000
Binary files a/samples/Scrumptious/res/drawable/action_people.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_photo.png b/samples/Scrumptious/res/drawable/action_photo.png
deleted file mode 100644
index 46533cc70..000000000
Binary files a/samples/Scrumptious/res/drawable/action_photo.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/add_food.png b/samples/Scrumptious/res/drawable/add_food.png
new file mode 100644
index 000000000..b556dd6e3
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_food.png differ
diff --git a/samples/Scrumptious/res/drawable/add_friends.png b/samples/Scrumptious/res/drawable/add_friends.png
new file mode 100644
index 000000000..1cafe3625
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_friends.png differ
diff --git a/samples/Scrumptious/res/drawable/add_location.png b/samples/Scrumptious/res/drawable/add_location.png
new file mode 100644
index 000000000..2df780552
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_location.png differ
diff --git a/samples/Scrumptious/res/drawable/add_photo.png b/samples/Scrumptious/res/drawable/add_photo.png
new file mode 100644
index 000000000..48f5740a6
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_photo.png differ
diff --git a/samples/Scrumptious/res/drawable/button_text_color.xml b/samples/Scrumptious/res/drawable/button_text_color.xml
new file mode 100644
index 000000000..ee8b69573
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/button_text_color.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android" >
+	<item 
+		android:state_enabled="false"
+		android:color="@color/disabled_button_color"/>
+    <item
+    	android:color="@color/scrumptious_main_orange"/>
+</selector>
diff --git a/samples/Scrumptious/res/drawable/title_bar_logo.png b/samples/Scrumptious/res/drawable/title_bar_logo.png
new file mode 100644
index 000000000..27fd9ffc1
Binary files /dev/null and b/samples/Scrumptious/res/drawable/title_bar_logo.png differ
diff --git a/samples/Scrumptious/res/layout/listitem.xml b/samples/Scrumptious/res/layout/listitem.xml
index 293ef0c7e..543aab35a 100644
--- a/samples/Scrumptious/res/layout/listitem.xml
+++ b/samples/Scrumptious/res/layout/listitem.xml
@@ -23,9 +23,8 @@
 
     <ImageView
             android:id="@+id/icon"
-            android:src="@drawable/action_eating"
-            android:layout_width="60dp"
-            android:layout_height="60dp" />
+            android:layout_width="50dp"
+            android:layout_height="50dp" />
     <LinearLayout
             android:orientation="vertical"
             android:layout_gravity="center_vertical"
@@ -35,16 +34,16 @@
         <TextView
                 android:id="@+id/text1"
                 android:text="test"
-                android:textColor="#333"
+                android:textColor="#FB5820"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:textSize="18sp" />
+                android:textSize="16sp" />
         <TextView
                 android:id="@+id/text2"
                 android:text="test2"
-                android:textColor="#6699CC"
+                android:textColor="#E4C897"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:textSize="14sp" />
+                android:textSize="12sp" />
     </LinearLayout>
 </LinearLayout>
diff --git a/samples/Scrumptious/res/layout/selection.xml b/samples/Scrumptious/res/layout/selection.xml
index 3367e4840..0fd2f06ea 100644
--- a/samples/Scrumptious/res/layout/selection.xml
+++ b/samples/Scrumptious/res/layout/selection.xml
@@ -14,58 +14,88 @@
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
-
-<ScrollView
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:facebook="http://schemas.android.com/apk/res-auto"
+<LinearLayout 
+	xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:facebook="http://schemas.android.com/apk/res-auto"
+	android:layout_width="match_parent"
+	android:layout_height="match_parent"
+	android:orientation="vertical">
+	
+	<RelativeLayout 
+		android:layout_width="match_parent"
+		android:layout_height="60dp"
+		android:background="@color/scrumptious_main_orange">
+		
+		<ImageView
+			android:id="@+id/image_title"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content"
+			android:layout_margin="16dp"
+			android:layout_centerInParent="true"
+			android:scaleType="fitCenter"
+			android:src="@drawable/title_bar_logo"/>
+		
+        <com.facebook.widget.ProfilePictureView
+            android:id="@+id/selection_profile_pic"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:gravity="right|center_vertical"
+            android:layout_margin="10dp"
+            facebook:preset_size="small" />
+        
+	</RelativeLayout>
+	<ScrollView
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
+        android:fillViewport="true"
         android:background="#FFF">
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:orientation="vertical">
+	    <LinearLayout
+	        android:layout_width="fill_parent"
+	        android:layout_height="fill_parent"
+	        android:orientation="vertical">
+	
+	        <com.facebook.scrumptious.FullListView
+	            android:id="@+id/selection_list"
+	            android:layout_width="fill_parent"
+	            android:layout_height="wrap_content"
+	            android:layout_margin="20dp"
+	            android:dividerHeight="@dimen/item_list_padding"
+	            android:divider="#00000000"/>
+	
+	        <ImageView 
+	            android:id="@+id/selected_image"
+	            android:layout_width="match_parent"
+	            android:layout_height="0dp"
+	            android:layout_weight="1"
+	            android:layout_marginLeft="50dp"
+	            android:layout_marginRight="50dp"/>
+	        
+	        <TextView
+	            android:id="@+id/announce_text"
+	            android:layout_width="wrap_content"
+	            android:layout_height="wrap_content"
+	            android:layout_gravity="center"
+	            android:layout_marginTop="10dp"
+	            android:layout_marginBottom="30dp"
+	            android:text="@string/announce"
+	            android:textColor="@drawable/button_text_color"
+	            android:gravity="center" />
+	
+	        <TextView
+	            android:id="@+id/message_text"
+	            android:layout_width="wrap_content"
+	            android:layout_height="wrap_content"
+	            android:layout_gravity="center"
+	            android:layout_marginTop="10dp"
+	            android:layout_marginBottom="30dp"
+	            android:text="@string/message"
+	            android:textColor="@drawable/button_text_color"
+	            android:gravity="center"
+	            android:visibility="gone" />
+	    </LinearLayout>
+    </ScrollView>
+</LinearLayout>
 
-        <LinearLayout
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="20dp"
-            android:gravity="center_horizontal"
-            android:orientation="horizontal" >
-            <com.facebook.widget.ProfilePictureView
-                android:id="@+id/selection_profile_pic"
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:layout_gravity="center"
-                android:gravity="center_horizontal"
-                facebook:preset_size="small" />
-            <TextView
-                android:id="@+id/selection_user_name"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="10dp"
-                android:layout_gravity="center"
-                android:textColor="#333"
-                android:textSize="18sp" />
-        </LinearLayout>
-
-        <com.facebook.scrumptious.FullListView
-            android:id="@+id/selection_list"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_margin="20dp"
-            android:background="@drawable/button_border"/>
-
-        <Button
-            android:id="@+id/announce_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:textStyle="bold"
-            android:background="@drawable/button_border"
-            android:layout_marginBottom="20dp"
-            android:text="@string/announce"
-            android:gravity="center" />
 
-    </LinearLayout>
-</ScrollView>
diff --git a/samples/Scrumptious/res/layout/splash.xml b/samples/Scrumptious/res/layout/splash.xml
index b84d8e58f..8ea96ae84 100644
--- a/samples/Scrumptious/res/layout/splash.xml
+++ b/samples/Scrumptious/res/layout/splash.xml
@@ -17,52 +17,23 @@
 
 <ScrollView
     xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="#303040" >
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fillViewport="true"
+    android:background="#FB5820" >
 
     <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
         android:orientation="vertical">
 
-        <LinearLayout
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="30dp"
-            android:gravity="center_horizontal"
-            android:orientation="horizontal" >
-            <ImageView
-                android:id="@+id/splash_icon"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:layout_marginRight="10dp"
-                android:gravity="center"
-                android:src="@drawable/icon" />
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:gravity="center"
-                android:textColor="#AFDEFE"
-                android:textSize="28sp"
-                android:typeface="serif"
-                android:textStyle="italic"
-                android:text="@string/app_name" />
-        </LinearLayout>
-
-
-        <TextView
-            android:id="@+id/profile_name"
-            android:layout_width="174dp"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="35dp"
-            android:lines="2"
-            android:textSize="17sp"
-            android:text="@string/get_started"
-            android:layout_gravity="center_horizontal"
-            android:gravity="center_horizontal"/>
+    	<ImageView 
+    		android:layout_width="match_parent"
+    		android:layout_height="0dp"
+    		android:layout_weight="1"
+    		android:layout_gravity="center"
+    		android:padding="50dp"
+    		android:src="@drawable/logo"/>
 
         <com.facebook.widget.LoginButton
             android:id="@+id/login_button"
@@ -72,18 +43,16 @@
             android:layout_marginTop="30dp"
             android:layout_marginBottom="30dp" />
 
-        <Button
+        <TextView
             android:id="@+id/skip_login_button"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_gravity="center_horizontal"
             android:text="@string/skip_login"
-            android:background="@drawable/com_facebook_loginbutton_silver"
-            android:textSize="@dimen/com_facebook_loginview_text_size"
-            android:textColor="@color/com_facebook_blue"
+            android:textSize="12sp"
+            android:textColor="#EAFEA7"
             android:paddingLeft="20dp"
             android:paddingRight="20dp"
-            android:layout_marginTop="30dp"
             android:layout_marginBottom="30dp" />
 
     </LinearLayout>
diff --git a/samples/Scrumptious/res/values/colors.xml b/samples/Scrumptious/res/values/colors.xml
new file mode 100644
index 000000000..71f8c032b
--- /dev/null
+++ b/samples/Scrumptious/res/values/colors.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+	<color name="scrumptious_main_orange">#FFFD5720</color>
+    <color name="disabled_button_color">#FFB7B7B7</color>
+</resources>
diff --git a/samples/Scrumptious/res/values/dimens.xml b/samples/Scrumptious/res/values/dimens.xml
new file mode 100644
index 000000000..1820b4cf2
--- /dev/null
+++ b/samples/Scrumptious/res/values/dimens.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+	<dimen name="item_list_padding">14dp</dimen>
+</resources>
diff --git a/samples/Scrumptious/res/values/strings.xml b/samples/Scrumptious/res/values/strings.xml
index c28e8df63..5d8676c15 100644
--- a/samples/Scrumptious/res/values/strings.xml
+++ b/samples/Scrumptious/res/values/strings.xml
@@ -19,11 +19,11 @@
     <string name="app_name">Scrumptious</string>
     <string name="app_id">233936543368280</string>
     <string name="get_started">To get started, login using Facebook</string>
-    <string name="skip_login">Skip Login</string>
-    <string name="action_eating">What are you eating?</string>
-    <string name="action_location">Where are you?</string>
-    <string name="action_people">With whom?</string>
-    <string name="action_photo">Got a picture?</string>
+    <string name="skip_login">continue as a guest</string>
+    <string name="action_eating">Pick Meal</string>
+    <string name="action_location">Pick Location</string>
+    <string name="action_people">Pick Friends</string>
+    <string name="action_photo">Pick Photo</string>
     <string name="action_eating_default">Select a meal</string>
     <string name="action_location_default">Select a place</string>
     <string name="action_people_default">Select friends</string>
@@ -31,7 +31,8 @@
     <string name="action_photo_ready">Ready</string>
     <string name="action_photo_camera">Take Photo</string>
     <string name="action_photo_gallery">Choose Existing</string>
-    <string name="announce">Announce</string>
+    <string name="announce">Share</string>
+    <string name="message">Send with Messenger</string>
     <string name="login">Login</string>
     <string name="settings">Settings</string>
     <string name="select_meal">Select a meal</string>
diff --git a/samples/Scrumptious/res/values/styles.xml b/samples/Scrumptious/res/values/styles.xml
new file mode 100644
index 000000000..cc9304bcd
--- /dev/null
+++ b/samples/Scrumptious/res/values/styles.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+	<style name="Theme.Scrumptious" parent="android:Theme">
+        <item name="android:windowNoTitle">true</item>
+    </style>
+</resources>
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java b/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
index 66c1f83b9..58daa220e 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
@@ -54,9 +54,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
             height += childView.getMeasuredHeight();
         }
-        Rect bgPadding = new Rect();
-        getBackground().getPadding(bgPadding);
-        height += (count - 1) * getDividerHeight() + bgPadding.top + bgPadding.bottom;
+        height += getDividerHeight() * (count-1);
         setMeasuredDimension(width, height);
     }
 }
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java b/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
index f4e2d48d4..3522da5b2 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
@@ -72,6 +72,7 @@ public void onCreate(Bundle savedInstanceState) {
         if (FRIEND_PICKER.equals(intentUri)) {
             if (savedInstanceState == null) {
                 friendPickerFragment = new FriendPickerFragment(args);
+                friendPickerFragment.setFriendPickerType(FriendPickerFragment.FriendPickerType.TAGGABLE_FRIENDS);
             } else {
                 friendPickerFragment = (FriendPickerFragment) manager.findFragmentById(R.id.picker_fragment);;
             }
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
index 86265a074..322979141 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
@@ -68,15 +68,16 @@
     private static final int REAUTH_ACTIVITY_CODE = 100;
     private static final String PERMISSION = "publish_actions";
 
-    private Button announceButton;
+    private TextView announceButton;
+    private TextView messageButton;
     private ListView listView;
     private ProgressDialog progressDialog;
     private List<BaseListElement> listElements;
     private ProfilePictureView profilePictureView;
-    private TextView userNameView;
     private boolean pendingAnnounce;
     private MainActivity activity;
     private Uri photoUri;
+    private ImageView photoThumbnail;
 
     private UiLifecycleHelper uiHelper;
     private Session.StatusCallback sessionCallback = new Session.StatusCallback() {
@@ -136,14 +137,25 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
 
         profilePictureView = (ProfilePictureView) view.findViewById(R.id.selection_profile_pic);
         profilePictureView.setCropped(true);
-        userNameView = (TextView) view.findViewById(R.id.selection_user_name);
-        announceButton = (Button) view.findViewById(R.id.announce_button);
+        announceButton = (TextView) view.findViewById(R.id.announce_text);
+        messageButton = (TextView) view.findViewById(R.id.message_text);
         listView = (ListView) view.findViewById(R.id.selection_list);
+        photoThumbnail = (ImageView) view.findViewById(R.id.selected_image);
+
+        if (FacebookDialog.canPresentOpenGraphMessageDialog(activity)) {
+            messageButton.setVisibility(View.VISIBLE);
+        }
 
         announceButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                handleAnnounce();
+                handleAnnounce(false);
+            }
+        });
+        messageButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                handleAnnounce(true);
             }
         });
 
@@ -190,7 +202,7 @@ public void onDestroy() {
      */
     private void tokenUpdated() {
         if (pendingAnnounce) {
-            handleAnnounce();
+            handleAnnounce(false);
         }
     }
 
@@ -203,7 +215,6 @@ private void onSessionStateChange(final Session session, SessionState state, Exc
             }
         } else {
             profilePictureView.setProfileId(null);
-            userNameView.setText("");
         }
     }
 
@@ -214,7 +225,6 @@ public void onCompleted(GraphUser user, Response response) {
                 if (session == Session.getActiveSession()) {
                     if (user != null) {
                         profilePictureView.setProfileId(user.getId());
-                        userNameView.setText(user.getName());
                     }
                 }
                 if (response.getError() != null) {
@@ -231,6 +241,7 @@ public void onCompleted(GraphUser user, Response response) {
      */
     private void init(Bundle savedInstanceState) {
         announceButton.setEnabled(false);
+        messageButton.setEnabled(false);
 
         listElements = new ArrayList<BaseListElement>();
 
@@ -254,7 +265,7 @@ private void init(Bundle savedInstanceState) {
         }
     }
 
-    private void handleAnnounce() {
+    private void handleAnnounce(boolean isMessage) {
         pendingAnnounce = false;
         Session session = Session.getActiveSession();
 
@@ -263,7 +274,11 @@ private void handleAnnounce() {
         if (session != null && session.isOpened()) {
             handleGraphApiAnnounce();
         } else {
-            handleNativeShareAnnounce();
+            if (isMessage) {
+                handleNativeMessageAnnounce();
+            } else {
+                handleNativeShareAnnounce();
+            }
         }
     }
 
@@ -382,6 +397,43 @@ private void handleNativeShareAnnounce() {
         return builder;
     }
 
+    private void handleNativeMessageAnnounce() {
+        FacebookDialog.OpenGraphMessageDialogBuilder builder = createMessageDialogBuilder();
+        if (builder.canPresent()) {
+            uiHelper.trackPendingDialogCall(builder.build().present());
+        } else {
+            // If we can't show the native open graph share dialog because the Messenger app
+            // does not support it, then show then settings fragment so the user can log in.
+            activity.showSettingsFragment();
+        }
+    }
+
+    private FacebookDialog.OpenGraphMessageDialogBuilder createMessageDialogBuilder() {
+        EatAction eatAction = createEatAction();
+
+        boolean userGenerated = false;
+        if (photoUri != null) {
+            String photoUriString = photoUri.toString();
+            Pair<File, Integer> fileAndMinDimemsion = getImageFileAndMinDimension();
+            userGenerated = fileAndMinDimemsion.second >= USER_GENERATED_MIN_SIZE;
+
+            // If we have a content: URI, we can just use that URI, otherwise we'll need to add it as an attachment.
+            if (fileAndMinDimemsion != null && photoUri.getScheme().startsWith("content")) {
+                eatAction.setImage(getImageListForAction(photoUriString, userGenerated));
+            }
+        }
+
+        FacebookDialog.OpenGraphMessageDialogBuilder builder = new FacebookDialog.OpenGraphMessageDialogBuilder(
+                getActivity(), eatAction, "meal")
+                .setFragment(SelectionFragment.this);
+
+        if (photoUri != null && !photoUri.getScheme().startsWith("content")) {
+            builder.setImageAttachmentFilesForAction(Arrays.asList(new File(photoUri.getPath())), userGenerated);
+        }
+
+        return builder;
+    }
+
     private Pair<File, Integer> getImageFileAndMinDimension() {
         File photoFile = null;
         String photoUriString = photoUri.toString();
@@ -628,9 +680,9 @@ private void startPickerActivity(Uri data, int requestCode) {
         private String foodChoice = null;
 
         public EatListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_eating),
+            super(getActivity().getResources().getDrawable(R.drawable.add_food),
                     getActivity().getResources().getString(R.string.action_eating),
-                    getActivity().getResources().getString(R.string.action_eating_default),
+                    null,
                     requestCode);
             foodChoices = getActivity().getResources().getStringArray(R.array.food_types);
             foodUrls = getActivity().getResources().getStringArray(R.array.food_og_urls);
@@ -737,9 +789,11 @@ private void setFoodText() {
             if (foodChoice != null && foodChoice.length() > 0) {
                 setText2(foodChoice);
                 announceButton.setEnabled(true);
+                messageButton.setEnabled(true);
             } else {
                 setText2(getActivity().getResources().getString(R.string.action_eating_default));
                 announceButton.setEnabled(false);
+                messageButton.setEnabled(false);
             }
         }
     }
@@ -751,9 +805,9 @@ private void setFoodText() {
         private List<GraphUser> selectedUsers;
 
         public PeopleListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_people),
+            super(getActivity().getResources().getDrawable(R.drawable.add_friends),
                     getActivity().getResources().getString(R.string.action_people),
-                    getActivity().getResources().getString(R.string.action_people_default),
+                    null,
                     requestCode);
         }
 
@@ -874,9 +928,9 @@ private void setUsersText() {
         private GraphPlace selectedPlace = null;
 
         public LocationListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_location),
+            super(getActivity().getResources().getDrawable(R.drawable.add_location),
                     getActivity().getResources().getString(R.string.action_location),
-                    getActivity().getResources().getString(R.string.action_location_default),
+                    null,
                     requestCode);
         }
 
@@ -956,9 +1010,9 @@ private void setPlaceText() {
         private Uri tempUri = null;
 
         public PhotoListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_photo),
+            super(getActivity().getResources().getDrawable(R.drawable.add_photo),
                     getActivity().getResources().getString(R.string.action_photo),
-                    getActivity().getResources().getString(R.string.action_photo_default),
+                    null,
                     requestCode);
             photoUri = null;
         }
@@ -980,6 +1034,7 @@ protected void onActivityResult(Intent data) {
             } else if (data != null) {
                 photoUri = data.getData();
             }
+            setPhotoThumbnail();
             setPhotoText();
         }
 
@@ -1030,6 +1085,10 @@ private void setPhotoText() {
                 setText2(getResources().getString(R.string.action_photo_ready));
             }
         }
+        
+        private void setPhotoThumbnail() {
+            photoThumbnail.setImageURI(photoUri);
+        }
 
         private void startCameraActivity() {
             Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
@@ -1093,7 +1152,12 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     text1.setText(listElement.getText1());
                 }
                 if (text2 != null) {
-                    text2.setText(listElement.getText2());
+                    if (listElement.getText2() != null) {
+                        text2.setVisibility(View.VISIBLE);
+                        text2.setText(listElement.getText2());
+                    } else {
+                        text2.setVisibility(View.GONE);
+                    }
                 }
             }
             return view;
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
index f85fb29df..c89ebbb50 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
@@ -22,10 +22,11 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
+import android.widget.TextView;
 
 public class SplashFragment extends Fragment {
 
-    private Button skipLoginButton;
+    private TextView skipLoginButton;
     private SkipLoginCallback skipLoginCallback;
 
     public interface SkipLoginCallback {
@@ -37,7 +38,7 @@
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         View view = inflater.inflate(R.layout.splash, container, false);
 
-        skipLoginButton = (Button) view.findViewById(R.id.skip_login_button);
+        skipLoginButton = (TextView) view.findViewById(R.id.skip_login_button);
         skipLoginButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -54,3 +55,4 @@ public void setSkipLoginCallback(SkipLoginCallback callback) {
         skipLoginCallback = callback;
     }
 }
+
diff --git a/samples/SessionLoginSample/.classpath b/samples/SessionLoginSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/SessionLoginSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/SessionLoginSample/.project b/samples/SessionLoginSample/.project
deleted file mode 100644
index a6c125972..000000000
--- a/samples/SessionLoginSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>SessionLoginSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/SessionLoginSample/AndroidManifest.xml b/samples/SessionLoginSample/AndroidManifest.xml
deleted file mode 100644
index be2beb9be..000000000
--- a/samples/SessionLoginSample/AndroidManifest.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.samples.sessionlogin"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-
-    <application
-        android:icon="@drawable/icon"
-        android:label="@string/app_name" >
-        <activity
-            android:name=".SessionLoginSampleActivity"
-            android:label="@string/app_name"
-            android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity
-                android:name=".LoginUsingActivityActivity">
-        </activity>
-        <activity
-                android:name=".LoginUsingCustomFragmentActivity">
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <activity android:name=".LoginUsingLoginFragmentActivity"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id" />
-    </application>
-
-</manifest>
diff --git a/samples/SessionLoginSample/ant.properties b/samples/SessionLoginSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/SessionLoginSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/SessionLoginSample/build.gradle b/samples/SessionLoginSample/build.gradle
deleted file mode 100644
index a2cda0280..000000000
--- a/samples/SessionLoginSample/build.gradle
+++ /dev/null
@@ -1,23 +0,0 @@
-apply plugin: 'android'
-
-dependencies {
-    compile project(':facebook')
-}
-
-android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/build.xml b/samples/SessionLoginSample/build.xml
deleted file mode 100644
index 4f044bbee..000000000
--- a/samples/SessionLoginSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="SessionLoginSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env" />
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME" />
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/samples/SessionLoginSample/proguard-project.txt b/samples/SessionLoginSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/SessionLoginSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/SessionLoginSample/project.properties b/samples/SessionLoginSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/SessionLoginSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/SessionLoginSample/res/drawable-hdpi/icon.png b/samples/SessionLoginSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 78d41ad5f..000000000
Binary files a/samples/SessionLoginSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable-mdpi/icon.png b/samples/SessionLoginSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 22598aa33..000000000
Binary files a/samples/SessionLoginSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable-xhdpi/icon.png b/samples/SessionLoginSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index a2c3cb4b2..000000000
Binary files a/samples/SessionLoginSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable/icon.png b/samples/SessionLoginSample/res/drawable/icon.png
deleted file mode 100644
index 22598aa33..000000000
Binary files a/samples/SessionLoginSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/layout/activity.xml b/samples/SessionLoginSample/res/layout/activity.xml
deleted file mode 100644
index 52ca3daf9..000000000
--- a/samples/SessionLoginSample/res/layout/activity.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <TextView
-        android:id="@+id/instructionsOrLink"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/instructions"
-        android:autoLink="web"
-        android:linksClickable="true"
-        android:textAppearance="?android:attr/textAppearanceMedium" />
-
-    <Button
-        android:id="@+id/buttonLoginLogout"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/login" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml b/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml
deleted file mode 100644
index 09e8eb440..000000000
--- a/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <fragment android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:id="@+id/fragment"
-              android:name="com.facebook.samples.sessionlogin.SessionLoginFragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/fragment.xml b/samples/SessionLoginSample/res/layout/fragment.xml
deleted file mode 100644
index 8b3bbf7db..000000000
--- a/samples/SessionLoginSample/res/layout/fragment.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-              android:orientation="vertical">
-
-<TextView
-            android:id="@+id/instructionsOrLink"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/instructions"
-            android:autoLink="web"
-            android:linksClickable="true"
-            android:textAppearance="?android:attr/textAppearanceMedium" />
-
-    <Button
-            android:id="@+id/buttonLoginLogout"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/login_fragment_activity.xml b/samples/SessionLoginSample/res/layout/login_fragment_activity.xml
deleted file mode 100644
index 8ad44a93c..000000000
--- a/samples/SessionLoginSample/res/layout/login_fragment_activity.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <fragment android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:id="@+id/login_fragment"
-              android:name="com.facebook.widget.UserSettingsFragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/main.xml b/samples/SessionLoginSample/res/layout/main.xml
deleted file mode 100644
index a8042a2c1..000000000
--- a/samples/SessionLoginSample/res/layout/main.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <Button
-        android:id="@+id/buttonLoginActivity"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/login_using_activity" />
-
-    <Button
-            android:id="@+id/buttonLoginCustomFragment"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login_using_custom_fragment" />
-
-    <Button
-            android:id="@+id/buttonLoginFragment"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login_using_usersettingsfragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/values/strings.xml b/samples/SessionLoginSample/res/values/strings.xml
deleted file mode 100644
index bcece0ad1..000000000
--- a/samples/SessionLoginSample/res/values/strings.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-
-    <string name="login_using_activity">Login using Activity</string>
-    <string name="login_using_custom_fragment">Login using Custom Fragment</string>
-    <string name="login_using_usersettingsfragment">Login using UserSettingsFragment</string>
-    <string name="hello">Hello World, SessionLoginSampleActivity!</string>
-    <string name="app_name">SessionLoginSample</string>
-    <string name="login">Login</string>
-    <string name="instructions">Login to create a link to fetch account data</string>
-    <string name="logout">Log out</string>
-    <string name="app_id">380615018626574</string>
-
-</resources>
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
deleted file mode 100644
index df4049f65..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.LoggingBehavior;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.Settings;
-
-public class LoginUsingActivityActivity extends Activity {
-    private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";
-
-    private TextView textInstructionsOrLink;
-    private Button buttonLoginLogout;
-    private Session.StatusCallback statusCallback = new SessionStatusCallback();
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity);
-        buttonLoginLogout = (Button)findViewById(R.id.buttonLoginLogout);
-        textInstructionsOrLink = (TextView)findViewById(R.id.instructionsOrLink);
-
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        Session session = Session.getActiveSession();
-        if (session == null) {
-            if (savedInstanceState != null) {
-                session = Session.restoreSession(this, null, statusCallback, savedInstanceState);
-            }
-            if (session == null) {
-                session = new Session(this);
-            }
-            Session.setActiveSession(session);
-            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
-                session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-            }
-        }
-
-        updateView();
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Session.getActiveSession().addCallback(statusCallback);
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-        Session.getActiveSession().removeCallback(statusCallback);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        Session session = Session.getActiveSession();
-        Session.saveSession(session, outState);
-    }
-
-    private void updateView() {
-        Session session = Session.getActiveSession();
-        if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
-            buttonLoginLogout.setText(R.string.logout);
-            buttonLoginLogout.setOnClickListener(new OnClickListener() {
-                public void onClick(View view) { onClickLogout(); }
-            });
-        } else {
-            textInstructionsOrLink.setText(R.string.instructions);
-            buttonLoginLogout.setText(R.string.login);
-            buttonLoginLogout.setOnClickListener(new OnClickListener() {
-                public void onClick(View view) { onClickLogin(); }
-            });
-        }
-    }
-
-    private void onClickLogin() {
-        Session session = Session.getActiveSession();
-        if (!session.isOpened() && !session.isClosed()) {
-            session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-        } else {
-            Session.openActiveSession(this, true, statusCallback);
-        }
-    }
-
-    private void onClickLogout() {
-        Session session = Session.getActiveSession();
-        if (!session.isClosed()) {
-            session.closeAndClearTokenInformation();
-        }
-    }
-
-    private class SessionStatusCallback implements Session.StatusCallback {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            updateView();
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java
deleted file mode 100644
index 1e06f6999..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-
-public class LoginUsingCustomFragmentActivity extends FragmentActivity {
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.custom_fragment_activity);
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java
deleted file mode 100644
index 59f54c603..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.util.Log;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.widget.UserSettingsFragment;
-
-public class LoginUsingLoginFragmentActivity extends FragmentActivity {
-    private UserSettingsFragment userSettingsFragment;
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.login_fragment_activity);
-
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        userSettingsFragment = (UserSettingsFragment) fragmentManager.findFragmentById(R.id.login_fragment);
-        userSettingsFragment.setSessionStatusCallback(new Session.StatusCallback() {
-            @Override
-            public void call(Session session, SessionState state, Exception exception) {
-                Log.d("LoginUsingLoginFragmentActivity", String.format("New session state: %s", state.toString()));
-            }
-        });
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        userSettingsFragment.onActivityResult(requestCode, resultCode, data);
-        super.onActivityResult(requestCode, resultCode, data);
-    }
-
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java
deleted file mode 100644
index 18ec1b098..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.LoggingBehavior;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.Settings;
-
-public class SessionLoginFragment extends Fragment {
-    private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";
-
-    private TextView textInstructionsOrLink;
-    private Button buttonLoginLogout;
-    private Session.StatusCallback statusCallback = new SessionStatusCallback();
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment, container, false);
-
-        buttonLoginLogout = (Button) view.findViewById(R.id.buttonLoginLogout);
-        textInstructionsOrLink = (TextView) view.findViewById(R.id.instructionsOrLink);
-
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        Session session = Session.getActiveSession();
-        if (session == null) {
-            if (savedInstanceState != null) {
-                session = Session.restoreSession(getActivity(), null, statusCallback, savedInstanceState);
-            }
-            if (session == null) {
-                session = new Session(getActivity());
-            }
-            Session.setActiveSession(session);
-            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
-                session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-            }
-        }
-
-        updateView();
-
-        return view;
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Session.getActiveSession().addCallback(statusCallback);
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-        Session.getActiveSession().removeCallback(statusCallback);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        Session.getActiveSession().onActivityResult(getActivity(), requestCode, resultCode, data);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        Session session = Session.getActiveSession();
-        Session.saveSession(session, outState);
-    }
-
-    private void updateView() {
-        Session session = Session.getActiveSession();
-        if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
-            buttonLoginLogout.setText(R.string.logout);
-            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View view) { onClickLogout(); }
-            });
-        } else {
-            textInstructionsOrLink.setText(R.string.instructions);
-            buttonLoginLogout.setText(R.string.login);
-            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View view) { onClickLogin(); }
-            });
-        }
-    }
-
-    private void onClickLogin() {
-        Session session = Session.getActiveSession();
-        if (!session.isOpened() && !session.isClosed()) {
-            session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-        } else {
-            Session.openActiveSession(getActivity(), this, true, statusCallback);
-        }
-    }
-
-    private void onClickLogout() {
-        Session session = Session.getActiveSession();
-        if (!session.isClosed()) {
-            session.closeAndClearTokenInformation();
-        }
-    }
-
-    private class SessionStatusCallback implements Session.StatusCallback {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            updateView();
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
deleted file mode 100644
index 9c64116da..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import com.facebook.AppEventsLogger;
-
-public class SessionLoginSampleActivity extends Activity {
-
-    private Button buttonLoginActivity;
-    private Button buttonCustomFragment;
-    private Button buttonLoginFragment;
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.main);
-
-        // We demonstrate three different ways of managing session login/logout behavior:
-        // 1) LoginUsingActivityActivity implements an Activity that handles all of its own
-        //    session management.
-        // 2) LoginUsingCustomFragmentActivity uses a Fragment that handles session management;
-        //    this Fragment could be composed as part of a more complex Activity, although in this
-        //    case it is the only UI that the Activity displays.
-        // 3) LoginUsingLoginFragmentActivity is similar to LoginUsingCustomFragmentActivity, but
-        //    uses the UserSettingsFragment class provided by the SDK to handle session management. As
-        //    in (2), this Fragment could be composed as part of a more complex Activity in a real app.
-        buttonLoginActivity = (Button) findViewById(R.id.buttonLoginActivity);
-        buttonLoginActivity.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingActivityActivity.class);
-                startActivity(intent);
-            }
-        });
-
-        buttonCustomFragment = (Button) findViewById(R.id.buttonLoginCustomFragment);
-        buttonCustomFragment.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingCustomFragmentActivity.class);
-                startActivity(intent);
-            }
-        });
-
-        buttonLoginFragment = (Button) findViewById(R.id.buttonLoginFragment);
-        buttonLoginFragment.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingLoginFragmentActivity.class);
-                startActivity(intent);
-            }
-        });
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
-        // the onResume methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.activateApp(this);
-    }
-}
diff --git a/samples/SwitchUserSample/build.gradle b/samples/SwitchUserSample/build.gradle
index a2cda0280..b76fed903 100644
--- a/samples/SwitchUserSample/build.gradle
+++ b/samples/SwitchUserSample/build.gradle
@@ -5,12 +5,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/scripts/configure_unit_tests.sh b/scripts/configure_unit_tests.sh
index a6b85224e..237cf91b2 100755
--- a/scripts/configure_unit_tests.sh
+++ b/scripts/configure_unit_tests.sh
@@ -23,12 +23,13 @@ cd $(dirname $0)/..
 FB_SDK_ROOT=$(pwd)
 FB_SDK_TESTS=$FB_SDK_ROOT/facebook/tests
 
-if [ "$#" -lt 2 ]; then
-    echo "Usage: $0 APP_ID APP_SECRET [MACHINE_UNIQUE_USER_KEY]"
-    echo "  APP_ID                   your unit-testing Facebook application's App ID"
-    echo "  APP_SECRET               your unit-testing Facebook application's App Secret"
-    echo "  MACHINE_UNIQUE_USER_TAG  optional text used to ensure this machine will use its own set of test users rather than sharing"
-    die 'Arguments do not conform to usage'
+if [ "$#" -lt 3 ]; then
+      echo "Usage: $0 APP_ID APP_SECRET CLIENT_TOKEN [MACHINE_UNIQUE_USER_KEY]"
+      echo "  APP_ID                   your unit-testing Facebook application's App ID"
+      echo "  APP_SECRET               your unit-testing Facebook application's App Secret"
+      echo "  CLIENT_TOKEN             your unit-testing Facebook application's client token"
+      echo "  MACHINE_UNIQUE_USER_TAG  optional text used to ensure this machine will use its own set of test users rather than sharing"
+      die 'Arguments do not conform to usage'
 fi
 
 function write_config_json {
@@ -39,7 +40,7 @@ function write_config_json {
     # use heredoc syntax to output the json
     cat > "$CONFIG_JSON_FILE" \
 <<DELIMIT
-{"applicationId":"$1","applicationSecret":"$2","machineUniqueUserTag":"$3"}
+{"applicationId":"$1","applicationSecret":"$2","clientToken":"$3","machineUniqueUserTag":"$4"}
 DELIMIT
 # end heredoc
 
diff --git a/settings.gradle b/settings.gradle
index 8fb89427e..09b84aeee 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -10,19 +10,15 @@ project(':tests').projectDir = new File('facebook/tests')
 // Samples
 include 'FriendPickerSample'
 project(':FriendPickerSample').projectDir = new File('samples/FriendPickerSample')
-include 'GraphApiSample'
-project(':GraphApiSample').projectDir = new File('samples/GraphApiSample')
 include 'HelloFacebookSample'
 project(':HelloFacebookSample').projectDir = new File('samples/HelloFacebookSample')
 include 'PlacePickerSample'
 project(':PlacePickerSample').projectDir = new File('samples/PlacePickerSample')
-include 'ProfilePictureSample'
-project(':ProfilePictureSample').projectDir = new File('samples/ProfilePictureSample')
 include 'RPSSample'
 project(':RPSSample').projectDir = new File('samples/RPSSample')
 include 'Scrumptious'
 project(':Scrumptious').projectDir = new File('samples/Scrumptious')
-include 'SessionLoginSample'
-project(':SessionLoginSample').projectDir = new File('samples/SessionLoginSample')
 include 'SwitchUserSample'
 project(':SwitchUserSample').projectDir = new File('samples/SwitchUserSample')
+
+
diff --git a/tests/AndroidManifest.xml b/tests/AndroidManifest.xml
deleted file mode 100644
index c0e209de6..000000000
--- a/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook.android.tests"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <application android:icon="@drawable/icon" android:label="@string/app_name">
-        <activity android:name=".Tests"
-                  android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-    </application>
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="3" />
-</manifest> 
diff --git a/tests/res/drawable/icon.png b/tests/res/drawable/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/tests/res/drawable/icon.png and /dev/null differ
diff --git a/tests/res/layout/main.xml b/tests/res/layout/main.xml
deleted file mode 100644
index 7134549a8..000000000
--- a/tests/res/layout/main.xml
+++ /dev/null
@@ -1,89 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="fill_parent"
-    android:layout_height="fill_parent" android:background="@drawable/black"
-    android:gravity="center_horizontal">
-
-    <TextView android:id="@+id/publicTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/publicErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <Button android:id="@+id/login" 
-        android:text="@string/login"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/authenticatedTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/authenticatedErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />  
-    <Button android:id="@+id/post" 
-        android:text="@string/post"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/wallPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/deletedPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        /> 
-    <Button android:id="@+id/logout" 
-        android:text="@string/logout"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/logoutTest" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-</LinearLayout>
diff --git a/tests/res/values/colors.xml b/tests/res/values/colors.xml
deleted file mode 100644
index 43a557808..000000000
--- a/tests/res/values/colors.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <drawable name="white">#ffffff</drawable>
-    <drawable name="black">#000000</drawable>
-</resources>
diff --git a/tests/res/values/strings.xml b/tests/res/values/strings.xml
deleted file mode 100644
index a61bf4d4c..000000000
--- a/tests/res/values/strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="hello">Hello World, Tests!</string>
-    <string name="login">Test Login</string>
-    <string name="post">Test UI Server</string>
-    <string name="logout">Test Logout</string>
-    <string name="app_name">Functional Tests</string>
-</resources>
diff --git a/tests/src/com/facebook/android/tests/Tests.java b/tests/src/com/facebook/android/tests/Tests.java
deleted file mode 100644
index e3116289e..000000000
--- a/tests/src/com/facebook/android/tests/Tests.java
+++ /dev/null
@@ -1,595 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android.tests;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import org.json.JSONObject;
-
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.DialogError;
-import com.facebook.android.Facebook;
-import com.facebook.android.FacebookError;
-import com.facebook.android.Util;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-import com.facebook.android.Facebook.DialogListener;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-
-public class Tests extends Activity {
-    
-    // Your Facebook Application ID must be set before running this example
-    // See http://www.facebook.com/developers/createapp.php
-    public static final String APP_ID = "110862205611506";
-    
-    private static final String[] PERMISSIONS =
-        new String[] {"publish_stream", "read_stream", "offline_access"};
-    
-    TextView publicTestsText;
-    TextView publicErrorsText;
-    Button loginButton;
-    TextView authenticatedTestsText;
-    TextView authenticatedErrorsText;
-    Button postButton;
-    TextView wallPostText;
-    TextView deletedPostText;
-    Button logoutButton;
-    TextView logoutText;
-    
-    Facebook authenticatedFacebook = new Facebook(APP_ID);
-    
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        
-        publicTestsText = (TextView) findViewById(R.id.publicTests);
-        publicErrorsText = (TextView) findViewById(R.id.publicErrors);
-        loginButton = (Button) findViewById(R.id.login);
-        authenticatedTestsText = (TextView) findViewById(
-                R.id.authenticatedTests);
-        authenticatedErrorsText = (TextView) findViewById(
-                R.id.authenticatedErrors);
-        postButton = (Button) findViewById(R.id.post);
-        wallPostText = (TextView) findViewById(R.id.wallPost);
-        deletedPostText = (TextView) findViewById(R.id.deletedPost);
-        logoutButton = (Button) findViewById(R.id.logout);
-        logoutText = (TextView) findViewById(R.id.logoutTest);
-               
-        // button to test UI Server login method
-        loginButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.authorize(Tests.this, PERMISSIONS,
-                        new TestLoginListener());
-            }
-        });
-        
-        // button for testing UI server publish stream dialog
-        postButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.dialog(Tests.this, "stream.publish", 
-                        new TestUiServerListener());
-            }
-        });
-        
-        // enable logout test button
-        logoutButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                runTestLogout();
-            }
-        });
-        
-        runTestPublicApi();
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        authenticatedFacebook.authorizeCallback(requestCode, resultCode, data);
-    }
-
-    public void runTestPublicApi() {
-        if (testPublicApi()) {
-            publicTestsText.setText("Public API tests passed");
-            publicTestsText.setTextColor(Color.GREEN);
-        } else {
-            publicTestsText.setText("Public API tests failed");
-            publicTestsText.setTextColor(Color.RED);
-        }
-        
-        if (testPublicErrors()) {
-            publicErrorsText.setText("Public API errors passed");
-            publicErrorsText.setTextColor(Color.GREEN);
-        } else {
-            publicErrorsText.setText("Public API errors failed");
-            publicErrorsText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testPublicApi() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Log.d("Tests", "Testing standard API call");
-            JSONObject response = Util.parseJson(fb.request("4"));
-            if (!response.getString("name").equals("Mark Zuckerberg")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing an API call with a specific method");
-            response = Util.parseJson(
-                    fb.request("soneff", new Bundle(), "GET"));
-            if (!response.getString("name").equals("Steven Soneff")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing a public search query");
-            Bundle params = new Bundle();
-            params.putString("q", "facebook");
-            response = Util.parseJson(fb.request("search", params));
-            if (response.getJSONArray("data").length() == 0) return false;
-            
-            Log.d("Tests", "Public API Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testPublicErrors() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Bundle params = new Bundle();
-            
-            Log.d("Tests", "Testing illegal post");
-            params.putString("message", "Hello World");
-            try {
-                Util.parseJson(fb.request("4", params, "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported post request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal delete");
-            try {
-                Util.parseJson(fb.request("4", new Bundle(), "DELETE"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An access token is required to request this " +
-                        "resource.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal post to Zuck's feed");
-            try {
-                Util.parseJson(fb.request("4/feed", new Bundle(), "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("(#200) The user hasn't " +
-                		"authorized the application to perform this action")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalidly specified parameters");
-            try {
-                Util.parseJson(fb.request("bgolub?fields=id,name,picture"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().startsWith("Unknown fields: picture?")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing request for 'me' is rejected without " +
-            		"access_token");
-            try {
-                Util.parseJson(fb.request("me"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An active access token must be used to " +
-                        "query information about the current user.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing empty request");
-            try {
-                Util.parseJson(fb.request(""));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported get request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing an invalid path");
-            try {
-                Util.parseJson(fb.request("invalidinvalidinvalidinvalid"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "(#803) Some of the aliases you requested do not " +
-                        "exist: invalidinvalidinvalidinvalid")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing missing query parameter");
-            try {
-                Util.parseJson(fb.request("search", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("No node specified")) return false;
-            }
-            
-            Log.d("Tests", "Testing that API method is specified");
-            try {
-                fb.request(new Bundle());
-                return false;
-            } catch (IllegalArgumentException e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "API method must be specified. " +
-                        "(parameters must contain key \"method\" " +
-                        "and value). See http://developers.facebook." +
-                        "com/docs/reference/rest/")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing that old API request cannot be made " +
-                           "without access token");
-            params.putString("method", "stream.publish");
-            try {
-                Util.parseJson(fb.request(params));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalid access token");
-            try {
-                fb.setAccessToken("invalid");
-                Util.parseJson(fb.request("me", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Invalid OAuth access token.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Public API Error Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public class TestLoginListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            if (testAuthenticatedApi()) {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests passed");
-                authenticatedTestsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests failed");
-                authenticatedTestsText.setTextColor(Color.RED);
-            }
-            if (testAuthenticatedErrors()) {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors passed");
-                authenticatedErrorsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors failed");
-                authenticatedErrorsText.setTextColor(Color.RED);
-            }
-        }
-
-        public void onCancel() {
-        }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testAuthenticatedApi() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        try {
-            Log.d("Tests", "Testing request for 'me'");
-            String response = authenticatedFacebook.request("me");
-            JSONObject obj = Util.parseJson(response);
-            if (obj.getString("name") == null || 
-                    obj.getString("name").equals("")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API wall post");
-            Bundle parameters = new Bundle();
-            parameters.putString("message", "hello world");
-            parameters.putString("description", "test test test");
-            response = authenticatedFacebook.request("me/feed", parameters, 
-                    "POST");
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API delete");
-            response = response.replaceAll("\\{\"id\":\"", "");
-            response = response.replaceAll("\"\\}", "");
-            response = authenticatedFacebook.request(response, new Bundle(), 
-                    "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "Testing old API wall post");
-            parameters = new Bundle();
-            parameters.putString("method", "stream.publish");
-            parameters.putString("attachment", 
-                "{\"name\":\"Name=Title\"," +
-                "\"href\":\"http://www.google.fr/\",\"" +
-                "caption\":\"Caption\",\"description\":\"Description" +
-                "\",\"media\":[{\"type\":\"image\",\"src\":" +
-                "\"http://www.kratiroff.com/logo-facebook.jpg\"," +
-                "\"href\":\"http://developers.facebook.com/\"}]," +
-                "\"properties\":{\"another link\":{\"text\":\"" +
-                "Facebook homepage\",\"href\":\"http://www.facebook." +
-                "com\"}}}");;
-            response = authenticatedFacebook.request(parameters);
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing wall post delete");
-            response = response.replaceAll("\"", "");
-            response = authenticatedFacebook.request(
-                    response, new Bundle(), "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "All Authenticated Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testAuthenticatedErrors() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        
-        Log.d("Tests", "Testing that request for 'me/invalid' is rejected");
-        try {
-            Util.parseJson(authenticatedFacebook.request("me/invalid"));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown path components: /invalid")) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "Testing that old API call with invalid method fails");
-        Bundle params = new Bundle();
-        params.putString("method", "something_invalid");
-        try {
-            Util.parseJson(authenticatedFacebook.request(params));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown method") ) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "All Authenticated Error Tests Passed");
-        return true;
-    }
-    
-    public class TestUiServerListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                Log.d("Facebook-Example", "Dialog Success! post_id=" + postId);
-                new AsyncFacebookRunner(authenticatedFacebook).request(postId, 
-                        new TestPostRequestListener());
-            } else {
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onCancel() { }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public class TestPostRequestListener implements RequestListener {
-        
-        public void onComplete(final String response, final Object state) {
-            Log.d("Tests", "Got response: " + response);
-            try {
-                JSONObject json = Util.parseJson(response);
-                //final String message = json.getString("message");
-                String postId = json.getString("id");
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Success");
-                        wallPostText.setTextColor(Color.GREEN);
-                    }
-                });
-                
-                Log.d("Tests", "Testing wall post delete");
-                if (testPostDelete(postId)) {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Success");
-                            deletedPostText.setTextColor(Color.GREEN);
-                        }
-                    });
-                } else {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Failure");
-                            deletedPostText.setTextColor(Color.RED);
-                        }
-                    });
-                }
-            } catch (Throwable e) {
-                e.printStackTrace();
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onFacebookError(FacebookError e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onFileNotFoundException(FileNotFoundException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onIOException(IOException e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onMalformedURLException(MalformedURLException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testPostDelete(String postId) {
-        try {
-            String deleteResponse = 
-                authenticatedFacebook.request(postId, new Bundle(), "DELETE");
-            return deleteResponse.equals("true");
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public void runTestLogout() {
-        if (testLogout()) {
-            logoutText.setText("Logout Tests Passed");
-            logoutText.setTextColor(Color.GREEN);
-        } else {
-            logoutText.setText("Logout Tests Failed");
-            logoutText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testLogout() {
-        try {
-            Log.d("Tests", "Testing logout");
-            String response = authenticatedFacebook.logout(this);
-            Log.d("Tests", "Got logout response: *" + response + "*");
-            if (!response.equals("true")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing logout on logged out facebook session");
-            try {
-                Util.parseJson(authenticatedFacebook.logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing logout on unauthenticated object");
-            try {
-                Util.parseJson(new Facebook(APP_ID).logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "All Logout Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    // test bad UI server method?
-    
-    // test invalid permission? <-- UI server test
-}
