diff --git a/facebook/build.gradle b/facebook/build.gradle
index f56c38be8..08e49db22 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -7,14 +7,14 @@ repositories {
 project.group = 'com.facebook.android'
 
 dependencies {
-    // Facbook Dependancies
-    compile 'com.android.support:support-v4:(23,24]'
-    compile 'com.android.support:cardview-v7:(23,24]'
-    compile 'com.parse.bolts:bolts-tasks:1.3.0'
-    compile 'com.parse.bolts:bolts-applinks:1.3.0'
+    // Facbook Dependencies
+    compile 'com.android.support:support-v4:23.2.1'
+    compile 'com.android.support:cardview-v7:23.2.1'
+    compile 'com.android.support:customtabs:23.2.1'
+    compile 'com.parse.bolts:bolts-android:1.4.0'
 
     // Unit Tests
-    testCompile 'com.android.support:appcompat-v7:(23,24]'
+    testCompile 'com.android.support:appcompat-v7:23.2.1'
 
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
diff --git a/facebook/src/main/java/com/facebook/AccessTokenSource.java b/facebook/src/main/java/com/facebook/AccessTokenSource.java
index 622c3fe5d..64f077004 100644
--- a/facebook/src/main/java/com/facebook/AccessTokenSource.java
+++ b/facebook/src/main/java/com/facebook/AccessTokenSource.java
@@ -48,7 +48,12 @@
      * Indicates an access token was obtained by the user logging in through the
      * Web-based dialog.
      */
-    WEB_VIEW(false),
+    WEB_VIEW(true),
+    /**
+     * Indicates an access token was obtained by the user logging in through the
+     * Web-based dialog on a Chrome Custom Tab.
+     */
+    CUSTOM_TAB(true),
     /**
      * Indicates an access token is for a test user rather than an actual
      * Facebook user.
diff --git a/facebook/src/main/java/com/facebook/CustomTabActivity.java b/facebook/src/main/java/com/facebook/CustomTabActivity.java
new file mode 100644
index 000000000..8cd217204
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/CustomTabActivity.java
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+/*
+ * Login from a custom tab redirects here. Pass the url on to FacebookActivity so it can return the
+ * result.
+ */
+public class CustomTabActivity extends Activity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Intent intent = new Intent(this, FacebookActivity.class);
+        intent.putExtra("url", getIntent().getDataString());
+
+        // these flags will open FacebookActivity from the back stack as well as closing this
+        // activity and the custom tab opened by FacebookActivity
+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+
+        startActivity(intent);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/FacebookActivity.java b/facebook/src/main/java/com/facebook/FacebookActivity.java
index 5b5c85fb6..4527ee0bd 100644
--- a/facebook/src/main/java/com/facebook/FacebookActivity.java
+++ b/facebook/src/main/java/com/facebook/FacebookActivity.java
@@ -22,6 +22,7 @@
 
 import android.content.Intent;
 import android.content.res.Configuration;
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
@@ -29,7 +30,12 @@
 
 import com.facebook.internal.FacebookDialogFragment;
 import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.Utility;
 import com.facebook.login.LoginFragment;
+import com.facebook.login.LoginManager;
+import com.facebook.share.DeviceShareDialog;
+import com.facebook.share.internal.DeviceShareDialogFragment;
+import com.facebook.share.model.ShareContent;
 
 /**
  * This Activity is a necessary part of the overall Facebook SDK,
@@ -49,9 +55,14 @@
 
     public static String PASS_THROUGH_CANCEL_ACTION = "PassThrough";
     private static String FRAGMENT_TAG = "SingleFragment";
+    private static final int API_EC_DIALOG_CANCEL = 4201;
 
     private Fragment singleFragment;
 
+    private static final String getRedirectUrl() {
+        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
+    }
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -72,6 +83,12 @@ public void onCreate(Bundle savedInstanceState) {
                 dialogFragment.setRetainInstance(true);
                 dialogFragment.show(manager, FRAGMENT_TAG);
 
+                fragment = dialogFragment;
+            } else if (DeviceShareDialogFragment.TAG.equals(intent.getAction())) {
+                DeviceShareDialogFragment dialogFragment = new DeviceShareDialogFragment();
+                dialogFragment.setRetainInstance(true);
+                dialogFragment.setShareContent((ShareContent) intent.getParcelableExtra("content"));
+                dialogFragment.show(manager, FRAGMENT_TAG);
                 fragment = dialogFragment;
             } else {
                 fragment = new LoginFragment();
@@ -94,6 +111,17 @@ public void onConfigurationChanged(Configuration newConfig) {
         }
     }
 
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        String url = intent.getStringExtra("url");
+        handlePassThroughUrl(url);
+    }
+
+    public Fragment getCurrentFragment() {
+        return singleFragment;
+    }
+
     private void handlePassThroughError() {
         Intent requestIntent = getIntent();
 
@@ -101,17 +129,72 @@ private void handlePassThroughError() {
         Bundle errorResults = NativeProtocol.getMethodArgumentsFromIntent(requestIntent);
         FacebookException exception = NativeProtocol.getExceptionFromErrorData(errorResults);
 
-        // Create a result intent that is formed based on the request intent
-        Intent resultIntent = NativeProtocol.createProtocolResultIntent(
-                requestIntent,
-                null,
-                exception);
+        sendResult(null, exception);
+    }
 
-        setResult(RESULT_CANCELED, resultIntent);
-        finish();
+    private void handlePassThroughUrl(String url) {
+        if (url != null && url.startsWith(getRedirectUrl())) {
+            Uri uri = Uri.parse(url);
+            Bundle values = Utility.parseUrlQueryString(uri.getQuery());
+            values.putAll(Utility.parseUrlQueryString(uri.getFragment()));
+
+            if (!(singleFragment instanceof LoginFragment)
+                    || !((LoginFragment) singleFragment).validateChallengeParam(values)) {
+                sendResult(null, new FacebookException("Invalid state parameter"));
+            }
+
+            String error = values.getString("error");
+            if (error == null) {
+                error = values.getString("error_type");
+            }
+
+            String errorMessage = values.getString("error_msg");
+            if (errorMessage == null) {
+                errorMessage = values.getString("error_message");
+            }
+            if (errorMessage == null) {
+                errorMessage = values.getString("error_description");
+            }
+            String errorCodeString = values.getString("error_code");
+            int errorCode = FacebookRequestError.INVALID_ERROR_CODE;
+            if (!Utility.isNullOrEmpty(errorCodeString)) {
+                try {
+                    errorCode = Integer.parseInt(errorCodeString);
+                } catch (NumberFormatException ex) {
+                    errorCode = FacebookRequestError.INVALID_ERROR_CODE;
+                }
+            }
+
+            if (Utility.isNullOrEmpty(error) && Utility.isNullOrEmpty(errorMessage)
+                    && errorCode == FacebookRequestError.INVALID_ERROR_CODE) {
+                sendResult(values, null);
+            } else if (error != null && (error.equals("access_denied") ||
+                    error.equals("OAuthAccessDeniedException"))) {
+                sendResult(null, new FacebookOperationCanceledException());
+            } else if (errorCode == API_EC_DIALOG_CANCEL) {
+                sendResult(null, new FacebookOperationCanceledException());
+            } else {
+                FacebookRequestError requestError =
+                        new FacebookRequestError(errorCode, error, errorMessage);
+                sendResult(null, new FacebookServiceException(requestError, errorMessage));
+            }
+        }
     }
 
-    public Fragment getCurrentFragment() {
-        return singleFragment;
+    public void sendResult(Bundle results, FacebookException error) {
+        int resultCode;
+        Intent resultIntent = getIntent();
+        if (error == null) {
+            resultCode = RESULT_OK;
+            LoginManager.setSuccessResult(resultIntent, results);
+        } else {
+            resultCode = RESULT_CANCELED;
+            resultIntent = NativeProtocol.createProtocolResultIntent(
+                    resultIntent,
+                    results,
+                    error);
+        }
+        setResult(resultCode, resultIntent);
+        finish();
     }
 }
diff --git a/facebook/src/main/java/com/facebook/FacebookCallback.java b/facebook/src/main/java/com/facebook/FacebookCallback.java
index 6a7133eb8..b25092c1d 100644
--- a/facebook/src/main/java/com/facebook/FacebookCallback.java
+++ b/facebook/src/main/java/com/facebook/FacebookCallback.java
@@ -45,7 +45,7 @@
     /**
      * Called when the dialog is canceled.
      * <p/>
-     * Note: {@link #onSuccess(RESULT)} will be called instead if any of the following conditions
+     * Note: {@link #onSuccess(Object)} will be called instead if any of the following conditions
      * are true.
      * <ul>
      * <li>
diff --git a/facebook/src/main/java/com/facebook/FacebookRequestError.java b/facebook/src/main/java/com/facebook/FacebookRequestError.java
index f083445b9..1512b6d59 100644
--- a/facebook/src/main/java/com/facebook/FacebookRequestError.java
+++ b/facebook/src/main/java/com/facebook/FacebookRequestError.java
@@ -20,16 +20,16 @@
 
 package com.facebook;
 
+import android.os.Parcel;
+import android.os.Parcelable;
+
 import com.facebook.internal.FacebookRequestErrorClassification;
 import com.facebook.internal.Utility;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.net.HttpURLConnection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * This class represents an error that occurred during a Facebook request.
@@ -39,7 +39,7 @@
  * handling, see <a href="https://developers.facebook.com/docs/reference/api/errors/">
  * https://developers.facebook.com/docs/reference/api/errors/</a>
  */
-public final class FacebookRequestError {
+public final class FacebookRequestError implements Parcelable {
 
     /** Represents an invalid or unknown error code from the server. */
     public static final int INVALID_ERROR_CODE = -1;
@@ -450,6 +450,49 @@ static synchronized FacebookRequestErrorClassification getErrorClassification()
         return appSettings.getErrorClassification();
     }
 
+    public void writeToParcel(Parcel out, int flags) {
+        out.writeInt(this.requestStatusCode);
+        out.writeInt(this.errorCode);
+        out.writeInt(this.subErrorCode);
+        out.writeString(this.errorType);
+        out.writeString(this.errorMessage);
+        out.writeString(this.errorUserTitle);
+        out.writeString(this.errorUserMessage);
+    }
+
+    public static final Parcelable.Creator<FacebookRequestError> CREATOR
+            = new Parcelable.Creator<FacebookRequestError>() {
+        public FacebookRequestError createFromParcel(Parcel in) {
+            return new FacebookRequestError(in);
+        }
+
+        public FacebookRequestError[] newArray(int size) {
+            return new FacebookRequestError[size];
+        }
+    };
+
+    private FacebookRequestError(Parcel in) {
+        this(
+            in.readInt(), //requestStatusCode
+            in.readInt(), //errorCode
+            in.readInt(), //subErrorCode
+            in.readString(), //errorType
+            in.readString(), //errorMessage
+            in.readString(), //errorUserTitle
+            in.readString(), //errorUserMessage
+            false, //errorIsTransient
+            null, //requestResultBody
+            null, //requestResult
+            null, //batchRequestResult
+            null, //connection
+            null //exception)
+        );
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+
     /**
      * An enum that represents the Facebook SDK classification for the error that occurred.
      */
diff --git a/facebook/src/main/java/com/facebook/FacebookSdk.java b/facebook/src/main/java/com/facebook/FacebookSdk.java
index a5c42eb2b..8aa67263f 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdk.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdk.java
@@ -67,6 +67,7 @@
     private static volatile String applicationName;
     private static volatile String appClientToken;
     private static volatile int webDialogTheme;
+    //TODO 10636734: revert intern
     private static final String FACEBOOK_COM = "facebook.com";
     private static volatile String facebookDomain = FACEBOOK_COM;
     private static AtomicLong onProgressThreshold = new AtomicLong(65536);
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
index e07120ccd..855771232 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.10.0";
+    public static final String BUILD = "4.11.0";
 }
diff --git a/facebook/src/main/java/com/facebook/GraphRequest.java b/facebook/src/main/java/com/facebook/GraphRequest.java
index 7552030a7..d0f0e64e1 100644
--- a/facebook/src/main/java/com/facebook/GraphRequest.java
+++ b/facebook/src/main/java/com/facebook/GraphRequest.java
@@ -98,7 +98,7 @@
     private static final String FORMAT_JSON = "json";
     private static final String SDK_PARAM = "sdk";
     private static final String SDK_ANDROID = "android";
-    private static final String ACCESS_TOKEN_PARAM = "access_token";
+    public static final String ACCESS_TOKEN_PARAM = "access_token";
     private static final String BATCH_ENTRY_NAME_PARAM = "name";
     private static final String BATCH_ENTRY_OMIT_RESPONSE_ON_SUCCESS_PARAM =
             "omit_response_on_success";
@@ -1222,7 +1222,7 @@ public static GraphRequestAsyncTask executeBatchAsync(GraphRequestBatch requests
         Validate.notEmptyAndContainsNoNulls(requests, "requests");
 
         GraphRequestAsyncTask asyncTask = new GraphRequestAsyncTask(requests);
-        asyncTask.executeOnExecutor(FacebookSdk.getExecutor(), null);
+        asyncTask.executeOnExecutor(FacebookSdk.getExecutor());
         return asyncTask;
     }
 
@@ -1331,7 +1331,7 @@ public static GraphRequestAsyncTask executeConnectionAsync(
 
         GraphRequestAsyncTask asyncTask = new GraphRequestAsyncTask(connection, requests);
         requests.setCallbackHandler(callbackHandler);
-        asyncTask.executeOnExecutor(FacebookSdk.getExecutor(), null);
+        asyncTask.executeOnExecutor(FacebookSdk.getExecutor());
         return asyncTask;
     }
 
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
index 5b9d2aa4a..ce6beeaab 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -21,11 +21,13 @@
 package com.facebook.appevents;
 
 import android.app.Activity;
+import android.app.Application;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
 import bolts.AppLinks;
@@ -37,6 +39,9 @@
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
 import com.facebook.LoggingBehavior;
+import com.facebook.appevents.internal.ActivityLifecycleTracker;
+import com.facebook.appevents.AppEventsConstants;
+import com.facebook.appevents.internal.Constants;
 import com.facebook.internal.AppEventsLoggerUtility;
 import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Logger;
@@ -176,6 +181,13 @@
     private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT =
             "_fbSourceApplicationHasBeenSet";
 
+    private static final String PUSH_PAYLOAD_KEY = "fb_push_payload";
+    private static final String PUSH_PAYLOAD_CAMPAIGN_KEY = "campaign";
+
+    private static final String APP_EVENT_NAME_PUSH_OPENED = "fb_mobile_push_opened";
+    private static final String APP_EVENT_PUSH_PARAMETER_CAMPAIGN = "fb_push_campaign";
+    private static final String APP_EVENT_PUSH_PARAMETER_ACTION = "fb_push_action";
+
     // Instance member variables
     private final String contextName;
     private final AccessTokenAppIdPair accessTokenAppId;
@@ -191,6 +203,7 @@
     private static String sourceApplication;
     private static boolean isOpenedByApplink;
     private static boolean isActivateAppEventRequested;
+    private static String pushNotificationsRegistrationId;
 
     private static class AccessTokenAppIdPair implements Serializable {
         private static final long serialVersionUID = 1L;
@@ -252,6 +265,41 @@ private Object writeReplace() {
         }
     }
 
+    /**
+     * Notifies the events system that the app has launched and activate and deactivate events
+     * should start being logged automatically. This should be called from the OnCreate method
+     * of you application.
+     *
+     * @param application The running application
+     */
+    public static void activateApp(Application application) {
+        activateApp(application, null);
+    }
+
+    /**
+     * Notifies the events system that the app has launched and activate and deactivate events
+     * should start being logged automatically. This should be called from the OnCreate method
+     * of you application.
+     *
+     * Call this if you wish to use a different Application ID then the one specified in the
+     * Facebook SDK.
+     *
+     * @param application The running application
+     * @param applicationId The application id used to log activate/deactivate events.
+     */
+    public static void activateApp(Application application, String applicationId) {
+        if (!FacebookSdk.isInitialized()) {
+            throw new FacebookException("The Facebook sdk must be initialized before calling " +
+                    "activateApp");
+        }
+
+        if (applicationId == null) {
+            applicationId = FacebookSdk.getApplicationId();
+        }
+
+        ActivityLifecycleTracker.startTracking(application, applicationId);
+    }
+
     /**
      * Notifies the events system that the app has launched & logs an activatedApp event.  Should be
      * called whenever your app becomes active, typically in the onResume() method of each
@@ -262,8 +310,17 @@ private Object writeReplace() {
      *
      * @param context Used to access the applicationId and the attributionId for non-authenticated
      *                users.
+     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
      */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static void activateApp(Context context) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "activateApp events are being logged automatically. " +
+                    "There's no need to call activateApp explicitly, this is safe to remove.");
+            return;
+        }
+
         FacebookSdk.sdkInitialize(context);
         activateApp(context, Utility.getMetadataApplicationId(context));
     }
@@ -275,8 +332,16 @@ public static void activateApp(Context context) {
      *
      * @param context       Used to access the attributionId for non-authenticated users.
      * @param applicationId The specific applicationId to report the activation for.
+     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
      */
+    @Deprecated
     public static void activateApp(Context context, String applicationId) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "activateApp events are being logged automatically. " +
+                    "There's no need to call activateApp explicitly, this is safe to remove.");
+            return;
+        }
+
         if (context == null || applicationId == null) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
@@ -317,8 +382,18 @@ public void run() {
      *
      * @param context Used to access the applicationId and the attributionId for non-authenticated
      *                users.
+     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
+     * be logged automatically.
      */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static void deactivateApp(Context context) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "deactivateApp events are being logged automatically. " +
+                    "There's no need to call deactivateApp, this is safe to remove.");
+            return;
+        }
+
         deactivateApp(context, Utility.getMetadataApplicationId(context));
     }
 
@@ -329,8 +404,17 @@ public static void deactivateApp(Context context) {
      *
      * @param context       Used to access the attributionId for non-authenticated users.
      * @param applicationId The specific applicationId to track session information for.
+     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
+     * be logged automatically.
      */
+    @Deprecated
     public static void deactivateApp(Context context, String applicationId) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "deactivateApp events are being logged automatically. " +
+                    "There's no need to call deactivateApp, this is safe to remove.");
+            return;
+        }
+
         if (context == null || applicationId == null) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
@@ -505,7 +589,12 @@ public void logEvent(String eventName, double valueToSum) {
      *                   should be Strings or numeric values.
      */
     public void logEvent(String eventName, Bundle parameters) {
-        logEvent(eventName, null, parameters, false);
+        logEvent(
+            eventName,
+            null,
+            parameters,
+            false,
+            ActivityLifecycleTracker.getCurrentSessionGuid());
     }
 
     /**
@@ -530,7 +619,12 @@ public void logEvent(String eventName, Bundle parameters) {
      *                   should be Strings or numeric values.
      */
     public void logEvent(String eventName, double valueToSum, Bundle parameters) {
-        logEvent(eventName, valueToSum, parameters, false);
+        logEvent(
+            eventName,
+            valueToSum,
+            parameters,
+            false,
+            ActivityLifecycleTracker.getCurrentSessionGuid());
     }
 
     /**
@@ -578,6 +672,45 @@ public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle par
         eagerFlush();
     }
 
+    /**
+     * Logs an app event that tracks that the application was open via Push Notification.
+     * @param payload Notification payload received.
+     */
+    public void logPushNotificationOpen(Bundle payload) {
+        logPushNotificationOpen(payload, null);
+    }
+
+    /**
+     * Logs an app event that tracks that the application was open via Push Notification.
+     * @param payload Notification payload received.
+     */
+    public void logPushNotificationOpen(Bundle payload, String action) {
+        String campaignId = null;
+        try {
+            String payloadString = payload.getString(PUSH_PAYLOAD_KEY);
+            if (Utility.isNullOrEmpty(payloadString)) {
+                return; // Ignore the payload if no fb push payload is present.
+            }
+
+            JSONObject facebookPayload = new JSONObject(payloadString);
+            campaignId = facebookPayload.getString(PUSH_PAYLOAD_CAMPAIGN_KEY);
+        } catch (JSONException je) {
+            // ignore
+        }
+        if (campaignId == null) {
+            Logger.log(LoggingBehavior.DEVELOPER_ERRORS, TAG,
+                "Malformed payload specified for logging a push notification open.");
+            return;
+        }
+
+        Bundle parameters = new Bundle();
+        parameters.putString(APP_EVENT_PUSH_PARAMETER_CAMPAIGN, campaignId);
+        if (action != null) {
+            parameters.putString(APP_EVENT_PUSH_PARAMETER_ACTION, action);
+        }
+        logEvent(APP_EVENT_NAME_PUSH_OPENED, parameters);
+    }
+
     /**
      * Explicitly flush any stored events to the server.  Implicit flushes may happen depending on
      * the value of getFlushBehavior.  This method allows for explicit, app invoked flushing.
@@ -608,12 +741,27 @@ public boolean isValidForAccessToken(AccessToken accessToken) {
         return accessTokenAppId.equals(other);
     }
 
+    /**
+     * Sets a registration id to register the current app installation for push notifications.
+     * @param registrationId RegistrationId received from GCM.
+     */
+    public static void setPushNotificationsRegistrationId(String registrationId) {
+        synchronized (staticLock) {
+            pushNotificationsRegistrationId = registrationId;
+        }
+    }
+
     /**
      * This method is intended only for internal use by the Facebook SDK and other use is
      * unsupported.
      */
     public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters) {
-        logEvent(eventName, valueToSum, parameters, true);
+        logEvent(
+            eventName,
+            valueToSum,
+            parameters,
+            true,
+            ActivityLifecycleTracker.getCurrentSessionGuid());
     }
 
     /**
@@ -732,13 +880,15 @@ private void logEvent(
             String eventName,
             Double valueToSum,
             Bundle parameters,
-            boolean isImplicitlyLogged) {
+            boolean isImplicitlyLogged,
+            @Nullable final UUID currentSessionId) {
         AppEvent event = new AppEvent(
                 this.contextName,
                 eventName,
                 valueToSum,
                 parameters,
-                isImplicitlyLogged);
+                isImplicitlyLogged,
+                currentSessionId);
         logEvent(applicationContext, event, accessTokenAppId);
     }
 
@@ -938,6 +1088,10 @@ private static GraphRequest buildRequestForSession(
             requestParameters = new Bundle();
         }
         requestParameters.putString("access_token", accessTokenAppId.getAccessTokenString());
+        if (pushNotificationsRegistrationId != null) {
+            requestParameters.putString("device_token", pushNotificationsRegistrationId);
+        }
+
         postRequest.setParameters(requestParameters);
 
         if (fetchedAppSettings == null) {
@@ -1309,7 +1463,8 @@ public AppEvent(
                 String eventName,
                 Double valueToSum,
                 Bundle parameters,
-                boolean isImplicitlyLogged
+                boolean isImplicitlyLogged,
+                @Nullable final UUID currentSessionId
         ) {
             try {
                 validateIdentifier(eventName);
@@ -1319,8 +1474,11 @@ public AppEvent(
                 jsonObject = new JSONObject();
 
                 jsonObject.put("_eventName", eventName);
-                jsonObject.put("_logTime", System.currentTimeMillis() / 1000);
+                jsonObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
                 jsonObject.put("_ui", contextName);
+                if (currentSessionId != null) {
+                    jsonObject.put("_session_id", currentSessionId);
+                }
 
                 if (valueToSum != null) {
                     jsonObject.put("_valueToSum", valueToSum.doubleValue());
diff --git a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
index ad7e40ba9..4dd7cc254 100644
--- a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
+++ b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
@@ -24,6 +24,7 @@
 import android.text.format.DateUtils;
 
 import com.facebook.LoggingBehavior;
+import com.facebook.appevents.AppEventsConstants;
 import com.facebook.internal.Logger;
 
 import java.util.Locale;
@@ -32,7 +33,7 @@
 class FacebookTimeSpentData implements Serializable {
     // Constants
     private static final long serialVersionUID = 1L;
-    private static final String TAG = AppEventsLogger.class.getCanonicalName();
+    private static final String TAG = FacebookTimeSpentData.class.getCanonicalName();
     private static final long FIRST_TIME_LOAD_RESUME_TIME = -1;
     private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
     private static final long NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION =
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
new file mode 100644
index 000000000..bc1a1db10
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
@@ -0,0 +1,265 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.app.Activity;
+import android.app.Application;
+import android.os.Bundle;
+import android.os.Looper;
+import android.util.Log;
+
+import com.facebook.BuildConfig;
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.Utility;
+
+import junit.framework.Assert;
+
+import java.util.UUID;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class ActivityLifecycleTracker {
+    private static final String TAG = ActivityLifecycleTracker.class.getCanonicalName();
+    private static final String INCORRECT_IMPL_WARNING = "Unexpected activity pause without a " +
+            "matching activity resume. Logging data may be incorrect. Make sure you call " +
+            "activateApp from your Application's onCreate method";
+    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
+    private static final ScheduledExecutorService singleThreadExecutor =
+            Executors.newSingleThreadScheduledExecutor();
+    private static volatile ScheduledFuture currentFuture;
+    private static AtomicInteger foregroundActivityCount = new AtomicInteger(0);
+    // This member should only be changed or updated when executing on the singleThreadExecutor.
+    private static volatile SessionInfo currentSession;
+    private static AtomicBoolean tracking = new AtomicBoolean(false);
+    private static String appId;
+
+    public static void startTracking(Application application, final String appId) {
+        if (!tracking.compareAndSet(false, true)) {
+            return;
+        }
+
+        ActivityLifecycleTracker.appId = appId;
+
+        application.registerActivityLifecycleCallbacks(
+                new Application.ActivityLifecycleCallbacks() {
+                    @Override
+                    public void onActivityCreated(
+                            final Activity activity,
+                            Bundle savedInstanceState) {
+                        assertIsMainThread();
+                        ActivityLifecycleTracker.onActivityCreated(activity);
+                    }
+
+                    @Override
+                    public void onActivityStarted(Activity activity) {}
+
+                    @Override
+                    public void onActivityResumed(final Activity activity) {
+                        assertIsMainThread();
+                        ActivityLifecycleTracker.onActivityResumed(activity);
+                    }
+
+                    @Override
+                    public void onActivityPaused(final Activity activity) {
+                        assertIsMainThread();
+                        ActivityLifecycleTracker.onActivityPaused(activity);
+                    }
+
+                    @Override
+                    public void onActivityStopped(Activity activity) {
+                        AppEventsLogger.onContextStop();
+                    }
+
+                    @Override
+                    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+                    }
+
+                    @Override
+                    public void onActivityDestroyed(Activity activity) {
+                    }
+                });
+    }
+
+    public static boolean isTracking() {
+        return tracking.get();
+    }
+
+    public static UUID getCurrentSessionGuid() {
+        return currentSession != null ? currentSession.getSessionId() : null;
+    }
+
+    // Public in order to allow unity sdk to correctly log app events
+    public static void onActivityCreated(final Activity activity) {
+        final long currentTime = System.currentTimeMillis();
+        Runnable handleActivityCreate = new Runnable() {
+            @Override
+            public void run() {
+                if (currentSession == null) {
+                    SessionInfo lastSession =
+                            SessionInfo.getStoredSessionInfo();
+                    if (lastSession != null) {
+                        SessionLogger.logDeactivateApp(
+                                activity,
+                                lastSession,
+                                appId);
+                    }
+
+                    currentSession = new SessionInfo(currentTime, null);
+                    SourceApplicationInfo sourceApplicationInfo =
+                            SourceApplicationInfo.Factory.create(activity);
+                    currentSession.setSourceApplicationInfo(sourceApplicationInfo);
+                    SessionLogger.logActivateApp(
+                            activity,
+                            sourceApplicationInfo,
+                            appId);
+                }
+            }
+        };
+        singleThreadExecutor.execute(handleActivityCreate);
+    }
+
+    private static void onActivityResumed(final Activity activity) {
+        foregroundActivityCount.incrementAndGet();
+        cancelCurrentTask();
+        final long currentTime = System.currentTimeMillis();
+        Runnable handleActivityResume = new Runnable() {
+            @Override
+            public void run() {
+                activity.getCallingActivity();
+                if (currentSession == null) {
+                    currentSession = new SessionInfo(currentTime, null);
+                    SessionLogger.logActivateApp(
+                            activity,
+                            null,
+                            appId);
+                } else if (currentSession.getSessionLastEventTime() != null) {
+                    long suspendTime =
+                            currentTime - currentSession.getSessionLastEventTime();
+                    if (suspendTime > getSessionTimeoutInSeconds() * 1000) {
+                        // We were suspended for a significant amount of time.
+                        // Count this as a new session and log the old session
+                        SessionLogger.logDeactivateApp(
+                                activity,
+                                currentSession,
+                                appId);
+                        SessionLogger.logActivateApp(
+                                activity,
+                                null,
+                                appId);
+                        currentSession = new SessionInfo(currentTime, null);
+                    } else if (suspendTime > INTERRUPTION_THRESHOLD_MILLISECONDS) {
+                        currentSession.incrementInterruptionCount();
+                    }
+                }
+
+                currentSession.setSessionLastEventTime(currentTime);
+                currentSession.writeSessionToDisk();
+            }
+        };
+
+        singleThreadExecutor.execute(handleActivityResume);
+    }
+
+    private static void onActivityPaused(final Activity activity) {
+        int count = foregroundActivityCount.decrementAndGet();
+        if (count < 0) {
+            // Our ref count can be off if a developer doesn't call activate
+            // app from the Application's onCreate method.
+            foregroundActivityCount.set(0);
+
+            Log.w(TAG, INCORRECT_IMPL_WARNING);
+        }
+
+        cancelCurrentTask();
+        final long currentTime = System.currentTimeMillis();
+
+        Runnable handleActivityPaused = new Runnable() {
+            @Override
+            public void run() {
+                if (currentSession == null) {
+                    // This can happen if a developer doesn't call activate
+                    // app from the Application's onCreate method
+                    currentSession = new SessionInfo(currentTime, null);
+                }
+
+                currentSession.setSessionLastEventTime(currentTime);
+                if (foregroundActivityCount.get() <= 0) {
+                    // Schedule check to see if we still have 0 foreground
+                    // activities in our set time. This indicates that the app has
+                    // been backgrounded
+                    Runnable task = new Runnable() {
+                        @Override
+                        public void run() {
+                            if (foregroundActivityCount.get() <= 0) {
+                                SessionLogger.logDeactivateApp(
+                                        activity,
+                                        currentSession,
+                                        appId);
+                                SessionInfo.clearSavedSessionFromDisk();
+                                currentSession = null;
+                            }
+                        }
+                    };
+                    currentFuture = singleThreadExecutor.schedule(
+                            task,
+                            getSessionTimeoutInSeconds(),
+                            TimeUnit.SECONDS);
+
+                }
+
+                currentSession.writeSessionToDisk();
+            }
+        };
+        singleThreadExecutor.execute(handleActivityPaused);
+    }
+
+    private static int getSessionTimeoutInSeconds() {
+        Utility.FetchedAppSettings settings =
+                Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
+        if (settings == null) {
+            return Constants.getDefaultAppEventsSessionTimeoutInSeconds();
+        }
+
+        return settings.getSessionTimeoutInSeconds();
+    }
+
+    private static void cancelCurrentTask() {
+        if (currentFuture != null) {
+            currentFuture.cancel(false);
+        }
+
+        currentFuture = null;
+    }
+
+    private static void assertIsMainThread() {
+        if (BuildConfig.DEBUG){
+            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
+            Assert.assertTrue(
+                    "Activity Lifecycle Callback not runnin on main thread",
+                    isMainThread);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
new file mode 100644
index 000000000..9b0ef4fb1
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
@@ -0,0 +1,29 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+public class Constants {
+    public static final String LOG_TIME_APP_EVENT_KEY = "_logTime";
+
+    public static int getDefaultAppEventsSessionTimeoutInSeconds() {
+        return 60;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
new file mode 100644
index 000000000..7e6b18792
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
@@ -0,0 +1,162 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+
+import com.facebook.FacebookSdk;
+
+import java.util.UUID;
+
+class SessionInfo {
+    private static final String LAST_SESSION_INFO_START_KEY
+            = "com.facebook.appevents.SessionInfo.sessionStartTime";
+    private static final String LAST_SESSION_INFO_END_KEY
+            = "com.facebook.appevents.SessionInfo.sessionEndTime";
+    private static final String INTERRUPTION_COUNT_KEY
+            = "com.facebook.appevents.SessionInfo.interruptionCount";
+    private static final String SESSION_ID_KEY
+            = "com.facebook.appevents.SessionInfo.sessionId";
+
+    private Long sessionStartTime;
+    private Long sessionLastEventTime;
+    private int interruptionCount;
+    private Long diskRestoreTime;
+    private SourceApplicationInfo sourceApplicationInfo;
+    private UUID sessionId;
+
+    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime) {
+        this(sessionStartTime, sessionLastEventTime, UUID.randomUUID());
+    }
+
+    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime, UUID sessionId) {
+        this.sessionStartTime = sessionStartTime;
+        this.sessionLastEventTime = sessionLastEventTime;
+        this.sessionId = sessionId;
+    }
+
+    /**
+     * Performs disk IO. Do not call from main thread
+     * @return
+     */
+    public static SessionInfo getStoredSessionInfo() {
+        SharedPreferences sharedPreferences =
+            PreferenceManager.getDefaultSharedPreferences(
+                    FacebookSdk.getApplicationContext());
+        
+        long startTime = sharedPreferences.getLong(LAST_SESSION_INFO_START_KEY, 0);
+        long endTime = sharedPreferences.getLong(LAST_SESSION_INFO_END_KEY, 0);
+        String sessionIDStr = sharedPreferences.getString(SESSION_ID_KEY, null);
+
+        if (startTime == 0 || endTime == 0 || sessionIDStr == null) {
+            return null;
+        }
+
+        SessionInfo sessionInfo = new SessionInfo(startTime, endTime);
+        sessionInfo.interruptionCount = sharedPreferences.getInt(INTERRUPTION_COUNT_KEY, 0);
+        sessionInfo.sourceApplicationInfo = SourceApplicationInfo.getStoredSourceApplicatioInfo();
+        sessionInfo.diskRestoreTime = System.currentTimeMillis();
+        sessionInfo.sessionId = UUID.fromString(sessionIDStr);
+        return sessionInfo;
+    }
+
+    public static void clearSavedSessionFromDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.remove(LAST_SESSION_INFO_START_KEY);
+        editor.remove(LAST_SESSION_INFO_END_KEY);
+        editor.remove(INTERRUPTION_COUNT_KEY);
+        editor.remove(SESSION_ID_KEY);
+        editor.apply();
+
+        SourceApplicationInfo.clearSavedSourceApplicationInfoFromDisk();
+    }
+
+    public Long getSessionStartTime() {
+        return sessionStartTime;
+    }
+
+    public Long getSessionLastEventTime() {
+        return sessionLastEventTime;
+    }
+
+    public void setSessionStartTime(Long sessionStartTime) {
+        this.sessionStartTime = sessionStartTime;
+    }
+
+    public void setSessionLastEventTime(Long essionLastEventTime) {
+        this.sessionLastEventTime = essionLastEventTime;
+    }
+
+    public int getInterruptionCount() {
+        return interruptionCount;
+    }
+
+    public void incrementInterruptionCount() {
+        interruptionCount++;
+    }
+
+    public long getDiskRestoreTime() {
+        return diskRestoreTime == null ? 0 : diskRestoreTime;
+    }
+
+    public UUID getSessionId() {
+        return sessionId;
+    }
+
+    public long getSessionLength() {
+        if (sessionStartTime == null || sessionLastEventTime == null) {
+            return 0;
+        }
+
+        return sessionLastEventTime - sessionStartTime;
+    }
+
+    public SourceApplicationInfo getSourceApplicationInfo() {
+        return sourceApplicationInfo;
+    }
+
+    public void setSourceApplicationInfo(SourceApplicationInfo sourceApplicationInfo) {
+        this.sourceApplicationInfo = sourceApplicationInfo;
+    }
+
+    /**
+     * Performs disk IO. Do not call from main thread
+     */
+    public void writeSessionToDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putLong(LAST_SESSION_INFO_START_KEY, this.sessionStartTime);
+        editor.putLong(LAST_SESSION_INFO_END_KEY, this.sessionLastEventTime);
+        editor.putInt(INTERRUPTION_COUNT_KEY, this.interruptionCount);
+        editor.putString(SESSION_ID_KEY, this.sessionId.toString());
+        editor.apply();
+
+        if (sourceApplicationInfo != null) {
+            sourceApplicationInfo.writeSourceApplicationInfoToDisk();
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
new file mode 100644
index 000000000..b0404c081
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
@@ -0,0 +1,144 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.text.format.DateUtils;
+
+import com.facebook.FacebookSdk;
+import com.facebook.LoggingBehavior;
+import com.facebook.appevents.AppEventsConstants;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.Logger;
+
+import java.util.Locale;
+
+class SessionLogger {
+    private static final String TAG = SessionLogger.class.getCanonicalName();
+
+    private static final long[] INACTIVE_SECONDS_QUANTA =
+        new long[] {
+            5 * DateUtils.MINUTE_IN_MILLIS,
+            15 * DateUtils.MINUTE_IN_MILLIS,
+            30 * DateUtils.MINUTE_IN_MILLIS,
+            1 * DateUtils.HOUR_IN_MILLIS,
+            6 * DateUtils.HOUR_IN_MILLIS,
+            12 * DateUtils.HOUR_IN_MILLIS,
+            1 * DateUtils.DAY_IN_MILLIS,
+            2 * DateUtils.DAY_IN_MILLIS,
+            3 * DateUtils.DAY_IN_MILLIS,
+            7 * DateUtils.DAY_IN_MILLIS,
+            14 * DateUtils.DAY_IN_MILLIS,
+            21 * DateUtils.DAY_IN_MILLIS,
+            28 * DateUtils.DAY_IN_MILLIS,
+            60 * DateUtils.DAY_IN_MILLIS,
+            90 * DateUtils.DAY_IN_MILLIS,
+            120 * DateUtils.DAY_IN_MILLIS,
+            150 * DateUtils.DAY_IN_MILLIS,
+            180 * DateUtils.DAY_IN_MILLIS,
+            365 * DateUtils.DAY_IN_MILLIS,
+        };
+
+    public static void logActivateApp(
+            Activity activity,
+            SourceApplicationInfo sourceApplicationInfo,
+            String appId
+    ) {
+        String sourAppInfoStr = sourceApplicationInfo != null
+                ? sourceApplicationInfo.toString()
+                : "Unclassified";
+
+        Bundle eventParams = new Bundle();
+        eventParams.putString(
+                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                sourAppInfoStr);
+        AppEventsLogger.newLogger(
+                activity,
+                appId)
+                .logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
+    }
+
+    public static void logDeactivateApp(
+            Activity activity,
+            SessionInfo sessionInfo,
+            String appId) {
+
+        Long interruptionDurationMillis =
+                sessionInfo.getDiskRestoreTime() - sessionInfo.getSessionLastEventTime();
+        if (interruptionDurationMillis < 0) {
+            interruptionDurationMillis = 0l;
+            logClockSkewEvent();
+        }
+
+        Long sessionLength = sessionInfo.getSessionLength();
+        if (sessionLength < 0) {
+            logClockSkewEvent();
+            sessionLength = 0l;
+        }
+
+        Bundle eventParams = new Bundle();
+        eventParams.putInt(
+                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
+                sessionInfo.getInterruptionCount());
+        eventParams.putString(
+                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
+                String.format(
+                        Locale.ROOT,
+                        "session_quanta_%d",
+                        getQuantaIndex(interruptionDurationMillis)));
+        SourceApplicationInfo sourceApplicationInfo = sessionInfo.getSourceApplicationInfo();
+        String sourAppInfoStr = sourceApplicationInfo != null
+                ? sourceApplicationInfo.toString()
+                : "Unclassified";
+        eventParams.putString(
+                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                sourAppInfoStr);
+
+        eventParams.putLong(Constants.LOG_TIME_APP_EVENT_KEY,
+                sessionInfo.getSessionLastEventTime() / 1000);
+
+        AppEventsLogger.newLogger(
+                activity,
+                appId)
+                .logEvent(
+                    AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
+                    (sessionLength / DateUtils.SECOND_IN_MILLIS),
+                    eventParams);
+    }
+
+    private static void logClockSkewEvent() {
+        Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
+    }
+
+    private static int getQuantaIndex(long timeBetweenSessions) {
+        int quantaIndex = 0;
+
+        while (
+                quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
+                        INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
+                ) {
+            ++quantaIndex;
+        }
+
+        return quantaIndex;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
new file mode 100644
index 000000000..53679e0d4
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
@@ -0,0 +1,148 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+
+import com.facebook.FacebookSdk;
+
+import bolts.AppLinks;
+
+class SourceApplicationInfo {
+    private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT =
+            "_fbSourceApplicationHasBeenSet";
+    private static final String CALL_APPLICATION_PACKAGE_KEY
+            = "com.facebook.appevents.SourceApplicationInfo.callingApplicationPackage";
+    private static final String OPENED_BY_APP_LINK_KEY
+            = "com.facebook.appevents.SourceApplicationInfo.openedByApplink";
+
+    private String callingApplicationPackage;
+    private boolean openedByApplink;
+
+    private SourceApplicationInfo(String callingApplicationPackage, boolean openedByApplink) {
+        this.callingApplicationPackage = callingApplicationPackage;
+        this.openedByApplink = openedByApplink;
+    }
+
+    public static SourceApplicationInfo getStoredSourceApplicatioInfo() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+
+        if (!sharedPreferences.contains(CALL_APPLICATION_PACKAGE_KEY)) {
+            return null;
+        }
+
+        String callingApplicationPackage = sharedPreferences.getString(
+                CALL_APPLICATION_PACKAGE_KEY,
+                null);
+        boolean openedByApplink = sharedPreferences.getBoolean(OPENED_BY_APP_LINK_KEY, false);
+
+        return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
+    }
+
+    public static void clearSavedSourceApplicationInfoFromDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.remove(CALL_APPLICATION_PACKAGE_KEY);
+        editor.remove(OPENED_BY_APP_LINK_KEY);
+        editor.apply();
+    }
+
+    public String getCallingApplicationPackage() {
+        return callingApplicationPackage;
+    }
+
+    public boolean isOpenedByApplink() {
+        return openedByApplink;
+    }
+
+    @Override
+    public String toString() {
+        String openType = "Unclassified";
+        if (openedByApplink) {
+            openType = "Applink";
+        }
+
+        if (callingApplicationPackage != null) {
+            return openType + "(" + callingApplicationPackage + ")";
+        }
+        return openType;
+    }
+
+    public void writeSourceApplicationInfoToDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putString(CALL_APPLICATION_PACKAGE_KEY, this.callingApplicationPackage);
+        editor.putBoolean(OPENED_BY_APP_LINK_KEY, this.openedByApplink);
+        editor.apply();
+    }
+
+    public static class Factory {
+        public static SourceApplicationInfo create(Activity activity) {
+            boolean openedByApplink = false;
+
+            ComponentName callingApplication = activity.getCallingActivity();
+            if (callingApplication == null) {
+                return null;
+            }
+
+            String callingApplicationPackage = callingApplication.getPackageName();
+            if (callingApplicationPackage.equals(activity.getPackageName())) {
+                // opened by own app.
+                return null;
+            }
+
+            // Tap icon to open an app will still get the old intent if the activity was opened by
+            // an intent before. Introduce an extra field in the intent to force clear the
+            // sourceApplication.
+            Intent openIntent = activity.getIntent();
+            if (openIntent != null
+                && !openIntent.getBooleanExtra(
+                    SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT,
+                    false)) {
+                openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
+                Bundle applinkData = AppLinks.getAppLinkData(openIntent);
+                if (applinkData != null) {
+                    openedByApplink = true;
+                    Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
+                    if (applinkReferrerData != null) {
+                        String applinkReferrerPackage = applinkReferrerData.getString("package");
+                        callingApplicationPackage = applinkReferrerPackage;
+                    }
+                }
+            }
+
+            // Mark this intent has been used to avoid use this intent again and again.
+            openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
+            return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
index 9678779f3..13b016860 100644
--- a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
+++ b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
@@ -59,6 +59,11 @@
      */
     public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
 
+    /**
+     * Key that should be used to get the "extras" field for this app link.
+     */
+    public static final String ARGUMENTS_EXTRAS_KEY = "extras";
+
     /**
      * Key that should be used to pull out the native class that would have been used if the applink
      * was deferred.
@@ -89,12 +94,15 @@
     private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
     private static final String METHOD_ARGS_REF_KEY = "ref";
     private static final String REFERER_DATA_REF_KEY = "fb_ref";
+    private static final String EXTRAS_DEEPLINK_CONTEXT_KEY = "deeplink_context";
+    private static final String PROMOTION_CODE_KEY = "promo_code";
     private static final String TAG = AppLinkData.class.getCanonicalName();
 
     private String ref;
     private Uri targetUri;
     private JSONObject arguments;
     private Bundle argumentBundle;
+    private String promotionCode;
 
     /**
      * Asynchronously fetches app link information that might have been stored for use after
@@ -286,6 +294,21 @@ public static AppLinkData createFromAlApplinkData(Intent intent) {
             appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
         }
 
+        Bundle extras = applinks.getBundle(ARGUMENTS_EXTRAS_KEY);
+        if (extras != null) {
+            String deeplinkContext = extras.getString(EXTRAS_DEEPLINK_CONTEXT_KEY);
+            if (deeplinkContext != null) {
+                try {
+                    JSONObject dlContextJson = new JSONObject(deeplinkContext);
+                    if (dlContextJson.has(PROMOTION_CODE_KEY)) {
+                        appLinkData.promotionCode = dlContextJson.getString(PROMOTION_CODE_KEY);
+                    }
+                } catch (JSONException e) {
+                    Log.d(TAG, "Unable to parse deeplink_context JSON", e);
+                }
+            }
+        }
+
         return appLinkData;
     }
 
@@ -323,6 +346,19 @@ private static AppLinkData createFromJson(String jsonString) {
                             appLinkData.arguments.getString(METHOD_ARGS_TARGET_URL_KEY));
                 }
 
+                if (appLinkData.arguments.has(ARGUMENTS_EXTRAS_KEY)) {
+                    JSONObject extrasData =
+                            appLinkData.arguments.getJSONObject(ARGUMENTS_EXTRAS_KEY);
+                    if (extrasData.has(EXTRAS_DEEPLINK_CONTEXT_KEY)) {
+                        JSONObject deeplink_context =
+                                extrasData.getJSONObject(EXTRAS_DEEPLINK_CONTEXT_KEY);
+                        if (deeplink_context.has(PROMOTION_CODE_KEY)) {
+                            appLinkData.promotionCode =
+                                    deeplink_context.getString(PROMOTION_CODE_KEY);
+                        }
+                    }
+                }
+
                 appLinkData.argumentBundle = toBundle(appLinkData.arguments);
 
                 return appLinkData;
@@ -407,6 +443,14 @@ public String getRef() {
         return ref;
     }
 
+    /**
+     * Returns the promotion code for this App Link.
+     * @return promotion code
+     */
+    public String getPromotionCode() {
+        return promotionCode;
+    }
+
     /**
      * The full set of arguments for this app link. Properties like target uri & ref are typically
      * picked out of this set of arguments.
diff --git a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java b/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
index 4342b4743..753eec00e 100644
--- a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
+++ b/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
@@ -110,4 +110,7 @@
     public static final String EVENT_SEND_BUTTON_DID_TAP               = "fb_send_button_did_tap";
     public static final String EVENT_LIKE_BUTTON_DID_TAP               = "fb_like_button_did_tap";
     public static final String EVENT_LOGIN_BUTTON_DID_TAP               = "fb_login_button_did_tap";
+
+    public static final String EVENT_DEVICE_SHARE_BUTTON_CREATE = "fb_device_share_button_create";
+    public static final String EVENT_DEVICE_SHARE_BUTTON_DID_TAP= "fb_device_share_button_did_tap";
 }
diff --git a/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java b/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
index bc88153dc..d7fdbd5e6 100644
--- a/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
+++ b/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
@@ -97,6 +97,7 @@ public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         AppGroupCreate(5),
         AppGroupJoin(6),
         AppInvite(7),
+        DeviceShare(8),
         ;
 
         private final int offset;
diff --git a/facebook/src/main/java/com/facebook/internal/CustomTab.java b/facebook/src/main/java/com/facebook/internal/CustomTab.java
new file mode 100644
index 000000000..863f36f37
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/CustomTab.java
@@ -0,0 +1,50 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+
+package com.facebook.internal;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.customtabs.CustomTabsIntent;
+
+public class CustomTab {
+    private static final String CHROME_PACKAGE = "com.android.chrome";
+
+    private Uri uri;
+
+    public CustomTab(String action, Bundle parameters) {
+        if (parameters == null) {
+            parameters = new Bundle();
+        }
+        uri = Utility.buildUri(
+                ServerProtocol.getDialogAuthority(),
+                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                parameters);
+    }
+
+    public void openCustomTab(Activity activity) {
+        CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();
+        customTabsIntent.intent.setPackage(CHROME_PACKAGE);
+        customTabsIntent.launchUrl(activity, uri);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java b/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
index ce06c7ecd..3eabaf47c 100644
--- a/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
+++ b/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
@@ -21,6 +21,7 @@
 package com.facebook.internal;
 
 import android.app.Activity;
+import android.content.Intent;
 import android.util.Log;
 
 import com.facebook.CallbackManager;
@@ -28,6 +29,7 @@
 import com.facebook.FacebookDialog;
 import com.facebook.FacebookException;
 import com.facebook.FacebookSdk;
+import com.facebook.LoggingBehavior;
 
 import java.util.List;
 
@@ -98,13 +100,13 @@ protected abstract void registerCallbackImpl(
      *
      * @param requestCode the request code to use.
      */
-     protected void setRequestCode(int requestCode) {
-         if (FacebookSdk.isFacebookRequestCode(requestCode)) {
-             throw new IllegalArgumentException("Request code " + requestCode +
-                     " cannot be within the range reserved by the Facebook SDK.");
-         }
-         this.requestCode = requestCode;
-     }
+    protected void setRequestCode(int requestCode) {
+        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
+            throw new IllegalArgumentException("Request code " + requestCode +
+                    " cannot be within the range reserved by the Facebook SDK.");
+        }
+        this.requestCode = requestCode;
+    }
 
     /**
      * Returns the request code used for this dialog.
@@ -115,7 +117,7 @@ public int getRequestCode() {
         return requestCode;
     }
 
-     @Override
+    @Override
     public boolean canShow(CONTENT content) {
         return canShowImpl(content, BASE_AUTOMATIC_MODE);
     }
@@ -128,7 +130,9 @@ protected boolean canShowImpl(CONTENT content, Object mode) {
             if (!anyModeAllowed && !Utility.areObjectsEqual(handler.getMode(), mode)) {
                 continue;
             }
-            if (handler.canShow(content)) {
+            // Calls to canShow() are not best effort like calls to show() are. So let's signal
+            // more explicitly whether the passed in content can be shown or not
+            if (handler.canShow(content, false /*isBestEffort*/)) {
                 return true;
             }
         }
@@ -172,6 +176,29 @@ protected Activity getActivityContext() {
         return null;
     }
 
+    protected void startActivityForResult(Intent intent, int requestCode) {
+        String error = null;
+        if (activity != null) {
+            activity.startActivityForResult(intent, requestCode);
+        } else if (fragmentWrapper != null) {
+            if (fragmentWrapper.getNativeFragment() != null) {
+                fragmentWrapper.getNativeFragment().startActivityForResult(intent, requestCode);
+            } else if (fragmentWrapper.getSupportFragment() != null) {
+                fragmentWrapper.getSupportFragment().startActivityForResult(intent, requestCode);
+            } else {
+                error = "Failed to find Activity or Fragment to startActivityForResult ";
+            }
+        } else {
+            error = "Failed to find Activity or Fragment to startActivityForResult ";
+        }
+        if (error != null) {
+            Logger.log(LoggingBehavior.DEVELOPER_ERRORS,
+                       Log.ERROR,
+                       this.getClass().getName(),
+                       error);
+        }
+    }
+
     private AppCall createAppCallForMode(final CONTENT content, final Object mode) {
         boolean anyModeAllowed = (mode == BASE_AUTOMATIC_MODE);
 
@@ -180,7 +207,7 @@ private AppCall createAppCallForMode(final CONTENT content, final Object mode) {
             if (!anyModeAllowed && !Utility.areObjectsEqual(handler.getMode(), mode)) {
                 continue;
             }
-            if (!handler.canShow(content)) {
+            if (!handler.canShow(content, true /*isBestEffort*/)) {
                 continue;
             }
 
@@ -221,7 +248,18 @@ public Object getMode() {
             return BASE_AUTOMATIC_MODE;
         }
 
-        public abstract boolean canShow(final CONTENT content);
+        /**
+         * Used when we want to signal back to the caller when required and optional features are
+         * not supported by specific Mode Handlers.
+         *
+         * @param content      Content to be checked
+         * @param isBestEffort Passing in true here will prevent signalling failure for optional or
+         *                     best-effort types of features. Passing in false will assume that
+         *                     optional or best-effort features should be treated the same as other
+         *                     features, and their support be enforced accordingly.
+         * @return True if can be shown
+         */
+        public abstract boolean canShow(final CONTENT content, boolean isBestEffort);
 
         public abstract AppCall createAppCall(final CONTENT content);
     }
diff --git a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
index fd0dd13eb..0edde69e1 100644
--- a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
@@ -75,6 +75,7 @@
     public static final int PROTOCOL_VERSION_20141028 = 20141028;
     public static final int PROTOCOL_VERSION_20141107 = 20141107; // Bucketed Result Intents
     public static final int PROTOCOL_VERSION_20141218 = 20141218;
+    public static final int PROTOCOL_VERSION_20160327 = 20160327;
 
     public static final String EXTRA_PROTOCOL_VERSION =
             "com.facebook.platform.protocol.PROTOCOL_VERSION";
@@ -454,6 +455,7 @@ public static final int getLatestKnownVersion() {
     // Note: be sure this stays sorted in descending order; add new versions at the beginning
     private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
             Arrays.asList(
+                    PROTOCOL_VERSION_20160327,
                     PROTOCOL_VERSION_20141218,
                     PROTOCOL_VERSION_20141107,
                     PROTOCOL_VERSION_20141028,
diff --git a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
index 15ae6a657..0aaf5f3c5 100644
--- a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
@@ -75,7 +75,7 @@
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    public static final String GRAPH_API_VERSION = "v2.5";
+    public static final String GRAPH_API_VERSION = "v2.6";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
diff --git a/facebook/src/main/java/com/facebook/internal/Utility.java b/facebook/src/main/java/com/facebook/internal/Utility.java
index d99696b8a..074ca876e 100644
--- a/facebook/src/main/java/com/facebook/internal/Utility.java
+++ b/facebook/src/main/java/com/facebook/internal/Utility.java
@@ -43,11 +43,12 @@
 
 import com.facebook.AccessToken;
 import com.facebook.FacebookException;
-import com.facebook.FacebookRequestError;
 import com.facebook.FacebookSdk;
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
+import com.facebook.appevents.AppEventsConstants;
+import com.facebook.appevents.internal.Constants;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -57,6 +58,7 @@
 import java.io.*;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.math.BigInteger;
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
 
@@ -86,9 +88,13 @@
             "supports_implicit_sdk_logging";
     private static final String APP_SETTING_NUX_CONTENT = "gdpv4_nux_content";
     private static final String APP_SETTING_NUX_ENABLED = "gdpv4_nux_enabled";
+    private static final String APP_SETTING_CUSTOM_TABS_ENABLED =
+            "gdpv4_chrome_custom_tabs_enabled";
     private static final String APP_SETTING_DIALOG_CONFIGS = "android_dialog_configs";
     private static final String APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES =
             "android_sdk_error_categories";
+    private static final String APP_SETTING_APP_EVENTS_SESSION_TIMEOUT =
+            "app_events_session_timeout";
     private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a2";
     private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
     private static final String DIALOG_CONFIG_NAME_KEY = "name";
@@ -101,8 +107,10 @@
             APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING,
             APP_SETTING_NUX_CONTENT,
             APP_SETTING_NUX_ENABLED,
+            APP_SETTING_CUSTOM_TABS_ENABLED,
             APP_SETTING_DIALOG_CONFIGS,
-            APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES
+            APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES,
+            APP_SETTING_APP_EVENTS_SESSION_TIMEOUT
     };
     private static final String APPLICATION_FIELDS = "fields";
 
@@ -127,26 +135,33 @@
     private static long timestampOfLastCheck = -1;
     private static long totalExternalStorageGB = -1;
     private static long availableExternalStorageGB = -1;
-    private static String deviceTimezone = "";
+    private static String deviceTimezoneAbbreviation = "";
+    private static String deviceTimeZoneName = "";
     private static String carrierName = noCarrierConstant;
 
     public static class FetchedAppSettings {
         private boolean supportsImplicitLogging;
         private String nuxContent;
         private boolean nuxEnabled;
+        private boolean customTabsEnabled;
+        private int sessionTimeoutInSeconds;
         private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
         private FacebookRequestErrorClassification errorClassification;
 
         private FetchedAppSettings(boolean supportsImplicitLogging,
                                    String nuxContent,
                                    boolean nuxEnabled,
+                                   boolean customTabsEnabled,
+                                   int sessionTimeoutInSeconds,
                                    Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
                                    FacebookRequestErrorClassification errorClassification) {
             this.supportsImplicitLogging = supportsImplicitLogging;
             this.nuxContent = nuxContent;
             this.nuxEnabled = nuxEnabled;
+            this.customTabsEnabled = customTabsEnabled;
             this.dialogConfigMap = dialogConfigMap;
             this.errorClassification = errorClassification;
+            this.sessionTimeoutInSeconds = sessionTimeoutInSeconds;
         }
 
         public boolean supportsImplicitLogging() {
@@ -161,6 +176,14 @@ public boolean getNuxEnabled() {
             return nuxEnabled;
         }
 
+        public boolean getCustomTabsEnabled() {
+            return customTabsEnabled;
+        }
+
+        public int getSessionTimeoutInSeconds() {
+            return sessionTimeoutInSeconds;
+        }
+
         public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
             return dialogConfigMap;
         }
@@ -847,6 +870,10 @@ private static FetchedAppSettings parseAppSettingsFromJSON(
                 settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
                 settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
                 settingsJSON.optBoolean(APP_SETTING_NUX_ENABLED, false),
+                settingsJSON.optBoolean(APP_SETTING_CUSTOM_TABS_ENABLED, false),
+                settingsJSON.optInt(
+                        APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
+                        Constants.getDefaultAppEventsSessionTimeoutInSeconds()),
                 parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS)),
                 errorClassification
         );
@@ -1042,7 +1069,7 @@ public static void setAppEventExtendedDeviceInfoParameters(
         extraInfoArray.put(locale.getLanguage() + "_" + locale.getCountry());
 
         // Time zone
-        extraInfoArray.put(deviceTimezone);
+        extraInfoArray.put(deviceTimezoneAbbreviation);
 
         // Carrier
         extraInfoArray.put(carrierName);
@@ -1075,6 +1102,8 @@ public static void setAppEventExtendedDeviceInfoParameters(
         extraInfoArray.put(totalExternalStorageGB);
         extraInfoArray.put(availableExternalStorageGB);
 
+        extraInfoArray.put(deviceTimeZoneName);
+
         params.put("extinfo", extraInfoArray.toString());
     }
 
@@ -1365,7 +1394,11 @@ private static void refreshPeriodicExtendedDeviceInfo(Context appContext) {
     private static void refreshTimezone() {
         try {
             TimeZone tz = TimeZone.getDefault();
-            deviceTimezone = tz.getDisplayName(tz.inDaylightTime(new Date()), TimeZone.SHORT);
+            deviceTimezoneAbbreviation = tz.getDisplayName(
+                    tz.inDaylightTime(new Date()),
+                    TimeZone.SHORT
+            );
+            deviceTimeZoneName = tz.getID();
         } catch (Exception e) {
         }
     }
@@ -1479,4 +1512,9 @@ public static PermissionsPair handlePermissionResponse(JSONObject result)
 
         return new PermissionsPair(grantedPermissions, declinedPermissions);
     }
+
+    public static String generateRandomString(int length) {
+        Random r = new Random();
+        return new BigInteger(length * 5, r).toString(32);
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/internal/Validate.java b/facebook/src/main/java/com/facebook/internal/Validate.java
index ce393d9d7..5ad4b5073 100644
--- a/facebook/src/main/java/com/facebook/internal/Validate.java
+++ b/facebook/src/main/java/com/facebook/internal/Validate.java
@@ -23,18 +23,22 @@
 import android.Manifest;
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
 import android.os.Looper;
 import android.util.Log;
 
+import com.facebook.CustomTabActivity;
 import com.facebook.FacebookActivity;
 import com.facebook.FacebookException;
 import com.facebook.FacebookSdk;
 import com.facebook.FacebookSdkNotInitializedException;
-import com.facebook.LoggingBehavior;
 
 import java.util.Collection;
+import java.util.List;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -55,6 +59,11 @@
             "com.facebook.FacebookActivity to your AndroidManifest.xml file. See " +
             "https://developers.facebook.com/docs/android/getting-started for more info.";
 
+    private static final String CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON =
+            "FacebookActivity is declared incorrectly in the AndroidManifest.xml, please " +
+            "add com.facebook.FacebookActivity to your AndroidManifest.xml file. " +
+            "See https://developers.facebook.com/docs/android/getting-started for more info.";
+
     private static final String CONTENT_PROVIDER_NOT_FOUND_REASON =
             "A ContentProvider for this app was not set up in the AndroidManifest.xml, please " +
             "add %s as a provider to your AndroidManifest.xml file. See " +
@@ -147,6 +156,14 @@ public static String hasAppID() {
         return id;
     }
 
+    public static String hasClientToken() {
+        String token = FacebookSdk.getClientToken();
+        if (token == null) {
+            throw new IllegalStateException("No Client Token found, please set the Client Token.");
+        }
+        return token;
+    }
+
     public static void hasInternetPermissions(Context context) {
         Validate.hasInternetPermissions(context, true);
     }
@@ -188,6 +205,48 @@ public static void hasFacebookActivity(Context context, boolean shouldThrow) {
         }
     }
 
+    public static void checkCustomTabRedirectActivity(Context context) {
+        Validate.checkCustomTabRedirectActivity(context, true);
+    }
+
+    public static void checkCustomTabRedirectActivity(Context context, boolean shouldThrow) {
+        if (!hasCustomTabRedirectActivity(context)) {
+            if (shouldThrow) {
+                throw new IllegalStateException(CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON);
+            } else {
+                Log.w(TAG, CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON);
+            }
+        }
+    }
+
+    public static boolean hasCustomTabRedirectActivity(Context context) {
+        Validate.notNull(context, "context");
+        PackageManager pm = context.getPackageManager();
+        List<ResolveInfo> infos = null;
+        if (pm != null) {
+            Intent intent = new Intent();
+            intent.setAction(Intent.ACTION_VIEW);
+            intent.addCategory(Intent.CATEGORY_DEFAULT);
+            intent.addCategory(Intent.CATEGORY_BROWSABLE);
+            intent.setData(Uri.parse("fb" + FacebookSdk.getApplicationId() + "://authorize"));
+            infos = pm.queryIntentActivities(intent, PackageManager.GET_RESOLVED_FILTER);
+        }
+        boolean hasActivity = false;
+        if (infos != null) {
+            for (ResolveInfo info : infos) {
+                ActivityInfo activityInfo = info.activityInfo;
+                if (activityInfo.name.equals(CustomTabActivity.class.getName())) {
+                    hasActivity = true;
+                } else {
+                    // another application is listening for this url scheme, don't open
+                    // Custom Tab for security reasons
+                    return false;
+                }
+            }
+        }
+        return hasActivity;
+    }
+
     public static void hasContentProvider(Context context) {
         Validate.notNull(context, "context");
         String appId = Validate.hasAppID();
diff --git a/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
new file mode 100644
index 000000000..5dbdff349
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
@@ -0,0 +1,137 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ResolveInfo;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.Log;
+
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookSdk;
+import com.facebook.internal.CustomTab;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.List;
+
+public class CustomTabLoginMethodHandler extends WebLoginMethodHandler {
+    private static final String OAUTH_DIALOG = "oauth";
+    private static final String CUSTOM_TABS_SERVICE_ACTION =
+            "android.support.customtabs.action.CustomTabsService";
+    private static final String CHROME_PACKAGE = "com.android.chrome";
+
+    private CustomTab customTab;
+
+    CustomTabLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    @Override
+    String getNameForLogging() {
+        return "custom_tab";
+    }
+
+    @Override
+    AccessTokenSource getTokenSource() {
+        return AccessTokenSource.CUSTOM_TAB;
+    }
+
+    @Override
+    boolean tryAuthorize(final LoginClient.Request request) {
+        if (!isCustomTabsAllowed()) {
+            return false;
+        }
+
+        Bundle parameters = getParameters(request);
+        parameters = addExtraParameters(parameters, request);
+        Activity activity = loginClient.getActivity();
+
+        customTab = new CustomTab(OAUTH_DIALOG, parameters);
+
+        customTab.openCustomTab(activity);
+
+        return true;
+    }
+
+    @Override
+    protected void putChallengeParam(JSONObject param) throws JSONException {
+        if (loginClient.getFragment() instanceof LoginFragment) {
+            param.put(LoginLogger.EVENT_PARAM_CHALLENGE,
+                    ((LoginFragment) loginClient.getFragment()).getChallengeParam());
+        }
+    }
+
+    private boolean isCustomTabsAllowed() {
+        return isCustomTabsEnabled()
+                && isChromeCustomTabsSupported(loginClient.getActivity())
+                && Validate.hasCustomTabRedirectActivity(FacebookSdk.getApplicationContext());
+    }
+
+    private boolean isChromeCustomTabsSupported(final Context context) {
+        Intent serviceIntent = new Intent(CUSTOM_TABS_SERVICE_ACTION);
+        serviceIntent.setPackage(CHROME_PACKAGE);
+        List<ResolveInfo> resolveInfos =
+                context.getPackageManager().queryIntentServices(serviceIntent, 0);
+        return !(resolveInfos == null || resolveInfos.isEmpty());
+    }
+
+    private boolean isCustomTabsEnabled() {
+        final String appId = Utility.getMetadataApplicationId(loginClient.getActivity());
+        final Utility.FetchedAppSettings settings = Utility.getAppSettingsWithoutQuery(appId);
+        return settings != null && settings.getCustomTabsEnabled();
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    CustomTabLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+    }
+
+    public static final Parcelable.Creator<CustomTabLoginMethodHandler> CREATOR =
+            new Parcelable.Creator() {
+
+                @Override
+                public CustomTabLoginMethodHandler createFromParcel(Parcel source) {
+                    return new CustomTabLoginMethodHandler(source);
+                }
+
+                @Override
+                public CustomTabLoginMethodHandler[] newArray(int size) {
+                    return new CustomTabLoginMethodHandler[size];
+                }
+            };
+}
diff --git a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java b/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
index c190703d1..b6f8c66d9 100644
--- a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
+++ b/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
@@ -25,6 +25,7 @@
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.app.DialogFragment;
 import android.text.Html;
@@ -48,6 +49,7 @@
 import com.facebook.HttpMethod;
 import com.facebook.R;
 import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -58,9 +60,15 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 public class DeviceAuthDialog extends DialogFragment {
-    private static final String DEVICE_OUATH_ENDPOINT = "oauth/device";
+    private static final String DEVICE_LOGIN_ENDPOINT = "device/login";
+    private static final String DEVICE_LOGIN_STATUS_ENDPOINT = "device/login_status";
     private static final String REQUEST_STATE_KEY = "request_state";
 
+    private static final int LOGIN_ERROR_SUBCODE_EXCESSIVE_POLLING = 1349172;
+    private static final int LOGIN_ERROR_SUBCODE_AUTHORIZATION_DECLINED = 1349173;
+    private static final int LOGIN_ERROR_SUBCODE_AUTHORIZATION_PENDING = 1349174;
+    private static final int LOGIN_ERROR_SUBCODE_CODE_EXPIRED = 1349152;
+
     private ProgressBar progressBar;
     private TextView confirmationCode;
     private DeviceAuthMethodHandler deviceAuthMethodHandler;
@@ -97,6 +105,7 @@ public View onCreateView(
         return view;
     }
 
+    @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
@@ -157,12 +166,18 @@ public void onDestroy() {
 
     public void startLogin(final LoginClient.Request request) {
         Bundle parameters = new Bundle();
-        parameters.putString("type", "device_code");
-        parameters.putString("client_id", FacebookSdk.getApplicationId());
         parameters.putString("scope", TextUtils.join(",", request.getPermissions()));
+
+        String redirectUriString = request.getDeviceRedirectUriString();
+        if (redirectUriString != null) {
+            parameters.putString("redirect_uri", redirectUriString);
+        }
+
+        String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
+        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
         GraphRequest graphRequest = new GraphRequest(
                 null,
-                DEVICE_OUATH_ENDPOINT,
+                DEVICE_LOGIN_ENDPOINT,
                 parameters,
                 HttpMethod.POST,
                 new GraphRequest.Callback() {
@@ -223,13 +238,10 @@ public void run() {
 
     private GraphRequest getPollRequest() {
         Bundle parameters = new Bundle();
-        parameters.putString("type", "device_token");
-        parameters.putString("client_id", FacebookSdk.getApplicationId());
         parameters.putString("code", currentRequestState.getRequestCode());
-
         return new GraphRequest(
                 null,
-                DEVICE_OUATH_ENDPOINT,
+                DEVICE_LOGIN_STATUS_ENDPOINT,
                 parameters,
                 HttpMethod.POST,
                 new GraphRequest.Callback() {
@@ -244,19 +256,21 @@ public void onCompleted(GraphResponse response) {
                         if (error != null) {
                             // We need to decide if this is a fatal error by checking the error
                             // message text
-                            String errorMessage = error.getErrorMessage();
-                            if (errorMessage.equals("authorization_pending") ||
-                                    errorMessage.equals("slow_down")) {
-                                // Keep polling. If we got the slow down message just ignore
-                                schedulePoll();
-                                return;
-                            } else if (errorMessage.equals("authorization_declined") ||
-                                    errorMessage.equals("code_expired")) {
-                                onCancel();
-                                return;
+                            switch (error.getSubErrorCode()) {
+                                case LOGIN_ERROR_SUBCODE_AUTHORIZATION_PENDING:
+                                case LOGIN_ERROR_SUBCODE_EXCESSIVE_POLLING: {
+                                    // Keep polling. If we got the slow down message just ignore
+                                    schedulePoll();
+                                } break;
+                                case LOGIN_ERROR_SUBCODE_CODE_EXPIRED:
+                                case LOGIN_ERROR_SUBCODE_AUTHORIZATION_DECLINED: {
+                                    onCancel();
+                                } break;
+                                default: {
+                                    onError(response.getError().getException());
+                                }
+                                break;
                             }
-
-                            onError(response.getError().getException());
                             return;
                         }
 
diff --git a/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java b/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java
new file mode 100644
index 000000000..e96c21746
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java
@@ -0,0 +1,83 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.net.Uri;
+
+import java.util.Collection;
+
+/**
+ * This class manages device login and permissions for Facebook.
+ */
+public class DeviceLoginManager extends LoginManager {
+    private Uri deviceRedirectUri;
+
+    private static volatile DeviceLoginManager instance;
+
+    /**
+     * Getter for the login manager.
+     * @return The login manager.
+     */
+    public static DeviceLoginManager getInstance() {
+        if (instance == null) {
+            synchronized (DeviceLoginManager.class) {
+                if (instance == null) {
+                    instance = new DeviceLoginManager();
+                }
+            }
+        }
+        return instance;
+    }
+
+    /**
+     * Set uri to redirect the user to after they complete
+     * the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @param uri The URI to set.
+     */
+    public void setDeviceRedirectUri(Uri uri) {
+        this.deviceRedirectUri = uri;
+    }
+
+    /**
+     * Get the previously set uri that will be used to redirect the user to
+     * after they complete the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @return The current device redirect uri set.
+     */
+    public Uri getDeviceRedirectUri() {
+        return this.deviceRedirectUri;
+    }
+
+    @Override
+    protected LoginClient.Request createLoginRequest(Collection<String> permissions) {
+        LoginClient.Request request = super.createLoginRequest(permissions);
+        Uri redirectUri = getDeviceRedirectUri();
+        if (redirectUri != null) {
+            request.setDeviceRedirectUriString(redirectUri.toString());
+        }
+        return request;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/LoginBehavior.java b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
index 57b7d589f..78194d4f6 100644
--- a/facebook/src/main/java/com/facebook/login/LoginBehavior.java
+++ b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
@@ -41,6 +41,11 @@
      */
     WEB_ONLY(false, true, false),
 
+    /**
+     * Specifies that device login authentication flow should be used.
+     * Use it via ({@link com.facebook.login.widget.DeviceLoginButton DeviceLoginButton}
+     * or ({@link com.facebook.login.DeviceLoginManager DeviceLoginManager} to authenticate.
+     */
     DEVICE_AUTH(false, false, true);
 
     private final boolean allowsKatanaAuth;
diff --git a/facebook/src/main/java/com/facebook/login/LoginClient.java b/facebook/src/main/java/com/facebook/login/LoginClient.java
index 779460ddb..347ebf086 100644
--- a/facebook/src/main/java/com/facebook/login/LoginClient.java
+++ b/facebook/src/main/java/com/facebook/login/LoginClient.java
@@ -24,6 +24,7 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
+import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
@@ -164,6 +165,7 @@ public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         }
 
         if (behavior.allowsWebViewAuth()) {
+            handlers.add(new CustomTabLoginMethodHandler(this));
             handlers.add(new WebViewLoginMethodHandler(this));
         }
 
@@ -239,9 +241,9 @@ boolean tryCurrentHandler() {
         LoginMethodHandler handler = getCurrentHandler();
         if (handler.needsInternetPermission() && !checkInternetPermission()) {
             addLoggingExtra(
-                LoginLogger.EVENT_EXTRAS_MISSING_INTERNET_PERMISSION,
-                AppEventsConstants.EVENT_PARAM_VALUE_YES,
-                false
+                    LoginLogger.EVENT_EXTRAS_MISSING_INTERNET_PERMISSION,
+                    AppEventsConstants.EVENT_PARAM_VALUE_YES,
+                    false
             );
             return false;
         }
@@ -254,9 +256,9 @@ boolean tryCurrentHandler() {
             // We didn't try it, so we don't get any other completion
             // notification -- log that we skipped it.
             addLoggingExtra(
-                LoginLogger.EVENT_EXTRAS_NOT_TRIED,
+                    LoginLogger.EVENT_EXTRAS_NOT_TRIED,
                     handler.getNameForLogging(),
-                true
+                    true
             );
         }
 
@@ -364,7 +366,7 @@ private static AccessToken createFromTokenWithRefreshedPermissions(
 
     private LoginLogger getLogger() {
         if (loginLogger == null ||
-            !loginLogger.getApplicationId().equals(pendingRequest.getApplicationId())) {
+                !loginLogger.getApplicationId().equals(pendingRequest.getApplicationId())) {
 
             loginLogger = new LoginLogger(getActivity(), pendingRequest.getApplicationId());
         }
@@ -435,6 +437,7 @@ static String getE2E() {
         private final String applicationId;
         private final String authId;
         private boolean isRerequest = false;
+        private String deviceRedirectUriString;
 
         Request(
                 LoginBehavior loginBehavior,
@@ -482,6 +485,14 @@ void setRerequest(boolean isRerequest) {
             this.isRerequest = isRerequest;
         }
 
+        String getDeviceRedirectUriString() {
+            return this.deviceRedirectUriString;
+        }
+
+        void setDeviceRedirectUriString(String deviceRedirectUriString) {
+            this.deviceRedirectUriString = deviceRedirectUriString;
+        }
+
         boolean hasPublishPermission() {
             for (String permission : permissions) {
                 if (LoginManager.isPublishPermission(permission)) {
@@ -502,6 +513,7 @@ private Request(Parcel parcel) {
             this.applicationId = parcel.readString();
             this.authId = parcel.readString();
             this.isRerequest = parcel.readByte() != 0 ? true : false;
+            this.deviceRedirectUriString = parcel.readString();
         }
 
         @Override
@@ -517,6 +529,7 @@ public void writeToParcel(Parcel dest, int flags) {
             dest.writeString(applicationId);
             dest.writeString(authId);
             dest.writeByte((byte)(isRerequest ? 1 : 0));
+            dest.writeString(deviceRedirectUriString);
         }
 
         public static final Parcelable.Creator<Request> CREATOR = new Parcelable.Creator() {
diff --git a/facebook/src/main/java/com/facebook/login/LoginFragment.java b/facebook/src/main/java/com/facebook/login/LoginFragment.java
index 4a40f85ed..60342afb0 100644
--- a/facebook/src/main/java/com/facebook/login/LoginFragment.java
+++ b/facebook/src/main/java/com/facebook/login/LoginFragment.java
@@ -31,7 +31,14 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.facebook.FacebookActivity;
+import com.facebook.FacebookOperationCanceledException;
 import com.facebook.R;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+
+import org.json.JSONException;
+import org.json.JSONObject;
 
 /**
  * This Fragment is a necessary part of the overall Facebook login process
@@ -49,20 +56,28 @@
             "Cannot call LoginFragment with a null calling package. " +
                     "This can occur if the launchMode of the caller is singleInstance.";
     private static final String SAVED_LOGIN_CLIENT = "loginClient";
+    private static final String SAVED_CHALLENGE = "challenge";
+    private static final int CHALLENGE_LENGTH = 20;
 
     private String callingPackage;
     private LoginClient loginClient;
     private LoginClient.Request request;
+    private boolean restarted;
+    private String expectedChallenge;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        restarted = savedInstanceState != null;
+
         if (savedInstanceState != null) {
             loginClient = savedInstanceState.getParcelable(SAVED_LOGIN_CLIENT);
             loginClient.setFragment(this);
+            expectedChallenge = savedInstanceState.getString(SAVED_CHALLENGE);
         } else {
             loginClient = new LoginClient(this);
+            expectedChallenge = Utility.generateRandomString(CHALLENGE_LENGTH);
         }
 
         loginClient.setOnCompletedListener(new LoginClient.OnCompletedListener() {
@@ -149,6 +164,17 @@ public void onResume() {
             return;
         }
 
+        if (restarted) {
+            Activity activity = getActivity();
+            if (activity instanceof FacebookActivity
+                    && loginClient.getCurrentHandler() instanceof CustomTabLoginMethodHandler) {
+                // custom tab was closed
+                ((FacebookActivity) activity)
+                        .sendResult(null, new FacebookOperationCanceledException());
+            }
+        }
+        restarted = true;
+
         loginClient.startOrContinueAuth(request);
     }
 
@@ -171,6 +197,7 @@ public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
 
         outState.putParcelable(SAVED_LOGIN_CLIENT, loginClient);
+        outState.putString(SAVED_CHALLENGE, expectedChallenge);
     }
 
     private void initializeCallingPackage(final Activity activity) {
@@ -181,6 +208,24 @@ private void initializeCallingPackage(final Activity activity) {
         callingPackage = componentName.getPackageName();
     }
 
+    public boolean validateChallengeParam(Bundle values) {
+        try {
+            String stateString = values.getString(ServerProtocol.DIALOG_PARAM_STATE);
+            if (stateString == null) {
+                return false;
+            }
+            JSONObject state = new JSONObject(stateString);
+            String challenge = state.getString(LoginLogger.EVENT_PARAM_CHALLENGE);
+            return challenge.equals(expectedChallenge);
+        } catch (JSONException e) {
+            return false;
+        }
+    }
+
+    public String getChallengeParam() {
+        return expectedChallenge;
+    }
+
     LoginClient getLoginClient() {
         return loginClient;
     }
diff --git a/facebook/src/main/java/com/facebook/login/LoginLogger.java b/facebook/src/main/java/com/facebook/login/LoginLogger.java
index d0265f971..c5a094c76 100644
--- a/facebook/src/main/java/com/facebook/login/LoginLogger.java
+++ b/facebook/src/main/java/com/facebook/login/LoginLogger.java
@@ -50,6 +50,7 @@
     static final String EVENT_PARAM_ERROR_CODE = "4_error_code";
     static final String EVENT_PARAM_ERROR_MESSAGE = "5_error_message";
     static final String EVENT_PARAM_EXTRAS = "6_extras";
+    static final String EVENT_PARAM_CHALLENGE = "7_challenge";
     static final String EVENT_EXTRAS_TRY_LOGIN_ACTIVITY = "try_login_activity";
     static final String EVENT_EXTRAS_MISSING_INTERNET_PERMISSION = "no_internet_permission";
     static final String EVENT_EXTRAS_NOT_TRIED = "not_tried";
diff --git a/facebook/src/main/java/com/facebook/login/LoginManager.java b/facebook/src/main/java/com/facebook/login/LoginManager.java
index c883edd5b..33cbcac15 100644
--- a/facebook/src/main/java/com/facebook/login/LoginManager.java
+++ b/facebook/src/main/java/com/facebook/login/LoginManager.java
@@ -29,6 +29,7 @@
 import android.support.v4.app.Fragment;
 
 import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
 import com.facebook.CallbackManager;
 import com.facebook.FacebookActivity;
 import com.facebook.FacebookAuthorizationException;
@@ -403,7 +404,7 @@ static boolean isPublishPermission(String permission) {
         return Collections.unmodifiableSet(set);
     }
 
-    private LoginClient.Request createLoginRequest(Collection<String> permissions) {
+    protected LoginClient.Request createLoginRequest(Collection<String> permissions) {
         LoginClient.Request request = new LoginClient.Request(
                 loginBehavior,
                 Collections.unmodifiableSet(
@@ -583,6 +584,17 @@ private void finishLogin(
         }
     }
 
+    public static void setSuccessResult(Intent intent, Bundle values) {
+        LoginClient.Request request = intent.getExtras().getParcelable(LoginFragment.EXTRA_REQUEST);
+        AccessToken token = LoginMethodHandler.createAccessTokenFromWebBundle(
+                request.getPermissions(),
+                values,
+                AccessTokenSource.CUSTOM_TAB,
+                request.getApplicationId());
+        LoginClient.Result result = LoginClient.Result.createTokenResult(request, token);
+        intent.putExtra(LoginFragment.RESULT_KEY, result);
+    }
+
     private static class ActivityStartActivityDelegate implements StartActivityDelegate {
         private final Activity activity;
 
diff --git a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
index 95ad49009..fc3e01879 100644
--- a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
@@ -84,11 +84,15 @@ boolean needsInternetPermission() {
     void cancel() {
     }
 
+    void putChallengeParam(JSONObject param) throws JSONException {
+    }
+
     protected String getClientState(String authId) {
         JSONObject param = new JSONObject();
         try {
             param.put(LoginLogger.EVENT_PARAM_AUTH_LOGGER_ID, authId);
             param.put(LoginLogger.EVENT_PARAM_METHOD, getNameForLogging());
+            putChallengeParam(param);
         } catch (JSONException e) {
             Log.w("LoginMethodHandler", "Error creating client state json: " + e.getMessage());
         }
diff --git a/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
new file mode 100644
index 000000000..0a0db1937
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
@@ -0,0 +1,200 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.text.TextUtils;
+import android.webkit.CookieSyncManager;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookServiceException;
+import com.facebook.appevents.AppEventsConstants;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+
+import java.util.Locale;
+
+abstract class WebLoginMethodHandler extends LoginMethodHandler {
+    private static final String WEB_VIEW_AUTH_HANDLER_STORE =
+            "com.facebook.login.AuthorizationClient.WebViewAuthHandler.TOKEN_STORE_KEY";
+    private static final String WEB_VIEW_AUTH_HANDLER_TOKEN_KEY = "TOKEN";
+
+    private static final String getRedirectUri() {
+        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
+    }
+
+    private String e2e;
+
+    WebLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    WebLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    abstract AccessTokenSource getTokenSource();
+
+    protected Bundle getParameters(final LoginClient.Request request) {
+        Bundle parameters = new Bundle();
+        if (!Utility.isNullOrEmpty(request.getPermissions())) {
+            String scope = TextUtils.join(",", request.getPermissions());
+            parameters.putString(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
+            addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
+        }
+
+        DefaultAudience audience = request.getDefaultAudience();
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, audience.getNativeProtocolAudience());
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_STATE, getClientState(request.getAuthId()));
+
+        AccessToken previousToken = AccessToken.getCurrentAccessToken();
+        String previousTokenString = previousToken != null ? previousToken.getToken() : null;
+        if (previousTokenString != null
+                && (previousTokenString.equals(loadCookieToken()))) {
+            parameters.putString(
+                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
+                    previousTokenString);
+            // Don't log the actual access token, just its presence or absence.
+            addLoggingExtra(
+                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
+                    AppEventsConstants.EVENT_PARAM_VALUE_YES);
+        } else {
+            // The call to clear cookies will create the first instance of CookieSyncManager if
+            // necessary
+            Utility.clearFacebookCookies(loginClient.getActivity());
+            addLoggingExtra(
+                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
+                    AppEventsConstants.EVENT_PARAM_VALUE_NO);
+        }
+
+        return parameters;
+    }
+
+    protected Bundle addExtraParameters(Bundle parameters, final LoginClient.Request request) {
+        parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, getRedirectUri());
+        parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, request.getApplicationId());
+        parameters.putString(ServerProtocol.DIALOG_PARAM_E2E, loginClient.getE2E());
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
+                ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
+                ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+
+        // Set the re-request auth type for requests
+        if (request.isRerequest()) {
+            parameters.putString(
+                    ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
+                    ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+        }
+
+        return parameters;
+    }
+
+    protected void onComplete(LoginClient.Request request, Bundle values, FacebookException error) {
+        LoginClient.Result outcome;
+        e2e = null;
+        if (values != null) {
+            // Actual e2e we got from the dialog should be used for logging.
+            if (values.containsKey(ServerProtocol.DIALOG_PARAM_E2E)) {
+                e2e = values.getString(ServerProtocol.DIALOG_PARAM_E2E);
+            }
+
+            try {
+                AccessToken token = createAccessTokenFromWebBundle(
+                        request.getPermissions(),
+                        values,
+                        getTokenSource(),
+                        request.getApplicationId());
+                outcome = LoginClient.Result.createTokenResult(
+                        loginClient.getPendingRequest(),
+                        token);
+
+                // Ensure any cookies set by the dialog are saved
+                // This is to work around a bug where CookieManager may fail to instantiate if
+                // CookieSyncManager has never been created.
+                CookieSyncManager syncManager =
+                        CookieSyncManager.createInstance(loginClient.getActivity());
+                syncManager.sync();
+                saveCookieToken(token.getToken());
+            } catch (FacebookException ex) {
+                outcome = LoginClient.Result.createErrorResult(
+                        loginClient.getPendingRequest(),
+                        null,
+                        ex.getMessage());
+            }
+        } else {
+            if (error instanceof FacebookOperationCanceledException) {
+                outcome = LoginClient.Result.createCancelResult(loginClient.getPendingRequest(),
+                        "User canceled log in.");
+            } else {
+                // Something went wrong, don't log a completion event since it will skew timing
+                // results.
+                e2e = null;
+
+                String errorCode = null;
+                String errorMessage = error.getMessage();
+                if (error instanceof FacebookServiceException) {
+                    FacebookRequestError requestError =
+                            ((FacebookServiceException)error).getRequestError();
+                    errorCode = String.format(Locale.ROOT, "%d", requestError.getErrorCode());
+                    errorMessage = requestError.toString();
+                }
+                outcome = LoginClient.Result.createErrorResult(loginClient.getPendingRequest(),
+                        null, errorMessage, errorCode);
+            }
+        }
+
+        if (!Utility.isNullOrEmpty(e2e)) {
+            logWebLoginCompleted(e2e);
+        }
+
+        loginClient.completeAndValidate(outcome);
+    }
+
+    private String loadCookieToken() {
+        Context context = loginClient.getActivity();
+        SharedPreferences sharedPreferences = context.getSharedPreferences(
+                WEB_VIEW_AUTH_HANDLER_STORE,
+                Context.MODE_PRIVATE);
+        return sharedPreferences.getString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, "");
+    }
+
+    private void saveCookieToken(String token) {
+        Context context = loginClient.getActivity();
+        context.getSharedPreferences(
+                WEB_VIEW_AUTH_HANDLER_STORE,
+                Context.MODE_PRIVATE)
+                .edit()
+                .putString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, token)
+                .apply();
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
index 772fbf7ed..cb7245c6c 100644
--- a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
@@ -21,33 +21,18 @@
 package com.facebook.login;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.v4.app.FragmentActivity;
-import android.text.TextUtils;
-import android.webkit.CookieSyncManager;
 
-import com.facebook.AccessToken;
 import com.facebook.AccessTokenSource;
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.internal.FacebookDialogFragment;
 import com.facebook.FacebookException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookServiceException;
+import com.facebook.internal.FacebookDialogFragment;
 import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
 import com.facebook.internal.WebDialog;
 
-import java.util.Locale;
-
-class WebViewLoginMethodHandler extends LoginMethodHandler {
-    private static final String WEB_VIEW_AUTH_HANDLER_STORE =
-            "com.facebook.login.AuthorizationClient.WebViewAuthHandler.TOKEN_STORE_KEY";
-    private static final String WEB_VIEW_AUTH_HANDLER_TOKEN_KEY = "TOKEN";
+class WebViewLoginMethodHandler extends WebLoginMethodHandler {
 
     private WebDialog loginDialog;
     private String e2e;
@@ -61,6 +46,11 @@ String getNameForLogging() {
         return "web_view";
     }
 
+    @Override
+    AccessTokenSource getTokenSource() {
+        return AccessTokenSource.WEB_VIEW;
+    }
+
     @Override
     boolean needsInternetPermission() {
         return true;
@@ -76,36 +66,7 @@ void cancel() {
 
     @Override
     boolean tryAuthorize(final LoginClient.Request request) {
-        Bundle parameters = new Bundle();
-        if (!Utility.isNullOrEmpty(request.getPermissions())) {
-            String scope = TextUtils.join(",", request.getPermissions());
-            parameters.putString(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
-            addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
-        }
-
-        DefaultAudience audience = request.getDefaultAudience();
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, audience.getNativeProtocolAudience());
-
-        AccessToken previousToken = AccessToken.getCurrentAccessToken();
-        String previousTokenString = previousToken != null ? previousToken.getToken() : null;
-        if (previousTokenString != null
-                && (previousTokenString.equals(loadCookieToken()))) {
-            parameters.putString(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    previousTokenString);
-            // Don't log the actual access token, just its presence or absence.
-            addLoggingExtra(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    AppEventsConstants.EVENT_PARAM_VALUE_YES);
-        } else {
-            // The call to clear cookies will create the first instance of CookieSyncManager if
-            // necessary
-            Utility.clearFacebookCookies(loginClient.getActivity());
-            addLoggingExtra(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    AppEventsConstants.EVENT_PARAM_VALUE_NO);
-        }
+        Bundle parameters = getParameters(request);
 
         WebDialog.OnCompleteListener listener = new WebDialog.OnCompleteListener() {
             @Override
@@ -116,8 +77,6 @@ public void onComplete(Bundle values, FacebookException error) {
 
         e2e = LoginClient.getE2E();
         addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_STATE, getClientState(request.getAuthId()));
 
         FragmentActivity fragmentActivity = loginClient.getActivity();
         WebDialog.Builder builder = new AuthDialogBuilder(
@@ -140,81 +99,7 @@ public void onComplete(Bundle values, FacebookException error) {
 
     void onWebDialogComplete(LoginClient.Request request, Bundle values,
             FacebookException error) {
-        LoginClient.Result outcome;
-        if (values != null) {
-            // Actual e2e we got from the dialog should be used for logging.
-            if (values.containsKey(ServerProtocol.DIALOG_PARAM_E2E)) {
-                e2e = values.getString(ServerProtocol.DIALOG_PARAM_E2E);
-            }
-
-            try {
-                AccessToken token = createAccessTokenFromWebBundle(
-                        request.getPermissions(),
-                        values,
-                        AccessTokenSource.WEB_VIEW,
-                        request.getApplicationId());
-                outcome = LoginClient.Result.createTokenResult(
-                        loginClient.getPendingRequest(),
-                        token);
-
-                // Ensure any cookies set by the dialog are saved
-                // This is to work around a bug where CookieManager may fail to instantiate if
-                // CookieSyncManager has never been created.
-                CookieSyncManager syncManager =
-                        CookieSyncManager.createInstance(loginClient.getActivity());
-                syncManager.sync();
-                saveCookieToken(token.getToken());
-            } catch (FacebookException ex) {
-                outcome = LoginClient.Result.createErrorResult(
-                        loginClient.getPendingRequest(),
-                        null,
-                        ex.getMessage());
-            }
-        } else {
-            if (error instanceof FacebookOperationCanceledException) {
-                outcome = LoginClient.Result.createCancelResult(loginClient.getPendingRequest(),
-                        "User canceled log in.");
-            } else {
-                // Something went wrong, don't log a completion event since it will skew timing
-                // results.
-                e2e = null;
-
-                String errorCode = null;
-                String errorMessage = error.getMessage();
-                if (error instanceof FacebookServiceException) {
-                    FacebookRequestError requestError =
-                            ((FacebookServiceException)error).getRequestError();
-                    errorCode = String.format(Locale.ROOT, "%d", requestError.getErrorCode());
-                    errorMessage = requestError.toString();
-                }
-                outcome = LoginClient.Result.createErrorResult(loginClient.getPendingRequest(),
-                        null, errorMessage, errorCode);
-            }
-        }
-
-        if (!Utility.isNullOrEmpty(e2e)) {
-            logWebLoginCompleted(e2e);
-        }
-
-        loginClient.completeAndValidate(outcome);
-    }
-
-    private void saveCookieToken(String token) {
-        Context context = loginClient.getActivity();
-        context.getSharedPreferences(
-                WEB_VIEW_AUTH_HANDLER_STORE,
-                Context.MODE_PRIVATE)
-            .edit()
-            .putString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, token)
-            .apply();
-    }
-
-    private String loadCookieToken() {
-        Context context = loginClient.getActivity();
-        SharedPreferences sharedPreferences = context.getSharedPreferences(
-                WEB_VIEW_AUTH_HANDLER_STORE,
-                Context.MODE_PRIVATE);
-        return sharedPreferences.getString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, "");
+        super.onComplete(request, values, error);
     }
 
     static class AuthDialogBuilder extends WebDialog.Builder {
diff --git a/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java b/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java
new file mode 100644
index 000000000..9ffb8d896
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java
@@ -0,0 +1,107 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login.widget;
+
+import android.content.Context;
+import android.net.Uri;
+import android.util.AttributeSet;
+import android.view.View;
+
+import com.facebook.login.DeviceLoginManager;
+import com.facebook.login.LoginBehavior;
+import com.facebook.login.LoginManager;
+
+/**
+ * A Log In/Log Out button that maintains login state and logs in/out for the app.
+ * <p/>
+ * This control requires the app ID and client token to be specified in the AndroidManifest.xml.
+ */
+public class DeviceLoginButton extends LoginButton {
+
+    private Uri deviceRedirectUri;
+
+    /**
+     * Create the LoginButton by inflating from XML
+     *
+     * @see View#View(Context, AttributeSet)
+     */
+    public DeviceLoginButton(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    /**
+     * Create the LoginButton by inflating from XML
+     *
+     * @see View#View(Context, AttributeSet)
+     */
+    public DeviceLoginButton(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    /**
+     * Create the LoginButton by inflating from XML and applying a style.
+     *
+     * @see View#View(Context, AttributeSet, int)
+     */
+    public DeviceLoginButton(Context context) {
+        super(context);
+    }
+
+    /**
+     * Set uri to redirect the user to after they complete
+     * the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @param uri The URI to set.
+     */
+    public void setDeviceRedirectUri(Uri uri) {
+        this.deviceRedirectUri = uri;
+    }
+
+    /**
+     * Get the previously set uri that will be used to redirect the user to
+     * after they complete the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @return The current device redirect uri set.
+     */
+    public Uri getDeviceRedirectUri() {
+        return this.deviceRedirectUri;
+    }
+
+    @Override
+    protected LoginClickListener getNewLoginClickListener() {
+        return new DeviceLoginClickListener();
+    }
+
+    private class DeviceLoginClickListener extends LoginClickListener {
+        @Override
+        protected LoginManager getLoginManager() {
+            DeviceLoginManager manager = DeviceLoginManager.getInstance();
+            manager.setDefaultAudience(getDefaultAudience());
+            manager.setLoginBehavior(LoginBehavior.DEVICE_AUTH);
+            manager.setDeviceRedirectUri(getDeviceRedirectUri());
+            return manager;
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java b/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
index 78e8972ba..0ae9eb9a2 100644
--- a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
+++ b/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
@@ -27,6 +27,7 @@
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.net.Uri;
 import android.os.Bundle;
 import android.util.AttributeSet;
 import android.view.View;
@@ -404,8 +405,9 @@ public ToolTipMode getToolTipMode() {
 
     /**
      * Sets the amount of time (in milliseconds) that the tool tip will be shown to the user. The
-     * default is {@value ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}. Any value that is less than or
-     * equal to zero will cause the tool tip to be displayed indefinitely.
+     * default is {@value com.facebook.login.widget.ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}.
+     * Any value that is less than or equal to zero will cause the tool tip to be displayed
+     * indefinitely.
      *
      * @param displayTime The amount of time (in milliseconds) that the tool tip will be displayed
      *                    to the user
@@ -546,7 +548,7 @@ protected void configureButton(
             final int defStyleAttr,
             final int defStyleRes) {
         super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        setInternalOnClickListener(new LoginClickListener());
+        setInternalOnClickListener(getNewLoginClickListener());
 
         parseLoginButtonAttributes(context, attrs, defStyleAttr, defStyleRes);
 
@@ -571,6 +573,10 @@ protected void onCurrentAccessTokenChanged(
         setButtonText();
     }
 
+    protected LoginClickListener getNewLoginClickListener() {
+        return new LoginClickListener();
+    }
+
     @Override
     protected int getDefaultStyleResource() {
         return R.style.com_facebook_loginview_default_style;
@@ -671,82 +677,28 @@ protected int getDefaultRequestCode() {
         return CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode();
     }
 
-    private class LoginClickListener implements OnClickListener {
+    LoginManager getLoginManager() {
+        if (loginManager == null) {
+            loginManager = LoginManager.getInstance();
+        }
+        return loginManager;
+    }
+
+    void setLoginManager(LoginManager loginManager) {
+        this.loginManager = loginManager;
+    }
 
+    protected class LoginClickListener implements OnClickListener {
         @Override
         public void onClick(View v) {
             callExternalOnClickListener(v);
 
-            Context context = getContext();
-
             AccessToken accessToken = AccessToken.getCurrentAccessToken();
-
             if (accessToken != null) {
                 // Log out
-                if (confirmLogout) {
-                    // Create a confirmation dialog
-                    String logout = getResources().getString(
-                            R.string.com_facebook_loginview_log_out_action);
-                    String cancel = getResources().getString(
-                            R.string.com_facebook_loginview_cancel_action);
-                    String message;
-                    Profile profile = Profile.getCurrentProfile();
-                    if (profile != null && profile.getName() != null) {
-                        message = String.format(
-                                getResources().getString(
-                                        R.string.com_facebook_loginview_logged_in_as),
-                                profile.getName());
-                    } else {
-                        message = getResources().getString(
-                                R.string.com_facebook_loginview_logged_in_using_facebook);
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(context);
-                    builder.setMessage(message)
-                            .setCancelable(true)
-                            .setPositiveButton(logout, new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    getLoginManager().logOut();
-                                }
-                            })
-                            .setNegativeButton(cancel, null);
-                    builder.create().show();
-                } else {
-                    getLoginManager().logOut();
-                }
+                performLogout(getContext());
             } else {
-                LoginManager loginManager = getLoginManager();
-                loginManager.setDefaultAudience(getDefaultAudience());
-                loginManager.setLoginBehavior(getLoginBehavior());
-
-                if (LoginAuthorizationType.PUBLISH.equals(properties.authorizationType)) {
-                    if (LoginButton.this.getFragment() != null) {
-                        loginManager.logInWithPublishPermissions(
-                                LoginButton.this.getFragment(),
-                                properties.permissions);
-                    } else if (LoginButton.this.getNativeFragment() != null) {
-                        loginManager.logInWithPublishPermissions(
-                                LoginButton.this.getNativeFragment(),
-                                properties.permissions);
-                    } else {
-                        loginManager.logInWithPublishPermissions(
-                                LoginButton.this.getActivity(),
-                                properties.permissions);
-                    }
-                } else {
-                    if (LoginButton.this.getFragment() != null) {
-                        loginManager.logInWithReadPermissions(
-                                LoginButton.this.getFragment(),
-                                properties.permissions);
-                    } else if (LoginButton.this.getNativeFragment() != null) {
-                        loginManager.logInWithReadPermissions(
-                                LoginButton.this.getNativeFragment(),
-                                properties.permissions);
-                    } else {
-                        loginManager.logInWithReadPermissions(
-                                LoginButton.this.getActivity(),
-                                properties.permissions);
-                    }
-                }
+                performLogin();
             }
 
             AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
@@ -756,16 +708,79 @@ public void onClick(DialogInterface dialog, int which) {
 
             logger.logSdkEvent(loginLogoutEventName, null, parameters);
         }
-    }
 
-    LoginManager getLoginManager() {
-        if (loginManager == null) {
-            loginManager = LoginManager.getInstance();
+        protected void performLogin() {
+            final LoginManager loginManager = getLoginManager();
+            if (LoginAuthorizationType.PUBLISH.equals(properties.authorizationType)) {
+                if (LoginButton.this.getFragment() != null) {
+                    loginManager.logInWithPublishPermissions(
+                            LoginButton.this.getFragment(),
+                            properties.permissions);
+                } else if (LoginButton.this.getNativeFragment() != null) {
+                    loginManager.logInWithPublishPermissions(
+                            LoginButton.this.getNativeFragment(),
+                            properties.permissions);
+                } else {
+                    loginManager.logInWithPublishPermissions(
+                            LoginButton.this.getActivity(),
+                            properties.permissions);
+                }
+            } else {
+                if (LoginButton.this.getFragment() != null) {
+                    loginManager.logInWithReadPermissions(
+                            LoginButton.this.getFragment(),
+                            properties.permissions);
+                } else if (LoginButton.this.getNativeFragment() != null) {
+                    loginManager.logInWithReadPermissions(
+                            LoginButton.this.getNativeFragment(),
+                            properties.permissions);
+                } else {
+                    loginManager.logInWithReadPermissions(
+                            LoginButton.this.getActivity(),
+                            properties.permissions);
+                }
+            }
         }
-        return loginManager;
-    }
 
-    void setLoginManager(LoginManager loginManager) {
-        this.loginManager = loginManager;
+        protected void performLogout(Context context) {
+            final LoginManager loginManager = getLoginManager();
+            if (confirmLogout) {
+                // Create a confirmation dialog
+                String logout = getResources().getString(
+                        R.string.com_facebook_loginview_log_out_action);
+                String cancel = getResources().getString(
+                        R.string.com_facebook_loginview_cancel_action);
+                String message;
+                Profile profile = Profile.getCurrentProfile();
+                if (profile != null && profile.getName() != null) {
+                    message = String.format(
+                            getResources().getString(
+                                    R.string.com_facebook_loginview_logged_in_as),
+                            profile.getName());
+                } else {
+                    message = getResources().getString(
+                            R.string.com_facebook_loginview_logged_in_using_facebook);
+                }
+                AlertDialog.Builder builder = new AlertDialog.Builder(context);
+                builder.setMessage(message)
+                        .setCancelable(true)
+                        .setPositiveButton(logout, new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int which) {
+                                loginManager.logOut();
+                            }
+                        })
+                        .setNegativeButton(cancel, null);
+                builder.create().show();
+            } else {
+                loginManager.logOut();
+            }
+        }
+
+        protected LoginManager getLoginManager() {
+            LoginManager manager = LoginManager.getInstance();
+            manager.setDefaultAudience(getDefaultAudience());
+            manager.setLoginBehavior(getLoginBehavior());
+            return manager;
+        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
new file mode 100644
index 000000000..c9c017124
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
@@ -0,0 +1,143 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.share;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.facebook.FacebookActivity;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.internal.AppCall;
+import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.internal.FacebookDialogBase;
+import com.facebook.internal.FragmentWrapper;
+import com.facebook.share.internal.DeviceShareDialogFragment;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+
+import java.util.List;
+
+/*
+ * Provides functionality to share from devices.
+ * See https://developers.facebook.com/docs/android/devices
+ *
+ * Only ShareLinkContent and ShareOpenGraphContent are supported.
+ *
+ * The dialog does not indicate if the person completed a share. Therefore,
+ * the callback will always either invoke onSuccess or onError.
+ *
+ * The dialog can also dismiss itself after the device code has expired.
+ */
+public class DeviceShareDialog
+        extends FacebookDialogBase<ShareContent, DeviceShareDialog.Result> {
+    private static final int DEFAULT_REQUEST_CODE =
+            CallbackManagerImpl.RequestCodeOffset.DeviceShare.toRequestCode();
+    /**
+     * Constructs a new DeviceShareDialog.
+     * @param activity Activity to use to share the provided content
+     */
+    public DeviceShareDialog(final Activity activity) {
+        super(activity, DEFAULT_REQUEST_CODE);
+    }
+    /**
+     * Constructs a new DeviceShareDialog.
+     * @param fragment fragment to use to share the provided content
+     */
+    public DeviceShareDialog(final Fragment fragment) {
+        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
+    }
+    /**
+     * Constructs a new DeviceShareDialog.
+     * @param fragment fragment to use to share the provided content
+     */
+    public DeviceShareDialog(final android.support.v4.app.Fragment fragment) {
+        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
+    }
+
+    @Override
+    protected boolean canShowImpl(ShareContent content, Object mode) {
+        return (content instanceof ShareLinkContent ||
+                content instanceof ShareOpenGraphContent);
+    }
+
+    @Override
+    protected void showImpl(final ShareContent content, final Object mode) {
+        if (content == null) {
+            throw new FacebookException("Must provide non-null content to share");
+        }
+
+        if (!(content instanceof ShareLinkContent) &&
+            !(content instanceof ShareOpenGraphContent)) {
+            throw new FacebookException(this.getClass().getSimpleName() +
+                    " only supports ShareLinkContent or ShareOpenGraphContent");
+        }
+        Intent intent = new Intent();
+        intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
+        intent.setAction(DeviceShareDialogFragment.TAG);
+        intent.putExtra("content", content);
+        startActivityForResult(intent, getRequestCode());
+    }
+
+    @Override
+    protected List<ModeHandler> getOrderedModeHandlers() {
+        return null;
+    }
+
+    @Override
+    protected AppCall createBaseAppCall() {
+       return null;
+    }
+
+    @Override
+    protected void registerCallbackImpl(
+            final CallbackManagerImpl callbackManager,
+            final FacebookCallback<Result> callback) {
+
+        callbackManager.registerCallback(
+                getRequestCode(),
+                new CallbackManagerImpl.Callback() {
+                    @Override
+                    public boolean onActivityResult(int resultCode, Intent data) {
+                        Bundle extras = data.getExtras();
+                        if (data.hasExtra("error")) {
+                            FacebookRequestError error = data.getParcelableExtra("error");
+                            callback.onError(error.getException());
+                            return true;
+                        }
+                        callback.onSuccess(new Result());
+                        return true;
+                    }
+                });
+    }
+
+    /*
+     * Describes the result of a device share.
+     * This class is intentionally empty.
+     */
+    public static class Result {
+
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
new file mode 100644
index 000000000..ba25eed17
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
@@ -0,0 +1,295 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.internal;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.DialogFragment;
+import android.text.Html;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.facebook.FacebookRequestError;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
+import com.facebook.R;
+import com.facebook.internal.Validate;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * com.facebook.share.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class DeviceShareDialogFragment extends DialogFragment {
+    public static final String TAG = "DeviceShareDialogFragment";
+    private static final String DEVICE_SHARE_ENDPOINT = "device/share";
+    private static final String REQUEST_STATE_KEY = "request_state";
+    private ProgressBar progressBar;
+    private TextView confirmationCode;
+    private Dialog dialog;
+    private volatile RequestState currentRequestState;
+    private volatile ScheduledFuture codeExpiredFuture;
+    private static ScheduledThreadPoolExecutor backgroundExecutor;
+    private ShareContent shareContent;
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            LayoutInflater inflater,
+            ViewGroup container,
+            Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (savedInstanceState != null) {
+            RequestState requestState = savedInstanceState.getParcelable(REQUEST_STATE_KEY);
+            if (requestState != null) {
+                setCurrentRequestState(requestState);
+            }
+        }
+        return view;
+    }
+
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
+        LayoutInflater inflater = getActivity().getLayoutInflater();
+        View view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
+        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
+        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
+
+        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
+        cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                dialog.dismiss();
+            }
+        });
+
+        TextView instructions = (TextView)view.findViewById(
+                R.id.com_facebook_device_auth_instructions);
+        instructions.setText(
+                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
+
+        TextView title = (TextView)view.findViewById(
+                R.id.com_facebook_device_dialog_title);
+        title.setText(getString(R.string.com_facebook_share_button_text));
+        dialog.setContentView(view);
+
+        this.startShare();
+        return dialog;
+    }
+
+    @Override
+    public void onDismiss(final DialogInterface dialog) {
+        super.onDismiss(dialog);
+        if (codeExpiredFuture != null) {
+            codeExpiredFuture.cancel(true);
+        }
+        Intent resultIntent = new Intent();
+        finishActivity(Activity.RESULT_OK, resultIntent);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        if (currentRequestState != null) {
+            outState.putParcelable(REQUEST_STATE_KEY, currentRequestState);
+        }
+    }
+
+    private void finishActivity(int resultCode, Intent data) {
+        if (isAdded()) {
+            Activity activity = getActivity();
+            activity.setResult(resultCode, data);
+            activity.finish();
+        }
+    }
+
+    private void detach() {
+        if (isAdded()) {
+            this.getFragmentManager().beginTransaction().remove(this).commit();
+        }
+    }
+
+    public void setShareContent(ShareContent shareContent) {
+        this.shareContent = shareContent;
+    }
+
+    private Bundle getGraphParametersForShareContent() {
+        ShareContent content = this.shareContent;
+        if (content == null) {
+            return null;
+        }
+        if (content instanceof ShareLinkContent) {
+            return WebDialogParameters.create((ShareLinkContent)content);
+        } else if (content instanceof ShareOpenGraphContent) {
+            return WebDialogParameters.create((ShareOpenGraphContent)content);
+        }
+        return null;
+    }
+
+    private void startShare() {
+        Bundle parameters = getGraphParametersForShareContent();
+        if (parameters == null || parameters.size() == 0) {
+            this.finishActivityWithError(
+                    new FacebookRequestError(0, "", "Failed to get share content"));
+        }
+        String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
+        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
+        GraphRequest graphRequest = new GraphRequest(
+                null,
+                DEVICE_SHARE_ENDPOINT,
+                parameters,
+                HttpMethod.POST,
+                new GraphRequest.Callback() {
+                    @Override
+                    public void onCompleted(GraphResponse response) {
+                        FacebookRequestError error = response.getError();
+                        if (error != null) {
+                            finishActivityWithError(error);
+                            return;
+                        }
+
+                        JSONObject jsonObject = response.getJSONObject();
+                        RequestState requestState = new RequestState();
+                        try {
+                            requestState.setUserCode(jsonObject.getString("user_code"));
+                            requestState.setExpiresIn(jsonObject.getLong("expires_in"));
+                        } catch (JSONException ex) {
+                            finishActivityWithError(
+                                    new FacebookRequestError(0, "", "Malformed server response"));
+                            return;
+                        }
+
+                        setCurrentRequestState(requestState);
+                    }
+                });
+        graphRequest.executeAsync();
+    }
+
+    private void finishActivityWithError(FacebookRequestError error) {
+        // detach so that we don't send a cancellation message back ondismiss.
+        detach();
+        Intent intent = new Intent();
+        intent.putExtra("error", error);
+        finishActivity(Activity.RESULT_OK, intent);
+    }
+
+    private static synchronized ScheduledThreadPoolExecutor getBackgroundExecutor() {
+        if (backgroundExecutor == null) {
+            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
+        }
+        return backgroundExecutor;
+    }
+
+    private void setCurrentRequestState(RequestState currentRequestState) {
+        this.currentRequestState = currentRequestState;
+        confirmationCode.setText(currentRequestState.getUserCode());
+        confirmationCode.setVisibility(View.VISIBLE);
+        progressBar.setVisibility(View.GONE);
+
+        codeExpiredFuture = getBackgroundExecutor().schedule(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        dialog.dismiss();
+                    }
+                },
+                currentRequestState.getExpiresIn(),
+                TimeUnit.SECONDS);
+    }
+
+    private static class RequestState implements Parcelable {
+        private String userCode;
+        private long expiresIn;
+
+        RequestState() {}
+
+        public String getUserCode() {
+            return userCode;
+        }
+
+        public void setUserCode(String userCode) {
+            this.userCode = userCode;
+        }
+
+        public long getExpiresIn() {
+            return expiresIn;
+        }
+
+        public void setExpiresIn(long expiresIn) {
+            this.expiresIn = expiresIn;
+        }
+
+
+        protected RequestState(Parcel in) {
+            userCode = in.readString();
+            expiresIn = in.readLong();
+        }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeString(userCode);
+            dest.writeLong(expiresIn);
+        }
+
+        @SuppressWarnings("unused")
+        public static final Parcelable.Creator<RequestState> CREATOR =
+                new Parcelable.Creator<RequestState>() {
+                    @Override
+                    public RequestState createFromParcel(Parcel in) {
+                        return new RequestState(in);
+                    }
+
+                    @Override
+                    public RequestState[] newArray(int size) {
+                        return new RequestState[size];
+                    }
+                };
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java b/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
index 59969a758..4aeeb34d6 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
@@ -22,7 +22,6 @@
 
 import android.app.Activity;
 import android.content.Intent;
-import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.util.Log;
@@ -143,7 +142,7 @@ public boolean onActivityResult(int resultCode, Intent data) {
 
     private class NativeHandler extends ModeHandler {
         @Override
-        public boolean canShow(final LikeContent content) {
+        public boolean canShow(final LikeContent content, boolean isBestEffort) {
             return (content != null) && LikeDialog.canShowNativeDialog();
         }
 
@@ -175,7 +174,7 @@ public Bundle getLegacyParameters() {
 
     private class WebFallbackHandler extends ModeHandler {
         @Override
-        public boolean canShow(final LikeContent content) {
+        public boolean canShow(final LikeContent content, boolean isBestEffort) {
             return (content != null) && LikeDialog.canShowWebFallback();
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
index 40443c923..3d56d79c8 100644
--- a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
@@ -20,18 +20,17 @@
 
 package com.facebook.share.internal;
 
-import android.content.Context;
 import android.os.Bundle;
 
 import com.facebook.FacebookException;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareHashtag;
 import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
+import com.facebook.share.model.ShareMediaContent;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
 import com.facebook.share.model.ShareVideoContent;
 
 import org.json.JSONException;
@@ -84,6 +83,13 @@ public static Bundle create(
                         "Unable to create a JSON Object from the provided ShareOpenGraphContent: "
                                 + e.getMessage());
             }
+        } else if (shareContent instanceof ShareMediaContent) {
+            final ShareMediaContent mediaContent = (ShareMediaContent) shareContent;
+            List<Bundle> mediaInfos = ShareInternalUtility.getMediaInfos(
+                    mediaContent,
+                    callId);
+
+            nativeParams = create(mediaContent, mediaInfos, shouldFailOnDataError);
         }
 
         return nativeParams;
@@ -96,6 +102,7 @@ private static Bundle create(ShareLinkContent linkContent, boolean dataErrorsFat
         Utility.putNonEmptyString(
                 params, ShareConstants.DESCRIPTION, linkContent.getContentDescription());
         Utility.putUri(params, ShareConstants.IMAGE_URL, linkContent.getImageUrl());
+        Utility.putNonEmptyString(params, ShareConstants.QUOTE, linkContent.getQuote());
 
         return params;
     }
@@ -125,6 +132,17 @@ private static Bundle create(
         return params;
     }
 
+    private static Bundle create(
+            ShareMediaContent mediaContent,
+            List<Bundle> mediaInfos,
+            boolean dataErrorsFatal) {
+        Bundle params = createBaseParameters(mediaContent, dataErrorsFatal);
+
+        params.putParcelableArrayList(ShareConstants.MEDIA, new ArrayList<>(mediaInfos));
+
+        return params;
+    }
+
     private static Bundle create(
             ShareOpenGraphContent openGraphContent,
             JSONObject openGraphActionJSON,
@@ -165,7 +183,12 @@ private static Bundle createBaseParameters(ShareContent content, boolean dataErr
         if (!Utility.isNullOrEmpty(peopleIds)) {
             params.putStringArrayList(
                     ShareConstants.PEOPLE_IDS,
-                    new ArrayList<String>(peopleIds));
+                    new ArrayList<>(peopleIds));
+        }
+
+        ShareHashtag shareHashtag = content.getShareHashtag();
+        if (shareHashtag != null) {
+            Utility.putNonEmptyString(params, ShareConstants.HASHTAG, shareHashtag.getHashtag());
         }
 
         return params;
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
index 803b14dab..c5f3f44b7 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
@@ -26,25 +26,35 @@
  * unsupported, and they may be modified or removed without warning at any time.
  */
 public class ShareConstants {
+
+    // Common Web Params
+    public static final String WEB_DIALOG_PARAM_ACTION_TYPE = "action_type";
+
+    // Game Request Dialog Params
     public static final String WEB_DIALOG_PARAM_DATA = "data";
     public static final String WEB_DIALOG_PARAM_MESSAGE = "message";
     public static final String WEB_DIALOG_PARAM_TO = "to";
     public static final String WEB_DIALOG_PARAM_TITLE = "title";
-    public static final String WEB_DIALOG_PARAM_ACTION_TYPE = "action_type";
     public static final String WEB_DIALOG_PARAM_OBJECT_ID = "object_id";
     public static final String WEB_DIALOG_PARAM_FILTERS = "filters";
     public static final String WEB_DIALOG_PARAM_SUGGESTIONS = "suggestions";
 
+    // Web Share Dialog Params
     public static final String WEB_DIALOG_PARAM_HREF = "href";
     public static final String WEB_DIALOG_PARAM_ACTION_PROPERTIES = "action_properties";
+    public static final String WEB_DIALOG_PARAM_QUOTE = "quote";
+    public static final String WEB_DIALOG_PARAM_HASHTAG = "hashtag";
 
+    // Feed Dialog Params
     public static final String WEB_DIALOG_PARAM_LINK = "link";
     public static final String WEB_DIALOG_PARAM_PICTURE = "picture";
     public static final String WEB_DIALOG_PARAM_NAME = "name";
     public static final String WEB_DIALOG_PARAM_DESCRIPTION = "description";
 
+    // Join App Group Dialog Params
     public static final String WEB_DIALOG_PARAM_ID = "id";
 
+    // Create App Group Dialog Params
     public static final String WEB_DIALOG_PARAM_PRIVACY = "privacy";
 
     public static final String WEB_DIALOG_RESULT_PARAM_POST_ID = "post_id";
@@ -66,6 +76,7 @@
     public static final String PLACE_ID = "PLACE";
     public static final String PEOPLE_IDS = "FRIENDS";
     public static final String CONTENT_URL = "LINK";
+    public static final String HASHTAG = "HASHTAG";
     public static final String IMAGE_URL = "IMAGE";
     public static final String TITLE = "TITLE";
     public static final String DESCRIPTION = "DESCRIPTION";
@@ -73,6 +84,12 @@
     public static final String DATA_FAILURES_FATAL = "DATA_FAILURES_FATAL";
     public static final String PHOTOS = "PHOTOS";
     public static final String VIDEO_URL = "VIDEO";
+    public static final String QUOTE = "QUOTE";
+    public static final String MEDIA = "MEDIA";
+
+    // Multimedia args
+    public static final String MEDIA_TYPE = "type";
+    public static final String MEDIA_URI = "uri";
 
     // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
     public static final String LEGACY_ACTION = "com.facebook.platform.extra.ACTION";
@@ -91,6 +108,9 @@
     // Method args supported for ACTION_APPINVITE_DIALOG
     public static final String APPLINK_URL = "app_link_url";
     public static final String PREVIEW_IMAGE_URL = "preview_image_url";
+    public static final String PROMO_CODE = "promo_code";
+    public static final String PROMO_TEXT = "promo_text";
+    public static final String DEEPLINK_CONTEXT = "deeplink_context";
 
     // Extras supported for MESSAGE_GET_LIKE_STATUS_REQUEST:
     public static final String EXTRA_OBJECT_ID = "com.facebook.platform.extra.OBJECT_ID";
@@ -113,6 +133,7 @@
     public static final String RESULT_POST_ID = "postId";
 
     public static final int MAXIMUM_PHOTO_COUNT = 6;
+    public static final int MAXIMUM_MEDIA_COUNT = 6;
     static final String MY_VIDEOS = "me/videos";
 
     // Feed Dialog
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
index 4a03d46fd..ef0dbc864 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
@@ -29,6 +29,8 @@
 import com.facebook.internal.Validate;
 import com.facebook.share.model.ShareContent;
 import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareMedia;
+import com.facebook.share.model.ShareMediaContent;
 import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.ShareOpenGraphObject;
@@ -104,6 +106,8 @@ private static void validate(ShareContent content, Validator validator)
             validator.validate((ShareVideoContent) content);
         } else if (content instanceof ShareOpenGraphContent) {
             validator.validate((ShareOpenGraphContent) content);
+        } else if (content instanceof ShareMediaContent) {
+            validator.validate((ShareMediaContent) content);
         }
     }
 
@@ -202,6 +206,37 @@ private static void validateVideo(ShareVideo video, Validator validator) {
         }
     }
 
+    private static void validateMediaContent(ShareMediaContent mediaContent, Validator validator) {
+        List<ShareMedia> media = mediaContent.getMedia();
+        if (media == null || media.isEmpty()) {
+            throw new FacebookException("Must specify at least one medium in ShareMediaContent.");
+        }
+        if (media.size() > ShareConstants.MAXIMUM_MEDIA_COUNT) {
+            throw new FacebookException(
+                    String.format(
+                            Locale.ROOT,
+                            "Cannot add more than %d media.",
+                            ShareConstants.MAXIMUM_MEDIA_COUNT));
+        }
+        for (ShareMedia medium : media) {
+            validator.validate(medium);
+        }
+    }
+
+    public static void validateMedium(ShareMedia medium, Validator validator) {
+        if (medium instanceof SharePhoto) {
+            validator.validate((SharePhoto) medium);
+        } else if (medium instanceof ShareVideo) {
+            validator.validate((ShareVideo) medium);
+        } else {
+            throw new FacebookException(
+                    String.format(
+                            Locale.ROOT,
+                            "Invalid media type: %s",
+                            medium.getClass().getSimpleName()));
+        }
+    }
+
     private static void validateOpenGraphContent(
             ShareOpenGraphContent openGraphContent, Validator validator) {
         validator.validate(openGraphContent.getAction());
@@ -303,6 +338,11 @@ public void validate(final ShareVideoContent videoContent) {
             throw new FacebookException("Cannot share ShareVideoContent via web sharing dialogs");
         }
 
+        @Override
+        public void validate(ShareMediaContent mediaContent) {
+            throw new FacebookException("Cannot share ShareMediaContent via web sharing dialogs");
+        }
+
         @Override
         public void validate(final SharePhoto photo) {
             validatePhotoForWebDialog(photo, this);
@@ -330,6 +370,19 @@ public void validate(ShareVideoContent videoContent) {
                         "Cannot share video content with referrer URL using the share api");
             }
         }
+
+        @Override
+        public void validate(ShareMediaContent mediaContent) {
+            throw new FacebookException("Cannot share ShareMediaContent using the share api");
+        }
+
+        @Override
+        public void validate(ShareLinkContent linkContent) {
+            if (!Utility.isNullOrEmpty(linkContent.getQuote())) {
+                throw new FacebookException(
+                        "Cannot share link content with quote using the share api");
+            }
+        }
     }
 
     private static class Validator {
@@ -347,6 +400,10 @@ public void validate(final ShareVideoContent videoContent) {
             validateVideoContent(videoContent, this);
         }
 
+        public void validate(final ShareMediaContent mediaContent) {
+            validateMediaContent(mediaContent, this);
+        }
+
         public void validate(final ShareOpenGraphContent openGraphContent) {
             isOpenGraphContent = true;
             validateOpenGraphContent(openGraphContent, this);
@@ -373,6 +430,10 @@ public void validate(final ShareVideo video) {
             validateVideo(video, this);
         }
 
+        public void validate(final ShareMedia medium) {
+            validateMedium(medium, this);
+        }
+
         public boolean isOpenGraphContent() {
             return isOpenGraphContent;
         }
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
index 3348cc8b7..b75ede84e 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
@@ -42,6 +42,18 @@
      * Indicates whether the native Share dialog supports sharing of videos.
      */
     VIDEO(NativeProtocol.PROTOCOL_VERSION_20141028),
+    /**
+     * Indicates whether the native Share dialog supports sharing of multimedia.
+     */
+    MULTIMEDIA(NativeProtocol.PROTOCOL_VERSION_20160327),
+    /**
+     * Indicates whether the native Share dialog supports hashtags
+     */
+    HASHTAG(NativeProtocol.PROTOCOL_VERSION_20160327),
+    /**
+     * Indicates whether the native Share dialog supports quotes
+     */
+    LINK_SHARE_QUOTES(NativeProtocol.PROTOCOL_VERSION_20160327),
     ;
 
     private int minVersion;
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
index e80748629..4e8305eb2 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
@@ -49,10 +49,13 @@
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.share.Sharer;
+import com.facebook.share.model.ShareMedia;
+import com.facebook.share.model.ShareMediaContent;
 import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.SharePhoto;
 import com.facebook.share.model.SharePhotoContent;
+import com.facebook.share.model.ShareVideo;
 import com.facebook.share.model.ShareVideoContent;
 import com.facebook.share.widget.LikeView;
 
@@ -309,6 +312,39 @@ public static String getVideoUrl(final ShareVideoContent videoContent, final UUI
         return attachment.getAttachmentUrl();
     }
 
+    public static List<Bundle> getMediaInfos(
+            final ShareMediaContent mediaContent,
+            final UUID appCallId) {
+        final List<ShareMedia> media;
+        if (mediaContent == null || (media = mediaContent.getMedia()) == null) {
+            return null;
+        }
+
+        final List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
+        List<Bundle> mediaInfos = Utility.map(
+                media,
+                new Utility.Mapper<ShareMedia, Bundle>() {
+                    @Override
+                    public Bundle apply(ShareMedia item) {
+                        NativeAppCallAttachmentStore.Attachment attachment =
+                                getAttachment(appCallId, item);
+                        attachments.add(attachment);
+                        Bundle mediaInfo = new Bundle();
+                        mediaInfo.putString(
+                                ShareConstants.MEDIA_TYPE,
+                                item.getMediaType().name());
+                        mediaInfo.putString(
+                                ShareConstants.MEDIA_URI,
+                                attachment.getAttachmentUrl());
+                        return mediaInfo;
+                    }
+                });
+
+        NativeAppCallAttachmentStore.addAttachments(attachments);
+
+        return mediaInfos;
+    }
+
     public static JSONObject toJSONObjectForCall(
             final UUID callId,
             final ShareOpenGraphContent content)
@@ -477,18 +513,28 @@ public static JSONObject removeNamespacesFromOGJsonObject(
 
     private static NativeAppCallAttachmentStore.Attachment getAttachment(
             UUID callId,
-            SharePhoto photo) {
-        Bitmap bitmap = photo.getBitmap();
-        Uri photoUri = photo.getImageUrl();
+            ShareMedia medium) {
+        Bitmap bitmap = null;
+        Uri uri = null;
+
+        if (medium instanceof SharePhoto) {
+            SharePhoto photo = (SharePhoto)medium;
+            bitmap = photo.getBitmap();
+            uri = photo.getImageUrl();
+        } else if (medium instanceof ShareVideo) {
+            ShareVideo video = (ShareVideo)medium;
+            uri = video.getLocalUrl();
+        }
+
         NativeAppCallAttachmentStore.Attachment attachment = null;
         if (bitmap != null) {
             attachment = NativeAppCallAttachmentStore.createAttachment(
                     callId,
                     bitmap);
-        } else if (photoUri != null) {
+        } else if (uri != null) {
             attachment = NativeAppCallAttachmentStore.createAttachment(
                     callId,
-                    photoUri);
+                    uri);
         }
 
         return attachment;
diff --git a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
index 4f61bed5b..3cff1b099 100644
--- a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
@@ -28,6 +28,8 @@
 import com.facebook.internal.WebDialog;
 import com.facebook.share.model.AppGroupCreationContent;
 import com.facebook.share.model.GameRequestContent;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareHashtag;
 import com.facebook.share.model.ShareLinkContent;
 import com.facebook.share.model.ShareOpenGraphContent;
 
@@ -116,17 +118,22 @@ public static Bundle create(GameRequestContent gameRequestContent) {
     }
 
     public static Bundle create(ShareLinkContent shareLinkContent) {
-        Bundle params = new Bundle();
+        Bundle params = createBaseParameters(shareLinkContent);
         Utility.putUri(
                 params,
                 ShareConstants.WEB_DIALOG_PARAM_HREF,
                 shareLinkContent.getContentUrl());
 
+        Utility.putNonEmptyString(
+                params,
+                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
+                shareLinkContent.getQuote());
+
         return params;
     }
 
     public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
-        Bundle params = new Bundle();
+        Bundle params = createBaseParameters(shareOpenGraphContent);
 
         Utility.putNonEmptyString(
                 params,
@@ -149,6 +156,20 @@ public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
         return params;
     }
 
+    public static Bundle createBaseParameters(ShareContent shareContent) {
+        Bundle params = new Bundle();
+
+        ShareHashtag shareHashtag = shareContent.getShareHashtag();
+        if (shareHashtag != null) {
+            Utility.putNonEmptyString(
+                    params,
+                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
+                    shareHashtag.getHashtag());
+        }
+
+        return params;
+    }
+
     public static Bundle createForFeed(ShareLinkContent shareLinkContent) {
         Bundle webParams = new Bundle();
 
diff --git a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
index 897fc31f6..46d313295 100644
--- a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
@@ -21,6 +21,7 @@
 package com.facebook.share.model;
 
 import android.os.Parcel;
+import android.text.TextUtils;
 
 /**
  * Describes the content that will be displayed by the AppInviteDialog
@@ -28,19 +29,26 @@
 public final class AppInviteContent implements ShareModel {
     private final String applinkUrl;
     private final String previewImageUrl;
+    private final String promoCode;
+    private final String promoText;
 
     private AppInviteContent(final Builder builder) {
         this.applinkUrl = builder.applinkUrl;
         this.previewImageUrl = builder.previewImageUrl;
+        this.promoCode = builder.promoCode;
+        this.promoText = builder.promoText;
     }
 
     AppInviteContent(final Parcel in) {
         this.applinkUrl = in.readString();
         this.previewImageUrl = in.readString();
+        this.promoText = in.readString();
+        this.promoCode = in.readString();
     }
 
     /**
      * Gets the applink url.
+     * @return The applink url for the invite.
      */
     public String getApplinkUrl() {
         return applinkUrl;
@@ -48,11 +56,28 @@ public String getApplinkUrl() {
 
     /**
      * Gets the preview image url.
+     * @return The preview image url for the invite.
      */
     public String getPreviewImageUrl() {
         return previewImageUrl;
     }
 
+    /**
+     * Gets the promotion code.
+     * @return The promotion code for invite.
+     */
+    public String getPromotionCode() {
+        return promoCode;
+    }
+
+    /**
+     * Gets the promotion text.
+     * @return The promotion text for invite.
+     */
+    public String getPromotionText() {
+        return promoText;
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -60,6 +85,8 @@ public int describeContents() {
     public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(this.applinkUrl);
         out.writeString(this.previewImageUrl);
+        out.writeString(this.promoText);
+        out.writeString(this.promoCode);
     }
 
     @SuppressWarnings("unused")
@@ -81,6 +108,8 @@ public AppInviteContent createFromParcel(final Parcel in) {
             implements ShareModelBuilder<AppInviteContent, Builder> {
         private String applinkUrl;
         private String previewImageUrl;
+        private String promoCode;
+        private String promoText;
 
         /**
          * Sets the applink url that will be used for deep-linking
@@ -104,6 +133,56 @@ public Builder setPreviewImageUrl(final String previewImageUrl) {
             return this;
         }
 
+        /**
+         * Sets promotion code and promotion text to be shown on sender and receiver flows
+         * for app invites.
+         *
+         * @param promotionText Promotion text to be shown on sender and receiver flows.
+         *                      Promotion text has to be between 1 and 80 characters long.
+         * @param promotionCode Promotion code to be shown on sender and receiver flows.
+         *                      Promotion code is optional and has to be less than 10 characters
+         *                      long. promotionText needs to be specified if promotionCode
+         *                      is provided.
+         * @return the builder
+         */
+        public Builder setPromotionDetails(final String promotionText, final String promotionCode) {
+            if (!TextUtils.isEmpty(promotionText)) {
+                if (promotionText.length() > 80) {
+                    throw new IllegalArgumentException("" +
+                            "Invalid promotion text, promotionText needs to be between" +
+                            "1 and 80 characters long");
+                }
+
+                if (!isAlphanumericWithSpaces(promotionText)) {
+                    throw new IllegalArgumentException("" +
+                            "Invalid promotion text, promotionText can only contain alphanumeric" +
+                            "characters and spaces.");
+                }
+
+                if (!TextUtils.isEmpty(promotionCode)) {
+
+                    if (promotionCode.length() > 10) {
+                        throw new IllegalArgumentException("" +
+                                "Invalid promotion code, promotionCode can be between" +
+                                "1 and 10 characters long");
+                    }
+
+                    if (!isAlphanumericWithSpaces(promotionCode)) {
+                        throw new IllegalArgumentException("" +
+                                "Invalid promotion code, promotionCode can only contain " +
+                                "alphanumeric characters and spaces.");
+                    }
+                }
+            } else if (!TextUtils.isEmpty(promotionCode)) {
+                throw new IllegalArgumentException("promotionCode cannot be specified " +
+                        "without a valid promotionText");
+            }
+
+            this.promoCode = promotionCode;
+            this.promoText = promotionText;
+            return this;
+        }
+
         @Override
         public AppInviteContent build() {
             return new AppInviteContent(this);
@@ -117,7 +196,8 @@ public Builder readFrom(final AppInviteContent content) {
             }
             return this
                     .setApplinkUrl(content.getApplinkUrl())
-                    .setPreviewImageUrl(content.getPreviewImageUrl());
+                    .setPreviewImageUrl(content.getPreviewImageUrl())
+                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode());
         }
 
         @Override
@@ -125,5 +205,15 @@ public Builder readFrom(final Parcel parcel) {
             return this.readFrom((AppInviteContent) parcel
                     .readParcelable(AppInviteContent.class.getClassLoader()));
         }
+
+        private boolean isAlphanumericWithSpaces(String str) {
+            for (int i=0; i<str.length(); i++) {
+                char c = str.charAt(i);
+                if (!Character.isDigit(c) && !Character.isLetter(c) && !Character.isSpaceChar(c))
+                    return false;
+            }
+
+            return true;
+        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareContent.java b/facebook/src/main/java/com/facebook/share/model/ShareContent.java
index 20ce2f803..acc3c5b0b 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareContent.java
@@ -38,6 +38,7 @@
     private final List<String> peopleIds;
     private final String placeId;
     private final String ref;
+    private final ShareHashtag hashtag;
 
     protected ShareContent(final Builder builder) {
         super();
@@ -45,6 +46,7 @@ protected ShareContent(final Builder builder) {
         this.peopleIds = builder.peopleIds;
         this.placeId = builder.placeId;
         this.ref = builder.ref;
+        this.hashtag = builder.hashtag;
     }
 
     protected ShareContent(final Parcel in) {
@@ -52,6 +54,7 @@ protected ShareContent(final Parcel in) {
         this.peopleIds = readUnmodifiableStringList(in);
         this.placeId = in.readString();
         this.ref = in.readString();
+        this.hashtag = new ShareHashtag.Builder().readFrom(in).build();
     }
 
     /**
@@ -102,6 +105,16 @@ public String getRef() {
         return this.ref;
     }
 
+    /**
+     * Gets the ShareHashtag, if one has been set, for this content.
+     *
+     * @return The hashtag
+     */
+    @Nullable
+    public ShareHashtag getShareHashtag() {
+        return this.hashtag;
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -111,6 +124,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeStringList(this.peopleIds);
         out.writeString(this.placeId);
         out.writeString(this.ref);
+        out.writeParcelable(this.hashtag, 0);
     }
 
     private List<String> readUnmodifiableStringList(final Parcel in) {
@@ -128,6 +142,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         private List<String> peopleIds;
         private String placeId;
         private String ref;
+        private ShareHashtag hashtag;
 
         /**
          * Set the URL for the content being shared.
@@ -174,6 +189,17 @@ public E setRef(@Nullable final String ref) {
             return (E) this;
         }
 
+        /**
+         * Set the ShareHashtag for this content
+         *
+         * @param shareHashtag The hashtag for this content
+         * @return The builder
+         */
+        public E setShareHashtag(@Nullable final ShareHashtag shareHashtag) {
+            this.hashtag = shareHashtag;
+            return (E) this;
+        }
+
         @Override
         public E readFrom(final P content) {
             if (content == null) {
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
new file mode 100644
index 000000000..2d8207c18
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
@@ -0,0 +1,114 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.model;
+
+import android.os.Parcel;
+
+/**
+ * Describes a hashtag for sharing.
+ *
+ * Use {@link ShareHashtag.Builder} to build instances
+ */
+public class ShareHashtag implements ShareModel {
+
+    private final String hashtag;
+
+    private ShareHashtag(final Builder builder) {
+        this.hashtag = builder.hashtag;
+    }
+
+    ShareHashtag(final Parcel in) {
+        this.hashtag = in.readString();
+    }
+
+    /**
+     * @return Gets the value of the hashtag for this instance
+     */
+    public String getHashtag() {
+        return hashtag;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(hashtag);
+    }
+
+    @SuppressWarnings("unused")
+    public static final Creator<ShareHashtag> CREATOR = new Creator<ShareHashtag>() {
+        public ShareHashtag createFromParcel(final Parcel in) {
+            return new ShareHashtag(in);
+        }
+
+        public ShareHashtag[] newArray(final int size) {
+            return new ShareHashtag[size];
+        }
+    };
+
+    /**
+     * Builder for the {@link com.facebook.share.model.ShareHashtag} class.
+     */
+    public static class Builder implements ShareModelBuilder<ShareHashtag, Builder> {
+
+        private String hashtag;
+
+        /**
+         * Sets the hashtag value for this instance.
+         * @param hashtag
+         * @return the Builder instance
+         */
+        public Builder setHashtag(final String hashtag) {
+            this.hashtag = hashtag;
+            return this;
+        }
+
+        /**
+         * @return Gets the value of the hashtag for this instance
+         */
+        public String getHashtag() {
+            return hashtag;
+        }
+
+        @Override
+        public Builder readFrom(final ShareHashtag model) {
+            if (model == null) {
+                return this;
+            }
+
+            return this.setHashtag(model.getHashtag());
+        }
+
+        @Override
+        public Builder readFrom(final Parcel parcel) {
+            return this.readFrom(
+                    (ShareHashtag)parcel.readParcelable(ShareHashtag.class.getClassLoader()));
+        }
+
+        @Override
+        public ShareHashtag build() {
+            return new ShareHashtag(this);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
index 1644ff781..f8f062a83 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
@@ -36,12 +36,14 @@
     private final String contentDescription;
     private final String contentTitle;
     private final Uri imageUrl;
+    private final String quote;
 
     private ShareLinkContent(final Builder builder) {
         super(builder);
         this.contentDescription = builder.contentDescription;
         this.contentTitle = builder.contentTitle;
         this.imageUrl = builder.imageUrl;
+        this.quote = builder.quote;
     }
 
     ShareLinkContent(final Parcel in) {
@@ -49,6 +51,7 @@ private ShareLinkContent(final Builder builder) {
         this.contentDescription = in.readString();
         this.contentTitle = in.readString();
         this.imageUrl = in.readParcelable(Uri.class.getClassLoader());
+        this.quote = in.readString();
     }
 
     /**
@@ -78,6 +81,15 @@ public Uri getImageUrl() {
         return this.imageUrl;
     }
 
+    /**
+     * The quoted text to display for this link.
+     * @return The text quoted from the link.
+     */
+    @Nullable
+    public String getQuote() {
+        return this.quote;
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -87,6 +99,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(this.contentDescription);
         out.writeString(this.contentTitle);
         out.writeParcelable(this.imageUrl, 0);
+        out.writeString(this.quote);
     }
 
     @SuppressWarnings("unused")
@@ -109,6 +122,7 @@ public ShareLinkContent createFromParcel(final Parcel in) {
         private String contentDescription;
         private String contentTitle;
         private Uri imageUrl;
+        private String quote;
 
         /**
          * Set the contentDescription of the link.
@@ -141,6 +155,16 @@ public Builder setImageUrl(@Nullable final Uri imageUrl) {
             return this;
         }
 
+        /**
+         * Set the quote to display for this link.
+         * @param quote The text quoted from the link.
+         * @return The builder.
+         */
+        public Builder setQuote(@Nullable final String quote) {
+            this.quote = quote;
+            return this;
+        }
+
         @Override
         public ShareLinkContent build() {
             return new ShareLinkContent(this);
@@ -156,6 +180,7 @@ public Builder readFrom(final ShareLinkContent model) {
                     .setContentDescription(model.getContentDescription())
                     .setImageUrl(model.getImageUrl())
                     .setContentTitle(model.getContentTitle())
+                    .setQuote(model.getQuote())
                     ;
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
index fe7c59ba7..bdf8aa502 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
@@ -22,12 +22,22 @@
 
 import android.os.Bundle;
 import android.os.Parcel;
+import android.os.ParcelFormatException;
+
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Base class for shared media (photos, videos, etc).
  */
 public abstract class ShareMedia implements ShareModel {
 
+    public enum Type {
+        PHOTO,
+        VIDEO,
+        ;
+    }
+
     private final Bundle params;
 
     protected ShareMedia(final Builder builder) {
@@ -53,9 +63,30 @@ public int describeContents() {
 
     @Override
     public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(this.getMediaType().name());
         dest.writeBundle(params);
     }
 
+    @SuppressWarnings("unused")
+    public static final Creator<ShareMedia> CREATOR = new Creator<ShareMedia>() {
+        public ShareMedia createFromParcel(final Parcel in) {
+            switch (Type.valueOf(in.readString())) {
+                case PHOTO:
+                    return new SharePhoto(in);
+                case VIDEO:
+                    return new ShareVideo(in);
+                default:
+                    throw new ParcelFormatException("ShareMedia has invalid type");
+            }
+        }
+
+        public ShareMedia[] newArray(final int size) {
+            return new ShareMedia[size];
+        }
+    };
+
+    public abstract Type getMediaType();
+
     /**
      * Builder for the {@link com.facebook.share.model.ShareMedia} class.
      */
@@ -88,5 +119,15 @@ public B readFrom(final M model) {
             }
             return this.setParameters(model.getParameters());
         }
+
+        public static void writeListTo(final Parcel out, final List<ShareMedia> media) {
+            out.writeTypedList(media);
+        }
+
+        public static List<ShareMedia> readListFrom(final Parcel in) {
+            final List<ShareMedia> list = new ArrayList<>();
+            in.readTypedList(list, CREATOR);
+            return list;
+        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
new file mode 100644
index 000000000..aa3e2fbd3
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
@@ -0,0 +1,153 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.model;
+
+import android.os.Parcel;
+import android.support.annotation.Nullable;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public final class ShareMediaContent
+        extends ShareContent<ShareMediaContent, ShareMediaContent.Builder> {
+    private final List<ShareMedia> media;
+
+    private ShareMediaContent(final Builder builder) {
+        super(builder);
+        this.media = Collections.unmodifiableList(builder.media);
+    }
+
+    ShareMediaContent(final Parcel in) {
+        super(in);
+        this.media = Collections.unmodifiableList(ShareMedia.Builder.readListFrom(in));
+    }
+
+    /**
+     * Media to be shared.
+     *
+     * @return {@link java.util.List} of {@link ShareMedia}s.
+     */
+    @Nullable
+    public List<ShareMedia> getMedia() {
+        return this.media;
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+
+    public void writeToParcel(final Parcel out, final int flags) {
+        super.writeToParcel(out, flags);
+        ShareMedia.Builder.writeListTo(out, this.media);
+    }
+
+    @SuppressWarnings("unused")
+    public static final Creator<ShareMediaContent> CREATOR = new Creator<ShareMediaContent>() {
+        public ShareMediaContent createFromParcel(final Parcel in) {
+            return new ShareMediaContent(in);
+        }
+
+        public ShareMediaContent[] newArray(final int size) {
+            return new ShareMediaContent[size];
+        }
+    };
+
+    /**
+     * Builder for the {@link SharePhotoContent} interface.
+     */
+    public static class Builder extends ShareContent.Builder<ShareMediaContent, Builder> {
+        private final List<ShareMedia> media = new ArrayList<>();
+
+        /**
+         * Adds a medium to the content.
+         *
+         * @param medium {@link com.facebook.share.model.ShareMedia} to add.
+         * @return The builder.
+         */
+        public Builder addMedium(@Nullable final ShareMedia medium) {
+            if (medium != null) {
+                ShareMedia mediumToAdd;
+                if (medium instanceof SharePhoto) {
+                    mediumToAdd = new SharePhoto.Builder().readFrom((SharePhoto) medium).build();
+                } else if (medium instanceof ShareVideo) {
+                    mediumToAdd = new ShareVideo.Builder().readFrom((ShareVideo) medium).build();
+                } else {
+                    throw new IllegalArgumentException(
+                            "medium must be either a SharePhoto or ShareVideo");
+                }
+                this.media.add(mediumToAdd);
+            }
+            return this;
+        }
+
+        /**
+         * Adds multiple media to the content.
+         *
+         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
+         *               to add.
+         * @return The builder.
+         */
+        public Builder addMedia(@Nullable final List<ShareMedia> media) {
+            if (media != null) {
+                for (ShareMedia medium : media) {
+                    this.addMedium(medium);
+                }
+            }
+            return this;
+        }
+
+        @Override
+        public ShareMediaContent build() {
+            return new ShareMediaContent(this);
+        }
+
+        @Override
+        public Builder readFrom(final ShareMediaContent model) {
+            if (model == null) {
+                return this;
+            }
+            return super.
+                    readFrom(model)
+                    .addMedia(model.getMedia());
+        }
+
+        @Override
+        public Builder readFrom(final Parcel parcel) {
+            return this.readFrom(
+                    (ShareMediaContent) parcel.readParcelable(
+                            ShareMediaContent.class.getClassLoader()));
+        }
+
+        /**
+         * Replaces the media for the builder.
+         *
+         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
+         *   to add.
+         * @return The builder.
+         */
+        public Builder setMedia(@Nullable final List<ShareMedia> media) {
+            this.media.clear();
+            this.addMedia(media);
+            return this;
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
index dcf8a50f5..6f0e167fa 100644
--- a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
+++ b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
@@ -104,16 +104,10 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(caption);
     }
 
-    @SuppressWarnings("unused")
-    public static final Creator<SharePhoto> CREATOR = new Creator<SharePhoto>() {
-        public SharePhoto createFromParcel(final Parcel in) {
-            return new SharePhoto(in);
-        }
-
-        public SharePhoto[] newArray(final int size) {
-            return new SharePhoto[size];
-        }
-    };
+    @Override
+    public Type getMediaType() {
+        return Type.PHOTO;
+    }
 
     /**
      * Builder for the {@link com.facebook.share.model.SharePhoto} class.
@@ -199,21 +193,36 @@ public Builder readFrom(final SharePhoto model) {
         @Override
         public Builder readFrom(final Parcel parcel) {
             return this.readFrom(
-                    (SharePhoto)parcel.readParcelable(SharePhoto.class.getClassLoader()));
+                    (SharePhoto) parcel.readParcelable(SharePhoto.class.getClassLoader()));
         }
 
-        public static void writeListTo(final Parcel out, final List<SharePhoto> photos) {
-            final List<SharePhoto> list = new ArrayList<>();
+        /*
+         * For backwards compatability with SharePhotoContent.  Prefer ShareMediaContent for new
+         * code.
+         */
+        public static void writePhotoListTo(
+                final Parcel out,
+                final List<SharePhoto> photos) {
+            final List<ShareMedia> list = new ArrayList<>();
             for (SharePhoto photo : photos) {
                 list.add(photo);
             }
-            out.writeTypedList(list);
+            writeListTo(out, list);
         }
 
-        public static List<SharePhoto> readListFrom(final Parcel in) {
-            final List<SharePhoto> list = new ArrayList<>();
-            in.readTypedList(list, CREATOR);
-            return list;
+        /*
+         * For backwards compatability with SharePhotoContent.  Prefer ShareMediaContent for new
+         * code.
+         */
+        public static List<SharePhoto> readPhotoListFrom(final Parcel in) {
+            final List<ShareMedia> media = readListFrom(in);
+            final List<SharePhoto> photos = new ArrayList<>();
+            for (ShareMedia medium : media) {
+                if (medium instanceof SharePhoto) {
+                    photos.add((SharePhoto) medium);
+                }
+            }
+            return photos;
         }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
index 3cad92e31..12feb4345 100644
--- a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
@@ -45,7 +45,7 @@ private SharePhotoContent(final Builder builder) {
 
     SharePhotoContent(final Parcel in) {
         super(in);
-        this.photos = Collections.unmodifiableList(SharePhoto.Builder.readListFrom(in));
+        this.photos = Collections.unmodifiableList(SharePhoto.Builder.readPhotoListFrom(in));
     }
 
     /**
@@ -63,7 +63,7 @@ public int describeContents() {
 
     public void writeToParcel(final Parcel out, final int flags) {
         super.writeToParcel(out, flags);
-        SharePhoto.Builder.writeListTo(out, this.photos);
+        SharePhoto.Builder.writePhotoListTo(out, this.photos);
     }
 
     @SuppressWarnings("unused")
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
index 49fc8caa7..3cccd6160 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
@@ -60,16 +60,10 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeParcelable(this.localUrl, 0);
     }
 
-    @SuppressWarnings("unused")
-    public static final Creator<ShareVideo> CREATOR = new Creator<ShareVideo>() {
-        public ShareVideo createFromParcel(final Parcel in) {
-            return new ShareVideo(in);
-        }
-
-        public ShareVideo[] newArray(final int size) {
-            return new ShareVideo[size];
-        }
-    };
+    @Override
+    public Type getMediaType() {
+        return Type.VIDEO;
+    }
 
     /**
      * Builder for the {@link com.facebook.share.model.ShareVideo} class.
diff --git a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
index c91d0f876..f8065c351 100644
--- a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
@@ -22,9 +22,9 @@
 
 import android.app.Activity;
 import android.content.Intent;
-import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.facebook.FacebookCallback;
@@ -32,6 +32,10 @@
 import com.facebook.share.internal.*;
 import com.facebook.share.model.AppInviteContent;
 
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -215,7 +219,7 @@ protected AppCall createBaseAppCall() {
 
     private class NativeHandler extends ModeHandler {
         @Override
-        public boolean canShow(AppInviteContent content) {
+        public boolean canShow(AppInviteContent content, boolean isBestEffort) {
             return AppInviteDialog.canShowNativeDialog();
         }
 
@@ -248,7 +252,7 @@ public Bundle getLegacyParameters() {
 
     private class WebFallbackHandler extends ModeHandler {
         @Override
-        public boolean canShow(final AppInviteContent content) {
+        public boolean canShow(final AppInviteContent content, boolean isBestEffort) {
             return AppInviteDialog.canShowWebFallback();
         }
 
@@ -271,10 +275,29 @@ private static DialogFeature getFeature() {
 
     private static Bundle createParameters(final AppInviteContent content) {
         Bundle params = new Bundle();
-
         params.putString(ShareConstants.APPLINK_URL, content.getApplinkUrl());
         params.putString(ShareConstants.PREVIEW_IMAGE_URL, content.getPreviewImageUrl());
 
+        String promoCode = content.getPromotionCode();
+        promoCode = promoCode != null ? promoCode : "";
+        String promoText = content.getPromotionText();
+
+        if (!TextUtils.isEmpty(promoText)) {
+            // Encode deeplink context as json array.
+            try {
+                JSONObject deeplinkContent = new JSONObject();
+                deeplinkContent.put(ShareConstants.PROMO_CODE, promoCode);
+                deeplinkContent.put(ShareConstants.PROMO_TEXT, promoText);
+
+                params.putString(ShareConstants.DEEPLINK_CONTEXT, deeplinkContent.toString());
+                params.putString(ShareConstants.PROMO_CODE, promoCode);
+                params.putString(ShareConstants.PROMO_TEXT, promoText);
+            } catch (JSONException e) {
+                Log.e(TAG, "Json Exception in creating deeplink context");
+                // Ignore it since this is optional.
+            }
+        }
+
         return params;
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
index cb81ac534..020dbdce6 100644
--- a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
@@ -193,7 +193,7 @@ protected AppCall createBaseAppCall() {
 
     private class WebHandler extends ModeHandler {
         @Override
-        public boolean canShow(final AppGroupCreationContent content) {
+        public boolean canShow(final AppGroupCreationContent content, boolean isBestEffort) {
             return true;
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java b/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
new file mode 100644
index 000000000..67b03ffc7
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
@@ -0,0 +1,204 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ * <p/>
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ * <p/>
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ * <p/>
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.widget;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+
+import com.facebook.CallbackManager;
+import com.facebook.FacebookButtonBase;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookSdk;
+import com.facebook.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.share.DeviceShareDialog;
+import com.facebook.share.model.ShareContent;
+
+/**
+ * A button to share content on Facebook from a device.
+ * Tapping the receiver will invoke the {@link com.facebook.share.DeviceShareDialog} with
+ * the attached shareContent.
+ */
+public final class DeviceShareButton extends FacebookButtonBase {
+    private ShareContent shareContent;
+    private int requestCode = 0;
+    private boolean enabledExplicitlySet = false;
+    private DeviceShareDialog dialog = null;
+
+    /*
+     * Constructs a new DeviceShareButton instance.
+     */
+    public DeviceShareButton(final Context context) {
+        this(context, null, 0);
+    }
+    /*
+     * Constructs a new DeviceShareButton instance.
+     */
+    public DeviceShareButton(final Context context, final AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+    /*
+     * Constructs a new DeviceShareButton instance.
+     */
+    private DeviceShareButton(
+            final Context context,
+            final AttributeSet attrs,
+            final int defStyleAttr) {
+        super(
+                context,
+                attrs,
+                defStyleAttr,
+                0,
+                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_CREATE,
+                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_DID_TAP);
+        requestCode = isInEditMode() ? 0 : getDefaultRequestCode();
+        internalSetEnabled(false);
+    }
+
+    /**
+     * Returns the share content from the button.
+     * @return The share content.
+     */
+    public ShareContent getShareContent() {
+        return this.shareContent;
+    }
+
+    /**
+     * Sets the share content on the button.
+     * @param shareContent The share content.
+     */
+    public void setShareContent(final ShareContent shareContent) {
+        this.shareContent = shareContent;
+        if (!enabledExplicitlySet) {
+            internalSetEnabled(canShare());
+        }
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        super.setEnabled(enabled);
+        enabledExplicitlySet = true;
+    }
+
+    public int getRequestCode() {
+        return requestCode;
+    }
+
+    /**
+     * Allows registration of a callback for when the share completes. This should be called
+     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
+     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
+     *
+     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
+     *          handling results that are received via
+     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
+     * @param callback The callback that should be called to handle dialog completion.
+     */
+    public void registerCallback(
+            final CallbackManager callbackManager,
+            final FacebookCallback<DeviceShareDialog.Result> callback) {
+        getDialog().registerCallback(callbackManager, callback);
+    }
+
+    /**
+     * Allows registration of a callback for when the share completes. This should be called
+     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
+     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
+     *
+     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
+     *          handling results that are received via
+     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
+     * @param callback The callback that should be called to handle dialog completion.
+     * @param requestCode  The request code to use, this should be outside of the range of those
+     *                     reserved for the Facebook SDK
+     *                     {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
+     */
+    public void registerCallback(
+            final CallbackManager callbackManager,
+            final FacebookCallback<DeviceShareDialog.Result> callback,
+            final int requestCode) {
+        setRequestCode(requestCode);
+        getDialog().registerCallback(callbackManager, callback, requestCode);
+    }
+
+    @Override
+    protected void configureButton(
+            final Context context,
+            final AttributeSet attrs,
+            final int defStyleAttr,
+            final int defStyleRes) {
+        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
+        setInternalOnClickListener(this.getShareOnClickListener());
+    }
+
+    @Override
+    protected int getDefaultStyleResource() {
+        return R.style.com_facebook_button_share;
+    }
+
+    @Override
+    protected int getDefaultRequestCode() {
+        return CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
+    }
+
+    protected OnClickListener getShareOnClickListener() {
+        return new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                callExternalOnClickListener(v);
+                getDialog().show(getShareContent());
+            }
+        };
+    }
+
+    private void internalSetEnabled(boolean enabled) {
+        setEnabled(enabled);
+        enabledExplicitlySet = false;
+    }
+
+    private void setRequestCode(final int requestCode) {
+        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
+            throw new IllegalArgumentException("Request code " + requestCode +
+                    " cannot be within the range reserved by the Facebook SDK.");
+        }
+        this.requestCode = requestCode;
+    }
+
+    private boolean canShare() {
+        return new DeviceShareDialog(getActivity()).canShow(getShareContent());
+    }
+
+    private DeviceShareDialog getDialog() {
+        if (dialog != null) {
+            return dialog;
+        }
+        if (DeviceShareButton.this.getFragment() != null) {
+            dialog = new DeviceShareDialog(DeviceShareButton.this.getFragment());
+        } else if (DeviceShareButton.this.getNativeFragment() != null) {
+            dialog = new DeviceShareDialog(DeviceShareButton.this.getNativeFragment());
+        } else {
+            dialog = new DeviceShareDialog(getActivity());
+        }
+        return dialog;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java b/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
index b9a80af90..94c06c3c1 100644
--- a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
@@ -215,7 +215,7 @@ protected AppCall createBaseAppCall() {
 
     private class WebHandler extends ModeHandler {
         @Override
-        public boolean canShow(final GameRequestContent content) {
+        public boolean canShow(final GameRequestContent content, boolean isBestEffort) {
             return true;
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
index 8c48dc0fc..a373da9b5 100644
--- a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
@@ -26,7 +26,6 @@
 import android.support.v4.app.Fragment;
 
 import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
 import com.facebook.internal.AppCall;
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.DialogPresenter;
@@ -192,7 +191,7 @@ protected AppCall createBaseAppCall() {
 
     private class WebHandler extends ModeHandler {
         @Override
-        public boolean canShow(final String content) {
+        public boolean canShow(final String content, boolean isBestEffort) {
             return true;
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
index f6114ab49..01fb16943 100644
--- a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
@@ -202,7 +202,7 @@ protected AppCall createBaseAppCall() {
 
     private class NativeHandler extends ModeHandler {
         @Override
-        public boolean canShow(final ShareContent shareContent) {
+        public boolean canShow(final ShareContent shareContent, boolean isBestEffort) {
             return shareContent != null && MessageDialog.canShow(shareContent.getClass());
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
index 8180c5e8f..a5ef533ab 100644
--- a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
@@ -21,6 +21,7 @@
 package com.facebook.share.widget;
 
 import android.app.Activity;
+import android.app.Dialog;
 import android.content.Context;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -34,6 +35,7 @@
 import com.facebook.internal.DialogPresenter;
 import com.facebook.internal.FacebookDialogBase;
 import com.facebook.internal.FragmentWrapper;
+import com.facebook.internal.Utility;
 import com.facebook.share.internal.ShareFeedContent;
 import com.facebook.share.Sharer;
 import com.facebook.share.internal.LegacyNativeDialogParameters;
@@ -277,8 +279,29 @@ public Object getMode() {
         }
 
         @Override
-        public boolean canShow(final ShareContent content) {
-            return content != null && ShareDialog.canShowNative(content.getClass());
+        public boolean canShow(final ShareContent content, boolean isBestEffort) {
+            if (content == null) {
+                return false;
+            }
+
+            boolean canShowResult = true;
+            if (!isBestEffort) {
+                // The following features are considered best-effort and will not prevent the
+                // native share dialog from being presented, even if the installed version does
+                // not support the feature.
+                // However, to let apps pivot to a different approach or dialog (for example, Web),
+                // we need to be able to signal back when native support is lacking.
+                if (content.getShareHashtag() != null) {
+                    canShowResult = DialogPresenter.canPresentNativeDialogWithFeature(
+                            ShareDialogFeature.HASHTAG);
+                }
+                if ((content instanceof ShareLinkContent) &&
+                        (!Utility.isNullOrEmpty(((ShareLinkContent)content).getQuote()))) {
+                    canShowResult &= DialogPresenter.canPresentNativeDialogWithFeature(
+                            ShareDialogFeature.LINK_SHARE_QUOTES);
+                }
+            }
+            return canShowResult && ShareDialog.canShowNative(content.getClass());
         }
 
         @Override
@@ -322,7 +345,7 @@ public Object getMode() {
         }
 
         @Override
-        public boolean canShow(final ShareContent content) {
+        public boolean canShow(final ShareContent content, boolean isBestEffort) {
             return (content != null) && ShareDialog.canShowWebTypeCheck(content.getClass());
         }
 
@@ -367,7 +390,7 @@ public Object getMode() {
         }
 
         @Override
-        public boolean canShow(final ShareContent content) {
+        public boolean canShow(final ShareContent content, boolean isBestEffort) {
             return (content instanceof ShareLinkContent)
                     || (content instanceof ShareFeedContent);
         }
@@ -405,6 +428,8 @@ private static DialogFeature getFeature(
             return ShareDialogFeature.VIDEO;
         } else if (ShareOpenGraphContent.class.isAssignableFrom(contentType)) {
             return OpenGraphActionDialogFeature.OG_ACTION_DIALOG;
+        } else if (ShareMediaContent.class.isAssignableFrom(contentType)) {
+            return ShareDialogFeature.MULTIMEDIA;
         }
         return null;
     }
diff --git a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
index 6595897e1..a90aab7b3 100644
--- a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
+++ b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
@@ -54,7 +54,7 @@
             </FrameLayout>
 
             <TextView
-                android:id="@+id/textView"
+                android:id="@+id/com_facebook_device_dialog_title"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:layout_centerInParent="true"
diff --git a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java b/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
index fe94ceeaa..6d8b835c8 100644
--- a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
+++ b/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
@@ -31,7 +31,7 @@
 import org.robolectric.shadows.ShadowLog;
 
 // ShadowLog is used to redirect the android.util.Log calls to System.out
-@Config(shadows = {ShadowLog.class})
+@Config(shadows = {ShadowLog.class}, manifest = Config.NONE)
 @RunWith(RobolectricTestRunner.class)
 @PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*" })
 
diff --git a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java b/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
index dcb63d8ba..85f30f9ea 100644
--- a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
+++ b/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
@@ -42,6 +42,10 @@
     private static final String TARGET_URL_KEY = "target_url";
     private static final String USER_AGENT_KEY = "user_agent";
     private static final String USER_AGENT_VALUE = "foobarUserAgent";
+    private static final String EXTRAS_KEY = "extras";
+    private static final String DEEPLINK_CONTEXT_KEY = "deeplink_context";
+    private static final String PROMO_CODE_KEY = "promo_code";
+    private static final String PROMO_CODE = "PROMO1";
 
     private static final String JSON_DATA_REGULAR =
             "{"
@@ -77,6 +81,20 @@
                     + "  }"
                     + "}";
 
+    private static final String JSON_DATA_WITH_DEEPLINK_CONTEXT =
+            "{"
+                    + "\"version\":2,"
+                    + "\"bridge_args\": {\"method\": \"applink\"},"
+                    + "\"method_args\": {"
+                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
+                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
+                    + "    \"" + EXTRAS_KEY + "\": {"
+                    + "        \"" + DEEPLINK_CONTEXT_KEY + "\": {"
+                    + "            \"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\""
+                    + "        }"
+                    + "    }"
+                    + "  }"
+                    + "}";
 
     private static class MockActivityWithAppLinkData extends Activity {
         public Intent getIntent() {
@@ -84,34 +102,29 @@ public Intent getIntent() {
             Intent intent = new Intent(Intent.ACTION_VIEW, targetUri);
             Bundle applinks = new Bundle();
             Bundle refererData = new Bundle();
+            Bundle extras = new Bundle();
+            String deeplinkContext = "{\"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\"}";
+            extras.putString(DEEPLINK_CONTEXT_KEY, deeplinkContext);
             refererData.putString(FB_REF_KEY, FB_REF_VALUE);
             refererData.putString(EXTRA_ARGS_KEY, EXTRA_ARGS_VALUE);
             applinks.putBundle(REFERER_DATA_KEY, refererData);
             applinks.putString(TARGET_URL_KEY, TARGET_URI_STRING);
             applinks.putString(USER_AGENT_KEY, USER_AGENT_VALUE);
+            applinks.putBundle(EXTRAS_KEY, extras);
             intent.putExtra("al_applink_data", applinks);
             return intent;
         }
     }
 
     private static class MockActivityWithJsonData extends Activity {
-        private boolean useRefererData;
+        private String jsonString;
 
-        public MockActivityWithJsonData(boolean useRefererData) {
-            this.useRefererData = useRefererData;
-        }
-        public Intent getIntent() {
-            Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY,
-                    useRefererData ? JSON_DATA_WITH_REFERER_DATA : JSON_DATA_REGULAR);
-            return intent;
+        public MockActivityWithJsonData(String jsonString) {
+            this.jsonString = jsonString;
         }
-    }
-
-    private static class MockActivityWithErrorJsonData extends Activity {
         public Intent getIntent() {
             Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, JSON_DATA_REGULAR_WITH_NESTED_ARRAY);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, jsonString);
             return intent;
         }
     }
@@ -129,11 +142,13 @@ public void testCreateFromAlApplinkData() {
         assertNotNull("referer data not null", refererData);
         assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
         assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
     }
 
     @Test
     public void testCreateFromJson() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(false));
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(new MockActivityWithJsonData(JSON_DATA_REGULAR));
         assertNotNull("app link data not null", appLinkData);
         assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
         assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
@@ -146,13 +161,17 @@ public void testCreateFromJson() {
 
     @Test
     public void testCreateFromJsonWithNestedArray() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithErrorJsonData());
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(
+                        new MockActivityWithJsonData(JSON_DATA_REGULAR_WITH_NESTED_ARRAY));
         assertNull(appLinkData);
     }
 
     @Test
     public void testCreateFromJsonWithRefererData() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(true));
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(
+                        new MockActivityWithJsonData(JSON_DATA_WITH_REFERER_DATA));
         assertNotNull("app link data not null", appLinkData);
         assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
         assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
@@ -164,4 +183,21 @@ public void testCreateFromJsonWithRefererData() {
         assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
         assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
     }
+
+    @Test
+    public void testCreateFromJsonWithDeeplinkContext() {
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(
+                        new MockActivityWithJsonData(JSON_DATA_WITH_DEEPLINK_CONTEXT));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNull("referer data", refererData);
+    }
+
 }
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index 0815e7457..454494221 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -20,33 +20,56 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.example.hellofacebook"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.NoTitleBar"
-            >
-        <activity android:name=".HelloFacebookSampleActivity"
-                  android:label="@string/app_name"
-                  android:windowSoftInputMode="adjustResize">
+    package="com.example.hellofacebook"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
+        android:name=".HelloFacebookSampleApplication"
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@android:style/Theme.NoTitleBar">
+        <activity
+            android:name=".HelloFacebookSampleActivity"
+            android:label="@string/app_name"
+            android:windowSoftInputMode="adjustResize">
             <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity android:name="com.facebook.FacebookActivity"
-                  android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationName"
-                   android:value="@string/facebook_app_name" />
-        <provider android:authorities="com.facebook.app.FacebookContentProvider355198514515820"
-                  android:name="com.facebook.FacebookContentProvider"
-                  android:exported="true"/>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:label="@string/app_name"
+            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/facebook_app_name" />
+
+        <provider
+            android:name="com.facebook.FacebookContentProvider"
+            android:authorities="com.facebook.app.FacebookContentProvider355198514515820"
+            android:exported="true" />
         <receiver android:name="com.example.hellofacebook.HelloFacebookBroadcastReceiver">
             <intent-filter>
                 <action android:name="com.facebook.platform.AppCallResultBroadcast" />
diff --git a/samples/HelloFacebookSample/res/values/strings.xml b/samples/HelloFacebookSample/res/values/strings.xml
index c199e5873..78b945b31 100644
--- a/samples/HelloFacebookSample/res/values/strings.xml
+++ b/samples/HelloFacebookSample/res/values/strings.xml
@@ -36,5 +36,6 @@
     <string name="no_place_selected">&lt;No place selected&gt;</string>
     <string name="pick_seattle_place">Pick a Seattle Place</string>
     <string name="app_id">355198514515820</string>
+    <string name="fb_login_protocol_scheme">fb355198514515820</string>
     <string name="exception">Exception: %1$s</string>
 </resources>
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
index 749c6d59a..328e6e9d1 100644
--- a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
@@ -205,12 +205,6 @@ public void onClick(View view) {
     @Override
     protected void onResume() {
         super.onResume();
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onResume methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.activateApp(this);
-
         updateUI();
     }
 
@@ -227,16 +221,6 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         callbackManager.onActivityResult(requestCode, resultCode, data);
     }
 
-    @Override
-    public void onPause() {
-        super.onPause();
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.deactivateApp(this);
-    }
-
     @Override
     protected void onDestroy() {
         super.onDestroy();
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java
new file mode 100644
index 000000000..a3e2d1eb3
--- /dev/null
+++ b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.hellofacebook;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class HelloFacebookSampleApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/Iconicus/AndroidManifest.xml b/samples/Iconicus/AndroidManifest.xml
index 7a6f18198..16cd19340 100644
--- a/samples/Iconicus/AndroidManifest.xml
+++ b/samples/Iconicus/AndroidManifest.xml
@@ -20,19 +20,18 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.iconicus" >
-
-    <uses-permission android:name="android.permission.INTERNET"/>
-
+    package="com.example.iconicus">
+    <uses-permission android:name="android.permission.INTERNET" />
     <application
+        android:name=".IconicusApplication"
         android:allowBackup="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
-        android:theme="@style/AppBaseTheme" >
+        android:theme="@style/AppBaseTheme">
         <activity
             android:name=".MainActivity"
-            android:screenOrientation="portrait"
-            android:label="@string/app_name" >
+            android:label="@string/app_name"
+            android:screenOrientation="portrait">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
 
@@ -40,31 +39,43 @@
             </intent-filter>
             <intent-filter>
                 <data
-                    android:scheme="https"
                     android:host="fb.me"
-                    android:path="/1570399853210604" />
+                    android:path="/1570399853210604"
+                    android:scheme="https" />
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
                 <action android:name="android.intent.action.VIEW" />
             </intent-filter>
             <intent-filter>
-                <data android:scheme="iconicus" android:host="game" />
+                <data
+                    android:host="game"
+                    android:scheme="iconicus" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
+
                 <action android:name="android.intent.action.VIEW" />
             </intent-filter>
         </activity>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:label="@string/app_name"
+            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
 
-        <activity android:name="com.facebook.FacebookActivity"
-            android:configChanges=
-                "keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar"
-            android:label="@string/app_name" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
 
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
         <meta-data
             android:name="com.facebook.sdk.ApplicationId"
-            android:value="@string/facebook_app_id"/>
-
+            android:value="@string/facebook_app_id" />
     </application>
-
 </manifest>
diff --git a/samples/Iconicus/res/values/strings.xml b/samples/Iconicus/res/values/strings.xml
index e54c9c78d..d61290e2c 100644
--- a/samples/Iconicus/res/values/strings.xml
+++ b/samples/Iconicus/res/values/strings.xml
@@ -25,6 +25,7 @@
     <string name="button_clear_board">Clear Board</string>
     <string name="copy_url">Copy URL</string>
     <string name="facebook_app_id">1567030756880847</string>
+    <string name="fb_login_protocol_scheme">fb1567030756880847</string>
     <string name="share_title">Play this game!</string>
     <string name="share_description">Check out this game of Iconicus that I was playing. Can you finish it?</string>
     <string name="link_copied">The link has been copied to the clipboard.</string>
diff --git a/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java b/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java
new file mode 100644
index 000000000..3b21b9f4e
--- /dev/null
+++ b/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.iconicus;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class IconicusApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/Iconicus/src/com/example/iconicus/MainActivity.java b/samples/Iconicus/src/com/example/iconicus/MainActivity.java
index 1a2e6e681..b071453c9 100644
--- a/samples/Iconicus/src/com/example/iconicus/MainActivity.java
+++ b/samples/Iconicus/src/com/example/iconicus/MainActivity.java
@@ -44,7 +44,6 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        FacebookSdk.sdkInitialize(this);
         setContentView(R.layout.activity_main);
 
         gameController = new GameController(this, getIntent());
diff --git a/samples/MessengerSendSample/src/main/AndroidManifest.xml b/samples/MessengerSendSample/src/main/AndroidManifest.xml
index 06e34e0ef..e7dd459ff 100644
--- a/samples/MessengerSendSample/src/main/AndroidManifest.xml
+++ b/samples/MessengerSendSample/src/main/AndroidManifest.xml
@@ -20,43 +20,44 @@
 -->
 
 <manifest xmlns:android='http://schemas.android.com/apk/res/android'
-          package='com.facebook.samples.messenger.send'
-          >
-  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-  <uses-permission android:name="android.permission.INTERNET" />
-
-  <application
-      android:name='MessengerSendSampleApplication'
-      android:icon='@null'
-      android:label='@string/app_name'
-      android:theme='@style/Theme.AppCompat.NoActionBar'>
-
-    <meta-data
-        android:name="com.facebook.sdk.ApplicationId"
-        android:value="@string/facebook_app_id"/>
-
-    <activity
-        android:name='.MainActivity'>
-      <intent-filter>
-        <action android:name='android.intent.action.MAIN' />
-        <category android:name='android.intent.category.LAUNCHER' />
-      </intent-filter>
-
-      <!-- Intent filter used for Messenger protocol version 20150311 -->
-      <intent-filter>
-        <action android:name="android.intent.action.PICK" />
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150311"/>
-      </intent-filter>
-
-      <!-- Intent filter used for Messenger protocol version 20150314 -->
-      <intent-filter>
-        <action android:name="android.intent.action.PICK" />
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150314"/>
-      </intent-filter>
-
-    </activity>
-
-  </application>
+    package='com.facebook.samples.messenger.send'>
+
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:name='MessengerSendSampleApplication'
+        android:icon='@null'
+        android:label='@string/app_name'
+        android:theme='@style/Theme.AppCompat.NoActionBar'>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+
+        <activity android:name='.MainActivity'>
+            <intent-filter>
+                <action android:name='android.intent.action.MAIN' />
+                <category android:name='android.intent.category.LAUNCHER' />
+            </intent-filter>
+
+            <!-- Intent filter used for Messenger protocol version 20150311 -->
+            <intent-filter>
+                <action android:name="android.intent.action.PICK" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150311" />
+            </intent-filter>
+
+            <!-- Intent filter used for Messenger protocol version 20150314 -->
+            <intent-filter>
+                <action android:name="android.intent.action.PICK" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150314" />
+            </intent-filter>
+
+        </activity>
+
+    </application>
 </manifest>
diff --git a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java b/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
index ce475fdd1..00cd030f1 100644
--- a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
+++ b/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
@@ -23,6 +23,7 @@
 import android.app.Application;
 
 import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
 
 /**
  * Application object for sample app.
@@ -33,5 +34,6 @@
   public void onCreate() {
     super.onCreate();
     FacebookSdk.sdkInitialize(this);
+    AppEventsLogger.activateApp(this);
   }
 }
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
index c8c42da90..8fa6f400f 100644
--- a/samples/RPSSample/AndroidManifest.xml
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -20,39 +20,66 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.example.rps"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.NoTitleBar"
-            >
-        <activity android:name="com.example.rps.MainActivity"
-                  android:label="@string/app_name"
-                  android:screenOrientation="portrait"
-                  android:windowSoftInputMode="adjustResize">
+    package="com.example.rps"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
+        android:name=".RpsApplication"
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@android:style/Theme.NoTitleBar">
+        <activity
+            android:name="com.example.rps.MainActivity"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait"
+            android:windowSoftInputMode="adjustResize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data
+                    android:host="fb.me"
+                    android:scheme="https" />
             </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:label="@string/app_name"
+            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
-                <data android:host="fb.me" android:scheme="https" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
             </intent-filter>
         </activity>
-        <activity android:name="com.facebook.FacebookActivity"
-                  android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationName"
-                   android:value="@string/facebook_app_name" />
-        <provider android:authorities="com.facebook.app.FacebookContentProvider157578437735213"
-                  android:name="com.facebook.FacebookContentProvider"
-                  android:exported="true" />
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/facebook_app_name" />
+
+        <provider
+            android:name="com.facebook.FacebookContentProvider"
+            android:authorities="com.facebook.app.FacebookContentProvider157578437735213"
+            android:exported="true" />
     </application>
 </manifest>
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
index 5cb1193a6..51acce981 100644
--- a/samples/RPSSample/res/values/strings.xml
+++ b/samples/RPSSample/res/values/strings.xml
@@ -23,6 +23,7 @@
     <string name="app_name">RPSSample</string>
     <string name="facebook_app_name">Rock Paper Scissors SDK Sample</string>
     <string name="app_id">157578437735213</string>
+    <string name="fb_login_protocol_scheme">fb157578437735213</string>
     <string name="rock">Rock</string>
     <string name="paper">Paper</string>
     <string name="scissors">Scissors</string>
diff --git a/samples/RPSSample/src/com/example/rps/MainActivity.java b/samples/RPSSample/src/com/example/rps/MainActivity.java
index 0c63b0e2f..d87c786e5 100644
--- a/samples/RPSSample/src/com/example/rps/MainActivity.java
+++ b/samples/RPSSample/src/com/example/rps/MainActivity.java
@@ -63,9 +63,6 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
-        FacebookSdk.sdkInitialize(this.getApplicationContext());
-
         accessTokenTracker = new AccessTokenTracker() {
             @Override
             protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
@@ -124,20 +121,12 @@ public void onSuccess(GameRequestDialog.Result result) {
     public void onResume() {
         super.onResume();
         isResumed = true;
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
-        // the onResume methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.activateApp(this);
     }
 
     @Override
     public void onPause() {
         super.onPause();
         isResumed = false;
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/RPSSample/src/com/example/rps/RpsApplication.java b/samples/RPSSample/src/com/example/rps/RpsApplication.java
new file mode 100644
index 000000000..f6443f830
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/RpsApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class RpsApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index aff593587..0cccb0cc1 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -54,6 +54,16 @@
             android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
             android:label="@string/app_name"
             android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
 
         <meta-data
             android:name="com.facebook.sdk.ApplicationId"
diff --git a/samples/Scrumptious/res/values/strings.xml b/samples/Scrumptious/res/values/strings.xml
index b7dd0cb88..25580b998 100644
--- a/samples/Scrumptious/res/values/strings.xml
+++ b/samples/Scrumptious/res/values/strings.xml
@@ -22,6 +22,7 @@
 <resources>
     <string name="app_name">Scrumptious</string>
     <string name="app_id">233936543368280</string>
+    <string name="fb_login_protocol_scheme">fb233936543368280</string>
     <string name="get_started">To get started, login using Facebook</string>
     <string name="skip_login">continue as a guest</string>
     <string name="action_eating">Pick Meal</string>
diff --git a/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java b/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
index 2fea256d6..92e833d22 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
@@ -103,11 +103,6 @@ public void onResume() {
         super.onResume();
         isResumed = true;
 
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onResume methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.activateApp(this);
-
         if (AccessToken.getCurrentAccessToken() != null) {
             // if the user already logged in, try to show the selection fragment
             showFragment(SELECTION, false);
@@ -125,11 +120,6 @@ public void onResume() {
     public void onPause() {
         super.onPause();
         isResumed = false;
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
index 7027b4834..ddae0a182 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
@@ -23,6 +23,7 @@
 import android.app.Application;
 
 import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
 
 import org.json.JSONObject;
 
@@ -37,6 +38,7 @@
     public void onCreate() {
         super.onCreate();
         FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
     }
 
     private List<JSONObject> selectedUsers;
diff --git a/samples/ShareIt/AndroidManifest.xml b/samples/ShareIt/AndroidManifest.xml
index a5939b604..fede962e1 100644
--- a/samples/ShareIt/AndroidManifest.xml
+++ b/samples/ShareIt/AndroidManifest.xml
@@ -44,6 +44,16 @@
             android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
             android:label="@string/app_name"
             android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
 
         <meta-data
             android:name="com.facebook.sdk.ApplicationId"
diff --git a/samples/ShareIt/res/values/strings.xml b/samples/ShareIt/res/values/strings.xml
index 2ab231f6a..9efc84df2 100644
--- a/samples/ShareIt/res/values/strings.xml
+++ b/samples/ShareIt/res/values/strings.xml
@@ -23,4 +23,5 @@
     <string name="main_page_text">Share It! App</string>
     <string name="likeable_image">Likeable image</string>
     <string name="share_menu_title">Share</string>
+    <string name="fb_login_protocol_scheme">fb620223481391648</string>
 </resources>
diff --git a/samples/ShareIt/src/com/example/shareit/ShareItApplication.java b/samples/ShareIt/src/com/example/shareit/ShareItApplication.java
index b1b29be6a..ce2d494f1 100644
--- a/samples/ShareIt/src/com/example/shareit/ShareItApplication.java
+++ b/samples/ShareIt/src/com/example/shareit/ShareItApplication.java
@@ -23,11 +23,13 @@
 import android.app.Application;
 
 import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
 
 public class ShareItApplication extends Application {
     @Override
     public void onCreate() {
         super.onCreate();
         FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
     }
 }
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
index 7cfc69164..955229445 100644
--- a/samples/SwitchUserSample/AndroidManifest.xml
+++ b/samples/SwitchUserSample/AndroidManifest.xml
@@ -25,6 +25,7 @@
 
     <uses-permission android:name="android.permission.INTERNET" />
     <application
+        android:name=".SwitchUserApplication"
         android:allowBackup="false"
         android:icon="@drawable/icon"
         android:label="@string/app_name">
@@ -38,11 +39,29 @@
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity android:name="com.facebook.FacebookActivity"
-                  android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationName" android:value="@string/app_name" />
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:label="@string/app_name"
+            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/app_name" />
     </application>
 </manifest> 
diff --git a/samples/SwitchUserSample/res/values/strings.xml b/samples/SwitchUserSample/res/values/strings.xml
index 61c1ec908..def6eb3ac 100644
--- a/samples/SwitchUserSample/res/values/strings.xml
+++ b/samples/SwitchUserSample/res/values/strings.xml
@@ -27,4 +27,5 @@
     <string name="menu_item_switch_user">Select User</string>
     <string name="menu_item_clear_slot">Clear this slot</string>
     <string name="app_id">327842977278179</string>
+    <string name="fb_login_protocol_scheme">fb327842977278179</string>
 </resources>
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java b/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
index d7c705266..2a83f33d6 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
+++ b/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
@@ -40,7 +40,6 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        FacebookSdk.sdkInitialize(getApplicationContext());
 
         setContentView(R.layout.main);
 
@@ -89,11 +88,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return handleOptionsItemSelected(item);
             }
         });
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onResume methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.activateApp(this);
     }
 
     @Override
@@ -101,11 +95,6 @@ protected void onPause() {
         super.onPause();
 
         profileFragment.setOnOptionsItemSelectedListener(null);
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.deactivateApp(this);
     }
 
     private void restoreFragments(Bundle savedInstanceState) {
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java b/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java
new file mode 100644
index 000000000..a53cecc5b
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class SwitchUserApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
