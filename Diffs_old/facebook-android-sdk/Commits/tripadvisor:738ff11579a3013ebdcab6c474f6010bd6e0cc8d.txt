diff --git a/facebook/src/com/facebook/widget/LoginButton.java b/facebook/src/com/facebook/widget/LoginButton.java
index 6f548f4dc..c0d934c39 100644
--- a/facebook/src/com/facebook/widget/LoginButton.java
+++ b/facebook/src/com/facebook/widget/LoginButton.java
@@ -450,6 +450,18 @@ public SessionLoginBehavior getLoginBehavior() {
         return properties.getLoginBehavior();
     }
 
+    /**
+     * This is a TripAdvisor specific change to Facebook SDK.
+     * We use different facebook applicationIds based on whether the app is in debug mode.
+     * The Login Button should always try to check if an applicationId has been set before trying to fetch applicationId from Metadata.
+     *
+     * @param context
+     * @return The Facebook applicationId
+     */
+    private String getApplicationId(Context context) {
+        return applicationId != null ? applicationId : Utility.getMetadataApplicationId(context);
+    }
+
     /**
      * Set the application ID to be used to open the session.
      *
@@ -496,7 +508,7 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
     public Session.StatusCallback getSessionStatusCallback() {
         return properties.getSessionStatusCallback();
     }
-    
+
     /**
      * Sets the style (background) of the Tool Tip popup. Currently a blue style and a black
      * style are supported. Blue is default
@@ -505,7 +517,7 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
     public void setToolTipStyle(ToolTipPopup.Style nuxStyle) {
         this.nuxStyle = nuxStyle;
     }
-    
+
     /**
      * Sets the mode of the Tool Tip popup. Currently supported modes are default (normal
      * behavior), always_on (popup remains up until forcibly dismissed), and always_off (popup
@@ -515,7 +527,7 @@ public void setToolTipStyle(ToolTipPopup.Style nuxStyle) {
     public void setToolTipMode(ToolTipMode nuxMode) {
         this.nuxMode = nuxMode;
     }
-    
+
     /**
      * Return the current {@link ToolTipMode} for this LoginButton
      * @return The {@link ToolTipMode}
@@ -523,9 +535,9 @@ public void setToolTipMode(ToolTipMode nuxMode) {
     public ToolTipMode getToolTipMode() {
         return nuxMode;
     }
-    
+
     /**
-     * Sets the amount of time (in milliseconds) that the tool tip will be shown to the user. The 
+     * Sets the amount of time (in milliseconds) that the tool tip will be shown to the user. The
      * default is {@value ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}. Any value that is less than or
      * equal to zero will cause the tool tip to be displayed indefinitely.
      * @param displayTime The amount of time (in milliseconds) that the tool tip will be displayed
@@ -534,7 +546,7 @@ public ToolTipMode getToolTipMode() {
     public void setToolTipDisplayTime(long displayTime) {
         this.nuxDisplayTime = displayTime;
     }
-    
+
     /**
      * Gets the current amount of time (in ms) that the tool tip will be displayed to the user
      * @return
@@ -639,7 +651,7 @@ protected void onAttachedToWindow() {
             setButtonText();
         }
     }
-    
+
     @Override
     protected void onDraw(Canvas canvas) {
         super.onDraw(canvas);
@@ -649,28 +661,28 @@ protected void onDraw(Canvas canvas) {
             checkNuxSettings();
         }
     }
-    
+
     private void showNuxPerSettings(FetchedAppSettings settings) {
         if (settings != null && settings.getNuxEnabled() && getVisibility() == View.VISIBLE) {
             String nuxString = settings.getNuxContent();
             displayNux(nuxString);
         }
     }
-    
+
     private void displayNux(String nuxString) {
         nuxPopup = new ToolTipPopup(nuxString, this);
         nuxPopup.setStyle(nuxStyle);
         nuxPopup.setNuxDisplayTime(nuxDisplayTime);
         nuxPopup.show();
     }
-    
+
     private void checkNuxSettings() {
         if (nuxMode == ToolTipMode.DISPLAY_ALWAYS) {
             String nuxString = getResources().getString(R.string.com_facebook_tooltip_default);
             displayNux(nuxString);
         } else {
             // kick off an async request
-            final String appId = Utility.getMetadataApplicationId(getContext());
+            final String appId = getApplicationId(getContext());
             AsyncTask<Void, Void, FetchedAppSettings> task = new AsyncTask<Void, Void, Utility.FetchedAppSettings>() {
                 @Override
                 protected FetchedAppSettings doInBackground(Void... params) {
@@ -748,7 +760,7 @@ private boolean initializeActiveSessionWithCachedToken(Context context) {
             return session.isOpened();
         }
 
-        String applicationId = Utility.getMetadataApplicationId(context);
+        String applicationId = getApplicationId(context);
         if (applicationId == null) {
             return false;
         }
