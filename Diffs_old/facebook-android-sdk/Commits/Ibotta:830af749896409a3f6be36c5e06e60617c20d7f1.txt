diff --git a/.gitignore b/.gitignore
index 006c82cda..6b4fbc63e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,18 +1,41 @@
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# generated files
+bin/
+gen/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Intellij project files
+*.iml
+*.ipr
+*.iws
+.idea/
+
+# Gradle
+.gradle
+build
+
 *~
 *.DS_Store
-*.class
 *java#
 *.settings
-local.properties
 .arc/
-bin/
-gen/
 out/
 build
 facebook/doc/
 facebook/lint.xml
 facebook/tests/lint.xml
 facebook/tests/assets/config.json
-.idea/workspace.xml
-.idea/dictionaries/
-.idea/inspectionProfiles/
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 000000000..2d3bec743
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,9 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.7.+'
+    }
+}
diff --git a/facebook/TestApp/SdkTestApp.eml b/facebook/TestApp/SdkTestApp.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/TestApp/SdkTestApp.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/TestApp/SdkTestApp.iml b/facebook/TestApp/SdkTestApp.iml
deleted file mode 100644
index ab93347a7..000000000
--- a/facebook/TestApp/SdkTestApp.iml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="PACK_TEST_CODE" value="true" />
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-  </component>
-</module>
-
diff --git a/facebook/TestApp/build.gradle b/facebook/TestApp/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/facebook/TestApp/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/facebook/android-sdk.eml b/facebook/android-sdk.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/android-sdk.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/android-sdk.iml b/facebook/android-sdk.iml
deleted file mode 100644
index 6605bc7ad..000000000
--- a/facebook/android-sdk.iml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="LIBRARY_PROJECT" value="true" />
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />  <notImportedProperties>
-          <property>MANIFEST_FILE_PATH</property>
-          <property>RESOURCES_DIR_PATH</property>
-          <property>ASSETS_DIR_PATH</property>
-          <property>NATIVE_LIBS_DIR_PATH</property>
-        </notImportedProperties>
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/res" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="module-library" scope="PROVIDED">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../libs" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-        <jarDirectory url="file://$MODULE_DIR$/../libs" recursive="false" />
-      </library>
-    </orderEntry>
-  </component>
-</module>
-
diff --git a/facebook/build.gradle b/facebook/build.gradle
index 823cfcc6e..4f70dfac4 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -49,4 +49,4 @@ android {
     packagingOptions {
         exclude 'META-INF/LICENSE'
     }
-}
\ No newline at end of file
+}
diff --git a/facebook/src/com/facebook/AppEventsConstants.java b/facebook/src/com/facebook/AppEventsConstants.java
index 31298be5f..24fd13872 100644
--- a/facebook/src/com/facebook/AppEventsConstants.java
+++ b/facebook/src/com/facebook/AppEventsConstants.java
@@ -19,8 +19,6 @@
 /**
  * Predefined event and parameter names for logging events common to many apps. Logging occurs through the
  * {@link AppEventsLogger#logEvent(String, android.os.Bundle)} family of methods.
- *
- * @beta
  */
 public class AppEventsConstants {
     // Event names
diff --git a/facebook/src/com/facebook/AppEventsLogger.java b/facebook/src/com/facebook/AppEventsLogger.java
index 5a4973552..7fe715cd2 100644
--- a/facebook/src/com/facebook/AppEventsLogger.java
+++ b/facebook/src/com/facebook/AppEventsLogger.java
@@ -18,7 +18,6 @@
 
 import android.content.Context;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
@@ -103,7 +102,6 @@
  * The length of each parameter value can be no more than on the order of 100 characters.
  * </li>
  * </ul>
- * @beta
  */
 public class AppEventsLogger {
     // Enums
@@ -160,8 +158,6 @@ SuppressionTimeoutBehavior getBehavior() {
     private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
     private static final int APP_ACTIVATE_SUPPRESSION_PERIOD_IN_SECONDS            = 5 * 60;
 
-    private static final String APP_EVENT_PREFERENCES = "com.facebook.sdk.appEventPreferences";
-
     // Instance member variables
     private final Context context;
     private final AccessTokenAppIdPair accessTokenAppId;
@@ -174,6 +170,7 @@ SuppressionTimeoutBehavior getBehavior() {
     private static boolean requestInFlight;
     private static Context applicationContext;
     private static Object staticLock = new Object();
+    private static String hashedDeviceAndAppId;
     private static Map<String, Date> mapEventsToSuppressionTime = new HashMap<String, Date>();
     @SuppressWarnings("serial")
     private static Map<String, EventSuppression> mapEventNameToSuppress = new HashMap<String, EventSuppression>() {
@@ -247,34 +244,19 @@ private Object writeReplace() {
     }
 
     /**
-     * Sets whether events sent to Facebook should be restricted from being used for purposes than analytics and
-     * conversions, such as remarketing for this user.  Defaults to false.  This value is stored on the device and
-     * persists across app launches.
-     *
-     * @param context   Used to read the value.
-     *
-     * @beta
+     * This method is deprecated.  Use {@link Settings#getLimitEventAndDataUsage(Context)} instead.
      */
+    @Deprecated
     public static boolean getLimitEventUsage(Context context) {
-        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
-        return preferences.getBoolean("limitEventUsage", false);
+        return Settings.getLimitEventAndDataUsage(context);
     }
 
     /**
-     * Sets whether events sent to Facebook should be restricted from being used for purposes than analytics and
-     * conversions, such as remarketing for this user.  Defaults to false.  This value is stored on the device and
-     * persists across app launches. Changes to this setting will apply to any events currently queued to be
-     * flushed, as well as any subsequent events.
-     *
-     * @param context   Used to persist this value across app runs.
-     *
-     * @beta
+     * This method is deprecated.  Use {@link Settings#setLimitEventAndDataUsage(Context, boolean)} instead.
      */
+    @Deprecated
     public static void setLimitEventUsage(Context context, boolean limitEventUsage) {
-        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.putBoolean("limitEventUsage", limitEventUsage);
-        editor.commit();
+        Settings.setLimitEventAndDataUsage(context, limitEventUsage);
     }
 
     /**
@@ -285,8 +267,6 @@ public static void setLimitEventUsage(Context context, boolean limitEventUsage)
      * {@link AppEventsLogger#activateApp(android.content.Context, String)}.
      *
      * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
-     *
-     * @beta
      */
     public static void activateApp(Context context) {
         activateApp(context, Utility.getMetadataApplicationId(context));
@@ -299,8 +279,6 @@ public static void activateApp(Context context) {
      * @param context   Used to access the attributionId for non-authenticated users.
      *
      * @param applicationId  The specific applicationId to report the activation for.
-     *
-     * @beta
      */
     @SuppressWarnings("deprecation")
     public static void activateApp(Context context, String applicationId) {
@@ -324,8 +302,6 @@ public static void activateApp(Context context, String applicationId) {
      * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
      *
      * @return          AppEventsLogger instance to invoke log* methods on.
-     *
-     * @beta
      */
     public static AppEventsLogger newLogger(Context context) {
         return new AppEventsLogger(context, null, null);
@@ -340,8 +316,6 @@ public static AppEventsLogger newLogger(Context context) {
      *                       app ID specified via the app ID specified in the package metadata.
      *
      * @return          AppEventsLogger instance to invoke log* methods on.
-     *
-     * @beta
      */
     public static AppEventsLogger newLogger(Context context, Session session) {
         return new AppEventsLogger(context, null, session);
@@ -358,8 +332,6 @@ public static AppEventsLogger newLogger(Context context, Session session) {
      *                       app ID.
      *
      * @return          AppEventsLogger instance to invoke log* methods on.
-     *
-     * @beta
      */
     public static AppEventsLogger newLogger(Context context, String applicationId, Session session) {
         return new AppEventsLogger(context, applicationId, session);
@@ -375,8 +347,6 @@ public static AppEventsLogger newLogger(Context context, String applicationId, S
      *                       in the package metadata will be used.
      *
      * @return          AppEventsLogger instance to invoke log* methods on.
-     *
-     * @beta
      */
     public static AppEventsLogger newLogger(Context context, String applicationId) {
         return new AppEventsLogger(context, applicationId, null);
@@ -396,8 +366,6 @@ public static AppEventsLogger newLogger(Context context, String applicationId) {
      * Access the behavior that AppEventsLogger uses to determine when to flush logged events to the server. This
      * setting applies to all instances of AppEventsLogger.
      * @return specified flush behavior.
-     *
-     * @beta
      */
     public static FlushBehavior getFlushBehavior() {
         synchronized (staticLock) {
@@ -409,8 +377,6 @@ public static FlushBehavior getFlushBehavior() {
      * Set the behavior that this AppEventsLogger uses to determine when to flush logged events to the server. This
      * setting applies to all instances of AppEventsLogger.
      * @param flushBehavior the desired behavior.
-     *
-     * @beta
      */
     public static void setFlushBehavior(FlushBehavior flushBehavior) {
         synchronized (staticLock) {
@@ -426,9 +392,7 @@ public static void setFlushBehavior(FlushBehavior flushBehavior) {
      *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
      *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
      *                  have no more than ~300 distinct event names.
-     *
-     * @beta
-     */
+      */
     public void logEvent(String eventName) {
         logEvent(eventName, null);
     }
@@ -444,8 +408,6 @@ public void logEvent(String eventName) {
      *                  * @param eventName
      * @param valueToSum a value to associate with the event which will be summed up in Insights for across all
      *                   instances of the event, so that average values can be determined, etc.
-     *
-     * @beta
      */
     public void logEvent(String eventName, double valueToSum) {
         logEvent(eventName, valueToSum, null);
@@ -465,8 +427,6 @@ public void logEvent(String eventName, double valueToSum) {
      *                   parameter in the, at most, thousands.  As an example, don't attempt to provide a unique
      *                   parameter value for each unique user in your app.  You won't get meaningful aggregate reporting
      *                   on so many parameter values.  The values in the bundles should be Strings or numeric values.
-     *
-     * @beta
      */
     public void logEvent(String eventName, Bundle parameters) {
         logEvent(eventName, null, parameters, false);
@@ -488,8 +448,6 @@ public void logEvent(String eventName, Bundle parameters) {
      *                   parameter in the, at most, thousands.  As an example, don't attempt to provide a unique
      *                   parameter value for each unique user in your app.  You won't get meaningful aggregate reporting
      *                   on so many parameter values.  The values in the bundles should be Strings or numeric values.
-     *
-     * @beta
      */
     public void logEvent(String eventName, double valueToSum, Bundle parameters) {
         logEvent(eventName, valueToSum, parameters, false);
@@ -501,8 +459,6 @@ public void logEvent(String eventName, double valueToSum, Bundle parameters) {
      * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
      *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
      * @param currency        Currency used to specify the amount.
-     *
-     * @beta
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
         logPurchase(purchaseAmount, currency, null);
@@ -517,8 +473,6 @@ public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
      * @param currency        Currency used to specify the amount.
      * @param parameters      Arbitrary additional information for describing this event.  Should have no more than
      *                        10 entries, and keys should be mostly consistent from one purchase event to the next.
-     *
-     * @beta
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
 
@@ -542,8 +496,6 @@ public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle par
     /**
      * Explicitly flush any stored events to the server.  Implicit flushes may happen depending on the value
      * of getFlushBehavior.  This method allows for explicit, app invoked flushing.
-     *
-     * @beta
      */
     public void flush() {
         flush(FlushReason.EXPLICIT);
@@ -556,8 +508,6 @@ public void flush() {
      * may trigger an I/O operation on the calling thread. Explicit use of this method is not necessary
      * if the consumer is making use of {@link UiLifecycleHelper}, which will take care of making the call
      * in its own onStop() callback.
-     *
-     * @beta
      */
     public static void onContextStop() {
         PersistedEvents.persistEvents(applicationContext, stateMap);
@@ -625,6 +575,11 @@ private AppEventsLogger(Context context, String applicationId, Session session)
         }
 
         synchronized (staticLock) {
+
+            if (hashedDeviceAndAppId == null) {
+                hashedDeviceAndAppId = Utility.getHashedDeviceAndAppID(context, applicationId);
+            }
+
             if (applicationContext == null) {
                 applicationContext = context.getApplicationContext();
             }
@@ -749,9 +704,10 @@ private static SessionEventsState getSessionEventsState(Context context, AccessT
             SessionEventsState state = stateMap.get(accessTokenAppId);
             if (state == null) {
                 // Retrieve attributionId, but we will only send it if attribution is supported for the app.
-                String attributionId = Settings.getAttributionId(context.getContentResolver());
+                AttributionIdentifiers attributionIdentifiers =
+                    AttributionIdentifiers.getAttributionIdentifiers(context);
 
-                state = new SessionEventsState(attributionId, context.getPackageName());
+                state = new SessionEventsState(attributionIdentifiers, context.getPackageName(), hashedDeviceAndAppId);
                 stateMap.put(accessTokenAppId, state);
             }
             return state;
@@ -809,7 +765,7 @@ private static void flushAndWait(final FlushReason reason) {
     private static FlushStatistics buildAndExecuteRequests(FlushReason reason, Set<AccessTokenAppIdPair> keysToFlush) {
         FlushStatistics flushResults = new FlushStatistics();
 
-        boolean limitEventUsage = getLimitEventUsage(applicationContext);
+        boolean limitEventUsage = Settings.getLimitEventAndDataUsage(applicationContext);
 
         List<Request> requestsToExecute = new ArrayList<Request>();
         for (AccessTokenAppIdPair accessTokenAppId : keysToFlush) {
@@ -974,8 +930,9 @@ private static void notifyDeveloperError(String message) {
         private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
         private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
         private int numSkippedEventsDueToFullBuffer;
-        private String attributionId;
+        private AttributionIdentifiers attributionIdentifiers;
         private String packageName;
+        private String hashedDeviceAndAppId;
 
         public static final String EVENT_COUNT_KEY = "event_count";
         public static final String ENCODED_EVENTS_KEY = "encoded_events";
@@ -983,9 +940,10 @@ private static void notifyDeveloperError(String message) {
 
         private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
 
-        public SessionEventsState(String attributionId, String packageName) {
-            this.attributionId = attributionId;
+        public SessionEventsState(AttributionIdentifiers identifiers, String packageName, String hashedDeviceAndAppId) {
+            this.attributionIdentifiers = identifiers;
             this.packageName = packageName;
+            this.hashedDeviceAndAppId = hashedDeviceAndAppId;
         }
 
         // Synchronize here and in other methods on this class, because could be coming in from different
@@ -1062,11 +1020,11 @@ private void populateRequest(Request request, int numSkipped, JSONArray events,
                 publishParams.setProperty("num_skipped_events", numSkipped);
             }
 
-            if (includeAttribution && attributionId != null) {
-                publishParams.setProperty("attribution", attributionId);
+            if (includeAttribution) {
+                Utility.setAppEventAttributionParameters(publishParams, attributionIdentifiers,
+                        hashedDeviceAndAppId, limitEventUsage);
             }
 
-            publishParams.setProperty("application_tracking_enabled", !limitEventUsage);
             publishParams.setProperty("application_package_name", packageName);
 
             request.setGraphObject(publishParams);
diff --git a/facebook/src/com/facebook/AppLinkData.java b/facebook/src/com/facebook/AppLinkData.java
index 6246c73da..5309337c1 100644
--- a/facebook/src/com/facebook/AppLinkData.java
+++ b/facebook/src/com/facebook/AppLinkData.java
@@ -24,13 +24,14 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.PlatformServiceClient;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
+import com.facebook.internal.*;
+import com.facebook.model.GraphObject;
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.Iterator;
+
 /**
  * Class to encapsulate an app link, and provide methods for constructing the data from various sources
  */
@@ -40,21 +41,44 @@
      * Key that should be used to pull out the UTC Unix tap-time from the arguments for this app link.
      */
     public static final String ARGUMENTS_TAPTIME_KEY = "com.facebook.platform.APPLINK_TAP_TIME_UTC";
+    /**
+     * Key that should be used to get the "referer_data" field for this app link.
+     */
+    public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
+
+    /**
+     * Key that should be used to pull out the native class that would have been used if the applink was deferred.
+     */
+    public static final String ARGUMENTS_NATIVE_CLASS_KEY = "com.facebook.platform.APPLINK_NATIVE_CLASS";
 
-    private static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
+    /**
+     * Key that should be used to pull out the native url that would have been used if the applink was deferred.
+     */
+    public static final String ARGUMENTS_NATIVE_URL = "com.facebook.platform.APPLINK_NATIVE_URL";
+
+    static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
+    private static final String BUNDLE_AL_APPLINK_DATA_KEY = "al_applink_data";
     private static final String APPLINK_BRIDGE_ARGS_KEY = "bridge_args";
     private static final String APPLINK_METHOD_ARGS_KEY = "method_args";
     private static final String APPLINK_VERSION_KEY = "version";
     private static final String BRIDGE_ARGS_METHOD_KEY = "method";
+    private static final String DEFERRED_APP_LINK_EVENT = "DEFERRED_APP_LINK";
+    private static final String DEFERRED_APP_LINK_PATH = "%s/activities";
+
+    private static final String DEFERRED_APP_LINK_ARGS_FIELD = "applink_args";
+    private static final String DEFERRED_APP_LINK_CLASS_FIELD = "applink_class";
+    private static final String DEFERRED_APP_LINK_CLICK_TIME_FIELD = "click_time";
+    private static final String DEFERRED_APP_LINK_URL_FIELD = "applink_url";
+
     private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
     private static final String METHOD_ARGS_REF_KEY = "ref";
+    private static final String REFERER_DATA_REF_KEY = "fb_ref";
     private static final String TAG = AppLinkData.class.getCanonicalName();
 
-    private String[] ref;
+    private String ref;
     private Uri targetUri;
-    @SuppressWarnings("unused")
-    private String version;
     private JSONObject arguments;
+    private Bundle argumentBundle;
 
     /**
      * Asynchronously fetches app link information that might have been stored for use
@@ -88,41 +112,92 @@ public static void fetchDeferredAppLinkData(
 
         Validate.notNull(applicationId, "applicationId");
 
-        DeferredAppLinkDataClient client = new DeferredAppLinkDataClient(context, applicationId);
-        DeferredAppLinkDataClient.CompletedListener callback = new DeferredAppLinkDataClient.CompletedListener() {
+        final Context applicationContext = context.getApplicationContext();
+        final String applicationIdCopy = applicationId;
+        Settings.getExecutor().execute(new Runnable() {
             @Override
-            public void completed(Bundle result) {
-                AppLinkData appLinkData = null;
-                if (result != null) {
-                    final String appLinkArgsJsonString = result.getString(BUNDLE_APPLINK_ARGS_KEY);
-                    final long tapTimeUtc = result.getLong(ARGUMENTS_TAPTIME_KEY, -1);
+            public void run() {
+                fetchDeferredAppLinkFromServer(applicationContext, applicationIdCopy, completionHandler);
+            }
+        });
+    }
+
+    private static void fetchDeferredAppLinkFromServer(
+            Context context,
+            String applicationId,
+            final CompletionHandler completionHandler) {
+
+        GraphObject deferredApplinkParams = GraphObject.Factory.create();
+        deferredApplinkParams.setProperty("event", DEFERRED_APP_LINK_EVENT);
+        Utility.setAppEventAttributionParameters(deferredApplinkParams,
+                AttributionIdentifiers.getAttributionIdentifiers(context),
+                Utility.getHashedDeviceAndAppID(context, applicationId),
+                Settings.getLimitEventAndDataUsage(context));
+        deferredApplinkParams.setProperty("application_package_name", context.getPackageName());
+
+        String deferredApplinkUrlPath = String.format(DEFERRED_APP_LINK_PATH, applicationId);
+        AppLinkData appLinkData = null;
 
-                    // Now create the app link
+        try {
+            Request deferredApplinkRequest = Request.newPostRequest(
+                    null, deferredApplinkUrlPath, deferredApplinkParams, null);
+            Response deferredApplinkResponse = deferredApplinkRequest.executeAndWait();
+            GraphObject wireResponse = deferredApplinkResponse.getGraphObject();
+            JSONObject jsonResponse = wireResponse != null ? wireResponse.getInnerJSONObject() : null;
+            if (jsonResponse != null) {
+                final String appLinkArgsJsonString = jsonResponse.optString(DEFERRED_APP_LINK_ARGS_FIELD);
+                final long tapTimeUtc = jsonResponse.optLong(DEFERRED_APP_LINK_CLICK_TIME_FIELD, -1);
+                final String appLinkClassName = jsonResponse.optString(DEFERRED_APP_LINK_CLASS_FIELD);
+                final String appLinkUrl = jsonResponse.optString(DEFERRED_APP_LINK_URL_FIELD);
+
+                if (appLinkArgsJsonString != null && appLinkArgsJsonString != "") {
                     appLinkData = createFromJson(appLinkArgsJsonString);
+
                     if (tapTimeUtc != -1) {
                         try {
-                            appLinkData.getArguments().put(ARGUMENTS_TAPTIME_KEY, tapTimeUtc);
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_TAPTIME_KEY, tapTimeUtc);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_TAPTIME_KEY, Long.toString(tapTimeUtc));
+                            }
+                        } catch (JSONException e) {
+                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
+                        }
+                    }
+
+                    if (appLinkClassName != null) {
+                        try {
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
+                            }
+                        } catch (JSONException e) {
+                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
+                        }
+                    }
+
+                    if (appLinkUrl != null) {
+                        try {
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_NATIVE_URL, appLinkUrl);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_NATIVE_URL, appLinkUrl);
+                            }
                         } catch (JSONException e) {
                             Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
                         }
                     }
                 }
-                completionHandler.onDeferredAppLinkDataFetched(appLinkData);
             }
-        };
-        client.setCompletedListener(callback);
-
-        if (!client.start()) {
-            // there is not a sufficient version of fb4a present to return a deferred app link, so kick off
-            // a call to the completion handler.
-            Handler handler = new Handler(Looper.getMainLooper());
-            handler.post(new Runnable() {
-                @Override
-                public void run() {
-                    completionHandler.onDeferredAppLinkDataFetched(null);
-                }
-            });
+        } catch (Exception e) {
+            Utility.logd(TAG, "Unable to fetch deferred applink from server");
         }
+
+        completionHandler.onDeferredAppLinkDataFetched(appLinkData);
     }
 
     /**
@@ -137,9 +212,11 @@ public static AppLinkData createFromActivity(Activity activity) {
             return null;
         }
 
-        String appLinkArgsJsonString = intent.getStringExtra(BUNDLE_APPLINK_ARGS_KEY);
-        // Try v2 app linking first
-        AppLinkData appLinkData = createFromJson(appLinkArgsJsonString);
+        AppLinkData appLinkData = createFromAlApplinkData(intent);
+        if (appLinkData == null) {
+            String appLinkArgsJsonString = intent.getStringExtra(BUNDLE_APPLINK_ARGS_KEY);
+            appLinkData = createFromJson(appLinkArgsJsonString);
+        }
         if (appLinkData == null) {
             // Try regular app linking
             appLinkData = createFromUri(intent.getData());
@@ -148,6 +225,30 @@ public static AppLinkData createFromActivity(Activity activity) {
         return appLinkData;
     }
 
+    private static AppLinkData createFromAlApplinkData(Intent intent) {
+        Bundle applinks = intent.getBundleExtra(BUNDLE_AL_APPLINK_DATA_KEY);
+        if (applinks == null) {
+            return null;
+        }
+
+        AppLinkData appLinkData = new AppLinkData();
+        appLinkData.targetUri = intent.getData();
+        if (appLinkData.targetUri == null) {
+            String targetUriString = applinks.getString(METHOD_ARGS_TARGET_URL_KEY);
+            if (targetUriString != null) {
+                appLinkData.targetUri = Uri.parse(targetUriString);
+            }
+        }
+        appLinkData.argumentBundle = applinks;
+        appLinkData.arguments = null;
+        Bundle refererData = applinks.getBundle(ARGUMENTS_REFERER_DATA_KEY);
+        if (refererData != null) {
+            appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
+        }
+
+        return appLinkData;
+    }
+
     private static AppLinkData createFromJson(String jsonString) {
         if (jsonString  == null) {
             return null;
@@ -163,13 +264,16 @@ private static AppLinkData createFromJson(String jsonString) {
             if (method.equals("applink") && version.equals("2")) {
                 // We have a new deep link
                 AppLinkData appLinkData = new AppLinkData();
-                appLinkData.version = version;
 
                 appLinkData.arguments = appLinkArgsJson.getJSONObject(APPLINK_METHOD_ARGS_KEY);
+                // first look for the "ref" key in the top level args
                 if (appLinkData.arguments.has(METHOD_ARGS_REF_KEY)) {
-                    String ref = appLinkData.arguments.getString(METHOD_ARGS_REF_KEY);
-                    if (ref != null) {
-                        appLinkData.ref = ref.split(",");
+                    appLinkData.ref = appLinkData.arguments.getString(METHOD_ARGS_REF_KEY);
+                } else if (appLinkData.arguments.has(ARGUMENTS_REFERER_DATA_KEY)) {
+                    // if it's not in the top level args, it could be in the "referer_data" blob
+                    JSONObject refererData = appLinkData.arguments.getJSONObject(ARGUMENTS_REFERER_DATA_KEY);
+                    if (refererData.has(REFERER_DATA_REF_KEY)) {
+                        appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
                     }
                 }
 
@@ -177,10 +281,14 @@ private static AppLinkData createFromJson(String jsonString) {
                     appLinkData.targetUri = Uri.parse(appLinkData.arguments.getString(METHOD_ARGS_TARGET_URL_KEY));
                 }
 
+                appLinkData.argumentBundle = toBundle(appLinkData.arguments);
+
                 return appLinkData;
             }
         } catch (JSONException e) {
-            Log.d(TAG, "Unable to parse AppLink JSON");
+            Log.d(TAG, "Unable to parse AppLink JSON", e);
+        } catch (FacebookException e) {
+            Log.d(TAG, "Unable to parse AppLink JSON", e);
         }
 
         return null;
@@ -191,39 +299,102 @@ private static AppLinkData createFromUri(Uri appLinkDataUri) {
             return null;
         }
 
-        // TODO : Try old-school deep linking
-        // Task : #2583027
-       return null;
+        AppLinkData appLinkData = new AppLinkData();
+        appLinkData.targetUri = appLinkDataUri;
+        return appLinkData;
+    }
+
+    private static Bundle toBundle(JSONObject node) throws JSONException {
+        Bundle bundle = new Bundle();
+        @SuppressWarnings("unchecked")
+        Iterator<String> fields = node.keys();
+        while (fields.hasNext()) {
+            String key = fields.next();
+            Object value;
+            value = node.get(key);
+
+            if (value instanceof JSONObject) {
+                bundle.putBundle(key, toBundle((JSONObject) value));
+            } else if (value instanceof JSONArray) {
+                JSONArray valueArr = (JSONArray) value;
+                if (valueArr.length() == 0) {
+                    bundle.putStringArray(key, new String[0]);
+                } else {
+                    Object firstNode = valueArr.get(0);
+                    if (firstNode instanceof JSONObject) {
+                        Bundle[] bundles = new Bundle[valueArr.length()];
+                        for (int i = 0; i < valueArr.length(); i++) {
+                            bundles[i] = toBundle(valueArr.getJSONObject(i));
+                        }
+                        bundle.putParcelableArray(key, bundles);
+                    } else if (firstNode instanceof JSONArray) {
+                        // we don't support nested arrays
+                        throw new FacebookException("Nested arrays are not supported.");
+                    } else { // just use the string value
+                        String[] arrValues = new String[valueArr.length()];
+                        for (int i = 0; i < valueArr.length(); i++) {
+                            arrValues[i] = valueArr.get(i).toString();
+                        }
+                        bundle.putStringArray(key, arrValues);
+                    }
+                }
+            } else {
+                bundle.putString(key, value.toString());
+            }
+        }
+        return bundle;
     }
 
+
     private AppLinkData() {
     }
 
     /**
-     * TargetUri for this App Link
-     * @return targetUri
+     * Returns the target uri for this App Link.
+     * @return target uri
      */
     public Uri getTargetUri() {
         return targetUri;
     }
 
     /**
-     * Ref for this App Link
+     * Returns the ref for this App Link.
      * @return ref
      */
-    public String[] getRef() {
+    public String getRef() {
         return ref;
     }
 
     /**
-     * The full set of arguments for this app link. Properties like TargetUri & Ref are typically
-     * picked out of this set of arguments.
+     * This method has been deprecated. Please use {@link AppLinkData#getArgumentBundle()} instead.
      * @return JSONObject property bag.
      */
+    @Deprecated
     public JSONObject getArguments() {
         return arguments;
     }
 
+    /**
+     * The full set of arguments for this app link. Properties like target uri & ref are typically
+     * picked out of this set of arguments.
+     * @return App link related arguments as a bundle.
+     */
+    public Bundle getArgumentBundle() {
+        return argumentBundle;
+    }
+
+    /**
+     * The referer data associated with the app link. This will contain Facebook specific information like
+     * fb_access_token, fb_expires_in, and fb_ref.
+     * @return the referer data.
+     */
+    public Bundle getRefererData() {
+        if (argumentBundle != null) {
+            return argumentBundle.getBundle(ARGUMENTS_REFERER_DATA_KEY);
+        }
+        return null;
+    }
+
     /**
      * Interface to asynchronously receive AppLinkData after it has been fetched.
      */
@@ -235,18 +406,4 @@ public JSONObject getArguments() {
          */
         void onDeferredAppLinkDataFetched(AppLinkData appLinkData);
     }
-
-    final static class DeferredAppLinkDataClient extends PlatformServiceClient {
-
-        DeferredAppLinkDataClient(Context context, String applicationId) {
-            super(context, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REQUEST, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REPLY,
-                    NativeProtocol.PROTOCOL_VERSION_20130618, applicationId);
-        }
-
-        @Override
-        protected void populateRequestBundle(Bundle data) {
-            String packageName = getContext().getPackageName();
-            data.putString(NativeProtocol.EXTRA_GET_INSTALL_DATA_PACKAGE, packageName);
-        }
-    }
 }
diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index 51b178c9a..cbd308add 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -720,6 +720,13 @@ void cancel() {
             }
         }
 
+        @Override
+        boolean needsRestart() {
+            // if the getTokenClient is null, that means an orientation change has occurred, and we need
+            // to recreate the GetTokenClient, so return true to indicate we need a restart
+            return getTokenClient == null;
+        }
+
         boolean tryAuthorize(final AuthorizationRequest request) {
             getTokenClient = new GetTokenClient(context, request.getApplicationId());
             if (!getTokenClient.start()) {
diff --git a/facebook/src/com/facebook/FacebookBroadcastReceiver.java b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
new file mode 100644
index 000000000..ec2556c9b
--- /dev/null
+++ b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
@@ -0,0 +1,42 @@
+package com.facebook;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.internal.NativeProtocol;
+
+/**
+ * This class implements a simple BroadcastReceiver designed to listen for broadcast notifications from the
+ * Facebook app. At present, these notifications consistent of success/failure notifications for photo upload
+ * operations that happen in the background.
+ *
+ * Applications may subclass this class and register it in their AndroidManifest.xml, listening on the
+ * com.facebook.platform.AppCallResultBroadcast action.
+ */
+public class FacebookBroadcastReceiver extends BroadcastReceiver {
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        String appCallId = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
+        String action = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION);
+        if (appCallId != null && action != null) {
+            Bundle extras = intent.getExtras();
+
+            if (NativeProtocol.isErrorResult(intent)) {
+                onFailedAppCall(appCallId, action, extras);
+            } else {
+                onSuccessfulAppCall(appCallId, action, extras);
+            }
+        }
+    }
+
+    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
+        // Default does nothing.
+    }
+
+    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
+        // Default does nothing.
+    }
+}
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index bdda281f9..92ad5c99d 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,6 +17,6 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.5.2";
-    public static final String MIGRATION_BUNDLE = "fbsdk:20130708";
+    public static final String BUILD = "3.8.0";
+    public static final String MIGRATION_BUNDLE = "fbsdk:20131203";
 }
diff --git a/facebook/src/com/facebook/ProgressNoopOutputStream.java b/facebook/src/com/facebook/ProgressNoopOutputStream.java
new file mode 100644
index 000000000..e0e3770df
--- /dev/null
+++ b/facebook/src/com/facebook/ProgressNoopOutputStream.java
@@ -0,0 +1,74 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+import java.io.OutputStream;
+import java.util.HashMap;
+import java.util.Map;
+
+class ProgressNoopOutputStream extends OutputStream implements RequestOutputStream {
+    private final Map<Request, RequestProgress> progressMap = new HashMap<Request, RequestProgress>();
+    private final Handler callbackHandler;
+
+    private Request currentRequest;
+    private RequestProgress currentRequestProgress;
+    private int batchMax;
+
+    ProgressNoopOutputStream(Handler callbackHandler) {
+        this.callbackHandler = callbackHandler;
+    }
+
+    public void setCurrentRequest(Request currentRequest) {
+        this.currentRequest = currentRequest;
+        this.currentRequestProgress = currentRequest != null? progressMap.get(currentRequest) : null;
+    }
+
+    int getMaxProgress() {
+        return batchMax;
+    }
+
+    Map<Request,RequestProgress> getProgressMap() {
+        return progressMap;
+    }
+
+    void addProgress(long size) {
+        if (currentRequestProgress == null) {
+            currentRequestProgress = new RequestProgress(callbackHandler, currentRequest);
+            progressMap.put(currentRequest, currentRequestProgress);
+        }
+
+        currentRequestProgress.addToMax(size);
+        batchMax += size;
+    }
+
+    @Override
+    public void write(byte[] buffer) {
+        addProgress(buffer.length);
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int length) {
+        addProgress(length);
+    }
+
+    @Override
+    public void write(int oneByte) {
+        addProgress(1);
+    }
+}
diff --git a/facebook/src/com/facebook/ProgressOutputStream.java b/facebook/src/com/facebook/ProgressOutputStream.java
new file mode 100644
index 000000000..780baffd6
--- /dev/null
+++ b/facebook/src/com/facebook/ProgressOutputStream.java
@@ -0,0 +1,121 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+import java.io.FilterOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Map;
+
+class ProgressOutputStream extends FilterOutputStream implements RequestOutputStream {
+    private final Map<Request, RequestProgress> progressMap;
+    private final RequestBatch requests;
+    private final long threshold;
+
+    private long batchProgress, lastReportedProgress, maxProgress;
+    private RequestProgress currentRequestProgress;
+
+    ProgressOutputStream(OutputStream out, RequestBatch requests, Map<Request, RequestProgress> progressMap, long maxProgress) {
+        super(out);
+        this.requests = requests;
+        this.progressMap = progressMap;
+        this.maxProgress = maxProgress;
+
+        this.threshold = Settings.getOnProgressThreshold();
+    }
+
+    private void addProgress(long size) {
+        if (currentRequestProgress != null) {
+            currentRequestProgress.addProgress(size);
+        }
+
+        batchProgress += size;
+
+        if (batchProgress >= lastReportedProgress + threshold || batchProgress >= maxProgress) {
+            reportBatchProgress();
+        }
+    }
+
+    private void reportBatchProgress() {
+        if (batchProgress > lastReportedProgress) {
+            for (RequestBatch.Callback callback : requests.getCallbacks()) {
+                if (callback instanceof RequestBatch.OnProgressCallback) {
+                    final Handler callbackHandler = requests.getCallbackHandler();
+
+                    // Keep copies to avoid threading issues
+                    final RequestBatch.OnProgressCallback progressCallback = (RequestBatch.OnProgressCallback) callback;
+                    if (callbackHandler == null) {
+                        progressCallback.onBatchProgress(requests, batchProgress, maxProgress);
+                    }
+                    else {
+                        callbackHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                progressCallback.onBatchProgress(requests, batchProgress, maxProgress);
+                            }
+                        });
+                    }
+                }
+            }
+
+            lastReportedProgress = batchProgress;
+        }
+    }
+
+    public void setCurrentRequest(Request request) {
+        currentRequestProgress = request != null? progressMap.get(request) : null;
+    }
+
+    long getBatchProgress() {
+        return batchProgress;
+    }
+
+    long getMaxProgress() {
+        return maxProgress;
+    }
+
+    @Override
+    public void write(byte[] buffer) throws IOException {
+        out.write(buffer);
+        addProgress(buffer.length);
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int length) throws IOException {
+        out.write(buffer, offset, length);
+        addProgress(length);
+    }
+
+    @Override
+    public void write(int oneByte) throws IOException {
+        out.write(oneByte);
+        addProgress(1);
+    }
+
+    @Override
+    public void close() throws IOException {
+        super.close();
+
+        for (RequestProgress p : progressMap.values()) {
+            p.reportProgress();
+        }
+
+        reportBatchProgress();
+    }
+}
diff --git a/facebook/src/com/facebook/Request.java b/facebook/src/com/facebook/Request.java
index 199cb7669..b69d6b8fa 100644
--- a/facebook/src/com/facebook/Request.java
+++ b/facebook/src/com/facebook/Request.java
@@ -23,11 +23,8 @@
 import android.os.*;
 import android.text.TextUtils;
 import android.util.Pair;
-import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.*;
 import com.facebook.model.*;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -72,6 +69,7 @@
     private static final String MY_FRIENDS = "me/friends";
     private static final String MY_PHOTOS = "me/photos";
     private static final String MY_VIDEOS = "me/videos";
+    private static final String VIDEOS_SUFFIX = "/videos";
     private static final String SEARCH = "search";
     private static final String MY_FEED = "me/feed";
     private static final String MY_STAGING_RESOURCES = "me/staging_resources";
@@ -508,7 +506,7 @@ public static Request newStatusUpdateRequest(Session session, String message, Gr
      * the activeSession; otherwise the ID will represent the user logged into the native Facebook app on the device.
      * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
      * it, or c) the app has previously called
-     * {@link AppEventsLogger#setLimitEventUsage(android.content.Context, boolean)} with `true` for this user.
+     * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} with `true` for this user.
      *
      * @param session
      *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
@@ -542,7 +540,7 @@ public static Request newCustomAudienceThirdPartyIdRequest(Session session, Cont
      * the activeSession; otherwise the ID will represent the user logged into the native Facebook app on the device.
      * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
      * it, or c) the app has previously called
-     * {@link AppEventsLogger#setLimitEventUsage(android.content.Context, boolean)} with `true` for this user.
+     * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} ;} with `true` for this user.
      *
      * @param session
      *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
@@ -584,20 +582,23 @@ public static Request newCustomAudienceThirdPartyIdRequest(Session session,
         }
 
         String endpoint = applicationId + "/custom_audience_third_party_id";
-
+        AttributionIdentifiers attributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
         Bundle parameters = new Bundle();
+
         if (session == null) {
             // Only use the attributionID if we don't have an open session.  If we do have an open session, then
             // the user token will be used to identify the user, and is more reliable than the attributionID.
-            String attributionId = Settings.getAttributionId(context.getContentResolver());
-            if (attributionId != null) {
-                parameters.putString("udid", attributionId);
+            String udid = attributionIdentifiers.getAttributionId() != null
+                ? attributionIdentifiers.getAttributionId()
+                : attributionIdentifiers.getAndroidAdvertiserId();
+            if (attributionIdentifiers.getAttributionId() != null) {
+                parameters.putString("udid", udid);
             }
         }
 
         // Server will choose to not provide the App User ID in the event that event usage has been limited for
         // this user for this app.
-        if (AppEventsLogger.getLimitEventUsage(context)) {
+        if (Settings.getLimitEventAndDataUsage(context) || attributionIdentifiers.isTrackingLimited()) {
             parameters.putString("limit_event_usage", "1");
         }
 
@@ -1765,14 +1766,36 @@ final String getUrlForSingleRequest() {
         if (this.restMethod != null) {
             baseUrl = String.format("%s/%s", ServerProtocol.getRestUrlBase(), restMethod);
         } else {
-            baseUrl = String.format("%s/%s", ServerProtocol.getGraphUrlBase(), graphPath);
+            if (this.getHttpMethod() == HttpMethod.POST && graphPath != null && graphPath.endsWith(VIDEOS_SUFFIX)) {
+                baseUrl = String.format("%s/%s", ServerProtocol.getGraphVideoUrlBase(), graphPath);
+            } else {
+                baseUrl = String.format("%s/%s", ServerProtocol.getGraphUrlBase(), graphPath);
+            }
         }
 
         addCommonParameters();
         return appendParametersToBaseUrl(baseUrl);
     }
 
-    private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONException, IOException {
+    private static class Attachment {
+        private final Request request;
+        private final Object value;
+
+        public Attachment(Request request, Object value) {
+            this.request = request;
+            this.value = value;
+        }
+
+        public Request getRequest() {
+            return request;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+    }
+
+    private void serializeToBatch(JSONArray batch, Map<String, Attachment> attachments) throws JSONException, IOException {
         JSONObject batchEntry = new JSONObject();
 
         if (this.batchEntryName != null) {
@@ -1800,7 +1823,7 @@ private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONEx
                 // Make the name unique across this entire batch.
                 String name = String.format("%s%d", ATTACHMENT_FILENAME_PREFIX, attachments.size());
                 attachmentNames.add(name);
-                Utility.putObjectInBundle(attachments, name, value);
+                attachments.put(name, new Attachment(this, value));
             }
         }
 
@@ -1831,6 +1854,22 @@ private void validate() {
         }
     }
 
+    private static boolean hasOnProgressCallbacks(RequestBatch requests) {
+        for (RequestBatch.Callback callback : requests.getCallbacks()) {
+            if (callback instanceof RequestBatch.OnProgressCallback) {
+                return true;
+            }
+        }
+
+        for (Request request : requests) {
+            if (request.getCallback() instanceof OnProgressCallback) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
     final static void serializeToUrlConnection(RequestBatch requests, HttpURLConnection connection)
     throws IOException, JSONException {
         Logger logger = new Logger(LoggingBehavior.REQUESTS, "Request");
@@ -1861,44 +1900,80 @@ final static void serializeToUrlConnection(RequestBatch requests, HttpURLConnect
 
         connection.setDoOutput(true);
 
-        BufferedOutputStream outputStream = new BufferedOutputStream(connection.getOutputStream());
+        OutputStream outputStream = null;
         try {
-            Serializer serializer = new Serializer(outputStream, logger);
+            if (hasOnProgressCallbacks(requests)) {
+                ProgressNoopOutputStream countingStream = null;
+                countingStream = new ProgressNoopOutputStream(requests.getCallbackHandler());
+                processRequest(requests, null, numRequests, url, countingStream);
 
-            if (numRequests == 1) {
-                Request request = requests.get(0);
+                int max = countingStream.getMaxProgress();
+                Map<Request, RequestProgress> progressMap = countingStream.getProgressMap();
 
+                BufferedOutputStream buffered = new BufferedOutputStream(connection.getOutputStream());
+                outputStream = new ProgressOutputStream(buffered, requests, progressMap, max);
+            }
+            else {
+                outputStream = new BufferedOutputStream(connection.getOutputStream());
+            }
+
+            processRequest(requests, logger, numRequests, url, outputStream);
+        }
+        finally {
+            outputStream.close();
+        }
+
+        logger.log();
+    }
+
+    private static void processRequest(RequestBatch requests, Logger logger, int numRequests, URL url, OutputStream outputStream)
+            throws IOException, JSONException
+    {
+        Serializer serializer = new Serializer(outputStream, logger);
+
+        if (numRequests == 1) {
+            Request request = requests.get(0);
+
+            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
+            for(String key : request.parameters.keySet()) {
+                Object value = request.parameters.get(key);
+                if (isSupportedAttachmentType(value)) {
+                    attachments.put(key, new Attachment(request, value));
+                }
+            }
+
+            if (logger != null) {
                 logger.append("  Parameters:\n");
-                serializeParameters(request.parameters, serializer);
+            }
+            serializeParameters(request.parameters, serializer, request);
 
+            if (logger != null) {
                 logger.append("  Attachments:\n");
-                serializeAttachments(request.parameters, serializer);
+            }
+            serializeAttachments(attachments, serializer);
 
-                if (request.graphObject != null) {
-                    processGraphObject(request.graphObject, url.getPath(), serializer);
-                }
-            } else {
-                String batchAppID = getBatchAppId(requests);
-                if (Utility.isNullOrEmpty(batchAppID)) {
-                    throw new FacebookException("At least one request in a batch must have an open Session, or a "
-                            + "default app ID must be specified.");
-                }
+            if (request.graphObject != null) {
+                processGraphObject(request.graphObject, url.getPath(), serializer);
+            }
+        } else {
+            String batchAppID = getBatchAppId(requests);
+            if (Utility.isNullOrEmpty(batchAppID)) {
+                throw new FacebookException("At least one request in a batch must have an open Session, or a "
+                        + "default app ID must be specified.");
+            }
 
-                serializer.writeString(BATCH_APP_ID_PARAM, batchAppID);
+            serializer.writeString(BATCH_APP_ID_PARAM, batchAppID);
 
-                // We write out all the requests as JSON, remembering which file attachments they have, then
-                // write out the attachments.
-                Bundle attachments = new Bundle();
-                serializeRequestsAsJSON(serializer, requests, attachments);
+            // We write out all the requests as JSON, remembering which file attachments they have, then
+            // write out the attachments.
+            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
+            serializeRequestsAsJSON(serializer, requests, attachments);
 
+            if (logger != null) {
                 logger.append("  Attachments:\n");
-                serializeAttachments(attachments, serializer);
             }
-        } finally {
-            outputStream.close();
+            serializeAttachments(attachments, serializer);
         }
-
-        logger.log();
     }
 
     private static void processGraphObject(GraphObject graphObject, String path, KeyValueSerializer serializer)
@@ -1977,37 +2052,36 @@ private static void processGraphObjectProperty(String key, Object value, KeyValu
         }
     }
 
-    private static void serializeParameters(Bundle bundle, Serializer serializer) throws IOException {
+    private static void serializeParameters(Bundle bundle, Serializer serializer, Request request) throws IOException {
         Set<String> keys = bundle.keySet();
 
         for (String key : keys) {
             Object value = bundle.get(key);
             if (isSupportedParameterType(value)) {
-                serializer.writeObject(key, value);
+                serializer.writeObject(key, value, request);
             }
         }
     }
 
-    private static void serializeAttachments(Bundle bundle, Serializer serializer) throws IOException {
-        Set<String> keys = bundle.keySet();
+    private static void serializeAttachments(Map<String, Attachment> attachments, Serializer serializer) throws IOException {
+        Set<String> keys = attachments.keySet();
 
         for (String key : keys) {
-            Object value = bundle.get(key);
-            if (isSupportedAttachmentType(value)) {
-                serializer.writeObject(key, value);
+            Attachment attachment = attachments.get(key);
+            if (isSupportedAttachmentType(attachment.getValue())) {
+                serializer.writeObject(key, attachment.getValue(), attachment.getRequest());
             }
         }
     }
 
-    private static void serializeRequestsAsJSON(Serializer serializer, Collection<Request> requests, Bundle attachments)
+    private static void serializeRequestsAsJSON(Serializer serializer, Collection<Request> requests, Map<String, Attachment> attachments)
             throws JSONException, IOException {
         JSONArray batch = new JSONArray();
         for (Request request : requests) {
             request.serializeToBatch(batch, attachments);
         }
 
-        String batchAsString = batch.toString();
-        serializer.writeString(BATCH_PARAM, batchAsString);
+        serializer.writeRequestsAsJson(BATCH_PARAM, batch, requests);
     }
 
     private static String getMimeContentType() {
@@ -2079,16 +2153,20 @@ private static String parameterToString(Object value) {
     }
 
     private static class Serializer implements KeyValueSerializer {
-        private final BufferedOutputStream outputStream;
+        private final OutputStream outputStream;
         private final Logger logger;
         private boolean firstWrite = true;
 
-        public Serializer(BufferedOutputStream outputStream, Logger logger) {
+        public Serializer(OutputStream outputStream, Logger logger) {
             this.outputStream = outputStream;
             this.logger = logger;
         }
 
-        public void writeObject(String key, Object value) throws IOException {
+        public void writeObject(String key, Object value, Request request) throws IOException {
+            if (outputStream instanceof RequestOutputStream) {
+                ((RequestOutputStream) outputStream).setCurrentRequest(request);
+            }
+
             if (isSupportedParameterType(value)) {
                 writeString(key, parameterToString(value));
             } else if (value instanceof Bitmap) {
@@ -2104,6 +2182,33 @@ public void writeObject(String key, Object value) throws IOException {
             }
         }
 
+        public void writeRequestsAsJson(String key, JSONArray requestJsonArray, Collection<Request> requests)
+                throws IOException, JSONException {
+            if (! (outputStream instanceof RequestOutputStream)) {
+                writeString(key, requestJsonArray.toString());
+                return;
+            }
+
+            RequestOutputStream requestOutputStream = (RequestOutputStream) outputStream;
+            writeContentDisposition(key, null, null);
+            write("[");
+            int i = 0;
+            for (Request request : requests) {
+                JSONObject requestJson = requestJsonArray.getJSONObject(i);
+                requestOutputStream.setCurrentRequest(request);
+                if (i > 0) {
+                    write(",%s", requestJson.toString());
+                } else {
+                    write("%s", requestJson.toString());
+                }
+                i++;
+            }
+            write("]");
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, requestJsonArray.toString());
+            }
+        }
+
         public void writeString(String key, String value) throws IOException {
             writeContentDisposition(key, null, null);
             writeLine("%s", value);
@@ -2119,7 +2224,9 @@ public void writeBitmap(String key, Bitmap bitmap) throws IOException {
             bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, "<Image>");
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, "<Image>");
+            }
         }
 
         public void writeBytes(String key, byte[] bytes) throws IOException {
@@ -2127,7 +2234,9 @@ public void writeBytes(String key, byte[] bytes) throws IOException {
             this.outputStream.write(bytes);
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", bytes.length));
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, String.format("<Data: %d>", bytes.length));
+            }
         }
 
         public void writeFile(String key, ParcelFileDescriptorWithMimeType descriptorWithMimeType) throws IOException {
@@ -2140,30 +2249,39 @@ public void writeFile(String key, ParcelFileDescriptor descriptor, String mimeTy
             }
             writeContentDisposition(key, key, mimeType);
 
-            ParcelFileDescriptor.AutoCloseInputStream inputStream = null;
-            BufferedInputStream bufferedInputStream = null;
             int totalBytes = 0;
-            try {
-                inputStream = new ParcelFileDescriptor.AutoCloseInputStream(descriptor);
-                bufferedInputStream = new BufferedInputStream(inputStream);
-
-                byte[] buffer = new byte[8192];
-                int bytesRead;
-                while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
-                    this.outputStream.write(buffer, 0, bytesRead);
-                    totalBytes += bytesRead;
-                }
-            } finally {
-                if (bufferedInputStream != null) {
-                    bufferedInputStream.close();
-                }
-                if (inputStream != null) {
-                    inputStream.close();
+
+            if (outputStream instanceof ProgressNoopOutputStream) {
+                // If we are only counting bytes then skip reading the file
+                ((ProgressNoopOutputStream) outputStream).addProgress(descriptor.getStatSize());
+            }
+            else {
+                ParcelFileDescriptor.AutoCloseInputStream inputStream = null;
+                BufferedInputStream bufferedInputStream = null;
+                try {
+                    inputStream = new ParcelFileDescriptor.AutoCloseInputStream(descriptor);
+                    bufferedInputStream = new BufferedInputStream(inputStream);
+
+                    byte[] buffer = new byte[8192];
+                    int bytesRead;
+                    while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
+                        this.outputStream.write(buffer, 0, bytesRead);
+                        totalBytes += bytesRead;
+                    }
+                } finally {
+                    if (bufferedInputStream != null) {
+                        bufferedInputStream.close();
+                    }
+                    if (inputStream != null) {
+                        inputStream.close();
+                    }
                 }
             }
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", totalBytes));
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, String.format("<Data: %d>", totalBytes));
+            }
         }
 
         public void writeRecordBoundary() throws IOException {
@@ -2214,6 +2332,23 @@ public void writeLine(String format, Object... args) throws IOException {
         void onCompleted(Response response);
     }
 
+    /**
+     * Specifies the interface that consumers of the Request class can implement in order to be notified when a
+     * progress is made on a particular request. The frequency of the callbacks can be controlled using
+     * {@link com.facebook.Settings#setOnProgressThreshold(long)}
+     */
+    public interface OnProgressCallback extends Callback {
+        /**
+         * The method that will be called when progress is made.
+         *
+         * @param current
+         *            the current value of the progress of the request.
+         * @param max
+         *            the maximum value (target) value that the progress will have.
+         */
+        void onProgress(long current, long max);
+    }
+
     /**
      * Specifies the interface that consumers of
      * {@link Request#executeMeRequestAsync(Session, com.facebook.Request.GraphUserCallback)}
diff --git a/facebook/src/com/facebook/RequestBatch.java b/facebook/src/com/facebook/RequestBatch.java
index 7183a2ddb..9ecd7be18 100644
--- a/facebook/src/com/facebook/RequestBatch.java
+++ b/facebook/src/com/facebook/RequestBatch.java
@@ -217,6 +217,22 @@ public final RequestAsyncTask executeAsync() {
         void onBatchCompleted(RequestBatch batch);
     }
 
+    /**
+     * Specifies the interface that consumers of the RequestBatch class can implement in order to be notified when the
+     * batch makes progress. The frequency of the callbacks can be controlled using
+     * {@link com.facebook.Settings#setOnProgressThreshold(long)}.
+     */
+    public interface OnProgressCallback extends Callback {
+        /**
+         * The method that will be called when a batch makes progress.
+         *
+         * @param batch     the RequestBatch containing the Requests which were executed
+         * @param current   the current value of the progress
+         * @param max       the max (target) value of the progress
+         */
+        void onBatchProgress(RequestBatch batch, long current, long max);
+    }
+
     List<Response> executeAndWaitImpl() {
         return Request.executeBatchAndWait(this);
     }
diff --git a/facebook/src/com/facebook/RequestOutputStream.java b/facebook/src/com/facebook/RequestOutputStream.java
new file mode 100644
index 000000000..323b7c73d
--- /dev/null
+++ b/facebook/src/com/facebook/RequestOutputStream.java
@@ -0,0 +1,21 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+interface RequestOutputStream {
+    void setCurrentRequest(Request r);
+}
diff --git a/facebook/src/com/facebook/RequestProgress.java b/facebook/src/com/facebook/RequestProgress.java
new file mode 100644
index 000000000..ef10361cf
--- /dev/null
+++ b/facebook/src/com/facebook/RequestProgress.java
@@ -0,0 +1,78 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+class RequestProgress {
+    private final Request request;
+    private final Handler callbackHandler;
+    private final long threshold;
+
+    private long progress, lastReportedProgress, maxProgress;
+
+    RequestProgress(Handler callbackHandler, Request request) {
+        this.request = request;
+        this.callbackHandler = callbackHandler;
+
+        this.threshold = Settings.getOnProgressThreshold();
+    }
+
+    long getProgress() {
+        return progress;
+    }
+
+    long getMaxProgress() {
+        return maxProgress;
+    }
+
+    void addProgress(long size) {
+        progress += size;
+
+        if (progress >= lastReportedProgress + threshold || progress >= maxProgress) {
+            reportProgress();
+        }
+    }
+
+    void addToMax(long size) {
+        maxProgress += size;
+    }
+
+    void reportProgress() {
+        if (progress > lastReportedProgress) {
+            Request.Callback callback = request.getCallback();
+            if (maxProgress > 0 && callback instanceof Request.OnProgressCallback) {
+                // Keep copies to avoid threading issues
+                final long currentCopy = progress;
+                final long maxProgressCopy = maxProgress;
+                final Request.OnProgressCallback callbackCopy = (Request.OnProgressCallback) callback;
+                if (callbackHandler == null) {
+                    callbackCopy.onProgress(currentCopy, maxProgressCopy);
+                }
+                else {
+                    callbackHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            callbackCopy.onProgress(currentCopy, maxProgressCopy);
+                        }
+                    });
+                }
+                lastReportedProgress = progress;
+            }
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 743a70f34..e5b106af4 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -1018,6 +1018,7 @@ private void requestNewPermissions(NewPermissionsRequest newPermissionsRequest,
             }
 
             newPermissionsRequest.setValidateSameFbidAsToken(getAccessToken());
+            addCallback(newPermissionsRequest.getCallback());
             authorize(newPermissionsRequest);
         }
     }
@@ -1289,12 +1290,12 @@ void postStateChange(final SessionState oldState, final SessionState newState, f
             this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
         }
 
-        synchronized (callbacks) {
-            // Need to schedule the callbacks inside the same queue to preserve ordering.
-            // Otherwise these callbacks could have been added to the queue before the SessionTracker
-            // gets the ACTIVE_SESSION_SET action.
-            Runnable runCallbacks = new Runnable() {
-                public void run() {
+        // Need to schedule the callbacks inside the same queue to preserve ordering.
+        // Otherwise these callbacks could have been added to the queue before the SessionTracker
+        // gets the ACTIVE_SESSION_SET action.
+        Runnable runCallbacks = new Runnable() {
+            public void run() {
+                synchronized (callbacks) {
                     for (final StatusCallback callback : callbacks) {
                         Runnable closure = new Runnable() {
                             public void run() {
@@ -1306,9 +1307,9 @@ public void run() {
                         runWithHandlerOrExecutor(handler, closure);
                     }
                 }
-            };
-            runWithHandlerOrExecutor(handler, runCallbacks);
-        }
+            }
+        };
+        runWithHandlerOrExecutor(handler, runCallbacks);
 
         if (this == Session.activeSession) {
             if (oldState.isOpened() != newState.isOpened()) {
@@ -2011,7 +2012,8 @@ public NewPermissionsRequest(Fragment fragment, String... permissions) {
         }
 
         /**
-         * Sets the StatusCallback for the NewPermissionsRequest.
+         * Sets the StatusCallback for the NewPermissionsRequest. Note that once the request is made, this callback
+         * will be added to the session, and will receive all future state changes on the session.
          *
          * @param statusCallback The {@link StatusCallback SessionStatusCallback} to
          *                       notify regarding Session state changes.
diff --git a/facebook/src/com/facebook/Settings.java b/facebook/src/com/facebook/Settings.java
index 734dfefac..a07e31639 100644
--- a/facebook/src/com/facebook/Settings.java
+++ b/facebook/src/com/facebook/Settings.java
@@ -26,6 +26,7 @@
 import android.os.Looper;
 import android.util.Log;
 import com.facebook.android.BuildConfig;
+import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Utility;
 import com.facebook.model.GraphObject;
 import com.facebook.internal.Validate;
@@ -36,6 +37,7 @@
 import java.util.*;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * Allows some customization of sdk behavior.
@@ -49,6 +51,7 @@
     private static volatile String appVersion;
     private static final String FACEBOOK_COM = "facebook.com";
     private static volatile String facebookDomain = FACEBOOK_COM;
+    private static AtomicLong onProgressThreshold = new AtomicLong(65536);
 
     private static final int DEFAULT_CORE_POOL_SIZE = 5;
     private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
@@ -63,9 +66,10 @@
     private static final String PUBLISH_ACTIVITY_PATH = "%s/activities";
     private static final String MOBILE_INSTALL_EVENT = "MOBILE_APP_INSTALL";
     private static final String ANALYTICS_EVENT = "event";
-    private static final String ATTRIBUTION_KEY = "attribution";
     private static final String AUTO_PUBLISH = "auto_publish";
 
+    private static final String APP_EVENT_PREFERENCES = "com.facebook.sdk.appEventPreferences";
+
     private static final BlockingQueue<Runnable> DEFAULT_WORK_QUEUE = new LinkedBlockingQueue<Runnable>(10);
 
     private static final ThreadFactory DEFAULT_THREAD_FACTORY = new ThreadFactory() {
@@ -341,7 +345,7 @@ static Response publishInstallAndWaitForResponse(
             if (context == null || applicationId == null) {
                 throw new IllegalArgumentException("Both context and applicationId must be non-null");
             }
-            String attributionId = Settings.getAttributionId(context.getContentResolver());
+            AttributionIdentifiers identifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
             SharedPreferences preferences = context.getSharedPreferences(ATTRIBUTION_PREFERENCES, Context.MODE_PRIVATE);
             String pingKey = applicationId+"ping";
             String jsonKey = applicationId+"json";
@@ -355,9 +359,12 @@ static Response publishInstallAndWaitForResponse(
 
             GraphObject publishParams = GraphObject.Factory.create();
             publishParams.setProperty(ANALYTICS_EVENT, MOBILE_INSTALL_EVENT);
-            publishParams.setProperty(ATTRIBUTION_KEY, attributionId);
+
+            Utility.setAppEventAttributionParameters(publishParams,
+                    identifiers,
+                    Utility.getHashedDeviceAndAppID(context, applicationId),
+                    getLimitEventAndDataUsage(context));
             publishParams.setProperty(AUTO_PUBLISH, isAutoPublish);
-            publishParams.setProperty("application_tracking_enabled", !AppEventsLogger.getLimitEventUsage(context));
             publishParams.setProperty("application_package_name", context.getPackageName());
 
             String publishUrl = String.format(PUBLISH_ACTIVITY_PATH, applicationId);
@@ -378,10 +385,9 @@ static Response publishInstallAndWaitForResponse(
                 } else {
                     return new Response(null, null, graphObject, true);
                 }
-            } else if (attributionId == null) {
-                throw new FacebookException("No attribution id returned from the Facebook application");
+            } else if (identifiers.getAndroidAdvertiserId() == null && identifiers.getAttributionId() == null) {
+                throw new FacebookException("No attribution id available to send to server.");
             } else {
-
                 if (!Utility.queryAppSettings(applicationId, false).supportsAttribution()) {
                     throw new FacebookException("Install attribution has been disabled on the server.");
                 }
@@ -467,4 +473,48 @@ public static String getSdkVersion() {
     public static String getMigrationBundle() {
         return FacebookSdkVersion.MIGRATION_BUNDLE;
     }
+
+    /**
+     * Gets whether data such as that generated through AppEventsLogger and sent to Facebook should be restricted from
+     * being used for purposes other than analytics and conversions, such as for targeting ads to this user.  Defaults
+     * to false.  This value is stored on the device and persists across app launches.
+     *
+     * @param context   Used to read the value.
+     */
+    public static boolean getLimitEventAndDataUsage(Context context) {
+        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
+        return preferences.getBoolean("limitEventUsage", false);
+    }
+
+    /**
+     * Sets whether data such as that generated through AppEventsLogger and sent to Facebook should be restricted from
+     * being used for purposes other than analytics and conversions, such as for targeting ads to this user.  Defaults
+     * to false.  This value is stored on the device and persists across app launches.  Changes to this setting will
+     * apply to app events currently queued to be flushed.
+     *
+     * @param context   Used to persist this value across app runs.
+     */
+    public static void setLimitEventAndDataUsage(Context context, boolean limitEventUsage) {
+        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("limitEventUsage", limitEventUsage);
+        editor.commit();
+    }
+
+    /**
+     * Gets the threshold used to report progress on requests.
+     */
+    public static long getOnProgressThreshold() {
+        return onProgressThreshold.get();
+    }
+
+    /**
+     * Sets the threshold used to report progress on requests. Note that the value will be read when the
+     * request is started and can not be changed during a request (or batch) execution.
+     *
+     * @param threshold The number of bytes progressed to force a callback.
+     */
+    public static void setOnProgressThreshold(long threshold) {
+        onProgressThreshold.set(threshold);
+    }
 }
diff --git a/facebook/src/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
new file mode 100644
index 000000000..1c8f63018
--- /dev/null
+++ b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
@@ -0,0 +1,144 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.util.Log;
+
+import java.lang.reflect.Method;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class AttributionIdentifiers {
+    private static final String TAG = AttributionIdentifiers.class.getCanonicalName();
+    private static final Uri ATTRIBUTION_ID_CONTENT_URI =
+            Uri.parse("content://com.facebook.katana.provider.AttributionIdProvider");
+    private static final String ATTRIBUTION_ID_COLUMN_NAME = "aid";
+    private static final String ANDROID_ID_COLUMN_NAME = "androidid";
+    private static final String LIMIT_TRACKING_COLUMN_NAME = "limit_tracking";
+
+    // com.google.android.gms.common.ConnectionResult.SUCCESS
+    private static final int CONNECTION_RESULT_SUCCESS = 0;
+
+    private static final long IDENTIFIER_REFRESH_INTERVAL_MILLIS = 3600 * 1000;
+
+    private String attributionId;
+    private String androidAdvertiserId;
+    private boolean limitTracking;
+    private long fetchTime;
+
+    private static AttributionIdentifiers recentlyFetchedIdentifiers;
+
+    private static AttributionIdentifiers getAndroidId(Context context) {
+        AttributionIdentifiers identifiers = new AttributionIdentifiers();
+        try {
+            Method isGooglePlayServicesAvailable = Utility.getMethodQuietly(
+                    "com.google.android.gms.common.GooglePlayServicesUtil",
+                    "isGooglePlayServicesAvailable",
+                    Context.class
+            );
+
+            if (isGooglePlayServicesAvailable == null) {
+                return identifiers;
+            }
+
+            Object connectionResult = Utility.invokeMethodQuietly(null, isGooglePlayServicesAvailable, context);
+            if (!(connectionResult instanceof Integer) || (Integer) connectionResult != CONNECTION_RESULT_SUCCESS) {
+                return identifiers;
+            }
+
+            Method getAdvertisingIdInfo = Utility.getMethodQuietly(
+                    "com.google.android.gms.ads.identifier.AdvertisingIdClient",
+                    "getAdvertisingIdInfo",
+                    Context.class
+            );
+            if (getAdvertisingIdInfo == null) {
+                return identifiers;
+            }
+            Object advertisingInfo = Utility.invokeMethodQuietly(null, getAdvertisingIdInfo, context);
+            if (advertisingInfo == null) {
+                return identifiers;
+            }
+
+            Method getId = Utility.getMethodQuietly(advertisingInfo.getClass(), "getId");
+            Method isLimitAdTrackingEnabled = Utility.getMethodQuietly(advertisingInfo.getClass(), "isLimitAdTrackingEnabled");
+            if (getId == null || isLimitAdTrackingEnabled == null) {
+                return identifiers;
+            }
+
+            identifiers.androidAdvertiserId = (String) Utility.invokeMethodQuietly(advertisingInfo, getId);
+            identifiers.limitTracking = (Boolean) Utility.invokeMethodQuietly(advertisingInfo, isLimitAdTrackingEnabled);
+        } catch (Exception e) {
+            Utility.logd("android_id", e);
+        }
+        return identifiers;
+    }
+
+    public static AttributionIdentifiers getAttributionIdentifiers(Context context) {
+        if (recentlyFetchedIdentifiers != null &&
+            System.currentTimeMillis() - recentlyFetchedIdentifiers.fetchTime < IDENTIFIER_REFRESH_INTERVAL_MILLIS) {
+            return recentlyFetchedIdentifiers;
+        }
+
+        AttributionIdentifiers identifiers = getAndroidId(context);
+
+        try {
+            String [] projection = {ATTRIBUTION_ID_COLUMN_NAME, ANDROID_ID_COLUMN_NAME, LIMIT_TRACKING_COLUMN_NAME};
+            Cursor c = context.getContentResolver().query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
+            if (c == null || !c.moveToFirst()) {
+                return null;
+            }
+            int attributionColumnIndex = c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME);
+            int androidIdColumnIndex = c.getColumnIndex(ANDROID_ID_COLUMN_NAME);
+            int limitTrackingColumnIndex = c.getColumnIndex(LIMIT_TRACKING_COLUMN_NAME);
+
+            identifiers.attributionId = c.getString(attributionColumnIndex);
+
+            // if we failed to call Google's APIs directly (due to improper integration by the client), it may be
+            // possible for the local facebook application to relay it to us.
+            if (androidIdColumnIndex > 0 && limitTrackingColumnIndex > 0 && identifiers.getAndroidAdvertiserId() == null) {
+                identifiers.androidAdvertiserId = c.getString(androidIdColumnIndex);
+                identifiers.limitTracking = Boolean.parseBoolean(c.getString(limitTrackingColumnIndex));
+            }
+            c.close();
+        } catch (Exception e) {
+            Log.d(TAG, "Caught unexpected exception in getAttributionId(): " + e.toString());
+            return null;
+        }
+
+        identifiers.fetchTime = System.currentTimeMillis();
+        recentlyFetchedIdentifiers = identifiers;
+        return identifiers;
+    }
+
+    public String getAttributionId() {
+        return attributionId;
+    }
+
+    public String getAndroidAdvertiserId() {
+        return androidAdvertiserId;
+    }
+
+    public boolean isTrackingLimited() {
+        return limitTracking;
+    }
+}
\ No newline at end of file
diff --git a/facebook/src/com/facebook/internal/FileLruCache.java b/facebook/src/com/facebook/internal/FileLruCache.java
index dba6a5e0e..0f23176b9 100644
--- a/facebook/src/com/facebook/internal/FileLruCache.java
+++ b/facebook/src/com/facebook/internal/FileLruCache.java
@@ -67,6 +67,7 @@
     private final Limits limits;
     private final File directory;
     private boolean isTrimPending;
+    private boolean isTrimInProgress;
     private final Object lock;
     private AtomicLong lastClearCacheTime = new AtomicLong(0);
 
@@ -91,7 +92,7 @@ public FileLruCache(Context context, String tag, Limits limits) {
     // Also, since trim() runs asynchronously now, this blocks until any pending trim has completed.
     long sizeInBytesForTest() {
         synchronized (lock) {
-            while (isTrimPending) {
+            while (isTrimPending || isTrimInProgress) {
                 try {
                     lock.wait();
                 } catch (InterruptedException e) {
@@ -277,6 +278,10 @@ public void run() {
     }
 
     private void trim() {
+        synchronized (lock) {
+            isTrimPending = false;
+            isTrimInProgress = true;
+        }
         try {
             Logger.log(LoggingBehavior.CACHE, TAG, "trim started");
             PriorityQueue<ModifiedFile> heap = new PriorityQueue<ModifiedFile>();
@@ -304,7 +309,7 @@ private void trim() {
             }
         } finally {
             synchronized (lock) {
-                isTrimPending = false;
+                isTrimInProgress = false;
                 lock.notifyAll();
             }
         }
diff --git a/facebook/src/com/facebook/internal/NativeProtocol.java b/facebook/src/com/facebook/internal/NativeProtocol.java
index f2a7f46a7..c322f4419 100644
--- a/facebook/src/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/com/facebook/internal/NativeProtocol.java
@@ -26,6 +26,7 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import com.facebook.*;
+import com.facebook.android.BuildConfig;
 
 import java.util.*;
 
@@ -35,117 +36,17 @@
  * any time.
  */
 public final class NativeProtocol {
-    static final String FACEBOOK_PACKAGE = "com.facebook.katana";
-    static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
-    static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService";
-    static final String KATANA_SIGNATURE =
-            "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
-                    + "b3009060355040613025553310b30090603550408130243413112301006035504"
-                    + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
-                    + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
-                    + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
-                    + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
-                    + "55040613025553310b30090603550408130243413112301006035504071309506"
-                    + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
-                    + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
-                    + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
-                    + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
-                    + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
-                    + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
-                    + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
-                    + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
-                    + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
-                    + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
-                    + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
-                    + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
-                    + "928a2";
+
+    public static final int NO_PROTOCOL_AVAILABLE = -1;
+
+    private static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
+    private static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService";
+
     private static final String BASIC_INFO = "basic_info";
     public static final String FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY = "scope";
     public static final String FACEBOOK_PROXY_AUTH_APP_ID_KEY = "client_id";
     public static final String FACEBOOK_PROXY_AUTH_E2E_KEY = "e2e";
 
-    static final boolean validateSignature(Context context, String packageName) {
-        String brand = Build.BRAND;
-        int applicationFlags = context.getApplicationInfo().flags;
-        if (brand.startsWith("generic") && (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
-            // We are debugging on an emulator, don't validate package signature.
-            return true;
-        }
-
-        PackageInfo packageInfo = null;
-        try {
-            packageInfo = context.getPackageManager().getPackageInfo(packageName,
-                    PackageManager.GET_SIGNATURES);
-        } catch (PackageManager.NameNotFoundException e) {
-            return false;
-        }
-
-        for (Signature signature : packageInfo.signatures) {
-            if (signature.toCharsString().equals(KATANA_SIGNATURE)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    static Intent validateKatanaActivityIntent(Context context, Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!validateSignature(context, resolveInfo.activityInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    static Intent validateKatanaServiceIntent(Context context, Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveService(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!validateSignature(context, resolveInfo.serviceInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    public static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions,
-            String e2e) {
-        Intent intent = new Intent()
-                .setClassName(FACEBOOK_PACKAGE, FACEBOOK_PROXY_AUTH_ACTIVITY)
-                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
-
-        if (!Utility.isNullOrEmpty(permissions)) {
-            intent.putExtra(FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-        }
-        if (!Utility.isNullOrEmpty(e2e)) {
-            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
-        }
-
-        return validateKatanaActivityIntent(context, intent);
-    }
-
-    public static Intent createTokenRefreshIntent(Context context) {
-        Intent intent = new Intent()
-                .setClassName(FACEBOOK_PACKAGE, FACEBOOK_TOKEN_REFRESH_ACTIVITY);
-
-        return validateKatanaServiceIntent(context, intent);
-    }
-
     // ---------------------------------------------------------------------------------------------
     // Native Protocol updated 2012-11
 
@@ -155,6 +56,9 @@ public static Intent createTokenRefreshIntent(Context context) {
     public static final int PROTOCOL_VERSION_20121101 = 20121101;
     public static final int PROTOCOL_VERSION_20130502 = 20130502;
     public static final int PROTOCOL_VERSION_20130618 = 20130618;
+    public static final int PROTOCOL_VERSION_20131107 = 20131107;
+    public static final int PROTOCOL_VERSION_20140204 = 20140204;
+
     public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION";
     public static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION";
     public static final String EXTRA_PROTOCOL_CALL_ID = "com.facebook.platform.protocol.CALL_ID";
@@ -218,6 +122,7 @@ public static Intent createTokenRefreshIntent(Context context) {
     public static final String EXTRA_DESCRIPTION = "com.facebook.platform.extra.DESCRIPTION";
     public static final String EXTRA_REF = "com.facebook.platform.extra.REF";
     public static final String EXTRA_DATA_FAILURES_FATAL = "com.facebook.platform.extra.DATA_FAILURES_FATAL";
+    public static final String EXTRA_PHOTOS = "com.facebook.platform.extra.PHOTOS";
 
     // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
     public static final String EXTRA_ACTION = "com.facebook.platform.extra.ACTION";
@@ -257,52 +162,255 @@ public static Intent createTokenRefreshIntent(Context context) {
     // Request codes for different categories of native protocol calls.
     public static final int DIALOG_REQUEST_CODE = 0xfacf;
 
-    // URIs for PlatformProvider
-    public static final String CONTENT_SCHEME = "content://";
-    public static final String PLATFORM_PROVIDER = FACEBOOK_PACKAGE + ".provider.PlatformProvider";
-    public static final Uri PLATFORM_PROVIDER_VERSIONS_URI =
-            Uri.parse(CONTENT_SCHEME + PLATFORM_PROVIDER + "/versions");
+    private static final String CONTENT_SCHEME = "content://";
+    private static final String PLATFORM_PROVIDER_VERSIONS = ".provider.PlatformProvider/versions";
 
     // Columns returned by PlatformProvider
-    public static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
+    private static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
+
+    // Broadcast action for asynchronously-executing AppCalls
+    private static final String PLATFORM_ASYNC_APPCALL_ACTION = "com.facebook.platform.AppCallResultBroadcast";
+
+    private static abstract class NativeAppInfo {
+        abstract protected String getPackage();
+        abstract protected String getSignature();
+
+        public boolean validateSignature(Context context, String packageName) {
+            String brand = Build.BRAND;
+            int applicationFlags = context.getApplicationInfo().flags;
+            if (brand.startsWith("generic") && (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
+                // We are debugging on an emulator, don't validate package signature.
+                return true;
+            }
+
+            PackageInfo packageInfo = null;
+            try {
+                packageInfo = context.getPackageManager().getPackageInfo(packageName,
+                        PackageManager.GET_SIGNATURES);
+            } catch (PackageManager.NameNotFoundException e) {
+                return false;
+            }
+
+            for (Signature signature : packageInfo.signatures) {
+                if (signature.toCharsString().equals(this.getSignature())) {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+
+    }
+
+    private static class KatanaAppInfo extends NativeAppInfo {
+        static final String KATANA_PACKAGE = "com.facebook.katana";
+        static final String KATANA_SIGNATURE =
+                "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
+                        + "b3009060355040613025553310b30090603550408130243413112301006035504"
+                        + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
+                        + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
+                        + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
+                        + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
+                        + "55040613025553310b30090603550408130243413112301006035504071309506"
+                        + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
+                        + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
+                        + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
+                        + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
+                        + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
+                        + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
+                        + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
+                        + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
+                        + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
+                        + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
+                        + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
+                        + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
+                        + "928a2";
+        @Override
+        protected String getSignature() {
+            return KATANA_SIGNATURE;
+        }
+        @Override
+        protected String getPackage() {
+            return KATANA_PACKAGE;
+        }
+    }
+
+    private static class WakizashiAppInfo extends NativeAppInfo {
+        static final String WAKIZASHI_PACKAGE = "com.facebook.wakizashi";
+
+        @Override
+        public boolean validateSignature(Context context, String packageName) {
+            return true;
+        }
+
+        @Override
+        protected String getSignature() {
+            return null;
+        }
+
+        @Override
+        protected String getPackage() {
+            return WAKIZASHI_PACKAGE;
+        }
+    }
+
+    private static final NativeAppInfo FACEBOOK_APP_INFO = new KatanaAppInfo();
+    private static List<NativeAppInfo> facebookAppInfoList = buildFacebookAppList();
+    private static Map<String, List<NativeAppInfo>> actionToAppInfoMap = buildActionToAppInfoMap();
+
+    private static List<NativeAppInfo> buildFacebookAppList() {
+        List<NativeAppInfo> list = new ArrayList<NativeAppInfo>();
+
+        // Katana needs to be the first thing in the list since it will get selected as the default FACEBOOK_APP_INFO
+        list.add(FACEBOOK_APP_INFO);
+
+        if(BuildConfig.DEBUG) {
+            list.add(new WakizashiAppInfo());
+        }
+
+        return list;
+    }
+
+    private static Map<String, List<NativeAppInfo>> buildActionToAppInfoMap() {
+        Map<String, List<NativeAppInfo>> map = new HashMap<String, List<NativeAppInfo>>();
+
+        // Add individual actions and the list they should try
+        map.put(ACTION_OGACTIONPUBLISH_DIALOG, facebookAppInfoList);
+        map.put(ACTION_FEED_DIALOG, facebookAppInfoList);
+        map.put(ACTION_LOGIN_DIALOG, facebookAppInfoList);
+
+        return map;
+    }
+
+    static Intent validateActivityIntent(Context context, Intent intent, NativeAppInfo appInfo) {
+        if (intent == null) {
+            return null;
+        }
+
+        ResolveInfo resolveInfo = context.getPackageManager().resolveActivity(intent, 0);
+        if (resolveInfo == null) {
+            return null;
+        }
+
+        if (!appInfo.validateSignature(context, resolveInfo.activityInfo.packageName)) {
+            return null;
+        }
+
+        return intent;
+    }
+
+    static Intent validateServiceIntent(Context context, Intent intent, NativeAppInfo appInfo) {
+        if (intent == null) {
+            return null;
+        }
+
+        ResolveInfo resolveInfo = context.getPackageManager().resolveService(intent, 0);
+        if (resolveInfo == null) {
+            return null;
+        }
+
+        if (!appInfo.validateSignature(context, resolveInfo.serviceInfo.packageName)) {
+            return null;
+        }
+
+        return intent;
+    }
+
+    public static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions,
+            String e2e) {
+        Intent intent = new Intent()
+                .setClassName(FACEBOOK_APP_INFO.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
+                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+
+        if (!Utility.isNullOrEmpty(permissions)) {
+            intent.putExtra(FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
+        }
+        if (!Utility.isNullOrEmpty(e2e)) {
+            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
+        }
+
+        return validateActivityIntent(context, intent, FACEBOOK_APP_INFO);
+    }
+
+    public static Intent createTokenRefreshIntent(Context context) {
+        Intent intent = new Intent()
+                .setClassName(FACEBOOK_APP_INFO.getPackage(), FACEBOOK_TOKEN_REFRESH_ACTIVITY);
+
+        return validateServiceIntent(context, intent, FACEBOOK_APP_INFO);
+    }
 
     // Note: be sure this stays sorted in descending order; add new versions at the beginning
     private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
-            Arrays.asList(PROTOCOL_VERSION_20130618,
+            Arrays.asList(
+                    PROTOCOL_VERSION_20140204,
+                    PROTOCOL_VERSION_20131107,
+                    PROTOCOL_VERSION_20130618,
                     PROTOCOL_VERSION_20130502,
-                    PROTOCOL_VERSION_20121101);
+                    PROTOCOL_VERSION_20121101
+            );
+
+    private static Intent findActivityIntent(Context context, String activityAction, String internalAction) {
+        List<NativeAppInfo> list = actionToAppInfoMap.get(internalAction);
+        if (list == null) {
+            return null;
+        }
+
+        Intent intent = null;
+        for (NativeAppInfo appInfo : list) {
+            intent = new Intent()
+                    .setAction(activityAction)
+                    .setPackage(appInfo.getPackage())
+                    .addCategory(Intent.CATEGORY_DEFAULT);
+            intent = validateActivityIntent(context, intent, appInfo);
+            if (intent != null) {
+                return intent;
+            }
+        }
+
+        return intent;
+    }
 
     public static Intent createPlatformActivityIntent(Context context, String action, int version, Bundle extras) {
-        Intent intent = new Intent()
-                .setAction(INTENT_ACTION_PLATFORM_ACTIVITY)
-                .setPackage(FACEBOOK_PACKAGE)
-                .addCategory(Intent.CATEGORY_DEFAULT)
-                .putExtras(extras)
+        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, action);
+        if (intent == null) {
+            return null;
+        }
+
+        intent.putExtras(extras)
                 .putExtra(EXTRA_PROTOCOL_VERSION, version)
                 .putExtra(EXTRA_PROTOCOL_ACTION, action);
-        return validateKatanaActivityIntent(context, intent);
+
+        return intent;
     }
 
     public static Intent createPlatformServiceIntent(Context context) {
-        Intent intent = new Intent(INTENT_ACTION_PLATFORM_SERVICE)
-                .setPackage(FACEBOOK_PACKAGE)
-                .addCategory(Intent.CATEGORY_DEFAULT);
-        return validateKatanaServiceIntent(context, intent);
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = new Intent(INTENT_ACTION_PLATFORM_SERVICE)
+                    .setPackage(appInfo.getPackage())
+                    .addCategory(Intent.CATEGORY_DEFAULT);
+            intent = validateServiceIntent(context, intent, appInfo);
+            if (intent != null) {
+                return intent;
+            }
+        }
+        return null;
     }
 
     public static Intent createLoginDialog20121101Intent(Context context, String applicationId, ArrayList<String> permissions,
             String audience) {
-        Intent intent = new Intent()
-                    .setAction(INTENT_ACTION_PLATFORM_ACTIVITY)
-                    .setPackage(FACEBOOK_PACKAGE)
-                    .addCategory(Intent.CATEGORY_DEFAULT)
-                    .putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20121101)
-                    .putExtra(EXTRA_PROTOCOL_ACTION, ACTION_LOGIN_DIALOG)
-                    .putExtra(EXTRA_APPLICATION_ID, applicationId)
-                    .putStringArrayListExtra(EXTRA_PERMISSIONS, ensureDefaultPermissions(permissions))
-                    .putExtra(EXTRA_PROTOCOL_CALL_ID, generateCallId())
-                    .putExtra(EXTRA_WRITE_PRIVACY, ensureDefaultAudience(audience));
-        return validateKatanaActivityIntent(context, intent);
+        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, ACTION_LOGIN_DIALOG);
+        if (intent == null) {
+            return null;
+        }
+
+        intent.putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20121101)
+              .putExtra(EXTRA_PROTOCOL_ACTION, ACTION_LOGIN_DIALOG)
+              .putExtra(EXTRA_APPLICATION_ID, applicationId)
+              .putStringArrayListExtra(EXTRA_PERMISSIONS, ensureDefaultPermissions(permissions))
+              .putExtra(EXTRA_PROTOCOL_CALL_ID, generateCallId())
+              .putExtra(EXTRA_WRITE_PRIVACY, ensureDefaultAudience(audience));
+
+        return intent;
     }
 
     public static boolean isErrorResult(Intent resultIntent) {
@@ -362,13 +470,40 @@ public static boolean isServiceDisabledResult20121101(Intent data) {
         return ((PROTOCOL_VERSION_20121101 == protocolVersion) && ERROR_SERVICE_DISABLED.equals(errorType));
     }
 
-    public static final int NO_PROTOCOL_AVAILABLE = -1;
+    public static int getLatestAvailableProtocolVersionForService(Context context, final int minimumVersion) {
+        // Services are currently always against the Facebook App
+        return getLatestAvailableProtocolVersionForAppInfoList(context, facebookAppInfoList, minimumVersion);
+    }
+
+    public static int getLatestAvailableProtocolVersionForAction(Context context, String action, final int minimumVersion) {
+        List<NativeAppInfo> appInfoList = actionToAppInfoMap.get(action);
+        return getLatestAvailableProtocolVersionForAppInfoList(context, appInfoList, minimumVersion);
+    }
+
+    private static int getLatestAvailableProtocolVersionForAppInfoList(Context context, List<NativeAppInfo> appInfoList,
+            final int minimumVersion) {
+        if (appInfoList == null) {
+            return NO_PROTOCOL_AVAILABLE;
+        }
+
+        // Could potentially cache the NativeAppInfo to latestProtocolVersion
+        for (NativeAppInfo appInfo : appInfoList) {
+            int protocolVersion = getLatestAvailableProtocolVersionForAppInfo(context, appInfo, minimumVersion);
+            if (protocolVersion != NO_PROTOCOL_AVAILABLE) {
+                return protocolVersion;
+            }
+        }
+
+        return NO_PROTOCOL_AVAILABLE;
+    }
 
-    public static int getLatestAvailableProtocolVersion(Context context, final int minimumVersion) {
+    private static int getLatestAvailableProtocolVersionForAppInfo(Context context, NativeAppInfo appInfo,
+            final int minimumVersion) {
         ContentResolver contentResolver = context.getContentResolver();
 
         String [] projection = new String[]{ PLATFORM_PROVIDER_VERSION_COLUMN };
-        Cursor c = contentResolver.query(PLATFORM_PROVIDER_VERSIONS_URI, projection, null, null, null);
+        Uri uri = buildPlatformProviderVersionURI(appInfo);
+        Cursor c = contentResolver.query(uri, projection, null, null, null);
         if (c == null) {
             return NO_PROTOCOL_AVAILABLE;
         }
@@ -391,4 +526,8 @@ public static int getLatestAvailableProtocolVersion(Context context, final int m
 
         return NO_PROTOCOL_AVAILABLE;
     }
+
+    private static Uri buildPlatformProviderVersionURI(NativeAppInfo appInfo) {
+        return Uri.parse(CONTENT_SCHEME + appInfo.getPackage() + PLATFORM_PROVIDER_VERSIONS);
+    }
 }
diff --git a/facebook/src/com/facebook/internal/PlatformServiceClient.java b/facebook/src/com/facebook/internal/PlatformServiceClient.java
index fc72d6e26..16d619c3b 100644
--- a/facebook/src/com/facebook/internal/PlatformServiceClient.java
+++ b/facebook/src/com/facebook/internal/PlatformServiceClient.java
@@ -70,7 +70,7 @@ public boolean start() {
         }
 
         // Make sure that the service can handle the requested protocol version
-        int availableVersion = NativeProtocol.getLatestAvailableProtocolVersion(context, protocolVersion);
+        int availableVersion = NativeProtocol.getLatestAvailableProtocolVersionForService(context, protocolVersion);
         if (availableVersion == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
             return false;
         }
diff --git a/facebook/src/com/facebook/internal/ServerProtocol.java b/facebook/src/com/facebook/internal/ServerProtocol.java
index 7dd2a99b6..6f3dd7d49 100644
--- a/facebook/src/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/com/facebook/internal/ServerProtocol.java
@@ -39,6 +39,7 @@
     public static final String DIALOG_PARAM_E2E = "e2e";
 
     // URL components
+    private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
     private static final String REST_URL_FORMAT = "https://api.%s/method";
     public static final String BATCHED_REST_METHOD_URL_BASE = "method/";
@@ -56,6 +57,10 @@ public static final String getGraphUrlBase() {
         return String.format(GRAPH_URL_FORMAT, Settings.getFacebookDomain());
     }
 
+    public static final String getGraphVideoUrlBase() {
+        return String.format(GRAPH_VIDEO_URL_FORMAT, Settings.getFacebookDomain());
+    }
+
     public static final String getRestUrlBase() {
         return String.format(REST_URL_FORMAT, Settings.getFacebookDomain());
     }
diff --git a/facebook/src/com/facebook/internal/Utility.java b/facebook/src/com/facebook/internal/Utility.java
index 0bebf6ed9..3704d2fcb 100644
--- a/facebook/src/com/facebook/internal/Utility.java
+++ b/facebook/src/com/facebook/internal/Utility.java
@@ -22,6 +22,7 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.provider.Settings.Secure;
 import android.text.TextUtils;
 import android.util.Log;
 import android.webkit.CookieManager;
@@ -35,6 +36,8 @@
 import org.json.JSONTokener;
 
 import java.io.*;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
 import java.security.MessageDigest;
@@ -50,6 +53,7 @@
 public final class Utility {
     static final String LOG_TAG = "FacebookSDK";
     private static final String HASH_ALGORITHM_MD5 = "MD5";
+    private static final String HASH_ALGORITHM_SHA1 = "SHA-1";
     private static final String URL_SCHEME = "https";
     private static final String SUPPORTS_ATTRIBUTION = "supports_attribution";
     private static final String SUPPORTS_IMPLICIT_SDK_LOGGING = "supports_implicit_sdk_logging";
@@ -121,9 +125,17 @@ public static boolean isNullOrEmpty(String s) {
     }
 
     static String md5hash(String key) {
+        return hashWithAlgorithm(HASH_ALGORITHM_MD5, key);
+    }
+
+    private static String sha1hash(String key) {
+        return hashWithAlgorithm(HASH_ALGORITHM_SHA1, key);
+    }
+
+    private static String hashWithAlgorithm(String algorithm, String key) {
         MessageDigest hash = null;
         try {
-            hash = MessageDigest.getInstance(HASH_ALGORITHM_MD5);
+            hash = MessageDigest.getInstance(algorithm);
         } catch (NoSuchAlgorithmException e) {
             return null;
         }
@@ -393,4 +405,62 @@ public static void deleteDirectory(File directoryOrFile) {
         }
         return result;
     }
+
+    // Return a hash of the android_id combined with the appid.  Intended to dedupe requests on the server side
+    // in order to do counting of users unknown to Facebook.  Because we put the appid into the key prior to hashing,
+    // we cannot do correlation of the same user across multiple apps -- this is intentional.  When we transition to
+    // the Google advertising ID, we'll get rid of this and always send that up.
+    public static String getHashedDeviceAndAppID(Context context, String applicationId) {
+        String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);
+
+        if (androidId == null) {
+            return null;
+        } else {
+            return sha1hash(androidId + applicationId);
+        }
+    }
+
+    public static void setAppEventAttributionParameters(GraphObject params,
+            AttributionIdentifiers attributionIdentifiers, String hashedDeviceAndAppId, boolean limitEventUsage) {
+        // Send attributionID if it exists, otherwise send a hashed device+appid specific value as the advertiser_id.
+        if (attributionIdentifiers.getAttributionId() != null) {
+            params.setProperty("attribution", attributionIdentifiers.getAttributionId());
+        }
+
+        if (attributionIdentifiers.getAndroidAdvertiserId() != null) {
+            params.setProperty("advertiser_id", attributionIdentifiers.getAndroidAdvertiserId());
+            params.setProperty("advertiser_tracking_enabled", !attributionIdentifiers.isTrackingLimited());
+        } else if (hashedDeviceAndAppId != null) {
+            params.setProperty("advertiser_id", hashedDeviceAndAppId);
+        }
+
+        params.setProperty("application_tracking_enabled", !limitEventUsage);
+    }
+
+    public static Method getMethodQuietly(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
+        try {
+            return clazz.getMethod(methodName, parameterTypes);
+        } catch (NoSuchMethodException ex) {
+            return null;
+        }
+    }
+
+    public static Method getMethodQuietly(String className, String methodName, Class<?>... parameterTypes) {
+        try {
+            Class<?> clazz = Class.forName(className);
+            return getMethodQuietly(clazz, methodName, parameterTypes);
+        } catch (ClassNotFoundException ex) {
+            return null;
+        }
+    }
+
+    public static Object invokeMethodQuietly(Object receiver, Method method, Object... args) {
+        try {
+            return method.invoke(receiver, args);
+        } catch (IllegalAccessException ex) {
+            return null;
+        } catch (InvocationTargetException ex) {
+            return null;
+        }
+    }
 }
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
index 058a9f145..cb5c8a56a 100644
--- a/facebook/src/com/facebook/widget/FacebookDialog.java
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -50,8 +50,6 @@
             "com.facebook.platform.extra.COMPLETION_GESTURE";
     private static final String EXTRA_DIALOG_COMPLETION_ID_KEY = "com.facebook.platform.extra.POST_ID";
 
-    private static final int MIN_NATIVE_SHARE_PROTOCOL_VERSION = NativeProtocol.PROTOCOL_VERSION_20130618;
-
     private static NativeAppCallAttachmentStore attachmentStore;
 
     /**
@@ -63,8 +61,8 @@
          * Called when the user completes interacting with a Facebook dialog.
          *
          * @param pendingCall a PendingCall containing the call ID and original Intent used to launch the dialog
-         * @param data  a Bundle containing the results of the dialog, whose contents will vary depending on the
-         *              type of dialog being displayed.
+         * @param data        a Bundle containing the results of the dialog, whose contents will vary depending on the
+         *                    type of dialog being displayed.
          */
         void onComplete(PendingCall pendingCall, Bundle data);
 
@@ -72,13 +70,14 @@
          * Called if an error occurred while presenting a Facebook dialog.
          *
          * @param pendingCall a PendingCall containing the call ID and original Intent used to launch the dialog
-         * @param error the error that occurred
-         * @param data the full set of extras associated with the activity result
+         * @param error       the error that occurred
+         * @param data        the full set of extras associated with the activity result
          */
         void onError(PendingCall pendingCall, Exception error, Bundle data);
     }
 
     private interface DialogFeature {
+        String getAction();
         int getMinVersion();
     }
 
@@ -96,7 +95,12 @@
          * Indicates whether the native Share dialog itself is supported by the installed version of the
          * Facebook application.
          */
-        SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618);
+        SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618),
+        /**
+         * Indicates whether the native Share dialog supports sharing of photo images.
+         */
+        PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140204),
+        ;
 
         private int minVersion;
 
@@ -104,6 +108,13 @@ private ShareDialogFeature(int minVersion) {
             this.minVersion = minVersion;
         }
 
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_FEED_DIALOG;
+        }
+
         /**
          * This method is for internal use only.
          */
@@ -113,7 +124,7 @@ public int getMinVersion() {
     }
 
     /**
-     * Defines a set of features that may be supported by the native Open Graph action dialog exposed by the Facebook
+     * Defines a set of features that may be supported by the native Open Graph dialogs exposed by the Facebook
      * application. As additional features are added, these flags may be passed to
      * {@link FacebookDialog#canPresentOpenGraphActionDialog(android.content.Context,
      * com.facebook.widget.FacebookDialog.OpenGraphActionDialogFeature...)}
@@ -134,6 +145,13 @@ private OpenGraphActionDialogFeature(int minVersion) {
             this.minVersion = minVersion;
         }
 
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG;
+        }
+
         /**
          * This method is for internal use only.
          */
@@ -183,7 +201,8 @@ public static String getNativeDialogPostId(Bundle result) {
     private PendingCall appCall;
     private OnPresentCallback onPresentCallback;
 
-    private FacebookDialog(Activity activity, Fragment fragment, PendingCall appCall, OnPresentCallback onPresentCallback) {
+    private FacebookDialog(Activity activity, Fragment fragment, PendingCall appCall,
+            OnPresentCallback onPresentCallback) {
         this.activity = activity;
         this.fragment = fragment;
         this.appCall = appCall;
@@ -218,12 +237,11 @@ public PendingCall present() {
     /**
      * Parses the results of a dialog activity and calls the appropriate method on the provided Callback.
      *
-     * @param context the Context that is handling the activity result
-     * @param appCall an PendingCall containing the call ID and original Intent used to launch the dialog
+     * @param context     the Context that is handling the activity result
+     * @param appCall     an PendingCall containing the call ID and original Intent used to launch the dialog
      * @param requestCode the request code for the activity result
-     * @param data the result Intent
-     * @param callback a callback to call after parsing the results
-     *
+     * @param data        the result Intent
+     * @param callback    a callback to call after parsing the results
      * @return true if the activity result was handled, false if not
      */
     public static boolean handleActivityResult(Context context, PendingCall appCall, int requestCode, Intent data,
@@ -253,11 +271,11 @@ public static boolean handleActivityResult(Context context, PendingCall appCall,
      * enough to support specific features of the native Share dialog, which in turn may be used to determine
      * which UI, etc., to present to the user.
      *
-     * @param context the calling Context
+     * @param context  the calling Context
      * @param features zero or more features to check for; {@link ShareDialogFeature#SHARE_DIALOG} is implicitly checked
      *                 if not explicitly specified
      * @return true if all of the specified features are supported by the currently installed version of the
-     * Facebook application; false if any of the features are not supported
+     *         Facebook application; false if any of the features are not supported
      */
     public static boolean canPresentShareDialog(Context context, ShareDialogFeature... features) {
         return handleCanPresent(context, EnumSet.of(ShareDialogFeature.SHARE_DIALOG, features));
@@ -268,23 +286,23 @@ public static boolean canPresentShareDialog(Context context, ShareDialogFeature.
      * enough to support specific features of the native Open Graph action dialog, which in turn may be used to
      * determine which UI, etc., to present to the user.
      *
-     * @param context the calling Context
+     * @param context  the calling Context
      * @param features zero or more features to check for; {@link OpenGraphActionDialogFeature#OG_ACTION_DIALOG} is implicitly
      *                 checked if not explicitly specified
      * @return true if all of the specified features are supported by the currently installed version of the
-     * Facebook application; false if any of the features are not supported
+     *         Facebook application; false if any of the features are not supported
      */
     public static boolean canPresentOpenGraphActionDialog(Context context, OpenGraphActionDialogFeature... features) {
         return handleCanPresent(context, EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG, features));
     }
 
     private static boolean handleCanPresent(Context context, Iterable<? extends DialogFeature> features) {
-        return getProtocolVersionForNativeDialog(context, getMinVersionForFeatures(features))
+        return getProtocolVersionForNativeDialog(context, getActionForFeatures(features), getMinVersionForFeatures(features))
                 != NativeProtocol.NO_PROTOCOL_AVAILABLE;
     }
 
-    private static int getProtocolVersionForNativeDialog(Context context, Integer requiredVersion) {
-        return NativeProtocol.getLatestAvailableProtocolVersion(context, requiredVersion);
+    private static int getProtocolVersionForNativeDialog(Context context, String action, int requiredVersion) {
+        return NativeProtocol.getLatestAvailableProtocolVersionForAction(context, action, requiredVersion);
     }
 
     private static NativeAppCallAttachmentStore getAttachmentStore() {
@@ -293,6 +311,7 @@ private static NativeAppCallAttachmentStore getAttachmentStore() {
         }
         return attachmentStore;
     }
+
     private static int getMinVersionForFeatures(Iterable<? extends DialogFeature> features) {
         int minVersion = Integer.MIN_VALUE;
         for (DialogFeature feature : features) {
@@ -302,12 +321,25 @@ private static int getMinVersionForFeatures(Iterable<? extends DialogFeature> fe
         return minVersion;
     }
 
-    private abstract static class Builder<CONCRETE extends Builder<?>> {
+    private static String getActionForFeatures(Iterable<? extends DialogFeature> features) {
+        String action = null;
+        for (DialogFeature feature : features) {
+            // All actions in a set of DialogFeatures should have the same action
+            // So we can break after assigning the first one
+            action = feature.getAction();
+            break;
+        }
+        return action;
+    }
+
+    abstract static class Builder<CONCRETE extends Builder<?>> {
         final protected Activity activity;
         final protected String applicationId;
         final protected PendingCall appCall;
         protected Fragment fragment;
         protected String applicationName;
+        protected HashMap<String, Bitmap> imageAttachments = new HashMap<String, Bitmap>();
+        protected HashMap<String, File> imageAttachmentFiles = new HashMap<String, File>();
 
         Builder(Activity activity) {
             Validate.notNull(activity, "activity");
@@ -320,6 +352,7 @@ private static int getMinVersionForFeatures(Iterable<? extends DialogFeature> fe
         /**
          * Sets the request code that will be passed to handleActivityResult when this activity completes; the
          * default is NativeProtocol.DIALOG_REQUEST_CODE.
+         *
          * @param requestCode the request code
          * @return this instance of the builder
          */
@@ -333,6 +366,7 @@ public CONCRETE setRequestCode(int requestCode) {
         /**
          * Sets the name of the application to be displayed in the dialog. If provided, this optimizes the user
          * experience as a preview of a shared item, etc., can be displayed sooner.
+         *
          * @param applicationName the name of the Facebook application
          * @return this instance of the builder
          */
@@ -361,6 +395,7 @@ public CONCRETE setFragment(Fragment fragment) {
         /**
          * Constructs a FacebookDialog with an Intent that is correctly populated to present the dialog within
          * the Facebook application.
+         *
          * @return a FacebookDialog instance
          */
         public FacebookDialog build() {
@@ -369,10 +404,16 @@ public FacebookDialog build() {
             Bundle extras = new Bundle();
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            extras = setBundleExtras(extras);
+
+            String action = getActionForFeatures(getDialogFeatures());
+            int protocolVersion = getProtocolVersionForNativeDialog(activity, action,
+                    getMinVersionForFeatures(getDialogFeatures()));
 
-            Intent intent = handleBuild(extras);
+            Intent intent = NativeProtocol.createPlatformActivityIntent(activity, action, protocolVersion, extras);
             if (intent == null) {
-                throw new FacebookException("Unable to create Intent; this likely means the Facebook app is not installed.");
+                throw new FacebookException(
+                        "Unable to create Intent; this likely means the Facebook app is not installed.");
             }
             appCall.setRequestIntent(intent);
 
@@ -387,40 +428,92 @@ public FacebookDialog build() {
          * @return true if the dialog can be presented; false if not
          */
         public boolean canPresent() {
-            return handleCanPresent();
+            return handleCanPresent(activity, getDialogFeatures());
         }
 
-        boolean handleCanPresent() {
-            return getProtocolVersionForNativeDialog(activity, MIN_NATIVE_SHARE_PROTOCOL_VERSION)
-                    != NativeProtocol.NO_PROTOCOL_AVAILABLE;
+        void validate() {
         }
 
-        void validate() {}
-
         OnPresentCallback getOnPresentCallback() {
-            return null;
+            return new OnPresentCallback() {
+                @Override
+                public void onPresent(Context context) throws Exception {
+                    // We're actually being presented, so put our attachments in the content provider.
+                    if (imageAttachments != null && imageAttachments.size() > 0) {
+                        getAttachmentStore().addAttachmentsForCall(context, appCall.getCallId(), imageAttachments);
+                    }
+                    if (imageAttachmentFiles != null && imageAttachmentFiles.size() > 0) {
+                        getAttachmentStore().addAttachmentFilesForCall(context, appCall.getCallId(),
+                                imageAttachmentFiles);
+                    }
+                }
+            };
         }
 
-        abstract Intent handleBuild(Bundle extras);
+        protected List<String> addImageAttachments(Collection<Bitmap> bitmaps) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (Bitmap bitmap : bitmaps) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmap);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        protected List<String> addImageAttachmentFiles(Collection<File> bitmapFiles) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (File bitmapFile : bitmapFiles) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmapFile);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        List<String> getImageAttachmentNames() {
+            return new ArrayList<String>(imageAttachments.keySet());
+        }
+
+        abstract Bundle setBundleExtras(Bundle extras);
 
         void putExtra(Bundle extras, String key, String value) {
             if (value != null) {
                 extras.putString(key, value);
             }
         }
+
+        abstract EnumSet<? extends DialogFeature> getDialogFeatures();
+
+        protected CONCRETE addImageAttachment(String imageName, Bitmap bitmap) {
+            imageAttachments.put(imageName, bitmap);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        protected CONCRETE addImageAttachment(String imageName, File attachment) {
+            imageAttachmentFiles.put(imageName, attachment);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
     }
 
-    /**
-     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
-     * Share dialog. This builder will throw an exception if the Facebook application is not installed, so it
-     * should only be used if {@link FacebookDialog.checkCanPresentShareDialog()} indicates the capability
-     * is available.
-     */
-    public static class ShareDialogBuilder extends Builder<ShareDialogBuilder> {
+    private abstract static class ShareDialogBuilderBase<CONCRETE extends ShareDialogBuilderBase<?>> extends Builder<CONCRETE> {
         private String name;
         private String caption;
         private String description;
-        private String link;
+        protected String link;
         private String picture;
         private String place;
         private ArrayList<String> friends;
@@ -429,110 +522,133 @@ void putExtra(Bundle extras, String key, String value) {
 
         /**
          * Constructor.
+         *
          * @param activity the Activity which is presenting the native Share dialog; must not be null
          */
-        public ShareDialogBuilder(Activity activity) {
+        public ShareDialogBuilderBase(Activity activity) {
             super(activity);
         }
 
         /**
          * Sets the title of the item to be shared.
+         *
          * @param name the title
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setName(String name) {
+        public CONCRETE setName(String name) {
             this.name = name;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets the subtitle of the item to be shared.
+         *
          * @param caption the subtitle
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setCaption(String caption) {
+        public CONCRETE setCaption(String caption) {
             this.caption = caption;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets the description of the item to be shared.
+         *
          * @param description the description
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setDescription(String description) {
+        public CONCRETE setDescription(String description) {
             this.description = description;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets the URL of the item to be shared.
+         *
          * @param link the URL
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setLink(String link) {
+        public CONCRETE setLink(String link) {
             this.link = link;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets the URL of the image of the item to be shared.
+         *
          * @param picture the URL of the image
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setPicture(String picture) {
+        public CONCRETE setPicture(String picture) {
             this.picture = picture;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets the place for the item to be shared.
+         *
          * @param place the Facebook ID of the place
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setPlace(String place) {
+        public CONCRETE setPlace(String place) {
             this.place = place;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets the tagged friends for the item to be shared.
+         *
          * @param friends a list of Facebook IDs of the friends to be tagged in the shared item
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setFriends(List<String> friends) {
+        public CONCRETE setFriends(List<String> friends) {
             this.friends = new ArrayList<String>(friends);
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets the 'ref' property of the item to be shared.
+         *
          * @param ref the 'ref' property
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setRef(String ref) {
+        public CONCRETE setRef(String ref) {
             this.ref = ref;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
          * Sets whether errors encountered during previewing the shared item should be considered fatal and
          * cause the dialog to return an error
+         *
          * @param dataErrorsFatal true if data errors should be fatal; false if not
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setDataErrorsFatal(boolean dataErrorsFatal) {
+        public CONCRETE setDataErrorsFatal(boolean dataErrorsFatal) {
             this.dataErrorsFatal = dataErrorsFatal;
-            return this;
-        }
-
-        @Override
-        boolean handleCanPresent() {
-            return canPresentShareDialog(activity, ShareDialogFeature.SHARE_DIALOG);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         @Override
-        Intent handleBuild(Bundle extras) {
+        Bundle setBundleExtras(Bundle extras) {
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
             putExtra(extras, NativeProtocol.EXTRA_TITLE, name);
@@ -548,46 +664,178 @@ Intent handleBuild(Bundle extras) {
             if (!Utility.isNullOrEmpty(friends)) {
                 extras.putStringArrayList(NativeProtocol.EXTRA_FRIEND_TAGS, friends);
             }
+            return extras;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Share dialog. This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)}  indicates the capability is available.
+     */
+    public static class ShareDialogBuilder extends ShareDialogBuilderBase<ShareDialogBuilder> {
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public ShareDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(ShareDialogFeature.SHARE_DIALOG);
+        }
+    }
+
+    private static abstract class PhotoDialogBuilderBase<CONCRETE extends PhotoDialogBuilderBase<?>>
+            extends Builder<CONCRETE> {
+        private String place;
+        private ArrayList<String> friends;
+        private ArrayList<String> imageAttachmentUrls = new ArrayList<String>();
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public PhotoDialogBuilderBase(Activity activity) {
+            super(activity);
+        }
+
+        /**
+         * Sets the place for the item to be shared.
+         *
+         * @param place the Facebook ID of the place
+         * @return this instance of the builder
+         */
+        public CONCRETE setPlace(String place) {
+            this.place = place;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the tagged friends for the item to be shared.
+         *
+         * @param friends a list of Facebook IDs of the friends to be tagged in the shared item
+         * @return this instance of the builder
+         */
+        public CONCRETE setFriends(List<String> friends) {
+            this.friends = new ArrayList<String>(friends);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * <p></p>Adds one or more photos to the list of photos to display in the native Share dialog, by providing
+         * an in-memory representation of the photos. The dialog's callback will be called once the user has
+         * shared the photos, but the photos themselves may be uploaded in the background by the Facebook app;
+         * apps wishing to be notified when the photo upload has succeeded or failed should extend the
+         * FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.</p>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         * @param photos a collection of Files representing photos to be uploaded
+         * @return this instance of the builder
+         */
+        public CONCRETE addPhotos(Collection<Bitmap> photos) {
+            imageAttachmentUrls.addAll(addImageAttachments(photos));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Adds one or more photos to the list of photos to display in the native Share dialog, by specifying
+         * their location in the file system. The dialog's callback will be called once the user has
+         * shared the photos, but the photos themselves may be uploaded in the background by the Facebook app;
+         * apps wishing to be notified when the photo upload has succeeded or failed should extend the
+         * FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.
+         * @param photos a collection of Files representing photos to be uploaded
+         * @return this instance of the builder
+         */
+        public CONCRETE addPhotoFiles(Collection<File> photos) {
+            imageAttachmentUrls.addAll(addImageAttachmentFiles(photos));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        @Override
+        void validate() {
+            super.validate();
+
+            if (imageAttachmentUrls.isEmpty()) {
+                throw new FacebookException("Must specify at least one photo.");
+            }
+        }
 
-            int protocolVersion = getProtocolVersionForNativeDialog(activity, MIN_NATIVE_SHARE_PROTOCOL_VERSION);
+        @Override
+        Bundle setBundleExtras(Bundle extras) {
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            putExtra(extras, NativeProtocol.EXTRA_PLACE_TAG, place);
+            extras.putStringArrayList(NativeProtocol.EXTRA_PHOTOS, imageAttachmentUrls);
 
-            Intent intent = NativeProtocol.createPlatformActivityIntent(activity, NativeProtocol.ACTION_FEED_DIALOG,
-                    protocolVersion, extras);
-            return intent;
+            if (!Utility.isNullOrEmpty(friends)) {
+                extras.putStringArrayList(NativeProtocol.EXTRA_FRIEND_TAGS, friends);
+            }
+            return extras;
         }
     }
 
     /**
      * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
-     * Open Graph action publish dialog. This builder allows the caller to specify binary images for both the
-     * action and any Open Graph objects to be created prior to publishing the action.
-     * This builder will throw an exception if the Facebook application is not installed, so it
-     * should only be used if {@link FacebookDialog.checkCanPresentOpenGraphDialog();} indicates the capability
-     * is available.
+     * Share dialog for sharing photos. This builder will throw an exception if the Facebook application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)}  indicates the capability is available.
      */
-    public static class OpenGraphActionDialogBuilder extends Builder<OpenGraphActionDialogBuilder> {
+    public static class PhotoShareDialogBuilder extends PhotoDialogBuilderBase<PhotoShareDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public PhotoShareDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(ShareDialogFeature.SHARE_DIALOG, ShareDialogFeature.PHOTOS);
+        }
+
+    }
+
+    private static abstract class OpenGraphDialogBuilderBase<CONCRETE extends OpenGraphDialogBuilderBase<?>>
+            extends Builder<CONCRETE> {
+
         private String previewPropertyName;
         private OpenGraphAction action;
         private String actionType;
-        private HashMap<String, Bitmap> imageAttachments;
-        private HashMap<String, File> imageAttachmentFiles;
         private boolean dataErrorsFatal;
 
         /**
          * Constructor.
-         * @param activity the Activity which is presenting the native Open Graph action publish dialog;
-         *                 must not be null
-         * @param action the Open Graph action to be published, which must contain a reference to at least one
-         *               Open Graph object with the property name specified by setPreviewPropertyName; the action
-         *               must have had its type specified via the {@link OpenGraphAction#setType(String)} method
-         * @param actionType the type of the Open Graph action to be published, which should be the namespace-qualified
-         *                   name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
-         *                   of the action passed in.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param actionType          the type of the Open Graph action to be published, which should be the namespace-qualified
+         *                            name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
+         *                            of the action passed in.
          * @param previewPropertyName the name of a property on the Open Graph action that contains the
          *                            Open Graph object which will be displayed as a preview to the user
          */
         @Deprecated
-        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String actionType,
+        public OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, String actionType,
                 String previewPropertyName) {
             super(activity);
 
@@ -602,7 +850,7 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
             String typeOnAction = action.getType();
             if (!Utility.isNullOrEmpty(typeOnAction) && !typeOnAction.equals(actionType)) {
                 throw new IllegalArgumentException("'actionType' must match the type of 'action' if it is specified. " +
-                        "Consider using OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, " +
+                        "Consider using OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, " +
                         "String previewPropertyName) instead.");
             }
             this.action = action;
@@ -612,15 +860,16 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
 
         /**
          * Constructor.
-         * @param activity the Activity which is presenting the native Open Graph action publish dialog;
-         *                 must not be null
-         * @param action the Open Graph action to be published, which must contain a reference to at least one
-         *               Open Graph object with the property name specified by setPreviewPropertyName; the action
-         *               must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
          * @param previewPropertyName the name of a property on the Open Graph action that contains the
          *                            Open Graph object which will be displayed as a preview to the user
          */
-        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String previewPropertyName) {
+        public OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, String previewPropertyName) {
             super(activity);
 
             Validate.notNull(action, "action");
@@ -629,7 +878,7 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
             if (action.getProperty(previewPropertyName) == null) {
                 throw new IllegalArgumentException(
                         "A property named \"" + previewPropertyName + "\" was not found on the action.  The name of " +
-                        "the preview property must match the name of an action property.");
+                                "the preview property must match the name of an action property.");
             }
 
             this.action = action;
@@ -640,12 +889,15 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
         /**
          * Sets whether errors encountered during previewing the shared item should be considered fatal and
          * cause the dialog to return an error
+         *
          * @param dataErrorsFatal true if data errors should be fatal; false if not
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setDataErrorsFatal(boolean dataErrorsFatal) {
+        public CONCRETE setDataErrorsFatal(boolean dataErrorsFatal) {
             this.dataErrorsFatal = dataErrorsFatal;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
@@ -655,14 +907,14 @@ public OpenGraphActionDialogBuilder setDataErrorsFatal(boolean dataErrorsFatal)
          * setAction again after calling this method will not clear the image attachments already set, but the new
          * action will have no reference to the existing attachments. The images will not be marked as being
          * user-generated.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
          * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph action
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bitmaps) {
+        public CONCRETE setImageAttachmentsForAction(List<Bitmap> bitmaps) {
             return setImageAttachmentsForAction(bitmaps, false);
         }
 
@@ -675,15 +927,15 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bi
          * user-generated -- refer to
          * <a href="https://developers.facebook.com/docs/opengraph/howtos/adding-photos-to-stories/">this article</a>
          * for more information.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph action
+         * @param bitmaps         a list of Bitmaps to be uploaded and attached to the Open Graph action
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bitmaps,
+        public CONCRETE setImageAttachmentsForAction(List<Bitmap> bitmaps,
                 boolean isUserGenerated) {
             Validate.containsNoNulls(bitmaps, "bitmaps");
             if (action == null) {
@@ -693,7 +945,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bi
             List<String> attachmentUrls = addImageAttachments(bitmaps);
             updateActionAttachmentUrls(attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
@@ -703,14 +957,14 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bi
          * action to refer to these attachments. Note that calling setAction again after calling this method will
          * not clear the image attachments already set, but the new action will have no reference to the existing
          * attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
          * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File> bitmapFiles) {
+        public CONCRETE setImageAttachmentFilesForAction(List<File> bitmapFiles) {
             return setImageAttachmentFilesForAction(bitmapFiles, false);
         }
 
@@ -723,15 +977,15 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File>
          * names for the image attachments and update the action to refer to these attachments. Note that calling
          * setAction again after calling this method will not clear the image attachments already set, but the new
          * action will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
+         * @param bitmapFiles     a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File> bitmapFiles,
+        public CONCRETE setImageAttachmentFilesForAction(List<File> bitmapFiles,
                 boolean isUserGenerated) {
             Validate.containsNoNulls(bitmapFiles, "bitmapFiles");
             if (action == null) {
@@ -741,7 +995,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File>
             List<String> attachmentUrls = addImageAttachmentFiles(bitmapFiles);
             updateActionAttachmentUrls(attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         private void updateActionAttachmentUrls(List<String> attachmentUrls, boolean isUserGenerated) {
@@ -775,7 +1031,7 @@ private void updateActionAttachmentUrls(List<String> attachmentUrls, boolean isU
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
@@ -783,10 +1039,10 @@ private void updateActionAttachmentUrls(List<String> attachmentUrls, boolean isU
          *                       the object must be marked as a new object to be created
          *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
          *                       true) or an exception will be thrown
-         * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
+         * @param bitmaps        a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {
+        public CONCRETE setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {
             return setImageAttachmentsForObject(objectProperty, bitmaps, false);
         }
 
@@ -802,20 +1058,20 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object;
-         *                       the object must be marked as a new object to be created
-         *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
-         *                       true) or an exception will be thrown
-         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object
-         * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object;
+         *                        the object must be marked as a new object to be created
+         *                        (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                        true) or an exception will be thrown
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object
+         * @param bitmaps         a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,
+        public CONCRETE setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,
                 boolean isUserGenerated) {
             Validate.notNull(objectProperty, "objectProperty");
             Validate.containsNoNulls(bitmaps, "bitmaps");
@@ -826,7 +1082,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
             List<String> attachmentUrls = addImageAttachments(bitmaps);
             updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
@@ -838,7 +1096,7 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
@@ -846,10 +1104,10 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
          *                       the object must be marked as a new object to be created
          *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
          *                       true) or an exception will be thrown
-         * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph object
+         * @param bitmapFiles    a list of Bitmaps to be uploaded and attached to the Open Graph object
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String objectProperty,
+        public CONCRETE setImageAttachmentFilesForObject(String objectProperty,
                 List<File> bitmapFiles) {
             return setImageAttachmentFilesForObject(objectProperty, bitmapFiles, false);
         }
@@ -866,19 +1124,19 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String obje
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object;
-         *                       the object must be marked as a new object to be created
-         *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
-         *                       true) or an exception will be thrown
-         * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph object
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object;
+         *                        the object must be marked as a new object to be created
+         *                        (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                        true) or an exception will be thrown
+         * @param bitmapFiles     a list of Bitmaps to be uploaded and attached to the Open Graph object
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String objectProperty,
+        public CONCRETE setImageAttachmentFilesForObject(String objectProperty,
                 List<File> bitmapFiles, boolean isUserGenerated) {
             Validate.notNull(objectProperty, "objectProperty");
             Validate.containsNoNulls(bitmapFiles, "bitmapFiles");
@@ -889,7 +1147,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String obje
             List<String> attachmentUrls = addImageAttachmentFiles(bitmapFiles);
             updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         void updateObjectAttachmentUrls(String objectProperty, List<String> attachmentUrls, boolean isUserGenerated) {
@@ -922,47 +1182,8 @@ void updateObjectAttachmentUrls(String objectProperty, List<String> attachmentUr
             object.setImage(attachments);
         }
 
-        private List<String> addImageAttachments(List<Bitmap> bitmaps) {
-            ArrayList<String> attachmentUrls = new ArrayList<String>();
-            for (Bitmap bitmap : bitmaps) {
-                String attachmentName = UUID.randomUUID().toString();
-
-                addImageAttachment(attachmentName, bitmap);
-
-                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
-                        attachmentName);
-                attachmentUrls.add(url);
-            }
-
-            return attachmentUrls;
-        }
-
-        private List<String> addImageAttachmentFiles(List<File> bitmapFiles) {
-            ArrayList<String> attachmentUrls = new ArrayList<String>();
-            for (File bitmapFile : bitmapFiles) {
-                String attachmentName = UUID.randomUUID().toString();
-
-                addImageAttachment(attachmentName, bitmapFile);
-
-                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
-                        attachmentName);
-                attachmentUrls.add(url);
-            }
-
-            return attachmentUrls;
-        }
-
-        List<String> getImageAttachmentNames() {
-            return new ArrayList<String>(imageAttachments.keySet());
-        }
-
-        @Override
-        boolean handleCanPresent() {
-            return canPresentOpenGraphActionDialog(activity, OpenGraphActionDialogFeature.OG_ACTION_DIALOG);
-        }
-
         @Override
-        Intent handleBuild(Bundle extras)  {
+        Bundle setBundleExtras(Bundle extras) {
             putExtra(extras, NativeProtocol.EXTRA_PREVIEW_PROPERTY_NAME, previewPropertyName);
             putExtra(extras, NativeProtocol.EXTRA_ACTION_TYPE, actionType);
             extras.putBoolean(NativeProtocol.EXTRA_DATA_FAILURES_FATAL, dataErrorsFatal);
@@ -973,45 +1194,7 @@ Intent handleBuild(Bundle extras)  {
             String jsonString = jsonAction.toString();
             putExtra(extras, NativeProtocol.EXTRA_ACTION, jsonString);
 
-            int protocolVersion = getProtocolVersionForNativeDialog(activity, MIN_NATIVE_SHARE_PROTOCOL_VERSION);
-
-            Intent intent = NativeProtocol.createPlatformActivityIntent(activity,
-                    NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG, protocolVersion, extras);
-
-            return intent;
-        }
-
-        @Override
-        OnPresentCallback getOnPresentCallback() {
-            return new OnPresentCallback() {
-                @Override
-                public void onPresent(Context context) throws Exception {
-                    // We're actually being presented, so put our attachments in the content provider.
-                    if (imageAttachments != null && imageAttachments.size() > 0) {
-                        getAttachmentStore().addAttachmentsForCall(context, appCall.getCallId(), imageAttachments);
-                    }
-                    if (imageAttachmentFiles != null && imageAttachmentFiles.size() > 0) {
-                        getAttachmentStore().addAttachmentFilesForCall(context, appCall.getCallId(),
-                                imageAttachmentFiles);
-                    }
-                }
-            };
-        }
-
-        private OpenGraphActionDialogBuilder addImageAttachment(String imageName, Bitmap bitmap) {
-            if (imageAttachments == null) {
-                imageAttachments = new HashMap<String, Bitmap>();
-            }
-            imageAttachments.put(imageName, bitmap);
-            return this;
-        }
-
-        private OpenGraphActionDialogBuilder addImageAttachment(String imageName, File attachment) {
-            if (imageAttachmentFiles == null) {
-                imageAttachmentFiles = new HashMap<String, File>();
-            }
-            imageAttachmentFiles.put(imageName, attachment);
-            return this;
+            return extras;
         }
 
         private JSONObject flattenChildrenOfGraphObject(JSONObject graphObject) {
@@ -1071,6 +1254,56 @@ private Object flattenObject(Object object) throws JSONException {
         }
     }
 
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Open Graph action publish dialog. This builder allows the caller to specify binary images for both the
+     * action and any Open Graph objects to be created prior to publishing the action.
+     * This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentOpenGraphActionDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphActionDialogFeature...)} indicates the capability is available.
+     */
+    public static class OpenGraphActionDialogBuilder extends OpenGraphDialogBuilderBase<OpenGraphActionDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param actionType          the type of the Open Graph action to be published, which should be the namespace-qualified
+         *                            name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
+         *                            of the action passed in.
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        @Deprecated
+        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String actionType,
+                String previewPropertyName) {
+            super(activity, action, actionType, previewPropertyName);
+        }
+
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String previewPropertyName) {
+            super(activity, action, previewPropertyName);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG);
+        }
+    }
+
     /**
      * Encapsulates information about a call being made to the Facebook application for Android. A unique String
      * call ID is used to track calls through their lifecycle.
@@ -1082,6 +1315,7 @@ private Object flattenObject(Object object) throws JSONException {
 
         /**
          * Constructor.
+         *
          * @param requestCode the request code for this app call
          */
         public PendingCall(int requestCode) {
@@ -1102,6 +1336,7 @@ private void setRequestIntent(Intent requestIntent) {
 
         /**
          * Returns the Intent that was used to initiate this call to the Facebook application.
+         *
          * @return the Intent
          */
         public Intent getRequestIntent() {
@@ -1110,6 +1345,7 @@ public Intent getRequestIntent() {
 
         /**
          * Returns the unique ID of this call to the Facebook application.
+         *
          * @return the unique ID
          */
         public UUID getCallId() {
@@ -1150,5 +1386,6 @@ public PendingCall createFromParcel(Parcel in) {
             public PendingCall[] newArray(int size) {
                 return new PendingCall[size];
             }
-        };}
+        };
+    }
 }
diff --git a/facebook/src/com/facebook/widget/FriendPickerFragment.java b/facebook/src/com/facebook/widget/FriendPickerFragment.java
index cddc3ace3..b657ec567 100644
--- a/facebook/src/com/facebook/widget/FriendPickerFragment.java
+++ b/facebook/src/com/facebook/widget/FriendPickerFragment.java
@@ -22,15 +22,15 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.AttributeSet;
-import com.facebook.*;
+import com.facebook.AppEventsLogger;
+import com.facebook.FacebookException;
+import com.facebook.Request;
+import com.facebook.Session;
 import com.facebook.android.R;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.model.GraphUser;
 
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 
 /**
  * Provides a Fragment that displays a list of a user's friends and allows one or more of the
@@ -55,6 +55,8 @@
 
     private boolean multiSelect = true;
 
+    private List<String> preSelectedFriendIds = new ArrayList<String>();
+
     /**
      * Default constructor. Creates a Fragment with all default properties.
      */
@@ -110,6 +112,42 @@ public void setMultiSelect(boolean multiSelect) {
         }
     }
 
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(List<String> userIds) {
+        preSelectedFriendIds.addAll(userIds);
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(String... userIds) {
+        setSelectionByIds(Arrays.asList(userIds));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(GraphUser... graphUsers) {
+        setSelection(Arrays.asList(graphUsers));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(List<GraphUser> graphUsers) {
+        List<String> userIds = new ArrayList<String>();
+        for(GraphUser graphUser: graphUsers) {
+            userIds.add(graphUser.getId());
+        }
+        setSelectionByIds(userIds);
+    }
+
     /**
      * Gets the currently-selected list of users.
      * @return the currently-selected list of users
@@ -205,6 +243,12 @@ void logAppEvents(boolean doneButtonClicked) {
         logger.logSdkEvent(AnalyticsEvents.EVENT_FRIEND_PICKER_USAGE, null, parameters);
     }
 
+    @Override
+    public void loadData(boolean forceReload) {
+        super.loadData(forceReload);
+        setSelectedGraphObjects(preSelectedFriendIds);
+    }
+
     private Request createRequest(String userID, Set<String> extraFields, Session session) {
         Request request = Request.newGraphPathRequest(session, userID + "/friends", null);
 
diff --git a/facebook/src/com/facebook/widget/PickerFragment.java b/facebook/src/com/facebook/widget/PickerFragment.java
index ca6258b4d..7718a0c26 100644
--- a/facebook/src/com/facebook/widget/PickerFragment.java
+++ b/facebook/src/com/facebook/widget/PickerFragment.java
@@ -515,6 +515,14 @@ boolean filterIncludesItem(T graphObject) {
         return adapter.getGraphObjectsById(selectionStrategy.getSelectedIds());
     }
 
+    void setSelectedGraphObjects(List<String> objectIds) {
+        for(String objectId : objectIds) {
+            if(!this.selectionStrategy.isSelected(objectId)) {
+                this.selectionStrategy.toggleSelection(objectId);
+            }
+        }
+    }
+
     void saveSettingsToBundle(Bundle outState) {
         outState.putBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
         if (!extraFields.isEmpty()) {
diff --git a/facebook/src/com/facebook/widget/WebDialog.java b/facebook/src/com/facebook/widget/WebDialog.java
index e4fb9f7bf..0066d3490 100644
--- a/facebook/src/com/facebook/widget/WebDialog.java
+++ b/facebook/src/com/facebook/widget/WebDialog.java
@@ -29,7 +29,6 @@
 import android.net.http.SslError;
 import android.os.Bundle;
 import android.util.DisplayMetrics;
-import android.util.Pair;
 import android.view.*;
 import android.webkit.SslErrorHandler;
 import android.webkit.WebView;
@@ -58,11 +57,16 @@
     static final boolean DISABLE_SSL_CHECK_FOR_TESTING = false;
 
     // width below which there are no extra margins
-    private static final int NO_BUFFER_SCREEN_WIDTH = 512;
+    private static final int NO_PADDING_SCREEN_WIDTH = 480;
     // width beyond which we're always using the MIN_SCALE_FACTOR
-    private static final int MAX_BUFFER_SCREEN_WIDTH = 1024;
-    // the minimum scaling factor for the web dialog (60% of screen size)
-    private static final double MIN_SCALE_FACTOR = 0.6;
+    private static final int MAX_PADDING_SCREEN_WIDTH = 800;
+    // height below which there are no extra margins
+    private static final int NO_PADDING_SCREEN_HEIGHT = 800;
+    // height beyond which we're always using the MIN_SCALE_FACTOR
+    private static final int MAX_PADDING_SCREEN_HEIGHT = 1280;
+
+    // the minimum scaling factor for the web dialog (50% of screen size)
+    private static final double MIN_SCALE_FACTOR = 0.5;
     // translucent border around the webview
     private static final int BACKGROUND_GRAY = 0xCC000000;
 
@@ -131,6 +135,10 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
         if (parameters == null) {
             parameters = new Bundle();
         }
+
+        // our webview client only handles the redirect uri we specify, so just hard code it here
+        parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
+
         parameters.putString(ServerProtocol.DIALOG_PARAM_DISPLAY, DISPLAY_TOUCH);
         parameters.putString(ServerProtocol.DIALOG_PARAM_TYPE, USER_AGENT);
 
@@ -208,9 +216,12 @@ public void onCancel(DialogInterface dialogInterface) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         contentFrameLayout = new FrameLayout(getContext());
 
-        // First calculate the margins around the frame layout
-        Pair<Integer, Integer> margins = getMargins();
-        contentFrameLayout.setPadding(margins.first, margins.second, margins.first, margins.second);
+        // First calculate how big the frame layout should be
+        calculateSize();
+        getWindow().setGravity(Gravity.CENTER);
+
+        // resize the dialog if the soft keyboard comes up
+        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
 
         /* Create the 'x' image, but don't add to the contentFrameLayout layout yet
          * at this point, we only need to know its drawable width and height
@@ -230,37 +241,54 @@ public void onCancel(DialogInterface dialogInterface) {
         */
         contentFrameLayout.addView(crossImageView, new ViewGroup.LayoutParams(
                 ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
-        addContentView(contentFrameLayout,
-                new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+
+        setContentView(contentFrameLayout);
     }
 
-    private Pair<Integer, Integer> getMargins() {
+    private void calculateSize() {
         WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
         Display display = wm.getDefaultDisplay();
         DisplayMetrics metrics = new DisplayMetrics();
         display.getMetrics(metrics);
-        int width = metrics.widthPixels;
-        int height = metrics.heightPixels;
+        // always use the portrait dimensions to do the scaling calculations so we always get a portrait shaped
+        // web dialog
+        int width = metrics.widthPixels < metrics.heightPixels ? metrics.widthPixels : metrics.heightPixels;
+        int height = metrics.widthPixels < metrics.heightPixels ? metrics.heightPixels : metrics.widthPixels;
+
+        int dialogWidth = Math.min(
+                getScaledSize(width, metrics.density, NO_PADDING_SCREEN_WIDTH, MAX_PADDING_SCREEN_WIDTH),
+                metrics.widthPixels);
+        int dialogHeight = Math.min(
+                getScaledSize(height, metrics.density, NO_PADDING_SCREEN_HEIGHT, MAX_PADDING_SCREEN_HEIGHT),
+                metrics.heightPixels);
+
+        getWindow().setLayout(dialogWidth, dialogHeight);
+    }
 
+    /**
+     * Returns a scaled size (either width or height) based on the parameters passed.
+     * @param screenSize a pixel dimension of the screen (either width or height)
+     * @param density density of the screen
+     * @param noPaddingSize the size at which there's no padding for the dialog
+     * @param maxPaddingSize the size at which to apply maximum padding for the dialog
+     * @return a scaled size.
+     */
+    private int getScaledSize(int screenSize, float density, int noPaddingSize, int maxPaddingSize) {
+        int scaledSize = (int) ((float) screenSize / density);
         double scaleFactor;
-        int scaledWidth = (int) ((float) width / metrics.density);
-        if (scaledWidth <= NO_BUFFER_SCREEN_WIDTH) {
+        if (scaledSize <= noPaddingSize) {
             scaleFactor = 1.0;
-        } else if (scaledWidth >= MAX_BUFFER_SCREEN_WIDTH) {
+        } else if (scaledSize >= maxPaddingSize) {
             scaleFactor = MIN_SCALE_FACTOR;
         } else {
-            // between the NO_BUFFER and MAX_BUFFER widths, we take a linear reduction to go from 100%
+            // between the noPadding and maxPadding widths, we take a linear reduction to go from 100%
             // of screen size down to MIN_SCALE_FACTOR
             scaleFactor = MIN_SCALE_FACTOR +
-                    ((double) (MAX_BUFFER_SCREEN_WIDTH - scaledWidth))
-                            / ((double) (MAX_BUFFER_SCREEN_WIDTH - NO_BUFFER_SCREEN_WIDTH))
+                    ((double) (maxPaddingSize - scaledSize))
+                            / ((double) (maxPaddingSize - noPaddingSize))
                             * (1.0 - MIN_SCALE_FACTOR);
         }
-
-        int leftRightMargin = (int) (width * (1.0 - scaleFactor) / 2);
-        int topBottomMargin = (int) (height * (1.0 - scaleFactor) / 2);
-
-        return new Pair<Integer, Integer>(leftRightMargin, topBottomMargin);
+        return (int) (screenSize * scaleFactor);
     }
 
     private void sendSuccessToListener(Bundle values) {
@@ -301,7 +329,7 @@ public void onClick(View v) {
         crossImageView.setImageDrawable(crossDrawable);
         /* 'x' should not be visible while webview is loading
          * make it visible only after webview has fully loaded
-        */
+         */
         crossImageView.setVisibility(View.INVISIBLE);
     }
 
@@ -318,6 +346,7 @@ private void setUpWebView(int margin) {
                 ViewGroup.LayoutParams.MATCH_PARENT));
         webView.setVisibility(View.INVISIBLE);
         webView.getSettings().setSavePassword(false);
+        webView.getSettings().setSaveFormData(false);
 
         webViewContainer.setPadding(margin, margin, margin, margin);
         webViewContainer.addView(webView);
@@ -433,6 +462,22 @@ public void onPageFinished(WebView view, String url) {
         private OnCompleteListener listener;
         private Bundle parameters;
 
+        protected BuilderBase(Context context, String action) {
+            Session activeSession = Session.getActiveSession();
+            if (activeSession != null && activeSession.isOpened()) {
+                this.session = activeSession;
+            } else {
+                String applicationId = Utility.getMetadataApplicationId(context);
+                if (applicationId != null) {
+                    this.applicationId = applicationId;
+                } else {
+                    throw new FacebookException("Attempted to create a builder without an open" +
+                            " Active Session or a valid default Application ID.");
+                }
+            }
+            finishInit(context, action, null);
+        }
+
         protected BuilderBase(Context context, Session session, String action, Bundle parameters) {
             Validate.notNull(session, "session");
             if (!session.isOpened()) {
@@ -444,6 +489,9 @@ protected BuilderBase(Context context, Session session, String action, Bundle pa
         }
 
         protected BuilderBase(Context context, String applicationId, String action, Bundle parameters) {
+            if (applicationId == null) {
+                applicationId = Utility.getMetadataApplicationId(context);
+            }
             Validate.notNullOrEmpty(applicationId, "applicationId");
             this.applicationId = applicationId;
 
@@ -490,10 +538,6 @@ public WebDialog build() {
                 parameters.putString(ServerProtocol.DIALOG_PARAM_APP_ID, applicationId);
             }
 
-            if (!parameters.containsKey(ServerProtocol.DIALOG_PARAM_REDIRECT_URI)) {
-                parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
-            }
-
             return new WebDialog(context, action, parameters, theme, listener);
         }
 
@@ -532,6 +576,18 @@ private void finishInit(Context context, String action, Bundle parameters) {
      * Provides a builder that allows construction of an arbitary Facebook web dialog.
      */
     public static class Builder extends BuilderBase<Builder> {
+        /**
+         * Constructor that builds a dialog using either the active session, or the application
+         * id specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         * @param action the portion of the dialog URL following www.facebook.com/dialog/.
+         *               See https://developers.facebook.com/docs/reference/dialogs/ for details.
+         */
+        public Builder(Context context, String action) {
+            super(context, action);
+        }
+
         /**
          * Constructor that builds a dialog for an authenticated user.
          *
@@ -576,7 +632,17 @@ public Builder(Context context, String applicationId, String action, Bundle para
         private static final String DESCRIPTION_PARAM = "description";
 
         /**
-         * Constructor.
+         * Constructor that builds a Feed Dialog using either the active session, or the application
+         * ID specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         */
+        public FeedDialogBuilder(Context context) {
+            super(context, FEED_DIALOG);
+        }
+
+        /**
+         * Constructor that builds a Feed Dialog using the provided session.
          *
          * @param context the Context within which the dialog will be shown.
          * @param session the Session representing an authenticating user to use for
@@ -587,21 +653,37 @@ public FeedDialogBuilder(Context context, Session session) {
         }
 
         /**
-         * Constructor.
+         * Constructor that builds a Feed Dialog using the provided session and parameters.
          *
          * @param context    the Context within which the dialog will be shown.
+         * @param session    the Session representing an authenticating user to use for
+         *                   showing the dialog; must not be null, and must be opened.
          * @param parameters a Bundle containing parameters to pass as part of the
          *                   dialog URL. No validation is done on these parameters; it is
          *                   the caller's responsibility to ensure they are valid. For more information,
          *                   see <a href="https://developers.facebook.com/docs/reference/dialogs/feed/">
          *                   https://developers.facebook.com/docs/reference/dialogs/feed/</a>.
-         * @param session    the Session representing an authenticating user to use for
-         *                   showing the dialog; must not be null, and must be opened.
          */
         public FeedDialogBuilder(Context context, Session session, Bundle parameters) {
             super(context, session, FEED_DIALOG, parameters);
         }
 
+        /**
+         * Constructor that builds a Feed Dialog using the provided application ID and parameters.
+         *
+         * @param context       the Context within which the dialog will be shown.
+         * @param applicationId the application ID to use. If null, the application ID specified in the
+         *                      application/meta-data will be used instead.
+         * @param parameters    a Bundle containing parameters to pass as part of the
+         *                      dialog URL. No validation is done on these parameters; it is
+         *                      the caller's responsibility to ensure they are valid. For more information,
+         *                      see <a href="https://developers.facebook.com/docs/reference/dialogs/feed/">
+         *                      https://developers.facebook.com/docs/reference/dialogs/feed/</a>.
+         */
+        public FeedDialogBuilder(Context context, String applicationId, Bundle parameters) {
+            super(context, applicationId, FEED_DIALOG, parameters);
+        }
+
         /**
          * Sets the ID of the profile that is posting to Facebook. If none is specified,
          * the default is "me". This profile must be either the authenticated user or a
@@ -707,7 +789,17 @@ public FeedDialogBuilder setDescription(String description) {
         private static final String TITLE_PARAM = "title";
 
         /**
-         * Constructor.
+         * Constructor that builds a Requests Dialog using either the active session, or the application
+         * ID specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         */
+        public RequestsDialogBuilder(Context context) {
+            super(context, APPREQUESTS_DIALOG);
+        }
+
+        /**
+         * Constructor that builds a Requests Dialog using the provided session.
          *
          * @param context the Context within which the dialog will be shown.
          * @param session the Session representing an authenticating user to use for
@@ -718,21 +810,37 @@ public RequestsDialogBuilder(Context context, Session session) {
         }
 
         /**
-         * Constructor.
+         * Constructor that builds a Requests Dialog using the provided session and parameters.
          *
          * @param context    the Context within which the dialog will be shown.
+         * @param session    the Session representing an authenticating user to use for
+         *                   showing the dialog; must not be null, and must be opened.
          * @param parameters a Bundle containing parameters to pass as part of the
          *                   dialog URL. No validation is done on these parameters; it is
          *                   the caller's responsibility to ensure they are valid. For more information,
          *                   see <a href="https://developers.facebook.com/docs/reference/dialogs/requests/">
          *                   https://developers.facebook.com/docs/reference/dialogs/requests/</a>.
-         * @param session    the Session representing an authenticating user to use for
-         *                   showing the dialog; must not be null, and must be opened.
          */
         public RequestsDialogBuilder(Context context, Session session, Bundle parameters) {
             super(context, session, APPREQUESTS_DIALOG, parameters);
         }
 
+        /**
+         * Constructor that builds a Requests Dialog using the provided application ID and parameters.
+         *
+         * @param context       the Context within which the dialog will be shown.
+         * @param applicationId the application ID to use. If null, the application ID specified in the
+         *                      application/meta-data will be used instead.
+         * @param parameters    a Bundle containing parameters to pass as part of the
+         *                      dialog URL. No validation is done on these parameters; it is
+         *                      the caller's responsibility to ensure they are valid. For more information,
+         *                      see <a href="https://developers.facebook.com/docs/reference/dialogs/requests/">
+         *                      https://developers.facebook.com/docs/reference/dialogs/requests/</a>.
+         */
+        public RequestsDialogBuilder(Context context, String applicationId, Bundle parameters) {
+            super(context, applicationId, APPREQUESTS_DIALOG, parameters);
+        }
+
         /**
          * Sets the string users receiving the request will see. The maximum length
          * is 60 characters.
diff --git a/facebook/tests/SdkTests.eml b/facebook/tests/SdkTests.eml
deleted file mode 100644
index 3bbc2f8d5..000000000
--- a/facebook/tests/SdkTests.eml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-	<module name="SdkTestApp" scope="PROVIDED"/>
-</component>
diff --git a/facebook/tests/SdkTests.iml b/facebook/tests/SdkTests.iml
deleted file mode 100644
index 2e7f31a2f..000000000
--- a/facebook/tests/SdkTests.iml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="1">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="1" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="2" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="PACK_TEST_CODE" value="true" />
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/assets" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="module" module-name="SdkTestApp" scope="PROVIDED" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/tests/build.gradle b/facebook/tests/build.gradle
new file mode 100644
index 000000000..1a7be02eb
--- /dev/null
+++ b/facebook/tests/build.gradle
@@ -0,0 +1,29 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+    compile project(':TestApp')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+
+        instrumentTest {
+            java.srcDirs = ['src']
+            assets.srcDirs = ['assets']
+        }
+    }
+}
diff --git a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
index 6085d2345..e9d99bfc5 100644
--- a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
+++ b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
@@ -84,7 +84,7 @@ public void run() {
 
         logger1.logEvent("an_event");
 
-        logger1.onContextStop();
+        AppEventsLogger.onContextStop();
 
         FileInputStream fis = getActivity().openFileInput(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME);
         assertNotNull(fis);
@@ -113,6 +113,7 @@ public void run() {
         broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
     }
 
+    @SuppressWarnings("deprecation")
     public void testInsightsLoggerCompatibility() throws InterruptedException {
         AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.AUTO);
 
@@ -136,7 +137,9 @@ public void run() {
 
         logger1.logConversionPixel("foo", 1.0);
 
-        waitForBroadcastReceiver.waitForExpectedCalls();
+        // For some reason the flush can take an extraordinary amount of time, so increasing
+        // the timeout here to prevent failures.
+        waitForBroadcastReceiver.waitForExpectedCalls(600*1000);
 
         closeBlockerAndAssertSuccess();
 
diff --git a/facebook/tests/src/com/facebook/AppLinkDataTests.java b/facebook/tests/src/com/facebook/AppLinkDataTests.java
new file mode 100644
index 000000000..42a22c9b5
--- /dev/null
+++ b/facebook/tests/src/com/facebook/AppLinkDataTests.java
@@ -0,0 +1,137 @@
+package com.facebook;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+
+public class AppLinkDataTests extends FacebookTestCase {
+    private static final String TARGET_URI_STRING = "http://test.app/foo";
+    private static final String FB_REF_KEY = "fb_ref";
+    private static final String FB_REF_VALUE = "foobar";
+    private static final String REFERER_DATA_KEY = "referer_data";
+    private static final String EXTRA_ARGS_KEY = "extra_args";
+    private static final String EXTRA_ARGS_VALUE = "extra_value";
+    private static final String TARGET_URL_KEY = "target_url";
+    private static final String USER_AGENT_KEY = "user_agent";
+    private static final String USER_AGENT_VALUE = "foobarUserAgent";
+
+    private static final String JSON_DATA_REGULAR =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"ref\": \"" + FB_REF_VALUE + "\","
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
+            + "  }"
+            + "}";
+
+    private static final String JSON_DATA_REGULAR_WITH_NESTED_ARRAY =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"ref\": \"" + FB_REF_VALUE + "\","
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
+            + "    \"other\": [ [1, 2], [3, 4] ]"
+            + "  }"
+            + "}";
+
+    private static final String JSON_DATA_WITH_REFERER_DATA =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"referer_data\" : {"
+            + "      \"" + FB_REF_KEY + "\": \"" + FB_REF_VALUE + "\","
+            + "      \"" + EXTRA_ARGS_KEY + "\": \"" + EXTRA_ARGS_VALUE + "\""
+            + "    },"
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
+            + "  }"
+            + "}";
+
+
+    private static class MockActivityWithAppLinkData extends Activity {
+        public Intent getIntent() {
+            Uri targetUri = Uri.parse(TARGET_URI_STRING);
+            Intent intent = new Intent(Intent.ACTION_VIEW, targetUri);
+            Bundle applinks = new Bundle();
+            Bundle refererData = new Bundle();
+            refererData.putString(FB_REF_KEY, FB_REF_VALUE);
+            refererData.putString(EXTRA_ARGS_KEY, EXTRA_ARGS_VALUE);
+            applinks.putBundle(REFERER_DATA_KEY, refererData);
+            applinks.putString(TARGET_URL_KEY, TARGET_URI_STRING);
+            applinks.putString(USER_AGENT_KEY, USER_AGENT_VALUE);
+            intent.putExtra("al_applink_data", applinks);
+            return intent;
+        }
+    }
+
+    private static class MockActivityWithJsonData extends Activity {
+        private boolean useRefererData;
+
+        public MockActivityWithJsonData(boolean useRefererData) {
+            this.useRefererData = useRefererData;
+        }
+        public Intent getIntent() {
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY,
+                    useRefererData ? JSON_DATA_WITH_REFERER_DATA : JSON_DATA_REGULAR);
+            return intent;
+        }
+    }
+
+    private static class MockActivityWithErrorJsonData extends Activity {
+        public Intent getIntent() {
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, JSON_DATA_REGULAR_WITH_NESTED_ARRAY);
+            return intent;
+        }
+    }
+
+    public void testCreateFromAlApplinkData() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithAppLinkData());
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertEquals("user agent", USER_AGENT_VALUE, args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNotNull("referer data not null", refererData);
+        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
+        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+    }
+
+    public void testCreateFromJson() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(false));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNull("referer data", refererData);
+    }
+
+    public void testCreateFromJsonWithNestedArray() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithErrorJsonData());
+        assertNull(appLinkData);
+    }
+
+
+    public void testCreateFromJsonWithRefererData() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(true));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNotNull("referer data", refererData);
+        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
+        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+    }
+}
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
index 28f23adae..07857df61 100644
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ b/facebook/tests/src/com/facebook/AsyncRequestTests.java
@@ -186,6 +186,7 @@ public void testMixedSuccessAndFailure() {
 
     @MediumTest
     @LargeTest
+    @SuppressWarnings("deprecation")
     public void testStaticExecuteMeAsync() {
         final TestSession session = openTestSessionWithSharedUser();
 
@@ -210,6 +211,7 @@ public void run() {
 
     @MediumTest
     @LargeTest
+    @SuppressWarnings("deprecation")
     public void testStaticExecuteMyFriendsAsync() {
         final TestSession session = openTestSessionWithSharedUser();
 
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
index 833d024d8..7a863649f 100644
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ b/facebook/tests/src/com/facebook/BatchRequestTests.java
@@ -20,12 +20,14 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.RequestBatch;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphPlace;
 import com.facebook.model.GraphUser;
 import com.facebook.internal.CacheableRequestBatch;
 
 import java.io.IOException;
+import java.lang.Override;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -561,4 +563,131 @@ public void onBatchCompleted(RequestBatch batch) {
         batch.executeAndWait();
         assertEquals(3, count.get());
     }
+
+    @MediumTest
+    @LargeTest
+    public void testBatchOnProgressCallbackIsCalled() {
+        final AtomicInteger count = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                count.incrementAndGet();
+            }
+        });
+
+        batch.executeAndWait();
+        assertTrue(count.get() > 0);
+    }
+
+    @MediumTest
+    @LargeTest
+    public void testBatchLastOnProgressCallbackIsCalledOnce() {
+        final AtomicInteger count = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                if (current == max) {
+                    count.incrementAndGet();
+                }
+                else if (current > max) {
+                    count.set(0);
+                }
+            }
+        });
+
+        batch.executeAndWait();
+        assertEquals(1, count.get());
+    }
+
+
+    @MediumTest
+    @LargeTest
+    public void testMixedBatchCallbacks() {
+        final AtomicInteger requestProgressCount = new AtomicInteger();
+        final AtomicInteger requestCompletedCount = new AtomicInteger();
+        final AtomicInteger batchProgressCount = new AtomicInteger();
+        final AtomicInteger batchCompletedCount = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+                requestCompletedCount.incrementAndGet();
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                if (current == max) {
+                    requestProgressCount.incrementAndGet();
+                }
+                else if (current > max) {
+                    requestProgressCount.set(0);
+                }
+            }
+        });
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+                batchCompletedCount.incrementAndGet();
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                if (current == max) {
+                    batchProgressCount.incrementAndGet();
+                } else if (current > max) {
+                    batchProgressCount.set(0);
+                }
+            }
+        });
+
+        batch.executeAndWait();
+        
+        assertEquals(1, requestProgressCount.get());
+        assertEquals(1, requestCompletedCount.get());
+        assertEquals(1, batchProgressCount.get());
+        assertEquals(1, batchCompletedCount.get());
+    }
 }
diff --git a/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java b/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java
index 90a688fd3..01314889e 100644
--- a/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java
+++ b/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java
@@ -87,7 +87,7 @@ public void testCleanupAttachmentsForCall() throws Exception {
     }
 
     public void testGetAttachmentsDirectory() throws Exception {
-        File dir = storeUnderTest.getAttachmentsDirectory(getActivity());
+        File dir = NativeAppCallAttachmentStore.getAttachmentsDirectory(getActivity());
         assertNotNull(dir);
         assertTrue(dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
     }
diff --git a/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java b/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java
index ddd51646e..a2aa79a05 100644
--- a/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java
+++ b/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java
@@ -70,6 +70,7 @@ public void testUpdate() throws Exception {
         assertEquals(0, providerUnderTest.update(null, null, null, null));
     }
 
+    @SuppressWarnings("unused")
     public void testOpenFileWithNullUri() throws Exception {
         try {
             ParcelFileDescriptor pfd = providerUnderTest.openFile(null, "r");
@@ -78,6 +79,7 @@ public void testOpenFileWithNullUri() throws Exception {
         }
     }
 
+    @SuppressWarnings("unused")
     public void testOpenFileWithBadPath() throws Exception {
         try {
             ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/"), "r");
@@ -86,6 +88,7 @@ public void testOpenFileWithBadPath() throws Exception {
         }
     }
 
+    @SuppressWarnings("unused")
     public void testOpenFileWithoutCallIdAndAttachment() throws Exception {
         try {
             ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo"), "r");
@@ -94,6 +97,7 @@ public void testOpenFileWithoutCallIdAndAttachment() throws Exception {
         }
     }
 
+    @SuppressWarnings("unused")
     public void testOpenFileWithBadCallID() throws Exception {
         try {
             ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo/bar"), "r");
diff --git a/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java b/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java
new file mode 100644
index 000000000..b65b9851f
--- /dev/null
+++ b/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java
@@ -0,0 +1,65 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.test.AndroidTestCase;
+import static android.test.MoreAsserts.*;
+
+import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.ProgressNoopOutputStream;
+
+import java.lang.Exception;
+import java.lang.Override;
+
+public class ProgressNoopOutputStreamTests extends AndroidTestCase {
+    private ProgressNoopOutputStream stream;
+
+    @Override
+    protected void setUp() throws Exception {
+        stream = new ProgressNoopOutputStream(null);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        stream.close();
+    }
+
+    @SmallTest
+    public void testSetup() {
+        assertEquals(0, stream.getMaxProgress());
+        assertEmpty(stream.getProgressMap());
+    }
+
+    @SmallTest
+    public void testWriting() {
+        assertEquals(0, stream.getMaxProgress());
+
+        stream.write(0);
+        assertEquals(1, stream.getMaxProgress());
+
+        final byte[] buf = new byte[8];
+
+        stream.write(buf);
+        assertEquals(9, stream.getMaxProgress());
+
+        stream.write(buf, 2, 2);
+        assertEquals(11, stream.getMaxProgress());
+
+        stream.addProgress(16);
+        assertEquals(27, stream.getMaxProgress());
+    }
+}
\ No newline at end of file
diff --git a/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java b/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java
new file mode 100644
index 000000000..fa3f7ffd3
--- /dev/null
+++ b/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java
@@ -0,0 +1,100 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.Request;
+import com.facebook.RequestBatch;
+import com.facebook.RequestProgress;
+
+import static android.test.MoreAsserts.*;
+
+import java.io.ByteArrayOutputStream;
+import java.lang.Exception;
+import java.lang.Override;
+import java.util.HashMap;
+import java.util.Map;
+
+public class ProgressOutputStreamTests extends AndroidTestCase {
+    private static final int MAX_PROGRESS = 10;
+
+    private Request r1, r2;
+    private Map<Request, RequestProgress> progressMap;
+    private RequestBatch requests;
+    private ProgressOutputStream stream;
+
+    @Override
+    protected void setUp() throws Exception {
+        r1 = new Request(null, "4");
+        r2 = new Request(null, "4");
+
+        progressMap = new HashMap<Request, RequestProgress>();
+        progressMap.put(r1, new RequestProgress(null, r1));
+        progressMap.get(r1).addToMax(5);
+        progressMap.put(r2, new RequestProgress(null, r2));
+        progressMap.get(r2).addToMax(5);
+
+        requests = new RequestBatch(r1, r2);
+
+        ByteArrayOutputStream backing = new ByteArrayOutputStream();
+        stream = new ProgressOutputStream(backing, requests, progressMap, MAX_PROGRESS);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        stream.close();
+    }
+
+    @SmallTest
+    public void testSetup() {
+        assertEquals(0, stream.getBatchProgress());
+        assertEquals(MAX_PROGRESS, stream.getMaxProgress());
+
+        for (RequestProgress p : progressMap.values()) {
+            assertEquals(0, p.getProgress());
+            assertEquals(5, p.getMaxProgress());
+        }
+    }
+
+    @SmallTest
+    public void testWriting() {
+        try {
+            assertEquals(0, stream.getBatchProgress());
+
+            stream.setCurrentRequest(r1);
+            stream.write(0);
+            assertEquals(1, stream.getBatchProgress());
+
+            final byte[] buf = new byte[4];
+            stream.write(buf);
+            assertEquals(5, stream.getBatchProgress());
+
+            stream.setCurrentRequest(r2);
+            stream.write(buf, 2, 2);
+            stream.write(buf, 1, 3);
+            assertEquals(MAX_PROGRESS, stream.getBatchProgress());
+
+            assertEquals(stream.getMaxProgress(), stream.getBatchProgress());
+            assertEquals(progressMap.get(r1).getMaxProgress(), progressMap.get(r1).getProgress());
+            assertEquals(progressMap.get(r2).getMaxProgress(), progressMap.get(r2).getProgress());
+        }
+        catch (Exception ex) {
+            fail(ex.getMessage());
+        }
+    }
+}
\ No newline at end of file
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
index f162977d7..bdb34a78b 100644
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ b/facebook/tests/src/com/facebook/RequestTests.java
@@ -732,6 +732,57 @@ public void onCompleted(Response response) {
         assertTrue(calledBack.size() == 1);
     }
 
+    @MediumTest
+    @LargeTest
+    public void testOnProgressCallbackIsCalled() {
+        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
+
+        Request request = Request.newUploadPhotoRequest(null, image, null);
+        assertTrue(request != null);
+
+        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
+        request.setCallback(new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                calledBack.add(true);
+            }
+        });
+
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+        assertFalse(calledBack.isEmpty());
+    }
+
+    @MediumTest
+    @LargeTest
+    public void testLastOnProgressCallbackIsCalledOnce() {
+        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
+
+        Request request = Request.newUploadPhotoRequest(null, image, null);
+        assertTrue(request != null);
+
+        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
+        request.setCallback(new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                if (current == max) calledBack.add(true);
+                else if (current > max) calledBack.clear();
+            }
+        });
+
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+        assertEquals(1, calledBack.size());
+    }
+
     @MediumTest
     @LargeTest
     public void testBatchTimeoutIsApplied() {
diff --git a/facebook/tests/src/com/facebook/SessionTestsBase.java b/facebook/tests/src/com/facebook/SessionTestsBase.java
index c7b673594..abbb6d2c3 100644
--- a/facebook/tests/src/com/facebook/SessionTestsBase.java
+++ b/facebook/tests/src/com/facebook/SessionTestsBase.java
@@ -16,11 +16,8 @@
 
 package com.facebook;
 
-import android.content.BroadcastReceiver;
 import android.content.Context;
-import android.content.Intent;
 import android.os.Bundle;
-import android.os.ConditionVariable;
 import android.os.Looper;
 import com.facebook.internal.Utility;
 
diff --git a/facebook/tests/src/com/facebook/SettingsTests.java b/facebook/tests/src/com/facebook/SettingsTests.java
index 2638f4ef3..435de6d40 100644
--- a/facebook/tests/src/com/facebook/SettingsTests.java
+++ b/facebook/tests/src/com/facebook/SettingsTests.java
@@ -84,7 +84,7 @@ public void testLogdException() {
         }
 
         try {
-            throw new IOException(null);
+            throw new IOException((String)null);
         } catch (IOException e) {
             Utility.logd("SettingsTest", e);
         }
diff --git a/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java b/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
index 4055df6bb..412917b8b 100644
--- a/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
+++ b/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
@@ -47,7 +47,11 @@ public void incrementExpectCount(int n) {
     }
 
     public void waitForExpectedCalls() {
-        if (!condition.block(SessionTestsBase.DEFAULT_TIMEOUT_MILLISECONDS)) {
+        this.waitForExpectedCalls(SessionTestsBase.DEFAULT_TIMEOUT_MILLISECONDS);
+    }
+
+    public void waitForExpectedCalls(long timeoutMillis) {
+        if (!condition.block(timeoutMillis)) {
             Assert.assertTrue(false);
         }
     }
@@ -74,7 +78,7 @@ public void onReceive(Context context, Intent intent) {
             condition.open();
         }
         receivedIntents.add(intent);
-        Assert.assertTrue(actualCount <= expectCount);
+        Assert.assertTrue("expecting " + expectCount + "broadcasts, but received " + actualCount,                actualCount <= expectCount);
         Assert.assertEquals("BroadcastReceiver should receive on main UI thread",
                 Thread.currentThread(), Looper.getMainLooper().getThread());
     }
diff --git a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
index 47e92bc36..d4e24b052 100644
--- a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
+++ b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
@@ -157,6 +157,9 @@ public void testCacheSizeLimit() throws Exception {
             assertTrue(cache.sizeInBytesForTest() < Math.min(2 * totalDataSize, cacheSize));
         }
 
+        // sleep for a bit to make sure the trim finishes
+        Thread.sleep(5000);
+
         // Verify that some keys exist and others do not
         boolean hasValueExists = false;
         boolean hasNoValueExists = false;
@@ -190,6 +193,9 @@ public void testCacheCountLimit() throws Exception {
             put(cache, i, data);
         }
 
+        // sleep for a bit to make sure the trim finishes
+        Thread.sleep(5000);
+
         // Verify that some keys exist and others do not
         boolean hasValueExists = false;
         boolean hasNoValueExists = false;
diff --git a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
index 801b1d5cb..8b069b7ce 100644
--- a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
+++ b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
@@ -463,7 +463,7 @@ public void testSetPropertyWithGraphObjectList() throws JSONException {
         JSONObject jsonObject = new JSONObject();
         GraphObject graphObject = GraphObject.Factory.create(jsonObject);
 
-        GraphObjectList nestedList = GraphObject.Factory.createList(GraphObject.class);
+        GraphObjectList<GraphObject> nestedList = GraphObject.Factory.createList(GraphObject.class);
         graphObject.setProperty("foo", nestedList);
 
         JSONArray nestedJsonArray = jsonObject.getJSONArray("foo");
diff --git a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
index 9724ccc26..444d48836 100644
--- a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
+++ b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
@@ -16,17 +16,16 @@
 
 package com.facebook.widget;
 
-import android.content.Intent;
 import android.graphics.Bitmap;
-import android.os.Bundle;
+import com.facebook.FacebookException;
 import com.facebook.FacebookTestCase;
-import com.facebook.internal.NativeProtocol;
 import com.facebook.model.GraphObject;
 import com.facebook.model.OpenGraphAction;
 import com.facebook.model.OpenGraphObject;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -228,6 +227,7 @@ public void testOpenGraphDialogBuilderRequiresPreviewPropertyToExist() {
         }
     }
 
+    @SuppressWarnings("deprecation")
     public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionType() {
         try {
             OpenGraphAction action = OpenGraphAction.Factory.createForPost();
@@ -243,6 +243,7 @@ public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionType()
 
     }
 
+    @SuppressWarnings("deprecation")
     public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionTypeMatches() {
         try {
             OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
@@ -255,6 +256,5 @@ public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionTypeMat
             fail("expected exception");
         } catch (IllegalArgumentException exception) {
         }
-
     }
 }
diff --git a/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java b/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
index 386a8e191..185caa0b8 100644
--- a/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
+++ b/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
@@ -22,7 +22,6 @@
 import com.facebook.SessionDefaultAudience;
 import com.facebook.SessionLoginBehavior;
 
-import java.util.Arrays;
 import java.util.List;
 
 public class UserSettingsFragmentTests extends FragmentTestCase<UserSettingsFragmentTests.TestActivity> {
diff --git a/gradle/gradle/wrapper/gradle-wrapper.jar b/gradle/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..667288ad6
Binary files /dev/null and b/gradle/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/gradle/wrapper/gradle-wrapper.properties b/gradle/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..221ce08bc
--- /dev/null
+++ b/gradle/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Mon Nov 04 15:03:41 PST 2013
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-bin.zip
diff --git a/gradle/gradlew b/gradle/gradlew
new file mode 100755
index 000000000..91a7e269e
--- /dev/null
+++ b/gradle/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradle/gradlew.bat b/gradle/gradlew.bat
new file mode 100644
index 000000000..aec99730b
--- /dev/null
+++ b/gradle/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..667288ad6
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..75b72d4da
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Feb 05 10:18:08 PST 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.9-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 000000000..91a7e269e
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 000000000..aec99730b
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/samples/FriendPickerSample/FriendPickerSample.iml b/samples/FriendPickerSample/FriendPickerSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/FriendPickerSample/FriendPickerSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/FriendPickerSample/build.gradle b/samples/FriendPickerSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/FriendPickerSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
index e6563d2d2..9d901ca84 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
@@ -19,18 +19,18 @@
 import android.app.Application;
 import com.facebook.model.GraphUser;
 
-import java.util.Collection;
+import java.util.List;
 
 // We use a custom Application class to store our minimal state data (which users have been selected).
 // A real-world application will likely require a more robust data model.
 public class FriendPickerApplication extends Application {
-    private Collection<GraphUser> selectedUsers;
+    private List<GraphUser> selectedUsers;
 
-    public Collection<GraphUser> getSelectedUsers() {
+    public List<GraphUser> getSelectedUsers() {
         return selectedUsers;
     }
 
-    public void setSelectedUsers(Collection<GraphUser> selectedUsers) {
+    public void setSelectedUsers(List<GraphUser> selectedUsers) {
         this.selectedUsers = selectedUsers;
     }
 }
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
index f91d86b87..1c8ec2b62 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
@@ -137,9 +137,6 @@ private void onClickPickFriends() {
 
     private void startPickFriendsActivity() {
         if (ensureOpenSession()) {
-            FriendPickerApplication application = (FriendPickerApplication) getApplication();
-            application.setSelectedUsers(null);
-
             Intent intent = new Intent(this, PickFriendsActivity.class);
             // Note: The following line is optional, as multi-select behavior is the default for
             // FriendPickerFragment. It is here to demonstrate how parameters could be passed to the
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
index 720706315..879cd62bd 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
@@ -22,9 +22,12 @@
 import android.support.v4.app.FragmentManager;
 import android.widget.Toast;
 import com.facebook.FacebookException;
+import com.facebook.model.GraphUser;
 import com.facebook.widget.FriendPickerFragment;
 import com.facebook.widget.PickerFragment;
 
+import java.util.List;
+
 // This class provides an example of an Activity that uses FriendPickerFragment to display a list of
 // the user's friends. It takes a programmatic approach to creating the FriendPickerFragment with the
 // desired parameters -- see PickPlaceActivity in the PlacePickerSample project for an example of an
@@ -93,6 +96,11 @@ private void onError(Exception error) {
     protected void onStart() {
         super.onStart();
         try {
+            FriendPickerApplication application = (FriendPickerApplication) getApplication();
+            List<GraphUser> selectedUsers = application.getSelectedUsers();
+            if (selectedUsers != null && !selectedUsers.isEmpty()) {
+                friendPickerFragment.setSelection(selectedUsers);
+            }
             // Load data, unless a query has already taken place.
             friendPickerFragment.loadData(false);
         } catch (Exception ex) {
diff --git a/samples/GraphApiSample/GraphApiSample.iml b/samples/GraphApiSample/GraphApiSample.iml
deleted file mode 100644
index 7a46ab734..000000000
--- a/samples/GraphApiSample/GraphApiSample.iml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/GraphApiSample/build.gradle b/samples/GraphApiSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/GraphApiSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java b/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
index 2a076f105..444926c02 100644
--- a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
+++ b/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
@@ -33,7 +33,7 @@
 import java.util.List;
 
 public class GraphApiSampleActivity extends Activity {
-    static final String appId = "307234779396415";
+    static final String APP_ID = "307234779396415";
     static final String PENDING_REQUEST_BUNDLE_KEY = "com.facebook.samples.graphapi:PendingRequest";
 
     Button buttonRequest;
@@ -73,7 +73,7 @@ protected void onResume() {
 
         // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
         // the onResume methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.activateApp(this);
+        AppEventsLogger.activateApp(this, APP_ID);
     }
 
     @Override
@@ -139,13 +139,13 @@ public void onCompleted(Response response) {
             }));
         }
         pendingRequest = false;
-        Request.executeBatchAndWait(requests);
+        Request.executeBatchAsync(requests);
     }
 
     private Session createSession() {
         Session activeSession = Session.getActiveSession();
         if (activeSession == null || activeSession.getState().isClosed()) {
-            activeSession = new Session.Builder(this).setApplicationId(appId).build();
+            activeSession = new Session.Builder(this).setApplicationId(APP_ID).build();
             Session.setActiveSession(activeSession);
         }
         return activeSession;
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index 246d0de24..04809d609 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -22,5 +22,13 @@
                   android:theme="@android:style/Theme.Translucent.NoTitleBar"
                   android:label="@string/app_name" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
+        <provider android:authorities="com.facebook.app.NativeAppCallContentProvider355198514515820"
+                  android:name="com.facebook.NativeAppCallContentProvider"
+                  android:exported="true"/>
+        <receiver android:name="com.facebook.samples.hellofacebook.HelloFacebookBroadcastReceiver">
+            <intent-filter>
+                <action android:name="com.facebook.platform.AppCallResultBroadcast" />
+            </intent-filter>
+        </receiver>
     </application>
 </manifest>
diff --git a/samples/HelloFacebookSample/HelloFacebookSample.iml b/samples/HelloFacebookSample/HelloFacebookSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/HelloFacebookSample/HelloFacebookSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/HelloFacebookSample/build.gradle b/samples/HelloFacebookSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/HelloFacebookSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java
new file mode 100644
index 000000000..a1328155e
--- /dev/null
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java
@@ -0,0 +1,40 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.hellofacebook;
+
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.FacebookBroadcastReceiver;
+
+/**
+ * This is a simple example to demonstrate how an app could extend FacebookBroadcastReceiver to handle
+ * notifications that long-running operations such as photo uploads have finished.
+ */
+public class HelloFacebookBroadcastReceiver extends FacebookBroadcastReceiver {
+
+    @Override
+    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " succeeded."));
+    }
+
+    @Override
+    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was not uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " failed."));
+    }
+}
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
index bf374a95c..33485efb4 100644
--- a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
@@ -65,6 +65,7 @@
     private GraphPlace place;
     private List<GraphUser> tags;
     private boolean canPresentShareDialog;
+    private boolean canPresentShareDialogWithPhotos;
 
     private enum PendingAction {
         NONE,
@@ -175,8 +176,12 @@ public void onBackStackChanged() {
             }
         });
 
+        // Can we present the share dialog for regular links?
         canPresentShareDialog = FacebookDialog.canPresentShareDialog(this,
                 FacebookDialog.ShareDialogFeature.SHARE_DIALOG);
+        // Can we present the share dialog for photos?
+        canPresentShareDialogWithPhotos = FacebookDialog.canPresentShareDialog(this,
+                FacebookDialog.ShareDialogFeature.PHOTOS);
     }
 
     @Override
@@ -238,7 +243,7 @@ private void updateUI() {
         boolean enableButtons = (session != null && session.isOpened());
 
         postStatusUpdateButton.setEnabled(enableButtons || canPresentShareDialog);
-        postPhotoButton.setEnabled(enableButtons);
+        postPhotoButton.setEnabled(enableButtons || canPresentShareDialogWithPhotos);
         pickFriendsButton.setEnabled(enableButtons);
         pickPlaceButton.setEnabled(enableButtons);
 
@@ -295,7 +300,7 @@ private void onClickPostStatusUpdate() {
         performPublish(PendingAction.POST_STATUS_UPDATE, canPresentShareDialog);
     }
 
-    private FacebookDialog.ShareDialogBuilder createShareDialogBuilder() {
+    private FacebookDialog.ShareDialogBuilder createShareDialogBuilderForLink() {
         return new FacebookDialog.ShareDialogBuilder(this)
                 .setName("Hello Facebook")
                 .setDescription("The 'Hello Facebook' sample application showcases simple Facebook integration")
@@ -304,7 +309,7 @@ private void onClickPostStatusUpdate() {
 
     private void postStatusUpdate() {
         if (canPresentShareDialog) {
-            FacebookDialog shareDialog = createShareDialogBuilder().build();
+            FacebookDialog shareDialog = createShareDialogBuilderForLink().build();
             uiHelper.trackPendingDialogCall(shareDialog.present());
         } else if (user != null && hasPublishPermission()) {
             final String message = getString(R.string.status_update, user.getFirstName(), (new Date().toString()));
@@ -322,12 +327,20 @@ public void onCompleted(Response response) {
     }
 
     private void onClickPostPhoto() {
-        performPublish(PendingAction.POST_PHOTO, false);
+        performPublish(PendingAction.POST_PHOTO, canPresentShareDialogWithPhotos);
+    }
+
+    private FacebookDialog.PhotoShareDialogBuilder createShareDialogBuilderForPhoto(Bitmap... photos) {
+        return new FacebookDialog.PhotoShareDialogBuilder(this)
+                .addPhotos(Arrays.asList(photos));
     }
 
     private void postPhoto() {
-        if (hasPublishPermission()) {
-            Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
+        Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
+        if (canPresentShareDialogWithPhotos) {
+            FacebookDialog shareDialog = createShareDialogBuilderForPhoto(image).build();
+            uiHelper.trackPendingDialogCall(shareDialog.present());
+        } else if (hasPublishPermission()) {
             Request request = Request.newUploadPhotoRequest(Session.getActiveSession(), image, new Request.Callback() {
                 @Override
                 public void onCompleted(Response response) {
diff --git a/samples/PlacePickerSample/PlacePickerSample.iml b/samples/PlacePickerSample/PlacePickerSample.iml
deleted file mode 100644
index 2e07730b5..000000000
--- a/samples/PlacePickerSample/PlacePickerSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/PlacePickerSample/build.gradle b/samples/PlacePickerSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/PlacePickerSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/ProfilePictureSample/ProfilePictureSample.iml b/samples/ProfilePictureSample/ProfilePictureSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/ProfilePictureSample/ProfilePictureSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/ProfilePictureSample/build.gradle b/samples/ProfilePictureSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/ProfilePictureSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/RPSSample/RPSSample.iml b/samples/RPSSample/RPSSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/RPSSample/RPSSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/RPSSample/build.gradle b/samples/RPSSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/RPSSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/Scrumptious/Scrumptious.iml b/samples/Scrumptious/Scrumptious.iml
deleted file mode 100644
index 1cbea4d2f..000000000
--- a/samples/Scrumptious/Scrumptious.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="library" exported="" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/Scrumptious/build.gradle b/samples/Scrumptious/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/Scrumptious/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
index 3c23f1144..86265a074 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
@@ -58,6 +58,8 @@
     private static final String TAG = "SelectionFragment";
     private static final String MEAL_OBJECT_TYPE = "fb_sample_scrumps:meal";
     private static final String EAT_ACTION_TYPE = "fb_sample_scrumps:eat";
+    private static final String DEFAULT_ACTION_IMAGE_URL =
+            "http://facebooksampleapp.com/scrumptious/static/images/logo.png";
 
     private static final String PENDING_ANNOUNCE_KEY = "pendingAnnounce";
     private static final Uri M_FACEBOOK_URL = Uri.parse("http://m.facebook.com");
@@ -648,6 +650,7 @@ public void onClick(View view) {
         protected void populateOGAction(OpenGraphAction action) {
             if (foodChoice != null && foodChoice.length() > 0) {
                 EatAction eatAction = action.cast(EatAction.class);
+                eatAction.setImageUrls(Arrays.asList(DEFAULT_ACTION_IMAGE_URL));
                 if (foodChoiceUrl != null && foodChoiceUrl.length() > 0) {
                     MealGraphObject meal = GraphObject.Factory.create(MealGraphObject.class);
                     meal.setUrl(foodChoiceUrl);
@@ -656,8 +659,6 @@ protected void populateOGAction(OpenGraphAction action) {
                     MealGraphObject meal = OpenGraphObject.Factory.createForPost(MealGraphObject.class,
                             MEAL_OBJECT_TYPE);
                     meal.setTitle(foodChoice);
-                    meal.setImageUrls(Arrays.asList(
-                            "https://fbcdn-photos-a.akamaihd.net/photos-ak-snc7/v85005/200/233936543368280/app_1_233936543368280_595563194.gif"));
                     eatAction.setMeal(meal);
                 }
             }
diff --git a/samples/SessionLoginSample/SessionLoginSample.iml b/samples/SessionLoginSample/SessionLoginSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/SessionLoginSample/SessionLoginSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SessionLoginSample/build.gradle b/samples/SessionLoginSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/SessionLoginSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/SwitchUserSample/SwitchUserSample.iml b/samples/SwitchUserSample/SwitchUserSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/SwitchUserSample/SwitchUserSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SwitchUserSample/build.gradle b/samples/SwitchUserSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/SwitchUserSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 000000000..8fb89427e
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,28 @@
+// Facebook SDK
+include ':facebook'
+
+// Tests
+include 'TestApp'
+project(':TestApp').projectDir = new File('facebook/TestApp')
+include 'tests'
+project(':tests').projectDir = new File('facebook/tests')
+
+// Samples
+include 'FriendPickerSample'
+project(':FriendPickerSample').projectDir = new File('samples/FriendPickerSample')
+include 'GraphApiSample'
+project(':GraphApiSample').projectDir = new File('samples/GraphApiSample')
+include 'HelloFacebookSample'
+project(':HelloFacebookSample').projectDir = new File('samples/HelloFacebookSample')
+include 'PlacePickerSample'
+project(':PlacePickerSample').projectDir = new File('samples/PlacePickerSample')
+include 'ProfilePictureSample'
+project(':ProfilePictureSample').projectDir = new File('samples/ProfilePictureSample')
+include 'RPSSample'
+project(':RPSSample').projectDir = new File('samples/RPSSample')
+include 'Scrumptious'
+project(':Scrumptious').projectDir = new File('samples/Scrumptious')
+include 'SessionLoginSample'
+project(':SessionLoginSample').projectDir = new File('samples/SessionLoginSample')
+include 'SwitchUserSample'
+project(':SwitchUserSample').projectDir = new File('samples/SwitchUserSample')
