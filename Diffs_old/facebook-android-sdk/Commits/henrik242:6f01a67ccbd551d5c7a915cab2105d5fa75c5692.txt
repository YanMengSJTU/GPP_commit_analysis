diff --git a/Facebook.apk b/Facebook.apk
new file mode 100644
index 000000000..599955524
Binary files /dev/null and b/Facebook.apk differ
diff --git a/README.md b/README.md
index 7c57460dc..43aeb9883 100644
--- a/README.md
+++ b/README.md
@@ -1,130 +1,170 @@
-*June 4, 2010: The project configuration has been updated based on user feedback to reduce the number of configuration problems in Eclipse, and to provide better support for those using other build tools, such as Ant.  If you pull this configuration from GitHub, you may need to update your project configuration, or create a new project with your source -- see the set up instructions below.*
+This open source Java library allows you to integrate Facebook into your Android application. Except as otherwise noted, the Facebook Android SDK is licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
 
-This open source Java library allows you to integrate Facebook into your Android application.
+Getting Started
+===============
 
-Except as otherwise noted, the Facebook Connect Android SDK is licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
+The SDK is lightweight and has no external dependencies. Getting started is easy.
 
-Alpha Status
-============
+Setup your environment
+--------------------------
 
-This is an _alpha_ release. In order to guide the development of the library and allow you to freely inspect and use the source, we have open-sourced the library. The underlying APIs are generally stable, however we may make changes to the library in response to developer feedback.
+1. Pull the repository from GitHub:
 
-Known Issues
-------------
+    git clone git://github.com/facebook/facebook-android-sdk.git
 
-1. In the Facebook login dialog, the WebKit WebView password field misaligns text input and does not display correctly on Android 2.0 and 2.1.  This is corrected in Android 2.2 (Froyo): see http://code.google.com/p/android/issues/detail?id=5596
+2. If you have not already done so, follow the (http://developer.android.com/sdk/index.html)[Android SDK Getting Started Guide]. You will need the device emulator and debugging tools.
 
-2. The example apps do not automatically redraw a dialog if the screen orientation changes.
+3. The Facebook Android SDK works fine in any Android development environment. To build in Eclipse:
 
-3. Binary API parameters (such as uploading pictures) is not yet supported -- coming soon, but if you have already implemented it, feel free to send us a patch!
+  * Create a new project for the Facebook SDK in your Eclipse workspace. 
+  * Select __File__ -> __New__ -> __Project__, choose __Android Project__ (inside the Android folder), and then click __Next__.
+  * Select "Create project from existing source".
+  * Select the __facebook__ subdirectory from within the git repository. You should see the project properties populated (you might want to change the project name to something like "FacebookSDK").
+  * Click Finish to continue.
 
-4. The dialog webviews may be blank if an error occurs -- we are working on figuring these out and providing more debugging information.  Sorry for the frustration.
+The Facebook SDK is now configured and ready to go.  
 
-5. If you see "an invalid next or cancel parameter was specified" message in the login dialog, then you need to migrate your application to the New Data Permissions.  This can be done by going to http://www.facebook.com/developers/apps.php then selecting the application you are testing with, and clicking "Edit Settings" (the third item underneath Total Users).  On the settings page, click on Migrations (bottom of the left menu), then set New Data Permissions to "Enabled".
+Sample Applications
+--------------------
 
-Getting Started
-===============
+This library includes two sample applications to guide you in development.
 
-The SDK is lightweight and has no external dependencies. Getting started is quick and easy.
+* __simple__: A bare-bones app that demonstrates authorization, making API calls, and invoking a dialog.
 
-Install necessary packages
---------------------------
+![simple](http://sphotos.ak.fbcdn.net/hphotos-ak-snc4/hs935.snc4/74854_172094179474325_109700069047070_612899_4026782_n.jpg)
 
-* Follow the (http://developer.android.com/sdk/index.html)[Android SDK Getting Started Guide].  You will probably want do set up a device emulator and debugging tools (such as using "adb logcat" for viewing the device debugging and error log).
+* __stream__: This slightly beefier application lets you view your news feed.
 
-* Pull the read-only repository from github
+![stream](http://sphotos.ak.fbcdn.net/hphotos-ak-snc4/hs827.snc4/68752_172094172807659_109700069047070_612898_4403693_n.jpg)
 
-     e.g. "git clone git://github.com/facebook/facebook-android-sdk.git"
+To install a sample application into Eclipse (3.5):
 
-     (if you have trouble, you could also try "git clone http://github.com/facebook/facebook-android-sdk.git")
+* Create the sample application in your workspace:
+2. Select __File__ -> __New__ -> __Project__, choose __Android Project__, and then click __Next__.
+  3. Select "Create project from existing source".
+  4. Choose either __examples/simple__ or __examples/stream__. You should see the project properties populated.
+  5. Click Finish to continue.
 
-To build with Eclipse (3.5), do the following:
+* Build the project: from the Project menu, select "Build Project".
 
-* Create a new project for the Facebook SDK in your Eclipse workspace. 
-  * Open the __File__ menu, select New --> Project and choose __Android Project__ (inside the Android folder), then click Next.
-  * Select "Create project from existing source".
-  * Select the __facebook__ subdirectory from within the git repository. 
-  * You should see the project properties populated (you might want to change the project name to something like "FacebookSDK").
-  * Click Finish to continue.
+* Run the application: from the Run menu, select "Run Configurations...".  Under Android Application, you can create a new run configuration: give it a name and select the simple Example project; use the default activity Launch Action.  See http://developer.android.com/guide/developing/eclipse-adt.html#RunConfig for more details.
 
-The Facebook SDK is now configured and ready to go.  
+Integrate with an existing application
+-----------
 
-Run the sample application
---------------------------
+The easiest way to get started is to copy/hack up the sample applications (that's what they are there for). However, if you want to just integrate the Facebook SDK with an existing application (or create a new one from scratch), then you should:
 
-To test the SDK, you should run the simple sample application.  You can do this with Eclipse (3.5) as follows:
+* Add a dependency on the Facebook Android SDK library on your application:
+  1. Select __File__ -> __Properties__. Open the __Android__ section within the Properties dialog.
+  2. In the bottom __Library__ section, click __Add...__ and select the Facebook SDK project.
+  3. Any issues? Check [Android documentation](http://developer.android.com/guide/developing/eclipse-adt.html#libraryProject)
 
-* Create the sample application in your workspace:
-  * Repeat as described above, but choose the __examples/simple__ subdirectory from within the git repository.
-  * Add your Facebook application ID to the Example.java file.  This Facebook app should use the New Data Permissions, as described in the known issues section above.  If you do not have a Facebook application ID, you can create one: http://www.facebook.com/developers/createapp.php
+* Ensure that your application has network access (android.permission.INTERNET) in the Android manifest:
 
-Build the project: from the Project menu, select "Build Project".  You may see a build error about missing "gen" files, but this should go away when you build the project -- if you have trouble, try running "Clean..." in the Project menu.
+	<code><uses-permission android:name="android.permission.INTERNET"></uses-permission></code>
 
-Run the application: from the Run menu, select "Run Configurations...".  Under Android Application, you can create a new run configuration: give it a name and select the simple Example project; use the default activity Launch Action.  See http://developer.android.com/guide/developing/eclipse-adt.html#RunConfig for more details.
+* Register your application with Facebook:
+  1. Create a new Facebook application: http://www.facebook.com/developers/createapp.php . If you already have a canvas or web application, you can use the same application ID.
+  2. Set your application's name and picture. This is what users will see when they authorize your application.
 
-To run a sample application on a real device, ensure that the device has Internet access, and follow the instructions at http://developer.android.com/guide/developing/device.html 
+Set up single sign-on
+-----------
 
-Create your own application
----------------------------
+Optionally, you can make your login system more seamless by incorporating single sign-on.
 
-* Create a Facebook Application: http://www.facebook.com/developers/createapp.php
+* Register your application's Android key hash. This is used by Facebook to ensure that another app can't impersonate your app when talking to the Facebook Android app.
 
-* Check out the mobile documentation: http://developers.facebook.com/docs/guides/mobile/
+  1. Generate the key hash: <pre><code>keytool -exportcert -alias [alias] -keystore [keystore]
+  | openssl sha1 -binary
+  | openssl base64</code></pre>
 
-* Add a dependency on the Facebook Android SDK library on your application:
-  - from the File menu, select "Properties"
-  - once the project Properties are displayed, open the Android section, which should list the build targets and libraries
-  - in the bottom "Library" section, click "Add..." and select the Facebook SDK project
-  - refer to http://developer.android.com/guide/developing/eclipse-adt.html#libraryProject for more details  
+  2. In the Facebook developer settings, go to the __Mobile and Devices__ tab.
+  3. In the __Android__ section, enter the key hash in the __Key Hash__ field.
 
-* Ensure that your application has network access (android.permission.INTERNET) in the Android manifest:
+![keyhash](http://sphotos.ak.fbcdn.net/hphotos-ak-snc4/hs992.snc4/76543_172095306140879_109700069047070_612908_7263236_n.jpg)
 
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
+* Insert a call to the authorizeCallback() method at the top of your Activity's onActivityResult() function. (If onActivityResult doesn't already exist, then create it)
 
+      @Override
+      public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        facebook.authorizeCallback(requestCode, resultCode, data);
+        // ... anything else your app does onActivityResult ...
+      }
 
-Usage
-=====
+Testing
+-------
+
+Here are some tips to help test your application:
+
+* You will need to have the Facebook application in your test environment. The SDK includes a developer release of the Facebook application that can be side-loaded for testing purposes. On an actual device, you can just download the latest version of the app from the Android Market, but on the emulator you will have to install it yourself:
+
+      adb install FBAndroid.apk
 
-With the Android SDK, you can do three main things:
+* Use a signed build. You can sign with a debug key, but make sure that the key you used to sign matches the __Key Hash__ field in the Facebook developer settings.
 
-* Authorize users: prompt users to log in to facebook and grant access permission to your application.
+* Make sure to test both with and without the Facebook application. The SDK will fall back to a Webview if the Facebook app is not installed.
 
-User credentials are not handled by the Android application in this SDK: authentication is done in an embedded WebKit WebView using the OAuth 2.0 User-Agent flow to obtain an access token.
+* You can use this [guide to developing on a device](http://developer.android.com/guide/developing/device.html).
 
-* Make API requests
+Usage
+=====
 
-Requests to the Facebook Graph and older APIs are supported in this SDK.  Authenticated requests are done over https using the OAuth access token.
+Begin by instantiating the Facebook object:
 
-* Display a Facebook dialog
+    facebook = new Facebook(applicationId);
 
-The SDK supports several WebView html dialogs for user interactions, such as creating a wall post.  This is intended to provided quick Facebook functionality without having to implement a native Android UI and pass data to facebook directly though the APIs.
+The Facebook object lets you do three major things:
+
+* __Authentication and Authorization__: prompt users to log in to facebook and grant permissions to your application.
+* __Making API Calls__: fetch user profile data (such as name and profile pic), as well as info about a user's friends.
+* __Display a dialog__: interact with user via a WebView. You primarily use this to publish to a user's feed without requiring upfront permissions.
 
 Authentication and Authorization
 --------------------------------
 
-User login and application permission requests use the same method: authorize(). By default, if you pass an empty ''permissions'' parameter, then you will get access to the user's basic information., which includes their name, profile picture, list of friends and other general information. For more information, see http://developers.facebook.com/docs/authentication/.
+#### Making the authorize request
+
+To login the current user, call the authorize() method. By default, your application can read the user's basic information, which includes their name, profile picture, list of friends, and other information that they have made public.
 
-If you pass in extra permissions in the permissions parameter (e.g. "publish_stream", "offline_access"), then the user will be prompted to grant these permissions.  "offline_access" is particularly useful, as it avoids access expiration and ongoing prompts to the user for access.  See http://developers.facebook.com/docs/authentication/permissions 
+    facebook.authorize(context, new AuthorizeListener());
 
-This SDK uses the (http://tools.ietf.org/html/draft-ietf-oauth-v2)["user-agent"] flow from OAuth 2.0 for authentication details.
+Private user information is protected by [a set of granular permissions](http://developers.facebook.com/docs/authentication/permissions). If you want to access private information, use the authorize() method to request permission:
 
-To authorize a user, the simplest usage is:
+    facebook.authorize(context, 
+                       String[] {"offline_access","user_photos"},
+                       new AuthorizeListener())
 
-     facebook = new Facebook();
-     facebook.authorize(context, applicationId, new String[] {}, new LoginDialogListener());
+You should use one of the buttons provided in the images/buttons/ directory to direct the user to login.
 
-The authorize method is asynchronous, generating a dialog with WebView content from Facebook, prompting the user to log in and grant access.  The DialogListener is a callback interface that your application must implement: it's methods will be invoked when the dialog process completes or ends in error.
+#### Login process
 
-See the sample applications for more specific code samples.
+If the user has installed and is logged into the latest Facebook application on their device, then they will be directed to the Facebook app to grant permissions. If the user is not logged in, then they will need to do that first. If the Facebook application is not installed at all, then the Facebook Android SDK will gracefully fall back to a WebView-based flow that requires username/password.
 
-When the user wants to stop using Facebook integration with your application, you can call the logout method to clear all application state and make a server request to invalidate the current OAuth 2.0 token.
+#### Handle the authorize response
+
+Your application handles the response with the __onComplete__ method of a __DialogListener__ object.
+
+    class AuthorizeListener implements DialogListener {
+      public void onComplete(Bundle values) {
+       //  Handle a successful login
+      }
+    }
+
+Check out the sample listeners for more details on the DialogListener interface.
+
+### Logging out
+
+When the user wants to stop using Facebook integration with your application, you can call the logout method to clear all application state and invalidate the current OAuth token.
 
      facebook.logout(context);
 
-Accessing the Graph API
+Making API calls
 -----------------------
 
-The (http://developers.facebook.com/docs/api)[Facebook Graph API] presents a simple, consistent view of the Facebook social graph, uniformly representing objects in the graph (e.g., people, photos, events, and fan pages) and the connections between them (e.g., friend relationships, shared content, and photo tags).
+#### Graph API
+
+The [Facebook Graph API](http://developers.facebook.com/docs/api) presents a simple, consistent view of the Facebook social graph, uniformly representing objects in the graph (e.g., people, photos, events, and fan pages) and the connections between them (e.g., friend relationships, shared content, and photo tags).
 
 You can access the Graph API by passing the Graph Path to the ''request'' method. For example, to access information about the logged in user, call
 
@@ -132,7 +172,7 @@ You can access the Graph API by passing the Graph Path to the ''request'' method
     facebook.request("platform/posts");   // get the posts made by the "platform" page
     facebook.request("me/friends");       // get the logged-in user's friends
 
-The request call is synchronous, meaning it will block the calling thread -- it should not be called from the main (UI) thread in Android. To make it non-blocking, you can make the request in a separate or background thread. For example:
+Because the request call is synchronous (meaning it will block the calling thread), it should not be called from the main (UI) thread in Android. To make it non-blocking, you can make the request in a separate or background thread. For example:
 
     new Thread() {
       @Override public void run() {
@@ -143,26 +183,57 @@ The request call is synchronous, meaning it will block the calling thread -- it
 
 See the AsyncFacebookRunner class and sample application for examples of making asynchronous requests.
 
-Note that the server response is in JSON string format.  The SDK provides a Util.parseJson() method to convert this to a JSONObject, whose fields and values can be inspected and accessed.  The sample implementation checks for a variety of error conditions and raises JSON or Facebook exceptions if the content is invalid or includes an error generated by the server.  Advanced applications may wish to provide their own parsing and error handling. 
+#### Response format 
+
+The server response is a JSON string.  The SDK provides a Util.parseJson() method to convert this to a JSONObject, whose fields and values can be inspected and accessed.  The sample implementation checks for a variety of error conditions and raises JSON or Facebook exceptions if the content is invalid or includes an error generated by the server.  Advanced applications may wish to provide their own parsing and error handling. 
+
+#### Old REST API
 
-The (http://developers.facebook.com/docs/reference/rest/)[Old REST API] is also supported. To access the older methods, pass in the named parameters and method name as a dictionary Bundle.
+The [Old REST API](http://developers.facebook.com/docs/reference/rest/) is also supported. To access the older methods, pass in the named parameters and method name as a dictionary Bundle.
 
     Bundle parameters = new Bundle();
     parameters.putString("method", "auth.expireSession");
     String response = request(parameters);
 
-See the javadoc for the request method for more details.
+See the comments on the __request__ method for more details.
 
-User Interface Dialogs
+<a name="dialogs"/>
+Display a Dialog
 ----------------------
 
-This SDK provides a method for popping up a Facebook dialog.  The currently supported dialogs are the login and permissions dialogs used in the authorization flow, and a "stream.publish" flow for making a wall post.  The dialog method requires an Android context to run in, an action to perform, and a DialogListener callback interface for notification that must be implemented by the application.  For example,
+This SDK provides a method for popping up a Facebook dialog for user interaction. This is useful if you want to publish to a user's feed without requesting a bunch of permissions first.
 
-    facebook.dialog(context, "stream.publish", new SampleDialogListener()); 
+To invoke a dialog:
+
+    facebook.dialog(context, 
+                    "feed", 
+                    new SampleDialogListener()); 
 
-This allows you to provide basic Facebook functionality in your application with a singe line of code -- no need to build native dialogs, make API calls, or handle responses.
 
 Error Handling
 --------------
 
 For synchronous methods (request), errors are thrown by exception. For the asynchronous methods (dialog, authorize), errors are passed to the onException methods of the listener callback interface.
+
+Debugging
+==========
+
+Here's a few common errors and their solutions.
+
+* __Build error: "missing gen files".__
+
+  This should go away when you rebuild the project. If you have trouble, try running __Clean...__ from the __Project__ menu.
+
+* __Error: "invalid_key"__
+
+  This error means that the Facebook server doesn't recognize your Android key hash. Make sure that you correctly generated and copy/pasted your key hash into the Facebook developer settings console (http://www.facebook.com/developers/apps.php), and make sure that your application has been signed with the same key you registered with Facebook.
+
+* __Dialog won't load or shows a blank screen.__
+
+  This can be tricky to debug. If the logs don't give an indication of what's wrong, I suggest installing tcpdump on your device and getting a trace. Tutorial: http://www.vbsteven.be/blog/android-debugging-inspectin-network-traffic-with-tcpdump/
+
+  If you still can't tell what's going on, then file an issue and please include the HTTP trace.
+
+* __I can't upload photos with photos.upload.__
+
+  Make sure the Bundle value for the photo parameter is a byte array.
diff --git a/examples/simple/default.properties b/examples/simple/default.properties
index f90bb6b9e..b7d41a0be 100644
--- a/examples/simple/default.properties
+++ b/examples/simple/default.properties
@@ -12,4 +12,4 @@ android.library.reference.1=../../facebook/
 split.density=false
 android.library.reference.1=../../facebook/
 # Project target.
-target=android-7
+target=android-4
diff --git a/examples/simple/src/com/facebook/android/Example.java b/examples/simple/src/com/facebook/android/Example.java
index d1dfcce75..26fad3bd5 100644
--- a/examples/simple/src/com/facebook/android/Example.java
+++ b/examples/simple/src/com/facebook/android/Example.java
@@ -16,15 +16,17 @@
 
 package com.facebook.android;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import com.facebook.android.BaseRequestListener;
-import com.facebook.android.BaseDialogListener;
-import com.facebook.android.SessionEvents.AuthListener;
-import com.facebook.android.SessionEvents.LogoutListener;
-
 import android.app.Activity;
+import android.content.Intent;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
@@ -32,21 +34,16 @@
 import android.widget.Button;
 import android.widget.TextView;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
+import com.facebook.android.SessionEvents.AuthListener;
+import com.facebook.android.SessionEvents.LogoutListener;
 
 
 public class Example extends Activity {
     
     // Your Facebook Application ID must be set before running this example
     // See http://www.facebook.com/developers/createapp.php
-    public static final String APP_ID = "bef2531d19d24b426548bd02a5c84dd1";
+    public static final String APP_ID = null;
     
-    private static final String[] PERMISSIONS =
-        new String[] {"publish_stream", "read_stream", "offline_access"};
     private LoginButton mLoginButton;
     private TextView mText;
     private Button mRequestButton;
@@ -75,13 +72,13 @@ public void onCreate(Bundle savedInstanceState) {
         mDeleteButton = (Button) findViewById(R.id.deletePostButton);
         mUploadButton = (Button) findViewById(R.id.uploadButton);
         
-       	mFacebook = new Facebook();
+       	mFacebook = new Facebook(APP_ID);
        	mAsyncRunner = new AsyncFacebookRunner(mFacebook);
        
         SessionStore.restore(mFacebook, this);
         SessionEvents.addAuthListener(new SampleAuthListener());
         SessionEvents.addLogoutListener(new SampleLogoutListener());
-        mLoginButton.init(mFacebook, PERMISSIONS);
+        mLoginButton.init(this, mFacebook);
         
         mRequestButton.setOnClickListener(new OnClickListener() {
             public void onClick(View v) {
@@ -129,7 +126,7 @@ public void onClick(View v) {
         
         mPostButton.setOnClickListener(new OnClickListener() {
             public void onClick(View v) {
-                mFacebook.dialog(Example.this, "stream.publish", 
+                mFacebook.dialog(Example.this, "feed",
                         new SampleDialogListener());          
             }
         });
@@ -138,6 +135,12 @@ public void onClick(View v) {
                 View.INVISIBLE);
     }
     
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode,
+                                    Intent data) {
+        mFacebook.authorizeCallback(requestCode, resultCode, data);
+    }
+
     public class SampleAuthListener implements AuthListener {
         
         public void onAuthSucceed() {
diff --git a/examples/simple/src/com/facebook/android/LoginButton.java b/examples/simple/src/com/facebook/android/LoginButton.java
index dbfc52f43..639506716 100644
--- a/examples/simple/src/com/facebook/android/LoginButton.java
+++ b/examples/simple/src/com/facebook/android/LoginButton.java
@@ -21,6 +21,7 @@
 import com.facebook.android.SessionEvents.LogoutListener;
 import com.facebook.android.Facebook.DialogListener;
 
+import android.app.Activity;
 import android.content.Context;
 import android.graphics.Color;
 import android.os.Bundle;
@@ -35,6 +36,7 @@
     private Handler mHandler;
     private SessionListener mSessionListener = new SessionListener();
     private String[] mPermissions;
+    private Activity mActivity;
     
     public LoginButton(Context context) {
         super(context);
@@ -48,7 +50,13 @@ public LoginButton(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
     }
     
-    public void init(final Facebook fb, final String[] permissions) {
+    public void init(final Activity activity, final Facebook fb) {
+    	init(activity, fb, new String[] {});
+    }
+    
+    public void init(final Activity activity, final Facebook fb,
+                     final String[] permissions) {
+        mActivity = activity;
         mFb = fb;
         mPermissions = permissions;
         mHandler = new Handler();
@@ -73,8 +81,8 @@ public void onClick(View arg0) {
                 AsyncFacebookRunner asyncRunner = new AsyncFacebookRunner(mFb);
                 asyncRunner.logout(getContext(), new LogoutRequestListener());
             } else {
-                mFb.authorize(getContext(), Example.APP_ID, mPermissions,
-                        new LoginDialogListener());
+                mFb.authorize(mActivity, mPermissions,
+                              new LoginDialogListener());
             }
         }
     }
diff --git a/examples/stream/default.properties b/examples/stream/default.properties
index e5db9b746..7a4beed44 100644
--- a/examples/stream/default.properties
+++ b/examples/stream/default.properties
@@ -12,4 +12,4 @@ android.library.reference.1=../../facebook/
 split.density=false
 android.library.reference.1=../../facebook/
 # Project target.
-target=android-3
+target=android-8
diff --git a/examples/stream/res/values/strings.xml b/examples/stream/res/values/strings.xml
index 7a651b966..a33b88605 100644
--- a/examples/stream/res/values/strings.xml
+++ b/examples/stream/res/values/strings.xml
@@ -1,6 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    
     <string name="app_name">stream</string>
-
-</resources>
+</resources>
\ No newline at end of file
diff --git a/examples/stream/src/com/facebook/stream/App.java b/examples/stream/src/com/facebook/stream/App.java
index d634914c4..4efca7aa6 100644
--- a/examples/stream/src/com/facebook/stream/App.java
+++ b/examples/stream/src/com/facebook/stream/App.java
@@ -18,7 +18,9 @@
 
 import android.app.Activity;
 import android.app.AlertDialog.Builder;
+import android.content.Intent;
 import android.os.Bundle;
+import com.facebook.android.Facebook;
 
 /**
  * This class implements the application's main Activity.
@@ -27,9 +29,11 @@
  */
 public class App extends Activity {
 
-    // Your Facebook Application ID must be set before running this example
+    // This is a demo application ID just to get this demo up and running
+    // If you modify this to work for your own app, you must use your
+    // own Facebook Application ID.
     // See http://www.facebook.com/developers/createapp.php
-    public static final String FB_APP_ID = null;
+    public static final String FB_APP_ID = "126642314059639";
 
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -57,4 +61,10 @@ public void onCreate(Bundle savedInstanceState) {
             dispatcher.runHandler("login");
         }
     }
+
+    protected void onActivityResult(int requestCode, int resultCode,
+                                    Intent data) {
+        Facebook fb = Session.wakeupForAuthCallback();
+        fb.authorizeCallback(requestCode, resultCode, data);
+    }
 }
diff --git a/examples/stream/src/com/facebook/stream/LoginHandler.java b/examples/stream/src/com/facebook/stream/LoginHandler.java
index 94bc57ec6..17defc4f2 100644
--- a/examples/stream/src/com/facebook/stream/LoginHandler.java
+++ b/examples/stream/src/com/facebook/stream/LoginHandler.java
@@ -68,9 +68,10 @@ public void run() {
                     // instance because Android apparently doesn't support
                     // multiple WebView instances in the same app.
                     dispatcher.hideWebView();
-                    final Facebook fb = new Facebook();
-                    fb.authorize(getActivity(), App.FB_APP_ID, PERMISSIONS, 
-                            new AppLoginListener(fb));
+                    final Facebook fb = new Facebook(App.FB_APP_ID);
+                    Session.waitForAuthCallback(fb);
+                    fb.authorize(getActivity(), PERMISSIONS,
+                                 new AppLoginListener(fb));
                 }
             });
         }
diff --git a/examples/stream/src/com/facebook/stream/Session.java b/examples/stream/src/com/facebook/stream/Session.java
index 1e3e135c4..f1af9ae74 100644
--- a/examples/stream/src/com/facebook/stream/Session.java
+++ b/examples/stream/src/com/facebook/stream/Session.java
@@ -34,8 +34,10 @@
     private static final String KEY = "facebook-session";
     private static final String UID = "uid";
     private static final String NAME = "name";
+    private static final String APP_ID = "app_id";
 
     private static Session singleton;
+    private static Facebook fbLoggingIn;
 
     // The Facebook object
     private Facebook fb;
@@ -94,6 +96,7 @@ public boolean save(Context context) {
         editor.putLong(EXPIRES, fb.getAccessExpires());
         editor.putString(UID, uid);
         editor.putString(NAME, name);
+        editor.putString(APP_ID, fb.getAppId());
         if (editor.commit()) {
             singleton = this;
             return true;
@@ -102,8 +105,7 @@ public boolean save(Context context) {
     }
 
     /**
-     * Loads the session data from disk. If the session
-     * has been loaded it's 
+     * Loads the session data from disk.
      * 
      * @param context
      * @return
@@ -119,7 +121,14 @@ public static Session restore(Context context) {
 
         SharedPreferences prefs =
             context.getSharedPreferences(KEY, Context.MODE_PRIVATE);
-        Facebook fb = new Facebook();
+        
+        String appId = prefs.getString(APP_ID, null);
+        
+        if (appId == null) {
+        	return null;
+        }
+        
+        Facebook fb = new Facebook(appId);
         fb.setAccessToken(prefs.getString(TOKEN, null));
         fb.setAccessExpires(prefs.getLong(EXPIRES, 0));
         String uid = prefs.getString(UID, null);
@@ -146,4 +155,20 @@ public static void clearSavedSession(Context context) {
         singleton = null;
     }
 
+    /**
+     * Freezes a Facebook object while it's waiting for an auth callback.
+     */
+    public static void waitForAuthCallback(Facebook fb) {
+        fbLoggingIn = fb;
+    }
+
+    /**
+     * Returns a Facebook object that's been waiting for an auth callback.
+     */
+    public static Facebook wakeupForAuthCallback() {
+        Facebook fb = fbLoggingIn;
+        fbLoggingIn = null;
+        return fb;
+    }
+
 }
diff --git a/examples/stream/src/com/facebook/stream/StreamRenderer.java b/examples/stream/src/com/facebook/stream/StreamRenderer.java
index fffcd1dbc..b7a470416 100644
--- a/examples/stream/src/com/facebook/stream/StreamRenderer.java
+++ b/examples/stream/src/com/facebook/stream/StreamRenderer.java
@@ -472,9 +472,11 @@ private void renderComments(JSONObject post) throws JSONException {
         JSONObject comments = post.optJSONObject("comments");
         if (comments != null) {
             JSONArray data = comments.optJSONArray("data");
-            for (int j = 0; j < data.length(); j++) {
-                JSONObject comment = data.getJSONObject(j);
-                renderComment(comment);
+            if (data != null) {
+                for (int j = 0; j < data.length(); j++) {
+                    JSONObject comment = data.getJSONObject(j);
+                    renderComment(comment);
+                }
             }
         }
         append("</div>");
diff --git a/facebook/res/drawable-mdpi/facebook_icon.png b/facebook/res/drawable/facebook_icon.png
similarity index 100%
rename from facebook/res/drawable-mdpi/facebook_icon.png
rename to facebook/res/drawable/facebook_icon.png
diff --git a/facebook/src/com/facebook/android/AsyncFacebookRunner.java b/facebook/src/com/facebook/android/AsyncFacebookRunner.java
index d5d07efa8..a2e995831 100644
--- a/facebook/src/com/facebook/android/AsyncFacebookRunner.java
+++ b/facebook/src/com/facebook/android/AsyncFacebookRunner.java
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
@@ -24,43 +24,43 @@
 import android.os.Bundle;
 
 /**
- * A sample implementation of asynchronous API requests.  This class provides
- * the ability to execute API methods and have the call return immediately, 
- * without blocking the calling thread.  This is necessary when accessing the 
- * API in the UI thread, for instance.  The request response is returned to 
+ * A sample implementation of asynchronous API requests. This class provides
+ * the ability to execute API methods and have the call return immediately,
+ * without blocking the calling thread. This is necessary when accessing the
+ * API in the UI thread, for instance. The request response is returned to 
  * the caller via a callback interface, which the developer must implement.
- * 
+ *
  * This sample implementation simply spawns a new thread for each request,
  * and makes the API call immediately.  This may work in many applications,
  * but more sophisticated users may re-implement this behavior using a thread
  * pool, a network thread, a request queue, or other mechanism.  Advanced
  * functionality could be built, such as rate-limiting of requests, as per
  * a specific application's needs.
- * 
+ *
  * @see RequestListener
  *        The callback interface.
- * 
+ *
  * @author ssoneff@facebook.com
  *
  */
 public class AsyncFacebookRunner {
 
-	Facebook fb;
-	
+    Facebook fb;
+
     public AsyncFacebookRunner(Facebook fb) {
-    	this.fb = fb;
+        this.fb = fb;
     }
 
     /**
      * Invalidate the current user session by removing the access token in
      * memory, clearing the browser cookies, and calling auth.expireSession
      * through the API. The application will be notified when logout is
-     * complete via the callback interface.  
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in a background thread; operations that affect the UI will need to be 
+     * complete via the callback interface.
+     *
+     * Note that this method is asynchronous and the callback will be invoked
+     * in a background thread; operations that affect the UI will need to be
      * posted to the UI thread or an appropriate handler.
-     * 
+     *
      * @param context
      *            The Android context in which the logout should be called: it
      *            should be the same context in which the login occurred in
@@ -90,26 +90,25 @@ public void logout(final Context context, final RequestListener listener) {
             }
         }.start();
     }
-    
+
     /**
-     * Make a request to Facebook's old (pre-graph) API with the given 
-     * parameters. One of the parameter keys must be "method" and its value 
+     * Make a request to Facebook's old (pre-graph) API with the given
+     * parameters. One of the parameter keys must be "method" and its value
      * should be a valid REST server API method.
-     * 
-     * 
+     *
      * See http://developers.facebook.com/docs/reference/rest/
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in a background thread; operations that affect the UI will need to be 
+     *
+     * Note that this method is asynchronous and the callback will be invoked
+     * in a background thread; operations that affect the UI will need to be
      * posted to the UI thread or an appropriate handler.
-     * 
-     * Example: 
+     *
+     * Example:
      * <code>
      *  Bundle parameters = new Bundle();
      *  parameters.putString("method", "auth.expireSession", new Listener());
      *  String response = request(parameters);
      * </code>
-     * 
+     *
      * @param parameters
      *            Key-value pairs of parameters to the request. Refer to the
      *            documentation: one of the parameters must be "method".
@@ -124,13 +123,13 @@ public void request(Bundle parameters,
 
     /**
      * Make a request to the Facebook Graph API without any parameters.
-     * 
+     *
      * See http://developers.facebook.com/docs/api
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in a background thread; operations that affect the UI will need to be 
+     *
+     * Note that this method is asynchronous and the callback will be invoked
+     * in a background thread; operations that affect the UI will need to be
      * posted to the UI thread or an appropriate handler.
-     * 
+     *
      * @param graphPath
      *            Path to resource in the Facebook graph, e.g., to fetch data
      *            about the currently logged authenticated user, provide "me",
@@ -147,13 +146,13 @@ public void request(String graphPath,
     /**
      * Make a request to the Facebook Graph API with the given string parameters
      * using an HTTP GET (default method).
-     * 
+     *
      * See http://developers.facebook.com/docs/api
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in a background thread; operations that affect the UI will need to be 
+     *
+     * Note that this method is asynchronous and the callback will be invoked
+     * in a background thread; operations that affect the UI will need to be
      * posted to the UI thread or an appropriate handler.
-     * 
+     *
      * @param graphPath
      *            Path to resource in the Facebook graph, e.g., to fetch data
      *            about the currently logged authenticated user, provide "me",
@@ -177,13 +176,13 @@ public void request(String graphPath,
      * Make a request to the Facebook Graph API with the given HTTP method and
      * string parameters. Note that binary data parameters (e.g. pictures) are
      * not yet supported by this helper function.
-     * 
+     *
      * See http://developers.facebook.com/docs/api
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in a background thread; operations that affect the UI will need to be 
+     *
+     * Note that this method is asynchronous and the callback will be invoked
+     * in a background thread; operations that affect the UI will need to be
      * posted to the UI thread or an appropriate handler.
-     * 
+     *
      * @param graphPath
      *            Path to resource in the Facebook graph, e.g., to fetch data
      *            about the currently logged authenticated user, provide "me",
@@ -200,12 +199,12 @@ public void request(String graphPath,
      *            has completed.
      */
     public void request(final String graphPath,
-                        final Bundle parameters, 
+                        final Bundle parameters,
                         final String httpMethod,
                         final RequestListener listener) {
         new Thread() {
             @Override public void run() {
-                try {              	
+                try {
                     String resp = fb.request(graphPath, parameters, httpMethod);
                     listener.onComplete(resp);
                 } catch (FileNotFoundException e) {
@@ -219,50 +218,48 @@ public void request(final String graphPath,
         }.start();
     }
 
-    
     /**
      * Callback interface for API requests.
-     *
      */
     public static interface RequestListener {
 
         /**
          * Called when a request completes with the given response.
-         * 
+         *
          * Executed by a background thread: do not update the UI in this method.
          */
         public void onComplete(String response);
 
         /**
          * Called when a request has a network or request error.
-         * 
+         *
          * Executed by a background thread: do not update the UI in this method.
          */
         public void onIOException(IOException e);
-        
+
         /**
-         * Called when a request fails because the requested resource is 
+         * Called when a request fails because the requested resource is
          * invalid or does not exist.
-         * 
+         *
          * Executed by a background thread: do not update the UI in this method.
          */
         public void onFileNotFoundException(FileNotFoundException e);
-        
+
         /**
-         * Called if an invalid graph path is provided (which may result in a 
+         * Called if an invalid graph path is provided (which may result in a
          * malformed URL).
-         * 
+         *
          * Executed by a background thread: do not update the UI in this method.
          */
         public void onMalformedURLException(MalformedURLException e);
-        
+
         /**
          * Called when the server-side Facebook method fails.
-         * 
+         *
          * Executed by a background thread: do not update the UI in this method.
          */
         public void onFacebookError(FacebookError e);
-        
+
     }
-    
+
 }
diff --git a/facebook/src/com/facebook/android/DialogError.java b/facebook/src/com/facebook/android/DialogError.java
index ff50a9405..51d06c9a1 100644
--- a/facebook/src/com/facebook/android/DialogError.java
+++ b/facebook/src/com/facebook/android/DialogError.java
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
@@ -18,19 +18,19 @@
 
 /**
  * Encapsulation of Dialog Error.
- * 
+ *
  * @author ssoneff@facebook.com
  */
 public class DialogError extends Throwable {
-    
+
     private static final long serialVersionUID = 1L;
 
-    /** 
+    /**
      * The ErrorCode received by the WebView: see
      * http://developer.android.com/reference/android/webkit/WebViewClient.html
      */
     private int mErrorCode;
-    
+
     /** The URL that the dialog was trying to load */
     private String mFailingUrl;
 
@@ -39,13 +39,13 @@ public DialogError(String message, int errorCode, String failingUrl) {
         mErrorCode = errorCode;
         mFailingUrl = failingUrl;
     }
-    
+
     int getErrorCode() {
         return mErrorCode;
     }
-    
+
     String getFailingUrl() {
         return mFailingUrl;
     }
-    
+
 }
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index f3bd4435a..f4f02a549 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
@@ -21,8 +21,15 @@
 import java.net.MalformedURLException;
 
 import android.Manifest;
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
 import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.pm.ResolveInfo;
+import android.content.pm.Signature;
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.Log;
@@ -33,134 +40,394 @@
  * Provides methods to log in and log out a user, make requests using the REST
  * and Graph APIs, and start user interface interactions with the API (such as
  * pop-ups promoting for credentials, permissions, stream posts, etc.)
- * 
- * @author Steven Soneff (ssoneff@facebook.com)
+ *
+ * @author  Jim Brusstar (jimbru@facebook.com),
+ *          Yariv Sadan (yariv@facebook.com),
+ *          Luke Shepard (lshepard@facebook.com)
  */
 public class Facebook {
 
-    /* Strings used in the OAuth flow */
+    // Strings used in the authorization flow
     public static final String REDIRECT_URI = "fbconnect://success";
-    public static final String CANCEL_URI = "fbconnect:cancel";
+    public static final String CANCEL_URI = "fbconnect://cancel";
     public static final String TOKEN = "access_token";
     public static final String EXPIRES = "expires_in";
-    
-    private static final String LOGIN = "login";
-
-    /* Facebook server endpoints: may be modified in a subclass for testing */
-    protected static String OAUTH_ENDPOINT = 
-        "https://graph.facebook.com/oauth/authorize";
-    protected static String UI_SERVER = 
-        "https://www.facebook.com/connect/uiserver.php";
-    protected static String GRAPH_BASE_URL = 
+    public static final String SINGLE_SIGN_ON_DISABLED = "service_disabled";
+
+    public static final int FORCE_DIALOG_AUTH = -1;
+
+    private static final String LOGIN = "oauth";
+
+    // Used as default activityCode by authorize(). See authorize() below.
+    private static final int DEFAULT_AUTH_ACTIVITY_CODE = 32665;
+
+    // Facebook server endpoints: may be modified in a subclass for testing
+    protected static String DIALOG_BASE_URL =
+        "https://m.facebook.com/dialog/";
+    protected static String GRAPH_BASE_URL =
         "https://graph.facebook.com/";
-    protected static String RESTSERVER_URL = 
+    protected static String RESTSERVER_URL =
         "https://api.facebook.com/restserver.php";
 
     private String mAccessToken = null;
     private long mAccessExpires = 0;
-    
+    private String mAppId;
+
+    private Activity mAuthActivity;
+    private String[] mAuthPermissions;
+    private int mAuthActivityCode;
+    private DialogListener mAuthDialogListener;
+
+    /**
+     * Constructor for Facebook object.
+     *
+     * @param appId
+     *          Your Facebook application ID. Found at
+     *          www.facebook.com/developers/apps.php.
+     */
+    public Facebook(String appId) {
+        if (appId == null) {
+            throw new IllegalArgumentException(
+                    "You must specify your application ID when instantiating " +
+                    "a Facebook object. See README for details.");
+        }
+        mAppId = appId;
+    }
+
+    /**
+     * Default authorize method. Grants only basic permissions.
+     *
+     * See authorize() below for @params.
+     */
+    public void authorize(Activity activity, final DialogListener listener) {
+        authorize(activity, new String[] {}, DEFAULT_AUTH_ACTIVITY_CODE,
+                listener);
+    }
+
     /**
-     * Starts a dialog which prompts the user to log in to Facebook and grant
-     * the requested permissions to the given application.
-     * 
-     * This method implements the OAuth 2.0 User-Agent flow to retrieve an 
-     * access token for use in API requests.  In this flow, the user 
-     * credentials are handled by Facebook in an embedded WebView, not by the 
-     * client application.  As such, the dialog makes a network request and 
-     * renders HTML content rather than a native UI.  The access token is 
-     * retrieved from a redirect to a special URL that the WebView handles.
-     * 
-     * Note that User credentials could be handled natively using the 
-     * OAuth 2.0 Username and Password Flow, but this is not supported by this
-     * SDK.
-     * 
-     * See http://developers.facebook.com/docs/authentication/ and 
+     * Authorize method that grants custom permissions.
+     *
+     * See authorize() below for @params.
+     */
+    public void authorize(Activity activity, String[] permissions,
+            final DialogListener listener) {
+        authorize(activity, permissions, DEFAULT_AUTH_ACTIVITY_CODE, listener);
+    }
+
+    /**
+     * Full authorize method.
+     *
+     * Starts either an Activity or a dialog which prompts the user to log in to
+     * Facebook and grant the requested permissions to the given application.
+     *
+     * This method will, when possible, use Facebook's single sign-on for
+     * Android to obtain an access token. This involves proxying a call through
+     * the Facebook for Android stand-alone application, which will handle the
+     * authentication flow, and return an OAuth access token for making API
+     * calls.
+     *
+     * Because this process will not be available for all users, if single
+     * sign-on is not possible, this method will automatically fall back to the
+     * OAuth 2.0 User-Agent flow. In this flow, the user credentials are handled
+     * by Facebook in an embedded WebView, not by the client application. As
+     * such, the dialog makes a network request and renders HTML content rather
+     * than a native UI. The access token is retrieved from a redirect to a
+     * special URL that the WebView handles.
+     *
+     * Note that User credentials could be handled natively using the OAuth 2.0
+     * Username and Password Flow, but this is not supported by this SDK.
+     *
+     * See http://developers.facebook.com/docs/authentication/ and
      * http://wiki.oauth.net/OAuth-2 for more details.
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in the original calling thread (not in a background thread).
-     * 
-     * Also note that requests may be made to the API without calling 
-     * authorize first, in which case only public information is returned.
-     * 
-     * @param context
-     *            The Android context in which we want to display the
-     *            authorization dialog
+     *
+     * Note that this method is asynchronous and the callback will be invoked in
+     * the original calling thread (not in a background thread).
+     *
+     * Also note that requests may be made to the API without calling authorize
+     * first, in which case only public information is returned.
+     *
+     * IMPORTANT: Note that single sign-on authentication will not function
+     * correctly if you do not include a call to the authorizeCallback() method
+     * in your onActivityResult() function! Please see below for more
+     * information. single sign-on may be disabled by passing FORCE_DIALOG_AUTH
+     * as the activityCode parameter in your call to authorize().
+     *
+     * @param activity
+     *            The Android activity in which we want to display the
+     *            authorization dialog.
      * @param applicationId
      *            The Facebook application identifier e.g. "350685531728"
      * @param permissions
-     *            A list of permission required for this application: e.g.
+     *            A list of permissions required for this application: e.g.
      *            "read_stream", "publish_stream", "offline_access", etc. see
      *            http://developers.facebook.com/docs/authentication/permissions
      *            This parameter should not be null -- if you do not require any
      *            permissions, then pass in an empty String array.
+     * @param activityCode
+     *            Single sign-on requires an activity result to be called back
+     *            to the client application -- if you are waiting on other
+     *            activities to return data, pass a custom activity code here to
+     *            avoid collisions. If you would like to force the use of legacy
+     *            dialog-based authorization, pass FORCE_DIALOG_AUTH for this
+     *            parameter. Otherwise just omit this parameter and Facebook
+     *            will use a suitable default. See
+     *            http://developer.android.com/reference/android/
+     *              app/Activity.html for more information.
      * @param listener
      *            Callback interface for notifying the calling application when
-     *            the dialog has completed, failed, or been canceled.
+     *            the authentication dialog has completed, failed, or been
+     *            canceled.
+     */
+    public void authorize(Activity activity, String[] permissions,
+            int activityCode, final DialogListener listener) {
+
+        boolean singleSignOnStarted = false;
+
+        mAuthDialogListener = listener;
+
+        // Prefer single sign-on, where available.
+        if (activityCode >= 0) {
+            singleSignOnStarted = startSingleSignOn(activity, mAppId,
+                    permissions, activityCode);
+        }
+        // Otherwise fall back to traditional dialog.
+        if (!singleSignOnStarted) {
+            startDialogAuth(activity, permissions);
+        }
+    }
+
+    /**
+     * Internal method to handle single sign-on backend for authorize().
+     *
+     * @param activity
+     *            The Android Activity that will parent the ProxyAuth Activity.
+     * @param applicationId
+     *            The Facebook application identifier.
+     * @param permissions
+     *            A list of permissions required for this application. If you do
+     *            not require any permissions, pass an empty String array.
+     * @param activityCode
+     *            Activity code to uniquely identify the result Intent in the
+     *            callback.
      */
-    public void authorize(Context context,
-    					  String applicationId,
-                          String[] permissions,
-                          final DialogListener listener) {
+    private boolean startSingleSignOn(Activity activity, String applicationId,
+            String[] permissions, int activityCode) {
+        boolean didSucceed = true;
+        Intent intent = new Intent();
+
+        intent.setClassName("com.facebook.katana",
+                "com.facebook.katana.ProxyAuth");
+        intent.putExtra("client_id", applicationId);
+        if (permissions.length > 0) {
+            intent.putExtra("scope", TextUtils.join(",", permissions));
+        }
+
+        // Verify that the application whose package name is
+        // com.facebook.katana.ProxyAuth
+        // has the expected FB app signature.
+        if (!validateAppSignatureForIntent(activity, intent)) {
+            return false;
+        }
+
+        mAuthActivity = activity;
+        mAuthPermissions = permissions;
+        mAuthActivityCode = activityCode;
+        try {
+            activity.startActivityForResult(intent, activityCode);
+        } catch (ActivityNotFoundException e) {
+            didSucceed = false;
+        }
+
+        return didSucceed;
+    }
+
+    /**
+     * Query the signature for the application that would be invoked by the
+     * given intent and verify that it matches the FB application's signature.
+     *
+     * @param activity
+     * @param intent
+     * @param validSignature
+     * @return true if the app's signature matches the expected signature.
+     */
+    private boolean validateAppSignatureForIntent(Activity activity,
+            Intent intent) {
+
+        ResolveInfo resolveInfo =
+            activity.getPackageManager().resolveActivity(intent, 0);
+        if (resolveInfo == null) {
+            return false;
+        }
+
+        String packageName = resolveInfo.activityInfo.packageName;
+        PackageInfo packageInfo;
+        try {
+            packageInfo = activity.getPackageManager().getPackageInfo(
+                    packageName, PackageManager.GET_SIGNATURES);
+        } catch (NameNotFoundException e) {
+            return false;
+        }
+
+        for (Signature signature : packageInfo.signatures) {
+            if (signature.toCharsString().equals(FB_APP_SIGNATURE)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Internal method to handle dialog-based authentication backend for
+     * authorize().
+     *
+     * @param activity
+     *            The Android Activity that will parent the auth dialog.
+     * @param applicationId
+     *            The Facebook application identifier.
+     * @param permissions
+     *            A list of permissions required for this application. If you do
+     *            not require any permissions, pass an empty String array.
+     */
+	private void startDialogAuth(Activity activity, String[] permissions) {
         Bundle params = new Bundle();
-        params.putString("client_id", applicationId);
         if (permissions.length > 0) {
             params.putString("scope", TextUtils.join(",", permissions));
         }
-        CookieSyncManager.createInstance(context);
-        dialog(context, LOGIN, params, new DialogListener() {
+        CookieSyncManager.createInstance(activity);
+        dialog(activity, LOGIN, params, new DialogListener() {
 
             public void onComplete(Bundle values) {
                 // ensure any cookies set by the dialog are saved
-                CookieSyncManager.getInstance().sync(); 
+                CookieSyncManager.getInstance().sync();
                 setAccessToken(values.getString(TOKEN));
                 setAccessExpiresIn(values.getString(EXPIRES));
                 if (isSessionValid()) {
-                    Log.d("Facebook-authorize", "Login Success! access_token=" 
-                        + getAccessToken() + " expires=" + getAccessExpires());
-                    listener.onComplete(values);
+                    Log.d("Facebook-authorize", "Login Success! access_token="
+                            + getAccessToken() + " expires="
+                            + getAccessExpires());
+                    mAuthDialogListener.onComplete(values);
                 } else {
-                    onFacebookError(new FacebookError(
-                            "failed to receive access_token"));
-                }                
+                    mAuthDialogListener.onFacebookError(new FacebookError(
+                                    "Failed to receive access token."));
+                }
             }
 
             public void onError(DialogError error) {
                 Log.d("Facebook-authorize", "Login failed: " + error);
-                listener.onError(error);
+                mAuthDialogListener.onError(error);
             }
 
             public void onFacebookError(FacebookError error) {
                 Log.d("Facebook-authorize", "Login failed: " + error);
-                listener.onFacebookError(error);
+                mAuthDialogListener.onFacebookError(error);
             }
 
             public void onCancel() {
-                Log.d("Facebook-authorize", "Login cancelled");
-                listener.onCancel();
+                Log.d("Facebook-authorize", "Login canceled");
+                mAuthDialogListener.onCancel();
             }
         });
     }
-    
+
+    /**
+     * IMPORTANT: This method must be invoked at the top of the calling
+     * activity's onActivityResult() function or Facebook authentication will
+     * not function properly!
+     *
+     * If your calling activity does not currently implement onActivityResult(),
+     * you must implement it and include a call to this method if you intend to
+     * use the authorize() method in this SDK.
+     *
+     * For more information, see
+     * http://developer.android.com/reference/android/app/
+     *   Activity.html#onActivityResult(int, int, android.content.Intent)
+     */
+    public void authorizeCallback(int requestCode, int resultCode, Intent data) {
+        if (requestCode == mAuthActivityCode) {
+
+            // Successfully redirected.
+            if (resultCode == Activity.RESULT_OK) {
+
+                // Check OAuth 2.0/2.10 error code.
+                String error = data.getStringExtra("error");
+                if (error == null) {
+                    error = data.getStringExtra("error_type");
+                }
+
+                // A Facebook error occurred.
+                if (error != null) {
+                    if (error.equals(SINGLE_SIGN_ON_DISABLED)
+                            || error.equals("AndroidAuthKillSwitchException")) {
+                        Log.d("Facebook-authorize", "Hosted auth currently "
+                            + "disabled. Retrying dialog auth...");
+                        startDialogAuth(mAuthActivity, mAuthPermissions);
+                    } else if (error.equals("access_denied")
+                            || error.equals("OAuthAccessDeniedException")) {
+                        Log.d("Facebook-authorize", "Login canceled by user.");
+                        mAuthDialogListener.onCancel();
+                    } else {
+                        Log.d("Facebook-authorize", "Login failed: " + error);
+                        mAuthDialogListener.onFacebookError(
+                                new FacebookError(error));
+                    }
+
+                // No errors.
+                } else {
+                    setAccessToken(data.getStringExtra(TOKEN));
+                    setAccessExpiresIn(data.getStringExtra(EXPIRES));
+                    if (isSessionValid()) {
+                        Log.d("Facebook-authorize",
+                                "Login Success! access_token="
+                                        + getAccessToken() + " expires="
+                                        + getAccessExpires());
+                        mAuthDialogListener.onComplete(data.getExtras());
+                    } else {
+                        mAuthDialogListener.onFacebookError(new FacebookError(
+                                        "Failed to receive access token."));
+                    }
+                }
+
+            // An error occurred before we could be redirected.
+            } else if (resultCode == Activity.RESULT_CANCELED) {
+
+                // An Android error occured.
+                if (data != null) {
+                    Log.d("Facebook-authorize",
+                            "Login failed: " + data.getStringExtra("error"));
+                    mAuthDialogListener.onError(
+                            new DialogError(
+                                    data.getStringExtra("error"),
+                                    data.getIntExtra("error_code", -1),
+                                    data.getStringExtra("failing_url")));
+
+                // User pressed the 'back' button.
+                } else {
+                    Log.d("Facebook-authorize", "Login canceled by user.");
+                    mAuthDialogListener.onCancel();
+                }
+            }
+        }
+    }
+
     /**
      * Invalidate the current user session by removing the access token in
      * memory, clearing the browser cookie, and calling auth.expireSession
-     * through the API.  
-     * 
+     * through the API.
+     *
      * Note that this method blocks waiting for a network response, so do not
      * call it in a UI thread.
-     * 
+     *
      * @param context
      *            The Android context in which the logout should be called: it
      *            should be the same context in which the login occurred in
      *            order to clear any stored cookies
-     * @throws IOException 
-     * @throws MalformedURLException 
-     * @return JSON string representation of the auth.expireSession response 
+     * @throws IOException
+     * @throws MalformedURLException
+     * @return JSON string representation of the auth.expireSession response
      *            ("true" if successful)
      */
-    public String logout(Context context) 
-          throws MalformedURLException, IOException {
+    public String logout(Context context)
+            throws MalformedURLException, IOException {
         Util.clearCookies(context);
         Bundle b = new Bundle();
         b.putString("method", "auth.expireSession");
@@ -171,35 +438,35 @@ public String logout(Context context)
     }
 
     /**
-     * Make a request to Facebook's old (pre-graph) API with the given 
-     * parameters. One of the parameter keys must be "method" and its value 
-     * should be a valid REST server API method.  
-     * 
+     * Make a request to Facebook's old (pre-graph) API with the given
+     * parameters. One of the parameter keys must be "method" and its value
+     * should be a valid REST server API method.
+     *
      * See http://developers.facebook.com/docs/reference/rest/
-     *  
-     * Note that this method blocks waiting for a network response, so do not 
+     *
+     * Note that this method blocks waiting for a network response, so do not
      * call it in a UI thread.
-     * 
-     * Example: 
+     *
+     * Example:
      * <code>
      *  Bundle parameters = new Bundle();
      *  parameters.putString("method", "auth.expireSession");
      *  String response = request(parameters);
      * </code>
-     * 
+     *
      * @param parameters
      *            Key-value pairs of parameters to the request. Refer to the
      *            documentation: one of the parameters must be "method".
-     * @throws IOException 
+     * @throws IOException
      *            if a network error occurs
-     * @throws MalformedURLException 
+     * @throws MalformedURLException
      *            if accessing an invalid endpoint
      * @throws IllegalArgumentException
      *            if one of the parameters is not "method"
      * @return JSON string representation of the response
      */
-    public String request(Bundle parameters) 
-          throws MalformedURLException, IOException {
+    public String request(Bundle parameters)
+            throws MalformedURLException, IOException {
         if (!parameters.containsKey("method")) {
             throw new IllegalArgumentException("API method must be specified. "
                     + "(parameters must contain key \"method\" and value). See"
@@ -207,37 +474,37 @@ public String request(Bundle parameters)
         }
         return request(null, parameters, "GET");
     }
-    
+
     /**
      * Make a request to the Facebook Graph API without any parameters.
-     * 
+     *
      * See http://developers.facebook.com/docs/api
-     *  
-     * Note that this method blocks waiting for a network response, so do not 
+     *
+     * Note that this method blocks waiting for a network response, so do not
      * call it in a UI thread.
-     * 
+     *
      * @param graphPath
      *            Path to resource in the Facebook graph, e.g., to fetch data
      *            about the currently logged authenticated user, provide "me",
      *            which will fetch http://graph.facebook.com/me
-     * @throws IOException 
+     * @throws IOException
      * @throws MalformedURLException
      * @return JSON string representation of the response
      */
-    public String request(String graphPath) 
-          throws MalformedURLException, IOException {
+    public String request(String graphPath)
+            throws MalformedURLException, IOException {
         return request(graphPath, new Bundle(), "GET");
     }
-    
+
     /**
-     * Make a request to the Facebook Graph API with the given string 
-     * parameters using an HTTP GET (default method).
-     * 
+     * Make a request to the Facebook Graph API with the given string parameters
+     * using an HTTP GET (default method).
+     *
      * See http://developers.facebook.com/docs/api
-     *  
-     * Note that this method blocks waiting for a network response, so do not 
+     *
+     * Note that this method blocks waiting for a network response, so do not
      * call it in a UI thread.
-     * 
+     *
      * @param graphPath
      *            Path to resource in the Facebook graph, e.g., to fetch data
      *            about the currently logged authenticated user, provide "me",
@@ -247,61 +514,57 @@ public String request(String graphPath)
      *            parameters "q" : "facebook" would produce a query for the
      *            following graph resource:
      *            https://graph.facebook.com/search?q=facebook
-     * @throws IOException 
-     * @throws MalformedURLException 
+     * @throws IOException
+     * @throws MalformedURLException
      * @return JSON string representation of the response
      */
-    public String request(String graphPath, Bundle parameters) 
-          throws MalformedURLException, IOException {
+    public String request(String graphPath, Bundle parameters)
+            throws MalformedURLException, IOException {
         return request(graphPath, parameters, "GET");
     }
-    
+
     /**
      * Synchronously make a request to the Facebook Graph API with the given
-     * HTTP method and string parameters. Note that binary data parameters 
+     * HTTP method and string parameters. Note that binary data parameters
      * (e.g. pictures) are not yet supported by this helper function.
-     * 
+     *
      * See http://developers.facebook.com/docs/api
-     *  
-     * Note that this method blocks waiting for a network response, so do not 
+     *
+     * Note that this method blocks waiting for a network response, so do not
      * call it in a UI thread.
-     * 
+     *
      * @param graphPath
      *            Path to resource in the Facebook graph, e.g., to fetch data
      *            about the currently logged authenticated user, provide "me",
      *            which will fetch http://graph.facebook.com/me
-     * @param parameters
-     *            key-value string parameters, e.g. the path "search" with
+     * @param params
+     *            Key-value string parameters, e.g. the path "search" with
      *            parameters {"q" : "facebook"} would produce a query for the
      *            following graph resource:
      *            https://graph.facebook.com/search?q=facebook
      * @param httpMethod
      *            http verb, e.g. "GET", "POST", "DELETE"
-     * @throws IOException 
-     * @throws MalformedURLException 
+     * @throws IOException
+     * @throws MalformedURLException
      * @return JSON string representation of the response
      */
-    public String request(String graphPath,
-                          Bundle parameters, 
-                          String httpMethod) 
-          throws FileNotFoundException, MalformedURLException, IOException {
-        parameters.putString("format", "json");
+    public String request(String graphPath, Bundle params, String httpMethod)
+            throws FileNotFoundException, MalformedURLException, IOException {
+        params.putString("format", "json");
         if (isSessionValid()) {
-            parameters.putString(TOKEN, getAccessToken());
+            params.putString(TOKEN, getAccessToken());
         }
-        String url = graphPath != null ?
-            GRAPH_BASE_URL + graphPath : 
-            RESTSERVER_URL;
-        return Util.openUrl(url, httpMethod, parameters);
+        String url = (graphPath != null) ? GRAPH_BASE_URL + graphPath
+                                         : RESTSERVER_URL;
+        return Util.openUrl(url, httpMethod, params);
     }
-    
+
     /**
-     * Generate a UI dialog for the request action in the given Android 
-     * context.
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in the original calling thread (not in a background thread).
-     * 
+     * Generate a UI dialog for the request action in the given Android context.
+     *
+     * Note that this method is asynchronous and the callback will be invoked in
+     * the original calling thread (not in a background thread).
+     *
      * @param context
      *            The Android context in which we will generate this dialog.
      * @param action
@@ -311,52 +574,49 @@ public String request(String graphPath,
      *            Callback interface to notify the application when the dialog
      *            has completed.
      */
-    public void dialog(Context context, 
-                       String action, 
-                       DialogListener listener) {
+    public void dialog(Context context, String action,
+            DialogListener listener) {
         dialog(context, action, new Bundle(), listener);
     }
 
     /**
-     * Generate a UI dialog for the request action in the given Android 
-     * context with the provided parameters.
-     * 
-     * Note that this method is asynchronous and the callback will be invoked 
-     * in the original calling thread (not in a background thread).
-     * 
+     * Generate a UI dialog for the request action in the given Android context
+     * with the provided parameters.
+     *
+     * Note that this method is asynchronous and the callback will be invoked in
+     * the original calling thread (not in a background thread).
+     *
      * @param context
      *            The Android context in which we will generate this dialog.
      * @param action
-     *            String representation of the desired method: e.g. "login",
-     *            "stream.publish", ...
+     *            String representation of the desired method: e.g. "feed" ...
      * @param parameters
-     *            key-value string parameters
+     *            String key-value pairs to be passed as URL parameters.
      * @param listener
      *            Callback interface to notify the application when the dialog
      *            has completed.
      */
-    public void dialog(Context context, 
-                       String action, 
-                       Bundle parameters,
-                       final DialogListener listener) {
-        String endpoint;
+    public void dialog(Context context, String action, Bundle parameters,
+            final DialogListener listener) {
+
+        String endpoint = DIALOG_BASE_URL + action;
+        parameters.putString("display", "touch");
+        parameters.putString("redirect_uri", REDIRECT_URI);
+
         if (action.equals(LOGIN)) {
-            endpoint = OAUTH_ENDPOINT;
             parameters.putString("type", "user_agent");
-            parameters.putString("redirect_uri", REDIRECT_URI);
+            parameters.putString("client_id", mAppId);
         } else {
-            endpoint = UI_SERVER;
-            parameters.putString("method", action);
-            parameters.putString("next", REDIRECT_URI);
+            parameters.putString("app_id", mAppId);
         }
-        parameters.putString("display", "touch");
+
         if (isSessionValid()) {
             parameters.putString(TOKEN, getAccessToken());
         }
         String url = endpoint + "?" + Util.encodeUrl(parameters);
         if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET)
                 != PackageManager.PERMISSION_GRANTED) {
-            Util.showAlert(context, "Error", 
+            Util.showAlert(context, "Error",
                     "Application requires permission to access the Internet");
         } else {
             new FbDialog(context, url, listener).show();
@@ -367,14 +627,15 @@ public void dialog(Context context,
      * @return boolean - whether this object has an non-expired session token
      */
     public boolean isSessionValid() {
-        return (getAccessToken() != null) && ((getAccessExpires() == 0) || 
-            (System.currentTimeMillis() < getAccessExpires()));
+        return (getAccessToken() != null) &&
+                ((getAccessExpires() == 0) ||
+                        (System.currentTimeMillis() < getAccessExpires()));
     }
 
     /**
      * Retrieve the OAuth 2.0 access token for API access: treat with care.
      * Returns null if no session exists.
-     * 
+     *
      * @return String - access token
      */
     public String getAccessToken() {
@@ -384,7 +645,7 @@ public String getAccessToken() {
     /**
      * Retrieve the current session's expiration time (in milliseconds since
      * Unix epoch), or 0 if the session doesn't expire or doesn't exist.
-     * 
+     *
      * @return long - session expiration time
      */
     public long getAccessExpires() {
@@ -393,8 +654,9 @@ public long getAccessExpires() {
 
     /**
      * Set the OAuth 2.0 access token for API access.
-     * 
-     * @param token - access token
+     *
+     * @param token
+     *            - access token
      */
     public void setAccessToken(String token) {
         mAccessToken = token;
@@ -403,8 +665,9 @@ public void setAccessToken(String token) {
     /**
      * Set the current session's expiration time (in milliseconds since Unix
      * epoch), or 0 if the session doesn't expire.
-     * 
-     * @param time - timestamp in milliseconds
+     *
+     * @param time
+     *            - timestamp in milliseconds
      */
     public void setAccessExpires(long time) {
         mAccessExpires = time;
@@ -412,8 +675,9 @@ public void setAccessExpires(long time) {
 
     /**
      * Set the current session's duration (in seconds since Unix epoch).
-     * 
-     * @param expiresIn - duration in seconds
+     *
+     * @param expiresIn
+     *            - duration in seconds
      */
     public void setAccessExpiresIn(String expiresIn) {
         if (expiresIn != null && !expiresIn.equals("0")) {
@@ -422,7 +686,14 @@ public void setAccessExpiresIn(String expiresIn) {
         }
     }
 
-    
+    public String getAppId() {
+        return mAppId;
+    }
+
+    public void setAppId(String appId) {
+        mAppId = appId;
+    }
+
     /**
      * Callback interface for dialog requests.
      *
@@ -431,9 +702,9 @@ public void setAccessExpiresIn(String expiresIn) {
 
         /**
          * Called when a dialog completes.
-         * 
+         *
          * Executed by the thread that initiated the dialog.
-         * 
+         *
          * @param values
          *            Key-value string pairs extracted from the response.
          */
@@ -441,28 +712,50 @@ public void setAccessExpiresIn(String expiresIn) {
 
         /**
          * Called when a Facebook responds to a dialog with an error.
-         * 
+         *
          * Executed by the thread that initiated the dialog.
-         * 
-         */        
+         *
+         */
         public void onFacebookError(FacebookError e);
-        
+
         /**
          * Called when a dialog has an error.
-         * 
+         *
          * Executed by the thread that initiated the dialog.
-         * 
-         */        
+         *
+         */
         public void onError(DialogError e);
 
         /**
          * Called when a dialog is canceled by the user.
-         * 
+         *
          * Executed by the thread that initiated the dialog.
-         * 
+         *
          */
         public void onCancel();
-        
+
     }
-    
+
+    public static final String FB_APP_SIGNATURE =
+        "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
+        + "b3009060355040613025553310b30090603550408130243413112301006035504"
+        + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
+        + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
+        + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
+        + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
+        + "55040613025553310b30090603550408130243413112301006035504071309506"
+        + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
+        + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
+        + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
+        + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
+        + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
+        + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
+        + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
+        + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
+        + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
+        + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
+        + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
+        + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
+        + "928a2";
+
 }
diff --git a/facebook/src/com/facebook/android/FacebookError.java b/facebook/src/com/facebook/android/FacebookError.java
index c98bed94c..16836dbd7 100644
--- a/facebook/src/com/facebook/android/FacebookError.java
+++ b/facebook/src/com/facebook/android/FacebookError.java
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
@@ -17,18 +17,18 @@
 package com.facebook.android;
 
 /**
- * Encapsulation of a Facebook Error: a Facebook request that could not be 
+ * Encapsulation of a Facebook Error: a Facebook request that could not be
  * fulfilled.
- * 
+ *
  * @author ssoneff@facebook.com
  */
 public class FacebookError extends Throwable {
-  
+
     private static final long serialVersionUID = 1L;
 
     private int mErrorCode = 0;
     private String mErrorType;
-    
+
     public FacebookError(String message) {
         super(message);
     }
@@ -38,12 +38,13 @@ public FacebookError(String message, String type, int code) {
         mErrorType = type;
         mErrorCode = code;
     }
-    
+
     public int getErrorCode() {
         return mErrorCode;
     }
-    
+
     public String getErrorType() {
         return mErrorType;
     }
+
 }
diff --git a/facebook/src/com/facebook/android/FbDialog.java b/facebook/src/com/facebook/android/FbDialog.java
index 5ba594c1a..3ffb2b6b5 100644
--- a/facebook/src/com/facebook/android/FbDialog.java
+++ b/facebook/src/com/facebook/android/FbDialog.java
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
@@ -42,21 +42,21 @@
     static final int FB_BLUE = 0xFF6D84B4;
     static final float[] DIMENSIONS_LANDSCAPE = {460, 260};
     static final float[] DIMENSIONS_PORTRAIT = {280, 420};
-    static final FrameLayout.LayoutParams FILL = 
-        new FrameLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, 
+    static final FrameLayout.LayoutParams FILL =
+        new FrameLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,
                          ViewGroup.LayoutParams.FILL_PARENT);
     static final int MARGIN = 4;
     static final int PADDING = 2;
     static final String DISPLAY_STRING = "touch";
     static final String FB_ICON = "icon.png";
-    
+
     private String mUrl;
     private DialogListener mListener;
     private ProgressDialog mSpinner;
     private WebView mWebView;
     private LinearLayout mContent;
     private TextView mTitle;
-    
+
     public FbDialog(Context context, String url, DialogListener listener) {
         super(context);
         mUrl = url;
@@ -69,18 +69,19 @@ protected void onCreate(Bundle savedInstanceState) {
         mSpinner = new ProgressDialog(getContext());
         mSpinner.requestWindowFeature(Window.FEATURE_NO_TITLE);
         mSpinner.setMessage("Loading...");
-        
+
         mContent = new LinearLayout(getContext());
         mContent.setOrientation(LinearLayout.VERTICAL);
         setUpTitle();
         setUpWebView();
         Display display = getWindow().getWindowManager().getDefaultDisplay();
         final float scale = getContext().getResources().getDisplayMetrics().density;
-        float[] dimensions = display.getWidth() < display.getHeight() ?
-        		DIMENSIONS_PORTRAIT : DIMENSIONS_LANDSCAPE;
+        float[] dimensions =
+            (display.getWidth() < display.getHeight())
+                    ? DIMENSIONS_PORTRAIT : DIMENSIONS_LANDSCAPE;
         addContentView(mContent, new FrameLayout.LayoutParams(
-        		(int) (dimensions[0] * scale + 0.5f),
-        		(int) (dimensions[1] * scale + 0.5f)));
+                (int) (dimensions[0] * scale + 0.5f),
+                (int) (dimensions[1] * scale + 0.5f)));
     }
 
     private void setUpTitle() {
@@ -95,7 +96,7 @@ private void setUpTitle() {
         //mTitle.setCompoundDrawablesWithIntrinsicBounds(icon, null, null, null);
         mContent.addView(mTitle);
     }
-    
+
     private void setUpWebView() {
         mWebView = new WebView(getContext());
         mWebView.setVerticalScrollBarEnabled(false);
@@ -114,12 +115,21 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
             Log.d("Facebook-WebView", "Redirect URL: " + url);
             if (url.startsWith(Facebook.REDIRECT_URI)) {
                 Bundle values = Util.parseUrl(url);
-                String error = values.getString("error_reason");
+
+                String error = values.getString("error");
+                if (error == null) {
+                    error = values.getString("error_type");
+                }
+
                 if (error == null) {
                     mListener.onComplete(values);
+                } else if (error.equals("access_denied") ||
+                           error.equals("OAuthAccessDeniedException")) {
+                    mListener.onCancel();
                 } else {
                     mListener.onFacebookError(new FacebookError(error));
                 }
+
                 FbDialog.this.dismiss();
                 return true;
             } else if (url.startsWith(Facebook.CANCEL_URI)) {
@@ -131,7 +141,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
             }
             // launch non-dialog URLs in a full browser
             getContext().startActivity(
-                    new Intent(Intent.ACTION_VIEW, Uri.parse(url))); 
+                    new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
             return true;
         }
 
@@ -159,7 +169,7 @@ public void onPageFinished(WebView view, String url) {
                 mTitle.setText(title);
             }
             mSpinner.dismiss();
-        }   
-        
+        }
+
     }
 }
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index 96daf9985..c515cc573 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -27,6 +27,7 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLDecoder;
+import java.net.URLEncoder;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -38,7 +39,6 @@
 import android.webkit.CookieManager;
 import android.webkit.CookieSyncManager;
 
-
 /**
  * Utility class supporting the Facebook Object.
  * 
@@ -81,7 +81,8 @@ public static String encodeUrl(Bundle parameters) {
         boolean first = true;
         for (String key : parameters.keySet()) {
             if (first) first = false; else sb.append("&");
-            sb.append(key + "=" + parameters.getString(key));
+            sb.append(URLEncoder.encode(key) + "=" +
+                      URLEncoder.encode(parameters.getString(key)));
         }
         return sb.toString();
     }
@@ -92,7 +93,8 @@ public static Bundle decodeUrl(String s) {
             String array[] = s.split("&");
             for (String parameter : array) {
                 String v[] = parameter.split("=");
-                params.putString(v[0], v[1]);
+                params.putString(URLDecoder.decode(v[0]),
+                                 URLDecoder.decode(v[1]));
             }
         }
         return params;
@@ -145,35 +147,6 @@ public static String openUrl(String url, String method, Bundle params)
         Log.d("Facebook-Util", method + " URL: " + url);
         HttpURLConnection conn = 
             (HttpURLConnection) new URL(url).openConnection();
-<<<<<<< HEAD
-        try {
-			conn.setRequestProperty("User-Agent", System.getProperties().getProperty("http.agent") + " FacebookAndroidSDK");
-			if (!method.equals("GET")) {
-				// use method override
-				params.putString("method", method);
-				conn.setRequestMethod("POST");
-				conn.setDoOutput(true);
-				conn.getOutputStream().write(encodeUrl(params).getBytes("UTF-8"));
-			}
-			int responseCode = conn.getResponseCode();
-			String response = "";
-
-			try {
-				response = read(conn.getInputStream());
-			} catch (FileNotFoundException e) {
-				// Error Stream contains JSON that we can parse to a FB error
-				response = read(conn.getErrorStream());
-			}
-
-			if (responseCode < 200 || responseCode >= 300) {
-				throw new HttpResponseException(responseCode, response);
-			}
-
-			return response;
-		} finally {
-			conn.disconnect();
-		}
-=======
         conn.setRequestProperty("User-Agent", System.getProperties().
                 getProperty("http.agent") + " FacebookAndroidSDK");
         if (!method.equals("GET")) {
@@ -190,12 +163,15 @@ public static String openUrl(String url, String method, Bundle params)
             }
             
             if (params.containsKey("access_token")) {
-            	String decoded_token = URLDecoder.decode(params.getString("access_token"));
+                String decoded_token =
+                    URLDecoder.decode(params.getString("access_token"));
             	params.putString("access_token", decoded_token);
             }
                      
             conn.setRequestMethod("POST");
-            conn.setRequestProperty("Content-Type", "multipart/form-data;boundary="+strBoundary);
+            conn.setRequestProperty(
+                    "Content-Type",
+                    "multipart/form-data;boundary="+strBoundary);
             conn.setDoOutput(true);
             conn.setDoInput(true);
             conn.setRequestProperty("Connection", "Keep-Alive");
@@ -227,7 +203,6 @@ public static String openUrl(String url, String method, Bundle params)
             response = read(conn.getErrorStream());
         }
         return response;
->>>>>>> b18714b71b3ee49a90f3209441f03e455cca1577
     }
 
     private static String read(InputStream in) throws IOException {
@@ -305,10 +280,10 @@ public static JSONObject parseJson(String response)
         }
         return json;
     }
-
+    
     public static class HttpResponseException extends IOException
     {
-    	/**
+    /**
          * 
          */
         private static final long serialVersionUID = 6882826480702602097L;
diff --git a/tests/default.properties b/tests/default.properties
index 1af14f6b5..edc08d24a 100644
--- a/tests/default.properties
+++ b/tests/default.properties
@@ -7,6 +7,6 @@
 # "build.properties", and override values to adapt the script to your
 # project structure.
 
-android.library.reference.1=../b5/facebook-android-sdk/facebook/
+android.library.reference.1=../facebook/
 # Project target.
-target=android-3
+target=android-8
diff --git a/tests/src/com/facebook/android/tests/Tests.java b/tests/src/com/facebook/android/tests/Tests.java
index 7cf762b3c..2d28fe84a 100644
--- a/tests/src/com/facebook/android/tests/Tests.java
+++ b/tests/src/com/facebook/android/tests/Tests.java
@@ -3,7 +3,6 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.net.MalformedURLException;
-import java.net.URLEncoder;
 
 import org.json.JSONObject;
 
@@ -16,6 +15,7 @@
 import com.facebook.android.Facebook.DialogListener;
 
 import android.app.Activity;
+import android.content.Intent;
 import android.graphics.Color;
 import android.os.Bundle;
 import android.util.Log;
@@ -44,7 +44,7 @@
     Button logoutButton;
     TextView logoutText;
     
-    Facebook authenticatedFacebook = new Facebook();
+    Facebook authenticatedFacebook = new Facebook(APP_ID);
     
     /** Called when the activity is first created. */
     @Override
@@ -68,8 +68,8 @@ public void onCreate(Bundle savedInstanceState) {
         // button to test UI Server login method
         loginButton.setOnClickListener(new OnClickListener() {
             public void onClick(View v) {
-                authenticatedFacebook.authorize(Tests.this, 
-                        APP_ID, PERMISSIONS, new TestLoginListener());
+                authenticatedFacebook.authorize(Tests.this, PERMISSIONS,
+                        new TestLoginListener());
             }
         });
         
@@ -90,7 +90,12 @@ public void onClick(View v) {
         
         runTestPublicApi();
     }
-    
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        authenticatedFacebook.authorizeCallback(requestCode, resultCode, data);
+    }
+
     public void runTestPublicApi() {
         if (testPublicApi()) {
             publicTestsText.setText("Public API tests passed");
@@ -110,7 +115,7 @@ public void runTestPublicApi() {
     }
     
     public boolean testPublicApi() {
-        Facebook fb = new Facebook();
+        Facebook fb = new Facebook(APP_ID);
         try {
             Log.d("Tests", "Testing standard API call");
             JSONObject response = Util.parseJson(fb.request("4"));
@@ -140,7 +145,7 @@ public boolean testPublicApi() {
     }
     
     public boolean testPublicErrors() {
-        Facebook fb = new Facebook();
+        Facebook fb = new Facebook(APP_ID);
         try {
             Bundle params = new Bundle();
             
@@ -162,7 +167,9 @@ public boolean testPublicErrors() {
                 return false;
             } catch (FacebookError e) {
                 Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported delete request.")) {
+                if (!e.getMessage().equals(
+                        "An access token is required to request this " +
+                        "resource.")) {
                     return false;
                 }
             }
@@ -222,8 +229,8 @@ public boolean testPublicErrors() {
             } catch (FacebookError e) {
                 Log.d("Tests", "*" + e.getMessage() + "*");
                 if (!e.getMessage().equals(
-                        "Some of the aliases you requested do not exist: " +
-                        "invalidinvalidinvalidinvalid")) {
+                        "(#803) Some of the aliases you requested do not " +
+                        "exist: invalidinvalidinvalidinvalid")) {
                     return false;
                 }
             }
@@ -252,8 +259,8 @@ public boolean testPublicErrors() {
                 }
             }
             
-            Log.d("Tests", "Testing that old API cannot be made without " +
-            		"access token");
+            Log.d("Tests", "Testing that old API request cannot be made " +
+                           "without access token");
             params.putString("method", "stream.publish");
             try {
                 Util.parseJson(fb.request(params));
@@ -334,9 +341,8 @@ public boolean testAuthenticatedApi() {
             
             Log.d("Tests", "Testing graph API wall post");
             Bundle parameters = new Bundle();
-            parameters.putString("message", URLEncoder.encode("hello world"));
-            parameters.putString("description", 
-                    URLEncoder.encode("test test test"));
+            parameters.putString("message", "hello world");
+            parameters.putString("description", "test test test");
             response = authenticatedFacebook.request("me/feed", parameters, 
                     "POST");
             Log.d("Tests", "got response: " + response);
@@ -355,17 +361,16 @@ public boolean testAuthenticatedApi() {
             Log.d("Tests", "Testing old API wall post");
             parameters = new Bundle();
             parameters.putString("method", "stream.publish");
-            String attachments = 
-                URLEncoder.encode("{\"name\":\"Name=Title\"," +
-                		"\"href\":\"http://www.google.fr/\",\"" +
-                		"caption\":\"Caption\",\"description\":\"Description" +
-                		"\",\"media\":[{\"type\":\"image\",\"src\":" +
-                		"\"http://www.kratiroff.com/logo-facebook.jpg\"," +
-                		"\"href\":\"http://developers.facebook.com/\"}]," +
-                		"\"properties\":{\"another link\":{\"text\":\"" +
-                		"Facebook homepage\",\"href\":\"http://www.facebook." +
-                		"com\"}}}");
-            parameters.putString("attachment", attachments);
+            parameters.putString("attachment", 
+                "{\"name\":\"Name=Title\"," +
+                "\"href\":\"http://www.google.fr/\",\"" +
+                "caption\":\"Caption\",\"description\":\"Description" +
+                "\",\"media\":[{\"type\":\"image\",\"src\":" +
+                "\"http://www.kratiroff.com/logo-facebook.jpg\"," +
+                "\"href\":\"http://developers.facebook.com/\"}]," +
+                "\"properties\":{\"another link\":{\"text\":\"" +
+                "Facebook homepage\",\"href\":\"http://www.facebook." +
+                "com\"}}}");;
             response = authenticatedFacebook.request(parameters);
             Log.d("Tests", "got response: " + response);
             if (response == null || response.equals("") || 
@@ -529,8 +534,6 @@ public void runTestLogout() {
     
     public boolean testLogout() {
         try {
-            String oldAccessToken = authenticatedFacebook.getAccessToken();
-            
             Log.d("Tests", "Testing logout");
             String response = authenticatedFacebook.logout(this);
             Log.d("Tests", "Got logout response: *" + response + "*");
@@ -551,7 +554,7 @@ public boolean testLogout() {
             
             Log.d("Tests", "Testing logout on unauthenticated object");
             try {
-                Util.parseJson(new Facebook().logout(this));
+                Util.parseJson(new Facebook(APP_ID).logout(this));
                 return false;
             } catch (FacebookError e) {
                 if (e.getErrorCode() != 101 || 
@@ -560,18 +563,6 @@ public boolean testLogout() {
                 }
             }
             
-            Log.d("Tests", "Testing that old access token no longer works");
-            Facebook invalidFb = new Facebook();
-            invalidFb.setAccessToken(oldAccessToken);
-            try {
-                Util.parseJson(invalidFb.request("me"));
-                return false;
-            } catch (FacebookError e) {
-                if (!e.getMessage().equals("Error processing access token.")) {
-                    return false;
-                }
-            }
-            
             Log.d("Tests", "All Logout Tests Passed");
             return true;
         } catch (Throwable e) {
@@ -583,4 +574,4 @@ public boolean testLogout() {
     // test bad UI server method?
     
     // test invalid permission? <-- UI server test
-}
\ No newline at end of file
+}
