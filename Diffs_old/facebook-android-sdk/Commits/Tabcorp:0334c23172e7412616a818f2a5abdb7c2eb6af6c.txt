diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessLoggingEventListener.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessLoggingEventListener.java
deleted file mode 100644
index 24127f839..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessLoggingEventListener.java
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless;
-
-import android.os.Bundle;
-import android.view.View;
-
-import android.content.Context;
-import android.util.Log;
-import android.view.accessibility.AccessibilityEvent;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.appevents.codeless.internal.Constants;
-import com.facebook.appevents.codeless.internal.ViewHierarchy;
-import com.facebook.appevents.codeless.internal.EventBinding;
-import com.facebook.appevents.internal.AppEventUtility;
-
-import java.lang.ref.WeakReference;
-
-public class CodelessLoggingEventListener {
-    private static final String TAG = CodelessLoggingEventListener.class.getCanonicalName();
-
-    public static AutoLoggingAccessibilityDelegate
-    getAccessibilityDelegate(EventBinding mapping, View rootView, View hostView) {
-        return new AutoLoggingAccessibilityDelegate(mapping, rootView, hostView);
-    }
-
-    public static class AutoLoggingAccessibilityDelegate extends View.AccessibilityDelegate {
-        public AutoLoggingAccessibilityDelegate() {}
-        public AutoLoggingAccessibilityDelegate(final EventBinding mapping,
-                                                   final View rootView,
-                                                   final View hostView) {
-            if (null == mapping || null == rootView || null == hostView) {
-                return;
-            }
-
-            this.existingDelegate = ViewHierarchy.getExistingDelegate(hostView);
-
-            this.mapping = mapping;
-            this.hostView = new WeakReference<View>(hostView);
-            this.rootView = new WeakReference<View>(rootView);
-            EventBinding.ActionType type = mapping.getType();
-
-            switch (mapping.getType()) {
-                case CLICK:
-                    this.accessibilityEventType = AccessibilityEvent.TYPE_VIEW_CLICKED;
-                    break;
-                case SELECTED:
-                    this.accessibilityEventType = AccessibilityEvent.TYPE_VIEW_SELECTED;
-                    break;
-                case TEXT_CHANGED:
-                    this.accessibilityEventType = AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED;
-                    break;
-                default:
-                    throw new FacebookException("Unsupported action type: " + type.toString());
-            }
-            supportCodelessLogging = true;
-        }
-
-        @Override
-        public void sendAccessibilityEvent(View host, int eventType) {
-            if (eventType == AccessibilityEvent.INVALID_POSITION) {
-                Log.e(TAG, "Unsupported action type");
-            }
-            if (eventType != this.accessibilityEventType) {
-                return;
-            }
-
-            if (null != this.existingDelegate &&
-                    !(this.existingDelegate instanceof AutoLoggingAccessibilityDelegate)) {
-                this.existingDelegate.sendAccessibilityEvent(host, eventType);
-            }
-
-            logEvent();
-        }
-
-        private void logEvent() {
-            final String eventName = this.mapping.getEventName();
-            final Bundle parameters = CodelessMatcher.getParameters(
-                    mapping,
-                    rootView.get(),
-                    hostView.get()
-            );
-
-            if (parameters.containsKey(AppEventsConstants.EVENT_PARAM_VALUE_TO_SUM)) {
-                String value = parameters.getString(AppEventsConstants.EVENT_PARAM_VALUE_TO_SUM);
-                parameters.putDouble(
-                        AppEventsConstants.EVENT_PARAM_VALUE_TO_SUM,
-                        AppEventUtility.normalizePrice(value));
-            }
-
-            parameters.putString(Constants.IS_CODELESS_EVENT_KEY, "1");
-
-            final Bundle params = parameters;
-            FacebookSdk.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    final Context context = FacebookSdk.getApplicationContext();
-                    final AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context);
-                    appEventsLogger.logEvent(eventName, params);
-                }
-            });
-        }
-
-        public boolean getSupportCodelessLogging() {
-            return supportCodelessLogging;
-        }
-
-        public boolean getSupportButtonIndexing() {
-            return supportButtonIndexing;
-        }
-
-        private EventBinding mapping;
-        private WeakReference<View> hostView;
-        private WeakReference<View> rootView;
-        private int accessibilityEventType;
-        private View.AccessibilityDelegate existingDelegate;
-        private boolean supportCodelessLogging = false;
-        protected boolean supportButtonIndexing = false;
-    }
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
deleted file mode 100644
index 390ec4ea9..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
+++ /dev/null
@@ -1,476 +0,0 @@
-/*
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewParent;
-import android.view.ViewTreeObserver;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.codeless.internal.Constants;
-import com.facebook.appevents.codeless.internal.ViewHierarchy;
-import com.facebook.appevents.codeless.internal.ParameterComponent;
-import com.facebook.appevents.codeless.internal.PathComponent;
-import com.facebook.appevents.codeless.internal.EventBinding;
-import com.facebook.internal.FetchedAppSettings;
-import com.facebook.internal.FetchedAppSettingsManager;
-
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import static com.facebook.appevents.codeless.internal.PathComponent.MatchBitmaskType;
-
-public class CodelessMatcher {
-    private static final String PARENT_CLASS_NAME = "..";
-    private static final String CURRENT_CLASS_NAME = ".";
-    private static final String TAG = CodelessMatcher.class.getCanonicalName();
-
-    private final Handler uiThreadHandler;
-    private Set<Activity> activitiesSet;
-    private Set<ViewMatcher> viewMatchers;
-    private HashMap<String, String> delegateMap;
-
-    public CodelessMatcher() {
-        this.uiThreadHandler = new Handler(Looper.getMainLooper());
-        this.activitiesSet = new HashSet<>();
-        this.viewMatchers = new HashSet<>();
-        this.delegateMap = new HashMap<>();
-    }
-
-    public void add(Activity activity) {
-        if (Thread.currentThread() != Looper.getMainLooper().getThread()) {
-            throw new FacebookException("Can't add activity to CodelessMatcher on non-UI thread");
-        }
-        this.activitiesSet.add(activity);
-        delegateMap.clear();
-        startTracking();
-    }
-
-    public void remove(Activity activity) {
-        if (Thread.currentThread() != Looper.getMainLooper().getThread()) {
-            throw new FacebookException(
-                    "Can't remove activity from CodelessMatcher on non-UI thread"
-            );
-        }
-        this.activitiesSet.remove(activity);
-        this.viewMatchers.clear();
-        delegateMap.clear();
-    }
-
-    public static Bundle getParameters(final EventBinding mapping,
-                                       final View rootView,
-                                       final View hostView) {
-        Bundle params = new Bundle();
-
-        if (null == mapping) {
-            return params;
-        }
-
-        List<ParameterComponent> parameters = mapping.getViewParameters();
-        if (null != parameters) {
-            for (ParameterComponent component : parameters) {
-                if (component.value != null && component.value.length() > 0) {
-                    params.putString(component.name, component.value);
-                } else if (component.path.size() > 0){
-                    List<MatchedView> matchedViews;
-                    final String pathType = component.pathType;
-                    if (pathType.equals(Constants.PATH_TYPE_RELATIVE)) {
-                        matchedViews = ViewMatcher.findViewByPath(
-                                mapping,
-                                hostView,
-                                component.path,
-                                0,
-                                -1,
-                                hostView.getClass().getSimpleName()
-                        );
-                    } else {
-                        matchedViews = ViewMatcher.findViewByPath(
-                                mapping,
-                                rootView,
-                                component.path,
-                                0,
-                                -1,
-                                rootView.getClass().getSimpleName()
-                        );
-                    }
-
-                    for (MatchedView view : matchedViews) {
-                        if (view.getView() == null) {
-                            continue;
-                        }
-                        String text = ViewHierarchy.getTextOfView(view.getView());
-                        if (text.length() > 0) {
-                            params.putString(component.name, text);
-                            break;
-                        }
-                    }
-                }
-            }
-        }
-
-        return params;
-    }
-
-    private void startTracking() {
-        if (Thread.currentThread() == Looper.getMainLooper().getThread()) {
-            matchViews();
-        } else {
-            uiThreadHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    matchViews();
-                }
-            });
-
-        }
-    }
-
-    private void matchViews() {
-        for (Activity activity : this.activitiesSet) {
-            final View rootView = activity.getWindow().getDecorView().getRootView();
-            final String activityName = activity.getClass().getSimpleName();
-            ViewMatcher matcher = new ViewMatcher(
-                    rootView, uiThreadHandler, this.delegateMap, activityName);
-            this.viewMatchers.add(matcher);
-        }
-    }
-
-    public static class MatchedView {
-        private WeakReference<View> view;
-        private String viewMapKey;
-
-        public MatchedView(View view, String viewMapKey) {
-            this.view = new WeakReference<View>(view);
-            this.viewMapKey = viewMapKey;
-        }
-
-        @Nullable
-        public View getView() {
-            return (this.view == null) ? null : this.view.get();
-        }
-
-        public String getViewMapKey() {
-            return this.viewMapKey;
-        }
-    }
-
-    protected static class ViewMatcher implements ViewTreeObserver.OnGlobalLayoutListener,
-            ViewTreeObserver.OnScrollChangedListener, Runnable {
-        private WeakReference<View> rootView;
-        @Nullable private List<EventBinding> eventBindings;
-        private final Handler handler;
-        private HashMap<String, String> delegateMap;
-        private final String activityName;
-
-        public ViewMatcher(View rootView,
-                           Handler handler,
-                           HashMap<String, String> delegateMap,
-                           final String activityName) {
-            this.rootView = new WeakReference<View>(rootView);
-            this.handler = handler;
-            this.delegateMap = delegateMap;
-            this.activityName = activityName;
-
-            this.handler.postDelayed(this, 200);
-        }
-
-        @Override
-        public void run() {
-            final String appId = FacebookSdk.getApplicationId();
-            FetchedAppSettings appSettings =
-                    FetchedAppSettingsManager.getAppSettingsWithoutQuery(appId);
-            if (appSettings == null || !appSettings.getCodelessEventsEnabled()) {
-                return;
-            }
-
-            this.eventBindings = EventBinding.parseArray(appSettings.getEventBindings());
-
-            if (this.eventBindings != null) {
-                View rootView = this.rootView.get();
-                if (rootView == null) {
-                    return;
-                }
-                ViewTreeObserver observer = rootView.getViewTreeObserver();
-                if (observer.isAlive()) {
-                    observer.addOnGlobalLayoutListener(this);
-                    observer.addOnScrollChangedListener(this);
-                }
-
-                startMatch();
-            }
-        }
-
-        @Override
-        public void onGlobalLayout() {
-            startMatch();
-        }
-
-        @Override
-        public void onScrollChanged() {
-            startMatch();
-        }
-
-        private void startMatch() {
-            if (this.eventBindings != null && this.rootView.get() != null) {
-                for (int i = 0; i < this.eventBindings.size(); i++) {
-                    EventBinding binding = this.eventBindings.get(i);
-                    findView(binding, this.rootView.get());
-                }
-            }
-        }
-
-        public void findView(final EventBinding mapping, final View rootView) {
-            if (mapping == null || rootView == null) {
-                return;
-            }
-
-            if (!TextUtils.isEmpty(mapping.getActivityName()) &&
-                    !mapping.getActivityName().equals(this.activityName)) {
-                return;
-            }
-
-            List<PathComponent> path = mapping.getViewPath();
-
-            if (path.size() > Constants.MAX_TREE_DEPTH) {
-                return;
-            }
-
-            List<MatchedView> matchedViews = findViewByPath(
-                    mapping,
-                    rootView,
-                    path,
-                    0,
-                    -1,
-                    this.activityName);
-            for (MatchedView view: matchedViews) {
-                attachListener(view, rootView, mapping);
-            }
-        }
-
-        public static List<MatchedView> findViewByPath(final EventBinding mapping,
-                                   final View view,
-                                   final List<PathComponent> path,
-                                   final int level,
-                                   final int index,
-                                   String mapKey) {
-            mapKey += "." + String.valueOf(index);
-            List<MatchedView> result = new ArrayList<>();
-            if (null == view) {
-                return result;
-            }
-
-            if (level >= path.size()) {
-                // Match all children views if their parent view is matched
-                result.add(new MatchedView(view, mapKey));
-            } else {
-                PathComponent pathElement = path.get(level);
-                if (pathElement.className.equals(PARENT_CLASS_NAME)) {
-                    ViewParent parent = view.getParent();
-                    if (parent instanceof ViewGroup) {
-                        final ViewGroup viewGroup = (ViewGroup)parent;
-                        List<View> visibleViews = findVisibleChildren(viewGroup);
-                        final int childCount = visibleViews.size();
-                        for (int i = 0; i < childCount; i++) {
-                            View child = visibleViews.get(i);
-                            List<MatchedView> matchedViews = findViewByPath(
-                                    mapping,
-                                    child,
-                                    path,
-                                    level + 1,
-                                    i,
-                                    mapKey);
-                            result.addAll(matchedViews);
-                        }
-                    }
-
-                    return result;
-                } else if (pathElement.className.equals(CURRENT_CLASS_NAME)) {
-                    // Set self as selected element
-                    result.add(new MatchedView(view, mapKey));
-
-                    return result;
-                }
-
-                if (!isTheSameView(view, pathElement, index)) {
-                    return result;
-                }
-
-                // Found it!
-                if (level == path.size() - 1) {
-                    result.add(new MatchedView(view, mapKey));
-                }
-            }
-
-            if (view instanceof ViewGroup) {
-                final ViewGroup viewGroup = (ViewGroup) view;
-                List<View> visibleViews = findVisibleChildren(viewGroup);
-                final int childCount = visibleViews.size();
-                for (int i = 0; i < childCount; i++) {
-                    View child = visibleViews.get(i);
-                    List<MatchedView> matchedViews = findViewByPath(
-                            mapping,
-                            child,
-                            path,
-                            level + 1,
-                            i,
-                            mapKey);
-                    result.addAll(matchedViews);
-                }
-            }
-
-            return result;
-        }
-
-        private static boolean isTheSameView(
-                final View targetView,
-                final PathComponent pathElement,
-                final int index) {
-            if (pathElement.index != -1 && index != pathElement.index) {
-                return false;
-            }
-
-            if (!targetView.getClass().getCanonicalName().equals(pathElement.className)) {
-                if (pathElement.className.matches(".*android\\..*")) {
-                    String[] names = pathElement.className.split("\\.");
-                    if (names.length > 0) {
-                        String SimpleName = names[names.length - 1];
-                        if (!targetView.getClass().getSimpleName().equals(SimpleName)) {
-                            return false;
-                        }
-                    } else {
-                        return false;
-                    }
-                } else {
-                    return false;
-                }
-            }
-
-            if ((pathElement.matchBitmask
-                    & MatchBitmaskType.ID.getValue()) > 0) {
-                if (pathElement.id != targetView.getId()) {
-                    return false;
-                }
-            }
-
-            if ((pathElement.matchBitmask
-                    & MatchBitmaskType.TEXT.getValue()) > 0) {
-                String pathText = pathElement.text;
-                String text = ViewHierarchy.getTextOfView(targetView);
-
-                if (!pathText.equals(text)) {
-                    return false;
-                }
-            }
-
-            if ((pathElement.matchBitmask
-                    & MatchBitmaskType.DESCRIPTION.getValue()) > 0) {
-                String pathDesc = pathElement.description;
-                String targetDesc = targetView.getContentDescription() == null ? "" :
-                        String.valueOf(targetView.getContentDescription());
-                if (!pathDesc.equals(targetDesc)) {
-                    return false;
-                }
-            }
-
-            if ((pathElement.matchBitmask
-                    & MatchBitmaskType.HINT.getValue()) > 0) {
-                String pathHint = pathElement.hint;
-                String targetHint = ViewHierarchy.getHintOfView(targetView);
-
-                if (!pathHint.equals(targetHint)) {
-                    return false;
-                }
-            }
-
-            if ((pathElement.matchBitmask
-                    & MatchBitmaskType.TAG.getValue()) > 0) {
-                String tag = pathElement.tag;
-                String targetTag = targetView.getTag() == null ? "" :
-                        String.valueOf(targetView.getTag());
-                if (!tag.equals(targetTag)) {
-                    return false;
-                }
-            }
-
-            return true;
-        }
-
-        private static List<View> findVisibleChildren(ViewGroup viewGroup) {
-            List<View> visibleViews = new ArrayList<>();
-            final int childCount = viewGroup.getChildCount();
-            for (int i = 0; i < childCount; i++) {
-                View child = viewGroup.getChildAt(i);
-                if (child.getVisibility() == View.VISIBLE) {
-                    visibleViews.add(child);
-                }
-            }
-            return visibleViews;
-        }
-
-        private void attachListener(final MatchedView matchedView,
-                                    final View rootView,
-                                    final EventBinding mapping) {
-            if (mapping == null) {
-                return;
-            }
-            try {
-                View view = matchedView.getView();
-                if (view == null) {
-                    return;
-                }
-                final String mapKey = matchedView.getViewMapKey();
-                View.AccessibilityDelegate existingDelegate =
-                        ViewHierarchy.getExistingDelegate(view);
-                boolean delegateExists = existingDelegate != null;
-                boolean isCodelessDelegate = delegateExists && existingDelegate instanceof
-                                CodelessLoggingEventListener.AutoLoggingAccessibilityDelegate;
-                boolean delegateSupportCodelessLogging =
-                        isCodelessDelegate &&
-                        ((CodelessLoggingEventListener.AutoLoggingAccessibilityDelegate)
-                                existingDelegate).getSupportCodelessLogging();
-                if (!this.delegateMap.containsKey(mapKey) &&
-                        (!delegateExists ||
-                                !isCodelessDelegate || !delegateSupportCodelessLogging)) {
-                    View.AccessibilityDelegate delegate =
-                            CodelessLoggingEventListener.getAccessibilityDelegate(
-                                    mapping, rootView, view);
-                    view.setAccessibilityDelegate(delegate);
-                    this.delegateMap.put(mapKey, mapping.getEventName());
-                }
-            } catch (FacebookException e) {
-                Log.e(TAG, "Failed to attach auto logging event listener.", e);
-            }
-        }
-    }
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/Constants.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/Constants.java
deleted file mode 100644
index ccef73db1..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/Constants.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless.internal;
-
-public class Constants {
-    public static final int MAX_TREE_DEPTH = 25;
-    public static final String IS_CODELESS_EVENT_KEY = "_is_fb_codeless";
-
-    public static final String EVENT_MAPPING_PATH_TYPE_KEY = "path_type";
-    public static final String PATH_TYPE_RELATIVE = "relative";
-    public static final String PATH_TYPE_ABSOLUTE = "absolute";
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/EventBinding.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/EventBinding.java
deleted file mode 100644
index 2dabd0494..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/EventBinding.java
+++ /dev/null
@@ -1,164 +0,0 @@
-/*
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless.internal;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-public class EventBinding {
-    private final String eventName;
-    private final MappingMethod method;
-    private final ActionType type;
-    private final String appVersion;
-    private final List<PathComponent> path;
-    private final List<ParameterComponent> parameters;
-    private final String componentId;
-    private final String pathType;
-    private final String activityName;
-
-    public EventBinding(final String eventName,
-                        final MappingMethod method,
-                        final ActionType type,
-                        final String appVersion,
-                        final List<PathComponent> path,
-                        final List<ParameterComponent> parameters,
-                        final String componentId,
-                        final String pathType,
-                        final String activityName) {
-        this.eventName = eventName;
-        this.method = method;
-        this.type = type;
-        this.appVersion = appVersion;
-        this.path = path;
-        this.parameters = parameters;
-        this.componentId = componentId;
-        this.pathType = pathType;
-        this.activityName = activityName;
-    }
-
-    public static List<EventBinding> parseArray(JSONArray array) {
-        List<EventBinding> eventBindings = new ArrayList<>();
-
-        try {
-            int length = array != null ? array.length() : 0;
-            for (int i = 0; i < length; i++) {
-                EventBinding eventBinding =
-                        getInstanceFromJson(array.getJSONObject(i));
-                eventBindings.add(eventBinding);
-            }
-        } catch (JSONException e) {
-            // Ignore
-        }
-
-        return eventBindings;
-    }
-
-    public static EventBinding getInstanceFromJson(final JSONObject mapping)
-            throws JSONException {
-        String eventName = mapping.getString("event_name");
-        MappingMethod method = MappingMethod.valueOf(mapping.getString("method").toUpperCase());
-        ActionType type = ActionType.valueOf(mapping.getString("event_type").toUpperCase());
-        String appVersion = mapping.getString("app_version");
-        JSONArray jsonPathArray = mapping.getJSONArray("path");
-        List<PathComponent> path = new ArrayList<>();
-        for (int i = 0; i < jsonPathArray.length(); i++) {
-            JSONObject jsonPath = jsonPathArray.getJSONObject(i);
-            PathComponent component = new PathComponent(jsonPath);
-            path.add(component);
-        }
-        String pathType = mapping.optString(Constants.EVENT_MAPPING_PATH_TYPE_KEY,
-                Constants.PATH_TYPE_ABSOLUTE);
-        JSONArray jsonParameterArray = mapping.optJSONArray("parameters");
-        List<ParameterComponent> parameters = new ArrayList<>();
-        if (null != jsonParameterArray) {
-            for (int i = 0; i < jsonParameterArray.length(); i++) {
-                JSONObject jsonParameter = jsonParameterArray.getJSONObject(i);
-                ParameterComponent component = new ParameterComponent(jsonParameter);
-                parameters.add(component);
-            }
-        }
-        String componentId = mapping.optString("component_id");
-        String activityName = mapping.optString("activity_name");
-
-        return new EventBinding(
-                eventName,
-                method,
-                type,
-                appVersion,
-                path,
-                parameters,
-                componentId,
-                pathType,
-                activityName
-        );
-    }
-
-    public List<PathComponent> getViewPath() {
-        return Collections.unmodifiableList(this.path);
-    }
-    public List<ParameterComponent> getViewParameters() {
-        return Collections.unmodifiableList(this.parameters);
-    }
-
-    public String getEventName() {
-        return this.eventName;
-    }
-
-    public ActionType getType() {
-        return this.type;
-    }
-
-    public MappingMethod getMethod() {
-        return this.method;
-    }
-
-    public String getAppVersion() {
-        return this.appVersion;
-    }
-
-    public String getComponentId() {
-        return this.componentId;
-    }
-
-    public String getPathType() {
-        return this.pathType;
-    }
-
-    public String getActivityName() {
-        return this.activityName;
-    }
-
-    public enum MappingMethod {
-        MANUAL,
-        INFERENCE,
-    }
-
-    public enum ActionType {
-        CLICK,
-        SELECTED,
-        TEXT_CHANGED,
-    }
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ParameterComponent.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ParameterComponent.java
deleted file mode 100644
index 71fbf8f9b..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ParameterComponent.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless.internal;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public final class ParameterComponent {
-    private static final String PARAMETER_NAME_KEY = "name";
-    private static final String PARAMETER_PATH_KEY = "path";
-    private static final String PARAMETER_VALUE_KEY = "value";
-
-    public final String name;
-    public final String value;
-    public final List<PathComponent> path;
-    public final String pathType;
-
-    public ParameterComponent(final JSONObject component) throws JSONException {
-        name = component.getString(PARAMETER_NAME_KEY);
-        value = component.optString(PARAMETER_VALUE_KEY);
-
-        ArrayList<PathComponent> pathComponents = new ArrayList<>();
-        JSONArray jsonPathArray = component.optJSONArray(PARAMETER_PATH_KEY);
-        if (null != jsonPathArray) {
-            for (int i = 0; i < jsonPathArray.length(); i++) {
-                PathComponent pathComponent = new PathComponent((jsonPathArray.getJSONObject(i)));
-                pathComponents.add(pathComponent);
-            }
-        }
-        path = pathComponents;
-        pathType = component.optString(Constants.EVENT_MAPPING_PATH_TYPE_KEY,
-                Constants.PATH_TYPE_ABSOLUTE);
-
-    }
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/PathComponent.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/PathComponent.java
deleted file mode 100644
index 0cedd3dd1..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/PathComponent.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless.internal;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-public final class PathComponent {
-    public enum MatchBitmaskType {
-        ID(1),
-        TEXT(1 << 1),
-        TAG(1<< 2),
-        DESCRIPTION(1 << 3),
-        HINT(1 << 4);
-
-        private final int value;
-
-        MatchBitmaskType(int value) {
-            this.value = value;
-        }
-
-        public int getValue() {
-            return value;
-        }
-    }
-
-    private static final String PATH_CLASS_NAME_KEY = "class_name";
-    private static final String PATH_INDEX_KEY = "index";
-    private static final String PATH_ID_KEY = "id";
-    private static final String PATH_TEXT_KEY = "text";
-    private static final String PATH_TAG_KEY = "tag";
-    private static final String PATH_DESCRIPTION_KEY = "description";
-    private static final String PATH_HINT_KEY = "hint";
-    private static final String PATH_MATCH_BITMASK_KEY = "match_bitmask";
-
-    public final String className;
-    public final int index;
-    public final int id;
-    public final String text;
-    public final String tag;
-    public final String description;
-    public final String hint;
-    public final int matchBitmask;
-
-    PathComponent(final JSONObject component) throws JSONException {
-        className = component.getString(PATH_CLASS_NAME_KEY);
-        index = component.optInt(PATH_INDEX_KEY, -1);
-        id = component.optInt(PATH_ID_KEY);
-        text = component.optString(PATH_TEXT_KEY);
-        tag = component.optString(PATH_TAG_KEY);
-        description = component.optString(PATH_DESCRIPTION_KEY);
-        hint = component.optString(PATH_HINT_KEY);
-        matchBitmask = component.optInt(PATH_MATCH_BITMASK_KEY);
-    }
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/SensitiveUserDataUtils.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/SensitiveUserDataUtils.java
deleted file mode 100644
index db2898a8a..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/SensitiveUserDataUtils.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless.internal;
-
-import android.text.method.TransformationMethod;
-import android.widget.TextView;
-import android.view.View;
-import android.text.InputType;
-import android.text.method.PasswordTransformationMethod;
-import com.facebook.appevents.codeless.internal.ViewHierarchy;
-
-public class SensitiveUserDataUtils {
-
-    public static boolean isSensitiveUserData(View view) {
-        if (view instanceof TextView) {
-            TextView textView = (TextView) view;
-            return isPassword(textView) || isCreditCard(textView) || isPersonName(textView)
-                    || isPostalAddress(textView) || isPhoneNumber(textView)
-                    || isEmail(textView);
-        }
-        return false;
-    }
-
-    private static boolean isPassword(TextView view) {
-        int inputType = view.getInputType();
-        if (inputType == InputType.TYPE_TEXT_VARIATION_PASSWORD) {
-            return true;
-        }
-        TransformationMethod method = view.getTransformationMethod();
-        return method instanceof PasswordTransformationMethod;
-    }
-
-    private static boolean isEmail(TextView view) {
-        int inputType = view.getInputType();
-        if (inputType == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS) {
-            return true;
-        }
-        String text = ViewHierarchy.getTextOfView(view);
-        if (text == null || text.length() == 0) {
-            return false;
-        }
-        return android.util.Patterns.EMAIL_ADDRESS.matcher(text).matches();
-    }
-
-    private static boolean isPersonName(TextView view) {
-        int inputType = view.getInputType();
-        return inputType == InputType.TYPE_TEXT_VARIATION_PERSON_NAME;
-    }
-
-    private static boolean isPostalAddress(TextView view) {
-        int inputType = view.getInputType();
-        return inputType == InputType.TYPE_TEXT_VARIATION_POSTAL_ADDRESS;
-    }
-
-    private static boolean isPhoneNumber(TextView view) {
-        int inputType = view.getInputType();
-        return inputType == InputType.TYPE_CLASS_PHONE;
-    }
-
-    private static boolean isCreditCard(TextView view) {
-        String ccNumber = ViewHierarchy.getTextOfView(view).replaceAll("\\s","");
-        int length = ccNumber.length();
-        if (length < 12 || length > 19) {
-            return false;
-        }
-        int sum = 0;
-        boolean alternate = false;
-        for (int i = length - 1; i >= 0; i--)
-        {
-            char digit = ccNumber.charAt(i);
-            if (digit < '0' || digit > '9') {
-                return false;
-            }
-            int n = digit - '0';
-            if (alternate)
-            {
-                n *= 2;
-                if (n > 9)
-                {
-                    n = (n % 10) + 1;
-                }
-            }
-            sum += n;
-            alternate = !alternate;
-        }
-        return (sum % 10 == 0);
-    }
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
deleted file mode 100644
index 4e2a9d55c..000000000
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
+++ /dev/null
@@ -1,336 +0,0 @@
-/*
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.codeless.internal;
-
-import android.support.annotation.Nullable;
-import android.support.v4.view.NestedScrollingChild;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewParent;
-import android.widget.AdapterView;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.DatePicker;
-import android.widget.EditText;
-import android.widget.ImageView;
-import android.widget.RadioButton;
-import android.widget.RadioGroup;
-import android.widget.RatingBar;
-import android.widget.Spinner;
-import android.widget.Switch;
-import android.widget.TextView;
-import android.widget.TimePicker;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.List;
-
-public class ViewHierarchy {
-    private static final String TAG = ViewHierarchy.class.getCanonicalName();
-    private static final String GET_ACCESSIBILITY_METHOD = "getAccessibilityDelegate";
-
-    private static final String ID_KEY = "id";
-    private static final String CLASS_NAME_KEY = "classname";
-    private static final String CLASS_TYPE_BITMASK_KEY = "classtypebitmask";
-    private static final String TEXT_KEY = "text";
-    private static final String DESC_KEY = "description";
-    private static final String DIMENSION_KEY = "dimension";
-    private static final String TAG_KEY = "tag";
-    private static final String CHILDREN_VIEW_KEY = "childviews";
-    private static final String HINT_KEY = "hint";
-    private static final String DIMENSION_TOP_KEY = "top";
-    private static final String DIMENSION_LEFT_KEY = "left";
-    private static final String DIMENSION_WIDTH_KEY = "width";
-    private static final String DIMENSION_HEIGHT_KEY = "height";
-    private static final String DIMENSION_SCROLL_X_KEY = "scrollx";
-    private static final String DIMENSION_SCROLL_Y_KEY = "scrolly";
-    private static final String DIMENSION_VISIBILITY_KEY = "visibility";
-
-    private static final int TEXTVIEW_BITMASK = 0;
-    private static final int IMAGEVIEW_BITMASK = 1;
-    private static final int BUTTON_BITMASK = 2;
-    private static final int CLICKABLE_VIEW_BITMASK = 5;
-    private static final int ADAPTER_VIEW_ITEM_BITMASK = 9;
-    private static final int LABEL_BITMASK = 10;
-    private static final int INPUT_BITMASK = 11;
-    private static final int PICKER_BITMASK = 12;
-    private static final int SWITCH_BITMASK = 13;
-    private static final int RADIO_GROUP_BITMASK = 14;
-    private static final int CHECKBOX_BITMASK = 15;
-    private static final int RATINGBAR_BITMASK = 16;
-
-    @Nullable
-    public static ViewGroup getParentOfView(View view) {
-        if (null == view) {
-            return null;
-        }
-
-        ViewParent parent = view.getParent();
-        if (parent != null && parent instanceof ViewGroup) {
-            return (ViewGroup)parent;
-        }
-
-        return null;
-    }
-
-    public static List<View> getChildrenOfView(View view) {
-        ArrayList<View> children = new ArrayList<>();
-
-        if (view != null && view instanceof ViewGroup) {
-            ViewGroup viewGroup = (ViewGroup)view;
-            int count = viewGroup.getChildCount();
-            for (int i = 0; i < count; i++) {
-                children.add(viewGroup.getChildAt(i));
-            }
-        }
-
-        return children;
-    }
-
-    public static JSONObject getDictionaryOfView(View view) {
-        JSONObject json = new JSONObject();
-
-        try {
-            String text = getTextOfView(view);
-            String hint = getHintOfView(view);
-            Object tag = view.getTag();
-            CharSequence description = view.getContentDescription();
-
-            json.put(CLASS_NAME_KEY, view.getClass().getCanonicalName());
-            json.put(CLASS_TYPE_BITMASK_KEY, getClassTypeBitmask(view));
-            json.put(ID_KEY, view.getId());
-            if (!SensitiveUserDataUtils.isSensitiveUserData(view)) {
-                json.put(TEXT_KEY, text);
-            } else {
-                json.put(TEXT_KEY, "");
-            }
-            json.put(HINT_KEY, hint);
-            if (tag != null) {
-                json.put(TAG_KEY, tag.toString());
-            }
-            if (description != null) {
-                json.put(DESC_KEY, description.toString());
-            }
-            JSONObject dimension = getDimensionOfView(view);
-            json.put(DIMENSION_KEY, dimension);
-
-            JSONArray childviews = new JSONArray();
-            List<View> children = getChildrenOfView(view);
-            for (int i = 0; i < children.size(); i++) {
-                View child = children.get(i);
-                JSONObject childInfo = getDictionaryOfView(child);
-                childviews.put(childInfo);
-            }
-            json.put(CHILDREN_VIEW_KEY, childviews);
-
-        } catch (JSONException e) {
-            Log.e(TAG, "Failed to create JSONObject for view.", e);
-        }
-
-        return json;
-    }
-
-    private static int getClassTypeBitmask(View view) {
-        int bitmask = 0;
-        if (view instanceof ImageView) {
-            bitmask |= (1 << IMAGEVIEW_BITMASK);
-        }
-
-        if (isClickableView(view)) {
-            bitmask |= (1 << CLICKABLE_VIEW_BITMASK);
-        }
-        if (isAdapterViewItem(view)) {
-            bitmask |= (1 << ADAPTER_VIEW_ITEM_BITMASK);
-        }
-
-        if (view instanceof TextView) {
-            bitmask |= (1 << LABEL_BITMASK);
-            bitmask |= (1 << TEXTVIEW_BITMASK);
-
-            if (view instanceof Button) {
-                bitmask |= (1 << BUTTON_BITMASK);
-
-                if (view instanceof Switch) {
-                    bitmask |= (1 << SWITCH_BITMASK);
-                } else if (view instanceof CheckBox) {
-                    bitmask |= (1 << CHECKBOX_BITMASK);
-                }
-            }
-
-            if (view instanceof EditText) {
-                bitmask |= (1 << INPUT_BITMASK);
-            }
-        } else if (view instanceof Spinner
-                || view instanceof DatePicker) {
-            bitmask |= (1 << PICKER_BITMASK);
-        } else if (view instanceof RatingBar) {
-            bitmask |= (1 << RATINGBAR_BITMASK);
-        } else if (view instanceof RadioGroup) {
-            bitmask |= (1 << RADIO_GROUP_BITMASK);
-        }
-
-        return bitmask;
-    }
-
-    public static boolean isClickableView(View view) {
-        try {
-            Field listenerInfoField = null;
-            listenerInfoField = Class.forName("android.view.View")
-                    .getDeclaredField("mListenerInfo");
-            if (listenerInfoField != null) {
-                listenerInfoField.setAccessible(true);
-            }
-
-            Object listenerObj = null;
-            listenerObj = listenerInfoField.get(view);
-            if (listenerObj == null) {
-                return false;
-            }
-
-            Field listenerField = null;
-            View.OnClickListener listener = null;
-            listenerField = Class.forName("android.view.View$ListenerInfo")
-                    .getDeclaredField("mOnClickListener");
-            if (listenerField != null) {
-                listener = (View.OnClickListener) listenerField.get(listenerObj);
-            }
-
-            return (listener != null);
-        } catch (Exception e) {
-            Log.e(TAG, "Failed to check if the view is clickable.", e);
-            return false;
-        }
-    }
-
-    private static boolean isAdapterViewItem(View view) {
-        ViewParent parent = view.getParent();
-        if (parent != null) {
-            if (parent instanceof AdapterView
-                    || parent instanceof NestedScrollingChild) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public static String getTextOfView(View view) {
-        Object textObj = null;
-        if (view instanceof TextView) {
-            textObj = ((TextView) view).getText();
-
-            if (view instanceof Switch) {
-                boolean isOn = ((Switch)view).isChecked();
-                textObj = isOn ? "1" : "0";
-            }
-        } else if (view instanceof Spinner) {
-            Object selectedItem = ((Spinner) view).getSelectedItem();
-            if (selectedItem != null) {
-                textObj = selectedItem.toString();
-            }
-        } else if (view instanceof DatePicker) {
-            DatePicker picker = (DatePicker) view;
-            int y = picker.getYear();
-            int m = picker.getMonth();
-            int d = picker.getDayOfMonth();
-            textObj = String.format("%04d-%02d-%02d", y, m, d);
-        } else if (view instanceof TimePicker) {
-            TimePicker picker = (TimePicker) view;
-            int h = picker.getCurrentHour();
-            int m = picker.getCurrentMinute();
-            textObj = String.format("%02d:%02d", h, m);
-        } else if (view instanceof RadioGroup) {
-            RadioGroup radioGroup = (RadioGroup)view;
-            int checkedId = radioGroup.getCheckedRadioButtonId();
-            int childCount = radioGroup.getChildCount();
-            for (int i = 0; i < childCount; i++) {
-                View child = radioGroup.getChildAt(i);
-                if (child.getId() == checkedId && child instanceof RadioButton) {
-                    textObj = ((RadioButton)child).getText();
-                    break;
-                }
-            }
-        } else if (view instanceof RatingBar) {
-            RatingBar bar = (RatingBar)view;
-            float rating = bar.getRating();
-            textObj = String.valueOf(rating);
-        }
-
-        return textObj == null ? "" : textObj.toString();
-    }
-
-    public static String getHintOfView(View view) {
-        Object hintObj = null;
-        if (view instanceof TextView) {
-            hintObj = ((TextView) view).getHint();
-        } else if (view instanceof EditText) {
-            hintObj = ((EditText) view).getHint();
-        }
-
-        return hintObj == null ? "" : hintObj.toString();
-    }
-
-    private static JSONObject getDimensionOfView(View view) {
-        JSONObject dimension = new JSONObject();
-
-        try {
-            dimension.put(DIMENSION_TOP_KEY, view.getTop());
-            dimension.put(DIMENSION_LEFT_KEY, view.getLeft());
-            dimension.put(DIMENSION_WIDTH_KEY, view.getWidth());
-            dimension.put(DIMENSION_HEIGHT_KEY, view.getHeight());
-            dimension.put(DIMENSION_SCROLL_X_KEY, view.getScrollX());
-            dimension.put(DIMENSION_SCROLL_Y_KEY, view.getScrollY());
-            dimension.put(DIMENSION_VISIBILITY_KEY, view.getVisibility());
-        } catch (JSONException e) {
-            Log.e(TAG, "Failed to create JSONObject for dimension.", e);
-        }
-
-        return dimension;
-    }
-
-    @Nullable
-    public static View.AccessibilityDelegate getExistingDelegate(View view) {
-        try {
-            Class<?> viewClass = view.getClass();
-            Method getAccessibilityDelegateMethod =
-                    viewClass.getMethod(GET_ACCESSIBILITY_METHOD);
-            return (View.AccessibilityDelegate)
-                    getAccessibilityDelegateMethod.invoke(view);
-        } catch (NoSuchMethodException e) {
-            return null;
-        } catch (NullPointerException e) {
-            return null;
-        } catch (SecurityException e) {
-            return null;
-        } catch (IllegalAccessException e) {
-            return null;
-        } catch (InvocationTargetException e) {
-            return null;
-        }
-    }
-}
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
index f9475319f..1b3399275 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
@@ -29,7 +29,6 @@
 import com.facebook.FacebookSdk;
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.AppEventsLogger;
-import com.facebook.appevents.codeless.CodelessMatcher;
 import com.facebook.internal.FetchedAppSettings;
 import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.Logger;
@@ -59,7 +58,6 @@
     private static AtomicBoolean tracking = new AtomicBoolean(false);
     private static String appId;
     private static long currentActivityAppearTime;
-    private static final CodelessMatcher codelessMatcher = new CodelessMatcher();
 
     public static void startTracking(Application application, final String appId) {
         if (!tracking.compareAndSet(false, true)) {
@@ -167,7 +165,6 @@ public static void onActivityResumed(Activity activity) {
         ActivityLifecycleTracker.currentActivityAppearTime = currentTime;
         final Context applicationContext = activity.getApplicationContext();
         final String activityName = Utility.getActivityName(activity);
-        codelessMatcher.add(activity);
         Runnable handleActivityResume = new Runnable() {
             @Override
             public void run() {
@@ -224,7 +221,6 @@ private static void onActivityPaused(Activity activity) {
         // Pull out this information now to avoid holding a reference to the activity
         final Context applicationContext = activity.getApplicationContext();
         final String activityName = Utility.getActivityName(activity);
-        codelessMatcher.remove(activity);
         Runnable handleActivityPaused = new Runnable() {
             @Override
             public void run() {
