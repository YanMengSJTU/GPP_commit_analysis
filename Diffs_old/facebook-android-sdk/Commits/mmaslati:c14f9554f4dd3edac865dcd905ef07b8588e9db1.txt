diff --git a/facebook/build.gradle b/facebook/build.gradle
index ff6143840..f53038b70 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -8,14 +8,16 @@ project.group = 'com.facebook.android'
 
 dependencies {
     // Facebook Dependencies
-    // For preparing the plugin, you'll need to add the jar files for these support libraries to the project.
-    compile 'com.android.support:support-v4:24.0.0'
-    compile 'com.android.support:cardview-v7:24.0.0'
-    compile 'com.android.support:customtabs:24.0.0'
+    // CORONA: For preparing the plugin, you'll need to add the jar files for these support libraries to the project.
+    // The cardview and custom tabs dependencies have been removed until the Corona plugin
+    // uses the features that need these.
+    compile 'com.android.support:support-v4:23.4.0'
+//    compile 'com.android.support:cardview-v7:23.4.0'
+//    compile 'com.android.support:customtabs:23.4.0'
     compile 'com.parse.bolts:bolts-android:1.4.0'
 
     // Unit Tests
-    testCompile 'com.android.support:appcompat-v7:24.0.0'
+    testCompile 'com.android.support:appcompat-v7:23.4.0'
 
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
index bf2a0b0d3..3b5e0be09 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.13.1";
+    public static final String BUILD = "4.13.2";
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
index 2a2988784..d687efa1c 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
@@ -56,7 +56,7 @@ public static synchronized void persistEvents(
                     .get(accessTokenAppIdPair)
                     .addAll(appEvents.getEventsToPersist());
         } else {
-            persistedEvents.put(accessTokenAppIdPair, appEvents.getEventsToPersist());
+            persistedEvents.addEvents(accessTokenAppIdPair, appEvents.getEventsToPersist());
         }
 
         saveEventsToDisk(persistedEvents);
@@ -65,11 +65,11 @@ public static synchronized void persistEvents(
     public static synchronized void persistEvents(
             final AppEventCollection eventsToPersist) {
         assertIsNotMainThread();
-        PersistedEvents persistedEvents = new PersistedEvents();
+        PersistedEvents persistedEvents = readAndClearStore();
         for (AccessTokenAppIdPair accessTokenAppIdPair : eventsToPersist.keySet()) {
             SessionEventsState sessionEventsState = eventsToPersist.get(
                     accessTokenAppIdPair);
-            persistedEvents.put(
+            persistedEvents.addEvents(
                     accessTokenAppIdPair,
                     sessionEventsState.getEventsToPersist());
         }
@@ -82,14 +82,13 @@ public static synchronized PersistedEvents readAndClearStore() {
         assertIsNotMainThread();
 
         MovedClassObjectInputStream ois = null;
-        HashMap<AccessTokenAppIdPair, List<AppEvent>> obj = null;
         PersistedEvents persistedEvents = null;
         Context context = FacebookSdk.getApplicationContext();
         try {
             InputStream is = context.openFileInput(PERSISTED_EVENTS_FILENAME);
             ois = new MovedClassObjectInputStream(new BufferedInputStream(is));
 
-            obj = (HashMap<AccessTokenAppIdPair, List<AppEvent>>) ois.readObject();
+            persistedEvents = (PersistedEvents) ois.readObject();
         } catch (FileNotFoundException e) {
             // Expected if we never persisted any events.
         } catch (Exception e) {
@@ -105,9 +104,6 @@ public static synchronized PersistedEvents readAndClearStore() {
                 // Always delete this file after the above try catch to recover from read
                 // errors.
                 context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
-                if (obj != null) {
-                    persistedEvents = new PersistedEvents(obj);
-                }
             } catch (Exception ex) {
                 Log.w(TAG, "Got unexpected exception when removing events file: ", ex);
             }
diff --git a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
index 0163f8ea6..df47a7ac8 100644
--- a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
+++ b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
@@ -20,14 +20,58 @@
 
 package com.facebook.appevents;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Set;
+
+class PersistedEvents implements Serializable {
+    private static final long serialVersionUID = 2016_06_29_001L;
+
+    private HashMap<AccessTokenAppIdPair, List<AppEvent>> events = new HashMap<>();
 
-public class PersistedEvents extends HashMap<AccessTokenAppIdPair, List<AppEvent>> {
     public PersistedEvents() {
-        super();
     }
+
     public PersistedEvents(HashMap<AccessTokenAppIdPair, List<AppEvent>> appEventMap) {
-        super(appEventMap);
+        events.putAll(appEventMap);
+    }
+
+    public Set<AccessTokenAppIdPair> keySet() {
+        return events.keySet();
+    }
+
+    public List<AppEvent> get(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return events.get(accessTokenAppIdPair);
+    }
+
+    public boolean containsKey(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return events.containsKey(accessTokenAppIdPair);
+    }
+
+    public void addEvents(AccessTokenAppIdPair accessTokenAppIdPair, List<AppEvent> appEvents) {
+        if (!events.containsKey(accessTokenAppIdPair)) {
+            events.put(accessTokenAppIdPair, appEvents);
+            return;
+        }
+
+        events.get(accessTokenAppIdPair).addAll(appEvents);
+    }
+
+    static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = 2016_06_29_001L;;
+        private final HashMap<AccessTokenAppIdPair, List<AppEvent>> proxyEvents;
+
+        private SerializationProxyV1(HashMap<AccessTokenAppIdPair, List<AppEvent>> events) {
+            this.proxyEvents = events;
+        }
+
+        private Object readResolve() {
+            return new PersistedEvents(proxyEvents);
+        }
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV1(events);
     }
 }
diff --git a/facebook/src/main/java/com/facebook/internal/CustomTab.java b/facebook/src/main/java/com/facebook/internal/CustomTab.java
index fab9b6ef2..a35c7448b 100644
--- a/facebook/src/main/java/com/facebook/internal/CustomTab.java
+++ b/facebook/src/main/java/com/facebook/internal/CustomTab.java
@@ -25,7 +25,8 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
-import android.support.customtabs.CustomTabsIntent;
+// CORONA: The custom tabs functionality is removed until the plugin uses the features that need it.
+//import android.support.customtabs.CustomTabsIntent;
 
 public class CustomTab {
 
@@ -42,8 +43,10 @@ public CustomTab(String action, Bundle parameters) {
     }
 
     public void openCustomTab(Activity activity, String packageName) {
-        CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();
-        customTabsIntent.intent.setPackage(packageName);
-        customTabsIntent.launchUrl(activity, uri);
+        // CORONA: The custom tabs functionality is removed until the plugin uses the features that need it.
+//        android.util.Log.d("Corona", "Facebook SDK -> Hey, we're using a Chrome Custom Tab!");
+//        CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();
+//        customTabsIntent.intent.setPackage(packageName);
+//        customTabsIntent.launchUrl(activity, uri);
     }
 }
