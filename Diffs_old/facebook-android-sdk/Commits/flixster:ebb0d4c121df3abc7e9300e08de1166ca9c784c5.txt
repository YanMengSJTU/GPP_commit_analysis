diff --git a/facebook/res/layout/com_facebook_ad_interstitial_layout.xml b/facebook/res/layout/com_facebook_ad_interstitial_layout.xml
new file mode 100644
index 000000000..1a25fcfe8
--- /dev/null
+++ b/facebook/res/layout/com_facebook_ad_interstitial_layout.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    <WebView
+            android:id="@+id/adWebView"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+    <ImageButton
+            android:id="@+id/closeButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignRight="@+id/adWebView"
+            android:layout_alignTop="@+id/adView"
+            android:src="@drawable/com_facebook_close"
+            android:background="@android:color/transparent"
+            />
+
+</RelativeLayout>
diff --git a/facebook/src/com/facebook/ads/Ad.java b/facebook/src/com/facebook/ads/Ad.java
new file mode 100644
index 000000000..e869756bc
--- /dev/null
+++ b/facebook/src/com/facebook/ads/Ad.java
@@ -0,0 +1,30 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+public interface Ad {
+
+    void setAdListener(AdListener adListener);
+
+    void setTestMode(boolean testMode);
+
+    void loadAd();
+
+    void loadAd(AdTargetingOptions adTargetingOptions);
+
+    void destroy();
+}
diff --git a/facebook/src/com/facebook/ads/AdError.java b/facebook/src/com/facebook/ads/AdError.java
new file mode 100644
index 000000000..193c7c4dc
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdError.java
@@ -0,0 +1,36 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+public class AdError {
+
+    private final int errorCode;
+    private final String errorMessage;
+
+    public AdError(int errorCode, String errorMessage) {
+        this.errorCode = errorCode;
+        this.errorMessage = errorMessage;
+    }
+
+    public int getErrorCode() {
+        return errorCode;
+    }
+
+    public String getErrorMessage() {
+        return errorMessage;
+    }
+}
diff --git a/facebook/src/com/facebook/ads/AdInterstitial.java b/facebook/src/com/facebook/ads/AdInterstitial.java
new file mode 100644
index 000000000..2b97985cf
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdInterstitial.java
@@ -0,0 +1,172 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.v4.content.LocalBroadcastManager;
+import android.webkit.WebView;
+import com.facebook.FacebookRequestError;
+import com.facebook.ads.internal.AdRequest;
+import com.facebook.ads.internal.AdRequestController;
+import com.facebook.ads.internal.AdResponse;
+
+public class AdInterstitial implements Ad {
+
+    public static final String AD_INTERSTITIAL_DISPLAYED = "com.facebook.ads.interstitial.displayed";
+    public static final String AD_INTERSTITIAL_DISMISSED = "com.facebook.ads.interstitial.dismissed";
+    public static final String AD_INTERSTITIAL_CLICKED = "com.facebook.ads.interstitial.clicked";
+    public static final String AD_INTERSTITIAL_LOADED = "com.facebook.ads.interstitial.loaded";
+
+    private final Context context;
+    private final String placementId;
+    private final AdRequestController adRequestController;
+    private final AdInterstitialBroadcastReceiver broadcastReceiver;
+
+    private AdListener adListener;
+    private boolean loadRequested = false;
+    private boolean adLoaded = false;
+    private AdResponse adResponse;
+
+    public AdInterstitial(Context context, String placementId) {
+        this.context = context;
+        this.placementId = placementId;
+
+        WebView webView = new WebView(context);
+        String userAgentString = webView.getSettings().getUserAgentString();
+        webView.destroy();
+
+        adRequestController = new AdRequestController(this.context, this.placementId, AdSize.INTERSTITIAL,
+                userAgentString, new AdRequest.AdRequestListener() {
+            @Override
+            public void onLoading() {
+                // Do nothing.
+            }
+
+            @Override
+            public void onCompleted(AdResponse adResponse) {
+                AdInterstitial.this.adResponse = adResponse;
+                if (adResponse.getDataModel() != null) {
+                    adLoaded = true;
+                    if (adListener != null) {
+                        adListener.onAdLoaded(AdInterstitial.this);
+                    }
+
+                    Intent intent = new Intent(AdInterstitial.AD_INTERSTITIAL_LOADED);
+                    adResponse.getDataModel().addToIntentExtra(intent);
+                    LocalBroadcastManager.getInstance(AdInterstitial.this.context).sendBroadcast(intent);
+                } else {
+                    if (adListener != null) {
+                        adListener.onError(AdInterstitial.this, adResponse.getError());
+                    }
+                }
+            }
+
+            @Override
+            public void onError(FacebookRequestError error) {
+                adLoaded = false;
+                if (adListener != null) {
+                    adListener.onError(AdInterstitial.this, new AdError(error.getErrorCode(), error.getErrorMessage()));
+                }
+            }
+        });
+        adRequestController.setShouldRefresh(false);
+
+        broadcastReceiver = new AdInterstitialBroadcastReceiver();
+        broadcastReceiver.register();
+    }
+
+    @Override
+    public void setAdListener(AdListener adListener) {
+        this.adListener = adListener;
+    }
+
+    @Override
+    public void setTestMode(boolean testMode) {
+        adRequestController.setTestMode(true);
+    }
+
+    @Override
+    public void loadAd() {
+        loadAd(null);
+    }
+
+    @Override
+    public void loadAd(AdTargetingOptions targetingOptions) {
+        loadRequested = true;
+        adLoaded = false;
+        adRequestController.loadAd(targetingOptions);
+    }
+
+    @Override
+    public void destroy() {
+        broadcastReceiver.unregister();
+    }
+
+    public boolean isAdLoaded() {
+        return adLoaded;
+    }
+
+    public void show() {
+        broadcastReceiver.register();
+
+        Intent intent = new Intent(context, AdInterstitialActivity.class);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        if (adLoaded) {
+            adResponse.getDataModel().addToIntentExtra(intent);
+        }
+        context.startActivity(intent);
+
+        // Load the ad if not already requested.
+        if (!loadRequested) {
+            loadAd();
+        }
+    }
+
+    private class AdInterstitialBroadcastReceiver extends BroadcastReceiver {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (adListener == null) {
+                return;
+            }
+
+            String action = intent.getAction();
+            if (action.equals(AD_INTERSTITIAL_CLICKED)) {
+                adListener.onLeaveApplication(AdInterstitial.this);
+            } else if (action.equals(AD_INTERSTITIAL_DISMISSED)) {
+                adListener.onInterstitialDismissed(AdInterstitial.this);
+            } else if (action.equals(AD_INTERSTITIAL_DISPLAYED)) {
+                adListener.onInterstitialDisplayed(AdInterstitial.this);
+            }
+        }
+
+        public void register() {
+            IntentFilter interstitialIntentFilter = new IntentFilter();
+            interstitialIntentFilter.addAction(AD_INTERSTITIAL_DISPLAYED);
+            interstitialIntentFilter.addAction(AD_INTERSTITIAL_DISMISSED);
+            interstitialIntentFilter.addAction(AD_INTERSTITIAL_CLICKED);
+            LocalBroadcastManager.getInstance(context).registerReceiver(this, interstitialIntentFilter);
+        }
+
+        public void unregister() {
+            LocalBroadcastManager.getInstance(context).unregisterReceiver(this);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/AdInterstitialActivity.java b/facebook/src/com/facebook/ads/AdInterstitialActivity.java
new file mode 100644
index 000000000..583114c0c
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdInterstitialActivity.java
@@ -0,0 +1,127 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.ImageButton;
+import com.facebook.ads.internal.AdDataModel;
+import com.facebook.ads.internal.AdResponse;
+import com.facebook.ads.internal.AdWebViewUtils;
+import com.facebook.android.R;
+
+public class AdInterstitialActivity extends Activity {
+
+    private static final String TAG = AdInterstitialActivity.class.getSimpleName();
+
+    private WebView adWebView;
+    private ImageButton closeButton;
+    private AdInterstitialActivityBroadcastReceiver broadcastReceiver;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        broadcastReceiver = new AdInterstitialActivityBroadcastReceiver();
+        broadcastReceiver.register();
+
+        // Hide title and nav bar, must be done before setContentView.
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+
+        setContentView(R.layout.com_facebook_ad_interstitial_layout);
+
+        adWebView = (WebView)findViewById(R.id.adWebView);
+        closeButton = (ImageButton)findViewById(R.id.closeButton);
+
+        closeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                finish();
+            }
+        });
+
+        AdWebViewUtils.config(adWebView);
+        adWebView.setWebViewClient(new AdWebViewClient());
+
+        Intent intent = getIntent();
+        loadAdFromIntent(intent);
+
+        LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(AdInterstitial.AD_INTERSTITIAL_DISPLAYED));
+    }
+
+    private void loadAdFromIntent(Intent intent) {
+        AdDataModel dataModel = AdDataModel.fromIntentExtra(intent);
+        if (dataModel != null) {
+            AdResponse response = new AdResponse(0, dataModel, null);
+            adWebView.loadDataWithBaseURL(null, response.getDataModel().getMarkup(), "text/html", "utf-8", null);
+        }
+    }
+
+    @Override
+    public void finish() {
+        broadcastReceiver.unregister();
+        LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(AdInterstitial.AD_INTERSTITIAL_DISMISSED));
+        super.finish();
+    }
+
+    private class AdWebViewClient extends WebViewClient {
+        @Override
+        public boolean shouldOverrideUrlLoading(WebView view, String url) {
+            LocalBroadcastManager.getInstance(AdInterstitialActivity.this)
+                    .sendBroadcast(new Intent(AdInterstitial.AD_INTERSTITIAL_CLICKED));
+            // Open URL using default browser.
+            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+            try {
+                AdInterstitialActivity.this.startActivity(intent);
+            } catch (Exception ex) {
+                Log.d(TAG, "Failed to open ad url: " + url, ex);
+            }
+            return true;
+        }
+    }
+
+    private class AdInterstitialActivityBroadcastReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            loadAdFromIntent(intent);
+        }
+
+        public void register() {
+            IntentFilter adLoadedIntentFilter = new IntentFilter();
+            adLoadedIntentFilter.addAction(AdInterstitial.AD_INTERSTITIAL_LOADED);
+            LocalBroadcastManager.getInstance(AdInterstitialActivity.this).registerReceiver(this, adLoadedIntentFilter);
+
+        }
+
+        public void unregister() {
+            LocalBroadcastManager.getInstance(AdInterstitialActivity.this).unregisterReceiver(this);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/AdListener.java b/facebook/src/com/facebook/ads/AdListener.java
new file mode 100644
index 000000000..5c2988f07
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdListener.java
@@ -0,0 +1,30 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+public interface AdListener {
+
+    void onError(Ad ad, AdError error);
+
+    void onAdLoaded(Ad ad);
+
+    void onInterstitialDisplayed(Ad ad);
+
+    void onInterstitialDismissed(Ad ad);
+
+    void onLeaveApplication(Ad ad);
+}
diff --git a/facebook/src/com/facebook/ads/AdSize.java b/facebook/src/com/facebook/ads/AdSize.java
new file mode 100644
index 000000000..7f206d89a
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdSize.java
@@ -0,0 +1,39 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+public enum AdSize {
+
+    BANNER_320_50(320, 50),
+    INTERSTITIAL(0, 0);
+
+    private final int width;
+    private final int height;
+
+    private AdSize(int width, int height) {
+        this.width = width;
+        this.height = height;
+    }
+
+    public int getWidth() {
+        return width;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+}
diff --git a/facebook/src/com/facebook/ads/AdTargetingOptions.java b/facebook/src/com/facebook/ads/AdTargetingOptions.java
new file mode 100644
index 000000000..123cdfdcd
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdTargetingOptions.java
@@ -0,0 +1,21 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+// TODO: fill this up and pass to the endpoint
+public class AdTargetingOptions {
+}
diff --git a/facebook/src/com/facebook/ads/AdView.java b/facebook/src/com/facebook/ads/AdView.java
new file mode 100644
index 000000000..22b7c3410
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdView.java
@@ -0,0 +1,275 @@
+/**
+ * Copyright 2010-present Facebook.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package com.facebook.ads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.util.Log;
+import android.view.ViewGroup;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.RelativeLayout;
+
+import com.facebook.FacebookRequestError;
+import com.facebook.ads.internal.AdDataModel;
+import com.facebook.ads.internal.AdRequest;
+import com.facebook.ads.internal.AdRequestController;
+import com.facebook.ads.internal.AdResponse;
+import com.facebook.ads.internal.AdWebViewUtils;
+
+/**
+ * View that displays advertisement by Facebook.
+ * 
+ * It can be included in layout XML file: <code>
+ *   <com.facebook.ads.AdView
+ *         android:id="@+id/adView"
+ *         android:layout_width="wrap_content"
+ *         android:layout_height="wrap_content"
+ *         ad:placement_id="PLACEMENT_ID"
+ *         ad:ad_size="BANNER_320_50" />
+ * </code>
+ * 
+ * It can also be declared and added to view: <code>
+ *     AdView adView = new AdView(context, "PLACEMENT_ID", AdSize.BANNER_320_50);
+ *     addView(adView);
+ * </code>
+ * 
+ * AdView requires android.permission.INTERNET permission to make network requests. If
+ * android.permission.ACCESS_NETWORK_STATE permission is granted, AdView will only make network requests when network is
+ * connected.
+ */
+public class AdView extends RelativeLayout implements Ad {
+
+    private static final String TAG = AdView.class.getSimpleName();
+
+    private static final String DEFAULT_MIME_TYPE = "text/html";
+    private static final String DEFAULT_ENCODING = "utf-8";
+    private static final String SUPER_STATE_KEY = "AdView_superState";
+    private static final String LOADED_AD_DATA_MODEL_KEY = "AdView_loadedAdDataModel";
+    private static final String AD_REQUEST_CONTROLLER_KEY = "AdView_adRequestController";
+
+    private String placementId = null;
+    private AdSize adSize = AdSize.BANNER_320_50;
+    private AdListener adListener = null;
+
+    private WebView adWebView;
+
+    private AdDataModel loadedAdDataModel = null;
+
+    private final String userAgentString;
+    private final AdRequestController adRequestController;
+
+    public AdView(Context context) {
+        this(context, null, AdSize.BANNER_320_50);
+    }
+
+    /*
+    public AdView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        if (attrs != null) {
+            TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_ad_view);
+            try {
+                placementId = a.getString(R.styleable.com_facebook_ad_view_placement_id);
+
+                String adSizeString = a.getString(R.styleable.com_facebook_ad_view_ad_size);
+                adSize = AdSize.valueOf(adSizeString.toUpperCase());
+            } finally {
+                a.recycle();
+            }
+        }
+
+        initializeView(context);
+        userAgentString = adWebView.getSettings().getUserAgentString();
+        adRequestController = new AdRequestController(getContext(), placementId, adSize, userAgentString,
+                createAdRequestListener());
+    }
+    */
+    public AdView(Context context, String placementId, AdSize adSize) {
+        super(context);
+
+        this.placementId = placementId;
+        this.adSize = adSize;
+
+        initializeView(context);
+        userAgentString = adWebView.getSettings().getUserAgentString();
+        adRequestController = new AdRequestController(getContext(), placementId, adSize, userAgentString,
+                createAdRequestListener());
+    }
+
+    private void initializeView(Context context) {
+        if (adSize == null) {
+            throw new IllegalArgumentException("adSize");
+        }
+
+        RelativeLayout.LayoutParams layoutParams;
+        if (adSize == AdSize.INTERSTITIAL) {
+            layoutParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
+                    ViewGroup.LayoutParams.MATCH_PARENT);
+        } else {
+            float density = context.getResources().getDisplayMetrics().density;
+            layoutParams = new RelativeLayout.LayoutParams((int) Math.ceil(adSize.getWidth() * density),
+                    (int) Math.ceil(adSize.getHeight() * density));
+        }
+        layoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
+
+        adWebView = new WebView(context);
+        adWebView.setVisibility(GONE);
+        adWebView.setLayoutParams(layoutParams);
+        AdWebViewUtils.config(adWebView);
+        adWebView.setWebViewClient(new AdWebViewClient());
+        addView(adWebView);
+    }
+
+    private AdRequest.AdRequestListener createAdRequestListener() {
+        return new AdRequest.AdRequestListener() {
+            @Override
+            public void onLoading() {
+                // Do nothing.
+            }
+
+            @Override
+            public void onError(FacebookRequestError error) {
+                // Continue showing the previous ad in case of error.
+                updateView();
+                if (adListener != null) {
+                    adListener.onError(AdView.this, new AdError(error.getErrorCode(), error.getErrorMessage()));
+                }
+            }
+
+            @Override
+            public void onCompleted(AdResponse adResponse) {
+                AdDataModel adDataModel = adResponse.getDataModel();
+                if (adDataModel != null) {
+                    // Received an ad
+                    loadedAdDataModel = adDataModel;
+                    updateView();
+                    if (adListener != null) {
+                        adListener.onAdLoaded(AdView.this);
+                    }
+                } else {
+                    Log.d(TAG, "Ad request succeeded but no ad at this time.");
+                    updateView();
+                    if (adListener != null) {
+                        adListener.onError(AdView.this, adResponse.getError());
+                    }
+                }
+            }
+        };
+    }
+
+    @Override
+    public void setAdListener(AdListener adListener) {
+        this.adListener = adListener;
+    }
+
+    @Override
+    public void setTestMode(boolean testMode) {
+        adRequestController.setTestMode(testMode);
+    }
+
+    @Override
+    public void loadAd() {
+        loadAd(null);
+    }
+
+    @Override
+    public void loadAd(AdTargetingOptions adTargetingOptions) {
+        adRequestController.loadAd(adTargetingOptions);
+    }
+
+    private void updateView() {
+        if (loadedAdDataModel != null) {
+            adWebView.clearView();
+            adWebView.setVisibility(GONE);
+            adWebView.loadDataWithBaseURL(null, loadedAdDataModel.getMarkup(), DEFAULT_MIME_TYPE, DEFAULT_ENCODING,
+                    null);
+            adWebView.setVisibility(VISIBLE);
+        } else {
+            adWebView.setVisibility(GONE);
+        }
+    }
+
+    @Override
+    public void destroy() {
+        adRequestController.destroy();
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Parcelable superState = super.onSaveInstanceState();
+        Bundle instanceState = new Bundle();
+        instanceState.putParcelable(SUPER_STATE_KEY, superState);
+        instanceState.putParcelable(AD_REQUEST_CONTROLLER_KEY, adRequestController.onSaveInstanceState());
+        if (loadedAdDataModel != null) {
+            instanceState.putParcelable(LOADED_AD_DATA_MODEL_KEY, loadedAdDataModel.saveToBundle());
+        }
+        return instanceState;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        if (state.getClass() != Bundle.class) {
+            super.onRestoreInstanceState(state);
+        } else {
+            Bundle instanceState = (Bundle) state;
+            super.onRestoreInstanceState(instanceState.getParcelable(SUPER_STATE_KEY));
+
+            Bundle adRequestControllerBundle = instanceState.getParcelable(AD_REQUEST_CONTROLLER_KEY);
+            if (adRequestControllerBundle != null) {
+                adRequestController.onRestoreInstanceState(adRequestControllerBundle);
+            }
+
+            Bundle loadedAdDataModelBundle = instanceState.getParcelable(LOADED_AD_DATA_MODEL_KEY);
+            if (loadedAdDataModelBundle != null) {
+                AdDataModel savedAdDataModel = null;
+                try {
+                    savedAdDataModel = AdDataModel.fromBundle(loadedAdDataModelBundle);
+                } catch (Exception ex) {
+                    Log.w(TAG, "Error restoring ad data model.", ex);
+                }
+                if (savedAdDataModel != null) {
+                    loadedAdDataModel = savedAdDataModel;
+                }
+                updateView();
+            }
+        }
+    }
+
+    @Override
+    protected void onWindowVisibilityChanged(int visibility) {
+        super.onWindowVisibilityChanged(visibility);
+        adRequestController.onWindowVisibilityChanged(visibility);
+    }
+
+    private class AdWebViewClient extends WebViewClient {
+        @Override
+        public boolean shouldOverrideUrlLoading(WebView view, String url) {
+            if (adListener != null) {
+                adListener.onLeaveApplication(AdView.this);
+            }
+            // Open URL using default browser.
+            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+            try {
+                getContext().startActivity(intent);
+            } catch (Exception ex) {
+                Log.d(TAG, "Failed to open ad url: " + url, ex);
+            }
+            return true;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdDataModel.java b/facebook/src/com/facebook/ads/internal/AdDataModel.java
new file mode 100644
index 000000000..a1430d0ff
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdDataModel.java
@@ -0,0 +1,77 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Intent;
+import android.os.Bundle;
+
+public class AdDataModel {
+
+    private static final String MARKUP_KEY = "markup";
+    private static final String STORE_ID_KEY = "storeId";
+    private static final String STORE_TYPE_KEY = "storeType";
+
+    private final String markup;
+    private final String storeId;
+    private final String storeType;
+
+    public AdDataModel(String markup, String storeId, String storeType) {
+        this.markup = markup;
+        this.storeId = storeId;
+        this.storeType = storeType;
+    }
+
+    public String getMarkup() {
+        return markup;
+    }
+
+    public String getStoreId() {
+        return storeId;
+    }
+
+    public String getStoreType() {
+        return storeType;
+    }
+
+    public Bundle saveToBundle() {
+        Bundle instanceState = new Bundle();
+        instanceState.putString(MARKUP_KEY, markup);
+        instanceState.putString(STORE_ID_KEY, storeId);
+        instanceState.putString(STORE_TYPE_KEY, storeType);
+        return instanceState;
+    }
+
+    public void addToIntentExtra(Intent intent) {
+        intent.putExtra(MARKUP_KEY, markup);
+        intent.putExtra(STORE_ID_KEY, storeId);
+        intent.putExtra(STORE_TYPE_KEY, storeType);
+    }
+
+    public static AdDataModel fromBundle(Bundle instanceState) {
+        String markup = instanceState.getString(MARKUP_KEY);
+        String storeId = instanceState.getString(STORE_ID_KEY);
+        String storeType = instanceState.getString(STORE_TYPE_KEY);
+        return new AdDataModel(markup, storeId, storeType);
+    }
+
+    public static AdDataModel fromIntentExtra(Intent intent) {
+        String markup = intent.getStringExtra(MARKUP_KEY);
+        String storeId = intent.getStringExtra(STORE_ID_KEY);
+        String storeType = intent.getStringExtra(STORE_TYPE_KEY);
+        return new AdDataModel(markup, storeId, storeType);
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdRequest.java b/facebook/src/com/facebook/ads/internal/AdRequest.java
new file mode 100644
index 000000000..d75558e3a
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdRequest.java
@@ -0,0 +1,124 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Context;
+import android.os.Build;
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.*;
+import com.facebook.ads.AdSize;
+
+public class AdRequest {
+
+    public interface AdRequestListener {
+        void onLoading();
+        void onCompleted(AdResponse adResponse);
+        void onError(FacebookRequestError error);
+    }
+
+    private static final String TAG = AdRequest.class.getSimpleName();
+    private static final String ADS_ENDPOINT = "ads";
+
+    private static final String PLACEMENT_ID_PARAM = "placement_id";
+    private static final String ATTRIBUTION_ID_PARAM = "attribution_id";
+    private static final String WIDTH_PARAM = "width";
+    private static final String HEIGHT_PARAM = "height";
+    private static final String TEST_MODE_PARAM = "test_mode";
+
+    private static final String DEVICE_ID_PARAM = "device_id";
+    private static final String USER_AGENT_PARAM = "user_agent";
+    private static final String OS_VERSION_PARAM = "os_version";
+
+    private static final String PACKAGE_NAME_PARAM = "package_name";
+
+    private final Context context;
+    private final String placementId;
+    private final AdSize adSize;
+    private final String userAgentString;
+
+    private final AdRequestListener listener;
+
+    private final boolean testMode;
+
+    public AdRequest(Context context, String placementId, AdSize adSize, String userAgentString,
+            AdRequestListener listener, boolean testMode) {
+        this.context = context;
+        this.placementId = placementId;
+        this.adSize = adSize;
+        this.userAgentString = userAgentString;
+        this.listener = listener;
+        this.testMode = testMode;
+
+        validate();
+    }
+
+    public RequestAsyncTask executeAsync() {
+        Request.Callback adRequestCallback = new Request.Callback() {
+            @Override
+            public void onCompleted(Response response) {
+                if (response.getError() != null) {
+                    Log.e(TAG, response.getError().getErrorMessage(), response.getError().getException());
+                    listener.onError(response.getError());
+                } else {
+                    AdResponse adResponse = AdResponse.fromJSONObject(response.getGraphObject().getInnerJSONObject());
+                    listener.onCompleted(adResponse);
+                }
+            }
+        };
+        Request request = new Request(null, ADS_ENDPOINT, getRequestParameters(), HttpMethod.POST, adRequestCallback);
+        listener.onLoading();
+        return request.executeAsync();
+    }
+
+    private void validate() {
+        if (placementId == null || placementId.length() < 1) {
+            throw new IllegalArgumentException("placementId");
+        }
+        if (adSize == null) {
+            throw new IllegalArgumentException("adSize");
+        }
+        if (listener == null) {
+            throw new IllegalArgumentException("listener");
+        }
+    }
+
+    private Bundle getRequestParameters() {
+        Bundle bundle = new Bundle();
+        bundle.putString(PLACEMENT_ID_PARAM, placementId);
+        bundle.putString(ATTRIBUTION_ID_PARAM, Settings.getAttributionId(context.getContentResolver()));
+        bundle.putInt(WIDTH_PARAM, adSize.getWidth());
+        bundle.putInt(HEIGHT_PARAM, adSize.getHeight());
+        bundle.putBoolean(TEST_MODE_PARAM, testMode);
+
+        addDeviceInfoParams(bundle);
+        addAppInfoParams(bundle);
+
+        return bundle;
+    }
+
+    private void addDeviceInfoParams(Bundle bundle) {
+        bundle.putString(DEVICE_ID_PARAM, android.provider.Settings.Secure.getString(context.getContentResolver(),
+                android.provider.Settings.Secure.ANDROID_ID));
+        bundle.putString(OS_VERSION_PARAM, Build.VERSION.SDK);
+        bundle.putString(USER_AGENT_PARAM, userAgentString);
+    }
+
+    private void addAppInfoParams(Bundle bundle) {
+        bundle.putString(PACKAGE_NAME_PARAM, context.getPackageName());
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdRequestController.java b/facebook/src/com/facebook/ads/internal/AdRequestController.java
new file mode 100644
index 000000000..9567218ba
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdRequestController.java
@@ -0,0 +1,237 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.util.Log;
+import android.view.View;
+import com.facebook.FacebookRequestError;
+import com.facebook.RequestAsyncTask;
+import com.facebook.ads.AdSize;
+import com.facebook.ads.AdTargetingOptions;
+
+public class AdRequestController {
+
+    private static final String TAG = AdRequestController.class.getSimpleName();
+    private static final int REFRESH_INTERVAL_MIN_SECONDS = 30;
+
+    private static final String REFRESH_INTERVAL_KEY = "AdRequestController_refreshInterval";
+    private static final String INITIAL_LOAD_REQUESTED_KEY = "AdRequestController_initialLoadRequested";
+
+    private final Context context;
+    private final String placementId;
+    private final AdSize adSize;
+    private final String userAgentString;
+    private final AdRequest.AdRequestListener adViewRequestListener;
+    private boolean testMode;
+    private boolean shouldRefresh = true;
+    private AdTargetingOptions targetingOptions;
+    private final ScreenStateReceiver screenStateReceiver = new ScreenStateReceiver();
+
+    private int refreshInterval = REFRESH_INTERVAL_MIN_SECONDS;
+    private boolean initialLoadRequested = false;
+
+    private volatile boolean refreshScheduled = false;
+    private Handler handler;
+    private Runnable refreshRunnable;
+
+    private RequestAsyncTask lastRequest;
+
+    private int currentVisibility = View.GONE;
+
+    public AdRequestController(Context context, String placementId, AdSize adSize, String userAgentString,
+            AdRequest.AdRequestListener adViewRequestListener) {
+        this.context = context;
+        this.placementId = placementId;
+        this.adSize = adSize;
+        this.userAgentString = userAgentString;
+        this.adViewRequestListener = adViewRequestListener;
+        targetingOptions = null;
+
+        handler = new Handler();
+        refreshRunnable = new Runnable() {
+            @Override
+            public void run() {
+                Log.d(TAG, "Refreshing ad");
+                refreshScheduled = false;
+                loadAd(targetingOptions);
+            }
+        };
+
+        registerScreenStateReceiver();
+    }
+
+    private void registerScreenStateReceiver() {
+        IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
+        filter.addAction(Intent.ACTION_SCREEN_OFF);
+        context.registerReceiver(screenStateReceiver, filter);
+    }
+
+    private void unregisterScreenStateReceiver() {
+        context.unregisterReceiver(screenStateReceiver);
+    }
+
+    private synchronized void scheduleRefresh(String reason) {
+        if (!shouldRefresh) {
+            Log.d(TAG, "should not schedule refresh");
+            return;
+        }
+
+        Log.d(TAG, "schedule refresh " + reason);
+        if (refreshInterval > 0) {
+            if (refreshScheduled) {
+                return;
+            }
+            handler.postDelayed(refreshRunnable, refreshInterval * 1000);
+            refreshScheduled = true;
+        }
+    }
+
+    private synchronized void cancelRefresh(String reason) {
+        Log.d(TAG, "cancel refresh " + reason);
+        if (!refreshScheduled) {
+            return;
+        }
+        handler.removeCallbacks(refreshRunnable);
+        refreshScheduled = false;
+    }
+
+    public void setTestMode(boolean testMode) {
+        this.testMode = testMode;
+    }
+
+    public void setShouldRefresh(boolean shouldRefresh) {
+        this.shouldRefresh = shouldRefresh;
+        if (shouldRefresh) {
+            scheduleRefresh("should start refresh");
+        } else {
+            cancelRefresh("should stop refresh");
+        }
+    }
+
+    public void loadAd(AdTargetingOptions targetingOptions) {
+        this.targetingOptions = targetingOptions;
+
+        initialLoadRequested = true;
+
+        if (lastRequest != null && lastRequest.getStatus() != AsyncTask.Status.FINISHED) {
+            lastRequest.cancel(true);
+        }
+
+        if (!isNetworkConnected()) {
+            refreshInterval = REFRESH_INTERVAL_MIN_SECONDS;
+            adViewRequestListener.onError(new FacebookRequestError(
+                    FacebookRequestError.INVALID_ERROR_CODE, "network unavailable", "network unavailable"));
+            scheduleRefresh("no network connection");
+            return;
+        }
+
+        AdRequest adRequest = new AdRequest(
+                context,
+                placementId,
+                adSize,
+                userAgentString,
+                new AdRequest.AdRequestListener() {
+                    @Override
+                    public void onLoading() {
+                        adViewRequestListener.onLoading();
+                    }
+
+                    @Override
+                    public void onError(FacebookRequestError error) {
+                        adViewRequestListener.onError(error);
+                        scheduleRefresh("onError");
+                    }
+
+                    @Override
+                    public void onCompleted(AdResponse adResponse) {
+                        refreshInterval = adResponse.getRefreshInterval();
+                        adViewRequestListener.onCompleted(adResponse);
+                        scheduleRefresh("onCompleted");
+                    }
+                },
+                testMode
+        );
+        lastRequest = adRequest.executeAsync();
+    }
+
+    public void destroy() {
+        unregisterScreenStateReceiver();
+        cancelRefresh("destroy");
+    }
+
+    public Bundle onSaveInstanceState() {
+        Bundle instanceState = new Bundle();
+        instanceState.putInt(REFRESH_INTERVAL_KEY, refreshInterval);
+        instanceState.putBoolean(INITIAL_LOAD_REQUESTED_KEY, initialLoadRequested);
+        return instanceState;
+    }
+
+    public void onRestoreInstanceState(Bundle instanceState) {
+        refreshInterval = instanceState.getInt(REFRESH_INTERVAL_KEY, REFRESH_INTERVAL_MIN_SECONDS);
+        initialLoadRequested = instanceState.getBoolean(INITIAL_LOAD_REQUESTED_KEY, false);
+    }
+
+    public void onWindowVisibilityChanged(int visibility) {
+        currentVisibility = visibility;
+        if (visibility == View.VISIBLE) {
+            // When the window first becomes visible (no ad has been requested), we don't want to schedule
+            // a refresh at that time.
+            // When returning to the app from play store, onRestoreInstanceState() is not called so we need
+            // to schedule a refresh to keep new ads coming.
+            if (initialLoadRequested) {
+                scheduleRefresh("onWindowVisibilityChanged");
+            }
+        } else {
+            cancelRefresh("onWindowVisibilityChanged");
+        }
+    }
+
+    private boolean isNetworkConnected() {
+        String permission = "android.permission.ACCESS_NETWORK_STATE";
+        int result = context.checkCallingOrSelfPermission(permission);
+        if (result != PackageManager.PERMISSION_GRANTED) {
+            return true;
+        }
+
+        ConnectivityManager cm = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
+        return activeNetwork != null && activeNetwork.isConnected();
+    }
+
+    private class ScreenStateReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
+                cancelRefresh(intent.getAction());
+            } else if (intent.getAction().equals(Intent.ACTION_SCREEN_ON)) {
+                if (currentVisibility == View.VISIBLE) {
+                    scheduleRefresh(intent.getAction());
+                }
+            }
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdResponse.java b/facebook/src/com/facebook/ads/internal/AdResponse.java
new file mode 100644
index 000000000..8cf67e7f8
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdResponse.java
@@ -0,0 +1,69 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import com.facebook.ads.AdError;
+import org.json.JSONObject;
+
+public class AdResponse {
+
+    private static final String TAG = AdResponse.class.getSimpleName();
+    private static final int DEFAULT_REFRESH_INTERVAL_SECONDS = 0;
+
+    private final int refreshInterval;
+    private final AdDataModel dataModel;
+    private final AdError error;
+
+    public AdResponse(int refreshInterval, AdDataModel dataModel, AdError error) {
+        this.refreshInterval = refreshInterval;
+        this.dataModel = dataModel;
+        this.error = error;
+    }
+
+    public int getRefreshInterval() {
+        return refreshInterval;
+    }
+
+    public AdDataModel getDataModel() {
+        return dataModel;
+    }
+
+    public AdError getError() {
+        return error;
+    }
+
+    public static AdResponse fromJSONObject(JSONObject jsonObject) {
+        int refreshInterval = jsonObject.optInt("refresh", DEFAULT_REFRESH_INTERVAL_SECONDS);
+
+        AdDataModel data = null;
+        JSONObject dataObject = jsonObject.optJSONObject("data");
+        if (dataObject != null) {
+            String markup = dataObject.optString("markup");
+            String storeId = dataObject.optString("store_id");
+            String storeType = dataObject.optString("store_type");
+            data = new AdDataModel(markup, storeId, storeType);
+        }
+
+        AdError error = null;
+        JSONObject errorObject = jsonObject.optJSONObject("reason");
+        if (errorObject != null) {
+            error = new AdError(errorObject.optInt("code"), errorObject.optString("message"));
+        }
+
+        return new AdResponse(refreshInterval, data, error);
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdWebViewUtils.java b/facebook/src/com/facebook/ads/internal/AdWebViewUtils.java
new file mode 100644
index 000000000..f0dace7e2
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdWebViewUtils.java
@@ -0,0 +1,31 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.webkit.WebView;
+
+public class AdWebViewUtils {
+
+    public static void config(WebView adWebView) {
+        adWebView.getSettings().setJavaScriptEnabled(true);
+        adWebView.getSettings().setSupportZoom(false);
+        adWebView.setHorizontalScrollBarEnabled(false);
+        adWebView.setHorizontalScrollbarOverlay(false);
+        adWebView.setVerticalScrollBarEnabled(false);
+        adWebView.setVerticalScrollbarOverlay(false);
+    }
+}
