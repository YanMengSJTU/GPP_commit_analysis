diff --git a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java
index 23e79b85f..2feaf62b0 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -1115,7 +1115,7 @@ public static String getUserData() {
      * Clears the current user data
      */
     public static void clearUserData() {
-        UserDataStore.setUserDataAndHash(null);
+        UserDataStore.clear();
     }
 
     public static void updateUserProperties(
diff --git a/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java b/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java
index 018642212..2f3c78d1f 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java
@@ -34,6 +34,9 @@
 
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 public class UserDataStore {
@@ -42,7 +45,8 @@
             "com.facebook.appevents.UserDataStore.userData";
 
     private static ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
-    private static String hashedUserData;
+    private static Map<String, String> hashedUserData;
+    private static SharedPreferences sharedPreferences;
     private static volatile boolean initialized = false;
 
     /**
@@ -59,7 +63,7 @@
     public static final String ZIP = "zp";
     public static final String COUNTRY = "country";
 
-    public static void initStore() {
+    static void initStore() {
         if (initialized) {
             return;
         }
@@ -72,7 +76,7 @@ public void run() {
         });
     }
 
-    public static void setUserDataAndHash(final Bundle ud) {
+    static void setUserDataAndHash(final Bundle ud) {
         if (!initialized) {
             Log.w(TAG, "initStore should have been called before calling setUserData");
             initAndWait();
@@ -83,13 +87,10 @@ public static void setUserDataAndHash(final Bundle ud) {
             public void run() {
                 lock.writeLock().lock();
                 try {
-                    hashedUserData = hashUserData(ud);
-                    SharedPreferences sharedPreferences = PreferenceManager
-                            .getDefaultSharedPreferences(
-                                    FacebookSdk.getApplicationContext());
-                    SharedPreferences.Editor editor = sharedPreferences.edit();
-                    editor.putString(USER_DATA_KEY, hashedUserData);
-                    editor.apply();
+                    updateHashUserData(ud);
+                    sharedPreferences.edit()
+                            .putString(USER_DATA_KEY, mapToJsonStr(hashedUserData))
+                            .apply();
                 } finally {
                     lock.writeLock().unlock();
                 }
@@ -97,7 +98,7 @@ public void run() {
         });
     }
 
-    public static void setUserDataAndHash(
+    static void setUserDataAndHash(
             @Nullable final String email,
             @Nullable final String firstName,
             @Nullable final String lastName,
@@ -142,8 +143,22 @@ public static void setUserDataAndHash(
         setUserDataAndHash(ud);
     }
 
+    static void clear() {
+        AppEventsLogger.getAnalyticsExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                lock.writeLock().lock();
+                try {
+                    hashedUserData.clear();
+                    sharedPreferences.edit().remove(USER_DATA_KEY).apply();
+                } finally {
+                    lock.writeLock().unlock();
+                }
+            }
+        });
+    }
 
-    public static String getHashedUserData() {
+    static String getHashedUserData() {
         if (!initialized) {
             Log.w(TAG, "initStore should have been called before calling setUserID");
             initAndWait();
@@ -151,7 +166,7 @@ public static String getHashedUserData() {
 
         lock.readLock().lock();
         try {
-            return hashedUserData;
+            return mapToJsonStr(hashedUserData);
         } finally {
             lock.readLock().unlock();
         }
@@ -168,41 +183,40 @@ private static void initAndWait() {
                 return;
             }
 
-            SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(
-                    FacebookSdk.getApplicationContext());
-            hashedUserData = sharedPreferences.getString(USER_DATA_KEY, null);
+            sharedPreferences = PreferenceManager
+                    .getDefaultSharedPreferences(
+                            FacebookSdk.getApplicationContext());
+            String udRaw = sharedPreferences.getString(USER_DATA_KEY, "");
+            hashedUserData = JsonStrToMap(udRaw);
             initialized = true;
         } finally {
             lock.writeLock().unlock();
         }
     }
 
-    private static String hashUserData(final Bundle ud) {
+    private static void updateHashUserData(final Bundle ud) {
         if (ud == null) {
-            return null;
+            return;
         }
 
-        JSONObject hashedUserData = new JSONObject();
         for (String key : ud.keySet()) {
-            try {
-                final String value = ud.get(key).toString();
-                if (maybeSHA256Hashed(value)) {
-                    hashedUserData.put(key, value.toLowerCase());
-                } else {
-                    final String normalizedValue = normalizeData(key, ud.get(key).toString());
-                    final String encryptedValue = encryptData(normalizedValue);
-                    if (encryptedValue != null) {
-                        hashedUserData.put(key, encryptedValue);
-                    }
+            final Object rawVal = ud.get(key);
+            if (rawVal == null) {
+                continue;
+            }
+            final String value = rawVal.toString();
+            if (maybeSHA256Hashed(value)) {
+                hashedUserData.put(key, value.toLowerCase());
+            } else {
+                final String encryptedValue = encryptData(normalizeData(key, value));
+                if (encryptedValue != null) {
+                    hashedUserData.put(key, encryptedValue);
                 }
-            } catch (JSONException _e) {
-
             }
         }
-
-        return hashedUserData.toString();
     }
 
+    @Nullable
     private static String encryptData(String data) {
         if (data == null || data.isEmpty()) {
             return null;
@@ -251,4 +265,39 @@ private static String normalizeData(String type, String data) {
     private static boolean maybeSHA256Hashed(String data) {
         return data.matches("[A-Fa-f0-9]{64}");
     }
+
+    private static String mapToJsonStr(Map<String, String> map) {
+        if (map.isEmpty()) {
+            return "";
+        }
+
+        try {
+            JSONObject jsonObject = new JSONObject();
+            for (String key : map.keySet()) {
+                jsonObject.put(key, map.get(key));
+            }
+            return jsonObject.toString();
+        } catch (JSONException _e) {
+            return "";
+        }
+    }
+
+    private static Map<String, String> JsonStrToMap(String str) {
+        if (str.isEmpty()) {
+            return new HashMap<>();
+        }
+
+        try {
+            Map<String, String> map = new HashMap<>();
+            JSONObject jsonObject = new JSONObject(str);
+            Iterator<String> keys = jsonObject.keys();
+            while (keys.hasNext()) {
+                String key = keys.next();
+                map.put(key, jsonObject.getString(key));
+            }
+            return map;
+        } catch (JSONException _e) {
+            return new HashMap<>();
+        }
+    }
 }
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/AppEventsLoggerUtility.java b/facebook-core/src/main/java/com/facebook/appevents/internal/AppEventsLoggerUtility.java
index ae0edbf8f..a16c95620 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/AppEventsLoggerUtility.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/AppEventsLoggerUtility.java
@@ -66,7 +66,7 @@ public static JSONObject getJSONObjectForGraphAPICall(
             publishParams.put("app_user_id", externalAnalyticsUserId);
         }
         String userData = AppEventsLogger.getUserData();
-        if (userData != null) {
+        if (!userData.isEmpty()) {
             publishParams.put("ud", userData);
         }
 
