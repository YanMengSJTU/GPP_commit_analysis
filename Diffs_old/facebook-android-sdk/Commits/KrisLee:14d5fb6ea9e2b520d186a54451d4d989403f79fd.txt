diff --git a/facebook/src/io/openkit/facebook/AuthorizationClient.java b/facebook/src/io/openkit/facebook/AuthorizationClient.java
index 4da25218e..17b78c881 100644
--- a/facebook/src/io/openkit/facebook/AuthorizationClient.java
+++ b/facebook/src/io/openkit/facebook/AuthorizationClient.java
@@ -25,7 +25,7 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.webkit.CookieSyncManager;
-import io.openkit.facebook.helpers.ResourceHelper;
+import io.openkit.facebook.android.R;
 import io.openkit.facebook.internal.ServerProtocol;
 import io.openkit.facebook.internal.Utility;
 import io.openkit.facebook.model.GraphMultiResult;
@@ -170,11 +170,9 @@ boolean checkInternetPermission() {
 
         int permissionCheck = checkPermission(Manifest.permission.INTERNET);
         if (permissionCheck != PackageManager.PERMISSION_GRANTED) {
-            //String errorType = context.getString(R.string.com_facebook_internet_permission_error_title);
-        	String errorType = ResourceHelper.getString(context, "com_facebook_internet_permission_error_title");
-        	//String errorDescription = context.getString(R.string.com_facebook_internet_permission_error_message);
-        	String errorDescription =  ResourceHelper.getString(context, "com_facebook_internet_permission_error_message");
-        	complete(Result.createErrorResult(errorType, errorDescription));
+            String errorType = context.getString(R.string.com_facebook_internet_permission_error_title);
+            String errorDescription = context.getString(R.string.com_facebook_internet_permission_error_message);
+            complete(Result.createErrorResult(errorType, errorDescription));
 
             return false;
         }
diff --git a/facebook/src/io/openkit/facebook/FacebookRequestError.java b/facebook/src/io/openkit/facebook/FacebookRequestError.java
index 06123680f..d9627e931 100644
--- a/facebook/src/io/openkit/facebook/FacebookRequestError.java
+++ b/facebook/src/io/openkit/facebook/FacebookRequestError.java
@@ -16,13 +16,11 @@
 
 package io.openkit.facebook;
 
-import io.openkit.facebook.helpers.ResourceHelper;
+import io.openkit.facebook.android.R;
 import io.openkit.facebook.internal.Utility;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import android.content.Context;
-
 import java.net.HttpURLConnection;
 
 /**
@@ -108,7 +106,7 @@ boolean contains(int value) {
     private FacebookRequestError(int requestStatusCode, int errorCode,
             int subErrorCode, String errorType, String errorMessage, JSONObject requestResultBody,
             JSONObject requestResult, Object batchRequestResult, HttpURLConnection connection,
-            FacebookException exception, Context ctx) {
+            FacebookException exception) {
         this.requestStatusCode = requestStatusCode;
         this.errorCode = errorCode;
         this.subErrorCode = subErrorCode;
@@ -142,27 +140,21 @@ private FacebookRequestError(int requestStatusCode, int errorCode,
                 errorCategory = Category.THROTTLING;
             } else if (errorCode == EC_PERMISSION_DENIED || EC_RANGE_PERMISSION.contains(errorCode)) {
                 errorCategory = Category.PERMISSION;
-                //messageId = R.string.com_facebook_requesterror_permissions;
-                messageId = ResourceHelper.getStringResourceID(ctx, "com_facebook_requesterror_permissions");
+                messageId = R.string.com_facebook_requesterror_permissions;
             } else if (errorCode == EC_INVALID_SESSION || errorCode == EC_INVALID_TOKEN) {
                 if (subErrorCode == EC_USER_CHECKPOINTED || subErrorCode == EC_UNCONFIRMED_USER) {
                     errorCategory = Category.AUTHENTICATION_RETRY;
-                    //messageId = R.string.com_facebook_requesterror_web_login;
-                    messageId = ResourceHelper.getStringResourceID(ctx, "com_facebook_requesterror_web_login");
+                    messageId = R.string.com_facebook_requesterror_web_login;
                     shouldNotify = true;
                 } else {
                     errorCategory = Category.AUTHENTICATION_REOPEN_SESSION;
 
                     if (subErrorCode == EC_APP_NOT_INSTALLED) {
-                        //messageId = R.string.com_facebook_requesterror_relogin;
-                        messageId = ResourceHelper.getStringResourceID(ctx, "com_facebook_requesterror_relogin");
-
+                        messageId = R.string.com_facebook_requesterror_relogin;
                     } else if (subErrorCode == EC_PASSWORD_CHANGED) {
-                        //messageId = R.string.com_facebook_requesterror_password_changed;
-                        messageId = ResourceHelper.getStringResourceID(ctx, "com_facebook_requesterror_password_changed");
+                        messageId = R.string.com_facebook_requesterror_password_changed;
                     } else {
-                        //messageId = R.string.com_facebook_requesterror_reconnect;
-                        messageId = ResourceHelper.getStringResourceID(ctx, "com_facebook_requesterror_reconnect");
+                        messageId = R.string.com_facebook_requesterror_reconnect;
                     }
                 }
             }
@@ -185,16 +177,16 @@ private FacebookRequestError(int requestStatusCode, int errorCode,
 
     private FacebookRequestError(int requestStatusCode, int errorCode,
             int subErrorCode, String errorType, String errorMessage, JSONObject requestResultBody,
-            JSONObject requestResult, Object batchRequestResult, HttpURLConnection connection, Context ctx) {
+            JSONObject requestResult, Object batchRequestResult, HttpURLConnection connection) {
         this(requestStatusCode, errorCode, subErrorCode, errorType, errorMessage,
-                requestResultBody, requestResult, batchRequestResult, connection, null, ctx);
+                requestResultBody, requestResult, batchRequestResult, connection, null);
     }
 
-    FacebookRequestError(HttpURLConnection connection, Exception exception, Context ctx) {
+    FacebookRequestError(HttpURLConnection connection, Exception exception) {
         this(INVALID_HTTP_STATUS_CODE, INVALID_ERROR_CODE, INVALID_ERROR_CODE,
                 null, null, null, null, null, connection,
                 (exception instanceof FacebookException) ?
-                        (FacebookException) exception : new FacebookException(exception), ctx);
+                        (FacebookException) exception : new FacebookException(exception));
     }
 
     public FacebookRequestError(int errorCode, String errorType, String errorMessage) {
@@ -352,7 +344,7 @@ public String toString() {
     }
 
     static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
-            Object batchResult, HttpURLConnection connection, Context ctx) {
+            Object batchResult, HttpURLConnection connection) {
         try {
             if (singleResult.has(CODE_KEY)) {
                 int responseCode = singleResult.getInt(CODE_KEY);
@@ -389,7 +381,7 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
 
                     if (hasError) {
                         return new FacebookRequestError(responseCode, errorCode, errorSubCode,
-                                errorType, errorMessage, jsonBody, singleResult, batchResult, connection, ctx);
+                                errorType, errorMessage, jsonBody, singleResult, batchResult, connection);
                     }
                 }
 
@@ -400,7 +392,7 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
                             singleResult.has(BODY_KEY) ?
                                     (JSONObject) Utility.getStringPropertyAsJSON(
                                             singleResult, BODY_KEY, Response.NON_JSON_RESPONSE_PROPERTY) : null,
-                            singleResult, batchResult, connection, ctx);
+                            singleResult, batchResult, connection);
                 }
             }
         } catch (JSONException e) {
diff --git a/facebook/src/io/openkit/facebook/Request.java b/facebook/src/io/openkit/facebook/Request.java
index 8356d5dbd..e99b68fc9 100644
--- a/facebook/src/io/openkit/facebook/Request.java
+++ b/facebook/src/io/openkit/facebook/Request.java
@@ -16,7 +16,6 @@
 
 package io.openkit.facebook;
 
-import android.content.Context;
 import android.graphics.Bitmap;
 import android.location.Location;
 import android.net.Uri;
@@ -1020,14 +1019,14 @@ public static Response executeAndWait(Request request) {
      * @throws IllegalArgumentException if the passed in RequestBatch is empty
      * @throws NullPointerException if the passed in RequestBatch or any of its contents are null
      */
-    public static List<Response> executeBatchAndWait(RequestBatch requests, Context ctx) {
+    public static List<Response> executeBatchAndWait(RequestBatch requests) {
         Validate.notEmptyAndContainsNoNulls(requests, "requests");
 
         HttpURLConnection connection = null;
         try {
             connection = toHttpConnection(requests);
         } catch (Exception ex) {
-            List<Response> responses = Response.constructErrorResponses(requests.getRequests(), null, new FacebookException(ex), ctx);
+            List<Response> responses = Response.constructErrorResponses(requests.getRequests(), null, new FacebookException(ex));
             runCallbacks(requests, responses);
             return responses;
         }
@@ -1132,8 +1131,8 @@ public static RequestAsyncTask executeBatchAsync(RequestBatch requests) {
      * @throws FacebookException
      *            If there was an error in the protocol used to communicate with the service
      */
-    public static List<Response> executeConnectionAndWait(HttpURLConnection connection, RequestBatch requests, Context ctx) {
-        List<Response> responses = Response.fromHttpConnection(connection, requests, ctx);
+    public static List<Response> executeConnectionAndWait(HttpURLConnection connection, RequestBatch requests) {
+        List<Response> responses = Response.fromHttpConnection(connection, requests);
 
         Utility.disconnectQuietly(connection);
 
diff --git a/facebook/src/io/openkit/facebook/Response.java b/facebook/src/io/openkit/facebook/Response.java
index c882861e2..576915d04 100644
--- a/facebook/src/io/openkit/facebook/Response.java
+++ b/facebook/src/io/openkit/facebook/Response.java
@@ -261,7 +261,7 @@ static FileLruCache getResponseCache() {
     }
 
     @SuppressWarnings("resource")
-    static List<Response> fromHttpConnection(HttpURLConnection connection, RequestBatch requests, Context ctx) {
+    static List<Response> fromHttpConnection(HttpURLConnection connection, RequestBatch requests) {
         InputStream stream = null;
 
         FileLruCache cache = null;
@@ -285,7 +285,7 @@ static FileLruCache getResponseCache() {
                 try {
                     stream = cache.get(cacheKey);
                     if (stream != null) {
-                        return createResponsesFromStream(stream, null, requests, true, ctx);
+                        return createResponsesFromStream(stream, null, requests, true);
                     }
                 } catch (FacebookException exception) { // retry via roundtrip below
                 } catch (JSONException exception) {
@@ -310,23 +310,23 @@ static FileLruCache getResponseCache() {
                 }
             }
 
-            return createResponsesFromStream(stream, connection, requests, false, ctx);
+            return createResponsesFromStream(stream, connection, requests, false);
         } catch (FacebookException facebookException) {
             Logger.log(LoggingBehavior.REQUESTS, RESPONSE_LOG_TAG, "Response <Error>: %s", facebookException);
-            return constructErrorResponses(requests, connection, facebookException, ctx);
+            return constructErrorResponses(requests, connection, facebookException);
         } catch (JSONException exception) {
             Logger.log(LoggingBehavior.REQUESTS, RESPONSE_LOG_TAG, "Response <Error>: %s", exception);
-            return constructErrorResponses(requests, connection, new FacebookException(exception), ctx);
+            return constructErrorResponses(requests, connection, new FacebookException(exception));
         } catch (IOException exception) {
             Logger.log(LoggingBehavior.REQUESTS, RESPONSE_LOG_TAG, "Response <Error>: %s", exception);
-            return constructErrorResponses(requests, connection, new FacebookException(exception), ctx);
+            return constructErrorResponses(requests, connection, new FacebookException(exception));
         } finally {
             Utility.closeQuietly(stream);
         }
     }
 
     static List<Response> createResponsesFromStream(InputStream stream, HttpURLConnection connection,
-            RequestBatch requests, boolean isFromCache, Context ctx) throws FacebookException, JSONException, IOException {
+            RequestBatch requests, boolean isFromCache) throws FacebookException, JSONException, IOException {
 
         String responseString = Utility.readStreamToString(stream);
         Logger.log(LoggingBehavior.INCLUDE_RAW_RESPONSES, RESPONSE_LOG_TAG,
@@ -336,7 +336,7 @@ static FileLruCache getResponseCache() {
         JSONTokener tokener = new JSONTokener(responseString);
         Object resultObject = tokener.nextValue();
 
-        List<Response> responses = createResponsesFromObject(connection, requests, resultObject, isFromCache, ctx);
+        List<Response> responses = createResponsesFromObject(connection, requests, resultObject, isFromCache);
         Logger.log(LoggingBehavior.REQUESTS, RESPONSE_LOG_TAG, "Response\n  Id: %s\n  Size: %d\n  Responses:\n%s\n",
                 requests.getId(), responseString.length(), responses);
 
@@ -344,7 +344,7 @@ static FileLruCache getResponseCache() {
     }
 
     private static List<Response> createResponsesFromObject(HttpURLConnection connection, List<Request> requests,
-            Object object, boolean isFromCache, Context ctx) throws FacebookException, JSONException {
+            Object object, boolean isFromCache) throws FacebookException, JSONException {
         assert (connection != null) || isFromCache;
 
         int numRequests = requests.size();
@@ -368,9 +368,9 @@ static FileLruCache getResponseCache() {
                 // Pretend we got an array of 1 back.
                 object = jsonArray;
             } catch (JSONException e) {
-                responses.add(new Response(request, connection, new FacebookRequestError(connection, e, ctx)));
+                responses.add(new Response(request, connection, new FacebookRequestError(connection, e)));
             } catch (IOException e) {
-                responses.add(new Response(request, connection, new FacebookRequestError(connection, e, ctx)));
+                responses.add(new Response(request, connection, new FacebookRequestError(connection, e)));
             }
         }
 
@@ -385,11 +385,11 @@ static FileLruCache getResponseCache() {
             Request request = requests.get(i);
             try {
                 Object obj = jsonArray.get(i);
-                responses.add(createResponseFromObject(request, connection, obj, isFromCache, originalResult, ctx));
+                responses.add(createResponseFromObject(request, connection, obj, isFromCache, originalResult));
             } catch (JSONException e) {
-                responses.add(new Response(request, connection, new FacebookRequestError(connection, e, ctx)));
+                responses.add(new Response(request, connection, new FacebookRequestError(connection, e)));
             } catch (FacebookException e) {
-                responses.add(new Response(request, connection, new FacebookRequestError(connection, e, ctx)));
+                responses.add(new Response(request, connection, new FacebookRequestError(connection, e)));
             }
         }
 
@@ -397,12 +397,12 @@ static FileLruCache getResponseCache() {
     }
 
     private static Response createResponseFromObject(Request request, HttpURLConnection connection, Object object,
-            boolean isFromCache, Object originalResult, Context ctx) throws JSONException {
+            boolean isFromCache, Object originalResult) throws JSONException {
         if (object instanceof JSONObject) {
             JSONObject jsonObject = (JSONObject) object;
 
             FacebookRequestError error =
-                    FacebookRequestError.checkResponseAndCreateError(jsonObject, originalResult, connection, ctx);
+                    FacebookRequestError.checkResponseAndCreateError(jsonObject, originalResult, connection);
             if (error != null) {
                 if (error.getErrorCode() == INVALID_SESSION_FACEBOOK_ERROR_CODE) {
                     Session session = request.getSession();
@@ -436,11 +436,11 @@ private static Response createResponseFromObject(Request request, HttpURLConnect
     }
 
     static List<Response> constructErrorResponses(List<Request> requests, HttpURLConnection connection,
-            FacebookException error, Context ctx) {
+            FacebookException error) {
         int count = requests.size();
         List<Response> responses = new ArrayList<Response>(count);
         for (int i = 0; i < count; ++i) {
-            Response response = new Response(requests.get(i), connection, new FacebookRequestError(connection, error, ctx));
+            Response response = new Response(requests.get(i), connection, new FacebookRequestError(connection, error));
             responses.add(response);
         }
         return responses;
diff --git a/facebook/src/io/openkit/facebook/helpers/ResourceHelper.java b/facebook/src/io/openkit/facebook/helpers/ResourceHelper.java
deleted file mode 100644
index c8f0a2192..000000000
--- a/facebook/src/io/openkit/facebook/helpers/ResourceHelper.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package io.openkit.facebook.helpers;
-
-import android.content.Context;
-
-public class ResourceHelper {
-	
-	public static int getStringResourceID(Context ctx, String resourceName)
-	{
-		return ctx.getResources().getIdentifier(resourceName, "string", ctx.getPackageName());
-	}
-	
-	public static String getString(Context ctx, String resourceName)
-	{
-		return ctx.getResources().getString(getStringResourceID(ctx, resourceName));
-	}
-
-}
diff --git a/facebook/src/io/openkit/facebook/widget/ProfilePictureView.java b/facebook/src/io/openkit/facebook/widget/ProfilePictureView.java
index f9f8e9ade..6cef22437 100644
--- a/facebook/src/io/openkit/facebook/widget/ProfilePictureView.java
+++ b/facebook/src/io/openkit/facebook/widget/ProfilePictureView.java
@@ -29,7 +29,6 @@
 import android.widget.ImageView;
 import io.openkit.facebook.FacebookException;
 import io.openkit.facebook.LoggingBehavior;
-import io.openkit.facebook.helpers.StyleableHelper;
 import io.openkit.facebook.internal.Logger;
 import io.openkit.facebook.internal.Utility;
 
diff --git a/facebook/src/io/openkit/facebook/helpers/StyleableHelper.java b/facebook/src/io/openkit/facebook/widget/StyleableHelper.java
similarity index 98%
rename from facebook/src/io/openkit/facebook/helpers/StyleableHelper.java
rename to facebook/src/io/openkit/facebook/widget/StyleableHelper.java
index 75c9b6bd4..b4da058f8 100644
--- a/facebook/src/io/openkit/facebook/helpers/StyleableHelper.java
+++ b/facebook/src/io/openkit/facebook/widget/StyleableHelper.java
@@ -1,4 +1,4 @@
-package io.openkit.facebook.helpers;
+package io.openkit.facebook.widget;
 
 import java.lang.reflect.Field;
 import android.content.Context;
