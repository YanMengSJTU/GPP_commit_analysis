diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
deleted file mode 100644
index feaf44f80..000000000
Binary files a/libs/android-support-v4.jar and /dev/null differ
diff --git a/scripts/build_and_test.sh b/scripts/build_and_test.sh
deleted file mode 100755
index 75dae1ead..000000000
--- a/scripts/build_and_test.sh
+++ /dev/null
@@ -1,51 +0,0 @@
-#!/bin/sh
-#
-# Copyright 2010-present Facebook.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-# 
-#    http://www.apache.org/licenses/LICENSE-2.0
-# 
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-function die() {
-  echo "$@"
-  exit 1
-}
-
-# Find enlistment root
-cd $(dirname $0) >/dev/null
-SDK=$(git rev-parse --show-toplevel) ||
-  die "Could not access git"
-
-# Build all samples
-cd $SDK/samples
-for SAMPLE in *; do
-  if [[ -d $SAMPLE ]]; then
-    cd $SAMPLE
-    ant clean ||
-      die "Error running 'ant clean' on sample $SAMPLE"
-    ant debug ||
-      die "Error running 'ant debug' on sample $SAMPLE"
-    cd ..
-  fi
-done
-
-# Remove any stale test bits, ignore errors here
-adb uninstall com.facebook.sdk.tests 2>/dev/null
-
-# Build and run tests
-cd $SDK/facebook/tests
-ant clean ||
-  die "Error running 'ant clean' on facebook sdk"
-ant debug install ||
-  die "Error running 'ant debug install' on facebook sdk"
-ant run-tests ||
-  die "Error running 'ant run-tests' on facebook sdk"
diff --git a/scripts/configure_unit_tests.sh b/scripts/configure_unit_tests.sh
deleted file mode 100755
index a6b85224e..000000000
--- a/scripts/configure_unit_tests.sh
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/bin/sh
-#
-# Copyright 2010-present Facebook.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-# 
-#    http://www.apache.org/licenses/LICENSE-2.0
-# 
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-# this script configures your Android simulator for unit tests
-# Note: On Mac OS X, an easy way to generate a MACHINE_UNIQUE_USER_TAG is with the following:
-#   system_profiler SPHardwareDataType | grep -i "Serial Number (system):" | awk '{print $4}'
-
-cd $(dirname $0)/..
-FB_SDK_ROOT=$(pwd)
-FB_SDK_TESTS=$FB_SDK_ROOT/facebook/tests
-
-if [ "$#" -lt 2 ]; then
-    echo "Usage: $0 APP_ID APP_SECRET [MACHINE_UNIQUE_USER_KEY]"
-    echo "  APP_ID                   your unit-testing Facebook application's App ID"
-    echo "  APP_SECRET               your unit-testing Facebook application's App Secret"
-    echo "  MACHINE_UNIQUE_USER_TAG  optional text used to ensure this machine will use its own set of test users rather than sharing"
-    die 'Arguments do not conform to usage'
-fi
-
-function write_config_json {
-    CONFIG_JSON_FILE="$FB_SDK_TESTS"/assets/config.json
-
-    mkdir -p "$FB_SDK_TESTS"/assets
-
-    # use heredoc syntax to output the json
-    cat > "$CONFIG_JSON_FILE" \
-<<DELIMIT
-{"applicationId":"$1","applicationSecret":"$2","machineUniqueUserTag":"$3"}
-DELIMIT
-# end heredoc
-
-    echo "wrote unit test config file at $CONFIG_JSON_FILE" 
-}
-
-write_config_json $1 $2 $3
-
diff --git a/tests/AndroidManifest.xml b/tests/AndroidManifest.xml
deleted file mode 100644
index c0e209de6..000000000
--- a/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook.android.tests"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <application android:icon="@drawable/icon" android:label="@string/app_name">
-        <activity android:name=".Tests"
-                  android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-    </application>
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="3" />
-</manifest> 
diff --git a/tests/res/drawable/icon.png b/tests/res/drawable/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/tests/res/drawable/icon.png and /dev/null differ
diff --git a/tests/res/layout/main.xml b/tests/res/layout/main.xml
deleted file mode 100644
index 7134549a8..000000000
--- a/tests/res/layout/main.xml
+++ /dev/null
@@ -1,89 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="fill_parent"
-    android:layout_height="fill_parent" android:background="@drawable/black"
-    android:gravity="center_horizontal">
-
-    <TextView android:id="@+id/publicTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/publicErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <Button android:id="@+id/login" 
-        android:text="@string/login"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/authenticatedTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/authenticatedErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />  
-    <Button android:id="@+id/post" 
-        android:text="@string/post"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/wallPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/deletedPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        /> 
-    <Button android:id="@+id/logout" 
-        android:text="@string/logout"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/logoutTest" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-</LinearLayout>
diff --git a/tests/res/values/colors.xml b/tests/res/values/colors.xml
deleted file mode 100644
index 43a557808..000000000
--- a/tests/res/values/colors.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <drawable name="white">#ffffff</drawable>
-    <drawable name="black">#000000</drawable>
-</resources>
diff --git a/tests/res/values/strings.xml b/tests/res/values/strings.xml
deleted file mode 100644
index a61bf4d4c..000000000
--- a/tests/res/values/strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="hello">Hello World, Tests!</string>
-    <string name="login">Test Login</string>
-    <string name="post">Test UI Server</string>
-    <string name="logout">Test Logout</string>
-    <string name="app_name">Functional Tests</string>
-</resources>
diff --git a/tests/src/com/facebook/android/tests/Tests.java b/tests/src/com/facebook/android/tests/Tests.java
deleted file mode 100644
index e3116289e..000000000
--- a/tests/src/com/facebook/android/tests/Tests.java
+++ /dev/null
@@ -1,595 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android.tests;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import org.json.JSONObject;
-
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.DialogError;
-import com.facebook.android.Facebook;
-import com.facebook.android.FacebookError;
-import com.facebook.android.Util;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-import com.facebook.android.Facebook.DialogListener;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-
-public class Tests extends Activity {
-    
-    // Your Facebook Application ID must be set before running this example
-    // See http://www.facebook.com/developers/createapp.php
-    public static final String APP_ID = "110862205611506";
-    
-    private static final String[] PERMISSIONS =
-        new String[] {"publish_stream", "read_stream", "offline_access"};
-    
-    TextView publicTestsText;
-    TextView publicErrorsText;
-    Button loginButton;
-    TextView authenticatedTestsText;
-    TextView authenticatedErrorsText;
-    Button postButton;
-    TextView wallPostText;
-    TextView deletedPostText;
-    Button logoutButton;
-    TextView logoutText;
-    
-    Facebook authenticatedFacebook = new Facebook(APP_ID);
-    
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        
-        publicTestsText = (TextView) findViewById(R.id.publicTests);
-        publicErrorsText = (TextView) findViewById(R.id.publicErrors);
-        loginButton = (Button) findViewById(R.id.login);
-        authenticatedTestsText = (TextView) findViewById(
-                R.id.authenticatedTests);
-        authenticatedErrorsText = (TextView) findViewById(
-                R.id.authenticatedErrors);
-        postButton = (Button) findViewById(R.id.post);
-        wallPostText = (TextView) findViewById(R.id.wallPost);
-        deletedPostText = (TextView) findViewById(R.id.deletedPost);
-        logoutButton = (Button) findViewById(R.id.logout);
-        logoutText = (TextView) findViewById(R.id.logoutTest);
-               
-        // button to test UI Server login method
-        loginButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.authorize(Tests.this, PERMISSIONS,
-                        new TestLoginListener());
-            }
-        });
-        
-        // button for testing UI server publish stream dialog
-        postButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.dialog(Tests.this, "stream.publish", 
-                        new TestUiServerListener());
-            }
-        });
-        
-        // enable logout test button
-        logoutButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                runTestLogout();
-            }
-        });
-        
-        runTestPublicApi();
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        authenticatedFacebook.authorizeCallback(requestCode, resultCode, data);
-    }
-
-    public void runTestPublicApi() {
-        if (testPublicApi()) {
-            publicTestsText.setText("Public API tests passed");
-            publicTestsText.setTextColor(Color.GREEN);
-        } else {
-            publicTestsText.setText("Public API tests failed");
-            publicTestsText.setTextColor(Color.RED);
-        }
-        
-        if (testPublicErrors()) {
-            publicErrorsText.setText("Public API errors passed");
-            publicErrorsText.setTextColor(Color.GREEN);
-        } else {
-            publicErrorsText.setText("Public API errors failed");
-            publicErrorsText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testPublicApi() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Log.d("Tests", "Testing standard API call");
-            JSONObject response = Util.parseJson(fb.request("4"));
-            if (!response.getString("name").equals("Mark Zuckerberg")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing an API call with a specific method");
-            response = Util.parseJson(
-                    fb.request("soneff", new Bundle(), "GET"));
-            if (!response.getString("name").equals("Steven Soneff")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing a public search query");
-            Bundle params = new Bundle();
-            params.putString("q", "facebook");
-            response = Util.parseJson(fb.request("search", params));
-            if (response.getJSONArray("data").length() == 0) return false;
-            
-            Log.d("Tests", "Public API Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testPublicErrors() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Bundle params = new Bundle();
-            
-            Log.d("Tests", "Testing illegal post");
-            params.putString("message", "Hello World");
-            try {
-                Util.parseJson(fb.request("4", params, "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported post request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal delete");
-            try {
-                Util.parseJson(fb.request("4", new Bundle(), "DELETE"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An access token is required to request this " +
-                        "resource.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal post to Zuck's feed");
-            try {
-                Util.parseJson(fb.request("4/feed", new Bundle(), "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("(#200) The user hasn't " +
-                		"authorized the application to perform this action")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalidly specified parameters");
-            try {
-                Util.parseJson(fb.request("bgolub?fields=id,name,picture"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().startsWith("Unknown fields: picture?")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing request for 'me' is rejected without " +
-            		"access_token");
-            try {
-                Util.parseJson(fb.request("me"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An active access token must be used to " +
-                        "query information about the current user.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing empty request");
-            try {
-                Util.parseJson(fb.request(""));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported get request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing an invalid path");
-            try {
-                Util.parseJson(fb.request("invalidinvalidinvalidinvalid"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "(#803) Some of the aliases you requested do not " +
-                        "exist: invalidinvalidinvalidinvalid")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing missing query parameter");
-            try {
-                Util.parseJson(fb.request("search", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("No node specified")) return false;
-            }
-            
-            Log.d("Tests", "Testing that API method is specified");
-            try {
-                fb.request(new Bundle());
-                return false;
-            } catch (IllegalArgumentException e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "API method must be specified. " +
-                        "(parameters must contain key \"method\" " +
-                        "and value). See http://developers.facebook." +
-                        "com/docs/reference/rest/")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing that old API request cannot be made " +
-                           "without access token");
-            params.putString("method", "stream.publish");
-            try {
-                Util.parseJson(fb.request(params));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalid access token");
-            try {
-                fb.setAccessToken("invalid");
-                Util.parseJson(fb.request("me", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Invalid OAuth access token.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Public API Error Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public class TestLoginListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            if (testAuthenticatedApi()) {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests passed");
-                authenticatedTestsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests failed");
-                authenticatedTestsText.setTextColor(Color.RED);
-            }
-            if (testAuthenticatedErrors()) {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors passed");
-                authenticatedErrorsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors failed");
-                authenticatedErrorsText.setTextColor(Color.RED);
-            }
-        }
-
-        public void onCancel() {
-        }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testAuthenticatedApi() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        try {
-            Log.d("Tests", "Testing request for 'me'");
-            String response = authenticatedFacebook.request("me");
-            JSONObject obj = Util.parseJson(response);
-            if (obj.getString("name") == null || 
-                    obj.getString("name").equals("")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API wall post");
-            Bundle parameters = new Bundle();
-            parameters.putString("message", "hello world");
-            parameters.putString("description", "test test test");
-            response = authenticatedFacebook.request("me/feed", parameters, 
-                    "POST");
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API delete");
-            response = response.replaceAll("\\{\"id\":\"", "");
-            response = response.replaceAll("\"\\}", "");
-            response = authenticatedFacebook.request(response, new Bundle(), 
-                    "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "Testing old API wall post");
-            parameters = new Bundle();
-            parameters.putString("method", "stream.publish");
-            parameters.putString("attachment", 
-                "{\"name\":\"Name=Title\"," +
-                "\"href\":\"http://www.google.fr/\",\"" +
-                "caption\":\"Caption\",\"description\":\"Description" +
-                "\",\"media\":[{\"type\":\"image\",\"src\":" +
-                "\"http://www.kratiroff.com/logo-facebook.jpg\"," +
-                "\"href\":\"http://developers.facebook.com/\"}]," +
-                "\"properties\":{\"another link\":{\"text\":\"" +
-                "Facebook homepage\",\"href\":\"http://www.facebook." +
-                "com\"}}}");;
-            response = authenticatedFacebook.request(parameters);
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing wall post delete");
-            response = response.replaceAll("\"", "");
-            response = authenticatedFacebook.request(
-                    response, new Bundle(), "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "All Authenticated Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testAuthenticatedErrors() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        
-        Log.d("Tests", "Testing that request for 'me/invalid' is rejected");
-        try {
-            Util.parseJson(authenticatedFacebook.request("me/invalid"));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown path components: /invalid")) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "Testing that old API call with invalid method fails");
-        Bundle params = new Bundle();
-        params.putString("method", "something_invalid");
-        try {
-            Util.parseJson(authenticatedFacebook.request(params));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown method") ) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "All Authenticated Error Tests Passed");
-        return true;
-    }
-    
-    public class TestUiServerListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                Log.d("Facebook-Example", "Dialog Success! post_id=" + postId);
-                new AsyncFacebookRunner(authenticatedFacebook).request(postId, 
-                        new TestPostRequestListener());
-            } else {
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onCancel() { }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public class TestPostRequestListener implements RequestListener {
-        
-        public void onComplete(final String response, final Object state) {
-            Log.d("Tests", "Got response: " + response);
-            try {
-                JSONObject json = Util.parseJson(response);
-                //final String message = json.getString("message");
-                String postId = json.getString("id");
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Success");
-                        wallPostText.setTextColor(Color.GREEN);
-                    }
-                });
-                
-                Log.d("Tests", "Testing wall post delete");
-                if (testPostDelete(postId)) {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Success");
-                            deletedPostText.setTextColor(Color.GREEN);
-                        }
-                    });
-                } else {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Failure");
-                            deletedPostText.setTextColor(Color.RED);
-                        }
-                    });
-                }
-            } catch (Throwable e) {
-                e.printStackTrace();
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onFacebookError(FacebookError e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onFileNotFoundException(FileNotFoundException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onIOException(IOException e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onMalformedURLException(MalformedURLException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testPostDelete(String postId) {
-        try {
-            String deleteResponse = 
-                authenticatedFacebook.request(postId, new Bundle(), "DELETE");
-            return deleteResponse.equals("true");
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public void runTestLogout() {
-        if (testLogout()) {
-            logoutText.setText("Logout Tests Passed");
-            logoutText.setTextColor(Color.GREEN);
-        } else {
-            logoutText.setText("Logout Tests Failed");
-            logoutText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testLogout() {
-        try {
-            Log.d("Tests", "Testing logout");
-            String response = authenticatedFacebook.logout(this);
-            Log.d("Tests", "Got logout response: *" + response + "*");
-            if (!response.equals("true")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing logout on logged out facebook session");
-            try {
-                Util.parseJson(authenticatedFacebook.logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing logout on unauthenticated object");
-            try {
-                Util.parseJson(new Facebook(APP_ID).logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "All Logout Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    // test bad UI server method?
-    
-    // test invalid permission? <-- UI server test
-}
